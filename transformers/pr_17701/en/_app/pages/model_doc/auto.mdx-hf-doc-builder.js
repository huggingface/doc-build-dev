import{S as gGt,i as hGt,s as pGt,e as a,k as l,w as F,t as o,M as _Gt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as uGt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as NKr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function bGt(x){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,xL,$f,Oe,Qe,wi,Rn,$L,Pn,Bn,kL,Ai,In,SL,Li,kf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Mi=a("code"),xf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ei=a("code"),Ci=o('"new-model"'),xL=o(")."),$f=l(),Oe=a("p"),Qe=o("Likewise, if your "),wi=a("code"),Rn=o("NewModel"),$L=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),kL=o(`, make sure its
`),Ai=a("code"),In=o("config_class"),SL=o(` attribute is set to the same class you use when registering the model (here
`),Li=a("code"),kf=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var lS=s(p);m=r(lS,"NewModelConfig"),lS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var yi=s(d);h=r(yi,"PretrainedConfig"),yi.forEach(t),Eo=r(Ae,`, make sure its
`),Mi=n(Ae,"CODE",{});var iS=s(Mi);xf=r(iS,"model_type"),iS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ei=n(Ae,"CODE",{});var dS=s(Ei);Ci=r(dS,'"new-model"'),dS.forEach(t),xL=r(Ae,")."),Ae.forEach(t),$f=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),wi=n(Co,"CODE",{});var $a=s(wi);Rn=r($a,"NewModel"),$a.forEach(t),$L=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var cS=s(Pn);Bn=r(cS,"PreTrainedModel"),cS.forEach(t),kL=r(Co,`, make sure its
`),Ai=n(Co,"CODE",{});var Sf=s(Ai);In=r(Sf,"config_class"),Sf.forEach(t),SL=r(Co,` attribute is set to the same class you use when registering the model (here
`),Li=n(Co,"CODE",{});var fS=s(Li);kf=r(fS,"NewModelConfig"),fS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Mi),e(Mi,xf),e(g,at),e(g,Ei),e(Ei,Ci),e(g,xL),b(We,$f,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,wi),e(wi,Rn),e(Oe,$L),e(Oe,Pn),e(Pn,Bn),e(Oe,kL),e(Oe,Ai),e(Ai,In),e(Oe,SL),e(Oe,Li),e(Li,kf),e(Oe,xa)},d(We){We&&t(g),We&&t($f),We&&t(Oe)}}}function vGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function MGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EGt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function CGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function COt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ot(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ROt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function POt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pVt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Vt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uVt(x){let g,v,p,m,_,d,h,Eo,Mi,xf,at,Ei,Ci,xL,$f,Oe,Qe,wi,Rn,$L,Pn,Bn,kL,Ai,In,SL,Li,kf,xa,We,Ae,lS,yi,iS,dS,Co,$a,cS,Sf,fS,uQe,rOe,xi,Rf,Mte,RL,bQe,Ete,vQe,tOe,Nn,FQe,Cte,TQe,MQe,wte,EQe,CQe,aOe,PL,nOe,mS,wQe,sOe,Pf,lOe,$i,Bf,Ate,BL,AQe,Lte,LQe,iOe,wo,IL,yQe,NL,xQe,gS,$Qe,kQe,SQe,qL,RQe,yte,PQe,BQe,IQe,Ar,jL,NQe,xte,qQe,jQe,ki,DQe,$te,GQe,OQe,kte,VQe,XQe,zQe,A,If,Ste,QQe,WQe,hS,HQe,UQe,JQe,Nf,Rte,YQe,KQe,pS,ZQe,eWe,oWe,qf,Pte,rWe,tWe,_S,aWe,nWe,sWe,jf,Bte,lWe,iWe,uS,dWe,cWe,fWe,Df,Ite,mWe,gWe,bS,hWe,pWe,_We,Gf,Nte,uWe,bWe,vS,vWe,FWe,TWe,Of,qte,MWe,EWe,FS,CWe,wWe,AWe,Vf,jte,LWe,yWe,TS,xWe,$We,kWe,Xf,Dte,SWe,RWe,MS,PWe,BWe,IWe,zf,Gte,NWe,qWe,ES,jWe,DWe,GWe,Qf,Ote,OWe,VWe,CS,XWe,zWe,QWe,Wf,Vte,WWe,HWe,wS,UWe,JWe,YWe,Hf,Xte,KWe,ZWe,AS,eHe,oHe,rHe,Uf,zte,tHe,aHe,LS,nHe,sHe,lHe,Jf,Qte,iHe,dHe,yS,cHe,fHe,mHe,Yf,Wte,gHe,hHe,xS,pHe,_He,uHe,Kf,Hte,bHe,vHe,$S,FHe,THe,MHe,Zf,Ute,EHe,CHe,kS,wHe,AHe,LHe,em,Jte,yHe,xHe,SS,$He,kHe,SHe,om,Yte,RHe,PHe,RS,BHe,IHe,NHe,rm,Kte,qHe,jHe,PS,DHe,GHe,OHe,tm,Zte,VHe,XHe,BS,zHe,QHe,WHe,am,eae,HHe,UHe,IS,JHe,YHe,KHe,nm,oae,ZHe,eUe,NS,oUe,rUe,tUe,sm,rae,aUe,nUe,qS,sUe,lUe,iUe,lm,tae,dUe,cUe,jS,fUe,mUe,gUe,im,aae,hUe,pUe,DS,_Ue,uUe,bUe,dm,nae,vUe,FUe,GS,TUe,MUe,EUe,cm,sae,CUe,wUe,OS,AUe,LUe,yUe,fm,lae,xUe,$Ue,VS,kUe,SUe,RUe,mm,iae,PUe,BUe,XS,IUe,NUe,qUe,gm,dae,jUe,DUe,zS,GUe,OUe,VUe,hm,cae,XUe,zUe,QS,QUe,WUe,HUe,pm,fae,UUe,JUe,WS,YUe,KUe,ZUe,_m,mae,eJe,oJe,HS,rJe,tJe,aJe,um,gae,nJe,sJe,US,lJe,iJe,dJe,bm,hae,cJe,fJe,JS,mJe,gJe,hJe,vm,pae,pJe,_Je,YS,uJe,bJe,vJe,Fm,_ae,FJe,TJe,KS,MJe,EJe,CJe,Tm,uae,wJe,AJe,ZS,LJe,yJe,xJe,Mm,bae,$Je,kJe,eR,SJe,RJe,PJe,Em,vae,BJe,IJe,oR,NJe,qJe,jJe,Cm,Fae,DJe,GJe,rR,OJe,VJe,XJe,wm,Tae,zJe,QJe,tR,WJe,HJe,UJe,Am,Mae,JJe,YJe,aR,KJe,ZJe,eYe,Lm,Eae,oYe,rYe,nR,tYe,aYe,nYe,ym,Cae,sYe,lYe,sR,iYe,dYe,cYe,xm,wae,fYe,mYe,lR,gYe,hYe,pYe,$m,Aae,_Ye,uYe,iR,bYe,vYe,FYe,km,Lae,TYe,MYe,dR,EYe,CYe,wYe,Sm,yae,AYe,LYe,cR,yYe,xYe,$Ye,Rm,xae,kYe,SYe,fR,RYe,PYe,BYe,Pm,$ae,IYe,NYe,mR,qYe,jYe,DYe,Bm,kae,GYe,OYe,gR,VYe,XYe,zYe,Im,Sae,QYe,WYe,hR,HYe,UYe,JYe,Nm,Rae,YYe,KYe,pR,ZYe,eKe,oKe,qm,Pae,rKe,tKe,_R,aKe,nKe,sKe,jm,Bae,lKe,iKe,uR,dKe,cKe,fKe,Dm,Iae,mKe,gKe,bR,hKe,pKe,_Ke,Gm,Nae,uKe,bKe,vR,vKe,FKe,TKe,Om,qae,MKe,EKe,FR,CKe,wKe,AKe,Vm,jae,LKe,yKe,TR,xKe,$Ke,kKe,Xm,Dae,SKe,RKe,MR,PKe,BKe,IKe,zm,Gae,NKe,qKe,ER,jKe,DKe,GKe,Qm,Oae,OKe,VKe,CR,XKe,zKe,QKe,Wm,Vae,WKe,HKe,wR,UKe,JKe,YKe,Hm,Xae,KKe,ZKe,AR,eZe,oZe,rZe,Um,zae,tZe,aZe,LR,nZe,sZe,lZe,Jm,Qae,iZe,dZe,yR,cZe,fZe,mZe,Ym,Wae,gZe,hZe,xR,pZe,_Ze,uZe,Km,Hae,bZe,vZe,$R,FZe,TZe,MZe,Zm,Uae,EZe,CZe,kR,wZe,AZe,LZe,eg,Jae,yZe,xZe,SR,$Ze,kZe,SZe,og,Yae,RZe,PZe,RR,BZe,IZe,NZe,rg,Kae,qZe,jZe,PR,DZe,GZe,OZe,tg,Zae,VZe,XZe,BR,zZe,QZe,WZe,ag,ene,HZe,UZe,IR,JZe,YZe,KZe,ng,one,ZZe,eeo,NR,oeo,reo,teo,sg,rne,aeo,neo,qR,seo,leo,ieo,lg,tne,deo,ceo,jR,feo,meo,geo,ig,ane,heo,peo,DR,_eo,ueo,beo,dg,nne,veo,Feo,GR,Teo,Meo,Eeo,cg,sne,Ceo,weo,OR,Aeo,Leo,yeo,fg,lne,xeo,$eo,VR,keo,Seo,Reo,mg,ine,Peo,Beo,XR,Ieo,Neo,qeo,gg,dne,jeo,Deo,zR,Geo,Oeo,Veo,hg,cne,Xeo,zeo,QR,Qeo,Weo,Heo,pg,fne,Ueo,Jeo,WR,Yeo,Keo,Zeo,_g,mne,eoo,ooo,HR,roo,too,aoo,ug,gne,noo,soo,UR,loo,ioo,doo,bg,hne,coo,foo,JR,moo,goo,hoo,vg,pne,poo,_oo,YR,uoo,boo,voo,Fg,_ne,Foo,Too,KR,Moo,Eoo,Coo,Tg,une,woo,Aoo,ZR,Loo,yoo,xoo,Mg,bne,$oo,koo,eP,Soo,Roo,Poo,Eg,vne,Boo,Ioo,oP,Noo,qoo,joo,Cg,Fne,Doo,Goo,rP,Ooo,Voo,Xoo,wg,Tne,zoo,Qoo,tP,Woo,Hoo,Uoo,Ag,Mne,Joo,Yoo,aP,Koo,Zoo,ero,Lg,Ene,oro,rro,nP,tro,aro,nro,yg,Cne,sro,lro,sP,iro,dro,cro,xg,wne,fro,mro,lP,gro,hro,pro,$g,Ane,_ro,uro,iP,bro,vro,Fro,kg,Lne,Tro,Mro,dP,Ero,Cro,wro,Sg,yne,Aro,Lro,cP,yro,xro,$ro,Rg,xne,kro,Sro,fP,Rro,Pro,Bro,Pg,$ne,Iro,Nro,mP,qro,jro,Dro,Bg,kne,Gro,Oro,gP,Vro,Xro,zro,Ig,Sne,Qro,Wro,hP,Hro,Uro,Jro,Ng,Rne,Yro,Kro,pP,Zro,eto,oto,qg,Pne,rto,tto,_P,ato,nto,sto,jg,Bne,lto,ito,uP,dto,cto,fto,Dg,Ine,mto,gto,bP,hto,pto,_to,Gg,Nne,uto,bto,vP,vto,Fto,Tto,Og,qne,Mto,Eto,FP,Cto,wto,Ato,Vg,Lto,Xg,DL,yto,jne,xto,dOe,Si,zg,Dne,GL,$to,Gne,kto,cOe,Ao,OL,Sto,VL,Rto,TP,Pto,Bto,Ito,XL,Nto,One,qto,jto,Dto,Lr,zL,Gto,Vne,Oto,Vto,ka,Xto,Xne,zto,Qto,zne,Wto,Hto,Qne,Uto,Jto,Yto,k,qn,Wne,Kto,Zto,MP,eao,oao,EP,rao,tao,aao,jn,Hne,nao,sao,CP,lao,iao,wP,dao,cao,fao,Dn,Une,mao,gao,AP,hao,pao,LP,_ao,uao,bao,Qg,Jne,vao,Fao,yP,Tao,Mao,Eao,Gn,Yne,Cao,wao,xP,Aao,Lao,$P,yao,xao,$ao,Wg,Kne,kao,Sao,kP,Rao,Pao,Bao,Hg,Zne,Iao,Nao,SP,qao,jao,Dao,Ug,ese,Gao,Oao,RP,Vao,Xao,zao,On,ose,Qao,Wao,PP,Hao,Uao,BP,Jao,Yao,Kao,Vn,rse,Zao,eno,IP,ono,rno,NP,tno,ano,nno,Xn,tse,sno,lno,qP,ino,dno,jP,cno,fno,mno,Jg,ase,gno,hno,DP,pno,_no,uno,Yg,nse,bno,vno,GP,Fno,Tno,Mno,Kg,sse,Eno,Cno,OP,wno,Ano,Lno,zn,lse,yno,xno,VP,$no,kno,XP,Sno,Rno,Pno,Zg,ise,Bno,Ino,zP,Nno,qno,jno,Qn,dse,Dno,Gno,QP,Ono,Vno,WP,Xno,zno,Qno,Wn,cse,Wno,Hno,HP,Uno,Jno,UP,Yno,Kno,Zno,Hn,fse,eso,oso,JP,rso,tso,YP,aso,nso,sso,Un,mse,lso,iso,KP,dso,cso,ZP,fso,mso,gso,eh,gse,hso,pso,eB,_so,uso,bso,Jn,hse,vso,Fso,oB,Tso,Mso,rB,Eso,Cso,wso,Yn,pse,Aso,Lso,tB,yso,xso,aB,$so,kso,Sso,Kn,_se,Rso,Pso,nB,Bso,Iso,sB,Nso,qso,jso,Zn,use,Dso,Gso,lB,Oso,Vso,iB,Xso,zso,Qso,es,bse,Wso,Hso,dB,Uso,Jso,cB,Yso,Kso,Zso,os,vse,elo,olo,fB,rlo,tlo,mB,alo,nlo,slo,oh,Fse,llo,ilo,gB,dlo,clo,flo,rs,Tse,mlo,glo,hB,hlo,plo,pB,_lo,ulo,blo,rh,Mse,vlo,Flo,_B,Tlo,Mlo,Elo,ts,Ese,Clo,wlo,uB,Alo,Llo,bB,ylo,xlo,$lo,as,Cse,klo,Slo,vB,Rlo,Plo,FB,Blo,Ilo,Nlo,ns,wse,qlo,jlo,TB,Dlo,Glo,MB,Olo,Vlo,Xlo,th,Ase,zlo,Qlo,EB,Wlo,Hlo,Ulo,ss,Lse,Jlo,Ylo,CB,Klo,Zlo,wB,eio,oio,rio,ls,yse,tio,aio,AB,nio,sio,LB,lio,iio,dio,ah,xse,cio,fio,yB,mio,gio,hio,is,$se,pio,_io,xB,uio,bio,$B,vio,Fio,Tio,ds,kse,Mio,Eio,kB,Cio,wio,SB,Aio,Lio,yio,cs,Sse,xio,$io,RB,kio,Sio,PB,Rio,Pio,Bio,fs,Rse,Iio,Nio,BB,qio,jio,IB,Dio,Gio,Oio,ms,Pse,Vio,Xio,NB,zio,Qio,qB,Wio,Hio,Uio,gs,Bse,Jio,Yio,jB,Kio,Zio,DB,edo,odo,rdo,hs,Ise,tdo,ado,GB,ndo,sdo,OB,ldo,ido,ddo,ps,Nse,cdo,fdo,VB,mdo,gdo,XB,hdo,pdo,_do,nh,qse,udo,bdo,zB,vdo,Fdo,Tdo,_s,jse,Mdo,Edo,QB,Cdo,wdo,WB,Ado,Ldo,ydo,sh,Dse,xdo,$do,HB,kdo,Sdo,Rdo,lh,Gse,Pdo,Bdo,UB,Ido,Ndo,qdo,us,Ose,jdo,Ddo,JB,Gdo,Odo,YB,Vdo,Xdo,zdo,bs,Vse,Qdo,Wdo,KB,Hdo,Udo,ZB,Jdo,Ydo,Kdo,vs,Xse,Zdo,eco,eI,oco,rco,oI,tco,aco,nco,ih,zse,sco,lco,rI,ico,dco,cco,Fs,Qse,fco,mco,tI,gco,hco,aI,pco,_co,uco,Ts,Wse,bco,vco,nI,Fco,Tco,sI,Mco,Eco,Cco,Ms,Hse,wco,Aco,lI,Lco,yco,iI,xco,$co,kco,Es,Use,Sco,Rco,dI,Pco,Bco,cI,Ico,Nco,qco,Cs,Jse,jco,Dco,fI,Gco,Oco,mI,Vco,Xco,zco,ws,Yse,Qco,Wco,gI,Hco,Uco,hI,Jco,Yco,Kco,dh,Kse,Zco,efo,pI,ofo,rfo,tfo,As,Zse,afo,nfo,_I,sfo,lfo,uI,ifo,dfo,cfo,ch,ele,ffo,mfo,bI,gfo,hfo,pfo,fh,ole,_fo,ufo,vI,bfo,vfo,Ffo,mh,rle,Tfo,Mfo,FI,Efo,Cfo,wfo,gh,tle,Afo,Lfo,TI,yfo,xfo,$fo,Ls,ale,kfo,Sfo,MI,Rfo,Pfo,EI,Bfo,Ifo,Nfo,hh,nle,qfo,jfo,CI,Dfo,Gfo,Ofo,ys,sle,Vfo,Xfo,wI,zfo,Qfo,AI,Wfo,Hfo,Ufo,xs,lle,Jfo,Yfo,LI,Kfo,Zfo,yI,emo,omo,rmo,$s,ile,tmo,amo,xI,nmo,smo,$I,lmo,imo,dmo,ks,dle,cmo,fmo,kI,mmo,gmo,SI,hmo,pmo,_mo,Ss,cle,umo,bmo,RI,vmo,Fmo,PI,Tmo,Mmo,Emo,Rs,fle,Cmo,wmo,BI,Amo,Lmo,II,ymo,xmo,$mo,ph,mle,kmo,Smo,NI,Rmo,Pmo,Bmo,_h,gle,Imo,Nmo,qI,qmo,jmo,Dmo,Ps,hle,Gmo,Omo,jI,Vmo,Xmo,DI,zmo,Qmo,Wmo,Bs,ple,Hmo,Umo,GI,Jmo,Ymo,OI,Kmo,Zmo,ego,Is,_le,ogo,rgo,VI,tgo,ago,XI,ngo,sgo,lgo,uh,ule,igo,dgo,zI,cgo,fgo,mgo,bh,ble,ggo,hgo,QI,pgo,_go,ugo,vh,vle,bgo,vgo,WI,Fgo,Tgo,Mgo,Ns,Fle,Ego,Cgo,HI,wgo,Ago,UI,Lgo,ygo,xgo,qs,Tle,$go,kgo,JI,Sgo,Rgo,YI,Pgo,Bgo,Igo,Fh,Mle,Ngo,qgo,KI,jgo,Dgo,Ggo,Th,Ele,Ogo,Vgo,ZI,Xgo,zgo,Qgo,Mh,Cle,Wgo,Hgo,eN,Ugo,Jgo,Ygo,js,wle,Kgo,Zgo,oN,eho,oho,rN,rho,tho,aho,Eh,Ale,nho,sho,tN,lho,iho,dho,Ch,Lle,cho,fho,aN,mho,gho,hho,Ds,yle,pho,_ho,nN,uho,bho,sN,vho,Fho,Tho,Gs,xle,Mho,Eho,lN,Cho,who,iN,Aho,Lho,yho,Os,$le,xho,$ho,dN,kho,Sho,cN,Rho,Pho,Bho,Vs,kle,Iho,Nho,fN,qho,jho,mN,Dho,Gho,Oho,wh,Vho,Ah,QL,Xho,Sle,zho,fOe,Ri,Lh,Rle,WL,Qho,Ple,Who,mOe,Lo,HL,Hho,UL,Uho,gN,Jho,Yho,Kho,JL,Zho,Ble,epo,opo,rpo,He,YL,tpo,Ile,apo,npo,Sa,spo,Nle,lpo,ipo,qle,dpo,cpo,jle,fpo,mpo,gpo,Y,yh,Dle,hpo,ppo,hN,_po,upo,bpo,xh,Gle,vpo,Fpo,pN,Tpo,Mpo,Epo,$h,Ole,Cpo,wpo,_N,Apo,Lpo,ypo,kh,Vle,xpo,$po,uN,kpo,Spo,Rpo,Sh,Xle,Ppo,Bpo,bN,Ipo,Npo,qpo,Rh,zle,jpo,Dpo,vN,Gpo,Opo,Vpo,Ph,Qle,Xpo,zpo,FN,Qpo,Wpo,Hpo,Bh,Wle,Upo,Jpo,TN,Ypo,Kpo,Zpo,Ih,Hle,e_o,o_o,MN,r_o,t_o,a_o,Nh,Ule,n_o,s_o,EN,l_o,i_o,d_o,qh,Jle,c_o,f_o,CN,m_o,g_o,h_o,jh,Yle,p_o,__o,wN,u_o,b_o,v_o,Dh,Kle,F_o,T_o,AN,M_o,E_o,C_o,Gh,Zle,w_o,A_o,LN,L_o,y_o,x_o,Oh,eie,$_o,k_o,yN,S_o,R_o,P_o,Vh,oie,B_o,I_o,xN,N_o,q_o,j_o,Xh,rie,D_o,G_o,$N,O_o,V_o,X_o,zh,tie,z_o,Q_o,kN,W_o,H_o,U_o,Qh,aie,J_o,Y_o,SN,K_o,Z_o,euo,Wh,nie,ouo,ruo,RN,tuo,auo,nuo,Hh,sie,suo,luo,PN,iuo,duo,cuo,Uh,lie,fuo,muo,BN,guo,huo,puo,Jh,iie,_uo,uuo,IN,buo,vuo,Fuo,Yh,die,Tuo,Muo,NN,Euo,Cuo,wuo,Kh,cie,Auo,Luo,qN,yuo,xuo,$uo,Zh,fie,kuo,Suo,jN,Ruo,Puo,Buo,ep,mie,Iuo,Nuo,DN,quo,juo,Duo,op,gie,Guo,Ouo,GN,Vuo,Xuo,zuo,rp,hie,Quo,Wuo,ON,Huo,Uuo,Juo,tp,pie,Yuo,Kuo,VN,Zuo,e1o,o1o,ap,_ie,r1o,t1o,XN,a1o,n1o,s1o,np,uie,l1o,i1o,zN,d1o,c1o,f1o,sp,m1o,lp,g1o,ip,KL,h1o,bie,p1o,gOe,Pi,dp,vie,ZL,_1o,Fie,u1o,hOe,yo,ey,b1o,oy,v1o,QN,F1o,T1o,M1o,ry,E1o,Tie,C1o,w1o,A1o,Ue,ty,L1o,Mie,y1o,x1o,Bi,$1o,Eie,k1o,S1o,Cie,R1o,P1o,B1o,he,cp,wie,I1o,N1o,WN,q1o,j1o,D1o,fp,Aie,G1o,O1o,Lie,V1o,X1o,z1o,mp,yie,Q1o,W1o,HN,H1o,U1o,J1o,gp,xie,Y1o,K1o,UN,Z1o,e7o,o7o,hp,$ie,r7o,t7o,JN,a7o,n7o,s7o,pp,kie,l7o,i7o,YN,d7o,c7o,f7o,_p,Sie,m7o,g7o,KN,h7o,p7o,_7o,up,Rie,u7o,b7o,ZN,v7o,F7o,T7o,bp,Pie,M7o,E7o,eq,C7o,w7o,A7o,vp,Bie,L7o,y7o,oq,x7o,$7o,k7o,Fp,Iie,S7o,R7o,rq,P7o,B7o,I7o,Tp,Nie,N7o,q7o,tq,j7o,D7o,G7o,Mp,qie,O7o,V7o,aq,X7o,z7o,Q7o,Ep,jie,W7o,H7o,nq,U7o,J7o,Y7o,Cp,Die,K7o,Z7o,sq,e2o,o2o,r2o,wp,Gie,t2o,a2o,lq,n2o,s2o,l2o,Ap,Oie,i2o,d2o,iq,c2o,f2o,m2o,Lp,g2o,yp,h2o,xp,ay,p2o,Vie,_2o,pOe,Ii,$p,Xie,ny,u2o,zie,b2o,_Oe,xo,sy,v2o,Ni,F2o,dq,T2o,M2o,cq,E2o,C2o,w2o,ly,A2o,Qie,L2o,y2o,x2o,nt,iy,$2o,Wie,k2o,S2o,qi,R2o,Hie,P2o,B2o,fq,I2o,N2o,q2o,kp,j2o,Je,dy,D2o,Uie,G2o,O2o,Ra,V2o,Jie,X2o,z2o,Yie,Q2o,W2o,Kie,H2o,U2o,J2o,y,Sp,Zie,Y2o,K2o,mq,Z2o,ebo,obo,Rp,ede,rbo,tbo,gq,abo,nbo,sbo,Pp,ode,lbo,ibo,hq,dbo,cbo,fbo,Bp,rde,mbo,gbo,pq,hbo,pbo,_bo,Ip,tde,ubo,bbo,_q,vbo,Fbo,Tbo,Np,ade,Mbo,Ebo,uq,Cbo,wbo,Abo,qp,nde,Lbo,ybo,bq,xbo,$bo,kbo,jp,sde,Sbo,Rbo,vq,Pbo,Bbo,Ibo,Dp,lde,Nbo,qbo,Fq,jbo,Dbo,Gbo,Gp,ide,Obo,Vbo,Tq,Xbo,zbo,Qbo,Op,dde,Wbo,Hbo,Mq,Ubo,Jbo,Ybo,Vp,cde,Kbo,Zbo,Eq,evo,ovo,rvo,Xp,fde,tvo,avo,Cq,nvo,svo,lvo,zp,mde,ivo,dvo,wq,cvo,fvo,mvo,Qp,gde,gvo,hvo,Aq,pvo,_vo,uvo,Wp,hde,bvo,vvo,Lq,Fvo,Tvo,Mvo,Hp,pde,Evo,Cvo,yq,wvo,Avo,Lvo,Up,_de,yvo,xvo,xq,$vo,kvo,Svo,Jp,ude,Rvo,Pvo,$q,Bvo,Ivo,Nvo,Yp,bde,qvo,jvo,kq,Dvo,Gvo,Ovo,Kp,vde,Vvo,Xvo,Sq,zvo,Qvo,Wvo,Zp,Fde,Hvo,Uvo,Rq,Jvo,Yvo,Kvo,e_,Tde,Zvo,e0o,Pq,o0o,r0o,t0o,o_,Mde,a0o,n0o,Bq,s0o,l0o,i0o,r_,Ede,d0o,c0o,Iq,f0o,m0o,g0o,t_,Cde,h0o,p0o,Nq,_0o,u0o,b0o,a_,wde,v0o,F0o,qq,T0o,M0o,E0o,n_,Ade,C0o,w0o,jq,A0o,L0o,y0o,s_,Lde,x0o,$0o,Dq,k0o,S0o,R0o,l_,yde,P0o,B0o,Gq,I0o,N0o,q0o,i_,xde,j0o,D0o,Oq,G0o,O0o,V0o,d_,$de,X0o,z0o,Vq,Q0o,W0o,H0o,c_,kde,U0o,J0o,Xq,Y0o,K0o,Z0o,f_,Sde,eFo,oFo,zq,rFo,tFo,aFo,Xs,Rde,nFo,sFo,Qq,lFo,iFo,Wq,dFo,cFo,fFo,m_,Pde,mFo,gFo,Hq,hFo,pFo,_Fo,g_,Bde,uFo,bFo,Uq,vFo,FFo,TFo,h_,Ide,MFo,EFo,Jq,CFo,wFo,AFo,p_,Nde,LFo,yFo,Yq,xFo,$Fo,kFo,__,qde,SFo,RFo,Kq,PFo,BFo,IFo,u_,jde,NFo,qFo,Zq,jFo,DFo,GFo,b_,Dde,OFo,VFo,ej,XFo,zFo,QFo,v_,Gde,WFo,HFo,oj,UFo,JFo,YFo,F_,Ode,KFo,ZFo,rj,eTo,oTo,rTo,T_,Vde,tTo,aTo,tj,nTo,sTo,lTo,M_,Xde,iTo,dTo,aj,cTo,fTo,mTo,E_,zde,gTo,hTo,nj,pTo,_To,uTo,C_,Qde,bTo,vTo,sj,FTo,TTo,MTo,w_,Wde,ETo,CTo,lj,wTo,ATo,LTo,A_,Hde,yTo,xTo,ij,$To,kTo,STo,L_,Ude,RTo,PTo,dj,BTo,ITo,NTo,y_,Jde,qTo,jTo,cj,DTo,GTo,OTo,x_,Yde,VTo,XTo,fj,zTo,QTo,WTo,$_,Kde,HTo,UTo,mj,JTo,YTo,KTo,k_,Zde,ZTo,eMo,gj,oMo,rMo,tMo,S_,ece,aMo,nMo,hj,sMo,lMo,iMo,R_,oce,dMo,cMo,pj,fMo,mMo,gMo,P_,rce,hMo,pMo,_j,_Mo,uMo,bMo,B_,tce,vMo,FMo,uj,TMo,MMo,EMo,I_,ace,CMo,wMo,bj,AMo,LMo,yMo,N_,nce,xMo,$Mo,vj,kMo,SMo,RMo,q_,sce,PMo,BMo,Fj,IMo,NMo,qMo,j_,lce,jMo,DMo,Tj,GMo,OMo,VMo,D_,ice,XMo,zMo,Mj,QMo,WMo,HMo,G_,dce,UMo,JMo,Ej,YMo,KMo,ZMo,O_,cce,eEo,oEo,Cj,rEo,tEo,aEo,V_,fce,nEo,sEo,wj,lEo,iEo,dEo,X_,mce,cEo,fEo,Aj,mEo,gEo,hEo,z_,gce,pEo,_Eo,Lj,uEo,bEo,vEo,Q_,hce,FEo,TEo,yj,MEo,EEo,CEo,W_,pce,wEo,AEo,xj,LEo,yEo,xEo,H_,_ce,$Eo,kEo,$j,SEo,REo,PEo,U_,uce,BEo,IEo,kj,NEo,qEo,jEo,J_,bce,DEo,GEo,Sj,OEo,VEo,XEo,Y_,vce,zEo,QEo,Rj,WEo,HEo,UEo,K_,Fce,JEo,YEo,Pj,KEo,ZEo,e4o,Z_,Tce,o4o,r4o,Bj,t4o,a4o,n4o,eu,Mce,s4o,l4o,Ij,i4o,d4o,c4o,ou,Ece,f4o,m4o,Nj,g4o,h4o,p4o,ru,Cce,_4o,u4o,qj,b4o,v4o,F4o,tu,wce,T4o,M4o,jj,E4o,C4o,w4o,au,Ace,A4o,L4o,Dj,y4o,x4o,$4o,nu,Lce,k4o,S4o,Gj,R4o,P4o,B4o,su,yce,I4o,N4o,Oj,q4o,j4o,D4o,lu,xce,G4o,O4o,Vj,V4o,X4o,z4o,iu,$ce,Q4o,W4o,Xj,H4o,U4o,J4o,du,kce,Y4o,K4o,zj,Z4o,eCo,oCo,cu,Sce,rCo,tCo,Qj,aCo,nCo,sCo,fu,Rce,lCo,iCo,Wj,dCo,cCo,fCo,mu,Pce,mCo,gCo,Hj,hCo,pCo,_Co,gu,Bce,uCo,bCo,Uj,vCo,FCo,TCo,hu,Ice,MCo,ECo,Jj,CCo,wCo,ACo,pu,Nce,LCo,yCo,Yj,xCo,$Co,kCo,_u,qce,SCo,RCo,Kj,PCo,BCo,ICo,uu,jce,NCo,qCo,Zj,jCo,DCo,GCo,bu,Dce,OCo,VCo,eD,XCo,zCo,QCo,vu,Gce,WCo,HCo,oD,UCo,JCo,YCo,Fu,Oce,KCo,ZCo,rD,e5o,o5o,r5o,Tu,Vce,t5o,a5o,tD,n5o,s5o,l5o,Mu,Xce,i5o,d5o,aD,c5o,f5o,m5o,Eu,zce,g5o,h5o,nD,p5o,_5o,u5o,Cu,Qce,b5o,v5o,sD,F5o,T5o,M5o,wu,Wce,E5o,C5o,lD,w5o,A5o,L5o,Au,Hce,y5o,x5o,iD,$5o,k5o,S5o,Lu,Uce,R5o,P5o,dD,B5o,I5o,N5o,yu,Jce,q5o,j5o,cD,D5o,G5o,O5o,xu,Yce,V5o,X5o,fD,z5o,Q5o,W5o,$u,Kce,H5o,U5o,mD,J5o,Y5o,K5o,ku,Z5o,Zce,e3o,o3o,efe,r3o,t3o,Su,uOe,ji,Ru,ofe,cy,a3o,rfe,n3o,bOe,$o,fy,s3o,Di,l3o,gD,i3o,d3o,hD,c3o,f3o,m3o,my,g3o,tfe,h3o,p3o,_3o,st,gy,u3o,afe,b3o,v3o,Gi,F3o,nfe,T3o,M3o,pD,E3o,C3o,w3o,Pu,A3o,Ye,hy,L3o,sfe,y3o,x3o,Pa,$3o,lfe,k3o,S3o,ife,R3o,P3o,dfe,B3o,I3o,N3o,G,Bu,cfe,q3o,j3o,_D,D3o,G3o,O3o,Iu,ffe,V3o,X3o,uD,z3o,Q3o,W3o,Nu,mfe,H3o,U3o,bD,J3o,Y3o,K3o,qu,gfe,Z3o,ewo,vD,owo,rwo,two,ju,hfe,awo,nwo,FD,swo,lwo,iwo,Du,pfe,dwo,cwo,TD,fwo,mwo,gwo,Gu,_fe,hwo,pwo,MD,_wo,uwo,bwo,Ou,ufe,vwo,Fwo,ED,Two,Mwo,Ewo,Vu,bfe,Cwo,wwo,CD,Awo,Lwo,ywo,Xu,vfe,xwo,$wo,wD,kwo,Swo,Rwo,zu,Ffe,Pwo,Bwo,AD,Iwo,Nwo,qwo,Qu,Tfe,jwo,Dwo,LD,Gwo,Owo,Vwo,Wu,Mfe,Xwo,zwo,yD,Qwo,Wwo,Hwo,Hu,Efe,Uwo,Jwo,xD,Ywo,Kwo,Zwo,Uu,Cfe,eAo,oAo,$D,rAo,tAo,aAo,Ju,wfe,nAo,sAo,kD,lAo,iAo,dAo,Yu,Afe,cAo,fAo,SD,mAo,gAo,hAo,Ku,Lfe,pAo,_Ao,RD,uAo,bAo,vAo,Zu,yfe,FAo,TAo,PD,MAo,EAo,CAo,e1,xfe,wAo,AAo,BD,LAo,yAo,xAo,o1,$fe,$Ao,kAo,ID,SAo,RAo,PAo,r1,kfe,BAo,IAo,ND,NAo,qAo,jAo,t1,Sfe,DAo,GAo,qD,OAo,VAo,XAo,a1,Rfe,zAo,QAo,jD,WAo,HAo,UAo,n1,Pfe,JAo,YAo,DD,KAo,ZAo,e6o,s1,Bfe,o6o,r6o,GD,t6o,a6o,n6o,l1,Ife,s6o,l6o,OD,i6o,d6o,c6o,i1,Nfe,f6o,m6o,VD,g6o,h6o,p6o,d1,qfe,_6o,u6o,XD,b6o,v6o,F6o,c1,jfe,T6o,M6o,zD,E6o,C6o,w6o,f1,Dfe,A6o,L6o,QD,y6o,x6o,$6o,m1,Gfe,k6o,S6o,WD,R6o,P6o,B6o,g1,Ofe,I6o,N6o,HD,q6o,j6o,D6o,h1,Vfe,G6o,O6o,UD,V6o,X6o,z6o,p1,Xfe,Q6o,W6o,JD,H6o,U6o,J6o,_1,zfe,Y6o,K6o,YD,Z6o,eLo,oLo,u1,Qfe,rLo,tLo,KD,aLo,nLo,sLo,b1,Wfe,lLo,iLo,ZD,dLo,cLo,fLo,v1,Hfe,mLo,gLo,eG,hLo,pLo,_Lo,F1,Ufe,uLo,bLo,oG,vLo,FLo,TLo,T1,Jfe,MLo,ELo,rG,CLo,wLo,ALo,M1,Yfe,LLo,yLo,tG,xLo,$Lo,kLo,E1,Kfe,SLo,RLo,aG,PLo,BLo,ILo,C1,Zfe,NLo,qLo,nG,jLo,DLo,GLo,w1,OLo,eme,VLo,XLo,ome,zLo,QLo,A1,vOe,Oi,L1,rme,py,WLo,tme,HLo,FOe,ko,_y,ULo,Vi,JLo,sG,YLo,KLo,lG,ZLo,eyo,oyo,uy,ryo,ame,tyo,ayo,nyo,lt,by,syo,nme,lyo,iyo,Xi,dyo,sme,cyo,fyo,iG,myo,gyo,hyo,y1,pyo,Ke,vy,_yo,lme,uyo,byo,Ba,vyo,ime,Fyo,Tyo,dme,Myo,Eyo,cme,Cyo,wyo,Ayo,z,x1,fme,Lyo,yyo,dG,xyo,$yo,kyo,$1,mme,Syo,Ryo,cG,Pyo,Byo,Iyo,k1,gme,Nyo,qyo,fG,jyo,Dyo,Gyo,S1,hme,Oyo,Vyo,mG,Xyo,zyo,Qyo,R1,pme,Wyo,Hyo,gG,Uyo,Jyo,Yyo,P1,_me,Kyo,Zyo,hG,e8o,o8o,r8o,B1,ume,t8o,a8o,pG,n8o,s8o,l8o,I1,bme,i8o,d8o,_G,c8o,f8o,m8o,N1,vme,g8o,h8o,uG,p8o,_8o,u8o,q1,Fme,b8o,v8o,bG,F8o,T8o,M8o,j1,Tme,E8o,C8o,vG,w8o,A8o,L8o,D1,Mme,y8o,x8o,FG,$8o,k8o,S8o,G1,Eme,R8o,P8o,TG,B8o,I8o,N8o,O1,Cme,q8o,j8o,MG,D8o,G8o,O8o,V1,wme,V8o,X8o,EG,z8o,Q8o,W8o,X1,Ame,H8o,U8o,CG,J8o,Y8o,K8o,z1,Lme,Z8o,e9o,wG,o9o,r9o,t9o,Q1,yme,a9o,n9o,AG,s9o,l9o,i9o,W1,xme,d9o,c9o,LG,f9o,m9o,g9o,H1,$me,h9o,p9o,yG,_9o,u9o,b9o,U1,kme,v9o,F9o,xG,T9o,M9o,E9o,J1,Sme,C9o,w9o,$G,A9o,L9o,y9o,Y1,Rme,x9o,$9o,kG,k9o,S9o,R9o,K1,Pme,P9o,B9o,SG,I9o,N9o,q9o,Z1,Bme,j9o,D9o,RG,G9o,O9o,V9o,e7,Ime,X9o,z9o,PG,Q9o,W9o,H9o,o7,Nme,U9o,J9o,BG,Y9o,K9o,Z9o,r7,qme,exo,oxo,IG,rxo,txo,axo,t7,jme,nxo,sxo,NG,lxo,ixo,dxo,a7,Dme,cxo,fxo,qG,mxo,gxo,hxo,n7,Gme,pxo,_xo,jG,uxo,bxo,vxo,s7,Ome,Fxo,Txo,DG,Mxo,Exo,Cxo,l7,Vme,wxo,Axo,GG,Lxo,yxo,xxo,i7,Xme,$xo,kxo,OG,Sxo,Rxo,Pxo,d7,zme,Bxo,Ixo,VG,Nxo,qxo,jxo,c7,Qme,Dxo,Gxo,XG,Oxo,Vxo,Xxo,f7,Wme,zxo,Qxo,zG,Wxo,Hxo,Uxo,m7,Hme,Jxo,Yxo,QG,Kxo,Zxo,e$o,g7,Ume,o$o,r$o,WG,t$o,a$o,n$o,h7,s$o,Jme,l$o,i$o,Yme,d$o,c$o,p7,TOe,zi,_7,Kme,Fy,f$o,Zme,m$o,MOe,So,Ty,g$o,Qi,h$o,HG,p$o,_$o,UG,u$o,b$o,v$o,My,F$o,ege,T$o,M$o,E$o,it,Ey,C$o,oge,w$o,A$o,Wi,L$o,rge,y$o,x$o,JG,$$o,k$o,S$o,u7,R$o,Ze,Cy,P$o,tge,B$o,I$o,Ia,N$o,age,q$o,j$o,nge,D$o,G$o,sge,O$o,V$o,X$o,W,b7,lge,z$o,Q$o,YG,W$o,H$o,U$o,v7,ige,J$o,Y$o,KG,K$o,Z$o,eko,F7,dge,oko,rko,ZG,tko,ako,nko,T7,cge,sko,lko,eO,iko,dko,cko,M7,fge,fko,mko,oO,gko,hko,pko,E7,mge,_ko,uko,rO,bko,vko,Fko,C7,gge,Tko,Mko,tO,Eko,Cko,wko,w7,hge,Ako,Lko,aO,yko,xko,$ko,A7,pge,kko,Sko,nO,Rko,Pko,Bko,L7,_ge,Iko,Nko,sO,qko,jko,Dko,y7,uge,Gko,Oko,lO,Vko,Xko,zko,x7,bge,Qko,Wko,iO,Hko,Uko,Jko,$7,vge,Yko,Kko,dO,Zko,eSo,oSo,k7,Fge,rSo,tSo,cO,aSo,nSo,sSo,S7,Tge,lSo,iSo,fO,dSo,cSo,fSo,R7,Mge,mSo,gSo,mO,hSo,pSo,_So,P7,Ege,uSo,bSo,gO,vSo,FSo,TSo,B7,Cge,MSo,ESo,hO,CSo,wSo,ASo,I7,wge,LSo,ySo,pO,xSo,$So,kSo,N7,Age,SSo,RSo,_O,PSo,BSo,ISo,q7,Lge,NSo,qSo,uO,jSo,DSo,GSo,j7,yge,OSo,VSo,bO,XSo,zSo,QSo,D7,xge,WSo,HSo,vO,USo,JSo,YSo,G7,$ge,KSo,ZSo,FO,eRo,oRo,rRo,O7,kge,tRo,aRo,TO,nRo,sRo,lRo,V7,Sge,iRo,dRo,MO,cRo,fRo,mRo,X7,Rge,gRo,hRo,EO,pRo,_Ro,uRo,z7,Pge,bRo,vRo,CO,FRo,TRo,MRo,Q7,Bge,ERo,CRo,wO,wRo,ARo,LRo,W7,Ige,yRo,xRo,AO,$Ro,kRo,SRo,H7,Nge,RRo,PRo,LO,BRo,IRo,NRo,U7,qge,qRo,jRo,yO,DRo,GRo,ORo,J7,jge,VRo,XRo,Dge,zRo,QRo,WRo,Y7,Gge,HRo,URo,xO,JRo,YRo,KRo,K7,Oge,ZRo,ePo,$O,oPo,rPo,tPo,Z7,Vge,aPo,nPo,kO,sPo,lPo,iPo,e2,Xge,dPo,cPo,SO,fPo,mPo,gPo,o2,hPo,zge,pPo,_Po,Qge,uPo,bPo,r2,EOe,Hi,t2,Wge,wy,vPo,Hge,FPo,COe,Ro,Ay,TPo,Ui,MPo,RO,EPo,CPo,PO,wPo,APo,LPo,Ly,yPo,Uge,xPo,$Po,kPo,dt,yy,SPo,Jge,RPo,PPo,Ji,BPo,Yge,IPo,NPo,BO,qPo,jPo,DPo,a2,GPo,eo,xy,OPo,Kge,VPo,XPo,Na,zPo,Zge,QPo,WPo,ehe,HPo,UPo,ohe,JPo,YPo,KPo,pe,n2,rhe,ZPo,eBo,IO,oBo,rBo,tBo,s2,the,aBo,nBo,NO,sBo,lBo,iBo,l2,ahe,dBo,cBo,qO,fBo,mBo,gBo,i2,nhe,hBo,pBo,jO,_Bo,uBo,bBo,d2,she,vBo,FBo,DO,TBo,MBo,EBo,c2,lhe,CBo,wBo,GO,ABo,LBo,yBo,f2,ihe,xBo,$Bo,OO,kBo,SBo,RBo,m2,dhe,PBo,BBo,VO,IBo,NBo,qBo,g2,che,jBo,DBo,XO,GBo,OBo,VBo,h2,fhe,XBo,zBo,zO,QBo,WBo,HBo,p2,mhe,UBo,JBo,QO,YBo,KBo,ZBo,_2,ghe,eIo,oIo,WO,rIo,tIo,aIo,u2,hhe,nIo,sIo,HO,lIo,iIo,dIo,b2,phe,cIo,fIo,UO,mIo,gIo,hIo,v2,_he,pIo,_Io,JO,uIo,bIo,vIo,F2,uhe,FIo,TIo,YO,MIo,EIo,CIo,T2,bhe,wIo,AIo,KO,LIo,yIo,xIo,M2,$Io,vhe,kIo,SIo,Fhe,RIo,PIo,E2,wOe,Yi,C2,The,$y,BIo,Mhe,IIo,AOe,Po,ky,NIo,Ki,qIo,ZO,jIo,DIo,eV,GIo,OIo,VIo,Sy,XIo,Ehe,zIo,QIo,WIo,ct,Ry,HIo,Che,UIo,JIo,Zi,YIo,whe,KIo,ZIo,oV,eNo,oNo,rNo,w2,tNo,oo,Py,aNo,Ahe,nNo,sNo,qa,lNo,Lhe,iNo,dNo,yhe,cNo,fNo,xhe,mNo,gNo,hNo,N,A2,$he,pNo,_No,rV,uNo,bNo,vNo,L2,khe,FNo,TNo,tV,MNo,ENo,CNo,y2,She,wNo,ANo,aV,LNo,yNo,xNo,x2,Rhe,$No,kNo,nV,SNo,RNo,PNo,$2,Phe,BNo,INo,sV,NNo,qNo,jNo,k2,Bhe,DNo,GNo,lV,ONo,VNo,XNo,S2,Ihe,zNo,QNo,iV,WNo,HNo,UNo,R2,Nhe,JNo,YNo,dV,KNo,ZNo,eqo,P2,qhe,oqo,rqo,cV,tqo,aqo,nqo,B2,jhe,sqo,lqo,fV,iqo,dqo,cqo,I2,Dhe,fqo,mqo,mV,gqo,hqo,pqo,N2,Ghe,_qo,uqo,gV,bqo,vqo,Fqo,q2,Ohe,Tqo,Mqo,hV,Eqo,Cqo,wqo,j2,Vhe,Aqo,Lqo,pV,yqo,xqo,$qo,D2,Xhe,kqo,Sqo,_V,Rqo,Pqo,Bqo,G2,zhe,Iqo,Nqo,uV,qqo,jqo,Dqo,O2,Qhe,Gqo,Oqo,bV,Vqo,Xqo,zqo,V2,Whe,Qqo,Wqo,vV,Hqo,Uqo,Jqo,X2,Hhe,Yqo,Kqo,FV,Zqo,ejo,ojo,z2,Uhe,rjo,tjo,TV,ajo,njo,sjo,Q2,Jhe,ljo,ijo,MV,djo,cjo,fjo,W2,Yhe,mjo,gjo,EV,hjo,pjo,_jo,H2,Khe,ujo,bjo,CV,vjo,Fjo,Tjo,U2,Zhe,Mjo,Ejo,wV,Cjo,wjo,Ajo,J2,epe,Ljo,yjo,AV,xjo,$jo,kjo,Y2,ope,Sjo,Rjo,LV,Pjo,Bjo,Ijo,K2,rpe,Njo,qjo,yV,jjo,Djo,Gjo,Z2,tpe,Ojo,Vjo,xV,Xjo,zjo,Qjo,eb,ape,Wjo,Hjo,$V,Ujo,Jjo,Yjo,ob,npe,Kjo,Zjo,kV,eDo,oDo,rDo,rb,spe,tDo,aDo,SV,nDo,sDo,lDo,tb,lpe,iDo,dDo,RV,cDo,fDo,mDo,ab,ipe,gDo,hDo,PV,pDo,_Do,uDo,nb,dpe,bDo,vDo,BV,FDo,TDo,MDo,sb,cpe,EDo,CDo,IV,wDo,ADo,LDo,lb,fpe,yDo,xDo,NV,$Do,kDo,SDo,ib,mpe,RDo,PDo,qV,BDo,IDo,NDo,db,gpe,qDo,jDo,jV,DDo,GDo,ODo,cb,hpe,VDo,XDo,DV,zDo,QDo,WDo,fb,ppe,HDo,UDo,GV,JDo,YDo,KDo,mb,_pe,ZDo,eGo,OV,oGo,rGo,tGo,gb,upe,aGo,nGo,VV,sGo,lGo,iGo,hb,bpe,dGo,cGo,XV,fGo,mGo,gGo,pb,vpe,hGo,pGo,zV,_Go,uGo,bGo,_b,Fpe,vGo,FGo,QV,TGo,MGo,EGo,ub,Tpe,CGo,wGo,WV,AGo,LGo,yGo,bb,Mpe,xGo,$Go,HV,kGo,SGo,RGo,vb,Epe,PGo,BGo,UV,IGo,NGo,qGo,Fb,Cpe,jGo,DGo,JV,GGo,OGo,VGo,Tb,XGo,wpe,zGo,QGo,Ape,WGo,HGo,Mb,LOe,ed,Eb,Lpe,By,UGo,ype,JGo,yOe,Bo,Iy,YGo,od,KGo,YV,ZGo,eOo,KV,oOo,rOo,tOo,Ny,aOo,xpe,nOo,sOo,lOo,ft,qy,iOo,$pe,dOo,cOo,rd,fOo,kpe,mOo,gOo,ZV,hOo,pOo,_Oo,Cb,uOo,ro,jy,bOo,Spe,vOo,FOo,ja,TOo,Rpe,MOo,EOo,Ppe,COo,wOo,Bpe,AOo,LOo,yOo,Z,wb,Ipe,xOo,$Oo,eX,kOo,SOo,ROo,Ab,Npe,POo,BOo,oX,IOo,NOo,qOo,Lb,qpe,jOo,DOo,rX,GOo,OOo,VOo,yb,jpe,XOo,zOo,tX,QOo,WOo,HOo,xb,Dpe,UOo,JOo,aX,YOo,KOo,ZOo,$b,Gpe,eVo,oVo,nX,rVo,tVo,aVo,kb,Ope,nVo,sVo,sX,lVo,iVo,dVo,Sb,Vpe,cVo,fVo,lX,mVo,gVo,hVo,Rb,Xpe,pVo,_Vo,iX,uVo,bVo,vVo,Pb,zpe,FVo,TVo,dX,MVo,EVo,CVo,Bb,Qpe,wVo,AVo,cX,LVo,yVo,xVo,Ib,Wpe,$Vo,kVo,fX,SVo,RVo,PVo,Nb,Hpe,BVo,IVo,mX,NVo,qVo,jVo,qb,Upe,DVo,GVo,gX,OVo,VVo,XVo,jb,Jpe,zVo,QVo,hX,WVo,HVo,UVo,Db,Ype,JVo,YVo,pX,KVo,ZVo,eXo,Gb,Kpe,oXo,rXo,_X,tXo,aXo,nXo,Ob,Zpe,sXo,lXo,uX,iXo,dXo,cXo,Vb,e_e,fXo,mXo,bX,gXo,hXo,pXo,Xb,o_e,_Xo,uXo,vX,bXo,vXo,FXo,zb,r_e,TXo,MXo,FX,EXo,CXo,wXo,Qb,t_e,AXo,LXo,TX,yXo,xXo,$Xo,Wb,a_e,kXo,SXo,MX,RXo,PXo,BXo,Hb,n_e,IXo,NXo,EX,qXo,jXo,DXo,Ub,s_e,GXo,OXo,CX,VXo,XXo,zXo,Jb,l_e,QXo,WXo,wX,HXo,UXo,JXo,Yb,i_e,YXo,KXo,AX,ZXo,ezo,ozo,Kb,d_e,rzo,tzo,LX,azo,nzo,szo,Zb,c_e,lzo,izo,yX,dzo,czo,fzo,ev,f_e,mzo,gzo,xX,hzo,pzo,_zo,ov,uzo,m_e,bzo,vzo,g_e,Fzo,Tzo,rv,xOe,td,tv,h_e,Dy,Mzo,p_e,Ezo,$Oe,Io,Gy,Czo,ad,wzo,$X,Azo,Lzo,kX,yzo,xzo,$zo,Oy,kzo,__e,Szo,Rzo,Pzo,mt,Vy,Bzo,u_e,Izo,Nzo,nd,qzo,b_e,jzo,Dzo,SX,Gzo,Ozo,Vzo,av,Xzo,to,Xy,zzo,v_e,Qzo,Wzo,Da,Hzo,F_e,Uzo,Jzo,T_e,Yzo,Kzo,M_e,Zzo,eQo,oQo,No,nv,E_e,rQo,tQo,RX,aQo,nQo,sQo,sv,C_e,lQo,iQo,PX,dQo,cQo,fQo,lv,w_e,mQo,gQo,BX,hQo,pQo,_Qo,iv,A_e,uQo,bQo,IX,vQo,FQo,TQo,dv,L_e,MQo,EQo,NX,CQo,wQo,AQo,cv,y_e,LQo,yQo,qX,xQo,$Qo,kQo,fv,SQo,x_e,RQo,PQo,$_e,BQo,IQo,mv,kOe,sd,gv,k_e,zy,NQo,S_e,qQo,SOe,qo,Qy,jQo,ld,DQo,jX,GQo,OQo,DX,VQo,XQo,zQo,Wy,QQo,R_e,WQo,HQo,UQo,gt,Hy,JQo,P_e,YQo,KQo,id,ZQo,B_e,eWo,oWo,GX,rWo,tWo,aWo,hv,nWo,ao,Uy,sWo,I_e,lWo,iWo,Ga,dWo,N_e,cWo,fWo,q_e,mWo,gWo,j_e,hWo,pWo,_Wo,H,pv,D_e,uWo,bWo,OX,vWo,FWo,TWo,_v,G_e,MWo,EWo,VX,CWo,wWo,AWo,uv,O_e,LWo,yWo,XX,xWo,$Wo,kWo,bv,V_e,SWo,RWo,zX,PWo,BWo,IWo,vv,X_e,NWo,qWo,QX,jWo,DWo,GWo,Fv,z_e,OWo,VWo,WX,XWo,zWo,QWo,Tv,Q_e,WWo,HWo,HX,UWo,JWo,YWo,Mv,W_e,KWo,ZWo,UX,eHo,oHo,rHo,Ev,H_e,tHo,aHo,JX,nHo,sHo,lHo,Cv,U_e,iHo,dHo,YX,cHo,fHo,mHo,wv,J_e,gHo,hHo,KX,pHo,_Ho,uHo,Av,Y_e,bHo,vHo,ZX,FHo,THo,MHo,Lv,K_e,EHo,CHo,ez,wHo,AHo,LHo,yv,Z_e,yHo,xHo,oz,$Ho,kHo,SHo,xv,eue,RHo,PHo,rz,BHo,IHo,NHo,$v,oue,qHo,jHo,tz,DHo,GHo,OHo,kv,rue,VHo,XHo,az,zHo,QHo,WHo,Sv,tue,HHo,UHo,nz,JHo,YHo,KHo,Rv,aue,ZHo,eUo,sz,oUo,rUo,tUo,Pv,nue,aUo,nUo,lz,sUo,lUo,iUo,Bv,sue,dUo,cUo,iz,fUo,mUo,gUo,Iv,lue,hUo,pUo,dz,_Uo,uUo,bUo,Nv,iue,vUo,FUo,cz,TUo,MUo,EUo,qv,due,CUo,wUo,fz,AUo,LUo,yUo,jv,cue,xUo,$Uo,mz,kUo,SUo,RUo,Dv,fue,PUo,BUo,gz,IUo,NUo,qUo,Gv,mue,jUo,DUo,hz,GUo,OUo,VUo,Ov,gue,XUo,zUo,pz,QUo,WUo,HUo,Vv,hue,UUo,JUo,_z,YUo,KUo,ZUo,Xv,pue,eJo,oJo,uz,rJo,tJo,aJo,zv,_ue,nJo,sJo,bz,lJo,iJo,dJo,Qv,uue,cJo,fJo,vz,mJo,gJo,hJo,Wv,bue,pJo,_Jo,Fz,uJo,bJo,vJo,Hv,vue,FJo,TJo,Tz,MJo,EJo,CJo,Uv,Fue,wJo,AJo,Mz,LJo,yJo,xJo,Jv,Tue,$Jo,kJo,Ez,SJo,RJo,PJo,Yv,BJo,Mue,IJo,NJo,Eue,qJo,jJo,Kv,ROe,dd,Zv,Cue,Jy,DJo,wue,GJo,POe,jo,Yy,OJo,cd,VJo,Cz,XJo,zJo,wz,QJo,WJo,HJo,Ky,UJo,Aue,JJo,YJo,KJo,ht,Zy,ZJo,Lue,eYo,oYo,fd,rYo,yue,tYo,aYo,Az,nYo,sYo,lYo,e0,iYo,no,e8,dYo,xue,cYo,fYo,Oa,mYo,$ue,gYo,hYo,kue,pYo,_Yo,Sue,uYo,bYo,vYo,V,o0,Rue,FYo,TYo,Lz,MYo,EYo,CYo,r0,Pue,wYo,AYo,yz,LYo,yYo,xYo,t0,Bue,$Yo,kYo,xz,SYo,RYo,PYo,a0,Iue,BYo,IYo,$z,NYo,qYo,jYo,n0,Nue,DYo,GYo,kz,OYo,VYo,XYo,s0,que,zYo,QYo,Sz,WYo,HYo,UYo,l0,jue,JYo,YYo,Rz,KYo,ZYo,eKo,i0,Due,oKo,rKo,Pz,tKo,aKo,nKo,d0,Gue,sKo,lKo,Bz,iKo,dKo,cKo,c0,Oue,fKo,mKo,Iz,gKo,hKo,pKo,f0,Vue,_Ko,uKo,Nz,bKo,vKo,FKo,m0,Xue,TKo,MKo,qz,EKo,CKo,wKo,g0,zue,AKo,LKo,jz,yKo,xKo,$Ko,h0,Que,kKo,SKo,Dz,RKo,PKo,BKo,p0,Wue,IKo,NKo,Gz,qKo,jKo,DKo,_0,Hue,GKo,OKo,Oz,VKo,XKo,zKo,u0,Uue,QKo,WKo,Vz,HKo,UKo,JKo,b0,Jue,YKo,KKo,Xz,ZKo,eZo,oZo,v0,Yue,rZo,tZo,zz,aZo,nZo,sZo,F0,Kue,lZo,iZo,Qz,dZo,cZo,fZo,T0,Zue,mZo,gZo,Wz,hZo,pZo,_Zo,M0,e1e,uZo,bZo,Hz,vZo,FZo,TZo,E0,o1e,MZo,EZo,Uz,CZo,wZo,AZo,C0,r1e,LZo,yZo,Jz,xZo,$Zo,kZo,w0,t1e,SZo,RZo,Yz,PZo,BZo,IZo,A0,a1e,NZo,qZo,Kz,jZo,DZo,GZo,L0,n1e,OZo,VZo,Zz,XZo,zZo,QZo,y0,s1e,WZo,HZo,eQ,UZo,JZo,YZo,x0,l1e,KZo,ZZo,oQ,eer,oer,rer,$0,i1e,ter,aer,rQ,ner,ser,ler,k0,d1e,ier,der,tQ,cer,fer,mer,S0,c1e,ger,her,aQ,per,_er,uer,R0,f1e,ber,ver,nQ,Fer,Ter,Mer,P0,m1e,Eer,Cer,sQ,wer,Aer,Ler,B0,g1e,yer,xer,lQ,$er,ker,Ser,I0,h1e,Rer,Per,iQ,Ber,Ier,Ner,N0,p1e,qer,jer,dQ,Der,Ger,Oer,q0,_1e,Ver,Xer,cQ,zer,Qer,Wer,j0,u1e,Her,Uer,fQ,Jer,Yer,Ker,D0,b1e,Zer,eor,mQ,oor,ror,tor,G0,v1e,aor,nor,gQ,sor,lor,ior,O0,dor,F1e,cor,mor,T1e,gor,hor,V0,BOe,md,X0,M1e,o8,por,E1e,_or,IOe,Do,r8,uor,gd,bor,hQ,vor,For,pQ,Tor,Mor,Eor,t8,Cor,C1e,wor,Aor,Lor,pt,a8,yor,w1e,xor,$or,hd,kor,A1e,Sor,Ror,_Q,Por,Bor,Ior,z0,Nor,so,n8,qor,L1e,jor,Dor,Va,Gor,y1e,Oor,Vor,x1e,Xor,zor,$1e,Qor,Wor,Hor,k1e,Q0,S1e,Uor,Jor,uQ,Yor,Kor,Zor,W0,err,R1e,orr,rrr,P1e,trr,arr,H0,NOe,pd,U0,B1e,s8,nrr,I1e,srr,qOe,Go,l8,lrr,_d,irr,bQ,drr,crr,vQ,frr,mrr,grr,i8,hrr,N1e,prr,_rr,urr,_t,d8,brr,q1e,vrr,Frr,ud,Trr,j1e,Mrr,Err,FQ,Crr,wrr,Arr,J0,Lrr,lo,c8,yrr,D1e,xrr,$rr,Xa,krr,G1e,Srr,Rrr,O1e,Prr,Brr,V1e,Irr,Nrr,qrr,Fe,Y0,X1e,jrr,Drr,TQ,Grr,Orr,Vrr,K0,z1e,Xrr,zrr,MQ,Qrr,Wrr,Hrr,Z0,Q1e,Urr,Jrr,EQ,Yrr,Krr,Zrr,eF,W1e,etr,otr,CQ,rtr,ttr,atr,zs,H1e,ntr,str,wQ,ltr,itr,AQ,dtr,ctr,ftr,oF,U1e,mtr,gtr,LQ,htr,ptr,_tr,Qs,J1e,utr,btr,yQ,vtr,Ftr,xQ,Ttr,Mtr,Etr,ut,Y1e,Ctr,wtr,$Q,Atr,Ltr,kQ,ytr,xtr,SQ,$tr,ktr,Str,rF,K1e,Rtr,Ptr,RQ,Btr,Itr,Ntr,tF,Z1e,qtr,jtr,PQ,Dtr,Gtr,Otr,aF,e7e,Vtr,Xtr,BQ,ztr,Qtr,Wtr,nF,o7e,Htr,Utr,IQ,Jtr,Ytr,Ktr,sF,r7e,Ztr,ear,NQ,oar,rar,tar,lF,t7e,aar,nar,qQ,sar,lar,iar,iF,a7e,dar,car,jQ,far,mar,gar,dF,har,n7e,par,_ar,s7e,uar,bar,cF,jOe,bd,fF,l7e,f8,Far,i7e,Tar,DOe,Oo,m8,Mar,vd,Ear,DQ,Car,war,GQ,Aar,Lar,yar,g8,xar,d7e,$ar,kar,Sar,bt,h8,Rar,c7e,Par,Bar,Fd,Iar,f7e,Nar,qar,OQ,jar,Dar,Gar,mF,Oar,io,p8,Var,m7e,Xar,zar,za,Qar,g7e,War,Har,h7e,Uar,Jar,p7e,Yar,Kar,Zar,_7e,gF,u7e,enr,onr,VQ,rnr,tnr,anr,hF,nnr,b7e,snr,lnr,v7e,inr,dnr,pF,GOe,Td,_F,F7e,_8,cnr,T7e,fnr,OOe,Vo,u8,mnr,Md,gnr,XQ,hnr,pnr,zQ,_nr,unr,bnr,b8,vnr,M7e,Fnr,Tnr,Mnr,vt,v8,Enr,E7e,Cnr,wnr,Ed,Anr,C7e,Lnr,ynr,QQ,xnr,$nr,knr,uF,Snr,co,F8,Rnr,w7e,Pnr,Bnr,Qa,Inr,A7e,Nnr,qnr,L7e,jnr,Dnr,y7e,Gnr,Onr,Vnr,x7e,bF,$7e,Xnr,znr,WQ,Qnr,Wnr,Hnr,vF,Unr,k7e,Jnr,Ynr,S7e,Knr,Znr,FF,VOe,Cd,TF,R7e,T8,esr,P7e,osr,XOe,Xo,M8,rsr,wd,tsr,HQ,asr,nsr,UQ,ssr,lsr,isr,E8,dsr,B7e,csr,fsr,msr,Ft,C8,gsr,I7e,hsr,psr,Ad,_sr,N7e,usr,bsr,JQ,vsr,Fsr,Tsr,MF,Msr,fo,w8,Esr,q7e,Csr,wsr,Wa,Asr,j7e,Lsr,ysr,D7e,xsr,$sr,G7e,ksr,Ssr,Rsr,Pe,EF,O7e,Psr,Bsr,YQ,Isr,Nsr,qsr,CF,V7e,jsr,Dsr,KQ,Gsr,Osr,Vsr,wF,X7e,Xsr,zsr,ZQ,Qsr,Wsr,Hsr,AF,z7e,Usr,Jsr,eW,Ysr,Ksr,Zsr,LF,Q7e,elr,olr,oW,rlr,tlr,alr,yF,W7e,nlr,slr,rW,llr,ilr,dlr,xF,H7e,clr,flr,tW,mlr,glr,hlr,$F,U7e,plr,_lr,aW,ulr,blr,vlr,kF,J7e,Flr,Tlr,nW,Mlr,Elr,Clr,SF,wlr,Y7e,Alr,Llr,K7e,ylr,xlr,RF,zOe,Ld,PF,Z7e,A8,$lr,e2e,klr,QOe,zo,L8,Slr,yd,Rlr,sW,Plr,Blr,lW,Ilr,Nlr,qlr,y8,jlr,o2e,Dlr,Glr,Olr,Tt,x8,Vlr,r2e,Xlr,zlr,xd,Qlr,t2e,Wlr,Hlr,iW,Ulr,Jlr,Ylr,BF,Klr,mo,$8,Zlr,a2e,eir,oir,Ha,rir,n2e,tir,air,s2e,nir,sir,l2e,lir,iir,dir,et,IF,i2e,cir,fir,dW,mir,gir,hir,NF,d2e,pir,_ir,cW,uir,bir,vir,qF,c2e,Fir,Tir,fW,Mir,Eir,Cir,jF,f2e,wir,Air,mW,Lir,yir,xir,DF,m2e,$ir,kir,gW,Sir,Rir,Pir,GF,Bir,g2e,Iir,Nir,h2e,qir,jir,OF,WOe,$d,VF,p2e,k8,Dir,_2e,Gir,HOe,Qo,S8,Oir,kd,Vir,hW,Xir,zir,pW,Qir,Wir,Hir,R8,Uir,u2e,Jir,Yir,Kir,Mt,P8,Zir,b2e,edr,odr,Sd,rdr,v2e,tdr,adr,_W,ndr,sdr,ldr,XF,idr,go,B8,ddr,F2e,cdr,fdr,Ua,mdr,T2e,gdr,hdr,M2e,pdr,_dr,E2e,udr,bdr,vdr,Le,zF,C2e,Fdr,Tdr,uW,Mdr,Edr,Cdr,QF,w2e,wdr,Adr,bW,Ldr,ydr,xdr,WF,A2e,$dr,kdr,vW,Sdr,Rdr,Pdr,HF,L2e,Bdr,Idr,FW,Ndr,qdr,jdr,UF,y2e,Ddr,Gdr,TW,Odr,Vdr,Xdr,JF,x2e,zdr,Qdr,MW,Wdr,Hdr,Udr,YF,$2e,Jdr,Ydr,EW,Kdr,Zdr,ecr,KF,k2e,ocr,rcr,CW,tcr,acr,ncr,ZF,S2e,scr,lcr,wW,icr,dcr,ccr,eT,R2e,fcr,mcr,AW,gcr,hcr,pcr,oT,_cr,P2e,ucr,bcr,B2e,vcr,Fcr,rT,UOe,Rd,tT,I2e,I8,Tcr,N2e,Mcr,JOe,Wo,N8,Ecr,Pd,Ccr,LW,wcr,Acr,yW,Lcr,ycr,xcr,q8,$cr,q2e,kcr,Scr,Rcr,Et,j8,Pcr,j2e,Bcr,Icr,Bd,Ncr,D2e,qcr,jcr,xW,Dcr,Gcr,Ocr,aT,Vcr,ho,D8,Xcr,G2e,zcr,Qcr,Ja,Wcr,O2e,Hcr,Ucr,V2e,Jcr,Ycr,X2e,Kcr,Zcr,efr,G8,nT,z2e,ofr,rfr,$W,tfr,afr,nfr,sT,Q2e,sfr,lfr,kW,ifr,dfr,cfr,lT,ffr,W2e,mfr,gfr,H2e,hfr,pfr,iT,YOe,Id,dT,U2e,O8,_fr,J2e,ufr,KOe,Ho,V8,bfr,Nd,vfr,SW,Ffr,Tfr,RW,Mfr,Efr,Cfr,X8,wfr,Y2e,Afr,Lfr,yfr,Ct,z8,xfr,K2e,$fr,kfr,qd,Sfr,Z2e,Rfr,Pfr,PW,Bfr,Ifr,Nfr,cT,qfr,po,Q8,jfr,ebe,Dfr,Gfr,Ya,Ofr,obe,Vfr,Xfr,rbe,zfr,Qfr,tbe,Wfr,Hfr,Ufr,ot,fT,abe,Jfr,Yfr,BW,Kfr,Zfr,emr,mT,nbe,omr,rmr,IW,tmr,amr,nmr,gT,sbe,smr,lmr,NW,imr,dmr,cmr,hT,lbe,fmr,mmr,qW,gmr,hmr,pmr,pT,ibe,_mr,umr,jW,bmr,vmr,Fmr,_T,Tmr,dbe,Mmr,Emr,cbe,Cmr,wmr,uT,ZOe,jd,bT,fbe,W8,Amr,mbe,Lmr,eVe,Uo,H8,ymr,Dd,xmr,DW,$mr,kmr,GW,Smr,Rmr,Pmr,U8,Bmr,gbe,Imr,Nmr,qmr,wt,J8,jmr,hbe,Dmr,Gmr,Gd,Omr,pbe,Vmr,Xmr,OW,zmr,Qmr,Wmr,vT,Hmr,_o,Y8,Umr,_be,Jmr,Ymr,Ka,Kmr,ube,Zmr,egr,bbe,ogr,rgr,vbe,tgr,agr,ngr,Od,FT,Fbe,sgr,lgr,VW,igr,dgr,cgr,TT,Tbe,fgr,mgr,XW,ggr,hgr,pgr,MT,Mbe,_gr,ugr,zW,bgr,vgr,Fgr,ET,Tgr,Ebe,Mgr,Egr,Cbe,Cgr,wgr,CT,oVe,Vd,wT,wbe,K8,Agr,Abe,Lgr,rVe,Jo,Z8,ygr,Xd,xgr,QW,$gr,kgr,WW,Sgr,Rgr,Pgr,e9,Bgr,Lbe,Igr,Ngr,qgr,At,o9,jgr,ybe,Dgr,Ggr,zd,Ogr,xbe,Vgr,Xgr,HW,zgr,Qgr,Wgr,AT,Hgr,uo,r9,Ugr,$be,Jgr,Ygr,Za,Kgr,kbe,Zgr,ehr,Sbe,ohr,rhr,Rbe,thr,ahr,nhr,t9,LT,Pbe,shr,lhr,UW,ihr,dhr,chr,yT,Bbe,fhr,mhr,JW,ghr,hhr,phr,xT,_hr,Ibe,uhr,bhr,Nbe,vhr,Fhr,$T,tVe,Qd,kT,qbe,a9,Thr,jbe,Mhr,aVe,Yo,n9,Ehr,Wd,Chr,YW,whr,Ahr,KW,Lhr,yhr,xhr,s9,$hr,Dbe,khr,Shr,Rhr,Lt,l9,Phr,Gbe,Bhr,Ihr,Hd,Nhr,Obe,qhr,jhr,ZW,Dhr,Ghr,Ohr,ST,Vhr,bo,i9,Xhr,Vbe,zhr,Qhr,en,Whr,Xbe,Hhr,Uhr,zbe,Jhr,Yhr,Qbe,Khr,Zhr,epr,Wbe,RT,Hbe,opr,rpr,eH,tpr,apr,npr,PT,spr,Ube,lpr,ipr,Jbe,dpr,cpr,BT,nVe,Ud,IT,Ybe,d9,fpr,Kbe,mpr,sVe,Ko,c9,gpr,Jd,hpr,oH,ppr,_pr,rH,upr,bpr,vpr,f9,Fpr,Zbe,Tpr,Mpr,Epr,yt,m9,Cpr,eve,wpr,Apr,Yd,Lpr,ove,ypr,xpr,tH,$pr,kpr,Spr,NT,Rpr,vo,g9,Ppr,rve,Bpr,Ipr,on,Npr,tve,qpr,jpr,ave,Dpr,Gpr,nve,Opr,Vpr,Xpr,rn,qT,sve,zpr,Qpr,aH,Wpr,Hpr,Upr,jT,lve,Jpr,Ypr,nH,Kpr,Zpr,e_r,DT,ive,o_r,r_r,sH,t_r,a_r,n_r,GT,dve,s_r,l_r,lH,i_r,d_r,c_r,OT,f_r,cve,m_r,g_r,fve,h_r,p_r,VT,lVe,Kd,XT,mve,h9,__r,gve,u_r,iVe,Zo,p9,b_r,Zd,v_r,iH,F_r,T_r,dH,M_r,E_r,C_r,_9,w_r,hve,A_r,L_r,y_r,xt,u9,x_r,pve,$_r,k_r,ec,S_r,_ve,R_r,P_r,cH,B_r,I_r,N_r,zT,q_r,Fo,b9,j_r,uve,D_r,G_r,tn,O_r,bve,V_r,X_r,vve,z_r,Q_r,Fve,W_r,H_r,U_r,Tve,QT,Mve,J_r,Y_r,fH,K_r,Z_r,eur,WT,our,Eve,rur,tur,Cve,aur,nur,HT,dVe,oc,UT,wve,v9,sur,Ave,lur,cVe,er,F9,iur,rc,dur,mH,cur,fur,gH,mur,gur,hur,T9,pur,Lve,_ur,uur,bur,$t,M9,vur,yve,Fur,Tur,tc,Mur,xve,Eur,Cur,hH,wur,Aur,Lur,JT,yur,yr,E9,xur,$ve,$ur,kur,an,Sur,kve,Rur,Pur,Sve,Bur,Iur,Rve,Nur,qur,jur,j,YT,Pve,Dur,Gur,pH,Our,Vur,Xur,KT,Bve,zur,Qur,_H,Wur,Hur,Uur,ZT,Ive,Jur,Yur,uH,Kur,Zur,e1r,eM,Nve,o1r,r1r,bH,t1r,a1r,n1r,oM,qve,s1r,l1r,vH,i1r,d1r,c1r,rM,jve,f1r,m1r,FH,g1r,h1r,p1r,tM,Dve,_1r,u1r,TH,b1r,v1r,F1r,aM,Gve,T1r,M1r,MH,E1r,C1r,w1r,nM,Ove,A1r,L1r,EH,y1r,x1r,$1r,sM,Vve,k1r,S1r,CH,R1r,P1r,B1r,lM,Xve,I1r,N1r,wH,q1r,j1r,D1r,iM,zve,G1r,O1r,AH,V1r,X1r,z1r,dM,Qve,Q1r,W1r,LH,H1r,U1r,J1r,cM,Wve,Y1r,K1r,yH,Z1r,e7r,o7r,fM,Hve,r7r,t7r,xH,a7r,n7r,s7r,mM,Uve,l7r,i7r,$H,d7r,c7r,f7r,gM,Jve,m7r,g7r,kH,h7r,p7r,_7r,Ws,Yve,u7r,b7r,SH,v7r,F7r,RH,T7r,M7r,E7r,hM,Kve,C7r,w7r,PH,A7r,L7r,y7r,pM,Zve,x7r,$7r,BH,k7r,S7r,R7r,_M,e0e,P7r,B7r,IH,I7r,N7r,q7r,uM,o0e,j7r,D7r,NH,G7r,O7r,V7r,bM,r0e,X7r,z7r,qH,Q7r,W7r,H7r,vM,t0e,U7r,J7r,jH,Y7r,K7r,Z7r,FM,a0e,e2r,o2r,DH,r2r,t2r,a2r,TM,n0e,n2r,s2r,GH,l2r,i2r,d2r,MM,s0e,c2r,f2r,OH,m2r,g2r,h2r,EM,l0e,p2r,_2r,VH,u2r,b2r,v2r,CM,i0e,F2r,T2r,XH,M2r,E2r,C2r,wM,d0e,w2r,A2r,zH,L2r,y2r,x2r,AM,c0e,$2r,k2r,QH,S2r,R2r,P2r,LM,f0e,B2r,I2r,WH,N2r,q2r,j2r,yM,m0e,D2r,G2r,HH,O2r,V2r,X2r,xM,g0e,z2r,Q2r,UH,W2r,H2r,U2r,$M,h0e,J2r,Y2r,JH,K2r,Z2r,ebr,kM,p0e,obr,rbr,YH,tbr,abr,nbr,SM,_0e,sbr,lbr,KH,ibr,dbr,cbr,RM,u0e,fbr,mbr,ZH,gbr,hbr,pbr,PM,b0e,_br,ubr,eU,bbr,vbr,Fbr,BM,v0e,Tbr,Mbr,oU,Ebr,Cbr,wbr,IM,F0e,Abr,Lbr,rU,ybr,xbr,$br,NM,T0e,kbr,Sbr,tU,Rbr,Pbr,Bbr,qM,M0e,Ibr,Nbr,aU,qbr,jbr,Dbr,jM,E0e,Gbr,Obr,nU,Vbr,Xbr,zbr,DM,C0e,Qbr,Wbr,sU,Hbr,Ubr,Jbr,GM,w0e,Ybr,Kbr,lU,Zbr,evr,ovr,OM,A0e,rvr,tvr,iU,avr,nvr,svr,VM,fVe,ac,XM,L0e,C9,lvr,y0e,ivr,mVe,or,w9,dvr,nc,cvr,dU,fvr,mvr,cU,gvr,hvr,pvr,A9,_vr,x0e,uvr,bvr,vvr,kt,L9,Fvr,$0e,Tvr,Mvr,sc,Evr,k0e,Cvr,wvr,fU,Avr,Lvr,yvr,zM,xvr,xr,y9,$vr,S0e,kvr,Svr,nn,Rvr,R0e,Pvr,Bvr,P0e,Ivr,Nvr,B0e,qvr,jvr,Dvr,se,QM,I0e,Gvr,Ovr,mU,Vvr,Xvr,zvr,WM,N0e,Qvr,Wvr,gU,Hvr,Uvr,Jvr,HM,q0e,Yvr,Kvr,hU,Zvr,e0r,o0r,UM,j0e,r0r,t0r,pU,a0r,n0r,s0r,JM,D0e,l0r,i0r,_U,d0r,c0r,f0r,YM,G0e,m0r,g0r,uU,h0r,p0r,_0r,KM,O0e,u0r,b0r,bU,v0r,F0r,T0r,ZM,V0e,M0r,E0r,vU,C0r,w0r,A0r,eE,X0e,L0r,y0r,FU,x0r,$0r,k0r,oE,z0e,S0r,R0r,TU,P0r,B0r,I0r,rE,Q0e,N0r,q0r,MU,j0r,D0r,G0r,tE,W0e,O0r,V0r,EU,X0r,z0r,Q0r,aE,H0e,W0r,H0r,CU,U0r,J0r,Y0r,nE,U0e,K0r,Z0r,wU,eFr,oFr,rFr,sE,J0e,tFr,aFr,AU,nFr,sFr,lFr,lE,Y0e,iFr,dFr,LU,cFr,fFr,mFr,iE,K0e,gFr,hFr,yU,pFr,_Fr,uFr,dE,Z0e,bFr,vFr,xU,FFr,TFr,MFr,cE,eFe,EFr,CFr,$U,wFr,AFr,LFr,fE,oFe,yFr,xFr,kU,$Fr,kFr,SFr,mE,rFe,RFr,PFr,SU,BFr,IFr,NFr,gE,tFe,qFr,jFr,RU,DFr,GFr,OFr,hE,aFe,VFr,XFr,PU,zFr,QFr,WFr,pE,gVe,lc,_E,nFe,x9,HFr,sFe,UFr,hVe,rr,$9,JFr,ic,YFr,BU,KFr,ZFr,IU,eTr,oTr,rTr,k9,tTr,lFe,aTr,nTr,sTr,St,S9,lTr,iFe,iTr,dTr,dc,cTr,dFe,fTr,mTr,NU,gTr,hTr,pTr,uE,_Tr,$r,R9,uTr,cFe,bTr,vTr,sn,FTr,fFe,TTr,MTr,mFe,ETr,CTr,gFe,wTr,ATr,LTr,Me,bE,hFe,yTr,xTr,qU,$Tr,kTr,STr,vE,pFe,RTr,PTr,jU,BTr,ITr,NTr,FE,_Fe,qTr,jTr,DU,DTr,GTr,OTr,TE,uFe,VTr,XTr,GU,zTr,QTr,WTr,ME,bFe,HTr,UTr,OU,JTr,YTr,KTr,EE,vFe,ZTr,eMr,VU,oMr,rMr,tMr,CE,FFe,aMr,nMr,XU,sMr,lMr,iMr,wE,TFe,dMr,cMr,zU,fMr,mMr,gMr,AE,MFe,hMr,pMr,QU,_Mr,uMr,bMr,LE,EFe,vMr,FMr,WU,TMr,MMr,EMr,yE,CFe,CMr,wMr,HU,AMr,LMr,yMr,xE,wFe,xMr,$Mr,UU,kMr,SMr,RMr,$E,AFe,PMr,BMr,JU,IMr,NMr,qMr,kE,pVe,cc,SE,LFe,P9,jMr,yFe,DMr,_Ve,tr,B9,GMr,fc,OMr,YU,VMr,XMr,KU,zMr,QMr,WMr,I9,HMr,xFe,UMr,JMr,YMr,Rt,N9,KMr,$Fe,ZMr,eEr,mc,oEr,kFe,rEr,tEr,ZU,aEr,nEr,sEr,RE,lEr,kr,q9,iEr,SFe,dEr,cEr,ln,fEr,RFe,mEr,gEr,PFe,hEr,pEr,BFe,_Er,uEr,bEr,dn,PE,IFe,vEr,FEr,eJ,TEr,MEr,EEr,BE,NFe,CEr,wEr,oJ,AEr,LEr,yEr,IE,qFe,xEr,$Er,rJ,kEr,SEr,REr,NE,jFe,PEr,BEr,tJ,IEr,NEr,qEr,qE,uVe,gc,jE,DFe,j9,jEr,GFe,DEr,bVe,ar,D9,GEr,hc,OEr,aJ,VEr,XEr,nJ,zEr,QEr,WEr,G9,HEr,OFe,UEr,JEr,YEr,Pt,O9,KEr,VFe,ZEr,e4r,pc,o4r,XFe,r4r,t4r,sJ,a4r,n4r,s4r,DE,l4r,Sr,V9,i4r,zFe,d4r,c4r,cn,f4r,QFe,m4r,g4r,WFe,h4r,p4r,HFe,_4r,u4r,b4r,ie,GE,UFe,v4r,F4r,lJ,T4r,M4r,E4r,OE,JFe,C4r,w4r,iJ,A4r,L4r,y4r,VE,YFe,x4r,$4r,dJ,k4r,S4r,R4r,XE,KFe,P4r,B4r,cJ,I4r,N4r,q4r,zE,ZFe,j4r,D4r,fJ,G4r,O4r,V4r,QE,eTe,X4r,z4r,mJ,Q4r,W4r,H4r,WE,oTe,U4r,J4r,gJ,Y4r,K4r,Z4r,HE,rTe,eCr,oCr,hJ,rCr,tCr,aCr,UE,tTe,nCr,sCr,pJ,lCr,iCr,dCr,JE,aTe,cCr,fCr,_J,mCr,gCr,hCr,YE,nTe,pCr,_Cr,uJ,uCr,bCr,vCr,KE,sTe,FCr,TCr,bJ,MCr,ECr,CCr,ZE,lTe,wCr,ACr,vJ,LCr,yCr,xCr,e4,iTe,$Cr,kCr,FJ,SCr,RCr,PCr,o4,dTe,BCr,ICr,TJ,NCr,qCr,jCr,r4,cTe,DCr,GCr,MJ,OCr,VCr,XCr,t4,fTe,zCr,QCr,EJ,WCr,HCr,UCr,a4,mTe,JCr,YCr,CJ,KCr,ZCr,e5r,n4,gTe,o5r,r5r,wJ,t5r,a5r,n5r,s4,hTe,s5r,l5r,AJ,i5r,d5r,c5r,l4,vVe,_c,i4,pTe,X9,f5r,_Te,m5r,FVe,nr,z9,g5r,uc,h5r,LJ,p5r,_5r,yJ,u5r,b5r,v5r,Q9,F5r,uTe,T5r,M5r,E5r,Bt,W9,C5r,bTe,w5r,A5r,bc,L5r,vTe,y5r,x5r,xJ,$5r,k5r,S5r,d4,R5r,Rr,H9,P5r,FTe,B5r,I5r,fn,N5r,TTe,q5r,j5r,MTe,D5r,G5r,ETe,O5r,V5r,X5r,ye,c4,CTe,z5r,Q5r,$J,W5r,H5r,U5r,f4,wTe,J5r,Y5r,kJ,K5r,Z5r,e3r,m4,ATe,o3r,r3r,SJ,t3r,a3r,n3r,g4,LTe,s3r,l3r,RJ,i3r,d3r,c3r,h4,yTe,f3r,m3r,PJ,g3r,h3r,p3r,p4,xTe,_3r,u3r,BJ,b3r,v3r,F3r,_4,$Te,T3r,M3r,IJ,E3r,C3r,w3r,u4,kTe,A3r,L3r,NJ,y3r,x3r,$3r,b4,STe,k3r,S3r,qJ,R3r,P3r,B3r,v4,RTe,I3r,N3r,jJ,q3r,j3r,D3r,F4,TVe,vc,T4,PTe,U9,G3r,BTe,O3r,MVe,sr,J9,V3r,Fc,X3r,DJ,z3r,Q3r,GJ,W3r,H3r,U3r,Y9,J3r,ITe,Y3r,K3r,Z3r,It,K9,ewr,NTe,owr,rwr,Tc,twr,qTe,awr,nwr,OJ,swr,lwr,iwr,M4,dwr,Pr,Z9,cwr,jTe,fwr,mwr,mn,gwr,DTe,hwr,pwr,GTe,_wr,uwr,OTe,bwr,vwr,Fwr,te,E4,VTe,Twr,Mwr,VJ,Ewr,Cwr,wwr,C4,XTe,Awr,Lwr,XJ,ywr,xwr,$wr,w4,zTe,kwr,Swr,zJ,Rwr,Pwr,Bwr,A4,QTe,Iwr,Nwr,QJ,qwr,jwr,Dwr,L4,WTe,Gwr,Owr,WJ,Vwr,Xwr,zwr,y4,HTe,Qwr,Wwr,HJ,Hwr,Uwr,Jwr,x4,UTe,Ywr,Kwr,UJ,Zwr,eAr,oAr,$4,JTe,rAr,tAr,JJ,aAr,nAr,sAr,k4,YTe,lAr,iAr,YJ,dAr,cAr,fAr,S4,KTe,mAr,gAr,KJ,hAr,pAr,_Ar,R4,ZTe,uAr,bAr,ZJ,vAr,FAr,TAr,P4,eMe,MAr,EAr,eY,CAr,wAr,AAr,B4,oMe,LAr,yAr,oY,xAr,$Ar,kAr,I4,rMe,SAr,RAr,rY,PAr,BAr,IAr,N4,tMe,NAr,qAr,tY,jAr,DAr,GAr,q4,aMe,OAr,VAr,aY,XAr,zAr,QAr,j4,nMe,WAr,HAr,nY,UAr,JAr,YAr,D4,sMe,KAr,ZAr,sY,e6r,o6r,r6r,G4,lMe,t6r,a6r,lY,n6r,s6r,l6r,O4,iMe,i6r,d6r,iY,c6r,f6r,m6r,V4,dMe,g6r,h6r,dY,p6r,_6r,u6r,X4,cMe,b6r,v6r,cY,F6r,T6r,M6r,z4,fMe,E6r,C6r,fY,w6r,A6r,L6r,Q4,mMe,y6r,x6r,mY,$6r,k6r,S6r,W4,gMe,R6r,P6r,gY,B6r,I6r,N6r,H4,hMe,q6r,j6r,hY,D6r,G6r,O6r,U4,EVe,Mc,J4,pMe,ex,V6r,_Me,X6r,CVe,lr,ox,z6r,Ec,Q6r,pY,W6r,H6r,_Y,U6r,J6r,Y6r,rx,K6r,uMe,Z6r,eLr,oLr,Nt,tx,rLr,bMe,tLr,aLr,Cc,nLr,vMe,sLr,lLr,uY,iLr,dLr,cLr,Y4,fLr,Br,ax,mLr,FMe,gLr,hLr,gn,pLr,TMe,_Lr,uLr,MMe,bLr,vLr,EMe,FLr,TLr,MLr,_e,K4,CMe,ELr,CLr,bY,wLr,ALr,LLr,Z4,wMe,yLr,xLr,vY,$Lr,kLr,SLr,eC,AMe,RLr,PLr,FY,BLr,ILr,NLr,oC,LMe,qLr,jLr,TY,DLr,GLr,OLr,rC,yMe,VLr,XLr,MY,zLr,QLr,WLr,tC,xMe,HLr,ULr,EY,JLr,YLr,KLr,aC,$Me,ZLr,eyr,CY,oyr,ryr,tyr,nC,kMe,ayr,nyr,wY,syr,lyr,iyr,sC,SMe,dyr,cyr,AY,fyr,myr,gyr,lC,RMe,hyr,pyr,LY,_yr,uyr,byr,iC,PMe,vyr,Fyr,yY,Tyr,Myr,Eyr,dC,BMe,Cyr,wyr,xY,Ayr,Lyr,yyr,cC,IMe,xyr,$yr,$Y,kyr,Syr,Ryr,fC,NMe,Pyr,Byr,kY,Iyr,Nyr,qyr,mC,qMe,jyr,Dyr,SY,Gyr,Oyr,Vyr,gC,jMe,Xyr,zyr,RY,Qyr,Wyr,Hyr,hC,DMe,Uyr,Jyr,PY,Yyr,Kyr,Zyr,pC,wVe,wc,_C,GMe,nx,e8r,OMe,o8r,AVe,ir,sx,r8r,Ac,t8r,BY,a8r,n8r,IY,s8r,l8r,i8r,lx,d8r,VMe,c8r,f8r,m8r,qt,ix,g8r,XMe,h8r,p8r,Lc,_8r,zMe,u8r,b8r,NY,v8r,F8r,T8r,uC,M8r,Ir,dx,E8r,QMe,C8r,w8r,hn,A8r,WMe,L8r,y8r,HMe,x8r,$8r,UMe,k8r,S8r,R8r,cx,bC,JMe,P8r,B8r,qY,I8r,N8r,q8r,vC,YMe,j8r,D8r,jY,G8r,O8r,V8r,FC,LVe,yc,TC,KMe,fx,X8r,ZMe,z8r,yVe,dr,mx,Q8r,xc,W8r,DY,H8r,U8r,GY,J8r,Y8r,K8r,gx,Z8r,eEe,e9r,o9r,r9r,jt,hx,t9r,oEe,a9r,n9r,$c,s9r,rEe,l9r,i9r,OY,d9r,c9r,f9r,MC,m9r,Nr,px,g9r,tEe,h9r,p9r,pn,_9r,aEe,u9r,b9r,nEe,v9r,F9r,sEe,T9r,M9r,E9r,lEe,EC,iEe,C9r,w9r,VY,A9r,L9r,y9r,CC,xVe,kc,wC,dEe,_x,x9r,cEe,$9r,$Ve,cr,ux,k9r,Sc,S9r,XY,R9r,P9r,zY,B9r,I9r,N9r,bx,q9r,fEe,j9r,D9r,G9r,Dt,vx,O9r,mEe,V9r,X9r,Rc,z9r,gEe,Q9r,W9r,QY,H9r,U9r,J9r,AC,Y9r,qr,Fx,K9r,hEe,Z9r,exr,_n,oxr,pEe,rxr,txr,_Ee,axr,nxr,uEe,sxr,lxr,ixr,de,LC,bEe,dxr,cxr,WY,fxr,mxr,gxr,yC,vEe,hxr,pxr,HY,_xr,uxr,bxr,xC,FEe,vxr,Fxr,UY,Txr,Mxr,Exr,$C,TEe,Cxr,wxr,JY,Axr,Lxr,yxr,kC,MEe,xxr,$xr,YY,kxr,Sxr,Rxr,SC,EEe,Pxr,Bxr,KY,Ixr,Nxr,qxr,RC,CEe,jxr,Dxr,ZY,Gxr,Oxr,Vxr,PC,wEe,Xxr,zxr,eK,Qxr,Wxr,Hxr,BC,AEe,Uxr,Jxr,oK,Yxr,Kxr,Zxr,IC,LEe,e$r,o$r,rK,r$r,t$r,a$r,NC,yEe,n$r,s$r,tK,l$r,i$r,d$r,qC,xEe,c$r,f$r,aK,m$r,g$r,h$r,jC,$Ee,p$r,_$r,nK,u$r,b$r,v$r,DC,kEe,F$r,T$r,sK,M$r,E$r,C$r,GC,SEe,w$r,A$r,lK,L$r,y$r,x$r,OC,REe,$$r,k$r,iK,S$r,R$r,P$r,VC,PEe,B$r,I$r,dK,N$r,q$r,j$r,XC,BEe,D$r,G$r,cK,O$r,V$r,X$r,zC,IEe,z$r,Q$r,fK,W$r,H$r,U$r,QC,NEe,J$r,Y$r,mK,K$r,Z$r,ekr,WC,kVe,Pc,HC,qEe,Tx,okr,jEe,rkr,SVe,fr,Mx,tkr,Bc,akr,gK,nkr,skr,hK,lkr,ikr,dkr,Ex,ckr,DEe,fkr,mkr,gkr,Gt,Cx,hkr,GEe,pkr,_kr,Ic,ukr,OEe,bkr,vkr,pK,Fkr,Tkr,Mkr,UC,Ekr,jr,wx,Ckr,VEe,wkr,Akr,un,Lkr,XEe,ykr,xkr,zEe,$kr,kkr,QEe,Skr,Rkr,Pkr,ce,JC,WEe,Bkr,Ikr,_K,Nkr,qkr,jkr,YC,HEe,Dkr,Gkr,uK,Okr,Vkr,Xkr,KC,UEe,zkr,Qkr,bK,Wkr,Hkr,Ukr,ZC,JEe,Jkr,Ykr,vK,Kkr,Zkr,eSr,e5,YEe,oSr,rSr,FK,tSr,aSr,nSr,o5,KEe,sSr,lSr,TK,iSr,dSr,cSr,r5,ZEe,fSr,mSr,MK,gSr,hSr,pSr,t5,e4e,_Sr,uSr,EK,bSr,vSr,FSr,a5,o4e,TSr,MSr,CK,ESr,CSr,wSr,n5,r4e,ASr,LSr,wK,ySr,xSr,$Sr,s5,t4e,kSr,SSr,AK,RSr,PSr,BSr,l5,a4e,ISr,NSr,LK,qSr,jSr,DSr,i5,n4e,GSr,OSr,yK,VSr,XSr,zSr,d5,s4e,QSr,WSr,xK,HSr,USr,JSr,c5,l4e,YSr,KSr,$K,ZSr,eRr,oRr,f5,i4e,rRr,tRr,kK,aRr,nRr,sRr,m5,d4e,lRr,iRr,SK,dRr,cRr,fRr,g5,c4e,mRr,gRr,RK,hRr,pRr,_Rr,h5,f4e,uRr,bRr,PK,vRr,FRr,TRr,p5,m4e,MRr,ERr,BK,CRr,wRr,ARr,_5,RVe,Nc,u5,g4e,Ax,LRr,h4e,yRr,PVe,mr,Lx,xRr,qc,$Rr,IK,kRr,SRr,NK,RRr,PRr,BRr,yx,IRr,p4e,NRr,qRr,jRr,Ot,xx,DRr,_4e,GRr,ORr,jc,VRr,u4e,XRr,zRr,qK,QRr,WRr,HRr,b5,URr,Dr,$x,JRr,b4e,YRr,KRr,bn,ZRr,v4e,ePr,oPr,F4e,rPr,tPr,T4e,aPr,nPr,sPr,M4e,v5,E4e,lPr,iPr,jK,dPr,cPr,fPr,F5,BVe,Dc,T5,C4e,kx,mPr,w4e,gPr,IVe,gr,Sx,hPr,Gc,pPr,DK,_Pr,uPr,GK,bPr,vPr,FPr,Rx,TPr,A4e,MPr,EPr,CPr,Vt,Px,wPr,L4e,APr,LPr,Oc,yPr,y4e,xPr,$Pr,OK,kPr,SPr,RPr,M5,PPr,Gr,Bx,BPr,x4e,IPr,NPr,vn,qPr,$4e,jPr,DPr,k4e,GPr,OPr,S4e,VPr,XPr,zPr,R4e,E5,P4e,QPr,WPr,VK,HPr,UPr,JPr,C5,NVe,Vc,w5,B4e,Ix,YPr,I4e,KPr,qVe,hr,Nx,ZPr,Xc,eBr,XK,oBr,rBr,zK,tBr,aBr,nBr,qx,sBr,N4e,lBr,iBr,dBr,Xt,jx,cBr,q4e,fBr,mBr,zc,gBr,j4e,hBr,pBr,QK,_Br,uBr,bBr,A5,vBr,Or,Dx,FBr,D4e,TBr,MBr,Fn,EBr,G4e,CBr,wBr,O4e,ABr,LBr,V4e,yBr,xBr,$Br,oe,L5,X4e,kBr,SBr,WK,RBr,PBr,BBr,y5,z4e,IBr,NBr,HK,qBr,jBr,DBr,x5,Q4e,GBr,OBr,UK,VBr,XBr,zBr,$5,W4e,QBr,WBr,JK,HBr,UBr,JBr,k5,H4e,YBr,KBr,YK,ZBr,eIr,oIr,S5,U4e,rIr,tIr,KK,aIr,nIr,sIr,R5,J4e,lIr,iIr,ZK,dIr,cIr,fIr,P5,Y4e,mIr,gIr,eZ,hIr,pIr,_Ir,B5,K4e,uIr,bIr,oZ,vIr,FIr,TIr,I5,Z4e,MIr,EIr,rZ,CIr,wIr,AIr,N5,eCe,LIr,yIr,tZ,xIr,$Ir,kIr,q5,oCe,SIr,RIr,aZ,PIr,BIr,IIr,j5,rCe,NIr,qIr,nZ,jIr,DIr,GIr,D5,tCe,OIr,VIr,sZ,XIr,zIr,QIr,G5,aCe,WIr,HIr,lZ,UIr,JIr,YIr,O5,nCe,KIr,ZIr,iZ,eNr,oNr,rNr,V5,sCe,tNr,aNr,dZ,nNr,sNr,lNr,X5,lCe,iNr,dNr,cZ,cNr,fNr,mNr,z5,iCe,gNr,hNr,fZ,pNr,_Nr,uNr,Q5,dCe,bNr,vNr,mZ,FNr,TNr,MNr,W5,cCe,ENr,CNr,gZ,wNr,ANr,LNr,H5,fCe,yNr,xNr,hZ,$Nr,kNr,SNr,U5,mCe,RNr,PNr,pZ,BNr,INr,NNr,J5,gCe,qNr,jNr,_Z,DNr,GNr,ONr,Y5,hCe,VNr,XNr,uZ,zNr,QNr,WNr,K5,pCe,HNr,UNr,bZ,JNr,YNr,KNr,Z5,_Ce,ZNr,eqr,vZ,oqr,rqr,tqr,e3,jVe,Qc,o3,uCe,Gx,aqr,bCe,nqr,DVe,pr,Ox,sqr,Wc,lqr,FZ,iqr,dqr,TZ,cqr,fqr,mqr,Vx,gqr,vCe,hqr,pqr,_qr,zt,Xx,uqr,FCe,bqr,vqr,Hc,Fqr,TCe,Tqr,Mqr,MZ,Eqr,Cqr,wqr,r3,Aqr,Vr,zx,Lqr,MCe,yqr,xqr,Tn,$qr,ECe,kqr,Sqr,CCe,Rqr,Pqr,wCe,Bqr,Iqr,Nqr,xe,t3,ACe,qqr,jqr,EZ,Dqr,Gqr,Oqr,a3,LCe,Vqr,Xqr,CZ,zqr,Qqr,Wqr,n3,yCe,Hqr,Uqr,wZ,Jqr,Yqr,Kqr,s3,xCe,Zqr,ejr,AZ,ojr,rjr,tjr,l3,$Ce,ajr,njr,LZ,sjr,ljr,ijr,i3,kCe,djr,cjr,yZ,fjr,mjr,gjr,d3,SCe,hjr,pjr,xZ,_jr,ujr,bjr,c3,RCe,vjr,Fjr,$Z,Tjr,Mjr,Ejr,f3,PCe,Cjr,wjr,kZ,Ajr,Ljr,yjr,m3,BCe,xjr,$jr,SZ,kjr,Sjr,Rjr,g3,GVe,Uc,h3,ICe,Qx,Pjr,NCe,Bjr,OVe,_r,Wx,Ijr,Jc,Njr,RZ,qjr,jjr,PZ,Djr,Gjr,Ojr,Hx,Vjr,qCe,Xjr,zjr,Qjr,Qt,Ux,Wjr,jCe,Hjr,Ujr,Yc,Jjr,DCe,Yjr,Kjr,BZ,Zjr,eDr,oDr,p3,rDr,Xr,Jx,tDr,GCe,aDr,nDr,Mn,sDr,OCe,lDr,iDr,VCe,dDr,cDr,XCe,fDr,mDr,gDr,Ee,_3,zCe,hDr,pDr,IZ,_Dr,uDr,bDr,u3,QCe,vDr,FDr,NZ,TDr,MDr,EDr,b3,WCe,CDr,wDr,qZ,ADr,LDr,yDr,v3,HCe,xDr,$Dr,jZ,kDr,SDr,RDr,F3,UCe,PDr,BDr,DZ,IDr,NDr,qDr,T3,JCe,jDr,DDr,GZ,GDr,ODr,VDr,M3,YCe,XDr,zDr,OZ,QDr,WDr,HDr,E3,KCe,UDr,JDr,VZ,YDr,KDr,ZDr,C3,ZCe,eGr,oGr,XZ,rGr,tGr,aGr,w3,e5e,nGr,sGr,zZ,lGr,iGr,dGr,A3,o5e,cGr,fGr,QZ,mGr,gGr,hGr,L3,r5e,pGr,_Gr,WZ,uGr,bGr,vGr,y3,t5e,FGr,TGr,HZ,MGr,EGr,CGr,x3,VVe,Kc,$3,a5e,Yx,wGr,n5e,AGr,XVe,ur,Kx,LGr,Zc,yGr,UZ,xGr,$Gr,JZ,kGr,SGr,RGr,Zx,PGr,s5e,BGr,IGr,NGr,Wt,e$,qGr,l5e,jGr,DGr,ef,GGr,i5e,OGr,VGr,YZ,XGr,zGr,QGr,k3,WGr,zr,o$,HGr,d5e,UGr,JGr,En,YGr,c5e,KGr,ZGr,f5e,eOr,oOr,m5e,rOr,tOr,aOr,$e,S3,g5e,nOr,sOr,KZ,lOr,iOr,dOr,R3,h5e,cOr,fOr,ZZ,mOr,gOr,hOr,P3,p5e,pOr,_Or,eee,uOr,bOr,vOr,B3,_5e,FOr,TOr,oee,MOr,EOr,COr,I3,u5e,wOr,AOr,ree,LOr,yOr,xOr,N3,b5e,$Or,kOr,tee,SOr,ROr,POr,q3,v5e,BOr,IOr,aee,NOr,qOr,jOr,j3,F5e,DOr,GOr,nee,OOr,VOr,XOr,D3,T5e,zOr,QOr,see,WOr,HOr,UOr,G3,M5e,JOr,YOr,lee,KOr,ZOr,eVr,O3,zVe,of,V3,E5e,r$,oVr,C5e,rVr,QVe,br,t$,tVr,rf,aVr,iee,nVr,sVr,dee,lVr,iVr,dVr,a$,cVr,w5e,fVr,mVr,gVr,Ht,n$,hVr,A5e,pVr,_Vr,tf,uVr,L5e,bVr,vVr,cee,FVr,TVr,MVr,X3,EVr,Qr,s$,CVr,y5e,wVr,AVr,Cn,LVr,x5e,yVr,xVr,$5e,$Vr,kVr,k5e,SVr,RVr,PVr,ke,z3,S5e,BVr,IVr,fee,NVr,qVr,jVr,Q3,R5e,DVr,GVr,mee,OVr,VVr,XVr,W3,P5e,zVr,QVr,gee,WVr,HVr,UVr,H3,B5e,JVr,YVr,hee,KVr,ZVr,eXr,U3,I5e,oXr,rXr,pee,tXr,aXr,nXr,J3,N5e,sXr,lXr,_ee,iXr,dXr,cXr,Y3,q5e,fXr,mXr,uee,gXr,hXr,pXr,K3,j5e,_Xr,uXr,bee,bXr,vXr,FXr,Z3,D5e,TXr,MXr,vee,EXr,CXr,wXr,ew,G5e,AXr,LXr,Fee,yXr,xXr,$Xr,ow,WVe,af,rw,O5e,l$,kXr,V5e,SXr,HVe,vr,i$,RXr,nf,PXr,Tee,BXr,IXr,Mee,NXr,qXr,jXr,d$,DXr,X5e,GXr,OXr,VXr,Ut,c$,XXr,z5e,zXr,QXr,sf,WXr,Q5e,HXr,UXr,Eee,JXr,YXr,KXr,tw,ZXr,Wr,f$,ezr,W5e,ozr,rzr,wn,tzr,H5e,azr,nzr,U5e,szr,lzr,J5e,izr,dzr,czr,Se,aw,Y5e,fzr,mzr,Cee,gzr,hzr,pzr,nw,K5e,_zr,uzr,wee,bzr,vzr,Fzr,sw,Z5e,Tzr,Mzr,Aee,Ezr,Czr,wzr,lw,e3e,Azr,Lzr,Lee,yzr,xzr,$zr,iw,o3e,kzr,Szr,yee,Rzr,Pzr,Bzr,dw,r3e,Izr,Nzr,xee,qzr,jzr,Dzr,cw,t3e,Gzr,Ozr,$ee,Vzr,Xzr,zzr,fw,a3e,Qzr,Wzr,kee,Hzr,Uzr,Jzr,mw,n3e,Yzr,Kzr,See,Zzr,eQr,oQr,gw,s3e,rQr,tQr,Ree,aQr,nQr,sQr,hw,UVe,lf,pw,l3e,m$,lQr,i3e,iQr,JVe,Fr,g$,dQr,df,cQr,Pee,fQr,mQr,Bee,gQr,hQr,pQr,h$,_Qr,d3e,uQr,bQr,vQr,Jt,p$,FQr,c3e,TQr,MQr,cf,EQr,f3e,CQr,wQr,Iee,AQr,LQr,yQr,_w,xQr,Hr,_$,$Qr,m3e,kQr,SQr,An,RQr,g3e,PQr,BQr,h3e,IQr,NQr,p3e,qQr,jQr,DQr,Re,uw,_3e,GQr,OQr,Nee,VQr,XQr,zQr,bw,u3e,QQr,WQr,qee,HQr,UQr,JQr,vw,b3e,YQr,KQr,jee,ZQr,eWr,oWr,Fw,v3e,rWr,tWr,Dee,aWr,nWr,sWr,Tw,F3e,lWr,iWr,Gee,dWr,cWr,fWr,Mw,T3e,mWr,gWr,Oee,hWr,pWr,_Wr,Ew,M3e,uWr,bWr,Vee,vWr,FWr,TWr,Cw,E3e,MWr,EWr,Xee,CWr,wWr,AWr,ww,C3e,LWr,yWr,zee,xWr,$Wr,kWr,Aw,w3e,SWr,RWr,Qee,PWr,BWr,IWr,Lw,YVe,ff,yw,A3e,u$,NWr,L3e,qWr,KVe,Tr,b$,jWr,mf,DWr,Wee,GWr,OWr,Hee,VWr,XWr,zWr,v$,QWr,y3e,WWr,HWr,UWr,Yt,F$,JWr,x3e,YWr,KWr,gf,ZWr,$3e,eHr,oHr,Uee,rHr,tHr,aHr,xw,nHr,Ur,T$,sHr,k3e,lHr,iHr,Ln,dHr,S3e,cHr,fHr,R3e,mHr,gHr,P3e,hHr,pHr,_Hr,Ve,$w,B3e,uHr,bHr,Jee,vHr,FHr,THr,kw,I3e,MHr,EHr,Yee,CHr,wHr,AHr,Sw,N3e,LHr,yHr,Kee,xHr,$Hr,kHr,Rw,q3e,SHr,RHr,Zee,PHr,BHr,IHr,Pw,j3e,NHr,qHr,eoe,jHr,DHr,GHr,Bw,D3e,OHr,VHr,ooe,XHr,zHr,QHr,Iw,G3e,WHr,HHr,roe,UHr,JHr,YHr,Nw,O3e,KHr,ZHr,toe,eUr,oUr,rUr,qw,ZVe,hf,jw,V3e,M$,tUr,X3e,aUr,eXe,Mr,E$,nUr,pf,sUr,aoe,lUr,iUr,noe,dUr,cUr,fUr,C$,mUr,z3e,gUr,hUr,pUr,Kt,w$,_Ur,Q3e,uUr,bUr,_f,vUr,W3e,FUr,TUr,soe,MUr,EUr,CUr,Dw,wUr,Jr,A$,AUr,H3e,LUr,yUr,yn,xUr,U3e,$Ur,kUr,J3e,SUr,RUr,Y3e,PUr,BUr,IUr,Xe,Gw,K3e,NUr,qUr,loe,jUr,DUr,GUr,Ow,Z3e,OUr,VUr,ioe,XUr,zUr,QUr,Vw,ewe,WUr,HUr,doe,UUr,JUr,YUr,Xw,owe,KUr,ZUr,coe,eJr,oJr,rJr,zw,rwe,tJr,aJr,foe,nJr,sJr,lJr,Qw,twe,iJr,dJr,moe,cJr,fJr,mJr,Ww,awe,gJr,hJr,goe,pJr,_Jr,uJr,Hw,nwe,bJr,vJr,hoe,FJr,TJr,MJr,Uw,oXe,uf,Jw,swe,L$,EJr,lwe,CJr,rXe,Er,y$,wJr,bf,AJr,poe,LJr,yJr,_oe,xJr,$Jr,kJr,x$,SJr,iwe,RJr,PJr,BJr,Zt,$$,IJr,dwe,NJr,qJr,vf,jJr,cwe,DJr,GJr,uoe,OJr,VJr,XJr,Yw,zJr,Yr,k$,QJr,fwe,WJr,HJr,xn,UJr,mwe,JJr,YJr,gwe,KJr,ZJr,hwe,eYr,oYr,rYr,pwe,Kw,_we,tYr,aYr,boe,nYr,sYr,lYr,Zw,tXe,Ff,eA,uwe,S$,iYr,bwe,dYr,aXe,Cr,R$,cYr,Tf,fYr,voe,mYr,gYr,Foe,hYr,pYr,_Yr,P$,uYr,vwe,bYr,vYr,FYr,ea,B$,TYr,Fwe,MYr,EYr,Mf,CYr,Twe,wYr,AYr,Toe,LYr,yYr,xYr,oA,$Yr,Kr,I$,kYr,Mwe,SYr,RYr,$n,PYr,Ewe,BYr,IYr,Cwe,NYr,qYr,wwe,jYr,DYr,GYr,N$,rA,Awe,OYr,VYr,Moe,XYr,zYr,QYr,tA,Lwe,WYr,HYr,Eoe,UYr,JYr,YYr,aA,nXe,Ef,nA,ywe,q$,KYr,xwe,ZYr,sXe,wr,j$,eKr,Cf,oKr,Coe,rKr,tKr,woe,aKr,nKr,sKr,D$,lKr,$we,iKr,dKr,cKr,oa,G$,fKr,kwe,mKr,gKr,wf,hKr,Swe,pKr,_Kr,Aoe,uKr,bKr,vKr,sA,FKr,Zr,O$,TKr,Rwe,MKr,EKr,kn,CKr,Pwe,wKr,AKr,Bwe,LKr,yKr,Iwe,xKr,$Kr,kKr,Nwe,lA,qwe,SKr,RKr,Loe,PKr,BKr,IKr,iA,lXe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),RL=new re({}),PL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Pf=new NKr({props:{warning:!0,$$slots:{default:[bGt]},$$scope:{ctx:x}}}),BL=new re({}),IL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/configuration_auto.py#L601"}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/configuration_auto.py#L624"}}),Vg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[vGt]},$$scope:{ctx:x}}}),DL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/configuration_auto.py#L747"}}),GL=new re({}),OL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/tokenization_auto.py#L401"}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17701/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/tokenization_auto.py#L415"}}),wh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[FGt]},$$scope:{ctx:x}}}),QL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/tokenization_auto.py#L614"}}),WL=new re({}),HL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17701/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),sp=new NKr({props:{$$slots:{default:[TGt]},$$scope:{ctx:x}}}),lp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[MGt]},$$scope:{ctx:x}}}),KL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),ZL=new re({}),ey=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/processing_auto.py#L88"}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/processing_auto.py#L102"}}),Lp=new NKr({props:{$$slots:{default:[EGt]},$$scope:{ctx:x}}}),yp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[CGt]},$$scope:{ctx:x}}}),ay=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/processing_auto.py#L255"}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L770"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),kp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[wGt]},$$scope:{ctx:x}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[AGt]},$$scope:{ctx:x}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L777"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),Pu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[LGt]},$$scope:{ctx:x}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),A1=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yGt]},$$scope:{ctx:x}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L792"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),y1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[xGt]},$$scope:{ctx:x}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$Gt]},$$scope:{ctx:x}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L799"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[kGt]},$$scope:{ctx:x}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[SGt]},$$scope:{ctx:x}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L806"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[RGt]},$$scope:{ctx:x}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),E2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[PGt]},$$scope:{ctx:x}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L815"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),w2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[BGt]},$$scope:{ctx:x}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),Mb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[IGt]},$$scope:{ctx:x}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L860"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),Cb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[NGt]},$$scope:{ctx:x}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),rv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qGt]},$$scope:{ctx:x}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L867"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),av=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jGt]},$$scope:{ctx:x}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[DGt]},$$scope:{ctx:x}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L853"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[GGt]},$$scope:{ctx:x}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[OGt]},$$scope:{ctx:x}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L824"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VGt]},$$scope:{ctx:x}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XGt]},$$scope:{ctx:x}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L831"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[zGt]},$$scope:{ctx:x}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[QGt]},$$scope:{ctx:x}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L876"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[WGt]},$$scope:{ctx:x}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[HGt]},$$scope:{ctx:x}}}),f8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L915"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[UGt]},$$scope:{ctx:x}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[JGt]},$$scope:{ctx:x}}}),_8=new re({}),u8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L842"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[YGt]},$$scope:{ctx:x}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[KGt]},$$scope:{ctx:x}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L922"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ZGt]},$$scope:{ctx:x}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[eOt]},$$scope:{ctx:x}}}),A8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L945"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[oOt]},$$scope:{ctx:x}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),OF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[rOt]},$$scope:{ctx:x}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L929"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),XF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[tOt]},$$scope:{ctx:x}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[aOt]},$$scope:{ctx:x}}}),I8=new re({}),N8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L936"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nOt]},$$scope:{ctx:x}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sOt]},$$scope:{ctx:x}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L954"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[lOt]},$$scope:{ctx:x}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[iOt]},$$scope:{ctx:x}}}),W8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L961"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[dOt]},$$scope:{ctx:x}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[cOt]},$$scope:{ctx:x}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L908"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[fOt]},$$scope:{ctx:x}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[mOt]},$$scope:{ctx:x}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L883"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[gOt]},$$scope:{ctx:x}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[hOt]},$$scope:{ctx:x}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L890"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[pOt]},$$scope:{ctx:x}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[_Ot]},$$scope:{ctx:x}}}),h9=new re({}),p9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_auto.py#L899"}}),u9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[uOt]},$$scope:{ctx:x}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[bOt]},$$scope:{ctx:x}}}),v9=new re({}),F9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[vOt]},$$scope:{ctx:x}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[FOt]},$$scope:{ctx:x}}}),C9=new re({}),w9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[TOt]},$$scope:{ctx:x}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[MOt]},$$scope:{ctx:x}}}),x9=new re({}),$9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[EOt]},$$scope:{ctx:x}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[COt]},$$scope:{ctx:x}}}),P9=new re({}),B9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[wOt]},$$scope:{ctx:x}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[AOt]},$$scope:{ctx:x}}}),j9=new re({}),D9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),O9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[LOt]},$$scope:{ctx:x}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yOt]},$$scope:{ctx:x}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xOt]},$$scope:{ctx:x}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$Ot]},$$scope:{ctx:x}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[kOt]},$$scope:{ctx:x}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[SOt]},$$scope:{ctx:x}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ROt]},$$scope:{ctx:x}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[POt]},$$scope:{ctx:x}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[BOt]},$$scope:{ctx:x}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[IOt]},$$scope:{ctx:x}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[NOt]},$$scope:{ctx:x}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[qOt]},$$scope:{ctx:x}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[jOt]},$$scope:{ctx:x}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[DOt]},$$scope:{ctx:x}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[GOt]},$$scope:{ctx:x}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[OOt]},$$scope:{ctx:x}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[VOt]},$$scope:{ctx:x}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[XOt]},$$scope:{ctx:x}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zOt]},$$scope:{ctx:x}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[QOt]},$$scope:{ctx:x}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[WOt]},$$scope:{ctx:x}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[HOt]},$$scope:{ctx:x}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[UOt]},$$scope:{ctx:x}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[JOt]},$$scope:{ctx:x}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),p3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[YOt]},$$scope:{ctx:x}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[KOt]},$$scope:{ctx:x}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[ZOt]},$$scope:{ctx:x}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eVt]},$$scope:{ctx:x}}}),r$=new re({}),t$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),n$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oVt]},$$scope:{ctx:x}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rVt]},$$scope:{ctx:x}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[tVt]},$$scope:{ctx:x}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aVt]},$$scope:{ctx:x}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nVt]},$$scope:{ctx:x}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sVt]},$$scope:{ctx:x}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[lVt]},$$scope:{ctx:x}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iVt]},$$scope:{ctx:x}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[dVt]},$$scope:{ctx:x}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cVt]},$$scope:{ctx:x}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),Yw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fVt]},$$scope:{ctx:x}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),Zw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mVt]},$$scope:{ctx:x}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),oA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[gVt]},$$scope:{ctx:x}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hVt]},$$scope:{ctx:x}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[pVt]},$$scope:{ctx:x}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17701/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17701/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17701/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_Vt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Mi=o("Auto Classes"),xf=l(),at=a("p"),Ei=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=a("code"),xL=o("from_pretrained()"),$f=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),wi=o("Instantiating one of "),Rn=a("a"),$L=o("AutoConfig"),Pn=o(", "),Bn=a("a"),kL=o("AutoModel"),Ai=o(`, and
`),In=a("a"),SL=o("AutoTokenizer"),Li=o(" will directly create a class of the relevant architecture. For instance"),kf=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),lS=o("will create a model that is an instance of "),yi=a("a"),iS=o("BertModel"),dS=o("."),Co=l(),$a=a("p"),cS=o("There is one class of "),Sf=a("code"),fS=o("AutoModel"),uQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),rOe=l(),xi=a("h2"),Rf=a("a"),Mte=a("span"),F(RL.$$.fragment),bQe=l(),Ete=a("span"),vQe=o("Extending the Auto Classes"),tOe=l(),Nn=a("p"),FQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cte=a("code"),TQe=o("NewModel"),MQe=o(", make sure you have a "),wte=a("code"),EQe=o("NewModelConfig"),CQe=o(` then you can add those to the auto
classes like this:`),aOe=l(),F(PL.$$.fragment),nOe=l(),mS=a("p"),wQe=o("You will then be able to use the auto classes like you would usually do!"),sOe=l(),F(Pf.$$.fragment),lOe=l(),$i=a("h2"),Bf=a("a"),Ate=a("span"),F(BL.$$.fragment),AQe=l(),Lte=a("span"),LQe=o("AutoConfig"),iOe=l(),wo=a("div"),F(IL.$$.fragment),yQe=l(),NL=a("p"),xQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gS=a("a"),$Qe=o("from_pretrained()"),kQe=o(" class method."),SQe=l(),qL=a("p"),RQe=o("This class cannot be instantiated directly using "),yte=a("code"),PQe=o("__init__()"),BQe=o(" (throws an error)."),IQe=l(),Ar=a("div"),F(jL.$$.fragment),NQe=l(),xte=a("p"),qQe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),jQe=l(),ki=a("p"),DQe=o("The configuration class to instantiate is selected based on the "),$te=a("code"),GQe=o("model_type"),OQe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kte=a("code"),VQe=o("pretrained_model_name_or_path"),XQe=o(":"),zQe=l(),A=a("ul"),If=a("li"),Ste=a("strong"),QQe=o("albert"),WQe=o(" \u2014 "),hS=a("a"),HQe=o("AlbertConfig"),UQe=o(" (ALBERT model)"),JQe=l(),Nf=a("li"),Rte=a("strong"),YQe=o("bart"),KQe=o(" \u2014 "),pS=a("a"),ZQe=o("BartConfig"),eWe=o(" (BART model)"),oWe=l(),qf=a("li"),Pte=a("strong"),rWe=o("beit"),tWe=o(" \u2014 "),_S=a("a"),aWe=o("BeitConfig"),nWe=o(" (BEiT model)"),sWe=l(),jf=a("li"),Bte=a("strong"),lWe=o("bert"),iWe=o(" \u2014 "),uS=a("a"),dWe=o("BertConfig"),cWe=o(" (BERT model)"),fWe=l(),Df=a("li"),Ite=a("strong"),mWe=o("bert-generation"),gWe=o(" \u2014 "),bS=a("a"),hWe=o("BertGenerationConfig"),pWe=o(" (Bert Generation model)"),_We=l(),Gf=a("li"),Nte=a("strong"),uWe=o("big_bird"),bWe=o(" \u2014 "),vS=a("a"),vWe=o("BigBirdConfig"),FWe=o(" (BigBird model)"),TWe=l(),Of=a("li"),qte=a("strong"),MWe=o("bigbird_pegasus"),EWe=o(" \u2014 "),FS=a("a"),CWe=o("BigBirdPegasusConfig"),wWe=o(" (BigBird-Pegasus model)"),AWe=l(),Vf=a("li"),jte=a("strong"),LWe=o("blenderbot"),yWe=o(" \u2014 "),TS=a("a"),xWe=o("BlenderbotConfig"),$We=o(" (Blenderbot model)"),kWe=l(),Xf=a("li"),Dte=a("strong"),SWe=o("blenderbot-small"),RWe=o(" \u2014 "),MS=a("a"),PWe=o("BlenderbotSmallConfig"),BWe=o(" (BlenderbotSmall model)"),IWe=l(),zf=a("li"),Gte=a("strong"),NWe=o("bloom"),qWe=o(" \u2014 "),ES=a("a"),jWe=o("BloomConfig"),DWe=o(" (BLOOM model)"),GWe=l(),Qf=a("li"),Ote=a("strong"),OWe=o("camembert"),VWe=o(" \u2014 "),CS=a("a"),XWe=o("CamembertConfig"),zWe=o(" (CamemBERT model)"),QWe=l(),Wf=a("li"),Vte=a("strong"),WWe=o("canine"),HWe=o(" \u2014 "),wS=a("a"),UWe=o("CanineConfig"),JWe=o(" (CANINE model)"),YWe=l(),Hf=a("li"),Xte=a("strong"),KWe=o("clip"),ZWe=o(" \u2014 "),AS=a("a"),eHe=o("CLIPConfig"),oHe=o(" (CLIP model)"),rHe=l(),Uf=a("li"),zte=a("strong"),tHe=o("codegen"),aHe=o(" \u2014 "),LS=a("a"),nHe=o("CodeGenConfig"),sHe=o(" (CodeGen model)"),lHe=l(),Jf=a("li"),Qte=a("strong"),iHe=o("convbert"),dHe=o(" \u2014 "),yS=a("a"),cHe=o("ConvBertConfig"),fHe=o(" (ConvBERT model)"),mHe=l(),Yf=a("li"),Wte=a("strong"),gHe=o("convnext"),hHe=o(" \u2014 "),xS=a("a"),pHe=o("ConvNextConfig"),_He=o(" (ConvNeXT model)"),uHe=l(),Kf=a("li"),Hte=a("strong"),bHe=o("ctrl"),vHe=o(" \u2014 "),$S=a("a"),FHe=o("CTRLConfig"),THe=o(" (CTRL model)"),MHe=l(),Zf=a("li"),Ute=a("strong"),EHe=o("cvt"),CHe=o(" \u2014 "),kS=a("a"),wHe=o("CvtConfig"),AHe=o(" (CvT model)"),LHe=l(),em=a("li"),Jte=a("strong"),yHe=o("data2vec-audio"),xHe=o(" \u2014 "),SS=a("a"),$He=o("Data2VecAudioConfig"),kHe=o(" (Data2VecAudio model)"),SHe=l(),om=a("li"),Yte=a("strong"),RHe=o("data2vec-text"),PHe=o(" \u2014 "),RS=a("a"),BHe=o("Data2VecTextConfig"),IHe=o(" (Data2VecText model)"),NHe=l(),rm=a("li"),Kte=a("strong"),qHe=o("data2vec-vision"),jHe=o(" \u2014 "),PS=a("a"),DHe=o("Data2VecVisionConfig"),GHe=o(" (Data2VecVision model)"),OHe=l(),tm=a("li"),Zte=a("strong"),VHe=o("deberta"),XHe=o(" \u2014 "),BS=a("a"),zHe=o("DebertaConfig"),QHe=o(" (DeBERTa model)"),WHe=l(),am=a("li"),eae=a("strong"),HHe=o("deberta-v2"),UHe=o(" \u2014 "),IS=a("a"),JHe=o("DebertaV2Config"),YHe=o(" (DeBERTa-v2 model)"),KHe=l(),nm=a("li"),oae=a("strong"),ZHe=o("decision_transformer"),eUe=o(" \u2014 "),NS=a("a"),oUe=o("DecisionTransformerConfig"),rUe=o(" (Decision Transformer model)"),tUe=l(),sm=a("li"),rae=a("strong"),aUe=o("deit"),nUe=o(" \u2014 "),qS=a("a"),sUe=o("DeiTConfig"),lUe=o(" (DeiT model)"),iUe=l(),lm=a("li"),tae=a("strong"),dUe=o("detr"),cUe=o(" \u2014 "),jS=a("a"),fUe=o("DetrConfig"),mUe=o(" (DETR model)"),gUe=l(),im=a("li"),aae=a("strong"),hUe=o("distilbert"),pUe=o(" \u2014 "),DS=a("a"),_Ue=o("DistilBertConfig"),uUe=o(" (DistilBERT model)"),bUe=l(),dm=a("li"),nae=a("strong"),vUe=o("dpr"),FUe=o(" \u2014 "),GS=a("a"),TUe=o("DPRConfig"),MUe=o(" (DPR model)"),EUe=l(),cm=a("li"),sae=a("strong"),CUe=o("dpt"),wUe=o(" \u2014 "),OS=a("a"),AUe=o("DPTConfig"),LUe=o(" (DPT model)"),yUe=l(),fm=a("li"),lae=a("strong"),xUe=o("electra"),$Ue=o(" \u2014 "),VS=a("a"),kUe=o("ElectraConfig"),SUe=o(" (ELECTRA model)"),RUe=l(),mm=a("li"),iae=a("strong"),PUe=o("encoder-decoder"),BUe=o(" \u2014 "),XS=a("a"),IUe=o("EncoderDecoderConfig"),NUe=o(" (Encoder decoder model)"),qUe=l(),gm=a("li"),dae=a("strong"),jUe=o("flaubert"),DUe=o(" \u2014 "),zS=a("a"),GUe=o("FlaubertConfig"),OUe=o(" (FlauBERT model)"),VUe=l(),hm=a("li"),cae=a("strong"),XUe=o("flava"),zUe=o(" \u2014 "),QS=a("a"),QUe=o("FlavaConfig"),WUe=o(" (FLAVA model)"),HUe=l(),pm=a("li"),fae=a("strong"),UUe=o("fnet"),JUe=o(" \u2014 "),WS=a("a"),YUe=o("FNetConfig"),KUe=o(" (FNet model)"),ZUe=l(),_m=a("li"),mae=a("strong"),eJe=o("fsmt"),oJe=o(" \u2014 "),HS=a("a"),rJe=o("FSMTConfig"),tJe=o(" (FairSeq Machine-Translation model)"),aJe=l(),um=a("li"),gae=a("strong"),nJe=o("funnel"),sJe=o(" \u2014 "),US=a("a"),lJe=o("FunnelConfig"),iJe=o(" (Funnel Transformer model)"),dJe=l(),bm=a("li"),hae=a("strong"),cJe=o("glpn"),fJe=o(" \u2014 "),JS=a("a"),mJe=o("GLPNConfig"),gJe=o(" (GLPN model)"),hJe=l(),vm=a("li"),pae=a("strong"),pJe=o("gpt2"),_Je=o(" \u2014 "),YS=a("a"),uJe=o("GPT2Config"),bJe=o(" (OpenAI GPT-2 model)"),vJe=l(),Fm=a("li"),_ae=a("strong"),FJe=o("gpt_neo"),TJe=o(" \u2014 "),KS=a("a"),MJe=o("GPTNeoConfig"),EJe=o(" (GPT Neo model)"),CJe=l(),Tm=a("li"),uae=a("strong"),wJe=o("gpt_neox"),AJe=o(" \u2014 "),ZS=a("a"),LJe=o("GPTNeoXConfig"),yJe=o(" (GPT NeoX model)"),xJe=l(),Mm=a("li"),bae=a("strong"),$Je=o("gptj"),kJe=o(" \u2014 "),eR=a("a"),SJe=o("GPTJConfig"),RJe=o(" (GPT-J model)"),PJe=l(),Em=a("li"),vae=a("strong"),BJe=o("hubert"),IJe=o(" \u2014 "),oR=a("a"),NJe=o("HubertConfig"),qJe=o(" (Hubert model)"),jJe=l(),Cm=a("li"),Fae=a("strong"),DJe=o("ibert"),GJe=o(" \u2014 "),rR=a("a"),OJe=o("IBertConfig"),VJe=o(" (I-BERT model)"),XJe=l(),wm=a("li"),Tae=a("strong"),zJe=o("imagegpt"),QJe=o(" \u2014 "),tR=a("a"),WJe=o("ImageGPTConfig"),HJe=o(" (ImageGPT model)"),UJe=l(),Am=a("li"),Mae=a("strong"),JJe=o("layoutlm"),YJe=o(" \u2014 "),aR=a("a"),KJe=o("LayoutLMConfig"),ZJe=o(" (LayoutLM model)"),eYe=l(),Lm=a("li"),Eae=a("strong"),oYe=o("layoutlmv2"),rYe=o(" \u2014 "),nR=a("a"),tYe=o("LayoutLMv2Config"),aYe=o(" (LayoutLMv2 model)"),nYe=l(),ym=a("li"),Cae=a("strong"),sYe=o("layoutlmv3"),lYe=o(" \u2014 "),sR=a("a"),iYe=o("LayoutLMv3Config"),dYe=o(" (LayoutLMv3 model)"),cYe=l(),xm=a("li"),wae=a("strong"),fYe=o("led"),mYe=o(" \u2014 "),lR=a("a"),gYe=o("LEDConfig"),hYe=o(" (LED model)"),pYe=l(),$m=a("li"),Aae=a("strong"),_Ye=o("levit"),uYe=o(" \u2014 "),iR=a("a"),bYe=o("LevitConfig"),vYe=o(" (LeViT model)"),FYe=l(),km=a("li"),Lae=a("strong"),TYe=o("longformer"),MYe=o(" \u2014 "),dR=a("a"),EYe=o("LongformerConfig"),CYe=o(" (Longformer model)"),wYe=l(),Sm=a("li"),yae=a("strong"),AYe=o("longt5"),LYe=o(" \u2014 "),cR=a("a"),yYe=o("LongT5Config"),xYe=o(" (LongT5 model)"),$Ye=l(),Rm=a("li"),xae=a("strong"),kYe=o("luke"),SYe=o(" \u2014 "),fR=a("a"),RYe=o("LukeConfig"),PYe=o(" (LUKE model)"),BYe=l(),Pm=a("li"),$ae=a("strong"),IYe=o("lxmert"),NYe=o(" \u2014 "),mR=a("a"),qYe=o("LxmertConfig"),jYe=o(" (LXMERT model)"),DYe=l(),Bm=a("li"),kae=a("strong"),GYe=o("m2m_100"),OYe=o(" \u2014 "),gR=a("a"),VYe=o("M2M100Config"),XYe=o(" (M2M100 model)"),zYe=l(),Im=a("li"),Sae=a("strong"),QYe=o("marian"),WYe=o(" \u2014 "),hR=a("a"),HYe=o("MarianConfig"),UYe=o(" (Marian model)"),JYe=l(),Nm=a("li"),Rae=a("strong"),YYe=o("maskformer"),KYe=o(" \u2014 "),pR=a("a"),ZYe=o("MaskFormerConfig"),eKe=o(" (MaskFormer model)"),oKe=l(),qm=a("li"),Pae=a("strong"),rKe=o("mbart"),tKe=o(" \u2014 "),_R=a("a"),aKe=o("MBartConfig"),nKe=o(" (mBART model)"),sKe=l(),jm=a("li"),Bae=a("strong"),lKe=o("mctct"),iKe=o(" \u2014 "),uR=a("a"),dKe=o("MCTCTConfig"),cKe=o(" (M-CTC-T model)"),fKe=l(),Dm=a("li"),Iae=a("strong"),mKe=o("megatron-bert"),gKe=o(" \u2014 "),bR=a("a"),hKe=o("MegatronBertConfig"),pKe=o(" (Megatron-BERT model)"),_Ke=l(),Gm=a("li"),Nae=a("strong"),uKe=o("mobilebert"),bKe=o(" \u2014 "),vR=a("a"),vKe=o("MobileBertConfig"),FKe=o(" (MobileBERT model)"),TKe=l(),Om=a("li"),qae=a("strong"),MKe=o("mpnet"),EKe=o(" \u2014 "),FR=a("a"),CKe=o("MPNetConfig"),wKe=o(" (MPNet model)"),AKe=l(),Vm=a("li"),jae=a("strong"),LKe=o("mt5"),yKe=o(" \u2014 "),TR=a("a"),xKe=o("MT5Config"),$Ke=o(" (MT5 model)"),kKe=l(),Xm=a("li"),Dae=a("strong"),SKe=o("nezha"),RKe=o(" \u2014 "),MR=a("a"),PKe=o("NezhaConfig"),BKe=o(" (Nezha model)"),IKe=l(),zm=a("li"),Gae=a("strong"),NKe=o("nystromformer"),qKe=o(" \u2014 "),ER=a("a"),jKe=o("NystromformerConfig"),DKe=o(" (Nystr\xF6mformer model)"),GKe=l(),Qm=a("li"),Oae=a("strong"),OKe=o("openai-gpt"),VKe=o(" \u2014 "),CR=a("a"),XKe=o("OpenAIGPTConfig"),zKe=o(" (OpenAI GPT model)"),QKe=l(),Wm=a("li"),Vae=a("strong"),WKe=o("opt"),HKe=o(" \u2014 "),wR=a("a"),UKe=o("OPTConfig"),JKe=o(" (OPT model)"),YKe=l(),Hm=a("li"),Xae=a("strong"),KKe=o("pegasus"),ZKe=o(" \u2014 "),AR=a("a"),eZe=o("PegasusConfig"),oZe=o(" (Pegasus model)"),rZe=l(),Um=a("li"),zae=a("strong"),tZe=o("perceiver"),aZe=o(" \u2014 "),LR=a("a"),nZe=o("PerceiverConfig"),sZe=o(" (Perceiver model)"),lZe=l(),Jm=a("li"),Qae=a("strong"),iZe=o("plbart"),dZe=o(" \u2014 "),yR=a("a"),cZe=o("PLBartConfig"),fZe=o(" (PLBart model)"),mZe=l(),Ym=a("li"),Wae=a("strong"),gZe=o("poolformer"),hZe=o(" \u2014 "),xR=a("a"),pZe=o("PoolFormerConfig"),_Ze=o(" (PoolFormer model)"),uZe=l(),Km=a("li"),Hae=a("strong"),bZe=o("prophetnet"),vZe=o(" \u2014 "),$R=a("a"),FZe=o("ProphetNetConfig"),TZe=o(" (ProphetNet model)"),MZe=l(),Zm=a("li"),Uae=a("strong"),EZe=o("qdqbert"),CZe=o(" \u2014 "),kR=a("a"),wZe=o("QDQBertConfig"),AZe=o(" (QDQBert model)"),LZe=l(),eg=a("li"),Jae=a("strong"),yZe=o("rag"),xZe=o(" \u2014 "),SR=a("a"),$Ze=o("RagConfig"),kZe=o(" (RAG model)"),SZe=l(),og=a("li"),Yae=a("strong"),RZe=o("realm"),PZe=o(" \u2014 "),RR=a("a"),BZe=o("RealmConfig"),IZe=o(" (REALM model)"),NZe=l(),rg=a("li"),Kae=a("strong"),qZe=o("reformer"),jZe=o(" \u2014 "),PR=a("a"),DZe=o("ReformerConfig"),GZe=o(" (Reformer model)"),OZe=l(),tg=a("li"),Zae=a("strong"),VZe=o("regnet"),XZe=o(" \u2014 "),BR=a("a"),zZe=o("RegNetConfig"),QZe=o(" (RegNet model)"),WZe=l(),ag=a("li"),ene=a("strong"),HZe=o("rembert"),UZe=o(" \u2014 "),IR=a("a"),JZe=o("RemBertConfig"),YZe=o(" (RemBERT model)"),KZe=l(),ng=a("li"),one=a("strong"),ZZe=o("resnet"),eeo=o(" \u2014 "),NR=a("a"),oeo=o("ResNetConfig"),reo=o(" (ResNet model)"),teo=l(),sg=a("li"),rne=a("strong"),aeo=o("retribert"),neo=o(" \u2014 "),qR=a("a"),seo=o("RetriBertConfig"),leo=o(" (RetriBERT model)"),ieo=l(),lg=a("li"),tne=a("strong"),deo=o("roberta"),ceo=o(" \u2014 "),jR=a("a"),feo=o("RobertaConfig"),meo=o(" (RoBERTa model)"),geo=l(),ig=a("li"),ane=a("strong"),heo=o("roformer"),peo=o(" \u2014 "),DR=a("a"),_eo=o("RoFormerConfig"),ueo=o(" (RoFormer model)"),beo=l(),dg=a("li"),nne=a("strong"),veo=o("segformer"),Feo=o(" \u2014 "),GR=a("a"),Teo=o("SegformerConfig"),Meo=o(" (SegFormer model)"),Eeo=l(),cg=a("li"),sne=a("strong"),Ceo=o("sew"),weo=o(" \u2014 "),OR=a("a"),Aeo=o("SEWConfig"),Leo=o(" (SEW model)"),yeo=l(),fg=a("li"),lne=a("strong"),xeo=o("sew-d"),$eo=o(" \u2014 "),VR=a("a"),keo=o("SEWDConfig"),Seo=o(" (SEW-D model)"),Reo=l(),mg=a("li"),ine=a("strong"),Peo=o("speech-encoder-decoder"),Beo=o(" \u2014 "),XR=a("a"),Ieo=o("SpeechEncoderDecoderConfig"),Neo=o(" (Speech Encoder decoder model)"),qeo=l(),gg=a("li"),dne=a("strong"),jeo=o("speech_to_text"),Deo=o(" \u2014 "),zR=a("a"),Geo=o("Speech2TextConfig"),Oeo=o(" (Speech2Text model)"),Veo=l(),hg=a("li"),cne=a("strong"),Xeo=o("speech_to_text_2"),zeo=o(" \u2014 "),QR=a("a"),Qeo=o("Speech2Text2Config"),Weo=o(" (Speech2Text2 model)"),Heo=l(),pg=a("li"),fne=a("strong"),Ueo=o("splinter"),Jeo=o(" \u2014 "),WR=a("a"),Yeo=o("SplinterConfig"),Keo=o(" (Splinter model)"),Zeo=l(),_g=a("li"),mne=a("strong"),eoo=o("squeezebert"),ooo=o(" \u2014 "),HR=a("a"),roo=o("SqueezeBertConfig"),too=o(" (SqueezeBERT model)"),aoo=l(),ug=a("li"),gne=a("strong"),noo=o("swin"),soo=o(" \u2014 "),UR=a("a"),loo=o("SwinConfig"),ioo=o(" (Swin Transformer model)"),doo=l(),bg=a("li"),hne=a("strong"),coo=o("t5"),foo=o(" \u2014 "),JR=a("a"),moo=o("T5Config"),goo=o(" (T5 model)"),hoo=l(),vg=a("li"),pne=a("strong"),poo=o("tapas"),_oo=o(" \u2014 "),YR=a("a"),uoo=o("TapasConfig"),boo=o(" (TAPAS model)"),voo=l(),Fg=a("li"),_ne=a("strong"),Foo=o("trajectory_transformer"),Too=o(" \u2014 "),KR=a("a"),Moo=o("TrajectoryTransformerConfig"),Eoo=o(" (Trajectory Transformer model)"),Coo=l(),Tg=a("li"),une=a("strong"),woo=o("transfo-xl"),Aoo=o(" \u2014 "),ZR=a("a"),Loo=o("TransfoXLConfig"),yoo=o(" (Transformer-XL model)"),xoo=l(),Mg=a("li"),bne=a("strong"),$oo=o("trocr"),koo=o(" \u2014 "),eP=a("a"),Soo=o("TrOCRConfig"),Roo=o(" (TrOCR model)"),Poo=l(),Eg=a("li"),vne=a("strong"),Boo=o("unispeech"),Ioo=o(" \u2014 "),oP=a("a"),Noo=o("UniSpeechConfig"),qoo=o(" (UniSpeech model)"),joo=l(),Cg=a("li"),Fne=a("strong"),Doo=o("unispeech-sat"),Goo=o(" \u2014 "),rP=a("a"),Ooo=o("UniSpeechSatConfig"),Voo=o(" (UniSpeechSat model)"),Xoo=l(),wg=a("li"),Tne=a("strong"),zoo=o("van"),Qoo=o(" \u2014 "),tP=a("a"),Woo=o("VanConfig"),Hoo=o(" (VAN model)"),Uoo=l(),Ag=a("li"),Mne=a("strong"),Joo=o("vilt"),Yoo=o(" \u2014 "),aP=a("a"),Koo=o("ViltConfig"),Zoo=o(" (ViLT model)"),ero=l(),Lg=a("li"),Ene=a("strong"),oro=o("vision-encoder-decoder"),rro=o(" \u2014 "),nP=a("a"),tro=o("VisionEncoderDecoderConfig"),aro=o(" (Vision Encoder decoder model)"),nro=l(),yg=a("li"),Cne=a("strong"),sro=o("vision-text-dual-encoder"),lro=o(" \u2014 "),sP=a("a"),iro=o("VisionTextDualEncoderConfig"),dro=o(" (VisionTextDualEncoder model)"),cro=l(),xg=a("li"),wne=a("strong"),fro=o("visual_bert"),mro=o(" \u2014 "),lP=a("a"),gro=o("VisualBertConfig"),hro=o(" (VisualBERT model)"),pro=l(),$g=a("li"),Ane=a("strong"),_ro=o("vit"),uro=o(" \u2014 "),iP=a("a"),bro=o("ViTConfig"),vro=o(" (ViT model)"),Fro=l(),kg=a("li"),Lne=a("strong"),Tro=o("vit_mae"),Mro=o(" \u2014 "),dP=a("a"),Ero=o("ViTMAEConfig"),Cro=o(" (ViTMAE model)"),wro=l(),Sg=a("li"),yne=a("strong"),Aro=o("wav2vec2"),Lro=o(" \u2014 "),cP=a("a"),yro=o("Wav2Vec2Config"),xro=o(" (Wav2Vec2 model)"),$ro=l(),Rg=a("li"),xne=a("strong"),kro=o("wav2vec2-conformer"),Sro=o(" \u2014 "),fP=a("a"),Rro=o("Wav2Vec2ConformerConfig"),Pro=o(" (Wav2Vec2-Conformer model)"),Bro=l(),Pg=a("li"),$ne=a("strong"),Iro=o("wavlm"),Nro=o(" \u2014 "),mP=a("a"),qro=o("WavLMConfig"),jro=o(" (WavLM model)"),Dro=l(),Bg=a("li"),kne=a("strong"),Gro=o("xglm"),Oro=o(" \u2014 "),gP=a("a"),Vro=o("XGLMConfig"),Xro=o(" (XGLM model)"),zro=l(),Ig=a("li"),Sne=a("strong"),Qro=o("xlm"),Wro=o(" \u2014 "),hP=a("a"),Hro=o("XLMConfig"),Uro=o(" (XLM model)"),Jro=l(),Ng=a("li"),Rne=a("strong"),Yro=o("xlm-prophetnet"),Kro=o(" \u2014 "),pP=a("a"),Zro=o("XLMProphetNetConfig"),eto=o(" (XLM-ProphetNet model)"),oto=l(),qg=a("li"),Pne=a("strong"),rto=o("xlm-roberta"),tto=o(" \u2014 "),_P=a("a"),ato=o("XLMRobertaConfig"),nto=o(" (XLM-RoBERTa model)"),sto=l(),jg=a("li"),Bne=a("strong"),lto=o("xlm-roberta-xl"),ito=o(" \u2014 "),uP=a("a"),dto=o("XLMRobertaXLConfig"),cto=o(" (XLM-RoBERTa-XL model)"),fto=l(),Dg=a("li"),Ine=a("strong"),mto=o("xlnet"),gto=o(" \u2014 "),bP=a("a"),hto=o("XLNetConfig"),pto=o(" (XLNet model)"),_to=l(),Gg=a("li"),Nne=a("strong"),uto=o("yolos"),bto=o(" \u2014 "),vP=a("a"),vto=o("YolosConfig"),Fto=o(" (YOLOS model)"),Tto=l(),Og=a("li"),qne=a("strong"),Mto=o("yoso"),Eto=o(" \u2014 "),FP=a("a"),Cto=o("YosoConfig"),wto=o(" (YOSO model)"),Ato=l(),F(Vg.$$.fragment),Lto=l(),Xg=a("div"),F(DL.$$.fragment),yto=l(),jne=a("p"),xto=o("Register a new configuration for this class."),dOe=l(),Si=a("h2"),zg=a("a"),Dne=a("span"),F(GL.$$.fragment),$to=l(),Gne=a("span"),kto=o("AutoTokenizer"),cOe=l(),Ao=a("div"),F(OL.$$.fragment),Sto=l(),VL=a("p"),Rto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TP=a("a"),Pto=o("AutoTokenizer.from_pretrained()"),Bto=o(" class method."),Ito=l(),XL=a("p"),Nto=o("This class cannot be instantiated directly using "),One=a("code"),qto=o("__init__()"),jto=o(" (throws an error)."),Dto=l(),Lr=a("div"),F(zL.$$.fragment),Gto=l(),Vne=a("p"),Oto=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Vto=l(),ka=a("p"),Xto=o("The tokenizer class to instantiate is selected based on the "),Xne=a("code"),zto=o("model_type"),Qto=o(` property of the config object (either
passed as an argument or loaded from `),zne=a("code"),Wto=o("pretrained_model_name_or_path"),Hto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=a("code"),Uto=o("pretrained_model_name_or_path"),Jto=o(":"),Yto=l(),k=a("ul"),qn=a("li"),Wne=a("strong"),Kto=o("albert"),Zto=o(" \u2014 "),MP=a("a"),eao=o("AlbertTokenizer"),oao=o(" or "),EP=a("a"),rao=o("AlbertTokenizerFast"),tao=o(" (ALBERT model)"),aao=l(),jn=a("li"),Hne=a("strong"),nao=o("bart"),sao=o(" \u2014 "),CP=a("a"),lao=o("BartTokenizer"),iao=o(" or "),wP=a("a"),dao=o("BartTokenizerFast"),cao=o(" (BART model)"),fao=l(),Dn=a("li"),Une=a("strong"),mao=o("barthez"),gao=o(" \u2014 "),AP=a("a"),hao=o("BarthezTokenizer"),pao=o(" or "),LP=a("a"),_ao=o("BarthezTokenizerFast"),uao=o(" (BARThez model)"),bao=l(),Qg=a("li"),Jne=a("strong"),vao=o("bartpho"),Fao=o(" \u2014 "),yP=a("a"),Tao=o("BartphoTokenizer"),Mao=o(" (BARTpho model)"),Eao=l(),Gn=a("li"),Yne=a("strong"),Cao=o("bert"),wao=o(" \u2014 "),xP=a("a"),Aao=o("BertTokenizer"),Lao=o(" or "),$P=a("a"),yao=o("BertTokenizerFast"),xao=o(" (BERT model)"),$ao=l(),Wg=a("li"),Kne=a("strong"),kao=o("bert-generation"),Sao=o(" \u2014 "),kP=a("a"),Rao=o("BertGenerationTokenizer"),Pao=o(" (Bert Generation model)"),Bao=l(),Hg=a("li"),Zne=a("strong"),Iao=o("bert-japanese"),Nao=o(" \u2014 "),SP=a("a"),qao=o("BertJapaneseTokenizer"),jao=o(" (BertJapanese model)"),Dao=l(),Ug=a("li"),ese=a("strong"),Gao=o("bertweet"),Oao=o(" \u2014 "),RP=a("a"),Vao=o("BertweetTokenizer"),Xao=o(" (BERTweet model)"),zao=l(),On=a("li"),ose=a("strong"),Qao=o("big_bird"),Wao=o(" \u2014 "),PP=a("a"),Hao=o("BigBirdTokenizer"),Uao=o(" or "),BP=a("a"),Jao=o("BigBirdTokenizerFast"),Yao=o(" (BigBird model)"),Kao=l(),Vn=a("li"),rse=a("strong"),Zao=o("bigbird_pegasus"),eno=o(" \u2014 "),IP=a("a"),ono=o("PegasusTokenizer"),rno=o(" or "),NP=a("a"),tno=o("PegasusTokenizerFast"),ano=o(" (BigBird-Pegasus model)"),nno=l(),Xn=a("li"),tse=a("strong"),sno=o("blenderbot"),lno=o(" \u2014 "),qP=a("a"),ino=o("BlenderbotTokenizer"),dno=o(" or "),jP=a("a"),cno=o("BlenderbotTokenizerFast"),fno=o(" (Blenderbot model)"),mno=l(),Jg=a("li"),ase=a("strong"),gno=o("blenderbot-small"),hno=o(" \u2014 "),DP=a("a"),pno=o("BlenderbotSmallTokenizer"),_no=o(" (BlenderbotSmall model)"),uno=l(),Yg=a("li"),nse=a("strong"),bno=o("bloom"),vno=o(" \u2014 "),GP=a("a"),Fno=o("BloomTokenizerFast"),Tno=o(" (BLOOM model)"),Mno=l(),Kg=a("li"),sse=a("strong"),Eno=o("byt5"),Cno=o(" \u2014 "),OP=a("a"),wno=o("ByT5Tokenizer"),Ano=o(" (ByT5 model)"),Lno=l(),zn=a("li"),lse=a("strong"),yno=o("camembert"),xno=o(" \u2014 "),VP=a("a"),$no=o("CamembertTokenizer"),kno=o(" or "),XP=a("a"),Sno=o("CamembertTokenizerFast"),Rno=o(" (CamemBERT model)"),Pno=l(),Zg=a("li"),ise=a("strong"),Bno=o("canine"),Ino=o(" \u2014 "),zP=a("a"),Nno=o("CanineTokenizer"),qno=o(" (CANINE model)"),jno=l(),Qn=a("li"),dse=a("strong"),Dno=o("clip"),Gno=o(" \u2014 "),QP=a("a"),Ono=o("CLIPTokenizer"),Vno=o(" or "),WP=a("a"),Xno=o("CLIPTokenizerFast"),zno=o(" (CLIP model)"),Qno=l(),Wn=a("li"),cse=a("strong"),Wno=o("codegen"),Hno=o(" \u2014 "),HP=a("a"),Uno=o("CodeGenTokenizer"),Jno=o(" or "),UP=a("a"),Yno=o("CodeGenTokenizerFast"),Kno=o(" (CodeGen model)"),Zno=l(),Hn=a("li"),fse=a("strong"),eso=o("convbert"),oso=o(" \u2014 "),JP=a("a"),rso=o("ConvBertTokenizer"),tso=o(" or "),YP=a("a"),aso=o("ConvBertTokenizerFast"),nso=o(" (ConvBERT model)"),sso=l(),Un=a("li"),mse=a("strong"),lso=o("cpm"),iso=o(" \u2014 "),KP=a("a"),dso=o("CpmTokenizer"),cso=o(" or "),ZP=a("a"),fso=o("CpmTokenizerFast"),mso=o(" (CPM model)"),gso=l(),eh=a("li"),gse=a("strong"),hso=o("ctrl"),pso=o(" \u2014 "),eB=a("a"),_so=o("CTRLTokenizer"),uso=o(" (CTRL model)"),bso=l(),Jn=a("li"),hse=a("strong"),vso=o("data2vec-text"),Fso=o(" \u2014 "),oB=a("a"),Tso=o("RobertaTokenizer"),Mso=o(" or "),rB=a("a"),Eso=o("RobertaTokenizerFast"),Cso=o(" (Data2VecText model)"),wso=l(),Yn=a("li"),pse=a("strong"),Aso=o("deberta"),Lso=o(" \u2014 "),tB=a("a"),yso=o("DebertaTokenizer"),xso=o(" or "),aB=a("a"),$so=o("DebertaTokenizerFast"),kso=o(" (DeBERTa model)"),Sso=l(),Kn=a("li"),_se=a("strong"),Rso=o("deberta-v2"),Pso=o(" \u2014 "),nB=a("a"),Bso=o("DebertaV2Tokenizer"),Iso=o(" or "),sB=a("a"),Nso=o("DebertaV2TokenizerFast"),qso=o(" (DeBERTa-v2 model)"),jso=l(),Zn=a("li"),use=a("strong"),Dso=o("distilbert"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("DistilBertTokenizer"),Vso=o(" or "),iB=a("a"),Xso=o("DistilBertTokenizerFast"),zso=o(" (DistilBERT model)"),Qso=l(),es=a("li"),bse=a("strong"),Wso=o("dpr"),Hso=o(" \u2014 "),dB=a("a"),Uso=o("DPRQuestionEncoderTokenizer"),Jso=o(" or "),cB=a("a"),Yso=o("DPRQuestionEncoderTokenizerFast"),Kso=o(" (DPR model)"),Zso=l(),os=a("li"),vse=a("strong"),elo=o("electra"),olo=o(" \u2014 "),fB=a("a"),rlo=o("ElectraTokenizer"),tlo=o(" or "),mB=a("a"),alo=o("ElectraTokenizerFast"),nlo=o(" (ELECTRA model)"),slo=l(),oh=a("li"),Fse=a("strong"),llo=o("flaubert"),ilo=o(" \u2014 "),gB=a("a"),dlo=o("FlaubertTokenizer"),clo=o(" (FlauBERT model)"),flo=l(),rs=a("li"),Tse=a("strong"),mlo=o("fnet"),glo=o(" \u2014 "),hB=a("a"),hlo=o("FNetTokenizer"),plo=o(" or "),pB=a("a"),_lo=o("FNetTokenizerFast"),ulo=o(" (FNet model)"),blo=l(),rh=a("li"),Mse=a("strong"),vlo=o("fsmt"),Flo=o(" \u2014 "),_B=a("a"),Tlo=o("FSMTTokenizer"),Mlo=o(" (FairSeq Machine-Translation model)"),Elo=l(),ts=a("li"),Ese=a("strong"),Clo=o("funnel"),wlo=o(" \u2014 "),uB=a("a"),Alo=o("FunnelTokenizer"),Llo=o(" or "),bB=a("a"),ylo=o("FunnelTokenizerFast"),xlo=o(" (Funnel Transformer model)"),$lo=l(),as=a("li"),Cse=a("strong"),klo=o("gpt2"),Slo=o(" \u2014 "),vB=a("a"),Rlo=o("GPT2Tokenizer"),Plo=o(" or "),FB=a("a"),Blo=o("GPT2TokenizerFast"),Ilo=o(" (OpenAI GPT-2 model)"),Nlo=l(),ns=a("li"),wse=a("strong"),qlo=o("gpt_neo"),jlo=o(" \u2014 "),TB=a("a"),Dlo=o("GPT2Tokenizer"),Glo=o(" or "),MB=a("a"),Olo=o("GPT2TokenizerFast"),Vlo=o(" (GPT Neo model)"),Xlo=l(),th=a("li"),Ase=a("strong"),zlo=o("gpt_neox"),Qlo=o(" \u2014 "),EB=a("a"),Wlo=o("GPTNeoXTokenizerFast"),Hlo=o(" (GPT NeoX model)"),Ulo=l(),ss=a("li"),Lse=a("strong"),Jlo=o("gptj"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("GPT2Tokenizer"),Zlo=o(" or "),wB=a("a"),eio=o("GPT2TokenizerFast"),oio=o(" (GPT-J model)"),rio=l(),ls=a("li"),yse=a("strong"),tio=o("herbert"),aio=o(" \u2014 "),AB=a("a"),nio=o("HerbertTokenizer"),sio=o(" or "),LB=a("a"),lio=o("HerbertTokenizerFast"),iio=o(" (HerBERT model)"),dio=l(),ah=a("li"),xse=a("strong"),cio=o("hubert"),fio=o(" \u2014 "),yB=a("a"),mio=o("Wav2Vec2CTCTokenizer"),gio=o(" (Hubert model)"),hio=l(),is=a("li"),$se=a("strong"),pio=o("ibert"),_io=o(" \u2014 "),xB=a("a"),uio=o("RobertaTokenizer"),bio=o(" or "),$B=a("a"),vio=o("RobertaTokenizerFast"),Fio=o(" (I-BERT model)"),Tio=l(),ds=a("li"),kse=a("strong"),Mio=o("layoutlm"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("LayoutLMTokenizer"),wio=o(" or "),SB=a("a"),Aio=o("LayoutLMTokenizerFast"),Lio=o(" (LayoutLM model)"),yio=l(),cs=a("li"),Sse=a("strong"),xio=o("layoutlmv2"),$io=o(" \u2014 "),RB=a("a"),kio=o("LayoutLMv2Tokenizer"),Sio=o(" or "),PB=a("a"),Rio=o("LayoutLMv2TokenizerFast"),Pio=o(" (LayoutLMv2 model)"),Bio=l(),fs=a("li"),Rse=a("strong"),Iio=o("layoutlmv3"),Nio=o(" \u2014 "),BB=a("a"),qio=o("LayoutLMv3Tokenizer"),jio=o(" or "),IB=a("a"),Dio=o("LayoutLMv3TokenizerFast"),Gio=o(" (LayoutLMv3 model)"),Oio=l(),ms=a("li"),Pse=a("strong"),Vio=o("layoutxlm"),Xio=o(" \u2014 "),NB=a("a"),zio=o("LayoutXLMTokenizer"),Qio=o(" or "),qB=a("a"),Wio=o("LayoutXLMTokenizerFast"),Hio=o(" (LayoutXLM model)"),Uio=l(),gs=a("li"),Bse=a("strong"),Jio=o("led"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("LEDTokenizer"),Zio=o(" or "),DB=a("a"),edo=o("LEDTokenizerFast"),odo=o(" (LED model)"),rdo=l(),hs=a("li"),Ise=a("strong"),tdo=o("longformer"),ado=o(" \u2014 "),GB=a("a"),ndo=o("LongformerTokenizer"),sdo=o(" or "),OB=a("a"),ldo=o("LongformerTokenizerFast"),ido=o(" (Longformer model)"),ddo=l(),ps=a("li"),Nse=a("strong"),cdo=o("longt5"),fdo=o(" \u2014 "),VB=a("a"),mdo=o("T5Tokenizer"),gdo=o(" or "),XB=a("a"),hdo=o("T5TokenizerFast"),pdo=o(" (LongT5 model)"),_do=l(),nh=a("li"),qse=a("strong"),udo=o("luke"),bdo=o(" \u2014 "),zB=a("a"),vdo=o("LukeTokenizer"),Fdo=o(" (LUKE model)"),Tdo=l(),_s=a("li"),jse=a("strong"),Mdo=o("lxmert"),Edo=o(" \u2014 "),QB=a("a"),Cdo=o("LxmertTokenizer"),wdo=o(" or "),WB=a("a"),Ado=o("LxmertTokenizerFast"),Ldo=o(" (LXMERT model)"),ydo=l(),sh=a("li"),Dse=a("strong"),xdo=o("m2m_100"),$do=o(" \u2014 "),HB=a("a"),kdo=o("M2M100Tokenizer"),Sdo=o(" (M2M100 model)"),Rdo=l(),lh=a("li"),Gse=a("strong"),Pdo=o("marian"),Bdo=o(" \u2014 "),UB=a("a"),Ido=o("MarianTokenizer"),Ndo=o(" (Marian model)"),qdo=l(),us=a("li"),Ose=a("strong"),jdo=o("mbart"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("MBartTokenizer"),Odo=o(" or "),YB=a("a"),Vdo=o("MBartTokenizerFast"),Xdo=o(" (mBART model)"),zdo=l(),bs=a("li"),Vse=a("strong"),Qdo=o("mbart50"),Wdo=o(" \u2014 "),KB=a("a"),Hdo=o("MBart50Tokenizer"),Udo=o(" or "),ZB=a("a"),Jdo=o("MBart50TokenizerFast"),Ydo=o(" (mBART-50 model)"),Kdo=l(),vs=a("li"),Xse=a("strong"),Zdo=o("megatron-bert"),eco=o(" \u2014 "),eI=a("a"),oco=o("BertTokenizer"),rco=o(" or "),oI=a("a"),tco=o("BertTokenizerFast"),aco=o(" (Megatron-BERT model)"),nco=l(),ih=a("li"),zse=a("strong"),sco=o("mluke"),lco=o(" \u2014 "),rI=a("a"),ico=o("MLukeTokenizer"),dco=o(" (mLUKE model)"),cco=l(),Fs=a("li"),Qse=a("strong"),fco=o("mobilebert"),mco=o(" \u2014 "),tI=a("a"),gco=o("MobileBertTokenizer"),hco=o(" or "),aI=a("a"),pco=o("MobileBertTokenizerFast"),_co=o(" (MobileBERT model)"),uco=l(),Ts=a("li"),Wse=a("strong"),bco=o("mpnet"),vco=o(" \u2014 "),nI=a("a"),Fco=o("MPNetTokenizer"),Tco=o(" or "),sI=a("a"),Mco=o("MPNetTokenizerFast"),Eco=o(" (MPNet model)"),Cco=l(),Ms=a("li"),Hse=a("strong"),wco=o("mt5"),Aco=o(" \u2014 "),lI=a("a"),Lco=o("MT5Tokenizer"),yco=o(" or "),iI=a("a"),xco=o("MT5TokenizerFast"),$co=o(" (MT5 model)"),kco=l(),Es=a("li"),Use=a("strong"),Sco=o("nezha"),Rco=o(" \u2014 "),dI=a("a"),Pco=o("BertTokenizer"),Bco=o(" or "),cI=a("a"),Ico=o("BertTokenizerFast"),Nco=o(" (Nezha model)"),qco=l(),Cs=a("li"),Jse=a("strong"),jco=o("nystromformer"),Dco=o(" \u2014 "),fI=a("a"),Gco=o("AlbertTokenizer"),Oco=o(" or "),mI=a("a"),Vco=o("AlbertTokenizerFast"),Xco=o(" (Nystr\xF6mformer model)"),zco=l(),ws=a("li"),Yse=a("strong"),Qco=o("openai-gpt"),Wco=o(" \u2014 "),gI=a("a"),Hco=o("OpenAIGPTTokenizer"),Uco=o(" or "),hI=a("a"),Jco=o("OpenAIGPTTokenizerFast"),Yco=o(" (OpenAI GPT model)"),Kco=l(),dh=a("li"),Kse=a("strong"),Zco=o("opt"),efo=o(" \u2014 "),pI=a("a"),ofo=o("GPT2Tokenizer"),rfo=o(" (OPT model)"),tfo=l(),As=a("li"),Zse=a("strong"),afo=o("pegasus"),nfo=o(" \u2014 "),_I=a("a"),sfo=o("PegasusTokenizer"),lfo=o(" or "),uI=a("a"),ifo=o("PegasusTokenizerFast"),dfo=o(" (Pegasus model)"),cfo=l(),ch=a("li"),ele=a("strong"),ffo=o("perceiver"),mfo=o(" \u2014 "),bI=a("a"),gfo=o("PerceiverTokenizer"),hfo=o(" (Perceiver model)"),pfo=l(),fh=a("li"),ole=a("strong"),_fo=o("phobert"),ufo=o(" \u2014 "),vI=a("a"),bfo=o("PhobertTokenizer"),vfo=o(" (PhoBERT model)"),Ffo=l(),mh=a("li"),rle=a("strong"),Tfo=o("plbart"),Mfo=o(" \u2014 "),FI=a("a"),Efo=o("PLBartTokenizer"),Cfo=o(" (PLBart model)"),wfo=l(),gh=a("li"),tle=a("strong"),Afo=o("prophetnet"),Lfo=o(" \u2014 "),TI=a("a"),yfo=o("ProphetNetTokenizer"),xfo=o(" (ProphetNet model)"),$fo=l(),Ls=a("li"),ale=a("strong"),kfo=o("qdqbert"),Sfo=o(" \u2014 "),MI=a("a"),Rfo=o("BertTokenizer"),Pfo=o(" or "),EI=a("a"),Bfo=o("BertTokenizerFast"),Ifo=o(" (QDQBert model)"),Nfo=l(),hh=a("li"),nle=a("strong"),qfo=o("rag"),jfo=o(" \u2014 "),CI=a("a"),Dfo=o("RagTokenizer"),Gfo=o(" (RAG model)"),Ofo=l(),ys=a("li"),sle=a("strong"),Vfo=o("realm"),Xfo=o(" \u2014 "),wI=a("a"),zfo=o("RealmTokenizer"),Qfo=o(" or "),AI=a("a"),Wfo=o("RealmTokenizerFast"),Hfo=o(" (REALM model)"),Ufo=l(),xs=a("li"),lle=a("strong"),Jfo=o("reformer"),Yfo=o(" \u2014 "),LI=a("a"),Kfo=o("ReformerTokenizer"),Zfo=o(" or "),yI=a("a"),emo=o("ReformerTokenizerFast"),omo=o(" (Reformer model)"),rmo=l(),$s=a("li"),ile=a("strong"),tmo=o("rembert"),amo=o(" \u2014 "),xI=a("a"),nmo=o("RemBertTokenizer"),smo=o(" or "),$I=a("a"),lmo=o("RemBertTokenizerFast"),imo=o(" (RemBERT model)"),dmo=l(),ks=a("li"),dle=a("strong"),cmo=o("retribert"),fmo=o(" \u2014 "),kI=a("a"),mmo=o("RetriBertTokenizer"),gmo=o(" or "),SI=a("a"),hmo=o("RetriBertTokenizerFast"),pmo=o(" (RetriBERT model)"),_mo=l(),Ss=a("li"),cle=a("strong"),umo=o("roberta"),bmo=o(" \u2014 "),RI=a("a"),vmo=o("RobertaTokenizer"),Fmo=o(" or "),PI=a("a"),Tmo=o("RobertaTokenizerFast"),Mmo=o(" (RoBERTa model)"),Emo=l(),Rs=a("li"),fle=a("strong"),Cmo=o("roformer"),wmo=o(" \u2014 "),BI=a("a"),Amo=o("RoFormerTokenizer"),Lmo=o(" or "),II=a("a"),ymo=o("RoFormerTokenizerFast"),xmo=o(" (RoFormer model)"),$mo=l(),ph=a("li"),mle=a("strong"),kmo=o("speech_to_text"),Smo=o(" \u2014 "),NI=a("a"),Rmo=o("Speech2TextTokenizer"),Pmo=o(" (Speech2Text model)"),Bmo=l(),_h=a("li"),gle=a("strong"),Imo=o("speech_to_text_2"),Nmo=o(" \u2014 "),qI=a("a"),qmo=o("Speech2Text2Tokenizer"),jmo=o(" (Speech2Text2 model)"),Dmo=l(),Ps=a("li"),hle=a("strong"),Gmo=o("splinter"),Omo=o(" \u2014 "),jI=a("a"),Vmo=o("SplinterTokenizer"),Xmo=o(" or "),DI=a("a"),zmo=o("SplinterTokenizerFast"),Qmo=o(" (Splinter model)"),Wmo=l(),Bs=a("li"),ple=a("strong"),Hmo=o("squeezebert"),Umo=o(" \u2014 "),GI=a("a"),Jmo=o("SqueezeBertTokenizer"),Ymo=o(" or "),OI=a("a"),Kmo=o("SqueezeBertTokenizerFast"),Zmo=o(" (SqueezeBERT model)"),ego=l(),Is=a("li"),_le=a("strong"),ogo=o("t5"),rgo=o(" \u2014 "),VI=a("a"),tgo=o("T5Tokenizer"),ago=o(" or "),XI=a("a"),ngo=o("T5TokenizerFast"),sgo=o(" (T5 model)"),lgo=l(),uh=a("li"),ule=a("strong"),igo=o("tapas"),dgo=o(" \u2014 "),zI=a("a"),cgo=o("TapasTokenizer"),fgo=o(" (TAPAS model)"),mgo=l(),bh=a("li"),ble=a("strong"),ggo=o("tapex"),hgo=o(" \u2014 "),QI=a("a"),pgo=o("TapexTokenizer"),_go=o(" (TAPEX model)"),ugo=l(),vh=a("li"),vle=a("strong"),bgo=o("transfo-xl"),vgo=o(" \u2014 "),WI=a("a"),Fgo=o("TransfoXLTokenizer"),Tgo=o(" (Transformer-XL model)"),Mgo=l(),Ns=a("li"),Fle=a("strong"),Ego=o("vilt"),Cgo=o(" \u2014 "),HI=a("a"),wgo=o("BertTokenizer"),Ago=o(" or "),UI=a("a"),Lgo=o("BertTokenizerFast"),ygo=o(" (ViLT model)"),xgo=l(),qs=a("li"),Tle=a("strong"),$go=o("visual_bert"),kgo=o(" \u2014 "),JI=a("a"),Sgo=o("BertTokenizer"),Rgo=o(" or "),YI=a("a"),Pgo=o("BertTokenizerFast"),Bgo=o(" (VisualBERT model)"),Igo=l(),Fh=a("li"),Mle=a("strong"),Ngo=o("wav2vec2"),qgo=o(" \u2014 "),KI=a("a"),jgo=o("Wav2Vec2CTCTokenizer"),Dgo=o(" (Wav2Vec2 model)"),Ggo=l(),Th=a("li"),Ele=a("strong"),Ogo=o("wav2vec2-conformer"),Vgo=o(" \u2014 "),ZI=a("a"),Xgo=o("Wav2Vec2CTCTokenizer"),zgo=o(" (Wav2Vec2-Conformer model)"),Qgo=l(),Mh=a("li"),Cle=a("strong"),Wgo=o("wav2vec2_phoneme"),Hgo=o(" \u2014 "),eN=a("a"),Ugo=o("Wav2Vec2PhonemeCTCTokenizer"),Jgo=o(" (Wav2Vec2Phoneme model)"),Ygo=l(),js=a("li"),wle=a("strong"),Kgo=o("xglm"),Zgo=o(" \u2014 "),oN=a("a"),eho=o("XGLMTokenizer"),oho=o(" or "),rN=a("a"),rho=o("XGLMTokenizerFast"),tho=o(" (XGLM model)"),aho=l(),Eh=a("li"),Ale=a("strong"),nho=o("xlm"),sho=o(" \u2014 "),tN=a("a"),lho=o("XLMTokenizer"),iho=o(" (XLM model)"),dho=l(),Ch=a("li"),Lle=a("strong"),cho=o("xlm-prophetnet"),fho=o(" \u2014 "),aN=a("a"),mho=o("XLMProphetNetTokenizer"),gho=o(" (XLM-ProphetNet model)"),hho=l(),Ds=a("li"),yle=a("strong"),pho=o("xlm-roberta"),_ho=o(" \u2014 "),nN=a("a"),uho=o("XLMRobertaTokenizer"),bho=o(" or "),sN=a("a"),vho=o("XLMRobertaTokenizerFast"),Fho=o(" (XLM-RoBERTa model)"),Tho=l(),Gs=a("li"),xle=a("strong"),Mho=o("xlm-roberta-xl"),Eho=o(" \u2014 "),lN=a("a"),Cho=o("RobertaTokenizer"),who=o(" or "),iN=a("a"),Aho=o("RobertaTokenizerFast"),Lho=o(" (XLM-RoBERTa-XL model)"),yho=l(),Os=a("li"),$le=a("strong"),xho=o("xlnet"),$ho=o(" \u2014 "),dN=a("a"),kho=o("XLNetTokenizer"),Sho=o(" or "),cN=a("a"),Rho=o("XLNetTokenizerFast"),Pho=o(" (XLNet model)"),Bho=l(),Vs=a("li"),kle=a("strong"),Iho=o("yoso"),Nho=o(" \u2014 "),fN=a("a"),qho=o("AlbertTokenizer"),jho=o(" or "),mN=a("a"),Dho=o("AlbertTokenizerFast"),Gho=o(" (YOSO model)"),Oho=l(),F(wh.$$.fragment),Vho=l(),Ah=a("div"),F(QL.$$.fragment),Xho=l(),Sle=a("p"),zho=o("Register a new tokenizer in this mapping."),fOe=l(),Ri=a("h2"),Lh=a("a"),Rle=a("span"),F(WL.$$.fragment),Qho=l(),Ple=a("span"),Who=o("AutoFeatureExtractor"),mOe=l(),Lo=a("div"),F(HL.$$.fragment),Hho=l(),UL=a("p"),Uho=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gN=a("a"),Jho=o("AutoFeatureExtractor.from_pretrained()"),Yho=o(" class method."),Kho=l(),JL=a("p"),Zho=o("This class cannot be instantiated directly using "),Ble=a("code"),epo=o("__init__()"),opo=o(" (throws an error)."),rpo=l(),He=a("div"),F(YL.$$.fragment),tpo=l(),Ile=a("p"),apo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),npo=l(),Sa=a("p"),spo=o("The feature extractor class to instantiate is selected based on the "),Nle=a("code"),lpo=o("model_type"),ipo=o(` property of the config object
(either passed as an argument or loaded from `),qle=a("code"),dpo=o("pretrained_model_name_or_path"),cpo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jle=a("code"),fpo=o("pretrained_model_name_or_path"),mpo=o(":"),gpo=l(),Y=a("ul"),yh=a("li"),Dle=a("strong"),hpo=o("beit"),ppo=o(" \u2014 "),hN=a("a"),_po=o("BeitFeatureExtractor"),upo=o(" (BEiT model)"),bpo=l(),xh=a("li"),Gle=a("strong"),vpo=o("clip"),Fpo=o(" \u2014 "),pN=a("a"),Tpo=o("CLIPFeatureExtractor"),Mpo=o(" (CLIP model)"),Epo=l(),$h=a("li"),Ole=a("strong"),Cpo=o("convnext"),wpo=o(" \u2014 "),_N=a("a"),Apo=o("ConvNextFeatureExtractor"),Lpo=o(" (ConvNeXT model)"),ypo=l(),kh=a("li"),Vle=a("strong"),xpo=o("cvt"),$po=o(" \u2014 "),uN=a("a"),kpo=o("ConvNextFeatureExtractor"),Spo=o(" (CvT model)"),Rpo=l(),Sh=a("li"),Xle=a("strong"),Ppo=o("data2vec-audio"),Bpo=o(" \u2014 "),bN=a("a"),Ipo=o("Wav2Vec2FeatureExtractor"),Npo=o(" (Data2VecAudio model)"),qpo=l(),Rh=a("li"),zle=a("strong"),jpo=o("data2vec-vision"),Dpo=o(" \u2014 "),vN=a("a"),Gpo=o("BeitFeatureExtractor"),Opo=o(" (Data2VecVision model)"),Vpo=l(),Ph=a("li"),Qle=a("strong"),Xpo=o("deit"),zpo=o(" \u2014 "),FN=a("a"),Qpo=o("DeiTFeatureExtractor"),Wpo=o(" (DeiT model)"),Hpo=l(),Bh=a("li"),Wle=a("strong"),Upo=o("detr"),Jpo=o(" \u2014 "),TN=a("a"),Ypo=o("DetrFeatureExtractor"),Kpo=o(" (DETR model)"),Zpo=l(),Ih=a("li"),Hle=a("strong"),e_o=o("dpt"),o_o=o(" \u2014 "),MN=a("a"),r_o=o("DPTFeatureExtractor"),t_o=o(" (DPT model)"),a_o=l(),Nh=a("li"),Ule=a("strong"),n_o=o("flava"),s_o=o(" \u2014 "),EN=a("a"),l_o=o("FlavaFeatureExtractor"),i_o=o(" (FLAVA model)"),d_o=l(),qh=a("li"),Jle=a("strong"),c_o=o("glpn"),f_o=o(" \u2014 "),CN=a("a"),m_o=o("GLPNFeatureExtractor"),g_o=o(" (GLPN model)"),h_o=l(),jh=a("li"),Yle=a("strong"),p_o=o("hubert"),__o=o(" \u2014 "),wN=a("a"),u_o=o("Wav2Vec2FeatureExtractor"),b_o=o(" (Hubert model)"),v_o=l(),Dh=a("li"),Kle=a("strong"),F_o=o("imagegpt"),T_o=o(" \u2014 "),AN=a("a"),M_o=o("ImageGPTFeatureExtractor"),E_o=o(" (ImageGPT model)"),C_o=l(),Gh=a("li"),Zle=a("strong"),w_o=o("layoutlmv2"),A_o=o(" \u2014 "),LN=a("a"),L_o=o("LayoutLMv2FeatureExtractor"),y_o=o(" (LayoutLMv2 model)"),x_o=l(),Oh=a("li"),eie=a("strong"),$_o=o("layoutlmv3"),k_o=o(" \u2014 "),yN=a("a"),S_o=o("LayoutLMv3FeatureExtractor"),R_o=o(" (LayoutLMv3 model)"),P_o=l(),Vh=a("li"),oie=a("strong"),B_o=o("levit"),I_o=o(" \u2014 "),xN=a("a"),N_o=o("LevitFeatureExtractor"),q_o=o(" (LeViT model)"),j_o=l(),Xh=a("li"),rie=a("strong"),D_o=o("maskformer"),G_o=o(" \u2014 "),$N=a("a"),O_o=o("MaskFormerFeatureExtractor"),V_o=o(" (MaskFormer model)"),X_o=l(),zh=a("li"),tie=a("strong"),z_o=o("mctct"),Q_o=o(" \u2014 "),kN=a("a"),W_o=o("MCTCTFeatureExtractor"),H_o=o(" (M-CTC-T model)"),U_o=l(),Qh=a("li"),aie=a("strong"),J_o=o("perceiver"),Y_o=o(" \u2014 "),SN=a("a"),K_o=o("PerceiverFeatureExtractor"),Z_o=o(" (Perceiver model)"),euo=l(),Wh=a("li"),nie=a("strong"),ouo=o("poolformer"),ruo=o(" \u2014 "),RN=a("a"),tuo=o("PoolFormerFeatureExtractor"),auo=o(" (PoolFormer model)"),nuo=l(),Hh=a("li"),sie=a("strong"),suo=o("regnet"),luo=o(" \u2014 "),PN=a("a"),iuo=o("ConvNextFeatureExtractor"),duo=o(" (RegNet model)"),cuo=l(),Uh=a("li"),lie=a("strong"),fuo=o("resnet"),muo=o(" \u2014 "),BN=a("a"),guo=o("ConvNextFeatureExtractor"),huo=o(" (ResNet model)"),puo=l(),Jh=a("li"),iie=a("strong"),_uo=o("segformer"),uuo=o(" \u2014 "),IN=a("a"),buo=o("SegformerFeatureExtractor"),vuo=o(" (SegFormer model)"),Fuo=l(),Yh=a("li"),die=a("strong"),Tuo=o("speech_to_text"),Muo=o(" \u2014 "),NN=a("a"),Euo=o("Speech2TextFeatureExtractor"),Cuo=o(" (Speech2Text model)"),wuo=l(),Kh=a("li"),cie=a("strong"),Auo=o("swin"),Luo=o(" \u2014 "),qN=a("a"),yuo=o("ViTFeatureExtractor"),xuo=o(" (Swin Transformer model)"),$uo=l(),Zh=a("li"),fie=a("strong"),kuo=o("van"),Suo=o(" \u2014 "),jN=a("a"),Ruo=o("ConvNextFeatureExtractor"),Puo=o(" (VAN model)"),Buo=l(),ep=a("li"),mie=a("strong"),Iuo=o("vilt"),Nuo=o(" \u2014 "),DN=a("a"),quo=o("ViltFeatureExtractor"),juo=o(" (ViLT model)"),Duo=l(),op=a("li"),gie=a("strong"),Guo=o("vit"),Ouo=o(" \u2014 "),GN=a("a"),Vuo=o("ViTFeatureExtractor"),Xuo=o(" (ViT model)"),zuo=l(),rp=a("li"),hie=a("strong"),Quo=o("vit_mae"),Wuo=o(" \u2014 "),ON=a("a"),Huo=o("ViTFeatureExtractor"),Uuo=o(" (ViTMAE model)"),Juo=l(),tp=a("li"),pie=a("strong"),Yuo=o("wav2vec2"),Kuo=o(" \u2014 "),VN=a("a"),Zuo=o("Wav2Vec2FeatureExtractor"),e1o=o(" (Wav2Vec2 model)"),o1o=l(),ap=a("li"),_ie=a("strong"),r1o=o("wav2vec2-conformer"),t1o=o(" \u2014 "),XN=a("a"),a1o=o("Wav2Vec2FeatureExtractor"),n1o=o(" (Wav2Vec2-Conformer model)"),s1o=l(),np=a("li"),uie=a("strong"),l1o=o("yolos"),i1o=o(" \u2014 "),zN=a("a"),d1o=o("YolosFeatureExtractor"),c1o=o(" (YOLOS model)"),f1o=l(),F(sp.$$.fragment),m1o=l(),F(lp.$$.fragment),g1o=l(),ip=a("div"),F(KL.$$.fragment),h1o=l(),bie=a("p"),p1o=o("Register a new feature extractor for this class."),gOe=l(),Pi=a("h2"),dp=a("a"),vie=a("span"),F(ZL.$$.fragment),_1o=l(),Fie=a("span"),u1o=o("AutoProcessor"),hOe=l(),yo=a("div"),F(ey.$$.fragment),b1o=l(),oy=a("p"),v1o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QN=a("a"),F1o=o("AutoProcessor.from_pretrained()"),T1o=o(" class method."),M1o=l(),ry=a("p"),E1o=o("This class cannot be instantiated directly using "),Tie=a("code"),C1o=o("__init__()"),w1o=o(" (throws an error)."),A1o=l(),Ue=a("div"),F(ty.$$.fragment),L1o=l(),Mie=a("p"),y1o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),x1o=l(),Bi=a("p"),$1o=o("The processor class to instantiate is selected based on the "),Eie=a("code"),k1o=o("model_type"),S1o=o(` property of the config object (either
passed as an argument or loaded from `),Cie=a("code"),R1o=o("pretrained_model_name_or_path"),P1o=o(" if possible):"),B1o=l(),he=a("ul"),cp=a("li"),wie=a("strong"),I1o=o("clip"),N1o=o(" \u2014 "),WN=a("a"),q1o=o("CLIPProcessor"),j1o=o(" (CLIP model)"),D1o=l(),fp=a("li"),Aie=a("strong"),G1o=o("flava"),O1o=o(" \u2014 "),Lie=a("code"),V1o=o("FLAVAProcessor"),X1o=o(" (FLAVA model)"),z1o=l(),mp=a("li"),yie=a("strong"),Q1o=o("layoutlmv2"),W1o=o(" \u2014 "),HN=a("a"),H1o=o("LayoutLMv2Processor"),U1o=o(" (LayoutLMv2 model)"),J1o=l(),gp=a("li"),xie=a("strong"),Y1o=o("layoutlmv3"),K1o=o(" \u2014 "),UN=a("a"),Z1o=o("LayoutLMv3Processor"),e7o=o(" (LayoutLMv3 model)"),o7o=l(),hp=a("li"),$ie=a("strong"),r7o=o("layoutxlm"),t7o=o(" \u2014 "),JN=a("a"),a7o=o("LayoutXLMProcessor"),n7o=o(" (LayoutXLM model)"),s7o=l(),pp=a("li"),kie=a("strong"),l7o=o("sew"),i7o=o(" \u2014 "),YN=a("a"),d7o=o("Wav2Vec2Processor"),c7o=o(" (SEW model)"),f7o=l(),_p=a("li"),Sie=a("strong"),m7o=o("sew-d"),g7o=o(" \u2014 "),KN=a("a"),h7o=o("Wav2Vec2Processor"),p7o=o(" (SEW-D model)"),_7o=l(),up=a("li"),Rie=a("strong"),u7o=o("speech_to_text"),b7o=o(" \u2014 "),ZN=a("a"),v7o=o("Speech2TextProcessor"),F7o=o(" (Speech2Text model)"),T7o=l(),bp=a("li"),Pie=a("strong"),M7o=o("speech_to_text_2"),E7o=o(" \u2014 "),eq=a("a"),C7o=o("Speech2Text2Processor"),w7o=o(" (Speech2Text2 model)"),A7o=l(),vp=a("li"),Bie=a("strong"),L7o=o("trocr"),y7o=o(" \u2014 "),oq=a("a"),x7o=o("TrOCRProcessor"),$7o=o(" (TrOCR model)"),k7o=l(),Fp=a("li"),Iie=a("strong"),S7o=o("unispeech"),R7o=o(" \u2014 "),rq=a("a"),P7o=o("Wav2Vec2Processor"),B7o=o(" (UniSpeech model)"),I7o=l(),Tp=a("li"),Nie=a("strong"),N7o=o("unispeech-sat"),q7o=o(" \u2014 "),tq=a("a"),j7o=o("Wav2Vec2Processor"),D7o=o(" (UniSpeechSat model)"),G7o=l(),Mp=a("li"),qie=a("strong"),O7o=o("vilt"),V7o=o(" \u2014 "),aq=a("a"),X7o=o("ViltProcessor"),z7o=o(" (ViLT model)"),Q7o=l(),Ep=a("li"),jie=a("strong"),W7o=o("vision-text-dual-encoder"),H7o=o(" \u2014 "),nq=a("a"),U7o=o("VisionTextDualEncoderProcessor"),J7o=o(" (VisionTextDualEncoder model)"),Y7o=l(),Cp=a("li"),Die=a("strong"),K7o=o("wav2vec2"),Z7o=o(" \u2014 "),sq=a("a"),e2o=o("Wav2Vec2Processor"),o2o=o(" (Wav2Vec2 model)"),r2o=l(),wp=a("li"),Gie=a("strong"),t2o=o("wav2vec2-conformer"),a2o=o(" \u2014 "),lq=a("a"),n2o=o("Wav2Vec2Processor"),s2o=o(" (Wav2Vec2-Conformer model)"),l2o=l(),Ap=a("li"),Oie=a("strong"),i2o=o("wavlm"),d2o=o(" \u2014 "),iq=a("a"),c2o=o("Wav2Vec2Processor"),f2o=o(" (WavLM model)"),m2o=l(),F(Lp.$$.fragment),g2o=l(),F(yp.$$.fragment),h2o=l(),xp=a("div"),F(ay.$$.fragment),p2o=l(),Vie=a("p"),_2o=o("Register a new processor for this class."),pOe=l(),Ii=a("h2"),$p=a("a"),Xie=a("span"),F(ny.$$.fragment),u2o=l(),zie=a("span"),b2o=o("AutoModel"),_Oe=l(),xo=a("div"),F(sy.$$.fragment),v2o=l(),Ni=a("p"),F2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dq=a("a"),T2o=o("from_pretrained()"),M2o=o(" class method or the "),cq=a("a"),E2o=o("from_config()"),C2o=o(` class
method.`),w2o=l(),ly=a("p"),A2o=o("This class cannot be instantiated directly using "),Qie=a("code"),L2o=o("__init__()"),y2o=o(" (throws an error)."),x2o=l(),nt=a("div"),F(iy.$$.fragment),$2o=l(),Wie=a("p"),k2o=o("Instantiates one of the base model classes of the library from a configuration."),S2o=l(),qi=a("p"),R2o=o(`Note:
Loading a model from its configuration file does `),Hie=a("strong"),P2o=o("not"),B2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fq=a("a"),I2o=o("from_pretrained()"),N2o=o(" to load the model weights."),q2o=l(),F(kp.$$.fragment),j2o=l(),Je=a("div"),F(dy.$$.fragment),D2o=l(),Uie=a("p"),G2o=o("Instantiate one of the base model classes of the library from a pretrained model."),O2o=l(),Ra=a("p"),V2o=o("The model class to instantiate is selected based on the "),Jie=a("code"),X2o=o("model_type"),z2o=o(` property of the config object (either
passed as an argument or loaded from `),Yie=a("code"),Q2o=o("pretrained_model_name_or_path"),W2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=a("code"),H2o=o("pretrained_model_name_or_path"),U2o=o(":"),J2o=l(),y=a("ul"),Sp=a("li"),Zie=a("strong"),Y2o=o("albert"),K2o=o(" \u2014 "),mq=a("a"),Z2o=o("AlbertModel"),ebo=o(" (ALBERT model)"),obo=l(),Rp=a("li"),ede=a("strong"),rbo=o("bart"),tbo=o(" \u2014 "),gq=a("a"),abo=o("BartModel"),nbo=o(" (BART model)"),sbo=l(),Pp=a("li"),ode=a("strong"),lbo=o("beit"),ibo=o(" \u2014 "),hq=a("a"),dbo=o("BeitModel"),cbo=o(" (BEiT model)"),fbo=l(),Bp=a("li"),rde=a("strong"),mbo=o("bert"),gbo=o(" \u2014 "),pq=a("a"),hbo=o("BertModel"),pbo=o(" (BERT model)"),_bo=l(),Ip=a("li"),tde=a("strong"),ubo=o("bert-generation"),bbo=o(" \u2014 "),_q=a("a"),vbo=o("BertGenerationEncoder"),Fbo=o(" (Bert Generation model)"),Tbo=l(),Np=a("li"),ade=a("strong"),Mbo=o("big_bird"),Ebo=o(" \u2014 "),uq=a("a"),Cbo=o("BigBirdModel"),wbo=o(" (BigBird model)"),Abo=l(),qp=a("li"),nde=a("strong"),Lbo=o("bigbird_pegasus"),ybo=o(" \u2014 "),bq=a("a"),xbo=o("BigBirdPegasusModel"),$bo=o(" (BigBird-Pegasus model)"),kbo=l(),jp=a("li"),sde=a("strong"),Sbo=o("blenderbot"),Rbo=o(" \u2014 "),vq=a("a"),Pbo=o("BlenderbotModel"),Bbo=o(" (Blenderbot model)"),Ibo=l(),Dp=a("li"),lde=a("strong"),Nbo=o("blenderbot-small"),qbo=o(" \u2014 "),Fq=a("a"),jbo=o("BlenderbotSmallModel"),Dbo=o(" (BlenderbotSmall model)"),Gbo=l(),Gp=a("li"),ide=a("strong"),Obo=o("bloom"),Vbo=o(" \u2014 "),Tq=a("a"),Xbo=o("BloomModel"),zbo=o(" (BLOOM model)"),Qbo=l(),Op=a("li"),dde=a("strong"),Wbo=o("camembert"),Hbo=o(" \u2014 "),Mq=a("a"),Ubo=o("CamembertModel"),Jbo=o(" (CamemBERT model)"),Ybo=l(),Vp=a("li"),cde=a("strong"),Kbo=o("canine"),Zbo=o(" \u2014 "),Eq=a("a"),evo=o("CanineModel"),ovo=o(" (CANINE model)"),rvo=l(),Xp=a("li"),fde=a("strong"),tvo=o("clip"),avo=o(" \u2014 "),Cq=a("a"),nvo=o("CLIPModel"),svo=o(" (CLIP model)"),lvo=l(),zp=a("li"),mde=a("strong"),ivo=o("codegen"),dvo=o(" \u2014 "),wq=a("a"),cvo=o("CodeGenModel"),fvo=o(" (CodeGen model)"),mvo=l(),Qp=a("li"),gde=a("strong"),gvo=o("convbert"),hvo=o(" \u2014 "),Aq=a("a"),pvo=o("ConvBertModel"),_vo=o(" (ConvBERT model)"),uvo=l(),Wp=a("li"),hde=a("strong"),bvo=o("convnext"),vvo=o(" \u2014 "),Lq=a("a"),Fvo=o("ConvNextModel"),Tvo=o(" (ConvNeXT model)"),Mvo=l(),Hp=a("li"),pde=a("strong"),Evo=o("ctrl"),Cvo=o(" \u2014 "),yq=a("a"),wvo=o("CTRLModel"),Avo=o(" (CTRL model)"),Lvo=l(),Up=a("li"),_de=a("strong"),yvo=o("cvt"),xvo=o(" \u2014 "),xq=a("a"),$vo=o("CvtModel"),kvo=o(" (CvT model)"),Svo=l(),Jp=a("li"),ude=a("strong"),Rvo=o("data2vec-audio"),Pvo=o(" \u2014 "),$q=a("a"),Bvo=o("Data2VecAudioModel"),Ivo=o(" (Data2VecAudio model)"),Nvo=l(),Yp=a("li"),bde=a("strong"),qvo=o("data2vec-text"),jvo=o(" \u2014 "),kq=a("a"),Dvo=o("Data2VecTextModel"),Gvo=o(" (Data2VecText model)"),Ovo=l(),Kp=a("li"),vde=a("strong"),Vvo=o("data2vec-vision"),Xvo=o(" \u2014 "),Sq=a("a"),zvo=o("Data2VecVisionModel"),Qvo=o(" (Data2VecVision model)"),Wvo=l(),Zp=a("li"),Fde=a("strong"),Hvo=o("deberta"),Uvo=o(" \u2014 "),Rq=a("a"),Jvo=o("DebertaModel"),Yvo=o(" (DeBERTa model)"),Kvo=l(),e_=a("li"),Tde=a("strong"),Zvo=o("deberta-v2"),e0o=o(" \u2014 "),Pq=a("a"),o0o=o("DebertaV2Model"),r0o=o(" (DeBERTa-v2 model)"),t0o=l(),o_=a("li"),Mde=a("strong"),a0o=o("decision_transformer"),n0o=o(" \u2014 "),Bq=a("a"),s0o=o("DecisionTransformerModel"),l0o=o(" (Decision Transformer model)"),i0o=l(),r_=a("li"),Ede=a("strong"),d0o=o("deit"),c0o=o(" \u2014 "),Iq=a("a"),f0o=o("DeiTModel"),m0o=o(" (DeiT model)"),g0o=l(),t_=a("li"),Cde=a("strong"),h0o=o("detr"),p0o=o(" \u2014 "),Nq=a("a"),_0o=o("DetrModel"),u0o=o(" (DETR model)"),b0o=l(),a_=a("li"),wde=a("strong"),v0o=o("distilbert"),F0o=o(" \u2014 "),qq=a("a"),T0o=o("DistilBertModel"),M0o=o(" (DistilBERT model)"),E0o=l(),n_=a("li"),Ade=a("strong"),C0o=o("dpr"),w0o=o(" \u2014 "),jq=a("a"),A0o=o("DPRQuestionEncoder"),L0o=o(" (DPR model)"),y0o=l(),s_=a("li"),Lde=a("strong"),x0o=o("dpt"),$0o=o(" \u2014 "),Dq=a("a"),k0o=o("DPTModel"),S0o=o(" (DPT model)"),R0o=l(),l_=a("li"),yde=a("strong"),P0o=o("electra"),B0o=o(" \u2014 "),Gq=a("a"),I0o=o("ElectraModel"),N0o=o(" (ELECTRA model)"),q0o=l(),i_=a("li"),xde=a("strong"),j0o=o("flaubert"),D0o=o(" \u2014 "),Oq=a("a"),G0o=o("FlaubertModel"),O0o=o(" (FlauBERT model)"),V0o=l(),d_=a("li"),$de=a("strong"),X0o=o("flava"),z0o=o(" \u2014 "),Vq=a("a"),Q0o=o("FlavaModel"),W0o=o(" (FLAVA model)"),H0o=l(),c_=a("li"),kde=a("strong"),U0o=o("fnet"),J0o=o(" \u2014 "),Xq=a("a"),Y0o=o("FNetModel"),K0o=o(" (FNet model)"),Z0o=l(),f_=a("li"),Sde=a("strong"),eFo=o("fsmt"),oFo=o(" \u2014 "),zq=a("a"),rFo=o("FSMTModel"),tFo=o(" (FairSeq Machine-Translation model)"),aFo=l(),Xs=a("li"),Rde=a("strong"),nFo=o("funnel"),sFo=o(" \u2014 "),Qq=a("a"),lFo=o("FunnelModel"),iFo=o(" or "),Wq=a("a"),dFo=o("FunnelBaseModel"),cFo=o(" (Funnel Transformer model)"),fFo=l(),m_=a("li"),Pde=a("strong"),mFo=o("glpn"),gFo=o(" \u2014 "),Hq=a("a"),hFo=o("GLPNModel"),pFo=o(" (GLPN model)"),_Fo=l(),g_=a("li"),Bde=a("strong"),uFo=o("gpt2"),bFo=o(" \u2014 "),Uq=a("a"),vFo=o("GPT2Model"),FFo=o(" (OpenAI GPT-2 model)"),TFo=l(),h_=a("li"),Ide=a("strong"),MFo=o("gpt_neo"),EFo=o(" \u2014 "),Jq=a("a"),CFo=o("GPTNeoModel"),wFo=o(" (GPT Neo model)"),AFo=l(),p_=a("li"),Nde=a("strong"),LFo=o("gpt_neox"),yFo=o(" \u2014 "),Yq=a("a"),xFo=o("GPTNeoXModel"),$Fo=o(" (GPT NeoX model)"),kFo=l(),__=a("li"),qde=a("strong"),SFo=o("gptj"),RFo=o(" \u2014 "),Kq=a("a"),PFo=o("GPTJModel"),BFo=o(" (GPT-J model)"),IFo=l(),u_=a("li"),jde=a("strong"),NFo=o("hubert"),qFo=o(" \u2014 "),Zq=a("a"),jFo=o("HubertModel"),DFo=o(" (Hubert model)"),GFo=l(),b_=a("li"),Dde=a("strong"),OFo=o("ibert"),VFo=o(" \u2014 "),ej=a("a"),XFo=o("IBertModel"),zFo=o(" (I-BERT model)"),QFo=l(),v_=a("li"),Gde=a("strong"),WFo=o("imagegpt"),HFo=o(" \u2014 "),oj=a("a"),UFo=o("ImageGPTModel"),JFo=o(" (ImageGPT model)"),YFo=l(),F_=a("li"),Ode=a("strong"),KFo=o("layoutlm"),ZFo=o(" \u2014 "),rj=a("a"),eTo=o("LayoutLMModel"),oTo=o(" (LayoutLM model)"),rTo=l(),T_=a("li"),Vde=a("strong"),tTo=o("layoutlmv2"),aTo=o(" \u2014 "),tj=a("a"),nTo=o("LayoutLMv2Model"),sTo=o(" (LayoutLMv2 model)"),lTo=l(),M_=a("li"),Xde=a("strong"),iTo=o("layoutlmv3"),dTo=o(" \u2014 "),aj=a("a"),cTo=o("LayoutLMv3Model"),fTo=o(" (LayoutLMv3 model)"),mTo=l(),E_=a("li"),zde=a("strong"),gTo=o("led"),hTo=o(" \u2014 "),nj=a("a"),pTo=o("LEDModel"),_To=o(" (LED model)"),uTo=l(),C_=a("li"),Qde=a("strong"),bTo=o("levit"),vTo=o(" \u2014 "),sj=a("a"),FTo=o("LevitModel"),TTo=o(" (LeViT model)"),MTo=l(),w_=a("li"),Wde=a("strong"),ETo=o("longformer"),CTo=o(" \u2014 "),lj=a("a"),wTo=o("LongformerModel"),ATo=o(" (Longformer model)"),LTo=l(),A_=a("li"),Hde=a("strong"),yTo=o("longt5"),xTo=o(" \u2014 "),ij=a("a"),$To=o("LongT5Model"),kTo=o(" (LongT5 model)"),STo=l(),L_=a("li"),Ude=a("strong"),RTo=o("luke"),PTo=o(" \u2014 "),dj=a("a"),BTo=o("LukeModel"),ITo=o(" (LUKE model)"),NTo=l(),y_=a("li"),Jde=a("strong"),qTo=o("lxmert"),jTo=o(" \u2014 "),cj=a("a"),DTo=o("LxmertModel"),GTo=o(" (LXMERT model)"),OTo=l(),x_=a("li"),Yde=a("strong"),VTo=o("m2m_100"),XTo=o(" \u2014 "),fj=a("a"),zTo=o("M2M100Model"),QTo=o(" (M2M100 model)"),WTo=l(),$_=a("li"),Kde=a("strong"),HTo=o("marian"),UTo=o(" \u2014 "),mj=a("a"),JTo=o("MarianModel"),YTo=o(" (Marian model)"),KTo=l(),k_=a("li"),Zde=a("strong"),ZTo=o("maskformer"),eMo=o(" \u2014 "),gj=a("a"),oMo=o("MaskFormerModel"),rMo=o(" (MaskFormer model)"),tMo=l(),S_=a("li"),ece=a("strong"),aMo=o("mbart"),nMo=o(" \u2014 "),hj=a("a"),sMo=o("MBartModel"),lMo=o(" (mBART model)"),iMo=l(),R_=a("li"),oce=a("strong"),dMo=o("mctct"),cMo=o(" \u2014 "),pj=a("a"),fMo=o("MCTCTModel"),mMo=o(" (M-CTC-T model)"),gMo=l(),P_=a("li"),rce=a("strong"),hMo=o("megatron-bert"),pMo=o(" \u2014 "),_j=a("a"),_Mo=o("MegatronBertModel"),uMo=o(" (Megatron-BERT model)"),bMo=l(),B_=a("li"),tce=a("strong"),vMo=o("mobilebert"),FMo=o(" \u2014 "),uj=a("a"),TMo=o("MobileBertModel"),MMo=o(" (MobileBERT model)"),EMo=l(),I_=a("li"),ace=a("strong"),CMo=o("mpnet"),wMo=o(" \u2014 "),bj=a("a"),AMo=o("MPNetModel"),LMo=o(" (MPNet model)"),yMo=l(),N_=a("li"),nce=a("strong"),xMo=o("mt5"),$Mo=o(" \u2014 "),vj=a("a"),kMo=o("MT5Model"),SMo=o(" (MT5 model)"),RMo=l(),q_=a("li"),sce=a("strong"),PMo=o("nezha"),BMo=o(" \u2014 "),Fj=a("a"),IMo=o("NezhaModel"),NMo=o(" (Nezha model)"),qMo=l(),j_=a("li"),lce=a("strong"),jMo=o("nystromformer"),DMo=o(" \u2014 "),Tj=a("a"),GMo=o("NystromformerModel"),OMo=o(" (Nystr\xF6mformer model)"),VMo=l(),D_=a("li"),ice=a("strong"),XMo=o("openai-gpt"),zMo=o(" \u2014 "),Mj=a("a"),QMo=o("OpenAIGPTModel"),WMo=o(" (OpenAI GPT model)"),HMo=l(),G_=a("li"),dce=a("strong"),UMo=o("opt"),JMo=o(" \u2014 "),Ej=a("a"),YMo=o("OPTModel"),KMo=o(" (OPT model)"),ZMo=l(),O_=a("li"),cce=a("strong"),eEo=o("pegasus"),oEo=o(" \u2014 "),Cj=a("a"),rEo=o("PegasusModel"),tEo=o(" (Pegasus model)"),aEo=l(),V_=a("li"),fce=a("strong"),nEo=o("perceiver"),sEo=o(" \u2014 "),wj=a("a"),lEo=o("PerceiverModel"),iEo=o(" (Perceiver model)"),dEo=l(),X_=a("li"),mce=a("strong"),cEo=o("plbart"),fEo=o(" \u2014 "),Aj=a("a"),mEo=o("PLBartModel"),gEo=o(" (PLBart model)"),hEo=l(),z_=a("li"),gce=a("strong"),pEo=o("poolformer"),_Eo=o(" \u2014 "),Lj=a("a"),uEo=o("PoolFormerModel"),bEo=o(" (PoolFormer model)"),vEo=l(),Q_=a("li"),hce=a("strong"),FEo=o("prophetnet"),TEo=o(" \u2014 "),yj=a("a"),MEo=o("ProphetNetModel"),EEo=o(" (ProphetNet model)"),CEo=l(),W_=a("li"),pce=a("strong"),wEo=o("qdqbert"),AEo=o(" \u2014 "),xj=a("a"),LEo=o("QDQBertModel"),yEo=o(" (QDQBert model)"),xEo=l(),H_=a("li"),_ce=a("strong"),$Eo=o("reformer"),kEo=o(" \u2014 "),$j=a("a"),SEo=o("ReformerModel"),REo=o(" (Reformer model)"),PEo=l(),U_=a("li"),uce=a("strong"),BEo=o("regnet"),IEo=o(" \u2014 "),kj=a("a"),NEo=o("RegNetModel"),qEo=o(" (RegNet model)"),jEo=l(),J_=a("li"),bce=a("strong"),DEo=o("rembert"),GEo=o(" \u2014 "),Sj=a("a"),OEo=o("RemBertModel"),VEo=o(" (RemBERT model)"),XEo=l(),Y_=a("li"),vce=a("strong"),zEo=o("resnet"),QEo=o(" \u2014 "),Rj=a("a"),WEo=o("ResNetModel"),HEo=o(" (ResNet model)"),UEo=l(),K_=a("li"),Fce=a("strong"),JEo=o("retribert"),YEo=o(" \u2014 "),Pj=a("a"),KEo=o("RetriBertModel"),ZEo=o(" (RetriBERT model)"),e4o=l(),Z_=a("li"),Tce=a("strong"),o4o=o("roberta"),r4o=o(" \u2014 "),Bj=a("a"),t4o=o("RobertaModel"),a4o=o(" (RoBERTa model)"),n4o=l(),eu=a("li"),Mce=a("strong"),s4o=o("roformer"),l4o=o(" \u2014 "),Ij=a("a"),i4o=o("RoFormerModel"),d4o=o(" (RoFormer model)"),c4o=l(),ou=a("li"),Ece=a("strong"),f4o=o("segformer"),m4o=o(" \u2014 "),Nj=a("a"),g4o=o("SegformerModel"),h4o=o(" (SegFormer model)"),p4o=l(),ru=a("li"),Cce=a("strong"),_4o=o("sew"),u4o=o(" \u2014 "),qj=a("a"),b4o=o("SEWModel"),v4o=o(" (SEW model)"),F4o=l(),tu=a("li"),wce=a("strong"),T4o=o("sew-d"),M4o=o(" \u2014 "),jj=a("a"),E4o=o("SEWDModel"),C4o=o(" (SEW-D model)"),w4o=l(),au=a("li"),Ace=a("strong"),A4o=o("speech_to_text"),L4o=o(" \u2014 "),Dj=a("a"),y4o=o("Speech2TextModel"),x4o=o(" (Speech2Text model)"),$4o=l(),nu=a("li"),Lce=a("strong"),k4o=o("splinter"),S4o=o(" \u2014 "),Gj=a("a"),R4o=o("SplinterModel"),P4o=o(" (Splinter model)"),B4o=l(),su=a("li"),yce=a("strong"),I4o=o("squeezebert"),N4o=o(" \u2014 "),Oj=a("a"),q4o=o("SqueezeBertModel"),j4o=o(" (SqueezeBERT model)"),D4o=l(),lu=a("li"),xce=a("strong"),G4o=o("swin"),O4o=o(" \u2014 "),Vj=a("a"),V4o=o("SwinModel"),X4o=o(" (Swin Transformer model)"),z4o=l(),iu=a("li"),$ce=a("strong"),Q4o=o("t5"),W4o=o(" \u2014 "),Xj=a("a"),H4o=o("T5Model"),U4o=o(" (T5 model)"),J4o=l(),du=a("li"),kce=a("strong"),Y4o=o("tapas"),K4o=o(" \u2014 "),zj=a("a"),Z4o=o("TapasModel"),eCo=o(" (TAPAS model)"),oCo=l(),cu=a("li"),Sce=a("strong"),rCo=o("trajectory_transformer"),tCo=o(" \u2014 "),Qj=a("a"),aCo=o("TrajectoryTransformerModel"),nCo=o(" (Trajectory Transformer model)"),sCo=l(),fu=a("li"),Rce=a("strong"),lCo=o("transfo-xl"),iCo=o(" \u2014 "),Wj=a("a"),dCo=o("TransfoXLModel"),cCo=o(" (Transformer-XL model)"),fCo=l(),mu=a("li"),Pce=a("strong"),mCo=o("unispeech"),gCo=o(" \u2014 "),Hj=a("a"),hCo=o("UniSpeechModel"),pCo=o(" (UniSpeech model)"),_Co=l(),gu=a("li"),Bce=a("strong"),uCo=o("unispeech-sat"),bCo=o(" \u2014 "),Uj=a("a"),vCo=o("UniSpeechSatModel"),FCo=o(" (UniSpeechSat model)"),TCo=l(),hu=a("li"),Ice=a("strong"),MCo=o("van"),ECo=o(" \u2014 "),Jj=a("a"),CCo=o("VanModel"),wCo=o(" (VAN model)"),ACo=l(),pu=a("li"),Nce=a("strong"),LCo=o("vilt"),yCo=o(" \u2014 "),Yj=a("a"),xCo=o("ViltModel"),$Co=o(" (ViLT model)"),kCo=l(),_u=a("li"),qce=a("strong"),SCo=o("vision-text-dual-encoder"),RCo=o(" \u2014 "),Kj=a("a"),PCo=o("VisionTextDualEncoderModel"),BCo=o(" (VisionTextDualEncoder model)"),ICo=l(),uu=a("li"),jce=a("strong"),NCo=o("visual_bert"),qCo=o(" \u2014 "),Zj=a("a"),jCo=o("VisualBertModel"),DCo=o(" (VisualBERT model)"),GCo=l(),bu=a("li"),Dce=a("strong"),OCo=o("vit"),VCo=o(" \u2014 "),eD=a("a"),XCo=o("ViTModel"),zCo=o(" (ViT model)"),QCo=l(),vu=a("li"),Gce=a("strong"),WCo=o("vit_mae"),HCo=o(" \u2014 "),oD=a("a"),UCo=o("ViTMAEModel"),JCo=o(" (ViTMAE model)"),YCo=l(),Fu=a("li"),Oce=a("strong"),KCo=o("wav2vec2"),ZCo=o(" \u2014 "),rD=a("a"),e5o=o("Wav2Vec2Model"),o5o=o(" (Wav2Vec2 model)"),r5o=l(),Tu=a("li"),Vce=a("strong"),t5o=o("wav2vec2-conformer"),a5o=o(" \u2014 "),tD=a("a"),n5o=o("Wav2Vec2ConformerModel"),s5o=o(" (Wav2Vec2-Conformer model)"),l5o=l(),Mu=a("li"),Xce=a("strong"),i5o=o("wavlm"),d5o=o(" \u2014 "),aD=a("a"),c5o=o("WavLMModel"),f5o=o(" (WavLM model)"),m5o=l(),Eu=a("li"),zce=a("strong"),g5o=o("xglm"),h5o=o(" \u2014 "),nD=a("a"),p5o=o("XGLMModel"),_5o=o(" (XGLM model)"),u5o=l(),Cu=a("li"),Qce=a("strong"),b5o=o("xlm"),v5o=o(" \u2014 "),sD=a("a"),F5o=o("XLMModel"),T5o=o(" (XLM model)"),M5o=l(),wu=a("li"),Wce=a("strong"),E5o=o("xlm-prophetnet"),C5o=o(" \u2014 "),lD=a("a"),w5o=o("XLMProphetNetModel"),A5o=o(" (XLM-ProphetNet model)"),L5o=l(),Au=a("li"),Hce=a("strong"),y5o=o("xlm-roberta"),x5o=o(" \u2014 "),iD=a("a"),$5o=o("XLMRobertaModel"),k5o=o(" (XLM-RoBERTa model)"),S5o=l(),Lu=a("li"),Uce=a("strong"),R5o=o("xlm-roberta-xl"),P5o=o(" \u2014 "),dD=a("a"),B5o=o("XLMRobertaXLModel"),I5o=o(" (XLM-RoBERTa-XL model)"),N5o=l(),yu=a("li"),Jce=a("strong"),q5o=o("xlnet"),j5o=o(" \u2014 "),cD=a("a"),D5o=o("XLNetModel"),G5o=o(" (XLNet model)"),O5o=l(),xu=a("li"),Yce=a("strong"),V5o=o("yolos"),X5o=o(" \u2014 "),fD=a("a"),z5o=o("YolosModel"),Q5o=o(" (YOLOS model)"),W5o=l(),$u=a("li"),Kce=a("strong"),H5o=o("yoso"),U5o=o(" \u2014 "),mD=a("a"),J5o=o("YosoModel"),Y5o=o(" (YOSO model)"),K5o=l(),ku=a("p"),Z5o=o("The model is set in evaluation mode by default using "),Zce=a("code"),e3o=o("model.eval()"),o3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),r3o=o("model.train()"),t3o=l(),F(Su.$$.fragment),uOe=l(),ji=a("h2"),Ru=a("a"),ofe=a("span"),F(cy.$$.fragment),a3o=l(),rfe=a("span"),n3o=o("AutoModelForPreTraining"),bOe=l(),$o=a("div"),F(fy.$$.fragment),s3o=l(),Di=a("p"),l3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gD=a("a"),i3o=o("from_pretrained()"),d3o=o(" class method or the "),hD=a("a"),c3o=o("from_config()"),f3o=o(` class
method.`),m3o=l(),my=a("p"),g3o=o("This class cannot be instantiated directly using "),tfe=a("code"),h3o=o("__init__()"),p3o=o(" (throws an error)."),_3o=l(),st=a("div"),F(gy.$$.fragment),u3o=l(),afe=a("p"),b3o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v3o=l(),Gi=a("p"),F3o=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),T3o=o("not"),M3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=a("a"),E3o=o("from_pretrained()"),C3o=o(" to load the model weights."),w3o=l(),F(Pu.$$.fragment),A3o=l(),Ye=a("div"),F(hy.$$.fragment),L3o=l(),sfe=a("p"),y3o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x3o=l(),Pa=a("p"),$3o=o("The model class to instantiate is selected based on the "),lfe=a("code"),k3o=o("model_type"),S3o=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),R3o=o("pretrained_model_name_or_path"),P3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),B3o=o("pretrained_model_name_or_path"),I3o=o(":"),N3o=l(),G=a("ul"),Bu=a("li"),cfe=a("strong"),q3o=o("albert"),j3o=o(" \u2014 "),_D=a("a"),D3o=o("AlbertForPreTraining"),G3o=o(" (ALBERT model)"),O3o=l(),Iu=a("li"),ffe=a("strong"),V3o=o("bart"),X3o=o(" \u2014 "),uD=a("a"),z3o=o("BartForConditionalGeneration"),Q3o=o(" (BART model)"),W3o=l(),Nu=a("li"),mfe=a("strong"),H3o=o("bert"),U3o=o(" \u2014 "),bD=a("a"),J3o=o("BertForPreTraining"),Y3o=o(" (BERT model)"),K3o=l(),qu=a("li"),gfe=a("strong"),Z3o=o("big_bird"),ewo=o(" \u2014 "),vD=a("a"),owo=o("BigBirdForPreTraining"),rwo=o(" (BigBird model)"),two=l(),ju=a("li"),hfe=a("strong"),awo=o("bloom"),nwo=o(" \u2014 "),FD=a("a"),swo=o("BloomForCausalLM"),lwo=o(" (BLOOM model)"),iwo=l(),Du=a("li"),pfe=a("strong"),dwo=o("camembert"),cwo=o(" \u2014 "),TD=a("a"),fwo=o("CamembertForMaskedLM"),mwo=o(" (CamemBERT model)"),gwo=l(),Gu=a("li"),_fe=a("strong"),hwo=o("ctrl"),pwo=o(" \u2014 "),MD=a("a"),_wo=o("CTRLLMHeadModel"),uwo=o(" (CTRL model)"),bwo=l(),Ou=a("li"),ufe=a("strong"),vwo=o("data2vec-text"),Fwo=o(" \u2014 "),ED=a("a"),Two=o("Data2VecTextForMaskedLM"),Mwo=o(" (Data2VecText model)"),Ewo=l(),Vu=a("li"),bfe=a("strong"),Cwo=o("deberta"),wwo=o(" \u2014 "),CD=a("a"),Awo=o("DebertaForMaskedLM"),Lwo=o(" (DeBERTa model)"),ywo=l(),Xu=a("li"),vfe=a("strong"),xwo=o("deberta-v2"),$wo=o(" \u2014 "),wD=a("a"),kwo=o("DebertaV2ForMaskedLM"),Swo=o(" (DeBERTa-v2 model)"),Rwo=l(),zu=a("li"),Ffe=a("strong"),Pwo=o("distilbert"),Bwo=o(" \u2014 "),AD=a("a"),Iwo=o("DistilBertForMaskedLM"),Nwo=o(" (DistilBERT model)"),qwo=l(),Qu=a("li"),Tfe=a("strong"),jwo=o("electra"),Dwo=o(" \u2014 "),LD=a("a"),Gwo=o("ElectraForPreTraining"),Owo=o(" (ELECTRA model)"),Vwo=l(),Wu=a("li"),Mfe=a("strong"),Xwo=o("flaubert"),zwo=o(" \u2014 "),yD=a("a"),Qwo=o("FlaubertWithLMHeadModel"),Wwo=o(" (FlauBERT model)"),Hwo=l(),Hu=a("li"),Efe=a("strong"),Uwo=o("flava"),Jwo=o(" \u2014 "),xD=a("a"),Ywo=o("FlavaForPreTraining"),Kwo=o(" (FLAVA model)"),Zwo=l(),Uu=a("li"),Cfe=a("strong"),eAo=o("fnet"),oAo=o(" \u2014 "),$D=a("a"),rAo=o("FNetForPreTraining"),tAo=o(" (FNet model)"),aAo=l(),Ju=a("li"),wfe=a("strong"),nAo=o("fsmt"),sAo=o(" \u2014 "),kD=a("a"),lAo=o("FSMTForConditionalGeneration"),iAo=o(" (FairSeq Machine-Translation model)"),dAo=l(),Yu=a("li"),Afe=a("strong"),cAo=o("funnel"),fAo=o(" \u2014 "),SD=a("a"),mAo=o("FunnelForPreTraining"),gAo=o(" (Funnel Transformer model)"),hAo=l(),Ku=a("li"),Lfe=a("strong"),pAo=o("gpt2"),_Ao=o(" \u2014 "),RD=a("a"),uAo=o("GPT2LMHeadModel"),bAo=o(" (OpenAI GPT-2 model)"),vAo=l(),Zu=a("li"),yfe=a("strong"),FAo=o("ibert"),TAo=o(" \u2014 "),PD=a("a"),MAo=o("IBertForMaskedLM"),EAo=o(" (I-BERT model)"),CAo=l(),e1=a("li"),xfe=a("strong"),wAo=o("layoutlm"),AAo=o(" \u2014 "),BD=a("a"),LAo=o("LayoutLMForMaskedLM"),yAo=o(" (LayoutLM model)"),xAo=l(),o1=a("li"),$fe=a("strong"),$Ao=o("longformer"),kAo=o(" \u2014 "),ID=a("a"),SAo=o("LongformerForMaskedLM"),RAo=o(" (Longformer model)"),PAo=l(),r1=a("li"),kfe=a("strong"),BAo=o("lxmert"),IAo=o(" \u2014 "),ND=a("a"),NAo=o("LxmertForPreTraining"),qAo=o(" (LXMERT model)"),jAo=l(),t1=a("li"),Sfe=a("strong"),DAo=o("megatron-bert"),GAo=o(" \u2014 "),qD=a("a"),OAo=o("MegatronBertForPreTraining"),VAo=o(" (Megatron-BERT model)"),XAo=l(),a1=a("li"),Rfe=a("strong"),zAo=o("mobilebert"),QAo=o(" \u2014 "),jD=a("a"),WAo=o("MobileBertForPreTraining"),HAo=o(" (MobileBERT model)"),UAo=l(),n1=a("li"),Pfe=a("strong"),JAo=o("mpnet"),YAo=o(" \u2014 "),DD=a("a"),KAo=o("MPNetForMaskedLM"),ZAo=o(" (MPNet model)"),e6o=l(),s1=a("li"),Bfe=a("strong"),o6o=o("nezha"),r6o=o(" \u2014 "),GD=a("a"),t6o=o("NezhaForPreTraining"),a6o=o(" (Nezha model)"),n6o=l(),l1=a("li"),Ife=a("strong"),s6o=o("openai-gpt"),l6o=o(" \u2014 "),OD=a("a"),i6o=o("OpenAIGPTLMHeadModel"),d6o=o(" (OpenAI GPT model)"),c6o=l(),i1=a("li"),Nfe=a("strong"),f6o=o("retribert"),m6o=o(" \u2014 "),VD=a("a"),g6o=o("RetriBertModel"),h6o=o(" (RetriBERT model)"),p6o=l(),d1=a("li"),qfe=a("strong"),_6o=o("roberta"),u6o=o(" \u2014 "),XD=a("a"),b6o=o("RobertaForMaskedLM"),v6o=o(" (RoBERTa model)"),F6o=l(),c1=a("li"),jfe=a("strong"),T6o=o("splinter"),M6o=o(" \u2014 "),zD=a("a"),E6o=o("SplinterForPreTraining"),C6o=o(" (Splinter model)"),w6o=l(),f1=a("li"),Dfe=a("strong"),A6o=o("squeezebert"),L6o=o(" \u2014 "),QD=a("a"),y6o=o("SqueezeBertForMaskedLM"),x6o=o(" (SqueezeBERT model)"),$6o=l(),m1=a("li"),Gfe=a("strong"),k6o=o("t5"),S6o=o(" \u2014 "),WD=a("a"),R6o=o("T5ForConditionalGeneration"),P6o=o(" (T5 model)"),B6o=l(),g1=a("li"),Ofe=a("strong"),I6o=o("tapas"),N6o=o(" \u2014 "),HD=a("a"),q6o=o("TapasForMaskedLM"),j6o=o(" (TAPAS model)"),D6o=l(),h1=a("li"),Vfe=a("strong"),G6o=o("transfo-xl"),O6o=o(" \u2014 "),UD=a("a"),V6o=o("TransfoXLLMHeadModel"),X6o=o(" (Transformer-XL model)"),z6o=l(),p1=a("li"),Xfe=a("strong"),Q6o=o("unispeech"),W6o=o(" \u2014 "),JD=a("a"),H6o=o("UniSpeechForPreTraining"),U6o=o(" (UniSpeech model)"),J6o=l(),_1=a("li"),zfe=a("strong"),Y6o=o("unispeech-sat"),K6o=o(" \u2014 "),YD=a("a"),Z6o=o("UniSpeechSatForPreTraining"),eLo=o(" (UniSpeechSat model)"),oLo=l(),u1=a("li"),Qfe=a("strong"),rLo=o("visual_bert"),tLo=o(" \u2014 "),KD=a("a"),aLo=o("VisualBertForPreTraining"),nLo=o(" (VisualBERT model)"),sLo=l(),b1=a("li"),Wfe=a("strong"),lLo=o("vit_mae"),iLo=o(" \u2014 "),ZD=a("a"),dLo=o("ViTMAEForPreTraining"),cLo=o(" (ViTMAE model)"),fLo=l(),v1=a("li"),Hfe=a("strong"),mLo=o("wav2vec2"),gLo=o(" \u2014 "),eG=a("a"),hLo=o("Wav2Vec2ForPreTraining"),pLo=o(" (Wav2Vec2 model)"),_Lo=l(),F1=a("li"),Ufe=a("strong"),uLo=o("wav2vec2-conformer"),bLo=o(" \u2014 "),oG=a("a"),vLo=o("Wav2Vec2ConformerForPreTraining"),FLo=o(" (Wav2Vec2-Conformer model)"),TLo=l(),T1=a("li"),Jfe=a("strong"),MLo=o("xlm"),ELo=o(" \u2014 "),rG=a("a"),CLo=o("XLMWithLMHeadModel"),wLo=o(" (XLM model)"),ALo=l(),M1=a("li"),Yfe=a("strong"),LLo=o("xlm-roberta"),yLo=o(" \u2014 "),tG=a("a"),xLo=o("XLMRobertaForMaskedLM"),$Lo=o(" (XLM-RoBERTa model)"),kLo=l(),E1=a("li"),Kfe=a("strong"),SLo=o("xlm-roberta-xl"),RLo=o(" \u2014 "),aG=a("a"),PLo=o("XLMRobertaXLForMaskedLM"),BLo=o(" (XLM-RoBERTa-XL model)"),ILo=l(),C1=a("li"),Zfe=a("strong"),NLo=o("xlnet"),qLo=o(" \u2014 "),nG=a("a"),jLo=o("XLNetLMHeadModel"),DLo=o(" (XLNet model)"),GLo=l(),w1=a("p"),OLo=o("The model is set in evaluation mode by default using "),eme=a("code"),VLo=o("model.eval()"),XLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),zLo=o("model.train()"),QLo=l(),F(A1.$$.fragment),vOe=l(),Oi=a("h2"),L1=a("a"),rme=a("span"),F(py.$$.fragment),WLo=l(),tme=a("span"),HLo=o("AutoModelForCausalLM"),FOe=l(),ko=a("div"),F(_y.$$.fragment),ULo=l(),Vi=a("p"),JLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sG=a("a"),YLo=o("from_pretrained()"),KLo=o(" class method or the "),lG=a("a"),ZLo=o("from_config()"),eyo=o(` class
method.`),oyo=l(),uy=a("p"),ryo=o("This class cannot be instantiated directly using "),ame=a("code"),tyo=o("__init__()"),ayo=o(" (throws an error)."),nyo=l(),lt=a("div"),F(by.$$.fragment),syo=l(),nme=a("p"),lyo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iyo=l(),Xi=a("p"),dyo=o(`Note:
Loading a model from its configuration file does `),sme=a("strong"),cyo=o("not"),fyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=a("a"),myo=o("from_pretrained()"),gyo=o(" to load the model weights."),hyo=l(),F(y1.$$.fragment),pyo=l(),Ke=a("div"),F(vy.$$.fragment),_yo=l(),lme=a("p"),uyo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),byo=l(),Ba=a("p"),vyo=o("The model class to instantiate is selected based on the "),ime=a("code"),Fyo=o("model_type"),Tyo=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),Myo=o("pretrained_model_name_or_path"),Eyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),Cyo=o("pretrained_model_name_or_path"),wyo=o(":"),Ayo=l(),z=a("ul"),x1=a("li"),fme=a("strong"),Lyo=o("bart"),yyo=o(" \u2014 "),dG=a("a"),xyo=o("BartForCausalLM"),$yo=o(" (BART model)"),kyo=l(),$1=a("li"),mme=a("strong"),Syo=o("bert"),Ryo=o(" \u2014 "),cG=a("a"),Pyo=o("BertLMHeadModel"),Byo=o(" (BERT model)"),Iyo=l(),k1=a("li"),gme=a("strong"),Nyo=o("bert-generation"),qyo=o(" \u2014 "),fG=a("a"),jyo=o("BertGenerationDecoder"),Dyo=o(" (Bert Generation model)"),Gyo=l(),S1=a("li"),hme=a("strong"),Oyo=o("big_bird"),Vyo=o(" \u2014 "),mG=a("a"),Xyo=o("BigBirdForCausalLM"),zyo=o(" (BigBird model)"),Qyo=l(),R1=a("li"),pme=a("strong"),Wyo=o("bigbird_pegasus"),Hyo=o(" \u2014 "),gG=a("a"),Uyo=o("BigBirdPegasusForCausalLM"),Jyo=o(" (BigBird-Pegasus model)"),Yyo=l(),P1=a("li"),_me=a("strong"),Kyo=o("blenderbot"),Zyo=o(" \u2014 "),hG=a("a"),e8o=o("BlenderbotForCausalLM"),o8o=o(" (Blenderbot model)"),r8o=l(),B1=a("li"),ume=a("strong"),t8o=o("blenderbot-small"),a8o=o(" \u2014 "),pG=a("a"),n8o=o("BlenderbotSmallForCausalLM"),s8o=o(" (BlenderbotSmall model)"),l8o=l(),I1=a("li"),bme=a("strong"),i8o=o("bloom"),d8o=o(" \u2014 "),_G=a("a"),c8o=o("BloomForCausalLM"),f8o=o(" (BLOOM model)"),m8o=l(),N1=a("li"),vme=a("strong"),g8o=o("camembert"),h8o=o(" \u2014 "),uG=a("a"),p8o=o("CamembertForCausalLM"),_8o=o(" (CamemBERT model)"),u8o=l(),q1=a("li"),Fme=a("strong"),b8o=o("codegen"),v8o=o(" \u2014 "),bG=a("a"),F8o=o("CodeGenForCausalLM"),T8o=o(" (CodeGen model)"),M8o=l(),j1=a("li"),Tme=a("strong"),E8o=o("ctrl"),C8o=o(" \u2014 "),vG=a("a"),w8o=o("CTRLLMHeadModel"),A8o=o(" (CTRL model)"),L8o=l(),D1=a("li"),Mme=a("strong"),y8o=o("data2vec-text"),x8o=o(" \u2014 "),FG=a("a"),$8o=o("Data2VecTextForCausalLM"),k8o=o(" (Data2VecText model)"),S8o=l(),G1=a("li"),Eme=a("strong"),R8o=o("electra"),P8o=o(" \u2014 "),TG=a("a"),B8o=o("ElectraForCausalLM"),I8o=o(" (ELECTRA model)"),N8o=l(),O1=a("li"),Cme=a("strong"),q8o=o("gpt2"),j8o=o(" \u2014 "),MG=a("a"),D8o=o("GPT2LMHeadModel"),G8o=o(" (OpenAI GPT-2 model)"),O8o=l(),V1=a("li"),wme=a("strong"),V8o=o("gpt_neo"),X8o=o(" \u2014 "),EG=a("a"),z8o=o("GPTNeoForCausalLM"),Q8o=o(" (GPT Neo model)"),W8o=l(),X1=a("li"),Ame=a("strong"),H8o=o("gpt_neox"),U8o=o(" \u2014 "),CG=a("a"),J8o=o("GPTNeoXForCausalLM"),Y8o=o(" (GPT NeoX model)"),K8o=l(),z1=a("li"),Lme=a("strong"),Z8o=o("gptj"),e9o=o(" \u2014 "),wG=a("a"),o9o=o("GPTJForCausalLM"),r9o=o(" (GPT-J model)"),t9o=l(),Q1=a("li"),yme=a("strong"),a9o=o("marian"),n9o=o(" \u2014 "),AG=a("a"),s9o=o("MarianForCausalLM"),l9o=o(" (Marian model)"),i9o=l(),W1=a("li"),xme=a("strong"),d9o=o("mbart"),c9o=o(" \u2014 "),LG=a("a"),f9o=o("MBartForCausalLM"),m9o=o(" (mBART model)"),g9o=l(),H1=a("li"),$me=a("strong"),h9o=o("megatron-bert"),p9o=o(" \u2014 "),yG=a("a"),_9o=o("MegatronBertForCausalLM"),u9o=o(" (Megatron-BERT model)"),b9o=l(),U1=a("li"),kme=a("strong"),v9o=o("openai-gpt"),F9o=o(" \u2014 "),xG=a("a"),T9o=o("OpenAIGPTLMHeadModel"),M9o=o(" (OpenAI GPT model)"),E9o=l(),J1=a("li"),Sme=a("strong"),C9o=o("opt"),w9o=o(" \u2014 "),$G=a("a"),A9o=o("OPTForCausalLM"),L9o=o(" (OPT model)"),y9o=l(),Y1=a("li"),Rme=a("strong"),x9o=o("pegasus"),$9o=o(" \u2014 "),kG=a("a"),k9o=o("PegasusForCausalLM"),S9o=o(" (Pegasus model)"),R9o=l(),K1=a("li"),Pme=a("strong"),P9o=o("plbart"),B9o=o(" \u2014 "),SG=a("a"),I9o=o("PLBartForCausalLM"),N9o=o(" (PLBart model)"),q9o=l(),Z1=a("li"),Bme=a("strong"),j9o=o("prophetnet"),D9o=o(" \u2014 "),RG=a("a"),G9o=o("ProphetNetForCausalLM"),O9o=o(" (ProphetNet model)"),V9o=l(),e7=a("li"),Ime=a("strong"),X9o=o("qdqbert"),z9o=o(" \u2014 "),PG=a("a"),Q9o=o("QDQBertLMHeadModel"),W9o=o(" (QDQBert model)"),H9o=l(),o7=a("li"),Nme=a("strong"),U9o=o("reformer"),J9o=o(" \u2014 "),BG=a("a"),Y9o=o("ReformerModelWithLMHead"),K9o=o(" (Reformer model)"),Z9o=l(),r7=a("li"),qme=a("strong"),exo=o("rembert"),oxo=o(" \u2014 "),IG=a("a"),rxo=o("RemBertForCausalLM"),txo=o(" (RemBERT model)"),axo=l(),t7=a("li"),jme=a("strong"),nxo=o("roberta"),sxo=o(" \u2014 "),NG=a("a"),lxo=o("RobertaForCausalLM"),ixo=o(" (RoBERTa model)"),dxo=l(),a7=a("li"),Dme=a("strong"),cxo=o("roformer"),fxo=o(" \u2014 "),qG=a("a"),mxo=o("RoFormerForCausalLM"),gxo=o(" (RoFormer model)"),hxo=l(),n7=a("li"),Gme=a("strong"),pxo=o("speech_to_text_2"),_xo=o(" \u2014 "),jG=a("a"),uxo=o("Speech2Text2ForCausalLM"),bxo=o(" (Speech2Text2 model)"),vxo=l(),s7=a("li"),Ome=a("strong"),Fxo=o("transfo-xl"),Txo=o(" \u2014 "),DG=a("a"),Mxo=o("TransfoXLLMHeadModel"),Exo=o(" (Transformer-XL model)"),Cxo=l(),l7=a("li"),Vme=a("strong"),wxo=o("trocr"),Axo=o(" \u2014 "),GG=a("a"),Lxo=o("TrOCRForCausalLM"),yxo=o(" (TrOCR model)"),xxo=l(),i7=a("li"),Xme=a("strong"),$xo=o("xglm"),kxo=o(" \u2014 "),OG=a("a"),Sxo=o("XGLMForCausalLM"),Rxo=o(" (XGLM model)"),Pxo=l(),d7=a("li"),zme=a("strong"),Bxo=o("xlm"),Ixo=o(" \u2014 "),VG=a("a"),Nxo=o("XLMWithLMHeadModel"),qxo=o(" (XLM model)"),jxo=l(),c7=a("li"),Qme=a("strong"),Dxo=o("xlm-prophetnet"),Gxo=o(" \u2014 "),XG=a("a"),Oxo=o("XLMProphetNetForCausalLM"),Vxo=o(" (XLM-ProphetNet model)"),Xxo=l(),f7=a("li"),Wme=a("strong"),zxo=o("xlm-roberta"),Qxo=o(" \u2014 "),zG=a("a"),Wxo=o("XLMRobertaForCausalLM"),Hxo=o(" (XLM-RoBERTa model)"),Uxo=l(),m7=a("li"),Hme=a("strong"),Jxo=o("xlm-roberta-xl"),Yxo=o(" \u2014 "),QG=a("a"),Kxo=o("XLMRobertaXLForCausalLM"),Zxo=o(" (XLM-RoBERTa-XL model)"),e$o=l(),g7=a("li"),Ume=a("strong"),o$o=o("xlnet"),r$o=o(" \u2014 "),WG=a("a"),t$o=o("XLNetLMHeadModel"),a$o=o(" (XLNet model)"),n$o=l(),h7=a("p"),s$o=o("The model is set in evaluation mode by default using "),Jme=a("code"),l$o=o("model.eval()"),i$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=a("code"),d$o=o("model.train()"),c$o=l(),F(p7.$$.fragment),TOe=l(),zi=a("h2"),_7=a("a"),Kme=a("span"),F(Fy.$$.fragment),f$o=l(),Zme=a("span"),m$o=o("AutoModelForMaskedLM"),MOe=l(),So=a("div"),F(Ty.$$.fragment),g$o=l(),Qi=a("p"),h$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HG=a("a"),p$o=o("from_pretrained()"),_$o=o(" class method or the "),UG=a("a"),u$o=o("from_config()"),b$o=o(` class
method.`),v$o=l(),My=a("p"),F$o=o("This class cannot be instantiated directly using "),ege=a("code"),T$o=o("__init__()"),M$o=o(" (throws an error)."),E$o=l(),it=a("div"),F(Ey.$$.fragment),C$o=l(),oge=a("p"),w$o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A$o=l(),Wi=a("p"),L$o=o(`Note:
Loading a model from its configuration file does `),rge=a("strong"),y$o=o("not"),x$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),$$o=o("from_pretrained()"),k$o=o(" to load the model weights."),S$o=l(),F(u7.$$.fragment),R$o=l(),Ze=a("div"),F(Cy.$$.fragment),P$o=l(),tge=a("p"),B$o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I$o=l(),Ia=a("p"),N$o=o("The model class to instantiate is selected based on the "),age=a("code"),q$o=o("model_type"),j$o=o(` property of the config object (either
passed as an argument or loaded from `),nge=a("code"),D$o=o("pretrained_model_name_or_path"),G$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=a("code"),O$o=o("pretrained_model_name_or_path"),V$o=o(":"),X$o=l(),W=a("ul"),b7=a("li"),lge=a("strong"),z$o=o("albert"),Q$o=o(" \u2014 "),YG=a("a"),W$o=o("AlbertForMaskedLM"),H$o=o(" (ALBERT model)"),U$o=l(),v7=a("li"),ige=a("strong"),J$o=o("bart"),Y$o=o(" \u2014 "),KG=a("a"),K$o=o("BartForConditionalGeneration"),Z$o=o(" (BART model)"),eko=l(),F7=a("li"),dge=a("strong"),oko=o("bert"),rko=o(" \u2014 "),ZG=a("a"),tko=o("BertForMaskedLM"),ako=o(" (BERT model)"),nko=l(),T7=a("li"),cge=a("strong"),sko=o("big_bird"),lko=o(" \u2014 "),eO=a("a"),iko=o("BigBirdForMaskedLM"),dko=o(" (BigBird model)"),cko=l(),M7=a("li"),fge=a("strong"),fko=o("camembert"),mko=o(" \u2014 "),oO=a("a"),gko=o("CamembertForMaskedLM"),hko=o(" (CamemBERT model)"),pko=l(),E7=a("li"),mge=a("strong"),_ko=o("convbert"),uko=o(" \u2014 "),rO=a("a"),bko=o("ConvBertForMaskedLM"),vko=o(" (ConvBERT model)"),Fko=l(),C7=a("li"),gge=a("strong"),Tko=o("data2vec-text"),Mko=o(" \u2014 "),tO=a("a"),Eko=o("Data2VecTextForMaskedLM"),Cko=o(" (Data2VecText model)"),wko=l(),w7=a("li"),hge=a("strong"),Ako=o("deberta"),Lko=o(" \u2014 "),aO=a("a"),yko=o("DebertaForMaskedLM"),xko=o(" (DeBERTa model)"),$ko=l(),A7=a("li"),pge=a("strong"),kko=o("deberta-v2"),Sko=o(" \u2014 "),nO=a("a"),Rko=o("DebertaV2ForMaskedLM"),Pko=o(" (DeBERTa-v2 model)"),Bko=l(),L7=a("li"),_ge=a("strong"),Iko=o("distilbert"),Nko=o(" \u2014 "),sO=a("a"),qko=o("DistilBertForMaskedLM"),jko=o(" (DistilBERT model)"),Dko=l(),y7=a("li"),uge=a("strong"),Gko=o("electra"),Oko=o(" \u2014 "),lO=a("a"),Vko=o("ElectraForMaskedLM"),Xko=o(" (ELECTRA model)"),zko=l(),x7=a("li"),bge=a("strong"),Qko=o("flaubert"),Wko=o(" \u2014 "),iO=a("a"),Hko=o("FlaubertWithLMHeadModel"),Uko=o(" (FlauBERT model)"),Jko=l(),$7=a("li"),vge=a("strong"),Yko=o("fnet"),Kko=o(" \u2014 "),dO=a("a"),Zko=o("FNetForMaskedLM"),eSo=o(" (FNet model)"),oSo=l(),k7=a("li"),Fge=a("strong"),rSo=o("funnel"),tSo=o(" \u2014 "),cO=a("a"),aSo=o("FunnelForMaskedLM"),nSo=o(" (Funnel Transformer model)"),sSo=l(),S7=a("li"),Tge=a("strong"),lSo=o("ibert"),iSo=o(" \u2014 "),fO=a("a"),dSo=o("IBertForMaskedLM"),cSo=o(" (I-BERT model)"),fSo=l(),R7=a("li"),Mge=a("strong"),mSo=o("layoutlm"),gSo=o(" \u2014 "),mO=a("a"),hSo=o("LayoutLMForMaskedLM"),pSo=o(" (LayoutLM model)"),_So=l(),P7=a("li"),Ege=a("strong"),uSo=o("longformer"),bSo=o(" \u2014 "),gO=a("a"),vSo=o("LongformerForMaskedLM"),FSo=o(" (Longformer model)"),TSo=l(),B7=a("li"),Cge=a("strong"),MSo=o("luke"),ESo=o(" \u2014 "),hO=a("a"),CSo=o("LukeForMaskedLM"),wSo=o(" (LUKE model)"),ASo=l(),I7=a("li"),wge=a("strong"),LSo=o("mbart"),ySo=o(" \u2014 "),pO=a("a"),xSo=o("MBartForConditionalGeneration"),$So=o(" (mBART model)"),kSo=l(),N7=a("li"),Age=a("strong"),SSo=o("megatron-bert"),RSo=o(" \u2014 "),_O=a("a"),PSo=o("MegatronBertForMaskedLM"),BSo=o(" (Megatron-BERT model)"),ISo=l(),q7=a("li"),Lge=a("strong"),NSo=o("mobilebert"),qSo=o(" \u2014 "),uO=a("a"),jSo=o("MobileBertForMaskedLM"),DSo=o(" (MobileBERT model)"),GSo=l(),j7=a("li"),yge=a("strong"),OSo=o("mpnet"),VSo=o(" \u2014 "),bO=a("a"),XSo=o("MPNetForMaskedLM"),zSo=o(" (MPNet model)"),QSo=l(),D7=a("li"),xge=a("strong"),WSo=o("nezha"),HSo=o(" \u2014 "),vO=a("a"),USo=o("NezhaForMaskedLM"),JSo=o(" (Nezha model)"),YSo=l(),G7=a("li"),$ge=a("strong"),KSo=o("nystromformer"),ZSo=o(" \u2014 "),FO=a("a"),eRo=o("NystromformerForMaskedLM"),oRo=o(" (Nystr\xF6mformer model)"),rRo=l(),O7=a("li"),kge=a("strong"),tRo=o("perceiver"),aRo=o(" \u2014 "),TO=a("a"),nRo=o("PerceiverForMaskedLM"),sRo=o(" (Perceiver model)"),lRo=l(),V7=a("li"),Sge=a("strong"),iRo=o("qdqbert"),dRo=o(" \u2014 "),MO=a("a"),cRo=o("QDQBertForMaskedLM"),fRo=o(" (QDQBert model)"),mRo=l(),X7=a("li"),Rge=a("strong"),gRo=o("reformer"),hRo=o(" \u2014 "),EO=a("a"),pRo=o("ReformerForMaskedLM"),_Ro=o(" (Reformer model)"),uRo=l(),z7=a("li"),Pge=a("strong"),bRo=o("rembert"),vRo=o(" \u2014 "),CO=a("a"),FRo=o("RemBertForMaskedLM"),TRo=o(" (RemBERT model)"),MRo=l(),Q7=a("li"),Bge=a("strong"),ERo=o("roberta"),CRo=o(" \u2014 "),wO=a("a"),wRo=o("RobertaForMaskedLM"),ARo=o(" (RoBERTa model)"),LRo=l(),W7=a("li"),Ige=a("strong"),yRo=o("roformer"),xRo=o(" \u2014 "),AO=a("a"),$Ro=o("RoFormerForMaskedLM"),kRo=o(" (RoFormer model)"),SRo=l(),H7=a("li"),Nge=a("strong"),RRo=o("squeezebert"),PRo=o(" \u2014 "),LO=a("a"),BRo=o("SqueezeBertForMaskedLM"),IRo=o(" (SqueezeBERT model)"),NRo=l(),U7=a("li"),qge=a("strong"),qRo=o("tapas"),jRo=o(" \u2014 "),yO=a("a"),DRo=o("TapasForMaskedLM"),GRo=o(" (TAPAS model)"),ORo=l(),J7=a("li"),jge=a("strong"),VRo=o("wav2vec2"),XRo=o(" \u2014 "),Dge=a("code"),zRo=o("Wav2Vec2ForMaskedLM"),QRo=o(" (Wav2Vec2 model)"),WRo=l(),Y7=a("li"),Gge=a("strong"),HRo=o("xlm"),URo=o(" \u2014 "),xO=a("a"),JRo=o("XLMWithLMHeadModel"),YRo=o(" (XLM model)"),KRo=l(),K7=a("li"),Oge=a("strong"),ZRo=o("xlm-roberta"),ePo=o(" \u2014 "),$O=a("a"),oPo=o("XLMRobertaForMaskedLM"),rPo=o(" (XLM-RoBERTa model)"),tPo=l(),Z7=a("li"),Vge=a("strong"),aPo=o("xlm-roberta-xl"),nPo=o(" \u2014 "),kO=a("a"),sPo=o("XLMRobertaXLForMaskedLM"),lPo=o(" (XLM-RoBERTa-XL model)"),iPo=l(),e2=a("li"),Xge=a("strong"),dPo=o("yoso"),cPo=o(" \u2014 "),SO=a("a"),fPo=o("YosoForMaskedLM"),mPo=o(" (YOSO model)"),gPo=l(),o2=a("p"),hPo=o("The model is set in evaluation mode by default using "),zge=a("code"),pPo=o("model.eval()"),_Po=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),uPo=o("model.train()"),bPo=l(),F(r2.$$.fragment),EOe=l(),Hi=a("h2"),t2=a("a"),Wge=a("span"),F(wy.$$.fragment),vPo=l(),Hge=a("span"),FPo=o("AutoModelForSeq2SeqLM"),COe=l(),Ro=a("div"),F(Ay.$$.fragment),TPo=l(),Ui=a("p"),MPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RO=a("a"),EPo=o("from_pretrained()"),CPo=o(" class method or the "),PO=a("a"),wPo=o("from_config()"),APo=o(` class
method.`),LPo=l(),Ly=a("p"),yPo=o("This class cannot be instantiated directly using "),Uge=a("code"),xPo=o("__init__()"),$Po=o(" (throws an error)."),kPo=l(),dt=a("div"),F(yy.$$.fragment),SPo=l(),Jge=a("p"),RPo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PPo=l(),Ji=a("p"),BPo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),IPo=o("not"),NPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=a("a"),qPo=o("from_pretrained()"),jPo=o(" to load the model weights."),DPo=l(),F(a2.$$.fragment),GPo=l(),eo=a("div"),F(xy.$$.fragment),OPo=l(),Kge=a("p"),VPo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XPo=l(),Na=a("p"),zPo=o("The model class to instantiate is selected based on the "),Zge=a("code"),QPo=o("model_type"),WPo=o(` property of the config object (either
passed as an argument or loaded from `),ehe=a("code"),HPo=o("pretrained_model_name_or_path"),UPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=a("code"),JPo=o("pretrained_model_name_or_path"),YPo=o(":"),KPo=l(),pe=a("ul"),n2=a("li"),rhe=a("strong"),ZPo=o("bart"),eBo=o(" \u2014 "),IO=a("a"),oBo=o("BartForConditionalGeneration"),rBo=o(" (BART model)"),tBo=l(),s2=a("li"),the=a("strong"),aBo=o("bigbird_pegasus"),nBo=o(" \u2014 "),NO=a("a"),sBo=o("BigBirdPegasusForConditionalGeneration"),lBo=o(" (BigBird-Pegasus model)"),iBo=l(),l2=a("li"),ahe=a("strong"),dBo=o("blenderbot"),cBo=o(" \u2014 "),qO=a("a"),fBo=o("BlenderbotForConditionalGeneration"),mBo=o(" (Blenderbot model)"),gBo=l(),i2=a("li"),nhe=a("strong"),hBo=o("blenderbot-small"),pBo=o(" \u2014 "),jO=a("a"),_Bo=o("BlenderbotSmallForConditionalGeneration"),uBo=o(" (BlenderbotSmall model)"),bBo=l(),d2=a("li"),she=a("strong"),vBo=o("encoder-decoder"),FBo=o(" \u2014 "),DO=a("a"),TBo=o("EncoderDecoderModel"),MBo=o(" (Encoder decoder model)"),EBo=l(),c2=a("li"),lhe=a("strong"),CBo=o("fsmt"),wBo=o(" \u2014 "),GO=a("a"),ABo=o("FSMTForConditionalGeneration"),LBo=o(" (FairSeq Machine-Translation model)"),yBo=l(),f2=a("li"),ihe=a("strong"),xBo=o("led"),$Bo=o(" \u2014 "),OO=a("a"),kBo=o("LEDForConditionalGeneration"),SBo=o(" (LED model)"),RBo=l(),m2=a("li"),dhe=a("strong"),PBo=o("longt5"),BBo=o(" \u2014 "),VO=a("a"),IBo=o("LongT5ForConditionalGeneration"),NBo=o(" (LongT5 model)"),qBo=l(),g2=a("li"),che=a("strong"),jBo=o("m2m_100"),DBo=o(" \u2014 "),XO=a("a"),GBo=o("M2M100ForConditionalGeneration"),OBo=o(" (M2M100 model)"),VBo=l(),h2=a("li"),fhe=a("strong"),XBo=o("marian"),zBo=o(" \u2014 "),zO=a("a"),QBo=o("MarianMTModel"),WBo=o(" (Marian model)"),HBo=l(),p2=a("li"),mhe=a("strong"),UBo=o("mbart"),JBo=o(" \u2014 "),QO=a("a"),YBo=o("MBartForConditionalGeneration"),KBo=o(" (mBART model)"),ZBo=l(),_2=a("li"),ghe=a("strong"),eIo=o("mt5"),oIo=o(" \u2014 "),WO=a("a"),rIo=o("MT5ForConditionalGeneration"),tIo=o(" (MT5 model)"),aIo=l(),u2=a("li"),hhe=a("strong"),nIo=o("pegasus"),sIo=o(" \u2014 "),HO=a("a"),lIo=o("PegasusForConditionalGeneration"),iIo=o(" (Pegasus model)"),dIo=l(),b2=a("li"),phe=a("strong"),cIo=o("plbart"),fIo=o(" \u2014 "),UO=a("a"),mIo=o("PLBartForConditionalGeneration"),gIo=o(" (PLBart model)"),hIo=l(),v2=a("li"),_he=a("strong"),pIo=o("prophetnet"),_Io=o(" \u2014 "),JO=a("a"),uIo=o("ProphetNetForConditionalGeneration"),bIo=o(" (ProphetNet model)"),vIo=l(),F2=a("li"),uhe=a("strong"),FIo=o("t5"),TIo=o(" \u2014 "),YO=a("a"),MIo=o("T5ForConditionalGeneration"),EIo=o(" (T5 model)"),CIo=l(),T2=a("li"),bhe=a("strong"),wIo=o("xlm-prophetnet"),AIo=o(" \u2014 "),KO=a("a"),LIo=o("XLMProphetNetForConditionalGeneration"),yIo=o(" (XLM-ProphetNet model)"),xIo=l(),M2=a("p"),$Io=o("The model is set in evaluation mode by default using "),vhe=a("code"),kIo=o("model.eval()"),SIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=a("code"),RIo=o("model.train()"),PIo=l(),F(E2.$$.fragment),wOe=l(),Yi=a("h2"),C2=a("a"),The=a("span"),F($y.$$.fragment),BIo=l(),Mhe=a("span"),IIo=o("AutoModelForSequenceClassification"),AOe=l(),Po=a("div"),F(ky.$$.fragment),NIo=l(),Ki=a("p"),qIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZO=a("a"),jIo=o("from_pretrained()"),DIo=o(" class method or the "),eV=a("a"),GIo=o("from_config()"),OIo=o(` class
method.`),VIo=l(),Sy=a("p"),XIo=o("This class cannot be instantiated directly using "),Ehe=a("code"),zIo=o("__init__()"),QIo=o(" (throws an error)."),WIo=l(),ct=a("div"),F(Ry.$$.fragment),HIo=l(),Che=a("p"),UIo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JIo=l(),Zi=a("p"),YIo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),KIo=o("not"),ZIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=a("a"),eNo=o("from_pretrained()"),oNo=o(" to load the model weights."),rNo=l(),F(w2.$$.fragment),tNo=l(),oo=a("div"),F(Py.$$.fragment),aNo=l(),Ahe=a("p"),nNo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sNo=l(),qa=a("p"),lNo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),iNo=o("model_type"),dNo=o(` property of the config object (either
passed as an argument or loaded from `),yhe=a("code"),cNo=o("pretrained_model_name_or_path"),fNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=a("code"),mNo=o("pretrained_model_name_or_path"),gNo=o(":"),hNo=l(),N=a("ul"),A2=a("li"),$he=a("strong"),pNo=o("albert"),_No=o(" \u2014 "),rV=a("a"),uNo=o("AlbertForSequenceClassification"),bNo=o(" (ALBERT model)"),vNo=l(),L2=a("li"),khe=a("strong"),FNo=o("bart"),TNo=o(" \u2014 "),tV=a("a"),MNo=o("BartForSequenceClassification"),ENo=o(" (BART model)"),CNo=l(),y2=a("li"),She=a("strong"),wNo=o("bert"),ANo=o(" \u2014 "),aV=a("a"),LNo=o("BertForSequenceClassification"),yNo=o(" (BERT model)"),xNo=l(),x2=a("li"),Rhe=a("strong"),$No=o("big_bird"),kNo=o(" \u2014 "),nV=a("a"),SNo=o("BigBirdForSequenceClassification"),RNo=o(" (BigBird model)"),PNo=l(),$2=a("li"),Phe=a("strong"),BNo=o("bigbird_pegasus"),INo=o(" \u2014 "),sV=a("a"),NNo=o("BigBirdPegasusForSequenceClassification"),qNo=o(" (BigBird-Pegasus model)"),jNo=l(),k2=a("li"),Bhe=a("strong"),DNo=o("bloom"),GNo=o(" \u2014 "),lV=a("a"),ONo=o("BloomForSequenceClassification"),VNo=o(" (BLOOM model)"),XNo=l(),S2=a("li"),Ihe=a("strong"),zNo=o("camembert"),QNo=o(" \u2014 "),iV=a("a"),WNo=o("CamembertForSequenceClassification"),HNo=o(" (CamemBERT model)"),UNo=l(),R2=a("li"),Nhe=a("strong"),JNo=o("canine"),YNo=o(" \u2014 "),dV=a("a"),KNo=o("CanineForSequenceClassification"),ZNo=o(" (CANINE model)"),eqo=l(),P2=a("li"),qhe=a("strong"),oqo=o("convbert"),rqo=o(" \u2014 "),cV=a("a"),tqo=o("ConvBertForSequenceClassification"),aqo=o(" (ConvBERT model)"),nqo=l(),B2=a("li"),jhe=a("strong"),sqo=o("ctrl"),lqo=o(" \u2014 "),fV=a("a"),iqo=o("CTRLForSequenceClassification"),dqo=o(" (CTRL model)"),cqo=l(),I2=a("li"),Dhe=a("strong"),fqo=o("data2vec-text"),mqo=o(" \u2014 "),mV=a("a"),gqo=o("Data2VecTextForSequenceClassification"),hqo=o(" (Data2VecText model)"),pqo=l(),N2=a("li"),Ghe=a("strong"),_qo=o("deberta"),uqo=o(" \u2014 "),gV=a("a"),bqo=o("DebertaForSequenceClassification"),vqo=o(" (DeBERTa model)"),Fqo=l(),q2=a("li"),Ohe=a("strong"),Tqo=o("deberta-v2"),Mqo=o(" \u2014 "),hV=a("a"),Eqo=o("DebertaV2ForSequenceClassification"),Cqo=o(" (DeBERTa-v2 model)"),wqo=l(),j2=a("li"),Vhe=a("strong"),Aqo=o("distilbert"),Lqo=o(" \u2014 "),pV=a("a"),yqo=o("DistilBertForSequenceClassification"),xqo=o(" (DistilBERT model)"),$qo=l(),D2=a("li"),Xhe=a("strong"),kqo=o("electra"),Sqo=o(" \u2014 "),_V=a("a"),Rqo=o("ElectraForSequenceClassification"),Pqo=o(" (ELECTRA model)"),Bqo=l(),G2=a("li"),zhe=a("strong"),Iqo=o("flaubert"),Nqo=o(" \u2014 "),uV=a("a"),qqo=o("FlaubertForSequenceClassification"),jqo=o(" (FlauBERT model)"),Dqo=l(),O2=a("li"),Qhe=a("strong"),Gqo=o("fnet"),Oqo=o(" \u2014 "),bV=a("a"),Vqo=o("FNetForSequenceClassification"),Xqo=o(" (FNet model)"),zqo=l(),V2=a("li"),Whe=a("strong"),Qqo=o("funnel"),Wqo=o(" \u2014 "),vV=a("a"),Hqo=o("FunnelForSequenceClassification"),Uqo=o(" (Funnel Transformer model)"),Jqo=l(),X2=a("li"),Hhe=a("strong"),Yqo=o("gpt2"),Kqo=o(" \u2014 "),FV=a("a"),Zqo=o("GPT2ForSequenceClassification"),ejo=o(" (OpenAI GPT-2 model)"),ojo=l(),z2=a("li"),Uhe=a("strong"),rjo=o("gpt_neo"),tjo=o(" \u2014 "),TV=a("a"),ajo=o("GPTNeoForSequenceClassification"),njo=o(" (GPT Neo model)"),sjo=l(),Q2=a("li"),Jhe=a("strong"),ljo=o("gptj"),ijo=o(" \u2014 "),MV=a("a"),djo=o("GPTJForSequenceClassification"),cjo=o(" (GPT-J model)"),fjo=l(),W2=a("li"),Yhe=a("strong"),mjo=o("ibert"),gjo=o(" \u2014 "),EV=a("a"),hjo=o("IBertForSequenceClassification"),pjo=o(" (I-BERT model)"),_jo=l(),H2=a("li"),Khe=a("strong"),ujo=o("layoutlm"),bjo=o(" \u2014 "),CV=a("a"),vjo=o("LayoutLMForSequenceClassification"),Fjo=o(" (LayoutLM model)"),Tjo=l(),U2=a("li"),Zhe=a("strong"),Mjo=o("layoutlmv2"),Ejo=o(" \u2014 "),wV=a("a"),Cjo=o("LayoutLMv2ForSequenceClassification"),wjo=o(" (LayoutLMv2 model)"),Ajo=l(),J2=a("li"),epe=a("strong"),Ljo=o("layoutlmv3"),yjo=o(" \u2014 "),AV=a("a"),xjo=o("LayoutLMv3ForSequenceClassification"),$jo=o(" (LayoutLMv3 model)"),kjo=l(),Y2=a("li"),ope=a("strong"),Sjo=o("led"),Rjo=o(" \u2014 "),LV=a("a"),Pjo=o("LEDForSequenceClassification"),Bjo=o(" (LED model)"),Ijo=l(),K2=a("li"),rpe=a("strong"),Njo=o("longformer"),qjo=o(" \u2014 "),yV=a("a"),jjo=o("LongformerForSequenceClassification"),Djo=o(" (Longformer model)"),Gjo=l(),Z2=a("li"),tpe=a("strong"),Ojo=o("mbart"),Vjo=o(" \u2014 "),xV=a("a"),Xjo=o("MBartForSequenceClassification"),zjo=o(" (mBART model)"),Qjo=l(),eb=a("li"),ape=a("strong"),Wjo=o("megatron-bert"),Hjo=o(" \u2014 "),$V=a("a"),Ujo=o("MegatronBertForSequenceClassification"),Jjo=o(" (Megatron-BERT model)"),Yjo=l(),ob=a("li"),npe=a("strong"),Kjo=o("mobilebert"),Zjo=o(" \u2014 "),kV=a("a"),eDo=o("MobileBertForSequenceClassification"),oDo=o(" (MobileBERT model)"),rDo=l(),rb=a("li"),spe=a("strong"),tDo=o("mpnet"),aDo=o(" \u2014 "),SV=a("a"),nDo=o("MPNetForSequenceClassification"),sDo=o(" (MPNet model)"),lDo=l(),tb=a("li"),lpe=a("strong"),iDo=o("nezha"),dDo=o(" \u2014 "),RV=a("a"),cDo=o("NezhaForSequenceClassification"),fDo=o(" (Nezha model)"),mDo=l(),ab=a("li"),ipe=a("strong"),gDo=o("nystromformer"),hDo=o(" \u2014 "),PV=a("a"),pDo=o("NystromformerForSequenceClassification"),_Do=o(" (Nystr\xF6mformer model)"),uDo=l(),nb=a("li"),dpe=a("strong"),bDo=o("openai-gpt"),vDo=o(" \u2014 "),BV=a("a"),FDo=o("OpenAIGPTForSequenceClassification"),TDo=o(" (OpenAI GPT model)"),MDo=l(),sb=a("li"),cpe=a("strong"),EDo=o("perceiver"),CDo=o(" \u2014 "),IV=a("a"),wDo=o("PerceiverForSequenceClassification"),ADo=o(" (Perceiver model)"),LDo=l(),lb=a("li"),fpe=a("strong"),yDo=o("plbart"),xDo=o(" \u2014 "),NV=a("a"),$Do=o("PLBartForSequenceClassification"),kDo=o(" (PLBart model)"),SDo=l(),ib=a("li"),mpe=a("strong"),RDo=o("qdqbert"),PDo=o(" \u2014 "),qV=a("a"),BDo=o("QDQBertForSequenceClassification"),IDo=o(" (QDQBert model)"),NDo=l(),db=a("li"),gpe=a("strong"),qDo=o("reformer"),jDo=o(" \u2014 "),jV=a("a"),DDo=o("ReformerForSequenceClassification"),GDo=o(" (Reformer model)"),ODo=l(),cb=a("li"),hpe=a("strong"),VDo=o("rembert"),XDo=o(" \u2014 "),DV=a("a"),zDo=o("RemBertForSequenceClassification"),QDo=o(" (RemBERT model)"),WDo=l(),fb=a("li"),ppe=a("strong"),HDo=o("roberta"),UDo=o(" \u2014 "),GV=a("a"),JDo=o("RobertaForSequenceClassification"),YDo=o(" (RoBERTa model)"),KDo=l(),mb=a("li"),_pe=a("strong"),ZDo=o("roformer"),eGo=o(" \u2014 "),OV=a("a"),oGo=o("RoFormerForSequenceClassification"),rGo=o(" (RoFormer model)"),tGo=l(),gb=a("li"),upe=a("strong"),aGo=o("squeezebert"),nGo=o(" \u2014 "),VV=a("a"),sGo=o("SqueezeBertForSequenceClassification"),lGo=o(" (SqueezeBERT model)"),iGo=l(),hb=a("li"),bpe=a("strong"),dGo=o("tapas"),cGo=o(" \u2014 "),XV=a("a"),fGo=o("TapasForSequenceClassification"),mGo=o(" (TAPAS model)"),gGo=l(),pb=a("li"),vpe=a("strong"),hGo=o("transfo-xl"),pGo=o(" \u2014 "),zV=a("a"),_Go=o("TransfoXLForSequenceClassification"),uGo=o(" (Transformer-XL model)"),bGo=l(),_b=a("li"),Fpe=a("strong"),vGo=o("xlm"),FGo=o(" \u2014 "),QV=a("a"),TGo=o("XLMForSequenceClassification"),MGo=o(" (XLM model)"),EGo=l(),ub=a("li"),Tpe=a("strong"),CGo=o("xlm-roberta"),wGo=o(" \u2014 "),WV=a("a"),AGo=o("XLMRobertaForSequenceClassification"),LGo=o(" (XLM-RoBERTa model)"),yGo=l(),bb=a("li"),Mpe=a("strong"),xGo=o("xlm-roberta-xl"),$Go=o(" \u2014 "),HV=a("a"),kGo=o("XLMRobertaXLForSequenceClassification"),SGo=o(" (XLM-RoBERTa-XL model)"),RGo=l(),vb=a("li"),Epe=a("strong"),PGo=o("xlnet"),BGo=o(" \u2014 "),UV=a("a"),IGo=o("XLNetForSequenceClassification"),NGo=o(" (XLNet model)"),qGo=l(),Fb=a("li"),Cpe=a("strong"),jGo=o("yoso"),DGo=o(" \u2014 "),JV=a("a"),GGo=o("YosoForSequenceClassification"),OGo=o(" (YOSO model)"),VGo=l(),Tb=a("p"),XGo=o("The model is set in evaluation mode by default using "),wpe=a("code"),zGo=o("model.eval()"),QGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),WGo=o("model.train()"),HGo=l(),F(Mb.$$.fragment),LOe=l(),ed=a("h2"),Eb=a("a"),Lpe=a("span"),F(By.$$.fragment),UGo=l(),ype=a("span"),JGo=o("AutoModelForMultipleChoice"),yOe=l(),Bo=a("div"),F(Iy.$$.fragment),YGo=l(),od=a("p"),KGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YV=a("a"),ZGo=o("from_pretrained()"),eOo=o(" class method or the "),KV=a("a"),oOo=o("from_config()"),rOo=o(` class
method.`),tOo=l(),Ny=a("p"),aOo=o("This class cannot be instantiated directly using "),xpe=a("code"),nOo=o("__init__()"),sOo=o(" (throws an error)."),lOo=l(),ft=a("div"),F(qy.$$.fragment),iOo=l(),$pe=a("p"),dOo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cOo=l(),rd=a("p"),fOo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),mOo=o("not"),gOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),hOo=o("from_pretrained()"),pOo=o(" to load the model weights."),_Oo=l(),F(Cb.$$.fragment),uOo=l(),ro=a("div"),F(jy.$$.fragment),bOo=l(),Spe=a("p"),vOo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FOo=l(),ja=a("p"),TOo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),MOo=o("model_type"),EOo=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),COo=o("pretrained_model_name_or_path"),wOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),AOo=o("pretrained_model_name_or_path"),LOo=o(":"),yOo=l(),Z=a("ul"),wb=a("li"),Ipe=a("strong"),xOo=o("albert"),$Oo=o(" \u2014 "),eX=a("a"),kOo=o("AlbertForMultipleChoice"),SOo=o(" (ALBERT model)"),ROo=l(),Ab=a("li"),Npe=a("strong"),POo=o("bert"),BOo=o(" \u2014 "),oX=a("a"),IOo=o("BertForMultipleChoice"),NOo=o(" (BERT model)"),qOo=l(),Lb=a("li"),qpe=a("strong"),jOo=o("big_bird"),DOo=o(" \u2014 "),rX=a("a"),GOo=o("BigBirdForMultipleChoice"),OOo=o(" (BigBird model)"),VOo=l(),yb=a("li"),jpe=a("strong"),XOo=o("camembert"),zOo=o(" \u2014 "),tX=a("a"),QOo=o("CamembertForMultipleChoice"),WOo=o(" (CamemBERT model)"),HOo=l(),xb=a("li"),Dpe=a("strong"),UOo=o("canine"),JOo=o(" \u2014 "),aX=a("a"),YOo=o("CanineForMultipleChoice"),KOo=o(" (CANINE model)"),ZOo=l(),$b=a("li"),Gpe=a("strong"),eVo=o("convbert"),oVo=o(" \u2014 "),nX=a("a"),rVo=o("ConvBertForMultipleChoice"),tVo=o(" (ConvBERT model)"),aVo=l(),kb=a("li"),Ope=a("strong"),nVo=o("data2vec-text"),sVo=o(" \u2014 "),sX=a("a"),lVo=o("Data2VecTextForMultipleChoice"),iVo=o(" (Data2VecText model)"),dVo=l(),Sb=a("li"),Vpe=a("strong"),cVo=o("deberta-v2"),fVo=o(" \u2014 "),lX=a("a"),mVo=o("DebertaV2ForMultipleChoice"),gVo=o(" (DeBERTa-v2 model)"),hVo=l(),Rb=a("li"),Xpe=a("strong"),pVo=o("distilbert"),_Vo=o(" \u2014 "),iX=a("a"),uVo=o("DistilBertForMultipleChoice"),bVo=o(" (DistilBERT model)"),vVo=l(),Pb=a("li"),zpe=a("strong"),FVo=o("electra"),TVo=o(" \u2014 "),dX=a("a"),MVo=o("ElectraForMultipleChoice"),EVo=o(" (ELECTRA model)"),CVo=l(),Bb=a("li"),Qpe=a("strong"),wVo=o("flaubert"),AVo=o(" \u2014 "),cX=a("a"),LVo=o("FlaubertForMultipleChoice"),yVo=o(" (FlauBERT model)"),xVo=l(),Ib=a("li"),Wpe=a("strong"),$Vo=o("fnet"),kVo=o(" \u2014 "),fX=a("a"),SVo=o("FNetForMultipleChoice"),RVo=o(" (FNet model)"),PVo=l(),Nb=a("li"),Hpe=a("strong"),BVo=o("funnel"),IVo=o(" \u2014 "),mX=a("a"),NVo=o("FunnelForMultipleChoice"),qVo=o(" (Funnel Transformer model)"),jVo=l(),qb=a("li"),Upe=a("strong"),DVo=o("ibert"),GVo=o(" \u2014 "),gX=a("a"),OVo=o("IBertForMultipleChoice"),VVo=o(" (I-BERT model)"),XVo=l(),jb=a("li"),Jpe=a("strong"),zVo=o("longformer"),QVo=o(" \u2014 "),hX=a("a"),WVo=o("LongformerForMultipleChoice"),HVo=o(" (Longformer model)"),UVo=l(),Db=a("li"),Ype=a("strong"),JVo=o("megatron-bert"),YVo=o(" \u2014 "),pX=a("a"),KVo=o("MegatronBertForMultipleChoice"),ZVo=o(" (Megatron-BERT model)"),eXo=l(),Gb=a("li"),Kpe=a("strong"),oXo=o("mobilebert"),rXo=o(" \u2014 "),_X=a("a"),tXo=o("MobileBertForMultipleChoice"),aXo=o(" (MobileBERT model)"),nXo=l(),Ob=a("li"),Zpe=a("strong"),sXo=o("mpnet"),lXo=o(" \u2014 "),uX=a("a"),iXo=o("MPNetForMultipleChoice"),dXo=o(" (MPNet model)"),cXo=l(),Vb=a("li"),e_e=a("strong"),fXo=o("nezha"),mXo=o(" \u2014 "),bX=a("a"),gXo=o("NezhaForMultipleChoice"),hXo=o(" (Nezha model)"),pXo=l(),Xb=a("li"),o_e=a("strong"),_Xo=o("nystromformer"),uXo=o(" \u2014 "),vX=a("a"),bXo=o("NystromformerForMultipleChoice"),vXo=o(" (Nystr\xF6mformer model)"),FXo=l(),zb=a("li"),r_e=a("strong"),TXo=o("qdqbert"),MXo=o(" \u2014 "),FX=a("a"),EXo=o("QDQBertForMultipleChoice"),CXo=o(" (QDQBert model)"),wXo=l(),Qb=a("li"),t_e=a("strong"),AXo=o("rembert"),LXo=o(" \u2014 "),TX=a("a"),yXo=o("RemBertForMultipleChoice"),xXo=o(" (RemBERT model)"),$Xo=l(),Wb=a("li"),a_e=a("strong"),kXo=o("roberta"),SXo=o(" \u2014 "),MX=a("a"),RXo=o("RobertaForMultipleChoice"),PXo=o(" (RoBERTa model)"),BXo=l(),Hb=a("li"),n_e=a("strong"),IXo=o("roformer"),NXo=o(" \u2014 "),EX=a("a"),qXo=o("RoFormerForMultipleChoice"),jXo=o(" (RoFormer model)"),DXo=l(),Ub=a("li"),s_e=a("strong"),GXo=o("squeezebert"),OXo=o(" \u2014 "),CX=a("a"),VXo=o("SqueezeBertForMultipleChoice"),XXo=o(" (SqueezeBERT model)"),zXo=l(),Jb=a("li"),l_e=a("strong"),QXo=o("xlm"),WXo=o(" \u2014 "),wX=a("a"),HXo=o("XLMForMultipleChoice"),UXo=o(" (XLM model)"),JXo=l(),Yb=a("li"),i_e=a("strong"),YXo=o("xlm-roberta"),KXo=o(" \u2014 "),AX=a("a"),ZXo=o("XLMRobertaForMultipleChoice"),ezo=o(" (XLM-RoBERTa model)"),ozo=l(),Kb=a("li"),d_e=a("strong"),rzo=o("xlm-roberta-xl"),tzo=o(" \u2014 "),LX=a("a"),azo=o("XLMRobertaXLForMultipleChoice"),nzo=o(" (XLM-RoBERTa-XL model)"),szo=l(),Zb=a("li"),c_e=a("strong"),lzo=o("xlnet"),izo=o(" \u2014 "),yX=a("a"),dzo=o("XLNetForMultipleChoice"),czo=o(" (XLNet model)"),fzo=l(),ev=a("li"),f_e=a("strong"),mzo=o("yoso"),gzo=o(" \u2014 "),xX=a("a"),hzo=o("YosoForMultipleChoice"),pzo=o(" (YOSO model)"),_zo=l(),ov=a("p"),uzo=o("The model is set in evaluation mode by default using "),m_e=a("code"),bzo=o("model.eval()"),vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=a("code"),Fzo=o("model.train()"),Tzo=l(),F(rv.$$.fragment),xOe=l(),td=a("h2"),tv=a("a"),h_e=a("span"),F(Dy.$$.fragment),Mzo=l(),p_e=a("span"),Ezo=o("AutoModelForNextSentencePrediction"),$Oe=l(),Io=a("div"),F(Gy.$$.fragment),Czo=l(),ad=a("p"),wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$X=a("a"),Azo=o("from_pretrained()"),Lzo=o(" class method or the "),kX=a("a"),yzo=o("from_config()"),xzo=o(` class
method.`),$zo=l(),Oy=a("p"),kzo=o("This class cannot be instantiated directly using "),__e=a("code"),Szo=o("__init__()"),Rzo=o(" (throws an error)."),Pzo=l(),mt=a("div"),F(Vy.$$.fragment),Bzo=l(),u_e=a("p"),Izo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Nzo=l(),nd=a("p"),qzo=o(`Note:
Loading a model from its configuration file does `),b_e=a("strong"),jzo=o("not"),Dzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),Gzo=o("from_pretrained()"),Ozo=o(" to load the model weights."),Vzo=l(),F(av.$$.fragment),Xzo=l(),to=a("div"),F(Xy.$$.fragment),zzo=l(),v_e=a("p"),Qzo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Wzo=l(),Da=a("p"),Hzo=o("The model class to instantiate is selected based on the "),F_e=a("code"),Uzo=o("model_type"),Jzo=o(` property of the config object (either
passed as an argument or loaded from `),T_e=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=a("code"),Zzo=o("pretrained_model_name_or_path"),eQo=o(":"),oQo=l(),No=a("ul"),nv=a("li"),E_e=a("strong"),rQo=o("bert"),tQo=o(" \u2014 "),RX=a("a"),aQo=o("BertForNextSentencePrediction"),nQo=o(" (BERT model)"),sQo=l(),sv=a("li"),C_e=a("strong"),lQo=o("fnet"),iQo=o(" \u2014 "),PX=a("a"),dQo=o("FNetForNextSentencePrediction"),cQo=o(" (FNet model)"),fQo=l(),lv=a("li"),w_e=a("strong"),mQo=o("megatron-bert"),gQo=o(" \u2014 "),BX=a("a"),hQo=o("MegatronBertForNextSentencePrediction"),pQo=o(" (Megatron-BERT model)"),_Qo=l(),iv=a("li"),A_e=a("strong"),uQo=o("mobilebert"),bQo=o(" \u2014 "),IX=a("a"),vQo=o("MobileBertForNextSentencePrediction"),FQo=o(" (MobileBERT model)"),TQo=l(),dv=a("li"),L_e=a("strong"),MQo=o("nezha"),EQo=o(" \u2014 "),NX=a("a"),CQo=o("NezhaForNextSentencePrediction"),wQo=o(" (Nezha model)"),AQo=l(),cv=a("li"),y_e=a("strong"),LQo=o("qdqbert"),yQo=o(" \u2014 "),qX=a("a"),xQo=o("QDQBertForNextSentencePrediction"),$Qo=o(" (QDQBert model)"),kQo=l(),fv=a("p"),SQo=o("The model is set in evaluation mode by default using "),x_e=a("code"),RQo=o("model.eval()"),PQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=a("code"),BQo=o("model.train()"),IQo=l(),F(mv.$$.fragment),kOe=l(),sd=a("h2"),gv=a("a"),k_e=a("span"),F(zy.$$.fragment),NQo=l(),S_e=a("span"),qQo=o("AutoModelForTokenClassification"),SOe=l(),qo=a("div"),F(Qy.$$.fragment),jQo=l(),ld=a("p"),DQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jX=a("a"),GQo=o("from_pretrained()"),OQo=o(" class method or the "),DX=a("a"),VQo=o("from_config()"),XQo=o(` class
method.`),zQo=l(),Wy=a("p"),QQo=o("This class cannot be instantiated directly using "),R_e=a("code"),WQo=o("__init__()"),HQo=o(" (throws an error)."),UQo=l(),gt=a("div"),F(Hy.$$.fragment),JQo=l(),P_e=a("p"),YQo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KQo=l(),id=a("p"),ZQo=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),eWo=o("not"),oWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),rWo=o("from_pretrained()"),tWo=o(" to load the model weights."),aWo=l(),F(hv.$$.fragment),nWo=l(),ao=a("div"),F(Uy.$$.fragment),sWo=l(),I_e=a("p"),lWo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iWo=l(),Ga=a("p"),dWo=o("The model class to instantiate is selected based on the "),N_e=a("code"),cWo=o("model_type"),fWo=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),mWo=o("pretrained_model_name_or_path"),gWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=a("code"),hWo=o("pretrained_model_name_or_path"),pWo=o(":"),_Wo=l(),H=a("ul"),pv=a("li"),D_e=a("strong"),uWo=o("albert"),bWo=o(" \u2014 "),OX=a("a"),vWo=o("AlbertForTokenClassification"),FWo=o(" (ALBERT model)"),TWo=l(),_v=a("li"),G_e=a("strong"),MWo=o("bert"),EWo=o(" \u2014 "),VX=a("a"),CWo=o("BertForTokenClassification"),wWo=o(" (BERT model)"),AWo=l(),uv=a("li"),O_e=a("strong"),LWo=o("big_bird"),yWo=o(" \u2014 "),XX=a("a"),xWo=o("BigBirdForTokenClassification"),$Wo=o(" (BigBird model)"),kWo=l(),bv=a("li"),V_e=a("strong"),SWo=o("bloom"),RWo=o(" \u2014 "),zX=a("a"),PWo=o("BloomForTokenClassification"),BWo=o(" (BLOOM model)"),IWo=l(),vv=a("li"),X_e=a("strong"),NWo=o("camembert"),qWo=o(" \u2014 "),QX=a("a"),jWo=o("CamembertForTokenClassification"),DWo=o(" (CamemBERT model)"),GWo=l(),Fv=a("li"),z_e=a("strong"),OWo=o("canine"),VWo=o(" \u2014 "),WX=a("a"),XWo=o("CanineForTokenClassification"),zWo=o(" (CANINE model)"),QWo=l(),Tv=a("li"),Q_e=a("strong"),WWo=o("convbert"),HWo=o(" \u2014 "),HX=a("a"),UWo=o("ConvBertForTokenClassification"),JWo=o(" (ConvBERT model)"),YWo=l(),Mv=a("li"),W_e=a("strong"),KWo=o("data2vec-text"),ZWo=o(" \u2014 "),UX=a("a"),eHo=o("Data2VecTextForTokenClassification"),oHo=o(" (Data2VecText model)"),rHo=l(),Ev=a("li"),H_e=a("strong"),tHo=o("deberta"),aHo=o(" \u2014 "),JX=a("a"),nHo=o("DebertaForTokenClassification"),sHo=o(" (DeBERTa model)"),lHo=l(),Cv=a("li"),U_e=a("strong"),iHo=o("deberta-v2"),dHo=o(" \u2014 "),YX=a("a"),cHo=o("DebertaV2ForTokenClassification"),fHo=o(" (DeBERTa-v2 model)"),mHo=l(),wv=a("li"),J_e=a("strong"),gHo=o("distilbert"),hHo=o(" \u2014 "),KX=a("a"),pHo=o("DistilBertForTokenClassification"),_Ho=o(" (DistilBERT model)"),uHo=l(),Av=a("li"),Y_e=a("strong"),bHo=o("electra"),vHo=o(" \u2014 "),ZX=a("a"),FHo=o("ElectraForTokenClassification"),THo=o(" (ELECTRA model)"),MHo=l(),Lv=a("li"),K_e=a("strong"),EHo=o("flaubert"),CHo=o(" \u2014 "),ez=a("a"),wHo=o("FlaubertForTokenClassification"),AHo=o(" (FlauBERT model)"),LHo=l(),yv=a("li"),Z_e=a("strong"),yHo=o("fnet"),xHo=o(" \u2014 "),oz=a("a"),$Ho=o("FNetForTokenClassification"),kHo=o(" (FNet model)"),SHo=l(),xv=a("li"),eue=a("strong"),RHo=o("funnel"),PHo=o(" \u2014 "),rz=a("a"),BHo=o("FunnelForTokenClassification"),IHo=o(" (Funnel Transformer model)"),NHo=l(),$v=a("li"),oue=a("strong"),qHo=o("gpt2"),jHo=o(" \u2014 "),tz=a("a"),DHo=o("GPT2ForTokenClassification"),GHo=o(" (OpenAI GPT-2 model)"),OHo=l(),kv=a("li"),rue=a("strong"),VHo=o("ibert"),XHo=o(" \u2014 "),az=a("a"),zHo=o("IBertForTokenClassification"),QHo=o(" (I-BERT model)"),WHo=l(),Sv=a("li"),tue=a("strong"),HHo=o("layoutlm"),UHo=o(" \u2014 "),nz=a("a"),JHo=o("LayoutLMForTokenClassification"),YHo=o(" (LayoutLM model)"),KHo=l(),Rv=a("li"),aue=a("strong"),ZHo=o("layoutlmv2"),eUo=o(" \u2014 "),sz=a("a"),oUo=o("LayoutLMv2ForTokenClassification"),rUo=o(" (LayoutLMv2 model)"),tUo=l(),Pv=a("li"),nue=a("strong"),aUo=o("layoutlmv3"),nUo=o(" \u2014 "),lz=a("a"),sUo=o("LayoutLMv3ForTokenClassification"),lUo=o(" (LayoutLMv3 model)"),iUo=l(),Bv=a("li"),sue=a("strong"),dUo=o("longformer"),cUo=o(" \u2014 "),iz=a("a"),fUo=o("LongformerForTokenClassification"),mUo=o(" (Longformer model)"),gUo=l(),Iv=a("li"),lue=a("strong"),hUo=o("megatron-bert"),pUo=o(" \u2014 "),dz=a("a"),_Uo=o("MegatronBertForTokenClassification"),uUo=o(" (Megatron-BERT model)"),bUo=l(),Nv=a("li"),iue=a("strong"),vUo=o("mobilebert"),FUo=o(" \u2014 "),cz=a("a"),TUo=o("MobileBertForTokenClassification"),MUo=o(" (MobileBERT model)"),EUo=l(),qv=a("li"),due=a("strong"),CUo=o("mpnet"),wUo=o(" \u2014 "),fz=a("a"),AUo=o("MPNetForTokenClassification"),LUo=o(" (MPNet model)"),yUo=l(),jv=a("li"),cue=a("strong"),xUo=o("nezha"),$Uo=o(" \u2014 "),mz=a("a"),kUo=o("NezhaForTokenClassification"),SUo=o(" (Nezha model)"),RUo=l(),Dv=a("li"),fue=a("strong"),PUo=o("nystromformer"),BUo=o(" \u2014 "),gz=a("a"),IUo=o("NystromformerForTokenClassification"),NUo=o(" (Nystr\xF6mformer model)"),qUo=l(),Gv=a("li"),mue=a("strong"),jUo=o("qdqbert"),DUo=o(" \u2014 "),hz=a("a"),GUo=o("QDQBertForTokenClassification"),OUo=o(" (QDQBert model)"),VUo=l(),Ov=a("li"),gue=a("strong"),XUo=o("rembert"),zUo=o(" \u2014 "),pz=a("a"),QUo=o("RemBertForTokenClassification"),WUo=o(" (RemBERT model)"),HUo=l(),Vv=a("li"),hue=a("strong"),UUo=o("roberta"),JUo=o(" \u2014 "),_z=a("a"),YUo=o("RobertaForTokenClassification"),KUo=o(" (RoBERTa model)"),ZUo=l(),Xv=a("li"),pue=a("strong"),eJo=o("roformer"),oJo=o(" \u2014 "),uz=a("a"),rJo=o("RoFormerForTokenClassification"),tJo=o(" (RoFormer model)"),aJo=l(),zv=a("li"),_ue=a("strong"),nJo=o("squeezebert"),sJo=o(" \u2014 "),bz=a("a"),lJo=o("SqueezeBertForTokenClassification"),iJo=o(" (SqueezeBERT model)"),dJo=l(),Qv=a("li"),uue=a("strong"),cJo=o("xlm"),fJo=o(" \u2014 "),vz=a("a"),mJo=o("XLMForTokenClassification"),gJo=o(" (XLM model)"),hJo=l(),Wv=a("li"),bue=a("strong"),pJo=o("xlm-roberta"),_Jo=o(" \u2014 "),Fz=a("a"),uJo=o("XLMRobertaForTokenClassification"),bJo=o(" (XLM-RoBERTa model)"),vJo=l(),Hv=a("li"),vue=a("strong"),FJo=o("xlm-roberta-xl"),TJo=o(" \u2014 "),Tz=a("a"),MJo=o("XLMRobertaXLForTokenClassification"),EJo=o(" (XLM-RoBERTa-XL model)"),CJo=l(),Uv=a("li"),Fue=a("strong"),wJo=o("xlnet"),AJo=o(" \u2014 "),Mz=a("a"),LJo=o("XLNetForTokenClassification"),yJo=o(" (XLNet model)"),xJo=l(),Jv=a("li"),Tue=a("strong"),$Jo=o("yoso"),kJo=o(" \u2014 "),Ez=a("a"),SJo=o("YosoForTokenClassification"),RJo=o(" (YOSO model)"),PJo=l(),Yv=a("p"),BJo=o("The model is set in evaluation mode by default using "),Mue=a("code"),IJo=o("model.eval()"),NJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=a("code"),qJo=o("model.train()"),jJo=l(),F(Kv.$$.fragment),ROe=l(),dd=a("h2"),Zv=a("a"),Cue=a("span"),F(Jy.$$.fragment),DJo=l(),wue=a("span"),GJo=o("AutoModelForQuestionAnswering"),POe=l(),jo=a("div"),F(Yy.$$.fragment),OJo=l(),cd=a("p"),VJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cz=a("a"),XJo=o("from_pretrained()"),zJo=o(" class method or the "),wz=a("a"),QJo=o("from_config()"),WJo=o(` class
method.`),HJo=l(),Ky=a("p"),UJo=o("This class cannot be instantiated directly using "),Aue=a("code"),JJo=o("__init__()"),YJo=o(" (throws an error)."),KJo=l(),ht=a("div"),F(Zy.$$.fragment),ZJo=l(),Lue=a("p"),eYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oYo=l(),fd=a("p"),rYo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),tYo=o("not"),aYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),nYo=o("from_pretrained()"),sYo=o(" to load the model weights."),lYo=l(),F(e0.$$.fragment),iYo=l(),no=a("div"),F(e8.$$.fragment),dYo=l(),xue=a("p"),cYo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fYo=l(),Oa=a("p"),mYo=o("The model class to instantiate is selected based on the "),$ue=a("code"),gYo=o("model_type"),hYo=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),pYo=o("pretrained_model_name_or_path"),_Yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),uYo=o("pretrained_model_name_or_path"),bYo=o(":"),vYo=l(),V=a("ul"),o0=a("li"),Rue=a("strong"),FYo=o("albert"),TYo=o(" \u2014 "),Lz=a("a"),MYo=o("AlbertForQuestionAnswering"),EYo=o(" (ALBERT model)"),CYo=l(),r0=a("li"),Pue=a("strong"),wYo=o("bart"),AYo=o(" \u2014 "),yz=a("a"),LYo=o("BartForQuestionAnswering"),yYo=o(" (BART model)"),xYo=l(),t0=a("li"),Bue=a("strong"),$Yo=o("bert"),kYo=o(" \u2014 "),xz=a("a"),SYo=o("BertForQuestionAnswering"),RYo=o(" (BERT model)"),PYo=l(),a0=a("li"),Iue=a("strong"),BYo=o("big_bird"),IYo=o(" \u2014 "),$z=a("a"),NYo=o("BigBirdForQuestionAnswering"),qYo=o(" (BigBird model)"),jYo=l(),n0=a("li"),Nue=a("strong"),DYo=o("bigbird_pegasus"),GYo=o(" \u2014 "),kz=a("a"),OYo=o("BigBirdPegasusForQuestionAnswering"),VYo=o(" (BigBird-Pegasus model)"),XYo=l(),s0=a("li"),que=a("strong"),zYo=o("camembert"),QYo=o(" \u2014 "),Sz=a("a"),WYo=o("CamembertForQuestionAnswering"),HYo=o(" (CamemBERT model)"),UYo=l(),l0=a("li"),jue=a("strong"),JYo=o("canine"),YYo=o(" \u2014 "),Rz=a("a"),KYo=o("CanineForQuestionAnswering"),ZYo=o(" (CANINE model)"),eKo=l(),i0=a("li"),Due=a("strong"),oKo=o("convbert"),rKo=o(" \u2014 "),Pz=a("a"),tKo=o("ConvBertForQuestionAnswering"),aKo=o(" (ConvBERT model)"),nKo=l(),d0=a("li"),Gue=a("strong"),sKo=o("data2vec-text"),lKo=o(" \u2014 "),Bz=a("a"),iKo=o("Data2VecTextForQuestionAnswering"),dKo=o(" (Data2VecText model)"),cKo=l(),c0=a("li"),Oue=a("strong"),fKo=o("deberta"),mKo=o(" \u2014 "),Iz=a("a"),gKo=o("DebertaForQuestionAnswering"),hKo=o(" (DeBERTa model)"),pKo=l(),f0=a("li"),Vue=a("strong"),_Ko=o("deberta-v2"),uKo=o(" \u2014 "),Nz=a("a"),bKo=o("DebertaV2ForQuestionAnswering"),vKo=o(" (DeBERTa-v2 model)"),FKo=l(),m0=a("li"),Xue=a("strong"),TKo=o("distilbert"),MKo=o(" \u2014 "),qz=a("a"),EKo=o("DistilBertForQuestionAnswering"),CKo=o(" (DistilBERT model)"),wKo=l(),g0=a("li"),zue=a("strong"),AKo=o("electra"),LKo=o(" \u2014 "),jz=a("a"),yKo=o("ElectraForQuestionAnswering"),xKo=o(" (ELECTRA model)"),$Ko=l(),h0=a("li"),Que=a("strong"),kKo=o("flaubert"),SKo=o(" \u2014 "),Dz=a("a"),RKo=o("FlaubertForQuestionAnsweringSimple"),PKo=o(" (FlauBERT model)"),BKo=l(),p0=a("li"),Wue=a("strong"),IKo=o("fnet"),NKo=o(" \u2014 "),Gz=a("a"),qKo=o("FNetForQuestionAnswering"),jKo=o(" (FNet model)"),DKo=l(),_0=a("li"),Hue=a("strong"),GKo=o("funnel"),OKo=o(" \u2014 "),Oz=a("a"),VKo=o("FunnelForQuestionAnswering"),XKo=o(" (Funnel Transformer model)"),zKo=l(),u0=a("li"),Uue=a("strong"),QKo=o("gptj"),WKo=o(" \u2014 "),Vz=a("a"),HKo=o("GPTJForQuestionAnswering"),UKo=o(" (GPT-J model)"),JKo=l(),b0=a("li"),Jue=a("strong"),YKo=o("ibert"),KKo=o(" \u2014 "),Xz=a("a"),ZKo=o("IBertForQuestionAnswering"),eZo=o(" (I-BERT model)"),oZo=l(),v0=a("li"),Yue=a("strong"),rZo=o("layoutlmv2"),tZo=o(" \u2014 "),zz=a("a"),aZo=o("LayoutLMv2ForQuestionAnswering"),nZo=o(" (LayoutLMv2 model)"),sZo=l(),F0=a("li"),Kue=a("strong"),lZo=o("layoutlmv3"),iZo=o(" \u2014 "),Qz=a("a"),dZo=o("LayoutLMv3ForQuestionAnswering"),cZo=o(" (LayoutLMv3 model)"),fZo=l(),T0=a("li"),Zue=a("strong"),mZo=o("led"),gZo=o(" \u2014 "),Wz=a("a"),hZo=o("LEDForQuestionAnswering"),pZo=o(" (LED model)"),_Zo=l(),M0=a("li"),e1e=a("strong"),uZo=o("longformer"),bZo=o(" \u2014 "),Hz=a("a"),vZo=o("LongformerForQuestionAnswering"),FZo=o(" (Longformer model)"),TZo=l(),E0=a("li"),o1e=a("strong"),MZo=o("lxmert"),EZo=o(" \u2014 "),Uz=a("a"),CZo=o("LxmertForQuestionAnswering"),wZo=o(" (LXMERT model)"),AZo=l(),C0=a("li"),r1e=a("strong"),LZo=o("mbart"),yZo=o(" \u2014 "),Jz=a("a"),xZo=o("MBartForQuestionAnswering"),$Zo=o(" (mBART model)"),kZo=l(),w0=a("li"),t1e=a("strong"),SZo=o("megatron-bert"),RZo=o(" \u2014 "),Yz=a("a"),PZo=o("MegatronBertForQuestionAnswering"),BZo=o(" (Megatron-BERT model)"),IZo=l(),A0=a("li"),a1e=a("strong"),NZo=o("mobilebert"),qZo=o(" \u2014 "),Kz=a("a"),jZo=o("MobileBertForQuestionAnswering"),DZo=o(" (MobileBERT model)"),GZo=l(),L0=a("li"),n1e=a("strong"),OZo=o("mpnet"),VZo=o(" \u2014 "),Zz=a("a"),XZo=o("MPNetForQuestionAnswering"),zZo=o(" (MPNet model)"),QZo=l(),y0=a("li"),s1e=a("strong"),WZo=o("nezha"),HZo=o(" \u2014 "),eQ=a("a"),UZo=o("NezhaForQuestionAnswering"),JZo=o(" (Nezha model)"),YZo=l(),x0=a("li"),l1e=a("strong"),KZo=o("nystromformer"),ZZo=o(" \u2014 "),oQ=a("a"),eer=o("NystromformerForQuestionAnswering"),oer=o(" (Nystr\xF6mformer model)"),rer=l(),$0=a("li"),i1e=a("strong"),ter=o("qdqbert"),aer=o(" \u2014 "),rQ=a("a"),ner=o("QDQBertForQuestionAnswering"),ser=o(" (QDQBert model)"),ler=l(),k0=a("li"),d1e=a("strong"),ier=o("reformer"),der=o(" \u2014 "),tQ=a("a"),cer=o("ReformerForQuestionAnswering"),fer=o(" (Reformer model)"),mer=l(),S0=a("li"),c1e=a("strong"),ger=o("rembert"),her=o(" \u2014 "),aQ=a("a"),per=o("RemBertForQuestionAnswering"),_er=o(" (RemBERT model)"),uer=l(),R0=a("li"),f1e=a("strong"),ber=o("roberta"),ver=o(" \u2014 "),nQ=a("a"),Fer=o("RobertaForQuestionAnswering"),Ter=o(" (RoBERTa model)"),Mer=l(),P0=a("li"),m1e=a("strong"),Eer=o("roformer"),Cer=o(" \u2014 "),sQ=a("a"),wer=o("RoFormerForQuestionAnswering"),Aer=o(" (RoFormer model)"),Ler=l(),B0=a("li"),g1e=a("strong"),yer=o("splinter"),xer=o(" \u2014 "),lQ=a("a"),$er=o("SplinterForQuestionAnswering"),ker=o(" (Splinter model)"),Ser=l(),I0=a("li"),h1e=a("strong"),Rer=o("squeezebert"),Per=o(" \u2014 "),iQ=a("a"),Ber=o("SqueezeBertForQuestionAnswering"),Ier=o(" (SqueezeBERT model)"),Ner=l(),N0=a("li"),p1e=a("strong"),qer=o("xlm"),jer=o(" \u2014 "),dQ=a("a"),Der=o("XLMForQuestionAnsweringSimple"),Ger=o(" (XLM model)"),Oer=l(),q0=a("li"),_1e=a("strong"),Ver=o("xlm-roberta"),Xer=o(" \u2014 "),cQ=a("a"),zer=o("XLMRobertaForQuestionAnswering"),Qer=o(" (XLM-RoBERTa model)"),Wer=l(),j0=a("li"),u1e=a("strong"),Her=o("xlm-roberta-xl"),Uer=o(" \u2014 "),fQ=a("a"),Jer=o("XLMRobertaXLForQuestionAnswering"),Yer=o(" (XLM-RoBERTa-XL model)"),Ker=l(),D0=a("li"),b1e=a("strong"),Zer=o("xlnet"),eor=o(" \u2014 "),mQ=a("a"),oor=o("XLNetForQuestionAnsweringSimple"),ror=o(" (XLNet model)"),tor=l(),G0=a("li"),v1e=a("strong"),aor=o("yoso"),nor=o(" \u2014 "),gQ=a("a"),sor=o("YosoForQuestionAnswering"),lor=o(" (YOSO model)"),ior=l(),O0=a("p"),dor=o("The model is set in evaluation mode by default using "),F1e=a("code"),cor=o("model.eval()"),mor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=a("code"),gor=o("model.train()"),hor=l(),F(V0.$$.fragment),BOe=l(),md=a("h2"),X0=a("a"),M1e=a("span"),F(o8.$$.fragment),por=l(),E1e=a("span"),_or=o("AutoModelForTableQuestionAnswering"),IOe=l(),Do=a("div"),F(r8.$$.fragment),uor=l(),gd=a("p"),bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hQ=a("a"),vor=o("from_pretrained()"),For=o(" class method or the "),pQ=a("a"),Tor=o("from_config()"),Mor=o(` class
method.`),Eor=l(),t8=a("p"),Cor=o("This class cannot be instantiated directly using "),C1e=a("code"),wor=o("__init__()"),Aor=o(" (throws an error)."),Lor=l(),pt=a("div"),F(a8.$$.fragment),yor=l(),w1e=a("p"),xor=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$or=l(),hd=a("p"),kor=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),Sor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),Por=o("from_pretrained()"),Bor=o(" to load the model weights."),Ior=l(),F(z0.$$.fragment),Nor=l(),so=a("div"),F(n8.$$.fragment),qor=l(),L1e=a("p"),jor=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dor=l(),Va=a("p"),Gor=o("The model class to instantiate is selected based on the "),y1e=a("code"),Oor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),Xor=o("pretrained_model_name_or_path"),zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),Qor=o("pretrained_model_name_or_path"),Wor=o(":"),Hor=l(),k1e=a("ul"),Q0=a("li"),S1e=a("strong"),Uor=o("tapas"),Jor=o(" \u2014 "),uQ=a("a"),Yor=o("TapasForQuestionAnswering"),Kor=o(" (TAPAS model)"),Zor=l(),W0=a("p"),err=o("The model is set in evaluation mode by default using "),R1e=a("code"),orr=o("model.eval()"),rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),trr=o("model.train()"),arr=l(),F(H0.$$.fragment),NOe=l(),pd=a("h2"),U0=a("a"),B1e=a("span"),F(s8.$$.fragment),nrr=l(),I1e=a("span"),srr=o("AutoModelForImageClassification"),qOe=l(),Go=a("div"),F(l8.$$.fragment),lrr=l(),_d=a("p"),irr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bQ=a("a"),drr=o("from_pretrained()"),crr=o(" class method or the "),vQ=a("a"),frr=o("from_config()"),mrr=o(` class
method.`),grr=l(),i8=a("p"),hrr=o("This class cannot be instantiated directly using "),N1e=a("code"),prr=o("__init__()"),_rr=o(" (throws an error)."),urr=l(),_t=a("div"),F(d8.$$.fragment),brr=l(),q1e=a("p"),vrr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Frr=l(),ud=a("p"),Trr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),Mrr=o("not"),Err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),Crr=o("from_pretrained()"),wrr=o(" to load the model weights."),Arr=l(),F(J0.$$.fragment),Lrr=l(),lo=a("div"),F(c8.$$.fragment),yrr=l(),D1e=a("p"),xrr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$rr=l(),Xa=a("p"),krr=o("The model class to instantiate is selected based on the "),G1e=a("code"),Srr=o("model_type"),Rrr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),Prr=o("pretrained_model_name_or_path"),Brr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),Irr=o("pretrained_model_name_or_path"),Nrr=o(":"),qrr=l(),Fe=a("ul"),Y0=a("li"),X1e=a("strong"),jrr=o("beit"),Drr=o(" \u2014 "),TQ=a("a"),Grr=o("BeitForImageClassification"),Orr=o(" (BEiT model)"),Vrr=l(),K0=a("li"),z1e=a("strong"),Xrr=o("convnext"),zrr=o(" \u2014 "),MQ=a("a"),Qrr=o("ConvNextForImageClassification"),Wrr=o(" (ConvNeXT model)"),Hrr=l(),Z0=a("li"),Q1e=a("strong"),Urr=o("cvt"),Jrr=o(" \u2014 "),EQ=a("a"),Yrr=o("CvtForImageClassification"),Krr=o(" (CvT model)"),Zrr=l(),eF=a("li"),W1e=a("strong"),etr=o("data2vec-vision"),otr=o(" \u2014 "),CQ=a("a"),rtr=o("Data2VecVisionForImageClassification"),ttr=o(" (Data2VecVision model)"),atr=l(),zs=a("li"),H1e=a("strong"),ntr=o("deit"),str=o(" \u2014 "),wQ=a("a"),ltr=o("DeiTForImageClassification"),itr=o(" or "),AQ=a("a"),dtr=o("DeiTForImageClassificationWithTeacher"),ctr=o(" (DeiT model)"),ftr=l(),oF=a("li"),U1e=a("strong"),mtr=o("imagegpt"),gtr=o(" \u2014 "),LQ=a("a"),htr=o("ImageGPTForImageClassification"),ptr=o(" (ImageGPT model)"),_tr=l(),Qs=a("li"),J1e=a("strong"),utr=o("levit"),btr=o(" \u2014 "),yQ=a("a"),vtr=o("LevitForImageClassification"),Ftr=o(" or "),xQ=a("a"),Ttr=o("LevitForImageClassificationWithTeacher"),Mtr=o(" (LeViT model)"),Etr=l(),ut=a("li"),Y1e=a("strong"),Ctr=o("perceiver"),wtr=o(" \u2014 "),$Q=a("a"),Atr=o("PerceiverForImageClassificationLearned"),Ltr=o(" or "),kQ=a("a"),ytr=o("PerceiverForImageClassificationFourier"),xtr=o(" or "),SQ=a("a"),$tr=o("PerceiverForImageClassificationConvProcessing"),ktr=o(" (Perceiver model)"),Str=l(),rF=a("li"),K1e=a("strong"),Rtr=o("poolformer"),Ptr=o(" \u2014 "),RQ=a("a"),Btr=o("PoolFormerForImageClassification"),Itr=o(" (PoolFormer model)"),Ntr=l(),tF=a("li"),Z1e=a("strong"),qtr=o("regnet"),jtr=o(" \u2014 "),PQ=a("a"),Dtr=o("RegNetForImageClassification"),Gtr=o(" (RegNet model)"),Otr=l(),aF=a("li"),e7e=a("strong"),Vtr=o("resnet"),Xtr=o(" \u2014 "),BQ=a("a"),ztr=o("ResNetForImageClassification"),Qtr=o(" (ResNet model)"),Wtr=l(),nF=a("li"),o7e=a("strong"),Htr=o("segformer"),Utr=o(" \u2014 "),IQ=a("a"),Jtr=o("SegformerForImageClassification"),Ytr=o(" (SegFormer model)"),Ktr=l(),sF=a("li"),r7e=a("strong"),Ztr=o("swin"),ear=o(" \u2014 "),NQ=a("a"),oar=o("SwinForImageClassification"),rar=o(" (Swin Transformer model)"),tar=l(),lF=a("li"),t7e=a("strong"),aar=o("van"),nar=o(" \u2014 "),qQ=a("a"),sar=o("VanForImageClassification"),lar=o(" (VAN model)"),iar=l(),iF=a("li"),a7e=a("strong"),dar=o("vit"),car=o(" \u2014 "),jQ=a("a"),far=o("ViTForImageClassification"),mar=o(" (ViT model)"),gar=l(),dF=a("p"),har=o("The model is set in evaluation mode by default using "),n7e=a("code"),par=o("model.eval()"),_ar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s7e=a("code"),uar=o("model.train()"),bar=l(),F(cF.$$.fragment),jOe=l(),bd=a("h2"),fF=a("a"),l7e=a("span"),F(f8.$$.fragment),Far=l(),i7e=a("span"),Tar=o("AutoModelForVision2Seq"),DOe=l(),Oo=a("div"),F(m8.$$.fragment),Mar=l(),vd=a("p"),Ear=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=a("a"),Car=o("from_pretrained()"),war=o(" class method or the "),GQ=a("a"),Aar=o("from_config()"),Lar=o(` class
method.`),yar=l(),g8=a("p"),xar=o("This class cannot be instantiated directly using "),d7e=a("code"),$ar=o("__init__()"),kar=o(" (throws an error)."),Sar=l(),bt=a("div"),F(h8.$$.fragment),Rar=l(),c7e=a("p"),Par=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bar=l(),Fd=a("p"),Iar=o(`Note:
Loading a model from its configuration file does `),f7e=a("strong"),Nar=o("not"),qar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),jar=o("from_pretrained()"),Dar=o(" to load the model weights."),Gar=l(),F(mF.$$.fragment),Oar=l(),io=a("div"),F(p8.$$.fragment),Var=l(),m7e=a("p"),Xar=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zar=l(),za=a("p"),Qar=o("The model class to instantiate is selected based on the "),g7e=a("code"),War=o("model_type"),Har=o(` property of the config object (either
passed as an argument or loaded from `),h7e=a("code"),Uar=o("pretrained_model_name_or_path"),Jar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=a("code"),Yar=o("pretrained_model_name_or_path"),Kar=o(":"),Zar=l(),_7e=a("ul"),gF=a("li"),u7e=a("strong"),enr=o("vision-encoder-decoder"),onr=o(" \u2014 "),VQ=a("a"),rnr=o("VisionEncoderDecoderModel"),tnr=o(" (Vision Encoder decoder model)"),anr=l(),hF=a("p"),nnr=o("The model is set in evaluation mode by default using "),b7e=a("code"),snr=o("model.eval()"),lnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v7e=a("code"),inr=o("model.train()"),dnr=l(),F(pF.$$.fragment),GOe=l(),Td=a("h2"),_F=a("a"),F7e=a("span"),F(_8.$$.fragment),cnr=l(),T7e=a("span"),fnr=o("AutoModelForVisualQuestionAnswering"),OOe=l(),Vo=a("div"),F(u8.$$.fragment),mnr=l(),Md=a("p"),gnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),XQ=a("a"),hnr=o("from_pretrained()"),pnr=o(" class method or the "),zQ=a("a"),_nr=o("from_config()"),unr=o(` class
method.`),bnr=l(),b8=a("p"),vnr=o("This class cannot be instantiated directly using "),M7e=a("code"),Fnr=o("__init__()"),Tnr=o(" (throws an error)."),Mnr=l(),vt=a("div"),F(v8.$$.fragment),Enr=l(),E7e=a("p"),Cnr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),wnr=l(),Ed=a("p"),Anr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),Lnr=o("not"),ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),xnr=o("from_pretrained()"),$nr=o(" to load the model weights."),knr=l(),F(uF.$$.fragment),Snr=l(),co=a("div"),F(F8.$$.fragment),Rnr=l(),w7e=a("p"),Pnr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Bnr=l(),Qa=a("p"),Inr=o("The model class to instantiate is selected based on the "),A7e=a("code"),Nnr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),L7e=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),Gnr=o("pretrained_model_name_or_path"),Onr=o(":"),Vnr=l(),x7e=a("ul"),bF=a("li"),$7e=a("strong"),Xnr=o("vilt"),znr=o(" \u2014 "),WQ=a("a"),Qnr=o("ViltForQuestionAnswering"),Wnr=o(" (ViLT model)"),Hnr=l(),vF=a("p"),Unr=o("The model is set in evaluation mode by default using "),k7e=a("code"),Jnr=o("model.eval()"),Ynr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S7e=a("code"),Knr=o("model.train()"),Znr=l(),F(FF.$$.fragment),VOe=l(),Cd=a("h2"),TF=a("a"),R7e=a("span"),F(T8.$$.fragment),esr=l(),P7e=a("span"),osr=o("AutoModelForAudioClassification"),XOe=l(),Xo=a("div"),F(M8.$$.fragment),rsr=l(),wd=a("p"),tsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HQ=a("a"),asr=o("from_pretrained()"),nsr=o(" class method or the "),UQ=a("a"),ssr=o("from_config()"),lsr=o(` class
method.`),isr=l(),E8=a("p"),dsr=o("This class cannot be instantiated directly using "),B7e=a("code"),csr=o("__init__()"),fsr=o(" (throws an error)."),msr=l(),Ft=a("div"),F(C8.$$.fragment),gsr=l(),I7e=a("p"),hsr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),psr=l(),Ad=a("p"),_sr=o(`Note:
Loading a model from its configuration file does `),N7e=a("strong"),usr=o("not"),bsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),vsr=o("from_pretrained()"),Fsr=o(" to load the model weights."),Tsr=l(),F(MF.$$.fragment),Msr=l(),fo=a("div"),F(w8.$$.fragment),Esr=l(),q7e=a("p"),Csr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wsr=l(),Wa=a("p"),Asr=o("The model class to instantiate is selected based on the "),j7e=a("code"),Lsr=o("model_type"),ysr=o(` property of the config object (either
passed as an argument or loaded from `),D7e=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G7e=a("code"),ksr=o("pretrained_model_name_or_path"),Ssr=o(":"),Rsr=l(),Pe=a("ul"),EF=a("li"),O7e=a("strong"),Psr=o("data2vec-audio"),Bsr=o(" \u2014 "),YQ=a("a"),Isr=o("Data2VecAudioForSequenceClassification"),Nsr=o(" (Data2VecAudio model)"),qsr=l(),CF=a("li"),V7e=a("strong"),jsr=o("hubert"),Dsr=o(" \u2014 "),KQ=a("a"),Gsr=o("HubertForSequenceClassification"),Osr=o(" (Hubert model)"),Vsr=l(),wF=a("li"),X7e=a("strong"),Xsr=o("sew"),zsr=o(" \u2014 "),ZQ=a("a"),Qsr=o("SEWForSequenceClassification"),Wsr=o(" (SEW model)"),Hsr=l(),AF=a("li"),z7e=a("strong"),Usr=o("sew-d"),Jsr=o(" \u2014 "),eW=a("a"),Ysr=o("SEWDForSequenceClassification"),Ksr=o(" (SEW-D model)"),Zsr=l(),LF=a("li"),Q7e=a("strong"),elr=o("unispeech"),olr=o(" \u2014 "),oW=a("a"),rlr=o("UniSpeechForSequenceClassification"),tlr=o(" (UniSpeech model)"),alr=l(),yF=a("li"),W7e=a("strong"),nlr=o("unispeech-sat"),slr=o(" \u2014 "),rW=a("a"),llr=o("UniSpeechSatForSequenceClassification"),ilr=o(" (UniSpeechSat model)"),dlr=l(),xF=a("li"),H7e=a("strong"),clr=o("wav2vec2"),flr=o(" \u2014 "),tW=a("a"),mlr=o("Wav2Vec2ForSequenceClassification"),glr=o(" (Wav2Vec2 model)"),hlr=l(),$F=a("li"),U7e=a("strong"),plr=o("wav2vec2-conformer"),_lr=o(" \u2014 "),aW=a("a"),ulr=o("Wav2Vec2ConformerForSequenceClassification"),blr=o(" (Wav2Vec2-Conformer model)"),vlr=l(),kF=a("li"),J7e=a("strong"),Flr=o("wavlm"),Tlr=o(" \u2014 "),nW=a("a"),Mlr=o("WavLMForSequenceClassification"),Elr=o(" (WavLM model)"),Clr=l(),SF=a("p"),wlr=o("The model is set in evaluation mode by default using "),Y7e=a("code"),Alr=o("model.eval()"),Llr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K7e=a("code"),ylr=o("model.train()"),xlr=l(),F(RF.$$.fragment),zOe=l(),Ld=a("h2"),PF=a("a"),Z7e=a("span"),F(A8.$$.fragment),$lr=l(),e2e=a("span"),klr=o("AutoModelForAudioFrameClassification"),QOe=l(),zo=a("div"),F(L8.$$.fragment),Slr=l(),yd=a("p"),Rlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sW=a("a"),Plr=o("from_pretrained()"),Blr=o(" class method or the "),lW=a("a"),Ilr=o("from_config()"),Nlr=o(` class
method.`),qlr=l(),y8=a("p"),jlr=o("This class cannot be instantiated directly using "),o2e=a("code"),Dlr=o("__init__()"),Glr=o(" (throws an error)."),Olr=l(),Tt=a("div"),F(x8.$$.fragment),Vlr=l(),r2e=a("p"),Xlr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),zlr=l(),xd=a("p"),Qlr=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),Wlr=o("not"),Hlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" to load the model weights."),Ylr=l(),F(BF.$$.fragment),Klr=l(),mo=a("div"),F($8.$$.fragment),Zlr=l(),a2e=a("p"),eir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),oir=l(),Ha=a("p"),rir=o("The model class to instantiate is selected based on the "),n2e=a("code"),tir=o("model_type"),air=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),nir=o("pretrained_model_name_or_path"),sir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),lir=o("pretrained_model_name_or_path"),iir=o(":"),dir=l(),et=a("ul"),IF=a("li"),i2e=a("strong"),cir=o("data2vec-audio"),fir=o(" \u2014 "),dW=a("a"),mir=o("Data2VecAudioForAudioFrameClassification"),gir=o(" (Data2VecAudio model)"),hir=l(),NF=a("li"),d2e=a("strong"),pir=o("unispeech-sat"),_ir=o(" \u2014 "),cW=a("a"),uir=o("UniSpeechSatForAudioFrameClassification"),bir=o(" (UniSpeechSat model)"),vir=l(),qF=a("li"),c2e=a("strong"),Fir=o("wav2vec2"),Tir=o(" \u2014 "),fW=a("a"),Mir=o("Wav2Vec2ForAudioFrameClassification"),Eir=o(" (Wav2Vec2 model)"),Cir=l(),jF=a("li"),f2e=a("strong"),wir=o("wav2vec2-conformer"),Air=o(" \u2014 "),mW=a("a"),Lir=o("Wav2Vec2ConformerForAudioFrameClassification"),yir=o(" (Wav2Vec2-Conformer model)"),xir=l(),DF=a("li"),m2e=a("strong"),$ir=o("wavlm"),kir=o(" \u2014 "),gW=a("a"),Sir=o("WavLMForAudioFrameClassification"),Rir=o(" (WavLM model)"),Pir=l(),GF=a("p"),Bir=o("The model is set in evaluation mode by default using "),g2e=a("code"),Iir=o("model.eval()"),Nir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h2e=a("code"),qir=o("model.train()"),jir=l(),F(OF.$$.fragment),WOe=l(),$d=a("h2"),VF=a("a"),p2e=a("span"),F(k8.$$.fragment),Dir=l(),_2e=a("span"),Gir=o("AutoModelForCTC"),HOe=l(),Qo=a("div"),F(S8.$$.fragment),Oir=l(),kd=a("p"),Vir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hW=a("a"),Xir=o("from_pretrained()"),zir=o(" class method or the "),pW=a("a"),Qir=o("from_config()"),Wir=o(` class
method.`),Hir=l(),R8=a("p"),Uir=o("This class cannot be instantiated directly using "),u2e=a("code"),Jir=o("__init__()"),Yir=o(" (throws an error)."),Kir=l(),Mt=a("div"),F(P8.$$.fragment),Zir=l(),b2e=a("p"),edr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),odr=l(),Sd=a("p"),rdr=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),tdr=o("not"),adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),ndr=o("from_pretrained()"),sdr=o(" to load the model weights."),ldr=l(),F(XF.$$.fragment),idr=l(),go=a("div"),F(B8.$$.fragment),ddr=l(),F2e=a("p"),cdr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fdr=l(),Ua=a("p"),mdr=o("The model class to instantiate is selected based on the "),T2e=a("code"),gdr=o("model_type"),hdr=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),pdr=o("pretrained_model_name_or_path"),_dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(":"),vdr=l(),Le=a("ul"),zF=a("li"),C2e=a("strong"),Fdr=o("data2vec-audio"),Tdr=o(" \u2014 "),uW=a("a"),Mdr=o("Data2VecAudioForCTC"),Edr=o(" (Data2VecAudio model)"),Cdr=l(),QF=a("li"),w2e=a("strong"),wdr=o("hubert"),Adr=o(" \u2014 "),bW=a("a"),Ldr=o("HubertForCTC"),ydr=o(" (Hubert model)"),xdr=l(),WF=a("li"),A2e=a("strong"),$dr=o("mctct"),kdr=o(" \u2014 "),vW=a("a"),Sdr=o("MCTCTForCTC"),Rdr=o(" (M-CTC-T model)"),Pdr=l(),HF=a("li"),L2e=a("strong"),Bdr=o("sew"),Idr=o(" \u2014 "),FW=a("a"),Ndr=o("SEWForCTC"),qdr=o(" (SEW model)"),jdr=l(),UF=a("li"),y2e=a("strong"),Ddr=o("sew-d"),Gdr=o(" \u2014 "),TW=a("a"),Odr=o("SEWDForCTC"),Vdr=o(" (SEW-D model)"),Xdr=l(),JF=a("li"),x2e=a("strong"),zdr=o("unispeech"),Qdr=o(" \u2014 "),MW=a("a"),Wdr=o("UniSpeechForCTC"),Hdr=o(" (UniSpeech model)"),Udr=l(),YF=a("li"),$2e=a("strong"),Jdr=o("unispeech-sat"),Ydr=o(" \u2014 "),EW=a("a"),Kdr=o("UniSpeechSatForCTC"),Zdr=o(" (UniSpeechSat model)"),ecr=l(),KF=a("li"),k2e=a("strong"),ocr=o("wav2vec2"),rcr=o(" \u2014 "),CW=a("a"),tcr=o("Wav2Vec2ForCTC"),acr=o(" (Wav2Vec2 model)"),ncr=l(),ZF=a("li"),S2e=a("strong"),scr=o("wav2vec2-conformer"),lcr=o(" \u2014 "),wW=a("a"),icr=o("Wav2Vec2ConformerForCTC"),dcr=o(" (Wav2Vec2-Conformer model)"),ccr=l(),eT=a("li"),R2e=a("strong"),fcr=o("wavlm"),mcr=o(" \u2014 "),AW=a("a"),gcr=o("WavLMForCTC"),hcr=o(" (WavLM model)"),pcr=l(),oT=a("p"),_cr=o("The model is set in evaluation mode by default using "),P2e=a("code"),ucr=o("model.eval()"),bcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),vcr=o("model.train()"),Fcr=l(),F(rT.$$.fragment),UOe=l(),Rd=a("h2"),tT=a("a"),I2e=a("span"),F(I8.$$.fragment),Tcr=l(),N2e=a("span"),Mcr=o("AutoModelForSpeechSeq2Seq"),JOe=l(),Wo=a("div"),F(N8.$$.fragment),Ecr=l(),Pd=a("p"),Ccr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LW=a("a"),wcr=o("from_pretrained()"),Acr=o(" class method or the "),yW=a("a"),Lcr=o("from_config()"),ycr=o(` class
method.`),xcr=l(),q8=a("p"),$cr=o("This class cannot be instantiated directly using "),q2e=a("code"),kcr=o("__init__()"),Scr=o(" (throws an error)."),Rcr=l(),Et=a("div"),F(j8.$$.fragment),Pcr=l(),j2e=a("p"),Bcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Icr=l(),Bd=a("p"),Ncr=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),qcr=o("not"),jcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),Dcr=o("from_pretrained()"),Gcr=o(" to load the model weights."),Ocr=l(),F(aT.$$.fragment),Vcr=l(),ho=a("div"),F(D8.$$.fragment),Xcr=l(),G2e=a("p"),zcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qcr=l(),Ja=a("p"),Wcr=o("The model class to instantiate is selected based on the "),O2e=a("code"),Hcr=o("model_type"),Ucr=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),Kcr=o("pretrained_model_name_or_path"),Zcr=o(":"),efr=l(),G8=a("ul"),nT=a("li"),z2e=a("strong"),ofr=o("speech-encoder-decoder"),rfr=o(" \u2014 "),$W=a("a"),tfr=o("SpeechEncoderDecoderModel"),afr=o(" (Speech Encoder decoder model)"),nfr=l(),sT=a("li"),Q2e=a("strong"),sfr=o("speech_to_text"),lfr=o(" \u2014 "),kW=a("a"),ifr=o("Speech2TextForConditionalGeneration"),dfr=o(" (Speech2Text model)"),cfr=l(),lT=a("p"),ffr=o("The model is set in evaluation mode by default using "),W2e=a("code"),mfr=o("model.eval()"),gfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H2e=a("code"),hfr=o("model.train()"),pfr=l(),F(iT.$$.fragment),YOe=l(),Id=a("h2"),dT=a("a"),U2e=a("span"),F(O8.$$.fragment),_fr=l(),J2e=a("span"),ufr=o("AutoModelForAudioXVector"),KOe=l(),Ho=a("div"),F(V8.$$.fragment),bfr=l(),Nd=a("p"),vfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),SW=a("a"),Ffr=o("from_pretrained()"),Tfr=o(" class method or the "),RW=a("a"),Mfr=o("from_config()"),Efr=o(` class
method.`),Cfr=l(),X8=a("p"),wfr=o("This class cannot be instantiated directly using "),Y2e=a("code"),Afr=o("__init__()"),Lfr=o(" (throws an error)."),yfr=l(),Ct=a("div"),F(z8.$$.fragment),xfr=l(),K2e=a("p"),$fr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),kfr=l(),qd=a("p"),Sfr=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),Rfr=o("not"),Pfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),Bfr=o("from_pretrained()"),Ifr=o(" to load the model weights."),Nfr=l(),F(cT.$$.fragment),qfr=l(),po=a("div"),F(Q8.$$.fragment),jfr=l(),ebe=a("p"),Dfr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Gfr=l(),Ya=a("p"),Ofr=o("The model class to instantiate is selected based on the "),obe=a("code"),Vfr=o("model_type"),Xfr=o(` property of the config object (either
passed as an argument or loaded from `),rbe=a("code"),zfr=o("pretrained_model_name_or_path"),Qfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=a("code"),Wfr=o("pretrained_model_name_or_path"),Hfr=o(":"),Ufr=l(),ot=a("ul"),fT=a("li"),abe=a("strong"),Jfr=o("data2vec-audio"),Yfr=o(" \u2014 "),BW=a("a"),Kfr=o("Data2VecAudioForXVector"),Zfr=o(" (Data2VecAudio model)"),emr=l(),mT=a("li"),nbe=a("strong"),omr=o("unispeech-sat"),rmr=o(" \u2014 "),IW=a("a"),tmr=o("UniSpeechSatForXVector"),amr=o(" (UniSpeechSat model)"),nmr=l(),gT=a("li"),sbe=a("strong"),smr=o("wav2vec2"),lmr=o(" \u2014 "),NW=a("a"),imr=o("Wav2Vec2ForXVector"),dmr=o(" (Wav2Vec2 model)"),cmr=l(),hT=a("li"),lbe=a("strong"),fmr=o("wav2vec2-conformer"),mmr=o(" \u2014 "),qW=a("a"),gmr=o("Wav2Vec2ConformerForXVector"),hmr=o(" (Wav2Vec2-Conformer model)"),pmr=l(),pT=a("li"),ibe=a("strong"),_mr=o("wavlm"),umr=o(" \u2014 "),jW=a("a"),bmr=o("WavLMForXVector"),vmr=o(" (WavLM model)"),Fmr=l(),_T=a("p"),Tmr=o("The model is set in evaluation mode by default using "),dbe=a("code"),Mmr=o("model.eval()"),Emr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=a("code"),Cmr=o("model.train()"),wmr=l(),F(uT.$$.fragment),ZOe=l(),jd=a("h2"),bT=a("a"),fbe=a("span"),F(W8.$$.fragment),Amr=l(),mbe=a("span"),Lmr=o("AutoModelForMaskedImageModeling"),eVe=l(),Uo=a("div"),F(H8.$$.fragment),ymr=l(),Dd=a("p"),xmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DW=a("a"),$mr=o("from_pretrained()"),kmr=o(" class method or the "),GW=a("a"),Smr=o("from_config()"),Rmr=o(` class
method.`),Pmr=l(),U8=a("p"),Bmr=o("This class cannot be instantiated directly using "),gbe=a("code"),Imr=o("__init__()"),Nmr=o(" (throws an error)."),qmr=l(),wt=a("div"),F(J8.$$.fragment),jmr=l(),hbe=a("p"),Dmr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Gmr=l(),Gd=a("p"),Omr=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),Vmr=o("not"),Xmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),zmr=o("from_pretrained()"),Qmr=o(" to load the model weights."),Wmr=l(),F(vT.$$.fragment),Hmr=l(),_o=a("div"),F(Y8.$$.fragment),Umr=l(),_be=a("p"),Jmr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ymr=l(),Ka=a("p"),Kmr=o("The model class to instantiate is selected based on the "),ube=a("code"),Zmr=o("model_type"),egr=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),ogr=o("pretrained_model_name_or_path"),rgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),tgr=o("pretrained_model_name_or_path"),agr=o(":"),ngr=l(),Od=a("ul"),FT=a("li"),Fbe=a("strong"),sgr=o("deit"),lgr=o(" \u2014 "),VW=a("a"),igr=o("DeiTForMaskedImageModeling"),dgr=o(" (DeiT model)"),cgr=l(),TT=a("li"),Tbe=a("strong"),fgr=o("swin"),mgr=o(" \u2014 "),XW=a("a"),ggr=o("SwinForMaskedImageModeling"),hgr=o(" (Swin Transformer model)"),pgr=l(),MT=a("li"),Mbe=a("strong"),_gr=o("vit"),ugr=o(" \u2014 "),zW=a("a"),bgr=o("ViTForMaskedImageModeling"),vgr=o(" (ViT model)"),Fgr=l(),ET=a("p"),Tgr=o("The model is set in evaluation mode by default using "),Ebe=a("code"),Mgr=o("model.eval()"),Egr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=a("code"),Cgr=o("model.train()"),wgr=l(),F(CT.$$.fragment),oVe=l(),Vd=a("h2"),wT=a("a"),wbe=a("span"),F(K8.$$.fragment),Agr=l(),Abe=a("span"),Lgr=o("AutoModelForObjectDetection"),rVe=l(),Jo=a("div"),F(Z8.$$.fragment),ygr=l(),Xd=a("p"),xgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QW=a("a"),$gr=o("from_pretrained()"),kgr=o(" class method or the "),WW=a("a"),Sgr=o("from_config()"),Rgr=o(` class
method.`),Pgr=l(),e9=a("p"),Bgr=o("This class cannot be instantiated directly using "),Lbe=a("code"),Igr=o("__init__()"),Ngr=o(" (throws an error)."),qgr=l(),At=a("div"),F(o9.$$.fragment),jgr=l(),ybe=a("p"),Dgr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ggr=l(),zd=a("p"),Ogr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),Vgr=o("not"),Xgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),zgr=o("from_pretrained()"),Qgr=o(" to load the model weights."),Wgr=l(),F(AT.$$.fragment),Hgr=l(),uo=a("div"),F(r9.$$.fragment),Ugr=l(),$be=a("p"),Jgr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ygr=l(),Za=a("p"),Kgr=o("The model class to instantiate is selected based on the "),kbe=a("code"),Zgr=o("model_type"),ehr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),thr=o("pretrained_model_name_or_path"),ahr=o(":"),nhr=l(),t9=a("ul"),LT=a("li"),Pbe=a("strong"),shr=o("detr"),lhr=o(" \u2014 "),UW=a("a"),ihr=o("DetrForObjectDetection"),dhr=o(" (DETR model)"),chr=l(),yT=a("li"),Bbe=a("strong"),fhr=o("yolos"),mhr=o(" \u2014 "),JW=a("a"),ghr=o("YolosForObjectDetection"),hhr=o(" (YOLOS model)"),phr=l(),xT=a("p"),_hr=o("The model is set in evaluation mode by default using "),Ibe=a("code"),uhr=o("model.eval()"),bhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=a("code"),vhr=o("model.train()"),Fhr=l(),F($T.$$.fragment),tVe=l(),Qd=a("h2"),kT=a("a"),qbe=a("span"),F(a9.$$.fragment),Thr=l(),jbe=a("span"),Mhr=o("AutoModelForImageSegmentation"),aVe=l(),Yo=a("div"),F(n9.$$.fragment),Ehr=l(),Wd=a("p"),Chr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YW=a("a"),whr=o("from_pretrained()"),Ahr=o(" class method or the "),KW=a("a"),Lhr=o("from_config()"),yhr=o(` class
method.`),xhr=l(),s9=a("p"),$hr=o("This class cannot be instantiated directly using "),Dbe=a("code"),khr=o("__init__()"),Shr=o(" (throws an error)."),Rhr=l(),Lt=a("div"),F(l9.$$.fragment),Phr=l(),Gbe=a("p"),Bhr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ihr=l(),Hd=a("p"),Nhr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),qhr=o("not"),jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),Dhr=o("from_pretrained()"),Ghr=o(" to load the model weights."),Ohr=l(),F(ST.$$.fragment),Vhr=l(),bo=a("div"),F(i9.$$.fragment),Xhr=l(),Vbe=a("p"),zhr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qhr=l(),en=a("p"),Whr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),Hhr=o("model_type"),Uhr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),Jhr=o("pretrained_model_name_or_path"),Yhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),Khr=o("pretrained_model_name_or_path"),Zhr=o(":"),epr=l(),Wbe=a("ul"),RT=a("li"),Hbe=a("strong"),opr=o("detr"),rpr=o(" \u2014 "),eH=a("a"),tpr=o("DetrForSegmentation"),apr=o(" (DETR model)"),npr=l(),PT=a("p"),spr=o("The model is set in evaluation mode by default using "),Ube=a("code"),lpr=o("model.eval()"),ipr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=a("code"),dpr=o("model.train()"),cpr=l(),F(BT.$$.fragment),nVe=l(),Ud=a("h2"),IT=a("a"),Ybe=a("span"),F(d9.$$.fragment),fpr=l(),Kbe=a("span"),mpr=o("AutoModelForSemanticSegmentation"),sVe=l(),Ko=a("div"),F(c9.$$.fragment),gpr=l(),Jd=a("p"),hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oH=a("a"),ppr=o("from_pretrained()"),_pr=o(" class method or the "),rH=a("a"),upr=o("from_config()"),bpr=o(` class
method.`),vpr=l(),f9=a("p"),Fpr=o("This class cannot be instantiated directly using "),Zbe=a("code"),Tpr=o("__init__()"),Mpr=o(" (throws an error)."),Epr=l(),yt=a("div"),F(m9.$$.fragment),Cpr=l(),eve=a("p"),wpr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Apr=l(),Yd=a("p"),Lpr=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),ypr=o("not"),xpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=a("a"),$pr=o("from_pretrained()"),kpr=o(" to load the model weights."),Spr=l(),F(NT.$$.fragment),Rpr=l(),vo=a("div"),F(g9.$$.fragment),Ppr=l(),rve=a("p"),Bpr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ipr=l(),on=a("p"),Npr=o("The model class to instantiate is selected based on the "),tve=a("code"),qpr=o("model_type"),jpr=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),Opr=o("pretrained_model_name_or_path"),Vpr=o(":"),Xpr=l(),rn=a("ul"),qT=a("li"),sve=a("strong"),zpr=o("beit"),Qpr=o(" \u2014 "),aH=a("a"),Wpr=o("BeitForSemanticSegmentation"),Hpr=o(" (BEiT model)"),Upr=l(),jT=a("li"),lve=a("strong"),Jpr=o("data2vec-vision"),Ypr=o(" \u2014 "),nH=a("a"),Kpr=o("Data2VecVisionForSemanticSegmentation"),Zpr=o(" (Data2VecVision model)"),e_r=l(),DT=a("li"),ive=a("strong"),o_r=o("dpt"),r_r=o(" \u2014 "),sH=a("a"),t_r=o("DPTForSemanticSegmentation"),a_r=o(" (DPT model)"),n_r=l(),GT=a("li"),dve=a("strong"),s_r=o("segformer"),l_r=o(" \u2014 "),lH=a("a"),i_r=o("SegformerForSemanticSegmentation"),d_r=o(" (SegFormer model)"),c_r=l(),OT=a("p"),f_r=o("The model is set in evaluation mode by default using "),cve=a("code"),m_r=o("model.eval()"),g_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fve=a("code"),h_r=o("model.train()"),p_r=l(),F(VT.$$.fragment),lVe=l(),Kd=a("h2"),XT=a("a"),mve=a("span"),F(h9.$$.fragment),__r=l(),gve=a("span"),u_r=o("AutoModelForInstanceSegmentation"),iVe=l(),Zo=a("div"),F(p9.$$.fragment),b_r=l(),Zd=a("p"),v_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iH=a("a"),F_r=o("from_pretrained()"),T_r=o(" class method or the "),dH=a("a"),M_r=o("from_config()"),E_r=o(` class
method.`),C_r=l(),_9=a("p"),w_r=o("This class cannot be instantiated directly using "),hve=a("code"),A_r=o("__init__()"),L_r=o(" (throws an error)."),y_r=l(),xt=a("div"),F(u9.$$.fragment),x_r=l(),pve=a("p"),$_r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),k_r=l(),ec=a("p"),S_r=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),R_r=o("not"),P_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),B_r=o("from_pretrained()"),I_r=o(" to load the model weights."),N_r=l(),F(zT.$$.fragment),q_r=l(),Fo=a("div"),F(b9.$$.fragment),j_r=l(),uve=a("p"),D_r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),G_r=l(),tn=a("p"),O_r=o("The model class to instantiate is selected based on the "),bve=a("code"),V_r=o("model_type"),X_r=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),z_r=o("pretrained_model_name_or_path"),Q_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),W_r=o("pretrained_model_name_or_path"),H_r=o(":"),U_r=l(),Tve=a("ul"),QT=a("li"),Mve=a("strong"),J_r=o("maskformer"),Y_r=o(" \u2014 "),fH=a("a"),K_r=o("MaskFormerForInstanceSegmentation"),Z_r=o(" (MaskFormer model)"),eur=l(),WT=a("p"),our=o("The model is set in evaluation mode by default using "),Eve=a("code"),rur=o("model.eval()"),tur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=a("code"),aur=o("model.train()"),nur=l(),F(HT.$$.fragment),dVe=l(),oc=a("h2"),UT=a("a"),wve=a("span"),F(v9.$$.fragment),sur=l(),Ave=a("span"),lur=o("TFAutoModel"),cVe=l(),er=a("div"),F(F9.$$.fragment),iur=l(),rc=a("p"),dur=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mH=a("a"),cur=o("from_pretrained()"),fur=o(" class method or the "),gH=a("a"),mur=o("from_config()"),gur=o(` class
method.`),hur=l(),T9=a("p"),pur=o("This class cannot be instantiated directly using "),Lve=a("code"),_ur=o("__init__()"),uur=o(" (throws an error)."),bur=l(),$t=a("div"),F(M9.$$.fragment),vur=l(),yve=a("p"),Fur=o("Instantiates one of the base model classes of the library from a configuration."),Tur=l(),tc=a("p"),Mur=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),Eur=o("not"),Cur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),wur=o("from_pretrained()"),Aur=o(" to load the model weights."),Lur=l(),F(JT.$$.fragment),yur=l(),yr=a("div"),F(E9.$$.fragment),xur=l(),$ve=a("p"),$ur=o("Instantiate one of the base model classes of the library from a pretrained model."),kur=l(),an=a("p"),Sur=o("The model class to instantiate is selected based on the "),kve=a("code"),Rur=o("model_type"),Pur=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),Bur=o("pretrained_model_name_or_path"),Iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),Nur=o("pretrained_model_name_or_path"),qur=o(":"),jur=l(),j=a("ul"),YT=a("li"),Pve=a("strong"),Dur=o("albert"),Gur=o(" \u2014 "),pH=a("a"),Our=o("TFAlbertModel"),Vur=o(" (ALBERT model)"),Xur=l(),KT=a("li"),Bve=a("strong"),zur=o("bart"),Qur=o(" \u2014 "),_H=a("a"),Wur=o("TFBartModel"),Hur=o(" (BART model)"),Uur=l(),ZT=a("li"),Ive=a("strong"),Jur=o("bert"),Yur=o(" \u2014 "),uH=a("a"),Kur=o("TFBertModel"),Zur=o(" (BERT model)"),e1r=l(),eM=a("li"),Nve=a("strong"),o1r=o("blenderbot"),r1r=o(" \u2014 "),bH=a("a"),t1r=o("TFBlenderbotModel"),a1r=o(" (Blenderbot model)"),n1r=l(),oM=a("li"),qve=a("strong"),s1r=o("blenderbot-small"),l1r=o(" \u2014 "),vH=a("a"),i1r=o("TFBlenderbotSmallModel"),d1r=o(" (BlenderbotSmall model)"),c1r=l(),rM=a("li"),jve=a("strong"),f1r=o("camembert"),m1r=o(" \u2014 "),FH=a("a"),g1r=o("TFCamembertModel"),h1r=o(" (CamemBERT model)"),p1r=l(),tM=a("li"),Dve=a("strong"),_1r=o("clip"),u1r=o(" \u2014 "),TH=a("a"),b1r=o("TFCLIPModel"),v1r=o(" (CLIP model)"),F1r=l(),aM=a("li"),Gve=a("strong"),T1r=o("convbert"),M1r=o(" \u2014 "),MH=a("a"),E1r=o("TFConvBertModel"),C1r=o(" (ConvBERT model)"),w1r=l(),nM=a("li"),Ove=a("strong"),A1r=o("convnext"),L1r=o(" \u2014 "),EH=a("a"),y1r=o("TFConvNextModel"),x1r=o(" (ConvNeXT model)"),$1r=l(),sM=a("li"),Vve=a("strong"),k1r=o("ctrl"),S1r=o(" \u2014 "),CH=a("a"),R1r=o("TFCTRLModel"),P1r=o(" (CTRL model)"),B1r=l(),lM=a("li"),Xve=a("strong"),I1r=o("data2vec-vision"),N1r=o(" \u2014 "),wH=a("a"),q1r=o("TFData2VecVisionModel"),j1r=o(" (Data2VecVision model)"),D1r=l(),iM=a("li"),zve=a("strong"),G1r=o("deberta"),O1r=o(" \u2014 "),AH=a("a"),V1r=o("TFDebertaModel"),X1r=o(" (DeBERTa model)"),z1r=l(),dM=a("li"),Qve=a("strong"),Q1r=o("deberta-v2"),W1r=o(" \u2014 "),LH=a("a"),H1r=o("TFDebertaV2Model"),U1r=o(" (DeBERTa-v2 model)"),J1r=l(),cM=a("li"),Wve=a("strong"),Y1r=o("distilbert"),K1r=o(" \u2014 "),yH=a("a"),Z1r=o("TFDistilBertModel"),e7r=o(" (DistilBERT model)"),o7r=l(),fM=a("li"),Hve=a("strong"),r7r=o("dpr"),t7r=o(" \u2014 "),xH=a("a"),a7r=o("TFDPRQuestionEncoder"),n7r=o(" (DPR model)"),s7r=l(),mM=a("li"),Uve=a("strong"),l7r=o("electra"),i7r=o(" \u2014 "),$H=a("a"),d7r=o("TFElectraModel"),c7r=o(" (ELECTRA model)"),f7r=l(),gM=a("li"),Jve=a("strong"),m7r=o("flaubert"),g7r=o(" \u2014 "),kH=a("a"),h7r=o("TFFlaubertModel"),p7r=o(" (FlauBERT model)"),_7r=l(),Ws=a("li"),Yve=a("strong"),u7r=o("funnel"),b7r=o(" \u2014 "),SH=a("a"),v7r=o("TFFunnelModel"),F7r=o(" or "),RH=a("a"),T7r=o("TFFunnelBaseModel"),M7r=o(" (Funnel Transformer model)"),E7r=l(),hM=a("li"),Kve=a("strong"),C7r=o("gpt2"),w7r=o(" \u2014 "),PH=a("a"),A7r=o("TFGPT2Model"),L7r=o(" (OpenAI GPT-2 model)"),y7r=l(),pM=a("li"),Zve=a("strong"),x7r=o("gptj"),$7r=o(" \u2014 "),BH=a("a"),k7r=o("TFGPTJModel"),S7r=o(" (GPT-J model)"),R7r=l(),_M=a("li"),e0e=a("strong"),P7r=o("hubert"),B7r=o(" \u2014 "),IH=a("a"),I7r=o("TFHubertModel"),N7r=o(" (Hubert model)"),q7r=l(),uM=a("li"),o0e=a("strong"),j7r=o("layoutlm"),D7r=o(" \u2014 "),NH=a("a"),G7r=o("TFLayoutLMModel"),O7r=o(" (LayoutLM model)"),V7r=l(),bM=a("li"),r0e=a("strong"),X7r=o("led"),z7r=o(" \u2014 "),qH=a("a"),Q7r=o("TFLEDModel"),W7r=o(" (LED model)"),H7r=l(),vM=a("li"),t0e=a("strong"),U7r=o("longformer"),J7r=o(" \u2014 "),jH=a("a"),Y7r=o("TFLongformerModel"),K7r=o(" (Longformer model)"),Z7r=l(),FM=a("li"),a0e=a("strong"),e2r=o("lxmert"),o2r=o(" \u2014 "),DH=a("a"),r2r=o("TFLxmertModel"),t2r=o(" (LXMERT model)"),a2r=l(),TM=a("li"),n0e=a("strong"),n2r=o("marian"),s2r=o(" \u2014 "),GH=a("a"),l2r=o("TFMarianModel"),i2r=o(" (Marian model)"),d2r=l(),MM=a("li"),s0e=a("strong"),c2r=o("mbart"),f2r=o(" \u2014 "),OH=a("a"),m2r=o("TFMBartModel"),g2r=o(" (mBART model)"),h2r=l(),EM=a("li"),l0e=a("strong"),p2r=o("mobilebert"),_2r=o(" \u2014 "),VH=a("a"),u2r=o("TFMobileBertModel"),b2r=o(" (MobileBERT model)"),v2r=l(),CM=a("li"),i0e=a("strong"),F2r=o("mpnet"),T2r=o(" \u2014 "),XH=a("a"),M2r=o("TFMPNetModel"),E2r=o(" (MPNet model)"),C2r=l(),wM=a("li"),d0e=a("strong"),w2r=o("mt5"),A2r=o(" \u2014 "),zH=a("a"),L2r=o("TFMT5Model"),y2r=o(" (MT5 model)"),x2r=l(),AM=a("li"),c0e=a("strong"),$2r=o("openai-gpt"),k2r=o(" \u2014 "),QH=a("a"),S2r=o("TFOpenAIGPTModel"),R2r=o(" (OpenAI GPT model)"),P2r=l(),LM=a("li"),f0e=a("strong"),B2r=o("opt"),I2r=o(" \u2014 "),WH=a("a"),N2r=o("TFOPTModel"),q2r=o(" (OPT model)"),j2r=l(),yM=a("li"),m0e=a("strong"),D2r=o("pegasus"),G2r=o(" \u2014 "),HH=a("a"),O2r=o("TFPegasusModel"),V2r=o(" (Pegasus model)"),X2r=l(),xM=a("li"),g0e=a("strong"),z2r=o("rembert"),Q2r=o(" \u2014 "),UH=a("a"),W2r=o("TFRemBertModel"),H2r=o(" (RemBERT model)"),U2r=l(),$M=a("li"),h0e=a("strong"),J2r=o("roberta"),Y2r=o(" \u2014 "),JH=a("a"),K2r=o("TFRobertaModel"),Z2r=o(" (RoBERTa model)"),ebr=l(),kM=a("li"),p0e=a("strong"),obr=o("roformer"),rbr=o(" \u2014 "),YH=a("a"),tbr=o("TFRoFormerModel"),abr=o(" (RoFormer model)"),nbr=l(),SM=a("li"),_0e=a("strong"),sbr=o("speech_to_text"),lbr=o(" \u2014 "),KH=a("a"),ibr=o("TFSpeech2TextModel"),dbr=o(" (Speech2Text model)"),cbr=l(),RM=a("li"),u0e=a("strong"),fbr=o("swin"),mbr=o(" \u2014 "),ZH=a("a"),gbr=o("TFSwinModel"),hbr=o(" (Swin Transformer model)"),pbr=l(),PM=a("li"),b0e=a("strong"),_br=o("t5"),ubr=o(" \u2014 "),eU=a("a"),bbr=o("TFT5Model"),vbr=o(" (T5 model)"),Fbr=l(),BM=a("li"),v0e=a("strong"),Tbr=o("tapas"),Mbr=o(" \u2014 "),oU=a("a"),Ebr=o("TFTapasModel"),Cbr=o(" (TAPAS model)"),wbr=l(),IM=a("li"),F0e=a("strong"),Abr=o("transfo-xl"),Lbr=o(" \u2014 "),rU=a("a"),ybr=o("TFTransfoXLModel"),xbr=o(" (Transformer-XL model)"),$br=l(),NM=a("li"),T0e=a("strong"),kbr=o("vit"),Sbr=o(" \u2014 "),tU=a("a"),Rbr=o("TFViTModel"),Pbr=o(" (ViT model)"),Bbr=l(),qM=a("li"),M0e=a("strong"),Ibr=o("vit_mae"),Nbr=o(" \u2014 "),aU=a("a"),qbr=o("TFViTMAEModel"),jbr=o(" (ViTMAE model)"),Dbr=l(),jM=a("li"),E0e=a("strong"),Gbr=o("wav2vec2"),Obr=o(" \u2014 "),nU=a("a"),Vbr=o("TFWav2Vec2Model"),Xbr=o(" (Wav2Vec2 model)"),zbr=l(),DM=a("li"),C0e=a("strong"),Qbr=o("xlm"),Wbr=o(" \u2014 "),sU=a("a"),Hbr=o("TFXLMModel"),Ubr=o(" (XLM model)"),Jbr=l(),GM=a("li"),w0e=a("strong"),Ybr=o("xlm-roberta"),Kbr=o(" \u2014 "),lU=a("a"),Zbr=o("TFXLMRobertaModel"),evr=o(" (XLM-RoBERTa model)"),ovr=l(),OM=a("li"),A0e=a("strong"),rvr=o("xlnet"),tvr=o(" \u2014 "),iU=a("a"),avr=o("TFXLNetModel"),nvr=o(" (XLNet model)"),svr=l(),F(VM.$$.fragment),fVe=l(),ac=a("h2"),XM=a("a"),L0e=a("span"),F(C9.$$.fragment),lvr=l(),y0e=a("span"),ivr=o("TFAutoModelForPreTraining"),mVe=l(),or=a("div"),F(w9.$$.fragment),dvr=l(),nc=a("p"),cvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dU=a("a"),fvr=o("from_pretrained()"),mvr=o(" class method or the "),cU=a("a"),gvr=o("from_config()"),hvr=o(` class
method.`),pvr=l(),A9=a("p"),_vr=o("This class cannot be instantiated directly using "),x0e=a("code"),uvr=o("__init__()"),bvr=o(" (throws an error)."),vvr=l(),kt=a("div"),F(L9.$$.fragment),Fvr=l(),$0e=a("p"),Tvr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mvr=l(),sc=a("p"),Evr=o(`Note:
Loading a model from its configuration file does `),k0e=a("strong"),Cvr=o("not"),wvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),Avr=o("from_pretrained()"),Lvr=o(" to load the model weights."),yvr=l(),F(zM.$$.fragment),xvr=l(),xr=a("div"),F(y9.$$.fragment),$vr=l(),S0e=a("p"),kvr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Svr=l(),nn=a("p"),Rvr=o("The model class to instantiate is selected based on the "),R0e=a("code"),Pvr=o("model_type"),Bvr=o(` property of the config object (either
passed as an argument or loaded from `),P0e=a("code"),Ivr=o("pretrained_model_name_or_path"),Nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),qvr=o("pretrained_model_name_or_path"),jvr=o(":"),Dvr=l(),se=a("ul"),QM=a("li"),I0e=a("strong"),Gvr=o("albert"),Ovr=o(" \u2014 "),mU=a("a"),Vvr=o("TFAlbertForPreTraining"),Xvr=o(" (ALBERT model)"),zvr=l(),WM=a("li"),N0e=a("strong"),Qvr=o("bart"),Wvr=o(" \u2014 "),gU=a("a"),Hvr=o("TFBartForConditionalGeneration"),Uvr=o(" (BART model)"),Jvr=l(),HM=a("li"),q0e=a("strong"),Yvr=o("bert"),Kvr=o(" \u2014 "),hU=a("a"),Zvr=o("TFBertForPreTraining"),e0r=o(" (BERT model)"),o0r=l(),UM=a("li"),j0e=a("strong"),r0r=o("camembert"),t0r=o(" \u2014 "),pU=a("a"),a0r=o("TFCamembertForMaskedLM"),n0r=o(" (CamemBERT model)"),s0r=l(),JM=a("li"),D0e=a("strong"),l0r=o("ctrl"),i0r=o(" \u2014 "),_U=a("a"),d0r=o("TFCTRLLMHeadModel"),c0r=o(" (CTRL model)"),f0r=l(),YM=a("li"),G0e=a("strong"),m0r=o("distilbert"),g0r=o(" \u2014 "),uU=a("a"),h0r=o("TFDistilBertForMaskedLM"),p0r=o(" (DistilBERT model)"),_0r=l(),KM=a("li"),O0e=a("strong"),u0r=o("electra"),b0r=o(" \u2014 "),bU=a("a"),v0r=o("TFElectraForPreTraining"),F0r=o(" (ELECTRA model)"),T0r=l(),ZM=a("li"),V0e=a("strong"),M0r=o("flaubert"),E0r=o(" \u2014 "),vU=a("a"),C0r=o("TFFlaubertWithLMHeadModel"),w0r=o(" (FlauBERT model)"),A0r=l(),eE=a("li"),X0e=a("strong"),L0r=o("funnel"),y0r=o(" \u2014 "),FU=a("a"),x0r=o("TFFunnelForPreTraining"),$0r=o(" (Funnel Transformer model)"),k0r=l(),oE=a("li"),z0e=a("strong"),S0r=o("gpt2"),R0r=o(" \u2014 "),TU=a("a"),P0r=o("TFGPT2LMHeadModel"),B0r=o(" (OpenAI GPT-2 model)"),I0r=l(),rE=a("li"),Q0e=a("strong"),N0r=o("layoutlm"),q0r=o(" \u2014 "),MU=a("a"),j0r=o("TFLayoutLMForMaskedLM"),D0r=o(" (LayoutLM model)"),G0r=l(),tE=a("li"),W0e=a("strong"),O0r=o("lxmert"),V0r=o(" \u2014 "),EU=a("a"),X0r=o("TFLxmertForPreTraining"),z0r=o(" (LXMERT model)"),Q0r=l(),aE=a("li"),H0e=a("strong"),W0r=o("mobilebert"),H0r=o(" \u2014 "),CU=a("a"),U0r=o("TFMobileBertForPreTraining"),J0r=o(" (MobileBERT model)"),Y0r=l(),nE=a("li"),U0e=a("strong"),K0r=o("mpnet"),Z0r=o(" \u2014 "),wU=a("a"),eFr=o("TFMPNetForMaskedLM"),oFr=o(" (MPNet model)"),rFr=l(),sE=a("li"),J0e=a("strong"),tFr=o("openai-gpt"),aFr=o(" \u2014 "),AU=a("a"),nFr=o("TFOpenAIGPTLMHeadModel"),sFr=o(" (OpenAI GPT model)"),lFr=l(),lE=a("li"),Y0e=a("strong"),iFr=o("roberta"),dFr=o(" \u2014 "),LU=a("a"),cFr=o("TFRobertaForMaskedLM"),fFr=o(" (RoBERTa model)"),mFr=l(),iE=a("li"),K0e=a("strong"),gFr=o("t5"),hFr=o(" \u2014 "),yU=a("a"),pFr=o("TFT5ForConditionalGeneration"),_Fr=o(" (T5 model)"),uFr=l(),dE=a("li"),Z0e=a("strong"),bFr=o("tapas"),vFr=o(" \u2014 "),xU=a("a"),FFr=o("TFTapasForMaskedLM"),TFr=o(" (TAPAS model)"),MFr=l(),cE=a("li"),eFe=a("strong"),EFr=o("transfo-xl"),CFr=o(" \u2014 "),$U=a("a"),wFr=o("TFTransfoXLLMHeadModel"),AFr=o(" (Transformer-XL model)"),LFr=l(),fE=a("li"),oFe=a("strong"),yFr=o("vit_mae"),xFr=o(" \u2014 "),kU=a("a"),$Fr=o("TFViTMAEForPreTraining"),kFr=o(" (ViTMAE model)"),SFr=l(),mE=a("li"),rFe=a("strong"),RFr=o("xlm"),PFr=o(" \u2014 "),SU=a("a"),BFr=o("TFXLMWithLMHeadModel"),IFr=o(" (XLM model)"),NFr=l(),gE=a("li"),tFe=a("strong"),qFr=o("xlm-roberta"),jFr=o(" \u2014 "),RU=a("a"),DFr=o("TFXLMRobertaForMaskedLM"),GFr=o(" (XLM-RoBERTa model)"),OFr=l(),hE=a("li"),aFe=a("strong"),VFr=o("xlnet"),XFr=o(" \u2014 "),PU=a("a"),zFr=o("TFXLNetLMHeadModel"),QFr=o(" (XLNet model)"),WFr=l(),F(pE.$$.fragment),gVe=l(),lc=a("h2"),_E=a("a"),nFe=a("span"),F(x9.$$.fragment),HFr=l(),sFe=a("span"),UFr=o("TFAutoModelForCausalLM"),hVe=l(),rr=a("div"),F($9.$$.fragment),JFr=l(),ic=a("p"),YFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BU=a("a"),KFr=o("from_pretrained()"),ZFr=o(" class method or the "),IU=a("a"),eTr=o("from_config()"),oTr=o(` class
method.`),rTr=l(),k9=a("p"),tTr=o("This class cannot be instantiated directly using "),lFe=a("code"),aTr=o("__init__()"),nTr=o(" (throws an error)."),sTr=l(),St=a("div"),F(S9.$$.fragment),lTr=l(),iFe=a("p"),iTr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dTr=l(),dc=a("p"),cTr=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),fTr=o("not"),mTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),gTr=o("from_pretrained()"),hTr=o(" to load the model weights."),pTr=l(),F(uE.$$.fragment),_Tr=l(),$r=a("div"),F(R9.$$.fragment),uTr=l(),cFe=a("p"),bTr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vTr=l(),sn=a("p"),FTr=o("The model class to instantiate is selected based on the "),fFe=a("code"),TTr=o("model_type"),MTr=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),ETr=o("pretrained_model_name_or_path"),CTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),wTr=o("pretrained_model_name_or_path"),ATr=o(":"),LTr=l(),Me=a("ul"),bE=a("li"),hFe=a("strong"),yTr=o("bert"),xTr=o(" \u2014 "),qU=a("a"),$Tr=o("TFBertLMHeadModel"),kTr=o(" (BERT model)"),STr=l(),vE=a("li"),pFe=a("strong"),RTr=o("camembert"),PTr=o(" \u2014 "),jU=a("a"),BTr=o("TFCamembertForCausalLM"),ITr=o(" (CamemBERT model)"),NTr=l(),FE=a("li"),_Fe=a("strong"),qTr=o("ctrl"),jTr=o(" \u2014 "),DU=a("a"),DTr=o("TFCTRLLMHeadModel"),GTr=o(" (CTRL model)"),OTr=l(),TE=a("li"),uFe=a("strong"),VTr=o("gpt2"),XTr=o(" \u2014 "),GU=a("a"),zTr=o("TFGPT2LMHeadModel"),QTr=o(" (OpenAI GPT-2 model)"),WTr=l(),ME=a("li"),bFe=a("strong"),HTr=o("gptj"),UTr=o(" \u2014 "),OU=a("a"),JTr=o("TFGPTJForCausalLM"),YTr=o(" (GPT-J model)"),KTr=l(),EE=a("li"),vFe=a("strong"),ZTr=o("openai-gpt"),eMr=o(" \u2014 "),VU=a("a"),oMr=o("TFOpenAIGPTLMHeadModel"),rMr=o(" (OpenAI GPT model)"),tMr=l(),CE=a("li"),FFe=a("strong"),aMr=o("opt"),nMr=o(" \u2014 "),XU=a("a"),sMr=o("TFOPTForCausalLM"),lMr=o(" (OPT model)"),iMr=l(),wE=a("li"),TFe=a("strong"),dMr=o("rembert"),cMr=o(" \u2014 "),zU=a("a"),fMr=o("TFRemBertForCausalLM"),mMr=o(" (RemBERT model)"),gMr=l(),AE=a("li"),MFe=a("strong"),hMr=o("roberta"),pMr=o(" \u2014 "),QU=a("a"),_Mr=o("TFRobertaForCausalLM"),uMr=o(" (RoBERTa model)"),bMr=l(),LE=a("li"),EFe=a("strong"),vMr=o("roformer"),FMr=o(" \u2014 "),WU=a("a"),TMr=o("TFRoFormerForCausalLM"),MMr=o(" (RoFormer model)"),EMr=l(),yE=a("li"),CFe=a("strong"),CMr=o("transfo-xl"),wMr=o(" \u2014 "),HU=a("a"),AMr=o("TFTransfoXLLMHeadModel"),LMr=o(" (Transformer-XL model)"),yMr=l(),xE=a("li"),wFe=a("strong"),xMr=o("xlm"),$Mr=o(" \u2014 "),UU=a("a"),kMr=o("TFXLMWithLMHeadModel"),SMr=o(" (XLM model)"),RMr=l(),$E=a("li"),AFe=a("strong"),PMr=o("xlnet"),BMr=o(" \u2014 "),JU=a("a"),IMr=o("TFXLNetLMHeadModel"),NMr=o(" (XLNet model)"),qMr=l(),F(kE.$$.fragment),pVe=l(),cc=a("h2"),SE=a("a"),LFe=a("span"),F(P9.$$.fragment),jMr=l(),yFe=a("span"),DMr=o("TFAutoModelForImageClassification"),_Ve=l(),tr=a("div"),F(B9.$$.fragment),GMr=l(),fc=a("p"),OMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YU=a("a"),VMr=o("from_pretrained()"),XMr=o(" class method or the "),KU=a("a"),zMr=o("from_config()"),QMr=o(` class
method.`),WMr=l(),I9=a("p"),HMr=o("This class cannot be instantiated directly using "),xFe=a("code"),UMr=o("__init__()"),JMr=o(" (throws an error)."),YMr=l(),Rt=a("div"),F(N9.$$.fragment),KMr=l(),$Fe=a("p"),ZMr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eEr=l(),mc=a("p"),oEr=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),rEr=o("not"),tEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),aEr=o("from_pretrained()"),nEr=o(" to load the model weights."),sEr=l(),F(RE.$$.fragment),lEr=l(),kr=a("div"),F(q9.$$.fragment),iEr=l(),SFe=a("p"),dEr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cEr=l(),ln=a("p"),fEr=o("The model class to instantiate is selected based on the "),RFe=a("code"),mEr=o("model_type"),gEr=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),hEr=o("pretrained_model_name_or_path"),pEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),_Er=o("pretrained_model_name_or_path"),uEr=o(":"),bEr=l(),dn=a("ul"),PE=a("li"),IFe=a("strong"),vEr=o("convnext"),FEr=o(" \u2014 "),eJ=a("a"),TEr=o("TFConvNextForImageClassification"),MEr=o(" (ConvNeXT model)"),EEr=l(),BE=a("li"),NFe=a("strong"),CEr=o("data2vec-vision"),wEr=o(" \u2014 "),oJ=a("a"),AEr=o("TFData2VecVisionForImageClassification"),LEr=o(" (Data2VecVision model)"),yEr=l(),IE=a("li"),qFe=a("strong"),xEr=o("swin"),$Er=o(" \u2014 "),rJ=a("a"),kEr=o("TFSwinForImageClassification"),SEr=o(" (Swin Transformer model)"),REr=l(),NE=a("li"),jFe=a("strong"),PEr=o("vit"),BEr=o(" \u2014 "),tJ=a("a"),IEr=o("TFViTForImageClassification"),NEr=o(" (ViT model)"),qEr=l(),F(qE.$$.fragment),uVe=l(),gc=a("h2"),jE=a("a"),DFe=a("span"),F(j9.$$.fragment),jEr=l(),GFe=a("span"),DEr=o("TFAutoModelForMaskedLM"),bVe=l(),ar=a("div"),F(D9.$$.fragment),GEr=l(),hc=a("p"),OEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aJ=a("a"),VEr=o("from_pretrained()"),XEr=o(" class method or the "),nJ=a("a"),zEr=o("from_config()"),QEr=o(` class
method.`),WEr=l(),G9=a("p"),HEr=o("This class cannot be instantiated directly using "),OFe=a("code"),UEr=o("__init__()"),JEr=o(" (throws an error)."),YEr=l(),Pt=a("div"),F(O9.$$.fragment),KEr=l(),VFe=a("p"),ZEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e4r=l(),pc=a("p"),o4r=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),r4r=o("not"),t4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),a4r=o("from_pretrained()"),n4r=o(" to load the model weights."),s4r=l(),F(DE.$$.fragment),l4r=l(),Sr=a("div"),F(V9.$$.fragment),i4r=l(),zFe=a("p"),d4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),c4r=l(),cn=a("p"),f4r=o("The model class to instantiate is selected based on the "),QFe=a("code"),m4r=o("model_type"),g4r=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),h4r=o("pretrained_model_name_or_path"),p4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),_4r=o("pretrained_model_name_or_path"),u4r=o(":"),b4r=l(),ie=a("ul"),GE=a("li"),UFe=a("strong"),v4r=o("albert"),F4r=o(" \u2014 "),lJ=a("a"),T4r=o("TFAlbertForMaskedLM"),M4r=o(" (ALBERT model)"),E4r=l(),OE=a("li"),JFe=a("strong"),C4r=o("bert"),w4r=o(" \u2014 "),iJ=a("a"),A4r=o("TFBertForMaskedLM"),L4r=o(" (BERT model)"),y4r=l(),VE=a("li"),YFe=a("strong"),x4r=o("camembert"),$4r=o(" \u2014 "),dJ=a("a"),k4r=o("TFCamembertForMaskedLM"),S4r=o(" (CamemBERT model)"),R4r=l(),XE=a("li"),KFe=a("strong"),P4r=o("convbert"),B4r=o(" \u2014 "),cJ=a("a"),I4r=o("TFConvBertForMaskedLM"),N4r=o(" (ConvBERT model)"),q4r=l(),zE=a("li"),ZFe=a("strong"),j4r=o("deberta"),D4r=o(" \u2014 "),fJ=a("a"),G4r=o("TFDebertaForMaskedLM"),O4r=o(" (DeBERTa model)"),V4r=l(),QE=a("li"),eTe=a("strong"),X4r=o("deberta-v2"),z4r=o(" \u2014 "),mJ=a("a"),Q4r=o("TFDebertaV2ForMaskedLM"),W4r=o(" (DeBERTa-v2 model)"),H4r=l(),WE=a("li"),oTe=a("strong"),U4r=o("distilbert"),J4r=o(" \u2014 "),gJ=a("a"),Y4r=o("TFDistilBertForMaskedLM"),K4r=o(" (DistilBERT model)"),Z4r=l(),HE=a("li"),rTe=a("strong"),eCr=o("electra"),oCr=o(" \u2014 "),hJ=a("a"),rCr=o("TFElectraForMaskedLM"),tCr=o(" (ELECTRA model)"),aCr=l(),UE=a("li"),tTe=a("strong"),nCr=o("flaubert"),sCr=o(" \u2014 "),pJ=a("a"),lCr=o("TFFlaubertWithLMHeadModel"),iCr=o(" (FlauBERT model)"),dCr=l(),JE=a("li"),aTe=a("strong"),cCr=o("funnel"),fCr=o(" \u2014 "),_J=a("a"),mCr=o("TFFunnelForMaskedLM"),gCr=o(" (Funnel Transformer model)"),hCr=l(),YE=a("li"),nTe=a("strong"),pCr=o("layoutlm"),_Cr=o(" \u2014 "),uJ=a("a"),uCr=o("TFLayoutLMForMaskedLM"),bCr=o(" (LayoutLM model)"),vCr=l(),KE=a("li"),sTe=a("strong"),FCr=o("longformer"),TCr=o(" \u2014 "),bJ=a("a"),MCr=o("TFLongformerForMaskedLM"),ECr=o(" (Longformer model)"),CCr=l(),ZE=a("li"),lTe=a("strong"),wCr=o("mobilebert"),ACr=o(" \u2014 "),vJ=a("a"),LCr=o("TFMobileBertForMaskedLM"),yCr=o(" (MobileBERT model)"),xCr=l(),e4=a("li"),iTe=a("strong"),$Cr=o("mpnet"),kCr=o(" \u2014 "),FJ=a("a"),SCr=o("TFMPNetForMaskedLM"),RCr=o(" (MPNet model)"),PCr=l(),o4=a("li"),dTe=a("strong"),BCr=o("rembert"),ICr=o(" \u2014 "),TJ=a("a"),NCr=o("TFRemBertForMaskedLM"),qCr=o(" (RemBERT model)"),jCr=l(),r4=a("li"),cTe=a("strong"),DCr=o("roberta"),GCr=o(" \u2014 "),MJ=a("a"),OCr=o("TFRobertaForMaskedLM"),VCr=o(" (RoBERTa model)"),XCr=l(),t4=a("li"),fTe=a("strong"),zCr=o("roformer"),QCr=o(" \u2014 "),EJ=a("a"),WCr=o("TFRoFormerForMaskedLM"),HCr=o(" (RoFormer model)"),UCr=l(),a4=a("li"),mTe=a("strong"),JCr=o("tapas"),YCr=o(" \u2014 "),CJ=a("a"),KCr=o("TFTapasForMaskedLM"),ZCr=o(" (TAPAS model)"),e5r=l(),n4=a("li"),gTe=a("strong"),o5r=o("xlm"),r5r=o(" \u2014 "),wJ=a("a"),t5r=o("TFXLMWithLMHeadModel"),a5r=o(" (XLM model)"),n5r=l(),s4=a("li"),hTe=a("strong"),s5r=o("xlm-roberta"),l5r=o(" \u2014 "),AJ=a("a"),i5r=o("TFXLMRobertaForMaskedLM"),d5r=o(" (XLM-RoBERTa model)"),c5r=l(),F(l4.$$.fragment),vVe=l(),_c=a("h2"),i4=a("a"),pTe=a("span"),F(X9.$$.fragment),f5r=l(),_Te=a("span"),m5r=o("TFAutoModelForSeq2SeqLM"),FVe=l(),nr=a("div"),F(z9.$$.fragment),g5r=l(),uc=a("p"),h5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LJ=a("a"),p5r=o("from_pretrained()"),_5r=o(" class method or the "),yJ=a("a"),u5r=o("from_config()"),b5r=o(` class
method.`),v5r=l(),Q9=a("p"),F5r=o("This class cannot be instantiated directly using "),uTe=a("code"),T5r=o("__init__()"),M5r=o(" (throws an error)."),E5r=l(),Bt=a("div"),F(W9.$$.fragment),C5r=l(),bTe=a("p"),w5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A5r=l(),bc=a("p"),L5r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),y5r=o("not"),x5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),$5r=o("from_pretrained()"),k5r=o(" to load the model weights."),S5r=l(),F(d4.$$.fragment),R5r=l(),Rr=a("div"),F(H9.$$.fragment),P5r=l(),FTe=a("p"),B5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),I5r=l(),fn=a("p"),N5r=o("The model class to instantiate is selected based on the "),TTe=a("code"),q5r=o("model_type"),j5r=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),D5r=o("pretrained_model_name_or_path"),G5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),O5r=o("pretrained_model_name_or_path"),V5r=o(":"),X5r=l(),ye=a("ul"),c4=a("li"),CTe=a("strong"),z5r=o("bart"),Q5r=o(" \u2014 "),$J=a("a"),W5r=o("TFBartForConditionalGeneration"),H5r=o(" (BART model)"),U5r=l(),f4=a("li"),wTe=a("strong"),J5r=o("blenderbot"),Y5r=o(" \u2014 "),kJ=a("a"),K5r=o("TFBlenderbotForConditionalGeneration"),Z5r=o(" (Blenderbot model)"),e3r=l(),m4=a("li"),ATe=a("strong"),o3r=o("blenderbot-small"),r3r=o(" \u2014 "),SJ=a("a"),t3r=o("TFBlenderbotSmallForConditionalGeneration"),a3r=o(" (BlenderbotSmall model)"),n3r=l(),g4=a("li"),LTe=a("strong"),s3r=o("encoder-decoder"),l3r=o(" \u2014 "),RJ=a("a"),i3r=o("TFEncoderDecoderModel"),d3r=o(" (Encoder decoder model)"),c3r=l(),h4=a("li"),yTe=a("strong"),f3r=o("led"),m3r=o(" \u2014 "),PJ=a("a"),g3r=o("TFLEDForConditionalGeneration"),h3r=o(" (LED model)"),p3r=l(),p4=a("li"),xTe=a("strong"),_3r=o("marian"),u3r=o(" \u2014 "),BJ=a("a"),b3r=o("TFMarianMTModel"),v3r=o(" (Marian model)"),F3r=l(),_4=a("li"),$Te=a("strong"),T3r=o("mbart"),M3r=o(" \u2014 "),IJ=a("a"),E3r=o("TFMBartForConditionalGeneration"),C3r=o(" (mBART model)"),w3r=l(),u4=a("li"),kTe=a("strong"),A3r=o("mt5"),L3r=o(" \u2014 "),NJ=a("a"),y3r=o("TFMT5ForConditionalGeneration"),x3r=o(" (MT5 model)"),$3r=l(),b4=a("li"),STe=a("strong"),k3r=o("pegasus"),S3r=o(" \u2014 "),qJ=a("a"),R3r=o("TFPegasusForConditionalGeneration"),P3r=o(" (Pegasus model)"),B3r=l(),v4=a("li"),RTe=a("strong"),I3r=o("t5"),N3r=o(" \u2014 "),jJ=a("a"),q3r=o("TFT5ForConditionalGeneration"),j3r=o(" (T5 model)"),D3r=l(),F(F4.$$.fragment),TVe=l(),vc=a("h2"),T4=a("a"),PTe=a("span"),F(U9.$$.fragment),G3r=l(),BTe=a("span"),O3r=o("TFAutoModelForSequenceClassification"),MVe=l(),sr=a("div"),F(J9.$$.fragment),V3r=l(),Fc=a("p"),X3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DJ=a("a"),z3r=o("from_pretrained()"),Q3r=o(" class method or the "),GJ=a("a"),W3r=o("from_config()"),H3r=o(` class
method.`),U3r=l(),Y9=a("p"),J3r=o("This class cannot be instantiated directly using "),ITe=a("code"),Y3r=o("__init__()"),K3r=o(" (throws an error)."),Z3r=l(),It=a("div"),F(K9.$$.fragment),ewr=l(),NTe=a("p"),owr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),rwr=l(),Tc=a("p"),twr=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),awr=o("not"),nwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),swr=o("from_pretrained()"),lwr=o(" to load the model weights."),iwr=l(),F(M4.$$.fragment),dwr=l(),Pr=a("div"),F(Z9.$$.fragment),cwr=l(),jTe=a("p"),fwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mwr=l(),mn=a("p"),gwr=o("The model class to instantiate is selected based on the "),DTe=a("code"),hwr=o("model_type"),pwr=o(` property of the config object (either
passed as an argument or loaded from `),GTe=a("code"),_wr=o("pretrained_model_name_or_path"),uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=a("code"),bwr=o("pretrained_model_name_or_path"),vwr=o(":"),Fwr=l(),te=a("ul"),E4=a("li"),VTe=a("strong"),Twr=o("albert"),Mwr=o(" \u2014 "),VJ=a("a"),Ewr=o("TFAlbertForSequenceClassification"),Cwr=o(" (ALBERT model)"),wwr=l(),C4=a("li"),XTe=a("strong"),Awr=o("bert"),Lwr=o(" \u2014 "),XJ=a("a"),ywr=o("TFBertForSequenceClassification"),xwr=o(" (BERT model)"),$wr=l(),w4=a("li"),zTe=a("strong"),kwr=o("camembert"),Swr=o(" \u2014 "),zJ=a("a"),Rwr=o("TFCamembertForSequenceClassification"),Pwr=o(" (CamemBERT model)"),Bwr=l(),A4=a("li"),QTe=a("strong"),Iwr=o("convbert"),Nwr=o(" \u2014 "),QJ=a("a"),qwr=o("TFConvBertForSequenceClassification"),jwr=o(" (ConvBERT model)"),Dwr=l(),L4=a("li"),WTe=a("strong"),Gwr=o("ctrl"),Owr=o(" \u2014 "),WJ=a("a"),Vwr=o("TFCTRLForSequenceClassification"),Xwr=o(" (CTRL model)"),zwr=l(),y4=a("li"),HTe=a("strong"),Qwr=o("deberta"),Wwr=o(" \u2014 "),HJ=a("a"),Hwr=o("TFDebertaForSequenceClassification"),Uwr=o(" (DeBERTa model)"),Jwr=l(),x4=a("li"),UTe=a("strong"),Ywr=o("deberta-v2"),Kwr=o(" \u2014 "),UJ=a("a"),Zwr=o("TFDebertaV2ForSequenceClassification"),eAr=o(" (DeBERTa-v2 model)"),oAr=l(),$4=a("li"),JTe=a("strong"),rAr=o("distilbert"),tAr=o(" \u2014 "),JJ=a("a"),aAr=o("TFDistilBertForSequenceClassification"),nAr=o(" (DistilBERT model)"),sAr=l(),k4=a("li"),YTe=a("strong"),lAr=o("electra"),iAr=o(" \u2014 "),YJ=a("a"),dAr=o("TFElectraForSequenceClassification"),cAr=o(" (ELECTRA model)"),fAr=l(),S4=a("li"),KTe=a("strong"),mAr=o("flaubert"),gAr=o(" \u2014 "),KJ=a("a"),hAr=o("TFFlaubertForSequenceClassification"),pAr=o(" (FlauBERT model)"),_Ar=l(),R4=a("li"),ZTe=a("strong"),uAr=o("funnel"),bAr=o(" \u2014 "),ZJ=a("a"),vAr=o("TFFunnelForSequenceClassification"),FAr=o(" (Funnel Transformer model)"),TAr=l(),P4=a("li"),eMe=a("strong"),MAr=o("gpt2"),EAr=o(" \u2014 "),eY=a("a"),CAr=o("TFGPT2ForSequenceClassification"),wAr=o(" (OpenAI GPT-2 model)"),AAr=l(),B4=a("li"),oMe=a("strong"),LAr=o("gptj"),yAr=o(" \u2014 "),oY=a("a"),xAr=o("TFGPTJForSequenceClassification"),$Ar=o(" (GPT-J model)"),kAr=l(),I4=a("li"),rMe=a("strong"),SAr=o("layoutlm"),RAr=o(" \u2014 "),rY=a("a"),PAr=o("TFLayoutLMForSequenceClassification"),BAr=o(" (LayoutLM model)"),IAr=l(),N4=a("li"),tMe=a("strong"),NAr=o("longformer"),qAr=o(" \u2014 "),tY=a("a"),jAr=o("TFLongformerForSequenceClassification"),DAr=o(" (Longformer model)"),GAr=l(),q4=a("li"),aMe=a("strong"),OAr=o("mobilebert"),VAr=o(" \u2014 "),aY=a("a"),XAr=o("TFMobileBertForSequenceClassification"),zAr=o(" (MobileBERT model)"),QAr=l(),j4=a("li"),nMe=a("strong"),WAr=o("mpnet"),HAr=o(" \u2014 "),nY=a("a"),UAr=o("TFMPNetForSequenceClassification"),JAr=o(" (MPNet model)"),YAr=l(),D4=a("li"),sMe=a("strong"),KAr=o("openai-gpt"),ZAr=o(" \u2014 "),sY=a("a"),e6r=o("TFOpenAIGPTForSequenceClassification"),o6r=o(" (OpenAI GPT model)"),r6r=l(),G4=a("li"),lMe=a("strong"),t6r=o("rembert"),a6r=o(" \u2014 "),lY=a("a"),n6r=o("TFRemBertForSequenceClassification"),s6r=o(" (RemBERT model)"),l6r=l(),O4=a("li"),iMe=a("strong"),i6r=o("roberta"),d6r=o(" \u2014 "),iY=a("a"),c6r=o("TFRobertaForSequenceClassification"),f6r=o(" (RoBERTa model)"),m6r=l(),V4=a("li"),dMe=a("strong"),g6r=o("roformer"),h6r=o(" \u2014 "),dY=a("a"),p6r=o("TFRoFormerForSequenceClassification"),_6r=o(" (RoFormer model)"),u6r=l(),X4=a("li"),cMe=a("strong"),b6r=o("tapas"),v6r=o(" \u2014 "),cY=a("a"),F6r=o("TFTapasForSequenceClassification"),T6r=o(" (TAPAS model)"),M6r=l(),z4=a("li"),fMe=a("strong"),E6r=o("transfo-xl"),C6r=o(" \u2014 "),fY=a("a"),w6r=o("TFTransfoXLForSequenceClassification"),A6r=o(" (Transformer-XL model)"),L6r=l(),Q4=a("li"),mMe=a("strong"),y6r=o("xlm"),x6r=o(" \u2014 "),mY=a("a"),$6r=o("TFXLMForSequenceClassification"),k6r=o(" (XLM model)"),S6r=l(),W4=a("li"),gMe=a("strong"),R6r=o("xlm-roberta"),P6r=o(" \u2014 "),gY=a("a"),B6r=o("TFXLMRobertaForSequenceClassification"),I6r=o(" (XLM-RoBERTa model)"),N6r=l(),H4=a("li"),hMe=a("strong"),q6r=o("xlnet"),j6r=o(" \u2014 "),hY=a("a"),D6r=o("TFXLNetForSequenceClassification"),G6r=o(" (XLNet model)"),O6r=l(),F(U4.$$.fragment),EVe=l(),Mc=a("h2"),J4=a("a"),pMe=a("span"),F(ex.$$.fragment),V6r=l(),_Me=a("span"),X6r=o("TFAutoModelForMultipleChoice"),CVe=l(),lr=a("div"),F(ox.$$.fragment),z6r=l(),Ec=a("p"),Q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pY=a("a"),W6r=o("from_pretrained()"),H6r=o(" class method or the "),_Y=a("a"),U6r=o("from_config()"),J6r=o(` class
method.`),Y6r=l(),rx=a("p"),K6r=o("This class cannot be instantiated directly using "),uMe=a("code"),Z6r=o("__init__()"),eLr=o(" (throws an error)."),oLr=l(),Nt=a("div"),F(tx.$$.fragment),rLr=l(),bMe=a("p"),tLr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),aLr=l(),Cc=a("p"),nLr=o(`Note:
Loading a model from its configuration file does `),vMe=a("strong"),sLr=o("not"),lLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),iLr=o("from_pretrained()"),dLr=o(" to load the model weights."),cLr=l(),F(Y4.$$.fragment),fLr=l(),Br=a("div"),F(ax.$$.fragment),mLr=l(),FMe=a("p"),gLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hLr=l(),gn=a("p"),pLr=o("The model class to instantiate is selected based on the "),TMe=a("code"),_Lr=o("model_type"),uLr=o(` property of the config object (either
passed as an argument or loaded from `),MMe=a("code"),bLr=o("pretrained_model_name_or_path"),vLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(":"),MLr=l(),_e=a("ul"),K4=a("li"),CMe=a("strong"),ELr=o("albert"),CLr=o(" \u2014 "),bY=a("a"),wLr=o("TFAlbertForMultipleChoice"),ALr=o(" (ALBERT model)"),LLr=l(),Z4=a("li"),wMe=a("strong"),yLr=o("bert"),xLr=o(" \u2014 "),vY=a("a"),$Lr=o("TFBertForMultipleChoice"),kLr=o(" (BERT model)"),SLr=l(),eC=a("li"),AMe=a("strong"),RLr=o("camembert"),PLr=o(" \u2014 "),FY=a("a"),BLr=o("TFCamembertForMultipleChoice"),ILr=o(" (CamemBERT model)"),NLr=l(),oC=a("li"),LMe=a("strong"),qLr=o("convbert"),jLr=o(" \u2014 "),TY=a("a"),DLr=o("TFConvBertForMultipleChoice"),GLr=o(" (ConvBERT model)"),OLr=l(),rC=a("li"),yMe=a("strong"),VLr=o("distilbert"),XLr=o(" \u2014 "),MY=a("a"),zLr=o("TFDistilBertForMultipleChoice"),QLr=o(" (DistilBERT model)"),WLr=l(),tC=a("li"),xMe=a("strong"),HLr=o("electra"),ULr=o(" \u2014 "),EY=a("a"),JLr=o("TFElectraForMultipleChoice"),YLr=o(" (ELECTRA model)"),KLr=l(),aC=a("li"),$Me=a("strong"),ZLr=o("flaubert"),eyr=o(" \u2014 "),CY=a("a"),oyr=o("TFFlaubertForMultipleChoice"),ryr=o(" (FlauBERT model)"),tyr=l(),nC=a("li"),kMe=a("strong"),ayr=o("funnel"),nyr=o(" \u2014 "),wY=a("a"),syr=o("TFFunnelForMultipleChoice"),lyr=o(" (Funnel Transformer model)"),iyr=l(),sC=a("li"),SMe=a("strong"),dyr=o("longformer"),cyr=o(" \u2014 "),AY=a("a"),fyr=o("TFLongformerForMultipleChoice"),myr=o(" (Longformer model)"),gyr=l(),lC=a("li"),RMe=a("strong"),hyr=o("mobilebert"),pyr=o(" \u2014 "),LY=a("a"),_yr=o("TFMobileBertForMultipleChoice"),uyr=o(" (MobileBERT model)"),byr=l(),iC=a("li"),PMe=a("strong"),vyr=o("mpnet"),Fyr=o(" \u2014 "),yY=a("a"),Tyr=o("TFMPNetForMultipleChoice"),Myr=o(" (MPNet model)"),Eyr=l(),dC=a("li"),BMe=a("strong"),Cyr=o("rembert"),wyr=o(" \u2014 "),xY=a("a"),Ayr=o("TFRemBertForMultipleChoice"),Lyr=o(" (RemBERT model)"),yyr=l(),cC=a("li"),IMe=a("strong"),xyr=o("roberta"),$yr=o(" \u2014 "),$Y=a("a"),kyr=o("TFRobertaForMultipleChoice"),Syr=o(" (RoBERTa model)"),Ryr=l(),fC=a("li"),NMe=a("strong"),Pyr=o("roformer"),Byr=o(" \u2014 "),kY=a("a"),Iyr=o("TFRoFormerForMultipleChoice"),Nyr=o(" (RoFormer model)"),qyr=l(),mC=a("li"),qMe=a("strong"),jyr=o("xlm"),Dyr=o(" \u2014 "),SY=a("a"),Gyr=o("TFXLMForMultipleChoice"),Oyr=o(" (XLM model)"),Vyr=l(),gC=a("li"),jMe=a("strong"),Xyr=o("xlm-roberta"),zyr=o(" \u2014 "),RY=a("a"),Qyr=o("TFXLMRobertaForMultipleChoice"),Wyr=o(" (XLM-RoBERTa model)"),Hyr=l(),hC=a("li"),DMe=a("strong"),Uyr=o("xlnet"),Jyr=o(" \u2014 "),PY=a("a"),Yyr=o("TFXLNetForMultipleChoice"),Kyr=o(" (XLNet model)"),Zyr=l(),F(pC.$$.fragment),wVe=l(),wc=a("h2"),_C=a("a"),GMe=a("span"),F(nx.$$.fragment),e8r=l(),OMe=a("span"),o8r=o("TFAutoModelForNextSentencePrediction"),AVe=l(),ir=a("div"),F(sx.$$.fragment),r8r=l(),Ac=a("p"),t8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BY=a("a"),a8r=o("from_pretrained()"),n8r=o(" class method or the "),IY=a("a"),s8r=o("from_config()"),l8r=o(` class
method.`),i8r=l(),lx=a("p"),d8r=o("This class cannot be instantiated directly using "),VMe=a("code"),c8r=o("__init__()"),f8r=o(" (throws an error)."),m8r=l(),qt=a("div"),F(ix.$$.fragment),g8r=l(),XMe=a("p"),h8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),p8r=l(),Lc=a("p"),_8r=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),u8r=o("not"),b8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),v8r=o("from_pretrained()"),F8r=o(" to load the model weights."),T8r=l(),F(uC.$$.fragment),M8r=l(),Ir=a("div"),F(dx.$$.fragment),E8r=l(),QMe=a("p"),C8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w8r=l(),hn=a("p"),A8r=o("The model class to instantiate is selected based on the "),WMe=a("code"),L8r=o("model_type"),y8r=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),x8r=o("pretrained_model_name_or_path"),$8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(":"),R8r=l(),cx=a("ul"),bC=a("li"),JMe=a("strong"),P8r=o("bert"),B8r=o(" \u2014 "),qY=a("a"),I8r=o("TFBertForNextSentencePrediction"),N8r=o(" (BERT model)"),q8r=l(),vC=a("li"),YMe=a("strong"),j8r=o("mobilebert"),D8r=o(" \u2014 "),jY=a("a"),G8r=o("TFMobileBertForNextSentencePrediction"),O8r=o(" (MobileBERT model)"),V8r=l(),F(FC.$$.fragment),LVe=l(),yc=a("h2"),TC=a("a"),KMe=a("span"),F(fx.$$.fragment),X8r=l(),ZMe=a("span"),z8r=o("TFAutoModelForTableQuestionAnswering"),yVe=l(),dr=a("div"),F(mx.$$.fragment),Q8r=l(),xc=a("p"),W8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DY=a("a"),H8r=o("from_pretrained()"),U8r=o(" class method or the "),GY=a("a"),J8r=o("from_config()"),Y8r=o(` class
method.`),K8r=l(),gx=a("p"),Z8r=o("This class cannot be instantiated directly using "),eEe=a("code"),e9r=o("__init__()"),o9r=o(" (throws an error)."),r9r=l(),jt=a("div"),F(hx.$$.fragment),t9r=l(),oEe=a("p"),a9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n9r=l(),$c=a("p"),s9r=o(`Note:
Loading a model from its configuration file does `),rEe=a("strong"),l9r=o("not"),i9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),d9r=o("from_pretrained()"),c9r=o(" to load the model weights."),f9r=l(),F(MC.$$.fragment),m9r=l(),Nr=a("div"),F(px.$$.fragment),g9r=l(),tEe=a("p"),h9r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),p9r=l(),pn=a("p"),_9r=o("The model class to instantiate is selected based on the "),aEe=a("code"),u9r=o("model_type"),b9r=o(` property of the config object (either
passed as an argument or loaded from `),nEe=a("code"),v9r=o("pretrained_model_name_or_path"),F9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=a("code"),T9r=o("pretrained_model_name_or_path"),M9r=o(":"),E9r=l(),lEe=a("ul"),EC=a("li"),iEe=a("strong"),C9r=o("tapas"),w9r=o(" \u2014 "),VY=a("a"),A9r=o("TFTapasForQuestionAnswering"),L9r=o(" (TAPAS model)"),y9r=l(),F(CC.$$.fragment),xVe=l(),kc=a("h2"),wC=a("a"),dEe=a("span"),F(_x.$$.fragment),x9r=l(),cEe=a("span"),$9r=o("TFAutoModelForTokenClassification"),$Ve=l(),cr=a("div"),F(ux.$$.fragment),k9r=l(),Sc=a("p"),S9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XY=a("a"),R9r=o("from_pretrained()"),P9r=o(" class method or the "),zY=a("a"),B9r=o("from_config()"),I9r=o(` class
method.`),N9r=l(),bx=a("p"),q9r=o("This class cannot be instantiated directly using "),fEe=a("code"),j9r=o("__init__()"),D9r=o(" (throws an error)."),G9r=l(),Dt=a("div"),F(vx.$$.fragment),O9r=l(),mEe=a("p"),V9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),X9r=l(),Rc=a("p"),z9r=o(`Note:
Loading a model from its configuration file does `),gEe=a("strong"),Q9r=o("not"),W9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),H9r=o("from_pretrained()"),U9r=o(" to load the model weights."),J9r=l(),F(AC.$$.fragment),Y9r=l(),qr=a("div"),F(Fx.$$.fragment),K9r=l(),hEe=a("p"),Z9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),exr=l(),_n=a("p"),oxr=o("The model class to instantiate is selected based on the "),pEe=a("code"),rxr=o("model_type"),txr=o(` property of the config object (either
passed as an argument or loaded from `),_Ee=a("code"),axr=o("pretrained_model_name_or_path"),nxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(":"),ixr=l(),de=a("ul"),LC=a("li"),bEe=a("strong"),dxr=o("albert"),cxr=o(" \u2014 "),WY=a("a"),fxr=o("TFAlbertForTokenClassification"),mxr=o(" (ALBERT model)"),gxr=l(),yC=a("li"),vEe=a("strong"),hxr=o("bert"),pxr=o(" \u2014 "),HY=a("a"),_xr=o("TFBertForTokenClassification"),uxr=o(" (BERT model)"),bxr=l(),xC=a("li"),FEe=a("strong"),vxr=o("camembert"),Fxr=o(" \u2014 "),UY=a("a"),Txr=o("TFCamembertForTokenClassification"),Mxr=o(" (CamemBERT model)"),Exr=l(),$C=a("li"),TEe=a("strong"),Cxr=o("convbert"),wxr=o(" \u2014 "),JY=a("a"),Axr=o("TFConvBertForTokenClassification"),Lxr=o(" (ConvBERT model)"),yxr=l(),kC=a("li"),MEe=a("strong"),xxr=o("deberta"),$xr=o(" \u2014 "),YY=a("a"),kxr=o("TFDebertaForTokenClassification"),Sxr=o(" (DeBERTa model)"),Rxr=l(),SC=a("li"),EEe=a("strong"),Pxr=o("deberta-v2"),Bxr=o(" \u2014 "),KY=a("a"),Ixr=o("TFDebertaV2ForTokenClassification"),Nxr=o(" (DeBERTa-v2 model)"),qxr=l(),RC=a("li"),CEe=a("strong"),jxr=o("distilbert"),Dxr=o(" \u2014 "),ZY=a("a"),Gxr=o("TFDistilBertForTokenClassification"),Oxr=o(" (DistilBERT model)"),Vxr=l(),PC=a("li"),wEe=a("strong"),Xxr=o("electra"),zxr=o(" \u2014 "),eK=a("a"),Qxr=o("TFElectraForTokenClassification"),Wxr=o(" (ELECTRA model)"),Hxr=l(),BC=a("li"),AEe=a("strong"),Uxr=o("flaubert"),Jxr=o(" \u2014 "),oK=a("a"),Yxr=o("TFFlaubertForTokenClassification"),Kxr=o(" (FlauBERT model)"),Zxr=l(),IC=a("li"),LEe=a("strong"),e$r=o("funnel"),o$r=o(" \u2014 "),rK=a("a"),r$r=o("TFFunnelForTokenClassification"),t$r=o(" (Funnel Transformer model)"),a$r=l(),NC=a("li"),yEe=a("strong"),n$r=o("layoutlm"),s$r=o(" \u2014 "),tK=a("a"),l$r=o("TFLayoutLMForTokenClassification"),i$r=o(" (LayoutLM model)"),d$r=l(),qC=a("li"),xEe=a("strong"),c$r=o("longformer"),f$r=o(" \u2014 "),aK=a("a"),m$r=o("TFLongformerForTokenClassification"),g$r=o(" (Longformer model)"),h$r=l(),jC=a("li"),$Ee=a("strong"),p$r=o("mobilebert"),_$r=o(" \u2014 "),nK=a("a"),u$r=o("TFMobileBertForTokenClassification"),b$r=o(" (MobileBERT model)"),v$r=l(),DC=a("li"),kEe=a("strong"),F$r=o("mpnet"),T$r=o(" \u2014 "),sK=a("a"),M$r=o("TFMPNetForTokenClassification"),E$r=o(" (MPNet model)"),C$r=l(),GC=a("li"),SEe=a("strong"),w$r=o("rembert"),A$r=o(" \u2014 "),lK=a("a"),L$r=o("TFRemBertForTokenClassification"),y$r=o(" (RemBERT model)"),x$r=l(),OC=a("li"),REe=a("strong"),$$r=o("roberta"),k$r=o(" \u2014 "),iK=a("a"),S$r=o("TFRobertaForTokenClassification"),R$r=o(" (RoBERTa model)"),P$r=l(),VC=a("li"),PEe=a("strong"),B$r=o("roformer"),I$r=o(" \u2014 "),dK=a("a"),N$r=o("TFRoFormerForTokenClassification"),q$r=o(" (RoFormer model)"),j$r=l(),XC=a("li"),BEe=a("strong"),D$r=o("xlm"),G$r=o(" \u2014 "),cK=a("a"),O$r=o("TFXLMForTokenClassification"),V$r=o(" (XLM model)"),X$r=l(),zC=a("li"),IEe=a("strong"),z$r=o("xlm-roberta"),Q$r=o(" \u2014 "),fK=a("a"),W$r=o("TFXLMRobertaForTokenClassification"),H$r=o(" (XLM-RoBERTa model)"),U$r=l(),QC=a("li"),NEe=a("strong"),J$r=o("xlnet"),Y$r=o(" \u2014 "),mK=a("a"),K$r=o("TFXLNetForTokenClassification"),Z$r=o(" (XLNet model)"),ekr=l(),F(WC.$$.fragment),kVe=l(),Pc=a("h2"),HC=a("a"),qEe=a("span"),F(Tx.$$.fragment),okr=l(),jEe=a("span"),rkr=o("TFAutoModelForQuestionAnswering"),SVe=l(),fr=a("div"),F(Mx.$$.fragment),tkr=l(),Bc=a("p"),akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gK=a("a"),nkr=o("from_pretrained()"),skr=o(" class method or the "),hK=a("a"),lkr=o("from_config()"),ikr=o(` class
method.`),dkr=l(),Ex=a("p"),ckr=o("This class cannot be instantiated directly using "),DEe=a("code"),fkr=o("__init__()"),mkr=o(" (throws an error)."),gkr=l(),Gt=a("div"),F(Cx.$$.fragment),hkr=l(),GEe=a("p"),pkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_kr=l(),Ic=a("p"),ukr=o(`Note:
Loading a model from its configuration file does `),OEe=a("strong"),bkr=o("not"),vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=a("a"),Fkr=o("from_pretrained()"),Tkr=o(" to load the model weights."),Mkr=l(),F(UC.$$.fragment),Ekr=l(),jr=a("div"),F(wx.$$.fragment),Ckr=l(),VEe=a("p"),wkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Akr=l(),un=a("p"),Lkr=o("The model class to instantiate is selected based on the "),XEe=a("code"),ykr=o("model_type"),xkr=o(` property of the config object (either
passed as an argument or loaded from `),zEe=a("code"),$kr=o("pretrained_model_name_or_path"),kkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(":"),Pkr=l(),ce=a("ul"),JC=a("li"),WEe=a("strong"),Bkr=o("albert"),Ikr=o(" \u2014 "),_K=a("a"),Nkr=o("TFAlbertForQuestionAnswering"),qkr=o(" (ALBERT model)"),jkr=l(),YC=a("li"),HEe=a("strong"),Dkr=o("bert"),Gkr=o(" \u2014 "),uK=a("a"),Okr=o("TFBertForQuestionAnswering"),Vkr=o(" (BERT model)"),Xkr=l(),KC=a("li"),UEe=a("strong"),zkr=o("camembert"),Qkr=o(" \u2014 "),bK=a("a"),Wkr=o("TFCamembertForQuestionAnswering"),Hkr=o(" (CamemBERT model)"),Ukr=l(),ZC=a("li"),JEe=a("strong"),Jkr=o("convbert"),Ykr=o(" \u2014 "),vK=a("a"),Kkr=o("TFConvBertForQuestionAnswering"),Zkr=o(" (ConvBERT model)"),eSr=l(),e5=a("li"),YEe=a("strong"),oSr=o("deberta"),rSr=o(" \u2014 "),FK=a("a"),tSr=o("TFDebertaForQuestionAnswering"),aSr=o(" (DeBERTa model)"),nSr=l(),o5=a("li"),KEe=a("strong"),sSr=o("deberta-v2"),lSr=o(" \u2014 "),TK=a("a"),iSr=o("TFDebertaV2ForQuestionAnswering"),dSr=o(" (DeBERTa-v2 model)"),cSr=l(),r5=a("li"),ZEe=a("strong"),fSr=o("distilbert"),mSr=o(" \u2014 "),MK=a("a"),gSr=o("TFDistilBertForQuestionAnswering"),hSr=o(" (DistilBERT model)"),pSr=l(),t5=a("li"),e4e=a("strong"),_Sr=o("electra"),uSr=o(" \u2014 "),EK=a("a"),bSr=o("TFElectraForQuestionAnswering"),vSr=o(" (ELECTRA model)"),FSr=l(),a5=a("li"),o4e=a("strong"),TSr=o("flaubert"),MSr=o(" \u2014 "),CK=a("a"),ESr=o("TFFlaubertForQuestionAnsweringSimple"),CSr=o(" (FlauBERT model)"),wSr=l(),n5=a("li"),r4e=a("strong"),ASr=o("funnel"),LSr=o(" \u2014 "),wK=a("a"),ySr=o("TFFunnelForQuestionAnswering"),xSr=o(" (Funnel Transformer model)"),$Sr=l(),s5=a("li"),t4e=a("strong"),kSr=o("gptj"),SSr=o(" \u2014 "),AK=a("a"),RSr=o("TFGPTJForQuestionAnswering"),PSr=o(" (GPT-J model)"),BSr=l(),l5=a("li"),a4e=a("strong"),ISr=o("longformer"),NSr=o(" \u2014 "),LK=a("a"),qSr=o("TFLongformerForQuestionAnswering"),jSr=o(" (Longformer model)"),DSr=l(),i5=a("li"),n4e=a("strong"),GSr=o("mobilebert"),OSr=o(" \u2014 "),yK=a("a"),VSr=o("TFMobileBertForQuestionAnswering"),XSr=o(" (MobileBERT model)"),zSr=l(),d5=a("li"),s4e=a("strong"),QSr=o("mpnet"),WSr=o(" \u2014 "),xK=a("a"),HSr=o("TFMPNetForQuestionAnswering"),USr=o(" (MPNet model)"),JSr=l(),c5=a("li"),l4e=a("strong"),YSr=o("rembert"),KSr=o(" \u2014 "),$K=a("a"),ZSr=o("TFRemBertForQuestionAnswering"),eRr=o(" (RemBERT model)"),oRr=l(),f5=a("li"),i4e=a("strong"),rRr=o("roberta"),tRr=o(" \u2014 "),kK=a("a"),aRr=o("TFRobertaForQuestionAnswering"),nRr=o(" (RoBERTa model)"),sRr=l(),m5=a("li"),d4e=a("strong"),lRr=o("roformer"),iRr=o(" \u2014 "),SK=a("a"),dRr=o("TFRoFormerForQuestionAnswering"),cRr=o(" (RoFormer model)"),fRr=l(),g5=a("li"),c4e=a("strong"),mRr=o("xlm"),gRr=o(" \u2014 "),RK=a("a"),hRr=o("TFXLMForQuestionAnsweringSimple"),pRr=o(" (XLM model)"),_Rr=l(),h5=a("li"),f4e=a("strong"),uRr=o("xlm-roberta"),bRr=o(" \u2014 "),PK=a("a"),vRr=o("TFXLMRobertaForQuestionAnswering"),FRr=o(" (XLM-RoBERTa model)"),TRr=l(),p5=a("li"),m4e=a("strong"),MRr=o("xlnet"),ERr=o(" \u2014 "),BK=a("a"),CRr=o("TFXLNetForQuestionAnsweringSimple"),wRr=o(" (XLNet model)"),ARr=l(),F(_5.$$.fragment),RVe=l(),Nc=a("h2"),u5=a("a"),g4e=a("span"),F(Ax.$$.fragment),LRr=l(),h4e=a("span"),yRr=o("TFAutoModelForVision2Seq"),PVe=l(),mr=a("div"),F(Lx.$$.fragment),xRr=l(),qc=a("p"),$Rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IK=a("a"),kRr=o("from_pretrained()"),SRr=o(" class method or the "),NK=a("a"),RRr=o("from_config()"),PRr=o(` class
method.`),BRr=l(),yx=a("p"),IRr=o("This class cannot be instantiated directly using "),p4e=a("code"),NRr=o("__init__()"),qRr=o(" (throws an error)."),jRr=l(),Ot=a("div"),F(xx.$$.fragment),DRr=l(),_4e=a("p"),GRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ORr=l(),jc=a("p"),VRr=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),XRr=o("not"),zRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),QRr=o("from_pretrained()"),WRr=o(" to load the model weights."),HRr=l(),F(b5.$$.fragment),URr=l(),Dr=a("div"),F($x.$$.fragment),JRr=l(),b4e=a("p"),YRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),KRr=l(),bn=a("p"),ZRr=o("The model class to instantiate is selected based on the "),v4e=a("code"),ePr=o("model_type"),oPr=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),rPr=o("pretrained_model_name_or_path"),tPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),aPr=o("pretrained_model_name_or_path"),nPr=o(":"),sPr=l(),M4e=a("ul"),v5=a("li"),E4e=a("strong"),lPr=o("vision-encoder-decoder"),iPr=o(" \u2014 "),jK=a("a"),dPr=o("TFVisionEncoderDecoderModel"),cPr=o(" (Vision Encoder decoder model)"),fPr=l(),F(F5.$$.fragment),BVe=l(),Dc=a("h2"),T5=a("a"),C4e=a("span"),F(kx.$$.fragment),mPr=l(),w4e=a("span"),gPr=o("TFAutoModelForSpeechSeq2Seq"),IVe=l(),gr=a("div"),F(Sx.$$.fragment),hPr=l(),Gc=a("p"),pPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DK=a("a"),_Pr=o("from_pretrained()"),uPr=o(" class method or the "),GK=a("a"),bPr=o("from_config()"),vPr=o(` class
method.`),FPr=l(),Rx=a("p"),TPr=o("This class cannot be instantiated directly using "),A4e=a("code"),MPr=o("__init__()"),EPr=o(" (throws an error)."),CPr=l(),Vt=a("div"),F(Px.$$.fragment),wPr=l(),L4e=a("p"),APr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LPr=l(),Oc=a("p"),yPr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),xPr=o("not"),$Pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),kPr=o("from_pretrained()"),SPr=o(" to load the model weights."),RPr=l(),F(M5.$$.fragment),PPr=l(),Gr=a("div"),F(Bx.$$.fragment),BPr=l(),x4e=a("p"),IPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),NPr=l(),vn=a("p"),qPr=o("The model class to instantiate is selected based on the "),$4e=a("code"),jPr=o("model_type"),DPr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),GPr=o("pretrained_model_name_or_path"),OPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),VPr=o("pretrained_model_name_or_path"),XPr=o(":"),zPr=l(),R4e=a("ul"),E5=a("li"),P4e=a("strong"),QPr=o("speech_to_text"),WPr=o(" \u2014 "),VK=a("a"),HPr=o("TFSpeech2TextForConditionalGeneration"),UPr=o(" (Speech2Text model)"),JPr=l(),F(C5.$$.fragment),NVe=l(),Vc=a("h2"),w5=a("a"),B4e=a("span"),F(Ix.$$.fragment),YPr=l(),I4e=a("span"),KPr=o("FlaxAutoModel"),qVe=l(),hr=a("div"),F(Nx.$$.fragment),ZPr=l(),Xc=a("p"),eBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XK=a("a"),oBr=o("from_pretrained()"),rBr=o(" class method or the "),zK=a("a"),tBr=o("from_config()"),aBr=o(` class
method.`),nBr=l(),qx=a("p"),sBr=o("This class cannot be instantiated directly using "),N4e=a("code"),lBr=o("__init__()"),iBr=o(" (throws an error)."),dBr=l(),Xt=a("div"),F(jx.$$.fragment),cBr=l(),q4e=a("p"),fBr=o("Instantiates one of the base model classes of the library from a configuration."),mBr=l(),zc=a("p"),gBr=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),hBr=o("not"),pBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),_Br=o("from_pretrained()"),uBr=o(" to load the model weights."),bBr=l(),F(A5.$$.fragment),vBr=l(),Or=a("div"),F(Dx.$$.fragment),FBr=l(),D4e=a("p"),TBr=o("Instantiate one of the base model classes of the library from a pretrained model."),MBr=l(),Fn=a("p"),EBr=o("The model class to instantiate is selected based on the "),G4e=a("code"),CBr=o("model_type"),wBr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),ABr=o("pretrained_model_name_or_path"),LBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),yBr=o("pretrained_model_name_or_path"),xBr=o(":"),$Br=l(),oe=a("ul"),L5=a("li"),X4e=a("strong"),kBr=o("albert"),SBr=o(" \u2014 "),WK=a("a"),RBr=o("FlaxAlbertModel"),PBr=o(" (ALBERT model)"),BBr=l(),y5=a("li"),z4e=a("strong"),IBr=o("bart"),NBr=o(" \u2014 "),HK=a("a"),qBr=o("FlaxBartModel"),jBr=o(" (BART model)"),DBr=l(),x5=a("li"),Q4e=a("strong"),GBr=o("beit"),OBr=o(" \u2014 "),UK=a("a"),VBr=o("FlaxBeitModel"),XBr=o(" (BEiT model)"),zBr=l(),$5=a("li"),W4e=a("strong"),QBr=o("bert"),WBr=o(" \u2014 "),JK=a("a"),HBr=o("FlaxBertModel"),UBr=o(" (BERT model)"),JBr=l(),k5=a("li"),H4e=a("strong"),YBr=o("big_bird"),KBr=o(" \u2014 "),YK=a("a"),ZBr=o("FlaxBigBirdModel"),eIr=o(" (BigBird model)"),oIr=l(),S5=a("li"),U4e=a("strong"),rIr=o("blenderbot"),tIr=o(" \u2014 "),KK=a("a"),aIr=o("FlaxBlenderbotModel"),nIr=o(" (Blenderbot model)"),sIr=l(),R5=a("li"),J4e=a("strong"),lIr=o("blenderbot-small"),iIr=o(" \u2014 "),ZK=a("a"),dIr=o("FlaxBlenderbotSmallModel"),cIr=o(" (BlenderbotSmall model)"),fIr=l(),P5=a("li"),Y4e=a("strong"),mIr=o("clip"),gIr=o(" \u2014 "),eZ=a("a"),hIr=o("FlaxCLIPModel"),pIr=o(" (CLIP model)"),_Ir=l(),B5=a("li"),K4e=a("strong"),uIr=o("distilbert"),bIr=o(" \u2014 "),oZ=a("a"),vIr=o("FlaxDistilBertModel"),FIr=o(" (DistilBERT model)"),TIr=l(),I5=a("li"),Z4e=a("strong"),MIr=o("electra"),EIr=o(" \u2014 "),rZ=a("a"),CIr=o("FlaxElectraModel"),wIr=o(" (ELECTRA model)"),AIr=l(),N5=a("li"),eCe=a("strong"),LIr=o("gpt2"),yIr=o(" \u2014 "),tZ=a("a"),xIr=o("FlaxGPT2Model"),$Ir=o(" (OpenAI GPT-2 model)"),kIr=l(),q5=a("li"),oCe=a("strong"),SIr=o("gpt_neo"),RIr=o(" \u2014 "),aZ=a("a"),PIr=o("FlaxGPTNeoModel"),BIr=o(" (GPT Neo model)"),IIr=l(),j5=a("li"),rCe=a("strong"),NIr=o("gptj"),qIr=o(" \u2014 "),nZ=a("a"),jIr=o("FlaxGPTJModel"),DIr=o(" (GPT-J model)"),GIr=l(),D5=a("li"),tCe=a("strong"),OIr=o("longt5"),VIr=o(" \u2014 "),sZ=a("a"),XIr=o("FlaxLongT5Model"),zIr=o(" (LongT5 model)"),QIr=l(),G5=a("li"),aCe=a("strong"),WIr=o("marian"),HIr=o(" \u2014 "),lZ=a("a"),UIr=o("FlaxMarianModel"),JIr=o(" (Marian model)"),YIr=l(),O5=a("li"),nCe=a("strong"),KIr=o("mbart"),ZIr=o(" \u2014 "),iZ=a("a"),eNr=o("FlaxMBartModel"),oNr=o(" (mBART model)"),rNr=l(),V5=a("li"),sCe=a("strong"),tNr=o("mt5"),aNr=o(" \u2014 "),dZ=a("a"),nNr=o("FlaxMT5Model"),sNr=o(" (MT5 model)"),lNr=l(),X5=a("li"),lCe=a("strong"),iNr=o("opt"),dNr=o(" \u2014 "),cZ=a("a"),cNr=o("FlaxOPTModel"),fNr=o(" (OPT model)"),mNr=l(),z5=a("li"),iCe=a("strong"),gNr=o("pegasus"),hNr=o(" \u2014 "),fZ=a("a"),pNr=o("FlaxPegasusModel"),_Nr=o(" (Pegasus model)"),uNr=l(),Q5=a("li"),dCe=a("strong"),bNr=o("roberta"),vNr=o(" \u2014 "),mZ=a("a"),FNr=o("FlaxRobertaModel"),TNr=o(" (RoBERTa model)"),MNr=l(),W5=a("li"),cCe=a("strong"),ENr=o("roformer"),CNr=o(" \u2014 "),gZ=a("a"),wNr=o("FlaxRoFormerModel"),ANr=o(" (RoFormer model)"),LNr=l(),H5=a("li"),fCe=a("strong"),yNr=o("t5"),xNr=o(" \u2014 "),hZ=a("a"),$Nr=o("FlaxT5Model"),kNr=o(" (T5 model)"),SNr=l(),U5=a("li"),mCe=a("strong"),RNr=o("vision-text-dual-encoder"),PNr=o(" \u2014 "),pZ=a("a"),BNr=o("FlaxVisionTextDualEncoderModel"),INr=o(" (VisionTextDualEncoder model)"),NNr=l(),J5=a("li"),gCe=a("strong"),qNr=o("vit"),jNr=o(" \u2014 "),_Z=a("a"),DNr=o("FlaxViTModel"),GNr=o(" (ViT model)"),ONr=l(),Y5=a("li"),hCe=a("strong"),VNr=o("wav2vec2"),XNr=o(" \u2014 "),uZ=a("a"),zNr=o("FlaxWav2Vec2Model"),QNr=o(" (Wav2Vec2 model)"),WNr=l(),K5=a("li"),pCe=a("strong"),HNr=o("xglm"),UNr=o(" \u2014 "),bZ=a("a"),JNr=o("FlaxXGLMModel"),YNr=o(" (XGLM model)"),KNr=l(),Z5=a("li"),_Ce=a("strong"),ZNr=o("xlm-roberta"),eqr=o(" \u2014 "),vZ=a("a"),oqr=o("FlaxXLMRobertaModel"),rqr=o(" (XLM-RoBERTa model)"),tqr=l(),F(e3.$$.fragment),jVe=l(),Qc=a("h2"),o3=a("a"),uCe=a("span"),F(Gx.$$.fragment),aqr=l(),bCe=a("span"),nqr=o("FlaxAutoModelForCausalLM"),DVe=l(),pr=a("div"),F(Ox.$$.fragment),sqr=l(),Wc=a("p"),lqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FZ=a("a"),iqr=o("from_pretrained()"),dqr=o(" class method or the "),TZ=a("a"),cqr=o("from_config()"),fqr=o(` class
method.`),mqr=l(),Vx=a("p"),gqr=o("This class cannot be instantiated directly using "),vCe=a("code"),hqr=o("__init__()"),pqr=o(" (throws an error)."),_qr=l(),zt=a("div"),F(Xx.$$.fragment),uqr=l(),FCe=a("p"),bqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vqr=l(),Hc=a("p"),Fqr=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),Tqr=o("not"),Mqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=a("a"),Eqr=o("from_pretrained()"),Cqr=o(" to load the model weights."),wqr=l(),F(r3.$$.fragment),Aqr=l(),Vr=a("div"),F(zx.$$.fragment),Lqr=l(),MCe=a("p"),yqr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xqr=l(),Tn=a("p"),$qr=o("The model class to instantiate is selected based on the "),ECe=a("code"),kqr=o("model_type"),Sqr=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),Rqr=o("pretrained_model_name_or_path"),Pqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),Bqr=o("pretrained_model_name_or_path"),Iqr=o(":"),Nqr=l(),xe=a("ul"),t3=a("li"),ACe=a("strong"),qqr=o("bart"),jqr=o(" \u2014 "),EZ=a("a"),Dqr=o("FlaxBartForCausalLM"),Gqr=o(" (BART model)"),Oqr=l(),a3=a("li"),LCe=a("strong"),Vqr=o("bert"),Xqr=o(" \u2014 "),CZ=a("a"),zqr=o("FlaxBertForCausalLM"),Qqr=o(" (BERT model)"),Wqr=l(),n3=a("li"),yCe=a("strong"),Hqr=o("big_bird"),Uqr=o(" \u2014 "),wZ=a("a"),Jqr=o("FlaxBigBirdForCausalLM"),Yqr=o(" (BigBird model)"),Kqr=l(),s3=a("li"),xCe=a("strong"),Zqr=o("electra"),ejr=o(" \u2014 "),AZ=a("a"),ojr=o("FlaxElectraForCausalLM"),rjr=o(" (ELECTRA model)"),tjr=l(),l3=a("li"),$Ce=a("strong"),ajr=o("gpt2"),njr=o(" \u2014 "),LZ=a("a"),sjr=o("FlaxGPT2LMHeadModel"),ljr=o(" (OpenAI GPT-2 model)"),ijr=l(),i3=a("li"),kCe=a("strong"),djr=o("gpt_neo"),cjr=o(" \u2014 "),yZ=a("a"),fjr=o("FlaxGPTNeoForCausalLM"),mjr=o(" (GPT Neo model)"),gjr=l(),d3=a("li"),SCe=a("strong"),hjr=o("gptj"),pjr=o(" \u2014 "),xZ=a("a"),_jr=o("FlaxGPTJForCausalLM"),ujr=o(" (GPT-J model)"),bjr=l(),c3=a("li"),RCe=a("strong"),vjr=o("opt"),Fjr=o(" \u2014 "),$Z=a("a"),Tjr=o("FlaxOPTForCausalLM"),Mjr=o(" (OPT model)"),Ejr=l(),f3=a("li"),PCe=a("strong"),Cjr=o("roberta"),wjr=o(" \u2014 "),kZ=a("a"),Ajr=o("FlaxRobertaForCausalLM"),Ljr=o(" (RoBERTa model)"),yjr=l(),m3=a("li"),BCe=a("strong"),xjr=o("xglm"),$jr=o(" \u2014 "),SZ=a("a"),kjr=o("FlaxXGLMForCausalLM"),Sjr=o(" (XGLM model)"),Rjr=l(),F(g3.$$.fragment),GVe=l(),Uc=a("h2"),h3=a("a"),ICe=a("span"),F(Qx.$$.fragment),Pjr=l(),NCe=a("span"),Bjr=o("FlaxAutoModelForPreTraining"),OVe=l(),_r=a("div"),F(Wx.$$.fragment),Ijr=l(),Jc=a("p"),Njr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RZ=a("a"),qjr=o("from_pretrained()"),jjr=o(" class method or the "),PZ=a("a"),Djr=o("from_config()"),Gjr=o(` class
method.`),Ojr=l(),Hx=a("p"),Vjr=o("This class cannot be instantiated directly using "),qCe=a("code"),Xjr=o("__init__()"),zjr=o(" (throws an error)."),Qjr=l(),Qt=a("div"),F(Ux.$$.fragment),Wjr=l(),jCe=a("p"),Hjr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ujr=l(),Yc=a("p"),Jjr=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),Yjr=o("not"),Kjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=a("a"),Zjr=o("from_pretrained()"),eDr=o(" to load the model weights."),oDr=l(),F(p3.$$.fragment),rDr=l(),Xr=a("div"),F(Jx.$$.fragment),tDr=l(),GCe=a("p"),aDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nDr=l(),Mn=a("p"),sDr=o("The model class to instantiate is selected based on the "),OCe=a("code"),lDr=o("model_type"),iDr=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),dDr=o("pretrained_model_name_or_path"),cDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),fDr=o("pretrained_model_name_or_path"),mDr=o(":"),gDr=l(),Ee=a("ul"),_3=a("li"),zCe=a("strong"),hDr=o("albert"),pDr=o(" \u2014 "),IZ=a("a"),_Dr=o("FlaxAlbertForPreTraining"),uDr=o(" (ALBERT model)"),bDr=l(),u3=a("li"),QCe=a("strong"),vDr=o("bart"),FDr=o(" \u2014 "),NZ=a("a"),TDr=o("FlaxBartForConditionalGeneration"),MDr=o(" (BART model)"),EDr=l(),b3=a("li"),WCe=a("strong"),CDr=o("bert"),wDr=o(" \u2014 "),qZ=a("a"),ADr=o("FlaxBertForPreTraining"),LDr=o(" (BERT model)"),yDr=l(),v3=a("li"),HCe=a("strong"),xDr=o("big_bird"),$Dr=o(" \u2014 "),jZ=a("a"),kDr=o("FlaxBigBirdForPreTraining"),SDr=o(" (BigBird model)"),RDr=l(),F3=a("li"),UCe=a("strong"),PDr=o("electra"),BDr=o(" \u2014 "),DZ=a("a"),IDr=o("FlaxElectraForPreTraining"),NDr=o(" (ELECTRA model)"),qDr=l(),T3=a("li"),JCe=a("strong"),jDr=o("longt5"),DDr=o(" \u2014 "),GZ=a("a"),GDr=o("FlaxLongT5ForConditionalGeneration"),ODr=o(" (LongT5 model)"),VDr=l(),M3=a("li"),YCe=a("strong"),XDr=o("mbart"),zDr=o(" \u2014 "),OZ=a("a"),QDr=o("FlaxMBartForConditionalGeneration"),WDr=o(" (mBART model)"),HDr=l(),E3=a("li"),KCe=a("strong"),UDr=o("mt5"),JDr=o(" \u2014 "),VZ=a("a"),YDr=o("FlaxMT5ForConditionalGeneration"),KDr=o(" (MT5 model)"),ZDr=l(),C3=a("li"),ZCe=a("strong"),eGr=o("roberta"),oGr=o(" \u2014 "),XZ=a("a"),rGr=o("FlaxRobertaForMaskedLM"),tGr=o(" (RoBERTa model)"),aGr=l(),w3=a("li"),e5e=a("strong"),nGr=o("roformer"),sGr=o(" \u2014 "),zZ=a("a"),lGr=o("FlaxRoFormerForMaskedLM"),iGr=o(" (RoFormer model)"),dGr=l(),A3=a("li"),o5e=a("strong"),cGr=o("t5"),fGr=o(" \u2014 "),QZ=a("a"),mGr=o("FlaxT5ForConditionalGeneration"),gGr=o(" (T5 model)"),hGr=l(),L3=a("li"),r5e=a("strong"),pGr=o("wav2vec2"),_Gr=o(" \u2014 "),WZ=a("a"),uGr=o("FlaxWav2Vec2ForPreTraining"),bGr=o(" (Wav2Vec2 model)"),vGr=l(),y3=a("li"),t5e=a("strong"),FGr=o("xlm-roberta"),TGr=o(" \u2014 "),HZ=a("a"),MGr=o("FlaxXLMRobertaForMaskedLM"),EGr=o(" (XLM-RoBERTa model)"),CGr=l(),F(x3.$$.fragment),VVe=l(),Kc=a("h2"),$3=a("a"),a5e=a("span"),F(Yx.$$.fragment),wGr=l(),n5e=a("span"),AGr=o("FlaxAutoModelForMaskedLM"),XVe=l(),ur=a("div"),F(Kx.$$.fragment),LGr=l(),Zc=a("p"),yGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UZ=a("a"),xGr=o("from_pretrained()"),$Gr=o(" class method or the "),JZ=a("a"),kGr=o("from_config()"),SGr=o(` class
method.`),RGr=l(),Zx=a("p"),PGr=o("This class cannot be instantiated directly using "),s5e=a("code"),BGr=o("__init__()"),IGr=o(" (throws an error)."),NGr=l(),Wt=a("div"),F(e$.$$.fragment),qGr=l(),l5e=a("p"),jGr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),DGr=l(),ef=a("p"),GGr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),OGr=o("not"),VGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=a("a"),XGr=o("from_pretrained()"),zGr=o(" to load the model weights."),QGr=l(),F(k3.$$.fragment),WGr=l(),zr=a("div"),F(o$.$$.fragment),HGr=l(),d5e=a("p"),UGr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),JGr=l(),En=a("p"),YGr=o("The model class to instantiate is selected based on the "),c5e=a("code"),KGr=o("model_type"),ZGr=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),eOr=o("pretrained_model_name_or_path"),oOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),rOr=o("pretrained_model_name_or_path"),tOr=o(":"),aOr=l(),$e=a("ul"),S3=a("li"),g5e=a("strong"),nOr=o("albert"),sOr=o(" \u2014 "),KZ=a("a"),lOr=o("FlaxAlbertForMaskedLM"),iOr=o(" (ALBERT model)"),dOr=l(),R3=a("li"),h5e=a("strong"),cOr=o("bart"),fOr=o(" \u2014 "),ZZ=a("a"),mOr=o("FlaxBartForConditionalGeneration"),gOr=o(" (BART model)"),hOr=l(),P3=a("li"),p5e=a("strong"),pOr=o("bert"),_Or=o(" \u2014 "),eee=a("a"),uOr=o("FlaxBertForMaskedLM"),bOr=o(" (BERT model)"),vOr=l(),B3=a("li"),_5e=a("strong"),FOr=o("big_bird"),TOr=o(" \u2014 "),oee=a("a"),MOr=o("FlaxBigBirdForMaskedLM"),EOr=o(" (BigBird model)"),COr=l(),I3=a("li"),u5e=a("strong"),wOr=o("distilbert"),AOr=o(" \u2014 "),ree=a("a"),LOr=o("FlaxDistilBertForMaskedLM"),yOr=o(" (DistilBERT model)"),xOr=l(),N3=a("li"),b5e=a("strong"),$Or=o("electra"),kOr=o(" \u2014 "),tee=a("a"),SOr=o("FlaxElectraForMaskedLM"),ROr=o(" (ELECTRA model)"),POr=l(),q3=a("li"),v5e=a("strong"),BOr=o("mbart"),IOr=o(" \u2014 "),aee=a("a"),NOr=o("FlaxMBartForConditionalGeneration"),qOr=o(" (mBART model)"),jOr=l(),j3=a("li"),F5e=a("strong"),DOr=o("roberta"),GOr=o(" \u2014 "),nee=a("a"),OOr=o("FlaxRobertaForMaskedLM"),VOr=o(" (RoBERTa model)"),XOr=l(),D3=a("li"),T5e=a("strong"),zOr=o("roformer"),QOr=o(" \u2014 "),see=a("a"),WOr=o("FlaxRoFormerForMaskedLM"),HOr=o(" (RoFormer model)"),UOr=l(),G3=a("li"),M5e=a("strong"),JOr=o("xlm-roberta"),YOr=o(" \u2014 "),lee=a("a"),KOr=o("FlaxXLMRobertaForMaskedLM"),ZOr=o(" (XLM-RoBERTa model)"),eVr=l(),F(O3.$$.fragment),zVe=l(),of=a("h2"),V3=a("a"),E5e=a("span"),F(r$.$$.fragment),oVr=l(),C5e=a("span"),rVr=o("FlaxAutoModelForSeq2SeqLM"),QVe=l(),br=a("div"),F(t$.$$.fragment),tVr=l(),rf=a("p"),aVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iee=a("a"),nVr=o("from_pretrained()"),sVr=o(" class method or the "),dee=a("a"),lVr=o("from_config()"),iVr=o(` class
method.`),dVr=l(),a$=a("p"),cVr=o("This class cannot be instantiated directly using "),w5e=a("code"),fVr=o("__init__()"),mVr=o(" (throws an error)."),gVr=l(),Ht=a("div"),F(n$.$$.fragment),hVr=l(),A5e=a("p"),pVr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Vr=l(),tf=a("p"),uVr=o(`Note:
Loading a model from its configuration file does `),L5e=a("strong"),bVr=o("not"),vVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=a("a"),FVr=o("from_pretrained()"),TVr=o(" to load the model weights."),MVr=l(),F(X3.$$.fragment),EVr=l(),Qr=a("div"),F(s$.$$.fragment),CVr=l(),y5e=a("p"),wVr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AVr=l(),Cn=a("p"),LVr=o("The model class to instantiate is selected based on the "),x5e=a("code"),yVr=o("model_type"),xVr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),$Vr=o("pretrained_model_name_or_path"),kVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=a("code"),SVr=o("pretrained_model_name_or_path"),RVr=o(":"),PVr=l(),ke=a("ul"),z3=a("li"),S5e=a("strong"),BVr=o("bart"),IVr=o(" \u2014 "),fee=a("a"),NVr=o("FlaxBartForConditionalGeneration"),qVr=o(" (BART model)"),jVr=l(),Q3=a("li"),R5e=a("strong"),DVr=o("blenderbot"),GVr=o(" \u2014 "),mee=a("a"),OVr=o("FlaxBlenderbotForConditionalGeneration"),VVr=o(" (Blenderbot model)"),XVr=l(),W3=a("li"),P5e=a("strong"),zVr=o("blenderbot-small"),QVr=o(" \u2014 "),gee=a("a"),WVr=o("FlaxBlenderbotSmallForConditionalGeneration"),HVr=o(" (BlenderbotSmall model)"),UVr=l(),H3=a("li"),B5e=a("strong"),JVr=o("encoder-decoder"),YVr=o(" \u2014 "),hee=a("a"),KVr=o("FlaxEncoderDecoderModel"),ZVr=o(" (Encoder decoder model)"),eXr=l(),U3=a("li"),I5e=a("strong"),oXr=o("longt5"),rXr=o(" \u2014 "),pee=a("a"),tXr=o("FlaxLongT5ForConditionalGeneration"),aXr=o(" (LongT5 model)"),nXr=l(),J3=a("li"),N5e=a("strong"),sXr=o("marian"),lXr=o(" \u2014 "),_ee=a("a"),iXr=o("FlaxMarianMTModel"),dXr=o(" (Marian model)"),cXr=l(),Y3=a("li"),q5e=a("strong"),fXr=o("mbart"),mXr=o(" \u2014 "),uee=a("a"),gXr=o("FlaxMBartForConditionalGeneration"),hXr=o(" (mBART model)"),pXr=l(),K3=a("li"),j5e=a("strong"),_Xr=o("mt5"),uXr=o(" \u2014 "),bee=a("a"),bXr=o("FlaxMT5ForConditionalGeneration"),vXr=o(" (MT5 model)"),FXr=l(),Z3=a("li"),D5e=a("strong"),TXr=o("pegasus"),MXr=o(" \u2014 "),vee=a("a"),EXr=o("FlaxPegasusForConditionalGeneration"),CXr=o(" (Pegasus model)"),wXr=l(),ew=a("li"),G5e=a("strong"),AXr=o("t5"),LXr=o(" \u2014 "),Fee=a("a"),yXr=o("FlaxT5ForConditionalGeneration"),xXr=o(" (T5 model)"),$Xr=l(),F(ow.$$.fragment),WVe=l(),af=a("h2"),rw=a("a"),O5e=a("span"),F(l$.$$.fragment),kXr=l(),V5e=a("span"),SXr=o("FlaxAutoModelForSequenceClassification"),HVe=l(),vr=a("div"),F(i$.$$.fragment),RXr=l(),nf=a("p"),PXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Tee=a("a"),BXr=o("from_pretrained()"),IXr=o(" class method or the "),Mee=a("a"),NXr=o("from_config()"),qXr=o(` class
method.`),jXr=l(),d$=a("p"),DXr=o("This class cannot be instantiated directly using "),X5e=a("code"),GXr=o("__init__()"),OXr=o(" (throws an error)."),VXr=l(),Ut=a("div"),F(c$.$$.fragment),XXr=l(),z5e=a("p"),zXr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QXr=l(),sf=a("p"),WXr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),HXr=o("not"),UXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=a("a"),JXr=o("from_pretrained()"),YXr=o(" to load the model weights."),KXr=l(),F(tw.$$.fragment),ZXr=l(),Wr=a("div"),F(f$.$$.fragment),ezr=l(),W5e=a("p"),ozr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rzr=l(),wn=a("p"),tzr=o("The model class to instantiate is selected based on the "),H5e=a("code"),azr=o("model_type"),nzr=o(` property of the config object (either
passed as an argument or loaded from `),U5e=a("code"),szr=o("pretrained_model_name_or_path"),lzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),izr=o("pretrained_model_name_or_path"),dzr=o(":"),czr=l(),Se=a("ul"),aw=a("li"),Y5e=a("strong"),fzr=o("albert"),mzr=o(" \u2014 "),Cee=a("a"),gzr=o("FlaxAlbertForSequenceClassification"),hzr=o(" (ALBERT model)"),pzr=l(),nw=a("li"),K5e=a("strong"),_zr=o("bart"),uzr=o(" \u2014 "),wee=a("a"),bzr=o("FlaxBartForSequenceClassification"),vzr=o(" (BART model)"),Fzr=l(),sw=a("li"),Z5e=a("strong"),Tzr=o("bert"),Mzr=o(" \u2014 "),Aee=a("a"),Ezr=o("FlaxBertForSequenceClassification"),Czr=o(" (BERT model)"),wzr=l(),lw=a("li"),e3e=a("strong"),Azr=o("big_bird"),Lzr=o(" \u2014 "),Lee=a("a"),yzr=o("FlaxBigBirdForSequenceClassification"),xzr=o(" (BigBird model)"),$zr=l(),iw=a("li"),o3e=a("strong"),kzr=o("distilbert"),Szr=o(" \u2014 "),yee=a("a"),Rzr=o("FlaxDistilBertForSequenceClassification"),Pzr=o(" (DistilBERT model)"),Bzr=l(),dw=a("li"),r3e=a("strong"),Izr=o("electra"),Nzr=o(" \u2014 "),xee=a("a"),qzr=o("FlaxElectraForSequenceClassification"),jzr=o(" (ELECTRA model)"),Dzr=l(),cw=a("li"),t3e=a("strong"),Gzr=o("mbart"),Ozr=o(" \u2014 "),$ee=a("a"),Vzr=o("FlaxMBartForSequenceClassification"),Xzr=o(" (mBART model)"),zzr=l(),fw=a("li"),a3e=a("strong"),Qzr=o("roberta"),Wzr=o(" \u2014 "),kee=a("a"),Hzr=o("FlaxRobertaForSequenceClassification"),Uzr=o(" (RoBERTa model)"),Jzr=l(),mw=a("li"),n3e=a("strong"),Yzr=o("roformer"),Kzr=o(" \u2014 "),See=a("a"),Zzr=o("FlaxRoFormerForSequenceClassification"),eQr=o(" (RoFormer model)"),oQr=l(),gw=a("li"),s3e=a("strong"),rQr=o("xlm-roberta"),tQr=o(" \u2014 "),Ree=a("a"),aQr=o("FlaxXLMRobertaForSequenceClassification"),nQr=o(" (XLM-RoBERTa model)"),sQr=l(),F(hw.$$.fragment),UVe=l(),lf=a("h2"),pw=a("a"),l3e=a("span"),F(m$.$$.fragment),lQr=l(),i3e=a("span"),iQr=o("FlaxAutoModelForQuestionAnswering"),JVe=l(),Fr=a("div"),F(g$.$$.fragment),dQr=l(),df=a("p"),cQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Pee=a("a"),fQr=o("from_pretrained()"),mQr=o(" class method or the "),Bee=a("a"),gQr=o("from_config()"),hQr=o(` class
method.`),pQr=l(),h$=a("p"),_Qr=o("This class cannot be instantiated directly using "),d3e=a("code"),uQr=o("__init__()"),bQr=o(" (throws an error)."),vQr=l(),Jt=a("div"),F(p$.$$.fragment),FQr=l(),c3e=a("p"),TQr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MQr=l(),cf=a("p"),EQr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),CQr=o("not"),wQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=a("a"),AQr=o("from_pretrained()"),LQr=o(" to load the model weights."),yQr=l(),F(_w.$$.fragment),xQr=l(),Hr=a("div"),F(_$.$$.fragment),$Qr=l(),m3e=a("p"),kQr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SQr=l(),An=a("p"),RQr=o("The model class to instantiate is selected based on the "),g3e=a("code"),PQr=o("model_type"),BQr=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),IQr=o("pretrained_model_name_or_path"),NQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),qQr=o("pretrained_model_name_or_path"),jQr=o(":"),DQr=l(),Re=a("ul"),uw=a("li"),_3e=a("strong"),GQr=o("albert"),OQr=o(" \u2014 "),Nee=a("a"),VQr=o("FlaxAlbertForQuestionAnswering"),XQr=o(" (ALBERT model)"),zQr=l(),bw=a("li"),u3e=a("strong"),QQr=o("bart"),WQr=o(" \u2014 "),qee=a("a"),HQr=o("FlaxBartForQuestionAnswering"),UQr=o(" (BART model)"),JQr=l(),vw=a("li"),b3e=a("strong"),YQr=o("bert"),KQr=o(" \u2014 "),jee=a("a"),ZQr=o("FlaxBertForQuestionAnswering"),eWr=o(" (BERT model)"),oWr=l(),Fw=a("li"),v3e=a("strong"),rWr=o("big_bird"),tWr=o(" \u2014 "),Dee=a("a"),aWr=o("FlaxBigBirdForQuestionAnswering"),nWr=o(" (BigBird model)"),sWr=l(),Tw=a("li"),F3e=a("strong"),lWr=o("distilbert"),iWr=o(" \u2014 "),Gee=a("a"),dWr=o("FlaxDistilBertForQuestionAnswering"),cWr=o(" (DistilBERT model)"),fWr=l(),Mw=a("li"),T3e=a("strong"),mWr=o("electra"),gWr=o(" \u2014 "),Oee=a("a"),hWr=o("FlaxElectraForQuestionAnswering"),pWr=o(" (ELECTRA model)"),_Wr=l(),Ew=a("li"),M3e=a("strong"),uWr=o("mbart"),bWr=o(" \u2014 "),Vee=a("a"),vWr=o("FlaxMBartForQuestionAnswering"),FWr=o(" (mBART model)"),TWr=l(),Cw=a("li"),E3e=a("strong"),MWr=o("roberta"),EWr=o(" \u2014 "),Xee=a("a"),CWr=o("FlaxRobertaForQuestionAnswering"),wWr=o(" (RoBERTa model)"),AWr=l(),ww=a("li"),C3e=a("strong"),LWr=o("roformer"),yWr=o(" \u2014 "),zee=a("a"),xWr=o("FlaxRoFormerForQuestionAnswering"),$Wr=o(" (RoFormer model)"),kWr=l(),Aw=a("li"),w3e=a("strong"),SWr=o("xlm-roberta"),RWr=o(" \u2014 "),Qee=a("a"),PWr=o("FlaxXLMRobertaForQuestionAnswering"),BWr=o(" (XLM-RoBERTa model)"),IWr=l(),F(Lw.$$.fragment),YVe=l(),ff=a("h2"),yw=a("a"),A3e=a("span"),F(u$.$$.fragment),NWr=l(),L3e=a("span"),qWr=o("FlaxAutoModelForTokenClassification"),KVe=l(),Tr=a("div"),F(b$.$$.fragment),jWr=l(),mf=a("p"),DWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Wee=a("a"),GWr=o("from_pretrained()"),OWr=o(" class method or the "),Hee=a("a"),VWr=o("from_config()"),XWr=o(` class
method.`),zWr=l(),v$=a("p"),QWr=o("This class cannot be instantiated directly using "),y3e=a("code"),WWr=o("__init__()"),HWr=o(" (throws an error)."),UWr=l(),Yt=a("div"),F(F$.$$.fragment),JWr=l(),x3e=a("p"),YWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KWr=l(),gf=a("p"),ZWr=o(`Note:
Loading a model from its configuration file does `),$3e=a("strong"),eHr=o("not"),oHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=a("a"),rHr=o("from_pretrained()"),tHr=o(" to load the model weights."),aHr=l(),F(xw.$$.fragment),nHr=l(),Ur=a("div"),F(T$.$$.fragment),sHr=l(),k3e=a("p"),lHr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iHr=l(),Ln=a("p"),dHr=o("The model class to instantiate is selected based on the "),S3e=a("code"),cHr=o("model_type"),fHr=o(` property of the config object (either
passed as an argument or loaded from `),R3e=a("code"),mHr=o("pretrained_model_name_or_path"),gHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=a("code"),hHr=o("pretrained_model_name_or_path"),pHr=o(":"),_Hr=l(),Ve=a("ul"),$w=a("li"),B3e=a("strong"),uHr=o("albert"),bHr=o(" \u2014 "),Jee=a("a"),vHr=o("FlaxAlbertForTokenClassification"),FHr=o(" (ALBERT model)"),THr=l(),kw=a("li"),I3e=a("strong"),MHr=o("bert"),EHr=o(" \u2014 "),Yee=a("a"),CHr=o("FlaxBertForTokenClassification"),wHr=o(" (BERT model)"),AHr=l(),Sw=a("li"),N3e=a("strong"),LHr=o("big_bird"),yHr=o(" \u2014 "),Kee=a("a"),xHr=o("FlaxBigBirdForTokenClassification"),$Hr=o(" (BigBird model)"),kHr=l(),Rw=a("li"),q3e=a("strong"),SHr=o("distilbert"),RHr=o(" \u2014 "),Zee=a("a"),PHr=o("FlaxDistilBertForTokenClassification"),BHr=o(" (DistilBERT model)"),IHr=l(),Pw=a("li"),j3e=a("strong"),NHr=o("electra"),qHr=o(" \u2014 "),eoe=a("a"),jHr=o("FlaxElectraForTokenClassification"),DHr=o(" (ELECTRA model)"),GHr=l(),Bw=a("li"),D3e=a("strong"),OHr=o("roberta"),VHr=o(" \u2014 "),ooe=a("a"),XHr=o("FlaxRobertaForTokenClassification"),zHr=o(" (RoBERTa model)"),QHr=l(),Iw=a("li"),G3e=a("strong"),WHr=o("roformer"),HHr=o(" \u2014 "),roe=a("a"),UHr=o("FlaxRoFormerForTokenClassification"),JHr=o(" (RoFormer model)"),YHr=l(),Nw=a("li"),O3e=a("strong"),KHr=o("xlm-roberta"),ZHr=o(" \u2014 "),toe=a("a"),eUr=o("FlaxXLMRobertaForTokenClassification"),oUr=o(" (XLM-RoBERTa model)"),rUr=l(),F(qw.$$.fragment),ZVe=l(),hf=a("h2"),jw=a("a"),V3e=a("span"),F(M$.$$.fragment),tUr=l(),X3e=a("span"),aUr=o("FlaxAutoModelForMultipleChoice"),eXe=l(),Mr=a("div"),F(E$.$$.fragment),nUr=l(),pf=a("p"),sUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aoe=a("a"),lUr=o("from_pretrained()"),iUr=o(" class method or the "),noe=a("a"),dUr=o("from_config()"),cUr=o(` class
method.`),fUr=l(),C$=a("p"),mUr=o("This class cannot be instantiated directly using "),z3e=a("code"),gUr=o("__init__()"),hUr=o(" (throws an error)."),pUr=l(),Kt=a("div"),F(w$.$$.fragment),_Ur=l(),Q3e=a("p"),uUr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bUr=l(),_f=a("p"),vUr=o(`Note:
Loading a model from its configuration file does `),W3e=a("strong"),FUr=o("not"),TUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=a("a"),MUr=o("from_pretrained()"),EUr=o(" to load the model weights."),CUr=l(),F(Dw.$$.fragment),wUr=l(),Jr=a("div"),F(A$.$$.fragment),AUr=l(),H3e=a("p"),LUr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yUr=l(),yn=a("p"),xUr=o("The model class to instantiate is selected based on the "),U3e=a("code"),$Ur=o("model_type"),kUr=o(` property of the config object (either
passed as an argument or loaded from `),J3e=a("code"),SUr=o("pretrained_model_name_or_path"),RUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=a("code"),PUr=o("pretrained_model_name_or_path"),BUr=o(":"),IUr=l(),Xe=a("ul"),Gw=a("li"),K3e=a("strong"),NUr=o("albert"),qUr=o(" \u2014 "),loe=a("a"),jUr=o("FlaxAlbertForMultipleChoice"),DUr=o(" (ALBERT model)"),GUr=l(),Ow=a("li"),Z3e=a("strong"),OUr=o("bert"),VUr=o(" \u2014 "),ioe=a("a"),XUr=o("FlaxBertForMultipleChoice"),zUr=o(" (BERT model)"),QUr=l(),Vw=a("li"),ewe=a("strong"),WUr=o("big_bird"),HUr=o(" \u2014 "),doe=a("a"),UUr=o("FlaxBigBirdForMultipleChoice"),JUr=o(" (BigBird model)"),YUr=l(),Xw=a("li"),owe=a("strong"),KUr=o("distilbert"),ZUr=o(" \u2014 "),coe=a("a"),eJr=o("FlaxDistilBertForMultipleChoice"),oJr=o(" (DistilBERT model)"),rJr=l(),zw=a("li"),rwe=a("strong"),tJr=o("electra"),aJr=o(" \u2014 "),foe=a("a"),nJr=o("FlaxElectraForMultipleChoice"),sJr=o(" (ELECTRA model)"),lJr=l(),Qw=a("li"),twe=a("strong"),iJr=o("roberta"),dJr=o(" \u2014 "),moe=a("a"),cJr=o("FlaxRobertaForMultipleChoice"),fJr=o(" (RoBERTa model)"),mJr=l(),Ww=a("li"),awe=a("strong"),gJr=o("roformer"),hJr=o(" \u2014 "),goe=a("a"),pJr=o("FlaxRoFormerForMultipleChoice"),_Jr=o(" (RoFormer model)"),uJr=l(),Hw=a("li"),nwe=a("strong"),bJr=o("xlm-roberta"),vJr=o(" \u2014 "),hoe=a("a"),FJr=o("FlaxXLMRobertaForMultipleChoice"),TJr=o(" (XLM-RoBERTa model)"),MJr=l(),F(Uw.$$.fragment),oXe=l(),uf=a("h2"),Jw=a("a"),swe=a("span"),F(L$.$$.fragment),EJr=l(),lwe=a("span"),CJr=o("FlaxAutoModelForNextSentencePrediction"),rXe=l(),Er=a("div"),F(y$.$$.fragment),wJr=l(),bf=a("p"),AJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),poe=a("a"),LJr=o("from_pretrained()"),yJr=o(" class method or the "),_oe=a("a"),xJr=o("from_config()"),$Jr=o(` class
method.`),kJr=l(),x$=a("p"),SJr=o("This class cannot be instantiated directly using "),iwe=a("code"),RJr=o("__init__()"),PJr=o(" (throws an error)."),BJr=l(),Zt=a("div"),F($$.$$.fragment),IJr=l(),dwe=a("p"),NJr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qJr=l(),vf=a("p"),jJr=o(`Note:
Loading a model from its configuration file does `),cwe=a("strong"),DJr=o("not"),GJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=a("a"),OJr=o("from_pretrained()"),VJr=o(" to load the model weights."),XJr=l(),F(Yw.$$.fragment),zJr=l(),Yr=a("div"),F(k$.$$.fragment),QJr=l(),fwe=a("p"),WJr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HJr=l(),xn=a("p"),UJr=o("The model class to instantiate is selected based on the "),mwe=a("code"),JJr=o("model_type"),YJr=o(` property of the config object (either
passed as an argument or loaded from `),gwe=a("code"),KJr=o("pretrained_model_name_or_path"),ZJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=a("code"),eYr=o("pretrained_model_name_or_path"),oYr=o(":"),rYr=l(),pwe=a("ul"),Kw=a("li"),_we=a("strong"),tYr=o("bert"),aYr=o(" \u2014 "),boe=a("a"),nYr=o("FlaxBertForNextSentencePrediction"),sYr=o(" (BERT model)"),lYr=l(),F(Zw.$$.fragment),tXe=l(),Ff=a("h2"),eA=a("a"),uwe=a("span"),F(S$.$$.fragment),iYr=l(),bwe=a("span"),dYr=o("FlaxAutoModelForImageClassification"),aXe=l(),Cr=a("div"),F(R$.$$.fragment),cYr=l(),Tf=a("p"),fYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),voe=a("a"),mYr=o("from_pretrained()"),gYr=o(" class method or the "),Foe=a("a"),hYr=o("from_config()"),pYr=o(` class
method.`),_Yr=l(),P$=a("p"),uYr=o("This class cannot be instantiated directly using "),vwe=a("code"),bYr=o("__init__()"),vYr=o(" (throws an error)."),FYr=l(),ea=a("div"),F(B$.$$.fragment),TYr=l(),Fwe=a("p"),MYr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EYr=l(),Mf=a("p"),CYr=o(`Note:
Loading a model from its configuration file does `),Twe=a("strong"),wYr=o("not"),AYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=a("a"),LYr=o("from_pretrained()"),yYr=o(" to load the model weights."),xYr=l(),F(oA.$$.fragment),$Yr=l(),Kr=a("div"),F(I$.$$.fragment),kYr=l(),Mwe=a("p"),SYr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RYr=l(),$n=a("p"),PYr=o("The model class to instantiate is selected based on the "),Ewe=a("code"),BYr=o("model_type"),IYr=o(` property of the config object (either
passed as an argument or loaded from `),Cwe=a("code"),NYr=o("pretrained_model_name_or_path"),qYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wwe=a("code"),jYr=o("pretrained_model_name_or_path"),DYr=o(":"),GYr=l(),N$=a("ul"),rA=a("li"),Awe=a("strong"),OYr=o("beit"),VYr=o(" \u2014 "),Moe=a("a"),XYr=o("FlaxBeitForImageClassification"),zYr=o(" (BEiT model)"),QYr=l(),tA=a("li"),Lwe=a("strong"),WYr=o("vit"),HYr=o(" \u2014 "),Eoe=a("a"),UYr=o("FlaxViTForImageClassification"),JYr=o(" (ViT model)"),YYr=l(),F(aA.$$.fragment),nXe=l(),Ef=a("h2"),nA=a("a"),ywe=a("span"),F(q$.$$.fragment),KYr=l(),xwe=a("span"),ZYr=o("FlaxAutoModelForVision2Seq"),sXe=l(),wr=a("div"),F(j$.$$.fragment),eKr=l(),Cf=a("p"),oKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Coe=a("a"),rKr=o("from_pretrained()"),tKr=o(" class method or the "),woe=a("a"),aKr=o("from_config()"),nKr=o(` class
method.`),sKr=l(),D$=a("p"),lKr=o("This class cannot be instantiated directly using "),$we=a("code"),iKr=o("__init__()"),dKr=o(" (throws an error)."),cKr=l(),oa=a("div"),F(G$.$$.fragment),fKr=l(),kwe=a("p"),mKr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gKr=l(),wf=a("p"),hKr=o(`Note:
Loading a model from its configuration file does `),Swe=a("strong"),pKr=o("not"),_Kr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("a"),uKr=o("from_pretrained()"),bKr=o(" to load the model weights."),vKr=l(),F(sA.$$.fragment),FKr=l(),Zr=a("div"),F(O$.$$.fragment),TKr=l(),Rwe=a("p"),MKr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EKr=l(),kn=a("p"),CKr=o("The model class to instantiate is selected based on the "),Pwe=a("code"),wKr=o("model_type"),AKr=o(` property of the config object (either
passed as an argument or loaded from `),Bwe=a("code"),LKr=o("pretrained_model_name_or_path"),yKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iwe=a("code"),xKr=o("pretrained_model_name_or_path"),$Kr=o(":"),kKr=l(),Nwe=a("ul"),lA=a("li"),qwe=a("strong"),SKr=o("vision-encoder-decoder"),RKr=o(" \u2014 "),Loe=a("a"),PKr=o("FlaxVisionEncoderDecoderModel"),BKr=o(" (Vision Encoder decoder model)"),IKr=l(),F(iA.$$.fragment),this.h()},l(f){const u=_Gt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var V$=s(p);m=n(V$,"A",{id:!0,class:!0,href:!0});var jwe=s(m);_=n(jwe,"SPAN",{});var Dwe=s(_);T(d.$$.fragment,Dwe),Dwe.forEach(t),jwe.forEach(t),h=i(V$),Eo=n(V$,"SPAN",{});var Gwe=s(Eo);Mi=r(Gwe,"Auto Classes"),Gwe.forEach(t),V$.forEach(t),xf=i(f),at=n(f,"P",{});var X$=s(at);Ei=r(X$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ci=n(X$,"CODE",{});var Owe=s(Ci);xL=r(Owe,"from_pretrained()"),Owe.forEach(t),$f=r(X$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),X$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);wi=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var Vwe=s(Rn);$L=r(Vwe,"AutoConfig"),Vwe.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var Xwe=s(Bn);kL=r(Xwe,"AutoModel"),Xwe.forEach(t),Ai=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var zwe=s(In);SL=r(zwe,"AutoTokenizer"),zwe.forEach(t),Li=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),kf=i(f),T(xa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var z$=s(Ae);lS=r(z$,"will create a model that is an instance of "),yi=n(z$,"A",{href:!0});var Qwe=s(yi);iS=r(Qwe,"BertModel"),Qwe.forEach(t),dS=r(z$,"."),z$.forEach(t),Co=i(f),$a=n(f,"P",{});var Q$=s($a);cS=r(Q$,"There is one class of "),Sf=n(Q$,"CODE",{});var Wwe=s(Sf);fS=r(Wwe,"AutoModel"),Wwe.forEach(t),uQe=r(Q$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Q$.forEach(t),rOe=i(f),xi=n(f,"H2",{class:!0});var W$=s(xi);Rf=n(W$,"A",{id:!0,class:!0,href:!0});var Hwe=s(Rf);Mte=n(Hwe,"SPAN",{});var Uwe=s(Mte);T(RL.$$.fragment,Uwe),Uwe.forEach(t),Hwe.forEach(t),bQe=i(W$),Ete=n(W$,"SPAN",{});var Jwe=s(Ete);vQe=r(Jwe,"Extending the Auto Classes"),Jwe.forEach(t),W$.forEach(t),tOe=i(f),Nn=n(f,"P",{});var Af=s(Nn);FQe=r(Af,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Cte=n(Af,"CODE",{});var Ywe=s(Cte);TQe=r(Ywe,"NewModel"),Ywe.forEach(t),MQe=r(Af,", make sure you have a "),wte=n(Af,"CODE",{});var Kwe=s(wte);EQe=r(Kwe,"NewModelConfig"),Kwe.forEach(t),CQe=r(Af,` then you can add those to the auto
classes like this:`),Af.forEach(t),aOe=i(f),T(PL.$$.fragment,f),nOe=i(f),mS=n(f,"P",{});var Zwe=s(mS);wQe=r(Zwe,"You will then be able to use the auto classes like you would usually do!"),Zwe.forEach(t),sOe=i(f),T(Pf.$$.fragment,f),lOe=i(f),$i=n(f,"H2",{class:!0});var H$=s($i);Bf=n(H$,"A",{id:!0,class:!0,href:!0});var eAe=s(Bf);Ate=n(eAe,"SPAN",{});var oAe=s(Ate);T(BL.$$.fragment,oAe),oAe.forEach(t),eAe.forEach(t),AQe=i(H$),Lte=n(H$,"SPAN",{});var rAe=s(Lte);LQe=r(rAe,"AutoConfig"),rAe.forEach(t),H$.forEach(t),iOe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(IL.$$.fragment,rt),yQe=i(rt),NL=n(rt,"P",{});var U$=s(NL);xQe=r(U$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),gS=n(U$,"A",{href:!0});var tAe=s(gS);$Qe=r(tAe,"from_pretrained()"),tAe.forEach(t),kQe=r(U$," class method."),U$.forEach(t),SQe=i(rt),qL=n(rt,"P",{});var J$=s(qL);RQe=r(J$,"This class cannot be instantiated directly using "),yte=n(J$,"CODE",{});var aAe=s(yte);PQe=r(aAe,"__init__()"),aAe.forEach(t),BQe=r(J$," (throws an error)."),J$.forEach(t),IQe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(jL.$$.fragment,tt),NQe=i(tt),xte=n(tt,"P",{});var nAe=s(xte);qQe=r(nAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),nAe.forEach(t),jQe=i(tt),ki=n(tt,"P",{});var Lf=s(ki);DQe=r(Lf,"The configuration class to instantiate is selected based on the "),$te=n(Lf,"CODE",{});var sAe=s($te);GQe=r(sAe,"model_type"),sAe.forEach(t),OQe=r(Lf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),kte=n(Lf,"CODE",{});var lAe=s(kte);VQe=r(lAe,"pretrained_model_name_or_path"),lAe.forEach(t),XQe=r(Lf,":"),Lf.forEach(t),zQe=i(tt),A=n(tt,"UL",{});var L=s(A);If=n(L,"LI",{});var dA=s(If);Ste=n(dA,"STRONG",{});var iAe=s(Ste);QQe=r(iAe,"albert"),iAe.forEach(t),WQe=r(dA," \u2014 "),hS=n(dA,"A",{href:!0});var dAe=s(hS);HQe=r(dAe,"AlbertConfig"),dAe.forEach(t),UQe=r(dA," (ALBERT model)"),dA.forEach(t),JQe=i(L),Nf=n(L,"LI",{});var cA=s(Nf);Rte=n(cA,"STRONG",{});var cAe=s(Rte);YQe=r(cAe,"bart"),cAe.forEach(t),KQe=r(cA," \u2014 "),pS=n(cA,"A",{href:!0});var fAe=s(pS);ZQe=r(fAe,"BartConfig"),fAe.forEach(t),eWe=r(cA," (BART model)"),cA.forEach(t),oWe=i(L),qf=n(L,"LI",{});var fA=s(qf);Pte=n(fA,"STRONG",{});var mAe=s(Pte);rWe=r(mAe,"beit"),mAe.forEach(t),tWe=r(fA," \u2014 "),_S=n(fA,"A",{href:!0});var gAe=s(_S);aWe=r(gAe,"BeitConfig"),gAe.forEach(t),nWe=r(fA," (BEiT model)"),fA.forEach(t),sWe=i(L),jf=n(L,"LI",{});var mA=s(jf);Bte=n(mA,"STRONG",{});var hAe=s(Bte);lWe=r(hAe,"bert"),hAe.forEach(t),iWe=r(mA," \u2014 "),uS=n(mA,"A",{href:!0});var pAe=s(uS);dWe=r(pAe,"BertConfig"),pAe.forEach(t),cWe=r(mA," (BERT model)"),mA.forEach(t),fWe=i(L),Df=n(L,"LI",{});var gA=s(Df);Ite=n(gA,"STRONG",{});var _Ae=s(Ite);mWe=r(_Ae,"bert-generation"),_Ae.forEach(t),gWe=r(gA," \u2014 "),bS=n(gA,"A",{href:!0});var uAe=s(bS);hWe=r(uAe,"BertGenerationConfig"),uAe.forEach(t),pWe=r(gA," (Bert Generation model)"),gA.forEach(t),_We=i(L),Gf=n(L,"LI",{});var hA=s(Gf);Nte=n(hA,"STRONG",{});var bAe=s(Nte);uWe=r(bAe,"big_bird"),bAe.forEach(t),bWe=r(hA," \u2014 "),vS=n(hA,"A",{href:!0});var vAe=s(vS);vWe=r(vAe,"BigBirdConfig"),vAe.forEach(t),FWe=r(hA," (BigBird model)"),hA.forEach(t),TWe=i(L),Of=n(L,"LI",{});var pA=s(Of);qte=n(pA,"STRONG",{});var FAe=s(qte);MWe=r(FAe,"bigbird_pegasus"),FAe.forEach(t),EWe=r(pA," \u2014 "),FS=n(pA,"A",{href:!0});var TAe=s(FS);CWe=r(TAe,"BigBirdPegasusConfig"),TAe.forEach(t),wWe=r(pA," (BigBird-Pegasus model)"),pA.forEach(t),AWe=i(L),Vf=n(L,"LI",{});var _A=s(Vf);jte=n(_A,"STRONG",{});var MAe=s(jte);LWe=r(MAe,"blenderbot"),MAe.forEach(t),yWe=r(_A," \u2014 "),TS=n(_A,"A",{href:!0});var EAe=s(TS);xWe=r(EAe,"BlenderbotConfig"),EAe.forEach(t),$We=r(_A," (Blenderbot model)"),_A.forEach(t),kWe=i(L),Xf=n(L,"LI",{});var uA=s(Xf);Dte=n(uA,"STRONG",{});var CAe=s(Dte);SWe=r(CAe,"blenderbot-small"),CAe.forEach(t),RWe=r(uA," \u2014 "),MS=n(uA,"A",{href:!0});var wAe=s(MS);PWe=r(wAe,"BlenderbotSmallConfig"),wAe.forEach(t),BWe=r(uA," (BlenderbotSmall model)"),uA.forEach(t),IWe=i(L),zf=n(L,"LI",{});var bA=s(zf);Gte=n(bA,"STRONG",{});var AAe=s(Gte);NWe=r(AAe,"bloom"),AAe.forEach(t),qWe=r(bA," \u2014 "),ES=n(bA,"A",{href:!0});var LAe=s(ES);jWe=r(LAe,"BloomConfig"),LAe.forEach(t),DWe=r(bA," (BLOOM model)"),bA.forEach(t),GWe=i(L),Qf=n(L,"LI",{});var vA=s(Qf);Ote=n(vA,"STRONG",{});var yAe=s(Ote);OWe=r(yAe,"camembert"),yAe.forEach(t),VWe=r(vA," \u2014 "),CS=n(vA,"A",{href:!0});var xAe=s(CS);XWe=r(xAe,"CamembertConfig"),xAe.forEach(t),zWe=r(vA," (CamemBERT model)"),vA.forEach(t),QWe=i(L),Wf=n(L,"LI",{});var FA=s(Wf);Vte=n(FA,"STRONG",{});var $Ae=s(Vte);WWe=r($Ae,"canine"),$Ae.forEach(t),HWe=r(FA," \u2014 "),wS=n(FA,"A",{href:!0});var kAe=s(wS);UWe=r(kAe,"CanineConfig"),kAe.forEach(t),JWe=r(FA," (CANINE model)"),FA.forEach(t),YWe=i(L),Hf=n(L,"LI",{});var TA=s(Hf);Xte=n(TA,"STRONG",{});var SAe=s(Xte);KWe=r(SAe,"clip"),SAe.forEach(t),ZWe=r(TA," \u2014 "),AS=n(TA,"A",{href:!0});var RAe=s(AS);eHe=r(RAe,"CLIPConfig"),RAe.forEach(t),oHe=r(TA," (CLIP model)"),TA.forEach(t),rHe=i(L),Uf=n(L,"LI",{});var MA=s(Uf);zte=n(MA,"STRONG",{});var PAe=s(zte);tHe=r(PAe,"codegen"),PAe.forEach(t),aHe=r(MA," \u2014 "),LS=n(MA,"A",{href:!0});var BAe=s(LS);nHe=r(BAe,"CodeGenConfig"),BAe.forEach(t),sHe=r(MA," (CodeGen model)"),MA.forEach(t),lHe=i(L),Jf=n(L,"LI",{});var EA=s(Jf);Qte=n(EA,"STRONG",{});var IAe=s(Qte);iHe=r(IAe,"convbert"),IAe.forEach(t),dHe=r(EA," \u2014 "),yS=n(EA,"A",{href:!0});var NAe=s(yS);cHe=r(NAe,"ConvBertConfig"),NAe.forEach(t),fHe=r(EA," (ConvBERT model)"),EA.forEach(t),mHe=i(L),Yf=n(L,"LI",{});var CA=s(Yf);Wte=n(CA,"STRONG",{});var qAe=s(Wte);gHe=r(qAe,"convnext"),qAe.forEach(t),hHe=r(CA," \u2014 "),xS=n(CA,"A",{href:!0});var jAe=s(xS);pHe=r(jAe,"ConvNextConfig"),jAe.forEach(t),_He=r(CA," (ConvNeXT model)"),CA.forEach(t),uHe=i(L),Kf=n(L,"LI",{});var wA=s(Kf);Hte=n(wA,"STRONG",{});var DAe=s(Hte);bHe=r(DAe,"ctrl"),DAe.forEach(t),vHe=r(wA," \u2014 "),$S=n(wA,"A",{href:!0});var GAe=s($S);FHe=r(GAe,"CTRLConfig"),GAe.forEach(t),THe=r(wA," (CTRL model)"),wA.forEach(t),MHe=i(L),Zf=n(L,"LI",{});var AA=s(Zf);Ute=n(AA,"STRONG",{});var OAe=s(Ute);EHe=r(OAe,"cvt"),OAe.forEach(t),CHe=r(AA," \u2014 "),kS=n(AA,"A",{href:!0});var VAe=s(kS);wHe=r(VAe,"CvtConfig"),VAe.forEach(t),AHe=r(AA," (CvT model)"),AA.forEach(t),LHe=i(L),em=n(L,"LI",{});var LA=s(em);Jte=n(LA,"STRONG",{});var XAe=s(Jte);yHe=r(XAe,"data2vec-audio"),XAe.forEach(t),xHe=r(LA," \u2014 "),SS=n(LA,"A",{href:!0});var zAe=s(SS);$He=r(zAe,"Data2VecAudioConfig"),zAe.forEach(t),kHe=r(LA," (Data2VecAudio model)"),LA.forEach(t),SHe=i(L),om=n(L,"LI",{});var yA=s(om);Yte=n(yA,"STRONG",{});var QAe=s(Yte);RHe=r(QAe,"data2vec-text"),QAe.forEach(t),PHe=r(yA," \u2014 "),RS=n(yA,"A",{href:!0});var WAe=s(RS);BHe=r(WAe,"Data2VecTextConfig"),WAe.forEach(t),IHe=r(yA," (Data2VecText model)"),yA.forEach(t),NHe=i(L),rm=n(L,"LI",{});var xA=s(rm);Kte=n(xA,"STRONG",{});var HAe=s(Kte);qHe=r(HAe,"data2vec-vision"),HAe.forEach(t),jHe=r(xA," \u2014 "),PS=n(xA,"A",{href:!0});var UAe=s(PS);DHe=r(UAe,"Data2VecVisionConfig"),UAe.forEach(t),GHe=r(xA," (Data2VecVision model)"),xA.forEach(t),OHe=i(L),tm=n(L,"LI",{});var $A=s(tm);Zte=n($A,"STRONG",{});var JAe=s(Zte);VHe=r(JAe,"deberta"),JAe.forEach(t),XHe=r($A," \u2014 "),BS=n($A,"A",{href:!0});var YAe=s(BS);zHe=r(YAe,"DebertaConfig"),YAe.forEach(t),QHe=r($A," (DeBERTa model)"),$A.forEach(t),WHe=i(L),am=n(L,"LI",{});var kA=s(am);eae=n(kA,"STRONG",{});var KAe=s(eae);HHe=r(KAe,"deberta-v2"),KAe.forEach(t),UHe=r(kA," \u2014 "),IS=n(kA,"A",{href:!0});var ZAe=s(IS);JHe=r(ZAe,"DebertaV2Config"),ZAe.forEach(t),YHe=r(kA," (DeBERTa-v2 model)"),kA.forEach(t),KHe=i(L),nm=n(L,"LI",{});var SA=s(nm);oae=n(SA,"STRONG",{});var qKr=s(oae);ZHe=r(qKr,"decision_transformer"),qKr.forEach(t),eUe=r(SA," \u2014 "),NS=n(SA,"A",{href:!0});var jKr=s(NS);oUe=r(jKr,"DecisionTransformerConfig"),jKr.forEach(t),rUe=r(SA," (Decision Transformer model)"),SA.forEach(t),tUe=i(L),sm=n(L,"LI",{});var e6e=s(sm);rae=n(e6e,"STRONG",{});var DKr=s(rae);aUe=r(DKr,"deit"),DKr.forEach(t),nUe=r(e6e," \u2014 "),qS=n(e6e,"A",{href:!0});var GKr=s(qS);sUe=r(GKr,"DeiTConfig"),GKr.forEach(t),lUe=r(e6e," (DeiT model)"),e6e.forEach(t),iUe=i(L),lm=n(L,"LI",{});var o6e=s(lm);tae=n(o6e,"STRONG",{});var OKr=s(tae);dUe=r(OKr,"detr"),OKr.forEach(t),cUe=r(o6e," \u2014 "),jS=n(o6e,"A",{href:!0});var VKr=s(jS);fUe=r(VKr,"DetrConfig"),VKr.forEach(t),mUe=r(o6e," (DETR model)"),o6e.forEach(t),gUe=i(L),im=n(L,"LI",{});var r6e=s(im);aae=n(r6e,"STRONG",{});var XKr=s(aae);hUe=r(XKr,"distilbert"),XKr.forEach(t),pUe=r(r6e," \u2014 "),DS=n(r6e,"A",{href:!0});var zKr=s(DS);_Ue=r(zKr,"DistilBertConfig"),zKr.forEach(t),uUe=r(r6e," (DistilBERT model)"),r6e.forEach(t),bUe=i(L),dm=n(L,"LI",{});var t6e=s(dm);nae=n(t6e,"STRONG",{});var QKr=s(nae);vUe=r(QKr,"dpr"),QKr.forEach(t),FUe=r(t6e," \u2014 "),GS=n(t6e,"A",{href:!0});var WKr=s(GS);TUe=r(WKr,"DPRConfig"),WKr.forEach(t),MUe=r(t6e," (DPR model)"),t6e.forEach(t),EUe=i(L),cm=n(L,"LI",{});var a6e=s(cm);sae=n(a6e,"STRONG",{});var HKr=s(sae);CUe=r(HKr,"dpt"),HKr.forEach(t),wUe=r(a6e," \u2014 "),OS=n(a6e,"A",{href:!0});var UKr=s(OS);AUe=r(UKr,"DPTConfig"),UKr.forEach(t),LUe=r(a6e," (DPT model)"),a6e.forEach(t),yUe=i(L),fm=n(L,"LI",{});var n6e=s(fm);lae=n(n6e,"STRONG",{});var JKr=s(lae);xUe=r(JKr,"electra"),JKr.forEach(t),$Ue=r(n6e," \u2014 "),VS=n(n6e,"A",{href:!0});var YKr=s(VS);kUe=r(YKr,"ElectraConfig"),YKr.forEach(t),SUe=r(n6e," (ELECTRA model)"),n6e.forEach(t),RUe=i(L),mm=n(L,"LI",{});var s6e=s(mm);iae=n(s6e,"STRONG",{});var KKr=s(iae);PUe=r(KKr,"encoder-decoder"),KKr.forEach(t),BUe=r(s6e," \u2014 "),XS=n(s6e,"A",{href:!0});var ZKr=s(XS);IUe=r(ZKr,"EncoderDecoderConfig"),ZKr.forEach(t),NUe=r(s6e," (Encoder decoder model)"),s6e.forEach(t),qUe=i(L),gm=n(L,"LI",{});var l6e=s(gm);dae=n(l6e,"STRONG",{});var eZr=s(dae);jUe=r(eZr,"flaubert"),eZr.forEach(t),DUe=r(l6e," \u2014 "),zS=n(l6e,"A",{href:!0});var oZr=s(zS);GUe=r(oZr,"FlaubertConfig"),oZr.forEach(t),OUe=r(l6e," (FlauBERT model)"),l6e.forEach(t),VUe=i(L),hm=n(L,"LI",{});var i6e=s(hm);cae=n(i6e,"STRONG",{});var rZr=s(cae);XUe=r(rZr,"flava"),rZr.forEach(t),zUe=r(i6e," \u2014 "),QS=n(i6e,"A",{href:!0});var tZr=s(QS);QUe=r(tZr,"FlavaConfig"),tZr.forEach(t),WUe=r(i6e," (FLAVA model)"),i6e.forEach(t),HUe=i(L),pm=n(L,"LI",{});var d6e=s(pm);fae=n(d6e,"STRONG",{});var aZr=s(fae);UUe=r(aZr,"fnet"),aZr.forEach(t),JUe=r(d6e," \u2014 "),WS=n(d6e,"A",{href:!0});var nZr=s(WS);YUe=r(nZr,"FNetConfig"),nZr.forEach(t),KUe=r(d6e," (FNet model)"),d6e.forEach(t),ZUe=i(L),_m=n(L,"LI",{});var c6e=s(_m);mae=n(c6e,"STRONG",{});var sZr=s(mae);eJe=r(sZr,"fsmt"),sZr.forEach(t),oJe=r(c6e," \u2014 "),HS=n(c6e,"A",{href:!0});var lZr=s(HS);rJe=r(lZr,"FSMTConfig"),lZr.forEach(t),tJe=r(c6e," (FairSeq Machine-Translation model)"),c6e.forEach(t),aJe=i(L),um=n(L,"LI",{});var f6e=s(um);gae=n(f6e,"STRONG",{});var iZr=s(gae);nJe=r(iZr,"funnel"),iZr.forEach(t),sJe=r(f6e," \u2014 "),US=n(f6e,"A",{href:!0});var dZr=s(US);lJe=r(dZr,"FunnelConfig"),dZr.forEach(t),iJe=r(f6e," (Funnel Transformer model)"),f6e.forEach(t),dJe=i(L),bm=n(L,"LI",{});var m6e=s(bm);hae=n(m6e,"STRONG",{});var cZr=s(hae);cJe=r(cZr,"glpn"),cZr.forEach(t),fJe=r(m6e," \u2014 "),JS=n(m6e,"A",{href:!0});var fZr=s(JS);mJe=r(fZr,"GLPNConfig"),fZr.forEach(t),gJe=r(m6e," (GLPN model)"),m6e.forEach(t),hJe=i(L),vm=n(L,"LI",{});var g6e=s(vm);pae=n(g6e,"STRONG",{});var mZr=s(pae);pJe=r(mZr,"gpt2"),mZr.forEach(t),_Je=r(g6e," \u2014 "),YS=n(g6e,"A",{href:!0});var gZr=s(YS);uJe=r(gZr,"GPT2Config"),gZr.forEach(t),bJe=r(g6e," (OpenAI GPT-2 model)"),g6e.forEach(t),vJe=i(L),Fm=n(L,"LI",{});var h6e=s(Fm);_ae=n(h6e,"STRONG",{});var hZr=s(_ae);FJe=r(hZr,"gpt_neo"),hZr.forEach(t),TJe=r(h6e," \u2014 "),KS=n(h6e,"A",{href:!0});var pZr=s(KS);MJe=r(pZr,"GPTNeoConfig"),pZr.forEach(t),EJe=r(h6e," (GPT Neo model)"),h6e.forEach(t),CJe=i(L),Tm=n(L,"LI",{});var p6e=s(Tm);uae=n(p6e,"STRONG",{});var _Zr=s(uae);wJe=r(_Zr,"gpt_neox"),_Zr.forEach(t),AJe=r(p6e," \u2014 "),ZS=n(p6e,"A",{href:!0});var uZr=s(ZS);LJe=r(uZr,"GPTNeoXConfig"),uZr.forEach(t),yJe=r(p6e," (GPT NeoX model)"),p6e.forEach(t),xJe=i(L),Mm=n(L,"LI",{});var _6e=s(Mm);bae=n(_6e,"STRONG",{});var bZr=s(bae);$Je=r(bZr,"gptj"),bZr.forEach(t),kJe=r(_6e," \u2014 "),eR=n(_6e,"A",{href:!0});var vZr=s(eR);SJe=r(vZr,"GPTJConfig"),vZr.forEach(t),RJe=r(_6e," (GPT-J model)"),_6e.forEach(t),PJe=i(L),Em=n(L,"LI",{});var u6e=s(Em);vae=n(u6e,"STRONG",{});var FZr=s(vae);BJe=r(FZr,"hubert"),FZr.forEach(t),IJe=r(u6e," \u2014 "),oR=n(u6e,"A",{href:!0});var TZr=s(oR);NJe=r(TZr,"HubertConfig"),TZr.forEach(t),qJe=r(u6e," (Hubert model)"),u6e.forEach(t),jJe=i(L),Cm=n(L,"LI",{});var b6e=s(Cm);Fae=n(b6e,"STRONG",{});var MZr=s(Fae);DJe=r(MZr,"ibert"),MZr.forEach(t),GJe=r(b6e," \u2014 "),rR=n(b6e,"A",{href:!0});var EZr=s(rR);OJe=r(EZr,"IBertConfig"),EZr.forEach(t),VJe=r(b6e," (I-BERT model)"),b6e.forEach(t),XJe=i(L),wm=n(L,"LI",{});var v6e=s(wm);Tae=n(v6e,"STRONG",{});var CZr=s(Tae);zJe=r(CZr,"imagegpt"),CZr.forEach(t),QJe=r(v6e," \u2014 "),tR=n(v6e,"A",{href:!0});var wZr=s(tR);WJe=r(wZr,"ImageGPTConfig"),wZr.forEach(t),HJe=r(v6e," (ImageGPT model)"),v6e.forEach(t),UJe=i(L),Am=n(L,"LI",{});var F6e=s(Am);Mae=n(F6e,"STRONG",{});var AZr=s(Mae);JJe=r(AZr,"layoutlm"),AZr.forEach(t),YJe=r(F6e," \u2014 "),aR=n(F6e,"A",{href:!0});var LZr=s(aR);KJe=r(LZr,"LayoutLMConfig"),LZr.forEach(t),ZJe=r(F6e," (LayoutLM model)"),F6e.forEach(t),eYe=i(L),Lm=n(L,"LI",{});var T6e=s(Lm);Eae=n(T6e,"STRONG",{});var yZr=s(Eae);oYe=r(yZr,"layoutlmv2"),yZr.forEach(t),rYe=r(T6e," \u2014 "),nR=n(T6e,"A",{href:!0});var xZr=s(nR);tYe=r(xZr,"LayoutLMv2Config"),xZr.forEach(t),aYe=r(T6e," (LayoutLMv2 model)"),T6e.forEach(t),nYe=i(L),ym=n(L,"LI",{});var M6e=s(ym);Cae=n(M6e,"STRONG",{});var $Zr=s(Cae);sYe=r($Zr,"layoutlmv3"),$Zr.forEach(t),lYe=r(M6e," \u2014 "),sR=n(M6e,"A",{href:!0});var kZr=s(sR);iYe=r(kZr,"LayoutLMv3Config"),kZr.forEach(t),dYe=r(M6e," (LayoutLMv3 model)"),M6e.forEach(t),cYe=i(L),xm=n(L,"LI",{});var E6e=s(xm);wae=n(E6e,"STRONG",{});var SZr=s(wae);fYe=r(SZr,"led"),SZr.forEach(t),mYe=r(E6e," \u2014 "),lR=n(E6e,"A",{href:!0});var RZr=s(lR);gYe=r(RZr,"LEDConfig"),RZr.forEach(t),hYe=r(E6e," (LED model)"),E6e.forEach(t),pYe=i(L),$m=n(L,"LI",{});var C6e=s($m);Aae=n(C6e,"STRONG",{});var PZr=s(Aae);_Ye=r(PZr,"levit"),PZr.forEach(t),uYe=r(C6e," \u2014 "),iR=n(C6e,"A",{href:!0});var BZr=s(iR);bYe=r(BZr,"LevitConfig"),BZr.forEach(t),vYe=r(C6e," (LeViT model)"),C6e.forEach(t),FYe=i(L),km=n(L,"LI",{});var w6e=s(km);Lae=n(w6e,"STRONG",{});var IZr=s(Lae);TYe=r(IZr,"longformer"),IZr.forEach(t),MYe=r(w6e," \u2014 "),dR=n(w6e,"A",{href:!0});var NZr=s(dR);EYe=r(NZr,"LongformerConfig"),NZr.forEach(t),CYe=r(w6e," (Longformer model)"),w6e.forEach(t),wYe=i(L),Sm=n(L,"LI",{});var A6e=s(Sm);yae=n(A6e,"STRONG",{});var qZr=s(yae);AYe=r(qZr,"longt5"),qZr.forEach(t),LYe=r(A6e," \u2014 "),cR=n(A6e,"A",{href:!0});var jZr=s(cR);yYe=r(jZr,"LongT5Config"),jZr.forEach(t),xYe=r(A6e," (LongT5 model)"),A6e.forEach(t),$Ye=i(L),Rm=n(L,"LI",{});var L6e=s(Rm);xae=n(L6e,"STRONG",{});var DZr=s(xae);kYe=r(DZr,"luke"),DZr.forEach(t),SYe=r(L6e," \u2014 "),fR=n(L6e,"A",{href:!0});var GZr=s(fR);RYe=r(GZr,"LukeConfig"),GZr.forEach(t),PYe=r(L6e," (LUKE model)"),L6e.forEach(t),BYe=i(L),Pm=n(L,"LI",{});var y6e=s(Pm);$ae=n(y6e,"STRONG",{});var OZr=s($ae);IYe=r(OZr,"lxmert"),OZr.forEach(t),NYe=r(y6e," \u2014 "),mR=n(y6e,"A",{href:!0});var VZr=s(mR);qYe=r(VZr,"LxmertConfig"),VZr.forEach(t),jYe=r(y6e," (LXMERT model)"),y6e.forEach(t),DYe=i(L),Bm=n(L,"LI",{});var x6e=s(Bm);kae=n(x6e,"STRONG",{});var XZr=s(kae);GYe=r(XZr,"m2m_100"),XZr.forEach(t),OYe=r(x6e," \u2014 "),gR=n(x6e,"A",{href:!0});var zZr=s(gR);VYe=r(zZr,"M2M100Config"),zZr.forEach(t),XYe=r(x6e," (M2M100 model)"),x6e.forEach(t),zYe=i(L),Im=n(L,"LI",{});var $6e=s(Im);Sae=n($6e,"STRONG",{});var QZr=s(Sae);QYe=r(QZr,"marian"),QZr.forEach(t),WYe=r($6e," \u2014 "),hR=n($6e,"A",{href:!0});var WZr=s(hR);HYe=r(WZr,"MarianConfig"),WZr.forEach(t),UYe=r($6e," (Marian model)"),$6e.forEach(t),JYe=i(L),Nm=n(L,"LI",{});var k6e=s(Nm);Rae=n(k6e,"STRONG",{});var HZr=s(Rae);YYe=r(HZr,"maskformer"),HZr.forEach(t),KYe=r(k6e," \u2014 "),pR=n(k6e,"A",{href:!0});var UZr=s(pR);ZYe=r(UZr,"MaskFormerConfig"),UZr.forEach(t),eKe=r(k6e," (MaskFormer model)"),k6e.forEach(t),oKe=i(L),qm=n(L,"LI",{});var S6e=s(qm);Pae=n(S6e,"STRONG",{});var JZr=s(Pae);rKe=r(JZr,"mbart"),JZr.forEach(t),tKe=r(S6e," \u2014 "),_R=n(S6e,"A",{href:!0});var YZr=s(_R);aKe=r(YZr,"MBartConfig"),YZr.forEach(t),nKe=r(S6e," (mBART model)"),S6e.forEach(t),sKe=i(L),jm=n(L,"LI",{});var R6e=s(jm);Bae=n(R6e,"STRONG",{});var KZr=s(Bae);lKe=r(KZr,"mctct"),KZr.forEach(t),iKe=r(R6e," \u2014 "),uR=n(R6e,"A",{href:!0});var ZZr=s(uR);dKe=r(ZZr,"MCTCTConfig"),ZZr.forEach(t),cKe=r(R6e," (M-CTC-T model)"),R6e.forEach(t),fKe=i(L),Dm=n(L,"LI",{});var P6e=s(Dm);Iae=n(P6e,"STRONG",{});var eet=s(Iae);mKe=r(eet,"megatron-bert"),eet.forEach(t),gKe=r(P6e," \u2014 "),bR=n(P6e,"A",{href:!0});var oet=s(bR);hKe=r(oet,"MegatronBertConfig"),oet.forEach(t),pKe=r(P6e," (Megatron-BERT model)"),P6e.forEach(t),_Ke=i(L),Gm=n(L,"LI",{});var B6e=s(Gm);Nae=n(B6e,"STRONG",{});var ret=s(Nae);uKe=r(ret,"mobilebert"),ret.forEach(t),bKe=r(B6e," \u2014 "),vR=n(B6e,"A",{href:!0});var tet=s(vR);vKe=r(tet,"MobileBertConfig"),tet.forEach(t),FKe=r(B6e," (MobileBERT model)"),B6e.forEach(t),TKe=i(L),Om=n(L,"LI",{});var I6e=s(Om);qae=n(I6e,"STRONG",{});var aet=s(qae);MKe=r(aet,"mpnet"),aet.forEach(t),EKe=r(I6e," \u2014 "),FR=n(I6e,"A",{href:!0});var net=s(FR);CKe=r(net,"MPNetConfig"),net.forEach(t),wKe=r(I6e," (MPNet model)"),I6e.forEach(t),AKe=i(L),Vm=n(L,"LI",{});var N6e=s(Vm);jae=n(N6e,"STRONG",{});var set=s(jae);LKe=r(set,"mt5"),set.forEach(t),yKe=r(N6e," \u2014 "),TR=n(N6e,"A",{href:!0});var iet=s(TR);xKe=r(iet,"MT5Config"),iet.forEach(t),$Ke=r(N6e," (MT5 model)"),N6e.forEach(t),kKe=i(L),Xm=n(L,"LI",{});var q6e=s(Xm);Dae=n(q6e,"STRONG",{});var det=s(Dae);SKe=r(det,"nezha"),det.forEach(t),RKe=r(q6e," \u2014 "),MR=n(q6e,"A",{href:!0});var cet=s(MR);PKe=r(cet,"NezhaConfig"),cet.forEach(t),BKe=r(q6e," (Nezha model)"),q6e.forEach(t),IKe=i(L),zm=n(L,"LI",{});var j6e=s(zm);Gae=n(j6e,"STRONG",{});var fet=s(Gae);NKe=r(fet,"nystromformer"),fet.forEach(t),qKe=r(j6e," \u2014 "),ER=n(j6e,"A",{href:!0});var met=s(ER);jKe=r(met,"NystromformerConfig"),met.forEach(t),DKe=r(j6e," (Nystr\xF6mformer model)"),j6e.forEach(t),GKe=i(L),Qm=n(L,"LI",{});var D6e=s(Qm);Oae=n(D6e,"STRONG",{});var get=s(Oae);OKe=r(get,"openai-gpt"),get.forEach(t),VKe=r(D6e," \u2014 "),CR=n(D6e,"A",{href:!0});var het=s(CR);XKe=r(het,"OpenAIGPTConfig"),het.forEach(t),zKe=r(D6e," (OpenAI GPT model)"),D6e.forEach(t),QKe=i(L),Wm=n(L,"LI",{});var G6e=s(Wm);Vae=n(G6e,"STRONG",{});var pet=s(Vae);WKe=r(pet,"opt"),pet.forEach(t),HKe=r(G6e," \u2014 "),wR=n(G6e,"A",{href:!0});var _et=s(wR);UKe=r(_et,"OPTConfig"),_et.forEach(t),JKe=r(G6e," (OPT model)"),G6e.forEach(t),YKe=i(L),Hm=n(L,"LI",{});var O6e=s(Hm);Xae=n(O6e,"STRONG",{});var uet=s(Xae);KKe=r(uet,"pegasus"),uet.forEach(t),ZKe=r(O6e," \u2014 "),AR=n(O6e,"A",{href:!0});var bet=s(AR);eZe=r(bet,"PegasusConfig"),bet.forEach(t),oZe=r(O6e," (Pegasus model)"),O6e.forEach(t),rZe=i(L),Um=n(L,"LI",{});var V6e=s(Um);zae=n(V6e,"STRONG",{});var vet=s(zae);tZe=r(vet,"perceiver"),vet.forEach(t),aZe=r(V6e," \u2014 "),LR=n(V6e,"A",{href:!0});var Fet=s(LR);nZe=r(Fet,"PerceiverConfig"),Fet.forEach(t),sZe=r(V6e," (Perceiver model)"),V6e.forEach(t),lZe=i(L),Jm=n(L,"LI",{});var X6e=s(Jm);Qae=n(X6e,"STRONG",{});var Tet=s(Qae);iZe=r(Tet,"plbart"),Tet.forEach(t),dZe=r(X6e," \u2014 "),yR=n(X6e,"A",{href:!0});var Met=s(yR);cZe=r(Met,"PLBartConfig"),Met.forEach(t),fZe=r(X6e," (PLBart model)"),X6e.forEach(t),mZe=i(L),Ym=n(L,"LI",{});var z6e=s(Ym);Wae=n(z6e,"STRONG",{});var Eet=s(Wae);gZe=r(Eet,"poolformer"),Eet.forEach(t),hZe=r(z6e," \u2014 "),xR=n(z6e,"A",{href:!0});var Cet=s(xR);pZe=r(Cet,"PoolFormerConfig"),Cet.forEach(t),_Ze=r(z6e," (PoolFormer model)"),z6e.forEach(t),uZe=i(L),Km=n(L,"LI",{});var Q6e=s(Km);Hae=n(Q6e,"STRONG",{});var wet=s(Hae);bZe=r(wet,"prophetnet"),wet.forEach(t),vZe=r(Q6e," \u2014 "),$R=n(Q6e,"A",{href:!0});var Aet=s($R);FZe=r(Aet,"ProphetNetConfig"),Aet.forEach(t),TZe=r(Q6e," (ProphetNet model)"),Q6e.forEach(t),MZe=i(L),Zm=n(L,"LI",{});var W6e=s(Zm);Uae=n(W6e,"STRONG",{});var Let=s(Uae);EZe=r(Let,"qdqbert"),Let.forEach(t),CZe=r(W6e," \u2014 "),kR=n(W6e,"A",{href:!0});var yet=s(kR);wZe=r(yet,"QDQBertConfig"),yet.forEach(t),AZe=r(W6e," (QDQBert model)"),W6e.forEach(t),LZe=i(L),eg=n(L,"LI",{});var H6e=s(eg);Jae=n(H6e,"STRONG",{});var xet=s(Jae);yZe=r(xet,"rag"),xet.forEach(t),xZe=r(H6e," \u2014 "),SR=n(H6e,"A",{href:!0});var $et=s(SR);$Ze=r($et,"RagConfig"),$et.forEach(t),kZe=r(H6e," (RAG model)"),H6e.forEach(t),SZe=i(L),og=n(L,"LI",{});var U6e=s(og);Yae=n(U6e,"STRONG",{});var ket=s(Yae);RZe=r(ket,"realm"),ket.forEach(t),PZe=r(U6e," \u2014 "),RR=n(U6e,"A",{href:!0});var Set=s(RR);BZe=r(Set,"RealmConfig"),Set.forEach(t),IZe=r(U6e," (REALM model)"),U6e.forEach(t),NZe=i(L),rg=n(L,"LI",{});var J6e=s(rg);Kae=n(J6e,"STRONG",{});var Ret=s(Kae);qZe=r(Ret,"reformer"),Ret.forEach(t),jZe=r(J6e," \u2014 "),PR=n(J6e,"A",{href:!0});var Pet=s(PR);DZe=r(Pet,"ReformerConfig"),Pet.forEach(t),GZe=r(J6e," (Reformer model)"),J6e.forEach(t),OZe=i(L),tg=n(L,"LI",{});var Y6e=s(tg);Zae=n(Y6e,"STRONG",{});var Bet=s(Zae);VZe=r(Bet,"regnet"),Bet.forEach(t),XZe=r(Y6e," \u2014 "),BR=n(Y6e,"A",{href:!0});var Iet=s(BR);zZe=r(Iet,"RegNetConfig"),Iet.forEach(t),QZe=r(Y6e," (RegNet model)"),Y6e.forEach(t),WZe=i(L),ag=n(L,"LI",{});var K6e=s(ag);ene=n(K6e,"STRONG",{});var Net=s(ene);HZe=r(Net,"rembert"),Net.forEach(t),UZe=r(K6e," \u2014 "),IR=n(K6e,"A",{href:!0});var qet=s(IR);JZe=r(qet,"RemBertConfig"),qet.forEach(t),YZe=r(K6e," (RemBERT model)"),K6e.forEach(t),KZe=i(L),ng=n(L,"LI",{});var Z6e=s(ng);one=n(Z6e,"STRONG",{});var jet=s(one);ZZe=r(jet,"resnet"),jet.forEach(t),eeo=r(Z6e," \u2014 "),NR=n(Z6e,"A",{href:!0});var Det=s(NR);oeo=r(Det,"ResNetConfig"),Det.forEach(t),reo=r(Z6e," (ResNet model)"),Z6e.forEach(t),teo=i(L),sg=n(L,"LI",{});var eLe=s(sg);rne=n(eLe,"STRONG",{});var Get=s(rne);aeo=r(Get,"retribert"),Get.forEach(t),neo=r(eLe," \u2014 "),qR=n(eLe,"A",{href:!0});var Oet=s(qR);seo=r(Oet,"RetriBertConfig"),Oet.forEach(t),leo=r(eLe," (RetriBERT model)"),eLe.forEach(t),ieo=i(L),lg=n(L,"LI",{});var oLe=s(lg);tne=n(oLe,"STRONG",{});var Vet=s(tne);deo=r(Vet,"roberta"),Vet.forEach(t),ceo=r(oLe," \u2014 "),jR=n(oLe,"A",{href:!0});var Xet=s(jR);feo=r(Xet,"RobertaConfig"),Xet.forEach(t),meo=r(oLe," (RoBERTa model)"),oLe.forEach(t),geo=i(L),ig=n(L,"LI",{});var rLe=s(ig);ane=n(rLe,"STRONG",{});var zet=s(ane);heo=r(zet,"roformer"),zet.forEach(t),peo=r(rLe," \u2014 "),DR=n(rLe,"A",{href:!0});var Qet=s(DR);_eo=r(Qet,"RoFormerConfig"),Qet.forEach(t),ueo=r(rLe," (RoFormer model)"),rLe.forEach(t),beo=i(L),dg=n(L,"LI",{});var tLe=s(dg);nne=n(tLe,"STRONG",{});var Wet=s(nne);veo=r(Wet,"segformer"),Wet.forEach(t),Feo=r(tLe," \u2014 "),GR=n(tLe,"A",{href:!0});var Het=s(GR);Teo=r(Het,"SegformerConfig"),Het.forEach(t),Meo=r(tLe," (SegFormer model)"),tLe.forEach(t),Eeo=i(L),cg=n(L,"LI",{});var aLe=s(cg);sne=n(aLe,"STRONG",{});var Uet=s(sne);Ceo=r(Uet,"sew"),Uet.forEach(t),weo=r(aLe," \u2014 "),OR=n(aLe,"A",{href:!0});var Jet=s(OR);Aeo=r(Jet,"SEWConfig"),Jet.forEach(t),Leo=r(aLe," (SEW model)"),aLe.forEach(t),yeo=i(L),fg=n(L,"LI",{});var nLe=s(fg);lne=n(nLe,"STRONG",{});var Yet=s(lne);xeo=r(Yet,"sew-d"),Yet.forEach(t),$eo=r(nLe," \u2014 "),VR=n(nLe,"A",{href:!0});var Ket=s(VR);keo=r(Ket,"SEWDConfig"),Ket.forEach(t),Seo=r(nLe," (SEW-D model)"),nLe.forEach(t),Reo=i(L),mg=n(L,"LI",{});var sLe=s(mg);ine=n(sLe,"STRONG",{});var Zet=s(ine);Peo=r(Zet,"speech-encoder-decoder"),Zet.forEach(t),Beo=r(sLe," \u2014 "),XR=n(sLe,"A",{href:!0});var eot=s(XR);Ieo=r(eot,"SpeechEncoderDecoderConfig"),eot.forEach(t),Neo=r(sLe," (Speech Encoder decoder model)"),sLe.forEach(t),qeo=i(L),gg=n(L,"LI",{});var lLe=s(gg);dne=n(lLe,"STRONG",{});var oot=s(dne);jeo=r(oot,"speech_to_text"),oot.forEach(t),Deo=r(lLe," \u2014 "),zR=n(lLe,"A",{href:!0});var rot=s(zR);Geo=r(rot,"Speech2TextConfig"),rot.forEach(t),Oeo=r(lLe," (Speech2Text model)"),lLe.forEach(t),Veo=i(L),hg=n(L,"LI",{});var iLe=s(hg);cne=n(iLe,"STRONG",{});var tot=s(cne);Xeo=r(tot,"speech_to_text_2"),tot.forEach(t),zeo=r(iLe," \u2014 "),QR=n(iLe,"A",{href:!0});var aot=s(QR);Qeo=r(aot,"Speech2Text2Config"),aot.forEach(t),Weo=r(iLe," (Speech2Text2 model)"),iLe.forEach(t),Heo=i(L),pg=n(L,"LI",{});var dLe=s(pg);fne=n(dLe,"STRONG",{});var not=s(fne);Ueo=r(not,"splinter"),not.forEach(t),Jeo=r(dLe," \u2014 "),WR=n(dLe,"A",{href:!0});var sot=s(WR);Yeo=r(sot,"SplinterConfig"),sot.forEach(t),Keo=r(dLe," (Splinter model)"),dLe.forEach(t),Zeo=i(L),_g=n(L,"LI",{});var cLe=s(_g);mne=n(cLe,"STRONG",{});var lot=s(mne);eoo=r(lot,"squeezebert"),lot.forEach(t),ooo=r(cLe," \u2014 "),HR=n(cLe,"A",{href:!0});var iot=s(HR);roo=r(iot,"SqueezeBertConfig"),iot.forEach(t),too=r(cLe," (SqueezeBERT model)"),cLe.forEach(t),aoo=i(L),ug=n(L,"LI",{});var fLe=s(ug);gne=n(fLe,"STRONG",{});var dot=s(gne);noo=r(dot,"swin"),dot.forEach(t),soo=r(fLe," \u2014 "),UR=n(fLe,"A",{href:!0});var cot=s(UR);loo=r(cot,"SwinConfig"),cot.forEach(t),ioo=r(fLe," (Swin Transformer model)"),fLe.forEach(t),doo=i(L),bg=n(L,"LI",{});var mLe=s(bg);hne=n(mLe,"STRONG",{});var fot=s(hne);coo=r(fot,"t5"),fot.forEach(t),foo=r(mLe," \u2014 "),JR=n(mLe,"A",{href:!0});var mot=s(JR);moo=r(mot,"T5Config"),mot.forEach(t),goo=r(mLe," (T5 model)"),mLe.forEach(t),hoo=i(L),vg=n(L,"LI",{});var gLe=s(vg);pne=n(gLe,"STRONG",{});var got=s(pne);poo=r(got,"tapas"),got.forEach(t),_oo=r(gLe," \u2014 "),YR=n(gLe,"A",{href:!0});var hot=s(YR);uoo=r(hot,"TapasConfig"),hot.forEach(t),boo=r(gLe," (TAPAS model)"),gLe.forEach(t),voo=i(L),Fg=n(L,"LI",{});var hLe=s(Fg);_ne=n(hLe,"STRONG",{});var pot=s(_ne);Foo=r(pot,"trajectory_transformer"),pot.forEach(t),Too=r(hLe," \u2014 "),KR=n(hLe,"A",{href:!0});var _ot=s(KR);Moo=r(_ot,"TrajectoryTransformerConfig"),_ot.forEach(t),Eoo=r(hLe," (Trajectory Transformer model)"),hLe.forEach(t),Coo=i(L),Tg=n(L,"LI",{});var pLe=s(Tg);une=n(pLe,"STRONG",{});var uot=s(une);woo=r(uot,"transfo-xl"),uot.forEach(t),Aoo=r(pLe," \u2014 "),ZR=n(pLe,"A",{href:!0});var bot=s(ZR);Loo=r(bot,"TransfoXLConfig"),bot.forEach(t),yoo=r(pLe," (Transformer-XL model)"),pLe.forEach(t),xoo=i(L),Mg=n(L,"LI",{});var _Le=s(Mg);bne=n(_Le,"STRONG",{});var vot=s(bne);$oo=r(vot,"trocr"),vot.forEach(t),koo=r(_Le," \u2014 "),eP=n(_Le,"A",{href:!0});var Fot=s(eP);Soo=r(Fot,"TrOCRConfig"),Fot.forEach(t),Roo=r(_Le," (TrOCR model)"),_Le.forEach(t),Poo=i(L),Eg=n(L,"LI",{});var uLe=s(Eg);vne=n(uLe,"STRONG",{});var Tot=s(vne);Boo=r(Tot,"unispeech"),Tot.forEach(t),Ioo=r(uLe," \u2014 "),oP=n(uLe,"A",{href:!0});var Mot=s(oP);Noo=r(Mot,"UniSpeechConfig"),Mot.forEach(t),qoo=r(uLe," (UniSpeech model)"),uLe.forEach(t),joo=i(L),Cg=n(L,"LI",{});var bLe=s(Cg);Fne=n(bLe,"STRONG",{});var Eot=s(Fne);Doo=r(Eot,"unispeech-sat"),Eot.forEach(t),Goo=r(bLe," \u2014 "),rP=n(bLe,"A",{href:!0});var Cot=s(rP);Ooo=r(Cot,"UniSpeechSatConfig"),Cot.forEach(t),Voo=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),Xoo=i(L),wg=n(L,"LI",{});var vLe=s(wg);Tne=n(vLe,"STRONG",{});var wot=s(Tne);zoo=r(wot,"van"),wot.forEach(t),Qoo=r(vLe," \u2014 "),tP=n(vLe,"A",{href:!0});var Aot=s(tP);Woo=r(Aot,"VanConfig"),Aot.forEach(t),Hoo=r(vLe," (VAN model)"),vLe.forEach(t),Uoo=i(L),Ag=n(L,"LI",{});var FLe=s(Ag);Mne=n(FLe,"STRONG",{});var Lot=s(Mne);Joo=r(Lot,"vilt"),Lot.forEach(t),Yoo=r(FLe," \u2014 "),aP=n(FLe,"A",{href:!0});var yot=s(aP);Koo=r(yot,"ViltConfig"),yot.forEach(t),Zoo=r(FLe," (ViLT model)"),FLe.forEach(t),ero=i(L),Lg=n(L,"LI",{});var TLe=s(Lg);Ene=n(TLe,"STRONG",{});var xot=s(Ene);oro=r(xot,"vision-encoder-decoder"),xot.forEach(t),rro=r(TLe," \u2014 "),nP=n(TLe,"A",{href:!0});var $ot=s(nP);tro=r($ot,"VisionEncoderDecoderConfig"),$ot.forEach(t),aro=r(TLe," (Vision Encoder decoder model)"),TLe.forEach(t),nro=i(L),yg=n(L,"LI",{});var MLe=s(yg);Cne=n(MLe,"STRONG",{});var kot=s(Cne);sro=r(kot,"vision-text-dual-encoder"),kot.forEach(t),lro=r(MLe," \u2014 "),sP=n(MLe,"A",{href:!0});var Sot=s(sP);iro=r(Sot,"VisionTextDualEncoderConfig"),Sot.forEach(t),dro=r(MLe," (VisionTextDualEncoder model)"),MLe.forEach(t),cro=i(L),xg=n(L,"LI",{});var ELe=s(xg);wne=n(ELe,"STRONG",{});var Rot=s(wne);fro=r(Rot,"visual_bert"),Rot.forEach(t),mro=r(ELe," \u2014 "),lP=n(ELe,"A",{href:!0});var Pot=s(lP);gro=r(Pot,"VisualBertConfig"),Pot.forEach(t),hro=r(ELe," (VisualBERT model)"),ELe.forEach(t),pro=i(L),$g=n(L,"LI",{});var CLe=s($g);Ane=n(CLe,"STRONG",{});var Bot=s(Ane);_ro=r(Bot,"vit"),Bot.forEach(t),uro=r(CLe," \u2014 "),iP=n(CLe,"A",{href:!0});var Iot=s(iP);bro=r(Iot,"ViTConfig"),Iot.forEach(t),vro=r(CLe," (ViT model)"),CLe.forEach(t),Fro=i(L),kg=n(L,"LI",{});var wLe=s(kg);Lne=n(wLe,"STRONG",{});var Not=s(Lne);Tro=r(Not,"vit_mae"),Not.forEach(t),Mro=r(wLe," \u2014 "),dP=n(wLe,"A",{href:!0});var qot=s(dP);Ero=r(qot,"ViTMAEConfig"),qot.forEach(t),Cro=r(wLe," (ViTMAE model)"),wLe.forEach(t),wro=i(L),Sg=n(L,"LI",{});var ALe=s(Sg);yne=n(ALe,"STRONG",{});var jot=s(yne);Aro=r(jot,"wav2vec2"),jot.forEach(t),Lro=r(ALe," \u2014 "),cP=n(ALe,"A",{href:!0});var Dot=s(cP);yro=r(Dot,"Wav2Vec2Config"),Dot.forEach(t),xro=r(ALe," (Wav2Vec2 model)"),ALe.forEach(t),$ro=i(L),Rg=n(L,"LI",{});var LLe=s(Rg);xne=n(LLe,"STRONG",{});var Got=s(xne);kro=r(Got,"wav2vec2-conformer"),Got.forEach(t),Sro=r(LLe," \u2014 "),fP=n(LLe,"A",{href:!0});var Oot=s(fP);Rro=r(Oot,"Wav2Vec2ConformerConfig"),Oot.forEach(t),Pro=r(LLe," (Wav2Vec2-Conformer model)"),LLe.forEach(t),Bro=i(L),Pg=n(L,"LI",{});var yLe=s(Pg);$ne=n(yLe,"STRONG",{});var Vot=s($ne);Iro=r(Vot,"wavlm"),Vot.forEach(t),Nro=r(yLe," \u2014 "),mP=n(yLe,"A",{href:!0});var Xot=s(mP);qro=r(Xot,"WavLMConfig"),Xot.forEach(t),jro=r(yLe," (WavLM model)"),yLe.forEach(t),Dro=i(L),Bg=n(L,"LI",{});var xLe=s(Bg);kne=n(xLe,"STRONG",{});var zot=s(kne);Gro=r(zot,"xglm"),zot.forEach(t),Oro=r(xLe," \u2014 "),gP=n(xLe,"A",{href:!0});var Qot=s(gP);Vro=r(Qot,"XGLMConfig"),Qot.forEach(t),Xro=r(xLe," (XGLM model)"),xLe.forEach(t),zro=i(L),Ig=n(L,"LI",{});var $Le=s(Ig);Sne=n($Le,"STRONG",{});var Wot=s(Sne);Qro=r(Wot,"xlm"),Wot.forEach(t),Wro=r($Le," \u2014 "),hP=n($Le,"A",{href:!0});var Hot=s(hP);Hro=r(Hot,"XLMConfig"),Hot.forEach(t),Uro=r($Le," (XLM model)"),$Le.forEach(t),Jro=i(L),Ng=n(L,"LI",{});var kLe=s(Ng);Rne=n(kLe,"STRONG",{});var Uot=s(Rne);Yro=r(Uot,"xlm-prophetnet"),Uot.forEach(t),Kro=r(kLe," \u2014 "),pP=n(kLe,"A",{href:!0});var Jot=s(pP);Zro=r(Jot,"XLMProphetNetConfig"),Jot.forEach(t),eto=r(kLe," (XLM-ProphetNet model)"),kLe.forEach(t),oto=i(L),qg=n(L,"LI",{});var SLe=s(qg);Pne=n(SLe,"STRONG",{});var Yot=s(Pne);rto=r(Yot,"xlm-roberta"),Yot.forEach(t),tto=r(SLe," \u2014 "),_P=n(SLe,"A",{href:!0});var Kot=s(_P);ato=r(Kot,"XLMRobertaConfig"),Kot.forEach(t),nto=r(SLe," (XLM-RoBERTa model)"),SLe.forEach(t),sto=i(L),jg=n(L,"LI",{});var RLe=s(jg);Bne=n(RLe,"STRONG",{});var Zot=s(Bne);lto=r(Zot,"xlm-roberta-xl"),Zot.forEach(t),ito=r(RLe," \u2014 "),uP=n(RLe,"A",{href:!0});var ert=s(uP);dto=r(ert,"XLMRobertaXLConfig"),ert.forEach(t),cto=r(RLe," (XLM-RoBERTa-XL model)"),RLe.forEach(t),fto=i(L),Dg=n(L,"LI",{});var PLe=s(Dg);Ine=n(PLe,"STRONG",{});var ort=s(Ine);mto=r(ort,"xlnet"),ort.forEach(t),gto=r(PLe," \u2014 "),bP=n(PLe,"A",{href:!0});var rrt=s(bP);hto=r(rrt,"XLNetConfig"),rrt.forEach(t),pto=r(PLe," (XLNet model)"),PLe.forEach(t),_to=i(L),Gg=n(L,"LI",{});var BLe=s(Gg);Nne=n(BLe,"STRONG",{});var trt=s(Nne);uto=r(trt,"yolos"),trt.forEach(t),bto=r(BLe," \u2014 "),vP=n(BLe,"A",{href:!0});var art=s(vP);vto=r(art,"YolosConfig"),art.forEach(t),Fto=r(BLe," (YOLOS model)"),BLe.forEach(t),Tto=i(L),Og=n(L,"LI",{});var ILe=s(Og);qne=n(ILe,"STRONG",{});var nrt=s(qne);Mto=r(nrt,"yoso"),nrt.forEach(t),Eto=r(ILe," \u2014 "),FP=n(ILe,"A",{href:!0});var srt=s(FP);Cto=r(srt,"YosoConfig"),srt.forEach(t),wto=r(ILe," (YOSO model)"),ILe.forEach(t),L.forEach(t),Ato=i(tt),T(Vg.$$.fragment,tt),tt.forEach(t),Lto=i(rt),Xg=n(rt,"DIV",{class:!0});var iXe=s(Xg);T(DL.$$.fragment,iXe),yto=i(iXe),jne=n(iXe,"P",{});var lrt=s(jne);xto=r(lrt,"Register a new configuration for this class."),lrt.forEach(t),iXe.forEach(t),rt.forEach(t),dOe=i(f),Si=n(f,"H2",{class:!0});var dXe=s(Si);zg=n(dXe,"A",{id:!0,class:!0,href:!0});var irt=s(zg);Dne=n(irt,"SPAN",{});var drt=s(Dne);T(GL.$$.fragment,drt),drt.forEach(t),irt.forEach(t),$to=i(dXe),Gne=n(dXe,"SPAN",{});var crt=s(Gne);kto=r(crt,"AutoTokenizer"),crt.forEach(t),dXe.forEach(t),cOe=i(f),Ao=n(f,"DIV",{class:!0});var Hs=s(Ao);T(OL.$$.fragment,Hs),Sto=i(Hs),VL=n(Hs,"P",{});var cXe=s(VL);Rto=r(cXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TP=n(cXe,"A",{href:!0});var frt=s(TP);Pto=r(frt,"AutoTokenizer.from_pretrained()"),frt.forEach(t),Bto=r(cXe," class method."),cXe.forEach(t),Ito=i(Hs),XL=n(Hs,"P",{});var fXe=s(XL);Nto=r(fXe,"This class cannot be instantiated directly using "),One=n(fXe,"CODE",{});var mrt=s(One);qto=r(mrt,"__init__()"),mrt.forEach(t),jto=r(fXe," (throws an error)."),fXe.forEach(t),Dto=i(Hs),Lr=n(Hs,"DIV",{class:!0});var Us=s(Lr);T(zL.$$.fragment,Us),Gto=i(Us),Vne=n(Us,"P",{});var grt=s(Vne);Oto=r(grt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),grt.forEach(t),Vto=i(Us),ka=n(Us,"P",{});var RA=s(ka);Xto=r(RA,"The tokenizer class to instantiate is selected based on the "),Xne=n(RA,"CODE",{});var hrt=s(Xne);zto=r(hrt,"model_type"),hrt.forEach(t),Qto=r(RA,` property of the config object (either
passed as an argument or loaded from `),zne=n(RA,"CODE",{});var prt=s(zne);Wto=r(prt,"pretrained_model_name_or_path"),prt.forEach(t),Hto=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=n(RA,"CODE",{});var _rt=s(Qne);Uto=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),Jto=r(RA,":"),RA.forEach(t),Yto=i(Us),k=n(Us,"UL",{});var S=s(k);qn=n(S,"LI",{});var Y$=s(qn);Wne=n(Y$,"STRONG",{});var urt=s(Wne);Kto=r(urt,"albert"),urt.forEach(t),Zto=r(Y$," \u2014 "),MP=n(Y$,"A",{href:!0});var brt=s(MP);eao=r(brt,"AlbertTokenizer"),brt.forEach(t),oao=r(Y$," or "),EP=n(Y$,"A",{href:!0});var vrt=s(EP);rao=r(vrt,"AlbertTokenizerFast"),vrt.forEach(t),tao=r(Y$," (ALBERT model)"),Y$.forEach(t),aao=i(S),jn=n(S,"LI",{});var K$=s(jn);Hne=n(K$,"STRONG",{});var Frt=s(Hne);nao=r(Frt,"bart"),Frt.forEach(t),sao=r(K$," \u2014 "),CP=n(K$,"A",{href:!0});var Trt=s(CP);lao=r(Trt,"BartTokenizer"),Trt.forEach(t),iao=r(K$," or "),wP=n(K$,"A",{href:!0});var Mrt=s(wP);dao=r(Mrt,"BartTokenizerFast"),Mrt.forEach(t),cao=r(K$," (BART model)"),K$.forEach(t),fao=i(S),Dn=n(S,"LI",{});var Z$=s(Dn);Une=n(Z$,"STRONG",{});var Ert=s(Une);mao=r(Ert,"barthez"),Ert.forEach(t),gao=r(Z$," \u2014 "),AP=n(Z$,"A",{href:!0});var Crt=s(AP);hao=r(Crt,"BarthezTokenizer"),Crt.forEach(t),pao=r(Z$," or "),LP=n(Z$,"A",{href:!0});var wrt=s(LP);_ao=r(wrt,"BarthezTokenizerFast"),wrt.forEach(t),uao=r(Z$," (BARThez model)"),Z$.forEach(t),bao=i(S),Qg=n(S,"LI",{});var NLe=s(Qg);Jne=n(NLe,"STRONG",{});var Art=s(Jne);vao=r(Art,"bartpho"),Art.forEach(t),Fao=r(NLe," \u2014 "),yP=n(NLe,"A",{href:!0});var Lrt=s(yP);Tao=r(Lrt,"BartphoTokenizer"),Lrt.forEach(t),Mao=r(NLe," (BARTpho model)"),NLe.forEach(t),Eao=i(S),Gn=n(S,"LI",{});var ek=s(Gn);Yne=n(ek,"STRONG",{});var yrt=s(Yne);Cao=r(yrt,"bert"),yrt.forEach(t),wao=r(ek," \u2014 "),xP=n(ek,"A",{href:!0});var xrt=s(xP);Aao=r(xrt,"BertTokenizer"),xrt.forEach(t),Lao=r(ek," or "),$P=n(ek,"A",{href:!0});var $rt=s($P);yao=r($rt,"BertTokenizerFast"),$rt.forEach(t),xao=r(ek," (BERT model)"),ek.forEach(t),$ao=i(S),Wg=n(S,"LI",{});var qLe=s(Wg);Kne=n(qLe,"STRONG",{});var krt=s(Kne);kao=r(krt,"bert-generation"),krt.forEach(t),Sao=r(qLe," \u2014 "),kP=n(qLe,"A",{href:!0});var Srt=s(kP);Rao=r(Srt,"BertGenerationTokenizer"),Srt.forEach(t),Pao=r(qLe," (Bert Generation model)"),qLe.forEach(t),Bao=i(S),Hg=n(S,"LI",{});var jLe=s(Hg);Zne=n(jLe,"STRONG",{});var Rrt=s(Zne);Iao=r(Rrt,"bert-japanese"),Rrt.forEach(t),Nao=r(jLe," \u2014 "),SP=n(jLe,"A",{href:!0});var Prt=s(SP);qao=r(Prt,"BertJapaneseTokenizer"),Prt.forEach(t),jao=r(jLe," (BertJapanese model)"),jLe.forEach(t),Dao=i(S),Ug=n(S,"LI",{});var DLe=s(Ug);ese=n(DLe,"STRONG",{});var Brt=s(ese);Gao=r(Brt,"bertweet"),Brt.forEach(t),Oao=r(DLe," \u2014 "),RP=n(DLe,"A",{href:!0});var Irt=s(RP);Vao=r(Irt,"BertweetTokenizer"),Irt.forEach(t),Xao=r(DLe," (BERTweet model)"),DLe.forEach(t),zao=i(S),On=n(S,"LI",{});var ok=s(On);ose=n(ok,"STRONG",{});var Nrt=s(ose);Qao=r(Nrt,"big_bird"),Nrt.forEach(t),Wao=r(ok," \u2014 "),PP=n(ok,"A",{href:!0});var qrt=s(PP);Hao=r(qrt,"BigBirdTokenizer"),qrt.forEach(t),Uao=r(ok," or "),BP=n(ok,"A",{href:!0});var jrt=s(BP);Jao=r(jrt,"BigBirdTokenizerFast"),jrt.forEach(t),Yao=r(ok," (BigBird model)"),ok.forEach(t),Kao=i(S),Vn=n(S,"LI",{});var rk=s(Vn);rse=n(rk,"STRONG",{});var Drt=s(rse);Zao=r(Drt,"bigbird_pegasus"),Drt.forEach(t),eno=r(rk," \u2014 "),IP=n(rk,"A",{href:!0});var Grt=s(IP);ono=r(Grt,"PegasusTokenizer"),Grt.forEach(t),rno=r(rk," or "),NP=n(rk,"A",{href:!0});var Ort=s(NP);tno=r(Ort,"PegasusTokenizerFast"),Ort.forEach(t),ano=r(rk," (BigBird-Pegasus model)"),rk.forEach(t),nno=i(S),Xn=n(S,"LI",{});var tk=s(Xn);tse=n(tk,"STRONG",{});var Vrt=s(tse);sno=r(Vrt,"blenderbot"),Vrt.forEach(t),lno=r(tk," \u2014 "),qP=n(tk,"A",{href:!0});var Xrt=s(qP);ino=r(Xrt,"BlenderbotTokenizer"),Xrt.forEach(t),dno=r(tk," or "),jP=n(tk,"A",{href:!0});var zrt=s(jP);cno=r(zrt,"BlenderbotTokenizerFast"),zrt.forEach(t),fno=r(tk," (Blenderbot model)"),tk.forEach(t),mno=i(S),Jg=n(S,"LI",{});var GLe=s(Jg);ase=n(GLe,"STRONG",{});var Qrt=s(ase);gno=r(Qrt,"blenderbot-small"),Qrt.forEach(t),hno=r(GLe," \u2014 "),DP=n(GLe,"A",{href:!0});var Wrt=s(DP);pno=r(Wrt,"BlenderbotSmallTokenizer"),Wrt.forEach(t),_no=r(GLe," (BlenderbotSmall model)"),GLe.forEach(t),uno=i(S),Yg=n(S,"LI",{});var OLe=s(Yg);nse=n(OLe,"STRONG",{});var Hrt=s(nse);bno=r(Hrt,"bloom"),Hrt.forEach(t),vno=r(OLe," \u2014 "),GP=n(OLe,"A",{href:!0});var Urt=s(GP);Fno=r(Urt,"BloomTokenizerFast"),Urt.forEach(t),Tno=r(OLe," (BLOOM model)"),OLe.forEach(t),Mno=i(S),Kg=n(S,"LI",{});var VLe=s(Kg);sse=n(VLe,"STRONG",{});var Jrt=s(sse);Eno=r(Jrt,"byt5"),Jrt.forEach(t),Cno=r(VLe," \u2014 "),OP=n(VLe,"A",{href:!0});var Yrt=s(OP);wno=r(Yrt,"ByT5Tokenizer"),Yrt.forEach(t),Ano=r(VLe," (ByT5 model)"),VLe.forEach(t),Lno=i(S),zn=n(S,"LI",{});var ak=s(zn);lse=n(ak,"STRONG",{});var Krt=s(lse);yno=r(Krt,"camembert"),Krt.forEach(t),xno=r(ak," \u2014 "),VP=n(ak,"A",{href:!0});var Zrt=s(VP);$no=r(Zrt,"CamembertTokenizer"),Zrt.forEach(t),kno=r(ak," or "),XP=n(ak,"A",{href:!0});var ett=s(XP);Sno=r(ett,"CamembertTokenizerFast"),ett.forEach(t),Rno=r(ak," (CamemBERT model)"),ak.forEach(t),Pno=i(S),Zg=n(S,"LI",{});var XLe=s(Zg);ise=n(XLe,"STRONG",{});var ott=s(ise);Bno=r(ott,"canine"),ott.forEach(t),Ino=r(XLe," \u2014 "),zP=n(XLe,"A",{href:!0});var rtt=s(zP);Nno=r(rtt,"CanineTokenizer"),rtt.forEach(t),qno=r(XLe," (CANINE model)"),XLe.forEach(t),jno=i(S),Qn=n(S,"LI",{});var nk=s(Qn);dse=n(nk,"STRONG",{});var ttt=s(dse);Dno=r(ttt,"clip"),ttt.forEach(t),Gno=r(nk," \u2014 "),QP=n(nk,"A",{href:!0});var att=s(QP);Ono=r(att,"CLIPTokenizer"),att.forEach(t),Vno=r(nk," or "),WP=n(nk,"A",{href:!0});var ntt=s(WP);Xno=r(ntt,"CLIPTokenizerFast"),ntt.forEach(t),zno=r(nk," (CLIP model)"),nk.forEach(t),Qno=i(S),Wn=n(S,"LI",{});var sk=s(Wn);cse=n(sk,"STRONG",{});var stt=s(cse);Wno=r(stt,"codegen"),stt.forEach(t),Hno=r(sk," \u2014 "),HP=n(sk,"A",{href:!0});var ltt=s(HP);Uno=r(ltt,"CodeGenTokenizer"),ltt.forEach(t),Jno=r(sk," or "),UP=n(sk,"A",{href:!0});var itt=s(UP);Yno=r(itt,"CodeGenTokenizerFast"),itt.forEach(t),Kno=r(sk," (CodeGen model)"),sk.forEach(t),Zno=i(S),Hn=n(S,"LI",{});var lk=s(Hn);fse=n(lk,"STRONG",{});var dtt=s(fse);eso=r(dtt,"convbert"),dtt.forEach(t),oso=r(lk," \u2014 "),JP=n(lk,"A",{href:!0});var ctt=s(JP);rso=r(ctt,"ConvBertTokenizer"),ctt.forEach(t),tso=r(lk," or "),YP=n(lk,"A",{href:!0});var ftt=s(YP);aso=r(ftt,"ConvBertTokenizerFast"),ftt.forEach(t),nso=r(lk," (ConvBERT model)"),lk.forEach(t),sso=i(S),Un=n(S,"LI",{});var ik=s(Un);mse=n(ik,"STRONG",{});var mtt=s(mse);lso=r(mtt,"cpm"),mtt.forEach(t),iso=r(ik," \u2014 "),KP=n(ik,"A",{href:!0});var gtt=s(KP);dso=r(gtt,"CpmTokenizer"),gtt.forEach(t),cso=r(ik," or "),ZP=n(ik,"A",{href:!0});var htt=s(ZP);fso=r(htt,"CpmTokenizerFast"),htt.forEach(t),mso=r(ik," (CPM model)"),ik.forEach(t),gso=i(S),eh=n(S,"LI",{});var zLe=s(eh);gse=n(zLe,"STRONG",{});var ptt=s(gse);hso=r(ptt,"ctrl"),ptt.forEach(t),pso=r(zLe," \u2014 "),eB=n(zLe,"A",{href:!0});var _tt=s(eB);_so=r(_tt,"CTRLTokenizer"),_tt.forEach(t),uso=r(zLe," (CTRL model)"),zLe.forEach(t),bso=i(S),Jn=n(S,"LI",{});var dk=s(Jn);hse=n(dk,"STRONG",{});var utt=s(hse);vso=r(utt,"data2vec-text"),utt.forEach(t),Fso=r(dk," \u2014 "),oB=n(dk,"A",{href:!0});var btt=s(oB);Tso=r(btt,"RobertaTokenizer"),btt.forEach(t),Mso=r(dk," or "),rB=n(dk,"A",{href:!0});var vtt=s(rB);Eso=r(vtt,"RobertaTokenizerFast"),vtt.forEach(t),Cso=r(dk," (Data2VecText model)"),dk.forEach(t),wso=i(S),Yn=n(S,"LI",{});var ck=s(Yn);pse=n(ck,"STRONG",{});var Ftt=s(pse);Aso=r(Ftt,"deberta"),Ftt.forEach(t),Lso=r(ck," \u2014 "),tB=n(ck,"A",{href:!0});var Ttt=s(tB);yso=r(Ttt,"DebertaTokenizer"),Ttt.forEach(t),xso=r(ck," or "),aB=n(ck,"A",{href:!0});var Mtt=s(aB);$so=r(Mtt,"DebertaTokenizerFast"),Mtt.forEach(t),kso=r(ck," (DeBERTa model)"),ck.forEach(t),Sso=i(S),Kn=n(S,"LI",{});var fk=s(Kn);_se=n(fk,"STRONG",{});var Ett=s(_se);Rso=r(Ett,"deberta-v2"),Ett.forEach(t),Pso=r(fk," \u2014 "),nB=n(fk,"A",{href:!0});var Ctt=s(nB);Bso=r(Ctt,"DebertaV2Tokenizer"),Ctt.forEach(t),Iso=r(fk," or "),sB=n(fk,"A",{href:!0});var wtt=s(sB);Nso=r(wtt,"DebertaV2TokenizerFast"),wtt.forEach(t),qso=r(fk," (DeBERTa-v2 model)"),fk.forEach(t),jso=i(S),Zn=n(S,"LI",{});var mk=s(Zn);use=n(mk,"STRONG",{});var Att=s(use);Dso=r(Att,"distilbert"),Att.forEach(t),Gso=r(mk," \u2014 "),lB=n(mk,"A",{href:!0});var Ltt=s(lB);Oso=r(Ltt,"DistilBertTokenizer"),Ltt.forEach(t),Vso=r(mk," or "),iB=n(mk,"A",{href:!0});var ytt=s(iB);Xso=r(ytt,"DistilBertTokenizerFast"),ytt.forEach(t),zso=r(mk," (DistilBERT model)"),mk.forEach(t),Qso=i(S),es=n(S,"LI",{});var gk=s(es);bse=n(gk,"STRONG",{});var xtt=s(bse);Wso=r(xtt,"dpr"),xtt.forEach(t),Hso=r(gk," \u2014 "),dB=n(gk,"A",{href:!0});var $tt=s(dB);Uso=r($tt,"DPRQuestionEncoderTokenizer"),$tt.forEach(t),Jso=r(gk," or "),cB=n(gk,"A",{href:!0});var ktt=s(cB);Yso=r(ktt,"DPRQuestionEncoderTokenizerFast"),ktt.forEach(t),Kso=r(gk," (DPR model)"),gk.forEach(t),Zso=i(S),os=n(S,"LI",{});var hk=s(os);vse=n(hk,"STRONG",{});var Stt=s(vse);elo=r(Stt,"electra"),Stt.forEach(t),olo=r(hk," \u2014 "),fB=n(hk,"A",{href:!0});var Rtt=s(fB);rlo=r(Rtt,"ElectraTokenizer"),Rtt.forEach(t),tlo=r(hk," or "),mB=n(hk,"A",{href:!0});var Ptt=s(mB);alo=r(Ptt,"ElectraTokenizerFast"),Ptt.forEach(t),nlo=r(hk," (ELECTRA model)"),hk.forEach(t),slo=i(S),oh=n(S,"LI",{});var QLe=s(oh);Fse=n(QLe,"STRONG",{});var Btt=s(Fse);llo=r(Btt,"flaubert"),Btt.forEach(t),ilo=r(QLe," \u2014 "),gB=n(QLe,"A",{href:!0});var Itt=s(gB);dlo=r(Itt,"FlaubertTokenizer"),Itt.forEach(t),clo=r(QLe," (FlauBERT model)"),QLe.forEach(t),flo=i(S),rs=n(S,"LI",{});var pk=s(rs);Tse=n(pk,"STRONG",{});var Ntt=s(Tse);mlo=r(Ntt,"fnet"),Ntt.forEach(t),glo=r(pk," \u2014 "),hB=n(pk,"A",{href:!0});var qtt=s(hB);hlo=r(qtt,"FNetTokenizer"),qtt.forEach(t),plo=r(pk," or "),pB=n(pk,"A",{href:!0});var jtt=s(pB);_lo=r(jtt,"FNetTokenizerFast"),jtt.forEach(t),ulo=r(pk," (FNet model)"),pk.forEach(t),blo=i(S),rh=n(S,"LI",{});var WLe=s(rh);Mse=n(WLe,"STRONG",{});var Dtt=s(Mse);vlo=r(Dtt,"fsmt"),Dtt.forEach(t),Flo=r(WLe," \u2014 "),_B=n(WLe,"A",{href:!0});var Gtt=s(_B);Tlo=r(Gtt,"FSMTTokenizer"),Gtt.forEach(t),Mlo=r(WLe," (FairSeq Machine-Translation model)"),WLe.forEach(t),Elo=i(S),ts=n(S,"LI",{});var _k=s(ts);Ese=n(_k,"STRONG",{});var Ott=s(Ese);Clo=r(Ott,"funnel"),Ott.forEach(t),wlo=r(_k," \u2014 "),uB=n(_k,"A",{href:!0});var Vtt=s(uB);Alo=r(Vtt,"FunnelTokenizer"),Vtt.forEach(t),Llo=r(_k," or "),bB=n(_k,"A",{href:!0});var Xtt=s(bB);ylo=r(Xtt,"FunnelTokenizerFast"),Xtt.forEach(t),xlo=r(_k," (Funnel Transformer model)"),_k.forEach(t),$lo=i(S),as=n(S,"LI",{});var uk=s(as);Cse=n(uk,"STRONG",{});var ztt=s(Cse);klo=r(ztt,"gpt2"),ztt.forEach(t),Slo=r(uk," \u2014 "),vB=n(uk,"A",{href:!0});var Qtt=s(vB);Rlo=r(Qtt,"GPT2Tokenizer"),Qtt.forEach(t),Plo=r(uk," or "),FB=n(uk,"A",{href:!0});var Wtt=s(FB);Blo=r(Wtt,"GPT2TokenizerFast"),Wtt.forEach(t),Ilo=r(uk," (OpenAI GPT-2 model)"),uk.forEach(t),Nlo=i(S),ns=n(S,"LI",{});var bk=s(ns);wse=n(bk,"STRONG",{});var Htt=s(wse);qlo=r(Htt,"gpt_neo"),Htt.forEach(t),jlo=r(bk," \u2014 "),TB=n(bk,"A",{href:!0});var Utt=s(TB);Dlo=r(Utt,"GPT2Tokenizer"),Utt.forEach(t),Glo=r(bk," or "),MB=n(bk,"A",{href:!0});var Jtt=s(MB);Olo=r(Jtt,"GPT2TokenizerFast"),Jtt.forEach(t),Vlo=r(bk," (GPT Neo model)"),bk.forEach(t),Xlo=i(S),th=n(S,"LI",{});var HLe=s(th);Ase=n(HLe,"STRONG",{});var Ytt=s(Ase);zlo=r(Ytt,"gpt_neox"),Ytt.forEach(t),Qlo=r(HLe," \u2014 "),EB=n(HLe,"A",{href:!0});var Ktt=s(EB);Wlo=r(Ktt,"GPTNeoXTokenizerFast"),Ktt.forEach(t),Hlo=r(HLe," (GPT NeoX model)"),HLe.forEach(t),Ulo=i(S),ss=n(S,"LI",{});var vk=s(ss);Lse=n(vk,"STRONG",{});var Ztt=s(Lse);Jlo=r(Ztt,"gptj"),Ztt.forEach(t),Ylo=r(vk," \u2014 "),CB=n(vk,"A",{href:!0});var eat=s(CB);Klo=r(eat,"GPT2Tokenizer"),eat.forEach(t),Zlo=r(vk," or "),wB=n(vk,"A",{href:!0});var oat=s(wB);eio=r(oat,"GPT2TokenizerFast"),oat.forEach(t),oio=r(vk," (GPT-J model)"),vk.forEach(t),rio=i(S),ls=n(S,"LI",{});var Fk=s(ls);yse=n(Fk,"STRONG",{});var rat=s(yse);tio=r(rat,"herbert"),rat.forEach(t),aio=r(Fk," \u2014 "),AB=n(Fk,"A",{href:!0});var tat=s(AB);nio=r(tat,"HerbertTokenizer"),tat.forEach(t),sio=r(Fk," or "),LB=n(Fk,"A",{href:!0});var aat=s(LB);lio=r(aat,"HerbertTokenizerFast"),aat.forEach(t),iio=r(Fk," (HerBERT model)"),Fk.forEach(t),dio=i(S),ah=n(S,"LI",{});var ULe=s(ah);xse=n(ULe,"STRONG",{});var nat=s(xse);cio=r(nat,"hubert"),nat.forEach(t),fio=r(ULe," \u2014 "),yB=n(ULe,"A",{href:!0});var sat=s(yB);mio=r(sat,"Wav2Vec2CTCTokenizer"),sat.forEach(t),gio=r(ULe," (Hubert model)"),ULe.forEach(t),hio=i(S),is=n(S,"LI",{});var Tk=s(is);$se=n(Tk,"STRONG",{});var lat=s($se);pio=r(lat,"ibert"),lat.forEach(t),_io=r(Tk," \u2014 "),xB=n(Tk,"A",{href:!0});var iat=s(xB);uio=r(iat,"RobertaTokenizer"),iat.forEach(t),bio=r(Tk," or "),$B=n(Tk,"A",{href:!0});var dat=s($B);vio=r(dat,"RobertaTokenizerFast"),dat.forEach(t),Fio=r(Tk," (I-BERT model)"),Tk.forEach(t),Tio=i(S),ds=n(S,"LI",{});var Mk=s(ds);kse=n(Mk,"STRONG",{});var cat=s(kse);Mio=r(cat,"layoutlm"),cat.forEach(t),Eio=r(Mk," \u2014 "),kB=n(Mk,"A",{href:!0});var fat=s(kB);Cio=r(fat,"LayoutLMTokenizer"),fat.forEach(t),wio=r(Mk," or "),SB=n(Mk,"A",{href:!0});var mat=s(SB);Aio=r(mat,"LayoutLMTokenizerFast"),mat.forEach(t),Lio=r(Mk," (LayoutLM model)"),Mk.forEach(t),yio=i(S),cs=n(S,"LI",{});var Ek=s(cs);Sse=n(Ek,"STRONG",{});var gat=s(Sse);xio=r(gat,"layoutlmv2"),gat.forEach(t),$io=r(Ek," \u2014 "),RB=n(Ek,"A",{href:!0});var hat=s(RB);kio=r(hat,"LayoutLMv2Tokenizer"),hat.forEach(t),Sio=r(Ek," or "),PB=n(Ek,"A",{href:!0});var pat=s(PB);Rio=r(pat,"LayoutLMv2TokenizerFast"),pat.forEach(t),Pio=r(Ek," (LayoutLMv2 model)"),Ek.forEach(t),Bio=i(S),fs=n(S,"LI",{});var Ck=s(fs);Rse=n(Ck,"STRONG",{});var _at=s(Rse);Iio=r(_at,"layoutlmv3"),_at.forEach(t),Nio=r(Ck," \u2014 "),BB=n(Ck,"A",{href:!0});var uat=s(BB);qio=r(uat,"LayoutLMv3Tokenizer"),uat.forEach(t),jio=r(Ck," or "),IB=n(Ck,"A",{href:!0});var bat=s(IB);Dio=r(bat,"LayoutLMv3TokenizerFast"),bat.forEach(t),Gio=r(Ck," (LayoutLMv3 model)"),Ck.forEach(t),Oio=i(S),ms=n(S,"LI",{});var wk=s(ms);Pse=n(wk,"STRONG",{});var vat=s(Pse);Vio=r(vat,"layoutxlm"),vat.forEach(t),Xio=r(wk," \u2014 "),NB=n(wk,"A",{href:!0});var Fat=s(NB);zio=r(Fat,"LayoutXLMTokenizer"),Fat.forEach(t),Qio=r(wk," or "),qB=n(wk,"A",{href:!0});var Tat=s(qB);Wio=r(Tat,"LayoutXLMTokenizerFast"),Tat.forEach(t),Hio=r(wk," (LayoutXLM model)"),wk.forEach(t),Uio=i(S),gs=n(S,"LI",{});var Ak=s(gs);Bse=n(Ak,"STRONG",{});var Mat=s(Bse);Jio=r(Mat,"led"),Mat.forEach(t),Yio=r(Ak," \u2014 "),jB=n(Ak,"A",{href:!0});var Eat=s(jB);Kio=r(Eat,"LEDTokenizer"),Eat.forEach(t),Zio=r(Ak," or "),DB=n(Ak,"A",{href:!0});var Cat=s(DB);edo=r(Cat,"LEDTokenizerFast"),Cat.forEach(t),odo=r(Ak," (LED model)"),Ak.forEach(t),rdo=i(S),hs=n(S,"LI",{});var Lk=s(hs);Ise=n(Lk,"STRONG",{});var wat=s(Ise);tdo=r(wat,"longformer"),wat.forEach(t),ado=r(Lk," \u2014 "),GB=n(Lk,"A",{href:!0});var Aat=s(GB);ndo=r(Aat,"LongformerTokenizer"),Aat.forEach(t),sdo=r(Lk," or "),OB=n(Lk,"A",{href:!0});var Lat=s(OB);ldo=r(Lat,"LongformerTokenizerFast"),Lat.forEach(t),ido=r(Lk," (Longformer model)"),Lk.forEach(t),ddo=i(S),ps=n(S,"LI",{});var yk=s(ps);Nse=n(yk,"STRONG",{});var yat=s(Nse);cdo=r(yat,"longt5"),yat.forEach(t),fdo=r(yk," \u2014 "),VB=n(yk,"A",{href:!0});var xat=s(VB);mdo=r(xat,"T5Tokenizer"),xat.forEach(t),gdo=r(yk," or "),XB=n(yk,"A",{href:!0});var $at=s(XB);hdo=r($at,"T5TokenizerFast"),$at.forEach(t),pdo=r(yk," (LongT5 model)"),yk.forEach(t),_do=i(S),nh=n(S,"LI",{});var JLe=s(nh);qse=n(JLe,"STRONG",{});var kat=s(qse);udo=r(kat,"luke"),kat.forEach(t),bdo=r(JLe," \u2014 "),zB=n(JLe,"A",{href:!0});var Sat=s(zB);vdo=r(Sat,"LukeTokenizer"),Sat.forEach(t),Fdo=r(JLe," (LUKE model)"),JLe.forEach(t),Tdo=i(S),_s=n(S,"LI",{});var xk=s(_s);jse=n(xk,"STRONG",{});var Rat=s(jse);Mdo=r(Rat,"lxmert"),Rat.forEach(t),Edo=r(xk," \u2014 "),QB=n(xk,"A",{href:!0});var Pat=s(QB);Cdo=r(Pat,"LxmertTokenizer"),Pat.forEach(t),wdo=r(xk," or "),WB=n(xk,"A",{href:!0});var Bat=s(WB);Ado=r(Bat,"LxmertTokenizerFast"),Bat.forEach(t),Ldo=r(xk," (LXMERT model)"),xk.forEach(t),ydo=i(S),sh=n(S,"LI",{});var YLe=s(sh);Dse=n(YLe,"STRONG",{});var Iat=s(Dse);xdo=r(Iat,"m2m_100"),Iat.forEach(t),$do=r(YLe," \u2014 "),HB=n(YLe,"A",{href:!0});var Nat=s(HB);kdo=r(Nat,"M2M100Tokenizer"),Nat.forEach(t),Sdo=r(YLe," (M2M100 model)"),YLe.forEach(t),Rdo=i(S),lh=n(S,"LI",{});var KLe=s(lh);Gse=n(KLe,"STRONG",{});var qat=s(Gse);Pdo=r(qat,"marian"),qat.forEach(t),Bdo=r(KLe," \u2014 "),UB=n(KLe,"A",{href:!0});var jat=s(UB);Ido=r(jat,"MarianTokenizer"),jat.forEach(t),Ndo=r(KLe," (Marian model)"),KLe.forEach(t),qdo=i(S),us=n(S,"LI",{});var $k=s(us);Ose=n($k,"STRONG",{});var Dat=s(Ose);jdo=r(Dat,"mbart"),Dat.forEach(t),Ddo=r($k," \u2014 "),JB=n($k,"A",{href:!0});var Gat=s(JB);Gdo=r(Gat,"MBartTokenizer"),Gat.forEach(t),Odo=r($k," or "),YB=n($k,"A",{href:!0});var Oat=s(YB);Vdo=r(Oat,"MBartTokenizerFast"),Oat.forEach(t),Xdo=r($k," (mBART model)"),$k.forEach(t),zdo=i(S),bs=n(S,"LI",{});var kk=s(bs);Vse=n(kk,"STRONG",{});var Vat=s(Vse);Qdo=r(Vat,"mbart50"),Vat.forEach(t),Wdo=r(kk," \u2014 "),KB=n(kk,"A",{href:!0});var Xat=s(KB);Hdo=r(Xat,"MBart50Tokenizer"),Xat.forEach(t),Udo=r(kk," or "),ZB=n(kk,"A",{href:!0});var zat=s(ZB);Jdo=r(zat,"MBart50TokenizerFast"),zat.forEach(t),Ydo=r(kk," (mBART-50 model)"),kk.forEach(t),Kdo=i(S),vs=n(S,"LI",{});var Sk=s(vs);Xse=n(Sk,"STRONG",{});var Qat=s(Xse);Zdo=r(Qat,"megatron-bert"),Qat.forEach(t),eco=r(Sk," \u2014 "),eI=n(Sk,"A",{href:!0});var Wat=s(eI);oco=r(Wat,"BertTokenizer"),Wat.forEach(t),rco=r(Sk," or "),oI=n(Sk,"A",{href:!0});var Hat=s(oI);tco=r(Hat,"BertTokenizerFast"),Hat.forEach(t),aco=r(Sk," (Megatron-BERT model)"),Sk.forEach(t),nco=i(S),ih=n(S,"LI",{});var ZLe=s(ih);zse=n(ZLe,"STRONG",{});var Uat=s(zse);sco=r(Uat,"mluke"),Uat.forEach(t),lco=r(ZLe," \u2014 "),rI=n(ZLe,"A",{href:!0});var Jat=s(rI);ico=r(Jat,"MLukeTokenizer"),Jat.forEach(t),dco=r(ZLe," (mLUKE model)"),ZLe.forEach(t),cco=i(S),Fs=n(S,"LI",{});var Rk=s(Fs);Qse=n(Rk,"STRONG",{});var Yat=s(Qse);fco=r(Yat,"mobilebert"),Yat.forEach(t),mco=r(Rk," \u2014 "),tI=n(Rk,"A",{href:!0});var Kat=s(tI);gco=r(Kat,"MobileBertTokenizer"),Kat.forEach(t),hco=r(Rk," or "),aI=n(Rk,"A",{href:!0});var Zat=s(aI);pco=r(Zat,"MobileBertTokenizerFast"),Zat.forEach(t),_co=r(Rk," (MobileBERT model)"),Rk.forEach(t),uco=i(S),Ts=n(S,"LI",{});var Pk=s(Ts);Wse=n(Pk,"STRONG",{});var ent=s(Wse);bco=r(ent,"mpnet"),ent.forEach(t),vco=r(Pk," \u2014 "),nI=n(Pk,"A",{href:!0});var ont=s(nI);Fco=r(ont,"MPNetTokenizer"),ont.forEach(t),Tco=r(Pk," or "),sI=n(Pk,"A",{href:!0});var rnt=s(sI);Mco=r(rnt,"MPNetTokenizerFast"),rnt.forEach(t),Eco=r(Pk," (MPNet model)"),Pk.forEach(t),Cco=i(S),Ms=n(S,"LI",{});var Bk=s(Ms);Hse=n(Bk,"STRONG",{});var tnt=s(Hse);wco=r(tnt,"mt5"),tnt.forEach(t),Aco=r(Bk," \u2014 "),lI=n(Bk,"A",{href:!0});var ant=s(lI);Lco=r(ant,"MT5Tokenizer"),ant.forEach(t),yco=r(Bk," or "),iI=n(Bk,"A",{href:!0});var nnt=s(iI);xco=r(nnt,"MT5TokenizerFast"),nnt.forEach(t),$co=r(Bk," (MT5 model)"),Bk.forEach(t),kco=i(S),Es=n(S,"LI",{});var Ik=s(Es);Use=n(Ik,"STRONG",{});var snt=s(Use);Sco=r(snt,"nezha"),snt.forEach(t),Rco=r(Ik," \u2014 "),dI=n(Ik,"A",{href:!0});var lnt=s(dI);Pco=r(lnt,"BertTokenizer"),lnt.forEach(t),Bco=r(Ik," or "),cI=n(Ik,"A",{href:!0});var int=s(cI);Ico=r(int,"BertTokenizerFast"),int.forEach(t),Nco=r(Ik," (Nezha model)"),Ik.forEach(t),qco=i(S),Cs=n(S,"LI",{});var Nk=s(Cs);Jse=n(Nk,"STRONG",{});var dnt=s(Jse);jco=r(dnt,"nystromformer"),dnt.forEach(t),Dco=r(Nk," \u2014 "),fI=n(Nk,"A",{href:!0});var cnt=s(fI);Gco=r(cnt,"AlbertTokenizer"),cnt.forEach(t),Oco=r(Nk," or "),mI=n(Nk,"A",{href:!0});var fnt=s(mI);Vco=r(fnt,"AlbertTokenizerFast"),fnt.forEach(t),Xco=r(Nk," (Nystr\xF6mformer model)"),Nk.forEach(t),zco=i(S),ws=n(S,"LI",{});var qk=s(ws);Yse=n(qk,"STRONG",{});var mnt=s(Yse);Qco=r(mnt,"openai-gpt"),mnt.forEach(t),Wco=r(qk," \u2014 "),gI=n(qk,"A",{href:!0});var gnt=s(gI);Hco=r(gnt,"OpenAIGPTTokenizer"),gnt.forEach(t),Uco=r(qk," or "),hI=n(qk,"A",{href:!0});var hnt=s(hI);Jco=r(hnt,"OpenAIGPTTokenizerFast"),hnt.forEach(t),Yco=r(qk," (OpenAI GPT model)"),qk.forEach(t),Kco=i(S),dh=n(S,"LI",{});var eye=s(dh);Kse=n(eye,"STRONG",{});var pnt=s(Kse);Zco=r(pnt,"opt"),pnt.forEach(t),efo=r(eye," \u2014 "),pI=n(eye,"A",{href:!0});var _nt=s(pI);ofo=r(_nt,"GPT2Tokenizer"),_nt.forEach(t),rfo=r(eye," (OPT model)"),eye.forEach(t),tfo=i(S),As=n(S,"LI",{});var jk=s(As);Zse=n(jk,"STRONG",{});var unt=s(Zse);afo=r(unt,"pegasus"),unt.forEach(t),nfo=r(jk," \u2014 "),_I=n(jk,"A",{href:!0});var bnt=s(_I);sfo=r(bnt,"PegasusTokenizer"),bnt.forEach(t),lfo=r(jk," or "),uI=n(jk,"A",{href:!0});var vnt=s(uI);ifo=r(vnt,"PegasusTokenizerFast"),vnt.forEach(t),dfo=r(jk," (Pegasus model)"),jk.forEach(t),cfo=i(S),ch=n(S,"LI",{});var oye=s(ch);ele=n(oye,"STRONG",{});var Fnt=s(ele);ffo=r(Fnt,"perceiver"),Fnt.forEach(t),mfo=r(oye," \u2014 "),bI=n(oye,"A",{href:!0});var Tnt=s(bI);gfo=r(Tnt,"PerceiverTokenizer"),Tnt.forEach(t),hfo=r(oye," (Perceiver model)"),oye.forEach(t),pfo=i(S),fh=n(S,"LI",{});var rye=s(fh);ole=n(rye,"STRONG",{});var Mnt=s(ole);_fo=r(Mnt,"phobert"),Mnt.forEach(t),ufo=r(rye," \u2014 "),vI=n(rye,"A",{href:!0});var Ent=s(vI);bfo=r(Ent,"PhobertTokenizer"),Ent.forEach(t),vfo=r(rye," (PhoBERT model)"),rye.forEach(t),Ffo=i(S),mh=n(S,"LI",{});var tye=s(mh);rle=n(tye,"STRONG",{});var Cnt=s(rle);Tfo=r(Cnt,"plbart"),Cnt.forEach(t),Mfo=r(tye," \u2014 "),FI=n(tye,"A",{href:!0});var wnt=s(FI);Efo=r(wnt,"PLBartTokenizer"),wnt.forEach(t),Cfo=r(tye," (PLBart model)"),tye.forEach(t),wfo=i(S),gh=n(S,"LI",{});var aye=s(gh);tle=n(aye,"STRONG",{});var Ant=s(tle);Afo=r(Ant,"prophetnet"),Ant.forEach(t),Lfo=r(aye," \u2014 "),TI=n(aye,"A",{href:!0});var Lnt=s(TI);yfo=r(Lnt,"ProphetNetTokenizer"),Lnt.forEach(t),xfo=r(aye," (ProphetNet model)"),aye.forEach(t),$fo=i(S),Ls=n(S,"LI",{});var Dk=s(Ls);ale=n(Dk,"STRONG",{});var ynt=s(ale);kfo=r(ynt,"qdqbert"),ynt.forEach(t),Sfo=r(Dk," \u2014 "),MI=n(Dk,"A",{href:!0});var xnt=s(MI);Rfo=r(xnt,"BertTokenizer"),xnt.forEach(t),Pfo=r(Dk," or "),EI=n(Dk,"A",{href:!0});var $nt=s(EI);Bfo=r($nt,"BertTokenizerFast"),$nt.forEach(t),Ifo=r(Dk," (QDQBert model)"),Dk.forEach(t),Nfo=i(S),hh=n(S,"LI",{});var nye=s(hh);nle=n(nye,"STRONG",{});var knt=s(nle);qfo=r(knt,"rag"),knt.forEach(t),jfo=r(nye," \u2014 "),CI=n(nye,"A",{href:!0});var Snt=s(CI);Dfo=r(Snt,"RagTokenizer"),Snt.forEach(t),Gfo=r(nye," (RAG model)"),nye.forEach(t),Ofo=i(S),ys=n(S,"LI",{});var Gk=s(ys);sle=n(Gk,"STRONG",{});var Rnt=s(sle);Vfo=r(Rnt,"realm"),Rnt.forEach(t),Xfo=r(Gk," \u2014 "),wI=n(Gk,"A",{href:!0});var Pnt=s(wI);zfo=r(Pnt,"RealmTokenizer"),Pnt.forEach(t),Qfo=r(Gk," or "),AI=n(Gk,"A",{href:!0});var Bnt=s(AI);Wfo=r(Bnt,"RealmTokenizerFast"),Bnt.forEach(t),Hfo=r(Gk," (REALM model)"),Gk.forEach(t),Ufo=i(S),xs=n(S,"LI",{});var Ok=s(xs);lle=n(Ok,"STRONG",{});var Int=s(lle);Jfo=r(Int,"reformer"),Int.forEach(t),Yfo=r(Ok," \u2014 "),LI=n(Ok,"A",{href:!0});var Nnt=s(LI);Kfo=r(Nnt,"ReformerTokenizer"),Nnt.forEach(t),Zfo=r(Ok," or "),yI=n(Ok,"A",{href:!0});var qnt=s(yI);emo=r(qnt,"ReformerTokenizerFast"),qnt.forEach(t),omo=r(Ok," (Reformer model)"),Ok.forEach(t),rmo=i(S),$s=n(S,"LI",{});var Vk=s($s);ile=n(Vk,"STRONG",{});var jnt=s(ile);tmo=r(jnt,"rembert"),jnt.forEach(t),amo=r(Vk," \u2014 "),xI=n(Vk,"A",{href:!0});var Dnt=s(xI);nmo=r(Dnt,"RemBertTokenizer"),Dnt.forEach(t),smo=r(Vk," or "),$I=n(Vk,"A",{href:!0});var Gnt=s($I);lmo=r(Gnt,"RemBertTokenizerFast"),Gnt.forEach(t),imo=r(Vk," (RemBERT model)"),Vk.forEach(t),dmo=i(S),ks=n(S,"LI",{});var Xk=s(ks);dle=n(Xk,"STRONG",{});var Ont=s(dle);cmo=r(Ont,"retribert"),Ont.forEach(t),fmo=r(Xk," \u2014 "),kI=n(Xk,"A",{href:!0});var Vnt=s(kI);mmo=r(Vnt,"RetriBertTokenizer"),Vnt.forEach(t),gmo=r(Xk," or "),SI=n(Xk,"A",{href:!0});var Xnt=s(SI);hmo=r(Xnt,"RetriBertTokenizerFast"),Xnt.forEach(t),pmo=r(Xk," (RetriBERT model)"),Xk.forEach(t),_mo=i(S),Ss=n(S,"LI",{});var zk=s(Ss);cle=n(zk,"STRONG",{});var znt=s(cle);umo=r(znt,"roberta"),znt.forEach(t),bmo=r(zk," \u2014 "),RI=n(zk,"A",{href:!0});var Qnt=s(RI);vmo=r(Qnt,"RobertaTokenizer"),Qnt.forEach(t),Fmo=r(zk," or "),PI=n(zk,"A",{href:!0});var Wnt=s(PI);Tmo=r(Wnt,"RobertaTokenizerFast"),Wnt.forEach(t),Mmo=r(zk," (RoBERTa model)"),zk.forEach(t),Emo=i(S),Rs=n(S,"LI",{});var Qk=s(Rs);fle=n(Qk,"STRONG",{});var Hnt=s(fle);Cmo=r(Hnt,"roformer"),Hnt.forEach(t),wmo=r(Qk," \u2014 "),BI=n(Qk,"A",{href:!0});var Unt=s(BI);Amo=r(Unt,"RoFormerTokenizer"),Unt.forEach(t),Lmo=r(Qk," or "),II=n(Qk,"A",{href:!0});var Jnt=s(II);ymo=r(Jnt,"RoFormerTokenizerFast"),Jnt.forEach(t),xmo=r(Qk," (RoFormer model)"),Qk.forEach(t),$mo=i(S),ph=n(S,"LI",{});var sye=s(ph);mle=n(sye,"STRONG",{});var Ynt=s(mle);kmo=r(Ynt,"speech_to_text"),Ynt.forEach(t),Smo=r(sye," \u2014 "),NI=n(sye,"A",{href:!0});var Knt=s(NI);Rmo=r(Knt,"Speech2TextTokenizer"),Knt.forEach(t),Pmo=r(sye," (Speech2Text model)"),sye.forEach(t),Bmo=i(S),_h=n(S,"LI",{});var lye=s(_h);gle=n(lye,"STRONG",{});var Znt=s(gle);Imo=r(Znt,"speech_to_text_2"),Znt.forEach(t),Nmo=r(lye," \u2014 "),qI=n(lye,"A",{href:!0});var est=s(qI);qmo=r(est,"Speech2Text2Tokenizer"),est.forEach(t),jmo=r(lye," (Speech2Text2 model)"),lye.forEach(t),Dmo=i(S),Ps=n(S,"LI",{});var Wk=s(Ps);hle=n(Wk,"STRONG",{});var ost=s(hle);Gmo=r(ost,"splinter"),ost.forEach(t),Omo=r(Wk," \u2014 "),jI=n(Wk,"A",{href:!0});var rst=s(jI);Vmo=r(rst,"SplinterTokenizer"),rst.forEach(t),Xmo=r(Wk," or "),DI=n(Wk,"A",{href:!0});var tst=s(DI);zmo=r(tst,"SplinterTokenizerFast"),tst.forEach(t),Qmo=r(Wk," (Splinter model)"),Wk.forEach(t),Wmo=i(S),Bs=n(S,"LI",{});var Hk=s(Bs);ple=n(Hk,"STRONG",{});var ast=s(ple);Hmo=r(ast,"squeezebert"),ast.forEach(t),Umo=r(Hk," \u2014 "),GI=n(Hk,"A",{href:!0});var nst=s(GI);Jmo=r(nst,"SqueezeBertTokenizer"),nst.forEach(t),Ymo=r(Hk," or "),OI=n(Hk,"A",{href:!0});var sst=s(OI);Kmo=r(sst,"SqueezeBertTokenizerFast"),sst.forEach(t),Zmo=r(Hk," (SqueezeBERT model)"),Hk.forEach(t),ego=i(S),Is=n(S,"LI",{});var Uk=s(Is);_le=n(Uk,"STRONG",{});var lst=s(_le);ogo=r(lst,"t5"),lst.forEach(t),rgo=r(Uk," \u2014 "),VI=n(Uk,"A",{href:!0});var ist=s(VI);tgo=r(ist,"T5Tokenizer"),ist.forEach(t),ago=r(Uk," or "),XI=n(Uk,"A",{href:!0});var dst=s(XI);ngo=r(dst,"T5TokenizerFast"),dst.forEach(t),sgo=r(Uk," (T5 model)"),Uk.forEach(t),lgo=i(S),uh=n(S,"LI",{});var iye=s(uh);ule=n(iye,"STRONG",{});var cst=s(ule);igo=r(cst,"tapas"),cst.forEach(t),dgo=r(iye," \u2014 "),zI=n(iye,"A",{href:!0});var fst=s(zI);cgo=r(fst,"TapasTokenizer"),fst.forEach(t),fgo=r(iye," (TAPAS model)"),iye.forEach(t),mgo=i(S),bh=n(S,"LI",{});var dye=s(bh);ble=n(dye,"STRONG",{});var mst=s(ble);ggo=r(mst,"tapex"),mst.forEach(t),hgo=r(dye," \u2014 "),QI=n(dye,"A",{href:!0});var gst=s(QI);pgo=r(gst,"TapexTokenizer"),gst.forEach(t),_go=r(dye," (TAPEX model)"),dye.forEach(t),ugo=i(S),vh=n(S,"LI",{});var cye=s(vh);vle=n(cye,"STRONG",{});var hst=s(vle);bgo=r(hst,"transfo-xl"),hst.forEach(t),vgo=r(cye," \u2014 "),WI=n(cye,"A",{href:!0});var pst=s(WI);Fgo=r(pst,"TransfoXLTokenizer"),pst.forEach(t),Tgo=r(cye," (Transformer-XL model)"),cye.forEach(t),Mgo=i(S),Ns=n(S,"LI",{});var Jk=s(Ns);Fle=n(Jk,"STRONG",{});var _st=s(Fle);Ego=r(_st,"vilt"),_st.forEach(t),Cgo=r(Jk," \u2014 "),HI=n(Jk,"A",{href:!0});var ust=s(HI);wgo=r(ust,"BertTokenizer"),ust.forEach(t),Ago=r(Jk," or "),UI=n(Jk,"A",{href:!0});var bst=s(UI);Lgo=r(bst,"BertTokenizerFast"),bst.forEach(t),ygo=r(Jk," (ViLT model)"),Jk.forEach(t),xgo=i(S),qs=n(S,"LI",{});var Yk=s(qs);Tle=n(Yk,"STRONG",{});var vst=s(Tle);$go=r(vst,"visual_bert"),vst.forEach(t),kgo=r(Yk," \u2014 "),JI=n(Yk,"A",{href:!0});var Fst=s(JI);Sgo=r(Fst,"BertTokenizer"),Fst.forEach(t),Rgo=r(Yk," or "),YI=n(Yk,"A",{href:!0});var Tst=s(YI);Pgo=r(Tst,"BertTokenizerFast"),Tst.forEach(t),Bgo=r(Yk," (VisualBERT model)"),Yk.forEach(t),Igo=i(S),Fh=n(S,"LI",{});var fye=s(Fh);Mle=n(fye,"STRONG",{});var Mst=s(Mle);Ngo=r(Mst,"wav2vec2"),Mst.forEach(t),qgo=r(fye," \u2014 "),KI=n(fye,"A",{href:!0});var Est=s(KI);jgo=r(Est,"Wav2Vec2CTCTokenizer"),Est.forEach(t),Dgo=r(fye," (Wav2Vec2 model)"),fye.forEach(t),Ggo=i(S),Th=n(S,"LI",{});var mye=s(Th);Ele=n(mye,"STRONG",{});var Cst=s(Ele);Ogo=r(Cst,"wav2vec2-conformer"),Cst.forEach(t),Vgo=r(mye," \u2014 "),ZI=n(mye,"A",{href:!0});var wst=s(ZI);Xgo=r(wst,"Wav2Vec2CTCTokenizer"),wst.forEach(t),zgo=r(mye," (Wav2Vec2-Conformer model)"),mye.forEach(t),Qgo=i(S),Mh=n(S,"LI",{});var gye=s(Mh);Cle=n(gye,"STRONG",{});var Ast=s(Cle);Wgo=r(Ast,"wav2vec2_phoneme"),Ast.forEach(t),Hgo=r(gye," \u2014 "),eN=n(gye,"A",{href:!0});var Lst=s(eN);Ugo=r(Lst,"Wav2Vec2PhonemeCTCTokenizer"),Lst.forEach(t),Jgo=r(gye," (Wav2Vec2Phoneme model)"),gye.forEach(t),Ygo=i(S),js=n(S,"LI",{});var Kk=s(js);wle=n(Kk,"STRONG",{});var yst=s(wle);Kgo=r(yst,"xglm"),yst.forEach(t),Zgo=r(Kk," \u2014 "),oN=n(Kk,"A",{href:!0});var xst=s(oN);eho=r(xst,"XGLMTokenizer"),xst.forEach(t),oho=r(Kk," or "),rN=n(Kk,"A",{href:!0});var $st=s(rN);rho=r($st,"XGLMTokenizerFast"),$st.forEach(t),tho=r(Kk," (XGLM model)"),Kk.forEach(t),aho=i(S),Eh=n(S,"LI",{});var hye=s(Eh);Ale=n(hye,"STRONG",{});var kst=s(Ale);nho=r(kst,"xlm"),kst.forEach(t),sho=r(hye," \u2014 "),tN=n(hye,"A",{href:!0});var Sst=s(tN);lho=r(Sst,"XLMTokenizer"),Sst.forEach(t),iho=r(hye," (XLM model)"),hye.forEach(t),dho=i(S),Ch=n(S,"LI",{});var pye=s(Ch);Lle=n(pye,"STRONG",{});var Rst=s(Lle);cho=r(Rst,"xlm-prophetnet"),Rst.forEach(t),fho=r(pye," \u2014 "),aN=n(pye,"A",{href:!0});var Pst=s(aN);mho=r(Pst,"XLMProphetNetTokenizer"),Pst.forEach(t),gho=r(pye," (XLM-ProphetNet model)"),pye.forEach(t),hho=i(S),Ds=n(S,"LI",{});var Zk=s(Ds);yle=n(Zk,"STRONG",{});var Bst=s(yle);pho=r(Bst,"xlm-roberta"),Bst.forEach(t),_ho=r(Zk," \u2014 "),nN=n(Zk,"A",{href:!0});var Ist=s(nN);uho=r(Ist,"XLMRobertaTokenizer"),Ist.forEach(t),bho=r(Zk," or "),sN=n(Zk,"A",{href:!0});var Nst=s(sN);vho=r(Nst,"XLMRobertaTokenizerFast"),Nst.forEach(t),Fho=r(Zk," (XLM-RoBERTa model)"),Zk.forEach(t),Tho=i(S),Gs=n(S,"LI",{});var eS=s(Gs);xle=n(eS,"STRONG",{});var qst=s(xle);Mho=r(qst,"xlm-roberta-xl"),qst.forEach(t),Eho=r(eS," \u2014 "),lN=n(eS,"A",{href:!0});var jst=s(lN);Cho=r(jst,"RobertaTokenizer"),jst.forEach(t),who=r(eS," or "),iN=n(eS,"A",{href:!0});var Dst=s(iN);Aho=r(Dst,"RobertaTokenizerFast"),Dst.forEach(t),Lho=r(eS," (XLM-RoBERTa-XL model)"),eS.forEach(t),yho=i(S),Os=n(S,"LI",{});var oS=s(Os);$le=n(oS,"STRONG",{});var Gst=s($le);xho=r(Gst,"xlnet"),Gst.forEach(t),$ho=r(oS," \u2014 "),dN=n(oS,"A",{href:!0});var Ost=s(dN);kho=r(Ost,"XLNetTokenizer"),Ost.forEach(t),Sho=r(oS," or "),cN=n(oS,"A",{href:!0});var Vst=s(cN);Rho=r(Vst,"XLNetTokenizerFast"),Vst.forEach(t),Pho=r(oS," (XLNet model)"),oS.forEach(t),Bho=i(S),Vs=n(S,"LI",{});var rS=s(Vs);kle=n(rS,"STRONG",{});var Xst=s(kle);Iho=r(Xst,"yoso"),Xst.forEach(t),Nho=r(rS," \u2014 "),fN=n(rS,"A",{href:!0});var zst=s(fN);qho=r(zst,"AlbertTokenizer"),zst.forEach(t),jho=r(rS," or "),mN=n(rS,"A",{href:!0});var Qst=s(mN);Dho=r(Qst,"AlbertTokenizerFast"),Qst.forEach(t),Gho=r(rS," (YOSO model)"),rS.forEach(t),S.forEach(t),Oho=i(Us),T(wh.$$.fragment,Us),Us.forEach(t),Vho=i(Hs),Ah=n(Hs,"DIV",{class:!0});var mXe=s(Ah);T(QL.$$.fragment,mXe),Xho=i(mXe),Sle=n(mXe,"P",{});var Wst=s(Sle);zho=r(Wst,"Register a new tokenizer in this mapping."),Wst.forEach(t),mXe.forEach(t),Hs.forEach(t),fOe=i(f),Ri=n(f,"H2",{class:!0});var gXe=s(Ri);Lh=n(gXe,"A",{id:!0,class:!0,href:!0});var Hst=s(Lh);Rle=n(Hst,"SPAN",{});var Ust=s(Rle);T(WL.$$.fragment,Ust),Ust.forEach(t),Hst.forEach(t),Qho=i(gXe),Ple=n(gXe,"SPAN",{});var Jst=s(Ple);Who=r(Jst,"AutoFeatureExtractor"),Jst.forEach(t),gXe.forEach(t),mOe=i(f),Lo=n(f,"DIV",{class:!0});var Js=s(Lo);T(HL.$$.fragment,Js),Hho=i(Js),UL=n(Js,"P",{});var hXe=s(UL);Uho=r(hXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),gN=n(hXe,"A",{href:!0});var Yst=s(gN);Jho=r(Yst,"AutoFeatureExtractor.from_pretrained()"),Yst.forEach(t),Yho=r(hXe," class method."),hXe.forEach(t),Kho=i(Js),JL=n(Js,"P",{});var pXe=s(JL);Zho=r(pXe,"This class cannot be instantiated directly using "),Ble=n(pXe,"CODE",{});var Kst=s(Ble);epo=r(Kst,"__init__()"),Kst.forEach(t),opo=r(pXe," (throws an error)."),pXe.forEach(t),rpo=i(Js),He=n(Js,"DIV",{class:!0});var ra=s(He);T(YL.$$.fragment,ra),tpo=i(ra),Ile=n(ra,"P",{});var Zst=s(Ile);apo=r(Zst,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zst.forEach(t),npo=i(ra),Sa=n(ra,"P",{});var PA=s(Sa);spo=r(PA,"The feature extractor class to instantiate is selected based on the "),Nle=n(PA,"CODE",{});var elt=s(Nle);lpo=r(elt,"model_type"),elt.forEach(t),ipo=r(PA,` property of the config object
(either passed as an argument or loaded from `),qle=n(PA,"CODE",{});var olt=s(qle);dpo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),cpo=r(PA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jle=n(PA,"CODE",{});var rlt=s(jle);fpo=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),mpo=r(PA,":"),PA.forEach(t),gpo=i(ra),Y=n(ra,"UL",{});var K=s(Y);yh=n(K,"LI",{});var _ye=s(yh);Dle=n(_ye,"STRONG",{});var tlt=s(Dle);hpo=r(tlt,"beit"),tlt.forEach(t),ppo=r(_ye," \u2014 "),hN=n(_ye,"A",{href:!0});var alt=s(hN);_po=r(alt,"BeitFeatureExtractor"),alt.forEach(t),upo=r(_ye," (BEiT model)"),_ye.forEach(t),bpo=i(K),xh=n(K,"LI",{});var uye=s(xh);Gle=n(uye,"STRONG",{});var nlt=s(Gle);vpo=r(nlt,"clip"),nlt.forEach(t),Fpo=r(uye," \u2014 "),pN=n(uye,"A",{href:!0});var slt=s(pN);Tpo=r(slt,"CLIPFeatureExtractor"),slt.forEach(t),Mpo=r(uye," (CLIP model)"),uye.forEach(t),Epo=i(K),$h=n(K,"LI",{});var bye=s($h);Ole=n(bye,"STRONG",{});var llt=s(Ole);Cpo=r(llt,"convnext"),llt.forEach(t),wpo=r(bye," \u2014 "),_N=n(bye,"A",{href:!0});var ilt=s(_N);Apo=r(ilt,"ConvNextFeatureExtractor"),ilt.forEach(t),Lpo=r(bye," (ConvNeXT model)"),bye.forEach(t),ypo=i(K),kh=n(K,"LI",{});var vye=s(kh);Vle=n(vye,"STRONG",{});var dlt=s(Vle);xpo=r(dlt,"cvt"),dlt.forEach(t),$po=r(vye," \u2014 "),uN=n(vye,"A",{href:!0});var clt=s(uN);kpo=r(clt,"ConvNextFeatureExtractor"),clt.forEach(t),Spo=r(vye," (CvT model)"),vye.forEach(t),Rpo=i(K),Sh=n(K,"LI",{});var Fye=s(Sh);Xle=n(Fye,"STRONG",{});var flt=s(Xle);Ppo=r(flt,"data2vec-audio"),flt.forEach(t),Bpo=r(Fye," \u2014 "),bN=n(Fye,"A",{href:!0});var mlt=s(bN);Ipo=r(mlt,"Wav2Vec2FeatureExtractor"),mlt.forEach(t),Npo=r(Fye," (Data2VecAudio model)"),Fye.forEach(t),qpo=i(K),Rh=n(K,"LI",{});var Tye=s(Rh);zle=n(Tye,"STRONG",{});var glt=s(zle);jpo=r(glt,"data2vec-vision"),glt.forEach(t),Dpo=r(Tye," \u2014 "),vN=n(Tye,"A",{href:!0});var hlt=s(vN);Gpo=r(hlt,"BeitFeatureExtractor"),hlt.forEach(t),Opo=r(Tye," (Data2VecVision model)"),Tye.forEach(t),Vpo=i(K),Ph=n(K,"LI",{});var Mye=s(Ph);Qle=n(Mye,"STRONG",{});var plt=s(Qle);Xpo=r(plt,"deit"),plt.forEach(t),zpo=r(Mye," \u2014 "),FN=n(Mye,"A",{href:!0});var _lt=s(FN);Qpo=r(_lt,"DeiTFeatureExtractor"),_lt.forEach(t),Wpo=r(Mye," (DeiT model)"),Mye.forEach(t),Hpo=i(K),Bh=n(K,"LI",{});var Eye=s(Bh);Wle=n(Eye,"STRONG",{});var ult=s(Wle);Upo=r(ult,"detr"),ult.forEach(t),Jpo=r(Eye," \u2014 "),TN=n(Eye,"A",{href:!0});var blt=s(TN);Ypo=r(blt,"DetrFeatureExtractor"),blt.forEach(t),Kpo=r(Eye," (DETR model)"),Eye.forEach(t),Zpo=i(K),Ih=n(K,"LI",{});var Cye=s(Ih);Hle=n(Cye,"STRONG",{});var vlt=s(Hle);e_o=r(vlt,"dpt"),vlt.forEach(t),o_o=r(Cye," \u2014 "),MN=n(Cye,"A",{href:!0});var Flt=s(MN);r_o=r(Flt,"DPTFeatureExtractor"),Flt.forEach(t),t_o=r(Cye," (DPT model)"),Cye.forEach(t),a_o=i(K),Nh=n(K,"LI",{});var wye=s(Nh);Ule=n(wye,"STRONG",{});var Tlt=s(Ule);n_o=r(Tlt,"flava"),Tlt.forEach(t),s_o=r(wye," \u2014 "),EN=n(wye,"A",{href:!0});var Mlt=s(EN);l_o=r(Mlt,"FlavaFeatureExtractor"),Mlt.forEach(t),i_o=r(wye," (FLAVA model)"),wye.forEach(t),d_o=i(K),qh=n(K,"LI",{});var Aye=s(qh);Jle=n(Aye,"STRONG",{});var Elt=s(Jle);c_o=r(Elt,"glpn"),Elt.forEach(t),f_o=r(Aye," \u2014 "),CN=n(Aye,"A",{href:!0});var Clt=s(CN);m_o=r(Clt,"GLPNFeatureExtractor"),Clt.forEach(t),g_o=r(Aye," (GLPN model)"),Aye.forEach(t),h_o=i(K),jh=n(K,"LI",{});var Lye=s(jh);Yle=n(Lye,"STRONG",{});var wlt=s(Yle);p_o=r(wlt,"hubert"),wlt.forEach(t),__o=r(Lye," \u2014 "),wN=n(Lye,"A",{href:!0});var Alt=s(wN);u_o=r(Alt,"Wav2Vec2FeatureExtractor"),Alt.forEach(t),b_o=r(Lye," (Hubert model)"),Lye.forEach(t),v_o=i(K),Dh=n(K,"LI",{});var yye=s(Dh);Kle=n(yye,"STRONG",{});var Llt=s(Kle);F_o=r(Llt,"imagegpt"),Llt.forEach(t),T_o=r(yye," \u2014 "),AN=n(yye,"A",{href:!0});var ylt=s(AN);M_o=r(ylt,"ImageGPTFeatureExtractor"),ylt.forEach(t),E_o=r(yye," (ImageGPT model)"),yye.forEach(t),C_o=i(K),Gh=n(K,"LI",{});var xye=s(Gh);Zle=n(xye,"STRONG",{});var xlt=s(Zle);w_o=r(xlt,"layoutlmv2"),xlt.forEach(t),A_o=r(xye," \u2014 "),LN=n(xye,"A",{href:!0});var $lt=s(LN);L_o=r($lt,"LayoutLMv2FeatureExtractor"),$lt.forEach(t),y_o=r(xye," (LayoutLMv2 model)"),xye.forEach(t),x_o=i(K),Oh=n(K,"LI",{});var $ye=s(Oh);eie=n($ye,"STRONG",{});var klt=s(eie);$_o=r(klt,"layoutlmv3"),klt.forEach(t),k_o=r($ye," \u2014 "),yN=n($ye,"A",{href:!0});var Slt=s(yN);S_o=r(Slt,"LayoutLMv3FeatureExtractor"),Slt.forEach(t),R_o=r($ye," (LayoutLMv3 model)"),$ye.forEach(t),P_o=i(K),Vh=n(K,"LI",{});var kye=s(Vh);oie=n(kye,"STRONG",{});var Rlt=s(oie);B_o=r(Rlt,"levit"),Rlt.forEach(t),I_o=r(kye," \u2014 "),xN=n(kye,"A",{href:!0});var Plt=s(xN);N_o=r(Plt,"LevitFeatureExtractor"),Plt.forEach(t),q_o=r(kye," (LeViT model)"),kye.forEach(t),j_o=i(K),Xh=n(K,"LI",{});var Sye=s(Xh);rie=n(Sye,"STRONG",{});var Blt=s(rie);D_o=r(Blt,"maskformer"),Blt.forEach(t),G_o=r(Sye," \u2014 "),$N=n(Sye,"A",{href:!0});var Ilt=s($N);O_o=r(Ilt,"MaskFormerFeatureExtractor"),Ilt.forEach(t),V_o=r(Sye," (MaskFormer model)"),Sye.forEach(t),X_o=i(K),zh=n(K,"LI",{});var Rye=s(zh);tie=n(Rye,"STRONG",{});var Nlt=s(tie);z_o=r(Nlt,"mctct"),Nlt.forEach(t),Q_o=r(Rye," \u2014 "),kN=n(Rye,"A",{href:!0});var qlt=s(kN);W_o=r(qlt,"MCTCTFeatureExtractor"),qlt.forEach(t),H_o=r(Rye," (M-CTC-T model)"),Rye.forEach(t),U_o=i(K),Qh=n(K,"LI",{});var Pye=s(Qh);aie=n(Pye,"STRONG",{});var jlt=s(aie);J_o=r(jlt,"perceiver"),jlt.forEach(t),Y_o=r(Pye," \u2014 "),SN=n(Pye,"A",{href:!0});var Dlt=s(SN);K_o=r(Dlt,"PerceiverFeatureExtractor"),Dlt.forEach(t),Z_o=r(Pye," (Perceiver model)"),Pye.forEach(t),euo=i(K),Wh=n(K,"LI",{});var Bye=s(Wh);nie=n(Bye,"STRONG",{});var Glt=s(nie);ouo=r(Glt,"poolformer"),Glt.forEach(t),ruo=r(Bye," \u2014 "),RN=n(Bye,"A",{href:!0});var Olt=s(RN);tuo=r(Olt,"PoolFormerFeatureExtractor"),Olt.forEach(t),auo=r(Bye," (PoolFormer model)"),Bye.forEach(t),nuo=i(K),Hh=n(K,"LI",{});var Iye=s(Hh);sie=n(Iye,"STRONG",{});var Vlt=s(sie);suo=r(Vlt,"regnet"),Vlt.forEach(t),luo=r(Iye," \u2014 "),PN=n(Iye,"A",{href:!0});var Xlt=s(PN);iuo=r(Xlt,"ConvNextFeatureExtractor"),Xlt.forEach(t),duo=r(Iye," (RegNet model)"),Iye.forEach(t),cuo=i(K),Uh=n(K,"LI",{});var Nye=s(Uh);lie=n(Nye,"STRONG",{});var zlt=s(lie);fuo=r(zlt,"resnet"),zlt.forEach(t),muo=r(Nye," \u2014 "),BN=n(Nye,"A",{href:!0});var Qlt=s(BN);guo=r(Qlt,"ConvNextFeatureExtractor"),Qlt.forEach(t),huo=r(Nye," (ResNet model)"),Nye.forEach(t),puo=i(K),Jh=n(K,"LI",{});var qye=s(Jh);iie=n(qye,"STRONG",{});var Wlt=s(iie);_uo=r(Wlt,"segformer"),Wlt.forEach(t),uuo=r(qye," \u2014 "),IN=n(qye,"A",{href:!0});var Hlt=s(IN);buo=r(Hlt,"SegformerFeatureExtractor"),Hlt.forEach(t),vuo=r(qye," (SegFormer model)"),qye.forEach(t),Fuo=i(K),Yh=n(K,"LI",{});var jye=s(Yh);die=n(jye,"STRONG",{});var Ult=s(die);Tuo=r(Ult,"speech_to_text"),Ult.forEach(t),Muo=r(jye," \u2014 "),NN=n(jye,"A",{href:!0});var Jlt=s(NN);Euo=r(Jlt,"Speech2TextFeatureExtractor"),Jlt.forEach(t),Cuo=r(jye," (Speech2Text model)"),jye.forEach(t),wuo=i(K),Kh=n(K,"LI",{});var Dye=s(Kh);cie=n(Dye,"STRONG",{});var Ylt=s(cie);Auo=r(Ylt,"swin"),Ylt.forEach(t),Luo=r(Dye," \u2014 "),qN=n(Dye,"A",{href:!0});var Klt=s(qN);yuo=r(Klt,"ViTFeatureExtractor"),Klt.forEach(t),xuo=r(Dye," (Swin Transformer model)"),Dye.forEach(t),$uo=i(K),Zh=n(K,"LI",{});var Gye=s(Zh);fie=n(Gye,"STRONG",{});var Zlt=s(fie);kuo=r(Zlt,"van"),Zlt.forEach(t),Suo=r(Gye," \u2014 "),jN=n(Gye,"A",{href:!0});var eit=s(jN);Ruo=r(eit,"ConvNextFeatureExtractor"),eit.forEach(t),Puo=r(Gye," (VAN model)"),Gye.forEach(t),Buo=i(K),ep=n(K,"LI",{});var Oye=s(ep);mie=n(Oye,"STRONG",{});var oit=s(mie);Iuo=r(oit,"vilt"),oit.forEach(t),Nuo=r(Oye," \u2014 "),DN=n(Oye,"A",{href:!0});var rit=s(DN);quo=r(rit,"ViltFeatureExtractor"),rit.forEach(t),juo=r(Oye," (ViLT model)"),Oye.forEach(t),Duo=i(K),op=n(K,"LI",{});var Vye=s(op);gie=n(Vye,"STRONG",{});var tit=s(gie);Guo=r(tit,"vit"),tit.forEach(t),Ouo=r(Vye," \u2014 "),GN=n(Vye,"A",{href:!0});var ait=s(GN);Vuo=r(ait,"ViTFeatureExtractor"),ait.forEach(t),Xuo=r(Vye," (ViT model)"),Vye.forEach(t),zuo=i(K),rp=n(K,"LI",{});var Xye=s(rp);hie=n(Xye,"STRONG",{});var nit=s(hie);Quo=r(nit,"vit_mae"),nit.forEach(t),Wuo=r(Xye," \u2014 "),ON=n(Xye,"A",{href:!0});var sit=s(ON);Huo=r(sit,"ViTFeatureExtractor"),sit.forEach(t),Uuo=r(Xye," (ViTMAE model)"),Xye.forEach(t),Juo=i(K),tp=n(K,"LI",{});var zye=s(tp);pie=n(zye,"STRONG",{});var lit=s(pie);Yuo=r(lit,"wav2vec2"),lit.forEach(t),Kuo=r(zye," \u2014 "),VN=n(zye,"A",{href:!0});var iit=s(VN);Zuo=r(iit,"Wav2Vec2FeatureExtractor"),iit.forEach(t),e1o=r(zye," (Wav2Vec2 model)"),zye.forEach(t),o1o=i(K),ap=n(K,"LI",{});var Qye=s(ap);_ie=n(Qye,"STRONG",{});var dit=s(_ie);r1o=r(dit,"wav2vec2-conformer"),dit.forEach(t),t1o=r(Qye," \u2014 "),XN=n(Qye,"A",{href:!0});var cit=s(XN);a1o=r(cit,"Wav2Vec2FeatureExtractor"),cit.forEach(t),n1o=r(Qye," (Wav2Vec2-Conformer model)"),Qye.forEach(t),s1o=i(K),np=n(K,"LI",{});var Wye=s(np);uie=n(Wye,"STRONG",{});var fit=s(uie);l1o=r(fit,"yolos"),fit.forEach(t),i1o=r(Wye," \u2014 "),zN=n(Wye,"A",{href:!0});var mit=s(zN);d1o=r(mit,"YolosFeatureExtractor"),mit.forEach(t),c1o=r(Wye," (YOLOS model)"),Wye.forEach(t),K.forEach(t),f1o=i(ra),T(sp.$$.fragment,ra),m1o=i(ra),T(lp.$$.fragment,ra),ra.forEach(t),g1o=i(Js),ip=n(Js,"DIV",{class:!0});var _Xe=s(ip);T(KL.$$.fragment,_Xe),h1o=i(_Xe),bie=n(_Xe,"P",{});var git=s(bie);p1o=r(git,"Register a new feature extractor for this class."),git.forEach(t),_Xe.forEach(t),Js.forEach(t),gOe=i(f),Pi=n(f,"H2",{class:!0});var uXe=s(Pi);dp=n(uXe,"A",{id:!0,class:!0,href:!0});var hit=s(dp);vie=n(hit,"SPAN",{});var pit=s(vie);T(ZL.$$.fragment,pit),pit.forEach(t),hit.forEach(t),_1o=i(uXe),Fie=n(uXe,"SPAN",{});var _it=s(Fie);u1o=r(_it,"AutoProcessor"),_it.forEach(t),uXe.forEach(t),hOe=i(f),yo=n(f,"DIV",{class:!0});var Ys=s(yo);T(ey.$$.fragment,Ys),b1o=i(Ys),oy=n(Ys,"P",{});var bXe=s(oy);v1o=r(bXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QN=n(bXe,"A",{href:!0});var uit=s(QN);F1o=r(uit,"AutoProcessor.from_pretrained()"),uit.forEach(t),T1o=r(bXe," class method."),bXe.forEach(t),M1o=i(Ys),ry=n(Ys,"P",{});var vXe=s(ry);E1o=r(vXe,"This class cannot be instantiated directly using "),Tie=n(vXe,"CODE",{});var bit=s(Tie);C1o=r(bit,"__init__()"),bit.forEach(t),w1o=r(vXe," (throws an error)."),vXe.forEach(t),A1o=i(Ys),Ue=n(Ys,"DIV",{class:!0});var ta=s(Ue);T(ty.$$.fragment,ta),L1o=i(ta),Mie=n(ta,"P",{});var vit=s(Mie);y1o=r(vit,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),vit.forEach(t),x1o=i(ta),Bi=n(ta,"P",{});var yoe=s(Bi);$1o=r(yoe,"The processor class to instantiate is selected based on the "),Eie=n(yoe,"CODE",{});var Fit=s(Eie);k1o=r(Fit,"model_type"),Fit.forEach(t),S1o=r(yoe,` property of the config object (either
passed as an argument or loaded from `),Cie=n(yoe,"CODE",{});var Tit=s(Cie);R1o=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),P1o=r(yoe," if possible):"),yoe.forEach(t),B1o=i(ta),he=n(ta,"UL",{});var ue=s(he);cp=n(ue,"LI",{});var Hye=s(cp);wie=n(Hye,"STRONG",{});var Mit=s(wie);I1o=r(Mit,"clip"),Mit.forEach(t),N1o=r(Hye," \u2014 "),WN=n(Hye,"A",{href:!0});var Eit=s(WN);q1o=r(Eit,"CLIPProcessor"),Eit.forEach(t),j1o=r(Hye," (CLIP model)"),Hye.forEach(t),D1o=i(ue),fp=n(ue,"LI",{});var Uye=s(fp);Aie=n(Uye,"STRONG",{});var Cit=s(Aie);G1o=r(Cit,"flava"),Cit.forEach(t),O1o=r(Uye," \u2014 "),Lie=n(Uye,"CODE",{});var wit=s(Lie);V1o=r(wit,"FLAVAProcessor"),wit.forEach(t),X1o=r(Uye," (FLAVA model)"),Uye.forEach(t),z1o=i(ue),mp=n(ue,"LI",{});var Jye=s(mp);yie=n(Jye,"STRONG",{});var Ait=s(yie);Q1o=r(Ait,"layoutlmv2"),Ait.forEach(t),W1o=r(Jye," \u2014 "),HN=n(Jye,"A",{href:!0});var Lit=s(HN);H1o=r(Lit,"LayoutLMv2Processor"),Lit.forEach(t),U1o=r(Jye," (LayoutLMv2 model)"),Jye.forEach(t),J1o=i(ue),gp=n(ue,"LI",{});var Yye=s(gp);xie=n(Yye,"STRONG",{});var yit=s(xie);Y1o=r(yit,"layoutlmv3"),yit.forEach(t),K1o=r(Yye," \u2014 "),UN=n(Yye,"A",{href:!0});var xit=s(UN);Z1o=r(xit,"LayoutLMv3Processor"),xit.forEach(t),e7o=r(Yye," (LayoutLMv3 model)"),Yye.forEach(t),o7o=i(ue),hp=n(ue,"LI",{});var Kye=s(hp);$ie=n(Kye,"STRONG",{});var $it=s($ie);r7o=r($it,"layoutxlm"),$it.forEach(t),t7o=r(Kye," \u2014 "),JN=n(Kye,"A",{href:!0});var kit=s(JN);a7o=r(kit,"LayoutXLMProcessor"),kit.forEach(t),n7o=r(Kye," (LayoutXLM model)"),Kye.forEach(t),s7o=i(ue),pp=n(ue,"LI",{});var Zye=s(pp);kie=n(Zye,"STRONG",{});var Sit=s(kie);l7o=r(Sit,"sew"),Sit.forEach(t),i7o=r(Zye," \u2014 "),YN=n(Zye,"A",{href:!0});var Rit=s(YN);d7o=r(Rit,"Wav2Vec2Processor"),Rit.forEach(t),c7o=r(Zye," (SEW model)"),Zye.forEach(t),f7o=i(ue),_p=n(ue,"LI",{});var e8e=s(_p);Sie=n(e8e,"STRONG",{});var Pit=s(Sie);m7o=r(Pit,"sew-d"),Pit.forEach(t),g7o=r(e8e," \u2014 "),KN=n(e8e,"A",{href:!0});var Bit=s(KN);h7o=r(Bit,"Wav2Vec2Processor"),Bit.forEach(t),p7o=r(e8e," (SEW-D model)"),e8e.forEach(t),_7o=i(ue),up=n(ue,"LI",{});var o8e=s(up);Rie=n(o8e,"STRONG",{});var Iit=s(Rie);u7o=r(Iit,"speech_to_text"),Iit.forEach(t),b7o=r(o8e," \u2014 "),ZN=n(o8e,"A",{href:!0});var Nit=s(ZN);v7o=r(Nit,"Speech2TextProcessor"),Nit.forEach(t),F7o=r(o8e," (Speech2Text model)"),o8e.forEach(t),T7o=i(ue),bp=n(ue,"LI",{});var r8e=s(bp);Pie=n(r8e,"STRONG",{});var qit=s(Pie);M7o=r(qit,"speech_to_text_2"),qit.forEach(t),E7o=r(r8e," \u2014 "),eq=n(r8e,"A",{href:!0});var jit=s(eq);C7o=r(jit,"Speech2Text2Processor"),jit.forEach(t),w7o=r(r8e," (Speech2Text2 model)"),r8e.forEach(t),A7o=i(ue),vp=n(ue,"LI",{});var t8e=s(vp);Bie=n(t8e,"STRONG",{});var Dit=s(Bie);L7o=r(Dit,"trocr"),Dit.forEach(t),y7o=r(t8e," \u2014 "),oq=n(t8e,"A",{href:!0});var Git=s(oq);x7o=r(Git,"TrOCRProcessor"),Git.forEach(t),$7o=r(t8e," (TrOCR model)"),t8e.forEach(t),k7o=i(ue),Fp=n(ue,"LI",{});var a8e=s(Fp);Iie=n(a8e,"STRONG",{});var Oit=s(Iie);S7o=r(Oit,"unispeech"),Oit.forEach(t),R7o=r(a8e," \u2014 "),rq=n(a8e,"A",{href:!0});var Vit=s(rq);P7o=r(Vit,"Wav2Vec2Processor"),Vit.forEach(t),B7o=r(a8e," (UniSpeech model)"),a8e.forEach(t),I7o=i(ue),Tp=n(ue,"LI",{});var n8e=s(Tp);Nie=n(n8e,"STRONG",{});var Xit=s(Nie);N7o=r(Xit,"unispeech-sat"),Xit.forEach(t),q7o=r(n8e," \u2014 "),tq=n(n8e,"A",{href:!0});var zit=s(tq);j7o=r(zit,"Wav2Vec2Processor"),zit.forEach(t),D7o=r(n8e," (UniSpeechSat model)"),n8e.forEach(t),G7o=i(ue),Mp=n(ue,"LI",{});var s8e=s(Mp);qie=n(s8e,"STRONG",{});var Qit=s(qie);O7o=r(Qit,"vilt"),Qit.forEach(t),V7o=r(s8e," \u2014 "),aq=n(s8e,"A",{href:!0});var Wit=s(aq);X7o=r(Wit,"ViltProcessor"),Wit.forEach(t),z7o=r(s8e," (ViLT model)"),s8e.forEach(t),Q7o=i(ue),Ep=n(ue,"LI",{});var l8e=s(Ep);jie=n(l8e,"STRONG",{});var Hit=s(jie);W7o=r(Hit,"vision-text-dual-encoder"),Hit.forEach(t),H7o=r(l8e," \u2014 "),nq=n(l8e,"A",{href:!0});var Uit=s(nq);U7o=r(Uit,"VisionTextDualEncoderProcessor"),Uit.forEach(t),J7o=r(l8e," (VisionTextDualEncoder model)"),l8e.forEach(t),Y7o=i(ue),Cp=n(ue,"LI",{});var i8e=s(Cp);Die=n(i8e,"STRONG",{});var Jit=s(Die);K7o=r(Jit,"wav2vec2"),Jit.forEach(t),Z7o=r(i8e," \u2014 "),sq=n(i8e,"A",{href:!0});var Yit=s(sq);e2o=r(Yit,"Wav2Vec2Processor"),Yit.forEach(t),o2o=r(i8e," (Wav2Vec2 model)"),i8e.forEach(t),r2o=i(ue),wp=n(ue,"LI",{});var d8e=s(wp);Gie=n(d8e,"STRONG",{});var Kit=s(Gie);t2o=r(Kit,"wav2vec2-conformer"),Kit.forEach(t),a2o=r(d8e," \u2014 "),lq=n(d8e,"A",{href:!0});var Zit=s(lq);n2o=r(Zit,"Wav2Vec2Processor"),Zit.forEach(t),s2o=r(d8e," (Wav2Vec2-Conformer model)"),d8e.forEach(t),l2o=i(ue),Ap=n(ue,"LI",{});var c8e=s(Ap);Oie=n(c8e,"STRONG",{});var edt=s(Oie);i2o=r(edt,"wavlm"),edt.forEach(t),d2o=r(c8e," \u2014 "),iq=n(c8e,"A",{href:!0});var odt=s(iq);c2o=r(odt,"Wav2Vec2Processor"),odt.forEach(t),f2o=r(c8e," (WavLM model)"),c8e.forEach(t),ue.forEach(t),m2o=i(ta),T(Lp.$$.fragment,ta),g2o=i(ta),T(yp.$$.fragment,ta),ta.forEach(t),h2o=i(Ys),xp=n(Ys,"DIV",{class:!0});var FXe=s(xp);T(ay.$$.fragment,FXe),p2o=i(FXe),Vie=n(FXe,"P",{});var rdt=s(Vie);_2o=r(rdt,"Register a new processor for this class."),rdt.forEach(t),FXe.forEach(t),Ys.forEach(t),pOe=i(f),Ii=n(f,"H2",{class:!0});var TXe=s(Ii);$p=n(TXe,"A",{id:!0,class:!0,href:!0});var tdt=s($p);Xie=n(tdt,"SPAN",{});var adt=s(Xie);T(ny.$$.fragment,adt),adt.forEach(t),tdt.forEach(t),u2o=i(TXe),zie=n(TXe,"SPAN",{});var ndt=s(zie);b2o=r(ndt,"AutoModel"),ndt.forEach(t),TXe.forEach(t),_Oe=i(f),xo=n(f,"DIV",{class:!0});var Ks=s(xo);T(sy.$$.fragment,Ks),v2o=i(Ks),Ni=n(Ks,"P",{});var xoe=s(Ni);F2o=r(xoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dq=n(xoe,"A",{href:!0});var sdt=s(dq);T2o=r(sdt,"from_pretrained()"),sdt.forEach(t),M2o=r(xoe," class method or the "),cq=n(xoe,"A",{href:!0});var ldt=s(cq);E2o=r(ldt,"from_config()"),ldt.forEach(t),C2o=r(xoe,` class
method.`),xoe.forEach(t),w2o=i(Ks),ly=n(Ks,"P",{});var MXe=s(ly);A2o=r(MXe,"This class cannot be instantiated directly using "),Qie=n(MXe,"CODE",{});var idt=s(Qie);L2o=r(idt,"__init__()"),idt.forEach(t),y2o=r(MXe," (throws an error)."),MXe.forEach(t),x2o=i(Ks),nt=n(Ks,"DIV",{class:!0});var BA=s(nt);T(iy.$$.fragment,BA),$2o=i(BA),Wie=n(BA,"P",{});var ddt=s(Wie);k2o=r(ddt,"Instantiates one of the base model classes of the library from a configuration."),ddt.forEach(t),S2o=i(BA),qi=n(BA,"P",{});var $oe=s(qi);R2o=r($oe,`Note:
Loading a model from its configuration file does `),Hie=n($oe,"STRONG",{});var cdt=s(Hie);P2o=r(cdt,"not"),cdt.forEach(t),B2o=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fq=n($oe,"A",{href:!0});var fdt=s(fq);I2o=r(fdt,"from_pretrained()"),fdt.forEach(t),N2o=r($oe," to load the model weights."),$oe.forEach(t),q2o=i(BA),T(kp.$$.fragment,BA),BA.forEach(t),j2o=i(Ks),Je=n(Ks,"DIV",{class:!0});var aa=s(Je);T(dy.$$.fragment,aa),D2o=i(aa),Uie=n(aa,"P",{});var mdt=s(Uie);G2o=r(mdt,"Instantiate one of the base model classes of the library from a pretrained model."),mdt.forEach(t),O2o=i(aa),Ra=n(aa,"P",{});var IA=s(Ra);V2o=r(IA,"The model class to instantiate is selected based on the "),Jie=n(IA,"CODE",{});var gdt=s(Jie);X2o=r(gdt,"model_type"),gdt.forEach(t),z2o=r(IA,` property of the config object (either
passed as an argument or loaded from `),Yie=n(IA,"CODE",{});var hdt=s(Yie);Q2o=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),W2o=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kie=n(IA,"CODE",{});var pdt=s(Kie);H2o=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),U2o=r(IA,":"),IA.forEach(t),J2o=i(aa),y=n(aa,"UL",{});var $=s(y);Sp=n($,"LI",{});var f8e=s(Sp);Zie=n(f8e,"STRONG",{});var _dt=s(Zie);Y2o=r(_dt,"albert"),_dt.forEach(t),K2o=r(f8e," \u2014 "),mq=n(f8e,"A",{href:!0});var udt=s(mq);Z2o=r(udt,"AlbertModel"),udt.forEach(t),ebo=r(f8e," (ALBERT model)"),f8e.forEach(t),obo=i($),Rp=n($,"LI",{});var m8e=s(Rp);ede=n(m8e,"STRONG",{});var bdt=s(ede);rbo=r(bdt,"bart"),bdt.forEach(t),tbo=r(m8e," \u2014 "),gq=n(m8e,"A",{href:!0});var vdt=s(gq);abo=r(vdt,"BartModel"),vdt.forEach(t),nbo=r(m8e," (BART model)"),m8e.forEach(t),sbo=i($),Pp=n($,"LI",{});var g8e=s(Pp);ode=n(g8e,"STRONG",{});var Fdt=s(ode);lbo=r(Fdt,"beit"),Fdt.forEach(t),ibo=r(g8e," \u2014 "),hq=n(g8e,"A",{href:!0});var Tdt=s(hq);dbo=r(Tdt,"BeitModel"),Tdt.forEach(t),cbo=r(g8e," (BEiT model)"),g8e.forEach(t),fbo=i($),Bp=n($,"LI",{});var h8e=s(Bp);rde=n(h8e,"STRONG",{});var Mdt=s(rde);mbo=r(Mdt,"bert"),Mdt.forEach(t),gbo=r(h8e," \u2014 "),pq=n(h8e,"A",{href:!0});var Edt=s(pq);hbo=r(Edt,"BertModel"),Edt.forEach(t),pbo=r(h8e," (BERT model)"),h8e.forEach(t),_bo=i($),Ip=n($,"LI",{});var p8e=s(Ip);tde=n(p8e,"STRONG",{});var Cdt=s(tde);ubo=r(Cdt,"bert-generation"),Cdt.forEach(t),bbo=r(p8e," \u2014 "),_q=n(p8e,"A",{href:!0});var wdt=s(_q);vbo=r(wdt,"BertGenerationEncoder"),wdt.forEach(t),Fbo=r(p8e," (Bert Generation model)"),p8e.forEach(t),Tbo=i($),Np=n($,"LI",{});var _8e=s(Np);ade=n(_8e,"STRONG",{});var Adt=s(ade);Mbo=r(Adt,"big_bird"),Adt.forEach(t),Ebo=r(_8e," \u2014 "),uq=n(_8e,"A",{href:!0});var Ldt=s(uq);Cbo=r(Ldt,"BigBirdModel"),Ldt.forEach(t),wbo=r(_8e," (BigBird model)"),_8e.forEach(t),Abo=i($),qp=n($,"LI",{});var u8e=s(qp);nde=n(u8e,"STRONG",{});var ydt=s(nde);Lbo=r(ydt,"bigbird_pegasus"),ydt.forEach(t),ybo=r(u8e," \u2014 "),bq=n(u8e,"A",{href:!0});var xdt=s(bq);xbo=r(xdt,"BigBirdPegasusModel"),xdt.forEach(t),$bo=r(u8e," (BigBird-Pegasus model)"),u8e.forEach(t),kbo=i($),jp=n($,"LI",{});var b8e=s(jp);sde=n(b8e,"STRONG",{});var $dt=s(sde);Sbo=r($dt,"blenderbot"),$dt.forEach(t),Rbo=r(b8e," \u2014 "),vq=n(b8e,"A",{href:!0});var kdt=s(vq);Pbo=r(kdt,"BlenderbotModel"),kdt.forEach(t),Bbo=r(b8e," (Blenderbot model)"),b8e.forEach(t),Ibo=i($),Dp=n($,"LI",{});var v8e=s(Dp);lde=n(v8e,"STRONG",{});var Sdt=s(lde);Nbo=r(Sdt,"blenderbot-small"),Sdt.forEach(t),qbo=r(v8e," \u2014 "),Fq=n(v8e,"A",{href:!0});var Rdt=s(Fq);jbo=r(Rdt,"BlenderbotSmallModel"),Rdt.forEach(t),Dbo=r(v8e," (BlenderbotSmall model)"),v8e.forEach(t),Gbo=i($),Gp=n($,"LI",{});var F8e=s(Gp);ide=n(F8e,"STRONG",{});var Pdt=s(ide);Obo=r(Pdt,"bloom"),Pdt.forEach(t),Vbo=r(F8e," \u2014 "),Tq=n(F8e,"A",{href:!0});var Bdt=s(Tq);Xbo=r(Bdt,"BloomModel"),Bdt.forEach(t),zbo=r(F8e," (BLOOM model)"),F8e.forEach(t),Qbo=i($),Op=n($,"LI",{});var T8e=s(Op);dde=n(T8e,"STRONG",{});var Idt=s(dde);Wbo=r(Idt,"camembert"),Idt.forEach(t),Hbo=r(T8e," \u2014 "),Mq=n(T8e,"A",{href:!0});var Ndt=s(Mq);Ubo=r(Ndt,"CamembertModel"),Ndt.forEach(t),Jbo=r(T8e," (CamemBERT model)"),T8e.forEach(t),Ybo=i($),Vp=n($,"LI",{});var M8e=s(Vp);cde=n(M8e,"STRONG",{});var qdt=s(cde);Kbo=r(qdt,"canine"),qdt.forEach(t),Zbo=r(M8e," \u2014 "),Eq=n(M8e,"A",{href:!0});var jdt=s(Eq);evo=r(jdt,"CanineModel"),jdt.forEach(t),ovo=r(M8e," (CANINE model)"),M8e.forEach(t),rvo=i($),Xp=n($,"LI",{});var E8e=s(Xp);fde=n(E8e,"STRONG",{});var Ddt=s(fde);tvo=r(Ddt,"clip"),Ddt.forEach(t),avo=r(E8e," \u2014 "),Cq=n(E8e,"A",{href:!0});var Gdt=s(Cq);nvo=r(Gdt,"CLIPModel"),Gdt.forEach(t),svo=r(E8e," (CLIP model)"),E8e.forEach(t),lvo=i($),zp=n($,"LI",{});var C8e=s(zp);mde=n(C8e,"STRONG",{});var Odt=s(mde);ivo=r(Odt,"codegen"),Odt.forEach(t),dvo=r(C8e," \u2014 "),wq=n(C8e,"A",{href:!0});var Vdt=s(wq);cvo=r(Vdt,"CodeGenModel"),Vdt.forEach(t),fvo=r(C8e," (CodeGen model)"),C8e.forEach(t),mvo=i($),Qp=n($,"LI",{});var w8e=s(Qp);gde=n(w8e,"STRONG",{});var Xdt=s(gde);gvo=r(Xdt,"convbert"),Xdt.forEach(t),hvo=r(w8e," \u2014 "),Aq=n(w8e,"A",{href:!0});var zdt=s(Aq);pvo=r(zdt,"ConvBertModel"),zdt.forEach(t),_vo=r(w8e," (ConvBERT model)"),w8e.forEach(t),uvo=i($),Wp=n($,"LI",{});var A8e=s(Wp);hde=n(A8e,"STRONG",{});var Qdt=s(hde);bvo=r(Qdt,"convnext"),Qdt.forEach(t),vvo=r(A8e," \u2014 "),Lq=n(A8e,"A",{href:!0});var Wdt=s(Lq);Fvo=r(Wdt,"ConvNextModel"),Wdt.forEach(t),Tvo=r(A8e," (ConvNeXT model)"),A8e.forEach(t),Mvo=i($),Hp=n($,"LI",{});var L8e=s(Hp);pde=n(L8e,"STRONG",{});var Hdt=s(pde);Evo=r(Hdt,"ctrl"),Hdt.forEach(t),Cvo=r(L8e," \u2014 "),yq=n(L8e,"A",{href:!0});var Udt=s(yq);wvo=r(Udt,"CTRLModel"),Udt.forEach(t),Avo=r(L8e," (CTRL model)"),L8e.forEach(t),Lvo=i($),Up=n($,"LI",{});var y8e=s(Up);_de=n(y8e,"STRONG",{});var Jdt=s(_de);yvo=r(Jdt,"cvt"),Jdt.forEach(t),xvo=r(y8e," \u2014 "),xq=n(y8e,"A",{href:!0});var Ydt=s(xq);$vo=r(Ydt,"CvtModel"),Ydt.forEach(t),kvo=r(y8e," (CvT model)"),y8e.forEach(t),Svo=i($),Jp=n($,"LI",{});var x8e=s(Jp);ude=n(x8e,"STRONG",{});var Kdt=s(ude);Rvo=r(Kdt,"data2vec-audio"),Kdt.forEach(t),Pvo=r(x8e," \u2014 "),$q=n(x8e,"A",{href:!0});var Zdt=s($q);Bvo=r(Zdt,"Data2VecAudioModel"),Zdt.forEach(t),Ivo=r(x8e," (Data2VecAudio model)"),x8e.forEach(t),Nvo=i($),Yp=n($,"LI",{});var $8e=s(Yp);bde=n($8e,"STRONG",{});var ect=s(bde);qvo=r(ect,"data2vec-text"),ect.forEach(t),jvo=r($8e," \u2014 "),kq=n($8e,"A",{href:!0});var oct=s(kq);Dvo=r(oct,"Data2VecTextModel"),oct.forEach(t),Gvo=r($8e," (Data2VecText model)"),$8e.forEach(t),Ovo=i($),Kp=n($,"LI",{});var k8e=s(Kp);vde=n(k8e,"STRONG",{});var rct=s(vde);Vvo=r(rct,"data2vec-vision"),rct.forEach(t),Xvo=r(k8e," \u2014 "),Sq=n(k8e,"A",{href:!0});var tct=s(Sq);zvo=r(tct,"Data2VecVisionModel"),tct.forEach(t),Qvo=r(k8e," (Data2VecVision model)"),k8e.forEach(t),Wvo=i($),Zp=n($,"LI",{});var S8e=s(Zp);Fde=n(S8e,"STRONG",{});var act=s(Fde);Hvo=r(act,"deberta"),act.forEach(t),Uvo=r(S8e," \u2014 "),Rq=n(S8e,"A",{href:!0});var nct=s(Rq);Jvo=r(nct,"DebertaModel"),nct.forEach(t),Yvo=r(S8e," (DeBERTa model)"),S8e.forEach(t),Kvo=i($),e_=n($,"LI",{});var R8e=s(e_);Tde=n(R8e,"STRONG",{});var sct=s(Tde);Zvo=r(sct,"deberta-v2"),sct.forEach(t),e0o=r(R8e," \u2014 "),Pq=n(R8e,"A",{href:!0});var lct=s(Pq);o0o=r(lct,"DebertaV2Model"),lct.forEach(t),r0o=r(R8e," (DeBERTa-v2 model)"),R8e.forEach(t),t0o=i($),o_=n($,"LI",{});var P8e=s(o_);Mde=n(P8e,"STRONG",{});var ict=s(Mde);a0o=r(ict,"decision_transformer"),ict.forEach(t),n0o=r(P8e," \u2014 "),Bq=n(P8e,"A",{href:!0});var dct=s(Bq);s0o=r(dct,"DecisionTransformerModel"),dct.forEach(t),l0o=r(P8e," (Decision Transformer model)"),P8e.forEach(t),i0o=i($),r_=n($,"LI",{});var B8e=s(r_);Ede=n(B8e,"STRONG",{});var cct=s(Ede);d0o=r(cct,"deit"),cct.forEach(t),c0o=r(B8e," \u2014 "),Iq=n(B8e,"A",{href:!0});var fct=s(Iq);f0o=r(fct,"DeiTModel"),fct.forEach(t),m0o=r(B8e," (DeiT model)"),B8e.forEach(t),g0o=i($),t_=n($,"LI",{});var I8e=s(t_);Cde=n(I8e,"STRONG",{});var mct=s(Cde);h0o=r(mct,"detr"),mct.forEach(t),p0o=r(I8e," \u2014 "),Nq=n(I8e,"A",{href:!0});var gct=s(Nq);_0o=r(gct,"DetrModel"),gct.forEach(t),u0o=r(I8e," (DETR model)"),I8e.forEach(t),b0o=i($),a_=n($,"LI",{});var N8e=s(a_);wde=n(N8e,"STRONG",{});var hct=s(wde);v0o=r(hct,"distilbert"),hct.forEach(t),F0o=r(N8e," \u2014 "),qq=n(N8e,"A",{href:!0});var pct=s(qq);T0o=r(pct,"DistilBertModel"),pct.forEach(t),M0o=r(N8e," (DistilBERT model)"),N8e.forEach(t),E0o=i($),n_=n($,"LI",{});var q8e=s(n_);Ade=n(q8e,"STRONG",{});var _ct=s(Ade);C0o=r(_ct,"dpr"),_ct.forEach(t),w0o=r(q8e," \u2014 "),jq=n(q8e,"A",{href:!0});var uct=s(jq);A0o=r(uct,"DPRQuestionEncoder"),uct.forEach(t),L0o=r(q8e," (DPR model)"),q8e.forEach(t),y0o=i($),s_=n($,"LI",{});var j8e=s(s_);Lde=n(j8e,"STRONG",{});var bct=s(Lde);x0o=r(bct,"dpt"),bct.forEach(t),$0o=r(j8e," \u2014 "),Dq=n(j8e,"A",{href:!0});var vct=s(Dq);k0o=r(vct,"DPTModel"),vct.forEach(t),S0o=r(j8e," (DPT model)"),j8e.forEach(t),R0o=i($),l_=n($,"LI",{});var D8e=s(l_);yde=n(D8e,"STRONG",{});var Fct=s(yde);P0o=r(Fct,"electra"),Fct.forEach(t),B0o=r(D8e," \u2014 "),Gq=n(D8e,"A",{href:!0});var Tct=s(Gq);I0o=r(Tct,"ElectraModel"),Tct.forEach(t),N0o=r(D8e," (ELECTRA model)"),D8e.forEach(t),q0o=i($),i_=n($,"LI",{});var G8e=s(i_);xde=n(G8e,"STRONG",{});var Mct=s(xde);j0o=r(Mct,"flaubert"),Mct.forEach(t),D0o=r(G8e," \u2014 "),Oq=n(G8e,"A",{href:!0});var Ect=s(Oq);G0o=r(Ect,"FlaubertModel"),Ect.forEach(t),O0o=r(G8e," (FlauBERT model)"),G8e.forEach(t),V0o=i($),d_=n($,"LI",{});var O8e=s(d_);$de=n(O8e,"STRONG",{});var Cct=s($de);X0o=r(Cct,"flava"),Cct.forEach(t),z0o=r(O8e," \u2014 "),Vq=n(O8e,"A",{href:!0});var wct=s(Vq);Q0o=r(wct,"FlavaModel"),wct.forEach(t),W0o=r(O8e," (FLAVA model)"),O8e.forEach(t),H0o=i($),c_=n($,"LI",{});var V8e=s(c_);kde=n(V8e,"STRONG",{});var Act=s(kde);U0o=r(Act,"fnet"),Act.forEach(t),J0o=r(V8e," \u2014 "),Xq=n(V8e,"A",{href:!0});var Lct=s(Xq);Y0o=r(Lct,"FNetModel"),Lct.forEach(t),K0o=r(V8e," (FNet model)"),V8e.forEach(t),Z0o=i($),f_=n($,"LI",{});var X8e=s(f_);Sde=n(X8e,"STRONG",{});var yct=s(Sde);eFo=r(yct,"fsmt"),yct.forEach(t),oFo=r(X8e," \u2014 "),zq=n(X8e,"A",{href:!0});var xct=s(zq);rFo=r(xct,"FSMTModel"),xct.forEach(t),tFo=r(X8e," (FairSeq Machine-Translation model)"),X8e.forEach(t),aFo=i($),Xs=n($,"LI",{});var tS=s(Xs);Rde=n(tS,"STRONG",{});var $ct=s(Rde);nFo=r($ct,"funnel"),$ct.forEach(t),sFo=r(tS," \u2014 "),Qq=n(tS,"A",{href:!0});var kct=s(Qq);lFo=r(kct,"FunnelModel"),kct.forEach(t),iFo=r(tS," or "),Wq=n(tS,"A",{href:!0});var Sct=s(Wq);dFo=r(Sct,"FunnelBaseModel"),Sct.forEach(t),cFo=r(tS," (Funnel Transformer model)"),tS.forEach(t),fFo=i($),m_=n($,"LI",{});var z8e=s(m_);Pde=n(z8e,"STRONG",{});var Rct=s(Pde);mFo=r(Rct,"glpn"),Rct.forEach(t),gFo=r(z8e," \u2014 "),Hq=n(z8e,"A",{href:!0});var Pct=s(Hq);hFo=r(Pct,"GLPNModel"),Pct.forEach(t),pFo=r(z8e," (GLPN model)"),z8e.forEach(t),_Fo=i($),g_=n($,"LI",{});var Q8e=s(g_);Bde=n(Q8e,"STRONG",{});var Bct=s(Bde);uFo=r(Bct,"gpt2"),Bct.forEach(t),bFo=r(Q8e," \u2014 "),Uq=n(Q8e,"A",{href:!0});var Ict=s(Uq);vFo=r(Ict,"GPT2Model"),Ict.forEach(t),FFo=r(Q8e," (OpenAI GPT-2 model)"),Q8e.forEach(t),TFo=i($),h_=n($,"LI",{});var W8e=s(h_);Ide=n(W8e,"STRONG",{});var Nct=s(Ide);MFo=r(Nct,"gpt_neo"),Nct.forEach(t),EFo=r(W8e," \u2014 "),Jq=n(W8e,"A",{href:!0});var qct=s(Jq);CFo=r(qct,"GPTNeoModel"),qct.forEach(t),wFo=r(W8e," (GPT Neo model)"),W8e.forEach(t),AFo=i($),p_=n($,"LI",{});var H8e=s(p_);Nde=n(H8e,"STRONG",{});var jct=s(Nde);LFo=r(jct,"gpt_neox"),jct.forEach(t),yFo=r(H8e," \u2014 "),Yq=n(H8e,"A",{href:!0});var Dct=s(Yq);xFo=r(Dct,"GPTNeoXModel"),Dct.forEach(t),$Fo=r(H8e," (GPT NeoX model)"),H8e.forEach(t),kFo=i($),__=n($,"LI",{});var U8e=s(__);qde=n(U8e,"STRONG",{});var Gct=s(qde);SFo=r(Gct,"gptj"),Gct.forEach(t),RFo=r(U8e," \u2014 "),Kq=n(U8e,"A",{href:!0});var Oct=s(Kq);PFo=r(Oct,"GPTJModel"),Oct.forEach(t),BFo=r(U8e," (GPT-J model)"),U8e.forEach(t),IFo=i($),u_=n($,"LI",{});var J8e=s(u_);jde=n(J8e,"STRONG",{});var Vct=s(jde);NFo=r(Vct,"hubert"),Vct.forEach(t),qFo=r(J8e," \u2014 "),Zq=n(J8e,"A",{href:!0});var Xct=s(Zq);jFo=r(Xct,"HubertModel"),Xct.forEach(t),DFo=r(J8e," (Hubert model)"),J8e.forEach(t),GFo=i($),b_=n($,"LI",{});var Y8e=s(b_);Dde=n(Y8e,"STRONG",{});var zct=s(Dde);OFo=r(zct,"ibert"),zct.forEach(t),VFo=r(Y8e," \u2014 "),ej=n(Y8e,"A",{href:!0});var Qct=s(ej);XFo=r(Qct,"IBertModel"),Qct.forEach(t),zFo=r(Y8e," (I-BERT model)"),Y8e.forEach(t),QFo=i($),v_=n($,"LI",{});var K8e=s(v_);Gde=n(K8e,"STRONG",{});var Wct=s(Gde);WFo=r(Wct,"imagegpt"),Wct.forEach(t),HFo=r(K8e," \u2014 "),oj=n(K8e,"A",{href:!0});var Hct=s(oj);UFo=r(Hct,"ImageGPTModel"),Hct.forEach(t),JFo=r(K8e," (ImageGPT model)"),K8e.forEach(t),YFo=i($),F_=n($,"LI",{});var Z8e=s(F_);Ode=n(Z8e,"STRONG",{});var Uct=s(Ode);KFo=r(Uct,"layoutlm"),Uct.forEach(t),ZFo=r(Z8e," \u2014 "),rj=n(Z8e,"A",{href:!0});var Jct=s(rj);eTo=r(Jct,"LayoutLMModel"),Jct.forEach(t),oTo=r(Z8e," (LayoutLM model)"),Z8e.forEach(t),rTo=i($),T_=n($,"LI",{});var e9e=s(T_);Vde=n(e9e,"STRONG",{});var Yct=s(Vde);tTo=r(Yct,"layoutlmv2"),Yct.forEach(t),aTo=r(e9e," \u2014 "),tj=n(e9e,"A",{href:!0});var Kct=s(tj);nTo=r(Kct,"LayoutLMv2Model"),Kct.forEach(t),sTo=r(e9e," (LayoutLMv2 model)"),e9e.forEach(t),lTo=i($),M_=n($,"LI",{});var o9e=s(M_);Xde=n(o9e,"STRONG",{});var Zct=s(Xde);iTo=r(Zct,"layoutlmv3"),Zct.forEach(t),dTo=r(o9e," \u2014 "),aj=n(o9e,"A",{href:!0});var eft=s(aj);cTo=r(eft,"LayoutLMv3Model"),eft.forEach(t),fTo=r(o9e," (LayoutLMv3 model)"),o9e.forEach(t),mTo=i($),E_=n($,"LI",{});var r9e=s(E_);zde=n(r9e,"STRONG",{});var oft=s(zde);gTo=r(oft,"led"),oft.forEach(t),hTo=r(r9e," \u2014 "),nj=n(r9e,"A",{href:!0});var rft=s(nj);pTo=r(rft,"LEDModel"),rft.forEach(t),_To=r(r9e," (LED model)"),r9e.forEach(t),uTo=i($),C_=n($,"LI",{});var t9e=s(C_);Qde=n(t9e,"STRONG",{});var tft=s(Qde);bTo=r(tft,"levit"),tft.forEach(t),vTo=r(t9e," \u2014 "),sj=n(t9e,"A",{href:!0});var aft=s(sj);FTo=r(aft,"LevitModel"),aft.forEach(t),TTo=r(t9e," (LeViT model)"),t9e.forEach(t),MTo=i($),w_=n($,"LI",{});var a9e=s(w_);Wde=n(a9e,"STRONG",{});var nft=s(Wde);ETo=r(nft,"longformer"),nft.forEach(t),CTo=r(a9e," \u2014 "),lj=n(a9e,"A",{href:!0});var sft=s(lj);wTo=r(sft,"LongformerModel"),sft.forEach(t),ATo=r(a9e," (Longformer model)"),a9e.forEach(t),LTo=i($),A_=n($,"LI",{});var n9e=s(A_);Hde=n(n9e,"STRONG",{});var lft=s(Hde);yTo=r(lft,"longt5"),lft.forEach(t),xTo=r(n9e," \u2014 "),ij=n(n9e,"A",{href:!0});var ift=s(ij);$To=r(ift,"LongT5Model"),ift.forEach(t),kTo=r(n9e," (LongT5 model)"),n9e.forEach(t),STo=i($),L_=n($,"LI",{});var s9e=s(L_);Ude=n(s9e,"STRONG",{});var dft=s(Ude);RTo=r(dft,"luke"),dft.forEach(t),PTo=r(s9e," \u2014 "),dj=n(s9e,"A",{href:!0});var cft=s(dj);BTo=r(cft,"LukeModel"),cft.forEach(t),ITo=r(s9e," (LUKE model)"),s9e.forEach(t),NTo=i($),y_=n($,"LI",{});var l9e=s(y_);Jde=n(l9e,"STRONG",{});var fft=s(Jde);qTo=r(fft,"lxmert"),fft.forEach(t),jTo=r(l9e," \u2014 "),cj=n(l9e,"A",{href:!0});var mft=s(cj);DTo=r(mft,"LxmertModel"),mft.forEach(t),GTo=r(l9e," (LXMERT model)"),l9e.forEach(t),OTo=i($),x_=n($,"LI",{});var i9e=s(x_);Yde=n(i9e,"STRONG",{});var gft=s(Yde);VTo=r(gft,"m2m_100"),gft.forEach(t),XTo=r(i9e," \u2014 "),fj=n(i9e,"A",{href:!0});var hft=s(fj);zTo=r(hft,"M2M100Model"),hft.forEach(t),QTo=r(i9e," (M2M100 model)"),i9e.forEach(t),WTo=i($),$_=n($,"LI",{});var d9e=s($_);Kde=n(d9e,"STRONG",{});var pft=s(Kde);HTo=r(pft,"marian"),pft.forEach(t),UTo=r(d9e," \u2014 "),mj=n(d9e,"A",{href:!0});var _ft=s(mj);JTo=r(_ft,"MarianModel"),_ft.forEach(t),YTo=r(d9e," (Marian model)"),d9e.forEach(t),KTo=i($),k_=n($,"LI",{});var c9e=s(k_);Zde=n(c9e,"STRONG",{});var uft=s(Zde);ZTo=r(uft,"maskformer"),uft.forEach(t),eMo=r(c9e," \u2014 "),gj=n(c9e,"A",{href:!0});var bft=s(gj);oMo=r(bft,"MaskFormerModel"),bft.forEach(t),rMo=r(c9e," (MaskFormer model)"),c9e.forEach(t),tMo=i($),S_=n($,"LI",{});var f9e=s(S_);ece=n(f9e,"STRONG",{});var vft=s(ece);aMo=r(vft,"mbart"),vft.forEach(t),nMo=r(f9e," \u2014 "),hj=n(f9e,"A",{href:!0});var Fft=s(hj);sMo=r(Fft,"MBartModel"),Fft.forEach(t),lMo=r(f9e," (mBART model)"),f9e.forEach(t),iMo=i($),R_=n($,"LI",{});var m9e=s(R_);oce=n(m9e,"STRONG",{});var Tft=s(oce);dMo=r(Tft,"mctct"),Tft.forEach(t),cMo=r(m9e," \u2014 "),pj=n(m9e,"A",{href:!0});var Mft=s(pj);fMo=r(Mft,"MCTCTModel"),Mft.forEach(t),mMo=r(m9e," (M-CTC-T model)"),m9e.forEach(t),gMo=i($),P_=n($,"LI",{});var g9e=s(P_);rce=n(g9e,"STRONG",{});var Eft=s(rce);hMo=r(Eft,"megatron-bert"),Eft.forEach(t),pMo=r(g9e," \u2014 "),_j=n(g9e,"A",{href:!0});var Cft=s(_j);_Mo=r(Cft,"MegatronBertModel"),Cft.forEach(t),uMo=r(g9e," (Megatron-BERT model)"),g9e.forEach(t),bMo=i($),B_=n($,"LI",{});var h9e=s(B_);tce=n(h9e,"STRONG",{});var wft=s(tce);vMo=r(wft,"mobilebert"),wft.forEach(t),FMo=r(h9e," \u2014 "),uj=n(h9e,"A",{href:!0});var Aft=s(uj);TMo=r(Aft,"MobileBertModel"),Aft.forEach(t),MMo=r(h9e," (MobileBERT model)"),h9e.forEach(t),EMo=i($),I_=n($,"LI",{});var p9e=s(I_);ace=n(p9e,"STRONG",{});var Lft=s(ace);CMo=r(Lft,"mpnet"),Lft.forEach(t),wMo=r(p9e," \u2014 "),bj=n(p9e,"A",{href:!0});var yft=s(bj);AMo=r(yft,"MPNetModel"),yft.forEach(t),LMo=r(p9e," (MPNet model)"),p9e.forEach(t),yMo=i($),N_=n($,"LI",{});var _9e=s(N_);nce=n(_9e,"STRONG",{});var xft=s(nce);xMo=r(xft,"mt5"),xft.forEach(t),$Mo=r(_9e," \u2014 "),vj=n(_9e,"A",{href:!0});var $ft=s(vj);kMo=r($ft,"MT5Model"),$ft.forEach(t),SMo=r(_9e," (MT5 model)"),_9e.forEach(t),RMo=i($),q_=n($,"LI",{});var u9e=s(q_);sce=n(u9e,"STRONG",{});var kft=s(sce);PMo=r(kft,"nezha"),kft.forEach(t),BMo=r(u9e," \u2014 "),Fj=n(u9e,"A",{href:!0});var Sft=s(Fj);IMo=r(Sft,"NezhaModel"),Sft.forEach(t),NMo=r(u9e," (Nezha model)"),u9e.forEach(t),qMo=i($),j_=n($,"LI",{});var b9e=s(j_);lce=n(b9e,"STRONG",{});var Rft=s(lce);jMo=r(Rft,"nystromformer"),Rft.forEach(t),DMo=r(b9e," \u2014 "),Tj=n(b9e,"A",{href:!0});var Pft=s(Tj);GMo=r(Pft,"NystromformerModel"),Pft.forEach(t),OMo=r(b9e," (Nystr\xF6mformer model)"),b9e.forEach(t),VMo=i($),D_=n($,"LI",{});var v9e=s(D_);ice=n(v9e,"STRONG",{});var Bft=s(ice);XMo=r(Bft,"openai-gpt"),Bft.forEach(t),zMo=r(v9e," \u2014 "),Mj=n(v9e,"A",{href:!0});var Ift=s(Mj);QMo=r(Ift,"OpenAIGPTModel"),Ift.forEach(t),WMo=r(v9e," (OpenAI GPT model)"),v9e.forEach(t),HMo=i($),G_=n($,"LI",{});var F9e=s(G_);dce=n(F9e,"STRONG",{});var Nft=s(dce);UMo=r(Nft,"opt"),Nft.forEach(t),JMo=r(F9e," \u2014 "),Ej=n(F9e,"A",{href:!0});var qft=s(Ej);YMo=r(qft,"OPTModel"),qft.forEach(t),KMo=r(F9e," (OPT model)"),F9e.forEach(t),ZMo=i($),O_=n($,"LI",{});var T9e=s(O_);cce=n(T9e,"STRONG",{});var jft=s(cce);eEo=r(jft,"pegasus"),jft.forEach(t),oEo=r(T9e," \u2014 "),Cj=n(T9e,"A",{href:!0});var Dft=s(Cj);rEo=r(Dft,"PegasusModel"),Dft.forEach(t),tEo=r(T9e," (Pegasus model)"),T9e.forEach(t),aEo=i($),V_=n($,"LI",{});var M9e=s(V_);fce=n(M9e,"STRONG",{});var Gft=s(fce);nEo=r(Gft,"perceiver"),Gft.forEach(t),sEo=r(M9e," \u2014 "),wj=n(M9e,"A",{href:!0});var Oft=s(wj);lEo=r(Oft,"PerceiverModel"),Oft.forEach(t),iEo=r(M9e," (Perceiver model)"),M9e.forEach(t),dEo=i($),X_=n($,"LI",{});var E9e=s(X_);mce=n(E9e,"STRONG",{});var Vft=s(mce);cEo=r(Vft,"plbart"),Vft.forEach(t),fEo=r(E9e," \u2014 "),Aj=n(E9e,"A",{href:!0});var Xft=s(Aj);mEo=r(Xft,"PLBartModel"),Xft.forEach(t),gEo=r(E9e," (PLBart model)"),E9e.forEach(t),hEo=i($),z_=n($,"LI",{});var C9e=s(z_);gce=n(C9e,"STRONG",{});var zft=s(gce);pEo=r(zft,"poolformer"),zft.forEach(t),_Eo=r(C9e," \u2014 "),Lj=n(C9e,"A",{href:!0});var Qft=s(Lj);uEo=r(Qft,"PoolFormerModel"),Qft.forEach(t),bEo=r(C9e," (PoolFormer model)"),C9e.forEach(t),vEo=i($),Q_=n($,"LI",{});var w9e=s(Q_);hce=n(w9e,"STRONG",{});var Wft=s(hce);FEo=r(Wft,"prophetnet"),Wft.forEach(t),TEo=r(w9e," \u2014 "),yj=n(w9e,"A",{href:!0});var Hft=s(yj);MEo=r(Hft,"ProphetNetModel"),Hft.forEach(t),EEo=r(w9e," (ProphetNet model)"),w9e.forEach(t),CEo=i($),W_=n($,"LI",{});var A9e=s(W_);pce=n(A9e,"STRONG",{});var Uft=s(pce);wEo=r(Uft,"qdqbert"),Uft.forEach(t),AEo=r(A9e," \u2014 "),xj=n(A9e,"A",{href:!0});var Jft=s(xj);LEo=r(Jft,"QDQBertModel"),Jft.forEach(t),yEo=r(A9e," (QDQBert model)"),A9e.forEach(t),xEo=i($),H_=n($,"LI",{});var L9e=s(H_);_ce=n(L9e,"STRONG",{});var Yft=s(_ce);$Eo=r(Yft,"reformer"),Yft.forEach(t),kEo=r(L9e," \u2014 "),$j=n(L9e,"A",{href:!0});var Kft=s($j);SEo=r(Kft,"ReformerModel"),Kft.forEach(t),REo=r(L9e," (Reformer model)"),L9e.forEach(t),PEo=i($),U_=n($,"LI",{});var y9e=s(U_);uce=n(y9e,"STRONG",{});var Zft=s(uce);BEo=r(Zft,"regnet"),Zft.forEach(t),IEo=r(y9e," \u2014 "),kj=n(y9e,"A",{href:!0});var emt=s(kj);NEo=r(emt,"RegNetModel"),emt.forEach(t),qEo=r(y9e," (RegNet model)"),y9e.forEach(t),jEo=i($),J_=n($,"LI",{});var x9e=s(J_);bce=n(x9e,"STRONG",{});var omt=s(bce);DEo=r(omt,"rembert"),omt.forEach(t),GEo=r(x9e," \u2014 "),Sj=n(x9e,"A",{href:!0});var rmt=s(Sj);OEo=r(rmt,"RemBertModel"),rmt.forEach(t),VEo=r(x9e," (RemBERT model)"),x9e.forEach(t),XEo=i($),Y_=n($,"LI",{});var $9e=s(Y_);vce=n($9e,"STRONG",{});var tmt=s(vce);zEo=r(tmt,"resnet"),tmt.forEach(t),QEo=r($9e," \u2014 "),Rj=n($9e,"A",{href:!0});var amt=s(Rj);WEo=r(amt,"ResNetModel"),amt.forEach(t),HEo=r($9e," (ResNet model)"),$9e.forEach(t),UEo=i($),K_=n($,"LI",{});var k9e=s(K_);Fce=n(k9e,"STRONG",{});var nmt=s(Fce);JEo=r(nmt,"retribert"),nmt.forEach(t),YEo=r(k9e," \u2014 "),Pj=n(k9e,"A",{href:!0});var smt=s(Pj);KEo=r(smt,"RetriBertModel"),smt.forEach(t),ZEo=r(k9e," (RetriBERT model)"),k9e.forEach(t),e4o=i($),Z_=n($,"LI",{});var S9e=s(Z_);Tce=n(S9e,"STRONG",{});var lmt=s(Tce);o4o=r(lmt,"roberta"),lmt.forEach(t),r4o=r(S9e," \u2014 "),Bj=n(S9e,"A",{href:!0});var imt=s(Bj);t4o=r(imt,"RobertaModel"),imt.forEach(t),a4o=r(S9e," (RoBERTa model)"),S9e.forEach(t),n4o=i($),eu=n($,"LI",{});var R9e=s(eu);Mce=n(R9e,"STRONG",{});var dmt=s(Mce);s4o=r(dmt,"roformer"),dmt.forEach(t),l4o=r(R9e," \u2014 "),Ij=n(R9e,"A",{href:!0});var cmt=s(Ij);i4o=r(cmt,"RoFormerModel"),cmt.forEach(t),d4o=r(R9e," (RoFormer model)"),R9e.forEach(t),c4o=i($),ou=n($,"LI",{});var P9e=s(ou);Ece=n(P9e,"STRONG",{});var fmt=s(Ece);f4o=r(fmt,"segformer"),fmt.forEach(t),m4o=r(P9e," \u2014 "),Nj=n(P9e,"A",{href:!0});var mmt=s(Nj);g4o=r(mmt,"SegformerModel"),mmt.forEach(t),h4o=r(P9e," (SegFormer model)"),P9e.forEach(t),p4o=i($),ru=n($,"LI",{});var B9e=s(ru);Cce=n(B9e,"STRONG",{});var gmt=s(Cce);_4o=r(gmt,"sew"),gmt.forEach(t),u4o=r(B9e," \u2014 "),qj=n(B9e,"A",{href:!0});var hmt=s(qj);b4o=r(hmt,"SEWModel"),hmt.forEach(t),v4o=r(B9e," (SEW model)"),B9e.forEach(t),F4o=i($),tu=n($,"LI",{});var I9e=s(tu);wce=n(I9e,"STRONG",{});var pmt=s(wce);T4o=r(pmt,"sew-d"),pmt.forEach(t),M4o=r(I9e," \u2014 "),jj=n(I9e,"A",{href:!0});var _mt=s(jj);E4o=r(_mt,"SEWDModel"),_mt.forEach(t),C4o=r(I9e," (SEW-D model)"),I9e.forEach(t),w4o=i($),au=n($,"LI",{});var N9e=s(au);Ace=n(N9e,"STRONG",{});var umt=s(Ace);A4o=r(umt,"speech_to_text"),umt.forEach(t),L4o=r(N9e," \u2014 "),Dj=n(N9e,"A",{href:!0});var bmt=s(Dj);y4o=r(bmt,"Speech2TextModel"),bmt.forEach(t),x4o=r(N9e," (Speech2Text model)"),N9e.forEach(t),$4o=i($),nu=n($,"LI",{});var q9e=s(nu);Lce=n(q9e,"STRONG",{});var vmt=s(Lce);k4o=r(vmt,"splinter"),vmt.forEach(t),S4o=r(q9e," \u2014 "),Gj=n(q9e,"A",{href:!0});var Fmt=s(Gj);R4o=r(Fmt,"SplinterModel"),Fmt.forEach(t),P4o=r(q9e," (Splinter model)"),q9e.forEach(t),B4o=i($),su=n($,"LI",{});var j9e=s(su);yce=n(j9e,"STRONG",{});var Tmt=s(yce);I4o=r(Tmt,"squeezebert"),Tmt.forEach(t),N4o=r(j9e," \u2014 "),Oj=n(j9e,"A",{href:!0});var Mmt=s(Oj);q4o=r(Mmt,"SqueezeBertModel"),Mmt.forEach(t),j4o=r(j9e," (SqueezeBERT model)"),j9e.forEach(t),D4o=i($),lu=n($,"LI",{});var D9e=s(lu);xce=n(D9e,"STRONG",{});var Emt=s(xce);G4o=r(Emt,"swin"),Emt.forEach(t),O4o=r(D9e," \u2014 "),Vj=n(D9e,"A",{href:!0});var Cmt=s(Vj);V4o=r(Cmt,"SwinModel"),Cmt.forEach(t),X4o=r(D9e," (Swin Transformer model)"),D9e.forEach(t),z4o=i($),iu=n($,"LI",{});var G9e=s(iu);$ce=n(G9e,"STRONG",{});var wmt=s($ce);Q4o=r(wmt,"t5"),wmt.forEach(t),W4o=r(G9e," \u2014 "),Xj=n(G9e,"A",{href:!0});var Amt=s(Xj);H4o=r(Amt,"T5Model"),Amt.forEach(t),U4o=r(G9e," (T5 model)"),G9e.forEach(t),J4o=i($),du=n($,"LI",{});var O9e=s(du);kce=n(O9e,"STRONG",{});var Lmt=s(kce);Y4o=r(Lmt,"tapas"),Lmt.forEach(t),K4o=r(O9e," \u2014 "),zj=n(O9e,"A",{href:!0});var ymt=s(zj);Z4o=r(ymt,"TapasModel"),ymt.forEach(t),eCo=r(O9e," (TAPAS model)"),O9e.forEach(t),oCo=i($),cu=n($,"LI",{});var V9e=s(cu);Sce=n(V9e,"STRONG",{});var xmt=s(Sce);rCo=r(xmt,"trajectory_transformer"),xmt.forEach(t),tCo=r(V9e," \u2014 "),Qj=n(V9e,"A",{href:!0});var $mt=s(Qj);aCo=r($mt,"TrajectoryTransformerModel"),$mt.forEach(t),nCo=r(V9e," (Trajectory Transformer model)"),V9e.forEach(t),sCo=i($),fu=n($,"LI",{});var X9e=s(fu);Rce=n(X9e,"STRONG",{});var kmt=s(Rce);lCo=r(kmt,"transfo-xl"),kmt.forEach(t),iCo=r(X9e," \u2014 "),Wj=n(X9e,"A",{href:!0});var Smt=s(Wj);dCo=r(Smt,"TransfoXLModel"),Smt.forEach(t),cCo=r(X9e," (Transformer-XL model)"),X9e.forEach(t),fCo=i($),mu=n($,"LI",{});var z9e=s(mu);Pce=n(z9e,"STRONG",{});var Rmt=s(Pce);mCo=r(Rmt,"unispeech"),Rmt.forEach(t),gCo=r(z9e," \u2014 "),Hj=n(z9e,"A",{href:!0});var Pmt=s(Hj);hCo=r(Pmt,"UniSpeechModel"),Pmt.forEach(t),pCo=r(z9e," (UniSpeech model)"),z9e.forEach(t),_Co=i($),gu=n($,"LI",{});var Q9e=s(gu);Bce=n(Q9e,"STRONG",{});var Bmt=s(Bce);uCo=r(Bmt,"unispeech-sat"),Bmt.forEach(t),bCo=r(Q9e," \u2014 "),Uj=n(Q9e,"A",{href:!0});var Imt=s(Uj);vCo=r(Imt,"UniSpeechSatModel"),Imt.forEach(t),FCo=r(Q9e," (UniSpeechSat model)"),Q9e.forEach(t),TCo=i($),hu=n($,"LI",{});var W9e=s(hu);Ice=n(W9e,"STRONG",{});var Nmt=s(Ice);MCo=r(Nmt,"van"),Nmt.forEach(t),ECo=r(W9e," \u2014 "),Jj=n(W9e,"A",{href:!0});var qmt=s(Jj);CCo=r(qmt,"VanModel"),qmt.forEach(t),wCo=r(W9e," (VAN model)"),W9e.forEach(t),ACo=i($),pu=n($,"LI",{});var H9e=s(pu);Nce=n(H9e,"STRONG",{});var jmt=s(Nce);LCo=r(jmt,"vilt"),jmt.forEach(t),yCo=r(H9e," \u2014 "),Yj=n(H9e,"A",{href:!0});var Dmt=s(Yj);xCo=r(Dmt,"ViltModel"),Dmt.forEach(t),$Co=r(H9e," (ViLT model)"),H9e.forEach(t),kCo=i($),_u=n($,"LI",{});var U9e=s(_u);qce=n(U9e,"STRONG",{});var Gmt=s(qce);SCo=r(Gmt,"vision-text-dual-encoder"),Gmt.forEach(t),RCo=r(U9e," \u2014 "),Kj=n(U9e,"A",{href:!0});var Omt=s(Kj);PCo=r(Omt,"VisionTextDualEncoderModel"),Omt.forEach(t),BCo=r(U9e," (VisionTextDualEncoder model)"),U9e.forEach(t),ICo=i($),uu=n($,"LI",{});var J9e=s(uu);jce=n(J9e,"STRONG",{});var Vmt=s(jce);NCo=r(Vmt,"visual_bert"),Vmt.forEach(t),qCo=r(J9e," \u2014 "),Zj=n(J9e,"A",{href:!0});var Xmt=s(Zj);jCo=r(Xmt,"VisualBertModel"),Xmt.forEach(t),DCo=r(J9e," (VisualBERT model)"),J9e.forEach(t),GCo=i($),bu=n($,"LI",{});var Y9e=s(bu);Dce=n(Y9e,"STRONG",{});var zmt=s(Dce);OCo=r(zmt,"vit"),zmt.forEach(t),VCo=r(Y9e," \u2014 "),eD=n(Y9e,"A",{href:!0});var Qmt=s(eD);XCo=r(Qmt,"ViTModel"),Qmt.forEach(t),zCo=r(Y9e," (ViT model)"),Y9e.forEach(t),QCo=i($),vu=n($,"LI",{});var K9e=s(vu);Gce=n(K9e,"STRONG",{});var Wmt=s(Gce);WCo=r(Wmt,"vit_mae"),Wmt.forEach(t),HCo=r(K9e," \u2014 "),oD=n(K9e,"A",{href:!0});var Hmt=s(oD);UCo=r(Hmt,"ViTMAEModel"),Hmt.forEach(t),JCo=r(K9e," (ViTMAE model)"),K9e.forEach(t),YCo=i($),Fu=n($,"LI",{});var Z9e=s(Fu);Oce=n(Z9e,"STRONG",{});var Umt=s(Oce);KCo=r(Umt,"wav2vec2"),Umt.forEach(t),ZCo=r(Z9e," \u2014 "),rD=n(Z9e,"A",{href:!0});var Jmt=s(rD);e5o=r(Jmt,"Wav2Vec2Model"),Jmt.forEach(t),o5o=r(Z9e," (Wav2Vec2 model)"),Z9e.forEach(t),r5o=i($),Tu=n($,"LI",{});var exe=s(Tu);Vce=n(exe,"STRONG",{});var Ymt=s(Vce);t5o=r(Ymt,"wav2vec2-conformer"),Ymt.forEach(t),a5o=r(exe," \u2014 "),tD=n(exe,"A",{href:!0});var Kmt=s(tD);n5o=r(Kmt,"Wav2Vec2ConformerModel"),Kmt.forEach(t),s5o=r(exe," (Wav2Vec2-Conformer model)"),exe.forEach(t),l5o=i($),Mu=n($,"LI",{});var oxe=s(Mu);Xce=n(oxe,"STRONG",{});var Zmt=s(Xce);i5o=r(Zmt,"wavlm"),Zmt.forEach(t),d5o=r(oxe," \u2014 "),aD=n(oxe,"A",{href:!0});var egt=s(aD);c5o=r(egt,"WavLMModel"),egt.forEach(t),f5o=r(oxe," (WavLM model)"),oxe.forEach(t),m5o=i($),Eu=n($,"LI",{});var rxe=s(Eu);zce=n(rxe,"STRONG",{});var ogt=s(zce);g5o=r(ogt,"xglm"),ogt.forEach(t),h5o=r(rxe," \u2014 "),nD=n(rxe,"A",{href:!0});var rgt=s(nD);p5o=r(rgt,"XGLMModel"),rgt.forEach(t),_5o=r(rxe," (XGLM model)"),rxe.forEach(t),u5o=i($),Cu=n($,"LI",{});var txe=s(Cu);Qce=n(txe,"STRONG",{});var tgt=s(Qce);b5o=r(tgt,"xlm"),tgt.forEach(t),v5o=r(txe," \u2014 "),sD=n(txe,"A",{href:!0});var agt=s(sD);F5o=r(agt,"XLMModel"),agt.forEach(t),T5o=r(txe," (XLM model)"),txe.forEach(t),M5o=i($),wu=n($,"LI",{});var axe=s(wu);Wce=n(axe,"STRONG",{});var ngt=s(Wce);E5o=r(ngt,"xlm-prophetnet"),ngt.forEach(t),C5o=r(axe," \u2014 "),lD=n(axe,"A",{href:!0});var sgt=s(lD);w5o=r(sgt,"XLMProphetNetModel"),sgt.forEach(t),A5o=r(axe," (XLM-ProphetNet model)"),axe.forEach(t),L5o=i($),Au=n($,"LI",{});var nxe=s(Au);Hce=n(nxe,"STRONG",{});var lgt=s(Hce);y5o=r(lgt,"xlm-roberta"),lgt.forEach(t),x5o=r(nxe," \u2014 "),iD=n(nxe,"A",{href:!0});var igt=s(iD);$5o=r(igt,"XLMRobertaModel"),igt.forEach(t),k5o=r(nxe," (XLM-RoBERTa model)"),nxe.forEach(t),S5o=i($),Lu=n($,"LI",{});var sxe=s(Lu);Uce=n(sxe,"STRONG",{});var dgt=s(Uce);R5o=r(dgt,"xlm-roberta-xl"),dgt.forEach(t),P5o=r(sxe," \u2014 "),dD=n(sxe,"A",{href:!0});var cgt=s(dD);B5o=r(cgt,"XLMRobertaXLModel"),cgt.forEach(t),I5o=r(sxe," (XLM-RoBERTa-XL model)"),sxe.forEach(t),N5o=i($),yu=n($,"LI",{});var lxe=s(yu);Jce=n(lxe,"STRONG",{});var fgt=s(Jce);q5o=r(fgt,"xlnet"),fgt.forEach(t),j5o=r(lxe," \u2014 "),cD=n(lxe,"A",{href:!0});var mgt=s(cD);D5o=r(mgt,"XLNetModel"),mgt.forEach(t),G5o=r(lxe," (XLNet model)"),lxe.forEach(t),O5o=i($),xu=n($,"LI",{});var ixe=s(xu);Yce=n(ixe,"STRONG",{});var ggt=s(Yce);V5o=r(ggt,"yolos"),ggt.forEach(t),X5o=r(ixe," \u2014 "),fD=n(ixe,"A",{href:!0});var hgt=s(fD);z5o=r(hgt,"YolosModel"),hgt.forEach(t),Q5o=r(ixe," (YOLOS model)"),ixe.forEach(t),W5o=i($),$u=n($,"LI",{});var dxe=s($u);Kce=n(dxe,"STRONG",{});var pgt=s(Kce);H5o=r(pgt,"yoso"),pgt.forEach(t),U5o=r(dxe," \u2014 "),mD=n(dxe,"A",{href:!0});var _gt=s(mD);J5o=r(_gt,"YosoModel"),_gt.forEach(t),Y5o=r(dxe," (YOSO model)"),dxe.forEach(t),$.forEach(t),K5o=i(aa),ku=n(aa,"P",{});var cxe=s(ku);Z5o=r(cxe,"The model is set in evaluation mode by default using "),Zce=n(cxe,"CODE",{});var ugt=s(Zce);e3o=r(ugt,"model.eval()"),ugt.forEach(t),o3o=r(cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(cxe,"CODE",{});var bgt=s(efe);r3o=r(bgt,"model.train()"),bgt.forEach(t),cxe.forEach(t),t3o=i(aa),T(Su.$$.fragment,aa),aa.forEach(t),Ks.forEach(t),uOe=i(f),ji=n(f,"H2",{class:!0});var EXe=s(ji);Ru=n(EXe,"A",{id:!0,class:!0,href:!0});var vgt=s(Ru);ofe=n(vgt,"SPAN",{});var Fgt=s(ofe);T(cy.$$.fragment,Fgt),Fgt.forEach(t),vgt.forEach(t),a3o=i(EXe),rfe=n(EXe,"SPAN",{});var Tgt=s(rfe);n3o=r(Tgt,"AutoModelForPreTraining"),Tgt.forEach(t),EXe.forEach(t),bOe=i(f),$o=n(f,"DIV",{class:!0});var Zs=s($o);T(fy.$$.fragment,Zs),s3o=i(Zs),Di=n(Zs,"P",{});var koe=s(Di);l3o=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gD=n(koe,"A",{href:!0});var Mgt=s(gD);i3o=r(Mgt,"from_pretrained()"),Mgt.forEach(t),d3o=r(koe," class method or the "),hD=n(koe,"A",{href:!0});var Egt=s(hD);c3o=r(Egt,"from_config()"),Egt.forEach(t),f3o=r(koe,` class
method.`),koe.forEach(t),m3o=i(Zs),my=n(Zs,"P",{});var CXe=s(my);g3o=r(CXe,"This class cannot be instantiated directly using "),tfe=n(CXe,"CODE",{});var Cgt=s(tfe);h3o=r(Cgt,"__init__()"),Cgt.forEach(t),p3o=r(CXe," (throws an error)."),CXe.forEach(t),_3o=i(Zs),st=n(Zs,"DIV",{class:!0});var NA=s(st);T(gy.$$.fragment,NA),u3o=i(NA),afe=n(NA,"P",{});var wgt=s(afe);b3o=r(wgt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wgt.forEach(t),v3o=i(NA),Gi=n(NA,"P",{});var Soe=s(Gi);F3o=r(Soe,`Note:
Loading a model from its configuration file does `),nfe=n(Soe,"STRONG",{});var Agt=s(nfe);T3o=r(Agt,"not"),Agt.forEach(t),M3o=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pD=n(Soe,"A",{href:!0});var Lgt=s(pD);E3o=r(Lgt,"from_pretrained()"),Lgt.forEach(t),C3o=r(Soe," to load the model weights."),Soe.forEach(t),w3o=i(NA),T(Pu.$$.fragment,NA),NA.forEach(t),A3o=i(Zs),Ye=n(Zs,"DIV",{class:!0});var na=s(Ye);T(hy.$$.fragment,na),L3o=i(na),sfe=n(na,"P",{});var ygt=s(sfe);y3o=r(ygt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ygt.forEach(t),x3o=i(na),Pa=n(na,"P",{});var qA=s(Pa);$3o=r(qA,"The model class to instantiate is selected based on the "),lfe=n(qA,"CODE",{});var xgt=s(lfe);k3o=r(xgt,"model_type"),xgt.forEach(t),S3o=r(qA,` property of the config object (either
passed as an argument or loaded from `),ife=n(qA,"CODE",{});var $gt=s(ife);R3o=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),P3o=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(qA,"CODE",{});var kgt=s(dfe);B3o=r(kgt,"pretrained_model_name_or_path"),kgt.forEach(t),I3o=r(qA,":"),qA.forEach(t),N3o=i(na),G=n(na,"UL",{});var O=s(G);Bu=n(O,"LI",{});var fxe=s(Bu);cfe=n(fxe,"STRONG",{});var Sgt=s(cfe);q3o=r(Sgt,"albert"),Sgt.forEach(t),j3o=r(fxe," \u2014 "),_D=n(fxe,"A",{href:!0});var Rgt=s(_D);D3o=r(Rgt,"AlbertForPreTraining"),Rgt.forEach(t),G3o=r(fxe," (ALBERT model)"),fxe.forEach(t),O3o=i(O),Iu=n(O,"LI",{});var mxe=s(Iu);ffe=n(mxe,"STRONG",{});var Pgt=s(ffe);V3o=r(Pgt,"bart"),Pgt.forEach(t),X3o=r(mxe," \u2014 "),uD=n(mxe,"A",{href:!0});var Bgt=s(uD);z3o=r(Bgt,"BartForConditionalGeneration"),Bgt.forEach(t),Q3o=r(mxe," (BART model)"),mxe.forEach(t),W3o=i(O),Nu=n(O,"LI",{});var gxe=s(Nu);mfe=n(gxe,"STRONG",{});var Igt=s(mfe);H3o=r(Igt,"bert"),Igt.forEach(t),U3o=r(gxe," \u2014 "),bD=n(gxe,"A",{href:!0});var Ngt=s(bD);J3o=r(Ngt,"BertForPreTraining"),Ngt.forEach(t),Y3o=r(gxe," (BERT model)"),gxe.forEach(t),K3o=i(O),qu=n(O,"LI",{});var hxe=s(qu);gfe=n(hxe,"STRONG",{});var qgt=s(gfe);Z3o=r(qgt,"big_bird"),qgt.forEach(t),ewo=r(hxe," \u2014 "),vD=n(hxe,"A",{href:!0});var jgt=s(vD);owo=r(jgt,"BigBirdForPreTraining"),jgt.forEach(t),rwo=r(hxe," (BigBird model)"),hxe.forEach(t),two=i(O),ju=n(O,"LI",{});var pxe=s(ju);hfe=n(pxe,"STRONG",{});var Dgt=s(hfe);awo=r(Dgt,"bloom"),Dgt.forEach(t),nwo=r(pxe," \u2014 "),FD=n(pxe,"A",{href:!0});var Ggt=s(FD);swo=r(Ggt,"BloomForCausalLM"),Ggt.forEach(t),lwo=r(pxe," (BLOOM model)"),pxe.forEach(t),iwo=i(O),Du=n(O,"LI",{});var _xe=s(Du);pfe=n(_xe,"STRONG",{});var Ogt=s(pfe);dwo=r(Ogt,"camembert"),Ogt.forEach(t),cwo=r(_xe," \u2014 "),TD=n(_xe,"A",{href:!0});var Vgt=s(TD);fwo=r(Vgt,"CamembertForMaskedLM"),Vgt.forEach(t),mwo=r(_xe," (CamemBERT model)"),_xe.forEach(t),gwo=i(O),Gu=n(O,"LI",{});var uxe=s(Gu);_fe=n(uxe,"STRONG",{});var Xgt=s(_fe);hwo=r(Xgt,"ctrl"),Xgt.forEach(t),pwo=r(uxe," \u2014 "),MD=n(uxe,"A",{href:!0});var zgt=s(MD);_wo=r(zgt,"CTRLLMHeadModel"),zgt.forEach(t),uwo=r(uxe," (CTRL model)"),uxe.forEach(t),bwo=i(O),Ou=n(O,"LI",{});var bxe=s(Ou);ufe=n(bxe,"STRONG",{});var Qgt=s(ufe);vwo=r(Qgt,"data2vec-text"),Qgt.forEach(t),Fwo=r(bxe," \u2014 "),ED=n(bxe,"A",{href:!0});var Wgt=s(ED);Two=r(Wgt,"Data2VecTextForMaskedLM"),Wgt.forEach(t),Mwo=r(bxe," (Data2VecText model)"),bxe.forEach(t),Ewo=i(O),Vu=n(O,"LI",{});var vxe=s(Vu);bfe=n(vxe,"STRONG",{});var Hgt=s(bfe);Cwo=r(Hgt,"deberta"),Hgt.forEach(t),wwo=r(vxe," \u2014 "),CD=n(vxe,"A",{href:!0});var Ugt=s(CD);Awo=r(Ugt,"DebertaForMaskedLM"),Ugt.forEach(t),Lwo=r(vxe," (DeBERTa model)"),vxe.forEach(t),ywo=i(O),Xu=n(O,"LI",{});var Fxe=s(Xu);vfe=n(Fxe,"STRONG",{});var Jgt=s(vfe);xwo=r(Jgt,"deberta-v2"),Jgt.forEach(t),$wo=r(Fxe," \u2014 "),wD=n(Fxe,"A",{href:!0});var Ygt=s(wD);kwo=r(Ygt,"DebertaV2ForMaskedLM"),Ygt.forEach(t),Swo=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),Rwo=i(O),zu=n(O,"LI",{});var Txe=s(zu);Ffe=n(Txe,"STRONG",{});var Kgt=s(Ffe);Pwo=r(Kgt,"distilbert"),Kgt.forEach(t),Bwo=r(Txe," \u2014 "),AD=n(Txe,"A",{href:!0});var Zgt=s(AD);Iwo=r(Zgt,"DistilBertForMaskedLM"),Zgt.forEach(t),Nwo=r(Txe," (DistilBERT model)"),Txe.forEach(t),qwo=i(O),Qu=n(O,"LI",{});var Mxe=s(Qu);Tfe=n(Mxe,"STRONG",{});var eht=s(Tfe);jwo=r(eht,"electra"),eht.forEach(t),Dwo=r(Mxe," \u2014 "),LD=n(Mxe,"A",{href:!0});var oht=s(LD);Gwo=r(oht,"ElectraForPreTraining"),oht.forEach(t),Owo=r(Mxe," (ELECTRA model)"),Mxe.forEach(t),Vwo=i(O),Wu=n(O,"LI",{});var Exe=s(Wu);Mfe=n(Exe,"STRONG",{});var rht=s(Mfe);Xwo=r(rht,"flaubert"),rht.forEach(t),zwo=r(Exe," \u2014 "),yD=n(Exe,"A",{href:!0});var tht=s(yD);Qwo=r(tht,"FlaubertWithLMHeadModel"),tht.forEach(t),Wwo=r(Exe," (FlauBERT model)"),Exe.forEach(t),Hwo=i(O),Hu=n(O,"LI",{});var Cxe=s(Hu);Efe=n(Cxe,"STRONG",{});var aht=s(Efe);Uwo=r(aht,"flava"),aht.forEach(t),Jwo=r(Cxe," \u2014 "),xD=n(Cxe,"A",{href:!0});var nht=s(xD);Ywo=r(nht,"FlavaForPreTraining"),nht.forEach(t),Kwo=r(Cxe," (FLAVA model)"),Cxe.forEach(t),Zwo=i(O),Uu=n(O,"LI",{});var wxe=s(Uu);Cfe=n(wxe,"STRONG",{});var sht=s(Cfe);eAo=r(sht,"fnet"),sht.forEach(t),oAo=r(wxe," \u2014 "),$D=n(wxe,"A",{href:!0});var lht=s($D);rAo=r(lht,"FNetForPreTraining"),lht.forEach(t),tAo=r(wxe," (FNet model)"),wxe.forEach(t),aAo=i(O),Ju=n(O,"LI",{});var Axe=s(Ju);wfe=n(Axe,"STRONG",{});var iht=s(wfe);nAo=r(iht,"fsmt"),iht.forEach(t),sAo=r(Axe," \u2014 "),kD=n(Axe,"A",{href:!0});var dht=s(kD);lAo=r(dht,"FSMTForConditionalGeneration"),dht.forEach(t),iAo=r(Axe," (FairSeq Machine-Translation model)"),Axe.forEach(t),dAo=i(O),Yu=n(O,"LI",{});var Lxe=s(Yu);Afe=n(Lxe,"STRONG",{});var cht=s(Afe);cAo=r(cht,"funnel"),cht.forEach(t),fAo=r(Lxe," \u2014 "),SD=n(Lxe,"A",{href:!0});var fht=s(SD);mAo=r(fht,"FunnelForPreTraining"),fht.forEach(t),gAo=r(Lxe," (Funnel Transformer model)"),Lxe.forEach(t),hAo=i(O),Ku=n(O,"LI",{});var yxe=s(Ku);Lfe=n(yxe,"STRONG",{});var mht=s(Lfe);pAo=r(mht,"gpt2"),mht.forEach(t),_Ao=r(yxe," \u2014 "),RD=n(yxe,"A",{href:!0});var ght=s(RD);uAo=r(ght,"GPT2LMHeadModel"),ght.forEach(t),bAo=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),vAo=i(O),Zu=n(O,"LI",{});var xxe=s(Zu);yfe=n(xxe,"STRONG",{});var hht=s(yfe);FAo=r(hht,"ibert"),hht.forEach(t),TAo=r(xxe," \u2014 "),PD=n(xxe,"A",{href:!0});var pht=s(PD);MAo=r(pht,"IBertForMaskedLM"),pht.forEach(t),EAo=r(xxe," (I-BERT model)"),xxe.forEach(t),CAo=i(O),e1=n(O,"LI",{});var $xe=s(e1);xfe=n($xe,"STRONG",{});var _ht=s(xfe);wAo=r(_ht,"layoutlm"),_ht.forEach(t),AAo=r($xe," \u2014 "),BD=n($xe,"A",{href:!0});var uht=s(BD);LAo=r(uht,"LayoutLMForMaskedLM"),uht.forEach(t),yAo=r($xe," (LayoutLM model)"),$xe.forEach(t),xAo=i(O),o1=n(O,"LI",{});var kxe=s(o1);$fe=n(kxe,"STRONG",{});var bht=s($fe);$Ao=r(bht,"longformer"),bht.forEach(t),kAo=r(kxe," \u2014 "),ID=n(kxe,"A",{href:!0});var vht=s(ID);SAo=r(vht,"LongformerForMaskedLM"),vht.forEach(t),RAo=r(kxe," (Longformer model)"),kxe.forEach(t),PAo=i(O),r1=n(O,"LI",{});var Sxe=s(r1);kfe=n(Sxe,"STRONG",{});var Fht=s(kfe);BAo=r(Fht,"lxmert"),Fht.forEach(t),IAo=r(Sxe," \u2014 "),ND=n(Sxe,"A",{href:!0});var Tht=s(ND);NAo=r(Tht,"LxmertForPreTraining"),Tht.forEach(t),qAo=r(Sxe," (LXMERT model)"),Sxe.forEach(t),jAo=i(O),t1=n(O,"LI",{});var Rxe=s(t1);Sfe=n(Rxe,"STRONG",{});var Mht=s(Sfe);DAo=r(Mht,"megatron-bert"),Mht.forEach(t),GAo=r(Rxe," \u2014 "),qD=n(Rxe,"A",{href:!0});var Eht=s(qD);OAo=r(Eht,"MegatronBertForPreTraining"),Eht.forEach(t),VAo=r(Rxe," (Megatron-BERT model)"),Rxe.forEach(t),XAo=i(O),a1=n(O,"LI",{});var Pxe=s(a1);Rfe=n(Pxe,"STRONG",{});var Cht=s(Rfe);zAo=r(Cht,"mobilebert"),Cht.forEach(t),QAo=r(Pxe," \u2014 "),jD=n(Pxe,"A",{href:!0});var wht=s(jD);WAo=r(wht,"MobileBertForPreTraining"),wht.forEach(t),HAo=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),UAo=i(O),n1=n(O,"LI",{});var Bxe=s(n1);Pfe=n(Bxe,"STRONG",{});var Aht=s(Pfe);JAo=r(Aht,"mpnet"),Aht.forEach(t),YAo=r(Bxe," \u2014 "),DD=n(Bxe,"A",{href:!0});var Lht=s(DD);KAo=r(Lht,"MPNetForMaskedLM"),Lht.forEach(t),ZAo=r(Bxe," (MPNet model)"),Bxe.forEach(t),e6o=i(O),s1=n(O,"LI",{});var Ixe=s(s1);Bfe=n(Ixe,"STRONG",{});var yht=s(Bfe);o6o=r(yht,"nezha"),yht.forEach(t),r6o=r(Ixe," \u2014 "),GD=n(Ixe,"A",{href:!0});var xht=s(GD);t6o=r(xht,"NezhaForPreTraining"),xht.forEach(t),a6o=r(Ixe," (Nezha model)"),Ixe.forEach(t),n6o=i(O),l1=n(O,"LI",{});var Nxe=s(l1);Ife=n(Nxe,"STRONG",{});var $ht=s(Ife);s6o=r($ht,"openai-gpt"),$ht.forEach(t),l6o=r(Nxe," \u2014 "),OD=n(Nxe,"A",{href:!0});var kht=s(OD);i6o=r(kht,"OpenAIGPTLMHeadModel"),kht.forEach(t),d6o=r(Nxe," (OpenAI GPT model)"),Nxe.forEach(t),c6o=i(O),i1=n(O,"LI",{});var qxe=s(i1);Nfe=n(qxe,"STRONG",{});var Sht=s(Nfe);f6o=r(Sht,"retribert"),Sht.forEach(t),m6o=r(qxe," \u2014 "),VD=n(qxe,"A",{href:!0});var Rht=s(VD);g6o=r(Rht,"RetriBertModel"),Rht.forEach(t),h6o=r(qxe," (RetriBERT model)"),qxe.forEach(t),p6o=i(O),d1=n(O,"LI",{});var jxe=s(d1);qfe=n(jxe,"STRONG",{});var Pht=s(qfe);_6o=r(Pht,"roberta"),Pht.forEach(t),u6o=r(jxe," \u2014 "),XD=n(jxe,"A",{href:!0});var Bht=s(XD);b6o=r(Bht,"RobertaForMaskedLM"),Bht.forEach(t),v6o=r(jxe," (RoBERTa model)"),jxe.forEach(t),F6o=i(O),c1=n(O,"LI",{});var Dxe=s(c1);jfe=n(Dxe,"STRONG",{});var Iht=s(jfe);T6o=r(Iht,"splinter"),Iht.forEach(t),M6o=r(Dxe," \u2014 "),zD=n(Dxe,"A",{href:!0});var Nht=s(zD);E6o=r(Nht,"SplinterForPreTraining"),Nht.forEach(t),C6o=r(Dxe," (Splinter model)"),Dxe.forEach(t),w6o=i(O),f1=n(O,"LI",{});var Gxe=s(f1);Dfe=n(Gxe,"STRONG",{});var qht=s(Dfe);A6o=r(qht,"squeezebert"),qht.forEach(t),L6o=r(Gxe," \u2014 "),QD=n(Gxe,"A",{href:!0});var jht=s(QD);y6o=r(jht,"SqueezeBertForMaskedLM"),jht.forEach(t),x6o=r(Gxe," (SqueezeBERT model)"),Gxe.forEach(t),$6o=i(O),m1=n(O,"LI",{});var Oxe=s(m1);Gfe=n(Oxe,"STRONG",{});var Dht=s(Gfe);k6o=r(Dht,"t5"),Dht.forEach(t),S6o=r(Oxe," \u2014 "),WD=n(Oxe,"A",{href:!0});var Ght=s(WD);R6o=r(Ght,"T5ForConditionalGeneration"),Ght.forEach(t),P6o=r(Oxe," (T5 model)"),Oxe.forEach(t),B6o=i(O),g1=n(O,"LI",{});var Vxe=s(g1);Ofe=n(Vxe,"STRONG",{});var Oht=s(Ofe);I6o=r(Oht,"tapas"),Oht.forEach(t),N6o=r(Vxe," \u2014 "),HD=n(Vxe,"A",{href:!0});var Vht=s(HD);q6o=r(Vht,"TapasForMaskedLM"),Vht.forEach(t),j6o=r(Vxe," (TAPAS model)"),Vxe.forEach(t),D6o=i(O),h1=n(O,"LI",{});var Xxe=s(h1);Vfe=n(Xxe,"STRONG",{});var Xht=s(Vfe);G6o=r(Xht,"transfo-xl"),Xht.forEach(t),O6o=r(Xxe," \u2014 "),UD=n(Xxe,"A",{href:!0});var zht=s(UD);V6o=r(zht,"TransfoXLLMHeadModel"),zht.forEach(t),X6o=r(Xxe," (Transformer-XL model)"),Xxe.forEach(t),z6o=i(O),p1=n(O,"LI",{});var zxe=s(p1);Xfe=n(zxe,"STRONG",{});var Qht=s(Xfe);Q6o=r(Qht,"unispeech"),Qht.forEach(t),W6o=r(zxe," \u2014 "),JD=n(zxe,"A",{href:!0});var Wht=s(JD);H6o=r(Wht,"UniSpeechForPreTraining"),Wht.forEach(t),U6o=r(zxe," (UniSpeech model)"),zxe.forEach(t),J6o=i(O),_1=n(O,"LI",{});var Qxe=s(_1);zfe=n(Qxe,"STRONG",{});var Hht=s(zfe);Y6o=r(Hht,"unispeech-sat"),Hht.forEach(t),K6o=r(Qxe," \u2014 "),YD=n(Qxe,"A",{href:!0});var Uht=s(YD);Z6o=r(Uht,"UniSpeechSatForPreTraining"),Uht.forEach(t),eLo=r(Qxe," (UniSpeechSat model)"),Qxe.forEach(t),oLo=i(O),u1=n(O,"LI",{});var Wxe=s(u1);Qfe=n(Wxe,"STRONG",{});var Jht=s(Qfe);rLo=r(Jht,"visual_bert"),Jht.forEach(t),tLo=r(Wxe," \u2014 "),KD=n(Wxe,"A",{href:!0});var Yht=s(KD);aLo=r(Yht,"VisualBertForPreTraining"),Yht.forEach(t),nLo=r(Wxe," (VisualBERT model)"),Wxe.forEach(t),sLo=i(O),b1=n(O,"LI",{});var Hxe=s(b1);Wfe=n(Hxe,"STRONG",{});var Kht=s(Wfe);lLo=r(Kht,"vit_mae"),Kht.forEach(t),iLo=r(Hxe," \u2014 "),ZD=n(Hxe,"A",{href:!0});var Zht=s(ZD);dLo=r(Zht,"ViTMAEForPreTraining"),Zht.forEach(t),cLo=r(Hxe," (ViTMAE model)"),Hxe.forEach(t),fLo=i(O),v1=n(O,"LI",{});var Uxe=s(v1);Hfe=n(Uxe,"STRONG",{});var ept=s(Hfe);mLo=r(ept,"wav2vec2"),ept.forEach(t),gLo=r(Uxe," \u2014 "),eG=n(Uxe,"A",{href:!0});var opt=s(eG);hLo=r(opt,"Wav2Vec2ForPreTraining"),opt.forEach(t),pLo=r(Uxe," (Wav2Vec2 model)"),Uxe.forEach(t),_Lo=i(O),F1=n(O,"LI",{});var Jxe=s(F1);Ufe=n(Jxe,"STRONG",{});var rpt=s(Ufe);uLo=r(rpt,"wav2vec2-conformer"),rpt.forEach(t),bLo=r(Jxe," \u2014 "),oG=n(Jxe,"A",{href:!0});var tpt=s(oG);vLo=r(tpt,"Wav2Vec2ConformerForPreTraining"),tpt.forEach(t),FLo=r(Jxe," (Wav2Vec2-Conformer model)"),Jxe.forEach(t),TLo=i(O),T1=n(O,"LI",{});var Yxe=s(T1);Jfe=n(Yxe,"STRONG",{});var apt=s(Jfe);MLo=r(apt,"xlm"),apt.forEach(t),ELo=r(Yxe," \u2014 "),rG=n(Yxe,"A",{href:!0});var npt=s(rG);CLo=r(npt,"XLMWithLMHeadModel"),npt.forEach(t),wLo=r(Yxe," (XLM model)"),Yxe.forEach(t),ALo=i(O),M1=n(O,"LI",{});var Kxe=s(M1);Yfe=n(Kxe,"STRONG",{});var spt=s(Yfe);LLo=r(spt,"xlm-roberta"),spt.forEach(t),yLo=r(Kxe," \u2014 "),tG=n(Kxe,"A",{href:!0});var lpt=s(tG);xLo=r(lpt,"XLMRobertaForMaskedLM"),lpt.forEach(t),$Lo=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),kLo=i(O),E1=n(O,"LI",{});var Zxe=s(E1);Kfe=n(Zxe,"STRONG",{});var ipt=s(Kfe);SLo=r(ipt,"xlm-roberta-xl"),ipt.forEach(t),RLo=r(Zxe," \u2014 "),aG=n(Zxe,"A",{href:!0});var dpt=s(aG);PLo=r(dpt,"XLMRobertaXLForMaskedLM"),dpt.forEach(t),BLo=r(Zxe," (XLM-RoBERTa-XL model)"),Zxe.forEach(t),ILo=i(O),C1=n(O,"LI",{});var e$e=s(C1);Zfe=n(e$e,"STRONG",{});var cpt=s(Zfe);NLo=r(cpt,"xlnet"),cpt.forEach(t),qLo=r(e$e," \u2014 "),nG=n(e$e,"A",{href:!0});var fpt=s(nG);jLo=r(fpt,"XLNetLMHeadModel"),fpt.forEach(t),DLo=r(e$e," (XLNet model)"),e$e.forEach(t),O.forEach(t),GLo=i(na),w1=n(na,"P",{});var o$e=s(w1);OLo=r(o$e,"The model is set in evaluation mode by default using "),eme=n(o$e,"CODE",{});var mpt=s(eme);VLo=r(mpt,"model.eval()"),mpt.forEach(t),XLo=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(o$e,"CODE",{});var gpt=s(ome);zLo=r(gpt,"model.train()"),gpt.forEach(t),o$e.forEach(t),QLo=i(na),T(A1.$$.fragment,na),na.forEach(t),Zs.forEach(t),vOe=i(f),Oi=n(f,"H2",{class:!0});var wXe=s(Oi);L1=n(wXe,"A",{id:!0,class:!0,href:!0});var hpt=s(L1);rme=n(hpt,"SPAN",{});var ppt=s(rme);T(py.$$.fragment,ppt),ppt.forEach(t),hpt.forEach(t),WLo=i(wXe),tme=n(wXe,"SPAN",{});var _pt=s(tme);HLo=r(_pt,"AutoModelForCausalLM"),_pt.forEach(t),wXe.forEach(t),FOe=i(f),ko=n(f,"DIV",{class:!0});var el=s(ko);T(_y.$$.fragment,el),ULo=i(el),Vi=n(el,"P",{});var Roe=s(Vi);JLo=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sG=n(Roe,"A",{href:!0});var upt=s(sG);YLo=r(upt,"from_pretrained()"),upt.forEach(t),KLo=r(Roe," class method or the "),lG=n(Roe,"A",{href:!0});var bpt=s(lG);ZLo=r(bpt,"from_config()"),bpt.forEach(t),eyo=r(Roe,` class
method.`),Roe.forEach(t),oyo=i(el),uy=n(el,"P",{});var AXe=s(uy);ryo=r(AXe,"This class cannot be instantiated directly using "),ame=n(AXe,"CODE",{});var vpt=s(ame);tyo=r(vpt,"__init__()"),vpt.forEach(t),ayo=r(AXe," (throws an error)."),AXe.forEach(t),nyo=i(el),lt=n(el,"DIV",{class:!0});var jA=s(lt);T(by.$$.fragment,jA),syo=i(jA),nme=n(jA,"P",{});var Fpt=s(nme);lyo=r(Fpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fpt.forEach(t),iyo=i(jA),Xi=n(jA,"P",{});var Poe=s(Xi);dyo=r(Poe,`Note:
Loading a model from its configuration file does `),sme=n(Poe,"STRONG",{});var Tpt=s(sme);cyo=r(Tpt,"not"),Tpt.forEach(t),fyo=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=n(Poe,"A",{href:!0});var Mpt=s(iG);myo=r(Mpt,"from_pretrained()"),Mpt.forEach(t),gyo=r(Poe," to load the model weights."),Poe.forEach(t),hyo=i(jA),T(y1.$$.fragment,jA),jA.forEach(t),pyo=i(el),Ke=n(el,"DIV",{class:!0});var sa=s(Ke);T(vy.$$.fragment,sa),_yo=i(sa),lme=n(sa,"P",{});var Ept=s(lme);uyo=r(Ept,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ept.forEach(t),byo=i(sa),Ba=n(sa,"P",{});var DA=s(Ba);vyo=r(DA,"The model class to instantiate is selected based on the "),ime=n(DA,"CODE",{});var Cpt=s(ime);Fyo=r(Cpt,"model_type"),Cpt.forEach(t),Tyo=r(DA,` property of the config object (either
passed as an argument or loaded from `),dme=n(DA,"CODE",{});var wpt=s(dme);Myo=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),Eyo=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(DA,"CODE",{});var Apt=s(cme);Cyo=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),wyo=r(DA,":"),DA.forEach(t),Ayo=i(sa),z=n(sa,"UL",{});var Q=s(z);x1=n(Q,"LI",{});var r$e=s(x1);fme=n(r$e,"STRONG",{});var Lpt=s(fme);Lyo=r(Lpt,"bart"),Lpt.forEach(t),yyo=r(r$e," \u2014 "),dG=n(r$e,"A",{href:!0});var ypt=s(dG);xyo=r(ypt,"BartForCausalLM"),ypt.forEach(t),$yo=r(r$e," (BART model)"),r$e.forEach(t),kyo=i(Q),$1=n(Q,"LI",{});var t$e=s($1);mme=n(t$e,"STRONG",{});var xpt=s(mme);Syo=r(xpt,"bert"),xpt.forEach(t),Ryo=r(t$e," \u2014 "),cG=n(t$e,"A",{href:!0});var $pt=s(cG);Pyo=r($pt,"BertLMHeadModel"),$pt.forEach(t),Byo=r(t$e," (BERT model)"),t$e.forEach(t),Iyo=i(Q),k1=n(Q,"LI",{});var a$e=s(k1);gme=n(a$e,"STRONG",{});var kpt=s(gme);Nyo=r(kpt,"bert-generation"),kpt.forEach(t),qyo=r(a$e," \u2014 "),fG=n(a$e,"A",{href:!0});var Spt=s(fG);jyo=r(Spt,"BertGenerationDecoder"),Spt.forEach(t),Dyo=r(a$e," (Bert Generation model)"),a$e.forEach(t),Gyo=i(Q),S1=n(Q,"LI",{});var n$e=s(S1);hme=n(n$e,"STRONG",{});var Rpt=s(hme);Oyo=r(Rpt,"big_bird"),Rpt.forEach(t),Vyo=r(n$e," \u2014 "),mG=n(n$e,"A",{href:!0});var Ppt=s(mG);Xyo=r(Ppt,"BigBirdForCausalLM"),Ppt.forEach(t),zyo=r(n$e," (BigBird model)"),n$e.forEach(t),Qyo=i(Q),R1=n(Q,"LI",{});var s$e=s(R1);pme=n(s$e,"STRONG",{});var Bpt=s(pme);Wyo=r(Bpt,"bigbird_pegasus"),Bpt.forEach(t),Hyo=r(s$e," \u2014 "),gG=n(s$e,"A",{href:!0});var Ipt=s(gG);Uyo=r(Ipt,"BigBirdPegasusForCausalLM"),Ipt.forEach(t),Jyo=r(s$e," (BigBird-Pegasus model)"),s$e.forEach(t),Yyo=i(Q),P1=n(Q,"LI",{});var l$e=s(P1);_me=n(l$e,"STRONG",{});var Npt=s(_me);Kyo=r(Npt,"blenderbot"),Npt.forEach(t),Zyo=r(l$e," \u2014 "),hG=n(l$e,"A",{href:!0});var qpt=s(hG);e8o=r(qpt,"BlenderbotForCausalLM"),qpt.forEach(t),o8o=r(l$e," (Blenderbot model)"),l$e.forEach(t),r8o=i(Q),B1=n(Q,"LI",{});var i$e=s(B1);ume=n(i$e,"STRONG",{});var jpt=s(ume);t8o=r(jpt,"blenderbot-small"),jpt.forEach(t),a8o=r(i$e," \u2014 "),pG=n(i$e,"A",{href:!0});var Dpt=s(pG);n8o=r(Dpt,"BlenderbotSmallForCausalLM"),Dpt.forEach(t),s8o=r(i$e," (BlenderbotSmall model)"),i$e.forEach(t),l8o=i(Q),I1=n(Q,"LI",{});var d$e=s(I1);bme=n(d$e,"STRONG",{});var Gpt=s(bme);i8o=r(Gpt,"bloom"),Gpt.forEach(t),d8o=r(d$e," \u2014 "),_G=n(d$e,"A",{href:!0});var Opt=s(_G);c8o=r(Opt,"BloomForCausalLM"),Opt.forEach(t),f8o=r(d$e," (BLOOM model)"),d$e.forEach(t),m8o=i(Q),N1=n(Q,"LI",{});var c$e=s(N1);vme=n(c$e,"STRONG",{});var Vpt=s(vme);g8o=r(Vpt,"camembert"),Vpt.forEach(t),h8o=r(c$e," \u2014 "),uG=n(c$e,"A",{href:!0});var Xpt=s(uG);p8o=r(Xpt,"CamembertForCausalLM"),Xpt.forEach(t),_8o=r(c$e," (CamemBERT model)"),c$e.forEach(t),u8o=i(Q),q1=n(Q,"LI",{});var f$e=s(q1);Fme=n(f$e,"STRONG",{});var zpt=s(Fme);b8o=r(zpt,"codegen"),zpt.forEach(t),v8o=r(f$e," \u2014 "),bG=n(f$e,"A",{href:!0});var Qpt=s(bG);F8o=r(Qpt,"CodeGenForCausalLM"),Qpt.forEach(t),T8o=r(f$e," (CodeGen model)"),f$e.forEach(t),M8o=i(Q),j1=n(Q,"LI",{});var m$e=s(j1);Tme=n(m$e,"STRONG",{});var Wpt=s(Tme);E8o=r(Wpt,"ctrl"),Wpt.forEach(t),C8o=r(m$e," \u2014 "),vG=n(m$e,"A",{href:!0});var Hpt=s(vG);w8o=r(Hpt,"CTRLLMHeadModel"),Hpt.forEach(t),A8o=r(m$e," (CTRL model)"),m$e.forEach(t),L8o=i(Q),D1=n(Q,"LI",{});var g$e=s(D1);Mme=n(g$e,"STRONG",{});var Upt=s(Mme);y8o=r(Upt,"data2vec-text"),Upt.forEach(t),x8o=r(g$e," \u2014 "),FG=n(g$e,"A",{href:!0});var Jpt=s(FG);$8o=r(Jpt,"Data2VecTextForCausalLM"),Jpt.forEach(t),k8o=r(g$e," (Data2VecText model)"),g$e.forEach(t),S8o=i(Q),G1=n(Q,"LI",{});var h$e=s(G1);Eme=n(h$e,"STRONG",{});var Ypt=s(Eme);R8o=r(Ypt,"electra"),Ypt.forEach(t),P8o=r(h$e," \u2014 "),TG=n(h$e,"A",{href:!0});var Kpt=s(TG);B8o=r(Kpt,"ElectraForCausalLM"),Kpt.forEach(t),I8o=r(h$e," (ELECTRA model)"),h$e.forEach(t),N8o=i(Q),O1=n(Q,"LI",{});var p$e=s(O1);Cme=n(p$e,"STRONG",{});var Zpt=s(Cme);q8o=r(Zpt,"gpt2"),Zpt.forEach(t),j8o=r(p$e," \u2014 "),MG=n(p$e,"A",{href:!0});var e_t=s(MG);D8o=r(e_t,"GPT2LMHeadModel"),e_t.forEach(t),G8o=r(p$e," (OpenAI GPT-2 model)"),p$e.forEach(t),O8o=i(Q),V1=n(Q,"LI",{});var _$e=s(V1);wme=n(_$e,"STRONG",{});var o_t=s(wme);V8o=r(o_t,"gpt_neo"),o_t.forEach(t),X8o=r(_$e," \u2014 "),EG=n(_$e,"A",{href:!0});var r_t=s(EG);z8o=r(r_t,"GPTNeoForCausalLM"),r_t.forEach(t),Q8o=r(_$e," (GPT Neo model)"),_$e.forEach(t),W8o=i(Q),X1=n(Q,"LI",{});var u$e=s(X1);Ame=n(u$e,"STRONG",{});var t_t=s(Ame);H8o=r(t_t,"gpt_neox"),t_t.forEach(t),U8o=r(u$e," \u2014 "),CG=n(u$e,"A",{href:!0});var a_t=s(CG);J8o=r(a_t,"GPTNeoXForCausalLM"),a_t.forEach(t),Y8o=r(u$e," (GPT NeoX model)"),u$e.forEach(t),K8o=i(Q),z1=n(Q,"LI",{});var b$e=s(z1);Lme=n(b$e,"STRONG",{});var n_t=s(Lme);Z8o=r(n_t,"gptj"),n_t.forEach(t),e9o=r(b$e," \u2014 "),wG=n(b$e,"A",{href:!0});var s_t=s(wG);o9o=r(s_t,"GPTJForCausalLM"),s_t.forEach(t),r9o=r(b$e," (GPT-J model)"),b$e.forEach(t),t9o=i(Q),Q1=n(Q,"LI",{});var v$e=s(Q1);yme=n(v$e,"STRONG",{});var l_t=s(yme);a9o=r(l_t,"marian"),l_t.forEach(t),n9o=r(v$e," \u2014 "),AG=n(v$e,"A",{href:!0});var i_t=s(AG);s9o=r(i_t,"MarianForCausalLM"),i_t.forEach(t),l9o=r(v$e," (Marian model)"),v$e.forEach(t),i9o=i(Q),W1=n(Q,"LI",{});var F$e=s(W1);xme=n(F$e,"STRONG",{});var d_t=s(xme);d9o=r(d_t,"mbart"),d_t.forEach(t),c9o=r(F$e," \u2014 "),LG=n(F$e,"A",{href:!0});var c_t=s(LG);f9o=r(c_t,"MBartForCausalLM"),c_t.forEach(t),m9o=r(F$e," (mBART model)"),F$e.forEach(t),g9o=i(Q),H1=n(Q,"LI",{});var T$e=s(H1);$me=n(T$e,"STRONG",{});var f_t=s($me);h9o=r(f_t,"megatron-bert"),f_t.forEach(t),p9o=r(T$e," \u2014 "),yG=n(T$e,"A",{href:!0});var m_t=s(yG);_9o=r(m_t,"MegatronBertForCausalLM"),m_t.forEach(t),u9o=r(T$e," (Megatron-BERT model)"),T$e.forEach(t),b9o=i(Q),U1=n(Q,"LI",{});var M$e=s(U1);kme=n(M$e,"STRONG",{});var g_t=s(kme);v9o=r(g_t,"openai-gpt"),g_t.forEach(t),F9o=r(M$e," \u2014 "),xG=n(M$e,"A",{href:!0});var h_t=s(xG);T9o=r(h_t,"OpenAIGPTLMHeadModel"),h_t.forEach(t),M9o=r(M$e," (OpenAI GPT model)"),M$e.forEach(t),E9o=i(Q),J1=n(Q,"LI",{});var E$e=s(J1);Sme=n(E$e,"STRONG",{});var p_t=s(Sme);C9o=r(p_t,"opt"),p_t.forEach(t),w9o=r(E$e," \u2014 "),$G=n(E$e,"A",{href:!0});var __t=s($G);A9o=r(__t,"OPTForCausalLM"),__t.forEach(t),L9o=r(E$e," (OPT model)"),E$e.forEach(t),y9o=i(Q),Y1=n(Q,"LI",{});var C$e=s(Y1);Rme=n(C$e,"STRONG",{});var u_t=s(Rme);x9o=r(u_t,"pegasus"),u_t.forEach(t),$9o=r(C$e," \u2014 "),kG=n(C$e,"A",{href:!0});var b_t=s(kG);k9o=r(b_t,"PegasusForCausalLM"),b_t.forEach(t),S9o=r(C$e," (Pegasus model)"),C$e.forEach(t),R9o=i(Q),K1=n(Q,"LI",{});var w$e=s(K1);Pme=n(w$e,"STRONG",{});var v_t=s(Pme);P9o=r(v_t,"plbart"),v_t.forEach(t),B9o=r(w$e," \u2014 "),SG=n(w$e,"A",{href:!0});var F_t=s(SG);I9o=r(F_t,"PLBartForCausalLM"),F_t.forEach(t),N9o=r(w$e," (PLBart model)"),w$e.forEach(t),q9o=i(Q),Z1=n(Q,"LI",{});var A$e=s(Z1);Bme=n(A$e,"STRONG",{});var T_t=s(Bme);j9o=r(T_t,"prophetnet"),T_t.forEach(t),D9o=r(A$e," \u2014 "),RG=n(A$e,"A",{href:!0});var M_t=s(RG);G9o=r(M_t,"ProphetNetForCausalLM"),M_t.forEach(t),O9o=r(A$e," (ProphetNet model)"),A$e.forEach(t),V9o=i(Q),e7=n(Q,"LI",{});var L$e=s(e7);Ime=n(L$e,"STRONG",{});var E_t=s(Ime);X9o=r(E_t,"qdqbert"),E_t.forEach(t),z9o=r(L$e," \u2014 "),PG=n(L$e,"A",{href:!0});var C_t=s(PG);Q9o=r(C_t,"QDQBertLMHeadModel"),C_t.forEach(t),W9o=r(L$e," (QDQBert model)"),L$e.forEach(t),H9o=i(Q),o7=n(Q,"LI",{});var y$e=s(o7);Nme=n(y$e,"STRONG",{});var w_t=s(Nme);U9o=r(w_t,"reformer"),w_t.forEach(t),J9o=r(y$e," \u2014 "),BG=n(y$e,"A",{href:!0});var A_t=s(BG);Y9o=r(A_t,"ReformerModelWithLMHead"),A_t.forEach(t),K9o=r(y$e," (Reformer model)"),y$e.forEach(t),Z9o=i(Q),r7=n(Q,"LI",{});var x$e=s(r7);qme=n(x$e,"STRONG",{});var L_t=s(qme);exo=r(L_t,"rembert"),L_t.forEach(t),oxo=r(x$e," \u2014 "),IG=n(x$e,"A",{href:!0});var y_t=s(IG);rxo=r(y_t,"RemBertForCausalLM"),y_t.forEach(t),txo=r(x$e," (RemBERT model)"),x$e.forEach(t),axo=i(Q),t7=n(Q,"LI",{});var $$e=s(t7);jme=n($$e,"STRONG",{});var x_t=s(jme);nxo=r(x_t,"roberta"),x_t.forEach(t),sxo=r($$e," \u2014 "),NG=n($$e,"A",{href:!0});var $_t=s(NG);lxo=r($_t,"RobertaForCausalLM"),$_t.forEach(t),ixo=r($$e," (RoBERTa model)"),$$e.forEach(t),dxo=i(Q),a7=n(Q,"LI",{});var k$e=s(a7);Dme=n(k$e,"STRONG",{});var k_t=s(Dme);cxo=r(k_t,"roformer"),k_t.forEach(t),fxo=r(k$e," \u2014 "),qG=n(k$e,"A",{href:!0});var S_t=s(qG);mxo=r(S_t,"RoFormerForCausalLM"),S_t.forEach(t),gxo=r(k$e," (RoFormer model)"),k$e.forEach(t),hxo=i(Q),n7=n(Q,"LI",{});var S$e=s(n7);Gme=n(S$e,"STRONG",{});var R_t=s(Gme);pxo=r(R_t,"speech_to_text_2"),R_t.forEach(t),_xo=r(S$e," \u2014 "),jG=n(S$e,"A",{href:!0});var P_t=s(jG);uxo=r(P_t,"Speech2Text2ForCausalLM"),P_t.forEach(t),bxo=r(S$e," (Speech2Text2 model)"),S$e.forEach(t),vxo=i(Q),s7=n(Q,"LI",{});var R$e=s(s7);Ome=n(R$e,"STRONG",{});var B_t=s(Ome);Fxo=r(B_t,"transfo-xl"),B_t.forEach(t),Txo=r(R$e," \u2014 "),DG=n(R$e,"A",{href:!0});var I_t=s(DG);Mxo=r(I_t,"TransfoXLLMHeadModel"),I_t.forEach(t),Exo=r(R$e," (Transformer-XL model)"),R$e.forEach(t),Cxo=i(Q),l7=n(Q,"LI",{});var P$e=s(l7);Vme=n(P$e,"STRONG",{});var N_t=s(Vme);wxo=r(N_t,"trocr"),N_t.forEach(t),Axo=r(P$e," \u2014 "),GG=n(P$e,"A",{href:!0});var q_t=s(GG);Lxo=r(q_t,"TrOCRForCausalLM"),q_t.forEach(t),yxo=r(P$e," (TrOCR model)"),P$e.forEach(t),xxo=i(Q),i7=n(Q,"LI",{});var B$e=s(i7);Xme=n(B$e,"STRONG",{});var j_t=s(Xme);$xo=r(j_t,"xglm"),j_t.forEach(t),kxo=r(B$e," \u2014 "),OG=n(B$e,"A",{href:!0});var D_t=s(OG);Sxo=r(D_t,"XGLMForCausalLM"),D_t.forEach(t),Rxo=r(B$e," (XGLM model)"),B$e.forEach(t),Pxo=i(Q),d7=n(Q,"LI",{});var I$e=s(d7);zme=n(I$e,"STRONG",{});var G_t=s(zme);Bxo=r(G_t,"xlm"),G_t.forEach(t),Ixo=r(I$e," \u2014 "),VG=n(I$e,"A",{href:!0});var O_t=s(VG);Nxo=r(O_t,"XLMWithLMHeadModel"),O_t.forEach(t),qxo=r(I$e," (XLM model)"),I$e.forEach(t),jxo=i(Q),c7=n(Q,"LI",{});var N$e=s(c7);Qme=n(N$e,"STRONG",{});var V_t=s(Qme);Dxo=r(V_t,"xlm-prophetnet"),V_t.forEach(t),Gxo=r(N$e," \u2014 "),XG=n(N$e,"A",{href:!0});var X_t=s(XG);Oxo=r(X_t,"XLMProphetNetForCausalLM"),X_t.forEach(t),Vxo=r(N$e," (XLM-ProphetNet model)"),N$e.forEach(t),Xxo=i(Q),f7=n(Q,"LI",{});var q$e=s(f7);Wme=n(q$e,"STRONG",{});var z_t=s(Wme);zxo=r(z_t,"xlm-roberta"),z_t.forEach(t),Qxo=r(q$e," \u2014 "),zG=n(q$e,"A",{href:!0});var Q_t=s(zG);Wxo=r(Q_t,"XLMRobertaForCausalLM"),Q_t.forEach(t),Hxo=r(q$e," (XLM-RoBERTa model)"),q$e.forEach(t),Uxo=i(Q),m7=n(Q,"LI",{});var j$e=s(m7);Hme=n(j$e,"STRONG",{});var W_t=s(Hme);Jxo=r(W_t,"xlm-roberta-xl"),W_t.forEach(t),Yxo=r(j$e," \u2014 "),QG=n(j$e,"A",{href:!0});var H_t=s(QG);Kxo=r(H_t,"XLMRobertaXLForCausalLM"),H_t.forEach(t),Zxo=r(j$e," (XLM-RoBERTa-XL model)"),j$e.forEach(t),e$o=i(Q),g7=n(Q,"LI",{});var D$e=s(g7);Ume=n(D$e,"STRONG",{});var U_t=s(Ume);o$o=r(U_t,"xlnet"),U_t.forEach(t),r$o=r(D$e," \u2014 "),WG=n(D$e,"A",{href:!0});var J_t=s(WG);t$o=r(J_t,"XLNetLMHeadModel"),J_t.forEach(t),a$o=r(D$e," (XLNet model)"),D$e.forEach(t),Q.forEach(t),n$o=i(sa),h7=n(sa,"P",{});var G$e=s(h7);s$o=r(G$e,"The model is set in evaluation mode by default using "),Jme=n(G$e,"CODE",{});var Y_t=s(Jme);l$o=r(Y_t,"model.eval()"),Y_t.forEach(t),i$o=r(G$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yme=n(G$e,"CODE",{});var K_t=s(Yme);d$o=r(K_t,"model.train()"),K_t.forEach(t),G$e.forEach(t),c$o=i(sa),T(p7.$$.fragment,sa),sa.forEach(t),el.forEach(t),TOe=i(f),zi=n(f,"H2",{class:!0});var LXe=s(zi);_7=n(LXe,"A",{id:!0,class:!0,href:!0});var Z_t=s(_7);Kme=n(Z_t,"SPAN",{});var eut=s(Kme);T(Fy.$$.fragment,eut),eut.forEach(t),Z_t.forEach(t),f$o=i(LXe),Zme=n(LXe,"SPAN",{});var out=s(Zme);m$o=r(out,"AutoModelForMaskedLM"),out.forEach(t),LXe.forEach(t),MOe=i(f),So=n(f,"DIV",{class:!0});var ol=s(So);T(Ty.$$.fragment,ol),g$o=i(ol),Qi=n(ol,"P",{});var Boe=s(Qi);h$o=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),HG=n(Boe,"A",{href:!0});var rut=s(HG);p$o=r(rut,"from_pretrained()"),rut.forEach(t),_$o=r(Boe," class method or the "),UG=n(Boe,"A",{href:!0});var tut=s(UG);u$o=r(tut,"from_config()"),tut.forEach(t),b$o=r(Boe,` class
method.`),Boe.forEach(t),v$o=i(ol),My=n(ol,"P",{});var yXe=s(My);F$o=r(yXe,"This class cannot be instantiated directly using "),ege=n(yXe,"CODE",{});var aut=s(ege);T$o=r(aut,"__init__()"),aut.forEach(t),M$o=r(yXe," (throws an error)."),yXe.forEach(t),E$o=i(ol),it=n(ol,"DIV",{class:!0});var GA=s(it);T(Ey.$$.fragment,GA),C$o=i(GA),oge=n(GA,"P",{});var nut=s(oge);w$o=r(nut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nut.forEach(t),A$o=i(GA),Wi=n(GA,"P",{});var Ioe=s(Wi);L$o=r(Ioe,`Note:
Loading a model from its configuration file does `),rge=n(Ioe,"STRONG",{});var sut=s(rge);y$o=r(sut,"not"),sut.forEach(t),x$o=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(Ioe,"A",{href:!0});var lut=s(JG);$$o=r(lut,"from_pretrained()"),lut.forEach(t),k$o=r(Ioe," to load the model weights."),Ioe.forEach(t),S$o=i(GA),T(u7.$$.fragment,GA),GA.forEach(t),R$o=i(ol),Ze=n(ol,"DIV",{class:!0});var la=s(Ze);T(Cy.$$.fragment,la),P$o=i(la),tge=n(la,"P",{});var iut=s(tge);B$o=r(iut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iut.forEach(t),I$o=i(la),Ia=n(la,"P",{});var OA=s(Ia);N$o=r(OA,"The model class to instantiate is selected based on the "),age=n(OA,"CODE",{});var dut=s(age);q$o=r(dut,"model_type"),dut.forEach(t),j$o=r(OA,` property of the config object (either
passed as an argument or loaded from `),nge=n(OA,"CODE",{});var cut=s(nge);D$o=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),G$o=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=n(OA,"CODE",{});var fut=s(sge);O$o=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),V$o=r(OA,":"),OA.forEach(t),X$o=i(la),W=n(la,"UL",{});var U=s(W);b7=n(U,"LI",{});var O$e=s(b7);lge=n(O$e,"STRONG",{});var mut=s(lge);z$o=r(mut,"albert"),mut.forEach(t),Q$o=r(O$e," \u2014 "),YG=n(O$e,"A",{href:!0});var gut=s(YG);W$o=r(gut,"AlbertForMaskedLM"),gut.forEach(t),H$o=r(O$e," (ALBERT model)"),O$e.forEach(t),U$o=i(U),v7=n(U,"LI",{});var V$e=s(v7);ige=n(V$e,"STRONG",{});var hut=s(ige);J$o=r(hut,"bart"),hut.forEach(t),Y$o=r(V$e," \u2014 "),KG=n(V$e,"A",{href:!0});var put=s(KG);K$o=r(put,"BartForConditionalGeneration"),put.forEach(t),Z$o=r(V$e," (BART model)"),V$e.forEach(t),eko=i(U),F7=n(U,"LI",{});var X$e=s(F7);dge=n(X$e,"STRONG",{});var _ut=s(dge);oko=r(_ut,"bert"),_ut.forEach(t),rko=r(X$e," \u2014 "),ZG=n(X$e,"A",{href:!0});var uut=s(ZG);tko=r(uut,"BertForMaskedLM"),uut.forEach(t),ako=r(X$e," (BERT model)"),X$e.forEach(t),nko=i(U),T7=n(U,"LI",{});var z$e=s(T7);cge=n(z$e,"STRONG",{});var but=s(cge);sko=r(but,"big_bird"),but.forEach(t),lko=r(z$e," \u2014 "),eO=n(z$e,"A",{href:!0});var vut=s(eO);iko=r(vut,"BigBirdForMaskedLM"),vut.forEach(t),dko=r(z$e," (BigBird model)"),z$e.forEach(t),cko=i(U),M7=n(U,"LI",{});var Q$e=s(M7);fge=n(Q$e,"STRONG",{});var Fut=s(fge);fko=r(Fut,"camembert"),Fut.forEach(t),mko=r(Q$e," \u2014 "),oO=n(Q$e,"A",{href:!0});var Tut=s(oO);gko=r(Tut,"CamembertForMaskedLM"),Tut.forEach(t),hko=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),pko=i(U),E7=n(U,"LI",{});var W$e=s(E7);mge=n(W$e,"STRONG",{});var Mut=s(mge);_ko=r(Mut,"convbert"),Mut.forEach(t),uko=r(W$e," \u2014 "),rO=n(W$e,"A",{href:!0});var Eut=s(rO);bko=r(Eut,"ConvBertForMaskedLM"),Eut.forEach(t),vko=r(W$e," (ConvBERT model)"),W$e.forEach(t),Fko=i(U),C7=n(U,"LI",{});var H$e=s(C7);gge=n(H$e,"STRONG",{});var Cut=s(gge);Tko=r(Cut,"data2vec-text"),Cut.forEach(t),Mko=r(H$e," \u2014 "),tO=n(H$e,"A",{href:!0});var wut=s(tO);Eko=r(wut,"Data2VecTextForMaskedLM"),wut.forEach(t),Cko=r(H$e," (Data2VecText model)"),H$e.forEach(t),wko=i(U),w7=n(U,"LI",{});var U$e=s(w7);hge=n(U$e,"STRONG",{});var Aut=s(hge);Ako=r(Aut,"deberta"),Aut.forEach(t),Lko=r(U$e," \u2014 "),aO=n(U$e,"A",{href:!0});var Lut=s(aO);yko=r(Lut,"DebertaForMaskedLM"),Lut.forEach(t),xko=r(U$e," (DeBERTa model)"),U$e.forEach(t),$ko=i(U),A7=n(U,"LI",{});var J$e=s(A7);pge=n(J$e,"STRONG",{});var yut=s(pge);kko=r(yut,"deberta-v2"),yut.forEach(t),Sko=r(J$e," \u2014 "),nO=n(J$e,"A",{href:!0});var xut=s(nO);Rko=r(xut,"DebertaV2ForMaskedLM"),xut.forEach(t),Pko=r(J$e," (DeBERTa-v2 model)"),J$e.forEach(t),Bko=i(U),L7=n(U,"LI",{});var Y$e=s(L7);_ge=n(Y$e,"STRONG",{});var $ut=s(_ge);Iko=r($ut,"distilbert"),$ut.forEach(t),Nko=r(Y$e," \u2014 "),sO=n(Y$e,"A",{href:!0});var kut=s(sO);qko=r(kut,"DistilBertForMaskedLM"),kut.forEach(t),jko=r(Y$e," (DistilBERT model)"),Y$e.forEach(t),Dko=i(U),y7=n(U,"LI",{});var K$e=s(y7);uge=n(K$e,"STRONG",{});var Sut=s(uge);Gko=r(Sut,"electra"),Sut.forEach(t),Oko=r(K$e," \u2014 "),lO=n(K$e,"A",{href:!0});var Rut=s(lO);Vko=r(Rut,"ElectraForMaskedLM"),Rut.forEach(t),Xko=r(K$e," (ELECTRA model)"),K$e.forEach(t),zko=i(U),x7=n(U,"LI",{});var Z$e=s(x7);bge=n(Z$e,"STRONG",{});var Put=s(bge);Qko=r(Put,"flaubert"),Put.forEach(t),Wko=r(Z$e," \u2014 "),iO=n(Z$e,"A",{href:!0});var But=s(iO);Hko=r(But,"FlaubertWithLMHeadModel"),But.forEach(t),Uko=r(Z$e," (FlauBERT model)"),Z$e.forEach(t),Jko=i(U),$7=n(U,"LI",{});var eke=s($7);vge=n(eke,"STRONG",{});var Iut=s(vge);Yko=r(Iut,"fnet"),Iut.forEach(t),Kko=r(eke," \u2014 "),dO=n(eke,"A",{href:!0});var Nut=s(dO);Zko=r(Nut,"FNetForMaskedLM"),Nut.forEach(t),eSo=r(eke," (FNet model)"),eke.forEach(t),oSo=i(U),k7=n(U,"LI",{});var oke=s(k7);Fge=n(oke,"STRONG",{});var qut=s(Fge);rSo=r(qut,"funnel"),qut.forEach(t),tSo=r(oke," \u2014 "),cO=n(oke,"A",{href:!0});var jut=s(cO);aSo=r(jut,"FunnelForMaskedLM"),jut.forEach(t),nSo=r(oke," (Funnel Transformer model)"),oke.forEach(t),sSo=i(U),S7=n(U,"LI",{});var rke=s(S7);Tge=n(rke,"STRONG",{});var Dut=s(Tge);lSo=r(Dut,"ibert"),Dut.forEach(t),iSo=r(rke," \u2014 "),fO=n(rke,"A",{href:!0});var Gut=s(fO);dSo=r(Gut,"IBertForMaskedLM"),Gut.forEach(t),cSo=r(rke," (I-BERT model)"),rke.forEach(t),fSo=i(U),R7=n(U,"LI",{});var tke=s(R7);Mge=n(tke,"STRONG",{});var Out=s(Mge);mSo=r(Out,"layoutlm"),Out.forEach(t),gSo=r(tke," \u2014 "),mO=n(tke,"A",{href:!0});var Vut=s(mO);hSo=r(Vut,"LayoutLMForMaskedLM"),Vut.forEach(t),pSo=r(tke," (LayoutLM model)"),tke.forEach(t),_So=i(U),P7=n(U,"LI",{});var ake=s(P7);Ege=n(ake,"STRONG",{});var Xut=s(Ege);uSo=r(Xut,"longformer"),Xut.forEach(t),bSo=r(ake," \u2014 "),gO=n(ake,"A",{href:!0});var zut=s(gO);vSo=r(zut,"LongformerForMaskedLM"),zut.forEach(t),FSo=r(ake," (Longformer model)"),ake.forEach(t),TSo=i(U),B7=n(U,"LI",{});var nke=s(B7);Cge=n(nke,"STRONG",{});var Qut=s(Cge);MSo=r(Qut,"luke"),Qut.forEach(t),ESo=r(nke," \u2014 "),hO=n(nke,"A",{href:!0});var Wut=s(hO);CSo=r(Wut,"LukeForMaskedLM"),Wut.forEach(t),wSo=r(nke," (LUKE model)"),nke.forEach(t),ASo=i(U),I7=n(U,"LI",{});var ske=s(I7);wge=n(ske,"STRONG",{});var Hut=s(wge);LSo=r(Hut,"mbart"),Hut.forEach(t),ySo=r(ske," \u2014 "),pO=n(ske,"A",{href:!0});var Uut=s(pO);xSo=r(Uut,"MBartForConditionalGeneration"),Uut.forEach(t),$So=r(ske," (mBART model)"),ske.forEach(t),kSo=i(U),N7=n(U,"LI",{});var lke=s(N7);Age=n(lke,"STRONG",{});var Jut=s(Age);SSo=r(Jut,"megatron-bert"),Jut.forEach(t),RSo=r(lke," \u2014 "),_O=n(lke,"A",{href:!0});var Yut=s(_O);PSo=r(Yut,"MegatronBertForMaskedLM"),Yut.forEach(t),BSo=r(lke," (Megatron-BERT model)"),lke.forEach(t),ISo=i(U),q7=n(U,"LI",{});var ike=s(q7);Lge=n(ike,"STRONG",{});var Kut=s(Lge);NSo=r(Kut,"mobilebert"),Kut.forEach(t),qSo=r(ike," \u2014 "),uO=n(ike,"A",{href:!0});var Zut=s(uO);jSo=r(Zut,"MobileBertForMaskedLM"),Zut.forEach(t),DSo=r(ike," (MobileBERT model)"),ike.forEach(t),GSo=i(U),j7=n(U,"LI",{});var dke=s(j7);yge=n(dke,"STRONG",{});var e1t=s(yge);OSo=r(e1t,"mpnet"),e1t.forEach(t),VSo=r(dke," \u2014 "),bO=n(dke,"A",{href:!0});var o1t=s(bO);XSo=r(o1t,"MPNetForMaskedLM"),o1t.forEach(t),zSo=r(dke," (MPNet model)"),dke.forEach(t),QSo=i(U),D7=n(U,"LI",{});var cke=s(D7);xge=n(cke,"STRONG",{});var r1t=s(xge);WSo=r(r1t,"nezha"),r1t.forEach(t),HSo=r(cke," \u2014 "),vO=n(cke,"A",{href:!0});var t1t=s(vO);USo=r(t1t,"NezhaForMaskedLM"),t1t.forEach(t),JSo=r(cke," (Nezha model)"),cke.forEach(t),YSo=i(U),G7=n(U,"LI",{});var fke=s(G7);$ge=n(fke,"STRONG",{});var a1t=s($ge);KSo=r(a1t,"nystromformer"),a1t.forEach(t),ZSo=r(fke," \u2014 "),FO=n(fke,"A",{href:!0});var n1t=s(FO);eRo=r(n1t,"NystromformerForMaskedLM"),n1t.forEach(t),oRo=r(fke," (Nystr\xF6mformer model)"),fke.forEach(t),rRo=i(U),O7=n(U,"LI",{});var mke=s(O7);kge=n(mke,"STRONG",{});var s1t=s(kge);tRo=r(s1t,"perceiver"),s1t.forEach(t),aRo=r(mke," \u2014 "),TO=n(mke,"A",{href:!0});var l1t=s(TO);nRo=r(l1t,"PerceiverForMaskedLM"),l1t.forEach(t),sRo=r(mke," (Perceiver model)"),mke.forEach(t),lRo=i(U),V7=n(U,"LI",{});var gke=s(V7);Sge=n(gke,"STRONG",{});var i1t=s(Sge);iRo=r(i1t,"qdqbert"),i1t.forEach(t),dRo=r(gke," \u2014 "),MO=n(gke,"A",{href:!0});var d1t=s(MO);cRo=r(d1t,"QDQBertForMaskedLM"),d1t.forEach(t),fRo=r(gke," (QDQBert model)"),gke.forEach(t),mRo=i(U),X7=n(U,"LI",{});var hke=s(X7);Rge=n(hke,"STRONG",{});var c1t=s(Rge);gRo=r(c1t,"reformer"),c1t.forEach(t),hRo=r(hke," \u2014 "),EO=n(hke,"A",{href:!0});var f1t=s(EO);pRo=r(f1t,"ReformerForMaskedLM"),f1t.forEach(t),_Ro=r(hke," (Reformer model)"),hke.forEach(t),uRo=i(U),z7=n(U,"LI",{});var pke=s(z7);Pge=n(pke,"STRONG",{});var m1t=s(Pge);bRo=r(m1t,"rembert"),m1t.forEach(t),vRo=r(pke," \u2014 "),CO=n(pke,"A",{href:!0});var g1t=s(CO);FRo=r(g1t,"RemBertForMaskedLM"),g1t.forEach(t),TRo=r(pke," (RemBERT model)"),pke.forEach(t),MRo=i(U),Q7=n(U,"LI",{});var _ke=s(Q7);Bge=n(_ke,"STRONG",{});var h1t=s(Bge);ERo=r(h1t,"roberta"),h1t.forEach(t),CRo=r(_ke," \u2014 "),wO=n(_ke,"A",{href:!0});var p1t=s(wO);wRo=r(p1t,"RobertaForMaskedLM"),p1t.forEach(t),ARo=r(_ke," (RoBERTa model)"),_ke.forEach(t),LRo=i(U),W7=n(U,"LI",{});var uke=s(W7);Ige=n(uke,"STRONG",{});var _1t=s(Ige);yRo=r(_1t,"roformer"),_1t.forEach(t),xRo=r(uke," \u2014 "),AO=n(uke,"A",{href:!0});var u1t=s(AO);$Ro=r(u1t,"RoFormerForMaskedLM"),u1t.forEach(t),kRo=r(uke," (RoFormer model)"),uke.forEach(t),SRo=i(U),H7=n(U,"LI",{});var bke=s(H7);Nge=n(bke,"STRONG",{});var b1t=s(Nge);RRo=r(b1t,"squeezebert"),b1t.forEach(t),PRo=r(bke," \u2014 "),LO=n(bke,"A",{href:!0});var v1t=s(LO);BRo=r(v1t,"SqueezeBertForMaskedLM"),v1t.forEach(t),IRo=r(bke," (SqueezeBERT model)"),bke.forEach(t),NRo=i(U),U7=n(U,"LI",{});var vke=s(U7);qge=n(vke,"STRONG",{});var F1t=s(qge);qRo=r(F1t,"tapas"),F1t.forEach(t),jRo=r(vke," \u2014 "),yO=n(vke,"A",{href:!0});var T1t=s(yO);DRo=r(T1t,"TapasForMaskedLM"),T1t.forEach(t),GRo=r(vke," (TAPAS model)"),vke.forEach(t),ORo=i(U),J7=n(U,"LI",{});var Fke=s(J7);jge=n(Fke,"STRONG",{});var M1t=s(jge);VRo=r(M1t,"wav2vec2"),M1t.forEach(t),XRo=r(Fke," \u2014 "),Dge=n(Fke,"CODE",{});var E1t=s(Dge);zRo=r(E1t,"Wav2Vec2ForMaskedLM"),E1t.forEach(t),QRo=r(Fke," (Wav2Vec2 model)"),Fke.forEach(t),WRo=i(U),Y7=n(U,"LI",{});var Tke=s(Y7);Gge=n(Tke,"STRONG",{});var C1t=s(Gge);HRo=r(C1t,"xlm"),C1t.forEach(t),URo=r(Tke," \u2014 "),xO=n(Tke,"A",{href:!0});var w1t=s(xO);JRo=r(w1t,"XLMWithLMHeadModel"),w1t.forEach(t),YRo=r(Tke," (XLM model)"),Tke.forEach(t),KRo=i(U),K7=n(U,"LI",{});var Mke=s(K7);Oge=n(Mke,"STRONG",{});var A1t=s(Oge);ZRo=r(A1t,"xlm-roberta"),A1t.forEach(t),ePo=r(Mke," \u2014 "),$O=n(Mke,"A",{href:!0});var L1t=s($O);oPo=r(L1t,"XLMRobertaForMaskedLM"),L1t.forEach(t),rPo=r(Mke," (XLM-RoBERTa model)"),Mke.forEach(t),tPo=i(U),Z7=n(U,"LI",{});var Eke=s(Z7);Vge=n(Eke,"STRONG",{});var y1t=s(Vge);aPo=r(y1t,"xlm-roberta-xl"),y1t.forEach(t),nPo=r(Eke," \u2014 "),kO=n(Eke,"A",{href:!0});var x1t=s(kO);sPo=r(x1t,"XLMRobertaXLForMaskedLM"),x1t.forEach(t),lPo=r(Eke," (XLM-RoBERTa-XL model)"),Eke.forEach(t),iPo=i(U),e2=n(U,"LI",{});var Cke=s(e2);Xge=n(Cke,"STRONG",{});var $1t=s(Xge);dPo=r($1t,"yoso"),$1t.forEach(t),cPo=r(Cke," \u2014 "),SO=n(Cke,"A",{href:!0});var k1t=s(SO);fPo=r(k1t,"YosoForMaskedLM"),k1t.forEach(t),mPo=r(Cke," (YOSO model)"),Cke.forEach(t),U.forEach(t),gPo=i(la),o2=n(la,"P",{});var wke=s(o2);hPo=r(wke,"The model is set in evaluation mode by default using "),zge=n(wke,"CODE",{});var S1t=s(zge);pPo=r(S1t,"model.eval()"),S1t.forEach(t),_Po=r(wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(wke,"CODE",{});var R1t=s(Qge);uPo=r(R1t,"model.train()"),R1t.forEach(t),wke.forEach(t),bPo=i(la),T(r2.$$.fragment,la),la.forEach(t),ol.forEach(t),EOe=i(f),Hi=n(f,"H2",{class:!0});var xXe=s(Hi);t2=n(xXe,"A",{id:!0,class:!0,href:!0});var P1t=s(t2);Wge=n(P1t,"SPAN",{});var B1t=s(Wge);T(wy.$$.fragment,B1t),B1t.forEach(t),P1t.forEach(t),vPo=i(xXe),Hge=n(xXe,"SPAN",{});var I1t=s(Hge);FPo=r(I1t,"AutoModelForSeq2SeqLM"),I1t.forEach(t),xXe.forEach(t),COe=i(f),Ro=n(f,"DIV",{class:!0});var rl=s(Ro);T(Ay.$$.fragment,rl),TPo=i(rl),Ui=n(rl,"P",{});var Noe=s(Ui);MPo=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RO=n(Noe,"A",{href:!0});var N1t=s(RO);EPo=r(N1t,"from_pretrained()"),N1t.forEach(t),CPo=r(Noe," class method or the "),PO=n(Noe,"A",{href:!0});var q1t=s(PO);wPo=r(q1t,"from_config()"),q1t.forEach(t),APo=r(Noe,` class
method.`),Noe.forEach(t),LPo=i(rl),Ly=n(rl,"P",{});var $Xe=s(Ly);yPo=r($Xe,"This class cannot be instantiated directly using "),Uge=n($Xe,"CODE",{});var j1t=s(Uge);xPo=r(j1t,"__init__()"),j1t.forEach(t),$Po=r($Xe," (throws an error)."),$Xe.forEach(t),kPo=i(rl),dt=n(rl,"DIV",{class:!0});var VA=s(dt);T(yy.$$.fragment,VA),SPo=i(VA),Jge=n(VA,"P",{});var D1t=s(Jge);RPo=r(D1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),D1t.forEach(t),PPo=i(VA),Ji=n(VA,"P",{});var qoe=s(Ji);BPo=r(qoe,`Note:
Loading a model from its configuration file does `),Yge=n(qoe,"STRONG",{});var G1t=s(Yge);IPo=r(G1t,"not"),G1t.forEach(t),NPo=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=n(qoe,"A",{href:!0});var O1t=s(BO);qPo=r(O1t,"from_pretrained()"),O1t.forEach(t),jPo=r(qoe," to load the model weights."),qoe.forEach(t),DPo=i(VA),T(a2.$$.fragment,VA),VA.forEach(t),GPo=i(rl),eo=n(rl,"DIV",{class:!0});var ia=s(eo);T(xy.$$.fragment,ia),OPo=i(ia),Kge=n(ia,"P",{});var V1t=s(Kge);VPo=r(V1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V1t.forEach(t),XPo=i(ia),Na=n(ia,"P",{});var XA=s(Na);zPo=r(XA,"The model class to instantiate is selected based on the "),Zge=n(XA,"CODE",{});var X1t=s(Zge);QPo=r(X1t,"model_type"),X1t.forEach(t),WPo=r(XA,` property of the config object (either
passed as an argument or loaded from `),ehe=n(XA,"CODE",{});var z1t=s(ehe);HPo=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),UPo=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=n(XA,"CODE",{});var Q1t=s(ohe);JPo=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),YPo=r(XA,":"),XA.forEach(t),KPo=i(ia),pe=n(ia,"UL",{});var be=s(pe);n2=n(be,"LI",{});var Ake=s(n2);rhe=n(Ake,"STRONG",{});var W1t=s(rhe);ZPo=r(W1t,"bart"),W1t.forEach(t),eBo=r(Ake," \u2014 "),IO=n(Ake,"A",{href:!0});var H1t=s(IO);oBo=r(H1t,"BartForConditionalGeneration"),H1t.forEach(t),rBo=r(Ake," (BART model)"),Ake.forEach(t),tBo=i(be),s2=n(be,"LI",{});var Lke=s(s2);the=n(Lke,"STRONG",{});var U1t=s(the);aBo=r(U1t,"bigbird_pegasus"),U1t.forEach(t),nBo=r(Lke," \u2014 "),NO=n(Lke,"A",{href:!0});var J1t=s(NO);sBo=r(J1t,"BigBirdPegasusForConditionalGeneration"),J1t.forEach(t),lBo=r(Lke," (BigBird-Pegasus model)"),Lke.forEach(t),iBo=i(be),l2=n(be,"LI",{});var yke=s(l2);ahe=n(yke,"STRONG",{});var Y1t=s(ahe);dBo=r(Y1t,"blenderbot"),Y1t.forEach(t),cBo=r(yke," \u2014 "),qO=n(yke,"A",{href:!0});var K1t=s(qO);fBo=r(K1t,"BlenderbotForConditionalGeneration"),K1t.forEach(t),mBo=r(yke," (Blenderbot model)"),yke.forEach(t),gBo=i(be),i2=n(be,"LI",{});var xke=s(i2);nhe=n(xke,"STRONG",{});var Z1t=s(nhe);hBo=r(Z1t,"blenderbot-small"),Z1t.forEach(t),pBo=r(xke," \u2014 "),jO=n(xke,"A",{href:!0});var e7t=s(jO);_Bo=r(e7t,"BlenderbotSmallForConditionalGeneration"),e7t.forEach(t),uBo=r(xke," (BlenderbotSmall model)"),xke.forEach(t),bBo=i(be),d2=n(be,"LI",{});var $ke=s(d2);she=n($ke,"STRONG",{});var o7t=s(she);vBo=r(o7t,"encoder-decoder"),o7t.forEach(t),FBo=r($ke," \u2014 "),DO=n($ke,"A",{href:!0});var r7t=s(DO);TBo=r(r7t,"EncoderDecoderModel"),r7t.forEach(t),MBo=r($ke," (Encoder decoder model)"),$ke.forEach(t),EBo=i(be),c2=n(be,"LI",{});var kke=s(c2);lhe=n(kke,"STRONG",{});var t7t=s(lhe);CBo=r(t7t,"fsmt"),t7t.forEach(t),wBo=r(kke," \u2014 "),GO=n(kke,"A",{href:!0});var a7t=s(GO);ABo=r(a7t,"FSMTForConditionalGeneration"),a7t.forEach(t),LBo=r(kke," (FairSeq Machine-Translation model)"),kke.forEach(t),yBo=i(be),f2=n(be,"LI",{});var Ske=s(f2);ihe=n(Ske,"STRONG",{});var n7t=s(ihe);xBo=r(n7t,"led"),n7t.forEach(t),$Bo=r(Ske," \u2014 "),OO=n(Ske,"A",{href:!0});var s7t=s(OO);kBo=r(s7t,"LEDForConditionalGeneration"),s7t.forEach(t),SBo=r(Ske," (LED model)"),Ske.forEach(t),RBo=i(be),m2=n(be,"LI",{});var Rke=s(m2);dhe=n(Rke,"STRONG",{});var l7t=s(dhe);PBo=r(l7t,"longt5"),l7t.forEach(t),BBo=r(Rke," \u2014 "),VO=n(Rke,"A",{href:!0});var i7t=s(VO);IBo=r(i7t,"LongT5ForConditionalGeneration"),i7t.forEach(t),NBo=r(Rke," (LongT5 model)"),Rke.forEach(t),qBo=i(be),g2=n(be,"LI",{});var Pke=s(g2);che=n(Pke,"STRONG",{});var d7t=s(che);jBo=r(d7t,"m2m_100"),d7t.forEach(t),DBo=r(Pke," \u2014 "),XO=n(Pke,"A",{href:!0});var c7t=s(XO);GBo=r(c7t,"M2M100ForConditionalGeneration"),c7t.forEach(t),OBo=r(Pke," (M2M100 model)"),Pke.forEach(t),VBo=i(be),h2=n(be,"LI",{});var Bke=s(h2);fhe=n(Bke,"STRONG",{});var f7t=s(fhe);XBo=r(f7t,"marian"),f7t.forEach(t),zBo=r(Bke," \u2014 "),zO=n(Bke,"A",{href:!0});var m7t=s(zO);QBo=r(m7t,"MarianMTModel"),m7t.forEach(t),WBo=r(Bke," (Marian model)"),Bke.forEach(t),HBo=i(be),p2=n(be,"LI",{});var Ike=s(p2);mhe=n(Ike,"STRONG",{});var g7t=s(mhe);UBo=r(g7t,"mbart"),g7t.forEach(t),JBo=r(Ike," \u2014 "),QO=n(Ike,"A",{href:!0});var h7t=s(QO);YBo=r(h7t,"MBartForConditionalGeneration"),h7t.forEach(t),KBo=r(Ike," (mBART model)"),Ike.forEach(t),ZBo=i(be),_2=n(be,"LI",{});var Nke=s(_2);ghe=n(Nke,"STRONG",{});var p7t=s(ghe);eIo=r(p7t,"mt5"),p7t.forEach(t),oIo=r(Nke," \u2014 "),WO=n(Nke,"A",{href:!0});var _7t=s(WO);rIo=r(_7t,"MT5ForConditionalGeneration"),_7t.forEach(t),tIo=r(Nke," (MT5 model)"),Nke.forEach(t),aIo=i(be),u2=n(be,"LI",{});var qke=s(u2);hhe=n(qke,"STRONG",{});var u7t=s(hhe);nIo=r(u7t,"pegasus"),u7t.forEach(t),sIo=r(qke," \u2014 "),HO=n(qke,"A",{href:!0});var b7t=s(HO);lIo=r(b7t,"PegasusForConditionalGeneration"),b7t.forEach(t),iIo=r(qke," (Pegasus model)"),qke.forEach(t),dIo=i(be),b2=n(be,"LI",{});var jke=s(b2);phe=n(jke,"STRONG",{});var v7t=s(phe);cIo=r(v7t,"plbart"),v7t.forEach(t),fIo=r(jke," \u2014 "),UO=n(jke,"A",{href:!0});var F7t=s(UO);mIo=r(F7t,"PLBartForConditionalGeneration"),F7t.forEach(t),gIo=r(jke," (PLBart model)"),jke.forEach(t),hIo=i(be),v2=n(be,"LI",{});var Dke=s(v2);_he=n(Dke,"STRONG",{});var T7t=s(_he);pIo=r(T7t,"prophetnet"),T7t.forEach(t),_Io=r(Dke," \u2014 "),JO=n(Dke,"A",{href:!0});var M7t=s(JO);uIo=r(M7t,"ProphetNetForConditionalGeneration"),M7t.forEach(t),bIo=r(Dke," (ProphetNet model)"),Dke.forEach(t),vIo=i(be),F2=n(be,"LI",{});var Gke=s(F2);uhe=n(Gke,"STRONG",{});var E7t=s(uhe);FIo=r(E7t,"t5"),E7t.forEach(t),TIo=r(Gke," \u2014 "),YO=n(Gke,"A",{href:!0});var C7t=s(YO);MIo=r(C7t,"T5ForConditionalGeneration"),C7t.forEach(t),EIo=r(Gke," (T5 model)"),Gke.forEach(t),CIo=i(be),T2=n(be,"LI",{});var Oke=s(T2);bhe=n(Oke,"STRONG",{});var w7t=s(bhe);wIo=r(w7t,"xlm-prophetnet"),w7t.forEach(t),AIo=r(Oke," \u2014 "),KO=n(Oke,"A",{href:!0});var A7t=s(KO);LIo=r(A7t,"XLMProphetNetForConditionalGeneration"),A7t.forEach(t),yIo=r(Oke," (XLM-ProphetNet model)"),Oke.forEach(t),be.forEach(t),xIo=i(ia),M2=n(ia,"P",{});var Vke=s(M2);$Io=r(Vke,"The model is set in evaluation mode by default using "),vhe=n(Vke,"CODE",{});var L7t=s(vhe);kIo=r(L7t,"model.eval()"),L7t.forEach(t),SIo=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=n(Vke,"CODE",{});var y7t=s(Fhe);RIo=r(y7t,"model.train()"),y7t.forEach(t),Vke.forEach(t),PIo=i(ia),T(E2.$$.fragment,ia),ia.forEach(t),rl.forEach(t),wOe=i(f),Yi=n(f,"H2",{class:!0});var kXe=s(Yi);C2=n(kXe,"A",{id:!0,class:!0,href:!0});var x7t=s(C2);The=n(x7t,"SPAN",{});var $7t=s(The);T($y.$$.fragment,$7t),$7t.forEach(t),x7t.forEach(t),BIo=i(kXe),Mhe=n(kXe,"SPAN",{});var k7t=s(Mhe);IIo=r(k7t,"AutoModelForSequenceClassification"),k7t.forEach(t),kXe.forEach(t),AOe=i(f),Po=n(f,"DIV",{class:!0});var tl=s(Po);T(ky.$$.fragment,tl),NIo=i(tl),Ki=n(tl,"P",{});var joe=s(Ki);qIo=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZO=n(joe,"A",{href:!0});var S7t=s(ZO);jIo=r(S7t,"from_pretrained()"),S7t.forEach(t),DIo=r(joe," class method or the "),eV=n(joe,"A",{href:!0});var R7t=s(eV);GIo=r(R7t,"from_config()"),R7t.forEach(t),OIo=r(joe,` class
method.`),joe.forEach(t),VIo=i(tl),Sy=n(tl,"P",{});var SXe=s(Sy);XIo=r(SXe,"This class cannot be instantiated directly using "),Ehe=n(SXe,"CODE",{});var P7t=s(Ehe);zIo=r(P7t,"__init__()"),P7t.forEach(t),QIo=r(SXe," (throws an error)."),SXe.forEach(t),WIo=i(tl),ct=n(tl,"DIV",{class:!0});var zA=s(ct);T(Ry.$$.fragment,zA),HIo=i(zA),Che=n(zA,"P",{});var B7t=s(Che);UIo=r(B7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B7t.forEach(t),JIo=i(zA),Zi=n(zA,"P",{});var Doe=s(Zi);YIo=r(Doe,`Note:
Loading a model from its configuration file does `),whe=n(Doe,"STRONG",{});var I7t=s(whe);KIo=r(I7t,"not"),I7t.forEach(t),ZIo=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=n(Doe,"A",{href:!0});var N7t=s(oV);eNo=r(N7t,"from_pretrained()"),N7t.forEach(t),oNo=r(Doe," to load the model weights."),Doe.forEach(t),rNo=i(zA),T(w2.$$.fragment,zA),zA.forEach(t),tNo=i(tl),oo=n(tl,"DIV",{class:!0});var da=s(oo);T(Py.$$.fragment,da),aNo=i(da),Ahe=n(da,"P",{});var q7t=s(Ahe);nNo=r(q7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q7t.forEach(t),sNo=i(da),qa=n(da,"P",{});var QA=s(qa);lNo=r(QA,"The model class to instantiate is selected based on the "),Lhe=n(QA,"CODE",{});var j7t=s(Lhe);iNo=r(j7t,"model_type"),j7t.forEach(t),dNo=r(QA,` property of the config object (either
passed as an argument or loaded from `),yhe=n(QA,"CODE",{});var D7t=s(yhe);cNo=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),fNo=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=n(QA,"CODE",{});var G7t=s(xhe);mNo=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),gNo=r(QA,":"),QA.forEach(t),hNo=i(da),N=n(da,"UL",{});var q=s(N);A2=n(q,"LI",{});var Xke=s(A2);$he=n(Xke,"STRONG",{});var O7t=s($he);pNo=r(O7t,"albert"),O7t.forEach(t),_No=r(Xke," \u2014 "),rV=n(Xke,"A",{href:!0});var V7t=s(rV);uNo=r(V7t,"AlbertForSequenceClassification"),V7t.forEach(t),bNo=r(Xke," (ALBERT model)"),Xke.forEach(t),vNo=i(q),L2=n(q,"LI",{});var zke=s(L2);khe=n(zke,"STRONG",{});var X7t=s(khe);FNo=r(X7t,"bart"),X7t.forEach(t),TNo=r(zke," \u2014 "),tV=n(zke,"A",{href:!0});var z7t=s(tV);MNo=r(z7t,"BartForSequenceClassification"),z7t.forEach(t),ENo=r(zke," (BART model)"),zke.forEach(t),CNo=i(q),y2=n(q,"LI",{});var Qke=s(y2);She=n(Qke,"STRONG",{});var Q7t=s(She);wNo=r(Q7t,"bert"),Q7t.forEach(t),ANo=r(Qke," \u2014 "),aV=n(Qke,"A",{href:!0});var W7t=s(aV);LNo=r(W7t,"BertForSequenceClassification"),W7t.forEach(t),yNo=r(Qke," (BERT model)"),Qke.forEach(t),xNo=i(q),x2=n(q,"LI",{});var Wke=s(x2);Rhe=n(Wke,"STRONG",{});var H7t=s(Rhe);$No=r(H7t,"big_bird"),H7t.forEach(t),kNo=r(Wke," \u2014 "),nV=n(Wke,"A",{href:!0});var U7t=s(nV);SNo=r(U7t,"BigBirdForSequenceClassification"),U7t.forEach(t),RNo=r(Wke," (BigBird model)"),Wke.forEach(t),PNo=i(q),$2=n(q,"LI",{});var Hke=s($2);Phe=n(Hke,"STRONG",{});var J7t=s(Phe);BNo=r(J7t,"bigbird_pegasus"),J7t.forEach(t),INo=r(Hke," \u2014 "),sV=n(Hke,"A",{href:!0});var Y7t=s(sV);NNo=r(Y7t,"BigBirdPegasusForSequenceClassification"),Y7t.forEach(t),qNo=r(Hke," (BigBird-Pegasus model)"),Hke.forEach(t),jNo=i(q),k2=n(q,"LI",{});var Uke=s(k2);Bhe=n(Uke,"STRONG",{});var K7t=s(Bhe);DNo=r(K7t,"bloom"),K7t.forEach(t),GNo=r(Uke," \u2014 "),lV=n(Uke,"A",{href:!0});var Z7t=s(lV);ONo=r(Z7t,"BloomForSequenceClassification"),Z7t.forEach(t),VNo=r(Uke," (BLOOM model)"),Uke.forEach(t),XNo=i(q),S2=n(q,"LI",{});var Jke=s(S2);Ihe=n(Jke,"STRONG",{});var e2t=s(Ihe);zNo=r(e2t,"camembert"),e2t.forEach(t),QNo=r(Jke," \u2014 "),iV=n(Jke,"A",{href:!0});var o2t=s(iV);WNo=r(o2t,"CamembertForSequenceClassification"),o2t.forEach(t),HNo=r(Jke," (CamemBERT model)"),Jke.forEach(t),UNo=i(q),R2=n(q,"LI",{});var Yke=s(R2);Nhe=n(Yke,"STRONG",{});var r2t=s(Nhe);JNo=r(r2t,"canine"),r2t.forEach(t),YNo=r(Yke," \u2014 "),dV=n(Yke,"A",{href:!0});var t2t=s(dV);KNo=r(t2t,"CanineForSequenceClassification"),t2t.forEach(t),ZNo=r(Yke," (CANINE model)"),Yke.forEach(t),eqo=i(q),P2=n(q,"LI",{});var Kke=s(P2);qhe=n(Kke,"STRONG",{});var a2t=s(qhe);oqo=r(a2t,"convbert"),a2t.forEach(t),rqo=r(Kke," \u2014 "),cV=n(Kke,"A",{href:!0});var n2t=s(cV);tqo=r(n2t,"ConvBertForSequenceClassification"),n2t.forEach(t),aqo=r(Kke," (ConvBERT model)"),Kke.forEach(t),nqo=i(q),B2=n(q,"LI",{});var Zke=s(B2);jhe=n(Zke,"STRONG",{});var s2t=s(jhe);sqo=r(s2t,"ctrl"),s2t.forEach(t),lqo=r(Zke," \u2014 "),fV=n(Zke,"A",{href:!0});var l2t=s(fV);iqo=r(l2t,"CTRLForSequenceClassification"),l2t.forEach(t),dqo=r(Zke," (CTRL model)"),Zke.forEach(t),cqo=i(q),I2=n(q,"LI",{});var eSe=s(I2);Dhe=n(eSe,"STRONG",{});var i2t=s(Dhe);fqo=r(i2t,"data2vec-text"),i2t.forEach(t),mqo=r(eSe," \u2014 "),mV=n(eSe,"A",{href:!0});var d2t=s(mV);gqo=r(d2t,"Data2VecTextForSequenceClassification"),d2t.forEach(t),hqo=r(eSe," (Data2VecText model)"),eSe.forEach(t),pqo=i(q),N2=n(q,"LI",{});var oSe=s(N2);Ghe=n(oSe,"STRONG",{});var c2t=s(Ghe);_qo=r(c2t,"deberta"),c2t.forEach(t),uqo=r(oSe," \u2014 "),gV=n(oSe,"A",{href:!0});var f2t=s(gV);bqo=r(f2t,"DebertaForSequenceClassification"),f2t.forEach(t),vqo=r(oSe," (DeBERTa model)"),oSe.forEach(t),Fqo=i(q),q2=n(q,"LI",{});var rSe=s(q2);Ohe=n(rSe,"STRONG",{});var m2t=s(Ohe);Tqo=r(m2t,"deberta-v2"),m2t.forEach(t),Mqo=r(rSe," \u2014 "),hV=n(rSe,"A",{href:!0});var g2t=s(hV);Eqo=r(g2t,"DebertaV2ForSequenceClassification"),g2t.forEach(t),Cqo=r(rSe," (DeBERTa-v2 model)"),rSe.forEach(t),wqo=i(q),j2=n(q,"LI",{});var tSe=s(j2);Vhe=n(tSe,"STRONG",{});var h2t=s(Vhe);Aqo=r(h2t,"distilbert"),h2t.forEach(t),Lqo=r(tSe," \u2014 "),pV=n(tSe,"A",{href:!0});var p2t=s(pV);yqo=r(p2t,"DistilBertForSequenceClassification"),p2t.forEach(t),xqo=r(tSe," (DistilBERT model)"),tSe.forEach(t),$qo=i(q),D2=n(q,"LI",{});var aSe=s(D2);Xhe=n(aSe,"STRONG",{});var _2t=s(Xhe);kqo=r(_2t,"electra"),_2t.forEach(t),Sqo=r(aSe," \u2014 "),_V=n(aSe,"A",{href:!0});var u2t=s(_V);Rqo=r(u2t,"ElectraForSequenceClassification"),u2t.forEach(t),Pqo=r(aSe," (ELECTRA model)"),aSe.forEach(t),Bqo=i(q),G2=n(q,"LI",{});var nSe=s(G2);zhe=n(nSe,"STRONG",{});var b2t=s(zhe);Iqo=r(b2t,"flaubert"),b2t.forEach(t),Nqo=r(nSe," \u2014 "),uV=n(nSe,"A",{href:!0});var v2t=s(uV);qqo=r(v2t,"FlaubertForSequenceClassification"),v2t.forEach(t),jqo=r(nSe," (FlauBERT model)"),nSe.forEach(t),Dqo=i(q),O2=n(q,"LI",{});var sSe=s(O2);Qhe=n(sSe,"STRONG",{});var F2t=s(Qhe);Gqo=r(F2t,"fnet"),F2t.forEach(t),Oqo=r(sSe," \u2014 "),bV=n(sSe,"A",{href:!0});var T2t=s(bV);Vqo=r(T2t,"FNetForSequenceClassification"),T2t.forEach(t),Xqo=r(sSe," (FNet model)"),sSe.forEach(t),zqo=i(q),V2=n(q,"LI",{});var lSe=s(V2);Whe=n(lSe,"STRONG",{});var M2t=s(Whe);Qqo=r(M2t,"funnel"),M2t.forEach(t),Wqo=r(lSe," \u2014 "),vV=n(lSe,"A",{href:!0});var E2t=s(vV);Hqo=r(E2t,"FunnelForSequenceClassification"),E2t.forEach(t),Uqo=r(lSe," (Funnel Transformer model)"),lSe.forEach(t),Jqo=i(q),X2=n(q,"LI",{});var iSe=s(X2);Hhe=n(iSe,"STRONG",{});var C2t=s(Hhe);Yqo=r(C2t,"gpt2"),C2t.forEach(t),Kqo=r(iSe," \u2014 "),FV=n(iSe,"A",{href:!0});var w2t=s(FV);Zqo=r(w2t,"GPT2ForSequenceClassification"),w2t.forEach(t),ejo=r(iSe," (OpenAI GPT-2 model)"),iSe.forEach(t),ojo=i(q),z2=n(q,"LI",{});var dSe=s(z2);Uhe=n(dSe,"STRONG",{});var A2t=s(Uhe);rjo=r(A2t,"gpt_neo"),A2t.forEach(t),tjo=r(dSe," \u2014 "),TV=n(dSe,"A",{href:!0});var L2t=s(TV);ajo=r(L2t,"GPTNeoForSequenceClassification"),L2t.forEach(t),njo=r(dSe," (GPT Neo model)"),dSe.forEach(t),sjo=i(q),Q2=n(q,"LI",{});var cSe=s(Q2);Jhe=n(cSe,"STRONG",{});var y2t=s(Jhe);ljo=r(y2t,"gptj"),y2t.forEach(t),ijo=r(cSe," \u2014 "),MV=n(cSe,"A",{href:!0});var x2t=s(MV);djo=r(x2t,"GPTJForSequenceClassification"),x2t.forEach(t),cjo=r(cSe," (GPT-J model)"),cSe.forEach(t),fjo=i(q),W2=n(q,"LI",{});var fSe=s(W2);Yhe=n(fSe,"STRONG",{});var $2t=s(Yhe);mjo=r($2t,"ibert"),$2t.forEach(t),gjo=r(fSe," \u2014 "),EV=n(fSe,"A",{href:!0});var k2t=s(EV);hjo=r(k2t,"IBertForSequenceClassification"),k2t.forEach(t),pjo=r(fSe," (I-BERT model)"),fSe.forEach(t),_jo=i(q),H2=n(q,"LI",{});var mSe=s(H2);Khe=n(mSe,"STRONG",{});var S2t=s(Khe);ujo=r(S2t,"layoutlm"),S2t.forEach(t),bjo=r(mSe," \u2014 "),CV=n(mSe,"A",{href:!0});var R2t=s(CV);vjo=r(R2t,"LayoutLMForSequenceClassification"),R2t.forEach(t),Fjo=r(mSe," (LayoutLM model)"),mSe.forEach(t),Tjo=i(q),U2=n(q,"LI",{});var gSe=s(U2);Zhe=n(gSe,"STRONG",{});var P2t=s(Zhe);Mjo=r(P2t,"layoutlmv2"),P2t.forEach(t),Ejo=r(gSe," \u2014 "),wV=n(gSe,"A",{href:!0});var B2t=s(wV);Cjo=r(B2t,"LayoutLMv2ForSequenceClassification"),B2t.forEach(t),wjo=r(gSe," (LayoutLMv2 model)"),gSe.forEach(t),Ajo=i(q),J2=n(q,"LI",{});var hSe=s(J2);epe=n(hSe,"STRONG",{});var I2t=s(epe);Ljo=r(I2t,"layoutlmv3"),I2t.forEach(t),yjo=r(hSe," \u2014 "),AV=n(hSe,"A",{href:!0});var N2t=s(AV);xjo=r(N2t,"LayoutLMv3ForSequenceClassification"),N2t.forEach(t),$jo=r(hSe," (LayoutLMv3 model)"),hSe.forEach(t),kjo=i(q),Y2=n(q,"LI",{});var pSe=s(Y2);ope=n(pSe,"STRONG",{});var q2t=s(ope);Sjo=r(q2t,"led"),q2t.forEach(t),Rjo=r(pSe," \u2014 "),LV=n(pSe,"A",{href:!0});var j2t=s(LV);Pjo=r(j2t,"LEDForSequenceClassification"),j2t.forEach(t),Bjo=r(pSe," (LED model)"),pSe.forEach(t),Ijo=i(q),K2=n(q,"LI",{});var _Se=s(K2);rpe=n(_Se,"STRONG",{});var D2t=s(rpe);Njo=r(D2t,"longformer"),D2t.forEach(t),qjo=r(_Se," \u2014 "),yV=n(_Se,"A",{href:!0});var G2t=s(yV);jjo=r(G2t,"LongformerForSequenceClassification"),G2t.forEach(t),Djo=r(_Se," (Longformer model)"),_Se.forEach(t),Gjo=i(q),Z2=n(q,"LI",{});var uSe=s(Z2);tpe=n(uSe,"STRONG",{});var O2t=s(tpe);Ojo=r(O2t,"mbart"),O2t.forEach(t),Vjo=r(uSe," \u2014 "),xV=n(uSe,"A",{href:!0});var V2t=s(xV);Xjo=r(V2t,"MBartForSequenceClassification"),V2t.forEach(t),zjo=r(uSe," (mBART model)"),uSe.forEach(t),Qjo=i(q),eb=n(q,"LI",{});var bSe=s(eb);ape=n(bSe,"STRONG",{});var X2t=s(ape);Wjo=r(X2t,"megatron-bert"),X2t.forEach(t),Hjo=r(bSe," \u2014 "),$V=n(bSe,"A",{href:!0});var z2t=s($V);Ujo=r(z2t,"MegatronBertForSequenceClassification"),z2t.forEach(t),Jjo=r(bSe," (Megatron-BERT model)"),bSe.forEach(t),Yjo=i(q),ob=n(q,"LI",{});var vSe=s(ob);npe=n(vSe,"STRONG",{});var Q2t=s(npe);Kjo=r(Q2t,"mobilebert"),Q2t.forEach(t),Zjo=r(vSe," \u2014 "),kV=n(vSe,"A",{href:!0});var W2t=s(kV);eDo=r(W2t,"MobileBertForSequenceClassification"),W2t.forEach(t),oDo=r(vSe," (MobileBERT model)"),vSe.forEach(t),rDo=i(q),rb=n(q,"LI",{});var FSe=s(rb);spe=n(FSe,"STRONG",{});var H2t=s(spe);tDo=r(H2t,"mpnet"),H2t.forEach(t),aDo=r(FSe," \u2014 "),SV=n(FSe,"A",{href:!0});var U2t=s(SV);nDo=r(U2t,"MPNetForSequenceClassification"),U2t.forEach(t),sDo=r(FSe," (MPNet model)"),FSe.forEach(t),lDo=i(q),tb=n(q,"LI",{});var TSe=s(tb);lpe=n(TSe,"STRONG",{});var J2t=s(lpe);iDo=r(J2t,"nezha"),J2t.forEach(t),dDo=r(TSe," \u2014 "),RV=n(TSe,"A",{href:!0});var Y2t=s(RV);cDo=r(Y2t,"NezhaForSequenceClassification"),Y2t.forEach(t),fDo=r(TSe," (Nezha model)"),TSe.forEach(t),mDo=i(q),ab=n(q,"LI",{});var MSe=s(ab);ipe=n(MSe,"STRONG",{});var K2t=s(ipe);gDo=r(K2t,"nystromformer"),K2t.forEach(t),hDo=r(MSe," \u2014 "),PV=n(MSe,"A",{href:!0});var Z2t=s(PV);pDo=r(Z2t,"NystromformerForSequenceClassification"),Z2t.forEach(t),_Do=r(MSe," (Nystr\xF6mformer model)"),MSe.forEach(t),uDo=i(q),nb=n(q,"LI",{});var ESe=s(nb);dpe=n(ESe,"STRONG",{});var ebt=s(dpe);bDo=r(ebt,"openai-gpt"),ebt.forEach(t),vDo=r(ESe," \u2014 "),BV=n(ESe,"A",{href:!0});var obt=s(BV);FDo=r(obt,"OpenAIGPTForSequenceClassification"),obt.forEach(t),TDo=r(ESe," (OpenAI GPT model)"),ESe.forEach(t),MDo=i(q),sb=n(q,"LI",{});var CSe=s(sb);cpe=n(CSe,"STRONG",{});var rbt=s(cpe);EDo=r(rbt,"perceiver"),rbt.forEach(t),CDo=r(CSe," \u2014 "),IV=n(CSe,"A",{href:!0});var tbt=s(IV);wDo=r(tbt,"PerceiverForSequenceClassification"),tbt.forEach(t),ADo=r(CSe," (Perceiver model)"),CSe.forEach(t),LDo=i(q),lb=n(q,"LI",{});var wSe=s(lb);fpe=n(wSe,"STRONG",{});var abt=s(fpe);yDo=r(abt,"plbart"),abt.forEach(t),xDo=r(wSe," \u2014 "),NV=n(wSe,"A",{href:!0});var nbt=s(NV);$Do=r(nbt,"PLBartForSequenceClassification"),nbt.forEach(t),kDo=r(wSe," (PLBart model)"),wSe.forEach(t),SDo=i(q),ib=n(q,"LI",{});var ASe=s(ib);mpe=n(ASe,"STRONG",{});var sbt=s(mpe);RDo=r(sbt,"qdqbert"),sbt.forEach(t),PDo=r(ASe," \u2014 "),qV=n(ASe,"A",{href:!0});var lbt=s(qV);BDo=r(lbt,"QDQBertForSequenceClassification"),lbt.forEach(t),IDo=r(ASe," (QDQBert model)"),ASe.forEach(t),NDo=i(q),db=n(q,"LI",{});var LSe=s(db);gpe=n(LSe,"STRONG",{});var ibt=s(gpe);qDo=r(ibt,"reformer"),ibt.forEach(t),jDo=r(LSe," \u2014 "),jV=n(LSe,"A",{href:!0});var dbt=s(jV);DDo=r(dbt,"ReformerForSequenceClassification"),dbt.forEach(t),GDo=r(LSe," (Reformer model)"),LSe.forEach(t),ODo=i(q),cb=n(q,"LI",{});var ySe=s(cb);hpe=n(ySe,"STRONG",{});var cbt=s(hpe);VDo=r(cbt,"rembert"),cbt.forEach(t),XDo=r(ySe," \u2014 "),DV=n(ySe,"A",{href:!0});var fbt=s(DV);zDo=r(fbt,"RemBertForSequenceClassification"),fbt.forEach(t),QDo=r(ySe," (RemBERT model)"),ySe.forEach(t),WDo=i(q),fb=n(q,"LI",{});var xSe=s(fb);ppe=n(xSe,"STRONG",{});var mbt=s(ppe);HDo=r(mbt,"roberta"),mbt.forEach(t),UDo=r(xSe," \u2014 "),GV=n(xSe,"A",{href:!0});var gbt=s(GV);JDo=r(gbt,"RobertaForSequenceClassification"),gbt.forEach(t),YDo=r(xSe," (RoBERTa model)"),xSe.forEach(t),KDo=i(q),mb=n(q,"LI",{});var $Se=s(mb);_pe=n($Se,"STRONG",{});var hbt=s(_pe);ZDo=r(hbt,"roformer"),hbt.forEach(t),eGo=r($Se," \u2014 "),OV=n($Se,"A",{href:!0});var pbt=s(OV);oGo=r(pbt,"RoFormerForSequenceClassification"),pbt.forEach(t),rGo=r($Se," (RoFormer model)"),$Se.forEach(t),tGo=i(q),gb=n(q,"LI",{});var kSe=s(gb);upe=n(kSe,"STRONG",{});var _bt=s(upe);aGo=r(_bt,"squeezebert"),_bt.forEach(t),nGo=r(kSe," \u2014 "),VV=n(kSe,"A",{href:!0});var ubt=s(VV);sGo=r(ubt,"SqueezeBertForSequenceClassification"),ubt.forEach(t),lGo=r(kSe," (SqueezeBERT model)"),kSe.forEach(t),iGo=i(q),hb=n(q,"LI",{});var SSe=s(hb);bpe=n(SSe,"STRONG",{});var bbt=s(bpe);dGo=r(bbt,"tapas"),bbt.forEach(t),cGo=r(SSe," \u2014 "),XV=n(SSe,"A",{href:!0});var vbt=s(XV);fGo=r(vbt,"TapasForSequenceClassification"),vbt.forEach(t),mGo=r(SSe," (TAPAS model)"),SSe.forEach(t),gGo=i(q),pb=n(q,"LI",{});var RSe=s(pb);vpe=n(RSe,"STRONG",{});var Fbt=s(vpe);hGo=r(Fbt,"transfo-xl"),Fbt.forEach(t),pGo=r(RSe," \u2014 "),zV=n(RSe,"A",{href:!0});var Tbt=s(zV);_Go=r(Tbt,"TransfoXLForSequenceClassification"),Tbt.forEach(t),uGo=r(RSe," (Transformer-XL model)"),RSe.forEach(t),bGo=i(q),_b=n(q,"LI",{});var PSe=s(_b);Fpe=n(PSe,"STRONG",{});var Mbt=s(Fpe);vGo=r(Mbt,"xlm"),Mbt.forEach(t),FGo=r(PSe," \u2014 "),QV=n(PSe,"A",{href:!0});var Ebt=s(QV);TGo=r(Ebt,"XLMForSequenceClassification"),Ebt.forEach(t),MGo=r(PSe," (XLM model)"),PSe.forEach(t),EGo=i(q),ub=n(q,"LI",{});var BSe=s(ub);Tpe=n(BSe,"STRONG",{});var Cbt=s(Tpe);CGo=r(Cbt,"xlm-roberta"),Cbt.forEach(t),wGo=r(BSe," \u2014 "),WV=n(BSe,"A",{href:!0});var wbt=s(WV);AGo=r(wbt,"XLMRobertaForSequenceClassification"),wbt.forEach(t),LGo=r(BSe," (XLM-RoBERTa model)"),BSe.forEach(t),yGo=i(q),bb=n(q,"LI",{});var ISe=s(bb);Mpe=n(ISe,"STRONG",{});var Abt=s(Mpe);xGo=r(Abt,"xlm-roberta-xl"),Abt.forEach(t),$Go=r(ISe," \u2014 "),HV=n(ISe,"A",{href:!0});var Lbt=s(HV);kGo=r(Lbt,"XLMRobertaXLForSequenceClassification"),Lbt.forEach(t),SGo=r(ISe," (XLM-RoBERTa-XL model)"),ISe.forEach(t),RGo=i(q),vb=n(q,"LI",{});var NSe=s(vb);Epe=n(NSe,"STRONG",{});var ybt=s(Epe);PGo=r(ybt,"xlnet"),ybt.forEach(t),BGo=r(NSe," \u2014 "),UV=n(NSe,"A",{href:!0});var xbt=s(UV);IGo=r(xbt,"XLNetForSequenceClassification"),xbt.forEach(t),NGo=r(NSe," (XLNet model)"),NSe.forEach(t),qGo=i(q),Fb=n(q,"LI",{});var qSe=s(Fb);Cpe=n(qSe,"STRONG",{});var $bt=s(Cpe);jGo=r($bt,"yoso"),$bt.forEach(t),DGo=r(qSe," \u2014 "),JV=n(qSe,"A",{href:!0});var kbt=s(JV);GGo=r(kbt,"YosoForSequenceClassification"),kbt.forEach(t),OGo=r(qSe," (YOSO model)"),qSe.forEach(t),q.forEach(t),VGo=i(da),Tb=n(da,"P",{});var jSe=s(Tb);XGo=r(jSe,"The model is set in evaluation mode by default using "),wpe=n(jSe,"CODE",{});var Sbt=s(wpe);zGo=r(Sbt,"model.eval()"),Sbt.forEach(t),QGo=r(jSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(jSe,"CODE",{});var Rbt=s(Ape);WGo=r(Rbt,"model.train()"),Rbt.forEach(t),jSe.forEach(t),HGo=i(da),T(Mb.$$.fragment,da),da.forEach(t),tl.forEach(t),LOe=i(f),ed=n(f,"H2",{class:!0});var RXe=s(ed);Eb=n(RXe,"A",{id:!0,class:!0,href:!0});var Pbt=s(Eb);Lpe=n(Pbt,"SPAN",{});var Bbt=s(Lpe);T(By.$$.fragment,Bbt),Bbt.forEach(t),Pbt.forEach(t),UGo=i(RXe),ype=n(RXe,"SPAN",{});var Ibt=s(ype);JGo=r(Ibt,"AutoModelForMultipleChoice"),Ibt.forEach(t),RXe.forEach(t),yOe=i(f),Bo=n(f,"DIV",{class:!0});var al=s(Bo);T(Iy.$$.fragment,al),YGo=i(al),od=n(al,"P",{});var Goe=s(od);KGo=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YV=n(Goe,"A",{href:!0});var Nbt=s(YV);ZGo=r(Nbt,"from_pretrained()"),Nbt.forEach(t),eOo=r(Goe," class method or the "),KV=n(Goe,"A",{href:!0});var qbt=s(KV);oOo=r(qbt,"from_config()"),qbt.forEach(t),rOo=r(Goe,` class
method.`),Goe.forEach(t),tOo=i(al),Ny=n(al,"P",{});var PXe=s(Ny);aOo=r(PXe,"This class cannot be instantiated directly using "),xpe=n(PXe,"CODE",{});var jbt=s(xpe);nOo=r(jbt,"__init__()"),jbt.forEach(t),sOo=r(PXe," (throws an error)."),PXe.forEach(t),lOo=i(al),ft=n(al,"DIV",{class:!0});var WA=s(ft);T(qy.$$.fragment,WA),iOo=i(WA),$pe=n(WA,"P",{});var Dbt=s($pe);dOo=r(Dbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dbt.forEach(t),cOo=i(WA),rd=n(WA,"P",{});var Ooe=s(rd);fOo=r(Ooe,`Note:
Loading a model from its configuration file does `),kpe=n(Ooe,"STRONG",{});var Gbt=s(kpe);mOo=r(Gbt,"not"),Gbt.forEach(t),gOo=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(Ooe,"A",{href:!0});var Obt=s(ZV);hOo=r(Obt,"from_pretrained()"),Obt.forEach(t),pOo=r(Ooe," to load the model weights."),Ooe.forEach(t),_Oo=i(WA),T(Cb.$$.fragment,WA),WA.forEach(t),uOo=i(al),ro=n(al,"DIV",{class:!0});var ca=s(ro);T(jy.$$.fragment,ca),bOo=i(ca),Spe=n(ca,"P",{});var Vbt=s(Spe);vOo=r(Vbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vbt.forEach(t),FOo=i(ca),ja=n(ca,"P",{});var HA=s(ja);TOo=r(HA,"The model class to instantiate is selected based on the "),Rpe=n(HA,"CODE",{});var Xbt=s(Rpe);MOo=r(Xbt,"model_type"),Xbt.forEach(t),EOo=r(HA,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(HA,"CODE",{});var zbt=s(Ppe);COo=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),wOo=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(HA,"CODE",{});var Qbt=s(Bpe);AOo=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),LOo=r(HA,":"),HA.forEach(t),yOo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);wb=n(ee,"LI",{});var DSe=s(wb);Ipe=n(DSe,"STRONG",{});var Wbt=s(Ipe);xOo=r(Wbt,"albert"),Wbt.forEach(t),$Oo=r(DSe," \u2014 "),eX=n(DSe,"A",{href:!0});var Hbt=s(eX);kOo=r(Hbt,"AlbertForMultipleChoice"),Hbt.forEach(t),SOo=r(DSe," (ALBERT model)"),DSe.forEach(t),ROo=i(ee),Ab=n(ee,"LI",{});var GSe=s(Ab);Npe=n(GSe,"STRONG",{});var Ubt=s(Npe);POo=r(Ubt,"bert"),Ubt.forEach(t),BOo=r(GSe," \u2014 "),oX=n(GSe,"A",{href:!0});var Jbt=s(oX);IOo=r(Jbt,"BertForMultipleChoice"),Jbt.forEach(t),NOo=r(GSe," (BERT model)"),GSe.forEach(t),qOo=i(ee),Lb=n(ee,"LI",{});var OSe=s(Lb);qpe=n(OSe,"STRONG",{});var Ybt=s(qpe);jOo=r(Ybt,"big_bird"),Ybt.forEach(t),DOo=r(OSe," \u2014 "),rX=n(OSe,"A",{href:!0});var Kbt=s(rX);GOo=r(Kbt,"BigBirdForMultipleChoice"),Kbt.forEach(t),OOo=r(OSe," (BigBird model)"),OSe.forEach(t),VOo=i(ee),yb=n(ee,"LI",{});var VSe=s(yb);jpe=n(VSe,"STRONG",{});var Zbt=s(jpe);XOo=r(Zbt,"camembert"),Zbt.forEach(t),zOo=r(VSe," \u2014 "),tX=n(VSe,"A",{href:!0});var evt=s(tX);QOo=r(evt,"CamembertForMultipleChoice"),evt.forEach(t),WOo=r(VSe," (CamemBERT model)"),VSe.forEach(t),HOo=i(ee),xb=n(ee,"LI",{});var XSe=s(xb);Dpe=n(XSe,"STRONG",{});var ovt=s(Dpe);UOo=r(ovt,"canine"),ovt.forEach(t),JOo=r(XSe," \u2014 "),aX=n(XSe,"A",{href:!0});var rvt=s(aX);YOo=r(rvt,"CanineForMultipleChoice"),rvt.forEach(t),KOo=r(XSe," (CANINE model)"),XSe.forEach(t),ZOo=i(ee),$b=n(ee,"LI",{});var zSe=s($b);Gpe=n(zSe,"STRONG",{});var tvt=s(Gpe);eVo=r(tvt,"convbert"),tvt.forEach(t),oVo=r(zSe," \u2014 "),nX=n(zSe,"A",{href:!0});var avt=s(nX);rVo=r(avt,"ConvBertForMultipleChoice"),avt.forEach(t),tVo=r(zSe," (ConvBERT model)"),zSe.forEach(t),aVo=i(ee),kb=n(ee,"LI",{});var QSe=s(kb);Ope=n(QSe,"STRONG",{});var nvt=s(Ope);nVo=r(nvt,"data2vec-text"),nvt.forEach(t),sVo=r(QSe," \u2014 "),sX=n(QSe,"A",{href:!0});var svt=s(sX);lVo=r(svt,"Data2VecTextForMultipleChoice"),svt.forEach(t),iVo=r(QSe," (Data2VecText model)"),QSe.forEach(t),dVo=i(ee),Sb=n(ee,"LI",{});var WSe=s(Sb);Vpe=n(WSe,"STRONG",{});var lvt=s(Vpe);cVo=r(lvt,"deberta-v2"),lvt.forEach(t),fVo=r(WSe," \u2014 "),lX=n(WSe,"A",{href:!0});var ivt=s(lX);mVo=r(ivt,"DebertaV2ForMultipleChoice"),ivt.forEach(t),gVo=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),hVo=i(ee),Rb=n(ee,"LI",{});var HSe=s(Rb);Xpe=n(HSe,"STRONG",{});var dvt=s(Xpe);pVo=r(dvt,"distilbert"),dvt.forEach(t),_Vo=r(HSe," \u2014 "),iX=n(HSe,"A",{href:!0});var cvt=s(iX);uVo=r(cvt,"DistilBertForMultipleChoice"),cvt.forEach(t),bVo=r(HSe," (DistilBERT model)"),HSe.forEach(t),vVo=i(ee),Pb=n(ee,"LI",{});var USe=s(Pb);zpe=n(USe,"STRONG",{});var fvt=s(zpe);FVo=r(fvt,"electra"),fvt.forEach(t),TVo=r(USe," \u2014 "),dX=n(USe,"A",{href:!0});var mvt=s(dX);MVo=r(mvt,"ElectraForMultipleChoice"),mvt.forEach(t),EVo=r(USe," (ELECTRA model)"),USe.forEach(t),CVo=i(ee),Bb=n(ee,"LI",{});var JSe=s(Bb);Qpe=n(JSe,"STRONG",{});var gvt=s(Qpe);wVo=r(gvt,"flaubert"),gvt.forEach(t),AVo=r(JSe," \u2014 "),cX=n(JSe,"A",{href:!0});var hvt=s(cX);LVo=r(hvt,"FlaubertForMultipleChoice"),hvt.forEach(t),yVo=r(JSe," (FlauBERT model)"),JSe.forEach(t),xVo=i(ee),Ib=n(ee,"LI",{});var YSe=s(Ib);Wpe=n(YSe,"STRONG",{});var pvt=s(Wpe);$Vo=r(pvt,"fnet"),pvt.forEach(t),kVo=r(YSe," \u2014 "),fX=n(YSe,"A",{href:!0});var _vt=s(fX);SVo=r(_vt,"FNetForMultipleChoice"),_vt.forEach(t),RVo=r(YSe," (FNet model)"),YSe.forEach(t),PVo=i(ee),Nb=n(ee,"LI",{});var KSe=s(Nb);Hpe=n(KSe,"STRONG",{});var uvt=s(Hpe);BVo=r(uvt,"funnel"),uvt.forEach(t),IVo=r(KSe," \u2014 "),mX=n(KSe,"A",{href:!0});var bvt=s(mX);NVo=r(bvt,"FunnelForMultipleChoice"),bvt.forEach(t),qVo=r(KSe," (Funnel Transformer model)"),KSe.forEach(t),jVo=i(ee),qb=n(ee,"LI",{});var ZSe=s(qb);Upe=n(ZSe,"STRONG",{});var vvt=s(Upe);DVo=r(vvt,"ibert"),vvt.forEach(t),GVo=r(ZSe," \u2014 "),gX=n(ZSe,"A",{href:!0});var Fvt=s(gX);OVo=r(Fvt,"IBertForMultipleChoice"),Fvt.forEach(t),VVo=r(ZSe," (I-BERT model)"),ZSe.forEach(t),XVo=i(ee),jb=n(ee,"LI",{});var eRe=s(jb);Jpe=n(eRe,"STRONG",{});var Tvt=s(Jpe);zVo=r(Tvt,"longformer"),Tvt.forEach(t),QVo=r(eRe," \u2014 "),hX=n(eRe,"A",{href:!0});var Mvt=s(hX);WVo=r(Mvt,"LongformerForMultipleChoice"),Mvt.forEach(t),HVo=r(eRe," (Longformer model)"),eRe.forEach(t),UVo=i(ee),Db=n(ee,"LI",{});var oRe=s(Db);Ype=n(oRe,"STRONG",{});var Evt=s(Ype);JVo=r(Evt,"megatron-bert"),Evt.forEach(t),YVo=r(oRe," \u2014 "),pX=n(oRe,"A",{href:!0});var Cvt=s(pX);KVo=r(Cvt,"MegatronBertForMultipleChoice"),Cvt.forEach(t),ZVo=r(oRe," (Megatron-BERT model)"),oRe.forEach(t),eXo=i(ee),Gb=n(ee,"LI",{});var rRe=s(Gb);Kpe=n(rRe,"STRONG",{});var wvt=s(Kpe);oXo=r(wvt,"mobilebert"),wvt.forEach(t),rXo=r(rRe," \u2014 "),_X=n(rRe,"A",{href:!0});var Avt=s(_X);tXo=r(Avt,"MobileBertForMultipleChoice"),Avt.forEach(t),aXo=r(rRe," (MobileBERT model)"),rRe.forEach(t),nXo=i(ee),Ob=n(ee,"LI",{});var tRe=s(Ob);Zpe=n(tRe,"STRONG",{});var Lvt=s(Zpe);sXo=r(Lvt,"mpnet"),Lvt.forEach(t),lXo=r(tRe," \u2014 "),uX=n(tRe,"A",{href:!0});var yvt=s(uX);iXo=r(yvt,"MPNetForMultipleChoice"),yvt.forEach(t),dXo=r(tRe," (MPNet model)"),tRe.forEach(t),cXo=i(ee),Vb=n(ee,"LI",{});var aRe=s(Vb);e_e=n(aRe,"STRONG",{});var xvt=s(e_e);fXo=r(xvt,"nezha"),xvt.forEach(t),mXo=r(aRe," \u2014 "),bX=n(aRe,"A",{href:!0});var $vt=s(bX);gXo=r($vt,"NezhaForMultipleChoice"),$vt.forEach(t),hXo=r(aRe," (Nezha model)"),aRe.forEach(t),pXo=i(ee),Xb=n(ee,"LI",{});var nRe=s(Xb);o_e=n(nRe,"STRONG",{});var kvt=s(o_e);_Xo=r(kvt,"nystromformer"),kvt.forEach(t),uXo=r(nRe," \u2014 "),vX=n(nRe,"A",{href:!0});var Svt=s(vX);bXo=r(Svt,"NystromformerForMultipleChoice"),Svt.forEach(t),vXo=r(nRe," (Nystr\xF6mformer model)"),nRe.forEach(t),FXo=i(ee),zb=n(ee,"LI",{});var sRe=s(zb);r_e=n(sRe,"STRONG",{});var Rvt=s(r_e);TXo=r(Rvt,"qdqbert"),Rvt.forEach(t),MXo=r(sRe," \u2014 "),FX=n(sRe,"A",{href:!0});var Pvt=s(FX);EXo=r(Pvt,"QDQBertForMultipleChoice"),Pvt.forEach(t),CXo=r(sRe," (QDQBert model)"),sRe.forEach(t),wXo=i(ee),Qb=n(ee,"LI",{});var lRe=s(Qb);t_e=n(lRe,"STRONG",{});var Bvt=s(t_e);AXo=r(Bvt,"rembert"),Bvt.forEach(t),LXo=r(lRe," \u2014 "),TX=n(lRe,"A",{href:!0});var Ivt=s(TX);yXo=r(Ivt,"RemBertForMultipleChoice"),Ivt.forEach(t),xXo=r(lRe," (RemBERT model)"),lRe.forEach(t),$Xo=i(ee),Wb=n(ee,"LI",{});var iRe=s(Wb);a_e=n(iRe,"STRONG",{});var Nvt=s(a_e);kXo=r(Nvt,"roberta"),Nvt.forEach(t),SXo=r(iRe," \u2014 "),MX=n(iRe,"A",{href:!0});var qvt=s(MX);RXo=r(qvt,"RobertaForMultipleChoice"),qvt.forEach(t),PXo=r(iRe," (RoBERTa model)"),iRe.forEach(t),BXo=i(ee),Hb=n(ee,"LI",{});var dRe=s(Hb);n_e=n(dRe,"STRONG",{});var jvt=s(n_e);IXo=r(jvt,"roformer"),jvt.forEach(t),NXo=r(dRe," \u2014 "),EX=n(dRe,"A",{href:!0});var Dvt=s(EX);qXo=r(Dvt,"RoFormerForMultipleChoice"),Dvt.forEach(t),jXo=r(dRe," (RoFormer model)"),dRe.forEach(t),DXo=i(ee),Ub=n(ee,"LI",{});var cRe=s(Ub);s_e=n(cRe,"STRONG",{});var Gvt=s(s_e);GXo=r(Gvt,"squeezebert"),Gvt.forEach(t),OXo=r(cRe," \u2014 "),CX=n(cRe,"A",{href:!0});var Ovt=s(CX);VXo=r(Ovt,"SqueezeBertForMultipleChoice"),Ovt.forEach(t),XXo=r(cRe," (SqueezeBERT model)"),cRe.forEach(t),zXo=i(ee),Jb=n(ee,"LI",{});var fRe=s(Jb);l_e=n(fRe,"STRONG",{});var Vvt=s(l_e);QXo=r(Vvt,"xlm"),Vvt.forEach(t),WXo=r(fRe," \u2014 "),wX=n(fRe,"A",{href:!0});var Xvt=s(wX);HXo=r(Xvt,"XLMForMultipleChoice"),Xvt.forEach(t),UXo=r(fRe," (XLM model)"),fRe.forEach(t),JXo=i(ee),Yb=n(ee,"LI",{});var mRe=s(Yb);i_e=n(mRe,"STRONG",{});var zvt=s(i_e);YXo=r(zvt,"xlm-roberta"),zvt.forEach(t),KXo=r(mRe," \u2014 "),AX=n(mRe,"A",{href:!0});var Qvt=s(AX);ZXo=r(Qvt,"XLMRobertaForMultipleChoice"),Qvt.forEach(t),ezo=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),ozo=i(ee),Kb=n(ee,"LI",{});var gRe=s(Kb);d_e=n(gRe,"STRONG",{});var Wvt=s(d_e);rzo=r(Wvt,"xlm-roberta-xl"),Wvt.forEach(t),tzo=r(gRe," \u2014 "),LX=n(gRe,"A",{href:!0});var Hvt=s(LX);azo=r(Hvt,"XLMRobertaXLForMultipleChoice"),Hvt.forEach(t),nzo=r(gRe," (XLM-RoBERTa-XL model)"),gRe.forEach(t),szo=i(ee),Zb=n(ee,"LI",{});var hRe=s(Zb);c_e=n(hRe,"STRONG",{});var Uvt=s(c_e);lzo=r(Uvt,"xlnet"),Uvt.forEach(t),izo=r(hRe," \u2014 "),yX=n(hRe,"A",{href:!0});var Jvt=s(yX);dzo=r(Jvt,"XLNetForMultipleChoice"),Jvt.forEach(t),czo=r(hRe," (XLNet model)"),hRe.forEach(t),fzo=i(ee),ev=n(ee,"LI",{});var pRe=s(ev);f_e=n(pRe,"STRONG",{});var Yvt=s(f_e);mzo=r(Yvt,"yoso"),Yvt.forEach(t),gzo=r(pRe," \u2014 "),xX=n(pRe,"A",{href:!0});var Kvt=s(xX);hzo=r(Kvt,"YosoForMultipleChoice"),Kvt.forEach(t),pzo=r(pRe," (YOSO model)"),pRe.forEach(t),ee.forEach(t),_zo=i(ca),ov=n(ca,"P",{});var _Re=s(ov);uzo=r(_Re,"The model is set in evaluation mode by default using "),m_e=n(_Re,"CODE",{});var Zvt=s(m_e);bzo=r(Zvt,"model.eval()"),Zvt.forEach(t),vzo=r(_Re,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=n(_Re,"CODE",{});var e0t=s(g_e);Fzo=r(e0t,"model.train()"),e0t.forEach(t),_Re.forEach(t),Tzo=i(ca),T(rv.$$.fragment,ca),ca.forEach(t),al.forEach(t),xOe=i(f),td=n(f,"H2",{class:!0});var BXe=s(td);tv=n(BXe,"A",{id:!0,class:!0,href:!0});var o0t=s(tv);h_e=n(o0t,"SPAN",{});var r0t=s(h_e);T(Dy.$$.fragment,r0t),r0t.forEach(t),o0t.forEach(t),Mzo=i(BXe),p_e=n(BXe,"SPAN",{});var t0t=s(p_e);Ezo=r(t0t,"AutoModelForNextSentencePrediction"),t0t.forEach(t),BXe.forEach(t),$Oe=i(f),Io=n(f,"DIV",{class:!0});var nl=s(Io);T(Gy.$$.fragment,nl),Czo=i(nl),ad=n(nl,"P",{});var Voe=s(ad);wzo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$X=n(Voe,"A",{href:!0});var a0t=s($X);Azo=r(a0t,"from_pretrained()"),a0t.forEach(t),Lzo=r(Voe," class method or the "),kX=n(Voe,"A",{href:!0});var n0t=s(kX);yzo=r(n0t,"from_config()"),n0t.forEach(t),xzo=r(Voe,` class
method.`),Voe.forEach(t),$zo=i(nl),Oy=n(nl,"P",{});var IXe=s(Oy);kzo=r(IXe,"This class cannot be instantiated directly using "),__e=n(IXe,"CODE",{});var s0t=s(__e);Szo=r(s0t,"__init__()"),s0t.forEach(t),Rzo=r(IXe," (throws an error)."),IXe.forEach(t),Pzo=i(nl),mt=n(nl,"DIV",{class:!0});var UA=s(mt);T(Vy.$$.fragment,UA),Bzo=i(UA),u_e=n(UA,"P",{});var l0t=s(u_e);Izo=r(l0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),l0t.forEach(t),Nzo=i(UA),nd=n(UA,"P",{});var Xoe=s(nd);qzo=r(Xoe,`Note:
Loading a model from its configuration file does `),b_e=n(Xoe,"STRONG",{});var i0t=s(b_e);jzo=r(i0t,"not"),i0t.forEach(t),Dzo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(Xoe,"A",{href:!0});var d0t=s(SX);Gzo=r(d0t,"from_pretrained()"),d0t.forEach(t),Ozo=r(Xoe," to load the model weights."),Xoe.forEach(t),Vzo=i(UA),T(av.$$.fragment,UA),UA.forEach(t),Xzo=i(nl),to=n(nl,"DIV",{class:!0});var fa=s(to);T(Xy.$$.fragment,fa),zzo=i(fa),v_e=n(fa,"P",{});var c0t=s(v_e);Qzo=r(c0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),c0t.forEach(t),Wzo=i(fa),Da=n(fa,"P",{});var JA=s(Da);Hzo=r(JA,"The model class to instantiate is selected based on the "),F_e=n(JA,"CODE",{});var f0t=s(F_e);Uzo=r(f0t,"model_type"),f0t.forEach(t),Jzo=r(JA,` property of the config object (either
passed as an argument or loaded from `),T_e=n(JA,"CODE",{});var m0t=s(T_e);Yzo=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),Kzo=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=n(JA,"CODE",{});var g0t=s(M_e);Zzo=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),eQo=r(JA,":"),JA.forEach(t),oQo=i(fa),No=n(fa,"UL",{});var ma=s(No);nv=n(ma,"LI",{});var uRe=s(nv);E_e=n(uRe,"STRONG",{});var h0t=s(E_e);rQo=r(h0t,"bert"),h0t.forEach(t),tQo=r(uRe," \u2014 "),RX=n(uRe,"A",{href:!0});var p0t=s(RX);aQo=r(p0t,"BertForNextSentencePrediction"),p0t.forEach(t),nQo=r(uRe," (BERT model)"),uRe.forEach(t),sQo=i(ma),sv=n(ma,"LI",{});var bRe=s(sv);C_e=n(bRe,"STRONG",{});var _0t=s(C_e);lQo=r(_0t,"fnet"),_0t.forEach(t),iQo=r(bRe," \u2014 "),PX=n(bRe,"A",{href:!0});var u0t=s(PX);dQo=r(u0t,"FNetForNextSentencePrediction"),u0t.forEach(t),cQo=r(bRe," (FNet model)"),bRe.forEach(t),fQo=i(ma),lv=n(ma,"LI",{});var vRe=s(lv);w_e=n(vRe,"STRONG",{});var b0t=s(w_e);mQo=r(b0t,"megatron-bert"),b0t.forEach(t),gQo=r(vRe," \u2014 "),BX=n(vRe,"A",{href:!0});var v0t=s(BX);hQo=r(v0t,"MegatronBertForNextSentencePrediction"),v0t.forEach(t),pQo=r(vRe," (Megatron-BERT model)"),vRe.forEach(t),_Qo=i(ma),iv=n(ma,"LI",{});var FRe=s(iv);A_e=n(FRe,"STRONG",{});var F0t=s(A_e);uQo=r(F0t,"mobilebert"),F0t.forEach(t),bQo=r(FRe," \u2014 "),IX=n(FRe,"A",{href:!0});var T0t=s(IX);vQo=r(T0t,"MobileBertForNextSentencePrediction"),T0t.forEach(t),FQo=r(FRe," (MobileBERT model)"),FRe.forEach(t),TQo=i(ma),dv=n(ma,"LI",{});var TRe=s(dv);L_e=n(TRe,"STRONG",{});var M0t=s(L_e);MQo=r(M0t,"nezha"),M0t.forEach(t),EQo=r(TRe," \u2014 "),NX=n(TRe,"A",{href:!0});var E0t=s(NX);CQo=r(E0t,"NezhaForNextSentencePrediction"),E0t.forEach(t),wQo=r(TRe," (Nezha model)"),TRe.forEach(t),AQo=i(ma),cv=n(ma,"LI",{});var MRe=s(cv);y_e=n(MRe,"STRONG",{});var C0t=s(y_e);LQo=r(C0t,"qdqbert"),C0t.forEach(t),yQo=r(MRe," \u2014 "),qX=n(MRe,"A",{href:!0});var w0t=s(qX);xQo=r(w0t,"QDQBertForNextSentencePrediction"),w0t.forEach(t),$Qo=r(MRe," (QDQBert model)"),MRe.forEach(t),ma.forEach(t),kQo=i(fa),fv=n(fa,"P",{});var ERe=s(fv);SQo=r(ERe,"The model is set in evaluation mode by default using "),x_e=n(ERe,"CODE",{});var A0t=s(x_e);RQo=r(A0t,"model.eval()"),A0t.forEach(t),PQo=r(ERe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$_e=n(ERe,"CODE",{});var L0t=s($_e);BQo=r(L0t,"model.train()"),L0t.forEach(t),ERe.forEach(t),IQo=i(fa),T(mv.$$.fragment,fa),fa.forEach(t),nl.forEach(t),kOe=i(f),sd=n(f,"H2",{class:!0});var NXe=s(sd);gv=n(NXe,"A",{id:!0,class:!0,href:!0});var y0t=s(gv);k_e=n(y0t,"SPAN",{});var x0t=s(k_e);T(zy.$$.fragment,x0t),x0t.forEach(t),y0t.forEach(t),NQo=i(NXe),S_e=n(NXe,"SPAN",{});var $0t=s(S_e);qQo=r($0t,"AutoModelForTokenClassification"),$0t.forEach(t),NXe.forEach(t),SOe=i(f),qo=n(f,"DIV",{class:!0});var sl=s(qo);T(Qy.$$.fragment,sl),jQo=i(sl),ld=n(sl,"P",{});var zoe=s(ld);DQo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jX=n(zoe,"A",{href:!0});var k0t=s(jX);GQo=r(k0t,"from_pretrained()"),k0t.forEach(t),OQo=r(zoe," class method or the "),DX=n(zoe,"A",{href:!0});var S0t=s(DX);VQo=r(S0t,"from_config()"),S0t.forEach(t),XQo=r(zoe,` class
method.`),zoe.forEach(t),zQo=i(sl),Wy=n(sl,"P",{});var qXe=s(Wy);QQo=r(qXe,"This class cannot be instantiated directly using "),R_e=n(qXe,"CODE",{});var R0t=s(R_e);WQo=r(R0t,"__init__()"),R0t.forEach(t),HQo=r(qXe," (throws an error)."),qXe.forEach(t),UQo=i(sl),gt=n(sl,"DIV",{class:!0});var YA=s(gt);T(Hy.$$.fragment,YA),JQo=i(YA),P_e=n(YA,"P",{});var P0t=s(P_e);YQo=r(P0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),P0t.forEach(t),KQo=i(YA),id=n(YA,"P",{});var Qoe=s(id);ZQo=r(Qoe,`Note:
Loading a model from its configuration file does `),B_e=n(Qoe,"STRONG",{});var B0t=s(B_e);eWo=r(B0t,"not"),B0t.forEach(t),oWo=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(Qoe,"A",{href:!0});var I0t=s(GX);rWo=r(I0t,"from_pretrained()"),I0t.forEach(t),tWo=r(Qoe," to load the model weights."),Qoe.forEach(t),aWo=i(YA),T(hv.$$.fragment,YA),YA.forEach(t),nWo=i(sl),ao=n(sl,"DIV",{class:!0});var ga=s(ao);T(Uy.$$.fragment,ga),sWo=i(ga),I_e=n(ga,"P",{});var N0t=s(I_e);lWo=r(N0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N0t.forEach(t),iWo=i(ga),Ga=n(ga,"P",{});var KA=s(Ga);dWo=r(KA,"The model class to instantiate is selected based on the "),N_e=n(KA,"CODE",{});var q0t=s(N_e);cWo=r(q0t,"model_type"),q0t.forEach(t),fWo=r(KA,` property of the config object (either
passed as an argument or loaded from `),q_e=n(KA,"CODE",{});var j0t=s(q_e);mWo=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),gWo=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j_e=n(KA,"CODE",{});var D0t=s(j_e);hWo=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),pWo=r(KA,":"),KA.forEach(t),_Wo=i(ga),H=n(ga,"UL",{});var J=s(H);pv=n(J,"LI",{});var CRe=s(pv);D_e=n(CRe,"STRONG",{});var G0t=s(D_e);uWo=r(G0t,"albert"),G0t.forEach(t),bWo=r(CRe," \u2014 "),OX=n(CRe,"A",{href:!0});var O0t=s(OX);vWo=r(O0t,"AlbertForTokenClassification"),O0t.forEach(t),FWo=r(CRe," (ALBERT model)"),CRe.forEach(t),TWo=i(J),_v=n(J,"LI",{});var wRe=s(_v);G_e=n(wRe,"STRONG",{});var V0t=s(G_e);MWo=r(V0t,"bert"),V0t.forEach(t),EWo=r(wRe," \u2014 "),VX=n(wRe,"A",{href:!0});var X0t=s(VX);CWo=r(X0t,"BertForTokenClassification"),X0t.forEach(t),wWo=r(wRe," (BERT model)"),wRe.forEach(t),AWo=i(J),uv=n(J,"LI",{});var ARe=s(uv);O_e=n(ARe,"STRONG",{});var z0t=s(O_e);LWo=r(z0t,"big_bird"),z0t.forEach(t),yWo=r(ARe," \u2014 "),XX=n(ARe,"A",{href:!0});var Q0t=s(XX);xWo=r(Q0t,"BigBirdForTokenClassification"),Q0t.forEach(t),$Wo=r(ARe," (BigBird model)"),ARe.forEach(t),kWo=i(J),bv=n(J,"LI",{});var LRe=s(bv);V_e=n(LRe,"STRONG",{});var W0t=s(V_e);SWo=r(W0t,"bloom"),W0t.forEach(t),RWo=r(LRe," \u2014 "),zX=n(LRe,"A",{href:!0});var H0t=s(zX);PWo=r(H0t,"BloomForTokenClassification"),H0t.forEach(t),BWo=r(LRe," (BLOOM model)"),LRe.forEach(t),IWo=i(J),vv=n(J,"LI",{});var yRe=s(vv);X_e=n(yRe,"STRONG",{});var U0t=s(X_e);NWo=r(U0t,"camembert"),U0t.forEach(t),qWo=r(yRe," \u2014 "),QX=n(yRe,"A",{href:!0});var J0t=s(QX);jWo=r(J0t,"CamembertForTokenClassification"),J0t.forEach(t),DWo=r(yRe," (CamemBERT model)"),yRe.forEach(t),GWo=i(J),Fv=n(J,"LI",{});var xRe=s(Fv);z_e=n(xRe,"STRONG",{});var Y0t=s(z_e);OWo=r(Y0t,"canine"),Y0t.forEach(t),VWo=r(xRe," \u2014 "),WX=n(xRe,"A",{href:!0});var K0t=s(WX);XWo=r(K0t,"CanineForTokenClassification"),K0t.forEach(t),zWo=r(xRe," (CANINE model)"),xRe.forEach(t),QWo=i(J),Tv=n(J,"LI",{});var $Re=s(Tv);Q_e=n($Re,"STRONG",{});var Z0t=s(Q_e);WWo=r(Z0t,"convbert"),Z0t.forEach(t),HWo=r($Re," \u2014 "),HX=n($Re,"A",{href:!0});var eFt=s(HX);UWo=r(eFt,"ConvBertForTokenClassification"),eFt.forEach(t),JWo=r($Re," (ConvBERT model)"),$Re.forEach(t),YWo=i(J),Mv=n(J,"LI",{});var kRe=s(Mv);W_e=n(kRe,"STRONG",{});var oFt=s(W_e);KWo=r(oFt,"data2vec-text"),oFt.forEach(t),ZWo=r(kRe," \u2014 "),UX=n(kRe,"A",{href:!0});var rFt=s(UX);eHo=r(rFt,"Data2VecTextForTokenClassification"),rFt.forEach(t),oHo=r(kRe," (Data2VecText model)"),kRe.forEach(t),rHo=i(J),Ev=n(J,"LI",{});var SRe=s(Ev);H_e=n(SRe,"STRONG",{});var tFt=s(H_e);tHo=r(tFt,"deberta"),tFt.forEach(t),aHo=r(SRe," \u2014 "),JX=n(SRe,"A",{href:!0});var aFt=s(JX);nHo=r(aFt,"DebertaForTokenClassification"),aFt.forEach(t),sHo=r(SRe," (DeBERTa model)"),SRe.forEach(t),lHo=i(J),Cv=n(J,"LI",{});var RRe=s(Cv);U_e=n(RRe,"STRONG",{});var nFt=s(U_e);iHo=r(nFt,"deberta-v2"),nFt.forEach(t),dHo=r(RRe," \u2014 "),YX=n(RRe,"A",{href:!0});var sFt=s(YX);cHo=r(sFt,"DebertaV2ForTokenClassification"),sFt.forEach(t),fHo=r(RRe," (DeBERTa-v2 model)"),RRe.forEach(t),mHo=i(J),wv=n(J,"LI",{});var PRe=s(wv);J_e=n(PRe,"STRONG",{});var lFt=s(J_e);gHo=r(lFt,"distilbert"),lFt.forEach(t),hHo=r(PRe," \u2014 "),KX=n(PRe,"A",{href:!0});var iFt=s(KX);pHo=r(iFt,"DistilBertForTokenClassification"),iFt.forEach(t),_Ho=r(PRe," (DistilBERT model)"),PRe.forEach(t),uHo=i(J),Av=n(J,"LI",{});var BRe=s(Av);Y_e=n(BRe,"STRONG",{});var dFt=s(Y_e);bHo=r(dFt,"electra"),dFt.forEach(t),vHo=r(BRe," \u2014 "),ZX=n(BRe,"A",{href:!0});var cFt=s(ZX);FHo=r(cFt,"ElectraForTokenClassification"),cFt.forEach(t),THo=r(BRe," (ELECTRA model)"),BRe.forEach(t),MHo=i(J),Lv=n(J,"LI",{});var IRe=s(Lv);K_e=n(IRe,"STRONG",{});var fFt=s(K_e);EHo=r(fFt,"flaubert"),fFt.forEach(t),CHo=r(IRe," \u2014 "),ez=n(IRe,"A",{href:!0});var mFt=s(ez);wHo=r(mFt,"FlaubertForTokenClassification"),mFt.forEach(t),AHo=r(IRe," (FlauBERT model)"),IRe.forEach(t),LHo=i(J),yv=n(J,"LI",{});var NRe=s(yv);Z_e=n(NRe,"STRONG",{});var gFt=s(Z_e);yHo=r(gFt,"fnet"),gFt.forEach(t),xHo=r(NRe," \u2014 "),oz=n(NRe,"A",{href:!0});var hFt=s(oz);$Ho=r(hFt,"FNetForTokenClassification"),hFt.forEach(t),kHo=r(NRe," (FNet model)"),NRe.forEach(t),SHo=i(J),xv=n(J,"LI",{});var qRe=s(xv);eue=n(qRe,"STRONG",{});var pFt=s(eue);RHo=r(pFt,"funnel"),pFt.forEach(t),PHo=r(qRe," \u2014 "),rz=n(qRe,"A",{href:!0});var _Ft=s(rz);BHo=r(_Ft,"FunnelForTokenClassification"),_Ft.forEach(t),IHo=r(qRe," (Funnel Transformer model)"),qRe.forEach(t),NHo=i(J),$v=n(J,"LI",{});var jRe=s($v);oue=n(jRe,"STRONG",{});var uFt=s(oue);qHo=r(uFt,"gpt2"),uFt.forEach(t),jHo=r(jRe," \u2014 "),tz=n(jRe,"A",{href:!0});var bFt=s(tz);DHo=r(bFt,"GPT2ForTokenClassification"),bFt.forEach(t),GHo=r(jRe," (OpenAI GPT-2 model)"),jRe.forEach(t),OHo=i(J),kv=n(J,"LI",{});var DRe=s(kv);rue=n(DRe,"STRONG",{});var vFt=s(rue);VHo=r(vFt,"ibert"),vFt.forEach(t),XHo=r(DRe," \u2014 "),az=n(DRe,"A",{href:!0});var FFt=s(az);zHo=r(FFt,"IBertForTokenClassification"),FFt.forEach(t),QHo=r(DRe," (I-BERT model)"),DRe.forEach(t),WHo=i(J),Sv=n(J,"LI",{});var GRe=s(Sv);tue=n(GRe,"STRONG",{});var TFt=s(tue);HHo=r(TFt,"layoutlm"),TFt.forEach(t),UHo=r(GRe," \u2014 "),nz=n(GRe,"A",{href:!0});var MFt=s(nz);JHo=r(MFt,"LayoutLMForTokenClassification"),MFt.forEach(t),YHo=r(GRe," (LayoutLM model)"),GRe.forEach(t),KHo=i(J),Rv=n(J,"LI",{});var ORe=s(Rv);aue=n(ORe,"STRONG",{});var EFt=s(aue);ZHo=r(EFt,"layoutlmv2"),EFt.forEach(t),eUo=r(ORe," \u2014 "),sz=n(ORe,"A",{href:!0});var CFt=s(sz);oUo=r(CFt,"LayoutLMv2ForTokenClassification"),CFt.forEach(t),rUo=r(ORe," (LayoutLMv2 model)"),ORe.forEach(t),tUo=i(J),Pv=n(J,"LI",{});var VRe=s(Pv);nue=n(VRe,"STRONG",{});var wFt=s(nue);aUo=r(wFt,"layoutlmv3"),wFt.forEach(t),nUo=r(VRe," \u2014 "),lz=n(VRe,"A",{href:!0});var AFt=s(lz);sUo=r(AFt,"LayoutLMv3ForTokenClassification"),AFt.forEach(t),lUo=r(VRe," (LayoutLMv3 model)"),VRe.forEach(t),iUo=i(J),Bv=n(J,"LI",{});var XRe=s(Bv);sue=n(XRe,"STRONG",{});var LFt=s(sue);dUo=r(LFt,"longformer"),LFt.forEach(t),cUo=r(XRe," \u2014 "),iz=n(XRe,"A",{href:!0});var yFt=s(iz);fUo=r(yFt,"LongformerForTokenClassification"),yFt.forEach(t),mUo=r(XRe," (Longformer model)"),XRe.forEach(t),gUo=i(J),Iv=n(J,"LI",{});var zRe=s(Iv);lue=n(zRe,"STRONG",{});var xFt=s(lue);hUo=r(xFt,"megatron-bert"),xFt.forEach(t),pUo=r(zRe," \u2014 "),dz=n(zRe,"A",{href:!0});var $Ft=s(dz);_Uo=r($Ft,"MegatronBertForTokenClassification"),$Ft.forEach(t),uUo=r(zRe," (Megatron-BERT model)"),zRe.forEach(t),bUo=i(J),Nv=n(J,"LI",{});var QRe=s(Nv);iue=n(QRe,"STRONG",{});var kFt=s(iue);vUo=r(kFt,"mobilebert"),kFt.forEach(t),FUo=r(QRe," \u2014 "),cz=n(QRe,"A",{href:!0});var SFt=s(cz);TUo=r(SFt,"MobileBertForTokenClassification"),SFt.forEach(t),MUo=r(QRe," (MobileBERT model)"),QRe.forEach(t),EUo=i(J),qv=n(J,"LI",{});var WRe=s(qv);due=n(WRe,"STRONG",{});var RFt=s(due);CUo=r(RFt,"mpnet"),RFt.forEach(t),wUo=r(WRe," \u2014 "),fz=n(WRe,"A",{href:!0});var PFt=s(fz);AUo=r(PFt,"MPNetForTokenClassification"),PFt.forEach(t),LUo=r(WRe," (MPNet model)"),WRe.forEach(t),yUo=i(J),jv=n(J,"LI",{});var HRe=s(jv);cue=n(HRe,"STRONG",{});var BFt=s(cue);xUo=r(BFt,"nezha"),BFt.forEach(t),$Uo=r(HRe," \u2014 "),mz=n(HRe,"A",{href:!0});var IFt=s(mz);kUo=r(IFt,"NezhaForTokenClassification"),IFt.forEach(t),SUo=r(HRe," (Nezha model)"),HRe.forEach(t),RUo=i(J),Dv=n(J,"LI",{});var URe=s(Dv);fue=n(URe,"STRONG",{});var NFt=s(fue);PUo=r(NFt,"nystromformer"),NFt.forEach(t),BUo=r(URe," \u2014 "),gz=n(URe,"A",{href:!0});var qFt=s(gz);IUo=r(qFt,"NystromformerForTokenClassification"),qFt.forEach(t),NUo=r(URe," (Nystr\xF6mformer model)"),URe.forEach(t),qUo=i(J),Gv=n(J,"LI",{});var JRe=s(Gv);mue=n(JRe,"STRONG",{});var jFt=s(mue);jUo=r(jFt,"qdqbert"),jFt.forEach(t),DUo=r(JRe," \u2014 "),hz=n(JRe,"A",{href:!0});var DFt=s(hz);GUo=r(DFt,"QDQBertForTokenClassification"),DFt.forEach(t),OUo=r(JRe," (QDQBert model)"),JRe.forEach(t),VUo=i(J),Ov=n(J,"LI",{});var YRe=s(Ov);gue=n(YRe,"STRONG",{});var GFt=s(gue);XUo=r(GFt,"rembert"),GFt.forEach(t),zUo=r(YRe," \u2014 "),pz=n(YRe,"A",{href:!0});var OFt=s(pz);QUo=r(OFt,"RemBertForTokenClassification"),OFt.forEach(t),WUo=r(YRe," (RemBERT model)"),YRe.forEach(t),HUo=i(J),Vv=n(J,"LI",{});var KRe=s(Vv);hue=n(KRe,"STRONG",{});var VFt=s(hue);UUo=r(VFt,"roberta"),VFt.forEach(t),JUo=r(KRe," \u2014 "),_z=n(KRe,"A",{href:!0});var XFt=s(_z);YUo=r(XFt,"RobertaForTokenClassification"),XFt.forEach(t),KUo=r(KRe," (RoBERTa model)"),KRe.forEach(t),ZUo=i(J),Xv=n(J,"LI",{});var ZRe=s(Xv);pue=n(ZRe,"STRONG",{});var zFt=s(pue);eJo=r(zFt,"roformer"),zFt.forEach(t),oJo=r(ZRe," \u2014 "),uz=n(ZRe,"A",{href:!0});var QFt=s(uz);rJo=r(QFt,"RoFormerForTokenClassification"),QFt.forEach(t),tJo=r(ZRe," (RoFormer model)"),ZRe.forEach(t),aJo=i(J),zv=n(J,"LI",{});var ePe=s(zv);_ue=n(ePe,"STRONG",{});var WFt=s(_ue);nJo=r(WFt,"squeezebert"),WFt.forEach(t),sJo=r(ePe," \u2014 "),bz=n(ePe,"A",{href:!0});var HFt=s(bz);lJo=r(HFt,"SqueezeBertForTokenClassification"),HFt.forEach(t),iJo=r(ePe," (SqueezeBERT model)"),ePe.forEach(t),dJo=i(J),Qv=n(J,"LI",{});var oPe=s(Qv);uue=n(oPe,"STRONG",{});var UFt=s(uue);cJo=r(UFt,"xlm"),UFt.forEach(t),fJo=r(oPe," \u2014 "),vz=n(oPe,"A",{href:!0});var JFt=s(vz);mJo=r(JFt,"XLMForTokenClassification"),JFt.forEach(t),gJo=r(oPe," (XLM model)"),oPe.forEach(t),hJo=i(J),Wv=n(J,"LI",{});var rPe=s(Wv);bue=n(rPe,"STRONG",{});var YFt=s(bue);pJo=r(YFt,"xlm-roberta"),YFt.forEach(t),_Jo=r(rPe," \u2014 "),Fz=n(rPe,"A",{href:!0});var KFt=s(Fz);uJo=r(KFt,"XLMRobertaForTokenClassification"),KFt.forEach(t),bJo=r(rPe," (XLM-RoBERTa model)"),rPe.forEach(t),vJo=i(J),Hv=n(J,"LI",{});var tPe=s(Hv);vue=n(tPe,"STRONG",{});var ZFt=s(vue);FJo=r(ZFt,"xlm-roberta-xl"),ZFt.forEach(t),TJo=r(tPe," \u2014 "),Tz=n(tPe,"A",{href:!0});var eTt=s(Tz);MJo=r(eTt,"XLMRobertaXLForTokenClassification"),eTt.forEach(t),EJo=r(tPe," (XLM-RoBERTa-XL model)"),tPe.forEach(t),CJo=i(J),Uv=n(J,"LI",{});var aPe=s(Uv);Fue=n(aPe,"STRONG",{});var oTt=s(Fue);wJo=r(oTt,"xlnet"),oTt.forEach(t),AJo=r(aPe," \u2014 "),Mz=n(aPe,"A",{href:!0});var rTt=s(Mz);LJo=r(rTt,"XLNetForTokenClassification"),rTt.forEach(t),yJo=r(aPe," (XLNet model)"),aPe.forEach(t),xJo=i(J),Jv=n(J,"LI",{});var nPe=s(Jv);Tue=n(nPe,"STRONG",{});var tTt=s(Tue);$Jo=r(tTt,"yoso"),tTt.forEach(t),kJo=r(nPe," \u2014 "),Ez=n(nPe,"A",{href:!0});var aTt=s(Ez);SJo=r(aTt,"YosoForTokenClassification"),aTt.forEach(t),RJo=r(nPe," (YOSO model)"),nPe.forEach(t),J.forEach(t),PJo=i(ga),Yv=n(ga,"P",{});var sPe=s(Yv);BJo=r(sPe,"The model is set in evaluation mode by default using "),Mue=n(sPe,"CODE",{});var nTt=s(Mue);IJo=r(nTt,"model.eval()"),nTt.forEach(t),NJo=r(sPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=n(sPe,"CODE",{});var sTt=s(Eue);qJo=r(sTt,"model.train()"),sTt.forEach(t),sPe.forEach(t),jJo=i(ga),T(Kv.$$.fragment,ga),ga.forEach(t),sl.forEach(t),ROe=i(f),dd=n(f,"H2",{class:!0});var jXe=s(dd);Zv=n(jXe,"A",{id:!0,class:!0,href:!0});var lTt=s(Zv);Cue=n(lTt,"SPAN",{});var iTt=s(Cue);T(Jy.$$.fragment,iTt),iTt.forEach(t),lTt.forEach(t),DJo=i(jXe),wue=n(jXe,"SPAN",{});var dTt=s(wue);GJo=r(dTt,"AutoModelForQuestionAnswering"),dTt.forEach(t),jXe.forEach(t),POe=i(f),jo=n(f,"DIV",{class:!0});var ll=s(jo);T(Yy.$$.fragment,ll),OJo=i(ll),cd=n(ll,"P",{});var Woe=s(cd);VJo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cz=n(Woe,"A",{href:!0});var cTt=s(Cz);XJo=r(cTt,"from_pretrained()"),cTt.forEach(t),zJo=r(Woe," class method or the "),wz=n(Woe,"A",{href:!0});var fTt=s(wz);QJo=r(fTt,"from_config()"),fTt.forEach(t),WJo=r(Woe,` class
method.`),Woe.forEach(t),HJo=i(ll),Ky=n(ll,"P",{});var DXe=s(Ky);UJo=r(DXe,"This class cannot be instantiated directly using "),Aue=n(DXe,"CODE",{});var mTt=s(Aue);JJo=r(mTt,"__init__()"),mTt.forEach(t),YJo=r(DXe," (throws an error)."),DXe.forEach(t),KJo=i(ll),ht=n(ll,"DIV",{class:!0});var ZA=s(ht);T(Zy.$$.fragment,ZA),ZJo=i(ZA),Lue=n(ZA,"P",{});var gTt=s(Lue);eYo=r(gTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gTt.forEach(t),oYo=i(ZA),fd=n(ZA,"P",{});var Hoe=s(fd);rYo=r(Hoe,`Note:
Loading a model from its configuration file does `),yue=n(Hoe,"STRONG",{});var hTt=s(yue);tYo=r(hTt,"not"),hTt.forEach(t),aYo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(Hoe,"A",{href:!0});var pTt=s(Az);nYo=r(pTt,"from_pretrained()"),pTt.forEach(t),sYo=r(Hoe," to load the model weights."),Hoe.forEach(t),lYo=i(ZA),T(e0.$$.fragment,ZA),ZA.forEach(t),iYo=i(ll),no=n(ll,"DIV",{class:!0});var ha=s(no);T(e8.$$.fragment,ha),dYo=i(ha),xue=n(ha,"P",{});var _Tt=s(xue);cYo=r(_Tt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Tt.forEach(t),fYo=i(ha),Oa=n(ha,"P",{});var e6=s(Oa);mYo=r(e6,"The model class to instantiate is selected based on the "),$ue=n(e6,"CODE",{});var uTt=s($ue);gYo=r(uTt,"model_type"),uTt.forEach(t),hYo=r(e6,` property of the config object (either
passed as an argument or loaded from `),kue=n(e6,"CODE",{});var bTt=s(kue);pYo=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),_Yo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(e6,"CODE",{});var vTt=s(Sue);uYo=r(vTt,"pretrained_model_name_or_path"),vTt.forEach(t),bYo=r(e6,":"),e6.forEach(t),vYo=i(ha),V=n(ha,"UL",{});var X=s(V);o0=n(X,"LI",{});var lPe=s(o0);Rue=n(lPe,"STRONG",{});var FTt=s(Rue);FYo=r(FTt,"albert"),FTt.forEach(t),TYo=r(lPe," \u2014 "),Lz=n(lPe,"A",{href:!0});var TTt=s(Lz);MYo=r(TTt,"AlbertForQuestionAnswering"),TTt.forEach(t),EYo=r(lPe," (ALBERT model)"),lPe.forEach(t),CYo=i(X),r0=n(X,"LI",{});var iPe=s(r0);Pue=n(iPe,"STRONG",{});var MTt=s(Pue);wYo=r(MTt,"bart"),MTt.forEach(t),AYo=r(iPe," \u2014 "),yz=n(iPe,"A",{href:!0});var ETt=s(yz);LYo=r(ETt,"BartForQuestionAnswering"),ETt.forEach(t),yYo=r(iPe," (BART model)"),iPe.forEach(t),xYo=i(X),t0=n(X,"LI",{});var dPe=s(t0);Bue=n(dPe,"STRONG",{});var CTt=s(Bue);$Yo=r(CTt,"bert"),CTt.forEach(t),kYo=r(dPe," \u2014 "),xz=n(dPe,"A",{href:!0});var wTt=s(xz);SYo=r(wTt,"BertForQuestionAnswering"),wTt.forEach(t),RYo=r(dPe," (BERT model)"),dPe.forEach(t),PYo=i(X),a0=n(X,"LI",{});var cPe=s(a0);Iue=n(cPe,"STRONG",{});var ATt=s(Iue);BYo=r(ATt,"big_bird"),ATt.forEach(t),IYo=r(cPe," \u2014 "),$z=n(cPe,"A",{href:!0});var LTt=s($z);NYo=r(LTt,"BigBirdForQuestionAnswering"),LTt.forEach(t),qYo=r(cPe," (BigBird model)"),cPe.forEach(t),jYo=i(X),n0=n(X,"LI",{});var fPe=s(n0);Nue=n(fPe,"STRONG",{});var yTt=s(Nue);DYo=r(yTt,"bigbird_pegasus"),yTt.forEach(t),GYo=r(fPe," \u2014 "),kz=n(fPe,"A",{href:!0});var xTt=s(kz);OYo=r(xTt,"BigBirdPegasusForQuestionAnswering"),xTt.forEach(t),VYo=r(fPe," (BigBird-Pegasus model)"),fPe.forEach(t),XYo=i(X),s0=n(X,"LI",{});var mPe=s(s0);que=n(mPe,"STRONG",{});var $Tt=s(que);zYo=r($Tt,"camembert"),$Tt.forEach(t),QYo=r(mPe," \u2014 "),Sz=n(mPe,"A",{href:!0});var kTt=s(Sz);WYo=r(kTt,"CamembertForQuestionAnswering"),kTt.forEach(t),HYo=r(mPe," (CamemBERT model)"),mPe.forEach(t),UYo=i(X),l0=n(X,"LI",{});var gPe=s(l0);jue=n(gPe,"STRONG",{});var STt=s(jue);JYo=r(STt,"canine"),STt.forEach(t),YYo=r(gPe," \u2014 "),Rz=n(gPe,"A",{href:!0});var RTt=s(Rz);KYo=r(RTt,"CanineForQuestionAnswering"),RTt.forEach(t),ZYo=r(gPe," (CANINE model)"),gPe.forEach(t),eKo=i(X),i0=n(X,"LI",{});var hPe=s(i0);Due=n(hPe,"STRONG",{});var PTt=s(Due);oKo=r(PTt,"convbert"),PTt.forEach(t),rKo=r(hPe," \u2014 "),Pz=n(hPe,"A",{href:!0});var BTt=s(Pz);tKo=r(BTt,"ConvBertForQuestionAnswering"),BTt.forEach(t),aKo=r(hPe," (ConvBERT model)"),hPe.forEach(t),nKo=i(X),d0=n(X,"LI",{});var pPe=s(d0);Gue=n(pPe,"STRONG",{});var ITt=s(Gue);sKo=r(ITt,"data2vec-text"),ITt.forEach(t),lKo=r(pPe," \u2014 "),Bz=n(pPe,"A",{href:!0});var NTt=s(Bz);iKo=r(NTt,"Data2VecTextForQuestionAnswering"),NTt.forEach(t),dKo=r(pPe," (Data2VecText model)"),pPe.forEach(t),cKo=i(X),c0=n(X,"LI",{});var _Pe=s(c0);Oue=n(_Pe,"STRONG",{});var qTt=s(Oue);fKo=r(qTt,"deberta"),qTt.forEach(t),mKo=r(_Pe," \u2014 "),Iz=n(_Pe,"A",{href:!0});var jTt=s(Iz);gKo=r(jTt,"DebertaForQuestionAnswering"),jTt.forEach(t),hKo=r(_Pe," (DeBERTa model)"),_Pe.forEach(t),pKo=i(X),f0=n(X,"LI",{});var uPe=s(f0);Vue=n(uPe,"STRONG",{});var DTt=s(Vue);_Ko=r(DTt,"deberta-v2"),DTt.forEach(t),uKo=r(uPe," \u2014 "),Nz=n(uPe,"A",{href:!0});var GTt=s(Nz);bKo=r(GTt,"DebertaV2ForQuestionAnswering"),GTt.forEach(t),vKo=r(uPe," (DeBERTa-v2 model)"),uPe.forEach(t),FKo=i(X),m0=n(X,"LI",{});var bPe=s(m0);Xue=n(bPe,"STRONG",{});var OTt=s(Xue);TKo=r(OTt,"distilbert"),OTt.forEach(t),MKo=r(bPe," \u2014 "),qz=n(bPe,"A",{href:!0});var VTt=s(qz);EKo=r(VTt,"DistilBertForQuestionAnswering"),VTt.forEach(t),CKo=r(bPe," (DistilBERT model)"),bPe.forEach(t),wKo=i(X),g0=n(X,"LI",{});var vPe=s(g0);zue=n(vPe,"STRONG",{});var XTt=s(zue);AKo=r(XTt,"electra"),XTt.forEach(t),LKo=r(vPe," \u2014 "),jz=n(vPe,"A",{href:!0});var zTt=s(jz);yKo=r(zTt,"ElectraForQuestionAnswering"),zTt.forEach(t),xKo=r(vPe," (ELECTRA model)"),vPe.forEach(t),$Ko=i(X),h0=n(X,"LI",{});var FPe=s(h0);Que=n(FPe,"STRONG",{});var QTt=s(Que);kKo=r(QTt,"flaubert"),QTt.forEach(t),SKo=r(FPe," \u2014 "),Dz=n(FPe,"A",{href:!0});var WTt=s(Dz);RKo=r(WTt,"FlaubertForQuestionAnsweringSimple"),WTt.forEach(t),PKo=r(FPe," (FlauBERT model)"),FPe.forEach(t),BKo=i(X),p0=n(X,"LI",{});var TPe=s(p0);Wue=n(TPe,"STRONG",{});var HTt=s(Wue);IKo=r(HTt,"fnet"),HTt.forEach(t),NKo=r(TPe," \u2014 "),Gz=n(TPe,"A",{href:!0});var UTt=s(Gz);qKo=r(UTt,"FNetForQuestionAnswering"),UTt.forEach(t),jKo=r(TPe," (FNet model)"),TPe.forEach(t),DKo=i(X),_0=n(X,"LI",{});var MPe=s(_0);Hue=n(MPe,"STRONG",{});var JTt=s(Hue);GKo=r(JTt,"funnel"),JTt.forEach(t),OKo=r(MPe," \u2014 "),Oz=n(MPe,"A",{href:!0});var YTt=s(Oz);VKo=r(YTt,"FunnelForQuestionAnswering"),YTt.forEach(t),XKo=r(MPe," (Funnel Transformer model)"),MPe.forEach(t),zKo=i(X),u0=n(X,"LI",{});var EPe=s(u0);Uue=n(EPe,"STRONG",{});var KTt=s(Uue);QKo=r(KTt,"gptj"),KTt.forEach(t),WKo=r(EPe," \u2014 "),Vz=n(EPe,"A",{href:!0});var ZTt=s(Vz);HKo=r(ZTt,"GPTJForQuestionAnswering"),ZTt.forEach(t),UKo=r(EPe," (GPT-J model)"),EPe.forEach(t),JKo=i(X),b0=n(X,"LI",{});var CPe=s(b0);Jue=n(CPe,"STRONG",{});var eMt=s(Jue);YKo=r(eMt,"ibert"),eMt.forEach(t),KKo=r(CPe," \u2014 "),Xz=n(CPe,"A",{href:!0});var oMt=s(Xz);ZKo=r(oMt,"IBertForQuestionAnswering"),oMt.forEach(t),eZo=r(CPe," (I-BERT model)"),CPe.forEach(t),oZo=i(X),v0=n(X,"LI",{});var wPe=s(v0);Yue=n(wPe,"STRONG",{});var rMt=s(Yue);rZo=r(rMt,"layoutlmv2"),rMt.forEach(t),tZo=r(wPe," \u2014 "),zz=n(wPe,"A",{href:!0});var tMt=s(zz);aZo=r(tMt,"LayoutLMv2ForQuestionAnswering"),tMt.forEach(t),nZo=r(wPe," (LayoutLMv2 model)"),wPe.forEach(t),sZo=i(X),F0=n(X,"LI",{});var APe=s(F0);Kue=n(APe,"STRONG",{});var aMt=s(Kue);lZo=r(aMt,"layoutlmv3"),aMt.forEach(t),iZo=r(APe," \u2014 "),Qz=n(APe,"A",{href:!0});var nMt=s(Qz);dZo=r(nMt,"LayoutLMv3ForQuestionAnswering"),nMt.forEach(t),cZo=r(APe," (LayoutLMv3 model)"),APe.forEach(t),fZo=i(X),T0=n(X,"LI",{});var LPe=s(T0);Zue=n(LPe,"STRONG",{});var sMt=s(Zue);mZo=r(sMt,"led"),sMt.forEach(t),gZo=r(LPe," \u2014 "),Wz=n(LPe,"A",{href:!0});var lMt=s(Wz);hZo=r(lMt,"LEDForQuestionAnswering"),lMt.forEach(t),pZo=r(LPe," (LED model)"),LPe.forEach(t),_Zo=i(X),M0=n(X,"LI",{});var yPe=s(M0);e1e=n(yPe,"STRONG",{});var iMt=s(e1e);uZo=r(iMt,"longformer"),iMt.forEach(t),bZo=r(yPe," \u2014 "),Hz=n(yPe,"A",{href:!0});var dMt=s(Hz);vZo=r(dMt,"LongformerForQuestionAnswering"),dMt.forEach(t),FZo=r(yPe," (Longformer model)"),yPe.forEach(t),TZo=i(X),E0=n(X,"LI",{});var xPe=s(E0);o1e=n(xPe,"STRONG",{});var cMt=s(o1e);MZo=r(cMt,"lxmert"),cMt.forEach(t),EZo=r(xPe," \u2014 "),Uz=n(xPe,"A",{href:!0});var fMt=s(Uz);CZo=r(fMt,"LxmertForQuestionAnswering"),fMt.forEach(t),wZo=r(xPe," (LXMERT model)"),xPe.forEach(t),AZo=i(X),C0=n(X,"LI",{});var $Pe=s(C0);r1e=n($Pe,"STRONG",{});var mMt=s(r1e);LZo=r(mMt,"mbart"),mMt.forEach(t),yZo=r($Pe," \u2014 "),Jz=n($Pe,"A",{href:!0});var gMt=s(Jz);xZo=r(gMt,"MBartForQuestionAnswering"),gMt.forEach(t),$Zo=r($Pe," (mBART model)"),$Pe.forEach(t),kZo=i(X),w0=n(X,"LI",{});var kPe=s(w0);t1e=n(kPe,"STRONG",{});var hMt=s(t1e);SZo=r(hMt,"megatron-bert"),hMt.forEach(t),RZo=r(kPe," \u2014 "),Yz=n(kPe,"A",{href:!0});var pMt=s(Yz);PZo=r(pMt,"MegatronBertForQuestionAnswering"),pMt.forEach(t),BZo=r(kPe," (Megatron-BERT model)"),kPe.forEach(t),IZo=i(X),A0=n(X,"LI",{});var SPe=s(A0);a1e=n(SPe,"STRONG",{});var _Mt=s(a1e);NZo=r(_Mt,"mobilebert"),_Mt.forEach(t),qZo=r(SPe," \u2014 "),Kz=n(SPe,"A",{href:!0});var uMt=s(Kz);jZo=r(uMt,"MobileBertForQuestionAnswering"),uMt.forEach(t),DZo=r(SPe," (MobileBERT model)"),SPe.forEach(t),GZo=i(X),L0=n(X,"LI",{});var RPe=s(L0);n1e=n(RPe,"STRONG",{});var bMt=s(n1e);OZo=r(bMt,"mpnet"),bMt.forEach(t),VZo=r(RPe," \u2014 "),Zz=n(RPe,"A",{href:!0});var vMt=s(Zz);XZo=r(vMt,"MPNetForQuestionAnswering"),vMt.forEach(t),zZo=r(RPe," (MPNet model)"),RPe.forEach(t),QZo=i(X),y0=n(X,"LI",{});var PPe=s(y0);s1e=n(PPe,"STRONG",{});var FMt=s(s1e);WZo=r(FMt,"nezha"),FMt.forEach(t),HZo=r(PPe," \u2014 "),eQ=n(PPe,"A",{href:!0});var TMt=s(eQ);UZo=r(TMt,"NezhaForQuestionAnswering"),TMt.forEach(t),JZo=r(PPe," (Nezha model)"),PPe.forEach(t),YZo=i(X),x0=n(X,"LI",{});var BPe=s(x0);l1e=n(BPe,"STRONG",{});var MMt=s(l1e);KZo=r(MMt,"nystromformer"),MMt.forEach(t),ZZo=r(BPe," \u2014 "),oQ=n(BPe,"A",{href:!0});var EMt=s(oQ);eer=r(EMt,"NystromformerForQuestionAnswering"),EMt.forEach(t),oer=r(BPe," (Nystr\xF6mformer model)"),BPe.forEach(t),rer=i(X),$0=n(X,"LI",{});var IPe=s($0);i1e=n(IPe,"STRONG",{});var CMt=s(i1e);ter=r(CMt,"qdqbert"),CMt.forEach(t),aer=r(IPe," \u2014 "),rQ=n(IPe,"A",{href:!0});var wMt=s(rQ);ner=r(wMt,"QDQBertForQuestionAnswering"),wMt.forEach(t),ser=r(IPe," (QDQBert model)"),IPe.forEach(t),ler=i(X),k0=n(X,"LI",{});var NPe=s(k0);d1e=n(NPe,"STRONG",{});var AMt=s(d1e);ier=r(AMt,"reformer"),AMt.forEach(t),der=r(NPe," \u2014 "),tQ=n(NPe,"A",{href:!0});var LMt=s(tQ);cer=r(LMt,"ReformerForQuestionAnswering"),LMt.forEach(t),fer=r(NPe," (Reformer model)"),NPe.forEach(t),mer=i(X),S0=n(X,"LI",{});var qPe=s(S0);c1e=n(qPe,"STRONG",{});var yMt=s(c1e);ger=r(yMt,"rembert"),yMt.forEach(t),her=r(qPe," \u2014 "),aQ=n(qPe,"A",{href:!0});var xMt=s(aQ);per=r(xMt,"RemBertForQuestionAnswering"),xMt.forEach(t),_er=r(qPe," (RemBERT model)"),qPe.forEach(t),uer=i(X),R0=n(X,"LI",{});var jPe=s(R0);f1e=n(jPe,"STRONG",{});var $Mt=s(f1e);ber=r($Mt,"roberta"),$Mt.forEach(t),ver=r(jPe," \u2014 "),nQ=n(jPe,"A",{href:!0});var kMt=s(nQ);Fer=r(kMt,"RobertaForQuestionAnswering"),kMt.forEach(t),Ter=r(jPe," (RoBERTa model)"),jPe.forEach(t),Mer=i(X),P0=n(X,"LI",{});var DPe=s(P0);m1e=n(DPe,"STRONG",{});var SMt=s(m1e);Eer=r(SMt,"roformer"),SMt.forEach(t),Cer=r(DPe," \u2014 "),sQ=n(DPe,"A",{href:!0});var RMt=s(sQ);wer=r(RMt,"RoFormerForQuestionAnswering"),RMt.forEach(t),Aer=r(DPe," (RoFormer model)"),DPe.forEach(t),Ler=i(X),B0=n(X,"LI",{});var GPe=s(B0);g1e=n(GPe,"STRONG",{});var PMt=s(g1e);yer=r(PMt,"splinter"),PMt.forEach(t),xer=r(GPe," \u2014 "),lQ=n(GPe,"A",{href:!0});var BMt=s(lQ);$er=r(BMt,"SplinterForQuestionAnswering"),BMt.forEach(t),ker=r(GPe," (Splinter model)"),GPe.forEach(t),Ser=i(X),I0=n(X,"LI",{});var OPe=s(I0);h1e=n(OPe,"STRONG",{});var IMt=s(h1e);Rer=r(IMt,"squeezebert"),IMt.forEach(t),Per=r(OPe," \u2014 "),iQ=n(OPe,"A",{href:!0});var NMt=s(iQ);Ber=r(NMt,"SqueezeBertForQuestionAnswering"),NMt.forEach(t),Ier=r(OPe," (SqueezeBERT model)"),OPe.forEach(t),Ner=i(X),N0=n(X,"LI",{});var VPe=s(N0);p1e=n(VPe,"STRONG",{});var qMt=s(p1e);qer=r(qMt,"xlm"),qMt.forEach(t),jer=r(VPe," \u2014 "),dQ=n(VPe,"A",{href:!0});var jMt=s(dQ);Der=r(jMt,"XLMForQuestionAnsweringSimple"),jMt.forEach(t),Ger=r(VPe," (XLM model)"),VPe.forEach(t),Oer=i(X),q0=n(X,"LI",{});var XPe=s(q0);_1e=n(XPe,"STRONG",{});var DMt=s(_1e);Ver=r(DMt,"xlm-roberta"),DMt.forEach(t),Xer=r(XPe," \u2014 "),cQ=n(XPe,"A",{href:!0});var GMt=s(cQ);zer=r(GMt,"XLMRobertaForQuestionAnswering"),GMt.forEach(t),Qer=r(XPe," (XLM-RoBERTa model)"),XPe.forEach(t),Wer=i(X),j0=n(X,"LI",{});var zPe=s(j0);u1e=n(zPe,"STRONG",{});var OMt=s(u1e);Her=r(OMt,"xlm-roberta-xl"),OMt.forEach(t),Uer=r(zPe," \u2014 "),fQ=n(zPe,"A",{href:!0});var VMt=s(fQ);Jer=r(VMt,"XLMRobertaXLForQuestionAnswering"),VMt.forEach(t),Yer=r(zPe," (XLM-RoBERTa-XL model)"),zPe.forEach(t),Ker=i(X),D0=n(X,"LI",{});var QPe=s(D0);b1e=n(QPe,"STRONG",{});var XMt=s(b1e);Zer=r(XMt,"xlnet"),XMt.forEach(t),eor=r(QPe," \u2014 "),mQ=n(QPe,"A",{href:!0});var zMt=s(mQ);oor=r(zMt,"XLNetForQuestionAnsweringSimple"),zMt.forEach(t),ror=r(QPe," (XLNet model)"),QPe.forEach(t),tor=i(X),G0=n(X,"LI",{});var WPe=s(G0);v1e=n(WPe,"STRONG",{});var QMt=s(v1e);aor=r(QMt,"yoso"),QMt.forEach(t),nor=r(WPe," \u2014 "),gQ=n(WPe,"A",{href:!0});var WMt=s(gQ);sor=r(WMt,"YosoForQuestionAnswering"),WMt.forEach(t),lor=r(WPe," (YOSO model)"),WPe.forEach(t),X.forEach(t),ior=i(ha),O0=n(ha,"P",{});var HPe=s(O0);dor=r(HPe,"The model is set in evaluation mode by default using "),F1e=n(HPe,"CODE",{});var HMt=s(F1e);cor=r(HMt,"model.eval()"),HMt.forEach(t),mor=r(HPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=n(HPe,"CODE",{});var UMt=s(T1e);gor=r(UMt,"model.train()"),UMt.forEach(t),HPe.forEach(t),hor=i(ha),T(V0.$$.fragment,ha),ha.forEach(t),ll.forEach(t),BOe=i(f),md=n(f,"H2",{class:!0});var GXe=s(md);X0=n(GXe,"A",{id:!0,class:!0,href:!0});var JMt=s(X0);M1e=n(JMt,"SPAN",{});var YMt=s(M1e);T(o8.$$.fragment,YMt),YMt.forEach(t),JMt.forEach(t),por=i(GXe),E1e=n(GXe,"SPAN",{});var KMt=s(E1e);_or=r(KMt,"AutoModelForTableQuestionAnswering"),KMt.forEach(t),GXe.forEach(t),IOe=i(f),Do=n(f,"DIV",{class:!0});var il=s(Do);T(r8.$$.fragment,il),uor=i(il),gd=n(il,"P",{});var Uoe=s(gd);bor=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hQ=n(Uoe,"A",{href:!0});var ZMt=s(hQ);vor=r(ZMt,"from_pretrained()"),ZMt.forEach(t),For=r(Uoe," class method or the "),pQ=n(Uoe,"A",{href:!0});var eEt=s(pQ);Tor=r(eEt,"from_config()"),eEt.forEach(t),Mor=r(Uoe,` class
method.`),Uoe.forEach(t),Eor=i(il),t8=n(il,"P",{});var OXe=s(t8);Cor=r(OXe,"This class cannot be instantiated directly using "),C1e=n(OXe,"CODE",{});var oEt=s(C1e);wor=r(oEt,"__init__()"),oEt.forEach(t),Aor=r(OXe," (throws an error)."),OXe.forEach(t),Lor=i(il),pt=n(il,"DIV",{class:!0});var o6=s(pt);T(a8.$$.fragment,o6),yor=i(o6),w1e=n(o6,"P",{});var rEt=s(w1e);xor=r(rEt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rEt.forEach(t),$or=i(o6),hd=n(o6,"P",{});var Joe=s(hd);kor=r(Joe,`Note:
Loading a model from its configuration file does `),A1e=n(Joe,"STRONG",{});var tEt=s(A1e);Sor=r(tEt,"not"),tEt.forEach(t),Ror=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(Joe,"A",{href:!0});var aEt=s(_Q);Por=r(aEt,"from_pretrained()"),aEt.forEach(t),Bor=r(Joe," to load the model weights."),Joe.forEach(t),Ior=i(o6),T(z0.$$.fragment,o6),o6.forEach(t),Nor=i(il),so=n(il,"DIV",{class:!0});var pa=s(so);T(n8.$$.fragment,pa),qor=i(pa),L1e=n(pa,"P",{});var nEt=s(L1e);jor=r(nEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nEt.forEach(t),Dor=i(pa),Va=n(pa,"P",{});var r6=s(Va);Gor=r(r6,"The model class to instantiate is selected based on the "),y1e=n(r6,"CODE",{});var sEt=s(y1e);Oor=r(sEt,"model_type"),sEt.forEach(t),Vor=r(r6,` property of the config object (either
passed as an argument or loaded from `),x1e=n(r6,"CODE",{});var lEt=s(x1e);Xor=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),zor=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(r6,"CODE",{});var iEt=s($1e);Qor=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),Wor=r(r6,":"),r6.forEach(t),Hor=i(pa),k1e=n(pa,"UL",{});var dEt=s(k1e);Q0=n(dEt,"LI",{});var UPe=s(Q0);S1e=n(UPe,"STRONG",{});var cEt=s(S1e);Uor=r(cEt,"tapas"),cEt.forEach(t),Jor=r(UPe," \u2014 "),uQ=n(UPe,"A",{href:!0});var fEt=s(uQ);Yor=r(fEt,"TapasForQuestionAnswering"),fEt.forEach(t),Kor=r(UPe," (TAPAS model)"),UPe.forEach(t),dEt.forEach(t),Zor=i(pa),W0=n(pa,"P",{});var JPe=s(W0);err=r(JPe,"The model is set in evaluation mode by default using "),R1e=n(JPe,"CODE",{});var mEt=s(R1e);orr=r(mEt,"model.eval()"),mEt.forEach(t),rrr=r(JPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(JPe,"CODE",{});var gEt=s(P1e);trr=r(gEt,"model.train()"),gEt.forEach(t),JPe.forEach(t),arr=i(pa),T(H0.$$.fragment,pa),pa.forEach(t),il.forEach(t),NOe=i(f),pd=n(f,"H2",{class:!0});var VXe=s(pd);U0=n(VXe,"A",{id:!0,class:!0,href:!0});var hEt=s(U0);B1e=n(hEt,"SPAN",{});var pEt=s(B1e);T(s8.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),nrr=i(VXe),I1e=n(VXe,"SPAN",{});var _Et=s(I1e);srr=r(_Et,"AutoModelForImageClassification"),_Et.forEach(t),VXe.forEach(t),qOe=i(f),Go=n(f,"DIV",{class:!0});var dl=s(Go);T(l8.$$.fragment,dl),lrr=i(dl),_d=n(dl,"P",{});var Yoe=s(_d);irr=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bQ=n(Yoe,"A",{href:!0});var uEt=s(bQ);drr=r(uEt,"from_pretrained()"),uEt.forEach(t),crr=r(Yoe," class method or the "),vQ=n(Yoe,"A",{href:!0});var bEt=s(vQ);frr=r(bEt,"from_config()"),bEt.forEach(t),mrr=r(Yoe,` class
method.`),Yoe.forEach(t),grr=i(dl),i8=n(dl,"P",{});var XXe=s(i8);hrr=r(XXe,"This class cannot be instantiated directly using "),N1e=n(XXe,"CODE",{});var vEt=s(N1e);prr=r(vEt,"__init__()"),vEt.forEach(t),_rr=r(XXe," (throws an error)."),XXe.forEach(t),urr=i(dl),_t=n(dl,"DIV",{class:!0});var t6=s(_t);T(d8.$$.fragment,t6),brr=i(t6),q1e=n(t6,"P",{});var FEt=s(q1e);vrr=r(FEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FEt.forEach(t),Frr=i(t6),ud=n(t6,"P",{});var Koe=s(ud);Trr=r(Koe,`Note:
Loading a model from its configuration file does `),j1e=n(Koe,"STRONG",{});var TEt=s(j1e);Mrr=r(TEt,"not"),TEt.forEach(t),Err=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(Koe,"A",{href:!0});var MEt=s(FQ);Crr=r(MEt,"from_pretrained()"),MEt.forEach(t),wrr=r(Koe," to load the model weights."),Koe.forEach(t),Arr=i(t6),T(J0.$$.fragment,t6),t6.forEach(t),Lrr=i(dl),lo=n(dl,"DIV",{class:!0});var _a=s(lo);T(c8.$$.fragment,_a),yrr=i(_a),D1e=n(_a,"P",{});var EEt=s(D1e);xrr=r(EEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EEt.forEach(t),$rr=i(_a),Xa=n(_a,"P",{});var a6=s(Xa);krr=r(a6,"The model class to instantiate is selected based on the "),G1e=n(a6,"CODE",{});var CEt=s(G1e);Srr=r(CEt,"model_type"),CEt.forEach(t),Rrr=r(a6,` property of the config object (either
passed as an argument or loaded from `),O1e=n(a6,"CODE",{});var wEt=s(O1e);Prr=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),Brr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(a6,"CODE",{});var AEt=s(V1e);Irr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),Nrr=r(a6,":"),a6.forEach(t),qrr=i(_a),Fe=n(_a,"UL",{});var Te=s(Fe);Y0=n(Te,"LI",{});var YPe=s(Y0);X1e=n(YPe,"STRONG",{});var LEt=s(X1e);jrr=r(LEt,"beit"),LEt.forEach(t),Drr=r(YPe," \u2014 "),TQ=n(YPe,"A",{href:!0});var yEt=s(TQ);Grr=r(yEt,"BeitForImageClassification"),yEt.forEach(t),Orr=r(YPe," (BEiT model)"),YPe.forEach(t),Vrr=i(Te),K0=n(Te,"LI",{});var KPe=s(K0);z1e=n(KPe,"STRONG",{});var xEt=s(z1e);Xrr=r(xEt,"convnext"),xEt.forEach(t),zrr=r(KPe," \u2014 "),MQ=n(KPe,"A",{href:!0});var $Et=s(MQ);Qrr=r($Et,"ConvNextForImageClassification"),$Et.forEach(t),Wrr=r(KPe," (ConvNeXT model)"),KPe.forEach(t),Hrr=i(Te),Z0=n(Te,"LI",{});var ZPe=s(Z0);Q1e=n(ZPe,"STRONG",{});var kEt=s(Q1e);Urr=r(kEt,"cvt"),kEt.forEach(t),Jrr=r(ZPe," \u2014 "),EQ=n(ZPe,"A",{href:!0});var SEt=s(EQ);Yrr=r(SEt,"CvtForImageClassification"),SEt.forEach(t),Krr=r(ZPe," (CvT model)"),ZPe.forEach(t),Zrr=i(Te),eF=n(Te,"LI",{});var eBe=s(eF);W1e=n(eBe,"STRONG",{});var REt=s(W1e);etr=r(REt,"data2vec-vision"),REt.forEach(t),otr=r(eBe," \u2014 "),CQ=n(eBe,"A",{href:!0});var PEt=s(CQ);rtr=r(PEt,"Data2VecVisionForImageClassification"),PEt.forEach(t),ttr=r(eBe," (Data2VecVision model)"),eBe.forEach(t),atr=i(Te),zs=n(Te,"LI",{});var aS=s(zs);H1e=n(aS,"STRONG",{});var BEt=s(H1e);ntr=r(BEt,"deit"),BEt.forEach(t),str=r(aS," \u2014 "),wQ=n(aS,"A",{href:!0});var IEt=s(wQ);ltr=r(IEt,"DeiTForImageClassification"),IEt.forEach(t),itr=r(aS," or "),AQ=n(aS,"A",{href:!0});var NEt=s(AQ);dtr=r(NEt,"DeiTForImageClassificationWithTeacher"),NEt.forEach(t),ctr=r(aS," (DeiT model)"),aS.forEach(t),ftr=i(Te),oF=n(Te,"LI",{});var oBe=s(oF);U1e=n(oBe,"STRONG",{});var qEt=s(U1e);mtr=r(qEt,"imagegpt"),qEt.forEach(t),gtr=r(oBe," \u2014 "),LQ=n(oBe,"A",{href:!0});var jEt=s(LQ);htr=r(jEt,"ImageGPTForImageClassification"),jEt.forEach(t),ptr=r(oBe," (ImageGPT model)"),oBe.forEach(t),_tr=i(Te),Qs=n(Te,"LI",{});var nS=s(Qs);J1e=n(nS,"STRONG",{});var DEt=s(J1e);utr=r(DEt,"levit"),DEt.forEach(t),btr=r(nS," \u2014 "),yQ=n(nS,"A",{href:!0});var GEt=s(yQ);vtr=r(GEt,"LevitForImageClassification"),GEt.forEach(t),Ftr=r(nS," or "),xQ=n(nS,"A",{href:!0});var OEt=s(xQ);Ttr=r(OEt,"LevitForImageClassificationWithTeacher"),OEt.forEach(t),Mtr=r(nS," (LeViT model)"),nS.forEach(t),Etr=i(Te),ut=n(Te,"LI",{});var yf=s(ut);Y1e=n(yf,"STRONG",{});var VEt=s(Y1e);Ctr=r(VEt,"perceiver"),VEt.forEach(t),wtr=r(yf," \u2014 "),$Q=n(yf,"A",{href:!0});var XEt=s($Q);Atr=r(XEt,"PerceiverForImageClassificationLearned"),XEt.forEach(t),Ltr=r(yf," or "),kQ=n(yf,"A",{href:!0});var zEt=s(kQ);ytr=r(zEt,"PerceiverForImageClassificationFourier"),zEt.forEach(t),xtr=r(yf," or "),SQ=n(yf,"A",{href:!0});var QEt=s(SQ);$tr=r(QEt,"PerceiverForImageClassificationConvProcessing"),QEt.forEach(t),ktr=r(yf," (Perceiver model)"),yf.forEach(t),Str=i(Te),rF=n(Te,"LI",{});var rBe=s(rF);K1e=n(rBe,"STRONG",{});var WEt=s(K1e);Rtr=r(WEt,"poolformer"),WEt.forEach(t),Ptr=r(rBe," \u2014 "),RQ=n(rBe,"A",{href:!0});var HEt=s(RQ);Btr=r(HEt,"PoolFormerForImageClassification"),HEt.forEach(t),Itr=r(rBe," (PoolFormer model)"),rBe.forEach(t),Ntr=i(Te),tF=n(Te,"LI",{});var tBe=s(tF);Z1e=n(tBe,"STRONG",{});var UEt=s(Z1e);qtr=r(UEt,"regnet"),UEt.forEach(t),jtr=r(tBe," \u2014 "),PQ=n(tBe,"A",{href:!0});var JEt=s(PQ);Dtr=r(JEt,"RegNetForImageClassification"),JEt.forEach(t),Gtr=r(tBe," (RegNet model)"),tBe.forEach(t),Otr=i(Te),aF=n(Te,"LI",{});var aBe=s(aF);e7e=n(aBe,"STRONG",{});var YEt=s(e7e);Vtr=r(YEt,"resnet"),YEt.forEach(t),Xtr=r(aBe," \u2014 "),BQ=n(aBe,"A",{href:!0});var KEt=s(BQ);ztr=r(KEt,"ResNetForImageClassification"),KEt.forEach(t),Qtr=r(aBe," (ResNet model)"),aBe.forEach(t),Wtr=i(Te),nF=n(Te,"LI",{});var nBe=s(nF);o7e=n(nBe,"STRONG",{});var ZEt=s(o7e);Htr=r(ZEt,"segformer"),ZEt.forEach(t),Utr=r(nBe," \u2014 "),IQ=n(nBe,"A",{href:!0});var e4t=s(IQ);Jtr=r(e4t,"SegformerForImageClassification"),e4t.forEach(t),Ytr=r(nBe," (SegFormer model)"),nBe.forEach(t),Ktr=i(Te),sF=n(Te,"LI",{});var sBe=s(sF);r7e=n(sBe,"STRONG",{});var o4t=s(r7e);Ztr=r(o4t,"swin"),o4t.forEach(t),ear=r(sBe," \u2014 "),NQ=n(sBe,"A",{href:!0});var r4t=s(NQ);oar=r(r4t,"SwinForImageClassification"),r4t.forEach(t),rar=r(sBe," (Swin Transformer model)"),sBe.forEach(t),tar=i(Te),lF=n(Te,"LI",{});var lBe=s(lF);t7e=n(lBe,"STRONG",{});var t4t=s(t7e);aar=r(t4t,"van"),t4t.forEach(t),nar=r(lBe," \u2014 "),qQ=n(lBe,"A",{href:!0});var a4t=s(qQ);sar=r(a4t,"VanForImageClassification"),a4t.forEach(t),lar=r(lBe," (VAN model)"),lBe.forEach(t),iar=i(Te),iF=n(Te,"LI",{});var iBe=s(iF);a7e=n(iBe,"STRONG",{});var n4t=s(a7e);dar=r(n4t,"vit"),n4t.forEach(t),car=r(iBe," \u2014 "),jQ=n(iBe,"A",{href:!0});var s4t=s(jQ);far=r(s4t,"ViTForImageClassification"),s4t.forEach(t),mar=r(iBe," (ViT model)"),iBe.forEach(t),Te.forEach(t),gar=i(_a),dF=n(_a,"P",{});var dBe=s(dF);har=r(dBe,"The model is set in evaluation mode by default using "),n7e=n(dBe,"CODE",{});var l4t=s(n7e);par=r(l4t,"model.eval()"),l4t.forEach(t),_ar=r(dBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s7e=n(dBe,"CODE",{});var i4t=s(s7e);uar=r(i4t,"model.train()"),i4t.forEach(t),dBe.forEach(t),bar=i(_a),T(cF.$$.fragment,_a),_a.forEach(t),dl.forEach(t),jOe=i(f),bd=n(f,"H2",{class:!0});var zXe=s(bd);fF=n(zXe,"A",{id:!0,class:!0,href:!0});var d4t=s(fF);l7e=n(d4t,"SPAN",{});var c4t=s(l7e);T(f8.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),Far=i(zXe),i7e=n(zXe,"SPAN",{});var f4t=s(i7e);Tar=r(f4t,"AutoModelForVision2Seq"),f4t.forEach(t),zXe.forEach(t),DOe=i(f),Oo=n(f,"DIV",{class:!0});var cl=s(Oo);T(m8.$$.fragment,cl),Mar=i(cl),vd=n(cl,"P",{});var Zoe=s(vd);Ear=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=n(Zoe,"A",{href:!0});var m4t=s(DQ);Car=r(m4t,"from_pretrained()"),m4t.forEach(t),war=r(Zoe," class method or the "),GQ=n(Zoe,"A",{href:!0});var g4t=s(GQ);Aar=r(g4t,"from_config()"),g4t.forEach(t),Lar=r(Zoe,` class
method.`),Zoe.forEach(t),yar=i(cl),g8=n(cl,"P",{});var QXe=s(g8);xar=r(QXe,"This class cannot be instantiated directly using "),d7e=n(QXe,"CODE",{});var h4t=s(d7e);$ar=r(h4t,"__init__()"),h4t.forEach(t),kar=r(QXe," (throws an error)."),QXe.forEach(t),Sar=i(cl),bt=n(cl,"DIV",{class:!0});var n6=s(bt);T(h8.$$.fragment,n6),Rar=i(n6),c7e=n(n6,"P",{});var p4t=s(c7e);Par=r(p4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),p4t.forEach(t),Bar=i(n6),Fd=n(n6,"P",{});var ere=s(Fd);Iar=r(ere,`Note:
Loading a model from its configuration file does `),f7e=n(ere,"STRONG",{});var _4t=s(f7e);Nar=r(_4t,"not"),_4t.forEach(t),qar=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(ere,"A",{href:!0});var u4t=s(OQ);jar=r(u4t,"from_pretrained()"),u4t.forEach(t),Dar=r(ere," to load the model weights."),ere.forEach(t),Gar=i(n6),T(mF.$$.fragment,n6),n6.forEach(t),Oar=i(cl),io=n(cl,"DIV",{class:!0});var ua=s(io);T(p8.$$.fragment,ua),Var=i(ua),m7e=n(ua,"P",{});var b4t=s(m7e);Xar=r(b4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b4t.forEach(t),zar=i(ua),za=n(ua,"P",{});var s6=s(za);Qar=r(s6,"The model class to instantiate is selected based on the "),g7e=n(s6,"CODE",{});var v4t=s(g7e);War=r(v4t,"model_type"),v4t.forEach(t),Har=r(s6,` property of the config object (either
passed as an argument or loaded from `),h7e=n(s6,"CODE",{});var F4t=s(h7e);Uar=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),Jar=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p7e=n(s6,"CODE",{});var T4t=s(p7e);Yar=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),Kar=r(s6,":"),s6.forEach(t),Zar=i(ua),_7e=n(ua,"UL",{});var M4t=s(_7e);gF=n(M4t,"LI",{});var cBe=s(gF);u7e=n(cBe,"STRONG",{});var E4t=s(u7e);enr=r(E4t,"vision-encoder-decoder"),E4t.forEach(t),onr=r(cBe," \u2014 "),VQ=n(cBe,"A",{href:!0});var C4t=s(VQ);rnr=r(C4t,"VisionEncoderDecoderModel"),C4t.forEach(t),tnr=r(cBe," (Vision Encoder decoder model)"),cBe.forEach(t),M4t.forEach(t),anr=i(ua),hF=n(ua,"P",{});var fBe=s(hF);nnr=r(fBe,"The model is set in evaluation mode by default using "),b7e=n(fBe,"CODE",{});var w4t=s(b7e);snr=r(w4t,"model.eval()"),w4t.forEach(t),lnr=r(fBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v7e=n(fBe,"CODE",{});var A4t=s(v7e);inr=r(A4t,"model.train()"),A4t.forEach(t),fBe.forEach(t),dnr=i(ua),T(pF.$$.fragment,ua),ua.forEach(t),cl.forEach(t),GOe=i(f),Td=n(f,"H2",{class:!0});var WXe=s(Td);_F=n(WXe,"A",{id:!0,class:!0,href:!0});var L4t=s(_F);F7e=n(L4t,"SPAN",{});var y4t=s(F7e);T(_8.$$.fragment,y4t),y4t.forEach(t),L4t.forEach(t),cnr=i(WXe),T7e=n(WXe,"SPAN",{});var x4t=s(T7e);fnr=r(x4t,"AutoModelForVisualQuestionAnswering"),x4t.forEach(t),WXe.forEach(t),OOe=i(f),Vo=n(f,"DIV",{class:!0});var fl=s(Vo);T(u8.$$.fragment,fl),mnr=i(fl),Md=n(fl,"P",{});var ore=s(Md);gnr=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),XQ=n(ore,"A",{href:!0});var $4t=s(XQ);hnr=r($4t,"from_pretrained()"),$4t.forEach(t),pnr=r(ore," class method or the "),zQ=n(ore,"A",{href:!0});var k4t=s(zQ);_nr=r(k4t,"from_config()"),k4t.forEach(t),unr=r(ore,` class
method.`),ore.forEach(t),bnr=i(fl),b8=n(fl,"P",{});var HXe=s(b8);vnr=r(HXe,"This class cannot be instantiated directly using "),M7e=n(HXe,"CODE",{});var S4t=s(M7e);Fnr=r(S4t,"__init__()"),S4t.forEach(t),Tnr=r(HXe," (throws an error)."),HXe.forEach(t),Mnr=i(fl),vt=n(fl,"DIV",{class:!0});var l6=s(vt);T(v8.$$.fragment,l6),Enr=i(l6),E7e=n(l6,"P",{});var R4t=s(E7e);Cnr=r(R4t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),R4t.forEach(t),wnr=i(l6),Ed=n(l6,"P",{});var rre=s(Ed);Anr=r(rre,`Note:
Loading a model from its configuration file does `),C7e=n(rre,"STRONG",{});var P4t=s(C7e);Lnr=r(P4t,"not"),P4t.forEach(t),ynr=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(rre,"A",{href:!0});var B4t=s(QQ);xnr=r(B4t,"from_pretrained()"),B4t.forEach(t),$nr=r(rre," to load the model weights."),rre.forEach(t),knr=i(l6),T(uF.$$.fragment,l6),l6.forEach(t),Snr=i(fl),co=n(fl,"DIV",{class:!0});var ba=s(co);T(F8.$$.fragment,ba),Rnr=i(ba),w7e=n(ba,"P",{});var I4t=s(w7e);Pnr=r(I4t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),I4t.forEach(t),Bnr=i(ba),Qa=n(ba,"P",{});var i6=s(Qa);Inr=r(i6,"The model class to instantiate is selected based on the "),A7e=n(i6,"CODE",{});var N4t=s(A7e);Nnr=r(N4t,"model_type"),N4t.forEach(t),qnr=r(i6,` property of the config object (either
passed as an argument or loaded from `),L7e=n(i6,"CODE",{});var q4t=s(L7e);jnr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),Dnr=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(i6,"CODE",{});var j4t=s(y7e);Gnr=r(j4t,"pretrained_model_name_or_path"),j4t.forEach(t),Onr=r(i6,":"),i6.forEach(t),Vnr=i(ba),x7e=n(ba,"UL",{});var D4t=s(x7e);bF=n(D4t,"LI",{});var mBe=s(bF);$7e=n(mBe,"STRONG",{});var G4t=s($7e);Xnr=r(G4t,"vilt"),G4t.forEach(t),znr=r(mBe," \u2014 "),WQ=n(mBe,"A",{href:!0});var O4t=s(WQ);Qnr=r(O4t,"ViltForQuestionAnswering"),O4t.forEach(t),Wnr=r(mBe," (ViLT model)"),mBe.forEach(t),D4t.forEach(t),Hnr=i(ba),vF=n(ba,"P",{});var gBe=s(vF);Unr=r(gBe,"The model is set in evaluation mode by default using "),k7e=n(gBe,"CODE",{});var V4t=s(k7e);Jnr=r(V4t,"model.eval()"),V4t.forEach(t),Ynr=r(gBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S7e=n(gBe,"CODE",{});var X4t=s(S7e);Knr=r(X4t,"model.train()"),X4t.forEach(t),gBe.forEach(t),Znr=i(ba),T(FF.$$.fragment,ba),ba.forEach(t),fl.forEach(t),VOe=i(f),Cd=n(f,"H2",{class:!0});var UXe=s(Cd);TF=n(UXe,"A",{id:!0,class:!0,href:!0});var z4t=s(TF);R7e=n(z4t,"SPAN",{});var Q4t=s(R7e);T(T8.$$.fragment,Q4t),Q4t.forEach(t),z4t.forEach(t),esr=i(UXe),P7e=n(UXe,"SPAN",{});var W4t=s(P7e);osr=r(W4t,"AutoModelForAudioClassification"),W4t.forEach(t),UXe.forEach(t),XOe=i(f),Xo=n(f,"DIV",{class:!0});var ml=s(Xo);T(M8.$$.fragment,ml),rsr=i(ml),wd=n(ml,"P",{});var tre=s(wd);tsr=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HQ=n(tre,"A",{href:!0});var H4t=s(HQ);asr=r(H4t,"from_pretrained()"),H4t.forEach(t),nsr=r(tre," class method or the "),UQ=n(tre,"A",{href:!0});var U4t=s(UQ);ssr=r(U4t,"from_config()"),U4t.forEach(t),lsr=r(tre,` class
method.`),tre.forEach(t),isr=i(ml),E8=n(ml,"P",{});var JXe=s(E8);dsr=r(JXe,"This class cannot be instantiated directly using "),B7e=n(JXe,"CODE",{});var J4t=s(B7e);csr=r(J4t,"__init__()"),J4t.forEach(t),fsr=r(JXe," (throws an error)."),JXe.forEach(t),msr=i(ml),Ft=n(ml,"DIV",{class:!0});var d6=s(Ft);T(C8.$$.fragment,d6),gsr=i(d6),I7e=n(d6,"P",{});var Y4t=s(I7e);hsr=r(Y4t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Y4t.forEach(t),psr=i(d6),Ad=n(d6,"P",{});var are=s(Ad);_sr=r(are,`Note:
Loading a model from its configuration file does `),N7e=n(are,"STRONG",{});var K4t=s(N7e);usr=r(K4t,"not"),K4t.forEach(t),bsr=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(are,"A",{href:!0});var Z4t=s(JQ);vsr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),Fsr=r(are," to load the model weights."),are.forEach(t),Tsr=i(d6),T(MF.$$.fragment,d6),d6.forEach(t),Msr=i(ml),fo=n(ml,"DIV",{class:!0});var va=s(fo);T(w8.$$.fragment,va),Esr=i(va),q7e=n(va,"P",{});var eCt=s(q7e);Csr=r(eCt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),eCt.forEach(t),wsr=i(va),Wa=n(va,"P",{});var c6=s(Wa);Asr=r(c6,"The model class to instantiate is selected based on the "),j7e=n(c6,"CODE",{});var oCt=s(j7e);Lsr=r(oCt,"model_type"),oCt.forEach(t),ysr=r(c6,` property of the config object (either
passed as an argument or loaded from `),D7e=n(c6,"CODE",{});var rCt=s(D7e);xsr=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),$sr=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G7e=n(c6,"CODE",{});var tCt=s(G7e);ksr=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),Ssr=r(c6,":"),c6.forEach(t),Rsr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);EF=n(ze,"LI",{});var hBe=s(EF);O7e=n(hBe,"STRONG",{});var aCt=s(O7e);Psr=r(aCt,"data2vec-audio"),aCt.forEach(t),Bsr=r(hBe," \u2014 "),YQ=n(hBe,"A",{href:!0});var nCt=s(YQ);Isr=r(nCt,"Data2VecAudioForSequenceClassification"),nCt.forEach(t),Nsr=r(hBe," (Data2VecAudio model)"),hBe.forEach(t),qsr=i(ze),CF=n(ze,"LI",{});var pBe=s(CF);V7e=n(pBe,"STRONG",{});var sCt=s(V7e);jsr=r(sCt,"hubert"),sCt.forEach(t),Dsr=r(pBe," \u2014 "),KQ=n(pBe,"A",{href:!0});var lCt=s(KQ);Gsr=r(lCt,"HubertForSequenceClassification"),lCt.forEach(t),Osr=r(pBe," (Hubert model)"),pBe.forEach(t),Vsr=i(ze),wF=n(ze,"LI",{});var _Be=s(wF);X7e=n(_Be,"STRONG",{});var iCt=s(X7e);Xsr=r(iCt,"sew"),iCt.forEach(t),zsr=r(_Be," \u2014 "),ZQ=n(_Be,"A",{href:!0});var dCt=s(ZQ);Qsr=r(dCt,"SEWForSequenceClassification"),dCt.forEach(t),Wsr=r(_Be," (SEW model)"),_Be.forEach(t),Hsr=i(ze),AF=n(ze,"LI",{});var uBe=s(AF);z7e=n(uBe,"STRONG",{});var cCt=s(z7e);Usr=r(cCt,"sew-d"),cCt.forEach(t),Jsr=r(uBe," \u2014 "),eW=n(uBe,"A",{href:!0});var fCt=s(eW);Ysr=r(fCt,"SEWDForSequenceClassification"),fCt.forEach(t),Ksr=r(uBe," (SEW-D model)"),uBe.forEach(t),Zsr=i(ze),LF=n(ze,"LI",{});var bBe=s(LF);Q7e=n(bBe,"STRONG",{});var mCt=s(Q7e);elr=r(mCt,"unispeech"),mCt.forEach(t),olr=r(bBe," \u2014 "),oW=n(bBe,"A",{href:!0});var gCt=s(oW);rlr=r(gCt,"UniSpeechForSequenceClassification"),gCt.forEach(t),tlr=r(bBe," (UniSpeech model)"),bBe.forEach(t),alr=i(ze),yF=n(ze,"LI",{});var vBe=s(yF);W7e=n(vBe,"STRONG",{});var hCt=s(W7e);nlr=r(hCt,"unispeech-sat"),hCt.forEach(t),slr=r(vBe," \u2014 "),rW=n(vBe,"A",{href:!0});var pCt=s(rW);llr=r(pCt,"UniSpeechSatForSequenceClassification"),pCt.forEach(t),ilr=r(vBe," (UniSpeechSat model)"),vBe.forEach(t),dlr=i(ze),xF=n(ze,"LI",{});var FBe=s(xF);H7e=n(FBe,"STRONG",{});var _Ct=s(H7e);clr=r(_Ct,"wav2vec2"),_Ct.forEach(t),flr=r(FBe," \u2014 "),tW=n(FBe,"A",{href:!0});var uCt=s(tW);mlr=r(uCt,"Wav2Vec2ForSequenceClassification"),uCt.forEach(t),glr=r(FBe," (Wav2Vec2 model)"),FBe.forEach(t),hlr=i(ze),$F=n(ze,"LI",{});var TBe=s($F);U7e=n(TBe,"STRONG",{});var bCt=s(U7e);plr=r(bCt,"wav2vec2-conformer"),bCt.forEach(t),_lr=r(TBe," \u2014 "),aW=n(TBe,"A",{href:!0});var vCt=s(aW);ulr=r(vCt,"Wav2Vec2ConformerForSequenceClassification"),vCt.forEach(t),blr=r(TBe," (Wav2Vec2-Conformer model)"),TBe.forEach(t),vlr=i(ze),kF=n(ze,"LI",{});var MBe=s(kF);J7e=n(MBe,"STRONG",{});var FCt=s(J7e);Flr=r(FCt,"wavlm"),FCt.forEach(t),Tlr=r(MBe," \u2014 "),nW=n(MBe,"A",{href:!0});var TCt=s(nW);Mlr=r(TCt,"WavLMForSequenceClassification"),TCt.forEach(t),Elr=r(MBe," (WavLM model)"),MBe.forEach(t),ze.forEach(t),Clr=i(va),SF=n(va,"P",{});var EBe=s(SF);wlr=r(EBe,"The model is set in evaluation mode by default using "),Y7e=n(EBe,"CODE",{});var MCt=s(Y7e);Alr=r(MCt,"model.eval()"),MCt.forEach(t),Llr=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K7e=n(EBe,"CODE",{});var ECt=s(K7e);ylr=r(ECt,"model.train()"),ECt.forEach(t),EBe.forEach(t),xlr=i(va),T(RF.$$.fragment,va),va.forEach(t),ml.forEach(t),zOe=i(f),Ld=n(f,"H2",{class:!0});var YXe=s(Ld);PF=n(YXe,"A",{id:!0,class:!0,href:!0});var CCt=s(PF);Z7e=n(CCt,"SPAN",{});var wCt=s(Z7e);T(A8.$$.fragment,wCt),wCt.forEach(t),CCt.forEach(t),$lr=i(YXe),e2e=n(YXe,"SPAN",{});var ACt=s(e2e);klr=r(ACt,"AutoModelForAudioFrameClassification"),ACt.forEach(t),YXe.forEach(t),QOe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(L8.$$.fragment,gl),Slr=i(gl),yd=n(gl,"P",{});var nre=s(yd);Rlr=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),sW=n(nre,"A",{href:!0});var LCt=s(sW);Plr=r(LCt,"from_pretrained()"),LCt.forEach(t),Blr=r(nre," class method or the "),lW=n(nre,"A",{href:!0});var yCt=s(lW);Ilr=r(yCt,"from_config()"),yCt.forEach(t),Nlr=r(nre,` class
method.`),nre.forEach(t),qlr=i(gl),y8=n(gl,"P",{});var KXe=s(y8);jlr=r(KXe,"This class cannot be instantiated directly using "),o2e=n(KXe,"CODE",{});var xCt=s(o2e);Dlr=r(xCt,"__init__()"),xCt.forEach(t),Glr=r(KXe," (throws an error)."),KXe.forEach(t),Olr=i(gl),Tt=n(gl,"DIV",{class:!0});var f6=s(Tt);T(x8.$$.fragment,f6),Vlr=i(f6),r2e=n(f6,"P",{});var $Ct=s(r2e);Xlr=r($Ct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Ct.forEach(t),zlr=i(f6),xd=n(f6,"P",{});var sre=s(xd);Qlr=r(sre,`Note:
Loading a model from its configuration file does `),t2e=n(sre,"STRONG",{});var kCt=s(t2e);Wlr=r(kCt,"not"),kCt.forEach(t),Hlr=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(sre,"A",{href:!0});var SCt=s(iW);Ulr=r(SCt,"from_pretrained()"),SCt.forEach(t),Jlr=r(sre," to load the model weights."),sre.forEach(t),Ylr=i(f6),T(BF.$$.fragment,f6),f6.forEach(t),Klr=i(gl),mo=n(gl,"DIV",{class:!0});var Fa=s(mo);T($8.$$.fragment,Fa),Zlr=i(Fa),a2e=n(Fa,"P",{});var RCt=s(a2e);eir=r(RCt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),RCt.forEach(t),oir=i(Fa),Ha=n(Fa,"P",{});var m6=s(Ha);rir=r(m6,"The model class to instantiate is selected based on the "),n2e=n(m6,"CODE",{});var PCt=s(n2e);tir=r(PCt,"model_type"),PCt.forEach(t),air=r(m6,` property of the config object (either
passed as an argument or loaded from `),s2e=n(m6,"CODE",{});var BCt=s(s2e);nir=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),sir=r(m6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(m6,"CODE",{});var ICt=s(l2e);lir=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),iir=r(m6,":"),m6.forEach(t),dir=i(Fa),et=n(Fa,"UL",{});var hl=s(et);IF=n(hl,"LI",{});var CBe=s(IF);i2e=n(CBe,"STRONG",{});var NCt=s(i2e);cir=r(NCt,"data2vec-audio"),NCt.forEach(t),fir=r(CBe," \u2014 "),dW=n(CBe,"A",{href:!0});var qCt=s(dW);mir=r(qCt,"Data2VecAudioForAudioFrameClassification"),qCt.forEach(t),gir=r(CBe," (Data2VecAudio model)"),CBe.forEach(t),hir=i(hl),NF=n(hl,"LI",{});var wBe=s(NF);d2e=n(wBe,"STRONG",{});var jCt=s(d2e);pir=r(jCt,"unispeech-sat"),jCt.forEach(t),_ir=r(wBe," \u2014 "),cW=n(wBe,"A",{href:!0});var DCt=s(cW);uir=r(DCt,"UniSpeechSatForAudioFrameClassification"),DCt.forEach(t),bir=r(wBe," (UniSpeechSat model)"),wBe.forEach(t),vir=i(hl),qF=n(hl,"LI",{});var ABe=s(qF);c2e=n(ABe,"STRONG",{});var GCt=s(c2e);Fir=r(GCt,"wav2vec2"),GCt.forEach(t),Tir=r(ABe," \u2014 "),fW=n(ABe,"A",{href:!0});var OCt=s(fW);Mir=r(OCt,"Wav2Vec2ForAudioFrameClassification"),OCt.forEach(t),Eir=r(ABe," (Wav2Vec2 model)"),ABe.forEach(t),Cir=i(hl),jF=n(hl,"LI",{});var LBe=s(jF);f2e=n(LBe,"STRONG",{});var VCt=s(f2e);wir=r(VCt,"wav2vec2-conformer"),VCt.forEach(t),Air=r(LBe," \u2014 "),mW=n(LBe,"A",{href:!0});var XCt=s(mW);Lir=r(XCt,"Wav2Vec2ConformerForAudioFrameClassification"),XCt.forEach(t),yir=r(LBe," (Wav2Vec2-Conformer model)"),LBe.forEach(t),xir=i(hl),DF=n(hl,"LI",{});var yBe=s(DF);m2e=n(yBe,"STRONG",{});var zCt=s(m2e);$ir=r(zCt,"wavlm"),zCt.forEach(t),kir=r(yBe," \u2014 "),gW=n(yBe,"A",{href:!0});var QCt=s(gW);Sir=r(QCt,"WavLMForAudioFrameClassification"),QCt.forEach(t),Rir=r(yBe," (WavLM model)"),yBe.forEach(t),hl.forEach(t),Pir=i(Fa),GF=n(Fa,"P",{});var xBe=s(GF);Bir=r(xBe,"The model is set in evaluation mode by default using "),g2e=n(xBe,"CODE",{});var WCt=s(g2e);Iir=r(WCt,"model.eval()"),WCt.forEach(t),Nir=r(xBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h2e=n(xBe,"CODE",{});var HCt=s(h2e);qir=r(HCt,"model.train()"),HCt.forEach(t),xBe.forEach(t),jir=i(Fa),T(OF.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),WOe=i(f),$d=n(f,"H2",{class:!0});var ZXe=s($d);VF=n(ZXe,"A",{id:!0,class:!0,href:!0});var UCt=s(VF);p2e=n(UCt,"SPAN",{});var JCt=s(p2e);T(k8.$$.fragment,JCt),JCt.forEach(t),UCt.forEach(t),Dir=i(ZXe),_2e=n(ZXe,"SPAN",{});var YCt=s(_2e);Gir=r(YCt,"AutoModelForCTC"),YCt.forEach(t),ZXe.forEach(t),HOe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(S8.$$.fragment,pl),Oir=i(pl),kd=n(pl,"P",{});var lre=s(kd);Vir=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hW=n(lre,"A",{href:!0});var KCt=s(hW);Xir=r(KCt,"from_pretrained()"),KCt.forEach(t),zir=r(lre," class method or the "),pW=n(lre,"A",{href:!0});var ZCt=s(pW);Qir=r(ZCt,"from_config()"),ZCt.forEach(t),Wir=r(lre,` class
method.`),lre.forEach(t),Hir=i(pl),R8=n(pl,"P",{});var eze=s(R8);Uir=r(eze,"This class cannot be instantiated directly using "),u2e=n(eze,"CODE",{});var e5t=s(u2e);Jir=r(e5t,"__init__()"),e5t.forEach(t),Yir=r(eze," (throws an error)."),eze.forEach(t),Kir=i(pl),Mt=n(pl,"DIV",{class:!0});var g6=s(Mt);T(P8.$$.fragment,g6),Zir=i(g6),b2e=n(g6,"P",{});var o5t=s(b2e);edr=r(o5t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),o5t.forEach(t),odr=i(g6),Sd=n(g6,"P",{});var ire=s(Sd);rdr=r(ire,`Note:
Loading a model from its configuration file does `),v2e=n(ire,"STRONG",{});var r5t=s(v2e);tdr=r(r5t,"not"),r5t.forEach(t),adr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(ire,"A",{href:!0});var t5t=s(_W);ndr=r(t5t,"from_pretrained()"),t5t.forEach(t),sdr=r(ire," to load the model weights."),ire.forEach(t),ldr=i(g6),T(XF.$$.fragment,g6),g6.forEach(t),idr=i(pl),go=n(pl,"DIV",{class:!0});var Ta=s(go);T(B8.$$.fragment,Ta),ddr=i(Ta),F2e=n(Ta,"P",{});var a5t=s(F2e);cdr=r(a5t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),a5t.forEach(t),fdr=i(Ta),Ua=n(Ta,"P",{});var h6=s(Ua);mdr=r(h6,"The model class to instantiate is selected based on the "),T2e=n(h6,"CODE",{});var n5t=s(T2e);gdr=r(n5t,"model_type"),n5t.forEach(t),hdr=r(h6,` property of the config object (either
passed as an argument or loaded from `),M2e=n(h6,"CODE",{});var s5t=s(M2e);pdr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),_dr=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(h6,"CODE",{});var l5t=s(E2e);udr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),bdr=r(h6,":"),h6.forEach(t),vdr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);zF=n(Be,"LI",{});var $Be=s(zF);C2e=n($Be,"STRONG",{});var i5t=s(C2e);Fdr=r(i5t,"data2vec-audio"),i5t.forEach(t),Tdr=r($Be," \u2014 "),uW=n($Be,"A",{href:!0});var d5t=s(uW);Mdr=r(d5t,"Data2VecAudioForCTC"),d5t.forEach(t),Edr=r($Be," (Data2VecAudio model)"),$Be.forEach(t),Cdr=i(Be),QF=n(Be,"LI",{});var kBe=s(QF);w2e=n(kBe,"STRONG",{});var c5t=s(w2e);wdr=r(c5t,"hubert"),c5t.forEach(t),Adr=r(kBe," \u2014 "),bW=n(kBe,"A",{href:!0});var f5t=s(bW);Ldr=r(f5t,"HubertForCTC"),f5t.forEach(t),ydr=r(kBe," (Hubert model)"),kBe.forEach(t),xdr=i(Be),WF=n(Be,"LI",{});var SBe=s(WF);A2e=n(SBe,"STRONG",{});var m5t=s(A2e);$dr=r(m5t,"mctct"),m5t.forEach(t),kdr=r(SBe," \u2014 "),vW=n(SBe,"A",{href:!0});var g5t=s(vW);Sdr=r(g5t,"MCTCTForCTC"),g5t.forEach(t),Rdr=r(SBe," (M-CTC-T model)"),SBe.forEach(t),Pdr=i(Be),HF=n(Be,"LI",{});var RBe=s(HF);L2e=n(RBe,"STRONG",{});var h5t=s(L2e);Bdr=r(h5t,"sew"),h5t.forEach(t),Idr=r(RBe," \u2014 "),FW=n(RBe,"A",{href:!0});var p5t=s(FW);Ndr=r(p5t,"SEWForCTC"),p5t.forEach(t),qdr=r(RBe," (SEW model)"),RBe.forEach(t),jdr=i(Be),UF=n(Be,"LI",{});var PBe=s(UF);y2e=n(PBe,"STRONG",{});var _5t=s(y2e);Ddr=r(_5t,"sew-d"),_5t.forEach(t),Gdr=r(PBe," \u2014 "),TW=n(PBe,"A",{href:!0});var u5t=s(TW);Odr=r(u5t,"SEWDForCTC"),u5t.forEach(t),Vdr=r(PBe," (SEW-D model)"),PBe.forEach(t),Xdr=i(Be),JF=n(Be,"LI",{});var BBe=s(JF);x2e=n(BBe,"STRONG",{});var b5t=s(x2e);zdr=r(b5t,"unispeech"),b5t.forEach(t),Qdr=r(BBe," \u2014 "),MW=n(BBe,"A",{href:!0});var v5t=s(MW);Wdr=r(v5t,"UniSpeechForCTC"),v5t.forEach(t),Hdr=r(BBe," (UniSpeech model)"),BBe.forEach(t),Udr=i(Be),YF=n(Be,"LI",{});var IBe=s(YF);$2e=n(IBe,"STRONG",{});var F5t=s($2e);Jdr=r(F5t,"unispeech-sat"),F5t.forEach(t),Ydr=r(IBe," \u2014 "),EW=n(IBe,"A",{href:!0});var T5t=s(EW);Kdr=r(T5t,"UniSpeechSatForCTC"),T5t.forEach(t),Zdr=r(IBe," (UniSpeechSat model)"),IBe.forEach(t),ecr=i(Be),KF=n(Be,"LI",{});var NBe=s(KF);k2e=n(NBe,"STRONG",{});var M5t=s(k2e);ocr=r(M5t,"wav2vec2"),M5t.forEach(t),rcr=r(NBe," \u2014 "),CW=n(NBe,"A",{href:!0});var E5t=s(CW);tcr=r(E5t,"Wav2Vec2ForCTC"),E5t.forEach(t),acr=r(NBe," (Wav2Vec2 model)"),NBe.forEach(t),ncr=i(Be),ZF=n(Be,"LI",{});var qBe=s(ZF);S2e=n(qBe,"STRONG",{});var C5t=s(S2e);scr=r(C5t,"wav2vec2-conformer"),C5t.forEach(t),lcr=r(qBe," \u2014 "),wW=n(qBe,"A",{href:!0});var w5t=s(wW);icr=r(w5t,"Wav2Vec2ConformerForCTC"),w5t.forEach(t),dcr=r(qBe," (Wav2Vec2-Conformer model)"),qBe.forEach(t),ccr=i(Be),eT=n(Be,"LI",{});var jBe=s(eT);R2e=n(jBe,"STRONG",{});var A5t=s(R2e);fcr=r(A5t,"wavlm"),A5t.forEach(t),mcr=r(jBe," \u2014 "),AW=n(jBe,"A",{href:!0});var L5t=s(AW);gcr=r(L5t,"WavLMForCTC"),L5t.forEach(t),hcr=r(jBe," (WavLM model)"),jBe.forEach(t),Be.forEach(t),pcr=i(Ta),oT=n(Ta,"P",{});var DBe=s(oT);_cr=r(DBe,"The model is set in evaluation mode by default using "),P2e=n(DBe,"CODE",{});var y5t=s(P2e);ucr=r(y5t,"model.eval()"),y5t.forEach(t),bcr=r(DBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(DBe,"CODE",{});var x5t=s(B2e);vcr=r(x5t,"model.train()"),x5t.forEach(t),DBe.forEach(t),Fcr=i(Ta),T(rT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),UOe=i(f),Rd=n(f,"H2",{class:!0});var oze=s(Rd);tT=n(oze,"A",{id:!0,class:!0,href:!0});var $5t=s(tT);I2e=n($5t,"SPAN",{});var k5t=s(I2e);T(I8.$$.fragment,k5t),k5t.forEach(t),$5t.forEach(t),Tcr=i(oze),N2e=n(oze,"SPAN",{});var S5t=s(N2e);Mcr=r(S5t,"AutoModelForSpeechSeq2Seq"),S5t.forEach(t),oze.forEach(t),JOe=i(f),Wo=n(f,"DIV",{class:!0});var _l=s(Wo);T(N8.$$.fragment,_l),Ecr=i(_l),Pd=n(_l,"P",{});var dre=s(Pd);Ccr=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),LW=n(dre,"A",{href:!0});var R5t=s(LW);wcr=r(R5t,"from_pretrained()"),R5t.forEach(t),Acr=r(dre," class method or the "),yW=n(dre,"A",{href:!0});var P5t=s(yW);Lcr=r(P5t,"from_config()"),P5t.forEach(t),ycr=r(dre,` class
method.`),dre.forEach(t),xcr=i(_l),q8=n(_l,"P",{});var rze=s(q8);$cr=r(rze,"This class cannot be instantiated directly using "),q2e=n(rze,"CODE",{});var B5t=s(q2e);kcr=r(B5t,"__init__()"),B5t.forEach(t),Scr=r(rze," (throws an error)."),rze.forEach(t),Rcr=i(_l),Et=n(_l,"DIV",{class:!0});var p6=s(Et);T(j8.$$.fragment,p6),Pcr=i(p6),j2e=n(p6,"P",{});var I5t=s(j2e);Bcr=r(I5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I5t.forEach(t),Icr=i(p6),Bd=n(p6,"P",{});var cre=s(Bd);Ncr=r(cre,`Note:
Loading a model from its configuration file does `),D2e=n(cre,"STRONG",{});var N5t=s(D2e);qcr=r(N5t,"not"),N5t.forEach(t),jcr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(cre,"A",{href:!0});var q5t=s(xW);Dcr=r(q5t,"from_pretrained()"),q5t.forEach(t),Gcr=r(cre," to load the model weights."),cre.forEach(t),Ocr=i(p6),T(aT.$$.fragment,p6),p6.forEach(t),Vcr=i(_l),ho=n(_l,"DIV",{class:!0});var Ma=s(ho);T(D8.$$.fragment,Ma),Xcr=i(Ma),G2e=n(Ma,"P",{});var j5t=s(G2e);zcr=r(j5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),j5t.forEach(t),Qcr=i(Ma),Ja=n(Ma,"P",{});var _6=s(Ja);Wcr=r(_6,"The model class to instantiate is selected based on the "),O2e=n(_6,"CODE",{});var D5t=s(O2e);Hcr=r(D5t,"model_type"),D5t.forEach(t),Ucr=r(_6,` property of the config object (either
passed as an argument or loaded from `),V2e=n(_6,"CODE",{});var G5t=s(V2e);Jcr=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),Ycr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(_6,"CODE",{});var O5t=s(X2e);Kcr=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),Zcr=r(_6,":"),_6.forEach(t),efr=i(Ma),G8=n(Ma,"UL",{});var tze=s(G8);nT=n(tze,"LI",{});var GBe=s(nT);z2e=n(GBe,"STRONG",{});var V5t=s(z2e);ofr=r(V5t,"speech-encoder-decoder"),V5t.forEach(t),rfr=r(GBe," \u2014 "),$W=n(GBe,"A",{href:!0});var X5t=s($W);tfr=r(X5t,"SpeechEncoderDecoderModel"),X5t.forEach(t),afr=r(GBe," (Speech Encoder decoder model)"),GBe.forEach(t),nfr=i(tze),sT=n(tze,"LI",{});var OBe=s(sT);Q2e=n(OBe,"STRONG",{});var z5t=s(Q2e);sfr=r(z5t,"speech_to_text"),z5t.forEach(t),lfr=r(OBe," \u2014 "),kW=n(OBe,"A",{href:!0});var Q5t=s(kW);ifr=r(Q5t,"Speech2TextForConditionalGeneration"),Q5t.forEach(t),dfr=r(OBe," (Speech2Text model)"),OBe.forEach(t),tze.forEach(t),cfr=i(Ma),lT=n(Ma,"P",{});var VBe=s(lT);ffr=r(VBe,"The model is set in evaluation mode by default using "),W2e=n(VBe,"CODE",{});var W5t=s(W2e);mfr=r(W5t,"model.eval()"),W5t.forEach(t),gfr=r(VBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),H2e=n(VBe,"CODE",{});var H5t=s(H2e);hfr=r(H5t,"model.train()"),H5t.forEach(t),VBe.forEach(t),pfr=i(Ma),T(iT.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),YOe=i(f),Id=n(f,"H2",{class:!0});var aze=s(Id);dT=n(aze,"A",{id:!0,class:!0,href:!0});var U5t=s(dT);U2e=n(U5t,"SPAN",{});var J5t=s(U2e);T(O8.$$.fragment,J5t),J5t.forEach(t),U5t.forEach(t),_fr=i(aze),J2e=n(aze,"SPAN",{});var Y5t=s(J2e);ufr=r(Y5t,"AutoModelForAudioXVector"),Y5t.forEach(t),aze.forEach(t),KOe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(V8.$$.fragment,ul),bfr=i(ul),Nd=n(ul,"P",{});var fre=s(Nd);vfr=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),SW=n(fre,"A",{href:!0});var K5t=s(SW);Ffr=r(K5t,"from_pretrained()"),K5t.forEach(t),Tfr=r(fre," class method or the "),RW=n(fre,"A",{href:!0});var Z5t=s(RW);Mfr=r(Z5t,"from_config()"),Z5t.forEach(t),Efr=r(fre,` class
method.`),fre.forEach(t),Cfr=i(ul),X8=n(ul,"P",{});var nze=s(X8);wfr=r(nze,"This class cannot be instantiated directly using "),Y2e=n(nze,"CODE",{});var e3t=s(Y2e);Afr=r(e3t,"__init__()"),e3t.forEach(t),Lfr=r(nze," (throws an error)."),nze.forEach(t),yfr=i(ul),Ct=n(ul,"DIV",{class:!0});var u6=s(Ct);T(z8.$$.fragment,u6),xfr=i(u6),K2e=n(u6,"P",{});var o3t=s(K2e);$fr=r(o3t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),o3t.forEach(t),kfr=i(u6),qd=n(u6,"P",{});var mre=s(qd);Sfr=r(mre,`Note:
Loading a model from its configuration file does `),Z2e=n(mre,"STRONG",{});var r3t=s(Z2e);Rfr=r(r3t,"not"),r3t.forEach(t),Pfr=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(mre,"A",{href:!0});var t3t=s(PW);Bfr=r(t3t,"from_pretrained()"),t3t.forEach(t),Ifr=r(mre," to load the model weights."),mre.forEach(t),Nfr=i(u6),T(cT.$$.fragment,u6),u6.forEach(t),qfr=i(ul),po=n(ul,"DIV",{class:!0});var Ea=s(po);T(Q8.$$.fragment,Ea),jfr=i(Ea),ebe=n(Ea,"P",{});var a3t=s(ebe);Dfr=r(a3t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),a3t.forEach(t),Gfr=i(Ea),Ya=n(Ea,"P",{});var b6=s(Ya);Ofr=r(b6,"The model class to instantiate is selected based on the "),obe=n(b6,"CODE",{});var n3t=s(obe);Vfr=r(n3t,"model_type"),n3t.forEach(t),Xfr=r(b6,` property of the config object (either
passed as an argument or loaded from `),rbe=n(b6,"CODE",{});var s3t=s(rbe);zfr=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),Qfr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=n(b6,"CODE",{});var l3t=s(tbe);Wfr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),Hfr=r(b6,":"),b6.forEach(t),Ufr=i(Ea),ot=n(Ea,"UL",{});var bl=s(ot);fT=n(bl,"LI",{});var XBe=s(fT);abe=n(XBe,"STRONG",{});var i3t=s(abe);Jfr=r(i3t,"data2vec-audio"),i3t.forEach(t),Yfr=r(XBe," \u2014 "),BW=n(XBe,"A",{href:!0});var d3t=s(BW);Kfr=r(d3t,"Data2VecAudioForXVector"),d3t.forEach(t),Zfr=r(XBe," (Data2VecAudio model)"),XBe.forEach(t),emr=i(bl),mT=n(bl,"LI",{});var zBe=s(mT);nbe=n(zBe,"STRONG",{});var c3t=s(nbe);omr=r(c3t,"unispeech-sat"),c3t.forEach(t),rmr=r(zBe," \u2014 "),IW=n(zBe,"A",{href:!0});var f3t=s(IW);tmr=r(f3t,"UniSpeechSatForXVector"),f3t.forEach(t),amr=r(zBe," (UniSpeechSat model)"),zBe.forEach(t),nmr=i(bl),gT=n(bl,"LI",{});var QBe=s(gT);sbe=n(QBe,"STRONG",{});var m3t=s(sbe);smr=r(m3t,"wav2vec2"),m3t.forEach(t),lmr=r(QBe," \u2014 "),NW=n(QBe,"A",{href:!0});var g3t=s(NW);imr=r(g3t,"Wav2Vec2ForXVector"),g3t.forEach(t),dmr=r(QBe," (Wav2Vec2 model)"),QBe.forEach(t),cmr=i(bl),hT=n(bl,"LI",{});var WBe=s(hT);lbe=n(WBe,"STRONG",{});var h3t=s(lbe);fmr=r(h3t,"wav2vec2-conformer"),h3t.forEach(t),mmr=r(WBe," \u2014 "),qW=n(WBe,"A",{href:!0});var p3t=s(qW);gmr=r(p3t,"Wav2Vec2ConformerForXVector"),p3t.forEach(t),hmr=r(WBe," (Wav2Vec2-Conformer model)"),WBe.forEach(t),pmr=i(bl),pT=n(bl,"LI",{});var HBe=s(pT);ibe=n(HBe,"STRONG",{});var _3t=s(ibe);_mr=r(_3t,"wavlm"),_3t.forEach(t),umr=r(HBe," \u2014 "),jW=n(HBe,"A",{href:!0});var u3t=s(jW);bmr=r(u3t,"WavLMForXVector"),u3t.forEach(t),vmr=r(HBe," (WavLM model)"),HBe.forEach(t),bl.forEach(t),Fmr=i(Ea),_T=n(Ea,"P",{});var UBe=s(_T);Tmr=r(UBe,"The model is set in evaluation mode by default using "),dbe=n(UBe,"CODE",{});var b3t=s(dbe);Mmr=r(b3t,"model.eval()"),b3t.forEach(t),Emr=r(UBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=n(UBe,"CODE",{});var v3t=s(cbe);Cmr=r(v3t,"model.train()"),v3t.forEach(t),UBe.forEach(t),wmr=i(Ea),T(uT.$$.fragment,Ea),Ea.forEach(t),ul.forEach(t),ZOe=i(f),jd=n(f,"H2",{class:!0});var sze=s(jd);bT=n(sze,"A",{id:!0,class:!0,href:!0});var F3t=s(bT);fbe=n(F3t,"SPAN",{});var T3t=s(fbe);T(W8.$$.fragment,T3t),T3t.forEach(t),F3t.forEach(t),Amr=i(sze),mbe=n(sze,"SPAN",{});var M3t=s(mbe);Lmr=r(M3t,"AutoModelForMaskedImageModeling"),M3t.forEach(t),sze.forEach(t),eVe=i(f),Uo=n(f,"DIV",{class:!0});var vl=s(Uo);T(H8.$$.fragment,vl),ymr=i(vl),Dd=n(vl,"P",{});var gre=s(Dd);xmr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),DW=n(gre,"A",{href:!0});var E3t=s(DW);$mr=r(E3t,"from_pretrained()"),E3t.forEach(t),kmr=r(gre," class method or the "),GW=n(gre,"A",{href:!0});var C3t=s(GW);Smr=r(C3t,"from_config()"),C3t.forEach(t),Rmr=r(gre,` class
method.`),gre.forEach(t),Pmr=i(vl),U8=n(vl,"P",{});var lze=s(U8);Bmr=r(lze,"This class cannot be instantiated directly using "),gbe=n(lze,"CODE",{});var w3t=s(gbe);Imr=r(w3t,"__init__()"),w3t.forEach(t),Nmr=r(lze," (throws an error)."),lze.forEach(t),qmr=i(vl),wt=n(vl,"DIV",{class:!0});var v6=s(wt);T(J8.$$.fragment,v6),jmr=i(v6),hbe=n(v6,"P",{});var A3t=s(hbe);Dmr=r(A3t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),A3t.forEach(t),Gmr=i(v6),Gd=n(v6,"P",{});var hre=s(Gd);Omr=r(hre,`Note:
Loading a model from its configuration file does `),pbe=n(hre,"STRONG",{});var L3t=s(pbe);Vmr=r(L3t,"not"),L3t.forEach(t),Xmr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(hre,"A",{href:!0});var y3t=s(OW);zmr=r(y3t,"from_pretrained()"),y3t.forEach(t),Qmr=r(hre," to load the model weights."),hre.forEach(t),Wmr=i(v6),T(vT.$$.fragment,v6),v6.forEach(t),Hmr=i(vl),_o=n(vl,"DIV",{class:!0});var Ca=s(_o);T(Y8.$$.fragment,Ca),Umr=i(Ca),_be=n(Ca,"P",{});var x3t=s(_be);Jmr=r(x3t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),x3t.forEach(t),Ymr=i(Ca),Ka=n(Ca,"P",{});var F6=s(Ka);Kmr=r(F6,"The model class to instantiate is selected based on the "),ube=n(F6,"CODE",{});var $3t=s(ube);Zmr=r($3t,"model_type"),$3t.forEach(t),egr=r(F6,` property of the config object (either
passed as an argument or loaded from `),bbe=n(F6,"CODE",{});var k3t=s(bbe);ogr=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),rgr=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(F6,"CODE",{});var S3t=s(vbe);tgr=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),agr=r(F6,":"),F6.forEach(t),ngr=i(Ca),Od=n(Ca,"UL",{});var pre=s(Od);FT=n(pre,"LI",{});var JBe=s(FT);Fbe=n(JBe,"STRONG",{});var R3t=s(Fbe);sgr=r(R3t,"deit"),R3t.forEach(t),lgr=r(JBe," \u2014 "),VW=n(JBe,"A",{href:!0});var P3t=s(VW);igr=r(P3t,"DeiTForMaskedImageModeling"),P3t.forEach(t),dgr=r(JBe," (DeiT model)"),JBe.forEach(t),cgr=i(pre),TT=n(pre,"LI",{});var YBe=s(TT);Tbe=n(YBe,"STRONG",{});var B3t=s(Tbe);fgr=r(B3t,"swin"),B3t.forEach(t),mgr=r(YBe," \u2014 "),XW=n(YBe,"A",{href:!0});var I3t=s(XW);ggr=r(I3t,"SwinForMaskedImageModeling"),I3t.forEach(t),hgr=r(YBe," (Swin Transformer model)"),YBe.forEach(t),pgr=i(pre),MT=n(pre,"LI",{});var KBe=s(MT);Mbe=n(KBe,"STRONG",{});var N3t=s(Mbe);_gr=r(N3t,"vit"),N3t.forEach(t),ugr=r(KBe," \u2014 "),zW=n(KBe,"A",{href:!0});var q3t=s(zW);bgr=r(q3t,"ViTForMaskedImageModeling"),q3t.forEach(t),vgr=r(KBe," (ViT model)"),KBe.forEach(t),pre.forEach(t),Fgr=i(Ca),ET=n(Ca,"P",{});var ZBe=s(ET);Tgr=r(ZBe,"The model is set in evaluation mode by default using "),Ebe=n(ZBe,"CODE",{});var j3t=s(Ebe);Mgr=r(j3t,"model.eval()"),j3t.forEach(t),Egr=r(ZBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cbe=n(ZBe,"CODE",{});var D3t=s(Cbe);Cgr=r(D3t,"model.train()"),D3t.forEach(t),ZBe.forEach(t),wgr=i(Ca),T(CT.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),oVe=i(f),Vd=n(f,"H2",{class:!0});var ize=s(Vd);wT=n(ize,"A",{id:!0,class:!0,href:!0});var G3t=s(wT);wbe=n(G3t,"SPAN",{});var O3t=s(wbe);T(K8.$$.fragment,O3t),O3t.forEach(t),G3t.forEach(t),Agr=i(ize),Abe=n(ize,"SPAN",{});var V3t=s(Abe);Lgr=r(V3t,"AutoModelForObjectDetection"),V3t.forEach(t),ize.forEach(t),rVe=i(f),Jo=n(f,"DIV",{class:!0});var Fl=s(Jo);T(Z8.$$.fragment,Fl),ygr=i(Fl),Xd=n(Fl,"P",{});var _re=s(Xd);xgr=r(_re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),QW=n(_re,"A",{href:!0});var X3t=s(QW);$gr=r(X3t,"from_pretrained()"),X3t.forEach(t),kgr=r(_re," class method or the "),WW=n(_re,"A",{href:!0});var z3t=s(WW);Sgr=r(z3t,"from_config()"),z3t.forEach(t),Rgr=r(_re,` class
method.`),_re.forEach(t),Pgr=i(Fl),e9=n(Fl,"P",{});var dze=s(e9);Bgr=r(dze,"This class cannot be instantiated directly using "),Lbe=n(dze,"CODE",{});var Q3t=s(Lbe);Igr=r(Q3t,"__init__()"),Q3t.forEach(t),Ngr=r(dze," (throws an error)."),dze.forEach(t),qgr=i(Fl),At=n(Fl,"DIV",{class:!0});var T6=s(At);T(o9.$$.fragment,T6),jgr=i(T6),ybe=n(T6,"P",{});var W3t=s(ybe);Dgr=r(W3t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),W3t.forEach(t),Ggr=i(T6),zd=n(T6,"P",{});var ure=s(zd);Ogr=r(ure,`Note:
Loading a model from its configuration file does `),xbe=n(ure,"STRONG",{});var H3t=s(xbe);Vgr=r(H3t,"not"),H3t.forEach(t),Xgr=r(ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(ure,"A",{href:!0});var U3t=s(HW);zgr=r(U3t,"from_pretrained()"),U3t.forEach(t),Qgr=r(ure," to load the model weights."),ure.forEach(t),Wgr=i(T6),T(AT.$$.fragment,T6),T6.forEach(t),Hgr=i(Fl),uo=n(Fl,"DIV",{class:!0});var wa=s(uo);T(r9.$$.fragment,wa),Ugr=i(wa),$be=n(wa,"P",{});var J3t=s($be);Jgr=r(J3t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),J3t.forEach(t),Ygr=i(wa),Za=n(wa,"P",{});var M6=s(Za);Kgr=r(M6,"The model class to instantiate is selected based on the "),kbe=n(M6,"CODE",{});var Y3t=s(kbe);Zgr=r(Y3t,"model_type"),Y3t.forEach(t),ehr=r(M6,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(M6,"CODE",{});var K3t=s(Sbe);ohr=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),rhr=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(M6,"CODE",{});var Z3t=s(Rbe);thr=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),ahr=r(M6,":"),M6.forEach(t),nhr=i(wa),t9=n(wa,"UL",{});var cze=s(t9);LT=n(cze,"LI",{});var eIe=s(LT);Pbe=n(eIe,"STRONG",{});var ewt=s(Pbe);shr=r(ewt,"detr"),ewt.forEach(t),lhr=r(eIe," \u2014 "),UW=n(eIe,"A",{href:!0});var owt=s(UW);ihr=r(owt,"DetrForObjectDetection"),owt.forEach(t),dhr=r(eIe," (DETR model)"),eIe.forEach(t),chr=i(cze),yT=n(cze,"LI",{});var oIe=s(yT);Bbe=n(oIe,"STRONG",{});var rwt=s(Bbe);fhr=r(rwt,"yolos"),rwt.forEach(t),mhr=r(oIe," \u2014 "),JW=n(oIe,"A",{href:!0});var twt=s(JW);ghr=r(twt,"YolosForObjectDetection"),twt.forEach(t),hhr=r(oIe," (YOLOS model)"),oIe.forEach(t),cze.forEach(t),phr=i(wa),xT=n(wa,"P",{});var rIe=s(xT);_hr=r(rIe,"The model is set in evaluation mode by default using "),Ibe=n(rIe,"CODE",{});var awt=s(Ibe);uhr=r(awt,"model.eval()"),awt.forEach(t),bhr=r(rIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=n(rIe,"CODE",{});var nwt=s(Nbe);vhr=r(nwt,"model.train()"),nwt.forEach(t),rIe.forEach(t),Fhr=i(wa),T($T.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),tVe=i(f),Qd=n(f,"H2",{class:!0});var fze=s(Qd);kT=n(fze,"A",{id:!0,class:!0,href:!0});var swt=s(kT);qbe=n(swt,"SPAN",{});var lwt=s(qbe);T(a9.$$.fragment,lwt),lwt.forEach(t),swt.forEach(t),Thr=i(fze),jbe=n(fze,"SPAN",{});var iwt=s(jbe);Mhr=r(iwt,"AutoModelForImageSegmentation"),iwt.forEach(t),fze.forEach(t),aVe=i(f),Yo=n(f,"DIV",{class:!0});var Tl=s(Yo);T(n9.$$.fragment,Tl),Ehr=i(Tl),Wd=n(Tl,"P",{});var bre=s(Wd);Chr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),YW=n(bre,"A",{href:!0});var dwt=s(YW);whr=r(dwt,"from_pretrained()"),dwt.forEach(t),Ahr=r(bre," class method or the "),KW=n(bre,"A",{href:!0});var cwt=s(KW);Lhr=r(cwt,"from_config()"),cwt.forEach(t),yhr=r(bre,` class
method.`),bre.forEach(t),xhr=i(Tl),s9=n(Tl,"P",{});var mze=s(s9);$hr=r(mze,"This class cannot be instantiated directly using "),Dbe=n(mze,"CODE",{});var fwt=s(Dbe);khr=r(fwt,"__init__()"),fwt.forEach(t),Shr=r(mze," (throws an error)."),mze.forEach(t),Rhr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var E6=s(Lt);T(l9.$$.fragment,E6),Phr=i(E6),Gbe=n(E6,"P",{});var mwt=s(Gbe);Bhr=r(mwt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mwt.forEach(t),Ihr=i(E6),Hd=n(E6,"P",{});var vre=s(Hd);Nhr=r(vre,`Note:
Loading a model from its configuration file does `),Obe=n(vre,"STRONG",{});var gwt=s(Obe);qhr=r(gwt,"not"),gwt.forEach(t),jhr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(vre,"A",{href:!0});var hwt=s(ZW);Dhr=r(hwt,"from_pretrained()"),hwt.forEach(t),Ghr=r(vre," to load the model weights."),vre.forEach(t),Ohr=i(E6),T(ST.$$.fragment,E6),E6.forEach(t),Vhr=i(Tl),bo=n(Tl,"DIV",{class:!0});var Aa=s(bo);T(i9.$$.fragment,Aa),Xhr=i(Aa),Vbe=n(Aa,"P",{});var pwt=s(Vbe);zhr=r(pwt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pwt.forEach(t),Qhr=i(Aa),en=n(Aa,"P",{});var C6=s(en);Whr=r(C6,"The model class to instantiate is selected based on the "),Xbe=n(C6,"CODE",{});var _wt=s(Xbe);Hhr=r(_wt,"model_type"),_wt.forEach(t),Uhr=r(C6,` property of the config object (either
passed as an argument or loaded from `),zbe=n(C6,"CODE",{});var uwt=s(zbe);Jhr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),Yhr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(C6,"CODE",{});var bwt=s(Qbe);Khr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),Zhr=r(C6,":"),C6.forEach(t),epr=i(Aa),Wbe=n(Aa,"UL",{});var vwt=s(Wbe);RT=n(vwt,"LI",{});var tIe=s(RT);Hbe=n(tIe,"STRONG",{});var Fwt=s(Hbe);opr=r(Fwt,"detr"),Fwt.forEach(t),rpr=r(tIe," \u2014 "),eH=n(tIe,"A",{href:!0});var Twt=s(eH);tpr=r(Twt,"DetrForSegmentation"),Twt.forEach(t),apr=r(tIe," (DETR model)"),tIe.forEach(t),vwt.forEach(t),npr=i(Aa),PT=n(Aa,"P",{});var aIe=s(PT);spr=r(aIe,"The model is set in evaluation mode by default using "),Ube=n(aIe,"CODE",{});var Mwt=s(Ube);lpr=r(Mwt,"model.eval()"),Mwt.forEach(t),ipr=r(aIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=n(aIe,"CODE",{});var Ewt=s(Jbe);dpr=r(Ewt,"model.train()"),Ewt.forEach(t),aIe.forEach(t),cpr=i(Aa),T(BT.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),nVe=i(f),Ud=n(f,"H2",{class:!0});var gze=s(Ud);IT=n(gze,"A",{id:!0,class:!0,href:!0});var Cwt=s(IT);Ybe=n(Cwt,"SPAN",{});var wwt=s(Ybe);T(d9.$$.fragment,wwt),wwt.forEach(t),Cwt.forEach(t),fpr=i(gze),Kbe=n(gze,"SPAN",{});var Awt=s(Kbe);mpr=r(Awt,"AutoModelForSemanticSegmentation"),Awt.forEach(t),gze.forEach(t),sVe=i(f),Ko=n(f,"DIV",{class:!0});var Ml=s(Ko);T(c9.$$.fragment,Ml),gpr=i(Ml),Jd=n(Ml,"P",{});var Fre=s(Jd);hpr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),oH=n(Fre,"A",{href:!0});var Lwt=s(oH);ppr=r(Lwt,"from_pretrained()"),Lwt.forEach(t),_pr=r(Fre," class method or the "),rH=n(Fre,"A",{href:!0});var ywt=s(rH);upr=r(ywt,"from_config()"),ywt.forEach(t),bpr=r(Fre,` class
method.`),Fre.forEach(t),vpr=i(Ml),f9=n(Ml,"P",{});var hze=s(f9);Fpr=r(hze,"This class cannot be instantiated directly using "),Zbe=n(hze,"CODE",{});var xwt=s(Zbe);Tpr=r(xwt,"__init__()"),xwt.forEach(t),Mpr=r(hze," (throws an error)."),hze.forEach(t),Epr=i(Ml),yt=n(Ml,"DIV",{class:!0});var w6=s(yt);T(m9.$$.fragment,w6),Cpr=i(w6),eve=n(w6,"P",{});var $wt=s(eve);wpr=r($wt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),$wt.forEach(t),Apr=i(w6),Yd=n(w6,"P",{});var Tre=s(Yd);Lpr=r(Tre,`Note:
Loading a model from its configuration file does `),ove=n(Tre,"STRONG",{});var kwt=s(ove);ypr=r(kwt,"not"),kwt.forEach(t),xpr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tH=n(Tre,"A",{href:!0});var Swt=s(tH);$pr=r(Swt,"from_pretrained()"),Swt.forEach(t),kpr=r(Tre," to load the model weights."),Tre.forEach(t),Spr=i(w6),T(NT.$$.fragment,w6),w6.forEach(t),Rpr=i(Ml),vo=n(Ml,"DIV",{class:!0});var La=s(vo);T(g9.$$.fragment,La),Ppr=i(La),rve=n(La,"P",{});var Rwt=s(rve);Bpr=r(Rwt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Rwt.forEach(t),Ipr=i(La),on=n(La,"P",{});var A6=s(on);Npr=r(A6,"The model class to instantiate is selected based on the "),tve=n(A6,"CODE",{});var Pwt=s(tve);qpr=r(Pwt,"model_type"),Pwt.forEach(t),jpr=r(A6,` property of the config object (either
passed as an argument or loaded from `),ave=n(A6,"CODE",{});var Bwt=s(ave);Dpr=r(Bwt,"pretrained_model_name_or_path"),Bwt.forEach(t),Gpr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(A6,"CODE",{});var Iwt=s(nve);Opr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),Vpr=r(A6,":"),A6.forEach(t),Xpr=i(La),rn=n(La,"UL",{});var L6=s(rn);qT=n(L6,"LI",{});var nIe=s(qT);sve=n(nIe,"STRONG",{});var Nwt=s(sve);zpr=r(Nwt,"beit"),Nwt.forEach(t),Qpr=r(nIe," \u2014 "),aH=n(nIe,"A",{href:!0});var qwt=s(aH);Wpr=r(qwt,"BeitForSemanticSegmentation"),qwt.forEach(t),Hpr=r(nIe," (BEiT model)"),nIe.forEach(t),Upr=i(L6),jT=n(L6,"LI",{});var sIe=s(jT);lve=n(sIe,"STRONG",{});var jwt=s(lve);Jpr=r(jwt,"data2vec-vision"),jwt.forEach(t),Ypr=r(sIe," \u2014 "),nH=n(sIe,"A",{href:!0});var Dwt=s(nH);Kpr=r(Dwt,"Data2VecVisionForSemanticSegmentation"),Dwt.forEach(t),Zpr=r(sIe," (Data2VecVision model)"),sIe.forEach(t),e_r=i(L6),DT=n(L6,"LI",{});var lIe=s(DT);ive=n(lIe,"STRONG",{});var Gwt=s(ive);o_r=r(Gwt,"dpt"),Gwt.forEach(t),r_r=r(lIe," \u2014 "),sH=n(lIe,"A",{href:!0});var Owt=s(sH);t_r=r(Owt,"DPTForSemanticSegmentation"),Owt.forEach(t),a_r=r(lIe," (DPT model)"),lIe.forEach(t),n_r=i(L6),GT=n(L6,"LI",{});var iIe=s(GT);dve=n(iIe,"STRONG",{});var Vwt=s(dve);s_r=r(Vwt,"segformer"),Vwt.forEach(t),l_r=r(iIe," \u2014 "),lH=n(iIe,"A",{href:!0});var Xwt=s(lH);i_r=r(Xwt,"SegformerForSemanticSegmentation"),Xwt.forEach(t),d_r=r(iIe," (SegFormer model)"),iIe.forEach(t),L6.forEach(t),c_r=i(La),OT=n(La,"P",{});var dIe=s(OT);f_r=r(dIe,"The model is set in evaluation mode by default using "),cve=n(dIe,"CODE",{});var zwt=s(cve);m_r=r(zwt,"model.eval()"),zwt.forEach(t),g_r=r(dIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fve=n(dIe,"CODE",{});var Qwt=s(fve);h_r=r(Qwt,"model.train()"),Qwt.forEach(t),dIe.forEach(t),p_r=i(La),T(VT.$$.fragment,La),La.forEach(t),Ml.forEach(t),lVe=i(f),Kd=n(f,"H2",{class:!0});var pze=s(Kd);XT=n(pze,"A",{id:!0,class:!0,href:!0});var Wwt=s(XT);mve=n(Wwt,"SPAN",{});var Hwt=s(mve);T(h9.$$.fragment,Hwt),Hwt.forEach(t),Wwt.forEach(t),__r=i(pze),gve=n(pze,"SPAN",{});var Uwt=s(gve);u_r=r(Uwt,"AutoModelForInstanceSegmentation"),Uwt.forEach(t),pze.forEach(t),iVe=i(f),Zo=n(f,"DIV",{class:!0});var El=s(Zo);T(p9.$$.fragment,El),b_r=i(El),Zd=n(El,"P",{});var Mre=s(Zd);v_r=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),iH=n(Mre,"A",{href:!0});var Jwt=s(iH);F_r=r(Jwt,"from_pretrained()"),Jwt.forEach(t),T_r=r(Mre," class method or the "),dH=n(Mre,"A",{href:!0});var Ywt=s(dH);M_r=r(Ywt,"from_config()"),Ywt.forEach(t),E_r=r(Mre,` class
method.`),Mre.forEach(t),C_r=i(El),_9=n(El,"P",{});var _ze=s(_9);w_r=r(_ze,"This class cannot be instantiated directly using "),hve=n(_ze,"CODE",{});var Kwt=s(hve);A_r=r(Kwt,"__init__()"),Kwt.forEach(t),L_r=r(_ze," (throws an error)."),_ze.forEach(t),y_r=i(El),xt=n(El,"DIV",{class:!0});var y6=s(xt);T(u9.$$.fragment,y6),x_r=i(y6),pve=n(y6,"P",{});var Zwt=s(pve);$_r=r(Zwt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Zwt.forEach(t),k_r=i(y6),ec=n(y6,"P",{});var Ere=s(ec);S_r=r(Ere,`Note:
Loading a model from its configuration file does `),_ve=n(Ere,"STRONG",{});var eAt=s(_ve);R_r=r(eAt,"not"),eAt.forEach(t),P_r=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(Ere,"A",{href:!0});var oAt=s(cH);B_r=r(oAt,"from_pretrained()"),oAt.forEach(t),I_r=r(Ere," to load the model weights."),Ere.forEach(t),N_r=i(y6),T(zT.$$.fragment,y6),y6.forEach(t),q_r=i(El),Fo=n(El,"DIV",{class:!0});var ya=s(Fo);T(b9.$$.fragment,ya),j_r=i(ya),uve=n(ya,"P",{});var rAt=s(uve);D_r=r(rAt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rAt.forEach(t),G_r=i(ya),tn=n(ya,"P",{});var x6=s(tn);O_r=r(x6,"The model class to instantiate is selected based on the "),bve=n(x6,"CODE",{});var tAt=s(bve);V_r=r(tAt,"model_type"),tAt.forEach(t),X_r=r(x6,` property of the config object (either
passed as an argument or loaded from `),vve=n(x6,"CODE",{});var aAt=s(vve);z_r=r(aAt,"pretrained_model_name_or_path"),aAt.forEach(t),Q_r=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(x6,"CODE",{});var nAt=s(Fve);W_r=r(nAt,"pretrained_model_name_or_path"),nAt.forEach(t),H_r=r(x6,":"),x6.forEach(t),U_r=i(ya),Tve=n(ya,"UL",{});var sAt=s(Tve);QT=n(sAt,"LI",{});var cIe=s(QT);Mve=n(cIe,"STRONG",{});var lAt=s(Mve);J_r=r(lAt,"maskformer"),lAt.forEach(t),Y_r=r(cIe," \u2014 "),fH=n(cIe,"A",{href:!0});var iAt=s(fH);K_r=r(iAt,"MaskFormerForInstanceSegmentation"),iAt.forEach(t),Z_r=r(cIe," (MaskFormer model)"),cIe.forEach(t),sAt.forEach(t),eur=i(ya),WT=n(ya,"P",{});var fIe=s(WT);our=r(fIe,"The model is set in evaluation mode by default using "),Eve=n(fIe,"CODE",{});var dAt=s(Eve);rur=r(dAt,"model.eval()"),dAt.forEach(t),tur=r(fIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=n(fIe,"CODE",{});var cAt=s(Cve);aur=r(cAt,"model.train()"),cAt.forEach(t),fIe.forEach(t),nur=i(ya),T(HT.$$.fragment,ya),ya.forEach(t),El.forEach(t),dVe=i(f),oc=n(f,"H2",{class:!0});var uze=s(oc);UT=n(uze,"A",{id:!0,class:!0,href:!0});var fAt=s(UT);wve=n(fAt,"SPAN",{});var mAt=s(wve);T(v9.$$.fragment,mAt),mAt.forEach(t),fAt.forEach(t),sur=i(uze),Ave=n(uze,"SPAN",{});var gAt=s(Ave);lur=r(gAt,"TFAutoModel"),gAt.forEach(t),uze.forEach(t),cVe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(F9.$$.fragment,Cl),iur=i(Cl),rc=n(Cl,"P",{});var Cre=s(rc);dur=r(Cre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mH=n(Cre,"A",{href:!0});var hAt=s(mH);cur=r(hAt,"from_pretrained()"),hAt.forEach(t),fur=r(Cre," class method or the "),gH=n(Cre,"A",{href:!0});var pAt=s(gH);mur=r(pAt,"from_config()"),pAt.forEach(t),gur=r(Cre,` class
method.`),Cre.forEach(t),hur=i(Cl),T9=n(Cl,"P",{});var bze=s(T9);pur=r(bze,"This class cannot be instantiated directly using "),Lve=n(bze,"CODE",{});var _At=s(Lve);_ur=r(_At,"__init__()"),_At.forEach(t),uur=r(bze," (throws an error)."),bze.forEach(t),bur=i(Cl),$t=n(Cl,"DIV",{class:!0});var $6=s($t);T(M9.$$.fragment,$6),vur=i($6),yve=n($6,"P",{});var uAt=s(yve);Fur=r(uAt,"Instantiates one of the base model classes of the library from a configuration."),uAt.forEach(t),Tur=i($6),tc=n($6,"P",{});var wre=s(tc);Mur=r(wre,`Note:
Loading a model from its configuration file does `),xve=n(wre,"STRONG",{});var bAt=s(xve);Eur=r(bAt,"not"),bAt.forEach(t),Cur=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(wre,"A",{href:!0});var vAt=s(hH);wur=r(vAt,"from_pretrained()"),vAt.forEach(t),Aur=r(wre," to load the model weights."),wre.forEach(t),Lur=i($6),T(JT.$$.fragment,$6),$6.forEach(t),yur=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(E9.$$.fragment,wl),xur=i(wl),$ve=n(wl,"P",{});var FAt=s($ve);$ur=r(FAt,"Instantiate one of the base model classes of the library from a pretrained model."),FAt.forEach(t),kur=i(wl),an=n(wl,"P",{});var k6=s(an);Sur=r(k6,"The model class to instantiate is selected based on the "),kve=n(k6,"CODE",{});var TAt=s(kve);Rur=r(TAt,"model_type"),TAt.forEach(t),Pur=r(k6,` property of the config object (either
passed as an argument or loaded from `),Sve=n(k6,"CODE",{});var MAt=s(Sve);Bur=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),Iur=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(k6,"CODE",{});var EAt=s(Rve);Nur=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),qur=r(k6,":"),k6.forEach(t),jur=i(wl),j=n(wl,"UL",{});var D=s(j);YT=n(D,"LI",{});var mIe=s(YT);Pve=n(mIe,"STRONG",{});var CAt=s(Pve);Dur=r(CAt,"albert"),CAt.forEach(t),Gur=r(mIe," \u2014 "),pH=n(mIe,"A",{href:!0});var wAt=s(pH);Our=r(wAt,"TFAlbertModel"),wAt.forEach(t),Vur=r(mIe," (ALBERT model)"),mIe.forEach(t),Xur=i(D),KT=n(D,"LI",{});var gIe=s(KT);Bve=n(gIe,"STRONG",{});var AAt=s(Bve);zur=r(AAt,"bart"),AAt.forEach(t),Qur=r(gIe," \u2014 "),_H=n(gIe,"A",{href:!0});var LAt=s(_H);Wur=r(LAt,"TFBartModel"),LAt.forEach(t),Hur=r(gIe," (BART model)"),gIe.forEach(t),Uur=i(D),ZT=n(D,"LI",{});var hIe=s(ZT);Ive=n(hIe,"STRONG",{});var yAt=s(Ive);Jur=r(yAt,"bert"),yAt.forEach(t),Yur=r(hIe," \u2014 "),uH=n(hIe,"A",{href:!0});var xAt=s(uH);Kur=r(xAt,"TFBertModel"),xAt.forEach(t),Zur=r(hIe," (BERT model)"),hIe.forEach(t),e1r=i(D),eM=n(D,"LI",{});var pIe=s(eM);Nve=n(pIe,"STRONG",{});var $At=s(Nve);o1r=r($At,"blenderbot"),$At.forEach(t),r1r=r(pIe," \u2014 "),bH=n(pIe,"A",{href:!0});var kAt=s(bH);t1r=r(kAt,"TFBlenderbotModel"),kAt.forEach(t),a1r=r(pIe," (Blenderbot model)"),pIe.forEach(t),n1r=i(D),oM=n(D,"LI",{});var _Ie=s(oM);qve=n(_Ie,"STRONG",{});var SAt=s(qve);s1r=r(SAt,"blenderbot-small"),SAt.forEach(t),l1r=r(_Ie," \u2014 "),vH=n(_Ie,"A",{href:!0});var RAt=s(vH);i1r=r(RAt,"TFBlenderbotSmallModel"),RAt.forEach(t),d1r=r(_Ie," (BlenderbotSmall model)"),_Ie.forEach(t),c1r=i(D),rM=n(D,"LI",{});var uIe=s(rM);jve=n(uIe,"STRONG",{});var PAt=s(jve);f1r=r(PAt,"camembert"),PAt.forEach(t),m1r=r(uIe," \u2014 "),FH=n(uIe,"A",{href:!0});var BAt=s(FH);g1r=r(BAt,"TFCamembertModel"),BAt.forEach(t),h1r=r(uIe," (CamemBERT model)"),uIe.forEach(t),p1r=i(D),tM=n(D,"LI",{});var bIe=s(tM);Dve=n(bIe,"STRONG",{});var IAt=s(Dve);_1r=r(IAt,"clip"),IAt.forEach(t),u1r=r(bIe," \u2014 "),TH=n(bIe,"A",{href:!0});var NAt=s(TH);b1r=r(NAt,"TFCLIPModel"),NAt.forEach(t),v1r=r(bIe," (CLIP model)"),bIe.forEach(t),F1r=i(D),aM=n(D,"LI",{});var vIe=s(aM);Gve=n(vIe,"STRONG",{});var qAt=s(Gve);T1r=r(qAt,"convbert"),qAt.forEach(t),M1r=r(vIe," \u2014 "),MH=n(vIe,"A",{href:!0});var jAt=s(MH);E1r=r(jAt,"TFConvBertModel"),jAt.forEach(t),C1r=r(vIe," (ConvBERT model)"),vIe.forEach(t),w1r=i(D),nM=n(D,"LI",{});var FIe=s(nM);Ove=n(FIe,"STRONG",{});var DAt=s(Ove);A1r=r(DAt,"convnext"),DAt.forEach(t),L1r=r(FIe," \u2014 "),EH=n(FIe,"A",{href:!0});var GAt=s(EH);y1r=r(GAt,"TFConvNextModel"),GAt.forEach(t),x1r=r(FIe," (ConvNeXT model)"),FIe.forEach(t),$1r=i(D),sM=n(D,"LI",{});var TIe=s(sM);Vve=n(TIe,"STRONG",{});var OAt=s(Vve);k1r=r(OAt,"ctrl"),OAt.forEach(t),S1r=r(TIe," \u2014 "),CH=n(TIe,"A",{href:!0});var VAt=s(CH);R1r=r(VAt,"TFCTRLModel"),VAt.forEach(t),P1r=r(TIe," (CTRL model)"),TIe.forEach(t),B1r=i(D),lM=n(D,"LI",{});var MIe=s(lM);Xve=n(MIe,"STRONG",{});var XAt=s(Xve);I1r=r(XAt,"data2vec-vision"),XAt.forEach(t),N1r=r(MIe," \u2014 "),wH=n(MIe,"A",{href:!0});var zAt=s(wH);q1r=r(zAt,"TFData2VecVisionModel"),zAt.forEach(t),j1r=r(MIe," (Data2VecVision model)"),MIe.forEach(t),D1r=i(D),iM=n(D,"LI",{});var EIe=s(iM);zve=n(EIe,"STRONG",{});var QAt=s(zve);G1r=r(QAt,"deberta"),QAt.forEach(t),O1r=r(EIe," \u2014 "),AH=n(EIe,"A",{href:!0});var WAt=s(AH);V1r=r(WAt,"TFDebertaModel"),WAt.forEach(t),X1r=r(EIe," (DeBERTa model)"),EIe.forEach(t),z1r=i(D),dM=n(D,"LI",{});var CIe=s(dM);Qve=n(CIe,"STRONG",{});var HAt=s(Qve);Q1r=r(HAt,"deberta-v2"),HAt.forEach(t),W1r=r(CIe," \u2014 "),LH=n(CIe,"A",{href:!0});var UAt=s(LH);H1r=r(UAt,"TFDebertaV2Model"),UAt.forEach(t),U1r=r(CIe," (DeBERTa-v2 model)"),CIe.forEach(t),J1r=i(D),cM=n(D,"LI",{});var wIe=s(cM);Wve=n(wIe,"STRONG",{});var JAt=s(Wve);Y1r=r(JAt,"distilbert"),JAt.forEach(t),K1r=r(wIe," \u2014 "),yH=n(wIe,"A",{href:!0});var YAt=s(yH);Z1r=r(YAt,"TFDistilBertModel"),YAt.forEach(t),e7r=r(wIe," (DistilBERT model)"),wIe.forEach(t),o7r=i(D),fM=n(D,"LI",{});var AIe=s(fM);Hve=n(AIe,"STRONG",{});var KAt=s(Hve);r7r=r(KAt,"dpr"),KAt.forEach(t),t7r=r(AIe," \u2014 "),xH=n(AIe,"A",{href:!0});var ZAt=s(xH);a7r=r(ZAt,"TFDPRQuestionEncoder"),ZAt.forEach(t),n7r=r(AIe," (DPR model)"),AIe.forEach(t),s7r=i(D),mM=n(D,"LI",{});var LIe=s(mM);Uve=n(LIe,"STRONG",{});var e6t=s(Uve);l7r=r(e6t,"electra"),e6t.forEach(t),i7r=r(LIe," \u2014 "),$H=n(LIe,"A",{href:!0});var o6t=s($H);d7r=r(o6t,"TFElectraModel"),o6t.forEach(t),c7r=r(LIe," (ELECTRA model)"),LIe.forEach(t),f7r=i(D),gM=n(D,"LI",{});var yIe=s(gM);Jve=n(yIe,"STRONG",{});var r6t=s(Jve);m7r=r(r6t,"flaubert"),r6t.forEach(t),g7r=r(yIe," \u2014 "),kH=n(yIe,"A",{href:!0});var t6t=s(kH);h7r=r(t6t,"TFFlaubertModel"),t6t.forEach(t),p7r=r(yIe," (FlauBERT model)"),yIe.forEach(t),_7r=i(D),Ws=n(D,"LI",{});var sS=s(Ws);Yve=n(sS,"STRONG",{});var a6t=s(Yve);u7r=r(a6t,"funnel"),a6t.forEach(t),b7r=r(sS," \u2014 "),SH=n(sS,"A",{href:!0});var n6t=s(SH);v7r=r(n6t,"TFFunnelModel"),n6t.forEach(t),F7r=r(sS," or "),RH=n(sS,"A",{href:!0});var s6t=s(RH);T7r=r(s6t,"TFFunnelBaseModel"),s6t.forEach(t),M7r=r(sS," (Funnel Transformer model)"),sS.forEach(t),E7r=i(D),hM=n(D,"LI",{});var xIe=s(hM);Kve=n(xIe,"STRONG",{});var l6t=s(Kve);C7r=r(l6t,"gpt2"),l6t.forEach(t),w7r=r(xIe," \u2014 "),PH=n(xIe,"A",{href:!0});var i6t=s(PH);A7r=r(i6t,"TFGPT2Model"),i6t.forEach(t),L7r=r(xIe," (OpenAI GPT-2 model)"),xIe.forEach(t),y7r=i(D),pM=n(D,"LI",{});var $Ie=s(pM);Zve=n($Ie,"STRONG",{});var d6t=s(Zve);x7r=r(d6t,"gptj"),d6t.forEach(t),$7r=r($Ie," \u2014 "),BH=n($Ie,"A",{href:!0});var c6t=s(BH);k7r=r(c6t,"TFGPTJModel"),c6t.forEach(t),S7r=r($Ie," (GPT-J model)"),$Ie.forEach(t),R7r=i(D),_M=n(D,"LI",{});var kIe=s(_M);e0e=n(kIe,"STRONG",{});var f6t=s(e0e);P7r=r(f6t,"hubert"),f6t.forEach(t),B7r=r(kIe," \u2014 "),IH=n(kIe,"A",{href:!0});var m6t=s(IH);I7r=r(m6t,"TFHubertModel"),m6t.forEach(t),N7r=r(kIe," (Hubert model)"),kIe.forEach(t),q7r=i(D),uM=n(D,"LI",{});var SIe=s(uM);o0e=n(SIe,"STRONG",{});var g6t=s(o0e);j7r=r(g6t,"layoutlm"),g6t.forEach(t),D7r=r(SIe," \u2014 "),NH=n(SIe,"A",{href:!0});var h6t=s(NH);G7r=r(h6t,"TFLayoutLMModel"),h6t.forEach(t),O7r=r(SIe," (LayoutLM model)"),SIe.forEach(t),V7r=i(D),bM=n(D,"LI",{});var RIe=s(bM);r0e=n(RIe,"STRONG",{});var p6t=s(r0e);X7r=r(p6t,"led"),p6t.forEach(t),z7r=r(RIe," \u2014 "),qH=n(RIe,"A",{href:!0});var _6t=s(qH);Q7r=r(_6t,"TFLEDModel"),_6t.forEach(t),W7r=r(RIe," (LED model)"),RIe.forEach(t),H7r=i(D),vM=n(D,"LI",{});var PIe=s(vM);t0e=n(PIe,"STRONG",{});var u6t=s(t0e);U7r=r(u6t,"longformer"),u6t.forEach(t),J7r=r(PIe," \u2014 "),jH=n(PIe,"A",{href:!0});var b6t=s(jH);Y7r=r(b6t,"TFLongformerModel"),b6t.forEach(t),K7r=r(PIe," (Longformer model)"),PIe.forEach(t),Z7r=i(D),FM=n(D,"LI",{});var BIe=s(FM);a0e=n(BIe,"STRONG",{});var v6t=s(a0e);e2r=r(v6t,"lxmert"),v6t.forEach(t),o2r=r(BIe," \u2014 "),DH=n(BIe,"A",{href:!0});var F6t=s(DH);r2r=r(F6t,"TFLxmertModel"),F6t.forEach(t),t2r=r(BIe," (LXMERT model)"),BIe.forEach(t),a2r=i(D),TM=n(D,"LI",{});var IIe=s(TM);n0e=n(IIe,"STRONG",{});var T6t=s(n0e);n2r=r(T6t,"marian"),T6t.forEach(t),s2r=r(IIe," \u2014 "),GH=n(IIe,"A",{href:!0});var M6t=s(GH);l2r=r(M6t,"TFMarianModel"),M6t.forEach(t),i2r=r(IIe," (Marian model)"),IIe.forEach(t),d2r=i(D),MM=n(D,"LI",{});var NIe=s(MM);s0e=n(NIe,"STRONG",{});var E6t=s(s0e);c2r=r(E6t,"mbart"),E6t.forEach(t),f2r=r(NIe," \u2014 "),OH=n(NIe,"A",{href:!0});var C6t=s(OH);m2r=r(C6t,"TFMBartModel"),C6t.forEach(t),g2r=r(NIe," (mBART model)"),NIe.forEach(t),h2r=i(D),EM=n(D,"LI",{});var qIe=s(EM);l0e=n(qIe,"STRONG",{});var w6t=s(l0e);p2r=r(w6t,"mobilebert"),w6t.forEach(t),_2r=r(qIe," \u2014 "),VH=n(qIe,"A",{href:!0});var A6t=s(VH);u2r=r(A6t,"TFMobileBertModel"),A6t.forEach(t),b2r=r(qIe," (MobileBERT model)"),qIe.forEach(t),v2r=i(D),CM=n(D,"LI",{});var jIe=s(CM);i0e=n(jIe,"STRONG",{});var L6t=s(i0e);F2r=r(L6t,"mpnet"),L6t.forEach(t),T2r=r(jIe," \u2014 "),XH=n(jIe,"A",{href:!0});var y6t=s(XH);M2r=r(y6t,"TFMPNetModel"),y6t.forEach(t),E2r=r(jIe," (MPNet model)"),jIe.forEach(t),C2r=i(D),wM=n(D,"LI",{});var DIe=s(wM);d0e=n(DIe,"STRONG",{});var x6t=s(d0e);w2r=r(x6t,"mt5"),x6t.forEach(t),A2r=r(DIe," \u2014 "),zH=n(DIe,"A",{href:!0});var $6t=s(zH);L2r=r($6t,"TFMT5Model"),$6t.forEach(t),y2r=r(DIe," (MT5 model)"),DIe.forEach(t),x2r=i(D),AM=n(D,"LI",{});var GIe=s(AM);c0e=n(GIe,"STRONG",{});var k6t=s(c0e);$2r=r(k6t,"openai-gpt"),k6t.forEach(t),k2r=r(GIe," \u2014 "),QH=n(GIe,"A",{href:!0});var S6t=s(QH);S2r=r(S6t,"TFOpenAIGPTModel"),S6t.forEach(t),R2r=r(GIe," (OpenAI GPT model)"),GIe.forEach(t),P2r=i(D),LM=n(D,"LI",{});var OIe=s(LM);f0e=n(OIe,"STRONG",{});var R6t=s(f0e);B2r=r(R6t,"opt"),R6t.forEach(t),I2r=r(OIe," \u2014 "),WH=n(OIe,"A",{href:!0});var P6t=s(WH);N2r=r(P6t,"TFOPTModel"),P6t.forEach(t),q2r=r(OIe," (OPT model)"),OIe.forEach(t),j2r=i(D),yM=n(D,"LI",{});var VIe=s(yM);m0e=n(VIe,"STRONG",{});var B6t=s(m0e);D2r=r(B6t,"pegasus"),B6t.forEach(t),G2r=r(VIe," \u2014 "),HH=n(VIe,"A",{href:!0});var I6t=s(HH);O2r=r(I6t,"TFPegasusModel"),I6t.forEach(t),V2r=r(VIe," (Pegasus model)"),VIe.forEach(t),X2r=i(D),xM=n(D,"LI",{});var XIe=s(xM);g0e=n(XIe,"STRONG",{});var N6t=s(g0e);z2r=r(N6t,"rembert"),N6t.forEach(t),Q2r=r(XIe," \u2014 "),UH=n(XIe,"A",{href:!0});var q6t=s(UH);W2r=r(q6t,"TFRemBertModel"),q6t.forEach(t),H2r=r(XIe," (RemBERT model)"),XIe.forEach(t),U2r=i(D),$M=n(D,"LI",{});var zIe=s($M);h0e=n(zIe,"STRONG",{});var j6t=s(h0e);J2r=r(j6t,"roberta"),j6t.forEach(t),Y2r=r(zIe," \u2014 "),JH=n(zIe,"A",{href:!0});var D6t=s(JH);K2r=r(D6t,"TFRobertaModel"),D6t.forEach(t),Z2r=r(zIe," (RoBERTa model)"),zIe.forEach(t),ebr=i(D),kM=n(D,"LI",{});var QIe=s(kM);p0e=n(QIe,"STRONG",{});var G6t=s(p0e);obr=r(G6t,"roformer"),G6t.forEach(t),rbr=r(QIe," \u2014 "),YH=n(QIe,"A",{href:!0});var O6t=s(YH);tbr=r(O6t,"TFRoFormerModel"),O6t.forEach(t),abr=r(QIe," (RoFormer model)"),QIe.forEach(t),nbr=i(D),SM=n(D,"LI",{});var WIe=s(SM);_0e=n(WIe,"STRONG",{});var V6t=s(_0e);sbr=r(V6t,"speech_to_text"),V6t.forEach(t),lbr=r(WIe," \u2014 "),KH=n(WIe,"A",{href:!0});var X6t=s(KH);ibr=r(X6t,"TFSpeech2TextModel"),X6t.forEach(t),dbr=r(WIe," (Speech2Text model)"),WIe.forEach(t),cbr=i(D),RM=n(D,"LI",{});var HIe=s(RM);u0e=n(HIe,"STRONG",{});var z6t=s(u0e);fbr=r(z6t,"swin"),z6t.forEach(t),mbr=r(HIe," \u2014 "),ZH=n(HIe,"A",{href:!0});var Q6t=s(ZH);gbr=r(Q6t,"TFSwinModel"),Q6t.forEach(t),hbr=r(HIe," (Swin Transformer model)"),HIe.forEach(t),pbr=i(D),PM=n(D,"LI",{});var UIe=s(PM);b0e=n(UIe,"STRONG",{});var W6t=s(b0e);_br=r(W6t,"t5"),W6t.forEach(t),ubr=r(UIe," \u2014 "),eU=n(UIe,"A",{href:!0});var H6t=s(eU);bbr=r(H6t,"TFT5Model"),H6t.forEach(t),vbr=r(UIe," (T5 model)"),UIe.forEach(t),Fbr=i(D),BM=n(D,"LI",{});var JIe=s(BM);v0e=n(JIe,"STRONG",{});var U6t=s(v0e);Tbr=r(U6t,"tapas"),U6t.forEach(t),Mbr=r(JIe," \u2014 "),oU=n(JIe,"A",{href:!0});var J6t=s(oU);Ebr=r(J6t,"TFTapasModel"),J6t.forEach(t),Cbr=r(JIe," (TAPAS model)"),JIe.forEach(t),wbr=i(D),IM=n(D,"LI",{});var YIe=s(IM);F0e=n(YIe,"STRONG",{});var Y6t=s(F0e);Abr=r(Y6t,"transfo-xl"),Y6t.forEach(t),Lbr=r(YIe," \u2014 "),rU=n(YIe,"A",{href:!0});var K6t=s(rU);ybr=r(K6t,"TFTransfoXLModel"),K6t.forEach(t),xbr=r(YIe," (Transformer-XL model)"),YIe.forEach(t),$br=i(D),NM=n(D,"LI",{});var KIe=s(NM);T0e=n(KIe,"STRONG",{});var Z6t=s(T0e);kbr=r(Z6t,"vit"),Z6t.forEach(t),Sbr=r(KIe," \u2014 "),tU=n(KIe,"A",{href:!0});var eLt=s(tU);Rbr=r(eLt,"TFViTModel"),eLt.forEach(t),Pbr=r(KIe," (ViT model)"),KIe.forEach(t),Bbr=i(D),qM=n(D,"LI",{});var ZIe=s(qM);M0e=n(ZIe,"STRONG",{});var oLt=s(M0e);Ibr=r(oLt,"vit_mae"),oLt.forEach(t),Nbr=r(ZIe," \u2014 "),aU=n(ZIe,"A",{href:!0});var rLt=s(aU);qbr=r(rLt,"TFViTMAEModel"),rLt.forEach(t),jbr=r(ZIe," (ViTMAE model)"),ZIe.forEach(t),Dbr=i(D),jM=n(D,"LI",{});var eNe=s(jM);E0e=n(eNe,"STRONG",{});var tLt=s(E0e);Gbr=r(tLt,"wav2vec2"),tLt.forEach(t),Obr=r(eNe," \u2014 "),nU=n(eNe,"A",{href:!0});var aLt=s(nU);Vbr=r(aLt,"TFWav2Vec2Model"),aLt.forEach(t),Xbr=r(eNe," (Wav2Vec2 model)"),eNe.forEach(t),zbr=i(D),DM=n(D,"LI",{});var oNe=s(DM);C0e=n(oNe,"STRONG",{});var nLt=s(C0e);Qbr=r(nLt,"xlm"),nLt.forEach(t),Wbr=r(oNe," \u2014 "),sU=n(oNe,"A",{href:!0});var sLt=s(sU);Hbr=r(sLt,"TFXLMModel"),sLt.forEach(t),Ubr=r(oNe," (XLM model)"),oNe.forEach(t),Jbr=i(D),GM=n(D,"LI",{});var rNe=s(GM);w0e=n(rNe,"STRONG",{});var lLt=s(w0e);Ybr=r(lLt,"xlm-roberta"),lLt.forEach(t),Kbr=r(rNe," \u2014 "),lU=n(rNe,"A",{href:!0});var iLt=s(lU);Zbr=r(iLt,"TFXLMRobertaModel"),iLt.forEach(t),evr=r(rNe," (XLM-RoBERTa model)"),rNe.forEach(t),ovr=i(D),OM=n(D,"LI",{});var tNe=s(OM);A0e=n(tNe,"STRONG",{});var dLt=s(A0e);rvr=r(dLt,"xlnet"),dLt.forEach(t),tvr=r(tNe," \u2014 "),iU=n(tNe,"A",{href:!0});var cLt=s(iU);avr=r(cLt,"TFXLNetModel"),cLt.forEach(t),nvr=r(tNe," (XLNet model)"),tNe.forEach(t),D.forEach(t),svr=i(wl),T(VM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),fVe=i(f),ac=n(f,"H2",{class:!0});var vze=s(ac);XM=n(vze,"A",{id:!0,class:!0,href:!0});var fLt=s(XM);L0e=n(fLt,"SPAN",{});var mLt=s(L0e);T(C9.$$.fragment,mLt),mLt.forEach(t),fLt.forEach(t),lvr=i(vze),y0e=n(vze,"SPAN",{});var gLt=s(y0e);ivr=r(gLt,"TFAutoModelForPreTraining"),gLt.forEach(t),vze.forEach(t),mVe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(w9.$$.fragment,Al),dvr=i(Al),nc=n(Al,"P",{});var Are=s(nc);cvr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dU=n(Are,"A",{href:!0});var hLt=s(dU);fvr=r(hLt,"from_pretrained()"),hLt.forEach(t),mvr=r(Are," class method or the "),cU=n(Are,"A",{href:!0});var pLt=s(cU);gvr=r(pLt,"from_config()"),pLt.forEach(t),hvr=r(Are,` class
method.`),Are.forEach(t),pvr=i(Al),A9=n(Al,"P",{});var Fze=s(A9);_vr=r(Fze,"This class cannot be instantiated directly using "),x0e=n(Fze,"CODE",{});var _Lt=s(x0e);uvr=r(_Lt,"__init__()"),_Lt.forEach(t),bvr=r(Fze," (throws an error)."),Fze.forEach(t),vvr=i(Al),kt=n(Al,"DIV",{class:!0});var S6=s(kt);T(L9.$$.fragment,S6),Fvr=i(S6),$0e=n(S6,"P",{});var uLt=s($0e);Tvr=r(uLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uLt.forEach(t),Mvr=i(S6),sc=n(S6,"P",{});var Lre=s(sc);Evr=r(Lre,`Note:
Loading a model from its configuration file does `),k0e=n(Lre,"STRONG",{});var bLt=s(k0e);Cvr=r(bLt,"not"),bLt.forEach(t),wvr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(Lre,"A",{href:!0});var vLt=s(fU);Avr=r(vLt,"from_pretrained()"),vLt.forEach(t),Lvr=r(Lre," to load the model weights."),Lre.forEach(t),yvr=i(S6),T(zM.$$.fragment,S6),S6.forEach(t),xvr=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(y9.$$.fragment,Ll),$vr=i(Ll),S0e=n(Ll,"P",{});var FLt=s(S0e);kvr=r(FLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FLt.forEach(t),Svr=i(Ll),nn=n(Ll,"P",{});var R6=s(nn);Rvr=r(R6,"The model class to instantiate is selected based on the "),R0e=n(R6,"CODE",{});var TLt=s(R0e);Pvr=r(TLt,"model_type"),TLt.forEach(t),Bvr=r(R6,` property of the config object (either
passed as an argument or loaded from `),P0e=n(R6,"CODE",{});var MLt=s(P0e);Ivr=r(MLt,"pretrained_model_name_or_path"),MLt.forEach(t),Nvr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(R6,"CODE",{});var ELt=s(B0e);qvr=r(ELt,"pretrained_model_name_or_path"),ELt.forEach(t),jvr=r(R6,":"),R6.forEach(t),Dvr=i(Ll),se=n(Ll,"UL",{});var le=s(se);QM=n(le,"LI",{});var aNe=s(QM);I0e=n(aNe,"STRONG",{});var CLt=s(I0e);Gvr=r(CLt,"albert"),CLt.forEach(t),Ovr=r(aNe," \u2014 "),mU=n(aNe,"A",{href:!0});var wLt=s(mU);Vvr=r(wLt,"TFAlbertForPreTraining"),wLt.forEach(t),Xvr=r(aNe," (ALBERT model)"),aNe.forEach(t),zvr=i(le),WM=n(le,"LI",{});var nNe=s(WM);N0e=n(nNe,"STRONG",{});var ALt=s(N0e);Qvr=r(ALt,"bart"),ALt.forEach(t),Wvr=r(nNe," \u2014 "),gU=n(nNe,"A",{href:!0});var LLt=s(gU);Hvr=r(LLt,"TFBartForConditionalGeneration"),LLt.forEach(t),Uvr=r(nNe," (BART model)"),nNe.forEach(t),Jvr=i(le),HM=n(le,"LI",{});var sNe=s(HM);q0e=n(sNe,"STRONG",{});var yLt=s(q0e);Yvr=r(yLt,"bert"),yLt.forEach(t),Kvr=r(sNe," \u2014 "),hU=n(sNe,"A",{href:!0});var xLt=s(hU);Zvr=r(xLt,"TFBertForPreTraining"),xLt.forEach(t),e0r=r(sNe," (BERT model)"),sNe.forEach(t),o0r=i(le),UM=n(le,"LI",{});var lNe=s(UM);j0e=n(lNe,"STRONG",{});var $Lt=s(j0e);r0r=r($Lt,"camembert"),$Lt.forEach(t),t0r=r(lNe," \u2014 "),pU=n(lNe,"A",{href:!0});var kLt=s(pU);a0r=r(kLt,"TFCamembertForMaskedLM"),kLt.forEach(t),n0r=r(lNe," (CamemBERT model)"),lNe.forEach(t),s0r=i(le),JM=n(le,"LI",{});var iNe=s(JM);D0e=n(iNe,"STRONG",{});var SLt=s(D0e);l0r=r(SLt,"ctrl"),SLt.forEach(t),i0r=r(iNe," \u2014 "),_U=n(iNe,"A",{href:!0});var RLt=s(_U);d0r=r(RLt,"TFCTRLLMHeadModel"),RLt.forEach(t),c0r=r(iNe," (CTRL model)"),iNe.forEach(t),f0r=i(le),YM=n(le,"LI",{});var dNe=s(YM);G0e=n(dNe,"STRONG",{});var PLt=s(G0e);m0r=r(PLt,"distilbert"),PLt.forEach(t),g0r=r(dNe," \u2014 "),uU=n(dNe,"A",{href:!0});var BLt=s(uU);h0r=r(BLt,"TFDistilBertForMaskedLM"),BLt.forEach(t),p0r=r(dNe," (DistilBERT model)"),dNe.forEach(t),_0r=i(le),KM=n(le,"LI",{});var cNe=s(KM);O0e=n(cNe,"STRONG",{});var ILt=s(O0e);u0r=r(ILt,"electra"),ILt.forEach(t),b0r=r(cNe," \u2014 "),bU=n(cNe,"A",{href:!0});var NLt=s(bU);v0r=r(NLt,"TFElectraForPreTraining"),NLt.forEach(t),F0r=r(cNe," (ELECTRA model)"),cNe.forEach(t),T0r=i(le),ZM=n(le,"LI",{});var fNe=s(ZM);V0e=n(fNe,"STRONG",{});var qLt=s(V0e);M0r=r(qLt,"flaubert"),qLt.forEach(t),E0r=r(fNe," \u2014 "),vU=n(fNe,"A",{href:!0});var jLt=s(vU);C0r=r(jLt,"TFFlaubertWithLMHeadModel"),jLt.forEach(t),w0r=r(fNe," (FlauBERT model)"),fNe.forEach(t),A0r=i(le),eE=n(le,"LI",{});var mNe=s(eE);X0e=n(mNe,"STRONG",{});var DLt=s(X0e);L0r=r(DLt,"funnel"),DLt.forEach(t),y0r=r(mNe," \u2014 "),FU=n(mNe,"A",{href:!0});var GLt=s(FU);x0r=r(GLt,"TFFunnelForPreTraining"),GLt.forEach(t),$0r=r(mNe," (Funnel Transformer model)"),mNe.forEach(t),k0r=i(le),oE=n(le,"LI",{});var gNe=s(oE);z0e=n(gNe,"STRONG",{});var OLt=s(z0e);S0r=r(OLt,"gpt2"),OLt.forEach(t),R0r=r(gNe," \u2014 "),TU=n(gNe,"A",{href:!0});var VLt=s(TU);P0r=r(VLt,"TFGPT2LMHeadModel"),VLt.forEach(t),B0r=r(gNe," (OpenAI GPT-2 model)"),gNe.forEach(t),I0r=i(le),rE=n(le,"LI",{});var hNe=s(rE);Q0e=n(hNe,"STRONG",{});var XLt=s(Q0e);N0r=r(XLt,"layoutlm"),XLt.forEach(t),q0r=r(hNe," \u2014 "),MU=n(hNe,"A",{href:!0});var zLt=s(MU);j0r=r(zLt,"TFLayoutLMForMaskedLM"),zLt.forEach(t),D0r=r(hNe," (LayoutLM model)"),hNe.forEach(t),G0r=i(le),tE=n(le,"LI",{});var pNe=s(tE);W0e=n(pNe,"STRONG",{});var QLt=s(W0e);O0r=r(QLt,"lxmert"),QLt.forEach(t),V0r=r(pNe," \u2014 "),EU=n(pNe,"A",{href:!0});var WLt=s(EU);X0r=r(WLt,"TFLxmertForPreTraining"),WLt.forEach(t),z0r=r(pNe," (LXMERT model)"),pNe.forEach(t),Q0r=i(le),aE=n(le,"LI",{});var _Ne=s(aE);H0e=n(_Ne,"STRONG",{});var HLt=s(H0e);W0r=r(HLt,"mobilebert"),HLt.forEach(t),H0r=r(_Ne," \u2014 "),CU=n(_Ne,"A",{href:!0});var ULt=s(CU);U0r=r(ULt,"TFMobileBertForPreTraining"),ULt.forEach(t),J0r=r(_Ne," (MobileBERT model)"),_Ne.forEach(t),Y0r=i(le),nE=n(le,"LI",{});var uNe=s(nE);U0e=n(uNe,"STRONG",{});var JLt=s(U0e);K0r=r(JLt,"mpnet"),JLt.forEach(t),Z0r=r(uNe," \u2014 "),wU=n(uNe,"A",{href:!0});var YLt=s(wU);eFr=r(YLt,"TFMPNetForMaskedLM"),YLt.forEach(t),oFr=r(uNe," (MPNet model)"),uNe.forEach(t),rFr=i(le),sE=n(le,"LI",{});var bNe=s(sE);J0e=n(bNe,"STRONG",{});var KLt=s(J0e);tFr=r(KLt,"openai-gpt"),KLt.forEach(t),aFr=r(bNe," \u2014 "),AU=n(bNe,"A",{href:!0});var ZLt=s(AU);nFr=r(ZLt,"TFOpenAIGPTLMHeadModel"),ZLt.forEach(t),sFr=r(bNe," (OpenAI GPT model)"),bNe.forEach(t),lFr=i(le),lE=n(le,"LI",{});var vNe=s(lE);Y0e=n(vNe,"STRONG",{});var eyt=s(Y0e);iFr=r(eyt,"roberta"),eyt.forEach(t),dFr=r(vNe," \u2014 "),LU=n(vNe,"A",{href:!0});var oyt=s(LU);cFr=r(oyt,"TFRobertaForMaskedLM"),oyt.forEach(t),fFr=r(vNe," (RoBERTa model)"),vNe.forEach(t),mFr=i(le),iE=n(le,"LI",{});var FNe=s(iE);K0e=n(FNe,"STRONG",{});var ryt=s(K0e);gFr=r(ryt,"t5"),ryt.forEach(t),hFr=r(FNe," \u2014 "),yU=n(FNe,"A",{href:!0});var tyt=s(yU);pFr=r(tyt,"TFT5ForConditionalGeneration"),tyt.forEach(t),_Fr=r(FNe," (T5 model)"),FNe.forEach(t),uFr=i(le),dE=n(le,"LI",{});var TNe=s(dE);Z0e=n(TNe,"STRONG",{});var ayt=s(Z0e);bFr=r(ayt,"tapas"),ayt.forEach(t),vFr=r(TNe," \u2014 "),xU=n(TNe,"A",{href:!0});var nyt=s(xU);FFr=r(nyt,"TFTapasForMaskedLM"),nyt.forEach(t),TFr=r(TNe," (TAPAS model)"),TNe.forEach(t),MFr=i(le),cE=n(le,"LI",{});var MNe=s(cE);eFe=n(MNe,"STRONG",{});var syt=s(eFe);EFr=r(syt,"transfo-xl"),syt.forEach(t),CFr=r(MNe," \u2014 "),$U=n(MNe,"A",{href:!0});var lyt=s($U);wFr=r(lyt,"TFTransfoXLLMHeadModel"),lyt.forEach(t),AFr=r(MNe," (Transformer-XL model)"),MNe.forEach(t),LFr=i(le),fE=n(le,"LI",{});var ENe=s(fE);oFe=n(ENe,"STRONG",{});var iyt=s(oFe);yFr=r(iyt,"vit_mae"),iyt.forEach(t),xFr=r(ENe," \u2014 "),kU=n(ENe,"A",{href:!0});var dyt=s(kU);$Fr=r(dyt,"TFViTMAEForPreTraining"),dyt.forEach(t),kFr=r(ENe," (ViTMAE model)"),ENe.forEach(t),SFr=i(le),mE=n(le,"LI",{});var CNe=s(mE);rFe=n(CNe,"STRONG",{});var cyt=s(rFe);RFr=r(cyt,"xlm"),cyt.forEach(t),PFr=r(CNe," \u2014 "),SU=n(CNe,"A",{href:!0});var fyt=s(SU);BFr=r(fyt,"TFXLMWithLMHeadModel"),fyt.forEach(t),IFr=r(CNe," (XLM model)"),CNe.forEach(t),NFr=i(le),gE=n(le,"LI",{});var wNe=s(gE);tFe=n(wNe,"STRONG",{});var myt=s(tFe);qFr=r(myt,"xlm-roberta"),myt.forEach(t),jFr=r(wNe," \u2014 "),RU=n(wNe,"A",{href:!0});var gyt=s(RU);DFr=r(gyt,"TFXLMRobertaForMaskedLM"),gyt.forEach(t),GFr=r(wNe," (XLM-RoBERTa model)"),wNe.forEach(t),OFr=i(le),hE=n(le,"LI",{});var ANe=s(hE);aFe=n(ANe,"STRONG",{});var hyt=s(aFe);VFr=r(hyt,"xlnet"),hyt.forEach(t),XFr=r(ANe," \u2014 "),PU=n(ANe,"A",{href:!0});var pyt=s(PU);zFr=r(pyt,"TFXLNetLMHeadModel"),pyt.forEach(t),QFr=r(ANe," (XLNet model)"),ANe.forEach(t),le.forEach(t),WFr=i(Ll),T(pE.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),gVe=i(f),lc=n(f,"H2",{class:!0});var Tze=s(lc);_E=n(Tze,"A",{id:!0,class:!0,href:!0});var _yt=s(_E);nFe=n(_yt,"SPAN",{});var uyt=s(nFe);T(x9.$$.fragment,uyt),uyt.forEach(t),_yt.forEach(t),HFr=i(Tze),sFe=n(Tze,"SPAN",{});var byt=s(sFe);UFr=r(byt,"TFAutoModelForCausalLM"),byt.forEach(t),Tze.forEach(t),hVe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T($9.$$.fragment,yl),JFr=i(yl),ic=n(yl,"P",{});var yre=s(ic);YFr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BU=n(yre,"A",{href:!0});var vyt=s(BU);KFr=r(vyt,"from_pretrained()"),vyt.forEach(t),ZFr=r(yre," class method or the "),IU=n(yre,"A",{href:!0});var Fyt=s(IU);eTr=r(Fyt,"from_config()"),Fyt.forEach(t),oTr=r(yre,` class
method.`),yre.forEach(t),rTr=i(yl),k9=n(yl,"P",{});var Mze=s(k9);tTr=r(Mze,"This class cannot be instantiated directly using "),lFe=n(Mze,"CODE",{});var Tyt=s(lFe);aTr=r(Tyt,"__init__()"),Tyt.forEach(t),nTr=r(Mze," (throws an error)."),Mze.forEach(t),sTr=i(yl),St=n(yl,"DIV",{class:!0});var P6=s(St);T(S9.$$.fragment,P6),lTr=i(P6),iFe=n(P6,"P",{});var Myt=s(iFe);iTr=r(Myt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Myt.forEach(t),dTr=i(P6),dc=n(P6,"P",{});var xre=s(dc);cTr=r(xre,`Note:
Loading a model from its configuration file does `),dFe=n(xre,"STRONG",{});var Eyt=s(dFe);fTr=r(Eyt,"not"),Eyt.forEach(t),mTr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(xre,"A",{href:!0});var Cyt=s(NU);gTr=r(Cyt,"from_pretrained()"),Cyt.forEach(t),hTr=r(xre," to load the model weights."),xre.forEach(t),pTr=i(P6),T(uE.$$.fragment,P6),P6.forEach(t),_Tr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(R9.$$.fragment,xl),uTr=i(xl),cFe=n(xl,"P",{});var wyt=s(cFe);bTr=r(wyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wyt.forEach(t),vTr=i(xl),sn=n(xl,"P",{});var B6=s(sn);FTr=r(B6,"The model class to instantiate is selected based on the "),fFe=n(B6,"CODE",{});var Ayt=s(fFe);TTr=r(Ayt,"model_type"),Ayt.forEach(t),MTr=r(B6,` property of the config object (either
passed as an argument or loaded from `),mFe=n(B6,"CODE",{});var Lyt=s(mFe);ETr=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),CTr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(B6,"CODE",{});var yyt=s(gFe);wTr=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),ATr=r(B6,":"),B6.forEach(t),LTr=i(xl),Me=n(xl,"UL",{});var Ce=s(Me);bE=n(Ce,"LI",{});var LNe=s(bE);hFe=n(LNe,"STRONG",{});var xyt=s(hFe);yTr=r(xyt,"bert"),xyt.forEach(t),xTr=r(LNe," \u2014 "),qU=n(LNe,"A",{href:!0});var $yt=s(qU);$Tr=r($yt,"TFBertLMHeadModel"),$yt.forEach(t),kTr=r(LNe," (BERT model)"),LNe.forEach(t),STr=i(Ce),vE=n(Ce,"LI",{});var yNe=s(vE);pFe=n(yNe,"STRONG",{});var kyt=s(pFe);RTr=r(kyt,"camembert"),kyt.forEach(t),PTr=r(yNe," \u2014 "),jU=n(yNe,"A",{href:!0});var Syt=s(jU);BTr=r(Syt,"TFCamembertForCausalLM"),Syt.forEach(t),ITr=r(yNe," (CamemBERT model)"),yNe.forEach(t),NTr=i(Ce),FE=n(Ce,"LI",{});var xNe=s(FE);_Fe=n(xNe,"STRONG",{});var Ryt=s(_Fe);qTr=r(Ryt,"ctrl"),Ryt.forEach(t),jTr=r(xNe," \u2014 "),DU=n(xNe,"A",{href:!0});var Pyt=s(DU);DTr=r(Pyt,"TFCTRLLMHeadModel"),Pyt.forEach(t),GTr=r(xNe," (CTRL model)"),xNe.forEach(t),OTr=i(Ce),TE=n(Ce,"LI",{});var $Ne=s(TE);uFe=n($Ne,"STRONG",{});var Byt=s(uFe);VTr=r(Byt,"gpt2"),Byt.forEach(t),XTr=r($Ne," \u2014 "),GU=n($Ne,"A",{href:!0});var Iyt=s(GU);zTr=r(Iyt,"TFGPT2LMHeadModel"),Iyt.forEach(t),QTr=r($Ne," (OpenAI GPT-2 model)"),$Ne.forEach(t),WTr=i(Ce),ME=n(Ce,"LI",{});var kNe=s(ME);bFe=n(kNe,"STRONG",{});var Nyt=s(bFe);HTr=r(Nyt,"gptj"),Nyt.forEach(t),UTr=r(kNe," \u2014 "),OU=n(kNe,"A",{href:!0});var qyt=s(OU);JTr=r(qyt,"TFGPTJForCausalLM"),qyt.forEach(t),YTr=r(kNe," (GPT-J model)"),kNe.forEach(t),KTr=i(Ce),EE=n(Ce,"LI",{});var SNe=s(EE);vFe=n(SNe,"STRONG",{});var jyt=s(vFe);ZTr=r(jyt,"openai-gpt"),jyt.forEach(t),eMr=r(SNe," \u2014 "),VU=n(SNe,"A",{href:!0});var Dyt=s(VU);oMr=r(Dyt,"TFOpenAIGPTLMHeadModel"),Dyt.forEach(t),rMr=r(SNe," (OpenAI GPT model)"),SNe.forEach(t),tMr=i(Ce),CE=n(Ce,"LI",{});var RNe=s(CE);FFe=n(RNe,"STRONG",{});var Gyt=s(FFe);aMr=r(Gyt,"opt"),Gyt.forEach(t),nMr=r(RNe," \u2014 "),XU=n(RNe,"A",{href:!0});var Oyt=s(XU);sMr=r(Oyt,"TFOPTForCausalLM"),Oyt.forEach(t),lMr=r(RNe," (OPT model)"),RNe.forEach(t),iMr=i(Ce),wE=n(Ce,"LI",{});var PNe=s(wE);TFe=n(PNe,"STRONG",{});var Vyt=s(TFe);dMr=r(Vyt,"rembert"),Vyt.forEach(t),cMr=r(PNe," \u2014 "),zU=n(PNe,"A",{href:!0});var Xyt=s(zU);fMr=r(Xyt,"TFRemBertForCausalLM"),Xyt.forEach(t),mMr=r(PNe," (RemBERT model)"),PNe.forEach(t),gMr=i(Ce),AE=n(Ce,"LI",{});var BNe=s(AE);MFe=n(BNe,"STRONG",{});var zyt=s(MFe);hMr=r(zyt,"roberta"),zyt.forEach(t),pMr=r(BNe," \u2014 "),QU=n(BNe,"A",{href:!0});var Qyt=s(QU);_Mr=r(Qyt,"TFRobertaForCausalLM"),Qyt.forEach(t),uMr=r(BNe," (RoBERTa model)"),BNe.forEach(t),bMr=i(Ce),LE=n(Ce,"LI",{});var INe=s(LE);EFe=n(INe,"STRONG",{});var Wyt=s(EFe);vMr=r(Wyt,"roformer"),Wyt.forEach(t),FMr=r(INe," \u2014 "),WU=n(INe,"A",{href:!0});var Hyt=s(WU);TMr=r(Hyt,"TFRoFormerForCausalLM"),Hyt.forEach(t),MMr=r(INe," (RoFormer model)"),INe.forEach(t),EMr=i(Ce),yE=n(Ce,"LI",{});var NNe=s(yE);CFe=n(NNe,"STRONG",{});var Uyt=s(CFe);CMr=r(Uyt,"transfo-xl"),Uyt.forEach(t),wMr=r(NNe," \u2014 "),HU=n(NNe,"A",{href:!0});var Jyt=s(HU);AMr=r(Jyt,"TFTransfoXLLMHeadModel"),Jyt.forEach(t),LMr=r(NNe," (Transformer-XL model)"),NNe.forEach(t),yMr=i(Ce),xE=n(Ce,"LI",{});var qNe=s(xE);wFe=n(qNe,"STRONG",{});var Yyt=s(wFe);xMr=r(Yyt,"xlm"),Yyt.forEach(t),$Mr=r(qNe," \u2014 "),UU=n(qNe,"A",{href:!0});var Kyt=s(UU);kMr=r(Kyt,"TFXLMWithLMHeadModel"),Kyt.forEach(t),SMr=r(qNe," (XLM model)"),qNe.forEach(t),RMr=i(Ce),$E=n(Ce,"LI",{});var jNe=s($E);AFe=n(jNe,"STRONG",{});var Zyt=s(AFe);PMr=r(Zyt,"xlnet"),Zyt.forEach(t),BMr=r(jNe," \u2014 "),JU=n(jNe,"A",{href:!0});var e8t=s(JU);IMr=r(e8t,"TFXLNetLMHeadModel"),e8t.forEach(t),NMr=r(jNe," (XLNet model)"),jNe.forEach(t),Ce.forEach(t),qMr=i(xl),T(kE.$$.fragment,xl),xl.forEach(t),yl.forEach(t),pVe=i(f),cc=n(f,"H2",{class:!0});var Eze=s(cc);SE=n(Eze,"A",{id:!0,class:!0,href:!0});var o8t=s(SE);LFe=n(o8t,"SPAN",{});var r8t=s(LFe);T(P9.$$.fragment,r8t),r8t.forEach(t),o8t.forEach(t),jMr=i(Eze),yFe=n(Eze,"SPAN",{});var t8t=s(yFe);DMr=r(t8t,"TFAutoModelForImageClassification"),t8t.forEach(t),Eze.forEach(t),_Ve=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(B9.$$.fragment,$l),GMr=i($l),fc=n($l,"P",{});var $re=s(fc);OMr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YU=n($re,"A",{href:!0});var a8t=s(YU);VMr=r(a8t,"from_pretrained()"),a8t.forEach(t),XMr=r($re," class method or the "),KU=n($re,"A",{href:!0});var n8t=s(KU);zMr=r(n8t,"from_config()"),n8t.forEach(t),QMr=r($re,` class
method.`),$re.forEach(t),WMr=i($l),I9=n($l,"P",{});var Cze=s(I9);HMr=r(Cze,"This class cannot be instantiated directly using "),xFe=n(Cze,"CODE",{});var s8t=s(xFe);UMr=r(s8t,"__init__()"),s8t.forEach(t),JMr=r(Cze," (throws an error)."),Cze.forEach(t),YMr=i($l),Rt=n($l,"DIV",{class:!0});var I6=s(Rt);T(N9.$$.fragment,I6),KMr=i(I6),$Fe=n(I6,"P",{});var l8t=s($Fe);ZMr=r(l8t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),l8t.forEach(t),eEr=i(I6),mc=n(I6,"P",{});var kre=s(mc);oEr=r(kre,`Note:
Loading a model from its configuration file does `),kFe=n(kre,"STRONG",{});var i8t=s(kFe);rEr=r(i8t,"not"),i8t.forEach(t),tEr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(kre,"A",{href:!0});var d8t=s(ZU);aEr=r(d8t,"from_pretrained()"),d8t.forEach(t),nEr=r(kre," to load the model weights."),kre.forEach(t),sEr=i(I6),T(RE.$$.fragment,I6),I6.forEach(t),lEr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(q9.$$.fragment,kl),iEr=i(kl),SFe=n(kl,"P",{});var c8t=s(SFe);dEr=r(c8t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),c8t.forEach(t),cEr=i(kl),ln=n(kl,"P",{});var N6=s(ln);fEr=r(N6,"The model class to instantiate is selected based on the "),RFe=n(N6,"CODE",{});var f8t=s(RFe);mEr=r(f8t,"model_type"),f8t.forEach(t),gEr=r(N6,` property of the config object (either
passed as an argument or loaded from `),PFe=n(N6,"CODE",{});var m8t=s(PFe);hEr=r(m8t,"pretrained_model_name_or_path"),m8t.forEach(t),pEr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(N6,"CODE",{});var g8t=s(BFe);_Er=r(g8t,"pretrained_model_name_or_path"),g8t.forEach(t),uEr=r(N6,":"),N6.forEach(t),bEr=i(kl),dn=n(kl,"UL",{});var q6=s(dn);PE=n(q6,"LI",{});var DNe=s(PE);IFe=n(DNe,"STRONG",{});var h8t=s(IFe);vEr=r(h8t,"convnext"),h8t.forEach(t),FEr=r(DNe," \u2014 "),eJ=n(DNe,"A",{href:!0});var p8t=s(eJ);TEr=r(p8t,"TFConvNextForImageClassification"),p8t.forEach(t),MEr=r(DNe," (ConvNeXT model)"),DNe.forEach(t),EEr=i(q6),BE=n(q6,"LI",{});var GNe=s(BE);NFe=n(GNe,"STRONG",{});var _8t=s(NFe);CEr=r(_8t,"data2vec-vision"),_8t.forEach(t),wEr=r(GNe," \u2014 "),oJ=n(GNe,"A",{href:!0});var u8t=s(oJ);AEr=r(u8t,"TFData2VecVisionForImageClassification"),u8t.forEach(t),LEr=r(GNe," (Data2VecVision model)"),GNe.forEach(t),yEr=i(q6),IE=n(q6,"LI",{});var ONe=s(IE);qFe=n(ONe,"STRONG",{});var b8t=s(qFe);xEr=r(b8t,"swin"),b8t.forEach(t),$Er=r(ONe," \u2014 "),rJ=n(ONe,"A",{href:!0});var v8t=s(rJ);kEr=r(v8t,"TFSwinForImageClassification"),v8t.forEach(t),SEr=r(ONe," (Swin Transformer model)"),ONe.forEach(t),REr=i(q6),NE=n(q6,"LI",{});var VNe=s(NE);jFe=n(VNe,"STRONG",{});var F8t=s(jFe);PEr=r(F8t,"vit"),F8t.forEach(t),BEr=r(VNe," \u2014 "),tJ=n(VNe,"A",{href:!0});var T8t=s(tJ);IEr=r(T8t,"TFViTForImageClassification"),T8t.forEach(t),NEr=r(VNe," (ViT model)"),VNe.forEach(t),q6.forEach(t),qEr=i(kl),T(qE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),uVe=i(f),gc=n(f,"H2",{class:!0});var wze=s(gc);jE=n(wze,"A",{id:!0,class:!0,href:!0});var M8t=s(jE);DFe=n(M8t,"SPAN",{});var E8t=s(DFe);T(j9.$$.fragment,E8t),E8t.forEach(t),M8t.forEach(t),jEr=i(wze),GFe=n(wze,"SPAN",{});var C8t=s(GFe);DEr=r(C8t,"TFAutoModelForMaskedLM"),C8t.forEach(t),wze.forEach(t),bVe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(D9.$$.fragment,Sl),GEr=i(Sl),hc=n(Sl,"P",{});var Sre=s(hc);OEr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aJ=n(Sre,"A",{href:!0});var w8t=s(aJ);VEr=r(w8t,"from_pretrained()"),w8t.forEach(t),XEr=r(Sre," class method or the "),nJ=n(Sre,"A",{href:!0});var A8t=s(nJ);zEr=r(A8t,"from_config()"),A8t.forEach(t),QEr=r(Sre,` class
method.`),Sre.forEach(t),WEr=i(Sl),G9=n(Sl,"P",{});var Aze=s(G9);HEr=r(Aze,"This class cannot be instantiated directly using "),OFe=n(Aze,"CODE",{});var L8t=s(OFe);UEr=r(L8t,"__init__()"),L8t.forEach(t),JEr=r(Aze," (throws an error)."),Aze.forEach(t),YEr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var j6=s(Pt);T(O9.$$.fragment,j6),KEr=i(j6),VFe=n(j6,"P",{});var y8t=s(VFe);ZEr=r(y8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y8t.forEach(t),e4r=i(j6),pc=n(j6,"P",{});var Rre=s(pc);o4r=r(Rre,`Note:
Loading a model from its configuration file does `),XFe=n(Rre,"STRONG",{});var x8t=s(XFe);r4r=r(x8t,"not"),x8t.forEach(t),t4r=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(Rre,"A",{href:!0});var $8t=s(sJ);a4r=r($8t,"from_pretrained()"),$8t.forEach(t),n4r=r(Rre," to load the model weights."),Rre.forEach(t),s4r=i(j6),T(DE.$$.fragment,j6),j6.forEach(t),l4r=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(V9.$$.fragment,Rl),i4r=i(Rl),zFe=n(Rl,"P",{});var k8t=s(zFe);d4r=r(k8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k8t.forEach(t),c4r=i(Rl),cn=n(Rl,"P",{});var D6=s(cn);f4r=r(D6,"The model class to instantiate is selected based on the "),QFe=n(D6,"CODE",{});var S8t=s(QFe);m4r=r(S8t,"model_type"),S8t.forEach(t),g4r=r(D6,` property of the config object (either
passed as an argument or loaded from `),WFe=n(D6,"CODE",{});var R8t=s(WFe);h4r=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),p4r=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(D6,"CODE",{});var P8t=s(HFe);_4r=r(P8t,"pretrained_model_name_or_path"),P8t.forEach(t),u4r=r(D6,":"),D6.forEach(t),b4r=i(Rl),ie=n(Rl,"UL",{});var fe=s(ie);GE=n(fe,"LI",{});var XNe=s(GE);UFe=n(XNe,"STRONG",{});var B8t=s(UFe);v4r=r(B8t,"albert"),B8t.forEach(t),F4r=r(XNe," \u2014 "),lJ=n(XNe,"A",{href:!0});var I8t=s(lJ);T4r=r(I8t,"TFAlbertForMaskedLM"),I8t.forEach(t),M4r=r(XNe," (ALBERT model)"),XNe.forEach(t),E4r=i(fe),OE=n(fe,"LI",{});var zNe=s(OE);JFe=n(zNe,"STRONG",{});var N8t=s(JFe);C4r=r(N8t,"bert"),N8t.forEach(t),w4r=r(zNe," \u2014 "),iJ=n(zNe,"A",{href:!0});var q8t=s(iJ);A4r=r(q8t,"TFBertForMaskedLM"),q8t.forEach(t),L4r=r(zNe," (BERT model)"),zNe.forEach(t),y4r=i(fe),VE=n(fe,"LI",{});var QNe=s(VE);YFe=n(QNe,"STRONG",{});var j8t=s(YFe);x4r=r(j8t,"camembert"),j8t.forEach(t),$4r=r(QNe," \u2014 "),dJ=n(QNe,"A",{href:!0});var D8t=s(dJ);k4r=r(D8t,"TFCamembertForMaskedLM"),D8t.forEach(t),S4r=r(QNe," (CamemBERT model)"),QNe.forEach(t),R4r=i(fe),XE=n(fe,"LI",{});var WNe=s(XE);KFe=n(WNe,"STRONG",{});var G8t=s(KFe);P4r=r(G8t,"convbert"),G8t.forEach(t),B4r=r(WNe," \u2014 "),cJ=n(WNe,"A",{href:!0});var O8t=s(cJ);I4r=r(O8t,"TFConvBertForMaskedLM"),O8t.forEach(t),N4r=r(WNe," (ConvBERT model)"),WNe.forEach(t),q4r=i(fe),zE=n(fe,"LI",{});var HNe=s(zE);ZFe=n(HNe,"STRONG",{});var V8t=s(ZFe);j4r=r(V8t,"deberta"),V8t.forEach(t),D4r=r(HNe," \u2014 "),fJ=n(HNe,"A",{href:!0});var X8t=s(fJ);G4r=r(X8t,"TFDebertaForMaskedLM"),X8t.forEach(t),O4r=r(HNe," (DeBERTa model)"),HNe.forEach(t),V4r=i(fe),QE=n(fe,"LI",{});var UNe=s(QE);eTe=n(UNe,"STRONG",{});var z8t=s(eTe);X4r=r(z8t,"deberta-v2"),z8t.forEach(t),z4r=r(UNe," \u2014 "),mJ=n(UNe,"A",{href:!0});var Q8t=s(mJ);Q4r=r(Q8t,"TFDebertaV2ForMaskedLM"),Q8t.forEach(t),W4r=r(UNe," (DeBERTa-v2 model)"),UNe.forEach(t),H4r=i(fe),WE=n(fe,"LI",{});var JNe=s(WE);oTe=n(JNe,"STRONG",{});var W8t=s(oTe);U4r=r(W8t,"distilbert"),W8t.forEach(t),J4r=r(JNe," \u2014 "),gJ=n(JNe,"A",{href:!0});var H8t=s(gJ);Y4r=r(H8t,"TFDistilBertForMaskedLM"),H8t.forEach(t),K4r=r(JNe," (DistilBERT model)"),JNe.forEach(t),Z4r=i(fe),HE=n(fe,"LI",{});var YNe=s(HE);rTe=n(YNe,"STRONG",{});var U8t=s(rTe);eCr=r(U8t,"electra"),U8t.forEach(t),oCr=r(YNe," \u2014 "),hJ=n(YNe,"A",{href:!0});var J8t=s(hJ);rCr=r(J8t,"TFElectraForMaskedLM"),J8t.forEach(t),tCr=r(YNe," (ELECTRA model)"),YNe.forEach(t),aCr=i(fe),UE=n(fe,"LI",{});var KNe=s(UE);tTe=n(KNe,"STRONG",{});var Y8t=s(tTe);nCr=r(Y8t,"flaubert"),Y8t.forEach(t),sCr=r(KNe," \u2014 "),pJ=n(KNe,"A",{href:!0});var K8t=s(pJ);lCr=r(K8t,"TFFlaubertWithLMHeadModel"),K8t.forEach(t),iCr=r(KNe," (FlauBERT model)"),KNe.forEach(t),dCr=i(fe),JE=n(fe,"LI",{});var ZNe=s(JE);aTe=n(ZNe,"STRONG",{});var Z8t=s(aTe);cCr=r(Z8t,"funnel"),Z8t.forEach(t),fCr=r(ZNe," \u2014 "),_J=n(ZNe,"A",{href:!0});var e9t=s(_J);mCr=r(e9t,"TFFunnelForMaskedLM"),e9t.forEach(t),gCr=r(ZNe," (Funnel Transformer model)"),ZNe.forEach(t),hCr=i(fe),YE=n(fe,"LI",{});var eqe=s(YE);nTe=n(eqe,"STRONG",{});var o9t=s(nTe);pCr=r(o9t,"layoutlm"),o9t.forEach(t),_Cr=r(eqe," \u2014 "),uJ=n(eqe,"A",{href:!0});var r9t=s(uJ);uCr=r(r9t,"TFLayoutLMForMaskedLM"),r9t.forEach(t),bCr=r(eqe," (LayoutLM model)"),eqe.forEach(t),vCr=i(fe),KE=n(fe,"LI",{});var oqe=s(KE);sTe=n(oqe,"STRONG",{});var t9t=s(sTe);FCr=r(t9t,"longformer"),t9t.forEach(t),TCr=r(oqe," \u2014 "),bJ=n(oqe,"A",{href:!0});var a9t=s(bJ);MCr=r(a9t,"TFLongformerForMaskedLM"),a9t.forEach(t),ECr=r(oqe," (Longformer model)"),oqe.forEach(t),CCr=i(fe),ZE=n(fe,"LI",{});var rqe=s(ZE);lTe=n(rqe,"STRONG",{});var n9t=s(lTe);wCr=r(n9t,"mobilebert"),n9t.forEach(t),ACr=r(rqe," \u2014 "),vJ=n(rqe,"A",{href:!0});var s9t=s(vJ);LCr=r(s9t,"TFMobileBertForMaskedLM"),s9t.forEach(t),yCr=r(rqe," (MobileBERT model)"),rqe.forEach(t),xCr=i(fe),e4=n(fe,"LI",{});var tqe=s(e4);iTe=n(tqe,"STRONG",{});var l9t=s(iTe);$Cr=r(l9t,"mpnet"),l9t.forEach(t),kCr=r(tqe," \u2014 "),FJ=n(tqe,"A",{href:!0});var i9t=s(FJ);SCr=r(i9t,"TFMPNetForMaskedLM"),i9t.forEach(t),RCr=r(tqe," (MPNet model)"),tqe.forEach(t),PCr=i(fe),o4=n(fe,"LI",{});var aqe=s(o4);dTe=n(aqe,"STRONG",{});var d9t=s(dTe);BCr=r(d9t,"rembert"),d9t.forEach(t),ICr=r(aqe," \u2014 "),TJ=n(aqe,"A",{href:!0});var c9t=s(TJ);NCr=r(c9t,"TFRemBertForMaskedLM"),c9t.forEach(t),qCr=r(aqe," (RemBERT model)"),aqe.forEach(t),jCr=i(fe),r4=n(fe,"LI",{});var nqe=s(r4);cTe=n(nqe,"STRONG",{});var f9t=s(cTe);DCr=r(f9t,"roberta"),f9t.forEach(t),GCr=r(nqe," \u2014 "),MJ=n(nqe,"A",{href:!0});var m9t=s(MJ);OCr=r(m9t,"TFRobertaForMaskedLM"),m9t.forEach(t),VCr=r(nqe," (RoBERTa model)"),nqe.forEach(t),XCr=i(fe),t4=n(fe,"LI",{});var sqe=s(t4);fTe=n(sqe,"STRONG",{});var g9t=s(fTe);zCr=r(g9t,"roformer"),g9t.forEach(t),QCr=r(sqe," \u2014 "),EJ=n(sqe,"A",{href:!0});var h9t=s(EJ);WCr=r(h9t,"TFRoFormerForMaskedLM"),h9t.forEach(t),HCr=r(sqe," (RoFormer model)"),sqe.forEach(t),UCr=i(fe),a4=n(fe,"LI",{});var lqe=s(a4);mTe=n(lqe,"STRONG",{});var p9t=s(mTe);JCr=r(p9t,"tapas"),p9t.forEach(t),YCr=r(lqe," \u2014 "),CJ=n(lqe,"A",{href:!0});var _9t=s(CJ);KCr=r(_9t,"TFTapasForMaskedLM"),_9t.forEach(t),ZCr=r(lqe," (TAPAS model)"),lqe.forEach(t),e5r=i(fe),n4=n(fe,"LI",{});var iqe=s(n4);gTe=n(iqe,"STRONG",{});var u9t=s(gTe);o5r=r(u9t,"xlm"),u9t.forEach(t),r5r=r(iqe," \u2014 "),wJ=n(iqe,"A",{href:!0});var b9t=s(wJ);t5r=r(b9t,"TFXLMWithLMHeadModel"),b9t.forEach(t),a5r=r(iqe," (XLM model)"),iqe.forEach(t),n5r=i(fe),s4=n(fe,"LI",{});var dqe=s(s4);hTe=n(dqe,"STRONG",{});var v9t=s(hTe);s5r=r(v9t,"xlm-roberta"),v9t.forEach(t),l5r=r(dqe," \u2014 "),AJ=n(dqe,"A",{href:!0});var F9t=s(AJ);i5r=r(F9t,"TFXLMRobertaForMaskedLM"),F9t.forEach(t),d5r=r(dqe," (XLM-RoBERTa model)"),dqe.forEach(t),fe.forEach(t),c5r=i(Rl),T(l4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),vVe=i(f),_c=n(f,"H2",{class:!0});var Lze=s(_c);i4=n(Lze,"A",{id:!0,class:!0,href:!0});var T9t=s(i4);pTe=n(T9t,"SPAN",{});var M9t=s(pTe);T(X9.$$.fragment,M9t),M9t.forEach(t),T9t.forEach(t),f5r=i(Lze),_Te=n(Lze,"SPAN",{});var E9t=s(_Te);m5r=r(E9t,"TFAutoModelForSeq2SeqLM"),E9t.forEach(t),Lze.forEach(t),FVe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(z9.$$.fragment,Pl),g5r=i(Pl),uc=n(Pl,"P",{});var Pre=s(uc);h5r=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LJ=n(Pre,"A",{href:!0});var C9t=s(LJ);p5r=r(C9t,"from_pretrained()"),C9t.forEach(t),_5r=r(Pre," class method or the "),yJ=n(Pre,"A",{href:!0});var w9t=s(yJ);u5r=r(w9t,"from_config()"),w9t.forEach(t),b5r=r(Pre,` class
method.`),Pre.forEach(t),v5r=i(Pl),Q9=n(Pl,"P",{});var yze=s(Q9);F5r=r(yze,"This class cannot be instantiated directly using "),uTe=n(yze,"CODE",{});var A9t=s(uTe);T5r=r(A9t,"__init__()"),A9t.forEach(t),M5r=r(yze," (throws an error)."),yze.forEach(t),E5r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var G6=s(Bt);T(W9.$$.fragment,G6),C5r=i(G6),bTe=n(G6,"P",{});var L9t=s(bTe);w5r=r(L9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),L9t.forEach(t),A5r=i(G6),bc=n(G6,"P",{});var Bre=s(bc);L5r=r(Bre,`Note:
Loading a model from its configuration file does `),vTe=n(Bre,"STRONG",{});var y9t=s(vTe);y5r=r(y9t,"not"),y9t.forEach(t),x5r=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(Bre,"A",{href:!0});var x9t=s(xJ);$5r=r(x9t,"from_pretrained()"),x9t.forEach(t),k5r=r(Bre," to load the model weights."),Bre.forEach(t),S5r=i(G6),T(d4.$$.fragment,G6),G6.forEach(t),R5r=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(H9.$$.fragment,Bl),P5r=i(Bl),FTe=n(Bl,"P",{});var $9t=s(FTe);B5r=r($9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$9t.forEach(t),I5r=i(Bl),fn=n(Bl,"P",{});var O6=s(fn);N5r=r(O6,"The model class to instantiate is selected based on the "),TTe=n(O6,"CODE",{});var k9t=s(TTe);q5r=r(k9t,"model_type"),k9t.forEach(t),j5r=r(O6,` property of the config object (either
passed as an argument or loaded from `),MTe=n(O6,"CODE",{});var S9t=s(MTe);D5r=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),G5r=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(O6,"CODE",{});var R9t=s(ETe);O5r=r(R9t,"pretrained_model_name_or_path"),R9t.forEach(t),V5r=r(O6,":"),O6.forEach(t),X5r=i(Bl),ye=n(Bl,"UL",{});var Ie=s(ye);c4=n(Ie,"LI",{});var cqe=s(c4);CTe=n(cqe,"STRONG",{});var P9t=s(CTe);z5r=r(P9t,"bart"),P9t.forEach(t),Q5r=r(cqe," \u2014 "),$J=n(cqe,"A",{href:!0});var B9t=s($J);W5r=r(B9t,"TFBartForConditionalGeneration"),B9t.forEach(t),H5r=r(cqe," (BART model)"),cqe.forEach(t),U5r=i(Ie),f4=n(Ie,"LI",{});var fqe=s(f4);wTe=n(fqe,"STRONG",{});var I9t=s(wTe);J5r=r(I9t,"blenderbot"),I9t.forEach(t),Y5r=r(fqe," \u2014 "),kJ=n(fqe,"A",{href:!0});var N9t=s(kJ);K5r=r(N9t,"TFBlenderbotForConditionalGeneration"),N9t.forEach(t),Z5r=r(fqe," (Blenderbot model)"),fqe.forEach(t),e3r=i(Ie),m4=n(Ie,"LI",{});var mqe=s(m4);ATe=n(mqe,"STRONG",{});var q9t=s(ATe);o3r=r(q9t,"blenderbot-small"),q9t.forEach(t),r3r=r(mqe," \u2014 "),SJ=n(mqe,"A",{href:!0});var j9t=s(SJ);t3r=r(j9t,"TFBlenderbotSmallForConditionalGeneration"),j9t.forEach(t),a3r=r(mqe," (BlenderbotSmall model)"),mqe.forEach(t),n3r=i(Ie),g4=n(Ie,"LI",{});var gqe=s(g4);LTe=n(gqe,"STRONG",{});var D9t=s(LTe);s3r=r(D9t,"encoder-decoder"),D9t.forEach(t),l3r=r(gqe," \u2014 "),RJ=n(gqe,"A",{href:!0});var G9t=s(RJ);i3r=r(G9t,"TFEncoderDecoderModel"),G9t.forEach(t),d3r=r(gqe," (Encoder decoder model)"),gqe.forEach(t),c3r=i(Ie),h4=n(Ie,"LI",{});var hqe=s(h4);yTe=n(hqe,"STRONG",{});var O9t=s(yTe);f3r=r(O9t,"led"),O9t.forEach(t),m3r=r(hqe," \u2014 "),PJ=n(hqe,"A",{href:!0});var V9t=s(PJ);g3r=r(V9t,"TFLEDForConditionalGeneration"),V9t.forEach(t),h3r=r(hqe," (LED model)"),hqe.forEach(t),p3r=i(Ie),p4=n(Ie,"LI",{});var pqe=s(p4);xTe=n(pqe,"STRONG",{});var X9t=s(xTe);_3r=r(X9t,"marian"),X9t.forEach(t),u3r=r(pqe," \u2014 "),BJ=n(pqe,"A",{href:!0});var z9t=s(BJ);b3r=r(z9t,"TFMarianMTModel"),z9t.forEach(t),v3r=r(pqe," (Marian model)"),pqe.forEach(t),F3r=i(Ie),_4=n(Ie,"LI",{});var _qe=s(_4);$Te=n(_qe,"STRONG",{});var Q9t=s($Te);T3r=r(Q9t,"mbart"),Q9t.forEach(t),M3r=r(_qe," \u2014 "),IJ=n(_qe,"A",{href:!0});var W9t=s(IJ);E3r=r(W9t,"TFMBartForConditionalGeneration"),W9t.forEach(t),C3r=r(_qe," (mBART model)"),_qe.forEach(t),w3r=i(Ie),u4=n(Ie,"LI",{});var uqe=s(u4);kTe=n(uqe,"STRONG",{});var H9t=s(kTe);A3r=r(H9t,"mt5"),H9t.forEach(t),L3r=r(uqe," \u2014 "),NJ=n(uqe,"A",{href:!0});var U9t=s(NJ);y3r=r(U9t,"TFMT5ForConditionalGeneration"),U9t.forEach(t),x3r=r(uqe," (MT5 model)"),uqe.forEach(t),$3r=i(Ie),b4=n(Ie,"LI",{});var bqe=s(b4);STe=n(bqe,"STRONG",{});var J9t=s(STe);k3r=r(J9t,"pegasus"),J9t.forEach(t),S3r=r(bqe," \u2014 "),qJ=n(bqe,"A",{href:!0});var Y9t=s(qJ);R3r=r(Y9t,"TFPegasusForConditionalGeneration"),Y9t.forEach(t),P3r=r(bqe," (Pegasus model)"),bqe.forEach(t),B3r=i(Ie),v4=n(Ie,"LI",{});var vqe=s(v4);RTe=n(vqe,"STRONG",{});var K9t=s(RTe);I3r=r(K9t,"t5"),K9t.forEach(t),N3r=r(vqe," \u2014 "),jJ=n(vqe,"A",{href:!0});var Z9t=s(jJ);q3r=r(Z9t,"TFT5ForConditionalGeneration"),Z9t.forEach(t),j3r=r(vqe," (T5 model)"),vqe.forEach(t),Ie.forEach(t),D3r=i(Bl),T(F4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),TVe=i(f),vc=n(f,"H2",{class:!0});var xze=s(vc);T4=n(xze,"A",{id:!0,class:!0,href:!0});var ext=s(T4);PTe=n(ext,"SPAN",{});var oxt=s(PTe);T(U9.$$.fragment,oxt),oxt.forEach(t),ext.forEach(t),G3r=i(xze),BTe=n(xze,"SPAN",{});var rxt=s(BTe);O3r=r(rxt,"TFAutoModelForSequenceClassification"),rxt.forEach(t),xze.forEach(t),MVe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(J9.$$.fragment,Il),V3r=i(Il),Fc=n(Il,"P",{});var Ire=s(Fc);X3r=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DJ=n(Ire,"A",{href:!0});var txt=s(DJ);z3r=r(txt,"from_pretrained()"),txt.forEach(t),Q3r=r(Ire," class method or the "),GJ=n(Ire,"A",{href:!0});var axt=s(GJ);W3r=r(axt,"from_config()"),axt.forEach(t),H3r=r(Ire,` class
method.`),Ire.forEach(t),U3r=i(Il),Y9=n(Il,"P",{});var $ze=s(Y9);J3r=r($ze,"This class cannot be instantiated directly using "),ITe=n($ze,"CODE",{});var nxt=s(ITe);Y3r=r(nxt,"__init__()"),nxt.forEach(t),K3r=r($ze," (throws an error)."),$ze.forEach(t),Z3r=i(Il),It=n(Il,"DIV",{class:!0});var V6=s(It);T(K9.$$.fragment,V6),ewr=i(V6),NTe=n(V6,"P",{});var sxt=s(NTe);owr=r(sxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sxt.forEach(t),rwr=i(V6),Tc=n(V6,"P",{});var Nre=s(Tc);twr=r(Nre,`Note:
Loading a model from its configuration file does `),qTe=n(Nre,"STRONG",{});var lxt=s(qTe);awr=r(lxt,"not"),lxt.forEach(t),nwr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(Nre,"A",{href:!0});var ixt=s(OJ);swr=r(ixt,"from_pretrained()"),ixt.forEach(t),lwr=r(Nre," to load the model weights."),Nre.forEach(t),iwr=i(V6),T(M4.$$.fragment,V6),V6.forEach(t),dwr=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(Z9.$$.fragment,Nl),cwr=i(Nl),jTe=n(Nl,"P",{});var dxt=s(jTe);fwr=r(dxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dxt.forEach(t),mwr=i(Nl),mn=n(Nl,"P",{});var X6=s(mn);gwr=r(X6,"The model class to instantiate is selected based on the "),DTe=n(X6,"CODE",{});var cxt=s(DTe);hwr=r(cxt,"model_type"),cxt.forEach(t),pwr=r(X6,` property of the config object (either
passed as an argument or loaded from `),GTe=n(X6,"CODE",{});var fxt=s(GTe);_wr=r(fxt,"pretrained_model_name_or_path"),fxt.forEach(t),uwr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=n(X6,"CODE",{});var mxt=s(OTe);bwr=r(mxt,"pretrained_model_name_or_path"),mxt.forEach(t),vwr=r(X6,":"),X6.forEach(t),Fwr=i(Nl),te=n(Nl,"UL",{});var ne=s(te);E4=n(ne,"LI",{});var Fqe=s(E4);VTe=n(Fqe,"STRONG",{});var gxt=s(VTe);Twr=r(gxt,"albert"),gxt.forEach(t),Mwr=r(Fqe," \u2014 "),VJ=n(Fqe,"A",{href:!0});var hxt=s(VJ);Ewr=r(hxt,"TFAlbertForSequenceClassification"),hxt.forEach(t),Cwr=r(Fqe," (ALBERT model)"),Fqe.forEach(t),wwr=i(ne),C4=n(ne,"LI",{});var Tqe=s(C4);XTe=n(Tqe,"STRONG",{});var pxt=s(XTe);Awr=r(pxt,"bert"),pxt.forEach(t),Lwr=r(Tqe," \u2014 "),XJ=n(Tqe,"A",{href:!0});var _xt=s(XJ);ywr=r(_xt,"TFBertForSequenceClassification"),_xt.forEach(t),xwr=r(Tqe," (BERT model)"),Tqe.forEach(t),$wr=i(ne),w4=n(ne,"LI",{});var Mqe=s(w4);zTe=n(Mqe,"STRONG",{});var uxt=s(zTe);kwr=r(uxt,"camembert"),uxt.forEach(t),Swr=r(Mqe," \u2014 "),zJ=n(Mqe,"A",{href:!0});var bxt=s(zJ);Rwr=r(bxt,"TFCamembertForSequenceClassification"),bxt.forEach(t),Pwr=r(Mqe," (CamemBERT model)"),Mqe.forEach(t),Bwr=i(ne),A4=n(ne,"LI",{});var Eqe=s(A4);QTe=n(Eqe,"STRONG",{});var vxt=s(QTe);Iwr=r(vxt,"convbert"),vxt.forEach(t),Nwr=r(Eqe," \u2014 "),QJ=n(Eqe,"A",{href:!0});var Fxt=s(QJ);qwr=r(Fxt,"TFConvBertForSequenceClassification"),Fxt.forEach(t),jwr=r(Eqe," (ConvBERT model)"),Eqe.forEach(t),Dwr=i(ne),L4=n(ne,"LI",{});var Cqe=s(L4);WTe=n(Cqe,"STRONG",{});var Txt=s(WTe);Gwr=r(Txt,"ctrl"),Txt.forEach(t),Owr=r(Cqe," \u2014 "),WJ=n(Cqe,"A",{href:!0});var Mxt=s(WJ);Vwr=r(Mxt,"TFCTRLForSequenceClassification"),Mxt.forEach(t),Xwr=r(Cqe," (CTRL model)"),Cqe.forEach(t),zwr=i(ne),y4=n(ne,"LI",{});var wqe=s(y4);HTe=n(wqe,"STRONG",{});var Ext=s(HTe);Qwr=r(Ext,"deberta"),Ext.forEach(t),Wwr=r(wqe," \u2014 "),HJ=n(wqe,"A",{href:!0});var Cxt=s(HJ);Hwr=r(Cxt,"TFDebertaForSequenceClassification"),Cxt.forEach(t),Uwr=r(wqe," (DeBERTa model)"),wqe.forEach(t),Jwr=i(ne),x4=n(ne,"LI",{});var Aqe=s(x4);UTe=n(Aqe,"STRONG",{});var wxt=s(UTe);Ywr=r(wxt,"deberta-v2"),wxt.forEach(t),Kwr=r(Aqe," \u2014 "),UJ=n(Aqe,"A",{href:!0});var Axt=s(UJ);Zwr=r(Axt,"TFDebertaV2ForSequenceClassification"),Axt.forEach(t),eAr=r(Aqe," (DeBERTa-v2 model)"),Aqe.forEach(t),oAr=i(ne),$4=n(ne,"LI",{});var Lqe=s($4);JTe=n(Lqe,"STRONG",{});var Lxt=s(JTe);rAr=r(Lxt,"distilbert"),Lxt.forEach(t),tAr=r(Lqe," \u2014 "),JJ=n(Lqe,"A",{href:!0});var yxt=s(JJ);aAr=r(yxt,"TFDistilBertForSequenceClassification"),yxt.forEach(t),nAr=r(Lqe," (DistilBERT model)"),Lqe.forEach(t),sAr=i(ne),k4=n(ne,"LI",{});var yqe=s(k4);YTe=n(yqe,"STRONG",{});var xxt=s(YTe);lAr=r(xxt,"electra"),xxt.forEach(t),iAr=r(yqe," \u2014 "),YJ=n(yqe,"A",{href:!0});var $xt=s(YJ);dAr=r($xt,"TFElectraForSequenceClassification"),$xt.forEach(t),cAr=r(yqe," (ELECTRA model)"),yqe.forEach(t),fAr=i(ne),S4=n(ne,"LI",{});var xqe=s(S4);KTe=n(xqe,"STRONG",{});var kxt=s(KTe);mAr=r(kxt,"flaubert"),kxt.forEach(t),gAr=r(xqe," \u2014 "),KJ=n(xqe,"A",{href:!0});var Sxt=s(KJ);hAr=r(Sxt,"TFFlaubertForSequenceClassification"),Sxt.forEach(t),pAr=r(xqe," (FlauBERT model)"),xqe.forEach(t),_Ar=i(ne),R4=n(ne,"LI",{});var $qe=s(R4);ZTe=n($qe,"STRONG",{});var Rxt=s(ZTe);uAr=r(Rxt,"funnel"),Rxt.forEach(t),bAr=r($qe," \u2014 "),ZJ=n($qe,"A",{href:!0});var Pxt=s(ZJ);vAr=r(Pxt,"TFFunnelForSequenceClassification"),Pxt.forEach(t),FAr=r($qe," (Funnel Transformer model)"),$qe.forEach(t),TAr=i(ne),P4=n(ne,"LI",{});var kqe=s(P4);eMe=n(kqe,"STRONG",{});var Bxt=s(eMe);MAr=r(Bxt,"gpt2"),Bxt.forEach(t),EAr=r(kqe," \u2014 "),eY=n(kqe,"A",{href:!0});var Ixt=s(eY);CAr=r(Ixt,"TFGPT2ForSequenceClassification"),Ixt.forEach(t),wAr=r(kqe," (OpenAI GPT-2 model)"),kqe.forEach(t),AAr=i(ne),B4=n(ne,"LI",{});var Sqe=s(B4);oMe=n(Sqe,"STRONG",{});var Nxt=s(oMe);LAr=r(Nxt,"gptj"),Nxt.forEach(t),yAr=r(Sqe," \u2014 "),oY=n(Sqe,"A",{href:!0});var qxt=s(oY);xAr=r(qxt,"TFGPTJForSequenceClassification"),qxt.forEach(t),$Ar=r(Sqe," (GPT-J model)"),Sqe.forEach(t),kAr=i(ne),I4=n(ne,"LI",{});var Rqe=s(I4);rMe=n(Rqe,"STRONG",{});var jxt=s(rMe);SAr=r(jxt,"layoutlm"),jxt.forEach(t),RAr=r(Rqe," \u2014 "),rY=n(Rqe,"A",{href:!0});var Dxt=s(rY);PAr=r(Dxt,"TFLayoutLMForSequenceClassification"),Dxt.forEach(t),BAr=r(Rqe," (LayoutLM model)"),Rqe.forEach(t),IAr=i(ne),N4=n(ne,"LI",{});var Pqe=s(N4);tMe=n(Pqe,"STRONG",{});var Gxt=s(tMe);NAr=r(Gxt,"longformer"),Gxt.forEach(t),qAr=r(Pqe," \u2014 "),tY=n(Pqe,"A",{href:!0});var Oxt=s(tY);jAr=r(Oxt,"TFLongformerForSequenceClassification"),Oxt.forEach(t),DAr=r(Pqe," (Longformer model)"),Pqe.forEach(t),GAr=i(ne),q4=n(ne,"LI",{});var Bqe=s(q4);aMe=n(Bqe,"STRONG",{});var Vxt=s(aMe);OAr=r(Vxt,"mobilebert"),Vxt.forEach(t),VAr=r(Bqe," \u2014 "),aY=n(Bqe,"A",{href:!0});var Xxt=s(aY);XAr=r(Xxt,"TFMobileBertForSequenceClassification"),Xxt.forEach(t),zAr=r(Bqe," (MobileBERT model)"),Bqe.forEach(t),QAr=i(ne),j4=n(ne,"LI",{});var Iqe=s(j4);nMe=n(Iqe,"STRONG",{});var zxt=s(nMe);WAr=r(zxt,"mpnet"),zxt.forEach(t),HAr=r(Iqe," \u2014 "),nY=n(Iqe,"A",{href:!0});var Qxt=s(nY);UAr=r(Qxt,"TFMPNetForSequenceClassification"),Qxt.forEach(t),JAr=r(Iqe," (MPNet model)"),Iqe.forEach(t),YAr=i(ne),D4=n(ne,"LI",{});var Nqe=s(D4);sMe=n(Nqe,"STRONG",{});var Wxt=s(sMe);KAr=r(Wxt,"openai-gpt"),Wxt.forEach(t),ZAr=r(Nqe," \u2014 "),sY=n(Nqe,"A",{href:!0});var Hxt=s(sY);e6r=r(Hxt,"TFOpenAIGPTForSequenceClassification"),Hxt.forEach(t),o6r=r(Nqe," (OpenAI GPT model)"),Nqe.forEach(t),r6r=i(ne),G4=n(ne,"LI",{});var qqe=s(G4);lMe=n(qqe,"STRONG",{});var Uxt=s(lMe);t6r=r(Uxt,"rembert"),Uxt.forEach(t),a6r=r(qqe," \u2014 "),lY=n(qqe,"A",{href:!0});var Jxt=s(lY);n6r=r(Jxt,"TFRemBertForSequenceClassification"),Jxt.forEach(t),s6r=r(qqe," (RemBERT model)"),qqe.forEach(t),l6r=i(ne),O4=n(ne,"LI",{});var jqe=s(O4);iMe=n(jqe,"STRONG",{});var Yxt=s(iMe);i6r=r(Yxt,"roberta"),Yxt.forEach(t),d6r=r(jqe," \u2014 "),iY=n(jqe,"A",{href:!0});var Kxt=s(iY);c6r=r(Kxt,"TFRobertaForSequenceClassification"),Kxt.forEach(t),f6r=r(jqe," (RoBERTa model)"),jqe.forEach(t),m6r=i(ne),V4=n(ne,"LI",{});var Dqe=s(V4);dMe=n(Dqe,"STRONG",{});var Zxt=s(dMe);g6r=r(Zxt,"roformer"),Zxt.forEach(t),h6r=r(Dqe," \u2014 "),dY=n(Dqe,"A",{href:!0});var e$t=s(dY);p6r=r(e$t,"TFRoFormerForSequenceClassification"),e$t.forEach(t),_6r=r(Dqe," (RoFormer model)"),Dqe.forEach(t),u6r=i(ne),X4=n(ne,"LI",{});var Gqe=s(X4);cMe=n(Gqe,"STRONG",{});var o$t=s(cMe);b6r=r(o$t,"tapas"),o$t.forEach(t),v6r=r(Gqe," \u2014 "),cY=n(Gqe,"A",{href:!0});var r$t=s(cY);F6r=r(r$t,"TFTapasForSequenceClassification"),r$t.forEach(t),T6r=r(Gqe," (TAPAS model)"),Gqe.forEach(t),M6r=i(ne),z4=n(ne,"LI",{});var Oqe=s(z4);fMe=n(Oqe,"STRONG",{});var t$t=s(fMe);E6r=r(t$t,"transfo-xl"),t$t.forEach(t),C6r=r(Oqe," \u2014 "),fY=n(Oqe,"A",{href:!0});var a$t=s(fY);w6r=r(a$t,"TFTransfoXLForSequenceClassification"),a$t.forEach(t),A6r=r(Oqe," (Transformer-XL model)"),Oqe.forEach(t),L6r=i(ne),Q4=n(ne,"LI",{});var Vqe=s(Q4);mMe=n(Vqe,"STRONG",{});var n$t=s(mMe);y6r=r(n$t,"xlm"),n$t.forEach(t),x6r=r(Vqe," \u2014 "),mY=n(Vqe,"A",{href:!0});var s$t=s(mY);$6r=r(s$t,"TFXLMForSequenceClassification"),s$t.forEach(t),k6r=r(Vqe," (XLM model)"),Vqe.forEach(t),S6r=i(ne),W4=n(ne,"LI",{});var Xqe=s(W4);gMe=n(Xqe,"STRONG",{});var l$t=s(gMe);R6r=r(l$t,"xlm-roberta"),l$t.forEach(t),P6r=r(Xqe," \u2014 "),gY=n(Xqe,"A",{href:!0});var i$t=s(gY);B6r=r(i$t,"TFXLMRobertaForSequenceClassification"),i$t.forEach(t),I6r=r(Xqe," (XLM-RoBERTa model)"),Xqe.forEach(t),N6r=i(ne),H4=n(ne,"LI",{});var zqe=s(H4);hMe=n(zqe,"STRONG",{});var d$t=s(hMe);q6r=r(d$t,"xlnet"),d$t.forEach(t),j6r=r(zqe," \u2014 "),hY=n(zqe,"A",{href:!0});var c$t=s(hY);D6r=r(c$t,"TFXLNetForSequenceClassification"),c$t.forEach(t),G6r=r(zqe," (XLNet model)"),zqe.forEach(t),ne.forEach(t),O6r=i(Nl),T(U4.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),EVe=i(f),Mc=n(f,"H2",{class:!0});var kze=s(Mc);J4=n(kze,"A",{id:!0,class:!0,href:!0});var f$t=s(J4);pMe=n(f$t,"SPAN",{});var m$t=s(pMe);T(ex.$$.fragment,m$t),m$t.forEach(t),f$t.forEach(t),V6r=i(kze),_Me=n(kze,"SPAN",{});var g$t=s(_Me);X6r=r(g$t,"TFAutoModelForMultipleChoice"),g$t.forEach(t),kze.forEach(t),CVe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(ox.$$.fragment,ql),z6r=i(ql),Ec=n(ql,"P",{});var qre=s(Ec);Q6r=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),pY=n(qre,"A",{href:!0});var h$t=s(pY);W6r=r(h$t,"from_pretrained()"),h$t.forEach(t),H6r=r(qre," class method or the "),_Y=n(qre,"A",{href:!0});var p$t=s(_Y);U6r=r(p$t,"from_config()"),p$t.forEach(t),J6r=r(qre,` class
method.`),qre.forEach(t),Y6r=i(ql),rx=n(ql,"P",{});var Sze=s(rx);K6r=r(Sze,"This class cannot be instantiated directly using "),uMe=n(Sze,"CODE",{});var _$t=s(uMe);Z6r=r(_$t,"__init__()"),_$t.forEach(t),eLr=r(Sze," (throws an error)."),Sze.forEach(t),oLr=i(ql),Nt=n(ql,"DIV",{class:!0});var z6=s(Nt);T(tx.$$.fragment,z6),rLr=i(z6),bMe=n(z6,"P",{});var u$t=s(bMe);tLr=r(u$t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),u$t.forEach(t),aLr=i(z6),Cc=n(z6,"P",{});var jre=s(Cc);nLr=r(jre,`Note:
Loading a model from its configuration file does `),vMe=n(jre,"STRONG",{});var b$t=s(vMe);sLr=r(b$t,"not"),b$t.forEach(t),lLr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(jre,"A",{href:!0});var v$t=s(uY);iLr=r(v$t,"from_pretrained()"),v$t.forEach(t),dLr=r(jre," to load the model weights."),jre.forEach(t),cLr=i(z6),T(Y4.$$.fragment,z6),z6.forEach(t),fLr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(ax.$$.fragment,jl),mLr=i(jl),FMe=n(jl,"P",{});var F$t=s(FMe);gLr=r(F$t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F$t.forEach(t),hLr=i(jl),gn=n(jl,"P",{});var Q6=s(gn);pLr=r(Q6,"The model class to instantiate is selected based on the "),TMe=n(Q6,"CODE",{});var T$t=s(TMe);_Lr=r(T$t,"model_type"),T$t.forEach(t),uLr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),MMe=n(Q6,"CODE",{});var M$t=s(MMe);bLr=r(M$t,"pretrained_model_name_or_path"),M$t.forEach(t),vLr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EMe=n(Q6,"CODE",{});var E$t=s(EMe);FLr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),TLr=r(Q6,":"),Q6.forEach(t),MLr=i(jl),_e=n(jl,"UL",{});var ve=s(_e);K4=n(ve,"LI",{});var Qqe=s(K4);CMe=n(Qqe,"STRONG",{});var C$t=s(CMe);ELr=r(C$t,"albert"),C$t.forEach(t),CLr=r(Qqe," \u2014 "),bY=n(Qqe,"A",{href:!0});var w$t=s(bY);wLr=r(w$t,"TFAlbertForMultipleChoice"),w$t.forEach(t),ALr=r(Qqe," (ALBERT model)"),Qqe.forEach(t),LLr=i(ve),Z4=n(ve,"LI",{});var Wqe=s(Z4);wMe=n(Wqe,"STRONG",{});var A$t=s(wMe);yLr=r(A$t,"bert"),A$t.forEach(t),xLr=r(Wqe," \u2014 "),vY=n(Wqe,"A",{href:!0});var L$t=s(vY);$Lr=r(L$t,"TFBertForMultipleChoice"),L$t.forEach(t),kLr=r(Wqe," (BERT model)"),Wqe.forEach(t),SLr=i(ve),eC=n(ve,"LI",{});var Hqe=s(eC);AMe=n(Hqe,"STRONG",{});var y$t=s(AMe);RLr=r(y$t,"camembert"),y$t.forEach(t),PLr=r(Hqe," \u2014 "),FY=n(Hqe,"A",{href:!0});var x$t=s(FY);BLr=r(x$t,"TFCamembertForMultipleChoice"),x$t.forEach(t),ILr=r(Hqe," (CamemBERT model)"),Hqe.forEach(t),NLr=i(ve),oC=n(ve,"LI",{});var Uqe=s(oC);LMe=n(Uqe,"STRONG",{});var $$t=s(LMe);qLr=r($$t,"convbert"),$$t.forEach(t),jLr=r(Uqe," \u2014 "),TY=n(Uqe,"A",{href:!0});var k$t=s(TY);DLr=r(k$t,"TFConvBertForMultipleChoice"),k$t.forEach(t),GLr=r(Uqe," (ConvBERT model)"),Uqe.forEach(t),OLr=i(ve),rC=n(ve,"LI",{});var Jqe=s(rC);yMe=n(Jqe,"STRONG",{});var S$t=s(yMe);VLr=r(S$t,"distilbert"),S$t.forEach(t),XLr=r(Jqe," \u2014 "),MY=n(Jqe,"A",{href:!0});var R$t=s(MY);zLr=r(R$t,"TFDistilBertForMultipleChoice"),R$t.forEach(t),QLr=r(Jqe," (DistilBERT model)"),Jqe.forEach(t),WLr=i(ve),tC=n(ve,"LI",{});var Yqe=s(tC);xMe=n(Yqe,"STRONG",{});var P$t=s(xMe);HLr=r(P$t,"electra"),P$t.forEach(t),ULr=r(Yqe," \u2014 "),EY=n(Yqe,"A",{href:!0});var B$t=s(EY);JLr=r(B$t,"TFElectraForMultipleChoice"),B$t.forEach(t),YLr=r(Yqe," (ELECTRA model)"),Yqe.forEach(t),KLr=i(ve),aC=n(ve,"LI",{});var Kqe=s(aC);$Me=n(Kqe,"STRONG",{});var I$t=s($Me);ZLr=r(I$t,"flaubert"),I$t.forEach(t),eyr=r(Kqe," \u2014 "),CY=n(Kqe,"A",{href:!0});var N$t=s(CY);oyr=r(N$t,"TFFlaubertForMultipleChoice"),N$t.forEach(t),ryr=r(Kqe," (FlauBERT model)"),Kqe.forEach(t),tyr=i(ve),nC=n(ve,"LI",{});var Zqe=s(nC);kMe=n(Zqe,"STRONG",{});var q$t=s(kMe);ayr=r(q$t,"funnel"),q$t.forEach(t),nyr=r(Zqe," \u2014 "),wY=n(Zqe,"A",{href:!0});var j$t=s(wY);syr=r(j$t,"TFFunnelForMultipleChoice"),j$t.forEach(t),lyr=r(Zqe," (Funnel Transformer model)"),Zqe.forEach(t),iyr=i(ve),sC=n(ve,"LI",{});var eje=s(sC);SMe=n(eje,"STRONG",{});var D$t=s(SMe);dyr=r(D$t,"longformer"),D$t.forEach(t),cyr=r(eje," \u2014 "),AY=n(eje,"A",{href:!0});var G$t=s(AY);fyr=r(G$t,"TFLongformerForMultipleChoice"),G$t.forEach(t),myr=r(eje," (Longformer model)"),eje.forEach(t),gyr=i(ve),lC=n(ve,"LI",{});var oje=s(lC);RMe=n(oje,"STRONG",{});var O$t=s(RMe);hyr=r(O$t,"mobilebert"),O$t.forEach(t),pyr=r(oje," \u2014 "),LY=n(oje,"A",{href:!0});var V$t=s(LY);_yr=r(V$t,"TFMobileBertForMultipleChoice"),V$t.forEach(t),uyr=r(oje," (MobileBERT model)"),oje.forEach(t),byr=i(ve),iC=n(ve,"LI",{});var rje=s(iC);PMe=n(rje,"STRONG",{});var X$t=s(PMe);vyr=r(X$t,"mpnet"),X$t.forEach(t),Fyr=r(rje," \u2014 "),yY=n(rje,"A",{href:!0});var z$t=s(yY);Tyr=r(z$t,"TFMPNetForMultipleChoice"),z$t.forEach(t),Myr=r(rje," (MPNet model)"),rje.forEach(t),Eyr=i(ve),dC=n(ve,"LI",{});var tje=s(dC);BMe=n(tje,"STRONG",{});var Q$t=s(BMe);Cyr=r(Q$t,"rembert"),Q$t.forEach(t),wyr=r(tje," \u2014 "),xY=n(tje,"A",{href:!0});var W$t=s(xY);Ayr=r(W$t,"TFRemBertForMultipleChoice"),W$t.forEach(t),Lyr=r(tje," (RemBERT model)"),tje.forEach(t),yyr=i(ve),cC=n(ve,"LI",{});var aje=s(cC);IMe=n(aje,"STRONG",{});var H$t=s(IMe);xyr=r(H$t,"roberta"),H$t.forEach(t),$yr=r(aje," \u2014 "),$Y=n(aje,"A",{href:!0});var U$t=s($Y);kyr=r(U$t,"TFRobertaForMultipleChoice"),U$t.forEach(t),Syr=r(aje," (RoBERTa model)"),aje.forEach(t),Ryr=i(ve),fC=n(ve,"LI",{});var nje=s(fC);NMe=n(nje,"STRONG",{});var J$t=s(NMe);Pyr=r(J$t,"roformer"),J$t.forEach(t),Byr=r(nje," \u2014 "),kY=n(nje,"A",{href:!0});var Y$t=s(kY);Iyr=r(Y$t,"TFRoFormerForMultipleChoice"),Y$t.forEach(t),Nyr=r(nje," (RoFormer model)"),nje.forEach(t),qyr=i(ve),mC=n(ve,"LI",{});var sje=s(mC);qMe=n(sje,"STRONG",{});var K$t=s(qMe);jyr=r(K$t,"xlm"),K$t.forEach(t),Dyr=r(sje," \u2014 "),SY=n(sje,"A",{href:!0});var Z$t=s(SY);Gyr=r(Z$t,"TFXLMForMultipleChoice"),Z$t.forEach(t),Oyr=r(sje," (XLM model)"),sje.forEach(t),Vyr=i(ve),gC=n(ve,"LI",{});var lje=s(gC);jMe=n(lje,"STRONG",{});var ekt=s(jMe);Xyr=r(ekt,"xlm-roberta"),ekt.forEach(t),zyr=r(lje," \u2014 "),RY=n(lje,"A",{href:!0});var okt=s(RY);Qyr=r(okt,"TFXLMRobertaForMultipleChoice"),okt.forEach(t),Wyr=r(lje," (XLM-RoBERTa model)"),lje.forEach(t),Hyr=i(ve),hC=n(ve,"LI",{});var ije=s(hC);DMe=n(ije,"STRONG",{});var rkt=s(DMe);Uyr=r(rkt,"xlnet"),rkt.forEach(t),Jyr=r(ije," \u2014 "),PY=n(ije,"A",{href:!0});var tkt=s(PY);Yyr=r(tkt,"TFXLNetForMultipleChoice"),tkt.forEach(t),Kyr=r(ije," (XLNet model)"),ije.forEach(t),ve.forEach(t),Zyr=i(jl),T(pC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),wVe=i(f),wc=n(f,"H2",{class:!0});var Rze=s(wc);_C=n(Rze,"A",{id:!0,class:!0,href:!0});var akt=s(_C);GMe=n(akt,"SPAN",{});var nkt=s(GMe);T(nx.$$.fragment,nkt),nkt.forEach(t),akt.forEach(t),e8r=i(Rze),OMe=n(Rze,"SPAN",{});var skt=s(OMe);o8r=r(skt,"TFAutoModelForNextSentencePrediction"),skt.forEach(t),Rze.forEach(t),AVe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(sx.$$.fragment,Dl),r8r=i(Dl),Ac=n(Dl,"P",{});var Dre=s(Ac);t8r=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BY=n(Dre,"A",{href:!0});var lkt=s(BY);a8r=r(lkt,"from_pretrained()"),lkt.forEach(t),n8r=r(Dre," class method or the "),IY=n(Dre,"A",{href:!0});var ikt=s(IY);s8r=r(ikt,"from_config()"),ikt.forEach(t),l8r=r(Dre,` class
method.`),Dre.forEach(t),i8r=i(Dl),lx=n(Dl,"P",{});var Pze=s(lx);d8r=r(Pze,"This class cannot be instantiated directly using "),VMe=n(Pze,"CODE",{});var dkt=s(VMe);c8r=r(dkt,"__init__()"),dkt.forEach(t),f8r=r(Pze," (throws an error)."),Pze.forEach(t),m8r=i(Dl),qt=n(Dl,"DIV",{class:!0});var W6=s(qt);T(ix.$$.fragment,W6),g8r=i(W6),XMe=n(W6,"P",{});var ckt=s(XMe);h8r=r(ckt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ckt.forEach(t),p8r=i(W6),Lc=n(W6,"P",{});var Gre=s(Lc);_8r=r(Gre,`Note:
Loading a model from its configuration file does `),zMe=n(Gre,"STRONG",{});var fkt=s(zMe);u8r=r(fkt,"not"),fkt.forEach(t),b8r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(Gre,"A",{href:!0});var mkt=s(NY);v8r=r(mkt,"from_pretrained()"),mkt.forEach(t),F8r=r(Gre," to load the model weights."),Gre.forEach(t),T8r=i(W6),T(uC.$$.fragment,W6),W6.forEach(t),M8r=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(dx.$$.fragment,Gl),E8r=i(Gl),QMe=n(Gl,"P",{});var gkt=s(QMe);C8r=r(gkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gkt.forEach(t),w8r=i(Gl),hn=n(Gl,"P",{});var H6=s(hn);A8r=r(H6,"The model class to instantiate is selected based on the "),WMe=n(H6,"CODE",{});var hkt=s(WMe);L8r=r(hkt,"model_type"),hkt.forEach(t),y8r=r(H6,` property of the config object (either
passed as an argument or loaded from `),HMe=n(H6,"CODE",{});var pkt=s(HMe);x8r=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),$8r=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(H6,"CODE",{});var _kt=s(UMe);k8r=r(_kt,"pretrained_model_name_or_path"),_kt.forEach(t),S8r=r(H6,":"),H6.forEach(t),R8r=i(Gl),cx=n(Gl,"UL",{});var Bze=s(cx);bC=n(Bze,"LI",{});var dje=s(bC);JMe=n(dje,"STRONG",{});var ukt=s(JMe);P8r=r(ukt,"bert"),ukt.forEach(t),B8r=r(dje," \u2014 "),qY=n(dje,"A",{href:!0});var bkt=s(qY);I8r=r(bkt,"TFBertForNextSentencePrediction"),bkt.forEach(t),N8r=r(dje," (BERT model)"),dje.forEach(t),q8r=i(Bze),vC=n(Bze,"LI",{});var cje=s(vC);YMe=n(cje,"STRONG",{});var vkt=s(YMe);j8r=r(vkt,"mobilebert"),vkt.forEach(t),D8r=r(cje," \u2014 "),jY=n(cje,"A",{href:!0});var Fkt=s(jY);G8r=r(Fkt,"TFMobileBertForNextSentencePrediction"),Fkt.forEach(t),O8r=r(cje," (MobileBERT model)"),cje.forEach(t),Bze.forEach(t),V8r=i(Gl),T(FC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),LVe=i(f),yc=n(f,"H2",{class:!0});var Ize=s(yc);TC=n(Ize,"A",{id:!0,class:!0,href:!0});var Tkt=s(TC);KMe=n(Tkt,"SPAN",{});var Mkt=s(KMe);T(fx.$$.fragment,Mkt),Mkt.forEach(t),Tkt.forEach(t),X8r=i(Ize),ZMe=n(Ize,"SPAN",{});var Ekt=s(ZMe);z8r=r(Ekt,"TFAutoModelForTableQuestionAnswering"),Ekt.forEach(t),Ize.forEach(t),yVe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(mx.$$.fragment,Ol),Q8r=i(Ol),xc=n(Ol,"P",{});var Ore=s(xc);W8r=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DY=n(Ore,"A",{href:!0});var Ckt=s(DY);H8r=r(Ckt,"from_pretrained()"),Ckt.forEach(t),U8r=r(Ore," class method or the "),GY=n(Ore,"A",{href:!0});var wkt=s(GY);J8r=r(wkt,"from_config()"),wkt.forEach(t),Y8r=r(Ore,` class
method.`),Ore.forEach(t),K8r=i(Ol),gx=n(Ol,"P",{});var Nze=s(gx);Z8r=r(Nze,"This class cannot be instantiated directly using "),eEe=n(Nze,"CODE",{});var Akt=s(eEe);e9r=r(Akt,"__init__()"),Akt.forEach(t),o9r=r(Nze," (throws an error)."),Nze.forEach(t),r9r=i(Ol),jt=n(Ol,"DIV",{class:!0});var U6=s(jt);T(hx.$$.fragment,U6),t9r=i(U6),oEe=n(U6,"P",{});var Lkt=s(oEe);a9r=r(Lkt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lkt.forEach(t),n9r=i(U6),$c=n(U6,"P",{});var Vre=s($c);s9r=r(Vre,`Note:
Loading a model from its configuration file does `),rEe=n(Vre,"STRONG",{});var ykt=s(rEe);l9r=r(ykt,"not"),ykt.forEach(t),i9r=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Vre,"A",{href:!0});var xkt=s(OY);d9r=r(xkt,"from_pretrained()"),xkt.forEach(t),c9r=r(Vre," to load the model weights."),Vre.forEach(t),f9r=i(U6),T(MC.$$.fragment,U6),U6.forEach(t),m9r=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(px.$$.fragment,Vl),g9r=i(Vl),tEe=n(Vl,"P",{});var $kt=s(tEe);h9r=r($kt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$kt.forEach(t),p9r=i(Vl),pn=n(Vl,"P",{});var J6=s(pn);_9r=r(J6,"The model class to instantiate is selected based on the "),aEe=n(J6,"CODE",{});var kkt=s(aEe);u9r=r(kkt,"model_type"),kkt.forEach(t),b9r=r(J6,` property of the config object (either
passed as an argument or loaded from `),nEe=n(J6,"CODE",{});var Skt=s(nEe);v9r=r(Skt,"pretrained_model_name_or_path"),Skt.forEach(t),F9r=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sEe=n(J6,"CODE",{});var Rkt=s(sEe);T9r=r(Rkt,"pretrained_model_name_or_path"),Rkt.forEach(t),M9r=r(J6,":"),J6.forEach(t),E9r=i(Vl),lEe=n(Vl,"UL",{});var Pkt=s(lEe);EC=n(Pkt,"LI",{});var fje=s(EC);iEe=n(fje,"STRONG",{});var Bkt=s(iEe);C9r=r(Bkt,"tapas"),Bkt.forEach(t),w9r=r(fje," \u2014 "),VY=n(fje,"A",{href:!0});var Ikt=s(VY);A9r=r(Ikt,"TFTapasForQuestionAnswering"),Ikt.forEach(t),L9r=r(fje," (TAPAS model)"),fje.forEach(t),Pkt.forEach(t),y9r=i(Vl),T(CC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),xVe=i(f),kc=n(f,"H2",{class:!0});var qze=s(kc);wC=n(qze,"A",{id:!0,class:!0,href:!0});var Nkt=s(wC);dEe=n(Nkt,"SPAN",{});var qkt=s(dEe);T(_x.$$.fragment,qkt),qkt.forEach(t),Nkt.forEach(t),x9r=i(qze),cEe=n(qze,"SPAN",{});var jkt=s(cEe);$9r=r(jkt,"TFAutoModelForTokenClassification"),jkt.forEach(t),qze.forEach(t),$Ve=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(ux.$$.fragment,Xl),k9r=i(Xl),Sc=n(Xl,"P",{});var Xre=s(Sc);S9r=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XY=n(Xre,"A",{href:!0});var Dkt=s(XY);R9r=r(Dkt,"from_pretrained()"),Dkt.forEach(t),P9r=r(Xre," class method or the "),zY=n(Xre,"A",{href:!0});var Gkt=s(zY);B9r=r(Gkt,"from_config()"),Gkt.forEach(t),I9r=r(Xre,` class
method.`),Xre.forEach(t),N9r=i(Xl),bx=n(Xl,"P",{});var jze=s(bx);q9r=r(jze,"This class cannot be instantiated directly using "),fEe=n(jze,"CODE",{});var Okt=s(fEe);j9r=r(Okt,"__init__()"),Okt.forEach(t),D9r=r(jze," (throws an error)."),jze.forEach(t),G9r=i(Xl),Dt=n(Xl,"DIV",{class:!0});var Y6=s(Dt);T(vx.$$.fragment,Y6),O9r=i(Y6),mEe=n(Y6,"P",{});var Vkt=s(mEe);V9r=r(Vkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vkt.forEach(t),X9r=i(Y6),Rc=n(Y6,"P",{});var zre=s(Rc);z9r=r(zre,`Note:
Loading a model from its configuration file does `),gEe=n(zre,"STRONG",{});var Xkt=s(gEe);Q9r=r(Xkt,"not"),Xkt.forEach(t),W9r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(zre,"A",{href:!0});var zkt=s(QY);H9r=r(zkt,"from_pretrained()"),zkt.forEach(t),U9r=r(zre," to load the model weights."),zre.forEach(t),J9r=i(Y6),T(AC.$$.fragment,Y6),Y6.forEach(t),Y9r=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(Fx.$$.fragment,zl),K9r=i(zl),hEe=n(zl,"P",{});var Qkt=s(hEe);Z9r=r(Qkt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Qkt.forEach(t),exr=i(zl),_n=n(zl,"P",{});var K6=s(_n);oxr=r(K6,"The model class to instantiate is selected based on the "),pEe=n(K6,"CODE",{});var Wkt=s(pEe);rxr=r(Wkt,"model_type"),Wkt.forEach(t),txr=r(K6,` property of the config object (either
passed as an argument or loaded from `),_Ee=n(K6,"CODE",{});var Hkt=s(_Ee);axr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),nxr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n(K6,"CODE",{});var Ukt=s(uEe);sxr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),lxr=r(K6,":"),K6.forEach(t),ixr=i(zl),de=n(zl,"UL",{});var me=s(de);LC=n(me,"LI",{});var mje=s(LC);bEe=n(mje,"STRONG",{});var Jkt=s(bEe);dxr=r(Jkt,"albert"),Jkt.forEach(t),cxr=r(mje," \u2014 "),WY=n(mje,"A",{href:!0});var Ykt=s(WY);fxr=r(Ykt,"TFAlbertForTokenClassification"),Ykt.forEach(t),mxr=r(mje," (ALBERT model)"),mje.forEach(t),gxr=i(me),yC=n(me,"LI",{});var gje=s(yC);vEe=n(gje,"STRONG",{});var Kkt=s(vEe);hxr=r(Kkt,"bert"),Kkt.forEach(t),pxr=r(gje," \u2014 "),HY=n(gje,"A",{href:!0});var Zkt=s(HY);_xr=r(Zkt,"TFBertForTokenClassification"),Zkt.forEach(t),uxr=r(gje," (BERT model)"),gje.forEach(t),bxr=i(me),xC=n(me,"LI",{});var hje=s(xC);FEe=n(hje,"STRONG",{});var eSt=s(FEe);vxr=r(eSt,"camembert"),eSt.forEach(t),Fxr=r(hje," \u2014 "),UY=n(hje,"A",{href:!0});var oSt=s(UY);Txr=r(oSt,"TFCamembertForTokenClassification"),oSt.forEach(t),Mxr=r(hje," (CamemBERT model)"),hje.forEach(t),Exr=i(me),$C=n(me,"LI",{});var pje=s($C);TEe=n(pje,"STRONG",{});var rSt=s(TEe);Cxr=r(rSt,"convbert"),rSt.forEach(t),wxr=r(pje," \u2014 "),JY=n(pje,"A",{href:!0});var tSt=s(JY);Axr=r(tSt,"TFConvBertForTokenClassification"),tSt.forEach(t),Lxr=r(pje," (ConvBERT model)"),pje.forEach(t),yxr=i(me),kC=n(me,"LI",{});var _je=s(kC);MEe=n(_je,"STRONG",{});var aSt=s(MEe);xxr=r(aSt,"deberta"),aSt.forEach(t),$xr=r(_je," \u2014 "),YY=n(_je,"A",{href:!0});var nSt=s(YY);kxr=r(nSt,"TFDebertaForTokenClassification"),nSt.forEach(t),Sxr=r(_je," (DeBERTa model)"),_je.forEach(t),Rxr=i(me),SC=n(me,"LI",{});var uje=s(SC);EEe=n(uje,"STRONG",{});var sSt=s(EEe);Pxr=r(sSt,"deberta-v2"),sSt.forEach(t),Bxr=r(uje," \u2014 "),KY=n(uje,"A",{href:!0});var lSt=s(KY);Ixr=r(lSt,"TFDebertaV2ForTokenClassification"),lSt.forEach(t),Nxr=r(uje," (DeBERTa-v2 model)"),uje.forEach(t),qxr=i(me),RC=n(me,"LI",{});var bje=s(RC);CEe=n(bje,"STRONG",{});var iSt=s(CEe);jxr=r(iSt,"distilbert"),iSt.forEach(t),Dxr=r(bje," \u2014 "),ZY=n(bje,"A",{href:!0});var dSt=s(ZY);Gxr=r(dSt,"TFDistilBertForTokenClassification"),dSt.forEach(t),Oxr=r(bje," (DistilBERT model)"),bje.forEach(t),Vxr=i(me),PC=n(me,"LI",{});var vje=s(PC);wEe=n(vje,"STRONG",{});var cSt=s(wEe);Xxr=r(cSt,"electra"),cSt.forEach(t),zxr=r(vje," \u2014 "),eK=n(vje,"A",{href:!0});var fSt=s(eK);Qxr=r(fSt,"TFElectraForTokenClassification"),fSt.forEach(t),Wxr=r(vje," (ELECTRA model)"),vje.forEach(t),Hxr=i(me),BC=n(me,"LI",{});var Fje=s(BC);AEe=n(Fje,"STRONG",{});var mSt=s(AEe);Uxr=r(mSt,"flaubert"),mSt.forEach(t),Jxr=r(Fje," \u2014 "),oK=n(Fje,"A",{href:!0});var gSt=s(oK);Yxr=r(gSt,"TFFlaubertForTokenClassification"),gSt.forEach(t),Kxr=r(Fje," (FlauBERT model)"),Fje.forEach(t),Zxr=i(me),IC=n(me,"LI",{});var Tje=s(IC);LEe=n(Tje,"STRONG",{});var hSt=s(LEe);e$r=r(hSt,"funnel"),hSt.forEach(t),o$r=r(Tje," \u2014 "),rK=n(Tje,"A",{href:!0});var pSt=s(rK);r$r=r(pSt,"TFFunnelForTokenClassification"),pSt.forEach(t),t$r=r(Tje," (Funnel Transformer model)"),Tje.forEach(t),a$r=i(me),NC=n(me,"LI",{});var Mje=s(NC);yEe=n(Mje,"STRONG",{});var _St=s(yEe);n$r=r(_St,"layoutlm"),_St.forEach(t),s$r=r(Mje," \u2014 "),tK=n(Mje,"A",{href:!0});var uSt=s(tK);l$r=r(uSt,"TFLayoutLMForTokenClassification"),uSt.forEach(t),i$r=r(Mje," (LayoutLM model)"),Mje.forEach(t),d$r=i(me),qC=n(me,"LI",{});var Eje=s(qC);xEe=n(Eje,"STRONG",{});var bSt=s(xEe);c$r=r(bSt,"longformer"),bSt.forEach(t),f$r=r(Eje," \u2014 "),aK=n(Eje,"A",{href:!0});var vSt=s(aK);m$r=r(vSt,"TFLongformerForTokenClassification"),vSt.forEach(t),g$r=r(Eje," (Longformer model)"),Eje.forEach(t),h$r=i(me),jC=n(me,"LI",{});var Cje=s(jC);$Ee=n(Cje,"STRONG",{});var FSt=s($Ee);p$r=r(FSt,"mobilebert"),FSt.forEach(t),_$r=r(Cje," \u2014 "),nK=n(Cje,"A",{href:!0});var TSt=s(nK);u$r=r(TSt,"TFMobileBertForTokenClassification"),TSt.forEach(t),b$r=r(Cje," (MobileBERT model)"),Cje.forEach(t),v$r=i(me),DC=n(me,"LI",{});var wje=s(DC);kEe=n(wje,"STRONG",{});var MSt=s(kEe);F$r=r(MSt,"mpnet"),MSt.forEach(t),T$r=r(wje," \u2014 "),sK=n(wje,"A",{href:!0});var ESt=s(sK);M$r=r(ESt,"TFMPNetForTokenClassification"),ESt.forEach(t),E$r=r(wje," (MPNet model)"),wje.forEach(t),C$r=i(me),GC=n(me,"LI",{});var Aje=s(GC);SEe=n(Aje,"STRONG",{});var CSt=s(SEe);w$r=r(CSt,"rembert"),CSt.forEach(t),A$r=r(Aje," \u2014 "),lK=n(Aje,"A",{href:!0});var wSt=s(lK);L$r=r(wSt,"TFRemBertForTokenClassification"),wSt.forEach(t),y$r=r(Aje," (RemBERT model)"),Aje.forEach(t),x$r=i(me),OC=n(me,"LI",{});var Lje=s(OC);REe=n(Lje,"STRONG",{});var ASt=s(REe);$$r=r(ASt,"roberta"),ASt.forEach(t),k$r=r(Lje," \u2014 "),iK=n(Lje,"A",{href:!0});var LSt=s(iK);S$r=r(LSt,"TFRobertaForTokenClassification"),LSt.forEach(t),R$r=r(Lje," (RoBERTa model)"),Lje.forEach(t),P$r=i(me),VC=n(me,"LI",{});var yje=s(VC);PEe=n(yje,"STRONG",{});var ySt=s(PEe);B$r=r(ySt,"roformer"),ySt.forEach(t),I$r=r(yje," \u2014 "),dK=n(yje,"A",{href:!0});var xSt=s(dK);N$r=r(xSt,"TFRoFormerForTokenClassification"),xSt.forEach(t),q$r=r(yje," (RoFormer model)"),yje.forEach(t),j$r=i(me),XC=n(me,"LI",{});var xje=s(XC);BEe=n(xje,"STRONG",{});var $St=s(BEe);D$r=r($St,"xlm"),$St.forEach(t),G$r=r(xje," \u2014 "),cK=n(xje,"A",{href:!0});var kSt=s(cK);O$r=r(kSt,"TFXLMForTokenClassification"),kSt.forEach(t),V$r=r(xje," (XLM model)"),xje.forEach(t),X$r=i(me),zC=n(me,"LI",{});var $je=s(zC);IEe=n($je,"STRONG",{});var SSt=s(IEe);z$r=r(SSt,"xlm-roberta"),SSt.forEach(t),Q$r=r($je," \u2014 "),fK=n($je,"A",{href:!0});var RSt=s(fK);W$r=r(RSt,"TFXLMRobertaForTokenClassification"),RSt.forEach(t),H$r=r($je," (XLM-RoBERTa model)"),$je.forEach(t),U$r=i(me),QC=n(me,"LI",{});var kje=s(QC);NEe=n(kje,"STRONG",{});var PSt=s(NEe);J$r=r(PSt,"xlnet"),PSt.forEach(t),Y$r=r(kje," \u2014 "),mK=n(kje,"A",{href:!0});var BSt=s(mK);K$r=r(BSt,"TFXLNetForTokenClassification"),BSt.forEach(t),Z$r=r(kje," (XLNet model)"),kje.forEach(t),me.forEach(t),ekr=i(zl),T(WC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),kVe=i(f),Pc=n(f,"H2",{class:!0});var Dze=s(Pc);HC=n(Dze,"A",{id:!0,class:!0,href:!0});var ISt=s(HC);qEe=n(ISt,"SPAN",{});var NSt=s(qEe);T(Tx.$$.fragment,NSt),NSt.forEach(t),ISt.forEach(t),okr=i(Dze),jEe=n(Dze,"SPAN",{});var qSt=s(jEe);rkr=r(qSt,"TFAutoModelForQuestionAnswering"),qSt.forEach(t),Dze.forEach(t),SVe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(Mx.$$.fragment,Ql),tkr=i(Ql),Bc=n(Ql,"P",{});var Qre=s(Bc);akr=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gK=n(Qre,"A",{href:!0});var jSt=s(gK);nkr=r(jSt,"from_pretrained()"),jSt.forEach(t),skr=r(Qre," class method or the "),hK=n(Qre,"A",{href:!0});var DSt=s(hK);lkr=r(DSt,"from_config()"),DSt.forEach(t),ikr=r(Qre,` class
method.`),Qre.forEach(t),dkr=i(Ql),Ex=n(Ql,"P",{});var Gze=s(Ex);ckr=r(Gze,"This class cannot be instantiated directly using "),DEe=n(Gze,"CODE",{});var GSt=s(DEe);fkr=r(GSt,"__init__()"),GSt.forEach(t),mkr=r(Gze," (throws an error)."),Gze.forEach(t),gkr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var Z6=s(Gt);T(Cx.$$.fragment,Z6),hkr=i(Z6),GEe=n(Z6,"P",{});var OSt=s(GEe);pkr=r(OSt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),OSt.forEach(t),_kr=i(Z6),Ic=n(Z6,"P",{});var Wre=s(Ic);ukr=r(Wre,`Note:
Loading a model from its configuration file does `),OEe=n(Wre,"STRONG",{});var VSt=s(OEe);bkr=r(VSt,"not"),VSt.forEach(t),vkr=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pK=n(Wre,"A",{href:!0});var XSt=s(pK);Fkr=r(XSt,"from_pretrained()"),XSt.forEach(t),Tkr=r(Wre," to load the model weights."),Wre.forEach(t),Mkr=i(Z6),T(UC.$$.fragment,Z6),Z6.forEach(t),Ekr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Wl=s(jr);T(wx.$$.fragment,Wl),Ckr=i(Wl),VEe=n(Wl,"P",{});var zSt=s(VEe);wkr=r(zSt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zSt.forEach(t),Akr=i(Wl),un=n(Wl,"P",{});var eL=s(un);Lkr=r(eL,"The model class to instantiate is selected based on the "),XEe=n(eL,"CODE",{});var QSt=s(XEe);ykr=r(QSt,"model_type"),QSt.forEach(t),xkr=r(eL,` property of the config object (either
passed as an argument or loaded from `),zEe=n(eL,"CODE",{});var WSt=s(zEe);$kr=r(WSt,"pretrained_model_name_or_path"),WSt.forEach(t),kkr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(eL,"CODE",{});var HSt=s(QEe);Skr=r(HSt,"pretrained_model_name_or_path"),HSt.forEach(t),Rkr=r(eL,":"),eL.forEach(t),Pkr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);JC=n(ge,"LI",{});var Sje=s(JC);WEe=n(Sje,"STRONG",{});var USt=s(WEe);Bkr=r(USt,"albert"),USt.forEach(t),Ikr=r(Sje," \u2014 "),_K=n(Sje,"A",{href:!0});var JSt=s(_K);Nkr=r(JSt,"TFAlbertForQuestionAnswering"),JSt.forEach(t),qkr=r(Sje," (ALBERT model)"),Sje.forEach(t),jkr=i(ge),YC=n(ge,"LI",{});var Rje=s(YC);HEe=n(Rje,"STRONG",{});var YSt=s(HEe);Dkr=r(YSt,"bert"),YSt.forEach(t),Gkr=r(Rje," \u2014 "),uK=n(Rje,"A",{href:!0});var KSt=s(uK);Okr=r(KSt,"TFBertForQuestionAnswering"),KSt.forEach(t),Vkr=r(Rje," (BERT model)"),Rje.forEach(t),Xkr=i(ge),KC=n(ge,"LI",{});var Pje=s(KC);UEe=n(Pje,"STRONG",{});var ZSt=s(UEe);zkr=r(ZSt,"camembert"),ZSt.forEach(t),Qkr=r(Pje," \u2014 "),bK=n(Pje,"A",{href:!0});var eRt=s(bK);Wkr=r(eRt,"TFCamembertForQuestionAnswering"),eRt.forEach(t),Hkr=r(Pje," (CamemBERT model)"),Pje.forEach(t),Ukr=i(ge),ZC=n(ge,"LI",{});var Bje=s(ZC);JEe=n(Bje,"STRONG",{});var oRt=s(JEe);Jkr=r(oRt,"convbert"),oRt.forEach(t),Ykr=r(Bje," \u2014 "),vK=n(Bje,"A",{href:!0});var rRt=s(vK);Kkr=r(rRt,"TFConvBertForQuestionAnswering"),rRt.forEach(t),Zkr=r(Bje," (ConvBERT model)"),Bje.forEach(t),eSr=i(ge),e5=n(ge,"LI",{});var Ije=s(e5);YEe=n(Ije,"STRONG",{});var tRt=s(YEe);oSr=r(tRt,"deberta"),tRt.forEach(t),rSr=r(Ije," \u2014 "),FK=n(Ije,"A",{href:!0});var aRt=s(FK);tSr=r(aRt,"TFDebertaForQuestionAnswering"),aRt.forEach(t),aSr=r(Ije," (DeBERTa model)"),Ije.forEach(t),nSr=i(ge),o5=n(ge,"LI",{});var Nje=s(o5);KEe=n(Nje,"STRONG",{});var nRt=s(KEe);sSr=r(nRt,"deberta-v2"),nRt.forEach(t),lSr=r(Nje," \u2014 "),TK=n(Nje,"A",{href:!0});var sRt=s(TK);iSr=r(sRt,"TFDebertaV2ForQuestionAnswering"),sRt.forEach(t),dSr=r(Nje," (DeBERTa-v2 model)"),Nje.forEach(t),cSr=i(ge),r5=n(ge,"LI",{});var qje=s(r5);ZEe=n(qje,"STRONG",{});var lRt=s(ZEe);fSr=r(lRt,"distilbert"),lRt.forEach(t),mSr=r(qje," \u2014 "),MK=n(qje,"A",{href:!0});var iRt=s(MK);gSr=r(iRt,"TFDistilBertForQuestionAnswering"),iRt.forEach(t),hSr=r(qje," (DistilBERT model)"),qje.forEach(t),pSr=i(ge),t5=n(ge,"LI",{});var jje=s(t5);e4e=n(jje,"STRONG",{});var dRt=s(e4e);_Sr=r(dRt,"electra"),dRt.forEach(t),uSr=r(jje," \u2014 "),EK=n(jje,"A",{href:!0});var cRt=s(EK);bSr=r(cRt,"TFElectraForQuestionAnswering"),cRt.forEach(t),vSr=r(jje," (ELECTRA model)"),jje.forEach(t),FSr=i(ge),a5=n(ge,"LI",{});var Dje=s(a5);o4e=n(Dje,"STRONG",{});var fRt=s(o4e);TSr=r(fRt,"flaubert"),fRt.forEach(t),MSr=r(Dje," \u2014 "),CK=n(Dje,"A",{href:!0});var mRt=s(CK);ESr=r(mRt,"TFFlaubertForQuestionAnsweringSimple"),mRt.forEach(t),CSr=r(Dje," (FlauBERT model)"),Dje.forEach(t),wSr=i(ge),n5=n(ge,"LI",{});var Gje=s(n5);r4e=n(Gje,"STRONG",{});var gRt=s(r4e);ASr=r(gRt,"funnel"),gRt.forEach(t),LSr=r(Gje," \u2014 "),wK=n(Gje,"A",{href:!0});var hRt=s(wK);ySr=r(hRt,"TFFunnelForQuestionAnswering"),hRt.forEach(t),xSr=r(Gje," (Funnel Transformer model)"),Gje.forEach(t),$Sr=i(ge),s5=n(ge,"LI",{});var Oje=s(s5);t4e=n(Oje,"STRONG",{});var pRt=s(t4e);kSr=r(pRt,"gptj"),pRt.forEach(t),SSr=r(Oje," \u2014 "),AK=n(Oje,"A",{href:!0});var _Rt=s(AK);RSr=r(_Rt,"TFGPTJForQuestionAnswering"),_Rt.forEach(t),PSr=r(Oje," (GPT-J model)"),Oje.forEach(t),BSr=i(ge),l5=n(ge,"LI",{});var Vje=s(l5);a4e=n(Vje,"STRONG",{});var uRt=s(a4e);ISr=r(uRt,"longformer"),uRt.forEach(t),NSr=r(Vje," \u2014 "),LK=n(Vje,"A",{href:!0});var bRt=s(LK);qSr=r(bRt,"TFLongformerForQuestionAnswering"),bRt.forEach(t),jSr=r(Vje," (Longformer model)"),Vje.forEach(t),DSr=i(ge),i5=n(ge,"LI",{});var Xje=s(i5);n4e=n(Xje,"STRONG",{});var vRt=s(n4e);GSr=r(vRt,"mobilebert"),vRt.forEach(t),OSr=r(Xje," \u2014 "),yK=n(Xje,"A",{href:!0});var FRt=s(yK);VSr=r(FRt,"TFMobileBertForQuestionAnswering"),FRt.forEach(t),XSr=r(Xje," (MobileBERT model)"),Xje.forEach(t),zSr=i(ge),d5=n(ge,"LI",{});var zje=s(d5);s4e=n(zje,"STRONG",{});var TRt=s(s4e);QSr=r(TRt,"mpnet"),TRt.forEach(t),WSr=r(zje," \u2014 "),xK=n(zje,"A",{href:!0});var MRt=s(xK);HSr=r(MRt,"TFMPNetForQuestionAnswering"),MRt.forEach(t),USr=r(zje," (MPNet model)"),zje.forEach(t),JSr=i(ge),c5=n(ge,"LI",{});var Qje=s(c5);l4e=n(Qje,"STRONG",{});var ERt=s(l4e);YSr=r(ERt,"rembert"),ERt.forEach(t),KSr=r(Qje," \u2014 "),$K=n(Qje,"A",{href:!0});var CRt=s($K);ZSr=r(CRt,"TFRemBertForQuestionAnswering"),CRt.forEach(t),eRr=r(Qje," (RemBERT model)"),Qje.forEach(t),oRr=i(ge),f5=n(ge,"LI",{});var Wje=s(f5);i4e=n(Wje,"STRONG",{});var wRt=s(i4e);rRr=r(wRt,"roberta"),wRt.forEach(t),tRr=r(Wje," \u2014 "),kK=n(Wje,"A",{href:!0});var ARt=s(kK);aRr=r(ARt,"TFRobertaForQuestionAnswering"),ARt.forEach(t),nRr=r(Wje," (RoBERTa model)"),Wje.forEach(t),sRr=i(ge),m5=n(ge,"LI",{});var Hje=s(m5);d4e=n(Hje,"STRONG",{});var LRt=s(d4e);lRr=r(LRt,"roformer"),LRt.forEach(t),iRr=r(Hje," \u2014 "),SK=n(Hje,"A",{href:!0});var yRt=s(SK);dRr=r(yRt,"TFRoFormerForQuestionAnswering"),yRt.forEach(t),cRr=r(Hje," (RoFormer model)"),Hje.forEach(t),fRr=i(ge),g5=n(ge,"LI",{});var Uje=s(g5);c4e=n(Uje,"STRONG",{});var xRt=s(c4e);mRr=r(xRt,"xlm"),xRt.forEach(t),gRr=r(Uje," \u2014 "),RK=n(Uje,"A",{href:!0});var $Rt=s(RK);hRr=r($Rt,"TFXLMForQuestionAnsweringSimple"),$Rt.forEach(t),pRr=r(Uje," (XLM model)"),Uje.forEach(t),_Rr=i(ge),h5=n(ge,"LI",{});var Jje=s(h5);f4e=n(Jje,"STRONG",{});var kRt=s(f4e);uRr=r(kRt,"xlm-roberta"),kRt.forEach(t),bRr=r(Jje," \u2014 "),PK=n(Jje,"A",{href:!0});var SRt=s(PK);vRr=r(SRt,"TFXLMRobertaForQuestionAnswering"),SRt.forEach(t),FRr=r(Jje," (XLM-RoBERTa model)"),Jje.forEach(t),TRr=i(ge),p5=n(ge,"LI",{});var Yje=s(p5);m4e=n(Yje,"STRONG",{});var RRt=s(m4e);MRr=r(RRt,"xlnet"),RRt.forEach(t),ERr=r(Yje," \u2014 "),BK=n(Yje,"A",{href:!0});var PRt=s(BK);CRr=r(PRt,"TFXLNetForQuestionAnsweringSimple"),PRt.forEach(t),wRr=r(Yje," (XLNet model)"),Yje.forEach(t),ge.forEach(t),ARr=i(Wl),T(_5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),RVe=i(f),Nc=n(f,"H2",{class:!0});var Oze=s(Nc);u5=n(Oze,"A",{id:!0,class:!0,href:!0});var BRt=s(u5);g4e=n(BRt,"SPAN",{});var IRt=s(g4e);T(Ax.$$.fragment,IRt),IRt.forEach(t),BRt.forEach(t),LRr=i(Oze),h4e=n(Oze,"SPAN",{});var NRt=s(h4e);yRr=r(NRt,"TFAutoModelForVision2Seq"),NRt.forEach(t),Oze.forEach(t),PVe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(Lx.$$.fragment,Hl),xRr=i(Hl),qc=n(Hl,"P",{});var Hre=s(qc);$Rr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IK=n(Hre,"A",{href:!0});var qRt=s(IK);kRr=r(qRt,"from_pretrained()"),qRt.forEach(t),SRr=r(Hre," class method or the "),NK=n(Hre,"A",{href:!0});var jRt=s(NK);RRr=r(jRt,"from_config()"),jRt.forEach(t),PRr=r(Hre,` class
method.`),Hre.forEach(t),BRr=i(Hl),yx=n(Hl,"P",{});var Vze=s(yx);IRr=r(Vze,"This class cannot be instantiated directly using "),p4e=n(Vze,"CODE",{});var DRt=s(p4e);NRr=r(DRt,"__init__()"),DRt.forEach(t),qRr=r(Vze," (throws an error)."),Vze.forEach(t),jRr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var oL=s(Ot);T(xx.$$.fragment,oL),DRr=i(oL),_4e=n(oL,"P",{});var GRt=s(_4e);GRr=r(GRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GRt.forEach(t),ORr=i(oL),jc=n(oL,"P",{});var Ure=s(jc);VRr=r(Ure,`Note:
Loading a model from its configuration file does `),u4e=n(Ure,"STRONG",{});var ORt=s(u4e);XRr=r(ORt,"not"),ORt.forEach(t),zRr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(Ure,"A",{href:!0});var VRt=s(qK);QRr=r(VRt,"from_pretrained()"),VRt.forEach(t),WRr=r(Ure," to load the model weights."),Ure.forEach(t),HRr=i(oL),T(b5.$$.fragment,oL),oL.forEach(t),URr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T($x.$$.fragment,Ul),JRr=i(Ul),b4e=n(Ul,"P",{});var XRt=s(b4e);YRr=r(XRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XRt.forEach(t),KRr=i(Ul),bn=n(Ul,"P",{});var rL=s(bn);ZRr=r(rL,"The model class to instantiate is selected based on the "),v4e=n(rL,"CODE",{});var zRt=s(v4e);ePr=r(zRt,"model_type"),zRt.forEach(t),oPr=r(rL,` property of the config object (either
passed as an argument or loaded from `),F4e=n(rL,"CODE",{});var QRt=s(F4e);rPr=r(QRt,"pretrained_model_name_or_path"),QRt.forEach(t),tPr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(rL,"CODE",{});var WRt=s(T4e);aPr=r(WRt,"pretrained_model_name_or_path"),WRt.forEach(t),nPr=r(rL,":"),rL.forEach(t),sPr=i(Ul),M4e=n(Ul,"UL",{});var HRt=s(M4e);v5=n(HRt,"LI",{});var Kje=s(v5);E4e=n(Kje,"STRONG",{});var URt=s(E4e);lPr=r(URt,"vision-encoder-decoder"),URt.forEach(t),iPr=r(Kje," \u2014 "),jK=n(Kje,"A",{href:!0});var JRt=s(jK);dPr=r(JRt,"TFVisionEncoderDecoderModel"),JRt.forEach(t),cPr=r(Kje," (Vision Encoder decoder model)"),Kje.forEach(t),HRt.forEach(t),fPr=i(Ul),T(F5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),BVe=i(f),Dc=n(f,"H2",{class:!0});var Xze=s(Dc);T5=n(Xze,"A",{id:!0,class:!0,href:!0});var YRt=s(T5);C4e=n(YRt,"SPAN",{});var KRt=s(C4e);T(kx.$$.fragment,KRt),KRt.forEach(t),YRt.forEach(t),mPr=i(Xze),w4e=n(Xze,"SPAN",{});var ZRt=s(w4e);gPr=r(ZRt,"TFAutoModelForSpeechSeq2Seq"),ZRt.forEach(t),Xze.forEach(t),IVe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(Sx.$$.fragment,Jl),hPr=i(Jl),Gc=n(Jl,"P",{});var Jre=s(Gc);pPr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DK=n(Jre,"A",{href:!0});var ePt=s(DK);_Pr=r(ePt,"from_pretrained()"),ePt.forEach(t),uPr=r(Jre," class method or the "),GK=n(Jre,"A",{href:!0});var oPt=s(GK);bPr=r(oPt,"from_config()"),oPt.forEach(t),vPr=r(Jre,` class
method.`),Jre.forEach(t),FPr=i(Jl),Rx=n(Jl,"P",{});var zze=s(Rx);TPr=r(zze,"This class cannot be instantiated directly using "),A4e=n(zze,"CODE",{});var rPt=s(A4e);MPr=r(rPt,"__init__()"),rPt.forEach(t),EPr=r(zze," (throws an error)."),zze.forEach(t),CPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var tL=s(Vt);T(Px.$$.fragment,tL),wPr=i(tL),L4e=n(tL,"P",{});var tPt=s(L4e);APr=r(tPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tPt.forEach(t),LPr=i(tL),Oc=n(tL,"P",{});var Yre=s(Oc);yPr=r(Yre,`Note:
Loading a model from its configuration file does `),y4e=n(Yre,"STRONG",{});var aPt=s(y4e);xPr=r(aPt,"not"),aPt.forEach(t),$Pr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Yre,"A",{href:!0});var nPt=s(OK);kPr=r(nPt,"from_pretrained()"),nPt.forEach(t),SPr=r(Yre," to load the model weights."),Yre.forEach(t),RPr=i(tL),T(M5.$$.fragment,tL),tL.forEach(t),PPr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Bx.$$.fragment,Yl),BPr=i(Yl),x4e=n(Yl,"P",{});var sPt=s(x4e);IPr=r(sPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sPt.forEach(t),NPr=i(Yl),vn=n(Yl,"P",{});var aL=s(vn);qPr=r(aL,"The model class to instantiate is selected based on the "),$4e=n(aL,"CODE",{});var lPt=s($4e);jPr=r(lPt,"model_type"),lPt.forEach(t),DPr=r(aL,` property of the config object (either
passed as an argument or loaded from `),k4e=n(aL,"CODE",{});var iPt=s(k4e);GPr=r(iPt,"pretrained_model_name_or_path"),iPt.forEach(t),OPr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(aL,"CODE",{});var dPt=s(S4e);VPr=r(dPt,"pretrained_model_name_or_path"),dPt.forEach(t),XPr=r(aL,":"),aL.forEach(t),zPr=i(Yl),R4e=n(Yl,"UL",{});var cPt=s(R4e);E5=n(cPt,"LI",{});var Zje=s(E5);P4e=n(Zje,"STRONG",{});var fPt=s(P4e);QPr=r(fPt,"speech_to_text"),fPt.forEach(t),WPr=r(Zje," \u2014 "),VK=n(Zje,"A",{href:!0});var mPt=s(VK);HPr=r(mPt,"TFSpeech2TextForConditionalGeneration"),mPt.forEach(t),UPr=r(Zje," (Speech2Text model)"),Zje.forEach(t),cPt.forEach(t),JPr=i(Yl),T(C5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),NVe=i(f),Vc=n(f,"H2",{class:!0});var Qze=s(Vc);w5=n(Qze,"A",{id:!0,class:!0,href:!0});var gPt=s(w5);B4e=n(gPt,"SPAN",{});var hPt=s(B4e);T(Ix.$$.fragment,hPt),hPt.forEach(t),gPt.forEach(t),YPr=i(Qze),I4e=n(Qze,"SPAN",{});var pPt=s(I4e);KPr=r(pPt,"FlaxAutoModel"),pPt.forEach(t),Qze.forEach(t),qVe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(Nx.$$.fragment,Kl),ZPr=i(Kl),Xc=n(Kl,"P",{});var Kre=s(Xc);eBr=r(Kre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XK=n(Kre,"A",{href:!0});var _Pt=s(XK);oBr=r(_Pt,"from_pretrained()"),_Pt.forEach(t),rBr=r(Kre," class method or the "),zK=n(Kre,"A",{href:!0});var uPt=s(zK);tBr=r(uPt,"from_config()"),uPt.forEach(t),aBr=r(Kre,` class
method.`),Kre.forEach(t),nBr=i(Kl),qx=n(Kl,"P",{});var Wze=s(qx);sBr=r(Wze,"This class cannot be instantiated directly using "),N4e=n(Wze,"CODE",{});var bPt=s(N4e);lBr=r(bPt,"__init__()"),bPt.forEach(t),iBr=r(Wze," (throws an error)."),Wze.forEach(t),dBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var nL=s(Xt);T(jx.$$.fragment,nL),cBr=i(nL),q4e=n(nL,"P",{});var vPt=s(q4e);fBr=r(vPt,"Instantiates one of the base model classes of the library from a configuration."),vPt.forEach(t),mBr=i(nL),zc=n(nL,"P",{});var Zre=s(zc);gBr=r(Zre,`Note:
Loading a model from its configuration file does `),j4e=n(Zre,"STRONG",{});var FPt=s(j4e);hBr=r(FPt,"not"),FPt.forEach(t),pBr=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(Zre,"A",{href:!0});var TPt=s(QK);_Br=r(TPt,"from_pretrained()"),TPt.forEach(t),uBr=r(Zre," to load the model weights."),Zre.forEach(t),bBr=i(nL),T(A5.$$.fragment,nL),nL.forEach(t),vBr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Dx.$$.fragment,Zl),FBr=i(Zl),D4e=n(Zl,"P",{});var MPt=s(D4e);TBr=r(MPt,"Instantiate one of the base model classes of the library from a pretrained model."),MPt.forEach(t),MBr=i(Zl),Fn=n(Zl,"P",{});var sL=s(Fn);EBr=r(sL,"The model class to instantiate is selected based on the "),G4e=n(sL,"CODE",{});var EPt=s(G4e);CBr=r(EPt,"model_type"),EPt.forEach(t),wBr=r(sL,` property of the config object (either
passed as an argument or loaded from `),O4e=n(sL,"CODE",{});var CPt=s(O4e);ABr=r(CPt,"pretrained_model_name_or_path"),CPt.forEach(t),LBr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(sL,"CODE",{});var wPt=s(V4e);yBr=r(wPt,"pretrained_model_name_or_path"),wPt.forEach(t),xBr=r(sL,":"),sL.forEach(t),$Br=i(Zl),oe=n(Zl,"UL",{});var ae=s(oe);L5=n(ae,"LI",{});var eDe=s(L5);X4e=n(eDe,"STRONG",{});var APt=s(X4e);kBr=r(APt,"albert"),APt.forEach(t),SBr=r(eDe," \u2014 "),WK=n(eDe,"A",{href:!0});var LPt=s(WK);RBr=r(LPt,"FlaxAlbertModel"),LPt.forEach(t),PBr=r(eDe," (ALBERT model)"),eDe.forEach(t),BBr=i(ae),y5=n(ae,"LI",{});var oDe=s(y5);z4e=n(oDe,"STRONG",{});var yPt=s(z4e);IBr=r(yPt,"bart"),yPt.forEach(t),NBr=r(oDe," \u2014 "),HK=n(oDe,"A",{href:!0});var xPt=s(HK);qBr=r(xPt,"FlaxBartModel"),xPt.forEach(t),jBr=r(oDe," (BART model)"),oDe.forEach(t),DBr=i(ae),x5=n(ae,"LI",{});var rDe=s(x5);Q4e=n(rDe,"STRONG",{});var $Pt=s(Q4e);GBr=r($Pt,"beit"),$Pt.forEach(t),OBr=r(rDe," \u2014 "),UK=n(rDe,"A",{href:!0});var kPt=s(UK);VBr=r(kPt,"FlaxBeitModel"),kPt.forEach(t),XBr=r(rDe," (BEiT model)"),rDe.forEach(t),zBr=i(ae),$5=n(ae,"LI",{});var tDe=s($5);W4e=n(tDe,"STRONG",{});var SPt=s(W4e);QBr=r(SPt,"bert"),SPt.forEach(t),WBr=r(tDe," \u2014 "),JK=n(tDe,"A",{href:!0});var RPt=s(JK);HBr=r(RPt,"FlaxBertModel"),RPt.forEach(t),UBr=r(tDe," (BERT model)"),tDe.forEach(t),JBr=i(ae),k5=n(ae,"LI",{});var aDe=s(k5);H4e=n(aDe,"STRONG",{});var PPt=s(H4e);YBr=r(PPt,"big_bird"),PPt.forEach(t),KBr=r(aDe," \u2014 "),YK=n(aDe,"A",{href:!0});var BPt=s(YK);ZBr=r(BPt,"FlaxBigBirdModel"),BPt.forEach(t),eIr=r(aDe," (BigBird model)"),aDe.forEach(t),oIr=i(ae),S5=n(ae,"LI",{});var nDe=s(S5);U4e=n(nDe,"STRONG",{});var IPt=s(U4e);rIr=r(IPt,"blenderbot"),IPt.forEach(t),tIr=r(nDe," \u2014 "),KK=n(nDe,"A",{href:!0});var NPt=s(KK);aIr=r(NPt,"FlaxBlenderbotModel"),NPt.forEach(t),nIr=r(nDe," (Blenderbot model)"),nDe.forEach(t),sIr=i(ae),R5=n(ae,"LI",{});var sDe=s(R5);J4e=n(sDe,"STRONG",{});var qPt=s(J4e);lIr=r(qPt,"blenderbot-small"),qPt.forEach(t),iIr=r(sDe," \u2014 "),ZK=n(sDe,"A",{href:!0});var jPt=s(ZK);dIr=r(jPt,"FlaxBlenderbotSmallModel"),jPt.forEach(t),cIr=r(sDe," (BlenderbotSmall model)"),sDe.forEach(t),fIr=i(ae),P5=n(ae,"LI",{});var lDe=s(P5);Y4e=n(lDe,"STRONG",{});var DPt=s(Y4e);mIr=r(DPt,"clip"),DPt.forEach(t),gIr=r(lDe," \u2014 "),eZ=n(lDe,"A",{href:!0});var GPt=s(eZ);hIr=r(GPt,"FlaxCLIPModel"),GPt.forEach(t),pIr=r(lDe," (CLIP model)"),lDe.forEach(t),_Ir=i(ae),B5=n(ae,"LI",{});var iDe=s(B5);K4e=n(iDe,"STRONG",{});var OPt=s(K4e);uIr=r(OPt,"distilbert"),OPt.forEach(t),bIr=r(iDe," \u2014 "),oZ=n(iDe,"A",{href:!0});var VPt=s(oZ);vIr=r(VPt,"FlaxDistilBertModel"),VPt.forEach(t),FIr=r(iDe," (DistilBERT model)"),iDe.forEach(t),TIr=i(ae),I5=n(ae,"LI",{});var dDe=s(I5);Z4e=n(dDe,"STRONG",{});var XPt=s(Z4e);MIr=r(XPt,"electra"),XPt.forEach(t),EIr=r(dDe," \u2014 "),rZ=n(dDe,"A",{href:!0});var zPt=s(rZ);CIr=r(zPt,"FlaxElectraModel"),zPt.forEach(t),wIr=r(dDe," (ELECTRA model)"),dDe.forEach(t),AIr=i(ae),N5=n(ae,"LI",{});var cDe=s(N5);eCe=n(cDe,"STRONG",{});var QPt=s(eCe);LIr=r(QPt,"gpt2"),QPt.forEach(t),yIr=r(cDe," \u2014 "),tZ=n(cDe,"A",{href:!0});var WPt=s(tZ);xIr=r(WPt,"FlaxGPT2Model"),WPt.forEach(t),$Ir=r(cDe," (OpenAI GPT-2 model)"),cDe.forEach(t),kIr=i(ae),q5=n(ae,"LI",{});var fDe=s(q5);oCe=n(fDe,"STRONG",{});var HPt=s(oCe);SIr=r(HPt,"gpt_neo"),HPt.forEach(t),RIr=r(fDe," \u2014 "),aZ=n(fDe,"A",{href:!0});var UPt=s(aZ);PIr=r(UPt,"FlaxGPTNeoModel"),UPt.forEach(t),BIr=r(fDe," (GPT Neo model)"),fDe.forEach(t),IIr=i(ae),j5=n(ae,"LI",{});var mDe=s(j5);rCe=n(mDe,"STRONG",{});var JPt=s(rCe);NIr=r(JPt,"gptj"),JPt.forEach(t),qIr=r(mDe," \u2014 "),nZ=n(mDe,"A",{href:!0});var YPt=s(nZ);jIr=r(YPt,"FlaxGPTJModel"),YPt.forEach(t),DIr=r(mDe," (GPT-J model)"),mDe.forEach(t),GIr=i(ae),D5=n(ae,"LI",{});var gDe=s(D5);tCe=n(gDe,"STRONG",{});var KPt=s(tCe);OIr=r(KPt,"longt5"),KPt.forEach(t),VIr=r(gDe," \u2014 "),sZ=n(gDe,"A",{href:!0});var ZPt=s(sZ);XIr=r(ZPt,"FlaxLongT5Model"),ZPt.forEach(t),zIr=r(gDe," (LongT5 model)"),gDe.forEach(t),QIr=i(ae),G5=n(ae,"LI",{});var hDe=s(G5);aCe=n(hDe,"STRONG",{});var eBt=s(aCe);WIr=r(eBt,"marian"),eBt.forEach(t),HIr=r(hDe," \u2014 "),lZ=n(hDe,"A",{href:!0});var oBt=s(lZ);UIr=r(oBt,"FlaxMarianModel"),oBt.forEach(t),JIr=r(hDe," (Marian model)"),hDe.forEach(t),YIr=i(ae),O5=n(ae,"LI",{});var pDe=s(O5);nCe=n(pDe,"STRONG",{});var rBt=s(nCe);KIr=r(rBt,"mbart"),rBt.forEach(t),ZIr=r(pDe," \u2014 "),iZ=n(pDe,"A",{href:!0});var tBt=s(iZ);eNr=r(tBt,"FlaxMBartModel"),tBt.forEach(t),oNr=r(pDe," (mBART model)"),pDe.forEach(t),rNr=i(ae),V5=n(ae,"LI",{});var _De=s(V5);sCe=n(_De,"STRONG",{});var aBt=s(sCe);tNr=r(aBt,"mt5"),aBt.forEach(t),aNr=r(_De," \u2014 "),dZ=n(_De,"A",{href:!0});var nBt=s(dZ);nNr=r(nBt,"FlaxMT5Model"),nBt.forEach(t),sNr=r(_De," (MT5 model)"),_De.forEach(t),lNr=i(ae),X5=n(ae,"LI",{});var uDe=s(X5);lCe=n(uDe,"STRONG",{});var sBt=s(lCe);iNr=r(sBt,"opt"),sBt.forEach(t),dNr=r(uDe," \u2014 "),cZ=n(uDe,"A",{href:!0});var lBt=s(cZ);cNr=r(lBt,"FlaxOPTModel"),lBt.forEach(t),fNr=r(uDe," (OPT model)"),uDe.forEach(t),mNr=i(ae),z5=n(ae,"LI",{});var bDe=s(z5);iCe=n(bDe,"STRONG",{});var iBt=s(iCe);gNr=r(iBt,"pegasus"),iBt.forEach(t),hNr=r(bDe," \u2014 "),fZ=n(bDe,"A",{href:!0});var dBt=s(fZ);pNr=r(dBt,"FlaxPegasusModel"),dBt.forEach(t),_Nr=r(bDe," (Pegasus model)"),bDe.forEach(t),uNr=i(ae),Q5=n(ae,"LI",{});var vDe=s(Q5);dCe=n(vDe,"STRONG",{});var cBt=s(dCe);bNr=r(cBt,"roberta"),cBt.forEach(t),vNr=r(vDe," \u2014 "),mZ=n(vDe,"A",{href:!0});var fBt=s(mZ);FNr=r(fBt,"FlaxRobertaModel"),fBt.forEach(t),TNr=r(vDe," (RoBERTa model)"),vDe.forEach(t),MNr=i(ae),W5=n(ae,"LI",{});var FDe=s(W5);cCe=n(FDe,"STRONG",{});var mBt=s(cCe);ENr=r(mBt,"roformer"),mBt.forEach(t),CNr=r(FDe," \u2014 "),gZ=n(FDe,"A",{href:!0});var gBt=s(gZ);wNr=r(gBt,"FlaxRoFormerModel"),gBt.forEach(t),ANr=r(FDe," (RoFormer model)"),FDe.forEach(t),LNr=i(ae),H5=n(ae,"LI",{});var TDe=s(H5);fCe=n(TDe,"STRONG",{});var hBt=s(fCe);yNr=r(hBt,"t5"),hBt.forEach(t),xNr=r(TDe," \u2014 "),hZ=n(TDe,"A",{href:!0});var pBt=s(hZ);$Nr=r(pBt,"FlaxT5Model"),pBt.forEach(t),kNr=r(TDe," (T5 model)"),TDe.forEach(t),SNr=i(ae),U5=n(ae,"LI",{});var MDe=s(U5);mCe=n(MDe,"STRONG",{});var _Bt=s(mCe);RNr=r(_Bt,"vision-text-dual-encoder"),_Bt.forEach(t),PNr=r(MDe," \u2014 "),pZ=n(MDe,"A",{href:!0});var uBt=s(pZ);BNr=r(uBt,"FlaxVisionTextDualEncoderModel"),uBt.forEach(t),INr=r(MDe," (VisionTextDualEncoder model)"),MDe.forEach(t),NNr=i(ae),J5=n(ae,"LI",{});var EDe=s(J5);gCe=n(EDe,"STRONG",{});var bBt=s(gCe);qNr=r(bBt,"vit"),bBt.forEach(t),jNr=r(EDe," \u2014 "),_Z=n(EDe,"A",{href:!0});var vBt=s(_Z);DNr=r(vBt,"FlaxViTModel"),vBt.forEach(t),GNr=r(EDe," (ViT model)"),EDe.forEach(t),ONr=i(ae),Y5=n(ae,"LI",{});var CDe=s(Y5);hCe=n(CDe,"STRONG",{});var FBt=s(hCe);VNr=r(FBt,"wav2vec2"),FBt.forEach(t),XNr=r(CDe," \u2014 "),uZ=n(CDe,"A",{href:!0});var TBt=s(uZ);zNr=r(TBt,"FlaxWav2Vec2Model"),TBt.forEach(t),QNr=r(CDe," (Wav2Vec2 model)"),CDe.forEach(t),WNr=i(ae),K5=n(ae,"LI",{});var wDe=s(K5);pCe=n(wDe,"STRONG",{});var MBt=s(pCe);HNr=r(MBt,"xglm"),MBt.forEach(t),UNr=r(wDe," \u2014 "),bZ=n(wDe,"A",{href:!0});var EBt=s(bZ);JNr=r(EBt,"FlaxXGLMModel"),EBt.forEach(t),YNr=r(wDe," (XGLM model)"),wDe.forEach(t),KNr=i(ae),Z5=n(ae,"LI",{});var ADe=s(Z5);_Ce=n(ADe,"STRONG",{});var CBt=s(_Ce);ZNr=r(CBt,"xlm-roberta"),CBt.forEach(t),eqr=r(ADe," \u2014 "),vZ=n(ADe,"A",{href:!0});var wBt=s(vZ);oqr=r(wBt,"FlaxXLMRobertaModel"),wBt.forEach(t),rqr=r(ADe," (XLM-RoBERTa model)"),ADe.forEach(t),ae.forEach(t),tqr=i(Zl),T(e3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),jVe=i(f),Qc=n(f,"H2",{class:!0});var Hze=s(Qc);o3=n(Hze,"A",{id:!0,class:!0,href:!0});var ABt=s(o3);uCe=n(ABt,"SPAN",{});var LBt=s(uCe);T(Gx.$$.fragment,LBt),LBt.forEach(t),ABt.forEach(t),aqr=i(Hze),bCe=n(Hze,"SPAN",{});var yBt=s(bCe);nqr=r(yBt,"FlaxAutoModelForCausalLM"),yBt.forEach(t),Hze.forEach(t),DVe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Ox.$$.fragment,ei),sqr=i(ei),Wc=n(ei,"P",{});var ete=s(Wc);lqr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FZ=n(ete,"A",{href:!0});var xBt=s(FZ);iqr=r(xBt,"from_pretrained()"),xBt.forEach(t),dqr=r(ete," class method or the "),TZ=n(ete,"A",{href:!0});var $Bt=s(TZ);cqr=r($Bt,"from_config()"),$Bt.forEach(t),fqr=r(ete,` class
method.`),ete.forEach(t),mqr=i(ei),Vx=n(ei,"P",{});var Uze=s(Vx);gqr=r(Uze,"This class cannot be instantiated directly using "),vCe=n(Uze,"CODE",{});var kBt=s(vCe);hqr=r(kBt,"__init__()"),kBt.forEach(t),pqr=r(Uze," (throws an error)."),Uze.forEach(t),_qr=i(ei),zt=n(ei,"DIV",{class:!0});var lL=s(zt);T(Xx.$$.fragment,lL),uqr=i(lL),FCe=n(lL,"P",{});var SBt=s(FCe);bqr=r(SBt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SBt.forEach(t),vqr=i(lL),Hc=n(lL,"P",{});var ote=s(Hc);Fqr=r(ote,`Note:
Loading a model from its configuration file does `),TCe=n(ote,"STRONG",{});var RBt=s(TCe);Tqr=r(RBt,"not"),RBt.forEach(t),Mqr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),MZ=n(ote,"A",{href:!0});var PBt=s(MZ);Eqr=r(PBt,"from_pretrained()"),PBt.forEach(t),Cqr=r(ote," to load the model weights."),ote.forEach(t),wqr=i(lL),T(r3.$$.fragment,lL),lL.forEach(t),Aqr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(zx.$$.fragment,oi),Lqr=i(oi),MCe=n(oi,"P",{});var BBt=s(MCe);yqr=r(BBt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BBt.forEach(t),xqr=i(oi),Tn=n(oi,"P",{});var iL=s(Tn);$qr=r(iL,"The model class to instantiate is selected based on the "),ECe=n(iL,"CODE",{});var IBt=s(ECe);kqr=r(IBt,"model_type"),IBt.forEach(t),Sqr=r(iL,` property of the config object (either
passed as an argument or loaded from `),CCe=n(iL,"CODE",{});var NBt=s(CCe);Rqr=r(NBt,"pretrained_model_name_or_path"),NBt.forEach(t),Pqr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(iL,"CODE",{});var qBt=s(wCe);Bqr=r(qBt,"pretrained_model_name_or_path"),qBt.forEach(t),Iqr=r(iL,":"),iL.forEach(t),Nqr=i(oi),xe=n(oi,"UL",{});var Ne=s(xe);t3=n(Ne,"LI",{});var LDe=s(t3);ACe=n(LDe,"STRONG",{});var jBt=s(ACe);qqr=r(jBt,"bart"),jBt.forEach(t),jqr=r(LDe," \u2014 "),EZ=n(LDe,"A",{href:!0});var DBt=s(EZ);Dqr=r(DBt,"FlaxBartForCausalLM"),DBt.forEach(t),Gqr=r(LDe," (BART model)"),LDe.forEach(t),Oqr=i(Ne),a3=n(Ne,"LI",{});var yDe=s(a3);LCe=n(yDe,"STRONG",{});var GBt=s(LCe);Vqr=r(GBt,"bert"),GBt.forEach(t),Xqr=r(yDe," \u2014 "),CZ=n(yDe,"A",{href:!0});var OBt=s(CZ);zqr=r(OBt,"FlaxBertForCausalLM"),OBt.forEach(t),Qqr=r(yDe," (BERT model)"),yDe.forEach(t),Wqr=i(Ne),n3=n(Ne,"LI",{});var xDe=s(n3);yCe=n(xDe,"STRONG",{});var VBt=s(yCe);Hqr=r(VBt,"big_bird"),VBt.forEach(t),Uqr=r(xDe," \u2014 "),wZ=n(xDe,"A",{href:!0});var XBt=s(wZ);Jqr=r(XBt,"FlaxBigBirdForCausalLM"),XBt.forEach(t),Yqr=r(xDe," (BigBird model)"),xDe.forEach(t),Kqr=i(Ne),s3=n(Ne,"LI",{});var $De=s(s3);xCe=n($De,"STRONG",{});var zBt=s(xCe);Zqr=r(zBt,"electra"),zBt.forEach(t),ejr=r($De," \u2014 "),AZ=n($De,"A",{href:!0});var QBt=s(AZ);ojr=r(QBt,"FlaxElectraForCausalLM"),QBt.forEach(t),rjr=r($De," (ELECTRA model)"),$De.forEach(t),tjr=i(Ne),l3=n(Ne,"LI",{});var kDe=s(l3);$Ce=n(kDe,"STRONG",{});var WBt=s($Ce);ajr=r(WBt,"gpt2"),WBt.forEach(t),njr=r(kDe," \u2014 "),LZ=n(kDe,"A",{href:!0});var HBt=s(LZ);sjr=r(HBt,"FlaxGPT2LMHeadModel"),HBt.forEach(t),ljr=r(kDe," (OpenAI GPT-2 model)"),kDe.forEach(t),ijr=i(Ne),i3=n(Ne,"LI",{});var SDe=s(i3);kCe=n(SDe,"STRONG",{});var UBt=s(kCe);djr=r(UBt,"gpt_neo"),UBt.forEach(t),cjr=r(SDe," \u2014 "),yZ=n(SDe,"A",{href:!0});var JBt=s(yZ);fjr=r(JBt,"FlaxGPTNeoForCausalLM"),JBt.forEach(t),mjr=r(SDe," (GPT Neo model)"),SDe.forEach(t),gjr=i(Ne),d3=n(Ne,"LI",{});var RDe=s(d3);SCe=n(RDe,"STRONG",{});var YBt=s(SCe);hjr=r(YBt,"gptj"),YBt.forEach(t),pjr=r(RDe," \u2014 "),xZ=n(RDe,"A",{href:!0});var KBt=s(xZ);_jr=r(KBt,"FlaxGPTJForCausalLM"),KBt.forEach(t),ujr=r(RDe," (GPT-J model)"),RDe.forEach(t),bjr=i(Ne),c3=n(Ne,"LI",{});var PDe=s(c3);RCe=n(PDe,"STRONG",{});var ZBt=s(RCe);vjr=r(ZBt,"opt"),ZBt.forEach(t),Fjr=r(PDe," \u2014 "),$Z=n(PDe,"A",{href:!0});var eIt=s($Z);Tjr=r(eIt,"FlaxOPTForCausalLM"),eIt.forEach(t),Mjr=r(PDe," (OPT model)"),PDe.forEach(t),Ejr=i(Ne),f3=n(Ne,"LI",{});var BDe=s(f3);PCe=n(BDe,"STRONG",{});var oIt=s(PCe);Cjr=r(oIt,"roberta"),oIt.forEach(t),wjr=r(BDe," \u2014 "),kZ=n(BDe,"A",{href:!0});var rIt=s(kZ);Ajr=r(rIt,"FlaxRobertaForCausalLM"),rIt.forEach(t),Ljr=r(BDe," (RoBERTa model)"),BDe.forEach(t),yjr=i(Ne),m3=n(Ne,"LI",{});var IDe=s(m3);BCe=n(IDe,"STRONG",{});var tIt=s(BCe);xjr=r(tIt,"xglm"),tIt.forEach(t),$jr=r(IDe," \u2014 "),SZ=n(IDe,"A",{href:!0});var aIt=s(SZ);kjr=r(aIt,"FlaxXGLMForCausalLM"),aIt.forEach(t),Sjr=r(IDe," (XGLM model)"),IDe.forEach(t),Ne.forEach(t),Rjr=i(oi),T(g3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),GVe=i(f),Uc=n(f,"H2",{class:!0});var Jze=s(Uc);h3=n(Jze,"A",{id:!0,class:!0,href:!0});var nIt=s(h3);ICe=n(nIt,"SPAN",{});var sIt=s(ICe);T(Qx.$$.fragment,sIt),sIt.forEach(t),nIt.forEach(t),Pjr=i(Jze),NCe=n(Jze,"SPAN",{});var lIt=s(NCe);Bjr=r(lIt,"FlaxAutoModelForPreTraining"),lIt.forEach(t),Jze.forEach(t),OVe=i(f),_r=n(f,"DIV",{class:!0});var ri=s(_r);T(Wx.$$.fragment,ri),Ijr=i(ri),Jc=n(ri,"P",{});var rte=s(Jc);Njr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RZ=n(rte,"A",{href:!0});var iIt=s(RZ);qjr=r(iIt,"from_pretrained()"),iIt.forEach(t),jjr=r(rte," class method or the "),PZ=n(rte,"A",{href:!0});var dIt=s(PZ);Djr=r(dIt,"from_config()"),dIt.forEach(t),Gjr=r(rte,` class
method.`),rte.forEach(t),Ojr=i(ri),Hx=n(ri,"P",{});var Yze=s(Hx);Vjr=r(Yze,"This class cannot be instantiated directly using "),qCe=n(Yze,"CODE",{});var cIt=s(qCe);Xjr=r(cIt,"__init__()"),cIt.forEach(t),zjr=r(Yze," (throws an error)."),Yze.forEach(t),Qjr=i(ri),Qt=n(ri,"DIV",{class:!0});var dL=s(Qt);T(Ux.$$.fragment,dL),Wjr=i(dL),jCe=n(dL,"P",{});var fIt=s(jCe);Hjr=r(fIt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fIt.forEach(t),Ujr=i(dL),Yc=n(dL,"P",{});var tte=s(Yc);Jjr=r(tte,`Note:
Loading a model from its configuration file does `),DCe=n(tte,"STRONG",{});var mIt=s(DCe);Yjr=r(mIt,"not"),mIt.forEach(t),Kjr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BZ=n(tte,"A",{href:!0});var gIt=s(BZ);Zjr=r(gIt,"from_pretrained()"),gIt.forEach(t),eDr=r(tte," to load the model weights."),tte.forEach(t),oDr=i(dL),T(p3.$$.fragment,dL),dL.forEach(t),rDr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Jx.$$.fragment,ti),tDr=i(ti),GCe=n(ti,"P",{});var hIt=s(GCe);aDr=r(hIt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hIt.forEach(t),nDr=i(ti),Mn=n(ti,"P",{});var cL=s(Mn);sDr=r(cL,"The model class to instantiate is selected based on the "),OCe=n(cL,"CODE",{});var pIt=s(OCe);lDr=r(pIt,"model_type"),pIt.forEach(t),iDr=r(cL,` property of the config object (either
passed as an argument or loaded from `),VCe=n(cL,"CODE",{});var _It=s(VCe);dDr=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),cDr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n(cL,"CODE",{});var uIt=s(XCe);fDr=r(uIt,"pretrained_model_name_or_path"),uIt.forEach(t),mDr=r(cL,":"),cL.forEach(t),gDr=i(ti),Ee=n(ti,"UL",{});var we=s(Ee);_3=n(we,"LI",{});var NDe=s(_3);zCe=n(NDe,"STRONG",{});var bIt=s(zCe);hDr=r(bIt,"albert"),bIt.forEach(t),pDr=r(NDe," \u2014 "),IZ=n(NDe,"A",{href:!0});var vIt=s(IZ);_Dr=r(vIt,"FlaxAlbertForPreTraining"),vIt.forEach(t),uDr=r(NDe," (ALBERT model)"),NDe.forEach(t),bDr=i(we),u3=n(we,"LI",{});var qDe=s(u3);QCe=n(qDe,"STRONG",{});var FIt=s(QCe);vDr=r(FIt,"bart"),FIt.forEach(t),FDr=r(qDe," \u2014 "),NZ=n(qDe,"A",{href:!0});var TIt=s(NZ);TDr=r(TIt,"FlaxBartForConditionalGeneration"),TIt.forEach(t),MDr=r(qDe," (BART model)"),qDe.forEach(t),EDr=i(we),b3=n(we,"LI",{});var jDe=s(b3);WCe=n(jDe,"STRONG",{});var MIt=s(WCe);CDr=r(MIt,"bert"),MIt.forEach(t),wDr=r(jDe," \u2014 "),qZ=n(jDe,"A",{href:!0});var EIt=s(qZ);ADr=r(EIt,"FlaxBertForPreTraining"),EIt.forEach(t),LDr=r(jDe," (BERT model)"),jDe.forEach(t),yDr=i(we),v3=n(we,"LI",{});var DDe=s(v3);HCe=n(DDe,"STRONG",{});var CIt=s(HCe);xDr=r(CIt,"big_bird"),CIt.forEach(t),$Dr=r(DDe," \u2014 "),jZ=n(DDe,"A",{href:!0});var wIt=s(jZ);kDr=r(wIt,"FlaxBigBirdForPreTraining"),wIt.forEach(t),SDr=r(DDe," (BigBird model)"),DDe.forEach(t),RDr=i(we),F3=n(we,"LI",{});var GDe=s(F3);UCe=n(GDe,"STRONG",{});var AIt=s(UCe);PDr=r(AIt,"electra"),AIt.forEach(t),BDr=r(GDe," \u2014 "),DZ=n(GDe,"A",{href:!0});var LIt=s(DZ);IDr=r(LIt,"FlaxElectraForPreTraining"),LIt.forEach(t),NDr=r(GDe," (ELECTRA model)"),GDe.forEach(t),qDr=i(we),T3=n(we,"LI",{});var ODe=s(T3);JCe=n(ODe,"STRONG",{});var yIt=s(JCe);jDr=r(yIt,"longt5"),yIt.forEach(t),DDr=r(ODe," \u2014 "),GZ=n(ODe,"A",{href:!0});var xIt=s(GZ);GDr=r(xIt,"FlaxLongT5ForConditionalGeneration"),xIt.forEach(t),ODr=r(ODe," (LongT5 model)"),ODe.forEach(t),VDr=i(we),M3=n(we,"LI",{});var VDe=s(M3);YCe=n(VDe,"STRONG",{});var $It=s(YCe);XDr=r($It,"mbart"),$It.forEach(t),zDr=r(VDe," \u2014 "),OZ=n(VDe,"A",{href:!0});var kIt=s(OZ);QDr=r(kIt,"FlaxMBartForConditionalGeneration"),kIt.forEach(t),WDr=r(VDe," (mBART model)"),VDe.forEach(t),HDr=i(we),E3=n(we,"LI",{});var XDe=s(E3);KCe=n(XDe,"STRONG",{});var SIt=s(KCe);UDr=r(SIt,"mt5"),SIt.forEach(t),JDr=r(XDe," \u2014 "),VZ=n(XDe,"A",{href:!0});var RIt=s(VZ);YDr=r(RIt,"FlaxMT5ForConditionalGeneration"),RIt.forEach(t),KDr=r(XDe," (MT5 model)"),XDe.forEach(t),ZDr=i(we),C3=n(we,"LI",{});var zDe=s(C3);ZCe=n(zDe,"STRONG",{});var PIt=s(ZCe);eGr=r(PIt,"roberta"),PIt.forEach(t),oGr=r(zDe," \u2014 "),XZ=n(zDe,"A",{href:!0});var BIt=s(XZ);rGr=r(BIt,"FlaxRobertaForMaskedLM"),BIt.forEach(t),tGr=r(zDe," (RoBERTa model)"),zDe.forEach(t),aGr=i(we),w3=n(we,"LI",{});var QDe=s(w3);e5e=n(QDe,"STRONG",{});var IIt=s(e5e);nGr=r(IIt,"roformer"),IIt.forEach(t),sGr=r(QDe," \u2014 "),zZ=n(QDe,"A",{href:!0});var NIt=s(zZ);lGr=r(NIt,"FlaxRoFormerForMaskedLM"),NIt.forEach(t),iGr=r(QDe," (RoFormer model)"),QDe.forEach(t),dGr=i(we),A3=n(we,"LI",{});var WDe=s(A3);o5e=n(WDe,"STRONG",{});var qIt=s(o5e);cGr=r(qIt,"t5"),qIt.forEach(t),fGr=r(WDe," \u2014 "),QZ=n(WDe,"A",{href:!0});var jIt=s(QZ);mGr=r(jIt,"FlaxT5ForConditionalGeneration"),jIt.forEach(t),gGr=r(WDe," (T5 model)"),WDe.forEach(t),hGr=i(we),L3=n(we,"LI",{});var HDe=s(L3);r5e=n(HDe,"STRONG",{});var DIt=s(r5e);pGr=r(DIt,"wav2vec2"),DIt.forEach(t),_Gr=r(HDe," \u2014 "),WZ=n(HDe,"A",{href:!0});var GIt=s(WZ);uGr=r(GIt,"FlaxWav2Vec2ForPreTraining"),GIt.forEach(t),bGr=r(HDe," (Wav2Vec2 model)"),HDe.forEach(t),vGr=i(we),y3=n(we,"LI",{});var UDe=s(y3);t5e=n(UDe,"STRONG",{});var OIt=s(t5e);FGr=r(OIt,"xlm-roberta"),OIt.forEach(t),TGr=r(UDe," \u2014 "),HZ=n(UDe,"A",{href:!0});var VIt=s(HZ);MGr=r(VIt,"FlaxXLMRobertaForMaskedLM"),VIt.forEach(t),EGr=r(UDe," (XLM-RoBERTa model)"),UDe.forEach(t),we.forEach(t),CGr=i(ti),T(x3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),VVe=i(f),Kc=n(f,"H2",{class:!0});var Kze=s(Kc);$3=n(Kze,"A",{id:!0,class:!0,href:!0});var XIt=s($3);a5e=n(XIt,"SPAN",{});var zIt=s(a5e);T(Yx.$$.fragment,zIt),zIt.forEach(t),XIt.forEach(t),wGr=i(Kze),n5e=n(Kze,"SPAN",{});var QIt=s(n5e);AGr=r(QIt,"FlaxAutoModelForMaskedLM"),QIt.forEach(t),Kze.forEach(t),XVe=i(f),ur=n(f,"DIV",{class:!0});var ai=s(ur);T(Kx.$$.fragment,ai),LGr=i(ai),Zc=n(ai,"P",{});var ate=s(Zc);yGr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UZ=n(ate,"A",{href:!0});var WIt=s(UZ);xGr=r(WIt,"from_pretrained()"),WIt.forEach(t),$Gr=r(ate," class method or the "),JZ=n(ate,"A",{href:!0});var HIt=s(JZ);kGr=r(HIt,"from_config()"),HIt.forEach(t),SGr=r(ate,` class
method.`),ate.forEach(t),RGr=i(ai),Zx=n(ai,"P",{});var Zze=s(Zx);PGr=r(Zze,"This class cannot be instantiated directly using "),s5e=n(Zze,"CODE",{});var UIt=s(s5e);BGr=r(UIt,"__init__()"),UIt.forEach(t),IGr=r(Zze," (throws an error)."),Zze.forEach(t),NGr=i(ai),Wt=n(ai,"DIV",{class:!0});var fL=s(Wt);T(e$.$$.fragment,fL),qGr=i(fL),l5e=n(fL,"P",{});var JIt=s(l5e);jGr=r(JIt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JIt.forEach(t),DGr=i(fL),ef=n(fL,"P",{});var nte=s(ef);GGr=r(nte,`Note:
Loading a model from its configuration file does `),i5e=n(nte,"STRONG",{});var YIt=s(i5e);OGr=r(YIt,"not"),YIt.forEach(t),VGr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=n(nte,"A",{href:!0});var KIt=s(YZ);XGr=r(KIt,"from_pretrained()"),KIt.forEach(t),zGr=r(nte," to load the model weights."),nte.forEach(t),QGr=i(fL),T(k3.$$.fragment,fL),fL.forEach(t),WGr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(o$.$$.fragment,ni),HGr=i(ni),d5e=n(ni,"P",{});var ZIt=s(d5e);UGr=r(ZIt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZIt.forEach(t),JGr=i(ni),En=n(ni,"P",{});var mL=s(En);YGr=r(mL,"The model class to instantiate is selected based on the "),c5e=n(mL,"CODE",{});var eNt=s(c5e);KGr=r(eNt,"model_type"),eNt.forEach(t),ZGr=r(mL,` property of the config object (either
passed as an argument or loaded from `),f5e=n(mL,"CODE",{});var oNt=s(f5e);eOr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),oOr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(mL,"CODE",{});var rNt=s(m5e);rOr=r(rNt,"pretrained_model_name_or_path"),rNt.forEach(t),tOr=r(mL,":"),mL.forEach(t),aOr=i(ni),$e=n(ni,"UL",{});var qe=s($e);S3=n(qe,"LI",{});var JDe=s(S3);g5e=n(JDe,"STRONG",{});var tNt=s(g5e);nOr=r(tNt,"albert"),tNt.forEach(t),sOr=r(JDe," \u2014 "),KZ=n(JDe,"A",{href:!0});var aNt=s(KZ);lOr=r(aNt,"FlaxAlbertForMaskedLM"),aNt.forEach(t),iOr=r(JDe," (ALBERT model)"),JDe.forEach(t),dOr=i(qe),R3=n(qe,"LI",{});var YDe=s(R3);h5e=n(YDe,"STRONG",{});var nNt=s(h5e);cOr=r(nNt,"bart"),nNt.forEach(t),fOr=r(YDe," \u2014 "),ZZ=n(YDe,"A",{href:!0});var sNt=s(ZZ);mOr=r(sNt,"FlaxBartForConditionalGeneration"),sNt.forEach(t),gOr=r(YDe," (BART model)"),YDe.forEach(t),hOr=i(qe),P3=n(qe,"LI",{});var KDe=s(P3);p5e=n(KDe,"STRONG",{});var lNt=s(p5e);pOr=r(lNt,"bert"),lNt.forEach(t),_Or=r(KDe," \u2014 "),eee=n(KDe,"A",{href:!0});var iNt=s(eee);uOr=r(iNt,"FlaxBertForMaskedLM"),iNt.forEach(t),bOr=r(KDe," (BERT model)"),KDe.forEach(t),vOr=i(qe),B3=n(qe,"LI",{});var ZDe=s(B3);_5e=n(ZDe,"STRONG",{});var dNt=s(_5e);FOr=r(dNt,"big_bird"),dNt.forEach(t),TOr=r(ZDe," \u2014 "),oee=n(ZDe,"A",{href:!0});var cNt=s(oee);MOr=r(cNt,"FlaxBigBirdForMaskedLM"),cNt.forEach(t),EOr=r(ZDe," (BigBird model)"),ZDe.forEach(t),COr=i(qe),I3=n(qe,"LI",{});var eGe=s(I3);u5e=n(eGe,"STRONG",{});var fNt=s(u5e);wOr=r(fNt,"distilbert"),fNt.forEach(t),AOr=r(eGe," \u2014 "),ree=n(eGe,"A",{href:!0});var mNt=s(ree);LOr=r(mNt,"FlaxDistilBertForMaskedLM"),mNt.forEach(t),yOr=r(eGe," (DistilBERT model)"),eGe.forEach(t),xOr=i(qe),N3=n(qe,"LI",{});var oGe=s(N3);b5e=n(oGe,"STRONG",{});var gNt=s(b5e);$Or=r(gNt,"electra"),gNt.forEach(t),kOr=r(oGe," \u2014 "),tee=n(oGe,"A",{href:!0});var hNt=s(tee);SOr=r(hNt,"FlaxElectraForMaskedLM"),hNt.forEach(t),ROr=r(oGe," (ELECTRA model)"),oGe.forEach(t),POr=i(qe),q3=n(qe,"LI",{});var rGe=s(q3);v5e=n(rGe,"STRONG",{});var pNt=s(v5e);BOr=r(pNt,"mbart"),pNt.forEach(t),IOr=r(rGe," \u2014 "),aee=n(rGe,"A",{href:!0});var _Nt=s(aee);NOr=r(_Nt,"FlaxMBartForConditionalGeneration"),_Nt.forEach(t),qOr=r(rGe," (mBART model)"),rGe.forEach(t),jOr=i(qe),j3=n(qe,"LI",{});var tGe=s(j3);F5e=n(tGe,"STRONG",{});var uNt=s(F5e);DOr=r(uNt,"roberta"),uNt.forEach(t),GOr=r(tGe," \u2014 "),nee=n(tGe,"A",{href:!0});var bNt=s(nee);OOr=r(bNt,"FlaxRobertaForMaskedLM"),bNt.forEach(t),VOr=r(tGe," (RoBERTa model)"),tGe.forEach(t),XOr=i(qe),D3=n(qe,"LI",{});var aGe=s(D3);T5e=n(aGe,"STRONG",{});var vNt=s(T5e);zOr=r(vNt,"roformer"),vNt.forEach(t),QOr=r(aGe," \u2014 "),see=n(aGe,"A",{href:!0});var FNt=s(see);WOr=r(FNt,"FlaxRoFormerForMaskedLM"),FNt.forEach(t),HOr=r(aGe," (RoFormer model)"),aGe.forEach(t),UOr=i(qe),G3=n(qe,"LI",{});var nGe=s(G3);M5e=n(nGe,"STRONG",{});var TNt=s(M5e);JOr=r(TNt,"xlm-roberta"),TNt.forEach(t),YOr=r(nGe," \u2014 "),lee=n(nGe,"A",{href:!0});var MNt=s(lee);KOr=r(MNt,"FlaxXLMRobertaForMaskedLM"),MNt.forEach(t),ZOr=r(nGe," (XLM-RoBERTa model)"),nGe.forEach(t),qe.forEach(t),eVr=i(ni),T(O3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),zVe=i(f),of=n(f,"H2",{class:!0});var eQe=s(of);V3=n(eQe,"A",{id:!0,class:!0,href:!0});var ENt=s(V3);E5e=n(ENt,"SPAN",{});var CNt=s(E5e);T(r$.$$.fragment,CNt),CNt.forEach(t),ENt.forEach(t),oVr=i(eQe),C5e=n(eQe,"SPAN",{});var wNt=s(C5e);rVr=r(wNt,"FlaxAutoModelForSeq2SeqLM"),wNt.forEach(t),eQe.forEach(t),QVe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(t$.$$.fragment,si),tVr=i(si),rf=n(si,"P",{});var ste=s(rf);aVr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iee=n(ste,"A",{href:!0});var ANt=s(iee);nVr=r(ANt,"from_pretrained()"),ANt.forEach(t),sVr=r(ste," class method or the "),dee=n(ste,"A",{href:!0});var LNt=s(dee);lVr=r(LNt,"from_config()"),LNt.forEach(t),iVr=r(ste,` class
method.`),ste.forEach(t),dVr=i(si),a$=n(si,"P",{});var oQe=s(a$);cVr=r(oQe,"This class cannot be instantiated directly using "),w5e=n(oQe,"CODE",{});var yNt=s(w5e);fVr=r(yNt,"__init__()"),yNt.forEach(t),mVr=r(oQe," (throws an error)."),oQe.forEach(t),gVr=i(si),Ht=n(si,"DIV",{class:!0});var gL=s(Ht);T(n$.$$.fragment,gL),hVr=i(gL),A5e=n(gL,"P",{});var xNt=s(A5e);pVr=r(xNt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xNt.forEach(t),_Vr=i(gL),tf=n(gL,"P",{});var lte=s(tf);uVr=r(lte,`Note:
Loading a model from its configuration file does `),L5e=n(lte,"STRONG",{});var $Nt=s(L5e);bVr=r($Nt,"not"),$Nt.forEach(t),vVr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),cee=n(lte,"A",{href:!0});var kNt=s(cee);FVr=r(kNt,"from_pretrained()"),kNt.forEach(t),TVr=r(lte," to load the model weights."),lte.forEach(t),MVr=i(gL),T(X3.$$.fragment,gL),gL.forEach(t),EVr=i(si),Qr=n(si,"DIV",{class:!0});var li=s(Qr);T(s$.$$.fragment,li),CVr=i(li),y5e=n(li,"P",{});var SNt=s(y5e);wVr=r(SNt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SNt.forEach(t),AVr=i(li),Cn=n(li,"P",{});var hL=s(Cn);LVr=r(hL,"The model class to instantiate is selected based on the "),x5e=n(hL,"CODE",{});var RNt=s(x5e);yVr=r(RNt,"model_type"),RNt.forEach(t),xVr=r(hL,` property of the config object (either
passed as an argument or loaded from `),$5e=n(hL,"CODE",{});var PNt=s($5e);$Vr=r(PNt,"pretrained_model_name_or_path"),PNt.forEach(t),kVr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=n(hL,"CODE",{});var BNt=s(k5e);SVr=r(BNt,"pretrained_model_name_or_path"),BNt.forEach(t),RVr=r(hL,":"),hL.forEach(t),PVr=i(li),ke=n(li,"UL",{});var je=s(ke);z3=n(je,"LI",{});var sGe=s(z3);S5e=n(sGe,"STRONG",{});var INt=s(S5e);BVr=r(INt,"bart"),INt.forEach(t),IVr=r(sGe," \u2014 "),fee=n(sGe,"A",{href:!0});var NNt=s(fee);NVr=r(NNt,"FlaxBartForConditionalGeneration"),NNt.forEach(t),qVr=r(sGe," (BART model)"),sGe.forEach(t),jVr=i(je),Q3=n(je,"LI",{});var lGe=s(Q3);R5e=n(lGe,"STRONG",{});var qNt=s(R5e);DVr=r(qNt,"blenderbot"),qNt.forEach(t),GVr=r(lGe," \u2014 "),mee=n(lGe,"A",{href:!0});var jNt=s(mee);OVr=r(jNt,"FlaxBlenderbotForConditionalGeneration"),jNt.forEach(t),VVr=r(lGe," (Blenderbot model)"),lGe.forEach(t),XVr=i(je),W3=n(je,"LI",{});var iGe=s(W3);P5e=n(iGe,"STRONG",{});var DNt=s(P5e);zVr=r(DNt,"blenderbot-small"),DNt.forEach(t),QVr=r(iGe," \u2014 "),gee=n(iGe,"A",{href:!0});var GNt=s(gee);WVr=r(GNt,"FlaxBlenderbotSmallForConditionalGeneration"),GNt.forEach(t),HVr=r(iGe," (BlenderbotSmall model)"),iGe.forEach(t),UVr=i(je),H3=n(je,"LI",{});var dGe=s(H3);B5e=n(dGe,"STRONG",{});var ONt=s(B5e);JVr=r(ONt,"encoder-decoder"),ONt.forEach(t),YVr=r(dGe," \u2014 "),hee=n(dGe,"A",{href:!0});var VNt=s(hee);KVr=r(VNt,"FlaxEncoderDecoderModel"),VNt.forEach(t),ZVr=r(dGe," (Encoder decoder model)"),dGe.forEach(t),eXr=i(je),U3=n(je,"LI",{});var cGe=s(U3);I5e=n(cGe,"STRONG",{});var XNt=s(I5e);oXr=r(XNt,"longt5"),XNt.forEach(t),rXr=r(cGe," \u2014 "),pee=n(cGe,"A",{href:!0});var zNt=s(pee);tXr=r(zNt,"FlaxLongT5ForConditionalGeneration"),zNt.forEach(t),aXr=r(cGe," (LongT5 model)"),cGe.forEach(t),nXr=i(je),J3=n(je,"LI",{});var fGe=s(J3);N5e=n(fGe,"STRONG",{});var QNt=s(N5e);sXr=r(QNt,"marian"),QNt.forEach(t),lXr=r(fGe," \u2014 "),_ee=n(fGe,"A",{href:!0});var WNt=s(_ee);iXr=r(WNt,"FlaxMarianMTModel"),WNt.forEach(t),dXr=r(fGe," (Marian model)"),fGe.forEach(t),cXr=i(je),Y3=n(je,"LI",{});var mGe=s(Y3);q5e=n(mGe,"STRONG",{});var HNt=s(q5e);fXr=r(HNt,"mbart"),HNt.forEach(t),mXr=r(mGe," \u2014 "),uee=n(mGe,"A",{href:!0});var UNt=s(uee);gXr=r(UNt,"FlaxMBartForConditionalGeneration"),UNt.forEach(t),hXr=r(mGe," (mBART model)"),mGe.forEach(t),pXr=i(je),K3=n(je,"LI",{});var gGe=s(K3);j5e=n(gGe,"STRONG",{});var JNt=s(j5e);_Xr=r(JNt,"mt5"),JNt.forEach(t),uXr=r(gGe," \u2014 "),bee=n(gGe,"A",{href:!0});var YNt=s(bee);bXr=r(YNt,"FlaxMT5ForConditionalGeneration"),YNt.forEach(t),vXr=r(gGe," (MT5 model)"),gGe.forEach(t),FXr=i(je),Z3=n(je,"LI",{});var hGe=s(Z3);D5e=n(hGe,"STRONG",{});var KNt=s(D5e);TXr=r(KNt,"pegasus"),KNt.forEach(t),MXr=r(hGe," \u2014 "),vee=n(hGe,"A",{href:!0});var ZNt=s(vee);EXr=r(ZNt,"FlaxPegasusForConditionalGeneration"),ZNt.forEach(t),CXr=r(hGe," (Pegasus model)"),hGe.forEach(t),wXr=i(je),ew=n(je,"LI",{});var pGe=s(ew);G5e=n(pGe,"STRONG",{});var eqt=s(G5e);AXr=r(eqt,"t5"),eqt.forEach(t),LXr=r(pGe," \u2014 "),Fee=n(pGe,"A",{href:!0});var oqt=s(Fee);yXr=r(oqt,"FlaxT5ForConditionalGeneration"),oqt.forEach(t),xXr=r(pGe," (T5 model)"),pGe.forEach(t),je.forEach(t),$Xr=i(li),T(ow.$$.fragment,li),li.forEach(t),si.forEach(t),WVe=i(f),af=n(f,"H2",{class:!0});var rQe=s(af);rw=n(rQe,"A",{id:!0,class:!0,href:!0});var rqt=s(rw);O5e=n(rqt,"SPAN",{});var tqt=s(O5e);T(l$.$$.fragment,tqt),tqt.forEach(t),rqt.forEach(t),kXr=i(rQe),V5e=n(rQe,"SPAN",{});var aqt=s(V5e);SXr=r(aqt,"FlaxAutoModelForSequenceClassification"),aqt.forEach(t),rQe.forEach(t),HVe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(i$.$$.fragment,ii),RXr=i(ii),nf=n(ii,"P",{});var ite=s(nf);PXr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Tee=n(ite,"A",{href:!0});var nqt=s(Tee);BXr=r(nqt,"from_pretrained()"),nqt.forEach(t),IXr=r(ite," class method or the "),Mee=n(ite,"A",{href:!0});var sqt=s(Mee);NXr=r(sqt,"from_config()"),sqt.forEach(t),qXr=r(ite,` class
method.`),ite.forEach(t),jXr=i(ii),d$=n(ii,"P",{});var tQe=s(d$);DXr=r(tQe,"This class cannot be instantiated directly using "),X5e=n(tQe,"CODE",{});var lqt=s(X5e);GXr=r(lqt,"__init__()"),lqt.forEach(t),OXr=r(tQe," (throws an error)."),tQe.forEach(t),VXr=i(ii),Ut=n(ii,"DIV",{class:!0});var pL=s(Ut);T(c$.$$.fragment,pL),XXr=i(pL),z5e=n(pL,"P",{});var iqt=s(z5e);zXr=r(iqt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iqt.forEach(t),QXr=i(pL),sf=n(pL,"P",{});var dte=s(sf);WXr=r(dte,`Note:
Loading a model from its configuration file does `),Q5e=n(dte,"STRONG",{});var dqt=s(Q5e);HXr=r(dqt,"not"),dqt.forEach(t),UXr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=n(dte,"A",{href:!0});var cqt=s(Eee);JXr=r(cqt,"from_pretrained()"),cqt.forEach(t),YXr=r(dte," to load the model weights."),dte.forEach(t),KXr=i(pL),T(tw.$$.fragment,pL),pL.forEach(t),ZXr=i(ii),Wr=n(ii,"DIV",{class:!0});var di=s(Wr);T(f$.$$.fragment,di),ezr=i(di),W5e=n(di,"P",{});var fqt=s(W5e);ozr=r(fqt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fqt.forEach(t),rzr=i(di),wn=n(di,"P",{});var _L=s(wn);tzr=r(_L,"The model class to instantiate is selected based on the "),H5e=n(_L,"CODE",{});var mqt=s(H5e);azr=r(mqt,"model_type"),mqt.forEach(t),nzr=r(_L,` property of the config object (either
passed as an argument or loaded from `),U5e=n(_L,"CODE",{});var gqt=s(U5e);szr=r(gqt,"pretrained_model_name_or_path"),gqt.forEach(t),lzr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n(_L,"CODE",{});var hqt=s(J5e);izr=r(hqt,"pretrained_model_name_or_path"),hqt.forEach(t),dzr=r(_L,":"),_L.forEach(t),czr=i(di),Se=n(di,"UL",{});var De=s(Se);aw=n(De,"LI",{});var _Ge=s(aw);Y5e=n(_Ge,"STRONG",{});var pqt=s(Y5e);fzr=r(pqt,"albert"),pqt.forEach(t),mzr=r(_Ge," \u2014 "),Cee=n(_Ge,"A",{href:!0});var _qt=s(Cee);gzr=r(_qt,"FlaxAlbertForSequenceClassification"),_qt.forEach(t),hzr=r(_Ge," (ALBERT model)"),_Ge.forEach(t),pzr=i(De),nw=n(De,"LI",{});var uGe=s(nw);K5e=n(uGe,"STRONG",{});var uqt=s(K5e);_zr=r(uqt,"bart"),uqt.forEach(t),uzr=r(uGe," \u2014 "),wee=n(uGe,"A",{href:!0});var bqt=s(wee);bzr=r(bqt,"FlaxBartForSequenceClassification"),bqt.forEach(t),vzr=r(uGe," (BART model)"),uGe.forEach(t),Fzr=i(De),sw=n(De,"LI",{});var bGe=s(sw);Z5e=n(bGe,"STRONG",{});var vqt=s(Z5e);Tzr=r(vqt,"bert"),vqt.forEach(t),Mzr=r(bGe," \u2014 "),Aee=n(bGe,"A",{href:!0});var Fqt=s(Aee);Ezr=r(Fqt,"FlaxBertForSequenceClassification"),Fqt.forEach(t),Czr=r(bGe," (BERT model)"),bGe.forEach(t),wzr=i(De),lw=n(De,"LI",{});var vGe=s(lw);e3e=n(vGe,"STRONG",{});var Tqt=s(e3e);Azr=r(Tqt,"big_bird"),Tqt.forEach(t),Lzr=r(vGe," \u2014 "),Lee=n(vGe,"A",{href:!0});var Mqt=s(Lee);yzr=r(Mqt,"FlaxBigBirdForSequenceClassification"),Mqt.forEach(t),xzr=r(vGe," (BigBird model)"),vGe.forEach(t),$zr=i(De),iw=n(De,"LI",{});var FGe=s(iw);o3e=n(FGe,"STRONG",{});var Eqt=s(o3e);kzr=r(Eqt,"distilbert"),Eqt.forEach(t),Szr=r(FGe," \u2014 "),yee=n(FGe,"A",{href:!0});var Cqt=s(yee);Rzr=r(Cqt,"FlaxDistilBertForSequenceClassification"),Cqt.forEach(t),Pzr=r(FGe," (DistilBERT model)"),FGe.forEach(t),Bzr=i(De),dw=n(De,"LI",{});var TGe=s(dw);r3e=n(TGe,"STRONG",{});var wqt=s(r3e);Izr=r(wqt,"electra"),wqt.forEach(t),Nzr=r(TGe," \u2014 "),xee=n(TGe,"A",{href:!0});var Aqt=s(xee);qzr=r(Aqt,"FlaxElectraForSequenceClassification"),Aqt.forEach(t),jzr=r(TGe," (ELECTRA model)"),TGe.forEach(t),Dzr=i(De),cw=n(De,"LI",{});var MGe=s(cw);t3e=n(MGe,"STRONG",{});var Lqt=s(t3e);Gzr=r(Lqt,"mbart"),Lqt.forEach(t),Ozr=r(MGe," \u2014 "),$ee=n(MGe,"A",{href:!0});var yqt=s($ee);Vzr=r(yqt,"FlaxMBartForSequenceClassification"),yqt.forEach(t),Xzr=r(MGe," (mBART model)"),MGe.forEach(t),zzr=i(De),fw=n(De,"LI",{});var EGe=s(fw);a3e=n(EGe,"STRONG",{});var xqt=s(a3e);Qzr=r(xqt,"roberta"),xqt.forEach(t),Wzr=r(EGe," \u2014 "),kee=n(EGe,"A",{href:!0});var $qt=s(kee);Hzr=r($qt,"FlaxRobertaForSequenceClassification"),$qt.forEach(t),Uzr=r(EGe," (RoBERTa model)"),EGe.forEach(t),Jzr=i(De),mw=n(De,"LI",{});var CGe=s(mw);n3e=n(CGe,"STRONG",{});var kqt=s(n3e);Yzr=r(kqt,"roformer"),kqt.forEach(t),Kzr=r(CGe," \u2014 "),See=n(CGe,"A",{href:!0});var Sqt=s(See);Zzr=r(Sqt,"FlaxRoFormerForSequenceClassification"),Sqt.forEach(t),eQr=r(CGe," (RoFormer model)"),CGe.forEach(t),oQr=i(De),gw=n(De,"LI",{});var wGe=s(gw);s3e=n(wGe,"STRONG",{});var Rqt=s(s3e);rQr=r(Rqt,"xlm-roberta"),Rqt.forEach(t),tQr=r(wGe," \u2014 "),Ree=n(wGe,"A",{href:!0});var Pqt=s(Ree);aQr=r(Pqt,"FlaxXLMRobertaForSequenceClassification"),Pqt.forEach(t),nQr=r(wGe," (XLM-RoBERTa model)"),wGe.forEach(t),De.forEach(t),sQr=i(di),T(hw.$$.fragment,di),di.forEach(t),ii.forEach(t),UVe=i(f),lf=n(f,"H2",{class:!0});var aQe=s(lf);pw=n(aQe,"A",{id:!0,class:!0,href:!0});var Bqt=s(pw);l3e=n(Bqt,"SPAN",{});var Iqt=s(l3e);T(m$.$$.fragment,Iqt),Iqt.forEach(t),Bqt.forEach(t),lQr=i(aQe),i3e=n(aQe,"SPAN",{});var Nqt=s(i3e);iQr=r(Nqt,"FlaxAutoModelForQuestionAnswering"),Nqt.forEach(t),aQe.forEach(t),JVe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(g$.$$.fragment,ci),dQr=i(ci),df=n(ci,"P",{});var cte=s(df);cQr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Pee=n(cte,"A",{href:!0});var qqt=s(Pee);fQr=r(qqt,"from_pretrained()"),qqt.forEach(t),mQr=r(cte," class method or the "),Bee=n(cte,"A",{href:!0});var jqt=s(Bee);gQr=r(jqt,"from_config()"),jqt.forEach(t),hQr=r(cte,` class
method.`),cte.forEach(t),pQr=i(ci),h$=n(ci,"P",{});var nQe=s(h$);_Qr=r(nQe,"This class cannot be instantiated directly using "),d3e=n(nQe,"CODE",{});var Dqt=s(d3e);uQr=r(Dqt,"__init__()"),Dqt.forEach(t),bQr=r(nQe," (throws an error)."),nQe.forEach(t),vQr=i(ci),Jt=n(ci,"DIV",{class:!0});var uL=s(Jt);T(p$.$$.fragment,uL),FQr=i(uL),c3e=n(uL,"P",{});var Gqt=s(c3e);TQr=r(Gqt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gqt.forEach(t),MQr=i(uL),cf=n(uL,"P",{});var fte=s(cf);EQr=r(fte,`Note:
Loading a model from its configuration file does `),f3e=n(fte,"STRONG",{});var Oqt=s(f3e);CQr=r(Oqt,"not"),Oqt.forEach(t),wQr=r(fte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iee=n(fte,"A",{href:!0});var Vqt=s(Iee);AQr=r(Vqt,"from_pretrained()"),Vqt.forEach(t),LQr=r(fte," to load the model weights."),fte.forEach(t),yQr=i(uL),T(_w.$$.fragment,uL),uL.forEach(t),xQr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(_$.$$.fragment,fi),$Qr=i(fi),m3e=n(fi,"P",{});var Xqt=s(m3e);kQr=r(Xqt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xqt.forEach(t),SQr=i(fi),An=n(fi,"P",{});var bL=s(An);RQr=r(bL,"The model class to instantiate is selected based on the "),g3e=n(bL,"CODE",{});var zqt=s(g3e);PQr=r(zqt,"model_type"),zqt.forEach(t),BQr=r(bL,` property of the config object (either
passed as an argument or loaded from `),h3e=n(bL,"CODE",{});var Qqt=s(h3e);IQr=r(Qqt,"pretrained_model_name_or_path"),Qqt.forEach(t),NQr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(bL,"CODE",{});var Wqt=s(p3e);qQr=r(Wqt,"pretrained_model_name_or_path"),Wqt.forEach(t),jQr=r(bL,":"),bL.forEach(t),DQr=i(fi),Re=n(fi,"UL",{});var Ge=s(Re);uw=n(Ge,"LI",{});var AGe=s(uw);_3e=n(AGe,"STRONG",{});var Hqt=s(_3e);GQr=r(Hqt,"albert"),Hqt.forEach(t),OQr=r(AGe," \u2014 "),Nee=n(AGe,"A",{href:!0});var Uqt=s(Nee);VQr=r(Uqt,"FlaxAlbertForQuestionAnswering"),Uqt.forEach(t),XQr=r(AGe," (ALBERT model)"),AGe.forEach(t),zQr=i(Ge),bw=n(Ge,"LI",{});var LGe=s(bw);u3e=n(LGe,"STRONG",{});var Jqt=s(u3e);QQr=r(Jqt,"bart"),Jqt.forEach(t),WQr=r(LGe," \u2014 "),qee=n(LGe,"A",{href:!0});var Yqt=s(qee);HQr=r(Yqt,"FlaxBartForQuestionAnswering"),Yqt.forEach(t),UQr=r(LGe," (BART model)"),LGe.forEach(t),JQr=i(Ge),vw=n(Ge,"LI",{});var yGe=s(vw);b3e=n(yGe,"STRONG",{});var Kqt=s(b3e);YQr=r(Kqt,"bert"),Kqt.forEach(t),KQr=r(yGe," \u2014 "),jee=n(yGe,"A",{href:!0});var Zqt=s(jee);ZQr=r(Zqt,"FlaxBertForQuestionAnswering"),Zqt.forEach(t),eWr=r(yGe," (BERT model)"),yGe.forEach(t),oWr=i(Ge),Fw=n(Ge,"LI",{});var xGe=s(Fw);v3e=n(xGe,"STRONG",{});var ejt=s(v3e);rWr=r(ejt,"big_bird"),ejt.forEach(t),tWr=r(xGe," \u2014 "),Dee=n(xGe,"A",{href:!0});var ojt=s(Dee);aWr=r(ojt,"FlaxBigBirdForQuestionAnswering"),ojt.forEach(t),nWr=r(xGe," (BigBird model)"),xGe.forEach(t),sWr=i(Ge),Tw=n(Ge,"LI",{});var $Ge=s(Tw);F3e=n($Ge,"STRONG",{});var rjt=s(F3e);lWr=r(rjt,"distilbert"),rjt.forEach(t),iWr=r($Ge," \u2014 "),Gee=n($Ge,"A",{href:!0});var tjt=s(Gee);dWr=r(tjt,"FlaxDistilBertForQuestionAnswering"),tjt.forEach(t),cWr=r($Ge," (DistilBERT model)"),$Ge.forEach(t),fWr=i(Ge),Mw=n(Ge,"LI",{});var kGe=s(Mw);T3e=n(kGe,"STRONG",{});var ajt=s(T3e);mWr=r(ajt,"electra"),ajt.forEach(t),gWr=r(kGe," \u2014 "),Oee=n(kGe,"A",{href:!0});var njt=s(Oee);hWr=r(njt,"FlaxElectraForQuestionAnswering"),njt.forEach(t),pWr=r(kGe," (ELECTRA model)"),kGe.forEach(t),_Wr=i(Ge),Ew=n(Ge,"LI",{});var SGe=s(Ew);M3e=n(SGe,"STRONG",{});var sjt=s(M3e);uWr=r(sjt,"mbart"),sjt.forEach(t),bWr=r(SGe," \u2014 "),Vee=n(SGe,"A",{href:!0});var ljt=s(Vee);vWr=r(ljt,"FlaxMBartForQuestionAnswering"),ljt.forEach(t),FWr=r(SGe," (mBART model)"),SGe.forEach(t),TWr=i(Ge),Cw=n(Ge,"LI",{});var RGe=s(Cw);E3e=n(RGe,"STRONG",{});var ijt=s(E3e);MWr=r(ijt,"roberta"),ijt.forEach(t),EWr=r(RGe," \u2014 "),Xee=n(RGe,"A",{href:!0});var djt=s(Xee);CWr=r(djt,"FlaxRobertaForQuestionAnswering"),djt.forEach(t),wWr=r(RGe," (RoBERTa model)"),RGe.forEach(t),AWr=i(Ge),ww=n(Ge,"LI",{});var PGe=s(ww);C3e=n(PGe,"STRONG",{});var cjt=s(C3e);LWr=r(cjt,"roformer"),cjt.forEach(t),yWr=r(PGe," \u2014 "),zee=n(PGe,"A",{href:!0});var fjt=s(zee);xWr=r(fjt,"FlaxRoFormerForQuestionAnswering"),fjt.forEach(t),$Wr=r(PGe," (RoFormer model)"),PGe.forEach(t),kWr=i(Ge),Aw=n(Ge,"LI",{});var BGe=s(Aw);w3e=n(BGe,"STRONG",{});var mjt=s(w3e);SWr=r(mjt,"xlm-roberta"),mjt.forEach(t),RWr=r(BGe," \u2014 "),Qee=n(BGe,"A",{href:!0});var gjt=s(Qee);PWr=r(gjt,"FlaxXLMRobertaForQuestionAnswering"),gjt.forEach(t),BWr=r(BGe," (XLM-RoBERTa model)"),BGe.forEach(t),Ge.forEach(t),IWr=i(fi),T(Lw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),YVe=i(f),ff=n(f,"H2",{class:!0});var sQe=s(ff);yw=n(sQe,"A",{id:!0,class:!0,href:!0});var hjt=s(yw);A3e=n(hjt,"SPAN",{});var pjt=s(A3e);T(u$.$$.fragment,pjt),pjt.forEach(t),hjt.forEach(t),NWr=i(sQe),L3e=n(sQe,"SPAN",{});var _jt=s(L3e);qWr=r(_jt,"FlaxAutoModelForTokenClassification"),_jt.forEach(t),sQe.forEach(t),KVe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(b$.$$.fragment,mi),jWr=i(mi),mf=n(mi,"P",{});var mte=s(mf);DWr=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Wee=n(mte,"A",{href:!0});var ujt=s(Wee);GWr=r(ujt,"from_pretrained()"),ujt.forEach(t),OWr=r(mte," class method or the "),Hee=n(mte,"A",{href:!0});var bjt=s(Hee);VWr=r(bjt,"from_config()"),bjt.forEach(t),XWr=r(mte,` class
method.`),mte.forEach(t),zWr=i(mi),v$=n(mi,"P",{});var lQe=s(v$);QWr=r(lQe,"This class cannot be instantiated directly using "),y3e=n(lQe,"CODE",{});var vjt=s(y3e);WWr=r(vjt,"__init__()"),vjt.forEach(t),HWr=r(lQe," (throws an error)."),lQe.forEach(t),UWr=i(mi),Yt=n(mi,"DIV",{class:!0});var vL=s(Yt);T(F$.$$.fragment,vL),JWr=i(vL),x3e=n(vL,"P",{});var Fjt=s(x3e);YWr=r(Fjt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fjt.forEach(t),KWr=i(vL),gf=n(vL,"P",{});var gte=s(gf);ZWr=r(gte,`Note:
Loading a model from its configuration file does `),$3e=n(gte,"STRONG",{});var Tjt=s($3e);eHr=r(Tjt,"not"),Tjt.forEach(t),oHr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uee=n(gte,"A",{href:!0});var Mjt=s(Uee);rHr=r(Mjt,"from_pretrained()"),Mjt.forEach(t),tHr=r(gte," to load the model weights."),gte.forEach(t),aHr=i(vL),T(xw.$$.fragment,vL),vL.forEach(t),nHr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(T$.$$.fragment,gi),sHr=i(gi),k3e=n(gi,"P",{});var Ejt=s(k3e);lHr=r(Ejt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ejt.forEach(t),iHr=i(gi),Ln=n(gi,"P",{});var FL=s(Ln);dHr=r(FL,"The model class to instantiate is selected based on the "),S3e=n(FL,"CODE",{});var Cjt=s(S3e);cHr=r(Cjt,"model_type"),Cjt.forEach(t),fHr=r(FL,` property of the config object (either
passed as an argument or loaded from `),R3e=n(FL,"CODE",{});var wjt=s(R3e);mHr=r(wjt,"pretrained_model_name_or_path"),wjt.forEach(t),gHr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P3e=n(FL,"CODE",{});var Ajt=s(P3e);hHr=r(Ajt,"pretrained_model_name_or_path"),Ajt.forEach(t),pHr=r(FL,":"),FL.forEach(t),_Hr=i(gi),Ve=n(gi,"UL",{});var To=s(Ve);$w=n(To,"LI",{});var IGe=s($w);B3e=n(IGe,"STRONG",{});var Ljt=s(B3e);uHr=r(Ljt,"albert"),Ljt.forEach(t),bHr=r(IGe," \u2014 "),Jee=n(IGe,"A",{href:!0});var yjt=s(Jee);vHr=r(yjt,"FlaxAlbertForTokenClassification"),yjt.forEach(t),FHr=r(IGe," (ALBERT model)"),IGe.forEach(t),THr=i(To),kw=n(To,"LI",{});var NGe=s(kw);I3e=n(NGe,"STRONG",{});var xjt=s(I3e);MHr=r(xjt,"bert"),xjt.forEach(t),EHr=r(NGe," \u2014 "),Yee=n(NGe,"A",{href:!0});var $jt=s(Yee);CHr=r($jt,"FlaxBertForTokenClassification"),$jt.forEach(t),wHr=r(NGe," (BERT model)"),NGe.forEach(t),AHr=i(To),Sw=n(To,"LI",{});var qGe=s(Sw);N3e=n(qGe,"STRONG",{});var kjt=s(N3e);LHr=r(kjt,"big_bird"),kjt.forEach(t),yHr=r(qGe," \u2014 "),Kee=n(qGe,"A",{href:!0});var Sjt=s(Kee);xHr=r(Sjt,"FlaxBigBirdForTokenClassification"),Sjt.forEach(t),$Hr=r(qGe," (BigBird model)"),qGe.forEach(t),kHr=i(To),Rw=n(To,"LI",{});var jGe=s(Rw);q3e=n(jGe,"STRONG",{});var Rjt=s(q3e);SHr=r(Rjt,"distilbert"),Rjt.forEach(t),RHr=r(jGe," \u2014 "),Zee=n(jGe,"A",{href:!0});var Pjt=s(Zee);PHr=r(Pjt,"FlaxDistilBertForTokenClassification"),Pjt.forEach(t),BHr=r(jGe," (DistilBERT model)"),jGe.forEach(t),IHr=i(To),Pw=n(To,"LI",{});var DGe=s(Pw);j3e=n(DGe,"STRONG",{});var Bjt=s(j3e);NHr=r(Bjt,"electra"),Bjt.forEach(t),qHr=r(DGe," \u2014 "),eoe=n(DGe,"A",{href:!0});var Ijt=s(eoe);jHr=r(Ijt,"FlaxElectraForTokenClassification"),Ijt.forEach(t),DHr=r(DGe," (ELECTRA model)"),DGe.forEach(t),GHr=i(To),Bw=n(To,"LI",{});var GGe=s(Bw);D3e=n(GGe,"STRONG",{});var Njt=s(D3e);OHr=r(Njt,"roberta"),Njt.forEach(t),VHr=r(GGe," \u2014 "),ooe=n(GGe,"A",{href:!0});var qjt=s(ooe);XHr=r(qjt,"FlaxRobertaForTokenClassification"),qjt.forEach(t),zHr=r(GGe," (RoBERTa model)"),GGe.forEach(t),QHr=i(To),Iw=n(To,"LI",{});var OGe=s(Iw);G3e=n(OGe,"STRONG",{});var jjt=s(G3e);WHr=r(jjt,"roformer"),jjt.forEach(t),HHr=r(OGe," \u2014 "),roe=n(OGe,"A",{href:!0});var Djt=s(roe);UHr=r(Djt,"FlaxRoFormerForTokenClassification"),Djt.forEach(t),JHr=r(OGe," (RoFormer model)"),OGe.forEach(t),YHr=i(To),Nw=n(To,"LI",{});var VGe=s(Nw);O3e=n(VGe,"STRONG",{});var Gjt=s(O3e);KHr=r(Gjt,"xlm-roberta"),Gjt.forEach(t),ZHr=r(VGe," \u2014 "),toe=n(VGe,"A",{href:!0});var Ojt=s(toe);eUr=r(Ojt,"FlaxXLMRobertaForTokenClassification"),Ojt.forEach(t),oUr=r(VGe," (XLM-RoBERTa model)"),VGe.forEach(t),To.forEach(t),rUr=i(gi),T(qw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),ZVe=i(f),hf=n(f,"H2",{class:!0});var iQe=s(hf);jw=n(iQe,"A",{id:!0,class:!0,href:!0});var Vjt=s(jw);V3e=n(Vjt,"SPAN",{});var Xjt=s(V3e);T(M$.$$.fragment,Xjt),Xjt.forEach(t),Vjt.forEach(t),tUr=i(iQe),X3e=n(iQe,"SPAN",{});var zjt=s(X3e);aUr=r(zjt,"FlaxAutoModelForMultipleChoice"),zjt.forEach(t),iQe.forEach(t),eXe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(E$.$$.fragment,hi),nUr=i(hi),pf=n(hi,"P",{});var hte=s(pf);sUr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aoe=n(hte,"A",{href:!0});var Qjt=s(aoe);lUr=r(Qjt,"from_pretrained()"),Qjt.forEach(t),iUr=r(hte," class method or the "),noe=n(hte,"A",{href:!0});var Wjt=s(noe);dUr=r(Wjt,"from_config()"),Wjt.forEach(t),cUr=r(hte,` class
method.`),hte.forEach(t),fUr=i(hi),C$=n(hi,"P",{});var dQe=s(C$);mUr=r(dQe,"This class cannot be instantiated directly using "),z3e=n(dQe,"CODE",{});var Hjt=s(z3e);gUr=r(Hjt,"__init__()"),Hjt.forEach(t),hUr=r(dQe," (throws an error)."),dQe.forEach(t),pUr=i(hi),Kt=n(hi,"DIV",{class:!0});var TL=s(Kt);T(w$.$$.fragment,TL),_Ur=i(TL),Q3e=n(TL,"P",{});var Ujt=s(Q3e);uUr=r(Ujt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ujt.forEach(t),bUr=i(TL),_f=n(TL,"P",{});var pte=s(_f);vUr=r(pte,`Note:
Loading a model from its configuration file does `),W3e=n(pte,"STRONG",{});var Jjt=s(W3e);FUr=r(Jjt,"not"),Jjt.forEach(t),TUr=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=n(pte,"A",{href:!0});var Yjt=s(soe);MUr=r(Yjt,"from_pretrained()"),Yjt.forEach(t),EUr=r(pte," to load the model weights."),pte.forEach(t),CUr=i(TL),T(Dw.$$.fragment,TL),TL.forEach(t),wUr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(A$.$$.fragment,pi),AUr=i(pi),H3e=n(pi,"P",{});var Kjt=s(H3e);LUr=r(Kjt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kjt.forEach(t),yUr=i(pi),yn=n(pi,"P",{});var ML=s(yn);xUr=r(ML,"The model class to instantiate is selected based on the "),U3e=n(ML,"CODE",{});var Zjt=s(U3e);$Ur=r(Zjt,"model_type"),Zjt.forEach(t),kUr=r(ML,` property of the config object (either
passed as an argument or loaded from `),J3e=n(ML,"CODE",{});var eDt=s(J3e);SUr=r(eDt,"pretrained_model_name_or_path"),eDt.forEach(t),RUr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y3e=n(ML,"CODE",{});var oDt=s(Y3e);PUr=r(oDt,"pretrained_model_name_or_path"),oDt.forEach(t),BUr=r(ML,":"),ML.forEach(t),IUr=i(pi),Xe=n(pi,"UL",{});var Mo=s(Xe);Gw=n(Mo,"LI",{});var XGe=s(Gw);K3e=n(XGe,"STRONG",{});var rDt=s(K3e);NUr=r(rDt,"albert"),rDt.forEach(t),qUr=r(XGe," \u2014 "),loe=n(XGe,"A",{href:!0});var tDt=s(loe);jUr=r(tDt,"FlaxAlbertForMultipleChoice"),tDt.forEach(t),DUr=r(XGe," (ALBERT model)"),XGe.forEach(t),GUr=i(Mo),Ow=n(Mo,"LI",{});var zGe=s(Ow);Z3e=n(zGe,"STRONG",{});var aDt=s(Z3e);OUr=r(aDt,"bert"),aDt.forEach(t),VUr=r(zGe," \u2014 "),ioe=n(zGe,"A",{href:!0});var nDt=s(ioe);XUr=r(nDt,"FlaxBertForMultipleChoice"),nDt.forEach(t),zUr=r(zGe," (BERT model)"),zGe.forEach(t),QUr=i(Mo),Vw=n(Mo,"LI",{});var QGe=s(Vw);ewe=n(QGe,"STRONG",{});var sDt=s(ewe);WUr=r(sDt,"big_bird"),sDt.forEach(t),HUr=r(QGe," \u2014 "),doe=n(QGe,"A",{href:!0});var lDt=s(doe);UUr=r(lDt,"FlaxBigBirdForMultipleChoice"),lDt.forEach(t),JUr=r(QGe," (BigBird model)"),QGe.forEach(t),YUr=i(Mo),Xw=n(Mo,"LI",{});var WGe=s(Xw);owe=n(WGe,"STRONG",{});var iDt=s(owe);KUr=r(iDt,"distilbert"),iDt.forEach(t),ZUr=r(WGe," \u2014 "),coe=n(WGe,"A",{href:!0});var dDt=s(coe);eJr=r(dDt,"FlaxDistilBertForMultipleChoice"),dDt.forEach(t),oJr=r(WGe," (DistilBERT model)"),WGe.forEach(t),rJr=i(Mo),zw=n(Mo,"LI",{});var HGe=s(zw);rwe=n(HGe,"STRONG",{});var cDt=s(rwe);tJr=r(cDt,"electra"),cDt.forEach(t),aJr=r(HGe," \u2014 "),foe=n(HGe,"A",{href:!0});var fDt=s(foe);nJr=r(fDt,"FlaxElectraForMultipleChoice"),fDt.forEach(t),sJr=r(HGe," (ELECTRA model)"),HGe.forEach(t),lJr=i(Mo),Qw=n(Mo,"LI",{});var UGe=s(Qw);twe=n(UGe,"STRONG",{});var mDt=s(twe);iJr=r(mDt,"roberta"),mDt.forEach(t),dJr=r(UGe," \u2014 "),moe=n(UGe,"A",{href:!0});var gDt=s(moe);cJr=r(gDt,"FlaxRobertaForMultipleChoice"),gDt.forEach(t),fJr=r(UGe," (RoBERTa model)"),UGe.forEach(t),mJr=i(Mo),Ww=n(Mo,"LI",{});var JGe=s(Ww);awe=n(JGe,"STRONG",{});var hDt=s(awe);gJr=r(hDt,"roformer"),hDt.forEach(t),hJr=r(JGe," \u2014 "),goe=n(JGe,"A",{href:!0});var pDt=s(goe);pJr=r(pDt,"FlaxRoFormerForMultipleChoice"),pDt.forEach(t),_Jr=r(JGe," (RoFormer model)"),JGe.forEach(t),uJr=i(Mo),Hw=n(Mo,"LI",{});var YGe=s(Hw);nwe=n(YGe,"STRONG",{});var _Dt=s(nwe);bJr=r(_Dt,"xlm-roberta"),_Dt.forEach(t),vJr=r(YGe," \u2014 "),hoe=n(YGe,"A",{href:!0});var uDt=s(hoe);FJr=r(uDt,"FlaxXLMRobertaForMultipleChoice"),uDt.forEach(t),TJr=r(YGe," (XLM-RoBERTa model)"),YGe.forEach(t),Mo.forEach(t),MJr=i(pi),T(Uw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),oXe=i(f),uf=n(f,"H2",{class:!0});var cQe=s(uf);Jw=n(cQe,"A",{id:!0,class:!0,href:!0});var bDt=s(Jw);swe=n(bDt,"SPAN",{});var vDt=s(swe);T(L$.$$.fragment,vDt),vDt.forEach(t),bDt.forEach(t),EJr=i(cQe),lwe=n(cQe,"SPAN",{});var FDt=s(lwe);CJr=r(FDt,"FlaxAutoModelForNextSentencePrediction"),FDt.forEach(t),cQe.forEach(t),rXe=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(y$.$$.fragment,_i),wJr=i(_i),bf=n(_i,"P",{});var _te=s(bf);AJr=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),poe=n(_te,"A",{href:!0});var TDt=s(poe);LJr=r(TDt,"from_pretrained()"),TDt.forEach(t),yJr=r(_te," class method or the "),_oe=n(_te,"A",{href:!0});var MDt=s(_oe);xJr=r(MDt,"from_config()"),MDt.forEach(t),$Jr=r(_te,` class
method.`),_te.forEach(t),kJr=i(_i),x$=n(_i,"P",{});var fQe=s(x$);SJr=r(fQe,"This class cannot be instantiated directly using "),iwe=n(fQe,"CODE",{});var EDt=s(iwe);RJr=r(EDt,"__init__()"),EDt.forEach(t),PJr=r(fQe," (throws an error)."),fQe.forEach(t),BJr=i(_i),Zt=n(_i,"DIV",{class:!0});var EL=s(Zt);T($$.$$.fragment,EL),IJr=i(EL),dwe=n(EL,"P",{});var CDt=s(dwe);NJr=r(CDt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CDt.forEach(t),qJr=i(EL),vf=n(EL,"P",{});var ute=s(vf);jJr=r(ute,`Note:
Loading a model from its configuration file does `),cwe=n(ute,"STRONG",{});var wDt=s(cwe);DJr=r(wDt,"not"),wDt.forEach(t),GJr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=n(ute,"A",{href:!0});var ADt=s(uoe);OJr=r(ADt,"from_pretrained()"),ADt.forEach(t),VJr=r(ute," to load the model weights."),ute.forEach(t),XJr=i(EL),T(Yw.$$.fragment,EL),EL.forEach(t),zJr=i(_i),Yr=n(_i,"DIV",{class:!0});var ui=s(Yr);T(k$.$$.fragment,ui),QJr=i(ui),fwe=n(ui,"P",{});var LDt=s(fwe);WJr=r(LDt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LDt.forEach(t),HJr=i(ui),xn=n(ui,"P",{});var CL=s(xn);UJr=r(CL,"The model class to instantiate is selected based on the "),mwe=n(CL,"CODE",{});var yDt=s(mwe);JJr=r(yDt,"model_type"),yDt.forEach(t),YJr=r(CL,` property of the config object (either
passed as an argument or loaded from `),gwe=n(CL,"CODE",{});var xDt=s(gwe);KJr=r(xDt,"pretrained_model_name_or_path"),xDt.forEach(t),ZJr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hwe=n(CL,"CODE",{});var $Dt=s(hwe);eYr=r($Dt,"pretrained_model_name_or_path"),$Dt.forEach(t),oYr=r(CL,":"),CL.forEach(t),rYr=i(ui),pwe=n(ui,"UL",{});var kDt=s(pwe);Kw=n(kDt,"LI",{});var KGe=s(Kw);_we=n(KGe,"STRONG",{});var SDt=s(_we);tYr=r(SDt,"bert"),SDt.forEach(t),aYr=r(KGe," \u2014 "),boe=n(KGe,"A",{href:!0});var RDt=s(boe);nYr=r(RDt,"FlaxBertForNextSentencePrediction"),RDt.forEach(t),sYr=r(KGe," (BERT model)"),KGe.forEach(t),kDt.forEach(t),lYr=i(ui),T(Zw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),tXe=i(f),Ff=n(f,"H2",{class:!0});var mQe=s(Ff);eA=n(mQe,"A",{id:!0,class:!0,href:!0});var PDt=s(eA);uwe=n(PDt,"SPAN",{});var BDt=s(uwe);T(S$.$$.fragment,BDt),BDt.forEach(t),PDt.forEach(t),iYr=i(mQe),bwe=n(mQe,"SPAN",{});var IDt=s(bwe);dYr=r(IDt,"FlaxAutoModelForImageClassification"),IDt.forEach(t),mQe.forEach(t),aXe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(R$.$$.fragment,bi),cYr=i(bi),Tf=n(bi,"P",{});var bte=s(Tf);fYr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),voe=n(bte,"A",{href:!0});var NDt=s(voe);mYr=r(NDt,"from_pretrained()"),NDt.forEach(t),gYr=r(bte," class method or the "),Foe=n(bte,"A",{href:!0});var qDt=s(Foe);hYr=r(qDt,"from_config()"),qDt.forEach(t),pYr=r(bte,` class
method.`),bte.forEach(t),_Yr=i(bi),P$=n(bi,"P",{});var gQe=s(P$);uYr=r(gQe,"This class cannot be instantiated directly using "),vwe=n(gQe,"CODE",{});var jDt=s(vwe);bYr=r(jDt,"__init__()"),jDt.forEach(t),vYr=r(gQe," (throws an error)."),gQe.forEach(t),FYr=i(bi),ea=n(bi,"DIV",{class:!0});var wL=s(ea);T(B$.$$.fragment,wL),TYr=i(wL),Fwe=n(wL,"P",{});var DDt=s(Fwe);MYr=r(DDt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DDt.forEach(t),EYr=i(wL),Mf=n(wL,"P",{});var vte=s(Mf);CYr=r(vte,`Note:
Loading a model from its configuration file does `),Twe=n(vte,"STRONG",{});var GDt=s(Twe);wYr=r(GDt,"not"),GDt.forEach(t),AYr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Toe=n(vte,"A",{href:!0});var ODt=s(Toe);LYr=r(ODt,"from_pretrained()"),ODt.forEach(t),yYr=r(vte," to load the model weights."),vte.forEach(t),xYr=i(wL),T(oA.$$.fragment,wL),wL.forEach(t),$Yr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(I$.$$.fragment,vi),kYr=i(vi),Mwe=n(vi,"P",{});var VDt=s(Mwe);SYr=r(VDt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VDt.forEach(t),RYr=i(vi),$n=n(vi,"P",{});var AL=s($n);PYr=r(AL,"The model class to instantiate is selected based on the "),Ewe=n(AL,"CODE",{});var XDt=s(Ewe);BYr=r(XDt,"model_type"),XDt.forEach(t),IYr=r(AL,` property of the config object (either
passed as an argument or loaded from `),Cwe=n(AL,"CODE",{});var zDt=s(Cwe);NYr=r(zDt,"pretrained_model_name_or_path"),zDt.forEach(t),qYr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wwe=n(AL,"CODE",{});var QDt=s(wwe);jYr=r(QDt,"pretrained_model_name_or_path"),QDt.forEach(t),DYr=r(AL,":"),AL.forEach(t),GYr=i(vi),N$=n(vi,"UL",{});var hQe=s(N$);rA=n(hQe,"LI",{});var ZGe=s(rA);Awe=n(ZGe,"STRONG",{});var WDt=s(Awe);OYr=r(WDt,"beit"),WDt.forEach(t),VYr=r(ZGe," \u2014 "),Moe=n(ZGe,"A",{href:!0});var HDt=s(Moe);XYr=r(HDt,"FlaxBeitForImageClassification"),HDt.forEach(t),zYr=r(ZGe," (BEiT model)"),ZGe.forEach(t),QYr=i(hQe),tA=n(hQe,"LI",{});var eOe=s(tA);Lwe=n(eOe,"STRONG",{});var UDt=s(Lwe);WYr=r(UDt,"vit"),UDt.forEach(t),HYr=r(eOe," \u2014 "),Eoe=n(eOe,"A",{href:!0});var JDt=s(Eoe);UYr=r(JDt,"FlaxViTForImageClassification"),JDt.forEach(t),JYr=r(eOe," (ViT model)"),eOe.forEach(t),hQe.forEach(t),YYr=i(vi),T(aA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),nXe=i(f),Ef=n(f,"H2",{class:!0});var pQe=s(Ef);nA=n(pQe,"A",{id:!0,class:!0,href:!0});var YDt=s(nA);ywe=n(YDt,"SPAN",{});var KDt=s(ywe);T(q$.$$.fragment,KDt),KDt.forEach(t),YDt.forEach(t),KYr=i(pQe),xwe=n(pQe,"SPAN",{});var ZDt=s(xwe);ZYr=r(ZDt,"FlaxAutoModelForVision2Seq"),ZDt.forEach(t),pQe.forEach(t),sXe=i(f),wr=n(f,"DIV",{class:!0});var Fi=s(wr);T(j$.$$.fragment,Fi),eKr=i(Fi),Cf=n(Fi,"P",{});var Fte=s(Cf);oKr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Coe=n(Fte,"A",{href:!0});var eGt=s(Coe);rKr=r(eGt,"from_pretrained()"),eGt.forEach(t),tKr=r(Fte," class method or the "),woe=n(Fte,"A",{href:!0});var oGt=s(woe);aKr=r(oGt,"from_config()"),oGt.forEach(t),nKr=r(Fte,` class
method.`),Fte.forEach(t),sKr=i(Fi),D$=n(Fi,"P",{});var _Qe=s(D$);lKr=r(_Qe,"This class cannot be instantiated directly using "),$we=n(_Qe,"CODE",{});var rGt=s($we);iKr=r(rGt,"__init__()"),rGt.forEach(t),dKr=r(_Qe," (throws an error)."),_Qe.forEach(t),cKr=i(Fi),oa=n(Fi,"DIV",{class:!0});var LL=s(oa);T(G$.$$.fragment,LL),fKr=i(LL),kwe=n(LL,"P",{});var tGt=s(kwe);mKr=r(tGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tGt.forEach(t),gKr=i(LL),wf=n(LL,"P",{});var Tte=s(wf);hKr=r(Tte,`Note:
Loading a model from its configuration file does `),Swe=n(Tte,"STRONG",{});var aGt=s(Swe);pKr=r(aGt,"not"),aGt.forEach(t),_Kr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(Tte,"A",{href:!0});var nGt=s(Aoe);uKr=r(nGt,"from_pretrained()"),nGt.forEach(t),bKr=r(Tte," to load the model weights."),Tte.forEach(t),vKr=i(LL),T(sA.$$.fragment,LL),LL.forEach(t),FKr=i(Fi),Zr=n(Fi,"DIV",{class:!0});var Ti=s(Zr);T(O$.$$.fragment,Ti),TKr=i(Ti),Rwe=n(Ti,"P",{});var sGt=s(Rwe);MKr=r(sGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sGt.forEach(t),EKr=i(Ti),kn=n(Ti,"P",{});var yL=s(kn);CKr=r(yL,"The model class to instantiate is selected based on the "),Pwe=n(yL,"CODE",{});var lGt=s(Pwe);wKr=r(lGt,"model_type"),lGt.forEach(t),AKr=r(yL,` property of the config object (either
passed as an argument or loaded from `),Bwe=n(yL,"CODE",{});var iGt=s(Bwe);LKr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),yKr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iwe=n(yL,"CODE",{});var dGt=s(Iwe);xKr=r(dGt,"pretrained_model_name_or_path"),dGt.forEach(t),$Kr=r(yL,":"),yL.forEach(t),kKr=i(Ti),Nwe=n(Ti,"UL",{});var cGt=s(Nwe);lA=n(cGt,"LI",{});var oOe=s(lA);qwe=n(oOe,"STRONG",{});var fGt=s(qwe);SKr=r(fGt,"vision-encoder-decoder"),fGt.forEach(t),RKr=r(oOe," \u2014 "),Loe=n(oOe,"A",{href:!0});var mGt=s(Loe);PKr=r(mGt,"FlaxVisionEncoderDecoderModel"),mGt.forEach(t),BKr=r(oOe," (Vision Encoder decoder model)"),oOe.forEach(t),cGt.forEach(t),IKr=i(Ti),T(iA.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(bVt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.AutoTokenizer"),c(yi,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertModel"),c(Rf,"id","extending-the-auto-classes"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#extending-the-auto-classes"),c(xi,"class","relative group"),c(Bf,"id","transformers.AutoConfig"),c(Bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bf,"href","#transformers.AutoConfig"),c($i,"class","relative group"),c(gS,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(hS,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertConfig"),c(pS,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartConfig"),c(_S,"href","/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitConfig"),c(uS,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertConfig"),c(bS,"href","/docs/transformers/pr_17701/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(vS,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdConfig"),c(FS,"href","/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(TS,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(MS,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(ES,"href","/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomConfig"),c(CS,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertConfig"),c(wS,"href","/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineConfig"),c(AS,"href","/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPConfig"),c(LS,"href","/docs/transformers/pr_17701/en/model_doc/codegen#transformers.CodeGenConfig"),c(yS,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertConfig"),c(xS,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextConfig"),c($S,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLConfig"),c(kS,"href","/docs/transformers/pr_17701/en/model_doc/cvt#transformers.CvtConfig"),c(SS,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(RS,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(PS,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(BS,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaConfig"),c(IS,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(NS,"href","/docs/transformers/pr_17701/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(qS,"href","/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTConfig"),c(jS,"href","/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrConfig"),c(DS,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertConfig"),c(GS,"href","/docs/transformers/pr_17701/en/model_doc/dpr#transformers.DPRConfig"),c(OS,"href","/docs/transformers/pr_17701/en/model_doc/dpt#transformers.DPTConfig"),c(VS,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraConfig"),c(XS,"href","/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(zS,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertConfig"),c(QS,"href","/docs/transformers/pr_17701/en/model_doc/flava#transformers.FlavaConfig"),c(WS,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetConfig"),c(HS,"href","/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTConfig"),c(US,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelConfig"),c(JS,"href","/docs/transformers/pr_17701/en/model_doc/glpn#transformers.GLPNConfig"),c(YS,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Config"),c(KS,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ZS,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(eR,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJConfig"),c(oR,"href","/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertConfig"),c(rR,"href","/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertConfig"),c(tR,"href","/docs/transformers/pr_17701/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(aR,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(nR,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(sR,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(lR,"href","/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDConfig"),c(iR,"href","/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitConfig"),c(dR,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerConfig"),c(cR,"href","/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5Config"),c(fR,"href","/docs/transformers/pr_17701/en/model_doc/luke#transformers.LukeConfig"),c(mR,"href","/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertConfig"),c(gR,"href","/docs/transformers/pr_17701/en/model_doc/m2m_100#transformers.M2M100Config"),c(hR,"href","/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianConfig"),c(pR,"href","/docs/transformers/pr_17701/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(_R,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartConfig"),c(uR,"href","/docs/transformers/pr_17701/en/model_doc/mctct#transformers.MCTCTConfig"),c(bR,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(vR,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(FR,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetConfig"),c(TR,"href","/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Config"),c(MR,"href","/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaConfig"),c(ER,"href","/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(CR,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(wR,"href","/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTConfig"),c(AR,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusConfig"),c(LR,"href","/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverConfig"),c(yR,"href","/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartConfig"),c(xR,"href","/docs/transformers/pr_17701/en/model_doc/poolformer#transformers.PoolFormerConfig"),c($R,"href","/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(kR,"href","/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(SR,"href","/docs/transformers/pr_17701/en/model_doc/rag#transformers.RagConfig"),c(RR,"href","/docs/transformers/pr_17701/en/model_doc/realm#transformers.RealmConfig"),c(PR,"href","/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerConfig"),c(BR,"href","/docs/transformers/pr_17701/en/model_doc/regnet#transformers.RegNetConfig"),c(IR,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertConfig"),c(NR,"href","/docs/transformers/pr_17701/en/model_doc/resnet#transformers.ResNetConfig"),c(qR,"href","/docs/transformers/pr_17701/en/model_doc/retribert#transformers.RetriBertConfig"),c(jR,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaConfig"),c(DR,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerConfig"),c(GR,"href","/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerConfig"),c(OR,"href","/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWConfig"),c(VR,"href","/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDConfig"),c(XR,"href","/docs/transformers/pr_17701/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(zR,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(QR,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(WR,"href","/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterConfig"),c(HR,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(UR,"href","/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinConfig"),c(JR,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Config"),c(YR,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasConfig"),c(KR,"href","/docs/transformers/pr_17701/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(ZR,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(eP,"href","/docs/transformers/pr_17701/en/model_doc/trocr#transformers.TrOCRConfig"),c(oP,"href","/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(rP,"href","/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(tP,"href","/docs/transformers/pr_17701/en/model_doc/van#transformers.VanConfig"),c(aP,"href","/docs/transformers/pr_17701/en/model_doc/vilt#transformers.ViltConfig"),c(nP,"href","/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(sP,"href","/docs/transformers/pr_17701/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(lP,"href","/docs/transformers/pr_17701/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(iP,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTConfig"),c(dP,"href","/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(cP,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(fP,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(mP,"href","/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMConfig"),c(gP,"href","/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMConfig"),c(hP,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMConfig"),c(pP,"href","/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(_P,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(uP,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(bP,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetConfig"),c(vP,"href","/docs/transformers/pr_17701/en/model_doc/yolos#transformers.YolosConfig"),c(FP,"href","/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zg,"id","transformers.AutoTokenizer"),c(zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zg,"href","#transformers.AutoTokenizer"),c(Si,"class","relative group"),c(TP,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(MP,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertTokenizer"),c(EP,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CP,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartTokenizer"),c(wP,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartTokenizerFast"),c(AP,"href","/docs/transformers/pr_17701/en/model_doc/barthez#transformers.BarthezTokenizer"),c(LP,"href","/docs/transformers/pr_17701/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(yP,"href","/docs/transformers/pr_17701/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(xP,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizer"),c($P,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizerFast"),c(kP,"href","/docs/transformers/pr_17701/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(SP,"href","/docs/transformers/pr_17701/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(RP,"href","/docs/transformers/pr_17701/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(PP,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(BP,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(IP,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(NP,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(qP,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(jP,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(DP,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(GP,"href","/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(OP,"href","/docs/transformers/pr_17701/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(VP,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertTokenizer"),c(XP,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineTokenizer"),c(QP,"href","/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPTokenizer"),c(WP,"href","/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(HP,"href","/docs/transformers/pr_17701/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(UP,"href","/docs/transformers/pr_17701/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(JP,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(YP,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17701/en/model_doc/cpm#transformers.CpmTokenizer"),c(ZP,"href","/docs/transformers/pr_17701/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(eB,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(oB,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rB,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tB,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaTokenizer"),c(aB,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(nB,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(sB,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(lB,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(iB,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(dB,"href","/docs/transformers/pr_17701/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(cB,"href","/docs/transformers/pr_17701/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(fB,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraTokenizer"),c(mB,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(gB,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(hB,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetTokenizer"),c(pB,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(_B,"href","/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(uB,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelTokenizer"),c(bB,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(vB,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FB,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TB,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MB,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(EB,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(CB,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wB,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AB,"href","/docs/transformers/pr_17701/en/model_doc/herbert#transformers.HerbertTokenizer"),c(LB,"href","/docs/transformers/pr_17701/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xB,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(SB,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(RB,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(PB,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(BB,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(IB,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(NB,"href","/docs/transformers/pr_17701/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(qB,"href","/docs/transformers/pr_17701/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jB,"href","/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDTokenizer"),c(DB,"href","/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDTokenizerFast"),c(GB,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerTokenizer"),c(OB,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VB,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Tokenizer"),c(XB,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5TokenizerFast"),c(zB,"href","/docs/transformers/pr_17701/en/model_doc/luke#transformers.LukeTokenizer"),c(QB,"href","/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(WB,"href","/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(HB,"href","/docs/transformers/pr_17701/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(UB,"href","/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianTokenizer"),c(JB,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartTokenizer"),c(YB,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(KB,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(ZB,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(eI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizer"),c(oI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizerFast"),c(rI,"href","/docs/transformers/pr_17701/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tI,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aI,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nI,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sI,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lI,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Tokenizer"),c(iI,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5TokenizerFast"),c(dI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizer"),c(cI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizerFast"),c(fI,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertTokenizer"),c(mI,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gI,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(hI,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(pI,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_I,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uI,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bI,"href","/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(vI,"href","/docs/transformers/pr_17701/en/model_doc/phobert#transformers.PhobertTokenizer"),c(FI,"href","/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartTokenizer"),c(TI,"href","/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(MI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizer"),c(EI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17701/en/model_doc/rag#transformers.RagTokenizer"),c(wI,"href","/docs/transformers/pr_17701/en/model_doc/realm#transformers.RealmTokenizer"),c(AI,"href","/docs/transformers/pr_17701/en/model_doc/realm#transformers.RealmTokenizerFast"),c(LI,"href","/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerTokenizer"),c(yI,"href","/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(xI,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertTokenizer"),c($I,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(kI,"href","/docs/transformers/pr_17701/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(SI,"href","/docs/transformers/pr_17701/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(RI,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PI,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BI,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(II,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(NI,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(qI,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(jI,"href","/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterTokenizer"),c(DI,"href","/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(GI,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(OI,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(VI,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Tokenizer"),c(XI,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5TokenizerFast"),c(zI,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasTokenizer"),c(QI,"href","/docs/transformers/pr_17701/en/model_doc/tapex#transformers.TapexTokenizer"),c(WI,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(HI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizer"),c(UI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizerFast"),c(JI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizer"),c(YI,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertTokenizerFast"),c(KI,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(ZI,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eN,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(oN,"href","/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMTokenizer"),c(rN,"href","/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(tN,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMTokenizer"),c(aN,"href","/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(nN,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(sN,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(lN,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iN,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dN,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(cN,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(fN,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertTokenizer"),c(mN,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoFeatureExtractor"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoFeatureExtractor"),c(Ri,"class","relative group"),c(gN,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(hN,"href","/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vN,"href","/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17701/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17701/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17701/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AN,"href","/docs/transformers/pr_17701/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(yN,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(xN,"href","/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitFeatureExtractor"),c($N,"href","/docs/transformers/pr_17701/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17701/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(SN,"href","/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(RN,"href","/docs/transformers/pr_17701/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(PN,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BN,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IN,"href","/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(NN,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(qN,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(jN,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DN,"href","/docs/transformers/pr_17701/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(GN,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ON,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VN,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XN,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zN,"href","/docs/transformers/pr_17701/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ip,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"id","transformers.AutoProcessor"),c(dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dp,"href","#transformers.AutoProcessor"),c(Pi,"class","relative group"),c(QN,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(WN,"href","/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPProcessor"),c(HN,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(UN,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(JN,"href","/docs/transformers/pr_17701/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(YN,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KN,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZN,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(eq,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(oq,"href","/docs/transformers/pr_17701/en/model_doc/trocr#transformers.TrOCRProcessor"),c(rq,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tq,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aq,"href","/docs/transformers/pr_17701/en/model_doc/vilt#transformers.ViltProcessor"),c(nq,"href","/docs/transformers/pr_17701/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(sq,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(lq,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iq,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($p,"id","transformers.AutoModel"),c($p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($p,"href","#transformers.AutoModel"),c(Ii,"class","relative group"),c(dq,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cq,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fq,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mq,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertModel"),c(gq,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartModel"),c(hq,"href","/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitModel"),c(pq,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertModel"),c(_q,"href","/docs/transformers/pr_17701/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(uq,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdModel"),c(bq,"href","/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(vq,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Fq,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Tq,"href","/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomModel"),c(Mq,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertModel"),c(Eq,"href","/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineModel"),c(Cq,"href","/docs/transformers/pr_17701/en/model_doc/clip#transformers.CLIPModel"),c(wq,"href","/docs/transformers/pr_17701/en/model_doc/codegen#transformers.CodeGenModel"),c(Aq,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertModel"),c(Lq,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextModel"),c(yq,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLModel"),c(xq,"href","/docs/transformers/pr_17701/en/model_doc/cvt#transformers.CvtModel"),c($q,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(kq,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Sq,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Rq,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaModel"),c(Pq,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Bq,"href","/docs/transformers/pr_17701/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Iq,"href","/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTModel"),c(Nq,"href","/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrModel"),c(qq,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertModel"),c(jq,"href","/docs/transformers/pr_17701/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Dq,"href","/docs/transformers/pr_17701/en/model_doc/dpt#transformers.DPTModel"),c(Gq,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraModel"),c(Oq,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertModel"),c(Vq,"href","/docs/transformers/pr_17701/en/model_doc/flava#transformers.FlavaModel"),c(Xq,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetModel"),c(zq,"href","/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTModel"),c(Qq,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelModel"),c(Wq,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Hq,"href","/docs/transformers/pr_17701/en/model_doc/glpn#transformers.GLPNModel"),c(Uq,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2Model"),c(Jq,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Yq,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Kq,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJModel"),c(Zq,"href","/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertModel"),c(ej,"href","/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertModel"),c(oj,"href","/docs/transformers/pr_17701/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(rj,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(tj,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(aj,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(nj,"href","/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDModel"),c(sj,"href","/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitModel"),c(lj,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerModel"),c(ij,"href","/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5Model"),c(dj,"href","/docs/transformers/pr_17701/en/model_doc/luke#transformers.LukeModel"),c(cj,"href","/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertModel"),c(fj,"href","/docs/transformers/pr_17701/en/model_doc/m2m_100#transformers.M2M100Model"),c(mj,"href","/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianModel"),c(gj,"href","/docs/transformers/pr_17701/en/model_doc/maskformer#transformers.MaskFormerModel"),c(hj,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartModel"),c(pj,"href","/docs/transformers/pr_17701/en/model_doc/mctct#transformers.MCTCTModel"),c(_j,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(uj,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertModel"),c(bj,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetModel"),c(vj,"href","/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5Model"),c(Fj,"href","/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaModel"),c(Tj,"href","/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Mj,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Ej,"href","/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTModel"),c(Cj,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusModel"),c(wj,"href","/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverModel"),c(Aj,"href","/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartModel"),c(Lj,"href","/docs/transformers/pr_17701/en/model_doc/poolformer#transformers.PoolFormerModel"),c(yj,"href","/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(xj,"href","/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertModel"),c($j,"href","/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerModel"),c(kj,"href","/docs/transformers/pr_17701/en/model_doc/regnet#transformers.RegNetModel"),c(Sj,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertModel"),c(Rj,"href","/docs/transformers/pr_17701/en/model_doc/resnet#transformers.ResNetModel"),c(Pj,"href","/docs/transformers/pr_17701/en/model_doc/retribert#transformers.RetriBertModel"),c(Bj,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaModel"),c(Ij,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerModel"),c(Nj,"href","/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerModel"),c(qj,"href","/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWModel"),c(jj,"href","/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDModel"),c(Dj,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Gj,"href","/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterModel"),c(Oj,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Vj,"href","/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinModel"),c(Xj,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5Model"),c(zj,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasModel"),c(Qj,"href","/docs/transformers/pr_17701/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Wj,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Hj,"href","/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Uj,"href","/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Jj,"href","/docs/transformers/pr_17701/en/model_doc/van#transformers.VanModel"),c(Yj,"href","/docs/transformers/pr_17701/en/model_doc/vilt#transformers.ViltModel"),c(Kj,"href","/docs/transformers/pr_17701/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Zj,"href","/docs/transformers/pr_17701/en/model_doc/visual_bert#transformers.VisualBertModel"),c(eD,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTModel"),c(oD,"href","/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(rD,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(tD,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(aD,"href","/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMModel"),c(nD,"href","/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMModel"),c(sD,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMModel"),c(lD,"href","/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(iD,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(dD,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(cD,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetModel"),c(fD,"href","/docs/transformers/pr_17701/en/model_doc/yolos#transformers.YolosModel"),c(mD,"href","/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForPreTraining"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForPreTraining"),c(ji,"class","relative group"),c(gD,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hD,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pD,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_D,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForPreTraining"),c(uD,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(bD,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForPreTraining"),c(vD,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(FD,"href","/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomForCausalLM"),c(TD,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ED,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(CD,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(wD,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(AD,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(LD,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForPreTraining"),c(yD,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(xD,"href","/docs/transformers/pr_17701/en/model_doc/flava#transformers.FlavaForPreTraining"),c($D,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForPreTraining"),c(kD,"href","/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(RD,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(PD,"href","/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ID,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ND,"href","/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(qD,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(jD,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(DD,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(GD,"href","/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(OD,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(VD,"href","/docs/transformers/pr_17701/en/model_doc/retribert#transformers.RetriBertModel"),c(XD,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zD,"href","/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(QD,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(WD,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(UD,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(JD,"href","/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(YD,"href","/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(KD,"href","/docs/transformers/pr_17701/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ZD,"href","/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(eG,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(oG,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(rG,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tG,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aG,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nG,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L1,"id","transformers.AutoModelForCausalLM"),c(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L1,"href","#transformers.AutoModelForCausalLM"),c(Oi,"class","relative group"),c(sG,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lG,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iG,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dG,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForCausalLM"),c(cG,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertLMHeadModel"),c(fG,"href","/docs/transformers/pr_17701/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(mG,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(gG,"href","/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(hG,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(pG,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(_G,"href","/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomForCausalLM"),c(uG,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(bG,"href","/docs/transformers/pr_17701/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(vG,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(FG,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(TG,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForCausalLM"),c(MG,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EG,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(CG,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(wG,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(AG,"href","/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianForCausalLM"),c(LG,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForCausalLM"),c(yG,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(xG,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($G,"href","/docs/transformers/pr_17701/en/model_doc/opt#transformers.OPTForCausalLM"),c(kG,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(SG,"href","/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(RG,"href","/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(PG,"href","/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(BG,"href","/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(IG,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(NG,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(qG,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(jG,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(DG,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(GG,"href","/docs/transformers/pr_17701/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(OG,"href","/docs/transformers/pr_17701/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(VG,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XG,"href","/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(zG,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(QG,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(WG,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_7,"id","transformers.AutoModelForMaskedLM"),c(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_7,"href","#transformers.AutoModelForMaskedLM"),c(zi,"class","relative group"),c(HG,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(KG,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZG,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForMaskedLM"),c(eO,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(oO,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rO,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(tO,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aO,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nO,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sO,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lO,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(iO,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dO,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(cO,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(fO,"href","/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(mO,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(gO,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(hO,"href","/docs/transformers/pr_17701/en/model_doc/luke#transformers.LukeForMaskedLM"),c(pO,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(_O,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(uO,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(bO,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vO,"href","/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(FO,"href","/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(TO,"href","/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(MO,"href","/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(EO,"href","/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(CO,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(wO,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(AO,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(LO,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(yO,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xO,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($O,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kO,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(SO,"href","/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t2,"id","transformers.AutoModelForSeq2SeqLM"),c(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Hi,"class","relative group"),c(RO,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PO,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BO,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IO,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(NO,"href","/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(qO,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(DO,"href","/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(GO,"href","/docs/transformers/pr_17701/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_17701/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(XO,"href","/docs/transformers/pr_17701/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(zO,"href","/docs/transformers/pr_17701/en/model_doc/marian#transformers.MarianMTModel"),c(QO,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_17701/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(HO,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(UO,"href","/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(JO,"href","/docs/transformers/pr_17701/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(YO,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(KO,"href","/docs/transformers/pr_17701/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C2,"id","transformers.AutoModelForSequenceClassification"),c(C2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C2,"href","#transformers.AutoModelForSequenceClassification"),c(Yi,"class","relative group"),c(ZO,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eV,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oV,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rV,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c($V,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(NV,"href","/docs/transformers/pr_17701/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(qV,"href","/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(jV,"href","/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(DV,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(GV,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eb,"id","transformers.AutoModelForMultipleChoice"),c(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eb,"href","#transformers.AutoModelForMultipleChoice"),c(ed,"class","relative group"),c(YV,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(_X,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(uX,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(bX,"href","/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(vX,"href","/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(FX,"href","/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(TX,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(MX,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(EX,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(CX,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(wX,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(AX,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(LX,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(yX,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(xX,"href","/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tv,"id","transformers.AutoModelForNextSentencePrediction"),c(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tv,"href","#transformers.AutoModelForNextSentencePrediction"),c(td,"class","relative group"),c($X,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(PX,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(BX,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(IX,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(NX,"href","/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(qX,"href","/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForTokenClassification"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForTokenClassification"),c(sd,"class","relative group"),c(jX,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(VX,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForTokenClassification"),c(XX,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(zX,"href","/docs/transformers/pr_17701/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(QX,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(WX,"href","/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineForTokenClassification"),c(HX,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(UX,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(JX,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(YX,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(KX,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(ez,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(oz,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(rz,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(tz,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(az,"href","/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(nz,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(sz,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(lz,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(iz,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(dz,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(cz,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(fz,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(mz,"href","/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(gz,"href","/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(hz,"href","/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(pz,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_z,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(uz,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(bz,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(vz,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Fz,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Tz,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Mz,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Ez,"href","/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForQuestionAnswering"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForQuestionAnswering"),c(dd,"class","relative group"),c(Cz,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.BertForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17701/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17701/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Gz,"href","/docs/transformers/pr_17701/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17701/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17701/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17701/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Jz,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17701/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_17701/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_17701/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_17701/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_17701/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nQ,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_17701/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_17701/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cQ,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gQ,"href","/docs/transformers/pr_17701/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X0,"id","transformers.AutoModelForTableQuestionAnswering"),c(X0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X0,"href","#transformers.AutoModelForTableQuestionAnswering"),c(md,"class","relative group"),c(hQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.AutoModelForImageClassification"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.AutoModelForImageClassification"),c(pd,"class","relative group"),c(bQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitForImageClassification"),c(MQ,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EQ,"href","/docs/transformers/pr_17701/en/model_doc/cvt#transformers.CvtForImageClassification"),c(CQ,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(wQ,"href","/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTForImageClassification"),c(AQ,"href","/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(LQ,"href","/docs/transformers/pr_17701/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(yQ,"href","/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitForImageClassification"),c(xQ,"href","/docs/transformers/pr_17701/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c($Q,"href","/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(kQ,"href","/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(SQ,"href","/docs/transformers/pr_17701/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(RQ,"href","/docs/transformers/pr_17701/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PQ,"href","/docs/transformers/pr_17701/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(BQ,"href","/docs/transformers/pr_17701/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(IQ,"href","/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(NQ,"href","/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinForImageClassification"),c(qQ,"href","/docs/transformers/pr_17701/en/model_doc/van#transformers.VanForImageClassification"),c(jQ,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForVision2Seq"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForVision2Seq"),c(bd,"class","relative group"),c(DQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForVisualQuestionAnswering"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Td,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_17701/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForAudioClassification"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForAudioClassification"),c(Cd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(tW,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(aW,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForAudioFrameClassification"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ld,"class","relative group"),c(sW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(cW,"href","/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(fW,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(mW,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(gW,"href","/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VF,"id","transformers.AutoModelForCTC"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.AutoModelForCTC"),c($d,"class","relative group"),c(hW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(bW,"href","/docs/transformers/pr_17701/en/model_doc/hubert#transformers.HubertForCTC"),c(vW,"href","/docs/transformers/pr_17701/en/model_doc/mctct#transformers.MCTCTForCTC"),c(FW,"href","/docs/transformers/pr_17701/en/model_doc/sew#transformers.SEWForCTC"),c(TW,"href","/docs/transformers/pr_17701/en/model_doc/sew-d#transformers.SEWDForCTC"),c(MW,"href","/docs/transformers/pr_17701/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(EW,"href","/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(CW,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(wW,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(AW,"href","/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Rd,"class","relative group"),c(LW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17701/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(kW,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForAudioXVector"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForAudioXVector"),c(Id,"class","relative group"),c(SW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(IW,"href","/docs/transformers/pr_17701/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(NW,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(qW,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(jW,"href","/docs/transformers/pr_17701/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForMaskedImageModeling"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForMaskedImageModeling"),c(jd,"class","relative group"),c(DW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_17701/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(XW,"href","/docs/transformers/pr_17701/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(zW,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForObjectDetection"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForObjectDetection"),c(Vd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrForObjectDetection"),c(JW,"href","/docs/transformers/pr_17701/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForImageSegmentation"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForImageSegmentation"),c(Qd,"class","relative group"),c(YW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_17701/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForSemanticSegmentation"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ud,"class","relative group"),c(oH,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rH,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tH,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aH,"href","/docs/transformers/pr_17701/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(nH,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(sH,"href","/docs/transformers/pr_17701/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(lH,"href","/docs/transformers/pr_17701/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForInstanceSegmentation"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Kd,"class","relative group"),c(iH,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/pr_17701/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModel"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModel"),c(oc,"class","relative group"),c(mH,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertModel"),c(_H,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.TFBartModel"),c(uH,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertModel"),c(bH,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(vH,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(FH,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertModel"),c(TH,"href","/docs/transformers/pr_17701/en/model_doc/clip#transformers.TFCLIPModel"),c(MH,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertModel"),c(EH,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.TFConvNextModel"),c(CH,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.TFCTRLModel"),c(wH,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(AH,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaModel"),c(LH,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(yH,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(xH,"href","/docs/transformers/pr_17701/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($H,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraModel"),c(kH,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(SH,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelModel"),c(RH,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(PH,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.TFGPT2Model"),c(BH,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.TFGPTJModel"),c(IH,"href","/docs/transformers/pr_17701/en/model_doc/hubert#transformers.TFHubertModel"),c(NH,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(qH,"href","/docs/transformers/pr_17701/en/model_doc/led#transformers.TFLEDModel"),c(jH,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerModel"),c(DH,"href","/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.TFLxmertModel"),c(GH,"href","/docs/transformers/pr_17701/en/model_doc/marian#transformers.TFMarianModel"),c(OH,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.TFMBartModel"),c(VH,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(XH,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetModel"),c(zH,"href","/docs/transformers/pr_17701/en/model_doc/mt5#transformers.TFMT5Model"),c(QH,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(WH,"href","/docs/transformers/pr_17701/en/model_doc/opt#transformers.TFOPTModel"),c(HH,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.TFPegasusModel"),c(UH,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertModel"),c(JH,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaModel"),c(YH,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerModel"),c(KH,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(ZH,"href","/docs/transformers/pr_17701/en/model_doc/swin#transformers.TFSwinModel"),c(eU,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.TFT5Model"),c(oU,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasModel"),c(rU,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(tU,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.TFViTModel"),c(aU,"href","/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(nU,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(sU,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMModel"),c(lU,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(iU,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForPreTraining"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForPreTraining"),c(ac,"class","relative group"),c(dU,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(gU,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hU,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForPreTraining"),c(pU,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(_U,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(uU,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bU,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(vU,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FU,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(TU,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(MU,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EU,"href","/docs/transformers/pr_17701/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(CU,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(wU,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AU,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LU,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yU,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xU,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($U,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(kU,"href","/docs/transformers/pr_17701/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(SU,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RU,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(PU,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_E,"id","transformers.TFAutoModelForCausalLM"),c(_E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_E,"href","#transformers.TFAutoModelForCausalLM"),c(lc,"class","relative group"),c(BU,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(jU,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(DU,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(GU,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(OU,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(VU,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(XU,"href","/docs/transformers/pr_17701/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(zU,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(QU,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(WU,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(HU,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UU,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(JU,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.TFAutoModelForImageClassification"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.TFAutoModelForImageClassification"),c(cc,"class","relative group"),c(YU,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_17701/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(oJ,"href","/docs/transformers/pr_17701/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(rJ,"href","/docs/transformers/pr_17701/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(tJ,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.TFAutoModelForMaskedLM"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.TFAutoModelForMaskedLM"),c(gc,"class","relative group"),c(aJ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(iJ,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cJ,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(mJ,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(gJ,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(hJ,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(pJ,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(_J,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(AJ,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(LJ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(SJ,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(PJ,"href","/docs/transformers/pr_17701/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17701/en/model_doc/marian#transformers.TFMarianMTModel"),c(IJ,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17701/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.TFAutoModelForSequenceClassification"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.TFAutoModelForSequenceClassification"),c(vc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17701/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(oY,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(rY,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17701/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17701/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(mY,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(gY,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(hY,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.TFAutoModelForMultipleChoice"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Mc,"class","relative group"),c(pY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(vY,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(FY,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(TY,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(MY,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(EY,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(CY,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(wY,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(AY,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(LY,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(yY,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(xY,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c($Y,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(kY,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(SY,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(RY,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(PY,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.TFAutoModelForNextSentencePrediction"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(wc,"class","relative group"),c(BY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(jY,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(yc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17701/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.TFAutoModelForTokenClassification"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.TFAutoModelForTokenClassification"),c(kc,"class","relative group"),c(XY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WY,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(HY,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(UY,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(JY,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(YY,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(KY,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(eK,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(oK,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(rK,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(tK,"href","/docs/transformers/pr_17701/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(aK,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(nK,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(sK,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(lK,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(iK,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(dK,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(cK,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(fK,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(mK,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.TFAutoModelForQuestionAnswering"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(gK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_K,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(uK,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(bK,"href","/docs/transformers/pr_17701/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(vK,"href","/docs/transformers/pr_17701/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(FK,"href","/docs/transformers/pr_17701/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(TK,"href","/docs/transformers/pr_17701/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(MK,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(EK,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_17701/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(wK,"href","/docs/transformers/pr_17701/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17701/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_17701/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17701/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17701/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17701/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(PK,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17701/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.TFAutoModelForVision2Seq"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.TFAutoModelForVision2Seq"),c(Nc,"class","relative group"),c(IK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Dc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17701/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.FlaxAutoModel"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.FlaxAutoModel"),c(Vc,"class","relative group"),c(XK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WK,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertModel"),c(HK,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartModel"),c(UK,"href","/docs/transformers/pr_17701/en/model_doc/beit#transformers.FlaxBeitModel"),c(JK,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertModel"),c(YK,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(KK,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(ZK,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(eZ,"href","/docs/transformers/pr_17701/en/model_doc/clip#transformers.FlaxCLIPModel"),c(oZ,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(rZ,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraModel"),c(tZ,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(aZ,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(nZ,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(sZ,"href","/docs/transformers/pr_17701/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(lZ,"href","/docs/transformers/pr_17701/en/model_doc/marian#transformers.FlaxMarianModel"),c(iZ,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartModel"),c(dZ,"href","/docs/transformers/pr_17701/en/model_doc/mt5#transformers.FlaxMT5Model"),c(cZ,"href","/docs/transformers/pr_17701/en/model_doc/opt#transformers.FlaxOPTModel"),c(fZ,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(mZ,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(gZ,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(hZ,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.FlaxT5Model"),c(pZ,"href","/docs/transformers/pr_17701/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(_Z,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.FlaxViTModel"),c(uZ,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(bZ,"href","/docs/transformers/pr_17701/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(vZ,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.FlaxAutoModelForCausalLM"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Qc,"class","relative group"),c(FZ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TZ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MZ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EZ,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(CZ,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(wZ,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(AZ,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(LZ,"href","/docs/transformers/pr_17701/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(yZ,"href","/docs/transformers/pr_17701/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(xZ,"href","/docs/transformers/pr_17701/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c($Z,"href","/docs/transformers/pr_17701/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(kZ,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(SZ,"href","/docs/transformers/pr_17701/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.FlaxAutoModelForPreTraining"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Uc,"class","relative group"),c(RZ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PZ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BZ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IZ,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(NZ,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(jZ,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(DZ,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(GZ,"href","/docs/transformers/pr_17701/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(VZ,"href","/docs/transformers/pr_17701/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(XZ,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(zZ,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(QZ,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(WZ,"href","/docs/transformers/pr_17701/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(HZ,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.FlaxAutoModelForMaskedLM"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Kc,"class","relative group"),c(UZ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JZ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YZ,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KZ,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(ZZ,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(oee,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(ree,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(tee,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(aee,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(nee,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(see,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lee,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(of,"class","relative group"),c(iee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fee,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mee,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(gee,"href","/docs/transformers/pr_17701/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(hee,"href","/docs/transformers/pr_17701/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(pee,"href","/docs/transformers/pr_17701/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(_ee,"href","/docs/transformers/pr_17701/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(uee,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bee,"href","/docs/transformers/pr_17701/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vee,"href","/docs/transformers/pr_17701/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Fee,"href","/docs/transformers/pr_17701/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(af,"class","relative group"),c(Tee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cee,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(wee,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Aee,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Lee,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(yee,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xee,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($ee,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(kee,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(See,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Ree,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(lf,"class","relative group"),c(Pee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nee,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(qee,"href","/docs/transformers/pr_17701/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(jee,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Dee,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Gee,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Oee,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(Vee,"href","/docs/transformers/pr_17701/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Xee,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zee,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Qee,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yw,"id","transformers.FlaxAutoModelForTokenClassification"),c(yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(ff,"class","relative group"),c(Wee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uee,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jee,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Yee,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Kee,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Zee,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(eoe,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(ooe,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(roe,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(toe,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(hf,"class","relative group"),c(aoe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(noe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(soe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(loe,"href","/docs/transformers/pr_17701/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(ioe,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(doe,"href","/docs/transformers/pr_17701/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(coe,"href","/docs/transformers/pr_17701/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(foe,"href","/docs/transformers/pr_17701/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(moe,"href","/docs/transformers/pr_17701/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(goe,"href","/docs/transformers/pr_17701/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hoe,"href","/docs/transformers/pr_17701/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(poe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_oe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uoe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(boe,"href","/docs/transformers/pr_17701/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eA,"id","transformers.FlaxAutoModelForImageClassification"),c(eA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eA,"href","#transformers.FlaxAutoModelForImageClassification"),c(Ff,"class","relative group"),c(voe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Foe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Toe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Moe,"href","/docs/transformers/pr_17701/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Eoe,"href","/docs/transformers/pr_17701/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nA,"id","transformers.FlaxAutoModelForVision2Seq"),c(nA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Ef,"class","relative group"),c(Coe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(woe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aoe,"href","/docs/transformers/pr_17701/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Loe,"href","/docs/transformers/pr_17701/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Mi),b(f,xf,u),b(f,at,u),e(at,Ei),e(at,Ci),e(Ci,xL),e(at,$f),b(f,Oe,u),b(f,Qe,u),e(Qe,wi),e(Qe,Rn),e(Rn,$L),e(Qe,Pn),e(Qe,Bn),e(Bn,kL),e(Qe,Ai),e(Qe,In),e(In,SL),e(Qe,Li),b(f,kf,u),M(xa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,lS),e(Ae,yi),e(yi,iS),e(Ae,dS),b(f,Co,u),b(f,$a,u),e($a,cS),e($a,Sf),e(Sf,fS),e($a,uQe),b(f,rOe,u),b(f,xi,u),e(xi,Rf),e(Rf,Mte),M(RL,Mte,null),e(xi,bQe),e(xi,Ete),e(Ete,vQe),b(f,tOe,u),b(f,Nn,u),e(Nn,FQe),e(Nn,Cte),e(Cte,TQe),e(Nn,MQe),e(Nn,wte),e(wte,EQe),e(Nn,CQe),b(f,aOe,u),M(PL,f,u),b(f,nOe,u),b(f,mS,u),e(mS,wQe),b(f,sOe,u),M(Pf,f,u),b(f,lOe,u),b(f,$i,u),e($i,Bf),e(Bf,Ate),M(BL,Ate,null),e($i,AQe),e($i,Lte),e(Lte,LQe),b(f,iOe,u),b(f,wo,u),M(IL,wo,null),e(wo,yQe),e(wo,NL),e(NL,xQe),e(NL,gS),e(gS,$Qe),e(NL,kQe),e(wo,SQe),e(wo,qL),e(qL,RQe),e(qL,yte),e(yte,PQe),e(qL,BQe),e(wo,IQe),e(wo,Ar),M(jL,Ar,null),e(Ar,NQe),e(Ar,xte),e(xte,qQe),e(Ar,jQe),e(Ar,ki),e(ki,DQe),e(ki,$te),e($te,GQe),e(ki,OQe),e(ki,kte),e(kte,VQe),e(ki,XQe),e(Ar,zQe),e(Ar,A),e(A,If),e(If,Ste),e(Ste,QQe),e(If,WQe),e(If,hS),e(hS,HQe),e(If,UQe),e(A,JQe),e(A,Nf),e(Nf,Rte),e(Rte,YQe),e(Nf,KQe),e(Nf,pS),e(pS,ZQe),e(Nf,eWe),e(A,oWe),e(A,qf),e(qf,Pte),e(Pte,rWe),e(qf,tWe),e(qf,_S),e(_S,aWe),e(qf,nWe),e(A,sWe),e(A,jf),e(jf,Bte),e(Bte,lWe),e(jf,iWe),e(jf,uS),e(uS,dWe),e(jf,cWe),e(A,fWe),e(A,Df),e(Df,Ite),e(Ite,mWe),e(Df,gWe),e(Df,bS),e(bS,hWe),e(Df,pWe),e(A,_We),e(A,Gf),e(Gf,Nte),e(Nte,uWe),e(Gf,bWe),e(Gf,vS),e(vS,vWe),e(Gf,FWe),e(A,TWe),e(A,Of),e(Of,qte),e(qte,MWe),e(Of,EWe),e(Of,FS),e(FS,CWe),e(Of,wWe),e(A,AWe),e(A,Vf),e(Vf,jte),e(jte,LWe),e(Vf,yWe),e(Vf,TS),e(TS,xWe),e(Vf,$We),e(A,kWe),e(A,Xf),e(Xf,Dte),e(Dte,SWe),e(Xf,RWe),e(Xf,MS),e(MS,PWe),e(Xf,BWe),e(A,IWe),e(A,zf),e(zf,Gte),e(Gte,NWe),e(zf,qWe),e(zf,ES),e(ES,jWe),e(zf,DWe),e(A,GWe),e(A,Qf),e(Qf,Ote),e(Ote,OWe),e(Qf,VWe),e(Qf,CS),e(CS,XWe),e(Qf,zWe),e(A,QWe),e(A,Wf),e(Wf,Vte),e(Vte,WWe),e(Wf,HWe),e(Wf,wS),e(wS,UWe),e(Wf,JWe),e(A,YWe),e(A,Hf),e(Hf,Xte),e(Xte,KWe),e(Hf,ZWe),e(Hf,AS),e(AS,eHe),e(Hf,oHe),e(A,rHe),e(A,Uf),e(Uf,zte),e(zte,tHe),e(Uf,aHe),e(Uf,LS),e(LS,nHe),e(Uf,sHe),e(A,lHe),e(A,Jf),e(Jf,Qte),e(Qte,iHe),e(Jf,dHe),e(Jf,yS),e(yS,cHe),e(Jf,fHe),e(A,mHe),e(A,Yf),e(Yf,Wte),e(Wte,gHe),e(Yf,hHe),e(Yf,xS),e(xS,pHe),e(Yf,_He),e(A,uHe),e(A,Kf),e(Kf,Hte),e(Hte,bHe),e(Kf,vHe),e(Kf,$S),e($S,FHe),e(Kf,THe),e(A,MHe),e(A,Zf),e(Zf,Ute),e(Ute,EHe),e(Zf,CHe),e(Zf,kS),e(kS,wHe),e(Zf,AHe),e(A,LHe),e(A,em),e(em,Jte),e(Jte,yHe),e(em,xHe),e(em,SS),e(SS,$He),e(em,kHe),e(A,SHe),e(A,om),e(om,Yte),e(Yte,RHe),e(om,PHe),e(om,RS),e(RS,BHe),e(om,IHe),e(A,NHe),e(A,rm),e(rm,Kte),e(Kte,qHe),e(rm,jHe),e(rm,PS),e(PS,DHe),e(rm,GHe),e(A,OHe),e(A,tm),e(tm,Zte),e(Zte,VHe),e(tm,XHe),e(tm,BS),e(BS,zHe),e(tm,QHe),e(A,WHe),e(A,am),e(am,eae),e(eae,HHe),e(am,UHe),e(am,IS),e(IS,JHe),e(am,YHe),e(A,KHe),e(A,nm),e(nm,oae),e(oae,ZHe),e(nm,eUe),e(nm,NS),e(NS,oUe),e(nm,rUe),e(A,tUe),e(A,sm),e(sm,rae),e(rae,aUe),e(sm,nUe),e(sm,qS),e(qS,sUe),e(sm,lUe),e(A,iUe),e(A,lm),e(lm,tae),e(tae,dUe),e(lm,cUe),e(lm,jS),e(jS,fUe),e(lm,mUe),e(A,gUe),e(A,im),e(im,aae),e(aae,hUe),e(im,pUe),e(im,DS),e(DS,_Ue),e(im,uUe),e(A,bUe),e(A,dm),e(dm,nae),e(nae,vUe),e(dm,FUe),e(dm,GS),e(GS,TUe),e(dm,MUe),e(A,EUe),e(A,cm),e(cm,sae),e(sae,CUe),e(cm,wUe),e(cm,OS),e(OS,AUe),e(cm,LUe),e(A,yUe),e(A,fm),e(fm,lae),e(lae,xUe),e(fm,$Ue),e(fm,VS),e(VS,kUe),e(fm,SUe),e(A,RUe),e(A,mm),e(mm,iae),e(iae,PUe),e(mm,BUe),e(mm,XS),e(XS,IUe),e(mm,NUe),e(A,qUe),e(A,gm),e(gm,dae),e(dae,jUe),e(gm,DUe),e(gm,zS),e(zS,GUe),e(gm,OUe),e(A,VUe),e(A,hm),e(hm,cae),e(cae,XUe),e(hm,zUe),e(hm,QS),e(QS,QUe),e(hm,WUe),e(A,HUe),e(A,pm),e(pm,fae),e(fae,UUe),e(pm,JUe),e(pm,WS),e(WS,YUe),e(pm,KUe),e(A,ZUe),e(A,_m),e(_m,mae),e(mae,eJe),e(_m,oJe),e(_m,HS),e(HS,rJe),e(_m,tJe),e(A,aJe),e(A,um),e(um,gae),e(gae,nJe),e(um,sJe),e(um,US),e(US,lJe),e(um,iJe),e(A,dJe),e(A,bm),e(bm,hae),e(hae,cJe),e(bm,fJe),e(bm,JS),e(JS,mJe),e(bm,gJe),e(A,hJe),e(A,vm),e(vm,pae),e(pae,pJe),e(vm,_Je),e(vm,YS),e(YS,uJe),e(vm,bJe),e(A,vJe),e(A,Fm),e(Fm,_ae),e(_ae,FJe),e(Fm,TJe),e(Fm,KS),e(KS,MJe),e(Fm,EJe),e(A,CJe),e(A,Tm),e(Tm,uae),e(uae,wJe),e(Tm,AJe),e(Tm,ZS),e(ZS,LJe),e(Tm,yJe),e(A,xJe),e(A,Mm),e(Mm,bae),e(bae,$Je),e(Mm,kJe),e(Mm,eR),e(eR,SJe),e(Mm,RJe),e(A,PJe),e(A,Em),e(Em,vae),e(vae,BJe),e(Em,IJe),e(Em,oR),e(oR,NJe),e(Em,qJe),e(A,jJe),e(A,Cm),e(Cm,Fae),e(Fae,DJe),e(Cm,GJe),e(Cm,rR),e(rR,OJe),e(Cm,VJe),e(A,XJe),e(A,wm),e(wm,Tae),e(Tae,zJe),e(wm,QJe),e(wm,tR),e(tR,WJe),e(wm,HJe),e(A,UJe),e(A,Am),e(Am,Mae),e(Mae,JJe),e(Am,YJe),e(Am,aR),e(aR,KJe),e(Am,ZJe),e(A,eYe),e(A,Lm),e(Lm,Eae),e(Eae,oYe),e(Lm,rYe),e(Lm,nR),e(nR,tYe),e(Lm,aYe),e(A,nYe),e(A,ym),e(ym,Cae),e(Cae,sYe),e(ym,lYe),e(ym,sR),e(sR,iYe),e(ym,dYe),e(A,cYe),e(A,xm),e(xm,wae),e(wae,fYe),e(xm,mYe),e(xm,lR),e(lR,gYe),e(xm,hYe),e(A,pYe),e(A,$m),e($m,Aae),e(Aae,_Ye),e($m,uYe),e($m,iR),e(iR,bYe),e($m,vYe),e(A,FYe),e(A,km),e(km,Lae),e(Lae,TYe),e(km,MYe),e(km,dR),e(dR,EYe),e(km,CYe),e(A,wYe),e(A,Sm),e(Sm,yae),e(yae,AYe),e(Sm,LYe),e(Sm,cR),e(cR,yYe),e(Sm,xYe),e(A,$Ye),e(A,Rm),e(Rm,xae),e(xae,kYe),e(Rm,SYe),e(Rm,fR),e(fR,RYe),e(Rm,PYe),e(A,BYe),e(A,Pm),e(Pm,$ae),e($ae,IYe),e(Pm,NYe),e(Pm,mR),e(mR,qYe),e(Pm,jYe),e(A,DYe),e(A,Bm),e(Bm,kae),e(kae,GYe),e(Bm,OYe),e(Bm,gR),e(gR,VYe),e(Bm,XYe),e(A,zYe),e(A,Im),e(Im,Sae),e(Sae,QYe),e(Im,WYe),e(Im,hR),e(hR,HYe),e(Im,UYe),e(A,JYe),e(A,Nm),e(Nm,Rae),e(Rae,YYe),e(Nm,KYe),e(Nm,pR),e(pR,ZYe),e(Nm,eKe),e(A,oKe),e(A,qm),e(qm,Pae),e(Pae,rKe),e(qm,tKe),e(qm,_R),e(_R,aKe),e(qm,nKe),e(A,sKe),e(A,jm),e(jm,Bae),e(Bae,lKe),e(jm,iKe),e(jm,uR),e(uR,dKe),e(jm,cKe),e(A,fKe),e(A,Dm),e(Dm,Iae),e(Iae,mKe),e(Dm,gKe),e(Dm,bR),e(bR,hKe),e(Dm,pKe),e(A,_Ke),e(A,Gm),e(Gm,Nae),e(Nae,uKe),e(Gm,bKe),e(Gm,vR),e(vR,vKe),e(Gm,FKe),e(A,TKe),e(A,Om),e(Om,qae),e(qae,MKe),e(Om,EKe),e(Om,FR),e(FR,CKe),e(Om,wKe),e(A,AKe),e(A,Vm),e(Vm,jae),e(jae,LKe),e(Vm,yKe),e(Vm,TR),e(TR,xKe),e(Vm,$Ke),e(A,kKe),e(A,Xm),e(Xm,Dae),e(Dae,SKe),e(Xm,RKe),e(Xm,MR),e(MR,PKe),e(Xm,BKe),e(A,IKe),e(A,zm),e(zm,Gae),e(Gae,NKe),e(zm,qKe),e(zm,ER),e(ER,jKe),e(zm,DKe),e(A,GKe),e(A,Qm),e(Qm,Oae),e(Oae,OKe),e(Qm,VKe),e(Qm,CR),e(CR,XKe),e(Qm,zKe),e(A,QKe),e(A,Wm),e(Wm,Vae),e(Vae,WKe),e(Wm,HKe),e(Wm,wR),e(wR,UKe),e(Wm,JKe),e(A,YKe),e(A,Hm),e(Hm,Xae),e(Xae,KKe),e(Hm,ZKe),e(Hm,AR),e(AR,eZe),e(Hm,oZe),e(A,rZe),e(A,Um),e(Um,zae),e(zae,tZe),e(Um,aZe),e(Um,LR),e(LR,nZe),e(Um,sZe),e(A,lZe),e(A,Jm),e(Jm,Qae),e(Qae,iZe),e(Jm,dZe),e(Jm,yR),e(yR,cZe),e(Jm,fZe),e(A,mZe),e(A,Ym),e(Ym,Wae),e(Wae,gZe),e(Ym,hZe),e(Ym,xR),e(xR,pZe),e(Ym,_Ze),e(A,uZe),e(A,Km),e(Km,Hae),e(Hae,bZe),e(Km,vZe),e(Km,$R),e($R,FZe),e(Km,TZe),e(A,MZe),e(A,Zm),e(Zm,Uae),e(Uae,EZe),e(Zm,CZe),e(Zm,kR),e(kR,wZe),e(Zm,AZe),e(A,LZe),e(A,eg),e(eg,Jae),e(Jae,yZe),e(eg,xZe),e(eg,SR),e(SR,$Ze),e(eg,kZe),e(A,SZe),e(A,og),e(og,Yae),e(Yae,RZe),e(og,PZe),e(og,RR),e(RR,BZe),e(og,IZe),e(A,NZe),e(A,rg),e(rg,Kae),e(Kae,qZe),e(rg,jZe),e(rg,PR),e(PR,DZe),e(rg,GZe),e(A,OZe),e(A,tg),e(tg,Zae),e(Zae,VZe),e(tg,XZe),e(tg,BR),e(BR,zZe),e(tg,QZe),e(A,WZe),e(A,ag),e(ag,ene),e(ene,HZe),e(ag,UZe),e(ag,IR),e(IR,JZe),e(ag,YZe),e(A,KZe),e(A,ng),e(ng,one),e(one,ZZe),e(ng,eeo),e(ng,NR),e(NR,oeo),e(ng,reo),e(A,teo),e(A,sg),e(sg,rne),e(rne,aeo),e(sg,neo),e(sg,qR),e(qR,seo),e(sg,leo),e(A,ieo),e(A,lg),e(lg,tne),e(tne,deo),e(lg,ceo),e(lg,jR),e(jR,feo),e(lg,meo),e(A,geo),e(A,ig),e(ig,ane),e(ane,heo),e(ig,peo),e(ig,DR),e(DR,_eo),e(ig,ueo),e(A,beo),e(A,dg),e(dg,nne),e(nne,veo),e(dg,Feo),e(dg,GR),e(GR,Teo),e(dg,Meo),e(A,Eeo),e(A,cg),e(cg,sne),e(sne,Ceo),e(cg,weo),e(cg,OR),e(OR,Aeo),e(cg,Leo),e(A,yeo),e(A,fg),e(fg,lne),e(lne,xeo),e(fg,$eo),e(fg,VR),e(VR,keo),e(fg,Seo),e(A,Reo),e(A,mg),e(mg,ine),e(ine,Peo),e(mg,Beo),e(mg,XR),e(XR,Ieo),e(mg,Neo),e(A,qeo),e(A,gg),e(gg,dne),e(dne,jeo),e(gg,Deo),e(gg,zR),e(zR,Geo),e(gg,Oeo),e(A,Veo),e(A,hg),e(hg,cne),e(cne,Xeo),e(hg,zeo),e(hg,QR),e(QR,Qeo),e(hg,Weo),e(A,Heo),e(A,pg),e(pg,fne),e(fne,Ueo),e(pg,Jeo),e(pg,WR),e(WR,Yeo),e(pg,Keo),e(A,Zeo),e(A,_g),e(_g,mne),e(mne,eoo),e(_g,ooo),e(_g,HR),e(HR,roo),e(_g,too),e(A,aoo),e(A,ug),e(ug,gne),e(gne,noo),e(ug,soo),e(ug,UR),e(UR,loo),e(ug,ioo),e(A,doo),e(A,bg),e(bg,hne),e(hne,coo),e(bg,foo),e(bg,JR),e(JR,moo),e(bg,goo),e(A,hoo),e(A,vg),e(vg,pne),e(pne,poo),e(vg,_oo),e(vg,YR),e(YR,uoo),e(vg,boo),e(A,voo),e(A,Fg),e(Fg,_ne),e(_ne,Foo),e(Fg,Too),e(Fg,KR),e(KR,Moo),e(Fg,Eoo),e(A,Coo),e(A,Tg),e(Tg,une),e(une,woo),e(Tg,Aoo),e(Tg,ZR),e(ZR,Loo),e(Tg,yoo),e(A,xoo),e(A,Mg),e(Mg,bne),e(bne,$oo),e(Mg,koo),e(Mg,eP),e(eP,Soo),e(Mg,Roo),e(A,Poo),e(A,Eg),e(Eg,vne),e(vne,Boo),e(Eg,Ioo),e(Eg,oP),e(oP,Noo),e(Eg,qoo),e(A,joo),e(A,Cg),e(Cg,Fne),e(Fne,Doo),e(Cg,Goo),e(Cg,rP),e(rP,Ooo),e(Cg,Voo),e(A,Xoo),e(A,wg),e(wg,Tne),e(Tne,zoo),e(wg,Qoo),e(wg,tP),e(tP,Woo),e(wg,Hoo),e(A,Uoo),e(A,Ag),e(Ag,Mne),e(Mne,Joo),e(Ag,Yoo),e(Ag,aP),e(aP,Koo),e(Ag,Zoo),e(A,ero),e(A,Lg),e(Lg,Ene),e(Ene,oro),e(Lg,rro),e(Lg,nP),e(nP,tro),e(Lg,aro),e(A,nro),e(A,yg),e(yg,Cne),e(Cne,sro),e(yg,lro),e(yg,sP),e(sP,iro),e(yg,dro),e(A,cro),e(A,xg),e(xg,wne),e(wne,fro),e(xg,mro),e(xg,lP),e(lP,gro),e(xg,hro),e(A,pro),e(A,$g),e($g,Ane),e(Ane,_ro),e($g,uro),e($g,iP),e(iP,bro),e($g,vro),e(A,Fro),e(A,kg),e(kg,Lne),e(Lne,Tro),e(kg,Mro),e(kg,dP),e(dP,Ero),e(kg,Cro),e(A,wro),e(A,Sg),e(Sg,yne),e(yne,Aro),e(Sg,Lro),e(Sg,cP),e(cP,yro),e(Sg,xro),e(A,$ro),e(A,Rg),e(Rg,xne),e(xne,kro),e(Rg,Sro),e(Rg,fP),e(fP,Rro),e(Rg,Pro),e(A,Bro),e(A,Pg),e(Pg,$ne),e($ne,Iro),e(Pg,Nro),e(Pg,mP),e(mP,qro),e(Pg,jro),e(A,Dro),e(A,Bg),e(Bg,kne),e(kne,Gro),e(Bg,Oro),e(Bg,gP),e(gP,Vro),e(Bg,Xro),e(A,zro),e(A,Ig),e(Ig,Sne),e(Sne,Qro),e(Ig,Wro),e(Ig,hP),e(hP,Hro),e(Ig,Uro),e(A,Jro),e(A,Ng),e(Ng,Rne),e(Rne,Yro),e(Ng,Kro),e(Ng,pP),e(pP,Zro),e(Ng,eto),e(A,oto),e(A,qg),e(qg,Pne),e(Pne,rto),e(qg,tto),e(qg,_P),e(_P,ato),e(qg,nto),e(A,sto),e(A,jg),e(jg,Bne),e(Bne,lto),e(jg,ito),e(jg,uP),e(uP,dto),e(jg,cto),e(A,fto),e(A,Dg),e(Dg,Ine),e(Ine,mto),e(Dg,gto),e(Dg,bP),e(bP,hto),e(Dg,pto),e(A,_to),e(A,Gg),e(Gg,Nne),e(Nne,uto),e(Gg,bto),e(Gg,vP),e(vP,vto),e(Gg,Fto),e(A,Tto),e(A,Og),e(Og,qne),e(qne,Mto),e(Og,Eto),e(Og,FP),e(FP,Cto),e(Og,wto),e(Ar,Ato),M(Vg,Ar,null),e(wo,Lto),e(wo,Xg),M(DL,Xg,null),e(Xg,yto),e(Xg,jne),e(jne,xto),b(f,dOe,u),b(f,Si,u),e(Si,zg),e(zg,Dne),M(GL,Dne,null),e(Si,$to),e(Si,Gne),e(Gne,kto),b(f,cOe,u),b(f,Ao,u),M(OL,Ao,null),e(Ao,Sto),e(Ao,VL),e(VL,Rto),e(VL,TP),e(TP,Pto),e(VL,Bto),e(Ao,Ito),e(Ao,XL),e(XL,Nto),e(XL,One),e(One,qto),e(XL,jto),e(Ao,Dto),e(Ao,Lr),M(zL,Lr,null),e(Lr,Gto),e(Lr,Vne),e(Vne,Oto),e(Lr,Vto),e(Lr,ka),e(ka,Xto),e(ka,Xne),e(Xne,zto),e(ka,Qto),e(ka,zne),e(zne,Wto),e(ka,Hto),e(ka,Qne),e(Qne,Uto),e(ka,Jto),e(Lr,Yto),e(Lr,k),e(k,qn),e(qn,Wne),e(Wne,Kto),e(qn,Zto),e(qn,MP),e(MP,eao),e(qn,oao),e(qn,EP),e(EP,rao),e(qn,tao),e(k,aao),e(k,jn),e(jn,Hne),e(Hne,nao),e(jn,sao),e(jn,CP),e(CP,lao),e(jn,iao),e(jn,wP),e(wP,dao),e(jn,cao),e(k,fao),e(k,Dn),e(Dn,Une),e(Une,mao),e(Dn,gao),e(Dn,AP),e(AP,hao),e(Dn,pao),e(Dn,LP),e(LP,_ao),e(Dn,uao),e(k,bao),e(k,Qg),e(Qg,Jne),e(Jne,vao),e(Qg,Fao),e(Qg,yP),e(yP,Tao),e(Qg,Mao),e(k,Eao),e(k,Gn),e(Gn,Yne),e(Yne,Cao),e(Gn,wao),e(Gn,xP),e(xP,Aao),e(Gn,Lao),e(Gn,$P),e($P,yao),e(Gn,xao),e(k,$ao),e(k,Wg),e(Wg,Kne),e(Kne,kao),e(Wg,Sao),e(Wg,kP),e(kP,Rao),e(Wg,Pao),e(k,Bao),e(k,Hg),e(Hg,Zne),e(Zne,Iao),e(Hg,Nao),e(Hg,SP),e(SP,qao),e(Hg,jao),e(k,Dao),e(k,Ug),e(Ug,ese),e(ese,Gao),e(Ug,Oao),e(Ug,RP),e(RP,Vao),e(Ug,Xao),e(k,zao),e(k,On),e(On,ose),e(ose,Qao),e(On,Wao),e(On,PP),e(PP,Hao),e(On,Uao),e(On,BP),e(BP,Jao),e(On,Yao),e(k,Kao),e(k,Vn),e(Vn,rse),e(rse,Zao),e(Vn,eno),e(Vn,IP),e(IP,ono),e(Vn,rno),e(Vn,NP),e(NP,tno),e(Vn,ano),e(k,nno),e(k,Xn),e(Xn,tse),e(tse,sno),e(Xn,lno),e(Xn,qP),e(qP,ino),e(Xn,dno),e(Xn,jP),e(jP,cno),e(Xn,fno),e(k,mno),e(k,Jg),e(Jg,ase),e(ase,gno),e(Jg,hno),e(Jg,DP),e(DP,pno),e(Jg,_no),e(k,uno),e(k,Yg),e(Yg,nse),e(nse,bno),e(Yg,vno),e(Yg,GP),e(GP,Fno),e(Yg,Tno),e(k,Mno),e(k,Kg),e(Kg,sse),e(sse,Eno),e(Kg,Cno),e(Kg,OP),e(OP,wno),e(Kg,Ano),e(k,Lno),e(k,zn),e(zn,lse),e(lse,yno),e(zn,xno),e(zn,VP),e(VP,$no),e(zn,kno),e(zn,XP),e(XP,Sno),e(zn,Rno),e(k,Pno),e(k,Zg),e(Zg,ise),e(ise,Bno),e(Zg,Ino),e(Zg,zP),e(zP,Nno),e(Zg,qno),e(k,jno),e(k,Qn),e(Qn,dse),e(dse,Dno),e(Qn,Gno),e(Qn,QP),e(QP,Ono),e(Qn,Vno),e(Qn,WP),e(WP,Xno),e(Qn,zno),e(k,Qno),e(k,Wn),e(Wn,cse),e(cse,Wno),e(Wn,Hno),e(Wn,HP),e(HP,Uno),e(Wn,Jno),e(Wn,UP),e(UP,Yno),e(Wn,Kno),e(k,Zno),e(k,Hn),e(Hn,fse),e(fse,eso),e(Hn,oso),e(Hn,JP),e(JP,rso),e(Hn,tso),e(Hn,YP),e(YP,aso),e(Hn,nso),e(k,sso),e(k,Un),e(Un,mse),e(mse,lso),e(Un,iso),e(Un,KP),e(KP,dso),e(Un,cso),e(Un,ZP),e(ZP,fso),e(Un,mso),e(k,gso),e(k,eh),e(eh,gse),e(gse,hso),e(eh,pso),e(eh,eB),e(eB,_so),e(eh,uso),e(k,bso),e(k,Jn),e(Jn,hse),e(hse,vso),e(Jn,Fso),e(Jn,oB),e(oB,Tso),e(Jn,Mso),e(Jn,rB),e(rB,Eso),e(Jn,Cso),e(k,wso),e(k,Yn),e(Yn,pse),e(pse,Aso),e(Yn,Lso),e(Yn,tB),e(tB,yso),e(Yn,xso),e(Yn,aB),e(aB,$so),e(Yn,kso),e(k,Sso),e(k,Kn),e(Kn,_se),e(_se,Rso),e(Kn,Pso),e(Kn,nB),e(nB,Bso),e(Kn,Iso),e(Kn,sB),e(sB,Nso),e(Kn,qso),e(k,jso),e(k,Zn),e(Zn,use),e(use,Dso),e(Zn,Gso),e(Zn,lB),e(lB,Oso),e(Zn,Vso),e(Zn,iB),e(iB,Xso),e(Zn,zso),e(k,Qso),e(k,es),e(es,bse),e(bse,Wso),e(es,Hso),e(es,dB),e(dB,Uso),e(es,Jso),e(es,cB),e(cB,Yso),e(es,Kso),e(k,Zso),e(k,os),e(os,vse),e(vse,elo),e(os,olo),e(os,fB),e(fB,rlo),e(os,tlo),e(os,mB),e(mB,alo),e(os,nlo),e(k,slo),e(k,oh),e(oh,Fse),e(Fse,llo),e(oh,ilo),e(oh,gB),e(gB,dlo),e(oh,clo),e(k,flo),e(k,rs),e(rs,Tse),e(Tse,mlo),e(rs,glo),e(rs,hB),e(hB,hlo),e(rs,plo),e(rs,pB),e(pB,_lo),e(rs,ulo),e(k,blo),e(k,rh),e(rh,Mse),e(Mse,vlo),e(rh,Flo),e(rh,_B),e(_B,Tlo),e(rh,Mlo),e(k,Elo),e(k,ts),e(ts,Ese),e(Ese,Clo),e(ts,wlo),e(ts,uB),e(uB,Alo),e(ts,Llo),e(ts,bB),e(bB,ylo),e(ts,xlo),e(k,$lo),e(k,as),e(as,Cse),e(Cse,klo),e(as,Slo),e(as,vB),e(vB,Rlo),e(as,Plo),e(as,FB),e(FB,Blo),e(as,Ilo),e(k,Nlo),e(k,ns),e(ns,wse),e(wse,qlo),e(ns,jlo),e(ns,TB),e(TB,Dlo),e(ns,Glo),e(ns,MB),e(MB,Olo),e(ns,Vlo),e(k,Xlo),e(k,th),e(th,Ase),e(Ase,zlo),e(th,Qlo),e(th,EB),e(EB,Wlo),e(th,Hlo),e(k,Ulo),e(k,ss),e(ss,Lse),e(Lse,Jlo),e(ss,Ylo),e(ss,CB),e(CB,Klo),e(ss,Zlo),e(ss,wB),e(wB,eio),e(ss,oio),e(k,rio),e(k,ls),e(ls,yse),e(yse,tio),e(ls,aio),e(ls,AB),e(AB,nio),e(ls,sio),e(ls,LB),e(LB,lio),e(ls,iio),e(k,dio),e(k,ah),e(ah,xse),e(xse,cio),e(ah,fio),e(ah,yB),e(yB,mio),e(ah,gio),e(k,hio),e(k,is),e(is,$se),e($se,pio),e(is,_io),e(is,xB),e(xB,uio),e(is,bio),e(is,$B),e($B,vio),e(is,Fio),e(k,Tio),e(k,ds),e(ds,kse),e(kse,Mio),e(ds,Eio),e(ds,kB),e(kB,Cio),e(ds,wio),e(ds,SB),e(SB,Aio),e(ds,Lio),e(k,yio),e(k,cs),e(cs,Sse),e(Sse,xio),e(cs,$io),e(cs,RB),e(RB,kio),e(cs,Sio),e(cs,PB),e(PB,Rio),e(cs,Pio),e(k,Bio),e(k,fs),e(fs,Rse),e(Rse,Iio),e(fs,Nio),e(fs,BB),e(BB,qio),e(fs,jio),e(fs,IB),e(IB,Dio),e(fs,Gio),e(k,Oio),e(k,ms),e(ms,Pse),e(Pse,Vio),e(ms,Xio),e(ms,NB),e(NB,zio),e(ms,Qio),e(ms,qB),e(qB,Wio),e(ms,Hio),e(k,Uio),e(k,gs),e(gs,Bse),e(Bse,Jio),e(gs,Yio),e(gs,jB),e(jB,Kio),e(gs,Zio),e(gs,DB),e(DB,edo),e(gs,odo),e(k,rdo),e(k,hs),e(hs,Ise),e(Ise,tdo),e(hs,ado),e(hs,GB),e(GB,ndo),e(hs,sdo),e(hs,OB),e(OB,ldo),e(hs,ido),e(k,ddo),e(k,ps),e(ps,Nse),e(Nse,cdo),e(ps,fdo),e(ps,VB),e(VB,mdo),e(ps,gdo),e(ps,XB),e(XB,hdo),e(ps,pdo),e(k,_do),e(k,nh),e(nh,qse),e(qse,udo),e(nh,bdo),e(nh,zB),e(zB,vdo),e(nh,Fdo),e(k,Tdo),e(k,_s),e(_s,jse),e(jse,Mdo),e(_s,Edo),e(_s,QB),e(QB,Cdo),e(_s,wdo),e(_s,WB),e(WB,Ado),e(_s,Ldo),e(k,ydo),e(k,sh),e(sh,Dse),e(Dse,xdo),e(sh,$do),e(sh,HB),e(HB,kdo),e(sh,Sdo),e(k,Rdo),e(k,lh),e(lh,Gse),e(Gse,Pdo),e(lh,Bdo),e(lh,UB),e(UB,Ido),e(lh,Ndo),e(k,qdo),e(k,us),e(us,Ose),e(Ose,jdo),e(us,Ddo),e(us,JB),e(JB,Gdo),e(us,Odo),e(us,YB),e(YB,Vdo),e(us,Xdo),e(k,zdo),e(k,bs),e(bs,Vse),e(Vse,Qdo),e(bs,Wdo),e(bs,KB),e(KB,Hdo),e(bs,Udo),e(bs,ZB),e(ZB,Jdo),e(bs,Ydo),e(k,Kdo),e(k,vs),e(vs,Xse),e(Xse,Zdo),e(vs,eco),e(vs,eI),e(eI,oco),e(vs,rco),e(vs,oI),e(oI,tco),e(vs,aco),e(k,nco),e(k,ih),e(ih,zse),e(zse,sco),e(ih,lco),e(ih,rI),e(rI,ico),e(ih,dco),e(k,cco),e(k,Fs),e(Fs,Qse),e(Qse,fco),e(Fs,mco),e(Fs,tI),e(tI,gco),e(Fs,hco),e(Fs,aI),e(aI,pco),e(Fs,_co),e(k,uco),e(k,Ts),e(Ts,Wse),e(Wse,bco),e(Ts,vco),e(Ts,nI),e(nI,Fco),e(Ts,Tco),e(Ts,sI),e(sI,Mco),e(Ts,Eco),e(k,Cco),e(k,Ms),e(Ms,Hse),e(Hse,wco),e(Ms,Aco),e(Ms,lI),e(lI,Lco),e(Ms,yco),e(Ms,iI),e(iI,xco),e(Ms,$co),e(k,kco),e(k,Es),e(Es,Use),e(Use,Sco),e(Es,Rco),e(Es,dI),e(dI,Pco),e(Es,Bco),e(Es,cI),e(cI,Ico),e(Es,Nco),e(k,qco),e(k,Cs),e(Cs,Jse),e(Jse,jco),e(Cs,Dco),e(Cs,fI),e(fI,Gco),e(Cs,Oco),e(Cs,mI),e(mI,Vco),e(Cs,Xco),e(k,zco),e(k,ws),e(ws,Yse),e(Yse,Qco),e(ws,Wco),e(ws,gI),e(gI,Hco),e(ws,Uco),e(ws,hI),e(hI,Jco),e(ws,Yco),e(k,Kco),e(k,dh),e(dh,Kse),e(Kse,Zco),e(dh,efo),e(dh,pI),e(pI,ofo),e(dh,rfo),e(k,tfo),e(k,As),e(As,Zse),e(Zse,afo),e(As,nfo),e(As,_I),e(_I,sfo),e(As,lfo),e(As,uI),e(uI,ifo),e(As,dfo),e(k,cfo),e(k,ch),e(ch,ele),e(ele,ffo),e(ch,mfo),e(ch,bI),e(bI,gfo),e(ch,hfo),e(k,pfo),e(k,fh),e(fh,ole),e(ole,_fo),e(fh,ufo),e(fh,vI),e(vI,bfo),e(fh,vfo),e(k,Ffo),e(k,mh),e(mh,rle),e(rle,Tfo),e(mh,Mfo),e(mh,FI),e(FI,Efo),e(mh,Cfo),e(k,wfo),e(k,gh),e(gh,tle),e(tle,Afo),e(gh,Lfo),e(gh,TI),e(TI,yfo),e(gh,xfo),e(k,$fo),e(k,Ls),e(Ls,ale),e(ale,kfo),e(Ls,Sfo),e(Ls,MI),e(MI,Rfo),e(Ls,Pfo),e(Ls,EI),e(EI,Bfo),e(Ls,Ifo),e(k,Nfo),e(k,hh),e(hh,nle),e(nle,qfo),e(hh,jfo),e(hh,CI),e(CI,Dfo),e(hh,Gfo),e(k,Ofo),e(k,ys),e(ys,sle),e(sle,Vfo),e(ys,Xfo),e(ys,wI),e(wI,zfo),e(ys,Qfo),e(ys,AI),e(AI,Wfo),e(ys,Hfo),e(k,Ufo),e(k,xs),e(xs,lle),e(lle,Jfo),e(xs,Yfo),e(xs,LI),e(LI,Kfo),e(xs,Zfo),e(xs,yI),e(yI,emo),e(xs,omo),e(k,rmo),e(k,$s),e($s,ile),e(ile,tmo),e($s,amo),e($s,xI),e(xI,nmo),e($s,smo),e($s,$I),e($I,lmo),e($s,imo),e(k,dmo),e(k,ks),e(ks,dle),e(dle,cmo),e(ks,fmo),e(ks,kI),e(kI,mmo),e(ks,gmo),e(ks,SI),e(SI,hmo),e(ks,pmo),e(k,_mo),e(k,Ss),e(Ss,cle),e(cle,umo),e(Ss,bmo),e(Ss,RI),e(RI,vmo),e(Ss,Fmo),e(Ss,PI),e(PI,Tmo),e(Ss,Mmo),e(k,Emo),e(k,Rs),e(Rs,fle),e(fle,Cmo),e(Rs,wmo),e(Rs,BI),e(BI,Amo),e(Rs,Lmo),e(Rs,II),e(II,ymo),e(Rs,xmo),e(k,$mo),e(k,ph),e(ph,mle),e(mle,kmo),e(ph,Smo),e(ph,NI),e(NI,Rmo),e(ph,Pmo),e(k,Bmo),e(k,_h),e(_h,gle),e(gle,Imo),e(_h,Nmo),e(_h,qI),e(qI,qmo),e(_h,jmo),e(k,Dmo),e(k,Ps),e(Ps,hle),e(hle,Gmo),e(Ps,Omo),e(Ps,jI),e(jI,Vmo),e(Ps,Xmo),e(Ps,DI),e(DI,zmo),e(Ps,Qmo),e(k,Wmo),e(k,Bs),e(Bs,ple),e(ple,Hmo),e(Bs,Umo),e(Bs,GI),e(GI,Jmo),e(Bs,Ymo),e(Bs,OI),e(OI,Kmo),e(Bs,Zmo),e(k,ego),e(k,Is),e(Is,_le),e(_le,ogo),e(Is,rgo),e(Is,VI),e(VI,tgo),e(Is,ago),e(Is,XI),e(XI,ngo),e(Is,sgo),e(k,lgo),e(k,uh),e(uh,ule),e(ule,igo),e(uh,dgo),e(uh,zI),e(zI,cgo),e(uh,fgo),e(k,mgo),e(k,bh),e(bh,ble),e(ble,ggo),e(bh,hgo),e(bh,QI),e(QI,pgo),e(bh,_go),e(k,ugo),e(k,vh),e(vh,vle),e(vle,bgo),e(vh,vgo),e(vh,WI),e(WI,Fgo),e(vh,Tgo),e(k,Mgo),e(k,Ns),e(Ns,Fle),e(Fle,Ego),e(Ns,Cgo),e(Ns,HI),e(HI,wgo),e(Ns,Ago),e(Ns,UI),e(UI,Lgo),e(Ns,ygo),e(k,xgo),e(k,qs),e(qs,Tle),e(Tle,$go),e(qs,kgo),e(qs,JI),e(JI,Sgo),e(qs,Rgo),e(qs,YI),e(YI,Pgo),e(qs,Bgo),e(k,Igo),e(k,Fh),e(Fh,Mle),e(Mle,Ngo),e(Fh,qgo),e(Fh,KI),e(KI,jgo),e(Fh,Dgo),e(k,Ggo),e(k,Th),e(Th,Ele),e(Ele,Ogo),e(Th,Vgo),e(Th,ZI),e(ZI,Xgo),e(Th,zgo),e(k,Qgo),e(k,Mh),e(Mh,Cle),e(Cle,Wgo),e(Mh,Hgo),e(Mh,eN),e(eN,Ugo),e(Mh,Jgo),e(k,Ygo),e(k,js),e(js,wle),e(wle,Kgo),e(js,Zgo),e(js,oN),e(oN,eho),e(js,oho),e(js,rN),e(rN,rho),e(js,tho),e(k,aho),e(k,Eh),e(Eh,Ale),e(Ale,nho),e(Eh,sho),e(Eh,tN),e(tN,lho),e(Eh,iho),e(k,dho),e(k,Ch),e(Ch,Lle),e(Lle,cho),e(Ch,fho),e(Ch,aN),e(aN,mho),e(Ch,gho),e(k,hho),e(k,Ds),e(Ds,yle),e(yle,pho),e(Ds,_ho),e(Ds,nN),e(nN,uho),e(Ds,bho),e(Ds,sN),e(sN,vho),e(Ds,Fho),e(k,Tho),e(k,Gs),e(Gs,xle),e(xle,Mho),e(Gs,Eho),e(Gs,lN),e(lN,Cho),e(Gs,who),e(Gs,iN),e(iN,Aho),e(Gs,Lho),e(k,yho),e(k,Os),e(Os,$le),e($le,xho),e(Os,$ho),e(Os,dN),e(dN,kho),e(Os,Sho),e(Os,cN),e(cN,Rho),e(Os,Pho),e(k,Bho),e(k,Vs),e(Vs,kle),e(kle,Iho),e(Vs,Nho),e(Vs,fN),e(fN,qho),e(Vs,jho),e(Vs,mN),e(mN,Dho),e(Vs,Gho),e(Lr,Oho),M(wh,Lr,null),e(Ao,Vho),e(Ao,Ah),M(QL,Ah,null),e(Ah,Xho),e(Ah,Sle),e(Sle,zho),b(f,fOe,u),b(f,Ri,u),e(Ri,Lh),e(Lh,Rle),M(WL,Rle,null),e(Ri,Qho),e(Ri,Ple),e(Ple,Who),b(f,mOe,u),b(f,Lo,u),M(HL,Lo,null),e(Lo,Hho),e(Lo,UL),e(UL,Uho),e(UL,gN),e(gN,Jho),e(UL,Yho),e(Lo,Kho),e(Lo,JL),e(JL,Zho),e(JL,Ble),e(Ble,epo),e(JL,opo),e(Lo,rpo),e(Lo,He),M(YL,He,null),e(He,tpo),e(He,Ile),e(Ile,apo),e(He,npo),e(He,Sa),e(Sa,spo),e(Sa,Nle),e(Nle,lpo),e(Sa,ipo),e(Sa,qle),e(qle,dpo),e(Sa,cpo),e(Sa,jle),e(jle,fpo),e(Sa,mpo),e(He,gpo),e(He,Y),e(Y,yh),e(yh,Dle),e(Dle,hpo),e(yh,ppo),e(yh,hN),e(hN,_po),e(yh,upo),e(Y,bpo),e(Y,xh),e(xh,Gle),e(Gle,vpo),e(xh,Fpo),e(xh,pN),e(pN,Tpo),e(xh,Mpo),e(Y,Epo),e(Y,$h),e($h,Ole),e(Ole,Cpo),e($h,wpo),e($h,_N),e(_N,Apo),e($h,Lpo),e(Y,ypo),e(Y,kh),e(kh,Vle),e(Vle,xpo),e(kh,$po),e(kh,uN),e(uN,kpo),e(kh,Spo),e(Y,Rpo),e(Y,Sh),e(Sh,Xle),e(Xle,Ppo),e(Sh,Bpo),e(Sh,bN),e(bN,Ipo),e(Sh,Npo),e(Y,qpo),e(Y,Rh),e(Rh,zle),e(zle,jpo),e(Rh,Dpo),e(Rh,vN),e(vN,Gpo),e(Rh,Opo),e(Y,Vpo),e(Y,Ph),e(Ph,Qle),e(Qle,Xpo),e(Ph,zpo),e(Ph,FN),e(FN,Qpo),e(Ph,Wpo),e(Y,Hpo),e(Y,Bh),e(Bh,Wle),e(Wle,Upo),e(Bh,Jpo),e(Bh,TN),e(TN,Ypo),e(Bh,Kpo),e(Y,Zpo),e(Y,Ih),e(Ih,Hle),e(Hle,e_o),e(Ih,o_o),e(Ih,MN),e(MN,r_o),e(Ih,t_o),e(Y,a_o),e(Y,Nh),e(Nh,Ule),e(Ule,n_o),e(Nh,s_o),e(Nh,EN),e(EN,l_o),e(Nh,i_o),e(Y,d_o),e(Y,qh),e(qh,Jle),e(Jle,c_o),e(qh,f_o),e(qh,CN),e(CN,m_o),e(qh,g_o),e(Y,h_o),e(Y,jh),e(jh,Yle),e(Yle,p_o),e(jh,__o),e(jh,wN),e(wN,u_o),e(jh,b_o),e(Y,v_o),e(Y,Dh),e(Dh,Kle),e(Kle,F_o),e(Dh,T_o),e(Dh,AN),e(AN,M_o),e(Dh,E_o),e(Y,C_o),e(Y,Gh),e(Gh,Zle),e(Zle,w_o),e(Gh,A_o),e(Gh,LN),e(LN,L_o),e(Gh,y_o),e(Y,x_o),e(Y,Oh),e(Oh,eie),e(eie,$_o),e(Oh,k_o),e(Oh,yN),e(yN,S_o),e(Oh,R_o),e(Y,P_o),e(Y,Vh),e(Vh,oie),e(oie,B_o),e(Vh,I_o),e(Vh,xN),e(xN,N_o),e(Vh,q_o),e(Y,j_o),e(Y,Xh),e(Xh,rie),e(rie,D_o),e(Xh,G_o),e(Xh,$N),e($N,O_o),e(Xh,V_o),e(Y,X_o),e(Y,zh),e(zh,tie),e(tie,z_o),e(zh,Q_o),e(zh,kN),e(kN,W_o),e(zh,H_o),e(Y,U_o),e(Y,Qh),e(Qh,aie),e(aie,J_o),e(Qh,Y_o),e(Qh,SN),e(SN,K_o),e(Qh,Z_o),e(Y,euo),e(Y,Wh),e(Wh,nie),e(nie,ouo),e(Wh,ruo),e(Wh,RN),e(RN,tuo),e(Wh,auo),e(Y,nuo),e(Y,Hh),e(Hh,sie),e(sie,suo),e(Hh,luo),e(Hh,PN),e(PN,iuo),e(Hh,duo),e(Y,cuo),e(Y,Uh),e(Uh,lie),e(lie,fuo),e(Uh,muo),e(Uh,BN),e(BN,guo),e(Uh,huo),e(Y,puo),e(Y,Jh),e(Jh,iie),e(iie,_uo),e(Jh,uuo),e(Jh,IN),e(IN,buo),e(Jh,vuo),e(Y,Fuo),e(Y,Yh),e(Yh,die),e(die,Tuo),e(Yh,Muo),e(Yh,NN),e(NN,Euo),e(Yh,Cuo),e(Y,wuo),e(Y,Kh),e(Kh,cie),e(cie,Auo),e(Kh,Luo),e(Kh,qN),e(qN,yuo),e(Kh,xuo),e(Y,$uo),e(Y,Zh),e(Zh,fie),e(fie,kuo),e(Zh,Suo),e(Zh,jN),e(jN,Ruo),e(Zh,Puo),e(Y,Buo),e(Y,ep),e(ep,mie),e(mie,Iuo),e(ep,Nuo),e(ep,DN),e(DN,quo),e(ep,juo),e(Y,Duo),e(Y,op),e(op,gie),e(gie,Guo),e(op,Ouo),e(op,GN),e(GN,Vuo),e(op,Xuo),e(Y,zuo),e(Y,rp),e(rp,hie),e(hie,Quo),e(rp,Wuo),e(rp,ON),e(ON,Huo),e(rp,Uuo),e(Y,Juo),e(Y,tp),e(tp,pie),e(pie,Yuo),e(tp,Kuo),e(tp,VN),e(VN,Zuo),e(tp,e1o),e(Y,o1o),e(Y,ap),e(ap,_ie),e(_ie,r1o),e(ap,t1o),e(ap,XN),e(XN,a1o),e(ap,n1o),e(Y,s1o),e(Y,np),e(np,uie),e(uie,l1o),e(np,i1o),e(np,zN),e(zN,d1o),e(np,c1o),e(He,f1o),M(sp,He,null),e(He,m1o),M(lp,He,null),e(Lo,g1o),e(Lo,ip),M(KL,ip,null),e(ip,h1o),e(ip,bie),e(bie,p1o),b(f,gOe,u),b(f,Pi,u),e(Pi,dp),e(dp,vie),M(ZL,vie,null),e(Pi,_1o),e(Pi,Fie),e(Fie,u1o),b(f,hOe,u),b(f,yo,u),M(ey,yo,null),e(yo,b1o),e(yo,oy),e(oy,v1o),e(oy,QN),e(QN,F1o),e(oy,T1o),e(yo,M1o),e(yo,ry),e(ry,E1o),e(ry,Tie),e(Tie,C1o),e(ry,w1o),e(yo,A1o),e(yo,Ue),M(ty,Ue,null),e(Ue,L1o),e(Ue,Mie),e(Mie,y1o),e(Ue,x1o),e(Ue,Bi),e(Bi,$1o),e(Bi,Eie),e(Eie,k1o),e(Bi,S1o),e(Bi,Cie),e(Cie,R1o),e(Bi,P1o),e(Ue,B1o),e(Ue,he),e(he,cp),e(cp,wie),e(wie,I1o),e(cp,N1o),e(cp,WN),e(WN,q1o),e(cp,j1o),e(he,D1o),e(he,fp),e(fp,Aie),e(Aie,G1o),e(fp,O1o),e(fp,Lie),e(Lie,V1o),e(fp,X1o),e(he,z1o),e(he,mp),e(mp,yie),e(yie,Q1o),e(mp,W1o),e(mp,HN),e(HN,H1o),e(mp,U1o),e(he,J1o),e(he,gp),e(gp,xie),e(xie,Y1o),e(gp,K1o),e(gp,UN),e(UN,Z1o),e(gp,e7o),e(he,o7o),e(he,hp),e(hp,$ie),e($ie,r7o),e(hp,t7o),e(hp,JN),e(JN,a7o),e(hp,n7o),e(he,s7o),e(he,pp),e(pp,kie),e(kie,l7o),e(pp,i7o),e(pp,YN),e(YN,d7o),e(pp,c7o),e(he,f7o),e(he,_p),e(_p,Sie),e(Sie,m7o),e(_p,g7o),e(_p,KN),e(KN,h7o),e(_p,p7o),e(he,_7o),e(he,up),e(up,Rie),e(Rie,u7o),e(up,b7o),e(up,ZN),e(ZN,v7o),e(up,F7o),e(he,T7o),e(he,bp),e(bp,Pie),e(Pie,M7o),e(bp,E7o),e(bp,eq),e(eq,C7o),e(bp,w7o),e(he,A7o),e(he,vp),e(vp,Bie),e(Bie,L7o),e(vp,y7o),e(vp,oq),e(oq,x7o),e(vp,$7o),e(he,k7o),e(he,Fp),e(Fp,Iie),e(Iie,S7o),e(Fp,R7o),e(Fp,rq),e(rq,P7o),e(Fp,B7o),e(he,I7o),e(he,Tp),e(Tp,Nie),e(Nie,N7o),e(Tp,q7o),e(Tp,tq),e(tq,j7o),e(Tp,D7o),e(he,G7o),e(he,Mp),e(Mp,qie),e(qie,O7o),e(Mp,V7o),e(Mp,aq),e(aq,X7o),e(Mp,z7o),e(he,Q7o),e(he,Ep),e(Ep,jie),e(jie,W7o),e(Ep,H7o),e(Ep,nq),e(nq,U7o),e(Ep,J7o),e(he,Y7o),e(he,Cp),e(Cp,Die),e(Die,K7o),e(Cp,Z7o),e(Cp,sq),e(sq,e2o),e(Cp,o2o),e(he,r2o),e(he,wp),e(wp,Gie),e(Gie,t2o),e(wp,a2o),e(wp,lq),e(lq,n2o),e(wp,s2o),e(he,l2o),e(he,Ap),e(Ap,Oie),e(Oie,i2o),e(Ap,d2o),e(Ap,iq),e(iq,c2o),e(Ap,f2o),e(Ue,m2o),M(Lp,Ue,null),e(Ue,g2o),M(yp,Ue,null),e(yo,h2o),e(yo,xp),M(ay,xp,null),e(xp,p2o),e(xp,Vie),e(Vie,_2o),b(f,pOe,u),b(f,Ii,u),e(Ii,$p),e($p,Xie),M(ny,Xie,null),e(Ii,u2o),e(Ii,zie),e(zie,b2o),b(f,_Oe,u),b(f,xo,u),M(sy,xo,null),e(xo,v2o),e(xo,Ni),e(Ni,F2o),e(Ni,dq),e(dq,T2o),e(Ni,M2o),e(Ni,cq),e(cq,E2o),e(Ni,C2o),e(xo,w2o),e(xo,ly),e(ly,A2o),e(ly,Qie),e(Qie,L2o),e(ly,y2o),e(xo,x2o),e(xo,nt),M(iy,nt,null),e(nt,$2o),e(nt,Wie),e(Wie,k2o),e(nt,S2o),e(nt,qi),e(qi,R2o),e(qi,Hie),e(Hie,P2o),e(qi,B2o),e(qi,fq),e(fq,I2o),e(qi,N2o),e(nt,q2o),M(kp,nt,null),e(xo,j2o),e(xo,Je),M(dy,Je,null),e(Je,D2o),e(Je,Uie),e(Uie,G2o),e(Je,O2o),e(Je,Ra),e(Ra,V2o),e(Ra,Jie),e(Jie,X2o),e(Ra,z2o),e(Ra,Yie),e(Yie,Q2o),e(Ra,W2o),e(Ra,Kie),e(Kie,H2o),e(Ra,U2o),e(Je,J2o),e(Je,y),e(y,Sp),e(Sp,Zie),e(Zie,Y2o),e(Sp,K2o),e(Sp,mq),e(mq,Z2o),e(Sp,ebo),e(y,obo),e(y,Rp),e(Rp,ede),e(ede,rbo),e(Rp,tbo),e(Rp,gq),e(gq,abo),e(Rp,nbo),e(y,sbo),e(y,Pp),e(Pp,ode),e(ode,lbo),e(Pp,ibo),e(Pp,hq),e(hq,dbo),e(Pp,cbo),e(y,fbo),e(y,Bp),e(Bp,rde),e(rde,mbo),e(Bp,gbo),e(Bp,pq),e(pq,hbo),e(Bp,pbo),e(y,_bo),e(y,Ip),e(Ip,tde),e(tde,ubo),e(Ip,bbo),e(Ip,_q),e(_q,vbo),e(Ip,Fbo),e(y,Tbo),e(y,Np),e(Np,ade),e(ade,Mbo),e(Np,Ebo),e(Np,uq),e(uq,Cbo),e(Np,wbo),e(y,Abo),e(y,qp),e(qp,nde),e(nde,Lbo),e(qp,ybo),e(qp,bq),e(bq,xbo),e(qp,$bo),e(y,kbo),e(y,jp),e(jp,sde),e(sde,Sbo),e(jp,Rbo),e(jp,vq),e(vq,Pbo),e(jp,Bbo),e(y,Ibo),e(y,Dp),e(Dp,lde),e(lde,Nbo),e(Dp,qbo),e(Dp,Fq),e(Fq,jbo),e(Dp,Dbo),e(y,Gbo),e(y,Gp),e(Gp,ide),e(ide,Obo),e(Gp,Vbo),e(Gp,Tq),e(Tq,Xbo),e(Gp,zbo),e(y,Qbo),e(y,Op),e(Op,dde),e(dde,Wbo),e(Op,Hbo),e(Op,Mq),e(Mq,Ubo),e(Op,Jbo),e(y,Ybo),e(y,Vp),e(Vp,cde),e(cde,Kbo),e(Vp,Zbo),e(Vp,Eq),e(Eq,evo),e(Vp,ovo),e(y,rvo),e(y,Xp),e(Xp,fde),e(fde,tvo),e(Xp,avo),e(Xp,Cq),e(Cq,nvo),e(Xp,svo),e(y,lvo),e(y,zp),e(zp,mde),e(mde,ivo),e(zp,dvo),e(zp,wq),e(wq,cvo),e(zp,fvo),e(y,mvo),e(y,Qp),e(Qp,gde),e(gde,gvo),e(Qp,hvo),e(Qp,Aq),e(Aq,pvo),e(Qp,_vo),e(y,uvo),e(y,Wp),e(Wp,hde),e(hde,bvo),e(Wp,vvo),e(Wp,Lq),e(Lq,Fvo),e(Wp,Tvo),e(y,Mvo),e(y,Hp),e(Hp,pde),e(pde,Evo),e(Hp,Cvo),e(Hp,yq),e(yq,wvo),e(Hp,Avo),e(y,Lvo),e(y,Up),e(Up,_de),e(_de,yvo),e(Up,xvo),e(Up,xq),e(xq,$vo),e(Up,kvo),e(y,Svo),e(y,Jp),e(Jp,ude),e(ude,Rvo),e(Jp,Pvo),e(Jp,$q),e($q,Bvo),e(Jp,Ivo),e(y,Nvo),e(y,Yp),e(Yp,bde),e(bde,qvo),e(Yp,jvo),e(Yp,kq),e(kq,Dvo),e(Yp,Gvo),e(y,Ovo),e(y,Kp),e(Kp,vde),e(vde,Vvo),e(Kp,Xvo),e(Kp,Sq),e(Sq,zvo),e(Kp,Qvo),e(y,Wvo),e(y,Zp),e(Zp,Fde),e(Fde,Hvo),e(Zp,Uvo),e(Zp,Rq),e(Rq,Jvo),e(Zp,Yvo),e(y,Kvo),e(y,e_),e(e_,Tde),e(Tde,Zvo),e(e_,e0o),e(e_,Pq),e(Pq,o0o),e(e_,r0o),e(y,t0o),e(y,o_),e(o_,Mde),e(Mde,a0o),e(o_,n0o),e(o_,Bq),e(Bq,s0o),e(o_,l0o),e(y,i0o),e(y,r_),e(r_,Ede),e(Ede,d0o),e(r_,c0o),e(r_,Iq),e(Iq,f0o),e(r_,m0o),e(y,g0o),e(y,t_),e(t_,Cde),e(Cde,h0o),e(t_,p0o),e(t_,Nq),e(Nq,_0o),e(t_,u0o),e(y,b0o),e(y,a_),e(a_,wde),e(wde,v0o),e(a_,F0o),e(a_,qq),e(qq,T0o),e(a_,M0o),e(y,E0o),e(y,n_),e(n_,Ade),e(Ade,C0o),e(n_,w0o),e(n_,jq),e(jq,A0o),e(n_,L0o),e(y,y0o),e(y,s_),e(s_,Lde),e(Lde,x0o),e(s_,$0o),e(s_,Dq),e(Dq,k0o),e(s_,S0o),e(y,R0o),e(y,l_),e(l_,yde),e(yde,P0o),e(l_,B0o),e(l_,Gq),e(Gq,I0o),e(l_,N0o),e(y,q0o),e(y,i_),e(i_,xde),e(xde,j0o),e(i_,D0o),e(i_,Oq),e(Oq,G0o),e(i_,O0o),e(y,V0o),e(y,d_),e(d_,$de),e($de,X0o),e(d_,z0o),e(d_,Vq),e(Vq,Q0o),e(d_,W0o),e(y,H0o),e(y,c_),e(c_,kde),e(kde,U0o),e(c_,J0o),e(c_,Xq),e(Xq,Y0o),e(c_,K0o),e(y,Z0o),e(y,f_),e(f_,Sde),e(Sde,eFo),e(f_,oFo),e(f_,zq),e(zq,rFo),e(f_,tFo),e(y,aFo),e(y,Xs),e(Xs,Rde),e(Rde,nFo),e(Xs,sFo),e(Xs,Qq),e(Qq,lFo),e(Xs,iFo),e(Xs,Wq),e(Wq,dFo),e(Xs,cFo),e(y,fFo),e(y,m_),e(m_,Pde),e(Pde,mFo),e(m_,gFo),e(m_,Hq),e(Hq,hFo),e(m_,pFo),e(y,_Fo),e(y,g_),e(g_,Bde),e(Bde,uFo),e(g_,bFo),e(g_,Uq),e(Uq,vFo),e(g_,FFo),e(y,TFo),e(y,h_),e(h_,Ide),e(Ide,MFo),e(h_,EFo),e(h_,Jq),e(Jq,CFo),e(h_,wFo),e(y,AFo),e(y,p_),e(p_,Nde),e(Nde,LFo),e(p_,yFo),e(p_,Yq),e(Yq,xFo),e(p_,$Fo),e(y,kFo),e(y,__),e(__,qde),e(qde,SFo),e(__,RFo),e(__,Kq),e(Kq,PFo),e(__,BFo),e(y,IFo),e(y,u_),e(u_,jde),e(jde,NFo),e(u_,qFo),e(u_,Zq),e(Zq,jFo),e(u_,DFo),e(y,GFo),e(y,b_),e(b_,Dde),e(Dde,OFo),e(b_,VFo),e(b_,ej),e(ej,XFo),e(b_,zFo),e(y,QFo),e(y,v_),e(v_,Gde),e(Gde,WFo),e(v_,HFo),e(v_,oj),e(oj,UFo),e(v_,JFo),e(y,YFo),e(y,F_),e(F_,Ode),e(Ode,KFo),e(F_,ZFo),e(F_,rj),e(rj,eTo),e(F_,oTo),e(y,rTo),e(y,T_),e(T_,Vde),e(Vde,tTo),e(T_,aTo),e(T_,tj),e(tj,nTo),e(T_,sTo),e(y,lTo),e(y,M_),e(M_,Xde),e(Xde,iTo),e(M_,dTo),e(M_,aj),e(aj,cTo),e(M_,fTo),e(y,mTo),e(y,E_),e(E_,zde),e(zde,gTo),e(E_,hTo),e(E_,nj),e(nj,pTo),e(E_,_To),e(y,uTo),e(y,C_),e(C_,Qde),e(Qde,bTo),e(C_,vTo),e(C_,sj),e(sj,FTo),e(C_,TTo),e(y,MTo),e(y,w_),e(w_,Wde),e(Wde,ETo),e(w_,CTo),e(w_,lj),e(lj,wTo),e(w_,ATo),e(y,LTo),e(y,A_),e(A_,Hde),e(Hde,yTo),e(A_,xTo),e(A_,ij),e(ij,$To),e(A_,kTo),e(y,STo),e(y,L_),e(L_,Ude),e(Ude,RTo),e(L_,PTo),e(L_,dj),e(dj,BTo),e(L_,ITo),e(y,NTo),e(y,y_),e(y_,Jde),e(Jde,qTo),e(y_,jTo),e(y_,cj),e(cj,DTo),e(y_,GTo),e(y,OTo),e(y,x_),e(x_,Yde),e(Yde,VTo),e(x_,XTo),e(x_,fj),e(fj,zTo),e(x_,QTo),e(y,WTo),e(y,$_),e($_,Kde),e(Kde,HTo),e($_,UTo),e($_,mj),e(mj,JTo),e($_,YTo),e(y,KTo),e(y,k_),e(k_,Zde),e(Zde,ZTo),e(k_,eMo),e(k_,gj),e(gj,oMo),e(k_,rMo),e(y,tMo),e(y,S_),e(S_,ece),e(ece,aMo),e(S_,nMo),e(S_,hj),e(hj,sMo),e(S_,lMo),e(y,iMo),e(y,R_),e(R_,oce),e(oce,dMo),e(R_,cMo),e(R_,pj),e(pj,fMo),e(R_,mMo),e(y,gMo),e(y,P_),e(P_,rce),e(rce,hMo),e(P_,pMo),e(P_,_j),e(_j,_Mo),e(P_,uMo),e(y,bMo),e(y,B_),e(B_,tce),e(tce,vMo),e(B_,FMo),e(B_,uj),e(uj,TMo),e(B_,MMo),e(y,EMo),e(y,I_),e(I_,ace),e(ace,CMo),e(I_,wMo),e(I_,bj),e(bj,AMo),e(I_,LMo),e(y,yMo),e(y,N_),e(N_,nce),e(nce,xMo),e(N_,$Mo),e(N_,vj),e(vj,kMo),e(N_,SMo),e(y,RMo),e(y,q_),e(q_,sce),e(sce,PMo),e(q_,BMo),e(q_,Fj),e(Fj,IMo),e(q_,NMo),e(y,qMo),e(y,j_),e(j_,lce),e(lce,jMo),e(j_,DMo),e(j_,Tj),e(Tj,GMo),e(j_,OMo),e(y,VMo),e(y,D_),e(D_,ice),e(ice,XMo),e(D_,zMo),e(D_,Mj),e(Mj,QMo),e(D_,WMo),e(y,HMo),e(y,G_),e(G_,dce),e(dce,UMo),e(G_,JMo),e(G_,Ej),e(Ej,YMo),e(G_,KMo),e(y,ZMo),e(y,O_),e(O_,cce),e(cce,eEo),e(O_,oEo),e(O_,Cj),e(Cj,rEo),e(O_,tEo),e(y,aEo),e(y,V_),e(V_,fce),e(fce,nEo),e(V_,sEo),e(V_,wj),e(wj,lEo),e(V_,iEo),e(y,dEo),e(y,X_),e(X_,mce),e(mce,cEo),e(X_,fEo),e(X_,Aj),e(Aj,mEo),e(X_,gEo),e(y,hEo),e(y,z_),e(z_,gce),e(gce,pEo),e(z_,_Eo),e(z_,Lj),e(Lj,uEo),e(z_,bEo),e(y,vEo),e(y,Q_),e(Q_,hce),e(hce,FEo),e(Q_,TEo),e(Q_,yj),e(yj,MEo),e(Q_,EEo),e(y,CEo),e(y,W_),e(W_,pce),e(pce,wEo),e(W_,AEo),e(W_,xj),e(xj,LEo),e(W_,yEo),e(y,xEo),e(y,H_),e(H_,_ce),e(_ce,$Eo),e(H_,kEo),e(H_,$j),e($j,SEo),e(H_,REo),e(y,PEo),e(y,U_),e(U_,uce),e(uce,BEo),e(U_,IEo),e(U_,kj),e(kj,NEo),e(U_,qEo),e(y,jEo),e(y,J_),e(J_,bce),e(bce,DEo),e(J_,GEo),e(J_,Sj),e(Sj,OEo),e(J_,VEo),e(y,XEo),e(y,Y_),e(Y_,vce),e(vce,zEo),e(Y_,QEo),e(Y_,Rj),e(Rj,WEo),e(Y_,HEo),e(y,UEo),e(y,K_),e(K_,Fce),e(Fce,JEo),e(K_,YEo),e(K_,Pj),e(Pj,KEo),e(K_,ZEo),e(y,e4o),e(y,Z_),e(Z_,Tce),e(Tce,o4o),e(Z_,r4o),e(Z_,Bj),e(Bj,t4o),e(Z_,a4o),e(y,n4o),e(y,eu),e(eu,Mce),e(Mce,s4o),e(eu,l4o),e(eu,Ij),e(Ij,i4o),e(eu,d4o),e(y,c4o),e(y,ou),e(ou,Ece),e(Ece,f4o),e(ou,m4o),e(ou,Nj),e(Nj,g4o),e(ou,h4o),e(y,p4o),e(y,ru),e(ru,Cce),e(Cce,_4o),e(ru,u4o),e(ru,qj),e(qj,b4o),e(ru,v4o),e(y,F4o),e(y,tu),e(tu,wce),e(wce,T4o),e(tu,M4o),e(tu,jj),e(jj,E4o),e(tu,C4o),e(y,w4o),e(y,au),e(au,Ace),e(Ace,A4o),e(au,L4o),e(au,Dj),e(Dj,y4o),e(au,x4o),e(y,$4o),e(y,nu),e(nu,Lce),e(Lce,k4o),e(nu,S4o),e(nu,Gj),e(Gj,R4o),e(nu,P4o),e(y,B4o),e(y,su),e(su,yce),e(yce,I4o),e(su,N4o),e(su,Oj),e(Oj,q4o),e(su,j4o),e(y,D4o),e(y,lu),e(lu,xce),e(xce,G4o),e(lu,O4o),e(lu,Vj),e(Vj,V4o),e(lu,X4o),e(y,z4o),e(y,iu),e(iu,$ce),e($ce,Q4o),e(iu,W4o),e(iu,Xj),e(Xj,H4o),e(iu,U4o),e(y,J4o),e(y,du),e(du,kce),e(kce,Y4o),e(du,K4o),e(du,zj),e(zj,Z4o),e(du,eCo),e(y,oCo),e(y,cu),e(cu,Sce),e(Sce,rCo),e(cu,tCo),e(cu,Qj),e(Qj,aCo),e(cu,nCo),e(y,sCo),e(y,fu),e(fu,Rce),e(Rce,lCo),e(fu,iCo),e(fu,Wj),e(Wj,dCo),e(fu,cCo),e(y,fCo),e(y,mu),e(mu,Pce),e(Pce,mCo),e(mu,gCo),e(mu,Hj),e(Hj,hCo),e(mu,pCo),e(y,_Co),e(y,gu),e(gu,Bce),e(Bce,uCo),e(gu,bCo),e(gu,Uj),e(Uj,vCo),e(gu,FCo),e(y,TCo),e(y,hu),e(hu,Ice),e(Ice,MCo),e(hu,ECo),e(hu,Jj),e(Jj,CCo),e(hu,wCo),e(y,ACo),e(y,pu),e(pu,Nce),e(Nce,LCo),e(pu,yCo),e(pu,Yj),e(Yj,xCo),e(pu,$Co),e(y,kCo),e(y,_u),e(_u,qce),e(qce,SCo),e(_u,RCo),e(_u,Kj),e(Kj,PCo),e(_u,BCo),e(y,ICo),e(y,uu),e(uu,jce),e(jce,NCo),e(uu,qCo),e(uu,Zj),e(Zj,jCo),e(uu,DCo),e(y,GCo),e(y,bu),e(bu,Dce),e(Dce,OCo),e(bu,VCo),e(bu,eD),e(eD,XCo),e(bu,zCo),e(y,QCo),e(y,vu),e(vu,Gce),e(Gce,WCo),e(vu,HCo),e(vu,oD),e(oD,UCo),e(vu,JCo),e(y,YCo),e(y,Fu),e(Fu,Oce),e(Oce,KCo),e(Fu,ZCo),e(Fu,rD),e(rD,e5o),e(Fu,o5o),e(y,r5o),e(y,Tu),e(Tu,Vce),e(Vce,t5o),e(Tu,a5o),e(Tu,tD),e(tD,n5o),e(Tu,s5o),e(y,l5o),e(y,Mu),e(Mu,Xce),e(Xce,i5o),e(Mu,d5o),e(Mu,aD),e(aD,c5o),e(Mu,f5o),e(y,m5o),e(y,Eu),e(Eu,zce),e(zce,g5o),e(Eu,h5o),e(Eu,nD),e(nD,p5o),e(Eu,_5o),e(y,u5o),e(y,Cu),e(Cu,Qce),e(Qce,b5o),e(Cu,v5o),e(Cu,sD),e(sD,F5o),e(Cu,T5o),e(y,M5o),e(y,wu),e(wu,Wce),e(Wce,E5o),e(wu,C5o),e(wu,lD),e(lD,w5o),e(wu,A5o),e(y,L5o),e(y,Au),e(Au,Hce),e(Hce,y5o),e(Au,x5o),e(Au,iD),e(iD,$5o),e(Au,k5o),e(y,S5o),e(y,Lu),e(Lu,Uce),e(Uce,R5o),e(Lu,P5o),e(Lu,dD),e(dD,B5o),e(Lu,I5o),e(y,N5o),e(y,yu),e(yu,Jce),e(Jce,q5o),e(yu,j5o),e(yu,cD),e(cD,D5o),e(yu,G5o),e(y,O5o),e(y,xu),e(xu,Yce),e(Yce,V5o),e(xu,X5o),e(xu,fD),e(fD,z5o),e(xu,Q5o),e(y,W5o),e(y,$u),e($u,Kce),e(Kce,H5o),e($u,U5o),e($u,mD),e(mD,J5o),e($u,Y5o),e(Je,K5o),e(Je,ku),e(ku,Z5o),e(ku,Zce),e(Zce,e3o),e(ku,o3o),e(ku,efe),e(efe,r3o),e(Je,t3o),M(Su,Je,null),b(f,uOe,u),b(f,ji,u),e(ji,Ru),e(Ru,ofe),M(cy,ofe,null),e(ji,a3o),e(ji,rfe),e(rfe,n3o),b(f,bOe,u),b(f,$o,u),M(fy,$o,null),e($o,s3o),e($o,Di),e(Di,l3o),e(Di,gD),e(gD,i3o),e(Di,d3o),e(Di,hD),e(hD,c3o),e(Di,f3o),e($o,m3o),e($o,my),e(my,g3o),e(my,tfe),e(tfe,h3o),e(my,p3o),e($o,_3o),e($o,st),M(gy,st,null),e(st,u3o),e(st,afe),e(afe,b3o),e(st,v3o),e(st,Gi),e(Gi,F3o),e(Gi,nfe),e(nfe,T3o),e(Gi,M3o),e(Gi,pD),e(pD,E3o),e(Gi,C3o),e(st,w3o),M(Pu,st,null),e($o,A3o),e($o,Ye),M(hy,Ye,null),e(Ye,L3o),e(Ye,sfe),e(sfe,y3o),e(Ye,x3o),e(Ye,Pa),e(Pa,$3o),e(Pa,lfe),e(lfe,k3o),e(Pa,S3o),e(Pa,ife),e(ife,R3o),e(Pa,P3o),e(Pa,dfe),e(dfe,B3o),e(Pa,I3o),e(Ye,N3o),e(Ye,G),e(G,Bu),e(Bu,cfe),e(cfe,q3o),e(Bu,j3o),e(Bu,_D),e(_D,D3o),e(Bu,G3o),e(G,O3o),e(G,Iu),e(Iu,ffe),e(ffe,V3o),e(Iu,X3o),e(Iu,uD),e(uD,z3o),e(Iu,Q3o),e(G,W3o),e(G,Nu),e(Nu,mfe),e(mfe,H3o),e(Nu,U3o),e(Nu,bD),e(bD,J3o),e(Nu,Y3o),e(G,K3o),e(G,qu),e(qu,gfe),e(gfe,Z3o),e(qu,ewo),e(qu,vD),e(vD,owo),e(qu,rwo),e(G,two),e(G,ju),e(ju,hfe),e(hfe,awo),e(ju,nwo),e(ju,FD),e(FD,swo),e(ju,lwo),e(G,iwo),e(G,Du),e(Du,pfe),e(pfe,dwo),e(Du,cwo),e(Du,TD),e(TD,fwo),e(Du,mwo),e(G,gwo),e(G,Gu),e(Gu,_fe),e(_fe,hwo),e(Gu,pwo),e(Gu,MD),e(MD,_wo),e(Gu,uwo),e(G,bwo),e(G,Ou),e(Ou,ufe),e(ufe,vwo),e(Ou,Fwo),e(Ou,ED),e(ED,Two),e(Ou,Mwo),e(G,Ewo),e(G,Vu),e(Vu,bfe),e(bfe,Cwo),e(Vu,wwo),e(Vu,CD),e(CD,Awo),e(Vu,Lwo),e(G,ywo),e(G,Xu),e(Xu,vfe),e(vfe,xwo),e(Xu,$wo),e(Xu,wD),e(wD,kwo),e(Xu,Swo),e(G,Rwo),e(G,zu),e(zu,Ffe),e(Ffe,Pwo),e(zu,Bwo),e(zu,AD),e(AD,Iwo),e(zu,Nwo),e(G,qwo),e(G,Qu),e(Qu,Tfe),e(Tfe,jwo),e(Qu,Dwo),e(Qu,LD),e(LD,Gwo),e(Qu,Owo),e(G,Vwo),e(G,Wu),e(Wu,Mfe),e(Mfe,Xwo),e(Wu,zwo),e(Wu,yD),e(yD,Qwo),e(Wu,Wwo),e(G,Hwo),e(G,Hu),e(Hu,Efe),e(Efe,Uwo),e(Hu,Jwo),e(Hu,xD),e(xD,Ywo),e(Hu,Kwo),e(G,Zwo),e(G,Uu),e(Uu,Cfe),e(Cfe,eAo),e(Uu,oAo),e(Uu,$D),e($D,rAo),e(Uu,tAo),e(G,aAo),e(G,Ju),e(Ju,wfe),e(wfe,nAo),e(Ju,sAo),e(Ju,kD),e(kD,lAo),e(Ju,iAo),e(G,dAo),e(G,Yu),e(Yu,Afe),e(Afe,cAo),e(Yu,fAo),e(Yu,SD),e(SD,mAo),e(Yu,gAo),e(G,hAo),e(G,Ku),e(Ku,Lfe),e(Lfe,pAo),e(Ku,_Ao),e(Ku,RD),e(RD,uAo),e(Ku,bAo),e(G,vAo),e(G,Zu),e(Zu,yfe),e(yfe,FAo),e(Zu,TAo),e(Zu,PD),e(PD,MAo),e(Zu,EAo),e(G,CAo),e(G,e1),e(e1,xfe),e(xfe,wAo),e(e1,AAo),e(e1,BD),e(BD,LAo),e(e1,yAo),e(G,xAo),e(G,o1),e(o1,$fe),e($fe,$Ao),e(o1,kAo),e(o1,ID),e(ID,SAo),e(o1,RAo),e(G,PAo),e(G,r1),e(r1,kfe),e(kfe,BAo),e(r1,IAo),e(r1,ND),e(ND,NAo),e(r1,qAo),e(G,jAo),e(G,t1),e(t1,Sfe),e(Sfe,DAo),e(t1,GAo),e(t1,qD),e(qD,OAo),e(t1,VAo),e(G,XAo),e(G,a1),e(a1,Rfe),e(Rfe,zAo),e(a1,QAo),e(a1,jD),e(jD,WAo),e(a1,HAo),e(G,UAo),e(G,n1),e(n1,Pfe),e(Pfe,JAo),e(n1,YAo),e(n1,DD),e(DD,KAo),e(n1,ZAo),e(G,e6o),e(G,s1),e(s1,Bfe),e(Bfe,o6o),e(s1,r6o),e(s1,GD),e(GD,t6o),e(s1,a6o),e(G,n6o),e(G,l1),e(l1,Ife),e(Ife,s6o),e(l1,l6o),e(l1,OD),e(OD,i6o),e(l1,d6o),e(G,c6o),e(G,i1),e(i1,Nfe),e(Nfe,f6o),e(i1,m6o),e(i1,VD),e(VD,g6o),e(i1,h6o),e(G,p6o),e(G,d1),e(d1,qfe),e(qfe,_6o),e(d1,u6o),e(d1,XD),e(XD,b6o),e(d1,v6o),e(G,F6o),e(G,c1),e(c1,jfe),e(jfe,T6o),e(c1,M6o),e(c1,zD),e(zD,E6o),e(c1,C6o),e(G,w6o),e(G,f1),e(f1,Dfe),e(Dfe,A6o),e(f1,L6o),e(f1,QD),e(QD,y6o),e(f1,x6o),e(G,$6o),e(G,m1),e(m1,Gfe),e(Gfe,k6o),e(m1,S6o),e(m1,WD),e(WD,R6o),e(m1,P6o),e(G,B6o),e(G,g1),e(g1,Ofe),e(Ofe,I6o),e(g1,N6o),e(g1,HD),e(HD,q6o),e(g1,j6o),e(G,D6o),e(G,h1),e(h1,Vfe),e(Vfe,G6o),e(h1,O6o),e(h1,UD),e(UD,V6o),e(h1,X6o),e(G,z6o),e(G,p1),e(p1,Xfe),e(Xfe,Q6o),e(p1,W6o),e(p1,JD),e(JD,H6o),e(p1,U6o),e(G,J6o),e(G,_1),e(_1,zfe),e(zfe,Y6o),e(_1,K6o),e(_1,YD),e(YD,Z6o),e(_1,eLo),e(G,oLo),e(G,u1),e(u1,Qfe),e(Qfe,rLo),e(u1,tLo),e(u1,KD),e(KD,aLo),e(u1,nLo),e(G,sLo),e(G,b1),e(b1,Wfe),e(Wfe,lLo),e(b1,iLo),e(b1,ZD),e(ZD,dLo),e(b1,cLo),e(G,fLo),e(G,v1),e(v1,Hfe),e(Hfe,mLo),e(v1,gLo),e(v1,eG),e(eG,hLo),e(v1,pLo),e(G,_Lo),e(G,F1),e(F1,Ufe),e(Ufe,uLo),e(F1,bLo),e(F1,oG),e(oG,vLo),e(F1,FLo),e(G,TLo),e(G,T1),e(T1,Jfe),e(Jfe,MLo),e(T1,ELo),e(T1,rG),e(rG,CLo),e(T1,wLo),e(G,ALo),e(G,M1),e(M1,Yfe),e(Yfe,LLo),e(M1,yLo),e(M1,tG),e(tG,xLo),e(M1,$Lo),e(G,kLo),e(G,E1),e(E1,Kfe),e(Kfe,SLo),e(E1,RLo),e(E1,aG),e(aG,PLo),e(E1,BLo),e(G,ILo),e(G,C1),e(C1,Zfe),e(Zfe,NLo),e(C1,qLo),e(C1,nG),e(nG,jLo),e(C1,DLo),e(Ye,GLo),e(Ye,w1),e(w1,OLo),e(w1,eme),e(eme,VLo),e(w1,XLo),e(w1,ome),e(ome,zLo),e(Ye,QLo),M(A1,Ye,null),b(f,vOe,u),b(f,Oi,u),e(Oi,L1),e(L1,rme),M(py,rme,null),e(Oi,WLo),e(Oi,tme),e(tme,HLo),b(f,FOe,u),b(f,ko,u),M(_y,ko,null),e(ko,ULo),e(ko,Vi),e(Vi,JLo),e(Vi,sG),e(sG,YLo),e(Vi,KLo),e(Vi,lG),e(lG,ZLo),e(Vi,eyo),e(ko,oyo),e(ko,uy),e(uy,ryo),e(uy,ame),e(ame,tyo),e(uy,ayo),e(ko,nyo),e(ko,lt),M(by,lt,null),e(lt,syo),e(lt,nme),e(nme,lyo),e(lt,iyo),e(lt,Xi),e(Xi,dyo),e(Xi,sme),e(sme,cyo),e(Xi,fyo),e(Xi,iG),e(iG,myo),e(Xi,gyo),e(lt,hyo),M(y1,lt,null),e(ko,pyo),e(ko,Ke),M(vy,Ke,null),e(Ke,_yo),e(Ke,lme),e(lme,uyo),e(Ke,byo),e(Ke,Ba),e(Ba,vyo),e(Ba,ime),e(ime,Fyo),e(Ba,Tyo),e(Ba,dme),e(dme,Myo),e(Ba,Eyo),e(Ba,cme),e(cme,Cyo),e(Ba,wyo),e(Ke,Ayo),e(Ke,z),e(z,x1),e(x1,fme),e(fme,Lyo),e(x1,yyo),e(x1,dG),e(dG,xyo),e(x1,$yo),e(z,kyo),e(z,$1),e($1,mme),e(mme,Syo),e($1,Ryo),e($1,cG),e(cG,Pyo),e($1,Byo),e(z,Iyo),e(z,k1),e(k1,gme),e(gme,Nyo),e(k1,qyo),e(k1,fG),e(fG,jyo),e(k1,Dyo),e(z,Gyo),e(z,S1),e(S1,hme),e(hme,Oyo),e(S1,Vyo),e(S1,mG),e(mG,Xyo),e(S1,zyo),e(z,Qyo),e(z,R1),e(R1,pme),e(pme,Wyo),e(R1,Hyo),e(R1,gG),e(gG,Uyo),e(R1,Jyo),e(z,Yyo),e(z,P1),e(P1,_me),e(_me,Kyo),e(P1,Zyo),e(P1,hG),e(hG,e8o),e(P1,o8o),e(z,r8o),e(z,B1),e(B1,ume),e(ume,t8o),e(B1,a8o),e(B1,pG),e(pG,n8o),e(B1,s8o),e(z,l8o),e(z,I1),e(I1,bme),e(bme,i8o),e(I1,d8o),e(I1,_G),e(_G,c8o),e(I1,f8o),e(z,m8o),e(z,N1),e(N1,vme),e(vme,g8o),e(N1,h8o),e(N1,uG),e(uG,p8o),e(N1,_8o),e(z,u8o),e(z,q1),e(q1,Fme),e(Fme,b8o),e(q1,v8o),e(q1,bG),e(bG,F8o),e(q1,T8o),e(z,M8o),e(z,j1),e(j1,Tme),e(Tme,E8o),e(j1,C8o),e(j1,vG),e(vG,w8o),e(j1,A8o),e(z,L8o),e(z,D1),e(D1,Mme),e(Mme,y8o),e(D1,x8o),e(D1,FG),e(FG,$8o),e(D1,k8o),e(z,S8o),e(z,G1),e(G1,Eme),e(Eme,R8o),e(G1,P8o),e(G1,TG),e(TG,B8o),e(G1,I8o),e(z,N8o),e(z,O1),e(O1,Cme),e(Cme,q8o),e(O1,j8o),e(O1,MG),e(MG,D8o),e(O1,G8o),e(z,O8o),e(z,V1),e(V1,wme),e(wme,V8o),e(V1,X8o),e(V1,EG),e(EG,z8o),e(V1,Q8o),e(z,W8o),e(z,X1),e(X1,Ame),e(Ame,H8o),e(X1,U8o),e(X1,CG),e(CG,J8o),e(X1,Y8o),e(z,K8o),e(z,z1),e(z1,Lme),e(Lme,Z8o),e(z1,e9o),e(z1,wG),e(wG,o9o),e(z1,r9o),e(z,t9o),e(z,Q1),e(Q1,yme),e(yme,a9o),e(Q1,n9o),e(Q1,AG),e(AG,s9o),e(Q1,l9o),e(z,i9o),e(z,W1),e(W1,xme),e(xme,d9o),e(W1,c9o),e(W1,LG),e(LG,f9o),e(W1,m9o),e(z,g9o),e(z,H1),e(H1,$me),e($me,h9o),e(H1,p9o),e(H1,yG),e(yG,_9o),e(H1,u9o),e(z,b9o),e(z,U1),e(U1,kme),e(kme,v9o),e(U1,F9o),e(U1,xG),e(xG,T9o),e(U1,M9o),e(z,E9o),e(z,J1),e(J1,Sme),e(Sme,C9o),e(J1,w9o),e(J1,$G),e($G,A9o),e(J1,L9o),e(z,y9o),e(z,Y1),e(Y1,Rme),e(Rme,x9o),e(Y1,$9o),e(Y1,kG),e(kG,k9o),e(Y1,S9o),e(z,R9o),e(z,K1),e(K1,Pme),e(Pme,P9o),e(K1,B9o),e(K1,SG),e(SG,I9o),e(K1,N9o),e(z,q9o),e(z,Z1),e(Z1,Bme),e(Bme,j9o),e(Z1,D9o),e(Z1,RG),e(RG,G9o),e(Z1,O9o),e(z,V9o),e(z,e7),e(e7,Ime),e(Ime,X9o),e(e7,z9o),e(e7,PG),e(PG,Q9o),e(e7,W9o),e(z,H9o),e(z,o7),e(o7,Nme),e(Nme,U9o),e(o7,J9o),e(o7,BG),e(BG,Y9o),e(o7,K9o),e(z,Z9o),e(z,r7),e(r7,qme),e(qme,exo),e(r7,oxo),e(r7,IG),e(IG,rxo),e(r7,txo),e(z,axo),e(z,t7),e(t7,jme),e(jme,nxo),e(t7,sxo),e(t7,NG),e(NG,lxo),e(t7,ixo),e(z,dxo),e(z,a7),e(a7,Dme),e(Dme,cxo),e(a7,fxo),e(a7,qG),e(qG,mxo),e(a7,gxo),e(z,hxo),e(z,n7),e(n7,Gme),e(Gme,pxo),e(n7,_xo),e(n7,jG),e(jG,uxo),e(n7,bxo),e(z,vxo),e(z,s7),e(s7,Ome),e(Ome,Fxo),e(s7,Txo),e(s7,DG),e(DG,Mxo),e(s7,Exo),e(z,Cxo),e(z,l7),e(l7,Vme),e(Vme,wxo),e(l7,Axo),e(l7,GG),e(GG,Lxo),e(l7,yxo),e(z,xxo),e(z,i7),e(i7,Xme),e(Xme,$xo),e(i7,kxo),e(i7,OG),e(OG,Sxo),e(i7,Rxo),e(z,Pxo),e(z,d7),e(d7,zme),e(zme,Bxo),e(d7,Ixo),e(d7,VG),e(VG,Nxo),e(d7,qxo),e(z,jxo),e(z,c7),e(c7,Qme),e(Qme,Dxo),e(c7,Gxo),e(c7,XG),e(XG,Oxo),e(c7,Vxo),e(z,Xxo),e(z,f7),e(f7,Wme),e(Wme,zxo),e(f7,Qxo),e(f7,zG),e(zG,Wxo),e(f7,Hxo),e(z,Uxo),e(z,m7),e(m7,Hme),e(Hme,Jxo),e(m7,Yxo),e(m7,QG),e(QG,Kxo),e(m7,Zxo),e(z,e$o),e(z,g7),e(g7,Ume),e(Ume,o$o),e(g7,r$o),e(g7,WG),e(WG,t$o),e(g7,a$o),e(Ke,n$o),e(Ke,h7),e(h7,s$o),e(h7,Jme),e(Jme,l$o),e(h7,i$o),e(h7,Yme),e(Yme,d$o),e(Ke,c$o),M(p7,Ke,null),b(f,TOe,u),b(f,zi,u),e(zi,_7),e(_7,Kme),M(Fy,Kme,null),e(zi,f$o),e(zi,Zme),e(Zme,m$o),b(f,MOe,u),b(f,So,u),M(Ty,So,null),e(So,g$o),e(So,Qi),e(Qi,h$o),e(Qi,HG),e(HG,p$o),e(Qi,_$o),e(Qi,UG),e(UG,u$o),e(Qi,b$o),e(So,v$o),e(So,My),e(My,F$o),e(My,ege),e(ege,T$o),e(My,M$o),e(So,E$o),e(So,it),M(Ey,it,null),e(it,C$o),e(it,oge),e(oge,w$o),e(it,A$o),e(it,Wi),e(Wi,L$o),e(Wi,rge),e(rge,y$o),e(Wi,x$o),e(Wi,JG),e(JG,$$o),e(Wi,k$o),e(it,S$o),M(u7,it,null),e(So,R$o),e(So,Ze),M(Cy,Ze,null),e(Ze,P$o),e(Ze,tge),e(tge,B$o),e(Ze,I$o),e(Ze,Ia),e(Ia,N$o),e(Ia,age),e(age,q$o),e(Ia,j$o),e(Ia,nge),e(nge,D$o),e(Ia,G$o),e(Ia,sge),e(sge,O$o),e(Ia,V$o),e(Ze,X$o),e(Ze,W),e(W,b7),e(b7,lge),e(lge,z$o),e(b7,Q$o),e(b7,YG),e(YG,W$o),e(b7,H$o),e(W,U$o),e(W,v7),e(v7,ige),e(ige,J$o),e(v7,Y$o),e(v7,KG),e(KG,K$o),e(v7,Z$o),e(W,eko),e(W,F7),e(F7,dge),e(dge,oko),e(F7,rko),e(F7,ZG),e(ZG,tko),e(F7,ako),e(W,nko),e(W,T7),e(T7,cge),e(cge,sko),e(T7,lko),e(T7,eO),e(eO,iko),e(T7,dko),e(W,cko),e(W,M7),e(M7,fge),e(fge,fko),e(M7,mko),e(M7,oO),e(oO,gko),e(M7,hko),e(W,pko),e(W,E7),e(E7,mge),e(mge,_ko),e(E7,uko),e(E7,rO),e(rO,bko),e(E7,vko),e(W,Fko),e(W,C7),e(C7,gge),e(gge,Tko),e(C7,Mko),e(C7,tO),e(tO,Eko),e(C7,Cko),e(W,wko),e(W,w7),e(w7,hge),e(hge,Ako),e(w7,Lko),e(w7,aO),e(aO,yko),e(w7,xko),e(W,$ko),e(W,A7),e(A7,pge),e(pge,kko),e(A7,Sko),e(A7,nO),e(nO,Rko),e(A7,Pko),e(W,Bko),e(W,L7),e(L7,_ge),e(_ge,Iko),e(L7,Nko),e(L7,sO),e(sO,qko),e(L7,jko),e(W,Dko),e(W,y7),e(y7,uge),e(uge,Gko),e(y7,Oko),e(y7,lO),e(lO,Vko),e(y7,Xko),e(W,zko),e(W,x7),e(x7,bge),e(bge,Qko),e(x7,Wko),e(x7,iO),e(iO,Hko),e(x7,Uko),e(W,Jko),e(W,$7),e($7,vge),e(vge,Yko),e($7,Kko),e($7,dO),e(dO,Zko),e($7,eSo),e(W,oSo),e(W,k7),e(k7,Fge),e(Fge,rSo),e(k7,tSo),e(k7,cO),e(cO,aSo),e(k7,nSo),e(W,sSo),e(W,S7),e(S7,Tge),e(Tge,lSo),e(S7,iSo),e(S7,fO),e(fO,dSo),e(S7,cSo),e(W,fSo),e(W,R7),e(R7,Mge),e(Mge,mSo),e(R7,gSo),e(R7,mO),e(mO,hSo),e(R7,pSo),e(W,_So),e(W,P7),e(P7,Ege),e(Ege,uSo),e(P7,bSo),e(P7,gO),e(gO,vSo),e(P7,FSo),e(W,TSo),e(W,B7),e(B7,Cge),e(Cge,MSo),e(B7,ESo),e(B7,hO),e(hO,CSo),e(B7,wSo),e(W,ASo),e(W,I7),e(I7,wge),e(wge,LSo),e(I7,ySo),e(I7,pO),e(pO,xSo),e(I7,$So),e(W,kSo),e(W,N7),e(N7,Age),e(Age,SSo),e(N7,RSo),e(N7,_O),e(_O,PSo),e(N7,BSo),e(W,ISo),e(W,q7),e(q7,Lge),e(Lge,NSo),e(q7,qSo),e(q7,uO),e(uO,jSo),e(q7,DSo),e(W,GSo),e(W,j7),e(j7,yge),e(yge,OSo),e(j7,VSo),e(j7,bO),e(bO,XSo),e(j7,zSo),e(W,QSo),e(W,D7),e(D7,xge),e(xge,WSo),e(D7,HSo),e(D7,vO),e(vO,USo),e(D7,JSo),e(W,YSo),e(W,G7),e(G7,$ge),e($ge,KSo),e(G7,ZSo),e(G7,FO),e(FO,eRo),e(G7,oRo),e(W,rRo),e(W,O7),e(O7,kge),e(kge,tRo),e(O7,aRo),e(O7,TO),e(TO,nRo),e(O7,sRo),e(W,lRo),e(W,V7),e(V7,Sge),e(Sge,iRo),e(V7,dRo),e(V7,MO),e(MO,cRo),e(V7,fRo),e(W,mRo),e(W,X7),e(X7,Rge),e(Rge,gRo),e(X7,hRo),e(X7,EO),e(EO,pRo),e(X7,_Ro),e(W,uRo),e(W,z7),e(z7,Pge),e(Pge,bRo),e(z7,vRo),e(z7,CO),e(CO,FRo),e(z7,TRo),e(W,MRo),e(W,Q7),e(Q7,Bge),e(Bge,ERo),e(Q7,CRo),e(Q7,wO),e(wO,wRo),e(Q7,ARo),e(W,LRo),e(W,W7),e(W7,Ige),e(Ige,yRo),e(W7,xRo),e(W7,AO),e(AO,$Ro),e(W7,kRo),e(W,SRo),e(W,H7),e(H7,Nge),e(Nge,RRo),e(H7,PRo),e(H7,LO),e(LO,BRo),e(H7,IRo),e(W,NRo),e(W,U7),e(U7,qge),e(qge,qRo),e(U7,jRo),e(U7,yO),e(yO,DRo),e(U7,GRo),e(W,ORo),e(W,J7),e(J7,jge),e(jge,VRo),e(J7,XRo),e(J7,Dge),e(Dge,zRo),e(J7,QRo),e(W,WRo),e(W,Y7),e(Y7,Gge),e(Gge,HRo),e(Y7,URo),e(Y7,xO),e(xO,JRo),e(Y7,YRo),e(W,KRo),e(W,K7),e(K7,Oge),e(Oge,ZRo),e(K7,ePo),e(K7,$O),e($O,oPo),e(K7,rPo),e(W,tPo),e(W,Z7),e(Z7,Vge),e(Vge,aPo),e(Z7,nPo),e(Z7,kO),e(kO,sPo),e(Z7,lPo),e(W,iPo),e(W,e2),e(e2,Xge),e(Xge,dPo),e(e2,cPo),e(e2,SO),e(SO,fPo),e(e2,mPo),e(Ze,gPo),e(Ze,o2),e(o2,hPo),e(o2,zge),e(zge,pPo),e(o2,_Po),e(o2,Qge),e(Qge,uPo),e(Ze,bPo),M(r2,Ze,null),b(f,EOe,u),b(f,Hi,u),e(Hi,t2),e(t2,Wge),M(wy,Wge,null),e(Hi,vPo),e(Hi,Hge),e(Hge,FPo),b(f,COe,u),b(f,Ro,u),M(Ay,Ro,null),e(Ro,TPo),e(Ro,Ui),e(Ui,MPo),e(Ui,RO),e(RO,EPo),e(Ui,CPo),e(Ui,PO),e(PO,wPo),e(Ui,APo),e(Ro,LPo),e(Ro,Ly),e(Ly,yPo),e(Ly,Uge),e(Uge,xPo),e(Ly,$Po),e(Ro,kPo),e(Ro,dt),M(yy,dt,null),e(dt,SPo),e(dt,Jge),e(Jge,RPo),e(dt,PPo),e(dt,Ji),e(Ji,BPo),e(Ji,Yge),e(Yge,IPo),e(Ji,NPo),e(Ji,BO),e(BO,qPo),e(Ji,jPo),e(dt,DPo),M(a2,dt,null),e(Ro,GPo),e(Ro,eo),M(xy,eo,null),e(eo,OPo),e(eo,Kge),e(Kge,VPo),e(eo,XPo),e(eo,Na),e(Na,zPo),e(Na,Zge),e(Zge,QPo),e(Na,WPo),e(Na,ehe),e(ehe,HPo),e(Na,UPo),e(Na,ohe),e(ohe,JPo),e(Na,YPo),e(eo,KPo),e(eo,pe),e(pe,n2),e(n2,rhe),e(rhe,ZPo),e(n2,eBo),e(n2,IO),e(IO,oBo),e(n2,rBo),e(pe,tBo),e(pe,s2),e(s2,the),e(the,aBo),e(s2,nBo),e(s2,NO),e(NO,sBo),e(s2,lBo),e(pe,iBo),e(pe,l2),e(l2,ahe),e(ahe,dBo),e(l2,cBo),e(l2,qO),e(qO,fBo),e(l2,mBo),e(pe,gBo),e(pe,i2),e(i2,nhe),e(nhe,hBo),e(i2,pBo),e(i2,jO),e(jO,_Bo),e(i2,uBo),e(pe,bBo),e(pe,d2),e(d2,she),e(she,vBo),e(d2,FBo),e(d2,DO),e(DO,TBo),e(d2,MBo),e(pe,EBo),e(pe,c2),e(c2,lhe),e(lhe,CBo),e(c2,wBo),e(c2,GO),e(GO,ABo),e(c2,LBo),e(pe,yBo),e(pe,f2),e(f2,ihe),e(ihe,xBo),e(f2,$Bo),e(f2,OO),e(OO,kBo),e(f2,SBo),e(pe,RBo),e(pe,m2),e(m2,dhe),e(dhe,PBo),e(m2,BBo),e(m2,VO),e(VO,IBo),e(m2,NBo),e(pe,qBo),e(pe,g2),e(g2,che),e(che,jBo),e(g2,DBo),e(g2,XO),e(XO,GBo),e(g2,OBo),e(pe,VBo),e(pe,h2),e(h2,fhe),e(fhe,XBo),e(h2,zBo),e(h2,zO),e(zO,QBo),e(h2,WBo),e(pe,HBo),e(pe,p2),e(p2,mhe),e(mhe,UBo),e(p2,JBo),e(p2,QO),e(QO,YBo),e(p2,KBo),e(pe,ZBo),e(pe,_2),e(_2,ghe),e(ghe,eIo),e(_2,oIo),e(_2,WO),e(WO,rIo),e(_2,tIo),e(pe,aIo),e(pe,u2),e(u2,hhe),e(hhe,nIo),e(u2,sIo),e(u2,HO),e(HO,lIo),e(u2,iIo),e(pe,dIo),e(pe,b2),e(b2,phe),e(phe,cIo),e(b2,fIo),e(b2,UO),e(UO,mIo),e(b2,gIo),e(pe,hIo),e(pe,v2),e(v2,_he),e(_he,pIo),e(v2,_Io),e(v2,JO),e(JO,uIo),e(v2,bIo),e(pe,vIo),e(pe,F2),e(F2,uhe),e(uhe,FIo),e(F2,TIo),e(F2,YO),e(YO,MIo),e(F2,EIo),e(pe,CIo),e(pe,T2),e(T2,bhe),e(bhe,wIo),e(T2,AIo),e(T2,KO),e(KO,LIo),e(T2,yIo),e(eo,xIo),e(eo,M2),e(M2,$Io),e(M2,vhe),e(vhe,kIo),e(M2,SIo),e(M2,Fhe),e(Fhe,RIo),e(eo,PIo),M(E2,eo,null),b(f,wOe,u),b(f,Yi,u),e(Yi,C2),e(C2,The),M($y,The,null),e(Yi,BIo),e(Yi,Mhe),e(Mhe,IIo),b(f,AOe,u),b(f,Po,u),M(ky,Po,null),e(Po,NIo),e(Po,Ki),e(Ki,qIo),e(Ki,ZO),e(ZO,jIo),e(Ki,DIo),e(Ki,eV),e(eV,GIo),e(Ki,OIo),e(Po,VIo),e(Po,Sy),e(Sy,XIo),e(Sy,Ehe),e(Ehe,zIo),e(Sy,QIo),e(Po,WIo),e(Po,ct),M(Ry,ct,null),e(ct,HIo),e(ct,Che),e(Che,UIo),e(ct,JIo),e(ct,Zi),e(Zi,YIo),e(Zi,whe),e(whe,KIo),e(Zi,ZIo),e(Zi,oV),e(oV,eNo),e(Zi,oNo),e(ct,rNo),M(w2,ct,null),e(Po,tNo),e(Po,oo),M(Py,oo,null),e(oo,aNo),e(oo,Ahe),e(Ahe,nNo),e(oo,sNo),e(oo,qa),e(qa,lNo),e(qa,Lhe),e(Lhe,iNo),e(qa,dNo),e(qa,yhe),e(yhe,cNo),e(qa,fNo),e(qa,xhe),e(xhe,mNo),e(qa,gNo),e(oo,hNo),e(oo,N),e(N,A2),e(A2,$he),e($he,pNo),e(A2,_No),e(A2,rV),e(rV,uNo),e(A2,bNo),e(N,vNo),e(N,L2),e(L2,khe),e(khe,FNo),e(L2,TNo),e(L2,tV),e(tV,MNo),e(L2,ENo),e(N,CNo),e(N,y2),e(y2,She),e(She,wNo),e(y2,ANo),e(y2,aV),e(aV,LNo),e(y2,yNo),e(N,xNo),e(N,x2),e(x2,Rhe),e(Rhe,$No),e(x2,kNo),e(x2,nV),e(nV,SNo),e(x2,RNo),e(N,PNo),e(N,$2),e($2,Phe),e(Phe,BNo),e($2,INo),e($2,sV),e(sV,NNo),e($2,qNo),e(N,jNo),e(N,k2),e(k2,Bhe),e(Bhe,DNo),e(k2,GNo),e(k2,lV),e(lV,ONo),e(k2,VNo),e(N,XNo),e(N,S2),e(S2,Ihe),e(Ihe,zNo),e(S2,QNo),e(S2,iV),e(iV,WNo),e(S2,HNo),e(N,UNo),e(N,R2),e(R2,Nhe),e(Nhe,JNo),e(R2,YNo),e(R2,dV),e(dV,KNo),e(R2,ZNo),e(N,eqo),e(N,P2),e(P2,qhe),e(qhe,oqo),e(P2,rqo),e(P2,cV),e(cV,tqo),e(P2,aqo),e(N,nqo),e(N,B2),e(B2,jhe),e(jhe,sqo),e(B2,lqo),e(B2,fV),e(fV,iqo),e(B2,dqo),e(N,cqo),e(N,I2),e(I2,Dhe),e(Dhe,fqo),e(I2,mqo),e(I2,mV),e(mV,gqo),e(I2,hqo),e(N,pqo),e(N,N2),e(N2,Ghe),e(Ghe,_qo),e(N2,uqo),e(N2,gV),e(gV,bqo),e(N2,vqo),e(N,Fqo),e(N,q2),e(q2,Ohe),e(Ohe,Tqo),e(q2,Mqo),e(q2,hV),e(hV,Eqo),e(q2,Cqo),e(N,wqo),e(N,j2),e(j2,Vhe),e(Vhe,Aqo),e(j2,Lqo),e(j2,pV),e(pV,yqo),e(j2,xqo),e(N,$qo),e(N,D2),e(D2,Xhe),e(Xhe,kqo),e(D2,Sqo),e(D2,_V),e(_V,Rqo),e(D2,Pqo),e(N,Bqo),e(N,G2),e(G2,zhe),e(zhe,Iqo),e(G2,Nqo),e(G2,uV),e(uV,qqo),e(G2,jqo),e(N,Dqo),e(N,O2),e(O2,Qhe),e(Qhe,Gqo),e(O2,Oqo),e(O2,bV),e(bV,Vqo),e(O2,Xqo),e(N,zqo),e(N,V2),e(V2,Whe),e(Whe,Qqo),e(V2,Wqo),e(V2,vV),e(vV,Hqo),e(V2,Uqo),e(N,Jqo),e(N,X2),e(X2,Hhe),e(Hhe,Yqo),e(X2,Kqo),e(X2,FV),e(FV,Zqo),e(X2,ejo),e(N,ojo),e(N,z2),e(z2,Uhe),e(Uhe,rjo),e(z2,tjo),e(z2,TV),e(TV,ajo),e(z2,njo),e(N,sjo),e(N,Q2),e(Q2,Jhe),e(Jhe,ljo),e(Q2,ijo),e(Q2,MV),e(MV,djo),e(Q2,cjo),e(N,fjo),e(N,W2),e(W2,Yhe),e(Yhe,mjo),e(W2,gjo),e(W2,EV),e(EV,hjo),e(W2,pjo),e(N,_jo),e(N,H2),e(H2,Khe),e(Khe,ujo),e(H2,bjo),e(H2,CV),e(CV,vjo),e(H2,Fjo),e(N,Tjo),e(N,U2),e(U2,Zhe),e(Zhe,Mjo),e(U2,Ejo),e(U2,wV),e(wV,Cjo),e(U2,wjo),e(N,Ajo),e(N,J2),e(J2,epe),e(epe,Ljo),e(J2,yjo),e(J2,AV),e(AV,xjo),e(J2,$jo),e(N,kjo),e(N,Y2),e(Y2,ope),e(ope,Sjo),e(Y2,Rjo),e(Y2,LV),e(LV,Pjo),e(Y2,Bjo),e(N,Ijo),e(N,K2),e(K2,rpe),e(rpe,Njo),e(K2,qjo),e(K2,yV),e(yV,jjo),e(K2,Djo),e(N,Gjo),e(N,Z2),e(Z2,tpe),e(tpe,Ojo),e(Z2,Vjo),e(Z2,xV),e(xV,Xjo),e(Z2,zjo),e(N,Qjo),e(N,eb),e(eb,ape),e(ape,Wjo),e(eb,Hjo),e(eb,$V),e($V,Ujo),e(eb,Jjo),e(N,Yjo),e(N,ob),e(ob,npe),e(npe,Kjo),e(ob,Zjo),e(ob,kV),e(kV,eDo),e(ob,oDo),e(N,rDo),e(N,rb),e(rb,spe),e(spe,tDo),e(rb,aDo),e(rb,SV),e(SV,nDo),e(rb,sDo),e(N,lDo),e(N,tb),e(tb,lpe),e(lpe,iDo),e(tb,dDo),e(tb,RV),e(RV,cDo),e(tb,fDo),e(N,mDo),e(N,ab),e(ab,ipe),e(ipe,gDo),e(ab,hDo),e(ab,PV),e(PV,pDo),e(ab,_Do),e(N,uDo),e(N,nb),e(nb,dpe),e(dpe,bDo),e(nb,vDo),e(nb,BV),e(BV,FDo),e(nb,TDo),e(N,MDo),e(N,sb),e(sb,cpe),e(cpe,EDo),e(sb,CDo),e(sb,IV),e(IV,wDo),e(sb,ADo),e(N,LDo),e(N,lb),e(lb,fpe),e(fpe,yDo),e(lb,xDo),e(lb,NV),e(NV,$Do),e(lb,kDo),e(N,SDo),e(N,ib),e(ib,mpe),e(mpe,RDo),e(ib,PDo),e(ib,qV),e(qV,BDo),e(ib,IDo),e(N,NDo),e(N,db),e(db,gpe),e(gpe,qDo),e(db,jDo),e(db,jV),e(jV,DDo),e(db,GDo),e(N,ODo),e(N,cb),e(cb,hpe),e(hpe,VDo),e(cb,XDo),e(cb,DV),e(DV,zDo),e(cb,QDo),e(N,WDo),e(N,fb),e(fb,ppe),e(ppe,HDo),e(fb,UDo),e(fb,GV),e(GV,JDo),e(fb,YDo),e(N,KDo),e(N,mb),e(mb,_pe),e(_pe,ZDo),e(mb,eGo),e(mb,OV),e(OV,oGo),e(mb,rGo),e(N,tGo),e(N,gb),e(gb,upe),e(upe,aGo),e(gb,nGo),e(gb,VV),e(VV,sGo),e(gb,lGo),e(N,iGo),e(N,hb),e(hb,bpe),e(bpe,dGo),e(hb,cGo),e(hb,XV),e(XV,fGo),e(hb,mGo),e(N,gGo),e(N,pb),e(pb,vpe),e(vpe,hGo),e(pb,pGo),e(pb,zV),e(zV,_Go),e(pb,uGo),e(N,bGo),e(N,_b),e(_b,Fpe),e(Fpe,vGo),e(_b,FGo),e(_b,QV),e(QV,TGo),e(_b,MGo),e(N,EGo),e(N,ub),e(ub,Tpe),e(Tpe,CGo),e(ub,wGo),e(ub,WV),e(WV,AGo),e(ub,LGo),e(N,yGo),e(N,bb),e(bb,Mpe),e(Mpe,xGo),e(bb,$Go),e(bb,HV),e(HV,kGo),e(bb,SGo),e(N,RGo),e(N,vb),e(vb,Epe),e(Epe,PGo),e(vb,BGo),e(vb,UV),e(UV,IGo),e(vb,NGo),e(N,qGo),e(N,Fb),e(Fb,Cpe),e(Cpe,jGo),e(Fb,DGo),e(Fb,JV),e(JV,GGo),e(Fb,OGo),e(oo,VGo),e(oo,Tb),e(Tb,XGo),e(Tb,wpe),e(wpe,zGo),e(Tb,QGo),e(Tb,Ape),e(Ape,WGo),e(oo,HGo),M(Mb,oo,null),b(f,LOe,u),b(f,ed,u),e(ed,Eb),e(Eb,Lpe),M(By,Lpe,null),e(ed,UGo),e(ed,ype),e(ype,JGo),b(f,yOe,u),b(f,Bo,u),M(Iy,Bo,null),e(Bo,YGo),e(Bo,od),e(od,KGo),e(od,YV),e(YV,ZGo),e(od,eOo),e(od,KV),e(KV,oOo),e(od,rOo),e(Bo,tOo),e(Bo,Ny),e(Ny,aOo),e(Ny,xpe),e(xpe,nOo),e(Ny,sOo),e(Bo,lOo),e(Bo,ft),M(qy,ft,null),e(ft,iOo),e(ft,$pe),e($pe,dOo),e(ft,cOo),e(ft,rd),e(rd,fOo),e(rd,kpe),e(kpe,mOo),e(rd,gOo),e(rd,ZV),e(ZV,hOo),e(rd,pOo),e(ft,_Oo),M(Cb,ft,null),e(Bo,uOo),e(Bo,ro),M(jy,ro,null),e(ro,bOo),e(ro,Spe),e(Spe,vOo),e(ro,FOo),e(ro,ja),e(ja,TOo),e(ja,Rpe),e(Rpe,MOo),e(ja,EOo),e(ja,Ppe),e(Ppe,COo),e(ja,wOo),e(ja,Bpe),e(Bpe,AOo),e(ja,LOo),e(ro,yOo),e(ro,Z),e(Z,wb),e(wb,Ipe),e(Ipe,xOo),e(wb,$Oo),e(wb,eX),e(eX,kOo),e(wb,SOo),e(Z,ROo),e(Z,Ab),e(Ab,Npe),e(Npe,POo),e(Ab,BOo),e(Ab,oX),e(oX,IOo),e(Ab,NOo),e(Z,qOo),e(Z,Lb),e(Lb,qpe),e(qpe,jOo),e(Lb,DOo),e(Lb,rX),e(rX,GOo),e(Lb,OOo),e(Z,VOo),e(Z,yb),e(yb,jpe),e(jpe,XOo),e(yb,zOo),e(yb,tX),e(tX,QOo),e(yb,WOo),e(Z,HOo),e(Z,xb),e(xb,Dpe),e(Dpe,UOo),e(xb,JOo),e(xb,aX),e(aX,YOo),e(xb,KOo),e(Z,ZOo),e(Z,$b),e($b,Gpe),e(Gpe,eVo),e($b,oVo),e($b,nX),e(nX,rVo),e($b,tVo),e(Z,aVo),e(Z,kb),e(kb,Ope),e(Ope,nVo),e(kb,sVo),e(kb,sX),e(sX,lVo),e(kb,iVo),e(Z,dVo),e(Z,Sb),e(Sb,Vpe),e(Vpe,cVo),e(Sb,fVo),e(Sb,lX),e(lX,mVo),e(Sb,gVo),e(Z,hVo),e(Z,Rb),e(Rb,Xpe),e(Xpe,pVo),e(Rb,_Vo),e(Rb,iX),e(iX,uVo),e(Rb,bVo),e(Z,vVo),e(Z,Pb),e(Pb,zpe),e(zpe,FVo),e(Pb,TVo),e(Pb,dX),e(dX,MVo),e(Pb,EVo),e(Z,CVo),e(Z,Bb),e(Bb,Qpe),e(Qpe,wVo),e(Bb,AVo),e(Bb,cX),e(cX,LVo),e(Bb,yVo),e(Z,xVo),e(Z,Ib),e(Ib,Wpe),e(Wpe,$Vo),e(Ib,kVo),e(Ib,fX),e(fX,SVo),e(Ib,RVo),e(Z,PVo),e(Z,Nb),e(Nb,Hpe),e(Hpe,BVo),e(Nb,IVo),e(Nb,mX),e(mX,NVo),e(Nb,qVo),e(Z,jVo),e(Z,qb),e(qb,Upe),e(Upe,DVo),e(qb,GVo),e(qb,gX),e(gX,OVo),e(qb,VVo),e(Z,XVo),e(Z,jb),e(jb,Jpe),e(Jpe,zVo),e(jb,QVo),e(jb,hX),e(hX,WVo),e(jb,HVo),e(Z,UVo),e(Z,Db),e(Db,Ype),e(Ype,JVo),e(Db,YVo),e(Db,pX),e(pX,KVo),e(Db,ZVo),e(Z,eXo),e(Z,Gb),e(Gb,Kpe),e(Kpe,oXo),e(Gb,rXo),e(Gb,_X),e(_X,tXo),e(Gb,aXo),e(Z,nXo),e(Z,Ob),e(Ob,Zpe),e(Zpe,sXo),e(Ob,lXo),e(Ob,uX),e(uX,iXo),e(Ob,dXo),e(Z,cXo),e(Z,Vb),e(Vb,e_e),e(e_e,fXo),e(Vb,mXo),e(Vb,bX),e(bX,gXo),e(Vb,hXo),e(Z,pXo),e(Z,Xb),e(Xb,o_e),e(o_e,_Xo),e(Xb,uXo),e(Xb,vX),e(vX,bXo),e(Xb,vXo),e(Z,FXo),e(Z,zb),e(zb,r_e),e(r_e,TXo),e(zb,MXo),e(zb,FX),e(FX,EXo),e(zb,CXo),e(Z,wXo),e(Z,Qb),e(Qb,t_e),e(t_e,AXo),e(Qb,LXo),e(Qb,TX),e(TX,yXo),e(Qb,xXo),e(Z,$Xo),e(Z,Wb),e(Wb,a_e),e(a_e,kXo),e(Wb,SXo),e(Wb,MX),e(MX,RXo),e(Wb,PXo),e(Z,BXo),e(Z,Hb),e(Hb,n_e),e(n_e,IXo),e(Hb,NXo),e(Hb,EX),e(EX,qXo),e(Hb,jXo),e(Z,DXo),e(Z,Ub),e(Ub,s_e),e(s_e,GXo),e(Ub,OXo),e(Ub,CX),e(CX,VXo),e(Ub,XXo),e(Z,zXo),e(Z,Jb),e(Jb,l_e),e(l_e,QXo),e(Jb,WXo),e(Jb,wX),e(wX,HXo),e(Jb,UXo),e(Z,JXo),e(Z,Yb),e(Yb,i_e),e(i_e,YXo),e(Yb,KXo),e(Yb,AX),e(AX,ZXo),e(Yb,ezo),e(Z,ozo),e(Z,Kb),e(Kb,d_e),e(d_e,rzo),e(Kb,tzo),e(Kb,LX),e(LX,azo),e(Kb,nzo),e(Z,szo),e(Z,Zb),e(Zb,c_e),e(c_e,lzo),e(Zb,izo),e(Zb,yX),e(yX,dzo),e(Zb,czo),e(Z,fzo),e(Z,ev),e(ev,f_e),e(f_e,mzo),e(ev,gzo),e(ev,xX),e(xX,hzo),e(ev,pzo),e(ro,_zo),e(ro,ov),e(ov,uzo),e(ov,m_e),e(m_e,bzo),e(ov,vzo),e(ov,g_e),e(g_e,Fzo),e(ro,Tzo),M(rv,ro,null),b(f,xOe,u),b(f,td,u),e(td,tv),e(tv,h_e),M(Dy,h_e,null),e(td,Mzo),e(td,p_e),e(p_e,Ezo),b(f,$Oe,u),b(f,Io,u),M(Gy,Io,null),e(Io,Czo),e(Io,ad),e(ad,wzo),e(ad,$X),e($X,Azo),e(ad,Lzo),e(ad,kX),e(kX,yzo),e(ad,xzo),e(Io,$zo),e(Io,Oy),e(Oy,kzo),e(Oy,__e),e(__e,Szo),e(Oy,Rzo),e(Io,Pzo),e(Io,mt),M(Vy,mt,null),e(mt,Bzo),e(mt,u_e),e(u_e,Izo),e(mt,Nzo),e(mt,nd),e(nd,qzo),e(nd,b_e),e(b_e,jzo),e(nd,Dzo),e(nd,SX),e(SX,Gzo),e(nd,Ozo),e(mt,Vzo),M(av,mt,null),e(Io,Xzo),e(Io,to),M(Xy,to,null),e(to,zzo),e(to,v_e),e(v_e,Qzo),e(to,Wzo),e(to,Da),e(Da,Hzo),e(Da,F_e),e(F_e,Uzo),e(Da,Jzo),e(Da,T_e),e(T_e,Yzo),e(Da,Kzo),e(Da,M_e),e(M_e,Zzo),e(Da,eQo),e(to,oQo),e(to,No),e(No,nv),e(nv,E_e),e(E_e,rQo),e(nv,tQo),e(nv,RX),e(RX,aQo),e(nv,nQo),e(No,sQo),e(No,sv),e(sv,C_e),e(C_e,lQo),e(sv,iQo),e(sv,PX),e(PX,dQo),e(sv,cQo),e(No,fQo),e(No,lv),e(lv,w_e),e(w_e,mQo),e(lv,gQo),e(lv,BX),e(BX,hQo),e(lv,pQo),e(No,_Qo),e(No,iv),e(iv,A_e),e(A_e,uQo),e(iv,bQo),e(iv,IX),e(IX,vQo),e(iv,FQo),e(No,TQo),e(No,dv),e(dv,L_e),e(L_e,MQo),e(dv,EQo),e(dv,NX),e(NX,CQo),e(dv,wQo),e(No,AQo),e(No,cv),e(cv,y_e),e(y_e,LQo),e(cv,yQo),e(cv,qX),e(qX,xQo),e(cv,$Qo),e(to,kQo),e(to,fv),e(fv,SQo),e(fv,x_e),e(x_e,RQo),e(fv,PQo),e(fv,$_e),e($_e,BQo),e(to,IQo),M(mv,to,null),b(f,kOe,u),b(f,sd,u),e(sd,gv),e(gv,k_e),M(zy,k_e,null),e(sd,NQo),e(sd,S_e),e(S_e,qQo),b(f,SOe,u),b(f,qo,u),M(Qy,qo,null),e(qo,jQo),e(qo,ld),e(ld,DQo),e(ld,jX),e(jX,GQo),e(ld,OQo),e(ld,DX),e(DX,VQo),e(ld,XQo),e(qo,zQo),e(qo,Wy),e(Wy,QQo),e(Wy,R_e),e(R_e,WQo),e(Wy,HQo),e(qo,UQo),e(qo,gt),M(Hy,gt,null),e(gt,JQo),e(gt,P_e),e(P_e,YQo),e(gt,KQo),e(gt,id),e(id,ZQo),e(id,B_e),e(B_e,eWo),e(id,oWo),e(id,GX),e(GX,rWo),e(id,tWo),e(gt,aWo),M(hv,gt,null),e(qo,nWo),e(qo,ao),M(Uy,ao,null),e(ao,sWo),e(ao,I_e),e(I_e,lWo),e(ao,iWo),e(ao,Ga),e(Ga,dWo),e(Ga,N_e),e(N_e,cWo),e(Ga,fWo),e(Ga,q_e),e(q_e,mWo),e(Ga,gWo),e(Ga,j_e),e(j_e,hWo),e(Ga,pWo),e(ao,_Wo),e(ao,H),e(H,pv),e(pv,D_e),e(D_e,uWo),e(pv,bWo),e(pv,OX),e(OX,vWo),e(pv,FWo),e(H,TWo),e(H,_v),e(_v,G_e),e(G_e,MWo),e(_v,EWo),e(_v,VX),e(VX,CWo),e(_v,wWo),e(H,AWo),e(H,uv),e(uv,O_e),e(O_e,LWo),e(uv,yWo),e(uv,XX),e(XX,xWo),e(uv,$Wo),e(H,kWo),e(H,bv),e(bv,V_e),e(V_e,SWo),e(bv,RWo),e(bv,zX),e(zX,PWo),e(bv,BWo),e(H,IWo),e(H,vv),e(vv,X_e),e(X_e,NWo),e(vv,qWo),e(vv,QX),e(QX,jWo),e(vv,DWo),e(H,GWo),e(H,Fv),e(Fv,z_e),e(z_e,OWo),e(Fv,VWo),e(Fv,WX),e(WX,XWo),e(Fv,zWo),e(H,QWo),e(H,Tv),e(Tv,Q_e),e(Q_e,WWo),e(Tv,HWo),e(Tv,HX),e(HX,UWo),e(Tv,JWo),e(H,YWo),e(H,Mv),e(Mv,W_e),e(W_e,KWo),e(Mv,ZWo),e(Mv,UX),e(UX,eHo),e(Mv,oHo),e(H,rHo),e(H,Ev),e(Ev,H_e),e(H_e,tHo),e(Ev,aHo),e(Ev,JX),e(JX,nHo),e(Ev,sHo),e(H,lHo),e(H,Cv),e(Cv,U_e),e(U_e,iHo),e(Cv,dHo),e(Cv,YX),e(YX,cHo),e(Cv,fHo),e(H,mHo),e(H,wv),e(wv,J_e),e(J_e,gHo),e(wv,hHo),e(wv,KX),e(KX,pHo),e(wv,_Ho),e(H,uHo),e(H,Av),e(Av,Y_e),e(Y_e,bHo),e(Av,vHo),e(Av,ZX),e(ZX,FHo),e(Av,THo),e(H,MHo),e(H,Lv),e(Lv,K_e),e(K_e,EHo),e(Lv,CHo),e(Lv,ez),e(ez,wHo),e(Lv,AHo),e(H,LHo),e(H,yv),e(yv,Z_e),e(Z_e,yHo),e(yv,xHo),e(yv,oz),e(oz,$Ho),e(yv,kHo),e(H,SHo),e(H,xv),e(xv,eue),e(eue,RHo),e(xv,PHo),e(xv,rz),e(rz,BHo),e(xv,IHo),e(H,NHo),e(H,$v),e($v,oue),e(oue,qHo),e($v,jHo),e($v,tz),e(tz,DHo),e($v,GHo),e(H,OHo),e(H,kv),e(kv,rue),e(rue,VHo),e(kv,XHo),e(kv,az),e(az,zHo),e(kv,QHo),e(H,WHo),e(H,Sv),e(Sv,tue),e(tue,HHo),e(Sv,UHo),e(Sv,nz),e(nz,JHo),e(Sv,YHo),e(H,KHo),e(H,Rv),e(Rv,aue),e(aue,ZHo),e(Rv,eUo),e(Rv,sz),e(sz,oUo),e(Rv,rUo),e(H,tUo),e(H,Pv),e(Pv,nue),e(nue,aUo),e(Pv,nUo),e(Pv,lz),e(lz,sUo),e(Pv,lUo),e(H,iUo),e(H,Bv),e(Bv,sue),e(sue,dUo),e(Bv,cUo),e(Bv,iz),e(iz,fUo),e(Bv,mUo),e(H,gUo),e(H,Iv),e(Iv,lue),e(lue,hUo),e(Iv,pUo),e(Iv,dz),e(dz,_Uo),e(Iv,uUo),e(H,bUo),e(H,Nv),e(Nv,iue),e(iue,vUo),e(Nv,FUo),e(Nv,cz),e(cz,TUo),e(Nv,MUo),e(H,EUo),e(H,qv),e(qv,due),e(due,CUo),e(qv,wUo),e(qv,fz),e(fz,AUo),e(qv,LUo),e(H,yUo),e(H,jv),e(jv,cue),e(cue,xUo),e(jv,$Uo),e(jv,mz),e(mz,kUo),e(jv,SUo),e(H,RUo),e(H,Dv),e(Dv,fue),e(fue,PUo),e(Dv,BUo),e(Dv,gz),e(gz,IUo),e(Dv,NUo),e(H,qUo),e(H,Gv),e(Gv,mue),e(mue,jUo),e(Gv,DUo),e(Gv,hz),e(hz,GUo),e(Gv,OUo),e(H,VUo),e(H,Ov),e(Ov,gue),e(gue,XUo),e(Ov,zUo),e(Ov,pz),e(pz,QUo),e(Ov,WUo),e(H,HUo),e(H,Vv),e(Vv,hue),e(hue,UUo),e(Vv,JUo),e(Vv,_z),e(_z,YUo),e(Vv,KUo),e(H,ZUo),e(H,Xv),e(Xv,pue),e(pue,eJo),e(Xv,oJo),e(Xv,uz),e(uz,rJo),e(Xv,tJo),e(H,aJo),e(H,zv),e(zv,_ue),e(_ue,nJo),e(zv,sJo),e(zv,bz),e(bz,lJo),e(zv,iJo),e(H,dJo),e(H,Qv),e(Qv,uue),e(uue,cJo),e(Qv,fJo),e(Qv,vz),e(vz,mJo),e(Qv,gJo),e(H,hJo),e(H,Wv),e(Wv,bue),e(bue,pJo),e(Wv,_Jo),e(Wv,Fz),e(Fz,uJo),e(Wv,bJo),e(H,vJo),e(H,Hv),e(Hv,vue),e(vue,FJo),e(Hv,TJo),e(Hv,Tz),e(Tz,MJo),e(Hv,EJo),e(H,CJo),e(H,Uv),e(Uv,Fue),e(Fue,wJo),e(Uv,AJo),e(Uv,Mz),e(Mz,LJo),e(Uv,yJo),e(H,xJo),e(H,Jv),e(Jv,Tue),e(Tue,$Jo),e(Jv,kJo),e(Jv,Ez),e(Ez,SJo),e(Jv,RJo),e(ao,PJo),e(ao,Yv),e(Yv,BJo),e(Yv,Mue),e(Mue,IJo),e(Yv,NJo),e(Yv,Eue),e(Eue,qJo),e(ao,jJo),M(Kv,ao,null),b(f,ROe,u),b(f,dd,u),e(dd,Zv),e(Zv,Cue),M(Jy,Cue,null),e(dd,DJo),e(dd,wue),e(wue,GJo),b(f,POe,u),b(f,jo,u),M(Yy,jo,null),e(jo,OJo),e(jo,cd),e(cd,VJo),e(cd,Cz),e(Cz,XJo),e(cd,zJo),e(cd,wz),e(wz,QJo),e(cd,WJo),e(jo,HJo),e(jo,Ky),e(Ky,UJo),e(Ky,Aue),e(Aue,JJo),e(Ky,YJo),e(jo,KJo),e(jo,ht),M(Zy,ht,null),e(ht,ZJo),e(ht,Lue),e(Lue,eYo),e(ht,oYo),e(ht,fd),e(fd,rYo),e(fd,yue),e(yue,tYo),e(fd,aYo),e(fd,Az),e(Az,nYo),e(fd,sYo),e(ht,lYo),M(e0,ht,null),e(jo,iYo),e(jo,no),M(e8,no,null),e(no,dYo),e(no,xue),e(xue,cYo),e(no,fYo),e(no,Oa),e(Oa,mYo),e(Oa,$ue),e($ue,gYo),e(Oa,hYo),e(Oa,kue),e(kue,pYo),e(Oa,_Yo),e(Oa,Sue),e(Sue,uYo),e(Oa,bYo),e(no,vYo),e(no,V),e(V,o0),e(o0,Rue),e(Rue,FYo),e(o0,TYo),e(o0,Lz),e(Lz,MYo),e(o0,EYo),e(V,CYo),e(V,r0),e(r0,Pue),e(Pue,wYo),e(r0,AYo),e(r0,yz),e(yz,LYo),e(r0,yYo),e(V,xYo),e(V,t0),e(t0,Bue),e(Bue,$Yo),e(t0,kYo),e(t0,xz),e(xz,SYo),e(t0,RYo),e(V,PYo),e(V,a0),e(a0,Iue),e(Iue,BYo),e(a0,IYo),e(a0,$z),e($z,NYo),e(a0,qYo),e(V,jYo),e(V,n0),e(n0,Nue),e(Nue,DYo),e(n0,GYo),e(n0,kz),e(kz,OYo),e(n0,VYo),e(V,XYo),e(V,s0),e(s0,que),e(que,zYo),e(s0,QYo),e(s0,Sz),e(Sz,WYo),e(s0,HYo),e(V,UYo),e(V,l0),e(l0,jue),e(jue,JYo),e(l0,YYo),e(l0,Rz),e(Rz,KYo),e(l0,ZYo),e(V,eKo),e(V,i0),e(i0,Due),e(Due,oKo),e(i0,rKo),e(i0,Pz),e(Pz,tKo),e(i0,aKo),e(V,nKo),e(V,d0),e(d0,Gue),e(Gue,sKo),e(d0,lKo),e(d0,Bz),e(Bz,iKo),e(d0,dKo),e(V,cKo),e(V,c0),e(c0,Oue),e(Oue,fKo),e(c0,mKo),e(c0,Iz),e(Iz,gKo),e(c0,hKo),e(V,pKo),e(V,f0),e(f0,Vue),e(Vue,_Ko),e(f0,uKo),e(f0,Nz),e(Nz,bKo),e(f0,vKo),e(V,FKo),e(V,m0),e(m0,Xue),e(Xue,TKo),e(m0,MKo),e(m0,qz),e(qz,EKo),e(m0,CKo),e(V,wKo),e(V,g0),e(g0,zue),e(zue,AKo),e(g0,LKo),e(g0,jz),e(jz,yKo),e(g0,xKo),e(V,$Ko),e(V,h0),e(h0,Que),e(Que,kKo),e(h0,SKo),e(h0,Dz),e(Dz,RKo),e(h0,PKo),e(V,BKo),e(V,p0),e(p0,Wue),e(Wue,IKo),e(p0,NKo),e(p0,Gz),e(Gz,qKo),e(p0,jKo),e(V,DKo),e(V,_0),e(_0,Hue),e(Hue,GKo),e(_0,OKo),e(_0,Oz),e(Oz,VKo),e(_0,XKo),e(V,zKo),e(V,u0),e(u0,Uue),e(Uue,QKo),e(u0,WKo),e(u0,Vz),e(Vz,HKo),e(u0,UKo),e(V,JKo),e(V,b0),e(b0,Jue),e(Jue,YKo),e(b0,KKo),e(b0,Xz),e(Xz,ZKo),e(b0,eZo),e(V,oZo),e(V,v0),e(v0,Yue),e(Yue,rZo),e(v0,tZo),e(v0,zz),e(zz,aZo),e(v0,nZo),e(V,sZo),e(V,F0),e(F0,Kue),e(Kue,lZo),e(F0,iZo),e(F0,Qz),e(Qz,dZo),e(F0,cZo),e(V,fZo),e(V,T0),e(T0,Zue),e(Zue,mZo),e(T0,gZo),e(T0,Wz),e(Wz,hZo),e(T0,pZo),e(V,_Zo),e(V,M0),e(M0,e1e),e(e1e,uZo),e(M0,bZo),e(M0,Hz),e(Hz,vZo),e(M0,FZo),e(V,TZo),e(V,E0),e(E0,o1e),e(o1e,MZo),e(E0,EZo),e(E0,Uz),e(Uz,CZo),e(E0,wZo),e(V,AZo),e(V,C0),e(C0,r1e),e(r1e,LZo),e(C0,yZo),e(C0,Jz),e(Jz,xZo),e(C0,$Zo),e(V,kZo),e(V,w0),e(w0,t1e),e(t1e,SZo),e(w0,RZo),e(w0,Yz),e(Yz,PZo),e(w0,BZo),e(V,IZo),e(V,A0),e(A0,a1e),e(a1e,NZo),e(A0,qZo),e(A0,Kz),e(Kz,jZo),e(A0,DZo),e(V,GZo),e(V,L0),e(L0,n1e),e(n1e,OZo),e(L0,VZo),e(L0,Zz),e(Zz,XZo),e(L0,zZo),e(V,QZo),e(V,y0),e(y0,s1e),e(s1e,WZo),e(y0,HZo),e(y0,eQ),e(eQ,UZo),e(y0,JZo),e(V,YZo),e(V,x0),e(x0,l1e),e(l1e,KZo),e(x0,ZZo),e(x0,oQ),e(oQ,eer),e(x0,oer),e(V,rer),e(V,$0),e($0,i1e),e(i1e,ter),e($0,aer),e($0,rQ),e(rQ,ner),e($0,ser),e(V,ler),e(V,k0),e(k0,d1e),e(d1e,ier),e(k0,der),e(k0,tQ),e(tQ,cer),e(k0,fer),e(V,mer),e(V,S0),e(S0,c1e),e(c1e,ger),e(S0,her),e(S0,aQ),e(aQ,per),e(S0,_er),e(V,uer),e(V,R0),e(R0,f1e),e(f1e,ber),e(R0,ver),e(R0,nQ),e(nQ,Fer),e(R0,Ter),e(V,Mer),e(V,P0),e(P0,m1e),e(m1e,Eer),e(P0,Cer),e(P0,sQ),e(sQ,wer),e(P0,Aer),e(V,Ler),e(V,B0),e(B0,g1e),e(g1e,yer),e(B0,xer),e(B0,lQ),e(lQ,$er),e(B0,ker),e(V,Ser),e(V,I0),e(I0,h1e),e(h1e,Rer),e(I0,Per),e(I0,iQ),e(iQ,Ber),e(I0,Ier),e(V,Ner),e(V,N0),e(N0,p1e),e(p1e,qer),e(N0,jer),e(N0,dQ),e(dQ,Der),e(N0,Ger),e(V,Oer),e(V,q0),e(q0,_1e),e(_1e,Ver),e(q0,Xer),e(q0,cQ),e(cQ,zer),e(q0,Qer),e(V,Wer),e(V,j0),e(j0,u1e),e(u1e,Her),e(j0,Uer),e(j0,fQ),e(fQ,Jer),e(j0,Yer),e(V,Ker),e(V,D0),e(D0,b1e),e(b1e,Zer),e(D0,eor),e(D0,mQ),e(mQ,oor),e(D0,ror),e(V,tor),e(V,G0),e(G0,v1e),e(v1e,aor),e(G0,nor),e(G0,gQ),e(gQ,sor),e(G0,lor),e(no,ior),e(no,O0),e(O0,dor),e(O0,F1e),e(F1e,cor),e(O0,mor),e(O0,T1e),e(T1e,gor),e(no,hor),M(V0,no,null),b(f,BOe,u),b(f,md,u),e(md,X0),e(X0,M1e),M(o8,M1e,null),e(md,por),e(md,E1e),e(E1e,_or),b(f,IOe,u),b(f,Do,u),M(r8,Do,null),e(Do,uor),e(Do,gd),e(gd,bor),e(gd,hQ),e(hQ,vor),e(gd,For),e(gd,pQ),e(pQ,Tor),e(gd,Mor),e(Do,Eor),e(Do,t8),e(t8,Cor),e(t8,C1e),e(C1e,wor),e(t8,Aor),e(Do,Lor),e(Do,pt),M(a8,pt,null),e(pt,yor),e(pt,w1e),e(w1e,xor),e(pt,$or),e(pt,hd),e(hd,kor),e(hd,A1e),e(A1e,Sor),e(hd,Ror),e(hd,_Q),e(_Q,Por),e(hd,Bor),e(pt,Ior),M(z0,pt,null),e(Do,Nor),e(Do,so),M(n8,so,null),e(so,qor),e(so,L1e),e(L1e,jor),e(so,Dor),e(so,Va),e(Va,Gor),e(Va,y1e),e(y1e,Oor),e(Va,Vor),e(Va,x1e),e(x1e,Xor),e(Va,zor),e(Va,$1e),e($1e,Qor),e(Va,Wor),e(so,Hor),e(so,k1e),e(k1e,Q0),e(Q0,S1e),e(S1e,Uor),e(Q0,Jor),e(Q0,uQ),e(uQ,Yor),e(Q0,Kor),e(so,Zor),e(so,W0),e(W0,err),e(W0,R1e),e(R1e,orr),e(W0,rrr),e(W0,P1e),e(P1e,trr),e(so,arr),M(H0,so,null),b(f,NOe,u),b(f,pd,u),e(pd,U0),e(U0,B1e),M(s8,B1e,null),e(pd,nrr),e(pd,I1e),e(I1e,srr),b(f,qOe,u),b(f,Go,u),M(l8,Go,null),e(Go,lrr),e(Go,_d),e(_d,irr),e(_d,bQ),e(bQ,drr),e(_d,crr),e(_d,vQ),e(vQ,frr),e(_d,mrr),e(Go,grr),e(Go,i8),e(i8,hrr),e(i8,N1e),e(N1e,prr),e(i8,_rr),e(Go,urr),e(Go,_t),M(d8,_t,null),e(_t,brr),e(_t,q1e),e(q1e,vrr),e(_t,Frr),e(_t,ud),e(ud,Trr),e(ud,j1e),e(j1e,Mrr),e(ud,Err),e(ud,FQ),e(FQ,Crr),e(ud,wrr),e(_t,Arr),M(J0,_t,null),e(Go,Lrr),e(Go,lo),M(c8,lo,null),e(lo,yrr),e(lo,D1e),e(D1e,xrr),e(lo,$rr),e(lo,Xa),e(Xa,krr),e(Xa,G1e),e(G1e,Srr),e(Xa,Rrr),e(Xa,O1e),e(O1e,Prr),e(Xa,Brr),e(Xa,V1e),e(V1e,Irr),e(Xa,Nrr),e(lo,qrr),e(lo,Fe),e(Fe,Y0),e(Y0,X1e),e(X1e,jrr),e(Y0,Drr),e(Y0,TQ),e(TQ,Grr),e(Y0,Orr),e(Fe,Vrr),e(Fe,K0),e(K0,z1e),e(z1e,Xrr),e(K0,zrr),e(K0,MQ),e(MQ,Qrr),e(K0,Wrr),e(Fe,Hrr),e(Fe,Z0),e(Z0,Q1e),e(Q1e,Urr),e(Z0,Jrr),e(Z0,EQ),e(EQ,Yrr),e(Z0,Krr),e(Fe,Zrr),e(Fe,eF),e(eF,W1e),e(W1e,etr),e(eF,otr),e(eF,CQ),e(CQ,rtr),e(eF,ttr),e(Fe,atr),e(Fe,zs),e(zs,H1e),e(H1e,ntr),e(zs,str),e(zs,wQ),e(wQ,ltr),e(zs,itr),e(zs,AQ),e(AQ,dtr),e(zs,ctr),e(Fe,ftr),e(Fe,oF),e(oF,U1e),e(U1e,mtr),e(oF,gtr),e(oF,LQ),e(LQ,htr),e(oF,ptr),e(Fe,_tr),e(Fe,Qs),e(Qs,J1e),e(J1e,utr),e(Qs,btr),e(Qs,yQ),e(yQ,vtr),e(Qs,Ftr),e(Qs,xQ),e(xQ,Ttr),e(Qs,Mtr),e(Fe,Etr),e(Fe,ut),e(ut,Y1e),e(Y1e,Ctr),e(ut,wtr),e(ut,$Q),e($Q,Atr),e(ut,Ltr),e(ut,kQ),e(kQ,ytr),e(ut,xtr),e(ut,SQ),e(SQ,$tr),e(ut,ktr),e(Fe,Str),e(Fe,rF),e(rF,K1e),e(K1e,Rtr),e(rF,Ptr),e(rF,RQ),e(RQ,Btr),e(rF,Itr),e(Fe,Ntr),e(Fe,tF),e(tF,Z1e),e(Z1e,qtr),e(tF,jtr),e(tF,PQ),e(PQ,Dtr),e(tF,Gtr),e(Fe,Otr),e(Fe,aF),e(aF,e7e),e(e7e,Vtr),e(aF,Xtr),e(aF,BQ),e(BQ,ztr),e(aF,Qtr),e(Fe,Wtr),e(Fe,nF),e(nF,o7e),e(o7e,Htr),e(nF,Utr),e(nF,IQ),e(IQ,Jtr),e(nF,Ytr),e(Fe,Ktr),e(Fe,sF),e(sF,r7e),e(r7e,Ztr),e(sF,ear),e(sF,NQ),e(NQ,oar),e(sF,rar),e(Fe,tar),e(Fe,lF),e(lF,t7e),e(t7e,aar),e(lF,nar),e(lF,qQ),e(qQ,sar),e(lF,lar),e(Fe,iar),e(Fe,iF),e(iF,a7e),e(a7e,dar),e(iF,car),e(iF,jQ),e(jQ,far),e(iF,mar),e(lo,gar),e(lo,dF),e(dF,har),e(dF,n7e),e(n7e,par),e(dF,_ar),e(dF,s7e),e(s7e,uar),e(lo,bar),M(cF,lo,null),b(f,jOe,u),b(f,bd,u),e(bd,fF),e(fF,l7e),M(f8,l7e,null),e(bd,Far),e(bd,i7e),e(i7e,Tar),b(f,DOe,u),b(f,Oo,u),M(m8,Oo,null),e(Oo,Mar),e(Oo,vd),e(vd,Ear),e(vd,DQ),e(DQ,Car),e(vd,war),e(vd,GQ),e(GQ,Aar),e(vd,Lar),e(Oo,yar),e(Oo,g8),e(g8,xar),e(g8,d7e),e(d7e,$ar),e(g8,kar),e(Oo,Sar),e(Oo,bt),M(h8,bt,null),e(bt,Rar),e(bt,c7e),e(c7e,Par),e(bt,Bar),e(bt,Fd),e(Fd,Iar),e(Fd,f7e),e(f7e,Nar),e(Fd,qar),e(Fd,OQ),e(OQ,jar),e(Fd,Dar),e(bt,Gar),M(mF,bt,null),e(Oo,Oar),e(Oo,io),M(p8,io,null),e(io,Var),e(io,m7e),e(m7e,Xar),e(io,zar),e(io,za),e(za,Qar),e(za,g7e),e(g7e,War),e(za,Har),e(za,h7e),e(h7e,Uar),e(za,Jar),e(za,p7e),e(p7e,Yar),e(za,Kar),e(io,Zar),e(io,_7e),e(_7e,gF),e(gF,u7e),e(u7e,enr),e(gF,onr),e(gF,VQ),e(VQ,rnr),e(gF,tnr),e(io,anr),e(io,hF),e(hF,nnr),e(hF,b7e),e(b7e,snr),e(hF,lnr),e(hF,v7e),e(v7e,inr),e(io,dnr),M(pF,io,null),b(f,GOe,u),b(f,Td,u),e(Td,_F),e(_F,F7e),M(_8,F7e,null),e(Td,cnr),e(Td,T7e),e(T7e,fnr),b(f,OOe,u),b(f,Vo,u),M(u8,Vo,null),e(Vo,mnr),e(Vo,Md),e(Md,gnr),e(Md,XQ),e(XQ,hnr),e(Md,pnr),e(Md,zQ),e(zQ,_nr),e(Md,unr),e(Vo,bnr),e(Vo,b8),e(b8,vnr),e(b8,M7e),e(M7e,Fnr),e(b8,Tnr),e(Vo,Mnr),e(Vo,vt),M(v8,vt,null),e(vt,Enr),e(vt,E7e),e(E7e,Cnr),e(vt,wnr),e(vt,Ed),e(Ed,Anr),e(Ed,C7e),e(C7e,Lnr),e(Ed,ynr),e(Ed,QQ),e(QQ,xnr),e(Ed,$nr),e(vt,knr),M(uF,vt,null),e(Vo,Snr),e(Vo,co),M(F8,co,null),e(co,Rnr),e(co,w7e),e(w7e,Pnr),e(co,Bnr),e(co,Qa),e(Qa,Inr),e(Qa,A7e),e(A7e,Nnr),e(Qa,qnr),e(Qa,L7e),e(L7e,jnr),e(Qa,Dnr),e(Qa,y7e),e(y7e,Gnr),e(Qa,Onr),e(co,Vnr),e(co,x7e),e(x7e,bF),e(bF,$7e),e($7e,Xnr),e(bF,znr),e(bF,WQ),e(WQ,Qnr),e(bF,Wnr),e(co,Hnr),e(co,vF),e(vF,Unr),e(vF,k7e),e(k7e,Jnr),e(vF,Ynr),e(vF,S7e),e(S7e,Knr),e(co,Znr),M(FF,co,null),b(f,VOe,u),b(f,Cd,u),e(Cd,TF),e(TF,R7e),M(T8,R7e,null),e(Cd,esr),e(Cd,P7e),e(P7e,osr),b(f,XOe,u),b(f,Xo,u),M(M8,Xo,null),e(Xo,rsr),e(Xo,wd),e(wd,tsr),e(wd,HQ),e(HQ,asr),e(wd,nsr),e(wd,UQ),e(UQ,ssr),e(wd,lsr),e(Xo,isr),e(Xo,E8),e(E8,dsr),e(E8,B7e),e(B7e,csr),e(E8,fsr),e(Xo,msr),e(Xo,Ft),M(C8,Ft,null),e(Ft,gsr),e(Ft,I7e),e(I7e,hsr),e(Ft,psr),e(Ft,Ad),e(Ad,_sr),e(Ad,N7e),e(N7e,usr),e(Ad,bsr),e(Ad,JQ),e(JQ,vsr),e(Ad,Fsr),e(Ft,Tsr),M(MF,Ft,null),e(Xo,Msr),e(Xo,fo),M(w8,fo,null),e(fo,Esr),e(fo,q7e),e(q7e,Csr),e(fo,wsr),e(fo,Wa),e(Wa,Asr),e(Wa,j7e),e(j7e,Lsr),e(Wa,ysr),e(Wa,D7e),e(D7e,xsr),e(Wa,$sr),e(Wa,G7e),e(G7e,ksr),e(Wa,Ssr),e(fo,Rsr),e(fo,Pe),e(Pe,EF),e(EF,O7e),e(O7e,Psr),e(EF,Bsr),e(EF,YQ),e(YQ,Isr),e(EF,Nsr),e(Pe,qsr),e(Pe,CF),e(CF,V7e),e(V7e,jsr),e(CF,Dsr),e(CF,KQ),e(KQ,Gsr),e(CF,Osr),e(Pe,Vsr),e(Pe,wF),e(wF,X7e),e(X7e,Xsr),e(wF,zsr),e(wF,ZQ),e(ZQ,Qsr),e(wF,Wsr),e(Pe,Hsr),e(Pe,AF),e(AF,z7e),e(z7e,Usr),e(AF,Jsr),e(AF,eW),e(eW,Ysr),e(AF,Ksr),e(Pe,Zsr),e(Pe,LF),e(LF,Q7e),e(Q7e,elr),e(LF,olr),e(LF,oW),e(oW,rlr),e(LF,tlr),e(Pe,alr),e(Pe,yF),e(yF,W7e),e(W7e,nlr),e(yF,slr),e(yF,rW),e(rW,llr),e(yF,ilr),e(Pe,dlr),e(Pe,xF),e(xF,H7e),e(H7e,clr),e(xF,flr),e(xF,tW),e(tW,mlr),e(xF,glr),e(Pe,hlr),e(Pe,$F),e($F,U7e),e(U7e,plr),e($F,_lr),e($F,aW),e(aW,ulr),e($F,blr),e(Pe,vlr),e(Pe,kF),e(kF,J7e),e(J7e,Flr),e(kF,Tlr),e(kF,nW),e(nW,Mlr),e(kF,Elr),e(fo,Clr),e(fo,SF),e(SF,wlr),e(SF,Y7e),e(Y7e,Alr),e(SF,Llr),e(SF,K7e),e(K7e,ylr),e(fo,xlr),M(RF,fo,null),b(f,zOe,u),b(f,Ld,u),e(Ld,PF),e(PF,Z7e),M(A8,Z7e,null),e(Ld,$lr),e(Ld,e2e),e(e2e,klr),b(f,QOe,u),b(f,zo,u),M(L8,zo,null),e(zo,Slr),e(zo,yd),e(yd,Rlr),e(yd,sW),e(sW,Plr),e(yd,Blr),e(yd,lW),e(lW,Ilr),e(yd,Nlr),e(zo,qlr),e(zo,y8),e(y8,jlr),e(y8,o2e),e(o2e,Dlr),e(y8,Glr),e(zo,Olr),e(zo,Tt),M(x8,Tt,null),e(Tt,Vlr),e(Tt,r2e),e(r2e,Xlr),e(Tt,zlr),e(Tt,xd),e(xd,Qlr),e(xd,t2e),e(t2e,Wlr),e(xd,Hlr),e(xd,iW),e(iW,Ulr),e(xd,Jlr),e(Tt,Ylr),M(BF,Tt,null),e(zo,Klr),e(zo,mo),M($8,mo,null),e(mo,Zlr),e(mo,a2e),e(a2e,eir),e(mo,oir),e(mo,Ha),e(Ha,rir),e(Ha,n2e),e(n2e,tir),e(Ha,air),e(Ha,s2e),e(s2e,nir),e(Ha,sir),e(Ha,l2e),e(l2e,lir),e(Ha,iir),e(mo,dir),e(mo,et),e(et,IF),e(IF,i2e),e(i2e,cir),e(IF,fir),e(IF,dW),e(dW,mir),e(IF,gir),e(et,hir),e(et,NF),e(NF,d2e),e(d2e,pir),e(NF,_ir),e(NF,cW),e(cW,uir),e(NF,bir),e(et,vir),e(et,qF),e(qF,c2e),e(c2e,Fir),e(qF,Tir),e(qF,fW),e(fW,Mir),e(qF,Eir),e(et,Cir),e(et,jF),e(jF,f2e),e(f2e,wir),e(jF,Air),e(jF,mW),e(mW,Lir),e(jF,yir),e(et,xir),e(et,DF),e(DF,m2e),e(m2e,$ir),e(DF,kir),e(DF,gW),e(gW,Sir),e(DF,Rir),e(mo,Pir),e(mo,GF),e(GF,Bir),e(GF,g2e),e(g2e,Iir),e(GF,Nir),e(GF,h2e),e(h2e,qir),e(mo,jir),M(OF,mo,null),b(f,WOe,u),b(f,$d,u),e($d,VF),e(VF,p2e),M(k8,p2e,null),e($d,Dir),e($d,_2e),e(_2e,Gir),b(f,HOe,u),b(f,Qo,u),M(S8,Qo,null),e(Qo,Oir),e(Qo,kd),e(kd,Vir),e(kd,hW),e(hW,Xir),e(kd,zir),e(kd,pW),e(pW,Qir),e(kd,Wir),e(Qo,Hir),e(Qo,R8),e(R8,Uir),e(R8,u2e),e(u2e,Jir),e(R8,Yir),e(Qo,Kir),e(Qo,Mt),M(P8,Mt,null),e(Mt,Zir),e(Mt,b2e),e(b2e,edr),e(Mt,odr),e(Mt,Sd),e(Sd,rdr),e(Sd,v2e),e(v2e,tdr),e(Sd,adr),e(Sd,_W),e(_W,ndr),e(Sd,sdr),e(Mt,ldr),M(XF,Mt,null),e(Qo,idr),e(Qo,go),M(B8,go,null),e(go,ddr),e(go,F2e),e(F2e,cdr),e(go,fdr),e(go,Ua),e(Ua,mdr),e(Ua,T2e),e(T2e,gdr),e(Ua,hdr),e(Ua,M2e),e(M2e,pdr),e(Ua,_dr),e(Ua,E2e),e(E2e,udr),e(Ua,bdr),e(go,vdr),e(go,Le),e(Le,zF),e(zF,C2e),e(C2e,Fdr),e(zF,Tdr),e(zF,uW),e(uW,Mdr),e(zF,Edr),e(Le,Cdr),e(Le,QF),e(QF,w2e),e(w2e,wdr),e(QF,Adr),e(QF,bW),e(bW,Ldr),e(QF,ydr),e(Le,xdr),e(Le,WF),e(WF,A2e),e(A2e,$dr),e(WF,kdr),e(WF,vW),e(vW,Sdr),e(WF,Rdr),e(Le,Pdr),e(Le,HF),e(HF,L2e),e(L2e,Bdr),e(HF,Idr),e(HF,FW),e(FW,Ndr),e(HF,qdr),e(Le,jdr),e(Le,UF),e(UF,y2e),e(y2e,Ddr),e(UF,Gdr),e(UF,TW),e(TW,Odr),e(UF,Vdr),e(Le,Xdr),e(Le,JF),e(JF,x2e),e(x2e,zdr),e(JF,Qdr),e(JF,MW),e(MW,Wdr),e(JF,Hdr),e(Le,Udr),e(Le,YF),e(YF,$2e),e($2e,Jdr),e(YF,Ydr),e(YF,EW),e(EW,Kdr),e(YF,Zdr),e(Le,ecr),e(Le,KF),e(KF,k2e),e(k2e,ocr),e(KF,rcr),e(KF,CW),e(CW,tcr),e(KF,acr),e(Le,ncr),e(Le,ZF),e(ZF,S2e),e(S2e,scr),e(ZF,lcr),e(ZF,wW),e(wW,icr),e(ZF,dcr),e(Le,ccr),e(Le,eT),e(eT,R2e),e(R2e,fcr),e(eT,mcr),e(eT,AW),e(AW,gcr),e(eT,hcr),e(go,pcr),e(go,oT),e(oT,_cr),e(oT,P2e),e(P2e,ucr),e(oT,bcr),e(oT,B2e),e(B2e,vcr),e(go,Fcr),M(rT,go,null),b(f,UOe,u),b(f,Rd,u),e(Rd,tT),e(tT,I2e),M(I8,I2e,null),e(Rd,Tcr),e(Rd,N2e),e(N2e,Mcr),b(f,JOe,u),b(f,Wo,u),M(N8,Wo,null),e(Wo,Ecr),e(Wo,Pd),e(Pd,Ccr),e(Pd,LW),e(LW,wcr),e(Pd,Acr),e(Pd,yW),e(yW,Lcr),e(Pd,ycr),e(Wo,xcr),e(Wo,q8),e(q8,$cr),e(q8,q2e),e(q2e,kcr),e(q8,Scr),e(Wo,Rcr),e(Wo,Et),M(j8,Et,null),e(Et,Pcr),e(Et,j2e),e(j2e,Bcr),e(Et,Icr),e(Et,Bd),e(Bd,Ncr),e(Bd,D2e),e(D2e,qcr),e(Bd,jcr),e(Bd,xW),e(xW,Dcr),e(Bd,Gcr),e(Et,Ocr),M(aT,Et,null),e(Wo,Vcr),e(Wo,ho),M(D8,ho,null),e(ho,Xcr),e(ho,G2e),e(G2e,zcr),e(ho,Qcr),e(ho,Ja),e(Ja,Wcr),e(Ja,O2e),e(O2e,Hcr),e(Ja,Ucr),e(Ja,V2e),e(V2e,Jcr),e(Ja,Ycr),e(Ja,X2e),e(X2e,Kcr),e(Ja,Zcr),e(ho,efr),e(ho,G8),e(G8,nT),e(nT,z2e),e(z2e,ofr),e(nT,rfr),e(nT,$W),e($W,tfr),e(nT,afr),e(G8,nfr),e(G8,sT),e(sT,Q2e),e(Q2e,sfr),e(sT,lfr),e(sT,kW),e(kW,ifr),e(sT,dfr),e(ho,cfr),e(ho,lT),e(lT,ffr),e(lT,W2e),e(W2e,mfr),e(lT,gfr),e(lT,H2e),e(H2e,hfr),e(ho,pfr),M(iT,ho,null),b(f,YOe,u),b(f,Id,u),e(Id,dT),e(dT,U2e),M(O8,U2e,null),e(Id,_fr),e(Id,J2e),e(J2e,ufr),b(f,KOe,u),b(f,Ho,u),M(V8,Ho,null),e(Ho,bfr),e(Ho,Nd),e(Nd,vfr),e(Nd,SW),e(SW,Ffr),e(Nd,Tfr),e(Nd,RW),e(RW,Mfr),e(Nd,Efr),e(Ho,Cfr),e(Ho,X8),e(X8,wfr),e(X8,Y2e),e(Y2e,Afr),e(X8,Lfr),e(Ho,yfr),e(Ho,Ct),M(z8,Ct,null),e(Ct,xfr),e(Ct,K2e),e(K2e,$fr),e(Ct,kfr),e(Ct,qd),e(qd,Sfr),e(qd,Z2e),e(Z2e,Rfr),e(qd,Pfr),e(qd,PW),e(PW,Bfr),e(qd,Ifr),e(Ct,Nfr),M(cT,Ct,null),e(Ho,qfr),e(Ho,po),M(Q8,po,null),e(po,jfr),e(po,ebe),e(ebe,Dfr),e(po,Gfr),e(po,Ya),e(Ya,Ofr),e(Ya,obe),e(obe,Vfr),e(Ya,Xfr),e(Ya,rbe),e(rbe,zfr),e(Ya,Qfr),e(Ya,tbe),e(tbe,Wfr),e(Ya,Hfr),e(po,Ufr),e(po,ot),e(ot,fT),e(fT,abe),e(abe,Jfr),e(fT,Yfr),e(fT,BW),e(BW,Kfr),e(fT,Zfr),e(ot,emr),e(ot,mT),e(mT,nbe),e(nbe,omr),e(mT,rmr),e(mT,IW),e(IW,tmr),e(mT,amr),e(ot,nmr),e(ot,gT),e(gT,sbe),e(sbe,smr),e(gT,lmr),e(gT,NW),e(NW,imr),e(gT,dmr),e(ot,cmr),e(ot,hT),e(hT,lbe),e(lbe,fmr),e(hT,mmr),e(hT,qW),e(qW,gmr),e(hT,hmr),e(ot,pmr),e(ot,pT),e(pT,ibe),e(ibe,_mr),e(pT,umr),e(pT,jW),e(jW,bmr),e(pT,vmr),e(po,Fmr),e(po,_T),e(_T,Tmr),e(_T,dbe),e(dbe,Mmr),e(_T,Emr),e(_T,cbe),e(cbe,Cmr),e(po,wmr),M(uT,po,null),b(f,ZOe,u),b(f,jd,u),e(jd,bT),e(bT,fbe),M(W8,fbe,null),e(jd,Amr),e(jd,mbe),e(mbe,Lmr),b(f,eVe,u),b(f,Uo,u),M(H8,Uo,null),e(Uo,ymr),e(Uo,Dd),e(Dd,xmr),e(Dd,DW),e(DW,$mr),e(Dd,kmr),e(Dd,GW),e(GW,Smr),e(Dd,Rmr),e(Uo,Pmr),e(Uo,U8),e(U8,Bmr),e(U8,gbe),e(gbe,Imr),e(U8,Nmr),e(Uo,qmr),e(Uo,wt),M(J8,wt,null),e(wt,jmr),e(wt,hbe),e(hbe,Dmr),e(wt,Gmr),e(wt,Gd),e(Gd,Omr),e(Gd,pbe),e(pbe,Vmr),e(Gd,Xmr),e(Gd,OW),e(OW,zmr),e(Gd,Qmr),e(wt,Wmr),M(vT,wt,null),e(Uo,Hmr),e(Uo,_o),M(Y8,_o,null),e(_o,Umr),e(_o,_be),e(_be,Jmr),e(_o,Ymr),e(_o,Ka),e(Ka,Kmr),e(Ka,ube),e(ube,Zmr),e(Ka,egr),e(Ka,bbe),e(bbe,ogr),e(Ka,rgr),e(Ka,vbe),e(vbe,tgr),e(Ka,agr),e(_o,ngr),e(_o,Od),e(Od,FT),e(FT,Fbe),e(Fbe,sgr),e(FT,lgr),e(FT,VW),e(VW,igr),e(FT,dgr),e(Od,cgr),e(Od,TT),e(TT,Tbe),e(Tbe,fgr),e(TT,mgr),e(TT,XW),e(XW,ggr),e(TT,hgr),e(Od,pgr),e(Od,MT),e(MT,Mbe),e(Mbe,_gr),e(MT,ugr),e(MT,zW),e(zW,bgr),e(MT,vgr),e(_o,Fgr),e(_o,ET),e(ET,Tgr),e(ET,Ebe),e(Ebe,Mgr),e(ET,Egr),e(ET,Cbe),e(Cbe,Cgr),e(_o,wgr),M(CT,_o,null),b(f,oVe,u),b(f,Vd,u),e(Vd,wT),e(wT,wbe),M(K8,wbe,null),e(Vd,Agr),e(Vd,Abe),e(Abe,Lgr),b(f,rVe,u),b(f,Jo,u),M(Z8,Jo,null),e(Jo,ygr),e(Jo,Xd),e(Xd,xgr),e(Xd,QW),e(QW,$gr),e(Xd,kgr),e(Xd,WW),e(WW,Sgr),e(Xd,Rgr),e(Jo,Pgr),e(Jo,e9),e(e9,Bgr),e(e9,Lbe),e(Lbe,Igr),e(e9,Ngr),e(Jo,qgr),e(Jo,At),M(o9,At,null),e(At,jgr),e(At,ybe),e(ybe,Dgr),e(At,Ggr),e(At,zd),e(zd,Ogr),e(zd,xbe),e(xbe,Vgr),e(zd,Xgr),e(zd,HW),e(HW,zgr),e(zd,Qgr),e(At,Wgr),M(AT,At,null),e(Jo,Hgr),e(Jo,uo),M(r9,uo,null),e(uo,Ugr),e(uo,$be),e($be,Jgr),e(uo,Ygr),e(uo,Za),e(Za,Kgr),e(Za,kbe),e(kbe,Zgr),e(Za,ehr),e(Za,Sbe),e(Sbe,ohr),e(Za,rhr),e(Za,Rbe),e(Rbe,thr),e(Za,ahr),e(uo,nhr),e(uo,t9),e(t9,LT),e(LT,Pbe),e(Pbe,shr),e(LT,lhr),e(LT,UW),e(UW,ihr),e(LT,dhr),e(t9,chr),e(t9,yT),e(yT,Bbe),e(Bbe,fhr),e(yT,mhr),e(yT,JW),e(JW,ghr),e(yT,hhr),e(uo,phr),e(uo,xT),e(xT,_hr),e(xT,Ibe),e(Ibe,uhr),e(xT,bhr),e(xT,Nbe),e(Nbe,vhr),e(uo,Fhr),M($T,uo,null),b(f,tVe,u),b(f,Qd,u),e(Qd,kT),e(kT,qbe),M(a9,qbe,null),e(Qd,Thr),e(Qd,jbe),e(jbe,Mhr),b(f,aVe,u),b(f,Yo,u),M(n9,Yo,null),e(Yo,Ehr),e(Yo,Wd),e(Wd,Chr),e(Wd,YW),e(YW,whr),e(Wd,Ahr),e(Wd,KW),e(KW,Lhr),e(Wd,yhr),e(Yo,xhr),e(Yo,s9),e(s9,$hr),e(s9,Dbe),e(Dbe,khr),e(s9,Shr),e(Yo,Rhr),e(Yo,Lt),M(l9,Lt,null),e(Lt,Phr),e(Lt,Gbe),e(Gbe,Bhr),e(Lt,Ihr),e(Lt,Hd),e(Hd,Nhr),e(Hd,Obe),e(Obe,qhr),e(Hd,jhr),e(Hd,ZW),e(ZW,Dhr),e(Hd,Ghr),e(Lt,Ohr),M(ST,Lt,null),e(Yo,Vhr),e(Yo,bo),M(i9,bo,null),e(bo,Xhr),e(bo,Vbe),e(Vbe,zhr),e(bo,Qhr),e(bo,en),e(en,Whr),e(en,Xbe),e(Xbe,Hhr),e(en,Uhr),e(en,zbe),e(zbe,Jhr),e(en,Yhr),e(en,Qbe),e(Qbe,Khr),e(en,Zhr),e(bo,epr),e(bo,Wbe),e(Wbe,RT),e(RT,Hbe),e(Hbe,opr),e(RT,rpr),e(RT,eH),e(eH,tpr),e(RT,apr),e(bo,npr),e(bo,PT),e(PT,spr),e(PT,Ube),e(Ube,lpr),e(PT,ipr),e(PT,Jbe),e(Jbe,dpr),e(bo,cpr),M(BT,bo,null),b(f,nVe,u),b(f,Ud,u),e(Ud,IT),e(IT,Ybe),M(d9,Ybe,null),e(Ud,fpr),e(Ud,Kbe),e(Kbe,mpr),b(f,sVe,u),b(f,Ko,u),M(c9,Ko,null),e(Ko,gpr),e(Ko,Jd),e(Jd,hpr),e(Jd,oH),e(oH,ppr),e(Jd,_pr),e(Jd,rH),e(rH,upr),e(Jd,bpr),e(Ko,vpr),e(Ko,f9),e(f9,Fpr),e(f9,Zbe),e(Zbe,Tpr),e(f9,Mpr),e(Ko,Epr),e(Ko,yt),M(m9,yt,null),e(yt,Cpr),e(yt,eve),e(eve,wpr),e(yt,Apr),e(yt,Yd),e(Yd,Lpr),e(Yd,ove),e(ove,ypr),e(Yd,xpr),e(Yd,tH),e(tH,$pr),e(Yd,kpr),e(yt,Spr),M(NT,yt,null),e(Ko,Rpr),e(Ko,vo),M(g9,vo,null),e(vo,Ppr),e(vo,rve),e(rve,Bpr),e(vo,Ipr),e(vo,on),e(on,Npr),e(on,tve),e(tve,qpr),e(on,jpr),e(on,ave),e(ave,Dpr),e(on,Gpr),e(on,nve),e(nve,Opr),e(on,Vpr),e(vo,Xpr),e(vo,rn),e(rn,qT),e(qT,sve),e(sve,zpr),e(qT,Qpr),e(qT,aH),e(aH,Wpr),e(qT,Hpr),e(rn,Upr),e(rn,jT),e(jT,lve),e(lve,Jpr),e(jT,Ypr),e(jT,nH),e(nH,Kpr),e(jT,Zpr),e(rn,e_r),e(rn,DT),e(DT,ive),e(ive,o_r),e(DT,r_r),e(DT,sH),e(sH,t_r),e(DT,a_r),e(rn,n_r),e(rn,GT),e(GT,dve),e(dve,s_r),e(GT,l_r),e(GT,lH),e(lH,i_r),e(GT,d_r),e(vo,c_r),e(vo,OT),e(OT,f_r),e(OT,cve),e(cve,m_r),e(OT,g_r),e(OT,fve),e(fve,h_r),e(vo,p_r),M(VT,vo,null),b(f,lVe,u),b(f,Kd,u),e(Kd,XT),e(XT,mve),M(h9,mve,null),e(Kd,__r),e(Kd,gve),e(gve,u_r),b(f,iVe,u),b(f,Zo,u),M(p9,Zo,null),e(Zo,b_r),e(Zo,Zd),e(Zd,v_r),e(Zd,iH),e(iH,F_r),e(Zd,T_r),e(Zd,dH),e(dH,M_r),e(Zd,E_r),e(Zo,C_r),e(Zo,_9),e(_9,w_r),e(_9,hve),e(hve,A_r),e(_9,L_r),e(Zo,y_r),e(Zo,xt),M(u9,xt,null),e(xt,x_r),e(xt,pve),e(pve,$_r),e(xt,k_r),e(xt,ec),e(ec,S_r),e(ec,_ve),e(_ve,R_r),e(ec,P_r),e(ec,cH),e(cH,B_r),e(ec,I_r),e(xt,N_r),M(zT,xt,null),e(Zo,q_r),e(Zo,Fo),M(b9,Fo,null),e(Fo,j_r),e(Fo,uve),e(uve,D_r),e(Fo,G_r),e(Fo,tn),e(tn,O_r),e(tn,bve),e(bve,V_r),e(tn,X_r),e(tn,vve),e(vve,z_r),e(tn,Q_r),e(tn,Fve),e(Fve,W_r),e(tn,H_r),e(Fo,U_r),e(Fo,Tve),e(Tve,QT),e(QT,Mve),e(Mve,J_r),e(QT,Y_r),e(QT,fH),e(fH,K_r),e(QT,Z_r),e(Fo,eur),e(Fo,WT),e(WT,our),e(WT,Eve),e(Eve,rur),e(WT,tur),e(WT,Cve),e(Cve,aur),e(Fo,nur),M(HT,Fo,null),b(f,dVe,u),b(f,oc,u),e(oc,UT),e(UT,wve),M(v9,wve,null),e(oc,sur),e(oc,Ave),e(Ave,lur),b(f,cVe,u),b(f,er,u),M(F9,er,null),e(er,iur),e(er,rc),e(rc,dur),e(rc,mH),e(mH,cur),e(rc,fur),e(rc,gH),e(gH,mur),e(rc,gur),e(er,hur),e(er,T9),e(T9,pur),e(T9,Lve),e(Lve,_ur),e(T9,uur),e(er,bur),e(er,$t),M(M9,$t,null),e($t,vur),e($t,yve),e(yve,Fur),e($t,Tur),e($t,tc),e(tc,Mur),e(tc,xve),e(xve,Eur),e(tc,Cur),e(tc,hH),e(hH,wur),e(tc,Aur),e($t,Lur),M(JT,$t,null),e(er,yur),e(er,yr),M(E9,yr,null),e(yr,xur),e(yr,$ve),e($ve,$ur),e(yr,kur),e(yr,an),e(an,Sur),e(an,kve),e(kve,Rur),e(an,Pur),e(an,Sve),e(Sve,Bur),e(an,Iur),e(an,Rve),e(Rve,Nur),e(an,qur),e(yr,jur),e(yr,j),e(j,YT),e(YT,Pve),e(Pve,Dur),e(YT,Gur),e(YT,pH),e(pH,Our),e(YT,Vur),e(j,Xur),e(j,KT),e(KT,Bve),e(Bve,zur),e(KT,Qur),e(KT,_H),e(_H,Wur),e(KT,Hur),e(j,Uur),e(j,ZT),e(ZT,Ive),e(Ive,Jur),e(ZT,Yur),e(ZT,uH),e(uH,Kur),e(ZT,Zur),e(j,e1r),e(j,eM),e(eM,Nve),e(Nve,o1r),e(eM,r1r),e(eM,bH),e(bH,t1r),e(eM,a1r),e(j,n1r),e(j,oM),e(oM,qve),e(qve,s1r),e(oM,l1r),e(oM,vH),e(vH,i1r),e(oM,d1r),e(j,c1r),e(j,rM),e(rM,jve),e(jve,f1r),e(rM,m1r),e(rM,FH),e(FH,g1r),e(rM,h1r),e(j,p1r),e(j,tM),e(tM,Dve),e(Dve,_1r),e(tM,u1r),e(tM,TH),e(TH,b1r),e(tM,v1r),e(j,F1r),e(j,aM),e(aM,Gve),e(Gve,T1r),e(aM,M1r),e(aM,MH),e(MH,E1r),e(aM,C1r),e(j,w1r),e(j,nM),e(nM,Ove),e(Ove,A1r),e(nM,L1r),e(nM,EH),e(EH,y1r),e(nM,x1r),e(j,$1r),e(j,sM),e(sM,Vve),e(Vve,k1r),e(sM,S1r),e(sM,CH),e(CH,R1r),e(sM,P1r),e(j,B1r),e(j,lM),e(lM,Xve),e(Xve,I1r),e(lM,N1r),e(lM,wH),e(wH,q1r),e(lM,j1r),e(j,D1r),e(j,iM),e(iM,zve),e(zve,G1r),e(iM,O1r),e(iM,AH),e(AH,V1r),e(iM,X1r),e(j,z1r),e(j,dM),e(dM,Qve),e(Qve,Q1r),e(dM,W1r),e(dM,LH),e(LH,H1r),e(dM,U1r),e(j,J1r),e(j,cM),e(cM,Wve),e(Wve,Y1r),e(cM,K1r),e(cM,yH),e(yH,Z1r),e(cM,e7r),e(j,o7r),e(j,fM),e(fM,Hve),e(Hve,r7r),e(fM,t7r),e(fM,xH),e(xH,a7r),e(fM,n7r),e(j,s7r),e(j,mM),e(mM,Uve),e(Uve,l7r),e(mM,i7r),e(mM,$H),e($H,d7r),e(mM,c7r),e(j,f7r),e(j,gM),e(gM,Jve),e(Jve,m7r),e(gM,g7r),e(gM,kH),e(kH,h7r),e(gM,p7r),e(j,_7r),e(j,Ws),e(Ws,Yve),e(Yve,u7r),e(Ws,b7r),e(Ws,SH),e(SH,v7r),e(Ws,F7r),e(Ws,RH),e(RH,T7r),e(Ws,M7r),e(j,E7r),e(j,hM),e(hM,Kve),e(Kve,C7r),e(hM,w7r),e(hM,PH),e(PH,A7r),e(hM,L7r),e(j,y7r),e(j,pM),e(pM,Zve),e(Zve,x7r),e(pM,$7r),e(pM,BH),e(BH,k7r),e(pM,S7r),e(j,R7r),e(j,_M),e(_M,e0e),e(e0e,P7r),e(_M,B7r),e(_M,IH),e(IH,I7r),e(_M,N7r),e(j,q7r),e(j,uM),e(uM,o0e),e(o0e,j7r),e(uM,D7r),e(uM,NH),e(NH,G7r),e(uM,O7r),e(j,V7r),e(j,bM),e(bM,r0e),e(r0e,X7r),e(bM,z7r),e(bM,qH),e(qH,Q7r),e(bM,W7r),e(j,H7r),e(j,vM),e(vM,t0e),e(t0e,U7r),e(vM,J7r),e(vM,jH),e(jH,Y7r),e(vM,K7r),e(j,Z7r),e(j,FM),e(FM,a0e),e(a0e,e2r),e(FM,o2r),e(FM,DH),e(DH,r2r),e(FM,t2r),e(j,a2r),e(j,TM),e(TM,n0e),e(n0e,n2r),e(TM,s2r),e(TM,GH),e(GH,l2r),e(TM,i2r),e(j,d2r),e(j,MM),e(MM,s0e),e(s0e,c2r),e(MM,f2r),e(MM,OH),e(OH,m2r),e(MM,g2r),e(j,h2r),e(j,EM),e(EM,l0e),e(l0e,p2r),e(EM,_2r),e(EM,VH),e(VH,u2r),e(EM,b2r),e(j,v2r),e(j,CM),e(CM,i0e),e(i0e,F2r),e(CM,T2r),e(CM,XH),e(XH,M2r),e(CM,E2r),e(j,C2r),e(j,wM),e(wM,d0e),e(d0e,w2r),e(wM,A2r),e(wM,zH),e(zH,L2r),e(wM,y2r),e(j,x2r),e(j,AM),e(AM,c0e),e(c0e,$2r),e(AM,k2r),e(AM,QH),e(QH,S2r),e(AM,R2r),e(j,P2r),e(j,LM),e(LM,f0e),e(f0e,B2r),e(LM,I2r),e(LM,WH),e(WH,N2r),e(LM,q2r),e(j,j2r),e(j,yM),e(yM,m0e),e(m0e,D2r),e(yM,G2r),e(yM,HH),e(HH,O2r),e(yM,V2r),e(j,X2r),e(j,xM),e(xM,g0e),e(g0e,z2r),e(xM,Q2r),e(xM,UH),e(UH,W2r),e(xM,H2r),e(j,U2r),e(j,$M),e($M,h0e),e(h0e,J2r),e($M,Y2r),e($M,JH),e(JH,K2r),e($M,Z2r),e(j,ebr),e(j,kM),e(kM,p0e),e(p0e,obr),e(kM,rbr),e(kM,YH),e(YH,tbr),e(kM,abr),e(j,nbr),e(j,SM),e(SM,_0e),e(_0e,sbr),e(SM,lbr),e(SM,KH),e(KH,ibr),e(SM,dbr),e(j,cbr),e(j,RM),e(RM,u0e),e(u0e,fbr),e(RM,mbr),e(RM,ZH),e(ZH,gbr),e(RM,hbr),e(j,pbr),e(j,PM),e(PM,b0e),e(b0e,_br),e(PM,ubr),e(PM,eU),e(eU,bbr),e(PM,vbr),e(j,Fbr),e(j,BM),e(BM,v0e),e(v0e,Tbr),e(BM,Mbr),e(BM,oU),e(oU,Ebr),e(BM,Cbr),e(j,wbr),e(j,IM),e(IM,F0e),e(F0e,Abr),e(IM,Lbr),e(IM,rU),e(rU,ybr),e(IM,xbr),e(j,$br),e(j,NM),e(NM,T0e),e(T0e,kbr),e(NM,Sbr),e(NM,tU),e(tU,Rbr),e(NM,Pbr),e(j,Bbr),e(j,qM),e(qM,M0e),e(M0e,Ibr),e(qM,Nbr),e(qM,aU),e(aU,qbr),e(qM,jbr),e(j,Dbr),e(j,jM),e(jM,E0e),e(E0e,Gbr),e(jM,Obr),e(jM,nU),e(nU,Vbr),e(jM,Xbr),e(j,zbr),e(j,DM),e(DM,C0e),e(C0e,Qbr),e(DM,Wbr),e(DM,sU),e(sU,Hbr),e(DM,Ubr),e(j,Jbr),e(j,GM),e(GM,w0e),e(w0e,Ybr),e(GM,Kbr),e(GM,lU),e(lU,Zbr),e(GM,evr),e(j,ovr),e(j,OM),e(OM,A0e),e(A0e,rvr),e(OM,tvr),e(OM,iU),e(iU,avr),e(OM,nvr),e(yr,svr),M(VM,yr,null),b(f,fVe,u),b(f,ac,u),e(ac,XM),e(XM,L0e),M(C9,L0e,null),e(ac,lvr),e(ac,y0e),e(y0e,ivr),b(f,mVe,u),b(f,or,u),M(w9,or,null),e(or,dvr),e(or,nc),e(nc,cvr),e(nc,dU),e(dU,fvr),e(nc,mvr),e(nc,cU),e(cU,gvr),e(nc,hvr),e(or,pvr),e(or,A9),e(A9,_vr),e(A9,x0e),e(x0e,uvr),e(A9,bvr),e(or,vvr),e(or,kt),M(L9,kt,null),e(kt,Fvr),e(kt,$0e),e($0e,Tvr),e(kt,Mvr),e(kt,sc),e(sc,Evr),e(sc,k0e),e(k0e,Cvr),e(sc,wvr),e(sc,fU),e(fU,Avr),e(sc,Lvr),e(kt,yvr),M(zM,kt,null),e(or,xvr),e(or,xr),M(y9,xr,null),e(xr,$vr),e(xr,S0e),e(S0e,kvr),e(xr,Svr),e(xr,nn),e(nn,Rvr),e(nn,R0e),e(R0e,Pvr),e(nn,Bvr),e(nn,P0e),e(P0e,Ivr),e(nn,Nvr),e(nn,B0e),e(B0e,qvr),e(nn,jvr),e(xr,Dvr),e(xr,se),e(se,QM),e(QM,I0e),e(I0e,Gvr),e(QM,Ovr),e(QM,mU),e(mU,Vvr),e(QM,Xvr),e(se,zvr),e(se,WM),e(WM,N0e),e(N0e,Qvr),e(WM,Wvr),e(WM,gU),e(gU,Hvr),e(WM,Uvr),e(se,Jvr),e(se,HM),e(HM,q0e),e(q0e,Yvr),e(HM,Kvr),e(HM,hU),e(hU,Zvr),e(HM,e0r),e(se,o0r),e(se,UM),e(UM,j0e),e(j0e,r0r),e(UM,t0r),e(UM,pU),e(pU,a0r),e(UM,n0r),e(se,s0r),e(se,JM),e(JM,D0e),e(D0e,l0r),e(JM,i0r),e(JM,_U),e(_U,d0r),e(JM,c0r),e(se,f0r),e(se,YM),e(YM,G0e),e(G0e,m0r),e(YM,g0r),e(YM,uU),e(uU,h0r),e(YM,p0r),e(se,_0r),e(se,KM),e(KM,O0e),e(O0e,u0r),e(KM,b0r),e(KM,bU),e(bU,v0r),e(KM,F0r),e(se,T0r),e(se,ZM),e(ZM,V0e),e(V0e,M0r),e(ZM,E0r),e(ZM,vU),e(vU,C0r),e(ZM,w0r),e(se,A0r),e(se,eE),e(eE,X0e),e(X0e,L0r),e(eE,y0r),e(eE,FU),e(FU,x0r),e(eE,$0r),e(se,k0r),e(se,oE),e(oE,z0e),e(z0e,S0r),e(oE,R0r),e(oE,TU),e(TU,P0r),e(oE,B0r),e(se,I0r),e(se,rE),e(rE,Q0e),e(Q0e,N0r),e(rE,q0r),e(rE,MU),e(MU,j0r),e(rE,D0r),e(se,G0r),e(se,tE),e(tE,W0e),e(W0e,O0r),e(tE,V0r),e(tE,EU),e(EU,X0r),e(tE,z0r),e(se,Q0r),e(se,aE),e(aE,H0e),e(H0e,W0r),e(aE,H0r),e(aE,CU),e(CU,U0r),e(aE,J0r),e(se,Y0r),e(se,nE),e(nE,U0e),e(U0e,K0r),e(nE,Z0r),e(nE,wU),e(wU,eFr),e(nE,oFr),e(se,rFr),e(se,sE),e(sE,J0e),e(J0e,tFr),e(sE,aFr),e(sE,AU),e(AU,nFr),e(sE,sFr),e(se,lFr),e(se,lE),e(lE,Y0e),e(Y0e,iFr),e(lE,dFr),e(lE,LU),e(LU,cFr),e(lE,fFr),e(se,mFr),e(se,iE),e(iE,K0e),e(K0e,gFr),e(iE,hFr),e(iE,yU),e(yU,pFr),e(iE,_Fr),e(se,uFr),e(se,dE),e(dE,Z0e),e(Z0e,bFr),e(dE,vFr),e(dE,xU),e(xU,FFr),e(dE,TFr),e(se,MFr),e(se,cE),e(cE,eFe),e(eFe,EFr),e(cE,CFr),e(cE,$U),e($U,wFr),e(cE,AFr),e(se,LFr),e(se,fE),e(fE,oFe),e(oFe,yFr),e(fE,xFr),e(fE,kU),e(kU,$Fr),e(fE,kFr),e(se,SFr),e(se,mE),e(mE,rFe),e(rFe,RFr),e(mE,PFr),e(mE,SU),e(SU,BFr),e(mE,IFr),e(se,NFr),e(se,gE),e(gE,tFe),e(tFe,qFr),e(gE,jFr),e(gE,RU),e(RU,DFr),e(gE,GFr),e(se,OFr),e(se,hE),e(hE,aFe),e(aFe,VFr),e(hE,XFr),e(hE,PU),e(PU,zFr),e(hE,QFr),e(xr,WFr),M(pE,xr,null),b(f,gVe,u),b(f,lc,u),e(lc,_E),e(_E,nFe),M(x9,nFe,null),e(lc,HFr),e(lc,sFe),e(sFe,UFr),b(f,hVe,u),b(f,rr,u),M($9,rr,null),e(rr,JFr),e(rr,ic),e(ic,YFr),e(ic,BU),e(BU,KFr),e(ic,ZFr),e(ic,IU),e(IU,eTr),e(ic,oTr),e(rr,rTr),e(rr,k9),e(k9,tTr),e(k9,lFe),e(lFe,aTr),e(k9,nTr),e(rr,sTr),e(rr,St),M(S9,St,null),e(St,lTr),e(St,iFe),e(iFe,iTr),e(St,dTr),e(St,dc),e(dc,cTr),e(dc,dFe),e(dFe,fTr),e(dc,mTr),e(dc,NU),e(NU,gTr),e(dc,hTr),e(St,pTr),M(uE,St,null),e(rr,_Tr),e(rr,$r),M(R9,$r,null),e($r,uTr),e($r,cFe),e(cFe,bTr),e($r,vTr),e($r,sn),e(sn,FTr),e(sn,fFe),e(fFe,TTr),e(sn,MTr),e(sn,mFe),e(mFe,ETr),e(sn,CTr),e(sn,gFe),e(gFe,wTr),e(sn,ATr),e($r,LTr),e($r,Me),e(Me,bE),e(bE,hFe),e(hFe,yTr),e(bE,xTr),e(bE,qU),e(qU,$Tr),e(bE,kTr),e(Me,STr),e(Me,vE),e(vE,pFe),e(pFe,RTr),e(vE,PTr),e(vE,jU),e(jU,BTr),e(vE,ITr),e(Me,NTr),e(Me,FE),e(FE,_Fe),e(_Fe,qTr),e(FE,jTr),e(FE,DU),e(DU,DTr),e(FE,GTr),e(Me,OTr),e(Me,TE),e(TE,uFe),e(uFe,VTr),e(TE,XTr),e(TE,GU),e(GU,zTr),e(TE,QTr),e(Me,WTr),e(Me,ME),e(ME,bFe),e(bFe,HTr),e(ME,UTr),e(ME,OU),e(OU,JTr),e(ME,YTr),e(Me,KTr),e(Me,EE),e(EE,vFe),e(vFe,ZTr),e(EE,eMr),e(EE,VU),e(VU,oMr),e(EE,rMr),e(Me,tMr),e(Me,CE),e(CE,FFe),e(FFe,aMr),e(CE,nMr),e(CE,XU),e(XU,sMr),e(CE,lMr),e(Me,iMr),e(Me,wE),e(wE,TFe),e(TFe,dMr),e(wE,cMr),e(wE,zU),e(zU,fMr),e(wE,mMr),e(Me,gMr),e(Me,AE),e(AE,MFe),e(MFe,hMr),e(AE,pMr),e(AE,QU),e(QU,_Mr),e(AE,uMr),e(Me,bMr),e(Me,LE),e(LE,EFe),e(EFe,vMr),e(LE,FMr),e(LE,WU),e(WU,TMr),e(LE,MMr),e(Me,EMr),e(Me,yE),e(yE,CFe),e(CFe,CMr),e(yE,wMr),e(yE,HU),e(HU,AMr),e(yE,LMr),e(Me,yMr),e(Me,xE),e(xE,wFe),e(wFe,xMr),e(xE,$Mr),e(xE,UU),e(UU,kMr),e(xE,SMr),e(Me,RMr),e(Me,$E),e($E,AFe),e(AFe,PMr),e($E,BMr),e($E,JU),e(JU,IMr),e($E,NMr),e($r,qMr),M(kE,$r,null),b(f,pVe,u),b(f,cc,u),e(cc,SE),e(SE,LFe),M(P9,LFe,null),e(cc,jMr),e(cc,yFe),e(yFe,DMr),b(f,_Ve,u),b(f,tr,u),M(B9,tr,null),e(tr,GMr),e(tr,fc),e(fc,OMr),e(fc,YU),e(YU,VMr),e(fc,XMr),e(fc,KU),e(KU,zMr),e(fc,QMr),e(tr,WMr),e(tr,I9),e(I9,HMr),e(I9,xFe),e(xFe,UMr),e(I9,JMr),e(tr,YMr),e(tr,Rt),M(N9,Rt,null),e(Rt,KMr),e(Rt,$Fe),e($Fe,ZMr),e(Rt,eEr),e(Rt,mc),e(mc,oEr),e(mc,kFe),e(kFe,rEr),e(mc,tEr),e(mc,ZU),e(ZU,aEr),e(mc,nEr),e(Rt,sEr),M(RE,Rt,null),e(tr,lEr),e(tr,kr),M(q9,kr,null),e(kr,iEr),e(kr,SFe),e(SFe,dEr),e(kr,cEr),e(kr,ln),e(ln,fEr),e(ln,RFe),e(RFe,mEr),e(ln,gEr),e(ln,PFe),e(PFe,hEr),e(ln,pEr),e(ln,BFe),e(BFe,_Er),e(ln,uEr),e(kr,bEr),e(kr,dn),e(dn,PE),e(PE,IFe),e(IFe,vEr),e(PE,FEr),e(PE,eJ),e(eJ,TEr),e(PE,MEr),e(dn,EEr),e(dn,BE),e(BE,NFe),e(NFe,CEr),e(BE,wEr),e(BE,oJ),e(oJ,AEr),e(BE,LEr),e(dn,yEr),e(dn,IE),e(IE,qFe),e(qFe,xEr),e(IE,$Er),e(IE,rJ),e(rJ,kEr),e(IE,SEr),e(dn,REr),e(dn,NE),e(NE,jFe),e(jFe,PEr),e(NE,BEr),e(NE,tJ),e(tJ,IEr),e(NE,NEr),e(kr,qEr),M(qE,kr,null),b(f,uVe,u),b(f,gc,u),e(gc,jE),e(jE,DFe),M(j9,DFe,null),e(gc,jEr),e(gc,GFe),e(GFe,DEr),b(f,bVe,u),b(f,ar,u),M(D9,ar,null),e(ar,GEr),e(ar,hc),e(hc,OEr),e(hc,aJ),e(aJ,VEr),e(hc,XEr),e(hc,nJ),e(nJ,zEr),e(hc,QEr),e(ar,WEr),e(ar,G9),e(G9,HEr),e(G9,OFe),e(OFe,UEr),e(G9,JEr),e(ar,YEr),e(ar,Pt),M(O9,Pt,null),e(Pt,KEr),e(Pt,VFe),e(VFe,ZEr),e(Pt,e4r),e(Pt,pc),e(pc,o4r),e(pc,XFe),e(XFe,r4r),e(pc,t4r),e(pc,sJ),e(sJ,a4r),e(pc,n4r),e(Pt,s4r),M(DE,Pt,null),e(ar,l4r),e(ar,Sr),M(V9,Sr,null),e(Sr,i4r),e(Sr,zFe),e(zFe,d4r),e(Sr,c4r),e(Sr,cn),e(cn,f4r),e(cn,QFe),e(QFe,m4r),e(cn,g4r),e(cn,WFe),e(WFe,h4r),e(cn,p4r),e(cn,HFe),e(HFe,_4r),e(cn,u4r),e(Sr,b4r),e(Sr,ie),e(ie,GE),e(GE,UFe),e(UFe,v4r),e(GE,F4r),e(GE,lJ),e(lJ,T4r),e(GE,M4r),e(ie,E4r),e(ie,OE),e(OE,JFe),e(JFe,C4r),e(OE,w4r),e(OE,iJ),e(iJ,A4r),e(OE,L4r),e(ie,y4r),e(ie,VE),e(VE,YFe),e(YFe,x4r),e(VE,$4r),e(VE,dJ),e(dJ,k4r),e(VE,S4r),e(ie,R4r),e(ie,XE),e(XE,KFe),e(KFe,P4r),e(XE,B4r),e(XE,cJ),e(cJ,I4r),e(XE,N4r),e(ie,q4r),e(ie,zE),e(zE,ZFe),e(ZFe,j4r),e(zE,D4r),e(zE,fJ),e(fJ,G4r),e(zE,O4r),e(ie,V4r),e(ie,QE),e(QE,eTe),e(eTe,X4r),e(QE,z4r),e(QE,mJ),e(mJ,Q4r),e(QE,W4r),e(ie,H4r),e(ie,WE),e(WE,oTe),e(oTe,U4r),e(WE,J4r),e(WE,gJ),e(gJ,Y4r),e(WE,K4r),e(ie,Z4r),e(ie,HE),e(HE,rTe),e(rTe,eCr),e(HE,oCr),e(HE,hJ),e(hJ,rCr),e(HE,tCr),e(ie,aCr),e(ie,UE),e(UE,tTe),e(tTe,nCr),e(UE,sCr),e(UE,pJ),e(pJ,lCr),e(UE,iCr),e(ie,dCr),e(ie,JE),e(JE,aTe),e(aTe,cCr),e(JE,fCr),e(JE,_J),e(_J,mCr),e(JE,gCr),e(ie,hCr),e(ie,YE),e(YE,nTe),e(nTe,pCr),e(YE,_Cr),e(YE,uJ),e(uJ,uCr),e(YE,bCr),e(ie,vCr),e(ie,KE),e(KE,sTe),e(sTe,FCr),e(KE,TCr),e(KE,bJ),e(bJ,MCr),e(KE,ECr),e(ie,CCr),e(ie,ZE),e(ZE,lTe),e(lTe,wCr),e(ZE,ACr),e(ZE,vJ),e(vJ,LCr),e(ZE,yCr),e(ie,xCr),e(ie,e4),e(e4,iTe),e(iTe,$Cr),e(e4,kCr),e(e4,FJ),e(FJ,SCr),e(e4,RCr),e(ie,PCr),e(ie,o4),e(o4,dTe),e(dTe,BCr),e(o4,ICr),e(o4,TJ),e(TJ,NCr),e(o4,qCr),e(ie,jCr),e(ie,r4),e(r4,cTe),e(cTe,DCr),e(r4,GCr),e(r4,MJ),e(MJ,OCr),e(r4,VCr),e(ie,XCr),e(ie,t4),e(t4,fTe),e(fTe,zCr),e(t4,QCr),e(t4,EJ),e(EJ,WCr),e(t4,HCr),e(ie,UCr),e(ie,a4),e(a4,mTe),e(mTe,JCr),e(a4,YCr),e(a4,CJ),e(CJ,KCr),e(a4,ZCr),e(ie,e5r),e(ie,n4),e(n4,gTe),e(gTe,o5r),e(n4,r5r),e(n4,wJ),e(wJ,t5r),e(n4,a5r),e(ie,n5r),e(ie,s4),e(s4,hTe),e(hTe,s5r),e(s4,l5r),e(s4,AJ),e(AJ,i5r),e(s4,d5r),e(Sr,c5r),M(l4,Sr,null),b(f,vVe,u),b(f,_c,u),e(_c,i4),e(i4,pTe),M(X9,pTe,null),e(_c,f5r),e(_c,_Te),e(_Te,m5r),b(f,FVe,u),b(f,nr,u),M(z9,nr,null),e(nr,g5r),e(nr,uc),e(uc,h5r),e(uc,LJ),e(LJ,p5r),e(uc,_5r),e(uc,yJ),e(yJ,u5r),e(uc,b5r),e(nr,v5r),e(nr,Q9),e(Q9,F5r),e(Q9,uTe),e(uTe,T5r),e(Q9,M5r),e(nr,E5r),e(nr,Bt),M(W9,Bt,null),e(Bt,C5r),e(Bt,bTe),e(bTe,w5r),e(Bt,A5r),e(Bt,bc),e(bc,L5r),e(bc,vTe),e(vTe,y5r),e(bc,x5r),e(bc,xJ),e(xJ,$5r),e(bc,k5r),e(Bt,S5r),M(d4,Bt,null),e(nr,R5r),e(nr,Rr),M(H9,Rr,null),e(Rr,P5r),e(Rr,FTe),e(FTe,B5r),e(Rr,I5r),e(Rr,fn),e(fn,N5r),e(fn,TTe),e(TTe,q5r),e(fn,j5r),e(fn,MTe),e(MTe,D5r),e(fn,G5r),e(fn,ETe),e(ETe,O5r),e(fn,V5r),e(Rr,X5r),e(Rr,ye),e(ye,c4),e(c4,CTe),e(CTe,z5r),e(c4,Q5r),e(c4,$J),e($J,W5r),e(c4,H5r),e(ye,U5r),e(ye,f4),e(f4,wTe),e(wTe,J5r),e(f4,Y5r),e(f4,kJ),e(kJ,K5r),e(f4,Z5r),e(ye,e3r),e(ye,m4),e(m4,ATe),e(ATe,o3r),e(m4,r3r),e(m4,SJ),e(SJ,t3r),e(m4,a3r),e(ye,n3r),e(ye,g4),e(g4,LTe),e(LTe,s3r),e(g4,l3r),e(g4,RJ),e(RJ,i3r),e(g4,d3r),e(ye,c3r),e(ye,h4),e(h4,yTe),e(yTe,f3r),e(h4,m3r),e(h4,PJ),e(PJ,g3r),e(h4,h3r),e(ye,p3r),e(ye,p4),e(p4,xTe),e(xTe,_3r),e(p4,u3r),e(p4,BJ),e(BJ,b3r),e(p4,v3r),e(ye,F3r),e(ye,_4),e(_4,$Te),e($Te,T3r),e(_4,M3r),e(_4,IJ),e(IJ,E3r),e(_4,C3r),e(ye,w3r),e(ye,u4),e(u4,kTe),e(kTe,A3r),e(u4,L3r),e(u4,NJ),e(NJ,y3r),e(u4,x3r),e(ye,$3r),e(ye,b4),e(b4,STe),e(STe,k3r),e(b4,S3r),e(b4,qJ),e(qJ,R3r),e(b4,P3r),e(ye,B3r),e(ye,v4),e(v4,RTe),e(RTe,I3r),e(v4,N3r),e(v4,jJ),e(jJ,q3r),e(v4,j3r),e(Rr,D3r),M(F4,Rr,null),b(f,TVe,u),b(f,vc,u),e(vc,T4),e(T4,PTe),M(U9,PTe,null),e(vc,G3r),e(vc,BTe),e(BTe,O3r),b(f,MVe,u),b(f,sr,u),M(J9,sr,null),e(sr,V3r),e(sr,Fc),e(Fc,X3r),e(Fc,DJ),e(DJ,z3r),e(Fc,Q3r),e(Fc,GJ),e(GJ,W3r),e(Fc,H3r),e(sr,U3r),e(sr,Y9),e(Y9,J3r),e(Y9,ITe),e(ITe,Y3r),e(Y9,K3r),e(sr,Z3r),e(sr,It),M(K9,It,null),e(It,ewr),e(It,NTe),e(NTe,owr),e(It,rwr),e(It,Tc),e(Tc,twr),e(Tc,qTe),e(qTe,awr),e(Tc,nwr),e(Tc,OJ),e(OJ,swr),e(Tc,lwr),e(It,iwr),M(M4,It,null),e(sr,dwr),e(sr,Pr),M(Z9,Pr,null),e(Pr,cwr),e(Pr,jTe),e(jTe,fwr),e(Pr,mwr),e(Pr,mn),e(mn,gwr),e(mn,DTe),e(DTe,hwr),e(mn,pwr),e(mn,GTe),e(GTe,_wr),e(mn,uwr),e(mn,OTe),e(OTe,bwr),e(mn,vwr),e(Pr,Fwr),e(Pr,te),e(te,E4),e(E4,VTe),e(VTe,Twr),e(E4,Mwr),e(E4,VJ),e(VJ,Ewr),e(E4,Cwr),e(te,wwr),e(te,C4),e(C4,XTe),e(XTe,Awr),e(C4,Lwr),e(C4,XJ),e(XJ,ywr),e(C4,xwr),e(te,$wr),e(te,w4),e(w4,zTe),e(zTe,kwr),e(w4,Swr),e(w4,zJ),e(zJ,Rwr),e(w4,Pwr),e(te,Bwr),e(te,A4),e(A4,QTe),e(QTe,Iwr),e(A4,Nwr),e(A4,QJ),e(QJ,qwr),e(A4,jwr),e(te,Dwr),e(te,L4),e(L4,WTe),e(WTe,Gwr),e(L4,Owr),e(L4,WJ),e(WJ,Vwr),e(L4,Xwr),e(te,zwr),e(te,y4),e(y4,HTe),e(HTe,Qwr),e(y4,Wwr),e(y4,HJ),e(HJ,Hwr),e(y4,Uwr),e(te,Jwr),e(te,x4),e(x4,UTe),e(UTe,Ywr),e(x4,Kwr),e(x4,UJ),e(UJ,Zwr),e(x4,eAr),e(te,oAr),e(te,$4),e($4,JTe),e(JTe,rAr),e($4,tAr),e($4,JJ),e(JJ,aAr),e($4,nAr),e(te,sAr),e(te,k4),e(k4,YTe),e(YTe,lAr),e(k4,iAr),e(k4,YJ),e(YJ,dAr),e(k4,cAr),e(te,fAr),e(te,S4),e(S4,KTe),e(KTe,mAr),e(S4,gAr),e(S4,KJ),e(KJ,hAr),e(S4,pAr),e(te,_Ar),e(te,R4),e(R4,ZTe),e(ZTe,uAr),e(R4,bAr),e(R4,ZJ),e(ZJ,vAr),e(R4,FAr),e(te,TAr),e(te,P4),e(P4,eMe),e(eMe,MAr),e(P4,EAr),e(P4,eY),e(eY,CAr),e(P4,wAr),e(te,AAr),e(te,B4),e(B4,oMe),e(oMe,LAr),e(B4,yAr),e(B4,oY),e(oY,xAr),e(B4,$Ar),e(te,kAr),e(te,I4),e(I4,rMe),e(rMe,SAr),e(I4,RAr),e(I4,rY),e(rY,PAr),e(I4,BAr),e(te,IAr),e(te,N4),e(N4,tMe),e(tMe,NAr),e(N4,qAr),e(N4,tY),e(tY,jAr),e(N4,DAr),e(te,GAr),e(te,q4),e(q4,aMe),e(aMe,OAr),e(q4,VAr),e(q4,aY),e(aY,XAr),e(q4,zAr),e(te,QAr),e(te,j4),e(j4,nMe),e(nMe,WAr),e(j4,HAr),e(j4,nY),e(nY,UAr),e(j4,JAr),e(te,YAr),e(te,D4),e(D4,sMe),e(sMe,KAr),e(D4,ZAr),e(D4,sY),e(sY,e6r),e(D4,o6r),e(te,r6r),e(te,G4),e(G4,lMe),e(lMe,t6r),e(G4,a6r),e(G4,lY),e(lY,n6r),e(G4,s6r),e(te,l6r),e(te,O4),e(O4,iMe),e(iMe,i6r),e(O4,d6r),e(O4,iY),e(iY,c6r),e(O4,f6r),e(te,m6r),e(te,V4),e(V4,dMe),e(dMe,g6r),e(V4,h6r),e(V4,dY),e(dY,p6r),e(V4,_6r),e(te,u6r),e(te,X4),e(X4,cMe),e(cMe,b6r),e(X4,v6r),e(X4,cY),e(cY,F6r),e(X4,T6r),e(te,M6r),e(te,z4),e(z4,fMe),e(fMe,E6r),e(z4,C6r),e(z4,fY),e(fY,w6r),e(z4,A6r),e(te,L6r),e(te,Q4),e(Q4,mMe),e(mMe,y6r),e(Q4,x6r),e(Q4,mY),e(mY,$6r),e(Q4,k6r),e(te,S6r),e(te,W4),e(W4,gMe),e(gMe,R6r),e(W4,P6r),e(W4,gY),e(gY,B6r),e(W4,I6r),e(te,N6r),e(te,H4),e(H4,hMe),e(hMe,q6r),e(H4,j6r),e(H4,hY),e(hY,D6r),e(H4,G6r),e(Pr,O6r),M(U4,Pr,null),b(f,EVe,u),b(f,Mc,u),e(Mc,J4),e(J4,pMe),M(ex,pMe,null),e(Mc,V6r),e(Mc,_Me),e(_Me,X6r),b(f,CVe,u),b(f,lr,u),M(ox,lr,null),e(lr,z6r),e(lr,Ec),e(Ec,Q6r),e(Ec,pY),e(pY,W6r),e(Ec,H6r),e(Ec,_Y),e(_Y,U6r),e(Ec,J6r),e(lr,Y6r),e(lr,rx),e(rx,K6r),e(rx,uMe),e(uMe,Z6r),e(rx,eLr),e(lr,oLr),e(lr,Nt),M(tx,Nt,null),e(Nt,rLr),e(Nt,bMe),e(bMe,tLr),e(Nt,aLr),e(Nt,Cc),e(Cc,nLr),e(Cc,vMe),e(vMe,sLr),e(Cc,lLr),e(Cc,uY),e(uY,iLr),e(Cc,dLr),e(Nt,cLr),M(Y4,Nt,null),e(lr,fLr),e(lr,Br),M(ax,Br,null),e(Br,mLr),e(Br,FMe),e(FMe,gLr),e(Br,hLr),e(Br,gn),e(gn,pLr),e(gn,TMe),e(TMe,_Lr),e(gn,uLr),e(gn,MMe),e(MMe,bLr),e(gn,vLr),e(gn,EMe),e(EMe,FLr),e(gn,TLr),e(Br,MLr),e(Br,_e),e(_e,K4),e(K4,CMe),e(CMe,ELr),e(K4,CLr),e(K4,bY),e(bY,wLr),e(K4,ALr),e(_e,LLr),e(_e,Z4),e(Z4,wMe),e(wMe,yLr),e(Z4,xLr),e(Z4,vY),e(vY,$Lr),e(Z4,kLr),e(_e,SLr),e(_e,eC),e(eC,AMe),e(AMe,RLr),e(eC,PLr),e(eC,FY),e(FY,BLr),e(eC,ILr),e(_e,NLr),e(_e,oC),e(oC,LMe),e(LMe,qLr),e(oC,jLr),e(oC,TY),e(TY,DLr),e(oC,GLr),e(_e,OLr),e(_e,rC),e(rC,yMe),e(yMe,VLr),e(rC,XLr),e(rC,MY),e(MY,zLr),e(rC,QLr),e(_e,WLr),e(_e,tC),e(tC,xMe),e(xMe,HLr),e(tC,ULr),e(tC,EY),e(EY,JLr),e(tC,YLr),e(_e,KLr),e(_e,aC),e(aC,$Me),e($Me,ZLr),e(aC,eyr),e(aC,CY),e(CY,oyr),e(aC,ryr),e(_e,tyr),e(_e,nC),e(nC,kMe),e(kMe,ayr),e(nC,nyr),e(nC,wY),e(wY,syr),e(nC,lyr),e(_e,iyr),e(_e,sC),e(sC,SMe),e(SMe,dyr),e(sC,cyr),e(sC,AY),e(AY,fyr),e(sC,myr),e(_e,gyr),e(_e,lC),e(lC,RMe),e(RMe,hyr),e(lC,pyr),e(lC,LY),e(LY,_yr),e(lC,uyr),e(_e,byr),e(_e,iC),e(iC,PMe),e(PMe,vyr),e(iC,Fyr),e(iC,yY),e(yY,Tyr),e(iC,Myr),e(_e,Eyr),e(_e,dC),e(dC,BMe),e(BMe,Cyr),e(dC,wyr),e(dC,xY),e(xY,Ayr),e(dC,Lyr),e(_e,yyr),e(_e,cC),e(cC,IMe),e(IMe,xyr),e(cC,$yr),e(cC,$Y),e($Y,kyr),e(cC,Syr),e(_e,Ryr),e(_e,fC),e(fC,NMe),e(NMe,Pyr),e(fC,Byr),e(fC,kY),e(kY,Iyr),e(fC,Nyr),e(_e,qyr),e(_e,mC),e(mC,qMe),e(qMe,jyr),e(mC,Dyr),e(mC,SY),e(SY,Gyr),e(mC,Oyr),e(_e,Vyr),e(_e,gC),e(gC,jMe),e(jMe,Xyr),e(gC,zyr),e(gC,RY),e(RY,Qyr),e(gC,Wyr),e(_e,Hyr),e(_e,hC),e(hC,DMe),e(DMe,Uyr),e(hC,Jyr),e(hC,PY),e(PY,Yyr),e(hC,Kyr),e(Br,Zyr),M(pC,Br,null),b(f,wVe,u),b(f,wc,u),e(wc,_C),e(_C,GMe),M(nx,GMe,null),e(wc,e8r),e(wc,OMe),e(OMe,o8r),b(f,AVe,u),b(f,ir,u),M(sx,ir,null),e(ir,r8r),e(ir,Ac),e(Ac,t8r),e(Ac,BY),e(BY,a8r),e(Ac,n8r),e(Ac,IY),e(IY,s8r),e(Ac,l8r),e(ir,i8r),e(ir,lx),e(lx,d8r),e(lx,VMe),e(VMe,c8r),e(lx,f8r),e(ir,m8r),e(ir,qt),M(ix,qt,null),e(qt,g8r),e(qt,XMe),e(XMe,h8r),e(qt,p8r),e(qt,Lc),e(Lc,_8r),e(Lc,zMe),e(zMe,u8r),e(Lc,b8r),e(Lc,NY),e(NY,v8r),e(Lc,F8r),e(qt,T8r),M(uC,qt,null),e(ir,M8r),e(ir,Ir),M(dx,Ir,null),e(Ir,E8r),e(Ir,QMe),e(QMe,C8r),e(Ir,w8r),e(Ir,hn),e(hn,A8r),e(hn,WMe),e(WMe,L8r),e(hn,y8r),e(hn,HMe),e(HMe,x8r),e(hn,$8r),e(hn,UMe),e(UMe,k8r),e(hn,S8r),e(Ir,R8r),e(Ir,cx),e(cx,bC),e(bC,JMe),e(JMe,P8r),e(bC,B8r),e(bC,qY),e(qY,I8r),e(bC,N8r),e(cx,q8r),e(cx,vC),e(vC,YMe),e(YMe,j8r),e(vC,D8r),e(vC,jY),e(jY,G8r),e(vC,O8r),e(Ir,V8r),M(FC,Ir,null),b(f,LVe,u),b(f,yc,u),e(yc,TC),e(TC,KMe),M(fx,KMe,null),e(yc,X8r),e(yc,ZMe),e(ZMe,z8r),b(f,yVe,u),b(f,dr,u),M(mx,dr,null),e(dr,Q8r),e(dr,xc),e(xc,W8r),e(xc,DY),e(DY,H8r),e(xc,U8r),e(xc,GY),e(GY,J8r),e(xc,Y8r),e(dr,K8r),e(dr,gx),e(gx,Z8r),e(gx,eEe),e(eEe,e9r),e(gx,o9r),e(dr,r9r),e(dr,jt),M(hx,jt,null),e(jt,t9r),e(jt,oEe),e(oEe,a9r),e(jt,n9r),e(jt,$c),e($c,s9r),e($c,rEe),e(rEe,l9r),e($c,i9r),e($c,OY),e(OY,d9r),e($c,c9r),e(jt,f9r),M(MC,jt,null),e(dr,m9r),e(dr,Nr),M(px,Nr,null),e(Nr,g9r),e(Nr,tEe),e(tEe,h9r),e(Nr,p9r),e(Nr,pn),e(pn,_9r),e(pn,aEe),e(aEe,u9r),e(pn,b9r),e(pn,nEe),e(nEe,v9r),e(pn,F9r),e(pn,sEe),e(sEe,T9r),e(pn,M9r),e(Nr,E9r),e(Nr,lEe),e(lEe,EC),e(EC,iEe),e(iEe,C9r),e(EC,w9r),e(EC,VY),e(VY,A9r),e(EC,L9r),e(Nr,y9r),M(CC,Nr,null),b(f,xVe,u),b(f,kc,u),e(kc,wC),e(wC,dEe),M(_x,dEe,null),e(kc,x9r),e(kc,cEe),e(cEe,$9r),b(f,$Ve,u),b(f,cr,u),M(ux,cr,null),e(cr,k9r),e(cr,Sc),e(Sc,S9r),e(Sc,XY),e(XY,R9r),e(Sc,P9r),e(Sc,zY),e(zY,B9r),e(Sc,I9r),e(cr,N9r),e(cr,bx),e(bx,q9r),e(bx,fEe),e(fEe,j9r),e(bx,D9r),e(cr,G9r),e(cr,Dt),M(vx,Dt,null),e(Dt,O9r),e(Dt,mEe),e(mEe,V9r),e(Dt,X9r),e(Dt,Rc),e(Rc,z9r),e(Rc,gEe),e(gEe,Q9r),e(Rc,W9r),e(Rc,QY),e(QY,H9r),e(Rc,U9r),e(Dt,J9r),M(AC,Dt,null),e(cr,Y9r),e(cr,qr),M(Fx,qr,null),e(qr,K9r),e(qr,hEe),e(hEe,Z9r),e(qr,exr),e(qr,_n),e(_n,oxr),e(_n,pEe),e(pEe,rxr),e(_n,txr),e(_n,_Ee),e(_Ee,axr),e(_n,nxr),e(_n,uEe),e(uEe,sxr),e(_n,lxr),e(qr,ixr),e(qr,de),e(de,LC),e(LC,bEe),e(bEe,dxr),e(LC,cxr),e(LC,WY),e(WY,fxr),e(LC,mxr),e(de,gxr),e(de,yC),e(yC,vEe),e(vEe,hxr),e(yC,pxr),e(yC,HY),e(HY,_xr),e(yC,uxr),e(de,bxr),e(de,xC),e(xC,FEe),e(FEe,vxr),e(xC,Fxr),e(xC,UY),e(UY,Txr),e(xC,Mxr),e(de,Exr),e(de,$C),e($C,TEe),e(TEe,Cxr),e($C,wxr),e($C,JY),e(JY,Axr),e($C,Lxr),e(de,yxr),e(de,kC),e(kC,MEe),e(MEe,xxr),e(kC,$xr),e(kC,YY),e(YY,kxr),e(kC,Sxr),e(de,Rxr),e(de,SC),e(SC,EEe),e(EEe,Pxr),e(SC,Bxr),e(SC,KY),e(KY,Ixr),e(SC,Nxr),e(de,qxr),e(de,RC),e(RC,CEe),e(CEe,jxr),e(RC,Dxr),e(RC,ZY),e(ZY,Gxr),e(RC,Oxr),e(de,Vxr),e(de,PC),e(PC,wEe),e(wEe,Xxr),e(PC,zxr),e(PC,eK),e(eK,Qxr),e(PC,Wxr),e(de,Hxr),e(de,BC),e(BC,AEe),e(AEe,Uxr),e(BC,Jxr),e(BC,oK),e(oK,Yxr),e(BC,Kxr),e(de,Zxr),e(de,IC),e(IC,LEe),e(LEe,e$r),e(IC,o$r),e(IC,rK),e(rK,r$r),e(IC,t$r),e(de,a$r),e(de,NC),e(NC,yEe),e(yEe,n$r),e(NC,s$r),e(NC,tK),e(tK,l$r),e(NC,i$r),e(de,d$r),e(de,qC),e(qC,xEe),e(xEe,c$r),e(qC,f$r),e(qC,aK),e(aK,m$r),e(qC,g$r),e(de,h$r),e(de,jC),e(jC,$Ee),e($Ee,p$r),e(jC,_$r),e(jC,nK),e(nK,u$r),e(jC,b$r),e(de,v$r),e(de,DC),e(DC,kEe),e(kEe,F$r),e(DC,T$r),e(DC,sK),e(sK,M$r),e(DC,E$r),e(de,C$r),e(de,GC),e(GC,SEe),e(SEe,w$r),e(GC,A$r),e(GC,lK),e(lK,L$r),e(GC,y$r),e(de,x$r),e(de,OC),e(OC,REe),e(REe,$$r),e(OC,k$r),e(OC,iK),e(iK,S$r),e(OC,R$r),e(de,P$r),e(de,VC),e(VC,PEe),e(PEe,B$r),e(VC,I$r),e(VC,dK),e(dK,N$r),e(VC,q$r),e(de,j$r),e(de,XC),e(XC,BEe),e(BEe,D$r),e(XC,G$r),e(XC,cK),e(cK,O$r),e(XC,V$r),e(de,X$r),e(de,zC),e(zC,IEe),e(IEe,z$r),e(zC,Q$r),e(zC,fK),e(fK,W$r),e(zC,H$r),e(de,U$r),e(de,QC),e(QC,NEe),e(NEe,J$r),e(QC,Y$r),e(QC,mK),e(mK,K$r),e(QC,Z$r),e(qr,ekr),M(WC,qr,null),b(f,kVe,u),b(f,Pc,u),e(Pc,HC),e(HC,qEe),M(Tx,qEe,null),e(Pc,okr),e(Pc,jEe),e(jEe,rkr),b(f,SVe,u),b(f,fr,u),M(Mx,fr,null),e(fr,tkr),e(fr,Bc),e(Bc,akr),e(Bc,gK),e(gK,nkr),e(Bc,skr),e(Bc,hK),e(hK,lkr),e(Bc,ikr),e(fr,dkr),e(fr,Ex),e(Ex,ckr),e(Ex,DEe),e(DEe,fkr),e(Ex,mkr),e(fr,gkr),e(fr,Gt),M(Cx,Gt,null),e(Gt,hkr),e(Gt,GEe),e(GEe,pkr),e(Gt,_kr),e(Gt,Ic),e(Ic,ukr),e(Ic,OEe),e(OEe,bkr),e(Ic,vkr),e(Ic,pK),e(pK,Fkr),e(Ic,Tkr),e(Gt,Mkr),M(UC,Gt,null),e(fr,Ekr),e(fr,jr),M(wx,jr,null),e(jr,Ckr),e(jr,VEe),e(VEe,wkr),e(jr,Akr),e(jr,un),e(un,Lkr),e(un,XEe),e(XEe,ykr),e(un,xkr),e(un,zEe),e(zEe,$kr),e(un,kkr),e(un,QEe),e(QEe,Skr),e(un,Rkr),e(jr,Pkr),e(jr,ce),e(ce,JC),e(JC,WEe),e(WEe,Bkr),e(JC,Ikr),e(JC,_K),e(_K,Nkr),e(JC,qkr),e(ce,jkr),e(ce,YC),e(YC,HEe),e(HEe,Dkr),e(YC,Gkr),e(YC,uK),e(uK,Okr),e(YC,Vkr),e(ce,Xkr),e(ce,KC),e(KC,UEe),e(UEe,zkr),e(KC,Qkr),e(KC,bK),e(bK,Wkr),e(KC,Hkr),e(ce,Ukr),e(ce,ZC),e(ZC,JEe),e(JEe,Jkr),e(ZC,Ykr),e(ZC,vK),e(vK,Kkr),e(ZC,Zkr),e(ce,eSr),e(ce,e5),e(e5,YEe),e(YEe,oSr),e(e5,rSr),e(e5,FK),e(FK,tSr),e(e5,aSr),e(ce,nSr),e(ce,o5),e(o5,KEe),e(KEe,sSr),e(o5,lSr),e(o5,TK),e(TK,iSr),e(o5,dSr),e(ce,cSr),e(ce,r5),e(r5,ZEe),e(ZEe,fSr),e(r5,mSr),e(r5,MK),e(MK,gSr),e(r5,hSr),e(ce,pSr),e(ce,t5),e(t5,e4e),e(e4e,_Sr),e(t5,uSr),e(t5,EK),e(EK,bSr),e(t5,vSr),e(ce,FSr),e(ce,a5),e(a5,o4e),e(o4e,TSr),e(a5,MSr),e(a5,CK),e(CK,ESr),e(a5,CSr),e(ce,wSr),e(ce,n5),e(n5,r4e),e(r4e,ASr),e(n5,LSr),e(n5,wK),e(wK,ySr),e(n5,xSr),e(ce,$Sr),e(ce,s5),e(s5,t4e),e(t4e,kSr),e(s5,SSr),e(s5,AK),e(AK,RSr),e(s5,PSr),e(ce,BSr),e(ce,l5),e(l5,a4e),e(a4e,ISr),e(l5,NSr),e(l5,LK),e(LK,qSr),e(l5,jSr),e(ce,DSr),e(ce,i5),e(i5,n4e),e(n4e,GSr),e(i5,OSr),e(i5,yK),e(yK,VSr),e(i5,XSr),e(ce,zSr),e(ce,d5),e(d5,s4e),e(s4e,QSr),e(d5,WSr),e(d5,xK),e(xK,HSr),e(d5,USr),e(ce,JSr),e(ce,c5),e(c5,l4e),e(l4e,YSr),e(c5,KSr),e(c5,$K),e($K,ZSr),e(c5,eRr),e(ce,oRr),e(ce,f5),e(f5,i4e),e(i4e,rRr),e(f5,tRr),e(f5,kK),e(kK,aRr),e(f5,nRr),e(ce,sRr),e(ce,m5),e(m5,d4e),e(d4e,lRr),e(m5,iRr),e(m5,SK),e(SK,dRr),e(m5,cRr),e(ce,fRr),e(ce,g5),e(g5,c4e),e(c4e,mRr),e(g5,gRr),e(g5,RK),e(RK,hRr),e(g5,pRr),e(ce,_Rr),e(ce,h5),e(h5,f4e),e(f4e,uRr),e(h5,bRr),e(h5,PK),e(PK,vRr),e(h5,FRr),e(ce,TRr),e(ce,p5),e(p5,m4e),e(m4e,MRr),e(p5,ERr),e(p5,BK),e(BK,CRr),e(p5,wRr),e(jr,ARr),M(_5,jr,null),b(f,RVe,u),b(f,Nc,u),e(Nc,u5),e(u5,g4e),M(Ax,g4e,null),e(Nc,LRr),e(Nc,h4e),e(h4e,yRr),b(f,PVe,u),b(f,mr,u),M(Lx,mr,null),e(mr,xRr),e(mr,qc),e(qc,$Rr),e(qc,IK),e(IK,kRr),e(qc,SRr),e(qc,NK),e(NK,RRr),e(qc,PRr),e(mr,BRr),e(mr,yx),e(yx,IRr),e(yx,p4e),e(p4e,NRr),e(yx,qRr),e(mr,jRr),e(mr,Ot),M(xx,Ot,null),e(Ot,DRr),e(Ot,_4e),e(_4e,GRr),e(Ot,ORr),e(Ot,jc),e(jc,VRr),e(jc,u4e),e(u4e,XRr),e(jc,zRr),e(jc,qK),e(qK,QRr),e(jc,WRr),e(Ot,HRr),M(b5,Ot,null),e(mr,URr),e(mr,Dr),M($x,Dr,null),e(Dr,JRr),e(Dr,b4e),e(b4e,YRr),e(Dr,KRr),e(Dr,bn),e(bn,ZRr),e(bn,v4e),e(v4e,ePr),e(bn,oPr),e(bn,F4e),e(F4e,rPr),e(bn,tPr),e(bn,T4e),e(T4e,aPr),e(bn,nPr),e(Dr,sPr),e(Dr,M4e),e(M4e,v5),e(v5,E4e),e(E4e,lPr),e(v5,iPr),e(v5,jK),e(jK,dPr),e(v5,cPr),e(Dr,fPr),M(F5,Dr,null),b(f,BVe,u),b(f,Dc,u),e(Dc,T5),e(T5,C4e),M(kx,C4e,null),e(Dc,mPr),e(Dc,w4e),e(w4e,gPr),b(f,IVe,u),b(f,gr,u),M(Sx,gr,null),e(gr,hPr),e(gr,Gc),e(Gc,pPr),e(Gc,DK),e(DK,_Pr),e(Gc,uPr),e(Gc,GK),e(GK,bPr),e(Gc,vPr),e(gr,FPr),e(gr,Rx),e(Rx,TPr),e(Rx,A4e),e(A4e,MPr),e(Rx,EPr),e(gr,CPr),e(gr,Vt),M(Px,Vt,null),e(Vt,wPr),e(Vt,L4e),e(L4e,APr),e(Vt,LPr),e(Vt,Oc),e(Oc,yPr),e(Oc,y4e),e(y4e,xPr),e(Oc,$Pr),e(Oc,OK),e(OK,kPr),e(Oc,SPr),e(Vt,RPr),M(M5,Vt,null),e(gr,PPr),e(gr,Gr),M(Bx,Gr,null),e(Gr,BPr),e(Gr,x4e),e(x4e,IPr),e(Gr,NPr),e(Gr,vn),e(vn,qPr),e(vn,$4e),e($4e,jPr),e(vn,DPr),e(vn,k4e),e(k4e,GPr),e(vn,OPr),e(vn,S4e),e(S4e,VPr),e(vn,XPr),e(Gr,zPr),e(Gr,R4e),e(R4e,E5),e(E5,P4e),e(P4e,QPr),e(E5,WPr),e(E5,VK),e(VK,HPr),e(E5,UPr),e(Gr,JPr),M(C5,Gr,null),b(f,NVe,u),b(f,Vc,u),e(Vc,w5),e(w5,B4e),M(Ix,B4e,null),e(Vc,YPr),e(Vc,I4e),e(I4e,KPr),b(f,qVe,u),b(f,hr,u),M(Nx,hr,null),e(hr,ZPr),e(hr,Xc),e(Xc,eBr),e(Xc,XK),e(XK,oBr),e(Xc,rBr),e(Xc,zK),e(zK,tBr),e(Xc,aBr),e(hr,nBr),e(hr,qx),e(qx,sBr),e(qx,N4e),e(N4e,lBr),e(qx,iBr),e(hr,dBr),e(hr,Xt),M(jx,Xt,null),e(Xt,cBr),e(Xt,q4e),e(q4e,fBr),e(Xt,mBr),e(Xt,zc),e(zc,gBr),e(zc,j4e),e(j4e,hBr),e(zc,pBr),e(zc,QK),e(QK,_Br),e(zc,uBr),e(Xt,bBr),M(A5,Xt,null),e(hr,vBr),e(hr,Or),M(Dx,Or,null),e(Or,FBr),e(Or,D4e),e(D4e,TBr),e(Or,MBr),e(Or,Fn),e(Fn,EBr),e(Fn,G4e),e(G4e,CBr),e(Fn,wBr),e(Fn,O4e),e(O4e,ABr),e(Fn,LBr),e(Fn,V4e),e(V4e,yBr),e(Fn,xBr),e(Or,$Br),e(Or,oe),e(oe,L5),e(L5,X4e),e(X4e,kBr),e(L5,SBr),e(L5,WK),e(WK,RBr),e(L5,PBr),e(oe,BBr),e(oe,y5),e(y5,z4e),e(z4e,IBr),e(y5,NBr),e(y5,HK),e(HK,qBr),e(y5,jBr),e(oe,DBr),e(oe,x5),e(x5,Q4e),e(Q4e,GBr),e(x5,OBr),e(x5,UK),e(UK,VBr),e(x5,XBr),e(oe,zBr),e(oe,$5),e($5,W4e),e(W4e,QBr),e($5,WBr),e($5,JK),e(JK,HBr),e($5,UBr),e(oe,JBr),e(oe,k5),e(k5,H4e),e(H4e,YBr),e(k5,KBr),e(k5,YK),e(YK,ZBr),e(k5,eIr),e(oe,oIr),e(oe,S5),e(S5,U4e),e(U4e,rIr),e(S5,tIr),e(S5,KK),e(KK,aIr),e(S5,nIr),e(oe,sIr),e(oe,R5),e(R5,J4e),e(J4e,lIr),e(R5,iIr),e(R5,ZK),e(ZK,dIr),e(R5,cIr),e(oe,fIr),e(oe,P5),e(P5,Y4e),e(Y4e,mIr),e(P5,gIr),e(P5,eZ),e(eZ,hIr),e(P5,pIr),e(oe,_Ir),e(oe,B5),e(B5,K4e),e(K4e,uIr),e(B5,bIr),e(B5,oZ),e(oZ,vIr),e(B5,FIr),e(oe,TIr),e(oe,I5),e(I5,Z4e),e(Z4e,MIr),e(I5,EIr),e(I5,rZ),e(rZ,CIr),e(I5,wIr),e(oe,AIr),e(oe,N5),e(N5,eCe),e(eCe,LIr),e(N5,yIr),e(N5,tZ),e(tZ,xIr),e(N5,$Ir),e(oe,kIr),e(oe,q5),e(q5,oCe),e(oCe,SIr),e(q5,RIr),e(q5,aZ),e(aZ,PIr),e(q5,BIr),e(oe,IIr),e(oe,j5),e(j5,rCe),e(rCe,NIr),e(j5,qIr),e(j5,nZ),e(nZ,jIr),e(j5,DIr),e(oe,GIr),e(oe,D5),e(D5,tCe),e(tCe,OIr),e(D5,VIr),e(D5,sZ),e(sZ,XIr),e(D5,zIr),e(oe,QIr),e(oe,G5),e(G5,aCe),e(aCe,WIr),e(G5,HIr),e(G5,lZ),e(lZ,UIr),e(G5,JIr),e(oe,YIr),e(oe,O5),e(O5,nCe),e(nCe,KIr),e(O5,ZIr),e(O5,iZ),e(iZ,eNr),e(O5,oNr),e(oe,rNr),e(oe,V5),e(V5,sCe),e(sCe,tNr),e(V5,aNr),e(V5,dZ),e(dZ,nNr),e(V5,sNr),e(oe,lNr),e(oe,X5),e(X5,lCe),e(lCe,iNr),e(X5,dNr),e(X5,cZ),e(cZ,cNr),e(X5,fNr),e(oe,mNr),e(oe,z5),e(z5,iCe),e(iCe,gNr),e(z5,hNr),e(z5,fZ),e(fZ,pNr),e(z5,_Nr),e(oe,uNr),e(oe,Q5),e(Q5,dCe),e(dCe,bNr),e(Q5,vNr),e(Q5,mZ),e(mZ,FNr),e(Q5,TNr),e(oe,MNr),e(oe,W5),e(W5,cCe),e(cCe,ENr),e(W5,CNr),e(W5,gZ),e(gZ,wNr),e(W5,ANr),e(oe,LNr),e(oe,H5),e(H5,fCe),e(fCe,yNr),e(H5,xNr),e(H5,hZ),e(hZ,$Nr),e(H5,kNr),e(oe,SNr),e(oe,U5),e(U5,mCe),e(mCe,RNr),e(U5,PNr),e(U5,pZ),e(pZ,BNr),e(U5,INr),e(oe,NNr),e(oe,J5),e(J5,gCe),e(gCe,qNr),e(J5,jNr),e(J5,_Z),e(_Z,DNr),e(J5,GNr),e(oe,ONr),e(oe,Y5),e(Y5,hCe),e(hCe,VNr),e(Y5,XNr),e(Y5,uZ),e(uZ,zNr),e(Y5,QNr),e(oe,WNr),e(oe,K5),e(K5,pCe),e(pCe,HNr),e(K5,UNr),e(K5,bZ),e(bZ,JNr),e(K5,YNr),e(oe,KNr),e(oe,Z5),e(Z5,_Ce),e(_Ce,ZNr),e(Z5,eqr),e(Z5,vZ),e(vZ,oqr),e(Z5,rqr),e(Or,tqr),M(e3,Or,null),b(f,jVe,u),b(f,Qc,u),e(Qc,o3),e(o3,uCe),M(Gx,uCe,null),e(Qc,aqr),e(Qc,bCe),e(bCe,nqr),b(f,DVe,u),b(f,pr,u),M(Ox,pr,null),e(pr,sqr),e(pr,Wc),e(Wc,lqr),e(Wc,FZ),e(FZ,iqr),e(Wc,dqr),e(Wc,TZ),e(TZ,cqr),e(Wc,fqr),e(pr,mqr),e(pr,Vx),e(Vx,gqr),e(Vx,vCe),e(vCe,hqr),e(Vx,pqr),e(pr,_qr),e(pr,zt),M(Xx,zt,null),e(zt,uqr),e(zt,FCe),e(FCe,bqr),e(zt,vqr),e(zt,Hc),e(Hc,Fqr),e(Hc,TCe),e(TCe,Tqr),e(Hc,Mqr),e(Hc,MZ),e(MZ,Eqr),e(Hc,Cqr),e(zt,wqr),M(r3,zt,null),e(pr,Aqr),e(pr,Vr),M(zx,Vr,null),e(Vr,Lqr),e(Vr,MCe),e(MCe,yqr),e(Vr,xqr),e(Vr,Tn),e(Tn,$qr),e(Tn,ECe),e(ECe,kqr),e(Tn,Sqr),e(Tn,CCe),e(CCe,Rqr),e(Tn,Pqr),e(Tn,wCe),e(wCe,Bqr),e(Tn,Iqr),e(Vr,Nqr),e(Vr,xe),e(xe,t3),e(t3,ACe),e(ACe,qqr),e(t3,jqr),e(t3,EZ),e(EZ,Dqr),e(t3,Gqr),e(xe,Oqr),e(xe,a3),e(a3,LCe),e(LCe,Vqr),e(a3,Xqr),e(a3,CZ),e(CZ,zqr),e(a3,Qqr),e(xe,Wqr),e(xe,n3),e(n3,yCe),e(yCe,Hqr),e(n3,Uqr),e(n3,wZ),e(wZ,Jqr),e(n3,Yqr),e(xe,Kqr),e(xe,s3),e(s3,xCe),e(xCe,Zqr),e(s3,ejr),e(s3,AZ),e(AZ,ojr),e(s3,rjr),e(xe,tjr),e(xe,l3),e(l3,$Ce),e($Ce,ajr),e(l3,njr),e(l3,LZ),e(LZ,sjr),e(l3,ljr),e(xe,ijr),e(xe,i3),e(i3,kCe),e(kCe,djr),e(i3,cjr),e(i3,yZ),e(yZ,fjr),e(i3,mjr),e(xe,gjr),e(xe,d3),e(d3,SCe),e(SCe,hjr),e(d3,pjr),e(d3,xZ),e(xZ,_jr),e(d3,ujr),e(xe,bjr),e(xe,c3),e(c3,RCe),e(RCe,vjr),e(c3,Fjr),e(c3,$Z),e($Z,Tjr),e(c3,Mjr),e(xe,Ejr),e(xe,f3),e(f3,PCe),e(PCe,Cjr),e(f3,wjr),e(f3,kZ),e(kZ,Ajr),e(f3,Ljr),e(xe,yjr),e(xe,m3),e(m3,BCe),e(BCe,xjr),e(m3,$jr),e(m3,SZ),e(SZ,kjr),e(m3,Sjr),e(Vr,Rjr),M(g3,Vr,null),b(f,GVe,u),b(f,Uc,u),e(Uc,h3),e(h3,ICe),M(Qx,ICe,null),e(Uc,Pjr),e(Uc,NCe),e(NCe,Bjr),b(f,OVe,u),b(f,_r,u),M(Wx,_r,null),e(_r,Ijr),e(_r,Jc),e(Jc,Njr),e(Jc,RZ),e(RZ,qjr),e(Jc,jjr),e(Jc,PZ),e(PZ,Djr),e(Jc,Gjr),e(_r,Ojr),e(_r,Hx),e(Hx,Vjr),e(Hx,qCe),e(qCe,Xjr),e(Hx,zjr),e(_r,Qjr),e(_r,Qt),M(Ux,Qt,null),e(Qt,Wjr),e(Qt,jCe),e(jCe,Hjr),e(Qt,Ujr),e(Qt,Yc),e(Yc,Jjr),e(Yc,DCe),e(DCe,Yjr),e(Yc,Kjr),e(Yc,BZ),e(BZ,Zjr),e(Yc,eDr),e(Qt,oDr),M(p3,Qt,null),e(_r,rDr),e(_r,Xr),M(Jx,Xr,null),e(Xr,tDr),e(Xr,GCe),e(GCe,aDr),e(Xr,nDr),e(Xr,Mn),e(Mn,sDr),e(Mn,OCe),e(OCe,lDr),e(Mn,iDr),e(Mn,VCe),e(VCe,dDr),e(Mn,cDr),e(Mn,XCe),e(XCe,fDr),e(Mn,mDr),e(Xr,gDr),e(Xr,Ee),e(Ee,_3),e(_3,zCe),e(zCe,hDr),e(_3,pDr),e(_3,IZ),e(IZ,_Dr),e(_3,uDr),e(Ee,bDr),e(Ee,u3),e(u3,QCe),e(QCe,vDr),e(u3,FDr),e(u3,NZ),e(NZ,TDr),e(u3,MDr),e(Ee,EDr),e(Ee,b3),e(b3,WCe),e(WCe,CDr),e(b3,wDr),e(b3,qZ),e(qZ,ADr),e(b3,LDr),e(Ee,yDr),e(Ee,v3),e(v3,HCe),e(HCe,xDr),e(v3,$Dr),e(v3,jZ),e(jZ,kDr),e(v3,SDr),e(Ee,RDr),e(Ee,F3),e(F3,UCe),e(UCe,PDr),e(F3,BDr),e(F3,DZ),e(DZ,IDr),e(F3,NDr),e(Ee,qDr),e(Ee,T3),e(T3,JCe),e(JCe,jDr),e(T3,DDr),e(T3,GZ),e(GZ,GDr),e(T3,ODr),e(Ee,VDr),e(Ee,M3),e(M3,YCe),e(YCe,XDr),e(M3,zDr),e(M3,OZ),e(OZ,QDr),e(M3,WDr),e(Ee,HDr),e(Ee,E3),e(E3,KCe),e(KCe,UDr),e(E3,JDr),e(E3,VZ),e(VZ,YDr),e(E3,KDr),e(Ee,ZDr),e(Ee,C3),e(C3,ZCe),e(ZCe,eGr),e(C3,oGr),e(C3,XZ),e(XZ,rGr),e(C3,tGr),e(Ee,aGr),e(Ee,w3),e(w3,e5e),e(e5e,nGr),e(w3,sGr),e(w3,zZ),e(zZ,lGr),e(w3,iGr),e(Ee,dGr),e(Ee,A3),e(A3,o5e),e(o5e,cGr),e(A3,fGr),e(A3,QZ),e(QZ,mGr),e(A3,gGr),e(Ee,hGr),e(Ee,L3),e(L3,r5e),e(r5e,pGr),e(L3,_Gr),e(L3,WZ),e(WZ,uGr),e(L3,bGr),e(Ee,vGr),e(Ee,y3),e(y3,t5e),e(t5e,FGr),e(y3,TGr),e(y3,HZ),e(HZ,MGr),e(y3,EGr),e(Xr,CGr),M(x3,Xr,null),b(f,VVe,u),b(f,Kc,u),e(Kc,$3),e($3,a5e),M(Yx,a5e,null),e(Kc,wGr),e(Kc,n5e),e(n5e,AGr),b(f,XVe,u),b(f,ur,u),M(Kx,ur,null),e(ur,LGr),e(ur,Zc),e(Zc,yGr),e(Zc,UZ),e(UZ,xGr),e(Zc,$Gr),e(Zc,JZ),e(JZ,kGr),e(Zc,SGr),e(ur,RGr),e(ur,Zx),e(Zx,PGr),e(Zx,s5e),e(s5e,BGr),e(Zx,IGr),e(ur,NGr),e(ur,Wt),M(e$,Wt,null),e(Wt,qGr),e(Wt,l5e),e(l5e,jGr),e(Wt,DGr),e(Wt,ef),e(ef,GGr),e(ef,i5e),e(i5e,OGr),e(ef,VGr),e(ef,YZ),e(YZ,XGr),e(ef,zGr),e(Wt,QGr),M(k3,Wt,null),e(ur,WGr),e(ur,zr),M(o$,zr,null),e(zr,HGr),e(zr,d5e),e(d5e,UGr),e(zr,JGr),e(zr,En),e(En,YGr),e(En,c5e),e(c5e,KGr),e(En,ZGr),e(En,f5e),e(f5e,eOr),e(En,oOr),e(En,m5e),e(m5e,rOr),e(En,tOr),e(zr,aOr),e(zr,$e),e($e,S3),e(S3,g5e),e(g5e,nOr),e(S3,sOr),e(S3,KZ),e(KZ,lOr),e(S3,iOr),e($e,dOr),e($e,R3),e(R3,h5e),e(h5e,cOr),e(R3,fOr),e(R3,ZZ),e(ZZ,mOr),e(R3,gOr),e($e,hOr),e($e,P3),e(P3,p5e),e(p5e,pOr),e(P3,_Or),e(P3,eee),e(eee,uOr),e(P3,bOr),e($e,vOr),e($e,B3),e(B3,_5e),e(_5e,FOr),e(B3,TOr),e(B3,oee),e(oee,MOr),e(B3,EOr),e($e,COr),e($e,I3),e(I3,u5e),e(u5e,wOr),e(I3,AOr),e(I3,ree),e(ree,LOr),e(I3,yOr),e($e,xOr),e($e,N3),e(N3,b5e),e(b5e,$Or),e(N3,kOr),e(N3,tee),e(tee,SOr),e(N3,ROr),e($e,POr),e($e,q3),e(q3,v5e),e(v5e,BOr),e(q3,IOr),e(q3,aee),e(aee,NOr),e(q3,qOr),e($e,jOr),e($e,j3),e(j3,F5e),e(F5e,DOr),e(j3,GOr),e(j3,nee),e(nee,OOr),e(j3,VOr),e($e,XOr),e($e,D3),e(D3,T5e),e(T5e,zOr),e(D3,QOr),e(D3,see),e(see,WOr),e(D3,HOr),e($e,UOr),e($e,G3),e(G3,M5e),e(M5e,JOr),e(G3,YOr),e(G3,lee),e(lee,KOr),e(G3,ZOr),e(zr,eVr),M(O3,zr,null),b(f,zVe,u),b(f,of,u),e(of,V3),e(V3,E5e),M(r$,E5e,null),e(of,oVr),e(of,C5e),e(C5e,rVr),b(f,QVe,u),b(f,br,u),M(t$,br,null),e(br,tVr),e(br,rf),e(rf,aVr),e(rf,iee),e(iee,nVr),e(rf,sVr),e(rf,dee),e(dee,lVr),e(rf,iVr),e(br,dVr),e(br,a$),e(a$,cVr),e(a$,w5e),e(w5e,fVr),e(a$,mVr),e(br,gVr),e(br,Ht),M(n$,Ht,null),e(Ht,hVr),e(Ht,A5e),e(A5e,pVr),e(Ht,_Vr),e(Ht,tf),e(tf,uVr),e(tf,L5e),e(L5e,bVr),e(tf,vVr),e(tf,cee),e(cee,FVr),e(tf,TVr),e(Ht,MVr),M(X3,Ht,null),e(br,EVr),e(br,Qr),M(s$,Qr,null),e(Qr,CVr),e(Qr,y5e),e(y5e,wVr),e(Qr,AVr),e(Qr,Cn),e(Cn,LVr),e(Cn,x5e),e(x5e,yVr),e(Cn,xVr),e(Cn,$5e),e($5e,$Vr),e(Cn,kVr),e(Cn,k5e),e(k5e,SVr),e(Cn,RVr),e(Qr,PVr),e(Qr,ke),e(ke,z3),e(z3,S5e),e(S5e,BVr),e(z3,IVr),e(z3,fee),e(fee,NVr),e(z3,qVr),e(ke,jVr),e(ke,Q3),e(Q3,R5e),e(R5e,DVr),e(Q3,GVr),e(Q3,mee),e(mee,OVr),e(Q3,VVr),e(ke,XVr),e(ke,W3),e(W3,P5e),e(P5e,zVr),e(W3,QVr),e(W3,gee),e(gee,WVr),e(W3,HVr),e(ke,UVr),e(ke,H3),e(H3,B5e),e(B5e,JVr),e(H3,YVr),e(H3,hee),e(hee,KVr),e(H3,ZVr),e(ke,eXr),e(ke,U3),e(U3,I5e),e(I5e,oXr),e(U3,rXr),e(U3,pee),e(pee,tXr),e(U3,aXr),e(ke,nXr),e(ke,J3),e(J3,N5e),e(N5e,sXr),e(J3,lXr),e(J3,_ee),e(_ee,iXr),e(J3,dXr),e(ke,cXr),e(ke,Y3),e(Y3,q5e),e(q5e,fXr),e(Y3,mXr),e(Y3,uee),e(uee,gXr),e(Y3,hXr),e(ke,pXr),e(ke,K3),e(K3,j5e),e(j5e,_Xr),e(K3,uXr),e(K3,bee),e(bee,bXr),e(K3,vXr),e(ke,FXr),e(ke,Z3),e(Z3,D5e),e(D5e,TXr),e(Z3,MXr),e(Z3,vee),e(vee,EXr),e(Z3,CXr),e(ke,wXr),e(ke,ew),e(ew,G5e),e(G5e,AXr),e(ew,LXr),e(ew,Fee),e(Fee,yXr),e(ew,xXr),e(Qr,$Xr),M(ow,Qr,null),b(f,WVe,u),b(f,af,u),e(af,rw),e(rw,O5e),M(l$,O5e,null),e(af,kXr),e(af,V5e),e(V5e,SXr),b(f,HVe,u),b(f,vr,u),M(i$,vr,null),e(vr,RXr),e(vr,nf),e(nf,PXr),e(nf,Tee),e(Tee,BXr),e(nf,IXr),e(nf,Mee),e(Mee,NXr),e(nf,qXr),e(vr,jXr),e(vr,d$),e(d$,DXr),e(d$,X5e),e(X5e,GXr),e(d$,OXr),e(vr,VXr),e(vr,Ut),M(c$,Ut,null),e(Ut,XXr),e(Ut,z5e),e(z5e,zXr),e(Ut,QXr),e(Ut,sf),e(sf,WXr),e(sf,Q5e),e(Q5e,HXr),e(sf,UXr),e(sf,Eee),e(Eee,JXr),e(sf,YXr),e(Ut,KXr),M(tw,Ut,null),e(vr,ZXr),e(vr,Wr),M(f$,Wr,null),e(Wr,ezr),e(Wr,W5e),e(W5e,ozr),e(Wr,rzr),e(Wr,wn),e(wn,tzr),e(wn,H5e),e(H5e,azr),e(wn,nzr),e(wn,U5e),e(U5e,szr),e(wn,lzr),e(wn,J5e),e(J5e,izr),e(wn,dzr),e(Wr,czr),e(Wr,Se),e(Se,aw),e(aw,Y5e),e(Y5e,fzr),e(aw,mzr),e(aw,Cee),e(Cee,gzr),e(aw,hzr),e(Se,pzr),e(Se,nw),e(nw,K5e),e(K5e,_zr),e(nw,uzr),e(nw,wee),e(wee,bzr),e(nw,vzr),e(Se,Fzr),e(Se,sw),e(sw,Z5e),e(Z5e,Tzr),e(sw,Mzr),e(sw,Aee),e(Aee,Ezr),e(sw,Czr),e(Se,wzr),e(Se,lw),e(lw,e3e),e(e3e,Azr),e(lw,Lzr),e(lw,Lee),e(Lee,yzr),e(lw,xzr),e(Se,$zr),e(Se,iw),e(iw,o3e),e(o3e,kzr),e(iw,Szr),e(iw,yee),e(yee,Rzr),e(iw,Pzr),e(Se,Bzr),e(Se,dw),e(dw,r3e),e(r3e,Izr),e(dw,Nzr),e(dw,xee),e(xee,qzr),e(dw,jzr),e(Se,Dzr),e(Se,cw),e(cw,t3e),e(t3e,Gzr),e(cw,Ozr),e(cw,$ee),e($ee,Vzr),e(cw,Xzr),e(Se,zzr),e(Se,fw),e(fw,a3e),e(a3e,Qzr),e(fw,Wzr),e(fw,kee),e(kee,Hzr),e(fw,Uzr),e(Se,Jzr),e(Se,mw),e(mw,n3e),e(n3e,Yzr),e(mw,Kzr),e(mw,See),e(See,Zzr),e(mw,eQr),e(Se,oQr),e(Se,gw),e(gw,s3e),e(s3e,rQr),e(gw,tQr),e(gw,Ree),e(Ree,aQr),e(gw,nQr),e(Wr,sQr),M(hw,Wr,null),b(f,UVe,u),b(f,lf,u),e(lf,pw),e(pw,l3e),M(m$,l3e,null),e(lf,lQr),e(lf,i3e),e(i3e,iQr),b(f,JVe,u),b(f,Fr,u),M(g$,Fr,null),e(Fr,dQr),e(Fr,df),e(df,cQr),e(df,Pee),e(Pee,fQr),e(df,mQr),e(df,Bee),e(Bee,gQr),e(df,hQr),e(Fr,pQr),e(Fr,h$),e(h$,_Qr),e(h$,d3e),e(d3e,uQr),e(h$,bQr),e(Fr,vQr),e(Fr,Jt),M(p$,Jt,null),e(Jt,FQr),e(Jt,c3e),e(c3e,TQr),e(Jt,MQr),e(Jt,cf),e(cf,EQr),e(cf,f3e),e(f3e,CQr),e(cf,wQr),e(cf,Iee),e(Iee,AQr),e(cf,LQr),e(Jt,yQr),M(_w,Jt,null),e(Fr,xQr),e(Fr,Hr),M(_$,Hr,null),e(Hr,$Qr),e(Hr,m3e),e(m3e,kQr),e(Hr,SQr),e(Hr,An),e(An,RQr),e(An,g3e),e(g3e,PQr),e(An,BQr),e(An,h3e),e(h3e,IQr),e(An,NQr),e(An,p3e),e(p3e,qQr),e(An,jQr),e(Hr,DQr),e(Hr,Re),e(Re,uw),e(uw,_3e),e(_3e,GQr),e(uw,OQr),e(uw,Nee),e(Nee,VQr),e(uw,XQr),e(Re,zQr),e(Re,bw),e(bw,u3e),e(u3e,QQr),e(bw,WQr),e(bw,qee),e(qee,HQr),e(bw,UQr),e(Re,JQr),e(Re,vw),e(vw,b3e),e(b3e,YQr),e(vw,KQr),e(vw,jee),e(jee,ZQr),e(vw,eWr),e(Re,oWr),e(Re,Fw),e(Fw,v3e),e(v3e,rWr),e(Fw,tWr),e(Fw,Dee),e(Dee,aWr),e(Fw,nWr),e(Re,sWr),e(Re,Tw),e(Tw,F3e),e(F3e,lWr),e(Tw,iWr),e(Tw,Gee),e(Gee,dWr),e(Tw,cWr),e(Re,fWr),e(Re,Mw),e(Mw,T3e),e(T3e,mWr),e(Mw,gWr),e(Mw,Oee),e(Oee,hWr),e(Mw,pWr),e(Re,_Wr),e(Re,Ew),e(Ew,M3e),e(M3e,uWr),e(Ew,bWr),e(Ew,Vee),e(Vee,vWr),e(Ew,FWr),e(Re,TWr),e(Re,Cw),e(Cw,E3e),e(E3e,MWr),e(Cw,EWr),e(Cw,Xee),e(Xee,CWr),e(Cw,wWr),e(Re,AWr),e(Re,ww),e(ww,C3e),e(C3e,LWr),e(ww,yWr),e(ww,zee),e(zee,xWr),e(ww,$Wr),e(Re,kWr),e(Re,Aw),e(Aw,w3e),e(w3e,SWr),e(Aw,RWr),e(Aw,Qee),e(Qee,PWr),e(Aw,BWr),e(Hr,IWr),M(Lw,Hr,null),b(f,YVe,u),b(f,ff,u),e(ff,yw),e(yw,A3e),M(u$,A3e,null),e(ff,NWr),e(ff,L3e),e(L3e,qWr),b(f,KVe,u),b(f,Tr,u),M(b$,Tr,null),e(Tr,jWr),e(Tr,mf),e(mf,DWr),e(mf,Wee),e(Wee,GWr),e(mf,OWr),e(mf,Hee),e(Hee,VWr),e(mf,XWr),e(Tr,zWr),e(Tr,v$),e(v$,QWr),e(v$,y3e),e(y3e,WWr),e(v$,HWr),e(Tr,UWr),e(Tr,Yt),M(F$,Yt,null),e(Yt,JWr),e(Yt,x3e),e(x3e,YWr),e(Yt,KWr),e(Yt,gf),e(gf,ZWr),e(gf,$3e),e($3e,eHr),e(gf,oHr),e(gf,Uee),e(Uee,rHr),e(gf,tHr),e(Yt,aHr),M(xw,Yt,null),e(Tr,nHr),e(Tr,Ur),M(T$,Ur,null),e(Ur,sHr),e(Ur,k3e),e(k3e,lHr),e(Ur,iHr),e(Ur,Ln),e(Ln,dHr),e(Ln,S3e),e(S3e,cHr),e(Ln,fHr),e(Ln,R3e),e(R3e,mHr),e(Ln,gHr),e(Ln,P3e),e(P3e,hHr),e(Ln,pHr),e(Ur,_Hr),e(Ur,Ve),e(Ve,$w),e($w,B3e),e(B3e,uHr),e($w,bHr),e($w,Jee),e(Jee,vHr),e($w,FHr),e(Ve,THr),e(Ve,kw),e(kw,I3e),e(I3e,MHr),e(kw,EHr),e(kw,Yee),e(Yee,CHr),e(kw,wHr),e(Ve,AHr),e(Ve,Sw),e(Sw,N3e),e(N3e,LHr),e(Sw,yHr),e(Sw,Kee),e(Kee,xHr),e(Sw,$Hr),e(Ve,kHr),e(Ve,Rw),e(Rw,q3e),e(q3e,SHr),e(Rw,RHr),e(Rw,Zee),e(Zee,PHr),e(Rw,BHr),e(Ve,IHr),e(Ve,Pw),e(Pw,j3e),e(j3e,NHr),e(Pw,qHr),e(Pw,eoe),e(eoe,jHr),e(Pw,DHr),e(Ve,GHr),e(Ve,Bw),e(Bw,D3e),e(D3e,OHr),e(Bw,VHr),e(Bw,ooe),e(ooe,XHr),e(Bw,zHr),e(Ve,QHr),e(Ve,Iw),e(Iw,G3e),e(G3e,WHr),e(Iw,HHr),e(Iw,roe),e(roe,UHr),e(Iw,JHr),e(Ve,YHr),e(Ve,Nw),e(Nw,O3e),e(O3e,KHr),e(Nw,ZHr),e(Nw,toe),e(toe,eUr),e(Nw,oUr),e(Ur,rUr),M(qw,Ur,null),b(f,ZVe,u),b(f,hf,u),e(hf,jw),e(jw,V3e),M(M$,V3e,null),e(hf,tUr),e(hf,X3e),e(X3e,aUr),b(f,eXe,u),b(f,Mr,u),M(E$,Mr,null),e(Mr,nUr),e(Mr,pf),e(pf,sUr),e(pf,aoe),e(aoe,lUr),e(pf,iUr),e(pf,noe),e(noe,dUr),e(pf,cUr),e(Mr,fUr),e(Mr,C$),e(C$,mUr),e(C$,z3e),e(z3e,gUr),e(C$,hUr),e(Mr,pUr),e(Mr,Kt),M(w$,Kt,null),e(Kt,_Ur),e(Kt,Q3e),e(Q3e,uUr),e(Kt,bUr),e(Kt,_f),e(_f,vUr),e(_f,W3e),e(W3e,FUr),e(_f,TUr),e(_f,soe),e(soe,MUr),e(_f,EUr),e(Kt,CUr),M(Dw,Kt,null),e(Mr,wUr),e(Mr,Jr),M(A$,Jr,null),e(Jr,AUr),e(Jr,H3e),e(H3e,LUr),e(Jr,yUr),e(Jr,yn),e(yn,xUr),e(yn,U3e),e(U3e,$Ur),e(yn,kUr),e(yn,J3e),e(J3e,SUr),e(yn,RUr),e(yn,Y3e),e(Y3e,PUr),e(yn,BUr),e(Jr,IUr),e(Jr,Xe),e(Xe,Gw),e(Gw,K3e),e(K3e,NUr),e(Gw,qUr),e(Gw,loe),e(loe,jUr),e(Gw,DUr),e(Xe,GUr),e(Xe,Ow),e(Ow,Z3e),e(Z3e,OUr),e(Ow,VUr),e(Ow,ioe),e(ioe,XUr),e(Ow,zUr),e(Xe,QUr),e(Xe,Vw),e(Vw,ewe),e(ewe,WUr),e(Vw,HUr),e(Vw,doe),e(doe,UUr),e(Vw,JUr),e(Xe,YUr),e(Xe,Xw),e(Xw,owe),e(owe,KUr),e(Xw,ZUr),e(Xw,coe),e(coe,eJr),e(Xw,oJr),e(Xe,rJr),e(Xe,zw),e(zw,rwe),e(rwe,tJr),e(zw,aJr),e(zw,foe),e(foe,nJr),e(zw,sJr),e(Xe,lJr),e(Xe,Qw),e(Qw,twe),e(twe,iJr),e(Qw,dJr),e(Qw,moe),e(moe,cJr),e(Qw,fJr),e(Xe,mJr),e(Xe,Ww),e(Ww,awe),e(awe,gJr),e(Ww,hJr),e(Ww,goe),e(goe,pJr),e(Ww,_Jr),e(Xe,uJr),e(Xe,Hw),e(Hw,nwe),e(nwe,bJr),e(Hw,vJr),e(Hw,hoe),e(hoe,FJr),e(Hw,TJr),e(Jr,MJr),M(Uw,Jr,null),b(f,oXe,u),b(f,uf,u),e(uf,Jw),e(Jw,swe),M(L$,swe,null),e(uf,EJr),e(uf,lwe),e(lwe,CJr),b(f,rXe,u),b(f,Er,u),M(y$,Er,null),e(Er,wJr),e(Er,bf),e(bf,AJr),e(bf,poe),e(poe,LJr),e(bf,yJr),e(bf,_oe),e(_oe,xJr),e(bf,$Jr),e(Er,kJr),e(Er,x$),e(x$,SJr),e(x$,iwe),e(iwe,RJr),e(x$,PJr),e(Er,BJr),e(Er,Zt),M($$,Zt,null),e(Zt,IJr),e(Zt,dwe),e(dwe,NJr),e(Zt,qJr),e(Zt,vf),e(vf,jJr),e(vf,cwe),e(cwe,DJr),e(vf,GJr),e(vf,uoe),e(uoe,OJr),e(vf,VJr),e(Zt,XJr),M(Yw,Zt,null),e(Er,zJr),e(Er,Yr),M(k$,Yr,null),e(Yr,QJr),e(Yr,fwe),e(fwe,WJr),e(Yr,HJr),e(Yr,xn),e(xn,UJr),e(xn,mwe),e(mwe,JJr),e(xn,YJr),e(xn,gwe),e(gwe,KJr),e(xn,ZJr),e(xn,hwe),e(hwe,eYr),e(xn,oYr),e(Yr,rYr),e(Yr,pwe),e(pwe,Kw),e(Kw,_we),e(_we,tYr),e(Kw,aYr),e(Kw,boe),e(boe,nYr),e(Kw,sYr),e(Yr,lYr),M(Zw,Yr,null),b(f,tXe,u),b(f,Ff,u),e(Ff,eA),e(eA,uwe),M(S$,uwe,null),e(Ff,iYr),e(Ff,bwe),e(bwe,dYr),b(f,aXe,u),b(f,Cr,u),M(R$,Cr,null),e(Cr,cYr),e(Cr,Tf),e(Tf,fYr),e(Tf,voe),e(voe,mYr),e(Tf,gYr),e(Tf,Foe),e(Foe,hYr),e(Tf,pYr),e(Cr,_Yr),e(Cr,P$),e(P$,uYr),e(P$,vwe),e(vwe,bYr),e(P$,vYr),e(Cr,FYr),e(Cr,ea),M(B$,ea,null),e(ea,TYr),e(ea,Fwe),e(Fwe,MYr),e(ea,EYr),e(ea,Mf),e(Mf,CYr),e(Mf,Twe),e(Twe,wYr),e(Mf,AYr),e(Mf,Toe),e(Toe,LYr),e(Mf,yYr),e(ea,xYr),M(oA,ea,null),e(Cr,$Yr),e(Cr,Kr),M(I$,Kr,null),e(Kr,kYr),e(Kr,Mwe),e(Mwe,SYr),e(Kr,RYr),e(Kr,$n),e($n,PYr),e($n,Ewe),e(Ewe,BYr),e($n,IYr),e($n,Cwe),e(Cwe,NYr),e($n,qYr),e($n,wwe),e(wwe,jYr),e($n,DYr),e(Kr,GYr),e(Kr,N$),e(N$,rA),e(rA,Awe),e(Awe,OYr),e(rA,VYr),e(rA,Moe),e(Moe,XYr),e(rA,zYr),e(N$,QYr),e(N$,tA),e(tA,Lwe),e(Lwe,WYr),e(tA,HYr),e(tA,Eoe),e(Eoe,UYr),e(tA,JYr),e(Kr,YYr),M(aA,Kr,null),b(f,nXe,u),b(f,Ef,u),e(Ef,nA),e(nA,ywe),M(q$,ywe,null),e(Ef,KYr),e(Ef,xwe),e(xwe,ZYr),b(f,sXe,u),b(f,wr,u),M(j$,wr,null),e(wr,eKr),e(wr,Cf),e(Cf,oKr),e(Cf,Coe),e(Coe,rKr),e(Cf,tKr),e(Cf,woe),e(woe,aKr),e(Cf,nKr),e(wr,sKr),e(wr,D$),e(D$,lKr),e(D$,$we),e($we,iKr),e(D$,dKr),e(wr,cKr),e(wr,oa),M(G$,oa,null),e(oa,fKr),e(oa,kwe),e(kwe,mKr),e(oa,gKr),e(oa,wf),e(wf,hKr),e(wf,Swe),e(Swe,pKr),e(wf,_Kr),e(wf,Aoe),e(Aoe,uKr),e(wf,bKr),e(oa,vKr),M(sA,oa,null),e(wr,FKr),e(wr,Zr),M(O$,Zr,null),e(Zr,TKr),e(Zr,Rwe),e(Rwe,MKr),e(Zr,EKr),e(Zr,kn),e(kn,CKr),e(kn,Pwe),e(Pwe,wKr),e(kn,AKr),e(kn,Bwe),e(Bwe,LKr),e(kn,yKr),e(kn,Iwe),e(Iwe,xKr),e(kn,$Kr),e(Zr,kKr),e(Zr,Nwe),e(Nwe,lA),e(lA,qwe),e(qwe,SKr),e(lA,RKr),e(lA,Loe),e(Loe,PKr),e(lA,BKr),e(Zr,IKr),M(iA,Zr,null),lXe=!0},p(f,[u]){const V$={};u&2&&(V$.$$scope={dirty:u,ctx:f}),Pf.$set(V$);const jwe={};u&2&&(jwe.$$scope={dirty:u,ctx:f}),Vg.$set(jwe);const Dwe={};u&2&&(Dwe.$$scope={dirty:u,ctx:f}),wh.$set(Dwe);const Gwe={};u&2&&(Gwe.$$scope={dirty:u,ctx:f}),sp.$set(Gwe);const X$={};u&2&&(X$.$$scope={dirty:u,ctx:f}),lp.$set(X$);const Owe={};u&2&&(Owe.$$scope={dirty:u,ctx:f}),Lp.$set(Owe);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),yp.$set(Sn);const Vwe={};u&2&&(Vwe.$$scope={dirty:u,ctx:f}),kp.$set(Vwe);const Xwe={};u&2&&(Xwe.$$scope={dirty:u,ctx:f}),Su.$set(Xwe);const zwe={};u&2&&(zwe.$$scope={dirty:u,ctx:f}),Pu.$set(zwe);const z$={};u&2&&(z$.$$scope={dirty:u,ctx:f}),A1.$set(z$);const Qwe={};u&2&&(Qwe.$$scope={dirty:u,ctx:f}),y1.$set(Qwe);const Q$={};u&2&&(Q$.$$scope={dirty:u,ctx:f}),p7.$set(Q$);const Wwe={};u&2&&(Wwe.$$scope={dirty:u,ctx:f}),u7.$set(Wwe);const W$={};u&2&&(W$.$$scope={dirty:u,ctx:f}),r2.$set(W$);const Hwe={};u&2&&(Hwe.$$scope={dirty:u,ctx:f}),a2.$set(Hwe);const Uwe={};u&2&&(Uwe.$$scope={dirty:u,ctx:f}),E2.$set(Uwe);const Jwe={};u&2&&(Jwe.$$scope={dirty:u,ctx:f}),w2.$set(Jwe);const Af={};u&2&&(Af.$$scope={dirty:u,ctx:f}),Mb.$set(Af);const Ywe={};u&2&&(Ywe.$$scope={dirty:u,ctx:f}),Cb.$set(Ywe);const Kwe={};u&2&&(Kwe.$$scope={dirty:u,ctx:f}),rv.$set(Kwe);const Zwe={};u&2&&(Zwe.$$scope={dirty:u,ctx:f}),av.$set(Zwe);const H$={};u&2&&(H$.$$scope={dirty:u,ctx:f}),mv.$set(H$);const eAe={};u&2&&(eAe.$$scope={dirty:u,ctx:f}),hv.$set(eAe);const oAe={};u&2&&(oAe.$$scope={dirty:u,ctx:f}),Kv.$set(oAe);const rAe={};u&2&&(rAe.$$scope={dirty:u,ctx:f}),e0.$set(rAe);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),V0.$set(rt);const U$={};u&2&&(U$.$$scope={dirty:u,ctx:f}),z0.$set(U$);const tAe={};u&2&&(tAe.$$scope={dirty:u,ctx:f}),H0.$set(tAe);const J$={};u&2&&(J$.$$scope={dirty:u,ctx:f}),J0.$set(J$);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),cF.$set(aAe);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),mF.$set(tt);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),pF.$set(nAe);const Lf={};u&2&&(Lf.$$scope={dirty:u,ctx:f}),uF.$set(Lf);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),FF.$set(sAe);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),MF.$set(lAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),RF.$set(L);const dA={};u&2&&(dA.$$scope={dirty:u,ctx:f}),BF.$set(dA);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),OF.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),XF.$set(dAe);const cA={};u&2&&(cA.$$scope={dirty:u,ctx:f}),rT.$set(cA);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),aT.$set(cAe);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),iT.$set(fAe);const fA={};u&2&&(fA.$$scope={dirty:u,ctx:f}),cT.$set(fA);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),uT.$set(mAe);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),vT.$set(gAe);const mA={};u&2&&(mA.$$scope={dirty:u,ctx:f}),CT.$set(mA);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),AT.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),$T.$set(pAe);const gA={};u&2&&(gA.$$scope={dirty:u,ctx:f}),ST.$set(gA);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),BT.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),NT.$set(uAe);const hA={};u&2&&(hA.$$scope={dirty:u,ctx:f}),VT.$set(hA);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),zT.$set(bAe);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),HT.$set(vAe);const pA={};u&2&&(pA.$$scope={dirty:u,ctx:f}),JT.$set(pA);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),VM.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),zM.$set(TAe);const _A={};u&2&&(_A.$$scope={dirty:u,ctx:f}),pE.$set(_A);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),uE.$set(MAe);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),kE.$set(EAe);const uA={};u&2&&(uA.$$scope={dirty:u,ctx:f}),RE.$set(uA);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),qE.$set(CAe);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),DE.$set(wAe);const bA={};u&2&&(bA.$$scope={dirty:u,ctx:f}),l4.$set(bA);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),d4.$set(AAe);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),F4.$set(LAe);const vA={};u&2&&(vA.$$scope={dirty:u,ctx:f}),M4.$set(vA);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),U4.$set(yAe);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),Y4.$set(xAe);const FA={};u&2&&(FA.$$scope={dirty:u,ctx:f}),pC.$set(FA);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),uC.$set($Ae);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),FC.$set(kAe);const TA={};u&2&&(TA.$$scope={dirty:u,ctx:f}),MC.$set(TA);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),CC.$set(SAe);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),AC.$set(RAe);const MA={};u&2&&(MA.$$scope={dirty:u,ctx:f}),WC.$set(MA);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),UC.$set(PAe);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),_5.$set(BAe);const EA={};u&2&&(EA.$$scope={dirty:u,ctx:f}),b5.$set(EA);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),F5.$set(IAe);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),M5.$set(NAe);const CA={};u&2&&(CA.$$scope={dirty:u,ctx:f}),C5.$set(CA);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),A5.$set(qAe);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),e3.$set(jAe);const wA={};u&2&&(wA.$$scope={dirty:u,ctx:f}),r3.$set(wA);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),g3.$set(DAe);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),p3.$set(GAe);const AA={};u&2&&(AA.$$scope={dirty:u,ctx:f}),x3.$set(AA);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),k3.$set(OAe);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),O3.$set(VAe);const LA={};u&2&&(LA.$$scope={dirty:u,ctx:f}),X3.$set(LA);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),ow.$set(XAe);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),tw.$set(zAe);const yA={};u&2&&(yA.$$scope={dirty:u,ctx:f}),hw.$set(yA);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),_w.$set(QAe);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),Lw.$set(WAe);const xA={};u&2&&(xA.$$scope={dirty:u,ctx:f}),xw.$set(xA);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),qw.$set(HAe);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),Dw.$set(UAe);const $A={};u&2&&($A.$$scope={dirty:u,ctx:f}),Uw.$set($A);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),Yw.$set(JAe);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),Zw.$set(YAe);const kA={};u&2&&(kA.$$scope={dirty:u,ctx:f}),oA.$set(kA);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),aA.$set(KAe);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),sA.$set(ZAe);const SA={};u&2&&(SA.$$scope={dirty:u,ctx:f}),iA.$set(SA)},i(f){lXe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(Pf.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(jL.$$.fragment,f),E(Vg.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(zL.$$.fragment,f),E(wh.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(YL.$$.fragment,f),E(sp.$$.fragment,f),E(lp.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ty.$$.fragment,f),E(Lp.$$.fragment,f),E(yp.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(kp.$$.fragment,f),E(dy.$$.fragment,f),E(Su.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(Pu.$$.fragment,f),E(hy.$$.fragment,f),E(A1.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(y1.$$.fragment,f),E(vy.$$.fragment,f),E(p7.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(u7.$$.fragment,f),E(Cy.$$.fragment,f),E(r2.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(a2.$$.fragment,f),E(xy.$$.fragment,f),E(E2.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(w2.$$.fragment,f),E(Py.$$.fragment,f),E(Mb.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(Cb.$$.fragment,f),E(jy.$$.fragment,f),E(rv.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(av.$$.fragment,f),E(Xy.$$.fragment,f),E(mv.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(hv.$$.fragment,f),E(Uy.$$.fragment,f),E(Kv.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(e0.$$.fragment,f),E(e8.$$.fragment,f),E(V0.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(z0.$$.fragment,f),E(n8.$$.fragment,f),E(H0.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(J0.$$.fragment,f),E(c8.$$.fragment,f),E(cF.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(mF.$$.fragment,f),E(p8.$$.fragment,f),E(pF.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(uF.$$.fragment,f),E(F8.$$.fragment,f),E(FF.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(MF.$$.fragment,f),E(w8.$$.fragment,f),E(RF.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(BF.$$.fragment,f),E($8.$$.fragment,f),E(OF.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(XF.$$.fragment,f),E(B8.$$.fragment,f),E(rT.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(aT.$$.fragment,f),E(D8.$$.fragment,f),E(iT.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(cT.$$.fragment,f),E(Q8.$$.fragment,f),E(uT.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(vT.$$.fragment,f),E(Y8.$$.fragment,f),E(CT.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(AT.$$.fragment,f),E(r9.$$.fragment,f),E($T.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(ST.$$.fragment,f),E(i9.$$.fragment,f),E(BT.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(NT.$$.fragment,f),E(g9.$$.fragment,f),E(VT.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(zT.$$.fragment,f),E(b9.$$.fragment,f),E(HT.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(JT.$$.fragment,f),E(E9.$$.fragment,f),E(VM.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(zM.$$.fragment,f),E(y9.$$.fragment,f),E(pE.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(uE.$$.fragment,f),E(R9.$$.fragment,f),E(kE.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(RE.$$.fragment,f),E(q9.$$.fragment,f),E(qE.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(DE.$$.fragment,f),E(V9.$$.fragment,f),E(l4.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(d4.$$.fragment,f),E(H9.$$.fragment,f),E(F4.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(M4.$$.fragment,f),E(Z9.$$.fragment,f),E(U4.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(Y4.$$.fragment,f),E(ax.$$.fragment,f),E(pC.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(uC.$$.fragment,f),E(dx.$$.fragment,f),E(FC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(MC.$$.fragment,f),E(px.$$.fragment,f),E(CC.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(AC.$$.fragment,f),E(Fx.$$.fragment,f),E(WC.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(UC.$$.fragment,f),E(wx.$$.fragment,f),E(_5.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(b5.$$.fragment,f),E($x.$$.fragment,f),E(F5.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(M5.$$.fragment,f),E(Bx.$$.fragment,f),E(C5.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(A5.$$.fragment,f),E(Dx.$$.fragment,f),E(e3.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(r3.$$.fragment,f),E(zx.$$.fragment,f),E(g3.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(p3.$$.fragment,f),E(Jx.$$.fragment,f),E(x3.$$.fragment,f),E(Yx.$$.fragment,f),E(Kx.$$.fragment,f),E(e$.$$.fragment,f),E(k3.$$.fragment,f),E(o$.$$.fragment,f),E(O3.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(X3.$$.fragment,f),E(s$.$$.fragment,f),E(ow.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(tw.$$.fragment,f),E(f$.$$.fragment,f),E(hw.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(_w.$$.fragment,f),E(_$.$$.fragment,f),E(Lw.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(xw.$$.fragment,f),E(T$.$$.fragment,f),E(qw.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(Dw.$$.fragment,f),E(A$.$$.fragment,f),E(Uw.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(Yw.$$.fragment,f),E(k$.$$.fragment,f),E(Zw.$$.fragment,f),E(S$.$$.fragment,f),E(R$.$$.fragment,f),E(B$.$$.fragment,f),E(oA.$$.fragment,f),E(I$.$$.fragment,f),E(aA.$$.fragment,f),E(q$.$$.fragment,f),E(j$.$$.fragment,f),E(G$.$$.fragment,f),E(sA.$$.fragment,f),E(O$.$$.fragment,f),E(iA.$$.fragment,f),lXe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(Pf.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(jL.$$.fragment,f),C(Vg.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(zL.$$.fragment,f),C(wh.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(YL.$$.fragment,f),C(sp.$$.fragment,f),C(lp.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ty.$$.fragment,f),C(Lp.$$.fragment,f),C(yp.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(kp.$$.fragment,f),C(dy.$$.fragment,f),C(Su.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(Pu.$$.fragment,f),C(hy.$$.fragment,f),C(A1.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(y1.$$.fragment,f),C(vy.$$.fragment,f),C(p7.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(u7.$$.fragment,f),C(Cy.$$.fragment,f),C(r2.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(a2.$$.fragment,f),C(xy.$$.fragment,f),C(E2.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(w2.$$.fragment,f),C(Py.$$.fragment,f),C(Mb.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(Cb.$$.fragment,f),C(jy.$$.fragment,f),C(rv.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(av.$$.fragment,f),C(Xy.$$.fragment,f),C(mv.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(hv.$$.fragment,f),C(Uy.$$.fragment,f),C(Kv.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(e0.$$.fragment,f),C(e8.$$.fragment,f),C(V0.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(z0.$$.fragment,f),C(n8.$$.fragment,f),C(H0.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(J0.$$.fragment,f),C(c8.$$.fragment,f),C(cF.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(mF.$$.fragment,f),C(p8.$$.fragment,f),C(pF.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(uF.$$.fragment,f),C(F8.$$.fragment,f),C(FF.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(MF.$$.fragment,f),C(w8.$$.fragment,f),C(RF.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(BF.$$.fragment,f),C($8.$$.fragment,f),C(OF.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(XF.$$.fragment,f),C(B8.$$.fragment,f),C(rT.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(aT.$$.fragment,f),C(D8.$$.fragment,f),C(iT.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(cT.$$.fragment,f),C(Q8.$$.fragment,f),C(uT.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(vT.$$.fragment,f),C(Y8.$$.fragment,f),C(CT.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(AT.$$.fragment,f),C(r9.$$.fragment,f),C($T.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(ST.$$.fragment,f),C(i9.$$.fragment,f),C(BT.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(NT.$$.fragment,f),C(g9.$$.fragment,f),C(VT.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(zT.$$.fragment,f),C(b9.$$.fragment,f),C(HT.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(JT.$$.fragment,f),C(E9.$$.fragment,f),C(VM.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(zM.$$.fragment,f),C(y9.$$.fragment,f),C(pE.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(uE.$$.fragment,f),C(R9.$$.fragment,f),C(kE.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(RE.$$.fragment,f),C(q9.$$.fragment,f),C(qE.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(DE.$$.fragment,f),C(V9.$$.fragment,f),C(l4.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(d4.$$.fragment,f),C(H9.$$.fragment,f),C(F4.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(M4.$$.fragment,f),C(Z9.$$.fragment,f),C(U4.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(Y4.$$.fragment,f),C(ax.$$.fragment,f),C(pC.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(uC.$$.fragment,f),C(dx.$$.fragment,f),C(FC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(MC.$$.fragment,f),C(px.$$.fragment,f),C(CC.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(AC.$$.fragment,f),C(Fx.$$.fragment,f),C(WC.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(UC.$$.fragment,f),C(wx.$$.fragment,f),C(_5.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(b5.$$.fragment,f),C($x.$$.fragment,f),C(F5.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(M5.$$.fragment,f),C(Bx.$$.fragment,f),C(C5.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(A5.$$.fragment,f),C(Dx.$$.fragment,f),C(e3.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(r3.$$.fragment,f),C(zx.$$.fragment,f),C(g3.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(p3.$$.fragment,f),C(Jx.$$.fragment,f),C(x3.$$.fragment,f),C(Yx.$$.fragment,f),C(Kx.$$.fragment,f),C(e$.$$.fragment,f),C(k3.$$.fragment,f),C(o$.$$.fragment,f),C(O3.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(X3.$$.fragment,f),C(s$.$$.fragment,f),C(ow.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(tw.$$.fragment,f),C(f$.$$.fragment,f),C(hw.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(_w.$$.fragment,f),C(_$.$$.fragment,f),C(Lw.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(xw.$$.fragment,f),C(T$.$$.fragment,f),C(qw.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(Dw.$$.fragment,f),C(A$.$$.fragment,f),C(Uw.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(Yw.$$.fragment,f),C(k$.$$.fragment,f),C(Zw.$$.fragment,f),C(S$.$$.fragment,f),C(R$.$$.fragment,f),C(B$.$$.fragment,f),C(oA.$$.fragment,f),C(I$.$$.fragment,f),C(aA.$$.fragment,f),C(q$.$$.fragment,f),C(j$.$$.fragment,f),C(G$.$$.fragment,f),C(sA.$$.fragment,f),C(O$.$$.fragment,f),C(iA.$$.fragment,f),lXe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(xf),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(kf),w(xa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(rOe),f&&t(xi),w(RL),f&&t(tOe),f&&t(Nn),f&&t(aOe),w(PL,f),f&&t(nOe),f&&t(mS),f&&t(sOe),w(Pf,f),f&&t(lOe),f&&t($i),w(BL),f&&t(iOe),f&&t(wo),w(IL),w(jL),w(Vg),w(DL),f&&t(dOe),f&&t(Si),w(GL),f&&t(cOe),f&&t(Ao),w(OL),w(zL),w(wh),w(QL),f&&t(fOe),f&&t(Ri),w(WL),f&&t(mOe),f&&t(Lo),w(HL),w(YL),w(sp),w(lp),w(KL),f&&t(gOe),f&&t(Pi),w(ZL),f&&t(hOe),f&&t(yo),w(ey),w(ty),w(Lp),w(yp),w(ay),f&&t(pOe),f&&t(Ii),w(ny),f&&t(_Oe),f&&t(xo),w(sy),w(iy),w(kp),w(dy),w(Su),f&&t(uOe),f&&t(ji),w(cy),f&&t(bOe),f&&t($o),w(fy),w(gy),w(Pu),w(hy),w(A1),f&&t(vOe),f&&t(Oi),w(py),f&&t(FOe),f&&t(ko),w(_y),w(by),w(y1),w(vy),w(p7),f&&t(TOe),f&&t(zi),w(Fy),f&&t(MOe),f&&t(So),w(Ty),w(Ey),w(u7),w(Cy),w(r2),f&&t(EOe),f&&t(Hi),w(wy),f&&t(COe),f&&t(Ro),w(Ay),w(yy),w(a2),w(xy),w(E2),f&&t(wOe),f&&t(Yi),w($y),f&&t(AOe),f&&t(Po),w(ky),w(Ry),w(w2),w(Py),w(Mb),f&&t(LOe),f&&t(ed),w(By),f&&t(yOe),f&&t(Bo),w(Iy),w(qy),w(Cb),w(jy),w(rv),f&&t(xOe),f&&t(td),w(Dy),f&&t($Oe),f&&t(Io),w(Gy),w(Vy),w(av),w(Xy),w(mv),f&&t(kOe),f&&t(sd),w(zy),f&&t(SOe),f&&t(qo),w(Qy),w(Hy),w(hv),w(Uy),w(Kv),f&&t(ROe),f&&t(dd),w(Jy),f&&t(POe),f&&t(jo),w(Yy),w(Zy),w(e0),w(e8),w(V0),f&&t(BOe),f&&t(md),w(o8),f&&t(IOe),f&&t(Do),w(r8),w(a8),w(z0),w(n8),w(H0),f&&t(NOe),f&&t(pd),w(s8),f&&t(qOe),f&&t(Go),w(l8),w(d8),w(J0),w(c8),w(cF),f&&t(jOe),f&&t(bd),w(f8),f&&t(DOe),f&&t(Oo),w(m8),w(h8),w(mF),w(p8),w(pF),f&&t(GOe),f&&t(Td),w(_8),f&&t(OOe),f&&t(Vo),w(u8),w(v8),w(uF),w(F8),w(FF),f&&t(VOe),f&&t(Cd),w(T8),f&&t(XOe),f&&t(Xo),w(M8),w(C8),w(MF),w(w8),w(RF),f&&t(zOe),f&&t(Ld),w(A8),f&&t(QOe),f&&t(zo),w(L8),w(x8),w(BF),w($8),w(OF),f&&t(WOe),f&&t($d),w(k8),f&&t(HOe),f&&t(Qo),w(S8),w(P8),w(XF),w(B8),w(rT),f&&t(UOe),f&&t(Rd),w(I8),f&&t(JOe),f&&t(Wo),w(N8),w(j8),w(aT),w(D8),w(iT),f&&t(YOe),f&&t(Id),w(O8),f&&t(KOe),f&&t(Ho),w(V8),w(z8),w(cT),w(Q8),w(uT),f&&t(ZOe),f&&t(jd),w(W8),f&&t(eVe),f&&t(Uo),w(H8),w(J8),w(vT),w(Y8),w(CT),f&&t(oVe),f&&t(Vd),w(K8),f&&t(rVe),f&&t(Jo),w(Z8),w(o9),w(AT),w(r9),w($T),f&&t(tVe),f&&t(Qd),w(a9),f&&t(aVe),f&&t(Yo),w(n9),w(l9),w(ST),w(i9),w(BT),f&&t(nVe),f&&t(Ud),w(d9),f&&t(sVe),f&&t(Ko),w(c9),w(m9),w(NT),w(g9),w(VT),f&&t(lVe),f&&t(Kd),w(h9),f&&t(iVe),f&&t(Zo),w(p9),w(u9),w(zT),w(b9),w(HT),f&&t(dVe),f&&t(oc),w(v9),f&&t(cVe),f&&t(er),w(F9),w(M9),w(JT),w(E9),w(VM),f&&t(fVe),f&&t(ac),w(C9),f&&t(mVe),f&&t(or),w(w9),w(L9),w(zM),w(y9),w(pE),f&&t(gVe),f&&t(lc),w(x9),f&&t(hVe),f&&t(rr),w($9),w(S9),w(uE),w(R9),w(kE),f&&t(pVe),f&&t(cc),w(P9),f&&t(_Ve),f&&t(tr),w(B9),w(N9),w(RE),w(q9),w(qE),f&&t(uVe),f&&t(gc),w(j9),f&&t(bVe),f&&t(ar),w(D9),w(O9),w(DE),w(V9),w(l4),f&&t(vVe),f&&t(_c),w(X9),f&&t(FVe),f&&t(nr),w(z9),w(W9),w(d4),w(H9),w(F4),f&&t(TVe),f&&t(vc),w(U9),f&&t(MVe),f&&t(sr),w(J9),w(K9),w(M4),w(Z9),w(U4),f&&t(EVe),f&&t(Mc),w(ex),f&&t(CVe),f&&t(lr),w(ox),w(tx),w(Y4),w(ax),w(pC),f&&t(wVe),f&&t(wc),w(nx),f&&t(AVe),f&&t(ir),w(sx),w(ix),w(uC),w(dx),w(FC),f&&t(LVe),f&&t(yc),w(fx),f&&t(yVe),f&&t(dr),w(mx),w(hx),w(MC),w(px),w(CC),f&&t(xVe),f&&t(kc),w(_x),f&&t($Ve),f&&t(cr),w(ux),w(vx),w(AC),w(Fx),w(WC),f&&t(kVe),f&&t(Pc),w(Tx),f&&t(SVe),f&&t(fr),w(Mx),w(Cx),w(UC),w(wx),w(_5),f&&t(RVe),f&&t(Nc),w(Ax),f&&t(PVe),f&&t(mr),w(Lx),w(xx),w(b5),w($x),w(F5),f&&t(BVe),f&&t(Dc),w(kx),f&&t(IVe),f&&t(gr),w(Sx),w(Px),w(M5),w(Bx),w(C5),f&&t(NVe),f&&t(Vc),w(Ix),f&&t(qVe),f&&t(hr),w(Nx),w(jx),w(A5),w(Dx),w(e3),f&&t(jVe),f&&t(Qc),w(Gx),f&&t(DVe),f&&t(pr),w(Ox),w(Xx),w(r3),w(zx),w(g3),f&&t(GVe),f&&t(Uc),w(Qx),f&&t(OVe),f&&t(_r),w(Wx),w(Ux),w(p3),w(Jx),w(x3),f&&t(VVe),f&&t(Kc),w(Yx),f&&t(XVe),f&&t(ur),w(Kx),w(e$),w(k3),w(o$),w(O3),f&&t(zVe),f&&t(of),w(r$),f&&t(QVe),f&&t(br),w(t$),w(n$),w(X3),w(s$),w(ow),f&&t(WVe),f&&t(af),w(l$),f&&t(HVe),f&&t(vr),w(i$),w(c$),w(tw),w(f$),w(hw),f&&t(UVe),f&&t(lf),w(m$),f&&t(JVe),f&&t(Fr),w(g$),w(p$),w(_w),w(_$),w(Lw),f&&t(YVe),f&&t(ff),w(u$),f&&t(KVe),f&&t(Tr),w(b$),w(F$),w(xw),w(T$),w(qw),f&&t(ZVe),f&&t(hf),w(M$),f&&t(eXe),f&&t(Mr),w(E$),w(w$),w(Dw),w(A$),w(Uw),f&&t(oXe),f&&t(uf),w(L$),f&&t(rXe),f&&t(Er),w(y$),w($$),w(Yw),w(k$),w(Zw),f&&t(tXe),f&&t(Ff),w(S$),f&&t(aXe),f&&t(Cr),w(R$),w(B$),w(oA),w(I$),w(aA),f&&t(nXe),f&&t(Ef),w(q$),f&&t(sXe),f&&t(wr),w(j$),w(G$),w(sA),w(O$),w(iA)}}}const bVt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function vVt(x){return uGt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class AVt extends gGt{constructor(g){super();hGt(this,g,vVt,uVt,pGt,{})}}export{AVt as default,bVt as metadata};
