import{S as TLt,i as MLt,s as ELt,e as a,k as l,w as F,t as o,M as CLt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as wLt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as bGr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function ALt(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,cA,pf,je,We,gi,yn,fA,Ln,xn,mA,hi,$n,gA,pi,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),hf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),fi=a("code"),mi=o('"new-model"'),cA=o(")."),pf=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),fA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),mA=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),gA=o(` attribute is set to the same class you use when registering the model (here
`),pi=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var k$=s(p);m=r(k$,"NewModelConfig"),k$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var S$=s(ci);hf=r(S$,"model_type"),S$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),fi=n(Ae,"CODE",{});var R$=s(fi);mi=r(R$,'"new-model"'),R$.forEach(t),cA=r(Ae,")."),Ae.forEach(t),pf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),fA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var P$=s(Ln);xn=r(P$,"PreTrainedModel"),P$.forEach(t),mA=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var uf=s(hi);$n=r(uf,"config_class"),uf.forEach(t),gA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),pi=n(Eo,"CODE",{});var B$=s(pi);_f=r(B$,"NewModelConfig"),B$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,hf),e(g,rt),e(g,fi),e(fi,mi),e(g,cA),b(Qe,pf,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,fA),e(je,Ln),e(Ln,xn),e(je,mA),e(je,hi),e(hi,$n),e(je,gA),e(je,pi),e(pi,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(pf),Qe&&t(je)}}}function yLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xLt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function $Lt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kLt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function SLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ILt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ULt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZLt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z9t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ext(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function axt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ixt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _xt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Txt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mxt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ext(L){let g,v,p,m,_,d,h,Mo,ci,hf,rt,fi,mi,cA,pf,je,We,gi,yn,fA,Ln,xn,mA,hi,$n,gA,pi,_f,Ca,Qe,Ae,k$,_i,S$,R$,Eo,wa,P$,uf,B$,cGe,ZIe,ui,bf,See,hA,fGe,Ree,mGe,eqe,kn,gGe,Pee,hGe,pGe,Bee,_Ge,uGe,oqe,pA,rqe,I$,bGe,tqe,vf,aqe,bi,Ff,Iee,_A,vGe,qee,FGe,nqe,Co,uA,TGe,bA,MGe,q$,EGe,CGe,wGe,vA,AGe,Nee,yGe,LGe,xGe,Er,FA,$Ge,jee,kGe,SGe,vi,RGe,Dee,PGe,BGe,Gee,IGe,qGe,NGe,A,Tf,Oee,jGe,DGe,N$,GGe,OGe,VGe,Mf,Vee,XGe,zGe,j$,WGe,QGe,HGe,Ef,Xee,UGe,JGe,D$,YGe,KGe,ZGe,Cf,zee,eOe,oOe,G$,rOe,tOe,aOe,wf,Wee,nOe,sOe,O$,lOe,iOe,dOe,Af,Qee,cOe,fOe,V$,mOe,gOe,hOe,yf,Hee,pOe,_Oe,X$,uOe,bOe,vOe,Lf,Uee,FOe,TOe,z$,MOe,EOe,COe,xf,Jee,wOe,AOe,W$,yOe,LOe,xOe,$f,Yee,$Oe,kOe,Q$,SOe,ROe,POe,kf,Kee,BOe,IOe,H$,qOe,NOe,jOe,Sf,Zee,DOe,GOe,U$,OOe,VOe,XOe,Rf,eoe,zOe,WOe,J$,QOe,HOe,UOe,Pf,ooe,JOe,YOe,Y$,KOe,ZOe,eVe,Bf,roe,oVe,rVe,K$,tVe,aVe,nVe,If,toe,sVe,lVe,Z$,iVe,dVe,cVe,qf,aoe,fVe,mVe,ek,gVe,hVe,pVe,Nf,noe,_Ve,uVe,ok,bVe,vVe,FVe,jf,soe,TVe,MVe,rk,EVe,CVe,wVe,Df,loe,AVe,yVe,tk,LVe,xVe,$Ve,Gf,ioe,kVe,SVe,ak,RVe,PVe,BVe,Of,doe,IVe,qVe,nk,NVe,jVe,DVe,Vf,coe,GVe,OVe,sk,VVe,XVe,zVe,Xf,foe,WVe,QVe,lk,HVe,UVe,JVe,zf,moe,YVe,KVe,ik,ZVe,eXe,oXe,Wf,goe,rXe,tXe,dk,aXe,nXe,sXe,Qf,hoe,lXe,iXe,ck,dXe,cXe,fXe,Hf,poe,mXe,gXe,fk,hXe,pXe,_Xe,Uf,_oe,uXe,bXe,mk,vXe,FXe,TXe,Jf,uoe,MXe,EXe,gk,CXe,wXe,AXe,Yf,boe,yXe,LXe,hk,xXe,$Xe,kXe,Kf,voe,SXe,RXe,pk,PXe,BXe,IXe,Zf,Foe,qXe,NXe,_k,jXe,DXe,GXe,em,Toe,OXe,VXe,uk,XXe,zXe,WXe,om,Moe,QXe,HXe,bk,UXe,JXe,YXe,rm,Eoe,KXe,ZXe,vk,eze,oze,rze,tm,Coe,tze,aze,Fk,nze,sze,lze,am,woe,ize,dze,Tk,cze,fze,mze,nm,Aoe,gze,hze,Mk,pze,_ze,uze,sm,yoe,bze,vze,Ek,Fze,Tze,Mze,lm,Loe,Eze,Cze,Ck,wze,Aze,yze,im,xoe,Lze,xze,wk,$ze,kze,Sze,dm,$oe,Rze,Pze,Ak,Bze,Ize,qze,cm,koe,Nze,jze,yk,Dze,Gze,Oze,fm,Soe,Vze,Xze,Lk,zze,Wze,Qze,mm,Roe,Hze,Uze,xk,Jze,Yze,Kze,gm,Poe,Zze,eWe,$k,oWe,rWe,tWe,hm,Boe,aWe,nWe,kk,sWe,lWe,iWe,pm,Ioe,dWe,cWe,Sk,fWe,mWe,gWe,_m,qoe,hWe,pWe,Rk,_We,uWe,bWe,um,Noe,vWe,FWe,Pk,TWe,MWe,EWe,bm,joe,CWe,wWe,Bk,AWe,yWe,LWe,vm,Doe,xWe,$We,Ik,kWe,SWe,RWe,Fm,Goe,PWe,BWe,qk,IWe,qWe,NWe,Tm,Ooe,jWe,DWe,Nk,GWe,OWe,VWe,Mm,Voe,XWe,zWe,jk,WWe,QWe,HWe,Em,Xoe,UWe,JWe,Dk,YWe,KWe,ZWe,Cm,zoe,eQe,oQe,Gk,rQe,tQe,aQe,wm,Woe,nQe,sQe,Ok,lQe,iQe,dQe,Am,Qoe,cQe,fQe,Vk,mQe,gQe,hQe,ym,Hoe,pQe,_Qe,Xk,uQe,bQe,vQe,Lm,Uoe,FQe,TQe,zk,MQe,EQe,CQe,xm,Joe,wQe,AQe,Wk,yQe,LQe,xQe,$m,Yoe,$Qe,kQe,Qk,SQe,RQe,PQe,km,Koe,BQe,IQe,Hk,qQe,NQe,jQe,Sm,Zoe,DQe,GQe,Uk,OQe,VQe,XQe,Rm,ere,zQe,WQe,Jk,QQe,HQe,UQe,Pm,ore,JQe,YQe,Yk,KQe,ZQe,eHe,Bm,rre,oHe,rHe,Kk,tHe,aHe,nHe,Im,tre,sHe,lHe,Zk,iHe,dHe,cHe,qm,are,fHe,mHe,eS,gHe,hHe,pHe,Nm,nre,_He,uHe,oS,bHe,vHe,FHe,jm,sre,THe,MHe,rS,EHe,CHe,wHe,Dm,lre,AHe,yHe,tS,LHe,xHe,$He,Gm,ire,kHe,SHe,aS,RHe,PHe,BHe,Om,dre,IHe,qHe,nS,NHe,jHe,DHe,Vm,cre,GHe,OHe,sS,VHe,XHe,zHe,Xm,fre,WHe,QHe,lS,HHe,UHe,JHe,zm,mre,YHe,KHe,iS,ZHe,eUe,oUe,Wm,gre,rUe,tUe,dS,aUe,nUe,sUe,Qm,hre,lUe,iUe,cS,dUe,cUe,fUe,Hm,pre,mUe,gUe,fS,hUe,pUe,_Ue,Um,_re,uUe,bUe,mS,vUe,FUe,TUe,Jm,ure,MUe,EUe,gS,CUe,wUe,AUe,Ym,bre,yUe,LUe,hS,xUe,$Ue,kUe,Km,vre,SUe,RUe,pS,PUe,BUe,IUe,Zm,Fre,qUe,NUe,_S,jUe,DUe,GUe,eg,Tre,OUe,VUe,uS,XUe,zUe,WUe,og,Mre,QUe,HUe,bS,UUe,JUe,YUe,rg,Ere,KUe,ZUe,vS,eJe,oJe,rJe,tg,Cre,tJe,aJe,FS,nJe,sJe,lJe,ag,wre,iJe,dJe,TS,cJe,fJe,mJe,ng,Are,gJe,hJe,MS,pJe,_Je,uJe,sg,yre,bJe,vJe,ES,FJe,TJe,MJe,lg,Lre,EJe,CJe,CS,wJe,AJe,yJe,ig,xre,LJe,xJe,wS,$Je,kJe,SJe,dg,$re,RJe,PJe,AS,BJe,IJe,qJe,cg,kre,NJe,jJe,yS,DJe,GJe,OJe,fg,Sre,VJe,XJe,LS,zJe,WJe,QJe,mg,Rre,HJe,UJe,xS,JJe,YJe,KJe,gg,Pre,ZJe,eYe,$S,oYe,rYe,tYe,hg,Bre,aYe,nYe,kS,sYe,lYe,iYe,pg,Ire,dYe,cYe,SS,fYe,mYe,gYe,_g,qre,hYe,pYe,RS,_Ye,uYe,bYe,ug,Nre,vYe,FYe,PS,TYe,MYe,EYe,bg,jre,CYe,wYe,BS,AYe,yYe,LYe,vg,Dre,xYe,$Ye,IS,kYe,SYe,RYe,Fg,PYe,Tg,TA,BYe,Gre,IYe,sqe,Fi,Mg,Ore,MA,qYe,Vre,NYe,lqe,wo,EA,jYe,CA,DYe,qS,GYe,OYe,VYe,wA,XYe,Xre,zYe,WYe,QYe,Cr,AA,HYe,zre,UYe,JYe,Aa,YYe,Wre,KYe,ZYe,Qre,eKe,oKe,Hre,rKe,tKe,aKe,k,Sn,Ure,nKe,sKe,NS,lKe,iKe,jS,dKe,cKe,fKe,Rn,Jre,mKe,gKe,DS,hKe,pKe,GS,_Ke,uKe,bKe,Pn,Yre,vKe,FKe,OS,TKe,MKe,VS,EKe,CKe,wKe,Eg,Kre,AKe,yKe,XS,LKe,xKe,$Ke,Bn,Zre,kKe,SKe,zS,RKe,PKe,WS,BKe,IKe,qKe,Cg,ete,NKe,jKe,QS,DKe,GKe,OKe,wg,ote,VKe,XKe,HS,zKe,WKe,QKe,Ag,rte,HKe,UKe,US,JKe,YKe,KKe,In,tte,ZKe,eZe,JS,oZe,rZe,YS,tZe,aZe,nZe,qn,ate,sZe,lZe,KS,iZe,dZe,ZS,cZe,fZe,mZe,Nn,nte,gZe,hZe,eR,pZe,_Ze,oR,uZe,bZe,vZe,yg,ste,FZe,TZe,rR,MZe,EZe,CZe,Lg,lte,wZe,AZe,tR,yZe,LZe,xZe,jn,ite,$Ze,kZe,aR,SZe,RZe,nR,PZe,BZe,IZe,xg,dte,qZe,NZe,sR,jZe,DZe,GZe,Dn,cte,OZe,VZe,lR,XZe,zZe,iR,WZe,QZe,HZe,Gn,fte,UZe,JZe,dR,YZe,KZe,cR,ZZe,eeo,oeo,On,mte,reo,teo,fR,aeo,neo,mR,seo,leo,ieo,$g,gte,deo,ceo,gR,feo,meo,geo,Vn,hte,heo,peo,hR,_eo,ueo,pR,beo,veo,Feo,Xn,pte,Teo,Meo,_R,Eeo,Ceo,uR,weo,Aeo,yeo,zn,_te,Leo,xeo,bR,$eo,keo,vR,Seo,Reo,Peo,Wn,ute,Beo,Ieo,FR,qeo,Neo,TR,jeo,Deo,Geo,Qn,bte,Oeo,Veo,MR,Xeo,zeo,ER,Weo,Qeo,Heo,Hn,vte,Ueo,Jeo,CR,Yeo,Keo,wR,Zeo,eoo,ooo,kg,Fte,roo,too,AR,aoo,noo,soo,Un,Tte,loo,ioo,yR,doo,coo,LR,foo,moo,goo,Sg,Mte,hoo,poo,xR,_oo,uoo,boo,Jn,Ete,voo,Foo,$R,Too,Moo,kR,Eoo,Coo,woo,Yn,Cte,Aoo,yoo,SR,Loo,xoo,RR,$oo,koo,Soo,Kn,wte,Roo,Poo,PR,Boo,Ioo,BR,qoo,Noo,joo,Zn,Ate,Doo,Goo,IR,Ooo,Voo,qR,Xoo,zoo,Woo,es,yte,Qoo,Hoo,NR,Uoo,Joo,jR,Yoo,Koo,Zoo,Rg,Lte,ero,oro,DR,rro,tro,aro,os,xte,nro,sro,GR,lro,iro,OR,dro,cro,fro,rs,$te,mro,gro,VR,hro,pro,XR,_ro,uro,bro,ts,kte,vro,Fro,zR,Tro,Mro,WR,Ero,Cro,wro,as,Ste,Aro,yro,QR,Lro,xro,HR,$ro,kro,Sro,ns,Rte,Rro,Pro,UR,Bro,Iro,JR,qro,Nro,jro,ss,Pte,Dro,Gro,YR,Oro,Vro,KR,Xro,zro,Wro,Pg,Bte,Qro,Hro,ZR,Uro,Jro,Yro,ls,Ite,Kro,Zro,eP,eto,oto,oP,rto,tto,ato,Bg,qte,nto,sto,rP,lto,ito,dto,Ig,Nte,cto,fto,tP,mto,gto,hto,is,jte,pto,_to,aP,uto,bto,nP,vto,Fto,Tto,ds,Dte,Mto,Eto,sP,Cto,wto,lP,Ato,yto,Lto,cs,Gte,xto,$to,iP,kto,Sto,dP,Rto,Pto,Bto,qg,Ote,Ito,qto,cP,Nto,jto,Dto,fs,Vte,Gto,Oto,fP,Vto,Xto,mP,zto,Wto,Qto,ms,Xte,Hto,Uto,gP,Jto,Yto,hP,Kto,Zto,eao,gs,zte,oao,rao,pP,tao,aao,_P,nao,sao,lao,hs,Wte,iao,dao,uP,cao,fao,bP,mao,gao,hao,ps,Qte,pao,_ao,vP,uao,bao,FP,vao,Fao,Tao,Ng,Hte,Mao,Eao,TP,Cao,wao,Aao,_s,Ute,yao,Lao,MP,xao,$ao,EP,kao,Sao,Rao,jg,Jte,Pao,Bao,CP,Iao,qao,Nao,Dg,Yte,jao,Dao,wP,Gao,Oao,Vao,Gg,Kte,Xao,zao,AP,Wao,Qao,Hao,Og,Zte,Uao,Jao,yP,Yao,Kao,Zao,us,eae,eno,ono,LP,rno,tno,xP,ano,nno,sno,Vg,oae,lno,ino,$P,dno,cno,fno,bs,rae,mno,gno,kP,hno,pno,SP,_no,uno,bno,vs,tae,vno,Fno,RP,Tno,Mno,PP,Eno,Cno,wno,Fs,aae,Ano,yno,BP,Lno,xno,IP,$no,kno,Sno,Ts,nae,Rno,Pno,qP,Bno,Ino,NP,qno,Nno,jno,Ms,sae,Dno,Gno,jP,Ono,Vno,DP,Xno,zno,Wno,Es,lae,Qno,Hno,GP,Uno,Jno,OP,Yno,Kno,Zno,Xg,iae,eso,oso,VP,rso,tso,aso,zg,dae,nso,sso,XP,lso,iso,dso,Cs,cae,cso,fso,zP,mso,gso,WP,hso,pso,_so,ws,fae,uso,bso,QP,vso,Fso,HP,Tso,Mso,Eso,As,mae,Cso,wso,UP,Aso,yso,JP,Lso,xso,$so,Wg,gae,kso,Sso,YP,Rso,Pso,Bso,Qg,hae,Iso,qso,KP,Nso,jso,Dso,Hg,pae,Gso,Oso,ZP,Vso,Xso,zso,ys,_ae,Wso,Qso,eB,Hso,Uso,oB,Jso,Yso,Kso,Ug,uae,Zso,elo,rB,olo,rlo,tlo,Jg,bae,alo,nlo,tB,slo,llo,ilo,Yg,vae,dlo,clo,aB,flo,mlo,glo,Ls,Fae,hlo,plo,nB,_lo,ulo,sB,blo,vlo,Flo,Kg,Tae,Tlo,Mlo,lB,Elo,Clo,wlo,Zg,Mae,Alo,ylo,iB,Llo,xlo,$lo,xs,Eae,klo,Slo,dB,Rlo,Plo,cB,Blo,Ilo,qlo,$s,Cae,Nlo,jlo,fB,Dlo,Glo,mB,Olo,Vlo,Xlo,ks,wae,zlo,Wlo,gB,Qlo,Hlo,hB,Ulo,Jlo,Ylo,Ss,Aae,Klo,Zlo,pB,eio,oio,_B,rio,tio,aio,eh,nio,oh,yA,sio,yae,lio,iqe,Ti,rh,Lae,LA,iio,xae,dio,dqe,Ao,xA,cio,$A,fio,uB,mio,gio,hio,kA,pio,$ae,_io,uio,bio,He,SA,vio,kae,Fio,Tio,ya,Mio,Sae,Eio,Cio,Rae,wio,Aio,Pae,yio,Lio,xio,Z,th,Bae,$io,kio,bB,Sio,Rio,Pio,ah,Iae,Bio,Iio,vB,qio,Nio,jio,nh,qae,Dio,Gio,FB,Oio,Vio,Xio,sh,Nae,zio,Wio,TB,Qio,Hio,Uio,lh,jae,Jio,Yio,MB,Kio,Zio,edo,ih,Dae,odo,rdo,EB,tdo,ado,ndo,dh,Gae,sdo,ldo,CB,ido,ddo,cdo,ch,Oae,fdo,mdo,wB,gdo,hdo,pdo,fh,Vae,_do,udo,AB,bdo,vdo,Fdo,mh,Xae,Tdo,Mdo,yB,Edo,Cdo,wdo,gh,zae,Ado,ydo,LB,Ldo,xdo,$do,hh,Wae,kdo,Sdo,xB,Rdo,Pdo,Bdo,ph,Qae,Ido,qdo,$B,Ndo,jdo,Ddo,_h,Hae,Gdo,Odo,kB,Vdo,Xdo,zdo,uh,Uae,Wdo,Qdo,SB,Hdo,Udo,Jdo,bh,Jae,Ydo,Kdo,RB,Zdo,eco,oco,vh,Yae,rco,tco,PB,aco,nco,sco,Fh,Kae,lco,ico,BB,dco,cco,fco,Th,Zae,mco,gco,IB,hco,pco,_co,Mh,ene,uco,bco,qB,vco,Fco,Tco,Eh,one,Mco,Eco,NB,Cco,wco,Aco,Ch,rne,yco,Lco,jB,xco,$co,kco,wh,tne,Sco,Rco,DB,Pco,Bco,Ico,Ah,ane,qco,Nco,GB,jco,Dco,Gco,yh,nne,Oco,Vco,OB,Xco,zco,Wco,Lh,sne,Qco,Hco,VB,Uco,Jco,Yco,xh,lne,Kco,Zco,XB,efo,ofo,rfo,$h,tfo,kh,afo,Sh,RA,nfo,ine,sfo,cqe,Mi,Rh,dne,PA,lfo,cne,ifo,fqe,yo,BA,dfo,IA,cfo,zB,ffo,mfo,gfo,qA,hfo,fne,pfo,_fo,ufo,Ue,NA,bfo,mne,vfo,Ffo,Ei,Tfo,gne,Mfo,Efo,hne,Cfo,wfo,Afo,pe,Ph,pne,yfo,Lfo,WB,xfo,$fo,kfo,Bh,_ne,Sfo,Rfo,une,Pfo,Bfo,Ifo,Ih,bne,qfo,Nfo,QB,jfo,Dfo,Gfo,qh,vne,Ofo,Vfo,HB,Xfo,zfo,Wfo,Nh,Fne,Qfo,Hfo,UB,Ufo,Jfo,Yfo,jh,Tne,Kfo,Zfo,JB,emo,omo,rmo,Dh,Mne,tmo,amo,YB,nmo,smo,lmo,Gh,Ene,imo,dmo,KB,cmo,fmo,mmo,Oh,Cne,gmo,hmo,ZB,pmo,_mo,umo,Vh,wne,bmo,vmo,eI,Fmo,Tmo,Mmo,Xh,Ane,Emo,Cmo,oI,wmo,Amo,ymo,zh,yne,Lmo,xmo,rI,$mo,kmo,Smo,Wh,Lne,Rmo,Pmo,tI,Bmo,Imo,qmo,Qh,xne,Nmo,jmo,aI,Dmo,Gmo,Omo,Hh,$ne,Vmo,Xmo,nI,zmo,Wmo,Qmo,Uh,kne,Hmo,Umo,sI,Jmo,Ymo,Kmo,Jh,Zmo,Yh,ego,Kh,jA,ogo,Sne,rgo,mqe,Ci,Zh,Rne,DA,tgo,Pne,ago,gqe,Lo,GA,ngo,wi,sgo,lI,lgo,igo,iI,dgo,cgo,fgo,OA,mgo,Bne,ggo,hgo,pgo,tt,VA,_go,Ine,ugo,bgo,Ai,vgo,qne,Fgo,Tgo,dI,Mgo,Ego,Cgo,ep,wgo,Je,XA,Ago,Nne,ygo,Lgo,La,xgo,jne,$go,kgo,Dne,Sgo,Rgo,Gne,Pgo,Bgo,Igo,x,op,One,qgo,Ngo,cI,jgo,Dgo,Ggo,rp,Vne,Ogo,Vgo,fI,Xgo,zgo,Wgo,tp,Xne,Qgo,Hgo,mI,Ugo,Jgo,Ygo,ap,zne,Kgo,Zgo,gI,eho,oho,rho,np,Wne,tho,aho,hI,nho,sho,lho,sp,Qne,iho,dho,pI,cho,fho,mho,lp,Hne,gho,hho,_I,pho,_ho,uho,ip,Une,bho,vho,uI,Fho,Tho,Mho,dp,Jne,Eho,Cho,bI,who,Aho,yho,cp,Yne,Lho,xho,vI,$ho,kho,Sho,fp,Kne,Rho,Pho,FI,Bho,Iho,qho,mp,Zne,Nho,jho,TI,Dho,Gho,Oho,gp,ese,Vho,Xho,MI,zho,Who,Qho,hp,ose,Hho,Uho,EI,Jho,Yho,Kho,pp,rse,Zho,epo,CI,opo,rpo,tpo,_p,tse,apo,npo,wI,spo,lpo,ipo,up,ase,dpo,cpo,AI,fpo,mpo,gpo,bp,nse,hpo,ppo,yI,_po,upo,bpo,vp,sse,vpo,Fpo,LI,Tpo,Mpo,Epo,Fp,lse,Cpo,wpo,xI,Apo,ypo,Lpo,Tp,ise,xpo,$po,$I,kpo,Spo,Rpo,Mp,dse,Ppo,Bpo,kI,Ipo,qpo,Npo,Ep,cse,jpo,Dpo,SI,Gpo,Opo,Vpo,Cp,fse,Xpo,zpo,RI,Wpo,Qpo,Hpo,wp,mse,Upo,Jpo,PI,Ypo,Kpo,Zpo,Ap,gse,e_o,o_o,BI,r_o,t_o,a_o,yp,hse,n_o,s_o,II,l_o,i_o,d_o,Lp,pse,c_o,f_o,qI,m_o,g_o,h_o,xp,_se,p_o,__o,NI,u_o,b_o,v_o,$p,use,F_o,T_o,jI,M_o,E_o,C_o,kp,bse,w_o,A_o,DI,y_o,L_o,x_o,Sp,vse,$_o,k_o,GI,S_o,R_o,P_o,Rs,Fse,B_o,I_o,OI,q_o,N_o,VI,j_o,D_o,G_o,Rp,Tse,O_o,V_o,XI,X_o,z_o,W_o,Pp,Mse,Q_o,H_o,zI,U_o,J_o,Y_o,Bp,Ese,K_o,Z_o,WI,euo,ouo,ruo,Ip,Cse,tuo,auo,QI,nuo,suo,luo,qp,wse,iuo,duo,HI,cuo,fuo,muo,Np,Ase,guo,huo,UI,puo,_uo,uuo,jp,yse,buo,vuo,JI,Fuo,Tuo,Muo,Dp,Lse,Euo,Cuo,YI,wuo,Auo,yuo,Gp,xse,Luo,xuo,KI,$uo,kuo,Suo,Op,$se,Ruo,Puo,ZI,Buo,Iuo,quo,Vp,kse,Nuo,juo,eq,Duo,Guo,Ouo,Xp,Sse,Vuo,Xuo,oq,zuo,Wuo,Quo,zp,Rse,Huo,Uuo,rq,Juo,Yuo,Kuo,Wp,Pse,Zuo,e1o,tq,o1o,r1o,t1o,Qp,Bse,a1o,n1o,aq,s1o,l1o,i1o,Hp,Ise,d1o,c1o,nq,f1o,m1o,g1o,Up,qse,h1o,p1o,sq,_1o,u1o,b1o,Jp,Nse,v1o,F1o,lq,T1o,M1o,E1o,Yp,jse,C1o,w1o,iq,A1o,y1o,L1o,Kp,Dse,x1o,$1o,dq,k1o,S1o,R1o,Zp,Gse,P1o,B1o,cq,I1o,q1o,N1o,e_,Ose,j1o,D1o,fq,G1o,O1o,V1o,o_,Vse,X1o,z1o,mq,W1o,Q1o,H1o,r_,Xse,U1o,J1o,gq,Y1o,K1o,Z1o,t_,zse,e7o,o7o,hq,r7o,t7o,a7o,a_,Wse,n7o,s7o,pq,l7o,i7o,d7o,n_,Qse,c7o,f7o,_q,m7o,g7o,h7o,s_,Hse,p7o,_7o,uq,u7o,b7o,v7o,l_,Use,F7o,T7o,bq,M7o,E7o,C7o,i_,Jse,w7o,A7o,vq,y7o,L7o,x7o,d_,Yse,$7o,k7o,Fq,S7o,R7o,P7o,c_,Kse,B7o,I7o,Tq,q7o,N7o,j7o,f_,Zse,D7o,G7o,Mq,O7o,V7o,X7o,m_,ele,z7o,W7o,Eq,Q7o,H7o,U7o,g_,ole,J7o,Y7o,Cq,K7o,Z7o,ebo,h_,rle,obo,rbo,wq,tbo,abo,nbo,p_,tle,sbo,lbo,Aq,ibo,dbo,cbo,__,ale,fbo,mbo,yq,gbo,hbo,pbo,u_,nle,_bo,ubo,Lq,bbo,vbo,Fbo,b_,sle,Tbo,Mbo,xq,Ebo,Cbo,wbo,v_,lle,Abo,ybo,$q,Lbo,xbo,$bo,F_,ile,kbo,Sbo,kq,Rbo,Pbo,Bbo,T_,dle,Ibo,qbo,Sq,Nbo,jbo,Dbo,M_,cle,Gbo,Obo,Rq,Vbo,Xbo,zbo,E_,fle,Wbo,Qbo,Pq,Hbo,Ubo,Jbo,C_,mle,Ybo,Kbo,Bq,Zbo,e2o,o2o,w_,gle,r2o,t2o,Iq,a2o,n2o,s2o,A_,hle,l2o,i2o,qq,d2o,c2o,f2o,y_,ple,m2o,g2o,Nq,h2o,p2o,_2o,L_,_le,u2o,b2o,jq,v2o,F2o,T2o,x_,ule,M2o,E2o,Dq,C2o,w2o,A2o,$_,ble,y2o,L2o,Gq,x2o,$2o,k2o,k_,vle,S2o,R2o,Oq,P2o,B2o,I2o,S_,Fle,q2o,N2o,Vq,j2o,D2o,G2o,R_,Tle,O2o,V2o,Xq,X2o,z2o,W2o,P_,Mle,Q2o,H2o,zq,U2o,J2o,Y2o,B_,Ele,K2o,Z2o,Wq,evo,ovo,rvo,I_,Cle,tvo,avo,Qq,nvo,svo,lvo,q_,wle,ivo,dvo,Hq,cvo,fvo,mvo,N_,Ale,gvo,hvo,Uq,pvo,_vo,uvo,j_,yle,bvo,vvo,Jq,Fvo,Tvo,Mvo,D_,Lle,Evo,Cvo,Yq,wvo,Avo,yvo,G_,xle,Lvo,xvo,Kq,$vo,kvo,Svo,O_,$le,Rvo,Pvo,Zq,Bvo,Ivo,qvo,V_,kle,Nvo,jvo,eN,Dvo,Gvo,Ovo,X_,Sle,Vvo,Xvo,oN,zvo,Wvo,Qvo,z_,Rle,Hvo,Uvo,rN,Jvo,Yvo,Kvo,W_,Zvo,Ple,e3o,o3o,Ble,r3o,t3o,Q_,hqe,yi,H_,Ile,zA,a3o,qle,n3o,pqe,xo,WA,s3o,Li,l3o,tN,i3o,d3o,aN,c3o,f3o,m3o,QA,g3o,Nle,h3o,p3o,_3o,at,HA,u3o,jle,b3o,v3o,xi,F3o,Dle,T3o,M3o,nN,E3o,C3o,w3o,U_,A3o,Ye,UA,y3o,Gle,L3o,x3o,xa,$3o,Ole,k3o,S3o,Vle,R3o,P3o,Xle,B3o,I3o,q3o,G,J_,zle,N3o,j3o,sN,D3o,G3o,O3o,Y_,Wle,V3o,X3o,lN,z3o,W3o,Q3o,K_,Qle,H3o,U3o,iN,J3o,Y3o,K3o,Z_,Hle,Z3o,eFo,dN,oFo,rFo,tFo,eu,Ule,aFo,nFo,cN,sFo,lFo,iFo,ou,Jle,dFo,cFo,fN,fFo,mFo,gFo,ru,Yle,hFo,pFo,mN,_Fo,uFo,bFo,tu,Kle,vFo,FFo,gN,TFo,MFo,EFo,au,Zle,CFo,wFo,hN,AFo,yFo,LFo,nu,eie,xFo,$Fo,pN,kFo,SFo,RFo,su,oie,PFo,BFo,_N,IFo,qFo,NFo,lu,rie,jFo,DFo,uN,GFo,OFo,VFo,iu,tie,XFo,zFo,bN,WFo,QFo,HFo,du,aie,UFo,JFo,vN,YFo,KFo,ZFo,cu,nie,eTo,oTo,FN,rTo,tTo,aTo,fu,sie,nTo,sTo,TN,lTo,iTo,dTo,mu,lie,cTo,fTo,MN,mTo,gTo,hTo,gu,iie,pTo,_To,EN,uTo,bTo,vTo,hu,die,FTo,TTo,CN,MTo,ETo,CTo,pu,cie,wTo,ATo,wN,yTo,LTo,xTo,_u,fie,$To,kTo,AN,STo,RTo,PTo,uu,mie,BTo,ITo,yN,qTo,NTo,jTo,bu,gie,DTo,GTo,LN,OTo,VTo,XTo,vu,hie,zTo,WTo,xN,QTo,HTo,UTo,Fu,pie,JTo,YTo,$N,KTo,ZTo,e8o,Tu,_ie,o8o,r8o,kN,t8o,a8o,n8o,Mu,uie,s8o,l8o,SN,i8o,d8o,c8o,Eu,bie,f8o,m8o,RN,g8o,h8o,p8o,Cu,vie,_8o,u8o,PN,b8o,v8o,F8o,wu,Fie,T8o,M8o,BN,E8o,C8o,w8o,Au,Tie,A8o,y8o,IN,L8o,x8o,$8o,yu,Mie,k8o,S8o,qN,R8o,P8o,B8o,Lu,Eie,I8o,q8o,NN,N8o,j8o,D8o,xu,Cie,G8o,O8o,jN,V8o,X8o,z8o,$u,wie,W8o,Q8o,DN,H8o,U8o,J8o,ku,Aie,Y8o,K8o,GN,Z8o,eMo,oMo,Su,yie,rMo,tMo,ON,aMo,nMo,sMo,Ru,Lie,lMo,iMo,VN,dMo,cMo,fMo,Pu,xie,mMo,gMo,XN,hMo,pMo,_Mo,Bu,$ie,uMo,bMo,zN,vMo,FMo,TMo,Iu,kie,MMo,EMo,WN,CMo,wMo,AMo,qu,Sie,yMo,LMo,QN,xMo,$Mo,kMo,Nu,SMo,Rie,RMo,PMo,Pie,BMo,IMo,ju,_qe,$i,Du,Bie,JA,qMo,Iie,NMo,uqe,$o,YA,jMo,ki,DMo,HN,GMo,OMo,UN,VMo,XMo,zMo,KA,WMo,qie,QMo,HMo,UMo,nt,ZA,JMo,Nie,YMo,KMo,Si,ZMo,jie,e4o,o4o,JN,r4o,t4o,a4o,Gu,n4o,Ke,e6,s4o,Die,l4o,i4o,$a,d4o,Gie,c4o,f4o,Oie,m4o,g4o,Vie,h4o,p4o,_4o,z,Ou,Xie,u4o,b4o,YN,v4o,F4o,T4o,Vu,zie,M4o,E4o,KN,C4o,w4o,A4o,Xu,Wie,y4o,L4o,ZN,x4o,$4o,k4o,zu,Qie,S4o,R4o,ej,P4o,B4o,I4o,Wu,Hie,q4o,N4o,oj,j4o,D4o,G4o,Qu,Uie,O4o,V4o,rj,X4o,z4o,W4o,Hu,Jie,Q4o,H4o,tj,U4o,J4o,Y4o,Uu,Yie,K4o,Z4o,aj,eEo,oEo,rEo,Ju,Kie,tEo,aEo,nj,nEo,sEo,lEo,Yu,Zie,iEo,dEo,sj,cEo,fEo,mEo,Ku,ede,gEo,hEo,lj,pEo,_Eo,uEo,Zu,ode,bEo,vEo,ij,FEo,TEo,MEo,e1,rde,EEo,CEo,dj,wEo,AEo,yEo,o1,tde,LEo,xEo,cj,$Eo,kEo,SEo,r1,ade,REo,PEo,fj,BEo,IEo,qEo,t1,nde,NEo,jEo,mj,DEo,GEo,OEo,a1,sde,VEo,XEo,gj,zEo,WEo,QEo,n1,lde,HEo,UEo,hj,JEo,YEo,KEo,s1,ide,ZEo,eCo,pj,oCo,rCo,tCo,l1,dde,aCo,nCo,_j,sCo,lCo,iCo,i1,cde,dCo,cCo,uj,fCo,mCo,gCo,d1,fde,hCo,pCo,bj,_Co,uCo,bCo,c1,mde,vCo,FCo,vj,TCo,MCo,ECo,f1,gde,CCo,wCo,Fj,ACo,yCo,LCo,m1,hde,xCo,$Co,Tj,kCo,SCo,RCo,g1,pde,PCo,BCo,Mj,ICo,qCo,NCo,h1,_de,jCo,DCo,Ej,GCo,OCo,VCo,p1,ude,XCo,zCo,Cj,WCo,QCo,HCo,_1,bde,UCo,JCo,wj,YCo,KCo,ZCo,u1,vde,e5o,o5o,Aj,r5o,t5o,a5o,b1,Fde,n5o,s5o,yj,l5o,i5o,d5o,v1,Tde,c5o,f5o,Lj,m5o,g5o,h5o,F1,Mde,p5o,_5o,xj,u5o,b5o,v5o,T1,Ede,F5o,T5o,$j,M5o,E5o,C5o,M1,Cde,w5o,A5o,kj,y5o,L5o,x5o,E1,wde,$5o,k5o,Sj,S5o,R5o,P5o,C1,B5o,Ade,I5o,q5o,yde,N5o,j5o,w1,bqe,Ri,A1,Lde,o6,D5o,xde,G5o,vqe,ko,r6,O5o,Pi,V5o,Rj,X5o,z5o,Pj,W5o,Q5o,H5o,t6,U5o,$de,J5o,Y5o,K5o,st,a6,Z5o,kde,ewo,owo,Bi,rwo,Sde,two,awo,Bj,nwo,swo,lwo,y1,iwo,Ze,n6,dwo,Rde,cwo,fwo,ka,mwo,Pde,gwo,hwo,Bde,pwo,_wo,Ide,uwo,bwo,vwo,W,L1,qde,Fwo,Two,Ij,Mwo,Ewo,Cwo,x1,Nde,wwo,Awo,qj,ywo,Lwo,xwo,$1,jde,$wo,kwo,Nj,Swo,Rwo,Pwo,k1,Dde,Bwo,Iwo,jj,qwo,Nwo,jwo,S1,Gde,Dwo,Gwo,Dj,Owo,Vwo,Xwo,R1,Ode,zwo,Wwo,Gj,Qwo,Hwo,Uwo,P1,Vde,Jwo,Ywo,Oj,Kwo,Zwo,e0o,B1,Xde,o0o,r0o,Vj,t0o,a0o,n0o,I1,zde,s0o,l0o,Xj,i0o,d0o,c0o,q1,Wde,f0o,m0o,zj,g0o,h0o,p0o,N1,Qde,_0o,u0o,Wj,b0o,v0o,F0o,j1,Hde,T0o,M0o,Qj,E0o,C0o,w0o,D1,Ude,A0o,y0o,Hj,L0o,x0o,$0o,G1,Jde,k0o,S0o,Uj,R0o,P0o,B0o,O1,Yde,I0o,q0o,Jj,N0o,j0o,D0o,V1,Kde,G0o,O0o,Yj,V0o,X0o,z0o,X1,Zde,W0o,Q0o,Kj,H0o,U0o,J0o,z1,ece,Y0o,K0o,Zj,Z0o,eAo,oAo,W1,oce,rAo,tAo,eD,aAo,nAo,sAo,Q1,rce,lAo,iAo,oD,dAo,cAo,fAo,H1,tce,mAo,gAo,rD,hAo,pAo,_Ao,U1,ace,uAo,bAo,tD,vAo,FAo,TAo,J1,nce,MAo,EAo,aD,CAo,wAo,AAo,Y1,sce,yAo,LAo,nD,xAo,$Ao,kAo,K1,lce,SAo,RAo,sD,PAo,BAo,IAo,Z1,ice,qAo,NAo,lD,jAo,DAo,GAo,e7,dce,OAo,VAo,iD,XAo,zAo,WAo,o7,cce,QAo,HAo,dD,UAo,JAo,YAo,r7,fce,KAo,ZAo,cD,e6o,o6o,r6o,t7,mce,t6o,a6o,fD,n6o,s6o,l6o,a7,gce,i6o,d6o,hce,c6o,f6o,m6o,n7,pce,g6o,h6o,mD,p6o,_6o,u6o,s7,_ce,b6o,v6o,gD,F6o,T6o,M6o,l7,uce,E6o,C6o,hD,w6o,A6o,y6o,i7,bce,L6o,x6o,pD,$6o,k6o,S6o,d7,R6o,vce,P6o,B6o,Fce,I6o,q6o,c7,Fqe,Ii,f7,Tce,s6,N6o,Mce,j6o,Tqe,So,l6,D6o,qi,G6o,_D,O6o,V6o,uD,X6o,z6o,W6o,i6,Q6o,Ece,H6o,U6o,J6o,lt,d6,Y6o,Cce,K6o,Z6o,Ni,eyo,wce,oyo,ryo,bD,tyo,ayo,nyo,m7,syo,eo,c6,lyo,Ace,iyo,dyo,Sa,cyo,yce,fyo,myo,Lce,gyo,hyo,xce,pyo,_yo,uyo,_e,g7,$ce,byo,vyo,vD,Fyo,Tyo,Myo,h7,kce,Eyo,Cyo,FD,wyo,Ayo,yyo,p7,Sce,Lyo,xyo,TD,$yo,kyo,Syo,_7,Rce,Ryo,Pyo,MD,Byo,Iyo,qyo,u7,Pce,Nyo,jyo,ED,Dyo,Gyo,Oyo,b7,Bce,Vyo,Xyo,CD,zyo,Wyo,Qyo,v7,Ice,Hyo,Uyo,wD,Jyo,Yyo,Kyo,F7,qce,Zyo,eLo,AD,oLo,rLo,tLo,T7,Nce,aLo,nLo,yD,sLo,lLo,iLo,M7,jce,dLo,cLo,LD,fLo,mLo,gLo,E7,Dce,hLo,pLo,xD,_Lo,uLo,bLo,C7,Gce,vLo,FLo,$D,TLo,MLo,ELo,w7,Oce,CLo,wLo,kD,ALo,yLo,LLo,A7,Vce,xLo,$Lo,SD,kLo,SLo,RLo,y7,Xce,PLo,BLo,RD,ILo,qLo,NLo,L7,zce,jLo,DLo,PD,GLo,OLo,VLo,x7,XLo,Wce,zLo,WLo,Qce,QLo,HLo,$7,Mqe,ji,k7,Hce,f6,ULo,Uce,JLo,Eqe,Ro,m6,YLo,Di,KLo,BD,ZLo,e9o,ID,o9o,r9o,t9o,g6,a9o,Jce,n9o,s9o,l9o,it,h6,i9o,Yce,d9o,c9o,Gi,f9o,Kce,m9o,g9o,qD,h9o,p9o,_9o,S7,u9o,oo,p6,b9o,Zce,v9o,F9o,Ra,T9o,efe,M9o,E9o,ofe,C9o,w9o,rfe,A9o,y9o,L9o,q,R7,tfe,x9o,$9o,ND,k9o,S9o,R9o,P7,afe,P9o,B9o,jD,I9o,q9o,N9o,B7,nfe,j9o,D9o,DD,G9o,O9o,V9o,I7,sfe,X9o,z9o,GD,W9o,Q9o,H9o,q7,lfe,U9o,J9o,OD,Y9o,K9o,Z9o,N7,ife,exo,oxo,VD,rxo,txo,axo,j7,dfe,nxo,sxo,XD,lxo,ixo,dxo,D7,cfe,cxo,fxo,zD,mxo,gxo,hxo,G7,ffe,pxo,_xo,WD,uxo,bxo,vxo,O7,mfe,Fxo,Txo,QD,Mxo,Exo,Cxo,V7,gfe,wxo,Axo,HD,yxo,Lxo,xxo,X7,hfe,$xo,kxo,UD,Sxo,Rxo,Pxo,z7,pfe,Bxo,Ixo,JD,qxo,Nxo,jxo,W7,_fe,Dxo,Gxo,YD,Oxo,Vxo,Xxo,Q7,ufe,zxo,Wxo,KD,Qxo,Hxo,Uxo,H7,bfe,Jxo,Yxo,ZD,Kxo,Zxo,e$o,U7,vfe,o$o,r$o,eG,t$o,a$o,n$o,J7,Ffe,s$o,l$o,oG,i$o,d$o,c$o,Y7,Tfe,f$o,m$o,rG,g$o,h$o,p$o,K7,Mfe,_$o,u$o,tG,b$o,v$o,F$o,Z7,Efe,T$o,M$o,aG,E$o,C$o,w$o,eb,Cfe,A$o,y$o,nG,L$o,x$o,$$o,ob,wfe,k$o,S$o,sG,R$o,P$o,B$o,rb,Afe,I$o,q$o,lG,N$o,j$o,D$o,tb,yfe,G$o,O$o,iG,V$o,X$o,z$o,ab,Lfe,W$o,Q$o,dG,H$o,U$o,J$o,nb,xfe,Y$o,K$o,cG,Z$o,eko,oko,sb,$fe,rko,tko,fG,ako,nko,sko,lb,kfe,lko,iko,mG,dko,cko,fko,ib,Sfe,mko,gko,gG,hko,pko,_ko,db,Rfe,uko,bko,hG,vko,Fko,Tko,cb,Pfe,Mko,Eko,pG,Cko,wko,Ako,fb,Bfe,yko,Lko,_G,xko,$ko,kko,mb,Ife,Sko,Rko,uG,Pko,Bko,Iko,gb,qfe,qko,Nko,bG,jko,Dko,Gko,hb,Nfe,Oko,Vko,vG,Xko,zko,Wko,pb,jfe,Qko,Hko,FG,Uko,Jko,Yko,_b,Dfe,Kko,Zko,TG,eSo,oSo,rSo,ub,Gfe,tSo,aSo,MG,nSo,sSo,lSo,bb,Ofe,iSo,dSo,EG,cSo,fSo,mSo,vb,Vfe,gSo,hSo,CG,pSo,_So,uSo,Fb,Xfe,bSo,vSo,wG,FSo,TSo,MSo,Tb,zfe,ESo,CSo,AG,wSo,ASo,ySo,Mb,Wfe,LSo,xSo,yG,$So,kSo,SSo,Eb,Qfe,RSo,PSo,LG,BSo,ISo,qSo,Cb,Hfe,NSo,jSo,xG,DSo,GSo,OSo,wb,VSo,Ufe,XSo,zSo,Jfe,WSo,QSo,Ab,Cqe,Oi,yb,Yfe,_6,HSo,Kfe,USo,wqe,Po,u6,JSo,Vi,YSo,$G,KSo,ZSo,kG,eRo,oRo,rRo,b6,tRo,Zfe,aRo,nRo,sRo,dt,v6,lRo,eme,iRo,dRo,Xi,cRo,ome,fRo,mRo,SG,gRo,hRo,pRo,Lb,_Ro,ro,F6,uRo,rme,bRo,vRo,Pa,FRo,tme,TRo,MRo,ame,ERo,CRo,nme,wRo,ARo,yRo,Y,xb,sme,LRo,xRo,RG,$Ro,kRo,SRo,$b,lme,RRo,PRo,PG,BRo,IRo,qRo,kb,ime,NRo,jRo,BG,DRo,GRo,ORo,Sb,dme,VRo,XRo,IG,zRo,WRo,QRo,Rb,cme,HRo,URo,qG,JRo,YRo,KRo,Pb,fme,ZRo,ePo,NG,oPo,rPo,tPo,Bb,mme,aPo,nPo,jG,sPo,lPo,iPo,Ib,gme,dPo,cPo,DG,fPo,mPo,gPo,qb,hme,hPo,pPo,GG,_Po,uPo,bPo,Nb,pme,vPo,FPo,OG,TPo,MPo,EPo,jb,_me,CPo,wPo,VG,APo,yPo,LPo,Db,ume,xPo,$Po,XG,kPo,SPo,RPo,Gb,bme,PPo,BPo,zG,IPo,qPo,NPo,Ob,vme,jPo,DPo,WG,GPo,OPo,VPo,Vb,Fme,XPo,zPo,QG,WPo,QPo,HPo,Xb,Tme,UPo,JPo,HG,YPo,KPo,ZPo,zb,Mme,eBo,oBo,UG,rBo,tBo,aBo,Wb,Eme,nBo,sBo,JG,lBo,iBo,dBo,Qb,Cme,cBo,fBo,YG,mBo,gBo,hBo,Hb,wme,pBo,_Bo,KG,uBo,bBo,vBo,Ub,Ame,FBo,TBo,ZG,MBo,EBo,CBo,Jb,yme,wBo,ABo,eO,yBo,LBo,xBo,Yb,Lme,$Bo,kBo,oO,SBo,RBo,PBo,Kb,xme,BBo,IBo,rO,qBo,NBo,jBo,Zb,$me,DBo,GBo,tO,OBo,VBo,XBo,e2,kme,zBo,WBo,aO,QBo,HBo,UBo,o2,Sme,JBo,YBo,nO,KBo,ZBo,eIo,r2,Rme,oIo,rIo,sO,tIo,aIo,nIo,t2,Pme,sIo,lIo,lO,iIo,dIo,cIo,a2,fIo,Bme,mIo,gIo,Ime,hIo,pIo,n2,Aqe,zi,s2,qme,T6,_Io,Nme,uIo,yqe,Bo,M6,bIo,Wi,vIo,iO,FIo,TIo,dO,MIo,EIo,CIo,E6,wIo,jme,AIo,yIo,LIo,ct,C6,xIo,Dme,$Io,kIo,Qi,SIo,Gme,RIo,PIo,cO,BIo,IIo,qIo,l2,NIo,to,w6,jIo,Ome,DIo,GIo,Ba,OIo,Vme,VIo,XIo,Xme,zIo,WIo,zme,QIo,HIo,UIo,Yr,i2,Wme,JIo,YIo,fO,KIo,ZIo,eqo,d2,Qme,oqo,rqo,mO,tqo,aqo,nqo,c2,Hme,sqo,lqo,gO,iqo,dqo,cqo,f2,Ume,fqo,mqo,hO,gqo,hqo,pqo,m2,Jme,_qo,uqo,pO,bqo,vqo,Fqo,g2,Tqo,Yme,Mqo,Eqo,Kme,Cqo,wqo,h2,Lqe,Hi,p2,Zme,A6,Aqo,ege,yqo,xqe,Io,y6,Lqo,Ui,xqo,_O,$qo,kqo,uO,Sqo,Rqo,Pqo,L6,Bqo,oge,Iqo,qqo,Nqo,ft,x6,jqo,rge,Dqo,Gqo,Ji,Oqo,tge,Vqo,Xqo,bO,zqo,Wqo,Qqo,_2,Hqo,ao,$6,Uqo,age,Jqo,Yqo,Ia,Kqo,nge,Zqo,eNo,sge,oNo,rNo,lge,tNo,aNo,nNo,U,u2,ige,sNo,lNo,vO,iNo,dNo,cNo,b2,dge,fNo,mNo,FO,gNo,hNo,pNo,v2,cge,_No,uNo,TO,bNo,vNo,FNo,F2,fge,TNo,MNo,MO,ENo,CNo,wNo,T2,mge,ANo,yNo,EO,LNo,xNo,$No,M2,gge,kNo,SNo,CO,RNo,PNo,BNo,E2,hge,INo,qNo,wO,NNo,jNo,DNo,C2,pge,GNo,ONo,AO,VNo,XNo,zNo,w2,_ge,WNo,QNo,yO,HNo,UNo,JNo,A2,uge,YNo,KNo,LO,ZNo,ejo,ojo,y2,bge,rjo,tjo,xO,ajo,njo,sjo,L2,vge,ljo,ijo,$O,djo,cjo,fjo,x2,Fge,mjo,gjo,kO,hjo,pjo,_jo,$2,Tge,ujo,bjo,SO,vjo,Fjo,Tjo,k2,Mge,Mjo,Ejo,RO,Cjo,wjo,Ajo,S2,Ege,yjo,Ljo,PO,xjo,$jo,kjo,R2,Cge,Sjo,Rjo,BO,Pjo,Bjo,Ijo,P2,wge,qjo,Njo,IO,jjo,Djo,Gjo,B2,Age,Ojo,Vjo,qO,Xjo,zjo,Wjo,I2,yge,Qjo,Hjo,NO,Ujo,Jjo,Yjo,q2,Lge,Kjo,Zjo,jO,eDo,oDo,rDo,N2,xge,tDo,aDo,DO,nDo,sDo,lDo,j2,$ge,iDo,dDo,GO,cDo,fDo,mDo,D2,kge,gDo,hDo,OO,pDo,_Do,uDo,G2,Sge,bDo,vDo,VO,FDo,TDo,MDo,O2,Rge,EDo,CDo,XO,wDo,ADo,yDo,V2,Pge,LDo,xDo,zO,$Do,kDo,SDo,X2,Bge,RDo,PDo,WO,BDo,IDo,qDo,z2,Ige,NDo,jDo,QO,DDo,GDo,ODo,W2,qge,VDo,XDo,HO,zDo,WDo,QDo,Q2,Nge,HDo,UDo,UO,JDo,YDo,KDo,H2,jge,ZDo,eGo,JO,oGo,rGo,tGo,U2,Dge,aGo,nGo,YO,sGo,lGo,iGo,J2,dGo,Gge,cGo,fGo,Oge,mGo,gGo,Y2,$qe,Yi,K2,Vge,k6,hGo,Xge,pGo,kqe,qo,S6,_Go,Ki,uGo,KO,bGo,vGo,ZO,FGo,TGo,MGo,R6,EGo,zge,CGo,wGo,AGo,mt,P6,yGo,Wge,LGo,xGo,Zi,$Go,Qge,kGo,SGo,eV,RGo,PGo,BGo,Z2,IGo,no,B6,qGo,Hge,NGo,jGo,qa,DGo,Uge,GGo,OGo,Jge,VGo,XGo,Yge,zGo,WGo,QGo,V,ev,Kge,HGo,UGo,oV,JGo,YGo,KGo,ov,Zge,ZGo,eOo,rV,oOo,rOo,tOo,rv,ehe,aOo,nOo,tV,sOo,lOo,iOo,tv,ohe,dOo,cOo,aV,fOo,mOo,gOo,av,rhe,hOo,pOo,nV,_Oo,uOo,bOo,nv,the,vOo,FOo,sV,TOo,MOo,EOo,sv,ahe,COo,wOo,lV,AOo,yOo,LOo,lv,nhe,xOo,$Oo,iV,kOo,SOo,ROo,iv,she,POo,BOo,dV,IOo,qOo,NOo,dv,lhe,jOo,DOo,cV,GOo,OOo,VOo,cv,ihe,XOo,zOo,fV,WOo,QOo,HOo,fv,dhe,UOo,JOo,mV,YOo,KOo,ZOo,mv,che,eVo,oVo,gV,rVo,tVo,aVo,gv,fhe,nVo,sVo,hV,lVo,iVo,dVo,hv,mhe,cVo,fVo,pV,mVo,gVo,hVo,pv,ghe,pVo,_Vo,_V,uVo,bVo,vVo,_v,hhe,FVo,TVo,uV,MVo,EVo,CVo,uv,phe,wVo,AVo,bV,yVo,LVo,xVo,bv,_he,$Vo,kVo,vV,SVo,RVo,PVo,vv,uhe,BVo,IVo,FV,qVo,NVo,jVo,Fv,bhe,DVo,GVo,TV,OVo,VVo,XVo,Tv,vhe,zVo,WVo,MV,QVo,HVo,UVo,Mv,Fhe,JVo,YVo,EV,KVo,ZVo,eXo,Ev,The,oXo,rXo,CV,tXo,aXo,nXo,Cv,Mhe,sXo,lXo,wV,iXo,dXo,cXo,wv,Ehe,fXo,mXo,AV,gXo,hXo,pXo,Av,Che,_Xo,uXo,yV,bXo,vXo,FXo,yv,whe,TXo,MXo,LV,EXo,CXo,wXo,Lv,Ahe,AXo,yXo,xV,LXo,xXo,$Xo,xv,yhe,kXo,SXo,$V,RXo,PXo,BXo,$v,Lhe,IXo,qXo,kV,NXo,jXo,DXo,kv,xhe,GXo,OXo,SV,VXo,XXo,zXo,Sv,$he,WXo,QXo,RV,HXo,UXo,JXo,Rv,khe,YXo,KXo,PV,ZXo,ezo,ozo,Pv,She,rzo,tzo,BV,azo,nzo,szo,Bv,Rhe,lzo,izo,IV,dzo,czo,fzo,Iv,Phe,mzo,gzo,qV,hzo,pzo,_zo,qv,Bhe,uzo,bzo,NV,vzo,Fzo,Tzo,Nv,Ihe,Mzo,Ezo,jV,Czo,wzo,Azo,jv,yzo,qhe,Lzo,xzo,Nhe,$zo,kzo,Dv,Sqe,ed,Gv,jhe,I6,Szo,Dhe,Rzo,Rqe,No,q6,Pzo,od,Bzo,DV,Izo,qzo,GV,Nzo,jzo,Dzo,N6,Gzo,Ghe,Ozo,Vzo,Xzo,gt,j6,zzo,Ohe,Wzo,Qzo,rd,Hzo,Vhe,Uzo,Jzo,OV,Yzo,Kzo,Zzo,Ov,eWo,so,D6,oWo,Xhe,rWo,tWo,Na,aWo,zhe,nWo,sWo,Whe,lWo,iWo,Qhe,dWo,cWo,fWo,Hhe,Vv,Uhe,mWo,gWo,VV,hWo,pWo,_Wo,Xv,uWo,Jhe,bWo,vWo,Yhe,FWo,TWo,zv,Pqe,td,Wv,Khe,G6,MWo,Zhe,EWo,Bqe,jo,O6,CWo,ad,wWo,XV,AWo,yWo,zV,LWo,xWo,$Wo,V6,kWo,epe,SWo,RWo,PWo,ht,X6,BWo,ope,IWo,qWo,nd,NWo,rpe,jWo,DWo,WV,GWo,OWo,VWo,Qv,XWo,lo,z6,zWo,tpe,WWo,QWo,ja,HWo,ape,UWo,JWo,npe,YWo,KWo,spe,ZWo,eQo,oQo,Fe,Hv,lpe,rQo,tQo,QV,aQo,nQo,sQo,Uv,ipe,lQo,iQo,HV,dQo,cQo,fQo,Jv,dpe,mQo,gQo,UV,hQo,pQo,_Qo,Yv,cpe,uQo,bQo,JV,vQo,FQo,TQo,Ps,fpe,MQo,EQo,YV,CQo,wQo,KV,AQo,yQo,LQo,Kv,mpe,xQo,$Qo,ZV,kQo,SQo,RQo,pt,gpe,PQo,BQo,eX,IQo,qQo,oX,NQo,jQo,rX,DQo,GQo,OQo,Zv,hpe,VQo,XQo,tX,zQo,WQo,QQo,e3,ppe,HQo,UQo,aX,JQo,YQo,KQo,o3,_pe,ZQo,eHo,nX,oHo,rHo,tHo,r3,upe,aHo,nHo,sX,sHo,lHo,iHo,t3,bpe,dHo,cHo,lX,fHo,mHo,gHo,a3,vpe,hHo,pHo,iX,_Ho,uHo,bHo,n3,Fpe,vHo,FHo,dX,THo,MHo,EHo,s3,CHo,Tpe,wHo,AHo,Mpe,yHo,LHo,l3,Iqe,sd,i3,Epe,W6,xHo,Cpe,$Ho,qqe,Do,Q6,kHo,ld,SHo,cX,RHo,PHo,fX,BHo,IHo,qHo,H6,NHo,wpe,jHo,DHo,GHo,_t,U6,OHo,Ape,VHo,XHo,id,zHo,ype,WHo,QHo,mX,HHo,UHo,JHo,d3,YHo,io,J6,KHo,Lpe,ZHo,eUo,Da,oUo,xpe,rUo,tUo,$pe,aUo,nUo,kpe,sUo,lUo,iUo,Spe,c3,Rpe,dUo,cUo,gX,fUo,mUo,gUo,f3,hUo,Ppe,pUo,_Uo,Bpe,uUo,bUo,m3,Nqe,dd,g3,Ipe,Y6,vUo,qpe,FUo,jqe,Go,K6,TUo,cd,MUo,hX,EUo,CUo,pX,wUo,AUo,yUo,Z6,LUo,Npe,xUo,$Uo,kUo,ut,ey,SUo,jpe,RUo,PUo,fd,BUo,Dpe,IUo,qUo,_X,NUo,jUo,DUo,h3,GUo,co,oy,OUo,Gpe,VUo,XUo,Ga,zUo,Ope,WUo,QUo,Vpe,HUo,UUo,Xpe,JUo,YUo,KUo,ke,p3,zpe,ZUo,eJo,uX,oJo,rJo,tJo,_3,Wpe,aJo,nJo,bX,sJo,lJo,iJo,u3,Qpe,dJo,cJo,vX,fJo,mJo,gJo,b3,Hpe,hJo,pJo,FX,_Jo,uJo,bJo,v3,Upe,vJo,FJo,TX,TJo,MJo,EJo,F3,Jpe,CJo,wJo,MX,AJo,yJo,LJo,T3,Ype,xJo,$Jo,EX,kJo,SJo,RJo,M3,Kpe,PJo,BJo,CX,IJo,qJo,NJo,E3,Zpe,jJo,DJo,wX,GJo,OJo,VJo,C3,XJo,e_e,zJo,WJo,o_e,QJo,HJo,w3,Dqe,md,A3,r_e,ry,UJo,t_e,JJo,Gqe,Oo,ty,YJo,gd,KJo,AX,ZJo,eYo,yX,oYo,rYo,tYo,ay,aYo,a_e,nYo,sYo,lYo,bt,ny,iYo,n_e,dYo,cYo,hd,fYo,s_e,mYo,gYo,LX,hYo,pYo,_Yo,y3,uYo,fo,sy,bYo,l_e,vYo,FYo,Oa,TYo,i_e,MYo,EYo,d_e,CYo,wYo,c_e,AYo,yYo,LYo,Kr,L3,f_e,xYo,$Yo,xX,kYo,SYo,RYo,x3,m_e,PYo,BYo,$X,IYo,qYo,NYo,$3,g_e,jYo,DYo,kX,GYo,OYo,VYo,k3,h_e,XYo,zYo,SX,WYo,QYo,HYo,S3,p_e,UYo,JYo,RX,YYo,KYo,ZYo,R3,eKo,__e,oKo,rKo,u_e,tKo,aKo,P3,Oqe,pd,B3,b_e,ly,nKo,v_e,sKo,Vqe,Vo,iy,lKo,_d,iKo,PX,dKo,cKo,BX,fKo,mKo,gKo,dy,hKo,F_e,pKo,_Ko,uKo,vt,cy,bKo,T_e,vKo,FKo,ud,TKo,M_e,MKo,EKo,IX,CKo,wKo,AKo,I3,yKo,mo,fy,LKo,E_e,xKo,$Ko,Va,kKo,C_e,SKo,RKo,w_e,PKo,BKo,A_e,IKo,qKo,NKo,Se,q3,y_e,jKo,DKo,qX,GKo,OKo,VKo,N3,L_e,XKo,zKo,NX,WKo,QKo,HKo,j3,x_e,UKo,JKo,jX,YKo,KKo,ZKo,D3,$_e,eZo,oZo,DX,rZo,tZo,aZo,G3,k_e,nZo,sZo,GX,lZo,iZo,dZo,O3,S_e,cZo,fZo,OX,mZo,gZo,hZo,V3,R_e,pZo,_Zo,VX,uZo,bZo,vZo,X3,P_e,FZo,TZo,XX,MZo,EZo,CZo,z3,B_e,wZo,AZo,zX,yZo,LZo,xZo,W3,$Zo,I_e,kZo,SZo,q_e,RZo,PZo,Q3,Xqe,bd,H3,N_e,my,BZo,j_e,IZo,zqe,Xo,gy,qZo,vd,NZo,WX,jZo,DZo,QX,GZo,OZo,VZo,hy,XZo,D_e,zZo,WZo,QZo,Ft,py,HZo,G_e,UZo,JZo,Fd,YZo,O_e,KZo,ZZo,HX,eer,oer,rer,U3,ter,go,_y,aer,V_e,ner,ser,Xa,ler,X_e,ier,der,z_e,cer,fer,W_e,mer,ger,her,uy,J3,Q_e,per,_er,UX,uer,ber,ver,Y3,H_e,Fer,Ter,JX,Mer,Eer,Cer,K3,wer,U_e,Aer,yer,J_e,Ler,xer,Z3,Wqe,Td,eF,Y_e,by,$er,K_e,ker,Qqe,zo,vy,Ser,Md,Rer,YX,Per,Ber,KX,Ier,qer,Ner,Fy,jer,Z_e,Der,Ger,Oer,Tt,Ty,Ver,eue,Xer,zer,Ed,Wer,oue,Qer,Her,ZX,Uer,Jer,Yer,oF,Ker,ho,My,Zer,rue,eor,oor,za,ror,tue,tor,aor,aue,nor,sor,nue,lor,ior,dor,Zr,rF,sue,cor,mor,ez,gor,hor,por,tF,lue,_or,uor,oz,bor,vor,For,aF,iue,Tor,Mor,rz,Eor,Cor,wor,nF,due,Aor,yor,tz,Lor,xor,$or,sF,cue,kor,Sor,az,Ror,Por,Bor,lF,Ior,fue,qor,Nor,mue,jor,Dor,iF,Hqe,Cd,dF,gue,Ey,Gor,hue,Oor,Uqe,Wo,Cy,Vor,wd,Xor,nz,zor,Wor,sz,Qor,Hor,Uor,wy,Jor,pue,Yor,Kor,Zor,Mt,Ay,err,_ue,orr,rrr,Ad,trr,uue,arr,nrr,lz,srr,lrr,irr,cF,drr,po,yy,crr,bue,frr,mrr,Wa,grr,vue,hrr,prr,Fue,_rr,urr,Tue,brr,vrr,Frr,yd,fF,Mue,Trr,Mrr,iz,Err,Crr,wrr,mF,Eue,Arr,yrr,dz,Lrr,xrr,$rr,gF,Cue,krr,Srr,cz,Rrr,Prr,Brr,hF,Irr,wue,qrr,Nrr,Aue,jrr,Drr,pF,Jqe,Ld,_F,yue,Ly,Grr,Lue,Orr,Yqe,Qo,xy,Vrr,xd,Xrr,fz,zrr,Wrr,mz,Qrr,Hrr,Urr,$y,Jrr,xue,Yrr,Krr,Zrr,Et,ky,etr,$ue,otr,rtr,$d,ttr,kue,atr,ntr,gz,str,ltr,itr,uF,dtr,_o,Sy,ctr,Sue,ftr,mtr,Qa,gtr,Rue,htr,ptr,Pue,_tr,utr,Bue,btr,vtr,Ftr,Ry,bF,Iue,Ttr,Mtr,hz,Etr,Ctr,wtr,vF,que,Atr,ytr,pz,Ltr,xtr,$tr,FF,ktr,Nue,Str,Rtr,jue,Ptr,Btr,TF,Kqe,kd,MF,Due,Py,Itr,Gue,qtr,Zqe,Ho,By,Ntr,Sd,jtr,_z,Dtr,Gtr,uz,Otr,Vtr,Xtr,Iy,ztr,Oue,Wtr,Qtr,Htr,Ct,qy,Utr,Vue,Jtr,Ytr,Rd,Ktr,Xue,Ztr,ear,bz,oar,rar,tar,EF,aar,uo,Ny,nar,zue,sar,lar,Ha,iar,Wue,dar,car,Que,far,mar,Hue,gar,har,par,Uue,CF,Jue,_ar,uar,vz,bar,Far,Tar,wF,Mar,Yue,Ear,Car,Kue,war,Aar,AF,eNe,Pd,yF,Zue,jy,yar,e1e,Lar,oNe,Uo,Dy,xar,Bd,$ar,Fz,kar,Sar,Tz,Rar,Par,Bar,Gy,Iar,o1e,qar,Nar,jar,wt,Oy,Dar,r1e,Gar,Oar,Id,Var,t1e,Xar,zar,Mz,War,Qar,Har,LF,Uar,bo,Vy,Jar,a1e,Yar,Kar,Ua,Zar,n1e,enr,onr,s1e,rnr,tnr,l1e,anr,nnr,snr,Ja,xF,i1e,lnr,inr,Ez,dnr,cnr,fnr,$F,d1e,mnr,gnr,Cz,hnr,pnr,_nr,kF,c1e,unr,bnr,wz,vnr,Fnr,Tnr,SF,f1e,Mnr,Enr,Az,Cnr,wnr,Anr,RF,ynr,m1e,Lnr,xnr,g1e,$nr,knr,PF,rNe,qd,BF,h1e,Xy,Snr,p1e,Rnr,tNe,Jo,zy,Pnr,Nd,Bnr,yz,Inr,qnr,Lz,Nnr,jnr,Dnr,Wy,Gnr,_1e,Onr,Vnr,Xnr,At,Qy,znr,u1e,Wnr,Qnr,jd,Hnr,b1e,Unr,Jnr,xz,Ynr,Knr,Znr,IF,esr,vo,Hy,osr,v1e,rsr,tsr,Ya,asr,F1e,nsr,ssr,T1e,lsr,isr,M1e,dsr,csr,fsr,E1e,qF,C1e,msr,gsr,$z,hsr,psr,_sr,NF,usr,w1e,bsr,vsr,A1e,Fsr,Tsr,jF,aNe,Dd,DF,y1e,Uy,Msr,L1e,Esr,nNe,Yo,Jy,Csr,Gd,wsr,kz,Asr,ysr,Sz,Lsr,xsr,$sr,Yy,ksr,x1e,Ssr,Rsr,Psr,yt,Ky,Bsr,$1e,Isr,qsr,Od,Nsr,k1e,jsr,Dsr,Rz,Gsr,Osr,Vsr,GF,Xsr,wr,Zy,zsr,S1e,Wsr,Qsr,Ka,Hsr,R1e,Usr,Jsr,P1e,Ysr,Ksr,B1e,Zsr,elr,olr,N,OF,I1e,rlr,tlr,Pz,alr,nlr,slr,VF,q1e,llr,ilr,Bz,dlr,clr,flr,XF,N1e,mlr,glr,Iz,hlr,plr,_lr,zF,j1e,ulr,blr,qz,vlr,Flr,Tlr,WF,D1e,Mlr,Elr,Nz,Clr,wlr,Alr,QF,G1e,ylr,Llr,jz,xlr,$lr,klr,HF,O1e,Slr,Rlr,Dz,Plr,Blr,Ilr,UF,V1e,qlr,Nlr,Gz,jlr,Dlr,Glr,JF,X1e,Olr,Vlr,Oz,Xlr,zlr,Wlr,YF,z1e,Qlr,Hlr,Vz,Ulr,Jlr,Ylr,KF,W1e,Klr,Zlr,Xz,eir,oir,rir,ZF,Q1e,tir,air,zz,nir,sir,lir,eT,H1e,iir,dir,Wz,cir,fir,mir,oT,U1e,gir,hir,Qz,pir,_ir,uir,rT,J1e,bir,vir,Hz,Fir,Tir,Mir,tT,Y1e,Eir,Cir,Uz,wir,Air,yir,aT,K1e,Lir,xir,Jz,$ir,kir,Sir,Bs,Z1e,Rir,Pir,Yz,Bir,Iir,Kz,qir,Nir,jir,nT,e7e,Dir,Gir,Zz,Oir,Vir,Xir,sT,o7e,zir,Wir,eW,Qir,Hir,Uir,lT,r7e,Jir,Yir,oW,Kir,Zir,edr,iT,t7e,odr,rdr,rW,tdr,adr,ndr,dT,a7e,sdr,ldr,tW,idr,ddr,cdr,cT,n7e,fdr,mdr,aW,gdr,hdr,pdr,fT,s7e,_dr,udr,nW,bdr,vdr,Fdr,mT,l7e,Tdr,Mdr,sW,Edr,Cdr,wdr,gT,i7e,Adr,ydr,lW,Ldr,xdr,$dr,hT,d7e,kdr,Sdr,iW,Rdr,Pdr,Bdr,pT,c7e,Idr,qdr,dW,Ndr,jdr,Ddr,_T,f7e,Gdr,Odr,cW,Vdr,Xdr,zdr,uT,m7e,Wdr,Qdr,fW,Hdr,Udr,Jdr,bT,g7e,Ydr,Kdr,mW,Zdr,ecr,ocr,vT,h7e,rcr,tcr,gW,acr,ncr,scr,FT,p7e,lcr,icr,hW,dcr,ccr,fcr,TT,_7e,mcr,gcr,pW,hcr,pcr,_cr,MT,u7e,ucr,bcr,_W,vcr,Fcr,Tcr,ET,b7e,Mcr,Ecr,uW,Ccr,wcr,Acr,CT,v7e,ycr,Lcr,bW,xcr,$cr,kcr,wT,F7e,Scr,Rcr,vW,Pcr,Bcr,Icr,AT,T7e,qcr,Ncr,FW,jcr,Dcr,Gcr,yT,M7e,Ocr,Vcr,TW,Xcr,zcr,Wcr,LT,E7e,Qcr,Hcr,MW,Ucr,Jcr,Ycr,xT,C7e,Kcr,Zcr,EW,efr,ofr,rfr,$T,w7e,tfr,afr,CW,nfr,sfr,lfr,kT,A7e,ifr,dfr,wW,cfr,ffr,mfr,ST,y7e,gfr,hfr,AW,pfr,_fr,ufr,RT,sNe,Vd,PT,L7e,eL,bfr,x7e,vfr,lNe,Ko,oL,Ffr,Xd,Tfr,yW,Mfr,Efr,LW,Cfr,wfr,Afr,rL,yfr,$7e,Lfr,xfr,$fr,Lt,tL,kfr,k7e,Sfr,Rfr,zd,Pfr,S7e,Bfr,Ifr,xW,qfr,Nfr,jfr,BT,Dfr,Ar,aL,Gfr,R7e,Ofr,Vfr,Za,Xfr,P7e,zfr,Wfr,B7e,Qfr,Hfr,I7e,Ufr,Jfr,Yfr,se,IT,q7e,Kfr,Zfr,$W,emr,omr,rmr,qT,N7e,tmr,amr,kW,nmr,smr,lmr,NT,j7e,imr,dmr,SW,cmr,fmr,mmr,jT,D7e,gmr,hmr,RW,pmr,_mr,umr,DT,G7e,bmr,vmr,PW,Fmr,Tmr,Mmr,GT,O7e,Emr,Cmr,BW,wmr,Amr,ymr,OT,V7e,Lmr,xmr,IW,$mr,kmr,Smr,VT,X7e,Rmr,Pmr,qW,Bmr,Imr,qmr,XT,z7e,Nmr,jmr,NW,Dmr,Gmr,Omr,zT,W7e,Vmr,Xmr,jW,zmr,Wmr,Qmr,WT,Q7e,Hmr,Umr,DW,Jmr,Ymr,Kmr,QT,H7e,Zmr,egr,GW,ogr,rgr,tgr,HT,U7e,agr,ngr,OW,sgr,lgr,igr,UT,J7e,dgr,cgr,VW,fgr,mgr,ggr,JT,Y7e,hgr,pgr,XW,_gr,ugr,bgr,YT,K7e,vgr,Fgr,zW,Tgr,Mgr,Egr,KT,Z7e,Cgr,wgr,WW,Agr,ygr,Lgr,ZT,ebe,xgr,$gr,QW,kgr,Sgr,Rgr,e8,obe,Pgr,Bgr,HW,Igr,qgr,Ngr,o8,rbe,jgr,Dgr,UW,Ggr,Ogr,Vgr,r8,tbe,Xgr,zgr,JW,Wgr,Qgr,Hgr,t8,abe,Ugr,Jgr,YW,Ygr,Kgr,Zgr,a8,nbe,ehr,ohr,KW,rhr,thr,ahr,n8,iNe,Wd,s8,sbe,nL,nhr,lbe,shr,dNe,Zo,sL,lhr,Qd,ihr,ZW,dhr,chr,eQ,fhr,mhr,ghr,lL,hhr,ibe,phr,_hr,uhr,xt,iL,bhr,dbe,vhr,Fhr,Hd,Thr,cbe,Mhr,Ehr,oQ,Chr,whr,Ahr,l8,yhr,yr,dL,Lhr,fbe,xhr,$hr,en,khr,mbe,Shr,Rhr,gbe,Phr,Bhr,hbe,Ihr,qhr,Nhr,Me,i8,pbe,jhr,Dhr,rQ,Ghr,Ohr,Vhr,d8,_be,Xhr,zhr,tQ,Whr,Qhr,Hhr,c8,ube,Uhr,Jhr,aQ,Yhr,Khr,Zhr,f8,bbe,epr,opr,nQ,rpr,tpr,apr,m8,vbe,npr,spr,sQ,lpr,ipr,dpr,g8,Fbe,cpr,fpr,lQ,mpr,gpr,hpr,h8,Tbe,ppr,_pr,iQ,upr,bpr,vpr,p8,Mbe,Fpr,Tpr,dQ,Mpr,Epr,Cpr,_8,Ebe,wpr,Apr,cQ,ypr,Lpr,xpr,u8,Cbe,$pr,kpr,fQ,Spr,Rpr,Ppr,b8,wbe,Bpr,Ipr,mQ,qpr,Npr,jpr,v8,Abe,Dpr,Gpr,gQ,Opr,Vpr,Xpr,F8,cNe,Ud,T8,ybe,cL,zpr,Lbe,Wpr,fNe,er,fL,Qpr,Jd,Hpr,hQ,Upr,Jpr,pQ,Ypr,Kpr,Zpr,mL,e_r,xbe,o_r,r_r,t_r,$t,gL,a_r,$be,n_r,s_r,Yd,l_r,kbe,i_r,d_r,_Q,c_r,f_r,m_r,M8,g_r,Lr,hL,h_r,Sbe,p_r,__r,on,u_r,Rbe,b_r,v_r,Pbe,F_r,T_r,Bbe,M_r,E_r,C_r,rn,E8,Ibe,w_r,A_r,uQ,y_r,L_r,x_r,C8,qbe,$_r,k_r,bQ,S_r,R_r,P_r,w8,Nbe,B_r,I_r,vQ,q_r,N_r,j_r,A8,jbe,D_r,G_r,FQ,O_r,V_r,X_r,y8,mNe,Kd,L8,Dbe,pL,z_r,Gbe,W_r,gNe,or,_L,Q_r,Zd,H_r,TQ,U_r,J_r,MQ,Y_r,K_r,Z_r,uL,eur,Obe,our,rur,tur,kt,bL,aur,Vbe,nur,sur,ec,lur,Xbe,iur,dur,EQ,cur,fur,mur,x8,gur,xr,vL,hur,zbe,pur,_ur,tn,uur,Wbe,bur,vur,Qbe,Fur,Tur,Hbe,Mur,Eur,Cur,ie,$8,Ube,wur,Aur,CQ,yur,Lur,xur,k8,Jbe,$ur,kur,wQ,Sur,Rur,Pur,S8,Ybe,Bur,Iur,AQ,qur,Nur,jur,R8,Kbe,Dur,Gur,yQ,Our,Vur,Xur,P8,Zbe,zur,Wur,LQ,Qur,Hur,Uur,B8,e2e,Jur,Yur,xQ,Kur,Zur,e1r,I8,o2e,o1r,r1r,$Q,t1r,a1r,n1r,q8,r2e,s1r,l1r,kQ,i1r,d1r,c1r,N8,t2e,f1r,m1r,SQ,g1r,h1r,p1r,j8,a2e,_1r,u1r,RQ,b1r,v1r,F1r,D8,n2e,T1r,M1r,PQ,E1r,C1r,w1r,G8,s2e,A1r,y1r,BQ,L1r,x1r,$1r,O8,l2e,k1r,S1r,IQ,R1r,P1r,B1r,V8,i2e,I1r,q1r,qQ,N1r,j1r,D1r,X8,d2e,G1r,O1r,NQ,V1r,X1r,z1r,z8,c2e,W1r,Q1r,jQ,H1r,U1r,J1r,W8,f2e,Y1r,K1r,DQ,Z1r,e7r,o7r,Q8,m2e,r7r,t7r,GQ,a7r,n7r,s7r,H8,g2e,l7r,i7r,OQ,d7r,c7r,f7r,U8,h2e,m7r,g7r,VQ,h7r,p7r,_7r,J8,hNe,oc,Y8,p2e,FL,u7r,_2e,b7r,pNe,rr,TL,v7r,rc,F7r,XQ,T7r,M7r,zQ,E7r,C7r,w7r,ML,A7r,u2e,y7r,L7r,x7r,St,EL,$7r,b2e,k7r,S7r,tc,R7r,v2e,P7r,B7r,WQ,I7r,q7r,N7r,K8,j7r,$r,CL,D7r,F2e,G7r,O7r,an,V7r,T2e,X7r,z7r,M2e,W7r,Q7r,E2e,H7r,U7r,J7r,ye,Z8,C2e,Y7r,K7r,QQ,Z7r,ebr,obr,eM,w2e,rbr,tbr,HQ,abr,nbr,sbr,oM,A2e,lbr,ibr,UQ,dbr,cbr,fbr,rM,y2e,mbr,gbr,JQ,hbr,pbr,_br,tM,L2e,ubr,bbr,YQ,vbr,Fbr,Tbr,aM,x2e,Mbr,Ebr,KQ,Cbr,wbr,Abr,nM,$2e,ybr,Lbr,ZQ,xbr,$br,kbr,sM,k2e,Sbr,Rbr,eH,Pbr,Bbr,Ibr,lM,S2e,qbr,Nbr,oH,jbr,Dbr,Gbr,iM,R2e,Obr,Vbr,rH,Xbr,zbr,Wbr,dM,_Ne,ac,cM,P2e,wL,Qbr,B2e,Hbr,uNe,tr,AL,Ubr,nc,Jbr,tH,Ybr,Kbr,aH,Zbr,e2r,o2r,yL,r2r,I2e,t2r,a2r,n2r,Rt,LL,s2r,q2e,l2r,i2r,sc,d2r,N2e,c2r,f2r,nH,m2r,g2r,h2r,fM,p2r,kr,xL,_2r,j2e,u2r,b2r,nn,v2r,D2e,F2r,T2r,G2e,M2r,E2r,O2e,C2r,w2r,A2r,ee,mM,V2e,y2r,L2r,sH,x2r,$2r,k2r,gM,X2e,S2r,R2r,lH,P2r,B2r,I2r,hM,z2e,q2r,N2r,iH,j2r,D2r,G2r,pM,W2e,O2r,V2r,dH,X2r,z2r,W2r,_M,Q2e,Q2r,H2r,cH,U2r,J2r,Y2r,uM,H2e,K2r,Z2r,fH,evr,ovr,rvr,bM,U2e,tvr,avr,mH,nvr,svr,lvr,vM,J2e,ivr,dvr,gH,cvr,fvr,mvr,FM,Y2e,gvr,hvr,hH,pvr,_vr,uvr,TM,K2e,bvr,vvr,pH,Fvr,Tvr,Mvr,MM,Z2e,Evr,Cvr,_H,wvr,Avr,yvr,EM,eve,Lvr,xvr,uH,$vr,kvr,Svr,CM,ove,Rvr,Pvr,bH,Bvr,Ivr,qvr,wM,rve,Nvr,jvr,vH,Dvr,Gvr,Ovr,AM,tve,Vvr,Xvr,FH,zvr,Wvr,Qvr,yM,ave,Hvr,Uvr,TH,Jvr,Yvr,Kvr,LM,nve,Zvr,e3r,MH,o3r,r3r,t3r,xM,sve,a3r,n3r,EH,s3r,l3r,i3r,$M,lve,d3r,c3r,CH,f3r,m3r,g3r,kM,ive,h3r,p3r,wH,_3r,u3r,b3r,SM,dve,v3r,F3r,AH,T3r,M3r,E3r,RM,cve,C3r,w3r,yH,A3r,y3r,L3r,PM,fve,x3r,$3r,LH,k3r,S3r,R3r,BM,mve,P3r,B3r,xH,I3r,q3r,N3r,IM,gve,j3r,D3r,$H,G3r,O3r,V3r,qM,hve,X3r,z3r,kH,W3r,Q3r,H3r,NM,bNe,lc,jM,pve,$L,U3r,_ve,J3r,vNe,ar,kL,Y3r,ic,K3r,SH,Z3r,eFr,RH,oFr,rFr,tFr,SL,aFr,uve,nFr,sFr,lFr,Pt,RL,iFr,bve,dFr,cFr,dc,fFr,vve,mFr,gFr,PH,hFr,pFr,_Fr,DM,uFr,Sr,PL,bFr,Fve,vFr,FFr,sn,TFr,Tve,MFr,EFr,Mve,CFr,wFr,Eve,AFr,yFr,LFr,he,GM,Cve,xFr,$Fr,BH,kFr,SFr,RFr,OM,wve,PFr,BFr,IH,IFr,qFr,NFr,VM,Ave,jFr,DFr,qH,GFr,OFr,VFr,XM,yve,XFr,zFr,NH,WFr,QFr,HFr,zM,Lve,UFr,JFr,jH,YFr,KFr,ZFr,WM,xve,eTr,oTr,DH,rTr,tTr,aTr,QM,$ve,nTr,sTr,GH,lTr,iTr,dTr,HM,kve,cTr,fTr,OH,mTr,gTr,hTr,UM,Sve,pTr,_Tr,VH,uTr,bTr,vTr,JM,Rve,FTr,TTr,XH,MTr,ETr,CTr,YM,Pve,wTr,ATr,zH,yTr,LTr,xTr,KM,Bve,$Tr,kTr,WH,STr,RTr,PTr,ZM,Ive,BTr,ITr,QH,qTr,NTr,jTr,e4,qve,DTr,GTr,HH,OTr,VTr,XTr,o4,Nve,zTr,WTr,UH,QTr,HTr,UTr,r4,jve,JTr,YTr,JH,KTr,ZTr,e8r,t4,Dve,o8r,r8r,YH,t8r,a8r,n8r,a4,FNe,cc,n4,Gve,BL,s8r,Ove,l8r,TNe,nr,IL,i8r,fc,d8r,KH,c8r,f8r,ZH,m8r,g8r,h8r,qL,p8r,Vve,_8r,u8r,b8r,Bt,NL,v8r,Xve,F8r,T8r,mc,M8r,zve,E8r,C8r,eU,w8r,A8r,y8r,s4,L8r,Rr,jL,x8r,Wve,$8r,k8r,ln,S8r,Qve,R8r,P8r,Hve,B8r,I8r,Uve,q8r,N8r,j8r,DL,l4,Jve,D8r,G8r,oU,O8r,V8r,X8r,i4,Yve,z8r,W8r,rU,Q8r,H8r,U8r,d4,MNe,gc,c4,Kve,GL,J8r,Zve,Y8r,ENe,sr,OL,K8r,hc,Z8r,tU,eMr,oMr,aU,rMr,tMr,aMr,VL,nMr,e3e,sMr,lMr,iMr,It,XL,dMr,o3e,cMr,fMr,pc,mMr,r3e,gMr,hMr,nU,pMr,_Mr,uMr,f4,bMr,Pr,zL,vMr,t3e,FMr,TMr,dn,MMr,a3e,EMr,CMr,n3e,wMr,AMr,s3e,yMr,LMr,xMr,l3e,m4,i3e,$Mr,kMr,sU,SMr,RMr,PMr,g4,CNe,_c,h4,d3e,WL,BMr,c3e,IMr,wNe,lr,QL,qMr,uc,NMr,lU,jMr,DMr,iU,GMr,OMr,VMr,HL,XMr,f3e,zMr,WMr,QMr,qt,UL,HMr,m3e,UMr,JMr,bc,YMr,g3e,KMr,ZMr,dU,e4r,o4r,r4r,p4,t4r,Br,JL,a4r,h3e,n4r,s4r,cn,l4r,p3e,i4r,d4r,_3e,c4r,f4r,u3e,m4r,g4r,h4r,de,_4,b3e,p4r,_4r,cU,u4r,b4r,v4r,u4,v3e,F4r,T4r,fU,M4r,E4r,C4r,b4,F3e,w4r,A4r,mU,y4r,L4r,x4r,v4,T3e,$4r,k4r,gU,S4r,R4r,P4r,F4,M3e,B4r,I4r,hU,q4r,N4r,j4r,T4,E3e,D4r,G4r,pU,O4r,V4r,X4r,M4,C3e,z4r,W4r,_U,Q4r,H4r,U4r,E4,w3e,J4r,Y4r,uU,K4r,Z4r,eEr,C4,A3e,oEr,rEr,bU,tEr,aEr,nEr,w4,y3e,sEr,lEr,vU,iEr,dEr,cEr,A4,L3e,fEr,mEr,FU,gEr,hEr,pEr,y4,x3e,_Er,uEr,TU,bEr,vEr,FEr,L4,$3e,TEr,MEr,MU,EEr,CEr,wEr,x4,k3e,AEr,yEr,EU,LEr,xEr,$Er,$4,S3e,kEr,SEr,CU,REr,PEr,BEr,k4,R3e,IEr,qEr,wU,NEr,jEr,DEr,S4,P3e,GEr,OEr,AU,VEr,XEr,zEr,R4,B3e,WEr,QEr,yU,HEr,UEr,JEr,P4,I3e,YEr,KEr,LU,ZEr,eCr,oCr,B4,q3e,rCr,tCr,xU,aCr,nCr,sCr,I4,ANe,vc,q4,N3e,YL,lCr,j3e,iCr,yNe,ir,KL,dCr,Fc,cCr,$U,fCr,mCr,kU,gCr,hCr,pCr,ZL,_Cr,D3e,uCr,bCr,vCr,Nt,e9,FCr,G3e,TCr,MCr,Tc,ECr,O3e,CCr,wCr,SU,ACr,yCr,LCr,N4,xCr,Ir,o9,$Cr,V3e,kCr,SCr,fn,RCr,X3e,PCr,BCr,z3e,ICr,qCr,W3e,NCr,jCr,DCr,ce,j4,Q3e,GCr,OCr,RU,VCr,XCr,zCr,D4,H3e,WCr,QCr,PU,HCr,UCr,JCr,G4,U3e,YCr,KCr,BU,ZCr,e5r,o5r,O4,J3e,r5r,t5r,IU,a5r,n5r,s5r,V4,Y3e,l5r,i5r,qU,d5r,c5r,f5r,X4,K3e,m5r,g5r,NU,h5r,p5r,_5r,z4,Z3e,u5r,b5r,jU,v5r,F5r,T5r,W4,eFe,M5r,E5r,DU,C5r,w5r,A5r,Q4,oFe,y5r,L5r,GU,x5r,$5r,k5r,H4,rFe,S5r,R5r,OU,P5r,B5r,I5r,U4,tFe,q5r,N5r,VU,j5r,D5r,G5r,J4,aFe,O5r,V5r,XU,X5r,z5r,W5r,Y4,nFe,Q5r,H5r,zU,U5r,J5r,Y5r,K4,sFe,K5r,Z5r,WU,ewr,owr,rwr,Z4,lFe,twr,awr,QU,nwr,swr,lwr,eE,iFe,iwr,dwr,HU,cwr,fwr,mwr,oE,dFe,gwr,hwr,UU,pwr,_wr,uwr,rE,cFe,bwr,vwr,JU,Fwr,Twr,Mwr,tE,fFe,Ewr,Cwr,YU,wwr,Awr,ywr,aE,mFe,Lwr,xwr,KU,$wr,kwr,Swr,nE,LNe,Mc,sE,gFe,r9,Rwr,hFe,Pwr,xNe,dr,t9,Bwr,Ec,Iwr,ZU,qwr,Nwr,eJ,jwr,Dwr,Gwr,a9,Owr,pFe,Vwr,Xwr,zwr,jt,n9,Wwr,_Fe,Qwr,Hwr,Cc,Uwr,uFe,Jwr,Ywr,oJ,Kwr,Zwr,e0r,lE,o0r,qr,s9,r0r,bFe,t0r,a0r,mn,n0r,vFe,s0r,l0r,FFe,i0r,d0r,TFe,c0r,f0r,m0r,MFe,iE,EFe,g0r,h0r,rJ,p0r,_0r,u0r,dE,$Ne,wc,cE,CFe,l9,b0r,wFe,v0r,kNe,cr,i9,F0r,Ac,T0r,tJ,M0r,E0r,aJ,C0r,w0r,A0r,d9,y0r,AFe,L0r,x0r,$0r,Dt,c9,k0r,yFe,S0r,R0r,yc,P0r,LFe,B0r,I0r,nJ,q0r,N0r,j0r,fE,D0r,Nr,f9,G0r,xFe,O0r,V0r,gn,X0r,$Fe,z0r,W0r,kFe,Q0r,H0r,SFe,U0r,J0r,Y0r,RFe,mE,PFe,K0r,Z0r,sJ,eAr,oAr,rAr,gE,SNe,Lc,hE,BFe,m9,tAr,IFe,aAr,RNe,fr,g9,nAr,xc,sAr,lJ,lAr,iAr,iJ,dAr,cAr,fAr,h9,mAr,qFe,gAr,hAr,pAr,Gt,p9,_Ar,NFe,uAr,bAr,$c,vAr,jFe,FAr,TAr,dJ,MAr,EAr,CAr,pE,wAr,jr,_9,AAr,DFe,yAr,LAr,hn,xAr,GFe,$Ar,kAr,OFe,SAr,RAr,VFe,PAr,BAr,IAr,te,_E,XFe,qAr,NAr,cJ,jAr,DAr,GAr,uE,zFe,OAr,VAr,fJ,XAr,zAr,WAr,bE,WFe,QAr,HAr,mJ,UAr,JAr,YAr,vE,QFe,KAr,ZAr,gJ,e6r,o6r,r6r,FE,HFe,t6r,a6r,hJ,n6r,s6r,l6r,TE,UFe,i6r,d6r,pJ,c6r,f6r,m6r,ME,JFe,g6r,h6r,_J,p6r,_6r,u6r,EE,YFe,b6r,v6r,uJ,F6r,T6r,M6r,CE,KFe,E6r,C6r,bJ,w6r,A6r,y6r,wE,ZFe,L6r,x6r,vJ,$6r,k6r,S6r,AE,eTe,R6r,P6r,FJ,B6r,I6r,q6r,yE,oTe,N6r,j6r,TJ,D6r,G6r,O6r,LE,rTe,V6r,X6r,MJ,z6r,W6r,Q6r,xE,tTe,H6r,U6r,EJ,J6r,Y6r,K6r,$E,aTe,Z6r,eyr,CJ,oyr,ryr,tyr,kE,nTe,ayr,nyr,wJ,syr,lyr,iyr,SE,sTe,dyr,cyr,AJ,fyr,myr,gyr,RE,lTe,hyr,pyr,yJ,_yr,uyr,byr,PE,iTe,vyr,Fyr,LJ,Tyr,Myr,Eyr,BE,dTe,Cyr,wyr,xJ,Ayr,yyr,Lyr,IE,cTe,xyr,$yr,$J,kyr,Syr,Ryr,qE,fTe,Pyr,Byr,kJ,Iyr,qyr,Nyr,NE,mTe,jyr,Dyr,SJ,Gyr,Oyr,Vyr,jE,gTe,Xyr,zyr,RJ,Wyr,Qyr,Hyr,DE,hTe,Uyr,Jyr,PJ,Yyr,Kyr,Zyr,GE,PNe,kc,OE,pTe,u9,eLr,_Te,oLr,BNe,mr,b9,rLr,Sc,tLr,BJ,aLr,nLr,IJ,sLr,lLr,iLr,v9,dLr,uTe,cLr,fLr,mLr,Ot,F9,gLr,bTe,hLr,pLr,Rc,_Lr,vTe,uLr,bLr,qJ,vLr,FLr,TLr,VE,MLr,Dr,T9,ELr,FTe,CLr,wLr,pn,ALr,TTe,yLr,LLr,MTe,xLr,$Lr,ETe,kLr,SLr,RLr,Re,XE,CTe,PLr,BLr,NJ,ILr,qLr,NLr,zE,wTe,jLr,DLr,jJ,GLr,OLr,VLr,WE,ATe,XLr,zLr,DJ,WLr,QLr,HLr,QE,yTe,ULr,JLr,GJ,YLr,KLr,ZLr,HE,LTe,e9r,o9r,OJ,r9r,t9r,a9r,UE,xTe,n9r,s9r,VJ,l9r,i9r,d9r,JE,$Te,c9r,f9r,XJ,m9r,g9r,h9r,YE,kTe,p9r,_9r,zJ,u9r,b9r,v9r,KE,STe,F9r,T9r,WJ,M9r,E9r,C9r,ZE,INe,Pc,eC,RTe,M9,w9r,PTe,A9r,qNe,gr,E9,y9r,Bc,L9r,QJ,x9r,$9r,HJ,k9r,S9r,R9r,C9,P9r,BTe,B9r,I9r,q9r,Vt,w9,N9r,ITe,j9r,D9r,Ic,G9r,qTe,O9r,V9r,UJ,X9r,z9r,W9r,oC,Q9r,Gr,A9,H9r,NTe,U9r,J9r,_n,Y9r,jTe,K9r,Z9r,DTe,exr,oxr,GTe,rxr,txr,axr,Ee,rC,OTe,nxr,sxr,JJ,lxr,ixr,dxr,tC,VTe,cxr,fxr,YJ,mxr,gxr,hxr,aC,XTe,pxr,_xr,KJ,uxr,bxr,vxr,nC,zTe,Fxr,Txr,ZJ,Mxr,Exr,Cxr,sC,WTe,wxr,Axr,eY,yxr,Lxr,xxr,lC,QTe,$xr,kxr,oY,Sxr,Rxr,Pxr,iC,HTe,Bxr,Ixr,rY,qxr,Nxr,jxr,dC,UTe,Dxr,Gxr,tY,Oxr,Vxr,Xxr,cC,JTe,zxr,Wxr,aY,Qxr,Hxr,Uxr,fC,YTe,Jxr,Yxr,nY,Kxr,Zxr,e$r,mC,KTe,o$r,r$r,sY,t$r,a$r,n$r,gC,ZTe,s$r,l$r,lY,i$r,d$r,c$r,hC,NNe,qc,pC,e8e,y9,f$r,o8e,m$r,jNe,hr,L9,g$r,Nc,h$r,iY,p$r,_$r,dY,u$r,b$r,v$r,x9,F$r,r8e,T$r,M$r,E$r,Xt,$9,C$r,t8e,w$r,A$r,jc,y$r,a8e,L$r,x$r,cY,$$r,k$r,S$r,_C,R$r,Or,k9,P$r,n8e,B$r,I$r,un,q$r,s8e,N$r,j$r,l8e,D$r,G$r,i8e,O$r,V$r,X$r,Le,uC,d8e,z$r,W$r,fY,Q$r,H$r,U$r,bC,c8e,J$r,Y$r,mY,K$r,Z$r,ekr,vC,f8e,okr,rkr,gY,tkr,akr,nkr,FC,m8e,skr,lkr,hY,ikr,dkr,ckr,TC,g8e,fkr,mkr,pY,gkr,hkr,pkr,MC,h8e,_kr,ukr,_Y,bkr,vkr,Fkr,EC,p8e,Tkr,Mkr,uY,Ekr,Ckr,wkr,CC,_8e,Akr,ykr,bY,Lkr,xkr,$kr,wC,u8e,kkr,Skr,vY,Rkr,Pkr,Bkr,AC,b8e,Ikr,qkr,FY,Nkr,jkr,Dkr,yC,DNe,Dc,LC,v8e,S9,Gkr,F8e,Okr,GNe,pr,R9,Vkr,Gc,Xkr,TY,zkr,Wkr,MY,Qkr,Hkr,Ukr,P9,Jkr,T8e,Ykr,Kkr,Zkr,zt,B9,eSr,M8e,oSr,rSr,Oc,tSr,E8e,aSr,nSr,EY,sSr,lSr,iSr,xC,dSr,Vr,I9,cSr,C8e,fSr,mSr,bn,gSr,w8e,hSr,pSr,A8e,_Sr,uSr,y8e,bSr,vSr,FSr,Pe,$C,L8e,TSr,MSr,CY,ESr,CSr,wSr,kC,x8e,ASr,ySr,wY,LSr,xSr,$Sr,SC,$8e,kSr,SSr,AY,RSr,PSr,BSr,RC,k8e,ISr,qSr,yY,NSr,jSr,DSr,PC,S8e,GSr,OSr,LY,VSr,XSr,zSr,BC,R8e,WSr,QSr,xY,HSr,USr,JSr,IC,P8e,YSr,KSr,$Y,ZSr,eRr,oRr,qC,B8e,rRr,tRr,kY,aRr,nRr,sRr,NC,I8e,lRr,iRr,SY,dRr,cRr,fRr,jC,ONe,Vc,DC,q8e,q9,mRr,N8e,gRr,VNe,_r,N9,hRr,Xc,pRr,RY,_Rr,uRr,PY,bRr,vRr,FRr,j9,TRr,j8e,MRr,ERr,CRr,Wt,D9,wRr,D8e,ARr,yRr,zc,LRr,G8e,xRr,$Rr,BY,kRr,SRr,RRr,GC,PRr,Xr,G9,BRr,O8e,IRr,qRr,vn,NRr,V8e,jRr,DRr,X8e,GRr,ORr,z8e,VRr,XRr,zRr,xe,OC,W8e,WRr,QRr,IY,HRr,URr,JRr,VC,Q8e,YRr,KRr,qY,ZRr,ePr,oPr,XC,H8e,rPr,tPr,NY,aPr,nPr,sPr,zC,U8e,lPr,iPr,jY,dPr,cPr,fPr,WC,J8e,mPr,gPr,DY,hPr,pPr,_Pr,QC,Y8e,uPr,bPr,GY,vPr,FPr,TPr,HC,K8e,MPr,EPr,OY,CPr,wPr,APr,UC,Z8e,yPr,LPr,VY,xPr,$Pr,kPr,JC,eMe,SPr,RPr,XY,PPr,BPr,IPr,YC,oMe,qPr,NPr,zY,jPr,DPr,GPr,KC,XNe,Wc,ZC,rMe,O9,OPr,tMe,VPr,zNe,ur,V9,XPr,Qc,zPr,WY,WPr,QPr,QY,HPr,UPr,JPr,X9,YPr,aMe,KPr,ZPr,eBr,Qt,z9,oBr,nMe,rBr,tBr,Hc,aBr,sMe,nBr,sBr,HY,lBr,iBr,dBr,e5,cBr,zr,W9,fBr,lMe,mBr,gBr,Fn,hBr,iMe,pBr,_Br,dMe,uBr,bBr,cMe,vBr,FBr,TBr,$e,o5,fMe,MBr,EBr,UY,CBr,wBr,ABr,r5,mMe,yBr,LBr,JY,xBr,$Br,kBr,t5,gMe,SBr,RBr,YY,PBr,BBr,IBr,a5,hMe,qBr,NBr,KY,jBr,DBr,GBr,n5,pMe,OBr,VBr,ZY,XBr,zBr,WBr,s5,_Me,QBr,HBr,eK,UBr,JBr,YBr,l5,uMe,KBr,ZBr,oK,eIr,oIr,rIr,i5,bMe,tIr,aIr,rK,nIr,sIr,lIr,d5,vMe,iIr,dIr,tK,cIr,fIr,mIr,c5,FMe,gIr,hIr,aK,pIr,_Ir,uIr,f5,WNe,Uc,m5,TMe,Q9,bIr,MMe,vIr,QNe,br,H9,FIr,Jc,TIr,nK,MIr,EIr,sK,CIr,wIr,AIr,U9,yIr,EMe,LIr,xIr,$Ir,Ht,J9,kIr,CMe,SIr,RIr,Yc,PIr,wMe,BIr,IIr,lK,qIr,NIr,jIr,g5,DIr,Wr,Y9,GIr,AMe,OIr,VIr,Tn,XIr,yMe,zIr,WIr,LMe,QIr,HIr,xMe,UIr,JIr,YIr,De,h5,$Me,KIr,ZIr,iK,eqr,oqr,rqr,p5,kMe,tqr,aqr,dK,nqr,sqr,lqr,_5,SMe,iqr,dqr,cK,cqr,fqr,mqr,u5,RMe,gqr,hqr,fK,pqr,_qr,uqr,b5,PMe,bqr,vqr,mK,Fqr,Tqr,Mqr,v5,BMe,Eqr,Cqr,gK,wqr,Aqr,yqr,F5,IMe,Lqr,xqr,hK,$qr,kqr,Sqr,T5,qMe,Rqr,Pqr,pK,Bqr,Iqr,qqr,M5,HNe,Kc,E5,NMe,K9,Nqr,jMe,jqr,UNe,vr,Z9,Dqr,Zc,Gqr,_K,Oqr,Vqr,uK,Xqr,zqr,Wqr,ex,Qqr,DMe,Hqr,Uqr,Jqr,Ut,ox,Yqr,GMe,Kqr,Zqr,ef,eNr,OMe,oNr,rNr,bK,tNr,aNr,nNr,C5,sNr,Qr,rx,lNr,VMe,iNr,dNr,Mn,cNr,XMe,fNr,mNr,zMe,gNr,hNr,WMe,pNr,_Nr,uNr,Ge,w5,QMe,bNr,vNr,vK,FNr,TNr,MNr,A5,HMe,ENr,CNr,FK,wNr,ANr,yNr,y5,UMe,LNr,xNr,TK,$Nr,kNr,SNr,L5,JMe,RNr,PNr,MK,BNr,INr,qNr,x5,YMe,NNr,jNr,EK,DNr,GNr,ONr,$5,KMe,VNr,XNr,CK,zNr,WNr,QNr,k5,ZMe,HNr,UNr,wK,JNr,YNr,KNr,S5,e4e,ZNr,ejr,AK,ojr,rjr,tjr,R5,JNe,of,P5,o4e,tx,ajr,r4e,njr,YNe,Fr,ax,sjr,rf,ljr,yK,ijr,djr,LK,cjr,fjr,mjr,nx,gjr,t4e,hjr,pjr,_jr,Jt,sx,ujr,a4e,bjr,vjr,tf,Fjr,n4e,Tjr,Mjr,xK,Ejr,Cjr,wjr,B5,Ajr,Hr,lx,yjr,s4e,Ljr,xjr,En,$jr,l4e,kjr,Sjr,i4e,Rjr,Pjr,d4e,Bjr,Ijr,qjr,c4e,I5,f4e,Njr,jjr,$K,Djr,Gjr,Ojr,q5,KNe,af,N5,m4e,ix,Vjr,g4e,Xjr,ZNe,Tr,dx,zjr,nf,Wjr,kK,Qjr,Hjr,SK,Ujr,Jjr,Yjr,cx,Kjr,h4e,Zjr,eDr,oDr,Yt,fx,rDr,p4e,tDr,aDr,sf,nDr,_4e,sDr,lDr,RK,iDr,dDr,cDr,j5,fDr,Ur,mx,mDr,u4e,gDr,hDr,Cn,pDr,b4e,_Dr,uDr,v4e,bDr,vDr,F4e,FDr,TDr,MDr,gx,D5,T4e,EDr,CDr,PK,wDr,ADr,yDr,G5,M4e,LDr,xDr,BK,$Dr,kDr,SDr,O5,eje,lf,V5,E4e,hx,RDr,C4e,PDr,oje,Mr,px,BDr,df,IDr,IK,qDr,NDr,qK,jDr,DDr,GDr,_x,ODr,w4e,VDr,XDr,zDr,Kt,ux,WDr,A4e,QDr,HDr,cf,UDr,y4e,JDr,YDr,NK,KDr,ZDr,eGr,X5,oGr,Jr,bx,rGr,L4e,tGr,aGr,wn,nGr,x4e,sGr,lGr,$4e,iGr,dGr,k4e,cGr,fGr,mGr,S4e,z5,R4e,gGr,hGr,jK,pGr,_Gr,uGr,W5,rje;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),hA=new oe({}),pA=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),vf=new bGr({props:{warning:!0,$$slots:{default:[ALt]},$$scope:{ctx:L}}}),_A=new oe({}),uA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/configuration_auto.py#L578"}}),FA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/configuration_auto.py#L601"}}),Fg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[yLt]},$$scope:{ctx:L}}}),TA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/configuration_auto.py#L724"}}),MA=new oe({}),EA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/tokenization_auto.py#L388"}}),AA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17378/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/tokenization_auto.py#L402"}}),eh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[LLt]},$$scope:{ctx:L}}}),yA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/tokenization_auto.py#L598"}}),LA=new oe({}),xA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/feature_extraction_auto.py#L188"}}),SA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17378/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),$h=new bGr({props:{$$slots:{default:[xLt]},$$scope:{ctx:L}}}),kh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[$Lt]},$$scope:{ctx:L}}}),RA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/feature_extraction_auto.py#L329"}}),PA=new oe({}),BA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/processing_auto.py#L87"}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/processing_auto.py#L101"}}),Jh=new bGr({props:{$$slots:{default:[kLt]},$$scope:{ctx:L}}}),Yh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[SLt]},$$scope:{ctx:L}}}),jA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/processing_auto.py#L254"}}),DA=new oe({}),GA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L729"}}),VA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),ep=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[RLt]},$$scope:{ctx:L}}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),Q_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[PLt]},$$scope:{ctx:L}}}),zA=new oe({}),WA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L736"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[BLt]},$$scope:{ctx:L}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),ju=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ILt]},$$scope:{ctx:L}}}),JA=new oe({}),YA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L751"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),Gu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[qLt]},$$scope:{ctx:L}}}),e6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),w1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[NLt]},$$scope:{ctx:L}}}),o6=new oe({}),r6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L758"}}),a6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),y1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[jLt]},$$scope:{ctx:L}}}),n6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),c7=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DLt]},$$scope:{ctx:L}}}),s6=new oe({}),l6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L765"}}),d6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),m7=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GLt]},$$scope:{ctx:L}}}),c6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[OLt]},$$scope:{ctx:L}}}),f6=new oe({}),m6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L774"}}),h6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[VLt]},$$scope:{ctx:L}}}),p6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XLt]},$$scope:{ctx:L}}}),_6=new oe({}),u6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L808"}}),v6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[zLt]},$$scope:{ctx:L}}}),F6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),n2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[WLt]},$$scope:{ctx:L}}}),T6=new oe({}),M6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L815"}}),C6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),l2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[QLt]},$$scope:{ctx:L}}}),w6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),h2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[HLt]},$$scope:{ctx:L}}}),A6=new oe({}),y6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L801"}}),x6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[ULt]},$$scope:{ctx:L}}}),$6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),Y2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[JLt]},$$scope:{ctx:L}}}),k6=new oe({}),S6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L783"}}),P6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),Z2=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YLt]},$$scope:{ctx:L}}}),B6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),Dv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KLt]},$$scope:{ctx:L}}}),I6=new oe({}),q6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L790"}}),j6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),Ov=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ZLt]},$$scope:{ctx:L}}}),D6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[e9t]},$$scope:{ctx:L}}}),G6=new oe({}),O6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L824"}}),X6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[o9t]},$$scope:{ctx:L}}}),z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[r9t]},$$scope:{ctx:L}}}),W6=new oe({}),Q6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L863"}}),U6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[t9t]},$$scope:{ctx:L}}}),J6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[a9t]},$$scope:{ctx:L}}}),Y6=new oe({}),K6=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L870"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[n9t]},$$scope:{ctx:L}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[s9t]},$$scope:{ctx:L}}}),ry=new oe({}),ty=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L893"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[l9t]},$$scope:{ctx:L}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[i9t]},$$scope:{ctx:L}}}),ly=new oe({}),iy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L877"}}),cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[d9t]},$$scope:{ctx:L}}}),fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[c9t]},$$scope:{ctx:L}}}),my=new oe({}),gy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L884"}}),py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[f9t]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[m9t]},$$scope:{ctx:L}}}),by=new oe({}),vy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L902"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[g9t]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[h9t]},$$scope:{ctx:L}}}),Ey=new oe({}),Cy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L909"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[p9t]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[_9t]},$$scope:{ctx:L}}}),Ly=new oe({}),xy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L856"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[u9t]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[b9t]},$$scope:{ctx:L}}}),Py=new oe({}),By=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L831"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[v9t]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[F9t]},$$scope:{ctx:L}}}),jy=new oe({}),Dy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L838"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[T9t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[M9t]},$$scope:{ctx:L}}}),Xy=new oe({}),zy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_auto.py#L847"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[E9t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[C9t]},$$scope:{ctx:L}}}),Uy=new oe({}),Jy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[w9t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[A9t]},$$scope:{ctx:L}}}),eL=new oe({}),oL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),tL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[y9t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),n8=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[L9t]},$$scope:{ctx:L}}}),nL=new oe({}),sL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),iL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),l8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[x9t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),F8=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$9t]},$$scope:{ctx:L}}}),cL=new oe({}),fL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),gL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[k9t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),y8=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[S9t]},$$scope:{ctx:L}}}),pL=new oe({}),_L=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),bL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),x8=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[R9t]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),J8=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[P9t]},$$scope:{ctx:L}}}),FL=new oe({}),TL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),EL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),K8=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[B9t]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[I9t]},$$scope:{ctx:L}}}),wL=new oe({}),AL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),LL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[q9t]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[N9t]},$$scope:{ctx:L}}}),$L=new oe({}),kL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),RL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[j9t]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[D9t]},$$scope:{ctx:L}}}),BL=new oe({}),IL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),NL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[G9t]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[O9t]},$$scope:{ctx:L}}}),GL=new oe({}),OL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),XL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[V9t]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),g4=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[X9t]},$$scope:{ctx:L}}}),WL=new oe({}),QL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),UL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[z9t]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[W9t]},$$scope:{ctx:L}}}),YL=new oe({}),KL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),N4=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Q9t]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[H9t]},$$scope:{ctx:L}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[U9t]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[J9t]},$$scope:{ctx:L}}}),l9=new oe({}),i9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Y9t]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[K9t]},$$scope:{ctx:L}}}),m9=new oe({}),g9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),p9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Z9t]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),u9=new oe({}),b9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),F9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),M9=new oe({}),E9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),w9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),y9=new oe({}),L9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),S9=new oe({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),jC=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),q9=new oe({}),N9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),GC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),O9=new oe({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),Q9=new oe({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),K9=new oe({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),tx=new oe({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),ix=new oe({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),j5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),hx=new oe({}),px=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17378/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17378/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17378/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),hf=l(),rt=a("p"),fi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=a("code"),cA=o("from_pretrained()"),pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),fA=o("AutoConfig"),Ln=o(", "),xn=a("a"),mA=o("AutoModel"),hi=o(`, and
`),$n=a("a"),gA=o("AutoTokenizer"),pi=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),k$=o("will create a model that is an instance of "),_i=a("a"),S$=o("BertModel"),R$=o("."),Eo=l(),wa=a("p"),P$=o("There is one class of "),uf=a("code"),B$=o("AutoModel"),cGe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZIe=l(),ui=a("h2"),bf=a("a"),See=a("span"),F(hA.$$.fragment),fGe=l(),Ree=a("span"),mGe=o("Extending the Auto Classes"),eqe=l(),kn=a("p"),gGe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pee=a("code"),hGe=o("NewModel"),pGe=o(", make sure you have a "),Bee=a("code"),_Ge=o("NewModelConfig"),uGe=o(` then you can add those to the auto
classes like this:`),oqe=l(),F(pA.$$.fragment),rqe=l(),I$=a("p"),bGe=o("You will then be able to use the auto classes like you would usually do!"),tqe=l(),F(vf.$$.fragment),aqe=l(),bi=a("h2"),Ff=a("a"),Iee=a("span"),F(_A.$$.fragment),vGe=l(),qee=a("span"),FGe=o("AutoConfig"),nqe=l(),Co=a("div"),F(uA.$$.fragment),TGe=l(),bA=a("p"),MGe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),q$=a("a"),EGe=o("from_pretrained()"),CGe=o(" class method."),wGe=l(),vA=a("p"),AGe=o("This class cannot be instantiated directly using "),Nee=a("code"),yGe=o("__init__()"),LGe=o(" (throws an error)."),xGe=l(),Er=a("div"),F(FA.$$.fragment),$Ge=l(),jee=a("p"),kGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),SGe=l(),vi=a("p"),RGe=o("The configuration class to instantiate is selected based on the "),Dee=a("code"),PGe=o("model_type"),BGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gee=a("code"),IGe=o("pretrained_model_name_or_path"),qGe=o(":"),NGe=l(),A=a("ul"),Tf=a("li"),Oee=a("strong"),jGe=o("albert"),DGe=o(" \u2014 "),N$=a("a"),GGe=o("AlbertConfig"),OGe=o(" (ALBERT model)"),VGe=l(),Mf=a("li"),Vee=a("strong"),XGe=o("bart"),zGe=o(" \u2014 "),j$=a("a"),WGe=o("BartConfig"),QGe=o(" (BART model)"),HGe=l(),Ef=a("li"),Xee=a("strong"),UGe=o("beit"),JGe=o(" \u2014 "),D$=a("a"),YGe=o("BeitConfig"),KGe=o(" (BEiT model)"),ZGe=l(),Cf=a("li"),zee=a("strong"),eOe=o("bert"),oOe=o(" \u2014 "),G$=a("a"),rOe=o("BertConfig"),tOe=o(" (BERT model)"),aOe=l(),wf=a("li"),Wee=a("strong"),nOe=o("bert-generation"),sOe=o(" \u2014 "),O$=a("a"),lOe=o("BertGenerationConfig"),iOe=o(" (Bert Generation model)"),dOe=l(),Af=a("li"),Qee=a("strong"),cOe=o("big_bird"),fOe=o(" \u2014 "),V$=a("a"),mOe=o("BigBirdConfig"),gOe=o(" (BigBird model)"),hOe=l(),yf=a("li"),Hee=a("strong"),pOe=o("bigbird_pegasus"),_Oe=o(" \u2014 "),X$=a("a"),uOe=o("BigBirdPegasusConfig"),bOe=o(" (BigBirdPegasus model)"),vOe=l(),Lf=a("li"),Uee=a("strong"),FOe=o("blenderbot"),TOe=o(" \u2014 "),z$=a("a"),MOe=o("BlenderbotConfig"),EOe=o(" (Blenderbot model)"),COe=l(),xf=a("li"),Jee=a("strong"),wOe=o("blenderbot-small"),AOe=o(" \u2014 "),W$=a("a"),yOe=o("BlenderbotSmallConfig"),LOe=o(" (BlenderbotSmall model)"),xOe=l(),$f=a("li"),Yee=a("strong"),$Oe=o("camembert"),kOe=o(" \u2014 "),Q$=a("a"),SOe=o("CamembertConfig"),ROe=o(" (CamemBERT model)"),POe=l(),kf=a("li"),Kee=a("strong"),BOe=o("canine"),IOe=o(" \u2014 "),H$=a("a"),qOe=o("CanineConfig"),NOe=o(" (Canine model)"),jOe=l(),Sf=a("li"),Zee=a("strong"),DOe=o("clip"),GOe=o(" \u2014 "),U$=a("a"),OOe=o("CLIPConfig"),VOe=o(" (CLIP model)"),XOe=l(),Rf=a("li"),eoe=a("strong"),zOe=o("convbert"),WOe=o(" \u2014 "),J$=a("a"),QOe=o("ConvBertConfig"),HOe=o(" (ConvBERT model)"),UOe=l(),Pf=a("li"),ooe=a("strong"),JOe=o("convnext"),YOe=o(" \u2014 "),Y$=a("a"),KOe=o("ConvNextConfig"),ZOe=o(" (ConvNext model)"),eVe=l(),Bf=a("li"),roe=a("strong"),oVe=o("ctrl"),rVe=o(" \u2014 "),K$=a("a"),tVe=o("CTRLConfig"),aVe=o(" (CTRL model)"),nVe=l(),If=a("li"),toe=a("strong"),sVe=o("cvt"),lVe=o(" \u2014 "),Z$=a("a"),iVe=o("CvtConfig"),dVe=o(" (CvT model)"),cVe=l(),qf=a("li"),aoe=a("strong"),fVe=o("data2vec-audio"),mVe=o(" \u2014 "),ek=a("a"),gVe=o("Data2VecAudioConfig"),hVe=o(" (Data2VecAudio model)"),pVe=l(),Nf=a("li"),noe=a("strong"),_Ve=o("data2vec-text"),uVe=o(" \u2014 "),ok=a("a"),bVe=o("Data2VecTextConfig"),vVe=o(" (Data2VecText model)"),FVe=l(),jf=a("li"),soe=a("strong"),TVe=o("data2vec-vision"),MVe=o(" \u2014 "),rk=a("a"),EVe=o("Data2VecVisionConfig"),CVe=o(" (Data2VecVision model)"),wVe=l(),Df=a("li"),loe=a("strong"),AVe=o("deberta"),yVe=o(" \u2014 "),tk=a("a"),LVe=o("DebertaConfig"),xVe=o(" (DeBERTa model)"),$Ve=l(),Gf=a("li"),ioe=a("strong"),kVe=o("deberta-v2"),SVe=o(" \u2014 "),ak=a("a"),RVe=o("DebertaV2Config"),PVe=o(" (DeBERTa-v2 model)"),BVe=l(),Of=a("li"),doe=a("strong"),IVe=o("decision_transformer"),qVe=o(" \u2014 "),nk=a("a"),NVe=o("DecisionTransformerConfig"),jVe=o(" (Decision Transformer model)"),DVe=l(),Vf=a("li"),coe=a("strong"),GVe=o("deit"),OVe=o(" \u2014 "),sk=a("a"),VVe=o("DeiTConfig"),XVe=o(" (DeiT model)"),zVe=l(),Xf=a("li"),foe=a("strong"),WVe=o("detr"),QVe=o(" \u2014 "),lk=a("a"),HVe=o("DetrConfig"),UVe=o(" (DETR model)"),JVe=l(),zf=a("li"),moe=a("strong"),YVe=o("distilbert"),KVe=o(" \u2014 "),ik=a("a"),ZVe=o("DistilBertConfig"),eXe=o(" (DistilBERT model)"),oXe=l(),Wf=a("li"),goe=a("strong"),rXe=o("dpr"),tXe=o(" \u2014 "),dk=a("a"),aXe=o("DPRConfig"),nXe=o(" (DPR model)"),sXe=l(),Qf=a("li"),hoe=a("strong"),lXe=o("dpt"),iXe=o(" \u2014 "),ck=a("a"),dXe=o("DPTConfig"),cXe=o(" (DPT model)"),fXe=l(),Hf=a("li"),poe=a("strong"),mXe=o("electra"),gXe=o(" \u2014 "),fk=a("a"),hXe=o("ElectraConfig"),pXe=o(" (ELECTRA model)"),_Xe=l(),Uf=a("li"),_oe=a("strong"),uXe=o("encoder-decoder"),bXe=o(" \u2014 "),mk=a("a"),vXe=o("EncoderDecoderConfig"),FXe=o(" (Encoder decoder model)"),TXe=l(),Jf=a("li"),uoe=a("strong"),MXe=o("flaubert"),EXe=o(" \u2014 "),gk=a("a"),CXe=o("FlaubertConfig"),wXe=o(" (FlauBERT model)"),AXe=l(),Yf=a("li"),boe=a("strong"),yXe=o("flava"),LXe=o(" \u2014 "),hk=a("a"),xXe=o("FlavaConfig"),$Xe=o(" (Flava model)"),kXe=l(),Kf=a("li"),voe=a("strong"),SXe=o("fnet"),RXe=o(" \u2014 "),pk=a("a"),PXe=o("FNetConfig"),BXe=o(" (FNet model)"),IXe=l(),Zf=a("li"),Foe=a("strong"),qXe=o("fsmt"),NXe=o(" \u2014 "),_k=a("a"),jXe=o("FSMTConfig"),DXe=o(" (FairSeq Machine-Translation model)"),GXe=l(),em=a("li"),Toe=a("strong"),OXe=o("funnel"),VXe=o(" \u2014 "),uk=a("a"),XXe=o("FunnelConfig"),zXe=o(" (Funnel Transformer model)"),WXe=l(),om=a("li"),Moe=a("strong"),QXe=o("glpn"),HXe=o(" \u2014 "),bk=a("a"),UXe=o("GLPNConfig"),JXe=o(" (GLPN model)"),YXe=l(),rm=a("li"),Eoe=a("strong"),KXe=o("gpt2"),ZXe=o(" \u2014 "),vk=a("a"),eze=o("GPT2Config"),oze=o(" (OpenAI GPT-2 model)"),rze=l(),tm=a("li"),Coe=a("strong"),tze=o("gpt_neo"),aze=o(" \u2014 "),Fk=a("a"),nze=o("GPTNeoConfig"),sze=o(" (GPT Neo model)"),lze=l(),am=a("li"),woe=a("strong"),ize=o("gptj"),dze=o(" \u2014 "),Tk=a("a"),cze=o("GPTJConfig"),fze=o(" (GPT-J model)"),mze=l(),nm=a("li"),Aoe=a("strong"),gze=o("hubert"),hze=o(" \u2014 "),Mk=a("a"),pze=o("HubertConfig"),_ze=o(" (Hubert model)"),uze=l(),sm=a("li"),yoe=a("strong"),bze=o("ibert"),vze=o(" \u2014 "),Ek=a("a"),Fze=o("IBertConfig"),Tze=o(" (I-BERT model)"),Mze=l(),lm=a("li"),Loe=a("strong"),Eze=o("imagegpt"),Cze=o(" \u2014 "),Ck=a("a"),wze=o("ImageGPTConfig"),Aze=o(" (ImageGPT model)"),yze=l(),im=a("li"),xoe=a("strong"),Lze=o("layoutlm"),xze=o(" \u2014 "),wk=a("a"),$ze=o("LayoutLMConfig"),kze=o(" (LayoutLM model)"),Sze=l(),dm=a("li"),$oe=a("strong"),Rze=o("layoutlmv2"),Pze=o(" \u2014 "),Ak=a("a"),Bze=o("LayoutLMv2Config"),Ize=o(" (LayoutLMv2 model)"),qze=l(),cm=a("li"),koe=a("strong"),Nze=o("led"),jze=o(" \u2014 "),yk=a("a"),Dze=o("LEDConfig"),Gze=o(" (LED model)"),Oze=l(),fm=a("li"),Soe=a("strong"),Vze=o("longformer"),Xze=o(" \u2014 "),Lk=a("a"),zze=o("LongformerConfig"),Wze=o(" (Longformer model)"),Qze=l(),mm=a("li"),Roe=a("strong"),Hze=o("luke"),Uze=o(" \u2014 "),xk=a("a"),Jze=o("LukeConfig"),Yze=o(" (LUKE model)"),Kze=l(),gm=a("li"),Poe=a("strong"),Zze=o("lxmert"),eWe=o(" \u2014 "),$k=a("a"),oWe=o("LxmertConfig"),rWe=o(" (LXMERT model)"),tWe=l(),hm=a("li"),Boe=a("strong"),aWe=o("m2m_100"),nWe=o(" \u2014 "),kk=a("a"),sWe=o("M2M100Config"),lWe=o(" (M2M100 model)"),iWe=l(),pm=a("li"),Ioe=a("strong"),dWe=o("marian"),cWe=o(" \u2014 "),Sk=a("a"),fWe=o("MarianConfig"),mWe=o(" (Marian model)"),gWe=l(),_m=a("li"),qoe=a("strong"),hWe=o("maskformer"),pWe=o(" \u2014 "),Rk=a("a"),_We=o("MaskFormerConfig"),uWe=o(" (MaskFormer model)"),bWe=l(),um=a("li"),Noe=a("strong"),vWe=o("mbart"),FWe=o(" \u2014 "),Pk=a("a"),TWe=o("MBartConfig"),MWe=o(" (mBART model)"),EWe=l(),bm=a("li"),joe=a("strong"),CWe=o("megatron-bert"),wWe=o(" \u2014 "),Bk=a("a"),AWe=o("MegatronBertConfig"),yWe=o(" (MegatronBert model)"),LWe=l(),vm=a("li"),Doe=a("strong"),xWe=o("mobilebert"),$We=o(" \u2014 "),Ik=a("a"),kWe=o("MobileBertConfig"),SWe=o(" (MobileBERT model)"),RWe=l(),Fm=a("li"),Goe=a("strong"),PWe=o("mpnet"),BWe=o(" \u2014 "),qk=a("a"),IWe=o("MPNetConfig"),qWe=o(" (MPNet model)"),NWe=l(),Tm=a("li"),Ooe=a("strong"),jWe=o("mt5"),DWe=o(" \u2014 "),Nk=a("a"),GWe=o("MT5Config"),OWe=o(" (mT5 model)"),VWe=l(),Mm=a("li"),Voe=a("strong"),XWe=o("nystromformer"),zWe=o(" \u2014 "),jk=a("a"),WWe=o("NystromformerConfig"),QWe=o(" (Nystromformer model)"),HWe=l(),Em=a("li"),Xoe=a("strong"),UWe=o("openai-gpt"),JWe=o(" \u2014 "),Dk=a("a"),YWe=o("OpenAIGPTConfig"),KWe=o(" (OpenAI GPT model)"),ZWe=l(),Cm=a("li"),zoe=a("strong"),eQe=o("opt"),oQe=o(" \u2014 "),Gk=a("a"),rQe=o("OPTConfig"),tQe=o(" (OPT model)"),aQe=l(),wm=a("li"),Woe=a("strong"),nQe=o("pegasus"),sQe=o(" \u2014 "),Ok=a("a"),lQe=o("PegasusConfig"),iQe=o(" (Pegasus model)"),dQe=l(),Am=a("li"),Qoe=a("strong"),cQe=o("perceiver"),fQe=o(" \u2014 "),Vk=a("a"),mQe=o("PerceiverConfig"),gQe=o(" (Perceiver model)"),hQe=l(),ym=a("li"),Hoe=a("strong"),pQe=o("plbart"),_Qe=o(" \u2014 "),Xk=a("a"),uQe=o("PLBartConfig"),bQe=o(" (PLBart model)"),vQe=l(),Lm=a("li"),Uoe=a("strong"),FQe=o("poolformer"),TQe=o(" \u2014 "),zk=a("a"),MQe=o("PoolFormerConfig"),EQe=o(" (PoolFormer model)"),CQe=l(),xm=a("li"),Joe=a("strong"),wQe=o("prophetnet"),AQe=o(" \u2014 "),Wk=a("a"),yQe=o("ProphetNetConfig"),LQe=o(" (ProphetNet model)"),xQe=l(),$m=a("li"),Yoe=a("strong"),$Qe=o("qdqbert"),kQe=o(" \u2014 "),Qk=a("a"),SQe=o("QDQBertConfig"),RQe=o(" (QDQBert model)"),PQe=l(),km=a("li"),Koe=a("strong"),BQe=o("rag"),IQe=o(" \u2014 "),Hk=a("a"),qQe=o("RagConfig"),NQe=o(" (RAG model)"),jQe=l(),Sm=a("li"),Zoe=a("strong"),DQe=o("realm"),GQe=o(" \u2014 "),Uk=a("a"),OQe=o("RealmConfig"),VQe=o(" (Realm model)"),XQe=l(),Rm=a("li"),ere=a("strong"),zQe=o("reformer"),WQe=o(" \u2014 "),Jk=a("a"),QQe=o("ReformerConfig"),HQe=o(" (Reformer model)"),UQe=l(),Pm=a("li"),ore=a("strong"),JQe=o("regnet"),YQe=o(" \u2014 "),Yk=a("a"),KQe=o("RegNetConfig"),ZQe=o(" (RegNet model)"),eHe=l(),Bm=a("li"),rre=a("strong"),oHe=o("rembert"),rHe=o(" \u2014 "),Kk=a("a"),tHe=o("RemBertConfig"),aHe=o(" (RemBERT model)"),nHe=l(),Im=a("li"),tre=a("strong"),sHe=o("resnet"),lHe=o(" \u2014 "),Zk=a("a"),iHe=o("ResNetConfig"),dHe=o(" (ResNet model)"),cHe=l(),qm=a("li"),are=a("strong"),fHe=o("retribert"),mHe=o(" \u2014 "),eS=a("a"),gHe=o("RetriBertConfig"),hHe=o(" (RetriBERT model)"),pHe=l(),Nm=a("li"),nre=a("strong"),_He=o("roberta"),uHe=o(" \u2014 "),oS=a("a"),bHe=o("RobertaConfig"),vHe=o(" (RoBERTa model)"),FHe=l(),jm=a("li"),sre=a("strong"),THe=o("roformer"),MHe=o(" \u2014 "),rS=a("a"),EHe=o("RoFormerConfig"),CHe=o(" (RoFormer model)"),wHe=l(),Dm=a("li"),lre=a("strong"),AHe=o("segformer"),yHe=o(" \u2014 "),tS=a("a"),LHe=o("SegformerConfig"),xHe=o(" (SegFormer model)"),$He=l(),Gm=a("li"),ire=a("strong"),kHe=o("sew"),SHe=o(" \u2014 "),aS=a("a"),RHe=o("SEWConfig"),PHe=o(" (SEW model)"),BHe=l(),Om=a("li"),dre=a("strong"),IHe=o("sew-d"),qHe=o(" \u2014 "),nS=a("a"),NHe=o("SEWDConfig"),jHe=o(" (SEW-D model)"),DHe=l(),Vm=a("li"),cre=a("strong"),GHe=o("speech-encoder-decoder"),OHe=o(" \u2014 "),sS=a("a"),VHe=o("SpeechEncoderDecoderConfig"),XHe=o(" (Speech Encoder decoder model)"),zHe=l(),Xm=a("li"),fre=a("strong"),WHe=o("speech_to_text"),QHe=o(" \u2014 "),lS=a("a"),HHe=o("Speech2TextConfig"),UHe=o(" (Speech2Text model)"),JHe=l(),zm=a("li"),mre=a("strong"),YHe=o("speech_to_text_2"),KHe=o(" \u2014 "),iS=a("a"),ZHe=o("Speech2Text2Config"),eUe=o(" (Speech2Text2 model)"),oUe=l(),Wm=a("li"),gre=a("strong"),rUe=o("splinter"),tUe=o(" \u2014 "),dS=a("a"),aUe=o("SplinterConfig"),nUe=o(" (Splinter model)"),sUe=l(),Qm=a("li"),hre=a("strong"),lUe=o("squeezebert"),iUe=o(" \u2014 "),cS=a("a"),dUe=o("SqueezeBertConfig"),cUe=o(" (SqueezeBERT model)"),fUe=l(),Hm=a("li"),pre=a("strong"),mUe=o("swin"),gUe=o(" \u2014 "),fS=a("a"),hUe=o("SwinConfig"),pUe=o(" (Swin model)"),_Ue=l(),Um=a("li"),_re=a("strong"),uUe=o("t5"),bUe=o(" \u2014 "),mS=a("a"),vUe=o("T5Config"),FUe=o(" (T5 model)"),TUe=l(),Jm=a("li"),ure=a("strong"),MUe=o("tapas"),EUe=o(" \u2014 "),gS=a("a"),CUe=o("TapasConfig"),wUe=o(" (TAPAS model)"),AUe=l(),Ym=a("li"),bre=a("strong"),yUe=o("trajectory_transformer"),LUe=o(" \u2014 "),hS=a("a"),xUe=o("TrajectoryTransformerConfig"),$Ue=o(" (Trajectory Transformer model)"),kUe=l(),Km=a("li"),vre=a("strong"),SUe=o("transfo-xl"),RUe=o(" \u2014 "),pS=a("a"),PUe=o("TransfoXLConfig"),BUe=o(" (Transformer-XL model)"),IUe=l(),Zm=a("li"),Fre=a("strong"),qUe=o("trocr"),NUe=o(" \u2014 "),_S=a("a"),jUe=o("TrOCRConfig"),DUe=o(" (TrOCR model)"),GUe=l(),eg=a("li"),Tre=a("strong"),OUe=o("unispeech"),VUe=o(" \u2014 "),uS=a("a"),XUe=o("UniSpeechConfig"),zUe=o(" (UniSpeech model)"),WUe=l(),og=a("li"),Mre=a("strong"),QUe=o("unispeech-sat"),HUe=o(" \u2014 "),bS=a("a"),UUe=o("UniSpeechSatConfig"),JUe=o(" (UniSpeechSat model)"),YUe=l(),rg=a("li"),Ere=a("strong"),KUe=o("van"),ZUe=o(" \u2014 "),vS=a("a"),eJe=o("VanConfig"),oJe=o(" (VAN model)"),rJe=l(),tg=a("li"),Cre=a("strong"),tJe=o("vilt"),aJe=o(" \u2014 "),FS=a("a"),nJe=o("ViltConfig"),sJe=o(" (ViLT model)"),lJe=l(),ag=a("li"),wre=a("strong"),iJe=o("vision-encoder-decoder"),dJe=o(" \u2014 "),TS=a("a"),cJe=o("VisionEncoderDecoderConfig"),fJe=o(" (Vision Encoder decoder model)"),mJe=l(),ng=a("li"),Are=a("strong"),gJe=o("vision-text-dual-encoder"),hJe=o(" \u2014 "),MS=a("a"),pJe=o("VisionTextDualEncoderConfig"),_Je=o(" (VisionTextDualEncoder model)"),uJe=l(),sg=a("li"),yre=a("strong"),bJe=o("visual_bert"),vJe=o(" \u2014 "),ES=a("a"),FJe=o("VisualBertConfig"),TJe=o(" (VisualBert model)"),MJe=l(),lg=a("li"),Lre=a("strong"),EJe=o("vit"),CJe=o(" \u2014 "),CS=a("a"),wJe=o("ViTConfig"),AJe=o(" (ViT model)"),yJe=l(),ig=a("li"),xre=a("strong"),LJe=o("vit_mae"),xJe=o(" \u2014 "),wS=a("a"),$Je=o("ViTMAEConfig"),kJe=o(" (ViTMAE model)"),SJe=l(),dg=a("li"),$re=a("strong"),RJe=o("wav2vec2"),PJe=o(" \u2014 "),AS=a("a"),BJe=o("Wav2Vec2Config"),IJe=o(" (Wav2Vec2 model)"),qJe=l(),cg=a("li"),kre=a("strong"),NJe=o("wav2vec2-conformer"),jJe=o(" \u2014 "),yS=a("a"),DJe=o("Wav2Vec2ConformerConfig"),GJe=o(" (Wav2Vec2-Conformer model)"),OJe=l(),fg=a("li"),Sre=a("strong"),VJe=o("wavlm"),XJe=o(" \u2014 "),LS=a("a"),zJe=o("WavLMConfig"),WJe=o(" (WavLM model)"),QJe=l(),mg=a("li"),Rre=a("strong"),HJe=o("xglm"),UJe=o(" \u2014 "),xS=a("a"),JJe=o("XGLMConfig"),YJe=o(" (XGLM model)"),KJe=l(),gg=a("li"),Pre=a("strong"),ZJe=o("xlm"),eYe=o(" \u2014 "),$S=a("a"),oYe=o("XLMConfig"),rYe=o(" (XLM model)"),tYe=l(),hg=a("li"),Bre=a("strong"),aYe=o("xlm-prophetnet"),nYe=o(" \u2014 "),kS=a("a"),sYe=o("XLMProphetNetConfig"),lYe=o(" (XLMProphetNet model)"),iYe=l(),pg=a("li"),Ire=a("strong"),dYe=o("xlm-roberta"),cYe=o(" \u2014 "),SS=a("a"),fYe=o("XLMRobertaConfig"),mYe=o(" (XLM-RoBERTa model)"),gYe=l(),_g=a("li"),qre=a("strong"),hYe=o("xlm-roberta-xl"),pYe=o(" \u2014 "),RS=a("a"),_Ye=o("XLMRobertaXLConfig"),uYe=o(" (XLM-RoBERTa-XL model)"),bYe=l(),ug=a("li"),Nre=a("strong"),vYe=o("xlnet"),FYe=o(" \u2014 "),PS=a("a"),TYe=o("XLNetConfig"),MYe=o(" (XLNet model)"),EYe=l(),bg=a("li"),jre=a("strong"),CYe=o("yolos"),wYe=o(" \u2014 "),BS=a("a"),AYe=o("YolosConfig"),yYe=o(" (YOLOS model)"),LYe=l(),vg=a("li"),Dre=a("strong"),xYe=o("yoso"),$Ye=o(" \u2014 "),IS=a("a"),kYe=o("YosoConfig"),SYe=o(" (YOSO model)"),RYe=l(),F(Fg.$$.fragment),PYe=l(),Tg=a("div"),F(TA.$$.fragment),BYe=l(),Gre=a("p"),IYe=o("Register a new configuration for this class."),sqe=l(),Fi=a("h2"),Mg=a("a"),Ore=a("span"),F(MA.$$.fragment),qYe=l(),Vre=a("span"),NYe=o("AutoTokenizer"),lqe=l(),wo=a("div"),F(EA.$$.fragment),jYe=l(),CA=a("p"),DYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),qS=a("a"),GYe=o("AutoTokenizer.from_pretrained()"),OYe=o(" class method."),VYe=l(),wA=a("p"),XYe=o("This class cannot be instantiated directly using "),Xre=a("code"),zYe=o("__init__()"),WYe=o(" (throws an error)."),QYe=l(),Cr=a("div"),F(AA.$$.fragment),HYe=l(),zre=a("p"),UYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),JYe=l(),Aa=a("p"),YYe=o("The tokenizer class to instantiate is selected based on the "),Wre=a("code"),KYe=o("model_type"),ZYe=o(` property of the config object (either
passed as an argument or loaded from `),Qre=a("code"),eKe=o("pretrained_model_name_or_path"),oKe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hre=a("code"),rKe=o("pretrained_model_name_or_path"),tKe=o(":"),aKe=l(),k=a("ul"),Sn=a("li"),Ure=a("strong"),nKe=o("albert"),sKe=o(" \u2014 "),NS=a("a"),lKe=o("AlbertTokenizer"),iKe=o(" or "),jS=a("a"),dKe=o("AlbertTokenizerFast"),cKe=o(" (ALBERT model)"),fKe=l(),Rn=a("li"),Jre=a("strong"),mKe=o("bart"),gKe=o(" \u2014 "),DS=a("a"),hKe=o("BartTokenizer"),pKe=o(" or "),GS=a("a"),_Ke=o("BartTokenizerFast"),uKe=o(" (BART model)"),bKe=l(),Pn=a("li"),Yre=a("strong"),vKe=o("barthez"),FKe=o(" \u2014 "),OS=a("a"),TKe=o("BarthezTokenizer"),MKe=o(" or "),VS=a("a"),EKe=o("BarthezTokenizerFast"),CKe=o(" (BARThez model)"),wKe=l(),Eg=a("li"),Kre=a("strong"),AKe=o("bartpho"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("BartphoTokenizer"),xKe=o(" (BARTpho model)"),$Ke=l(),Bn=a("li"),Zre=a("strong"),kKe=o("bert"),SKe=o(" \u2014 "),zS=a("a"),RKe=o("BertTokenizer"),PKe=o(" or "),WS=a("a"),BKe=o("BertTokenizerFast"),IKe=o(" (BERT model)"),qKe=l(),Cg=a("li"),ete=a("strong"),NKe=o("bert-generation"),jKe=o(" \u2014 "),QS=a("a"),DKe=o("BertGenerationTokenizer"),GKe=o(" (Bert Generation model)"),OKe=l(),wg=a("li"),ote=a("strong"),VKe=o("bert-japanese"),XKe=o(" \u2014 "),HS=a("a"),zKe=o("BertJapaneseTokenizer"),WKe=o(" (BertJapanese model)"),QKe=l(),Ag=a("li"),rte=a("strong"),HKe=o("bertweet"),UKe=o(" \u2014 "),US=a("a"),JKe=o("BertweetTokenizer"),YKe=o(" (Bertweet model)"),KKe=l(),In=a("li"),tte=a("strong"),ZKe=o("big_bird"),eZe=o(" \u2014 "),JS=a("a"),oZe=o("BigBirdTokenizer"),rZe=o(" or "),YS=a("a"),tZe=o("BigBirdTokenizerFast"),aZe=o(" (BigBird model)"),nZe=l(),qn=a("li"),ate=a("strong"),sZe=o("bigbird_pegasus"),lZe=o(" \u2014 "),KS=a("a"),iZe=o("PegasusTokenizer"),dZe=o(" or "),ZS=a("a"),cZe=o("PegasusTokenizerFast"),fZe=o(" (BigBirdPegasus model)"),mZe=l(),Nn=a("li"),nte=a("strong"),gZe=o("blenderbot"),hZe=o(" \u2014 "),eR=a("a"),pZe=o("BlenderbotTokenizer"),_Ze=o(" or "),oR=a("a"),uZe=o("BlenderbotTokenizerFast"),bZe=o(" (Blenderbot model)"),vZe=l(),yg=a("li"),ste=a("strong"),FZe=o("blenderbot-small"),TZe=o(" \u2014 "),rR=a("a"),MZe=o("BlenderbotSmallTokenizer"),EZe=o(" (BlenderbotSmall model)"),CZe=l(),Lg=a("li"),lte=a("strong"),wZe=o("byt5"),AZe=o(" \u2014 "),tR=a("a"),yZe=o("ByT5Tokenizer"),LZe=o(" (ByT5 model)"),xZe=l(),jn=a("li"),ite=a("strong"),$Ze=o("camembert"),kZe=o(" \u2014 "),aR=a("a"),SZe=o("CamembertTokenizer"),RZe=o(" or "),nR=a("a"),PZe=o("CamembertTokenizerFast"),BZe=o(" (CamemBERT model)"),IZe=l(),xg=a("li"),dte=a("strong"),qZe=o("canine"),NZe=o(" \u2014 "),sR=a("a"),jZe=o("CanineTokenizer"),DZe=o(" (Canine model)"),GZe=l(),Dn=a("li"),cte=a("strong"),OZe=o("clip"),VZe=o(" \u2014 "),lR=a("a"),XZe=o("CLIPTokenizer"),zZe=o(" or "),iR=a("a"),WZe=o("CLIPTokenizerFast"),QZe=o(" (CLIP model)"),HZe=l(),Gn=a("li"),fte=a("strong"),UZe=o("convbert"),JZe=o(" \u2014 "),dR=a("a"),YZe=o("ConvBertTokenizer"),KZe=o(" or "),cR=a("a"),ZZe=o("ConvBertTokenizerFast"),eeo=o(" (ConvBERT model)"),oeo=l(),On=a("li"),mte=a("strong"),reo=o("cpm"),teo=o(" \u2014 "),fR=a("a"),aeo=o("CpmTokenizer"),neo=o(" or "),mR=a("a"),seo=o("CpmTokenizerFast"),leo=o(" (CPM model)"),ieo=l(),$g=a("li"),gte=a("strong"),deo=o("ctrl"),ceo=o(" \u2014 "),gR=a("a"),feo=o("CTRLTokenizer"),meo=o(" (CTRL model)"),geo=l(),Vn=a("li"),hte=a("strong"),heo=o("data2vec-text"),peo=o(" \u2014 "),hR=a("a"),_eo=o("RobertaTokenizer"),ueo=o(" or "),pR=a("a"),beo=o("RobertaTokenizerFast"),veo=o(" (Data2VecText model)"),Feo=l(),Xn=a("li"),pte=a("strong"),Teo=o("deberta"),Meo=o(" \u2014 "),_R=a("a"),Eeo=o("DebertaTokenizer"),Ceo=o(" or "),uR=a("a"),weo=o("DebertaTokenizerFast"),Aeo=o(" (DeBERTa model)"),yeo=l(),zn=a("li"),_te=a("strong"),Leo=o("deberta-v2"),xeo=o(" \u2014 "),bR=a("a"),$eo=o("DebertaV2Tokenizer"),keo=o(" or "),vR=a("a"),Seo=o("DebertaV2TokenizerFast"),Reo=o(" (DeBERTa-v2 model)"),Peo=l(),Wn=a("li"),ute=a("strong"),Beo=o("distilbert"),Ieo=o(" \u2014 "),FR=a("a"),qeo=o("DistilBertTokenizer"),Neo=o(" or "),TR=a("a"),jeo=o("DistilBertTokenizerFast"),Deo=o(" (DistilBERT model)"),Geo=l(),Qn=a("li"),bte=a("strong"),Oeo=o("dpr"),Veo=o(" \u2014 "),MR=a("a"),Xeo=o("DPRQuestionEncoderTokenizer"),zeo=o(" or "),ER=a("a"),Weo=o("DPRQuestionEncoderTokenizerFast"),Qeo=o(" (DPR model)"),Heo=l(),Hn=a("li"),vte=a("strong"),Ueo=o("electra"),Jeo=o(" \u2014 "),CR=a("a"),Yeo=o("ElectraTokenizer"),Keo=o(" or "),wR=a("a"),Zeo=o("ElectraTokenizerFast"),eoo=o(" (ELECTRA model)"),ooo=l(),kg=a("li"),Fte=a("strong"),roo=o("flaubert"),too=o(" \u2014 "),AR=a("a"),aoo=o("FlaubertTokenizer"),noo=o(" (FlauBERT model)"),soo=l(),Un=a("li"),Tte=a("strong"),loo=o("fnet"),ioo=o(" \u2014 "),yR=a("a"),doo=o("FNetTokenizer"),coo=o(" or "),LR=a("a"),foo=o("FNetTokenizerFast"),moo=o(" (FNet model)"),goo=l(),Sg=a("li"),Mte=a("strong"),hoo=o("fsmt"),poo=o(" \u2014 "),xR=a("a"),_oo=o("FSMTTokenizer"),uoo=o(" (FairSeq Machine-Translation model)"),boo=l(),Jn=a("li"),Ete=a("strong"),voo=o("funnel"),Foo=o(" \u2014 "),$R=a("a"),Too=o("FunnelTokenizer"),Moo=o(" or "),kR=a("a"),Eoo=o("FunnelTokenizerFast"),Coo=o(" (Funnel Transformer model)"),woo=l(),Yn=a("li"),Cte=a("strong"),Aoo=o("gpt2"),yoo=o(" \u2014 "),SR=a("a"),Loo=o("GPT2Tokenizer"),xoo=o(" or "),RR=a("a"),$oo=o("GPT2TokenizerFast"),koo=o(" (OpenAI GPT-2 model)"),Soo=l(),Kn=a("li"),wte=a("strong"),Roo=o("gpt_neo"),Poo=o(" \u2014 "),PR=a("a"),Boo=o("GPT2Tokenizer"),Ioo=o(" or "),BR=a("a"),qoo=o("GPT2TokenizerFast"),Noo=o(" (GPT Neo model)"),joo=l(),Zn=a("li"),Ate=a("strong"),Doo=o("gptj"),Goo=o(" \u2014 "),IR=a("a"),Ooo=o("GPT2Tokenizer"),Voo=o(" or "),qR=a("a"),Xoo=o("GPT2TokenizerFast"),zoo=o(" (GPT-J model)"),Woo=l(),es=a("li"),yte=a("strong"),Qoo=o("herbert"),Hoo=o(" \u2014 "),NR=a("a"),Uoo=o("HerbertTokenizer"),Joo=o(" or "),jR=a("a"),Yoo=o("HerbertTokenizerFast"),Koo=o(" (HerBERT model)"),Zoo=l(),Rg=a("li"),Lte=a("strong"),ero=o("hubert"),oro=o(" \u2014 "),DR=a("a"),rro=o("Wav2Vec2CTCTokenizer"),tro=o(" (Hubert model)"),aro=l(),os=a("li"),xte=a("strong"),nro=o("ibert"),sro=o(" \u2014 "),GR=a("a"),lro=o("RobertaTokenizer"),iro=o(" or "),OR=a("a"),dro=o("RobertaTokenizerFast"),cro=o(" (I-BERT model)"),fro=l(),rs=a("li"),$te=a("strong"),mro=o("layoutlm"),gro=o(" \u2014 "),VR=a("a"),hro=o("LayoutLMTokenizer"),pro=o(" or "),XR=a("a"),_ro=o("LayoutLMTokenizerFast"),uro=o(" (LayoutLM model)"),bro=l(),ts=a("li"),kte=a("strong"),vro=o("layoutlmv2"),Fro=o(" \u2014 "),zR=a("a"),Tro=o("LayoutLMv2Tokenizer"),Mro=o(" or "),WR=a("a"),Ero=o("LayoutLMv2TokenizerFast"),Cro=o(" (LayoutLMv2 model)"),wro=l(),as=a("li"),Ste=a("strong"),Aro=o("layoutxlm"),yro=o(" \u2014 "),QR=a("a"),Lro=o("LayoutXLMTokenizer"),xro=o(" or "),HR=a("a"),$ro=o("LayoutXLMTokenizerFast"),kro=o(" (LayoutXLM model)"),Sro=l(),ns=a("li"),Rte=a("strong"),Rro=o("led"),Pro=o(" \u2014 "),UR=a("a"),Bro=o("LEDTokenizer"),Iro=o(" or "),JR=a("a"),qro=o("LEDTokenizerFast"),Nro=o(" (LED model)"),jro=l(),ss=a("li"),Pte=a("strong"),Dro=o("longformer"),Gro=o(" \u2014 "),YR=a("a"),Oro=o("LongformerTokenizer"),Vro=o(" or "),KR=a("a"),Xro=o("LongformerTokenizerFast"),zro=o(" (Longformer model)"),Wro=l(),Pg=a("li"),Bte=a("strong"),Qro=o("luke"),Hro=o(" \u2014 "),ZR=a("a"),Uro=o("LukeTokenizer"),Jro=o(" (LUKE model)"),Yro=l(),ls=a("li"),Ite=a("strong"),Kro=o("lxmert"),Zro=o(" \u2014 "),eP=a("a"),eto=o("LxmertTokenizer"),oto=o(" or "),oP=a("a"),rto=o("LxmertTokenizerFast"),tto=o(" (LXMERT model)"),ato=l(),Bg=a("li"),qte=a("strong"),nto=o("m2m_100"),sto=o(" \u2014 "),rP=a("a"),lto=o("M2M100Tokenizer"),ito=o(" (M2M100 model)"),dto=l(),Ig=a("li"),Nte=a("strong"),cto=o("marian"),fto=o(" \u2014 "),tP=a("a"),mto=o("MarianTokenizer"),gto=o(" (Marian model)"),hto=l(),is=a("li"),jte=a("strong"),pto=o("mbart"),_to=o(" \u2014 "),aP=a("a"),uto=o("MBartTokenizer"),bto=o(" or "),nP=a("a"),vto=o("MBartTokenizerFast"),Fto=o(" (mBART model)"),Tto=l(),ds=a("li"),Dte=a("strong"),Mto=o("mbart50"),Eto=o(" \u2014 "),sP=a("a"),Cto=o("MBart50Tokenizer"),wto=o(" or "),lP=a("a"),Ato=o("MBart50TokenizerFast"),yto=o(" (mBART-50 model)"),Lto=l(),cs=a("li"),Gte=a("strong"),xto=o("megatron-bert"),$to=o(" \u2014 "),iP=a("a"),kto=o("BertTokenizer"),Sto=o(" or "),dP=a("a"),Rto=o("BertTokenizerFast"),Pto=o(" (MegatronBert model)"),Bto=l(),qg=a("li"),Ote=a("strong"),Ito=o("mluke"),qto=o(" \u2014 "),cP=a("a"),Nto=o("MLukeTokenizer"),jto=o(" (mLUKE model)"),Dto=l(),fs=a("li"),Vte=a("strong"),Gto=o("mobilebert"),Oto=o(" \u2014 "),fP=a("a"),Vto=o("MobileBertTokenizer"),Xto=o(" or "),mP=a("a"),zto=o("MobileBertTokenizerFast"),Wto=o(" (MobileBERT model)"),Qto=l(),ms=a("li"),Xte=a("strong"),Hto=o("mpnet"),Uto=o(" \u2014 "),gP=a("a"),Jto=o("MPNetTokenizer"),Yto=o(" or "),hP=a("a"),Kto=o("MPNetTokenizerFast"),Zto=o(" (MPNet model)"),eao=l(),gs=a("li"),zte=a("strong"),oao=o("mt5"),rao=o(" \u2014 "),pP=a("a"),tao=o("MT5Tokenizer"),aao=o(" or "),_P=a("a"),nao=o("MT5TokenizerFast"),sao=o(" (mT5 model)"),lao=l(),hs=a("li"),Wte=a("strong"),iao=o("nystromformer"),dao=o(" \u2014 "),uP=a("a"),cao=o("AlbertTokenizer"),fao=o(" or "),bP=a("a"),mao=o("AlbertTokenizerFast"),gao=o(" (Nystromformer model)"),hao=l(),ps=a("li"),Qte=a("strong"),pao=o("openai-gpt"),_ao=o(" \u2014 "),vP=a("a"),uao=o("OpenAIGPTTokenizer"),bao=o(" or "),FP=a("a"),vao=o("OpenAIGPTTokenizerFast"),Fao=o(" (OpenAI GPT model)"),Tao=l(),Ng=a("li"),Hte=a("strong"),Mao=o("opt"),Eao=o(" \u2014 "),TP=a("a"),Cao=o("GPT2Tokenizer"),wao=o(" (OPT model)"),Aao=l(),_s=a("li"),Ute=a("strong"),yao=o("pegasus"),Lao=o(" \u2014 "),MP=a("a"),xao=o("PegasusTokenizer"),$ao=o(" or "),EP=a("a"),kao=o("PegasusTokenizerFast"),Sao=o(" (Pegasus model)"),Rao=l(),jg=a("li"),Jte=a("strong"),Pao=o("perceiver"),Bao=o(" \u2014 "),CP=a("a"),Iao=o("PerceiverTokenizer"),qao=o(" (Perceiver model)"),Nao=l(),Dg=a("li"),Yte=a("strong"),jao=o("phobert"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("PhobertTokenizer"),Oao=o(" (PhoBERT model)"),Vao=l(),Gg=a("li"),Kte=a("strong"),Xao=o("plbart"),zao=o(" \u2014 "),AP=a("a"),Wao=o("PLBartTokenizer"),Qao=o(" (PLBart model)"),Hao=l(),Og=a("li"),Zte=a("strong"),Uao=o("prophetnet"),Jao=o(" \u2014 "),yP=a("a"),Yao=o("ProphetNetTokenizer"),Kao=o(" (ProphetNet model)"),Zao=l(),us=a("li"),eae=a("strong"),eno=o("qdqbert"),ono=o(" \u2014 "),LP=a("a"),rno=o("BertTokenizer"),tno=o(" or "),xP=a("a"),ano=o("BertTokenizerFast"),nno=o(" (QDQBert model)"),sno=l(),Vg=a("li"),oae=a("strong"),lno=o("rag"),ino=o(" \u2014 "),$P=a("a"),dno=o("RagTokenizer"),cno=o(" (RAG model)"),fno=l(),bs=a("li"),rae=a("strong"),mno=o("realm"),gno=o(" \u2014 "),kP=a("a"),hno=o("RealmTokenizer"),pno=o(" or "),SP=a("a"),_no=o("RealmTokenizerFast"),uno=o(" (Realm model)"),bno=l(),vs=a("li"),tae=a("strong"),vno=o("reformer"),Fno=o(" \u2014 "),RP=a("a"),Tno=o("ReformerTokenizer"),Mno=o(" or "),PP=a("a"),Eno=o("ReformerTokenizerFast"),Cno=o(" (Reformer model)"),wno=l(),Fs=a("li"),aae=a("strong"),Ano=o("rembert"),yno=o(" \u2014 "),BP=a("a"),Lno=o("RemBertTokenizer"),xno=o(" or "),IP=a("a"),$no=o("RemBertTokenizerFast"),kno=o(" (RemBERT model)"),Sno=l(),Ts=a("li"),nae=a("strong"),Rno=o("retribert"),Pno=o(" \u2014 "),qP=a("a"),Bno=o("RetriBertTokenizer"),Ino=o(" or "),NP=a("a"),qno=o("RetriBertTokenizerFast"),Nno=o(" (RetriBERT model)"),jno=l(),Ms=a("li"),sae=a("strong"),Dno=o("roberta"),Gno=o(" \u2014 "),jP=a("a"),Ono=o("RobertaTokenizer"),Vno=o(" or "),DP=a("a"),Xno=o("RobertaTokenizerFast"),zno=o(" (RoBERTa model)"),Wno=l(),Es=a("li"),lae=a("strong"),Qno=o("roformer"),Hno=o(" \u2014 "),GP=a("a"),Uno=o("RoFormerTokenizer"),Jno=o(" or "),OP=a("a"),Yno=o("RoFormerTokenizerFast"),Kno=o(" (RoFormer model)"),Zno=l(),Xg=a("li"),iae=a("strong"),eso=o("speech_to_text"),oso=o(" \u2014 "),VP=a("a"),rso=o("Speech2TextTokenizer"),tso=o(" (Speech2Text model)"),aso=l(),zg=a("li"),dae=a("strong"),nso=o("speech_to_text_2"),sso=o(" \u2014 "),XP=a("a"),lso=o("Speech2Text2Tokenizer"),iso=o(" (Speech2Text2 model)"),dso=l(),Cs=a("li"),cae=a("strong"),cso=o("splinter"),fso=o(" \u2014 "),zP=a("a"),mso=o("SplinterTokenizer"),gso=o(" or "),WP=a("a"),hso=o("SplinterTokenizerFast"),pso=o(" (Splinter model)"),_so=l(),ws=a("li"),fae=a("strong"),uso=o("squeezebert"),bso=o(" \u2014 "),QP=a("a"),vso=o("SqueezeBertTokenizer"),Fso=o(" or "),HP=a("a"),Tso=o("SqueezeBertTokenizerFast"),Mso=o(" (SqueezeBERT model)"),Eso=l(),As=a("li"),mae=a("strong"),Cso=o("t5"),wso=o(" \u2014 "),UP=a("a"),Aso=o("T5Tokenizer"),yso=o(" or "),JP=a("a"),Lso=o("T5TokenizerFast"),xso=o(" (T5 model)"),$so=l(),Wg=a("li"),gae=a("strong"),kso=o("tapas"),Sso=o(" \u2014 "),YP=a("a"),Rso=o("TapasTokenizer"),Pso=o(" (TAPAS model)"),Bso=l(),Qg=a("li"),hae=a("strong"),Iso=o("tapex"),qso=o(" \u2014 "),KP=a("a"),Nso=o("TapexTokenizer"),jso=o(" (TAPEX model)"),Dso=l(),Hg=a("li"),pae=a("strong"),Gso=o("transfo-xl"),Oso=o(" \u2014 "),ZP=a("a"),Vso=o("TransfoXLTokenizer"),Xso=o(" (Transformer-XL model)"),zso=l(),ys=a("li"),_ae=a("strong"),Wso=o("visual_bert"),Qso=o(" \u2014 "),eB=a("a"),Hso=o("BertTokenizer"),Uso=o(" or "),oB=a("a"),Jso=o("BertTokenizerFast"),Yso=o(" (VisualBert model)"),Kso=l(),Ug=a("li"),uae=a("strong"),Zso=o("wav2vec2"),elo=o(" \u2014 "),rB=a("a"),olo=o("Wav2Vec2CTCTokenizer"),rlo=o(" (Wav2Vec2 model)"),tlo=l(),Jg=a("li"),bae=a("strong"),alo=o("wav2vec2-conformer"),nlo=o(" \u2014 "),tB=a("a"),slo=o("Wav2Vec2CTCTokenizer"),llo=o(" (Wav2Vec2-Conformer model)"),ilo=l(),Yg=a("li"),vae=a("strong"),dlo=o("wav2vec2_phoneme"),clo=o(" \u2014 "),aB=a("a"),flo=o("Wav2Vec2PhonemeCTCTokenizer"),mlo=o(" (Wav2Vec2Phoneme model)"),glo=l(),Ls=a("li"),Fae=a("strong"),hlo=o("xglm"),plo=o(" \u2014 "),nB=a("a"),_lo=o("XGLMTokenizer"),ulo=o(" or "),sB=a("a"),blo=o("XGLMTokenizerFast"),vlo=o(" (XGLM model)"),Flo=l(),Kg=a("li"),Tae=a("strong"),Tlo=o("xlm"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("XLMTokenizer"),Clo=o(" (XLM model)"),wlo=l(),Zg=a("li"),Mae=a("strong"),Alo=o("xlm-prophetnet"),ylo=o(" \u2014 "),iB=a("a"),Llo=o("XLMProphetNetTokenizer"),xlo=o(" (XLMProphetNet model)"),$lo=l(),xs=a("li"),Eae=a("strong"),klo=o("xlm-roberta"),Slo=o(" \u2014 "),dB=a("a"),Rlo=o("XLMRobertaTokenizer"),Plo=o(" or "),cB=a("a"),Blo=o("XLMRobertaTokenizerFast"),Ilo=o(" (XLM-RoBERTa model)"),qlo=l(),$s=a("li"),Cae=a("strong"),Nlo=o("xlm-roberta-xl"),jlo=o(" \u2014 "),fB=a("a"),Dlo=o("RobertaTokenizer"),Glo=o(" or "),mB=a("a"),Olo=o("RobertaTokenizerFast"),Vlo=o(" (XLM-RoBERTa-XL model)"),Xlo=l(),ks=a("li"),wae=a("strong"),zlo=o("xlnet"),Wlo=o(" \u2014 "),gB=a("a"),Qlo=o("XLNetTokenizer"),Hlo=o(" or "),hB=a("a"),Ulo=o("XLNetTokenizerFast"),Jlo=o(" (XLNet model)"),Ylo=l(),Ss=a("li"),Aae=a("strong"),Klo=o("yoso"),Zlo=o(" \u2014 "),pB=a("a"),eio=o("AlbertTokenizer"),oio=o(" or "),_B=a("a"),rio=o("AlbertTokenizerFast"),tio=o(" (YOSO model)"),aio=l(),F(eh.$$.fragment),nio=l(),oh=a("div"),F(yA.$$.fragment),sio=l(),yae=a("p"),lio=o("Register a new tokenizer in this mapping."),iqe=l(),Ti=a("h2"),rh=a("a"),Lae=a("span"),F(LA.$$.fragment),iio=l(),xae=a("span"),dio=o("AutoFeatureExtractor"),dqe=l(),Ao=a("div"),F(xA.$$.fragment),cio=l(),$A=a("p"),fio=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uB=a("a"),mio=o("AutoFeatureExtractor.from_pretrained()"),gio=o(" class method."),hio=l(),kA=a("p"),pio=o("This class cannot be instantiated directly using "),$ae=a("code"),_io=o("__init__()"),uio=o(" (throws an error)."),bio=l(),He=a("div"),F(SA.$$.fragment),vio=l(),kae=a("p"),Fio=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Tio=l(),ya=a("p"),Mio=o("The feature extractor class to instantiate is selected based on the "),Sae=a("code"),Eio=o("model_type"),Cio=o(` property of the config object
(either passed as an argument or loaded from `),Rae=a("code"),wio=o("pretrained_model_name_or_path"),Aio=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Pae=a("code"),yio=o("pretrained_model_name_or_path"),Lio=o(":"),xio=l(),Z=a("ul"),th=a("li"),Bae=a("strong"),$io=o("beit"),kio=o(" \u2014 "),bB=a("a"),Sio=o("BeitFeatureExtractor"),Rio=o(" (BEiT model)"),Pio=l(),ah=a("li"),Iae=a("strong"),Bio=o("clip"),Iio=o(" \u2014 "),vB=a("a"),qio=o("CLIPFeatureExtractor"),Nio=o(" (CLIP model)"),jio=l(),nh=a("li"),qae=a("strong"),Dio=o("convnext"),Gio=o(" \u2014 "),FB=a("a"),Oio=o("ConvNextFeatureExtractor"),Vio=o(" (ConvNext model)"),Xio=l(),sh=a("li"),Nae=a("strong"),zio=o("cvt"),Wio=o(" \u2014 "),TB=a("a"),Qio=o("ConvNextFeatureExtractor"),Hio=o(" (CvT model)"),Uio=l(),lh=a("li"),jae=a("strong"),Jio=o("data2vec-audio"),Yio=o(" \u2014 "),MB=a("a"),Kio=o("Wav2Vec2FeatureExtractor"),Zio=o(" (Data2VecAudio model)"),edo=l(),ih=a("li"),Dae=a("strong"),odo=o("data2vec-vision"),rdo=o(" \u2014 "),EB=a("a"),tdo=o("BeitFeatureExtractor"),ado=o(" (Data2VecVision model)"),ndo=l(),dh=a("li"),Gae=a("strong"),sdo=o("deit"),ldo=o(" \u2014 "),CB=a("a"),ido=o("DeiTFeatureExtractor"),ddo=o(" (DeiT model)"),cdo=l(),ch=a("li"),Oae=a("strong"),fdo=o("detr"),mdo=o(" \u2014 "),wB=a("a"),gdo=o("DetrFeatureExtractor"),hdo=o(" (DETR model)"),pdo=l(),fh=a("li"),Vae=a("strong"),_do=o("dpt"),udo=o(" \u2014 "),AB=a("a"),bdo=o("DPTFeatureExtractor"),vdo=o(" (DPT model)"),Fdo=l(),mh=a("li"),Xae=a("strong"),Tdo=o("flava"),Mdo=o(" \u2014 "),yB=a("a"),Edo=o("FlavaFeatureExtractor"),Cdo=o(" (Flava model)"),wdo=l(),gh=a("li"),zae=a("strong"),Ado=o("glpn"),ydo=o(" \u2014 "),LB=a("a"),Ldo=o("GLPNFeatureExtractor"),xdo=o(" (GLPN model)"),$do=l(),hh=a("li"),Wae=a("strong"),kdo=o("hubert"),Sdo=o(" \u2014 "),xB=a("a"),Rdo=o("Wav2Vec2FeatureExtractor"),Pdo=o(" (Hubert model)"),Bdo=l(),ph=a("li"),Qae=a("strong"),Ido=o("layoutlmv2"),qdo=o(" \u2014 "),$B=a("a"),Ndo=o("LayoutLMv2FeatureExtractor"),jdo=o(" (LayoutLMv2 model)"),Ddo=l(),_h=a("li"),Hae=a("strong"),Gdo=o("maskformer"),Odo=o(" \u2014 "),kB=a("a"),Vdo=o("MaskFormerFeatureExtractor"),Xdo=o(" (MaskFormer model)"),zdo=l(),uh=a("li"),Uae=a("strong"),Wdo=o("perceiver"),Qdo=o(" \u2014 "),SB=a("a"),Hdo=o("PerceiverFeatureExtractor"),Udo=o(" (Perceiver model)"),Jdo=l(),bh=a("li"),Jae=a("strong"),Ydo=o("poolformer"),Kdo=o(" \u2014 "),RB=a("a"),Zdo=o("PoolFormerFeatureExtractor"),eco=o(" (PoolFormer model)"),oco=l(),vh=a("li"),Yae=a("strong"),rco=o("regnet"),tco=o(" \u2014 "),PB=a("a"),aco=o("ConvNextFeatureExtractor"),nco=o(" (RegNet model)"),sco=l(),Fh=a("li"),Kae=a("strong"),lco=o("resnet"),ico=o(" \u2014 "),BB=a("a"),dco=o("ConvNextFeatureExtractor"),cco=o(" (ResNet model)"),fco=l(),Th=a("li"),Zae=a("strong"),mco=o("segformer"),gco=o(" \u2014 "),IB=a("a"),hco=o("SegformerFeatureExtractor"),pco=o(" (SegFormer model)"),_co=l(),Mh=a("li"),ene=a("strong"),uco=o("speech_to_text"),bco=o(" \u2014 "),qB=a("a"),vco=o("Speech2TextFeatureExtractor"),Fco=o(" (Speech2Text model)"),Tco=l(),Eh=a("li"),one=a("strong"),Mco=o("swin"),Eco=o(" \u2014 "),NB=a("a"),Cco=o("ViTFeatureExtractor"),wco=o(" (Swin model)"),Aco=l(),Ch=a("li"),rne=a("strong"),yco=o("van"),Lco=o(" \u2014 "),jB=a("a"),xco=o("ConvNextFeatureExtractor"),$co=o(" (VAN model)"),kco=l(),wh=a("li"),tne=a("strong"),Sco=o("vit"),Rco=o(" \u2014 "),DB=a("a"),Pco=o("ViTFeatureExtractor"),Bco=o(" (ViT model)"),Ico=l(),Ah=a("li"),ane=a("strong"),qco=o("vit_mae"),Nco=o(" \u2014 "),GB=a("a"),jco=o("ViTFeatureExtractor"),Dco=o(" (ViTMAE model)"),Gco=l(),yh=a("li"),nne=a("strong"),Oco=o("wav2vec2"),Vco=o(" \u2014 "),OB=a("a"),Xco=o("Wav2Vec2FeatureExtractor"),zco=o(" (Wav2Vec2 model)"),Wco=l(),Lh=a("li"),sne=a("strong"),Qco=o("wav2vec2-conformer"),Hco=o(" \u2014 "),VB=a("a"),Uco=o("Wav2Vec2FeatureExtractor"),Jco=o(" (Wav2Vec2-Conformer model)"),Yco=l(),xh=a("li"),lne=a("strong"),Kco=o("yolos"),Zco=o(" \u2014 "),XB=a("a"),efo=o("YolosFeatureExtractor"),ofo=o(" (YOLOS model)"),rfo=l(),F($h.$$.fragment),tfo=l(),F(kh.$$.fragment),afo=l(),Sh=a("div"),F(RA.$$.fragment),nfo=l(),ine=a("p"),sfo=o("Register a new feature extractor for this class."),cqe=l(),Mi=a("h2"),Rh=a("a"),dne=a("span"),F(PA.$$.fragment),lfo=l(),cne=a("span"),ifo=o("AutoProcessor"),fqe=l(),yo=a("div"),F(BA.$$.fragment),dfo=l(),IA=a("p"),cfo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zB=a("a"),ffo=o("AutoProcessor.from_pretrained()"),mfo=o(" class method."),gfo=l(),qA=a("p"),hfo=o("This class cannot be instantiated directly using "),fne=a("code"),pfo=o("__init__()"),_fo=o(" (throws an error)."),ufo=l(),Ue=a("div"),F(NA.$$.fragment),bfo=l(),mne=a("p"),vfo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ffo=l(),Ei=a("p"),Tfo=o("The processor class to instantiate is selected based on the "),gne=a("code"),Mfo=o("model_type"),Efo=o(` property of the config object (either
passed as an argument or loaded from `),hne=a("code"),Cfo=o("pretrained_model_name_or_path"),wfo=o(" if possible):"),Afo=l(),pe=a("ul"),Ph=a("li"),pne=a("strong"),yfo=o("clip"),Lfo=o(" \u2014 "),WB=a("a"),xfo=o("CLIPProcessor"),$fo=o(" (CLIP model)"),kfo=l(),Bh=a("li"),_ne=a("strong"),Sfo=o("flava"),Rfo=o(" \u2014 "),une=a("code"),Pfo=o("FLAVAProcessor"),Bfo=o(" (Flava model)"),Ifo=l(),Ih=a("li"),bne=a("strong"),qfo=o("layoutlmv2"),Nfo=o(" \u2014 "),QB=a("a"),jfo=o("LayoutLMv2Processor"),Dfo=o(" (LayoutLMv2 model)"),Gfo=l(),qh=a("li"),vne=a("strong"),Ofo=o("layoutxlm"),Vfo=o(" \u2014 "),HB=a("a"),Xfo=o("LayoutXLMProcessor"),zfo=o(" (LayoutXLM model)"),Wfo=l(),Nh=a("li"),Fne=a("strong"),Qfo=o("sew"),Hfo=o(" \u2014 "),UB=a("a"),Ufo=o("Wav2Vec2Processor"),Jfo=o(" (SEW model)"),Yfo=l(),jh=a("li"),Tne=a("strong"),Kfo=o("sew-d"),Zfo=o(" \u2014 "),JB=a("a"),emo=o("Wav2Vec2Processor"),omo=o(" (SEW-D model)"),rmo=l(),Dh=a("li"),Mne=a("strong"),tmo=o("speech_to_text"),amo=o(" \u2014 "),YB=a("a"),nmo=o("Speech2TextProcessor"),smo=o(" (Speech2Text model)"),lmo=l(),Gh=a("li"),Ene=a("strong"),imo=o("speech_to_text_2"),dmo=o(" \u2014 "),KB=a("a"),cmo=o("Speech2Text2Processor"),fmo=o(" (Speech2Text2 model)"),mmo=l(),Oh=a("li"),Cne=a("strong"),gmo=o("trocr"),hmo=o(" \u2014 "),ZB=a("a"),pmo=o("TrOCRProcessor"),_mo=o(" (TrOCR model)"),umo=l(),Vh=a("li"),wne=a("strong"),bmo=o("unispeech"),vmo=o(" \u2014 "),eI=a("a"),Fmo=o("Wav2Vec2Processor"),Tmo=o(" (UniSpeech model)"),Mmo=l(),Xh=a("li"),Ane=a("strong"),Emo=o("unispeech-sat"),Cmo=o(" \u2014 "),oI=a("a"),wmo=o("Wav2Vec2Processor"),Amo=o(" (UniSpeechSat model)"),ymo=l(),zh=a("li"),yne=a("strong"),Lmo=o("vilt"),xmo=o(" \u2014 "),rI=a("a"),$mo=o("ViltProcessor"),kmo=o(" (ViLT model)"),Smo=l(),Wh=a("li"),Lne=a("strong"),Rmo=o("vision-text-dual-encoder"),Pmo=o(" \u2014 "),tI=a("a"),Bmo=o("VisionTextDualEncoderProcessor"),Imo=o(" (VisionTextDualEncoder model)"),qmo=l(),Qh=a("li"),xne=a("strong"),Nmo=o("wav2vec2"),jmo=o(" \u2014 "),aI=a("a"),Dmo=o("Wav2Vec2Processor"),Gmo=o(" (Wav2Vec2 model)"),Omo=l(),Hh=a("li"),$ne=a("strong"),Vmo=o("wav2vec2-conformer"),Xmo=o(" \u2014 "),nI=a("a"),zmo=o("Wav2Vec2Processor"),Wmo=o(" (Wav2Vec2-Conformer model)"),Qmo=l(),Uh=a("li"),kne=a("strong"),Hmo=o("wavlm"),Umo=o(" \u2014 "),sI=a("a"),Jmo=o("Wav2Vec2Processor"),Ymo=o(" (WavLM model)"),Kmo=l(),F(Jh.$$.fragment),Zmo=l(),F(Yh.$$.fragment),ego=l(),Kh=a("div"),F(jA.$$.fragment),ogo=l(),Sne=a("p"),rgo=o("Register a new processor for this class."),mqe=l(),Ci=a("h2"),Zh=a("a"),Rne=a("span"),F(DA.$$.fragment),tgo=l(),Pne=a("span"),ago=o("AutoModel"),gqe=l(),Lo=a("div"),F(GA.$$.fragment),ngo=l(),wi=a("p"),sgo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lI=a("a"),lgo=o("from_pretrained()"),igo=o(" class method or the "),iI=a("a"),dgo=o("from_config()"),cgo=o(` class
method.`),fgo=l(),OA=a("p"),mgo=o("This class cannot be instantiated directly using "),Bne=a("code"),ggo=o("__init__()"),hgo=o(" (throws an error)."),pgo=l(),tt=a("div"),F(VA.$$.fragment),_go=l(),Ine=a("p"),ugo=o("Instantiates one of the base model classes of the library from a configuration."),bgo=l(),Ai=a("p"),vgo=o(`Note:
Loading a model from its configuration file does `),qne=a("strong"),Fgo=o("not"),Tgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dI=a("a"),Mgo=o("from_pretrained()"),Ego=o(" to load the model weights."),Cgo=l(),F(ep.$$.fragment),wgo=l(),Je=a("div"),F(XA.$$.fragment),Ago=l(),Nne=a("p"),ygo=o("Instantiate one of the base model classes of the library from a pretrained model."),Lgo=l(),La=a("p"),xgo=o("The model class to instantiate is selected based on the "),jne=a("code"),$go=o("model_type"),kgo=o(` property of the config object (either
passed as an argument or loaded from `),Dne=a("code"),Sgo=o("pretrained_model_name_or_path"),Rgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=a("code"),Pgo=o("pretrained_model_name_or_path"),Bgo=o(":"),Igo=l(),x=a("ul"),op=a("li"),One=a("strong"),qgo=o("albert"),Ngo=o(" \u2014 "),cI=a("a"),jgo=o("AlbertModel"),Dgo=o(" (ALBERT model)"),Ggo=l(),rp=a("li"),Vne=a("strong"),Ogo=o("bart"),Vgo=o(" \u2014 "),fI=a("a"),Xgo=o("BartModel"),zgo=o(" (BART model)"),Wgo=l(),tp=a("li"),Xne=a("strong"),Qgo=o("beit"),Hgo=o(" \u2014 "),mI=a("a"),Ugo=o("BeitModel"),Jgo=o(" (BEiT model)"),Ygo=l(),ap=a("li"),zne=a("strong"),Kgo=o("bert"),Zgo=o(" \u2014 "),gI=a("a"),eho=o("BertModel"),oho=o(" (BERT model)"),rho=l(),np=a("li"),Wne=a("strong"),tho=o("bert-generation"),aho=o(" \u2014 "),hI=a("a"),nho=o("BertGenerationEncoder"),sho=o(" (Bert Generation model)"),lho=l(),sp=a("li"),Qne=a("strong"),iho=o("big_bird"),dho=o(" \u2014 "),pI=a("a"),cho=o("BigBirdModel"),fho=o(" (BigBird model)"),mho=l(),lp=a("li"),Hne=a("strong"),gho=o("bigbird_pegasus"),hho=o(" \u2014 "),_I=a("a"),pho=o("BigBirdPegasusModel"),_ho=o(" (BigBirdPegasus model)"),uho=l(),ip=a("li"),Une=a("strong"),bho=o("blenderbot"),vho=o(" \u2014 "),uI=a("a"),Fho=o("BlenderbotModel"),Tho=o(" (Blenderbot model)"),Mho=l(),dp=a("li"),Jne=a("strong"),Eho=o("blenderbot-small"),Cho=o(" \u2014 "),bI=a("a"),who=o("BlenderbotSmallModel"),Aho=o(" (BlenderbotSmall model)"),yho=l(),cp=a("li"),Yne=a("strong"),Lho=o("camembert"),xho=o(" \u2014 "),vI=a("a"),$ho=o("CamembertModel"),kho=o(" (CamemBERT model)"),Sho=l(),fp=a("li"),Kne=a("strong"),Rho=o("canine"),Pho=o(" \u2014 "),FI=a("a"),Bho=o("CanineModel"),Iho=o(" (Canine model)"),qho=l(),mp=a("li"),Zne=a("strong"),Nho=o("clip"),jho=o(" \u2014 "),TI=a("a"),Dho=o("CLIPModel"),Gho=o(" (CLIP model)"),Oho=l(),gp=a("li"),ese=a("strong"),Vho=o("convbert"),Xho=o(" \u2014 "),MI=a("a"),zho=o("ConvBertModel"),Who=o(" (ConvBERT model)"),Qho=l(),hp=a("li"),ose=a("strong"),Hho=o("convnext"),Uho=o(" \u2014 "),EI=a("a"),Jho=o("ConvNextModel"),Yho=o(" (ConvNext model)"),Kho=l(),pp=a("li"),rse=a("strong"),Zho=o("ctrl"),epo=o(" \u2014 "),CI=a("a"),opo=o("CTRLModel"),rpo=o(" (CTRL model)"),tpo=l(),_p=a("li"),tse=a("strong"),apo=o("cvt"),npo=o(" \u2014 "),wI=a("a"),spo=o("CvtModel"),lpo=o(" (CvT model)"),ipo=l(),up=a("li"),ase=a("strong"),dpo=o("data2vec-audio"),cpo=o(" \u2014 "),AI=a("a"),fpo=o("Data2VecAudioModel"),mpo=o(" (Data2VecAudio model)"),gpo=l(),bp=a("li"),nse=a("strong"),hpo=o("data2vec-text"),ppo=o(" \u2014 "),yI=a("a"),_po=o("Data2VecTextModel"),upo=o(" (Data2VecText model)"),bpo=l(),vp=a("li"),sse=a("strong"),vpo=o("data2vec-vision"),Fpo=o(" \u2014 "),LI=a("a"),Tpo=o("Data2VecVisionModel"),Mpo=o(" (Data2VecVision model)"),Epo=l(),Fp=a("li"),lse=a("strong"),Cpo=o("deberta"),wpo=o(" \u2014 "),xI=a("a"),Apo=o("DebertaModel"),ypo=o(" (DeBERTa model)"),Lpo=l(),Tp=a("li"),ise=a("strong"),xpo=o("deberta-v2"),$po=o(" \u2014 "),$I=a("a"),kpo=o("DebertaV2Model"),Spo=o(" (DeBERTa-v2 model)"),Rpo=l(),Mp=a("li"),dse=a("strong"),Ppo=o("decision_transformer"),Bpo=o(" \u2014 "),kI=a("a"),Ipo=o("DecisionTransformerModel"),qpo=o(" (Decision Transformer model)"),Npo=l(),Ep=a("li"),cse=a("strong"),jpo=o("deit"),Dpo=o(" \u2014 "),SI=a("a"),Gpo=o("DeiTModel"),Opo=o(" (DeiT model)"),Vpo=l(),Cp=a("li"),fse=a("strong"),Xpo=o("detr"),zpo=o(" \u2014 "),RI=a("a"),Wpo=o("DetrModel"),Qpo=o(" (DETR model)"),Hpo=l(),wp=a("li"),mse=a("strong"),Upo=o("distilbert"),Jpo=o(" \u2014 "),PI=a("a"),Ypo=o("DistilBertModel"),Kpo=o(" (DistilBERT model)"),Zpo=l(),Ap=a("li"),gse=a("strong"),e_o=o("dpr"),o_o=o(" \u2014 "),BI=a("a"),r_o=o("DPRQuestionEncoder"),t_o=o(" (DPR model)"),a_o=l(),yp=a("li"),hse=a("strong"),n_o=o("dpt"),s_o=o(" \u2014 "),II=a("a"),l_o=o("DPTModel"),i_o=o(" (DPT model)"),d_o=l(),Lp=a("li"),pse=a("strong"),c_o=o("electra"),f_o=o(" \u2014 "),qI=a("a"),m_o=o("ElectraModel"),g_o=o(" (ELECTRA model)"),h_o=l(),xp=a("li"),_se=a("strong"),p_o=o("flaubert"),__o=o(" \u2014 "),NI=a("a"),u_o=o("FlaubertModel"),b_o=o(" (FlauBERT model)"),v_o=l(),$p=a("li"),use=a("strong"),F_o=o("flava"),T_o=o(" \u2014 "),jI=a("a"),M_o=o("FlavaModel"),E_o=o(" (Flava model)"),C_o=l(),kp=a("li"),bse=a("strong"),w_o=o("fnet"),A_o=o(" \u2014 "),DI=a("a"),y_o=o("FNetModel"),L_o=o(" (FNet model)"),x_o=l(),Sp=a("li"),vse=a("strong"),$_o=o("fsmt"),k_o=o(" \u2014 "),GI=a("a"),S_o=o("FSMTModel"),R_o=o(" (FairSeq Machine-Translation model)"),P_o=l(),Rs=a("li"),Fse=a("strong"),B_o=o("funnel"),I_o=o(" \u2014 "),OI=a("a"),q_o=o("FunnelModel"),N_o=o(" or "),VI=a("a"),j_o=o("FunnelBaseModel"),D_o=o(" (Funnel Transformer model)"),G_o=l(),Rp=a("li"),Tse=a("strong"),O_o=o("glpn"),V_o=o(" \u2014 "),XI=a("a"),X_o=o("GLPNModel"),z_o=o(" (GLPN model)"),W_o=l(),Pp=a("li"),Mse=a("strong"),Q_o=o("gpt2"),H_o=o(" \u2014 "),zI=a("a"),U_o=o("GPT2Model"),J_o=o(" (OpenAI GPT-2 model)"),Y_o=l(),Bp=a("li"),Ese=a("strong"),K_o=o("gpt_neo"),Z_o=o(" \u2014 "),WI=a("a"),euo=o("GPTNeoModel"),ouo=o(" (GPT Neo model)"),ruo=l(),Ip=a("li"),Cse=a("strong"),tuo=o("gptj"),auo=o(" \u2014 "),QI=a("a"),nuo=o("GPTJModel"),suo=o(" (GPT-J model)"),luo=l(),qp=a("li"),wse=a("strong"),iuo=o("hubert"),duo=o(" \u2014 "),HI=a("a"),cuo=o("HubertModel"),fuo=o(" (Hubert model)"),muo=l(),Np=a("li"),Ase=a("strong"),guo=o("ibert"),huo=o(" \u2014 "),UI=a("a"),puo=o("IBertModel"),_uo=o(" (I-BERT model)"),uuo=l(),jp=a("li"),yse=a("strong"),buo=o("imagegpt"),vuo=o(" \u2014 "),JI=a("a"),Fuo=o("ImageGPTModel"),Tuo=o(" (ImageGPT model)"),Muo=l(),Dp=a("li"),Lse=a("strong"),Euo=o("layoutlm"),Cuo=o(" \u2014 "),YI=a("a"),wuo=o("LayoutLMModel"),Auo=o(" (LayoutLM model)"),yuo=l(),Gp=a("li"),xse=a("strong"),Luo=o("layoutlmv2"),xuo=o(" \u2014 "),KI=a("a"),$uo=o("LayoutLMv2Model"),kuo=o(" (LayoutLMv2 model)"),Suo=l(),Op=a("li"),$se=a("strong"),Ruo=o("led"),Puo=o(" \u2014 "),ZI=a("a"),Buo=o("LEDModel"),Iuo=o(" (LED model)"),quo=l(),Vp=a("li"),kse=a("strong"),Nuo=o("longformer"),juo=o(" \u2014 "),eq=a("a"),Duo=o("LongformerModel"),Guo=o(" (Longformer model)"),Ouo=l(),Xp=a("li"),Sse=a("strong"),Vuo=o("luke"),Xuo=o(" \u2014 "),oq=a("a"),zuo=o("LukeModel"),Wuo=o(" (LUKE model)"),Quo=l(),zp=a("li"),Rse=a("strong"),Huo=o("lxmert"),Uuo=o(" \u2014 "),rq=a("a"),Juo=o("LxmertModel"),Yuo=o(" (LXMERT model)"),Kuo=l(),Wp=a("li"),Pse=a("strong"),Zuo=o("m2m_100"),e1o=o(" \u2014 "),tq=a("a"),o1o=o("M2M100Model"),r1o=o(" (M2M100 model)"),t1o=l(),Qp=a("li"),Bse=a("strong"),a1o=o("marian"),n1o=o(" \u2014 "),aq=a("a"),s1o=o("MarianModel"),l1o=o(" (Marian model)"),i1o=l(),Hp=a("li"),Ise=a("strong"),d1o=o("maskformer"),c1o=o(" \u2014 "),nq=a("a"),f1o=o("MaskFormerModel"),m1o=o(" (MaskFormer model)"),g1o=l(),Up=a("li"),qse=a("strong"),h1o=o("mbart"),p1o=o(" \u2014 "),sq=a("a"),_1o=o("MBartModel"),u1o=o(" (mBART model)"),b1o=l(),Jp=a("li"),Nse=a("strong"),v1o=o("megatron-bert"),F1o=o(" \u2014 "),lq=a("a"),T1o=o("MegatronBertModel"),M1o=o(" (MegatronBert model)"),E1o=l(),Yp=a("li"),jse=a("strong"),C1o=o("mobilebert"),w1o=o(" \u2014 "),iq=a("a"),A1o=o("MobileBertModel"),y1o=o(" (MobileBERT model)"),L1o=l(),Kp=a("li"),Dse=a("strong"),x1o=o("mpnet"),$1o=o(" \u2014 "),dq=a("a"),k1o=o("MPNetModel"),S1o=o(" (MPNet model)"),R1o=l(),Zp=a("li"),Gse=a("strong"),P1o=o("mt5"),B1o=o(" \u2014 "),cq=a("a"),I1o=o("MT5Model"),q1o=o(" (mT5 model)"),N1o=l(),e_=a("li"),Ose=a("strong"),j1o=o("nystromformer"),D1o=o(" \u2014 "),fq=a("a"),G1o=o("NystromformerModel"),O1o=o(" (Nystromformer model)"),V1o=l(),o_=a("li"),Vse=a("strong"),X1o=o("openai-gpt"),z1o=o(" \u2014 "),mq=a("a"),W1o=o("OpenAIGPTModel"),Q1o=o(" (OpenAI GPT model)"),H1o=l(),r_=a("li"),Xse=a("strong"),U1o=o("opt"),J1o=o(" \u2014 "),gq=a("a"),Y1o=o("OPTModel"),K1o=o(" (OPT model)"),Z1o=l(),t_=a("li"),zse=a("strong"),e7o=o("pegasus"),o7o=o(" \u2014 "),hq=a("a"),r7o=o("PegasusModel"),t7o=o(" (Pegasus model)"),a7o=l(),a_=a("li"),Wse=a("strong"),n7o=o("perceiver"),s7o=o(" \u2014 "),pq=a("a"),l7o=o("PerceiverModel"),i7o=o(" (Perceiver model)"),d7o=l(),n_=a("li"),Qse=a("strong"),c7o=o("plbart"),f7o=o(" \u2014 "),_q=a("a"),m7o=o("PLBartModel"),g7o=o(" (PLBart model)"),h7o=l(),s_=a("li"),Hse=a("strong"),p7o=o("poolformer"),_7o=o(" \u2014 "),uq=a("a"),u7o=o("PoolFormerModel"),b7o=o(" (PoolFormer model)"),v7o=l(),l_=a("li"),Use=a("strong"),F7o=o("prophetnet"),T7o=o(" \u2014 "),bq=a("a"),M7o=o("ProphetNetModel"),E7o=o(" (ProphetNet model)"),C7o=l(),i_=a("li"),Jse=a("strong"),w7o=o("qdqbert"),A7o=o(" \u2014 "),vq=a("a"),y7o=o("QDQBertModel"),L7o=o(" (QDQBert model)"),x7o=l(),d_=a("li"),Yse=a("strong"),$7o=o("reformer"),k7o=o(" \u2014 "),Fq=a("a"),S7o=o("ReformerModel"),R7o=o(" (Reformer model)"),P7o=l(),c_=a("li"),Kse=a("strong"),B7o=o("regnet"),I7o=o(" \u2014 "),Tq=a("a"),q7o=o("RegNetModel"),N7o=o(" (RegNet model)"),j7o=l(),f_=a("li"),Zse=a("strong"),D7o=o("rembert"),G7o=o(" \u2014 "),Mq=a("a"),O7o=o("RemBertModel"),V7o=o(" (RemBERT model)"),X7o=l(),m_=a("li"),ele=a("strong"),z7o=o("resnet"),W7o=o(" \u2014 "),Eq=a("a"),Q7o=o("ResNetModel"),H7o=o(" (ResNet model)"),U7o=l(),g_=a("li"),ole=a("strong"),J7o=o("retribert"),Y7o=o(" \u2014 "),Cq=a("a"),K7o=o("RetriBertModel"),Z7o=o(" (RetriBERT model)"),ebo=l(),h_=a("li"),rle=a("strong"),obo=o("roberta"),rbo=o(" \u2014 "),wq=a("a"),tbo=o("RobertaModel"),abo=o(" (RoBERTa model)"),nbo=l(),p_=a("li"),tle=a("strong"),sbo=o("roformer"),lbo=o(" \u2014 "),Aq=a("a"),ibo=o("RoFormerModel"),dbo=o(" (RoFormer model)"),cbo=l(),__=a("li"),ale=a("strong"),fbo=o("segformer"),mbo=o(" \u2014 "),yq=a("a"),gbo=o("SegformerModel"),hbo=o(" (SegFormer model)"),pbo=l(),u_=a("li"),nle=a("strong"),_bo=o("sew"),ubo=o(" \u2014 "),Lq=a("a"),bbo=o("SEWModel"),vbo=o(" (SEW model)"),Fbo=l(),b_=a("li"),sle=a("strong"),Tbo=o("sew-d"),Mbo=o(" \u2014 "),xq=a("a"),Ebo=o("SEWDModel"),Cbo=o(" (SEW-D model)"),wbo=l(),v_=a("li"),lle=a("strong"),Abo=o("speech_to_text"),ybo=o(" \u2014 "),$q=a("a"),Lbo=o("Speech2TextModel"),xbo=o(" (Speech2Text model)"),$bo=l(),F_=a("li"),ile=a("strong"),kbo=o("splinter"),Sbo=o(" \u2014 "),kq=a("a"),Rbo=o("SplinterModel"),Pbo=o(" (Splinter model)"),Bbo=l(),T_=a("li"),dle=a("strong"),Ibo=o("squeezebert"),qbo=o(" \u2014 "),Sq=a("a"),Nbo=o("SqueezeBertModel"),jbo=o(" (SqueezeBERT model)"),Dbo=l(),M_=a("li"),cle=a("strong"),Gbo=o("swin"),Obo=o(" \u2014 "),Rq=a("a"),Vbo=o("SwinModel"),Xbo=o(" (Swin model)"),zbo=l(),E_=a("li"),fle=a("strong"),Wbo=o("t5"),Qbo=o(" \u2014 "),Pq=a("a"),Hbo=o("T5Model"),Ubo=o(" (T5 model)"),Jbo=l(),C_=a("li"),mle=a("strong"),Ybo=o("tapas"),Kbo=o(" \u2014 "),Bq=a("a"),Zbo=o("TapasModel"),e2o=o(" (TAPAS model)"),o2o=l(),w_=a("li"),gle=a("strong"),r2o=o("trajectory_transformer"),t2o=o(" \u2014 "),Iq=a("a"),a2o=o("TrajectoryTransformerModel"),n2o=o(" (Trajectory Transformer model)"),s2o=l(),A_=a("li"),hle=a("strong"),l2o=o("transfo-xl"),i2o=o(" \u2014 "),qq=a("a"),d2o=o("TransfoXLModel"),c2o=o(" (Transformer-XL model)"),f2o=l(),y_=a("li"),ple=a("strong"),m2o=o("unispeech"),g2o=o(" \u2014 "),Nq=a("a"),h2o=o("UniSpeechModel"),p2o=o(" (UniSpeech model)"),_2o=l(),L_=a("li"),_le=a("strong"),u2o=o("unispeech-sat"),b2o=o(" \u2014 "),jq=a("a"),v2o=o("UniSpeechSatModel"),F2o=o(" (UniSpeechSat model)"),T2o=l(),x_=a("li"),ule=a("strong"),M2o=o("van"),E2o=o(" \u2014 "),Dq=a("a"),C2o=o("VanModel"),w2o=o(" (VAN model)"),A2o=l(),$_=a("li"),ble=a("strong"),y2o=o("vilt"),L2o=o(" \u2014 "),Gq=a("a"),x2o=o("ViltModel"),$2o=o(" (ViLT model)"),k2o=l(),k_=a("li"),vle=a("strong"),S2o=o("vision-text-dual-encoder"),R2o=o(" \u2014 "),Oq=a("a"),P2o=o("VisionTextDualEncoderModel"),B2o=o(" (VisionTextDualEncoder model)"),I2o=l(),S_=a("li"),Fle=a("strong"),q2o=o("visual_bert"),N2o=o(" \u2014 "),Vq=a("a"),j2o=o("VisualBertModel"),D2o=o(" (VisualBert model)"),G2o=l(),R_=a("li"),Tle=a("strong"),O2o=o("vit"),V2o=o(" \u2014 "),Xq=a("a"),X2o=o("ViTModel"),z2o=o(" (ViT model)"),W2o=l(),P_=a("li"),Mle=a("strong"),Q2o=o("vit_mae"),H2o=o(" \u2014 "),zq=a("a"),U2o=o("ViTMAEModel"),J2o=o(" (ViTMAE model)"),Y2o=l(),B_=a("li"),Ele=a("strong"),K2o=o("wav2vec2"),Z2o=o(" \u2014 "),Wq=a("a"),evo=o("Wav2Vec2Model"),ovo=o(" (Wav2Vec2 model)"),rvo=l(),I_=a("li"),Cle=a("strong"),tvo=o("wav2vec2-conformer"),avo=o(" \u2014 "),Qq=a("a"),nvo=o("Wav2Vec2ConformerModel"),svo=o(" (Wav2Vec2-Conformer model)"),lvo=l(),q_=a("li"),wle=a("strong"),ivo=o("wavlm"),dvo=o(" \u2014 "),Hq=a("a"),cvo=o("WavLMModel"),fvo=o(" (WavLM model)"),mvo=l(),N_=a("li"),Ale=a("strong"),gvo=o("xglm"),hvo=o(" \u2014 "),Uq=a("a"),pvo=o("XGLMModel"),_vo=o(" (XGLM model)"),uvo=l(),j_=a("li"),yle=a("strong"),bvo=o("xlm"),vvo=o(" \u2014 "),Jq=a("a"),Fvo=o("XLMModel"),Tvo=o(" (XLM model)"),Mvo=l(),D_=a("li"),Lle=a("strong"),Evo=o("xlm-prophetnet"),Cvo=o(" \u2014 "),Yq=a("a"),wvo=o("XLMProphetNetModel"),Avo=o(" (XLMProphetNet model)"),yvo=l(),G_=a("li"),xle=a("strong"),Lvo=o("xlm-roberta"),xvo=o(" \u2014 "),Kq=a("a"),$vo=o("XLMRobertaModel"),kvo=o(" (XLM-RoBERTa model)"),Svo=l(),O_=a("li"),$le=a("strong"),Rvo=o("xlm-roberta-xl"),Pvo=o(" \u2014 "),Zq=a("a"),Bvo=o("XLMRobertaXLModel"),Ivo=o(" (XLM-RoBERTa-XL model)"),qvo=l(),V_=a("li"),kle=a("strong"),Nvo=o("xlnet"),jvo=o(" \u2014 "),eN=a("a"),Dvo=o("XLNetModel"),Gvo=o(" (XLNet model)"),Ovo=l(),X_=a("li"),Sle=a("strong"),Vvo=o("yolos"),Xvo=o(" \u2014 "),oN=a("a"),zvo=o("YolosModel"),Wvo=o(" (YOLOS model)"),Qvo=l(),z_=a("li"),Rle=a("strong"),Hvo=o("yoso"),Uvo=o(" \u2014 "),rN=a("a"),Jvo=o("YosoModel"),Yvo=o(" (YOSO model)"),Kvo=l(),W_=a("p"),Zvo=o("The model is set in evaluation mode by default using "),Ple=a("code"),e3o=o("model.eval()"),o3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=a("code"),r3o=o("model.train()"),t3o=l(),F(Q_.$$.fragment),hqe=l(),yi=a("h2"),H_=a("a"),Ile=a("span"),F(zA.$$.fragment),a3o=l(),qle=a("span"),n3o=o("AutoModelForPreTraining"),pqe=l(),xo=a("div"),F(WA.$$.fragment),s3o=l(),Li=a("p"),l3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tN=a("a"),i3o=o("from_pretrained()"),d3o=o(" class method or the "),aN=a("a"),c3o=o("from_config()"),f3o=o(` class
method.`),m3o=l(),QA=a("p"),g3o=o("This class cannot be instantiated directly using "),Nle=a("code"),h3o=o("__init__()"),p3o=o(" (throws an error)."),_3o=l(),at=a("div"),F(HA.$$.fragment),u3o=l(),jle=a("p"),b3o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v3o=l(),xi=a("p"),F3o=o(`Note:
Loading a model from its configuration file does `),Dle=a("strong"),T3o=o("not"),M3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=a("a"),E3o=o("from_pretrained()"),C3o=o(" to load the model weights."),w3o=l(),F(U_.$$.fragment),A3o=l(),Ye=a("div"),F(UA.$$.fragment),y3o=l(),Gle=a("p"),L3o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x3o=l(),xa=a("p"),$3o=o("The model class to instantiate is selected based on the "),Ole=a("code"),k3o=o("model_type"),S3o=o(` property of the config object (either
passed as an argument or loaded from `),Vle=a("code"),R3o=o("pretrained_model_name_or_path"),P3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=a("code"),B3o=o("pretrained_model_name_or_path"),I3o=o(":"),q3o=l(),G=a("ul"),J_=a("li"),zle=a("strong"),N3o=o("albert"),j3o=o(" \u2014 "),sN=a("a"),D3o=o("AlbertForPreTraining"),G3o=o(" (ALBERT model)"),O3o=l(),Y_=a("li"),Wle=a("strong"),V3o=o("bart"),X3o=o(" \u2014 "),lN=a("a"),z3o=o("BartForConditionalGeneration"),W3o=o(" (BART model)"),Q3o=l(),K_=a("li"),Qle=a("strong"),H3o=o("bert"),U3o=o(" \u2014 "),iN=a("a"),J3o=o("BertForPreTraining"),Y3o=o(" (BERT model)"),K3o=l(),Z_=a("li"),Hle=a("strong"),Z3o=o("big_bird"),eFo=o(" \u2014 "),dN=a("a"),oFo=o("BigBirdForPreTraining"),rFo=o(" (BigBird model)"),tFo=l(),eu=a("li"),Ule=a("strong"),aFo=o("camembert"),nFo=o(" \u2014 "),cN=a("a"),sFo=o("CamembertForMaskedLM"),lFo=o(" (CamemBERT model)"),iFo=l(),ou=a("li"),Jle=a("strong"),dFo=o("ctrl"),cFo=o(" \u2014 "),fN=a("a"),fFo=o("CTRLLMHeadModel"),mFo=o(" (CTRL model)"),gFo=l(),ru=a("li"),Yle=a("strong"),hFo=o("data2vec-text"),pFo=o(" \u2014 "),mN=a("a"),_Fo=o("Data2VecTextForMaskedLM"),uFo=o(" (Data2VecText model)"),bFo=l(),tu=a("li"),Kle=a("strong"),vFo=o("deberta"),FFo=o(" \u2014 "),gN=a("a"),TFo=o("DebertaForMaskedLM"),MFo=o(" (DeBERTa model)"),EFo=l(),au=a("li"),Zle=a("strong"),CFo=o("deberta-v2"),wFo=o(" \u2014 "),hN=a("a"),AFo=o("DebertaV2ForMaskedLM"),yFo=o(" (DeBERTa-v2 model)"),LFo=l(),nu=a("li"),eie=a("strong"),xFo=o("distilbert"),$Fo=o(" \u2014 "),pN=a("a"),kFo=o("DistilBertForMaskedLM"),SFo=o(" (DistilBERT model)"),RFo=l(),su=a("li"),oie=a("strong"),PFo=o("electra"),BFo=o(" \u2014 "),_N=a("a"),IFo=o("ElectraForPreTraining"),qFo=o(" (ELECTRA model)"),NFo=l(),lu=a("li"),rie=a("strong"),jFo=o("flaubert"),DFo=o(" \u2014 "),uN=a("a"),GFo=o("FlaubertWithLMHeadModel"),OFo=o(" (FlauBERT model)"),VFo=l(),iu=a("li"),tie=a("strong"),XFo=o("flava"),zFo=o(" \u2014 "),bN=a("a"),WFo=o("FlavaForPreTraining"),QFo=o(" (Flava model)"),HFo=l(),du=a("li"),aie=a("strong"),UFo=o("fnet"),JFo=o(" \u2014 "),vN=a("a"),YFo=o("FNetForPreTraining"),KFo=o(" (FNet model)"),ZFo=l(),cu=a("li"),nie=a("strong"),eTo=o("fsmt"),oTo=o(" \u2014 "),FN=a("a"),rTo=o("FSMTForConditionalGeneration"),tTo=o(" (FairSeq Machine-Translation model)"),aTo=l(),fu=a("li"),sie=a("strong"),nTo=o("funnel"),sTo=o(" \u2014 "),TN=a("a"),lTo=o("FunnelForPreTraining"),iTo=o(" (Funnel Transformer model)"),dTo=l(),mu=a("li"),lie=a("strong"),cTo=o("gpt2"),fTo=o(" \u2014 "),MN=a("a"),mTo=o("GPT2LMHeadModel"),gTo=o(" (OpenAI GPT-2 model)"),hTo=l(),gu=a("li"),iie=a("strong"),pTo=o("ibert"),_To=o(" \u2014 "),EN=a("a"),uTo=o("IBertForMaskedLM"),bTo=o(" (I-BERT model)"),vTo=l(),hu=a("li"),die=a("strong"),FTo=o("layoutlm"),TTo=o(" \u2014 "),CN=a("a"),MTo=o("LayoutLMForMaskedLM"),ETo=o(" (LayoutLM model)"),CTo=l(),pu=a("li"),cie=a("strong"),wTo=o("longformer"),ATo=o(" \u2014 "),wN=a("a"),yTo=o("LongformerForMaskedLM"),LTo=o(" (Longformer model)"),xTo=l(),_u=a("li"),fie=a("strong"),$To=o("lxmert"),kTo=o(" \u2014 "),AN=a("a"),STo=o("LxmertForPreTraining"),RTo=o(" (LXMERT model)"),PTo=l(),uu=a("li"),mie=a("strong"),BTo=o("megatron-bert"),ITo=o(" \u2014 "),yN=a("a"),qTo=o("MegatronBertForPreTraining"),NTo=o(" (MegatronBert model)"),jTo=l(),bu=a("li"),gie=a("strong"),DTo=o("mobilebert"),GTo=o(" \u2014 "),LN=a("a"),OTo=o("MobileBertForPreTraining"),VTo=o(" (MobileBERT model)"),XTo=l(),vu=a("li"),hie=a("strong"),zTo=o("mpnet"),WTo=o(" \u2014 "),xN=a("a"),QTo=o("MPNetForMaskedLM"),HTo=o(" (MPNet model)"),UTo=l(),Fu=a("li"),pie=a("strong"),JTo=o("openai-gpt"),YTo=o(" \u2014 "),$N=a("a"),KTo=o("OpenAIGPTLMHeadModel"),ZTo=o(" (OpenAI GPT model)"),e8o=l(),Tu=a("li"),_ie=a("strong"),o8o=o("retribert"),r8o=o(" \u2014 "),kN=a("a"),t8o=o("RetriBertModel"),a8o=o(" (RetriBERT model)"),n8o=l(),Mu=a("li"),uie=a("strong"),s8o=o("roberta"),l8o=o(" \u2014 "),SN=a("a"),i8o=o("RobertaForMaskedLM"),d8o=o(" (RoBERTa model)"),c8o=l(),Eu=a("li"),bie=a("strong"),f8o=o("splinter"),m8o=o(" \u2014 "),RN=a("a"),g8o=o("SplinterForPreTraining"),h8o=o(" (Splinter model)"),p8o=l(),Cu=a("li"),vie=a("strong"),_8o=o("squeezebert"),u8o=o(" \u2014 "),PN=a("a"),b8o=o("SqueezeBertForMaskedLM"),v8o=o(" (SqueezeBERT model)"),F8o=l(),wu=a("li"),Fie=a("strong"),T8o=o("t5"),M8o=o(" \u2014 "),BN=a("a"),E8o=o("T5ForConditionalGeneration"),C8o=o(" (T5 model)"),w8o=l(),Au=a("li"),Tie=a("strong"),A8o=o("tapas"),y8o=o(" \u2014 "),IN=a("a"),L8o=o("TapasForMaskedLM"),x8o=o(" (TAPAS model)"),$8o=l(),yu=a("li"),Mie=a("strong"),k8o=o("transfo-xl"),S8o=o(" \u2014 "),qN=a("a"),R8o=o("TransfoXLLMHeadModel"),P8o=o(" (Transformer-XL model)"),B8o=l(),Lu=a("li"),Eie=a("strong"),I8o=o("unispeech"),q8o=o(" \u2014 "),NN=a("a"),N8o=o("UniSpeechForPreTraining"),j8o=o(" (UniSpeech model)"),D8o=l(),xu=a("li"),Cie=a("strong"),G8o=o("unispeech-sat"),O8o=o(" \u2014 "),jN=a("a"),V8o=o("UniSpeechSatForPreTraining"),X8o=o(" (UniSpeechSat model)"),z8o=l(),$u=a("li"),wie=a("strong"),W8o=o("visual_bert"),Q8o=o(" \u2014 "),DN=a("a"),H8o=o("VisualBertForPreTraining"),U8o=o(" (VisualBert model)"),J8o=l(),ku=a("li"),Aie=a("strong"),Y8o=o("vit_mae"),K8o=o(" \u2014 "),GN=a("a"),Z8o=o("ViTMAEForPreTraining"),eMo=o(" (ViTMAE model)"),oMo=l(),Su=a("li"),yie=a("strong"),rMo=o("wav2vec2"),tMo=o(" \u2014 "),ON=a("a"),aMo=o("Wav2Vec2ForPreTraining"),nMo=o(" (Wav2Vec2 model)"),sMo=l(),Ru=a("li"),Lie=a("strong"),lMo=o("wav2vec2-conformer"),iMo=o(" \u2014 "),VN=a("a"),dMo=o("Wav2Vec2ConformerForPreTraining"),cMo=o(" (Wav2Vec2-Conformer model)"),fMo=l(),Pu=a("li"),xie=a("strong"),mMo=o("xlm"),gMo=o(" \u2014 "),XN=a("a"),hMo=o("XLMWithLMHeadModel"),pMo=o(" (XLM model)"),_Mo=l(),Bu=a("li"),$ie=a("strong"),uMo=o("xlm-roberta"),bMo=o(" \u2014 "),zN=a("a"),vMo=o("XLMRobertaForMaskedLM"),FMo=o(" (XLM-RoBERTa model)"),TMo=l(),Iu=a("li"),kie=a("strong"),MMo=o("xlm-roberta-xl"),EMo=o(" \u2014 "),WN=a("a"),CMo=o("XLMRobertaXLForMaskedLM"),wMo=o(" (XLM-RoBERTa-XL model)"),AMo=l(),qu=a("li"),Sie=a("strong"),yMo=o("xlnet"),LMo=o(" \u2014 "),QN=a("a"),xMo=o("XLNetLMHeadModel"),$Mo=o(" (XLNet model)"),kMo=l(),Nu=a("p"),SMo=o("The model is set in evaluation mode by default using "),Rie=a("code"),RMo=o("model.eval()"),PMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=a("code"),BMo=o("model.train()"),IMo=l(),F(ju.$$.fragment),_qe=l(),$i=a("h2"),Du=a("a"),Bie=a("span"),F(JA.$$.fragment),qMo=l(),Iie=a("span"),NMo=o("AutoModelForCausalLM"),uqe=l(),$o=a("div"),F(YA.$$.fragment),jMo=l(),ki=a("p"),DMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HN=a("a"),GMo=o("from_pretrained()"),OMo=o(" class method or the "),UN=a("a"),VMo=o("from_config()"),XMo=o(` class
method.`),zMo=l(),KA=a("p"),WMo=o("This class cannot be instantiated directly using "),qie=a("code"),QMo=o("__init__()"),HMo=o(" (throws an error)."),UMo=l(),nt=a("div"),F(ZA.$$.fragment),JMo=l(),Nie=a("p"),YMo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KMo=l(),Si=a("p"),ZMo=o(`Note:
Loading a model from its configuration file does `),jie=a("strong"),e4o=o("not"),o4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=a("a"),r4o=o("from_pretrained()"),t4o=o(" to load the model weights."),a4o=l(),F(Gu.$$.fragment),n4o=l(),Ke=a("div"),F(e6.$$.fragment),s4o=l(),Die=a("p"),l4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),i4o=l(),$a=a("p"),d4o=o("The model class to instantiate is selected based on the "),Gie=a("code"),c4o=o("model_type"),f4o=o(` property of the config object (either
passed as an argument or loaded from `),Oie=a("code"),m4o=o("pretrained_model_name_or_path"),g4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=a("code"),h4o=o("pretrained_model_name_or_path"),p4o=o(":"),_4o=l(),z=a("ul"),Ou=a("li"),Xie=a("strong"),u4o=o("bart"),b4o=o(" \u2014 "),YN=a("a"),v4o=o("BartForCausalLM"),F4o=o(" (BART model)"),T4o=l(),Vu=a("li"),zie=a("strong"),M4o=o("bert"),E4o=o(" \u2014 "),KN=a("a"),C4o=o("BertLMHeadModel"),w4o=o(" (BERT model)"),A4o=l(),Xu=a("li"),Wie=a("strong"),y4o=o("bert-generation"),L4o=o(" \u2014 "),ZN=a("a"),x4o=o("BertGenerationDecoder"),$4o=o(" (Bert Generation model)"),k4o=l(),zu=a("li"),Qie=a("strong"),S4o=o("big_bird"),R4o=o(" \u2014 "),ej=a("a"),P4o=o("BigBirdForCausalLM"),B4o=o(" (BigBird model)"),I4o=l(),Wu=a("li"),Hie=a("strong"),q4o=o("bigbird_pegasus"),N4o=o(" \u2014 "),oj=a("a"),j4o=o("BigBirdPegasusForCausalLM"),D4o=o(" (BigBirdPegasus model)"),G4o=l(),Qu=a("li"),Uie=a("strong"),O4o=o("blenderbot"),V4o=o(" \u2014 "),rj=a("a"),X4o=o("BlenderbotForCausalLM"),z4o=o(" (Blenderbot model)"),W4o=l(),Hu=a("li"),Jie=a("strong"),Q4o=o("blenderbot-small"),H4o=o(" \u2014 "),tj=a("a"),U4o=o("BlenderbotSmallForCausalLM"),J4o=o(" (BlenderbotSmall model)"),Y4o=l(),Uu=a("li"),Yie=a("strong"),K4o=o("camembert"),Z4o=o(" \u2014 "),aj=a("a"),eEo=o("CamembertForCausalLM"),oEo=o(" (CamemBERT model)"),rEo=l(),Ju=a("li"),Kie=a("strong"),tEo=o("ctrl"),aEo=o(" \u2014 "),nj=a("a"),nEo=o("CTRLLMHeadModel"),sEo=o(" (CTRL model)"),lEo=l(),Yu=a("li"),Zie=a("strong"),iEo=o("data2vec-text"),dEo=o(" \u2014 "),sj=a("a"),cEo=o("Data2VecTextForCausalLM"),fEo=o(" (Data2VecText model)"),mEo=l(),Ku=a("li"),ede=a("strong"),gEo=o("electra"),hEo=o(" \u2014 "),lj=a("a"),pEo=o("ElectraForCausalLM"),_Eo=o(" (ELECTRA model)"),uEo=l(),Zu=a("li"),ode=a("strong"),bEo=o("gpt2"),vEo=o(" \u2014 "),ij=a("a"),FEo=o("GPT2LMHeadModel"),TEo=o(" (OpenAI GPT-2 model)"),MEo=l(),e1=a("li"),rde=a("strong"),EEo=o("gpt_neo"),CEo=o(" \u2014 "),dj=a("a"),wEo=o("GPTNeoForCausalLM"),AEo=o(" (GPT Neo model)"),yEo=l(),o1=a("li"),tde=a("strong"),LEo=o("gptj"),xEo=o(" \u2014 "),cj=a("a"),$Eo=o("GPTJForCausalLM"),kEo=o(" (GPT-J model)"),SEo=l(),r1=a("li"),ade=a("strong"),REo=o("marian"),PEo=o(" \u2014 "),fj=a("a"),BEo=o("MarianForCausalLM"),IEo=o(" (Marian model)"),qEo=l(),t1=a("li"),nde=a("strong"),NEo=o("mbart"),jEo=o(" \u2014 "),mj=a("a"),DEo=o("MBartForCausalLM"),GEo=o(" (mBART model)"),OEo=l(),a1=a("li"),sde=a("strong"),VEo=o("megatron-bert"),XEo=o(" \u2014 "),gj=a("a"),zEo=o("MegatronBertForCausalLM"),WEo=o(" (MegatronBert model)"),QEo=l(),n1=a("li"),lde=a("strong"),HEo=o("openai-gpt"),UEo=o(" \u2014 "),hj=a("a"),JEo=o("OpenAIGPTLMHeadModel"),YEo=o(" (OpenAI GPT model)"),KEo=l(),s1=a("li"),ide=a("strong"),ZEo=o("opt"),eCo=o(" \u2014 "),pj=a("a"),oCo=o("OPTForCausalLM"),rCo=o(" (OPT model)"),tCo=l(),l1=a("li"),dde=a("strong"),aCo=o("pegasus"),nCo=o(" \u2014 "),_j=a("a"),sCo=o("PegasusForCausalLM"),lCo=o(" (Pegasus model)"),iCo=l(),i1=a("li"),cde=a("strong"),dCo=o("plbart"),cCo=o(" \u2014 "),uj=a("a"),fCo=o("PLBartForCausalLM"),mCo=o(" (PLBart model)"),gCo=l(),d1=a("li"),fde=a("strong"),hCo=o("prophetnet"),pCo=o(" \u2014 "),bj=a("a"),_Co=o("ProphetNetForCausalLM"),uCo=o(" (ProphetNet model)"),bCo=l(),c1=a("li"),mde=a("strong"),vCo=o("qdqbert"),FCo=o(" \u2014 "),vj=a("a"),TCo=o("QDQBertLMHeadModel"),MCo=o(" (QDQBert model)"),ECo=l(),f1=a("li"),gde=a("strong"),CCo=o("reformer"),wCo=o(" \u2014 "),Fj=a("a"),ACo=o("ReformerModelWithLMHead"),yCo=o(" (Reformer model)"),LCo=l(),m1=a("li"),hde=a("strong"),xCo=o("rembert"),$Co=o(" \u2014 "),Tj=a("a"),kCo=o("RemBertForCausalLM"),SCo=o(" (RemBERT model)"),RCo=l(),g1=a("li"),pde=a("strong"),PCo=o("roberta"),BCo=o(" \u2014 "),Mj=a("a"),ICo=o("RobertaForCausalLM"),qCo=o(" (RoBERTa model)"),NCo=l(),h1=a("li"),_de=a("strong"),jCo=o("roformer"),DCo=o(" \u2014 "),Ej=a("a"),GCo=o("RoFormerForCausalLM"),OCo=o(" (RoFormer model)"),VCo=l(),p1=a("li"),ude=a("strong"),XCo=o("speech_to_text_2"),zCo=o(" \u2014 "),Cj=a("a"),WCo=o("Speech2Text2ForCausalLM"),QCo=o(" (Speech2Text2 model)"),HCo=l(),_1=a("li"),bde=a("strong"),UCo=o("transfo-xl"),JCo=o(" \u2014 "),wj=a("a"),YCo=o("TransfoXLLMHeadModel"),KCo=o(" (Transformer-XL model)"),ZCo=l(),u1=a("li"),vde=a("strong"),e5o=o("trocr"),o5o=o(" \u2014 "),Aj=a("a"),r5o=o("TrOCRForCausalLM"),t5o=o(" (TrOCR model)"),a5o=l(),b1=a("li"),Fde=a("strong"),n5o=o("xglm"),s5o=o(" \u2014 "),yj=a("a"),l5o=o("XGLMForCausalLM"),i5o=o(" (XGLM model)"),d5o=l(),v1=a("li"),Tde=a("strong"),c5o=o("xlm"),f5o=o(" \u2014 "),Lj=a("a"),m5o=o("XLMWithLMHeadModel"),g5o=o(" (XLM model)"),h5o=l(),F1=a("li"),Mde=a("strong"),p5o=o("xlm-prophetnet"),_5o=o(" \u2014 "),xj=a("a"),u5o=o("XLMProphetNetForCausalLM"),b5o=o(" (XLMProphetNet model)"),v5o=l(),T1=a("li"),Ede=a("strong"),F5o=o("xlm-roberta"),T5o=o(" \u2014 "),$j=a("a"),M5o=o("XLMRobertaForCausalLM"),E5o=o(" (XLM-RoBERTa model)"),C5o=l(),M1=a("li"),Cde=a("strong"),w5o=o("xlm-roberta-xl"),A5o=o(" \u2014 "),kj=a("a"),y5o=o("XLMRobertaXLForCausalLM"),L5o=o(" (XLM-RoBERTa-XL model)"),x5o=l(),E1=a("li"),wde=a("strong"),$5o=o("xlnet"),k5o=o(" \u2014 "),Sj=a("a"),S5o=o("XLNetLMHeadModel"),R5o=o(" (XLNet model)"),P5o=l(),C1=a("p"),B5o=o("The model is set in evaluation mode by default using "),Ade=a("code"),I5o=o("model.eval()"),q5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=a("code"),N5o=o("model.train()"),j5o=l(),F(w1.$$.fragment),bqe=l(),Ri=a("h2"),A1=a("a"),Lde=a("span"),F(o6.$$.fragment),D5o=l(),xde=a("span"),G5o=o("AutoModelForMaskedLM"),vqe=l(),ko=a("div"),F(r6.$$.fragment),O5o=l(),Pi=a("p"),V5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rj=a("a"),X5o=o("from_pretrained()"),z5o=o(" class method or the "),Pj=a("a"),W5o=o("from_config()"),Q5o=o(` class
method.`),H5o=l(),t6=a("p"),U5o=o("This class cannot be instantiated directly using "),$de=a("code"),J5o=o("__init__()"),Y5o=o(" (throws an error)."),K5o=l(),st=a("div"),F(a6.$$.fragment),Z5o=l(),kde=a("p"),ewo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),owo=l(),Bi=a("p"),rwo=o(`Note:
Loading a model from its configuration file does `),Sde=a("strong"),two=o("not"),awo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bj=a("a"),nwo=o("from_pretrained()"),swo=o(" to load the model weights."),lwo=l(),F(y1.$$.fragment),iwo=l(),Ze=a("div"),F(n6.$$.fragment),dwo=l(),Rde=a("p"),cwo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),fwo=l(),ka=a("p"),mwo=o("The model class to instantiate is selected based on the "),Pde=a("code"),gwo=o("model_type"),hwo=o(` property of the config object (either
passed as an argument or loaded from `),Bde=a("code"),pwo=o("pretrained_model_name_or_path"),_wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),uwo=o("pretrained_model_name_or_path"),bwo=o(":"),vwo=l(),W=a("ul"),L1=a("li"),qde=a("strong"),Fwo=o("albert"),Two=o(" \u2014 "),Ij=a("a"),Mwo=o("AlbertForMaskedLM"),Ewo=o(" (ALBERT model)"),Cwo=l(),x1=a("li"),Nde=a("strong"),wwo=o("bart"),Awo=o(" \u2014 "),qj=a("a"),ywo=o("BartForConditionalGeneration"),Lwo=o(" (BART model)"),xwo=l(),$1=a("li"),jde=a("strong"),$wo=o("bert"),kwo=o(" \u2014 "),Nj=a("a"),Swo=o("BertForMaskedLM"),Rwo=o(" (BERT model)"),Pwo=l(),k1=a("li"),Dde=a("strong"),Bwo=o("big_bird"),Iwo=o(" \u2014 "),jj=a("a"),qwo=o("BigBirdForMaskedLM"),Nwo=o(" (BigBird model)"),jwo=l(),S1=a("li"),Gde=a("strong"),Dwo=o("camembert"),Gwo=o(" \u2014 "),Dj=a("a"),Owo=o("CamembertForMaskedLM"),Vwo=o(" (CamemBERT model)"),Xwo=l(),R1=a("li"),Ode=a("strong"),zwo=o("convbert"),Wwo=o(" \u2014 "),Gj=a("a"),Qwo=o("ConvBertForMaskedLM"),Hwo=o(" (ConvBERT model)"),Uwo=l(),P1=a("li"),Vde=a("strong"),Jwo=o("data2vec-text"),Ywo=o(" \u2014 "),Oj=a("a"),Kwo=o("Data2VecTextForMaskedLM"),Zwo=o(" (Data2VecText model)"),e0o=l(),B1=a("li"),Xde=a("strong"),o0o=o("deberta"),r0o=o(" \u2014 "),Vj=a("a"),t0o=o("DebertaForMaskedLM"),a0o=o(" (DeBERTa model)"),n0o=l(),I1=a("li"),zde=a("strong"),s0o=o("deberta-v2"),l0o=o(" \u2014 "),Xj=a("a"),i0o=o("DebertaV2ForMaskedLM"),d0o=o(" (DeBERTa-v2 model)"),c0o=l(),q1=a("li"),Wde=a("strong"),f0o=o("distilbert"),m0o=o(" \u2014 "),zj=a("a"),g0o=o("DistilBertForMaskedLM"),h0o=o(" (DistilBERT model)"),p0o=l(),N1=a("li"),Qde=a("strong"),_0o=o("electra"),u0o=o(" \u2014 "),Wj=a("a"),b0o=o("ElectraForMaskedLM"),v0o=o(" (ELECTRA model)"),F0o=l(),j1=a("li"),Hde=a("strong"),T0o=o("flaubert"),M0o=o(" \u2014 "),Qj=a("a"),E0o=o("FlaubertWithLMHeadModel"),C0o=o(" (FlauBERT model)"),w0o=l(),D1=a("li"),Ude=a("strong"),A0o=o("fnet"),y0o=o(" \u2014 "),Hj=a("a"),L0o=o("FNetForMaskedLM"),x0o=o(" (FNet model)"),$0o=l(),G1=a("li"),Jde=a("strong"),k0o=o("funnel"),S0o=o(" \u2014 "),Uj=a("a"),R0o=o("FunnelForMaskedLM"),P0o=o(" (Funnel Transformer model)"),B0o=l(),O1=a("li"),Yde=a("strong"),I0o=o("ibert"),q0o=o(" \u2014 "),Jj=a("a"),N0o=o("IBertForMaskedLM"),j0o=o(" (I-BERT model)"),D0o=l(),V1=a("li"),Kde=a("strong"),G0o=o("layoutlm"),O0o=o(" \u2014 "),Yj=a("a"),V0o=o("LayoutLMForMaskedLM"),X0o=o(" (LayoutLM model)"),z0o=l(),X1=a("li"),Zde=a("strong"),W0o=o("longformer"),Q0o=o(" \u2014 "),Kj=a("a"),H0o=o("LongformerForMaskedLM"),U0o=o(" (Longformer model)"),J0o=l(),z1=a("li"),ece=a("strong"),Y0o=o("mbart"),K0o=o(" \u2014 "),Zj=a("a"),Z0o=o("MBartForConditionalGeneration"),eAo=o(" (mBART model)"),oAo=l(),W1=a("li"),oce=a("strong"),rAo=o("megatron-bert"),tAo=o(" \u2014 "),eD=a("a"),aAo=o("MegatronBertForMaskedLM"),nAo=o(" (MegatronBert model)"),sAo=l(),Q1=a("li"),rce=a("strong"),lAo=o("mobilebert"),iAo=o(" \u2014 "),oD=a("a"),dAo=o("MobileBertForMaskedLM"),cAo=o(" (MobileBERT model)"),fAo=l(),H1=a("li"),tce=a("strong"),mAo=o("mpnet"),gAo=o(" \u2014 "),rD=a("a"),hAo=o("MPNetForMaskedLM"),pAo=o(" (MPNet model)"),_Ao=l(),U1=a("li"),ace=a("strong"),uAo=o("nystromformer"),bAo=o(" \u2014 "),tD=a("a"),vAo=o("NystromformerForMaskedLM"),FAo=o(" (Nystromformer model)"),TAo=l(),J1=a("li"),nce=a("strong"),MAo=o("perceiver"),EAo=o(" \u2014 "),aD=a("a"),CAo=o("PerceiverForMaskedLM"),wAo=o(" (Perceiver model)"),AAo=l(),Y1=a("li"),sce=a("strong"),yAo=o("qdqbert"),LAo=o(" \u2014 "),nD=a("a"),xAo=o("QDQBertForMaskedLM"),$Ao=o(" (QDQBert model)"),kAo=l(),K1=a("li"),lce=a("strong"),SAo=o("reformer"),RAo=o(" \u2014 "),sD=a("a"),PAo=o("ReformerForMaskedLM"),BAo=o(" (Reformer model)"),IAo=l(),Z1=a("li"),ice=a("strong"),qAo=o("rembert"),NAo=o(" \u2014 "),lD=a("a"),jAo=o("RemBertForMaskedLM"),DAo=o(" (RemBERT model)"),GAo=l(),e7=a("li"),dce=a("strong"),OAo=o("roberta"),VAo=o(" \u2014 "),iD=a("a"),XAo=o("RobertaForMaskedLM"),zAo=o(" (RoBERTa model)"),WAo=l(),o7=a("li"),cce=a("strong"),QAo=o("roformer"),HAo=o(" \u2014 "),dD=a("a"),UAo=o("RoFormerForMaskedLM"),JAo=o(" (RoFormer model)"),YAo=l(),r7=a("li"),fce=a("strong"),KAo=o("squeezebert"),ZAo=o(" \u2014 "),cD=a("a"),e6o=o("SqueezeBertForMaskedLM"),o6o=o(" (SqueezeBERT model)"),r6o=l(),t7=a("li"),mce=a("strong"),t6o=o("tapas"),a6o=o(" \u2014 "),fD=a("a"),n6o=o("TapasForMaskedLM"),s6o=o(" (TAPAS model)"),l6o=l(),a7=a("li"),gce=a("strong"),i6o=o("wav2vec2"),d6o=o(" \u2014 "),hce=a("code"),c6o=o("Wav2Vec2ForMaskedLM"),f6o=o(" (Wav2Vec2 model)"),m6o=l(),n7=a("li"),pce=a("strong"),g6o=o("xlm"),h6o=o(" \u2014 "),mD=a("a"),p6o=o("XLMWithLMHeadModel"),_6o=o(" (XLM model)"),u6o=l(),s7=a("li"),_ce=a("strong"),b6o=o("xlm-roberta"),v6o=o(" \u2014 "),gD=a("a"),F6o=o("XLMRobertaForMaskedLM"),T6o=o(" (XLM-RoBERTa model)"),M6o=l(),l7=a("li"),uce=a("strong"),E6o=o("xlm-roberta-xl"),C6o=o(" \u2014 "),hD=a("a"),w6o=o("XLMRobertaXLForMaskedLM"),A6o=o(" (XLM-RoBERTa-XL model)"),y6o=l(),i7=a("li"),bce=a("strong"),L6o=o("yoso"),x6o=o(" \u2014 "),pD=a("a"),$6o=o("YosoForMaskedLM"),k6o=o(" (YOSO model)"),S6o=l(),d7=a("p"),R6o=o("The model is set in evaluation mode by default using "),vce=a("code"),P6o=o("model.eval()"),B6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=a("code"),I6o=o("model.train()"),q6o=l(),F(c7.$$.fragment),Fqe=l(),Ii=a("h2"),f7=a("a"),Tce=a("span"),F(s6.$$.fragment),N6o=l(),Mce=a("span"),j6o=o("AutoModelForSeq2SeqLM"),Tqe=l(),So=a("div"),F(l6.$$.fragment),D6o=l(),qi=a("p"),G6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_D=a("a"),O6o=o("from_pretrained()"),V6o=o(" class method or the "),uD=a("a"),X6o=o("from_config()"),z6o=o(` class
method.`),W6o=l(),i6=a("p"),Q6o=o("This class cannot be instantiated directly using "),Ece=a("code"),H6o=o("__init__()"),U6o=o(" (throws an error)."),J6o=l(),lt=a("div"),F(d6.$$.fragment),Y6o=l(),Cce=a("p"),K6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z6o=l(),Ni=a("p"),eyo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),oyo=o("not"),ryo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),tyo=o("from_pretrained()"),ayo=o(" to load the model weights."),nyo=l(),F(m7.$$.fragment),syo=l(),eo=a("div"),F(c6.$$.fragment),lyo=l(),Ace=a("p"),iyo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dyo=l(),Sa=a("p"),cyo=o("The model class to instantiate is selected based on the "),yce=a("code"),fyo=o("model_type"),myo=o(` property of the config object (either
passed as an argument or loaded from `),Lce=a("code"),gyo=o("pretrained_model_name_or_path"),hyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),pyo=o("pretrained_model_name_or_path"),_yo=o(":"),uyo=l(),_e=a("ul"),g7=a("li"),$ce=a("strong"),byo=o("bart"),vyo=o(" \u2014 "),vD=a("a"),Fyo=o("BartForConditionalGeneration"),Tyo=o(" (BART model)"),Myo=l(),h7=a("li"),kce=a("strong"),Eyo=o("bigbird_pegasus"),Cyo=o(" \u2014 "),FD=a("a"),wyo=o("BigBirdPegasusForConditionalGeneration"),Ayo=o(" (BigBirdPegasus model)"),yyo=l(),p7=a("li"),Sce=a("strong"),Lyo=o("blenderbot"),xyo=o(" \u2014 "),TD=a("a"),$yo=o("BlenderbotForConditionalGeneration"),kyo=o(" (Blenderbot model)"),Syo=l(),_7=a("li"),Rce=a("strong"),Ryo=o("blenderbot-small"),Pyo=o(" \u2014 "),MD=a("a"),Byo=o("BlenderbotSmallForConditionalGeneration"),Iyo=o(" (BlenderbotSmall model)"),qyo=l(),u7=a("li"),Pce=a("strong"),Nyo=o("encoder-decoder"),jyo=o(" \u2014 "),ED=a("a"),Dyo=o("EncoderDecoderModel"),Gyo=o(" (Encoder decoder model)"),Oyo=l(),b7=a("li"),Bce=a("strong"),Vyo=o("fsmt"),Xyo=o(" \u2014 "),CD=a("a"),zyo=o("FSMTForConditionalGeneration"),Wyo=o(" (FairSeq Machine-Translation model)"),Qyo=l(),v7=a("li"),Ice=a("strong"),Hyo=o("led"),Uyo=o(" \u2014 "),wD=a("a"),Jyo=o("LEDForConditionalGeneration"),Yyo=o(" (LED model)"),Kyo=l(),F7=a("li"),qce=a("strong"),Zyo=o("m2m_100"),eLo=o(" \u2014 "),AD=a("a"),oLo=o("M2M100ForConditionalGeneration"),rLo=o(" (M2M100 model)"),tLo=l(),T7=a("li"),Nce=a("strong"),aLo=o("marian"),nLo=o(" \u2014 "),yD=a("a"),sLo=o("MarianMTModel"),lLo=o(" (Marian model)"),iLo=l(),M7=a("li"),jce=a("strong"),dLo=o("mbart"),cLo=o(" \u2014 "),LD=a("a"),fLo=o("MBartForConditionalGeneration"),mLo=o(" (mBART model)"),gLo=l(),E7=a("li"),Dce=a("strong"),hLo=o("mt5"),pLo=o(" \u2014 "),xD=a("a"),_Lo=o("MT5ForConditionalGeneration"),uLo=o(" (mT5 model)"),bLo=l(),C7=a("li"),Gce=a("strong"),vLo=o("pegasus"),FLo=o(" \u2014 "),$D=a("a"),TLo=o("PegasusForConditionalGeneration"),MLo=o(" (Pegasus model)"),ELo=l(),w7=a("li"),Oce=a("strong"),CLo=o("plbart"),wLo=o(" \u2014 "),kD=a("a"),ALo=o("PLBartForConditionalGeneration"),yLo=o(" (PLBart model)"),LLo=l(),A7=a("li"),Vce=a("strong"),xLo=o("prophetnet"),$Lo=o(" \u2014 "),SD=a("a"),kLo=o("ProphetNetForConditionalGeneration"),SLo=o(" (ProphetNet model)"),RLo=l(),y7=a("li"),Xce=a("strong"),PLo=o("t5"),BLo=o(" \u2014 "),RD=a("a"),ILo=o("T5ForConditionalGeneration"),qLo=o(" (T5 model)"),NLo=l(),L7=a("li"),zce=a("strong"),jLo=o("xlm-prophetnet"),DLo=o(" \u2014 "),PD=a("a"),GLo=o("XLMProphetNetForConditionalGeneration"),OLo=o(" (XLMProphetNet model)"),VLo=l(),x7=a("p"),XLo=o("The model is set in evaluation mode by default using "),Wce=a("code"),zLo=o("model.eval()"),WLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),QLo=o("model.train()"),HLo=l(),F($7.$$.fragment),Mqe=l(),ji=a("h2"),k7=a("a"),Hce=a("span"),F(f6.$$.fragment),ULo=l(),Uce=a("span"),JLo=o("AutoModelForSequenceClassification"),Eqe=l(),Ro=a("div"),F(m6.$$.fragment),YLo=l(),Di=a("p"),KLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BD=a("a"),ZLo=o("from_pretrained()"),e9o=o(" class method or the "),ID=a("a"),o9o=o("from_config()"),r9o=o(` class
method.`),t9o=l(),g6=a("p"),a9o=o("This class cannot be instantiated directly using "),Jce=a("code"),n9o=o("__init__()"),s9o=o(" (throws an error)."),l9o=l(),it=a("div"),F(h6.$$.fragment),i9o=l(),Yce=a("p"),d9o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c9o=l(),Gi=a("p"),f9o=o(`Note:
Loading a model from its configuration file does `),Kce=a("strong"),m9o=o("not"),g9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),h9o=o("from_pretrained()"),p9o=o(" to load the model weights."),_9o=l(),F(S7.$$.fragment),u9o=l(),oo=a("div"),F(p6.$$.fragment),b9o=l(),Zce=a("p"),v9o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F9o=l(),Ra=a("p"),T9o=o("The model class to instantiate is selected based on the "),efe=a("code"),M9o=o("model_type"),E9o=o(` property of the config object (either
passed as an argument or loaded from `),ofe=a("code"),C9o=o("pretrained_model_name_or_path"),w9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=a("code"),A9o=o("pretrained_model_name_or_path"),y9o=o(":"),L9o=l(),q=a("ul"),R7=a("li"),tfe=a("strong"),x9o=o("albert"),$9o=o(" \u2014 "),ND=a("a"),k9o=o("AlbertForSequenceClassification"),S9o=o(" (ALBERT model)"),R9o=l(),P7=a("li"),afe=a("strong"),P9o=o("bart"),B9o=o(" \u2014 "),jD=a("a"),I9o=o("BartForSequenceClassification"),q9o=o(" (BART model)"),N9o=l(),B7=a("li"),nfe=a("strong"),j9o=o("bert"),D9o=o(" \u2014 "),DD=a("a"),G9o=o("BertForSequenceClassification"),O9o=o(" (BERT model)"),V9o=l(),I7=a("li"),sfe=a("strong"),X9o=o("big_bird"),z9o=o(" \u2014 "),GD=a("a"),W9o=o("BigBirdForSequenceClassification"),Q9o=o(" (BigBird model)"),H9o=l(),q7=a("li"),lfe=a("strong"),U9o=o("bigbird_pegasus"),J9o=o(" \u2014 "),OD=a("a"),Y9o=o("BigBirdPegasusForSequenceClassification"),K9o=o(" (BigBirdPegasus model)"),Z9o=l(),N7=a("li"),ife=a("strong"),exo=o("camembert"),oxo=o(" \u2014 "),VD=a("a"),rxo=o("CamembertForSequenceClassification"),txo=o(" (CamemBERT model)"),axo=l(),j7=a("li"),dfe=a("strong"),nxo=o("canine"),sxo=o(" \u2014 "),XD=a("a"),lxo=o("CanineForSequenceClassification"),ixo=o(" (Canine model)"),dxo=l(),D7=a("li"),cfe=a("strong"),cxo=o("convbert"),fxo=o(" \u2014 "),zD=a("a"),mxo=o("ConvBertForSequenceClassification"),gxo=o(" (ConvBERT model)"),hxo=l(),G7=a("li"),ffe=a("strong"),pxo=o("ctrl"),_xo=o(" \u2014 "),WD=a("a"),uxo=o("CTRLForSequenceClassification"),bxo=o(" (CTRL model)"),vxo=l(),O7=a("li"),mfe=a("strong"),Fxo=o("data2vec-text"),Txo=o(" \u2014 "),QD=a("a"),Mxo=o("Data2VecTextForSequenceClassification"),Exo=o(" (Data2VecText model)"),Cxo=l(),V7=a("li"),gfe=a("strong"),wxo=o("deberta"),Axo=o(" \u2014 "),HD=a("a"),yxo=o("DebertaForSequenceClassification"),Lxo=o(" (DeBERTa model)"),xxo=l(),X7=a("li"),hfe=a("strong"),$xo=o("deberta-v2"),kxo=o(" \u2014 "),UD=a("a"),Sxo=o("DebertaV2ForSequenceClassification"),Rxo=o(" (DeBERTa-v2 model)"),Pxo=l(),z7=a("li"),pfe=a("strong"),Bxo=o("distilbert"),Ixo=o(" \u2014 "),JD=a("a"),qxo=o("DistilBertForSequenceClassification"),Nxo=o(" (DistilBERT model)"),jxo=l(),W7=a("li"),_fe=a("strong"),Dxo=o("electra"),Gxo=o(" \u2014 "),YD=a("a"),Oxo=o("ElectraForSequenceClassification"),Vxo=o(" (ELECTRA model)"),Xxo=l(),Q7=a("li"),ufe=a("strong"),zxo=o("flaubert"),Wxo=o(" \u2014 "),KD=a("a"),Qxo=o("FlaubertForSequenceClassification"),Hxo=o(" (FlauBERT model)"),Uxo=l(),H7=a("li"),bfe=a("strong"),Jxo=o("fnet"),Yxo=o(" \u2014 "),ZD=a("a"),Kxo=o("FNetForSequenceClassification"),Zxo=o(" (FNet model)"),e$o=l(),U7=a("li"),vfe=a("strong"),o$o=o("funnel"),r$o=o(" \u2014 "),eG=a("a"),t$o=o("FunnelForSequenceClassification"),a$o=o(" (Funnel Transformer model)"),n$o=l(),J7=a("li"),Ffe=a("strong"),s$o=o("gpt2"),l$o=o(" \u2014 "),oG=a("a"),i$o=o("GPT2ForSequenceClassification"),d$o=o(" (OpenAI GPT-2 model)"),c$o=l(),Y7=a("li"),Tfe=a("strong"),f$o=o("gpt_neo"),m$o=o(" \u2014 "),rG=a("a"),g$o=o("GPTNeoForSequenceClassification"),h$o=o(" (GPT Neo model)"),p$o=l(),K7=a("li"),Mfe=a("strong"),_$o=o("gptj"),u$o=o(" \u2014 "),tG=a("a"),b$o=o("GPTJForSequenceClassification"),v$o=o(" (GPT-J model)"),F$o=l(),Z7=a("li"),Efe=a("strong"),T$o=o("ibert"),M$o=o(" \u2014 "),aG=a("a"),E$o=o("IBertForSequenceClassification"),C$o=o(" (I-BERT model)"),w$o=l(),eb=a("li"),Cfe=a("strong"),A$o=o("layoutlm"),y$o=o(" \u2014 "),nG=a("a"),L$o=o("LayoutLMForSequenceClassification"),x$o=o(" (LayoutLM model)"),$$o=l(),ob=a("li"),wfe=a("strong"),k$o=o("layoutlmv2"),S$o=o(" \u2014 "),sG=a("a"),R$o=o("LayoutLMv2ForSequenceClassification"),P$o=o(" (LayoutLMv2 model)"),B$o=l(),rb=a("li"),Afe=a("strong"),I$o=o("led"),q$o=o(" \u2014 "),lG=a("a"),N$o=o("LEDForSequenceClassification"),j$o=o(" (LED model)"),D$o=l(),tb=a("li"),yfe=a("strong"),G$o=o("longformer"),O$o=o(" \u2014 "),iG=a("a"),V$o=o("LongformerForSequenceClassification"),X$o=o(" (Longformer model)"),z$o=l(),ab=a("li"),Lfe=a("strong"),W$o=o("mbart"),Q$o=o(" \u2014 "),dG=a("a"),H$o=o("MBartForSequenceClassification"),U$o=o(" (mBART model)"),J$o=l(),nb=a("li"),xfe=a("strong"),Y$o=o("megatron-bert"),K$o=o(" \u2014 "),cG=a("a"),Z$o=o("MegatronBertForSequenceClassification"),eko=o(" (MegatronBert model)"),oko=l(),sb=a("li"),$fe=a("strong"),rko=o("mobilebert"),tko=o(" \u2014 "),fG=a("a"),ako=o("MobileBertForSequenceClassification"),nko=o(" (MobileBERT model)"),sko=l(),lb=a("li"),kfe=a("strong"),lko=o("mpnet"),iko=o(" \u2014 "),mG=a("a"),dko=o("MPNetForSequenceClassification"),cko=o(" (MPNet model)"),fko=l(),ib=a("li"),Sfe=a("strong"),mko=o("nystromformer"),gko=o(" \u2014 "),gG=a("a"),hko=o("NystromformerForSequenceClassification"),pko=o(" (Nystromformer model)"),_ko=l(),db=a("li"),Rfe=a("strong"),uko=o("openai-gpt"),bko=o(" \u2014 "),hG=a("a"),vko=o("OpenAIGPTForSequenceClassification"),Fko=o(" (OpenAI GPT model)"),Tko=l(),cb=a("li"),Pfe=a("strong"),Mko=o("perceiver"),Eko=o(" \u2014 "),pG=a("a"),Cko=o("PerceiverForSequenceClassification"),wko=o(" (Perceiver model)"),Ako=l(),fb=a("li"),Bfe=a("strong"),yko=o("plbart"),Lko=o(" \u2014 "),_G=a("a"),xko=o("PLBartForSequenceClassification"),$ko=o(" (PLBart model)"),kko=l(),mb=a("li"),Ife=a("strong"),Sko=o("qdqbert"),Rko=o(" \u2014 "),uG=a("a"),Pko=o("QDQBertForSequenceClassification"),Bko=o(" (QDQBert model)"),Iko=l(),gb=a("li"),qfe=a("strong"),qko=o("reformer"),Nko=o(" \u2014 "),bG=a("a"),jko=o("ReformerForSequenceClassification"),Dko=o(" (Reformer model)"),Gko=l(),hb=a("li"),Nfe=a("strong"),Oko=o("rembert"),Vko=o(" \u2014 "),vG=a("a"),Xko=o("RemBertForSequenceClassification"),zko=o(" (RemBERT model)"),Wko=l(),pb=a("li"),jfe=a("strong"),Qko=o("roberta"),Hko=o(" \u2014 "),FG=a("a"),Uko=o("RobertaForSequenceClassification"),Jko=o(" (RoBERTa model)"),Yko=l(),_b=a("li"),Dfe=a("strong"),Kko=o("roformer"),Zko=o(" \u2014 "),TG=a("a"),eSo=o("RoFormerForSequenceClassification"),oSo=o(" (RoFormer model)"),rSo=l(),ub=a("li"),Gfe=a("strong"),tSo=o("squeezebert"),aSo=o(" \u2014 "),MG=a("a"),nSo=o("SqueezeBertForSequenceClassification"),sSo=o(" (SqueezeBERT model)"),lSo=l(),bb=a("li"),Ofe=a("strong"),iSo=o("tapas"),dSo=o(" \u2014 "),EG=a("a"),cSo=o("TapasForSequenceClassification"),fSo=o(" (TAPAS model)"),mSo=l(),vb=a("li"),Vfe=a("strong"),gSo=o("transfo-xl"),hSo=o(" \u2014 "),CG=a("a"),pSo=o("TransfoXLForSequenceClassification"),_So=o(" (Transformer-XL model)"),uSo=l(),Fb=a("li"),Xfe=a("strong"),bSo=o("xlm"),vSo=o(" \u2014 "),wG=a("a"),FSo=o("XLMForSequenceClassification"),TSo=o(" (XLM model)"),MSo=l(),Tb=a("li"),zfe=a("strong"),ESo=o("xlm-roberta"),CSo=o(" \u2014 "),AG=a("a"),wSo=o("XLMRobertaForSequenceClassification"),ASo=o(" (XLM-RoBERTa model)"),ySo=l(),Mb=a("li"),Wfe=a("strong"),LSo=o("xlm-roberta-xl"),xSo=o(" \u2014 "),yG=a("a"),$So=o("XLMRobertaXLForSequenceClassification"),kSo=o(" (XLM-RoBERTa-XL model)"),SSo=l(),Eb=a("li"),Qfe=a("strong"),RSo=o("xlnet"),PSo=o(" \u2014 "),LG=a("a"),BSo=o("XLNetForSequenceClassification"),ISo=o(" (XLNet model)"),qSo=l(),Cb=a("li"),Hfe=a("strong"),NSo=o("yoso"),jSo=o(" \u2014 "),xG=a("a"),DSo=o("YosoForSequenceClassification"),GSo=o(" (YOSO model)"),OSo=l(),wb=a("p"),VSo=o("The model is set in evaluation mode by default using "),Ufe=a("code"),XSo=o("model.eval()"),zSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=a("code"),WSo=o("model.train()"),QSo=l(),F(Ab.$$.fragment),Cqe=l(),Oi=a("h2"),yb=a("a"),Yfe=a("span"),F(_6.$$.fragment),HSo=l(),Kfe=a("span"),USo=o("AutoModelForMultipleChoice"),wqe=l(),Po=a("div"),F(u6.$$.fragment),JSo=l(),Vi=a("p"),YSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$G=a("a"),KSo=o("from_pretrained()"),ZSo=o(" class method or the "),kG=a("a"),eRo=o("from_config()"),oRo=o(` class
method.`),rRo=l(),b6=a("p"),tRo=o("This class cannot be instantiated directly using "),Zfe=a("code"),aRo=o("__init__()"),nRo=o(" (throws an error)."),sRo=l(),dt=a("div"),F(v6.$$.fragment),lRo=l(),eme=a("p"),iRo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dRo=l(),Xi=a("p"),cRo=o(`Note:
Loading a model from its configuration file does `),ome=a("strong"),fRo=o("not"),mRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),gRo=o("from_pretrained()"),hRo=o(" to load the model weights."),pRo=l(),F(Lb.$$.fragment),_Ro=l(),ro=a("div"),F(F6.$$.fragment),uRo=l(),rme=a("p"),bRo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vRo=l(),Pa=a("p"),FRo=o("The model class to instantiate is selected based on the "),tme=a("code"),TRo=o("model_type"),MRo=o(` property of the config object (either
passed as an argument or loaded from `),ame=a("code"),ERo=o("pretrained_model_name_or_path"),CRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=a("code"),wRo=o("pretrained_model_name_or_path"),ARo=o(":"),yRo=l(),Y=a("ul"),xb=a("li"),sme=a("strong"),LRo=o("albert"),xRo=o(" \u2014 "),RG=a("a"),$Ro=o("AlbertForMultipleChoice"),kRo=o(" (ALBERT model)"),SRo=l(),$b=a("li"),lme=a("strong"),RRo=o("bert"),PRo=o(" \u2014 "),PG=a("a"),BRo=o("BertForMultipleChoice"),IRo=o(" (BERT model)"),qRo=l(),kb=a("li"),ime=a("strong"),NRo=o("big_bird"),jRo=o(" \u2014 "),BG=a("a"),DRo=o("BigBirdForMultipleChoice"),GRo=o(" (BigBird model)"),ORo=l(),Sb=a("li"),dme=a("strong"),VRo=o("camembert"),XRo=o(" \u2014 "),IG=a("a"),zRo=o("CamembertForMultipleChoice"),WRo=o(" (CamemBERT model)"),QRo=l(),Rb=a("li"),cme=a("strong"),HRo=o("canine"),URo=o(" \u2014 "),qG=a("a"),JRo=o("CanineForMultipleChoice"),YRo=o(" (Canine model)"),KRo=l(),Pb=a("li"),fme=a("strong"),ZRo=o("convbert"),ePo=o(" \u2014 "),NG=a("a"),oPo=o("ConvBertForMultipleChoice"),rPo=o(" (ConvBERT model)"),tPo=l(),Bb=a("li"),mme=a("strong"),aPo=o("data2vec-text"),nPo=o(" \u2014 "),jG=a("a"),sPo=o("Data2VecTextForMultipleChoice"),lPo=o(" (Data2VecText model)"),iPo=l(),Ib=a("li"),gme=a("strong"),dPo=o("deberta-v2"),cPo=o(" \u2014 "),DG=a("a"),fPo=o("DebertaV2ForMultipleChoice"),mPo=o(" (DeBERTa-v2 model)"),gPo=l(),qb=a("li"),hme=a("strong"),hPo=o("distilbert"),pPo=o(" \u2014 "),GG=a("a"),_Po=o("DistilBertForMultipleChoice"),uPo=o(" (DistilBERT model)"),bPo=l(),Nb=a("li"),pme=a("strong"),vPo=o("electra"),FPo=o(" \u2014 "),OG=a("a"),TPo=o("ElectraForMultipleChoice"),MPo=o(" (ELECTRA model)"),EPo=l(),jb=a("li"),_me=a("strong"),CPo=o("flaubert"),wPo=o(" \u2014 "),VG=a("a"),APo=o("FlaubertForMultipleChoice"),yPo=o(" (FlauBERT model)"),LPo=l(),Db=a("li"),ume=a("strong"),xPo=o("fnet"),$Po=o(" \u2014 "),XG=a("a"),kPo=o("FNetForMultipleChoice"),SPo=o(" (FNet model)"),RPo=l(),Gb=a("li"),bme=a("strong"),PPo=o("funnel"),BPo=o(" \u2014 "),zG=a("a"),IPo=o("FunnelForMultipleChoice"),qPo=o(" (Funnel Transformer model)"),NPo=l(),Ob=a("li"),vme=a("strong"),jPo=o("ibert"),DPo=o(" \u2014 "),WG=a("a"),GPo=o("IBertForMultipleChoice"),OPo=o(" (I-BERT model)"),VPo=l(),Vb=a("li"),Fme=a("strong"),XPo=o("longformer"),zPo=o(" \u2014 "),QG=a("a"),WPo=o("LongformerForMultipleChoice"),QPo=o(" (Longformer model)"),HPo=l(),Xb=a("li"),Tme=a("strong"),UPo=o("megatron-bert"),JPo=o(" \u2014 "),HG=a("a"),YPo=o("MegatronBertForMultipleChoice"),KPo=o(" (MegatronBert model)"),ZPo=l(),zb=a("li"),Mme=a("strong"),eBo=o("mobilebert"),oBo=o(" \u2014 "),UG=a("a"),rBo=o("MobileBertForMultipleChoice"),tBo=o(" (MobileBERT model)"),aBo=l(),Wb=a("li"),Eme=a("strong"),nBo=o("mpnet"),sBo=o(" \u2014 "),JG=a("a"),lBo=o("MPNetForMultipleChoice"),iBo=o(" (MPNet model)"),dBo=l(),Qb=a("li"),Cme=a("strong"),cBo=o("nystromformer"),fBo=o(" \u2014 "),YG=a("a"),mBo=o("NystromformerForMultipleChoice"),gBo=o(" (Nystromformer model)"),hBo=l(),Hb=a("li"),wme=a("strong"),pBo=o("qdqbert"),_Bo=o(" \u2014 "),KG=a("a"),uBo=o("QDQBertForMultipleChoice"),bBo=o(" (QDQBert model)"),vBo=l(),Ub=a("li"),Ame=a("strong"),FBo=o("rembert"),TBo=o(" \u2014 "),ZG=a("a"),MBo=o("RemBertForMultipleChoice"),EBo=o(" (RemBERT model)"),CBo=l(),Jb=a("li"),yme=a("strong"),wBo=o("roberta"),ABo=o(" \u2014 "),eO=a("a"),yBo=o("RobertaForMultipleChoice"),LBo=o(" (RoBERTa model)"),xBo=l(),Yb=a("li"),Lme=a("strong"),$Bo=o("roformer"),kBo=o(" \u2014 "),oO=a("a"),SBo=o("RoFormerForMultipleChoice"),RBo=o(" (RoFormer model)"),PBo=l(),Kb=a("li"),xme=a("strong"),BBo=o("squeezebert"),IBo=o(" \u2014 "),rO=a("a"),qBo=o("SqueezeBertForMultipleChoice"),NBo=o(" (SqueezeBERT model)"),jBo=l(),Zb=a("li"),$me=a("strong"),DBo=o("xlm"),GBo=o(" \u2014 "),tO=a("a"),OBo=o("XLMForMultipleChoice"),VBo=o(" (XLM model)"),XBo=l(),e2=a("li"),kme=a("strong"),zBo=o("xlm-roberta"),WBo=o(" \u2014 "),aO=a("a"),QBo=o("XLMRobertaForMultipleChoice"),HBo=o(" (XLM-RoBERTa model)"),UBo=l(),o2=a("li"),Sme=a("strong"),JBo=o("xlm-roberta-xl"),YBo=o(" \u2014 "),nO=a("a"),KBo=o("XLMRobertaXLForMultipleChoice"),ZBo=o(" (XLM-RoBERTa-XL model)"),eIo=l(),r2=a("li"),Rme=a("strong"),oIo=o("xlnet"),rIo=o(" \u2014 "),sO=a("a"),tIo=o("XLNetForMultipleChoice"),aIo=o(" (XLNet model)"),nIo=l(),t2=a("li"),Pme=a("strong"),sIo=o("yoso"),lIo=o(" \u2014 "),lO=a("a"),iIo=o("YosoForMultipleChoice"),dIo=o(" (YOSO model)"),cIo=l(),a2=a("p"),fIo=o("The model is set in evaluation mode by default using "),Bme=a("code"),mIo=o("model.eval()"),gIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=a("code"),hIo=o("model.train()"),pIo=l(),F(n2.$$.fragment),Aqe=l(),zi=a("h2"),s2=a("a"),qme=a("span"),F(T6.$$.fragment),_Io=l(),Nme=a("span"),uIo=o("AutoModelForNextSentencePrediction"),yqe=l(),Bo=a("div"),F(M6.$$.fragment),bIo=l(),Wi=a("p"),vIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iO=a("a"),FIo=o("from_pretrained()"),TIo=o(" class method or the "),dO=a("a"),MIo=o("from_config()"),EIo=o(` class
method.`),CIo=l(),E6=a("p"),wIo=o("This class cannot be instantiated directly using "),jme=a("code"),AIo=o("__init__()"),yIo=o(" (throws an error)."),LIo=l(),ct=a("div"),F(C6.$$.fragment),xIo=l(),Dme=a("p"),$Io=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kIo=l(),Qi=a("p"),SIo=o(`Note:
Loading a model from its configuration file does `),Gme=a("strong"),RIo=o("not"),PIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),BIo=o("from_pretrained()"),IIo=o(" to load the model weights."),qIo=l(),F(l2.$$.fragment),NIo=l(),to=a("div"),F(w6.$$.fragment),jIo=l(),Ome=a("p"),DIo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GIo=l(),Ba=a("p"),OIo=o("The model class to instantiate is selected based on the "),Vme=a("code"),VIo=o("model_type"),XIo=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),zIo=o("pretrained_model_name_or_path"),WIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),QIo=o("pretrained_model_name_or_path"),HIo=o(":"),UIo=l(),Yr=a("ul"),i2=a("li"),Wme=a("strong"),JIo=o("bert"),YIo=o(" \u2014 "),fO=a("a"),KIo=o("BertForNextSentencePrediction"),ZIo=o(" (BERT model)"),eqo=l(),d2=a("li"),Qme=a("strong"),oqo=o("fnet"),rqo=o(" \u2014 "),mO=a("a"),tqo=o("FNetForNextSentencePrediction"),aqo=o(" (FNet model)"),nqo=l(),c2=a("li"),Hme=a("strong"),sqo=o("megatron-bert"),lqo=o(" \u2014 "),gO=a("a"),iqo=o("MegatronBertForNextSentencePrediction"),dqo=o(" (MegatronBert model)"),cqo=l(),f2=a("li"),Ume=a("strong"),fqo=o("mobilebert"),mqo=o(" \u2014 "),hO=a("a"),gqo=o("MobileBertForNextSentencePrediction"),hqo=o(" (MobileBERT model)"),pqo=l(),m2=a("li"),Jme=a("strong"),_qo=o("qdqbert"),uqo=o(" \u2014 "),pO=a("a"),bqo=o("QDQBertForNextSentencePrediction"),vqo=o(" (QDQBert model)"),Fqo=l(),g2=a("p"),Tqo=o("The model is set in evaluation mode by default using "),Yme=a("code"),Mqo=o("model.eval()"),Eqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=a("code"),Cqo=o("model.train()"),wqo=l(),F(h2.$$.fragment),Lqe=l(),Hi=a("h2"),p2=a("a"),Zme=a("span"),F(A6.$$.fragment),Aqo=l(),ege=a("span"),yqo=o("AutoModelForTokenClassification"),xqe=l(),Io=a("div"),F(y6.$$.fragment),Lqo=l(),Ui=a("p"),xqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_O=a("a"),$qo=o("from_pretrained()"),kqo=o(" class method or the "),uO=a("a"),Sqo=o("from_config()"),Rqo=o(` class
method.`),Pqo=l(),L6=a("p"),Bqo=o("This class cannot be instantiated directly using "),oge=a("code"),Iqo=o("__init__()"),qqo=o(" (throws an error)."),Nqo=l(),ft=a("div"),F(x6.$$.fragment),jqo=l(),rge=a("p"),Dqo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Gqo=l(),Ji=a("p"),Oqo=o(`Note:
Loading a model from its configuration file does `),tge=a("strong"),Vqo=o("not"),Xqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),zqo=o("from_pretrained()"),Wqo=o(" to load the model weights."),Qqo=l(),F(_2.$$.fragment),Hqo=l(),ao=a("div"),F($6.$$.fragment),Uqo=l(),age=a("p"),Jqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yqo=l(),Ia=a("p"),Kqo=o("The model class to instantiate is selected based on the "),nge=a("code"),Zqo=o("model_type"),eNo=o(` property of the config object (either
passed as an argument or loaded from `),sge=a("code"),oNo=o("pretrained_model_name_or_path"),rNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=a("code"),tNo=o("pretrained_model_name_or_path"),aNo=o(":"),nNo=l(),U=a("ul"),u2=a("li"),ige=a("strong"),sNo=o("albert"),lNo=o(" \u2014 "),vO=a("a"),iNo=o("AlbertForTokenClassification"),dNo=o(" (ALBERT model)"),cNo=l(),b2=a("li"),dge=a("strong"),fNo=o("bert"),mNo=o(" \u2014 "),FO=a("a"),gNo=o("BertForTokenClassification"),hNo=o(" (BERT model)"),pNo=l(),v2=a("li"),cge=a("strong"),_No=o("big_bird"),uNo=o(" \u2014 "),TO=a("a"),bNo=o("BigBirdForTokenClassification"),vNo=o(" (BigBird model)"),FNo=l(),F2=a("li"),fge=a("strong"),TNo=o("camembert"),MNo=o(" \u2014 "),MO=a("a"),ENo=o("CamembertForTokenClassification"),CNo=o(" (CamemBERT model)"),wNo=l(),T2=a("li"),mge=a("strong"),ANo=o("canine"),yNo=o(" \u2014 "),EO=a("a"),LNo=o("CanineForTokenClassification"),xNo=o(" (Canine model)"),$No=l(),M2=a("li"),gge=a("strong"),kNo=o("convbert"),SNo=o(" \u2014 "),CO=a("a"),RNo=o("ConvBertForTokenClassification"),PNo=o(" (ConvBERT model)"),BNo=l(),E2=a("li"),hge=a("strong"),INo=o("data2vec-text"),qNo=o(" \u2014 "),wO=a("a"),NNo=o("Data2VecTextForTokenClassification"),jNo=o(" (Data2VecText model)"),DNo=l(),C2=a("li"),pge=a("strong"),GNo=o("deberta"),ONo=o(" \u2014 "),AO=a("a"),VNo=o("DebertaForTokenClassification"),XNo=o(" (DeBERTa model)"),zNo=l(),w2=a("li"),_ge=a("strong"),WNo=o("deberta-v2"),QNo=o(" \u2014 "),yO=a("a"),HNo=o("DebertaV2ForTokenClassification"),UNo=o(" (DeBERTa-v2 model)"),JNo=l(),A2=a("li"),uge=a("strong"),YNo=o("distilbert"),KNo=o(" \u2014 "),LO=a("a"),ZNo=o("DistilBertForTokenClassification"),ejo=o(" (DistilBERT model)"),ojo=l(),y2=a("li"),bge=a("strong"),rjo=o("electra"),tjo=o(" \u2014 "),xO=a("a"),ajo=o("ElectraForTokenClassification"),njo=o(" (ELECTRA model)"),sjo=l(),L2=a("li"),vge=a("strong"),ljo=o("flaubert"),ijo=o(" \u2014 "),$O=a("a"),djo=o("FlaubertForTokenClassification"),cjo=o(" (FlauBERT model)"),fjo=l(),x2=a("li"),Fge=a("strong"),mjo=o("fnet"),gjo=o(" \u2014 "),kO=a("a"),hjo=o("FNetForTokenClassification"),pjo=o(" (FNet model)"),_jo=l(),$2=a("li"),Tge=a("strong"),ujo=o("funnel"),bjo=o(" \u2014 "),SO=a("a"),vjo=o("FunnelForTokenClassification"),Fjo=o(" (Funnel Transformer model)"),Tjo=l(),k2=a("li"),Mge=a("strong"),Mjo=o("gpt2"),Ejo=o(" \u2014 "),RO=a("a"),Cjo=o("GPT2ForTokenClassification"),wjo=o(" (OpenAI GPT-2 model)"),Ajo=l(),S2=a("li"),Ege=a("strong"),yjo=o("ibert"),Ljo=o(" \u2014 "),PO=a("a"),xjo=o("IBertForTokenClassification"),$jo=o(" (I-BERT model)"),kjo=l(),R2=a("li"),Cge=a("strong"),Sjo=o("layoutlm"),Rjo=o(" \u2014 "),BO=a("a"),Pjo=o("LayoutLMForTokenClassification"),Bjo=o(" (LayoutLM model)"),Ijo=l(),P2=a("li"),wge=a("strong"),qjo=o("layoutlmv2"),Njo=o(" \u2014 "),IO=a("a"),jjo=o("LayoutLMv2ForTokenClassification"),Djo=o(" (LayoutLMv2 model)"),Gjo=l(),B2=a("li"),Age=a("strong"),Ojo=o("longformer"),Vjo=o(" \u2014 "),qO=a("a"),Xjo=o("LongformerForTokenClassification"),zjo=o(" (Longformer model)"),Wjo=l(),I2=a("li"),yge=a("strong"),Qjo=o("megatron-bert"),Hjo=o(" \u2014 "),NO=a("a"),Ujo=o("MegatronBertForTokenClassification"),Jjo=o(" (MegatronBert model)"),Yjo=l(),q2=a("li"),Lge=a("strong"),Kjo=o("mobilebert"),Zjo=o(" \u2014 "),jO=a("a"),eDo=o("MobileBertForTokenClassification"),oDo=o(" (MobileBERT model)"),rDo=l(),N2=a("li"),xge=a("strong"),tDo=o("mpnet"),aDo=o(" \u2014 "),DO=a("a"),nDo=o("MPNetForTokenClassification"),sDo=o(" (MPNet model)"),lDo=l(),j2=a("li"),$ge=a("strong"),iDo=o("nystromformer"),dDo=o(" \u2014 "),GO=a("a"),cDo=o("NystromformerForTokenClassification"),fDo=o(" (Nystromformer model)"),mDo=l(),D2=a("li"),kge=a("strong"),gDo=o("qdqbert"),hDo=o(" \u2014 "),OO=a("a"),pDo=o("QDQBertForTokenClassification"),_Do=o(" (QDQBert model)"),uDo=l(),G2=a("li"),Sge=a("strong"),bDo=o("rembert"),vDo=o(" \u2014 "),VO=a("a"),FDo=o("RemBertForTokenClassification"),TDo=o(" (RemBERT model)"),MDo=l(),O2=a("li"),Rge=a("strong"),EDo=o("roberta"),CDo=o(" \u2014 "),XO=a("a"),wDo=o("RobertaForTokenClassification"),ADo=o(" (RoBERTa model)"),yDo=l(),V2=a("li"),Pge=a("strong"),LDo=o("roformer"),xDo=o(" \u2014 "),zO=a("a"),$Do=o("RoFormerForTokenClassification"),kDo=o(" (RoFormer model)"),SDo=l(),X2=a("li"),Bge=a("strong"),RDo=o("squeezebert"),PDo=o(" \u2014 "),WO=a("a"),BDo=o("SqueezeBertForTokenClassification"),IDo=o(" (SqueezeBERT model)"),qDo=l(),z2=a("li"),Ige=a("strong"),NDo=o("xlm"),jDo=o(" \u2014 "),QO=a("a"),DDo=o("XLMForTokenClassification"),GDo=o(" (XLM model)"),ODo=l(),W2=a("li"),qge=a("strong"),VDo=o("xlm-roberta"),XDo=o(" \u2014 "),HO=a("a"),zDo=o("XLMRobertaForTokenClassification"),WDo=o(" (XLM-RoBERTa model)"),QDo=l(),Q2=a("li"),Nge=a("strong"),HDo=o("xlm-roberta-xl"),UDo=o(" \u2014 "),UO=a("a"),JDo=o("XLMRobertaXLForTokenClassification"),YDo=o(" (XLM-RoBERTa-XL model)"),KDo=l(),H2=a("li"),jge=a("strong"),ZDo=o("xlnet"),eGo=o(" \u2014 "),JO=a("a"),oGo=o("XLNetForTokenClassification"),rGo=o(" (XLNet model)"),tGo=l(),U2=a("li"),Dge=a("strong"),aGo=o("yoso"),nGo=o(" \u2014 "),YO=a("a"),sGo=o("YosoForTokenClassification"),lGo=o(" (YOSO model)"),iGo=l(),J2=a("p"),dGo=o("The model is set in evaluation mode by default using "),Gge=a("code"),cGo=o("model.eval()"),fGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),mGo=o("model.train()"),gGo=l(),F(Y2.$$.fragment),$qe=l(),Yi=a("h2"),K2=a("a"),Vge=a("span"),F(k6.$$.fragment),hGo=l(),Xge=a("span"),pGo=o("AutoModelForQuestionAnswering"),kqe=l(),qo=a("div"),F(S6.$$.fragment),_Go=l(),Ki=a("p"),uGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KO=a("a"),bGo=o("from_pretrained()"),vGo=o(" class method or the "),ZO=a("a"),FGo=o("from_config()"),TGo=o(` class
method.`),MGo=l(),R6=a("p"),EGo=o("This class cannot be instantiated directly using "),zge=a("code"),CGo=o("__init__()"),wGo=o(" (throws an error)."),AGo=l(),mt=a("div"),F(P6.$$.fragment),yGo=l(),Wge=a("p"),LGo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xGo=l(),Zi=a("p"),$Go=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),kGo=o("not"),SGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),RGo=o("from_pretrained()"),PGo=o(" to load the model weights."),BGo=l(),F(Z2.$$.fragment),IGo=l(),no=a("div"),F(B6.$$.fragment),qGo=l(),Hge=a("p"),NGo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jGo=l(),qa=a("p"),DGo=o("The model class to instantiate is selected based on the "),Uge=a("code"),GGo=o("model_type"),OGo=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),VGo=o("pretrained_model_name_or_path"),XGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),zGo=o("pretrained_model_name_or_path"),WGo=o(":"),QGo=l(),V=a("ul"),ev=a("li"),Kge=a("strong"),HGo=o("albert"),UGo=o(" \u2014 "),oV=a("a"),JGo=o("AlbertForQuestionAnswering"),YGo=o(" (ALBERT model)"),KGo=l(),ov=a("li"),Zge=a("strong"),ZGo=o("bart"),eOo=o(" \u2014 "),rV=a("a"),oOo=o("BartForQuestionAnswering"),rOo=o(" (BART model)"),tOo=l(),rv=a("li"),ehe=a("strong"),aOo=o("bert"),nOo=o(" \u2014 "),tV=a("a"),sOo=o("BertForQuestionAnswering"),lOo=o(" (BERT model)"),iOo=l(),tv=a("li"),ohe=a("strong"),dOo=o("big_bird"),cOo=o(" \u2014 "),aV=a("a"),fOo=o("BigBirdForQuestionAnswering"),mOo=o(" (BigBird model)"),gOo=l(),av=a("li"),rhe=a("strong"),hOo=o("bigbird_pegasus"),pOo=o(" \u2014 "),nV=a("a"),_Oo=o("BigBirdPegasusForQuestionAnswering"),uOo=o(" (BigBirdPegasus model)"),bOo=l(),nv=a("li"),the=a("strong"),vOo=o("camembert"),FOo=o(" \u2014 "),sV=a("a"),TOo=o("CamembertForQuestionAnswering"),MOo=o(" (CamemBERT model)"),EOo=l(),sv=a("li"),ahe=a("strong"),COo=o("canine"),wOo=o(" \u2014 "),lV=a("a"),AOo=o("CanineForQuestionAnswering"),yOo=o(" (Canine model)"),LOo=l(),lv=a("li"),nhe=a("strong"),xOo=o("convbert"),$Oo=o(" \u2014 "),iV=a("a"),kOo=o("ConvBertForQuestionAnswering"),SOo=o(" (ConvBERT model)"),ROo=l(),iv=a("li"),she=a("strong"),POo=o("data2vec-text"),BOo=o(" \u2014 "),dV=a("a"),IOo=o("Data2VecTextForQuestionAnswering"),qOo=o(" (Data2VecText model)"),NOo=l(),dv=a("li"),lhe=a("strong"),jOo=o("deberta"),DOo=o(" \u2014 "),cV=a("a"),GOo=o("DebertaForQuestionAnswering"),OOo=o(" (DeBERTa model)"),VOo=l(),cv=a("li"),ihe=a("strong"),XOo=o("deberta-v2"),zOo=o(" \u2014 "),fV=a("a"),WOo=o("DebertaV2ForQuestionAnswering"),QOo=o(" (DeBERTa-v2 model)"),HOo=l(),fv=a("li"),dhe=a("strong"),UOo=o("distilbert"),JOo=o(" \u2014 "),mV=a("a"),YOo=o("DistilBertForQuestionAnswering"),KOo=o(" (DistilBERT model)"),ZOo=l(),mv=a("li"),che=a("strong"),eVo=o("electra"),oVo=o(" \u2014 "),gV=a("a"),rVo=o("ElectraForQuestionAnswering"),tVo=o(" (ELECTRA model)"),aVo=l(),gv=a("li"),fhe=a("strong"),nVo=o("flaubert"),sVo=o(" \u2014 "),hV=a("a"),lVo=o("FlaubertForQuestionAnsweringSimple"),iVo=o(" (FlauBERT model)"),dVo=l(),hv=a("li"),mhe=a("strong"),cVo=o("fnet"),fVo=o(" \u2014 "),pV=a("a"),mVo=o("FNetForQuestionAnswering"),gVo=o(" (FNet model)"),hVo=l(),pv=a("li"),ghe=a("strong"),pVo=o("funnel"),_Vo=o(" \u2014 "),_V=a("a"),uVo=o("FunnelForQuestionAnswering"),bVo=o(" (Funnel Transformer model)"),vVo=l(),_v=a("li"),hhe=a("strong"),FVo=o("gptj"),TVo=o(" \u2014 "),uV=a("a"),MVo=o("GPTJForQuestionAnswering"),EVo=o(" (GPT-J model)"),CVo=l(),uv=a("li"),phe=a("strong"),wVo=o("ibert"),AVo=o(" \u2014 "),bV=a("a"),yVo=o("IBertForQuestionAnswering"),LVo=o(" (I-BERT model)"),xVo=l(),bv=a("li"),_he=a("strong"),$Vo=o("layoutlmv2"),kVo=o(" \u2014 "),vV=a("a"),SVo=o("LayoutLMv2ForQuestionAnswering"),RVo=o(" (LayoutLMv2 model)"),PVo=l(),vv=a("li"),uhe=a("strong"),BVo=o("led"),IVo=o(" \u2014 "),FV=a("a"),qVo=o("LEDForQuestionAnswering"),NVo=o(" (LED model)"),jVo=l(),Fv=a("li"),bhe=a("strong"),DVo=o("longformer"),GVo=o(" \u2014 "),TV=a("a"),OVo=o("LongformerForQuestionAnswering"),VVo=o(" (Longformer model)"),XVo=l(),Tv=a("li"),vhe=a("strong"),zVo=o("lxmert"),WVo=o(" \u2014 "),MV=a("a"),QVo=o("LxmertForQuestionAnswering"),HVo=o(" (LXMERT model)"),UVo=l(),Mv=a("li"),Fhe=a("strong"),JVo=o("mbart"),YVo=o(" \u2014 "),EV=a("a"),KVo=o("MBartForQuestionAnswering"),ZVo=o(" (mBART model)"),eXo=l(),Ev=a("li"),The=a("strong"),oXo=o("megatron-bert"),rXo=o(" \u2014 "),CV=a("a"),tXo=o("MegatronBertForQuestionAnswering"),aXo=o(" (MegatronBert model)"),nXo=l(),Cv=a("li"),Mhe=a("strong"),sXo=o("mobilebert"),lXo=o(" \u2014 "),wV=a("a"),iXo=o("MobileBertForQuestionAnswering"),dXo=o(" (MobileBERT model)"),cXo=l(),wv=a("li"),Ehe=a("strong"),fXo=o("mpnet"),mXo=o(" \u2014 "),AV=a("a"),gXo=o("MPNetForQuestionAnswering"),hXo=o(" (MPNet model)"),pXo=l(),Av=a("li"),Che=a("strong"),_Xo=o("nystromformer"),uXo=o(" \u2014 "),yV=a("a"),bXo=o("NystromformerForQuestionAnswering"),vXo=o(" (Nystromformer model)"),FXo=l(),yv=a("li"),whe=a("strong"),TXo=o("qdqbert"),MXo=o(" \u2014 "),LV=a("a"),EXo=o("QDQBertForQuestionAnswering"),CXo=o(" (QDQBert model)"),wXo=l(),Lv=a("li"),Ahe=a("strong"),AXo=o("reformer"),yXo=o(" \u2014 "),xV=a("a"),LXo=o("ReformerForQuestionAnswering"),xXo=o(" (Reformer model)"),$Xo=l(),xv=a("li"),yhe=a("strong"),kXo=o("rembert"),SXo=o(" \u2014 "),$V=a("a"),RXo=o("RemBertForQuestionAnswering"),PXo=o(" (RemBERT model)"),BXo=l(),$v=a("li"),Lhe=a("strong"),IXo=o("roberta"),qXo=o(" \u2014 "),kV=a("a"),NXo=o("RobertaForQuestionAnswering"),jXo=o(" (RoBERTa model)"),DXo=l(),kv=a("li"),xhe=a("strong"),GXo=o("roformer"),OXo=o(" \u2014 "),SV=a("a"),VXo=o("RoFormerForQuestionAnswering"),XXo=o(" (RoFormer model)"),zXo=l(),Sv=a("li"),$he=a("strong"),WXo=o("splinter"),QXo=o(" \u2014 "),RV=a("a"),HXo=o("SplinterForQuestionAnswering"),UXo=o(" (Splinter model)"),JXo=l(),Rv=a("li"),khe=a("strong"),YXo=o("squeezebert"),KXo=o(" \u2014 "),PV=a("a"),ZXo=o("SqueezeBertForQuestionAnswering"),ezo=o(" (SqueezeBERT model)"),ozo=l(),Pv=a("li"),She=a("strong"),rzo=o("xlm"),tzo=o(" \u2014 "),BV=a("a"),azo=o("XLMForQuestionAnsweringSimple"),nzo=o(" (XLM model)"),szo=l(),Bv=a("li"),Rhe=a("strong"),lzo=o("xlm-roberta"),izo=o(" \u2014 "),IV=a("a"),dzo=o("XLMRobertaForQuestionAnswering"),czo=o(" (XLM-RoBERTa model)"),fzo=l(),Iv=a("li"),Phe=a("strong"),mzo=o("xlm-roberta-xl"),gzo=o(" \u2014 "),qV=a("a"),hzo=o("XLMRobertaXLForQuestionAnswering"),pzo=o(" (XLM-RoBERTa-XL model)"),_zo=l(),qv=a("li"),Bhe=a("strong"),uzo=o("xlnet"),bzo=o(" \u2014 "),NV=a("a"),vzo=o("XLNetForQuestionAnsweringSimple"),Fzo=o(" (XLNet model)"),Tzo=l(),Nv=a("li"),Ihe=a("strong"),Mzo=o("yoso"),Ezo=o(" \u2014 "),jV=a("a"),Czo=o("YosoForQuestionAnswering"),wzo=o(" (YOSO model)"),Azo=l(),jv=a("p"),yzo=o("The model is set in evaluation mode by default using "),qhe=a("code"),Lzo=o("model.eval()"),xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),$zo=o("model.train()"),kzo=l(),F(Dv.$$.fragment),Sqe=l(),ed=a("h2"),Gv=a("a"),jhe=a("span"),F(I6.$$.fragment),Szo=l(),Dhe=a("span"),Rzo=o("AutoModelForTableQuestionAnswering"),Rqe=l(),No=a("div"),F(q6.$$.fragment),Pzo=l(),od=a("p"),Bzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DV=a("a"),Izo=o("from_pretrained()"),qzo=o(" class method or the "),GV=a("a"),Nzo=o("from_config()"),jzo=o(` class
method.`),Dzo=l(),N6=a("p"),Gzo=o("This class cannot be instantiated directly using "),Ghe=a("code"),Ozo=o("__init__()"),Vzo=o(" (throws an error)."),Xzo=l(),gt=a("div"),F(j6.$$.fragment),zzo=l(),Ohe=a("p"),Wzo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qzo=l(),rd=a("p"),Hzo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),Uzo=o("not"),Jzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),Yzo=o("from_pretrained()"),Kzo=o(" to load the model weights."),Zzo=l(),F(Ov.$$.fragment),eWo=l(),so=a("div"),F(D6.$$.fragment),oWo=l(),Xhe=a("p"),rWo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tWo=l(),Na=a("p"),aWo=o("The model class to instantiate is selected based on the "),zhe=a("code"),nWo=o("model_type"),sWo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),lWo=o("pretrained_model_name_or_path"),iWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),dWo=o("pretrained_model_name_or_path"),cWo=o(":"),fWo=l(),Hhe=a("ul"),Vv=a("li"),Uhe=a("strong"),mWo=o("tapas"),gWo=o(" \u2014 "),VV=a("a"),hWo=o("TapasForQuestionAnswering"),pWo=o(" (TAPAS model)"),_Wo=l(),Xv=a("p"),uWo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),bWo=o("model.eval()"),vWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),FWo=o("model.train()"),TWo=l(),F(zv.$$.fragment),Pqe=l(),td=a("h2"),Wv=a("a"),Khe=a("span"),F(G6.$$.fragment),MWo=l(),Zhe=a("span"),EWo=o("AutoModelForImageClassification"),Bqe=l(),jo=a("div"),F(O6.$$.fragment),CWo=l(),ad=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XV=a("a"),AWo=o("from_pretrained()"),yWo=o(" class method or the "),zV=a("a"),LWo=o("from_config()"),xWo=o(` class
method.`),$Wo=l(),V6=a("p"),kWo=o("This class cannot be instantiated directly using "),epe=a("code"),SWo=o("__init__()"),RWo=o(" (throws an error)."),PWo=l(),ht=a("div"),F(X6.$$.fragment),BWo=l(),ope=a("p"),IWo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qWo=l(),nd=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),jWo=o("not"),DWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),GWo=o("from_pretrained()"),OWo=o(" to load the model weights."),VWo=l(),F(Qv.$$.fragment),XWo=l(),lo=a("div"),F(z6.$$.fragment),zWo=l(),tpe=a("p"),WWo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QWo=l(),ja=a("p"),HWo=o("The model class to instantiate is selected based on the "),ape=a("code"),UWo=o("model_type"),JWo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),YWo=o("pretrained_model_name_or_path"),KWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),ZWo=o("pretrained_model_name_or_path"),eQo=o(":"),oQo=l(),Fe=a("ul"),Hv=a("li"),lpe=a("strong"),rQo=o("beit"),tQo=o(" \u2014 "),QV=a("a"),aQo=o("BeitForImageClassification"),nQo=o(" (BEiT model)"),sQo=l(),Uv=a("li"),ipe=a("strong"),lQo=o("convnext"),iQo=o(" \u2014 "),HV=a("a"),dQo=o("ConvNextForImageClassification"),cQo=o(" (ConvNext model)"),fQo=l(),Jv=a("li"),dpe=a("strong"),mQo=o("cvt"),gQo=o(" \u2014 "),UV=a("a"),hQo=o("CvtForImageClassification"),pQo=o(" (CvT model)"),_Qo=l(),Yv=a("li"),cpe=a("strong"),uQo=o("data2vec-vision"),bQo=o(" \u2014 "),JV=a("a"),vQo=o("Data2VecVisionForImageClassification"),FQo=o(" (Data2VecVision model)"),TQo=l(),Ps=a("li"),fpe=a("strong"),MQo=o("deit"),EQo=o(" \u2014 "),YV=a("a"),CQo=o("DeiTForImageClassification"),wQo=o(" or "),KV=a("a"),AQo=o("DeiTForImageClassificationWithTeacher"),yQo=o(" (DeiT model)"),LQo=l(),Kv=a("li"),mpe=a("strong"),xQo=o("imagegpt"),$Qo=o(" \u2014 "),ZV=a("a"),kQo=o("ImageGPTForImageClassification"),SQo=o(" (ImageGPT model)"),RQo=l(),pt=a("li"),gpe=a("strong"),PQo=o("perceiver"),BQo=o(" \u2014 "),eX=a("a"),IQo=o("PerceiverForImageClassificationLearned"),qQo=o(" or "),oX=a("a"),NQo=o("PerceiverForImageClassificationFourier"),jQo=o(" or "),rX=a("a"),DQo=o("PerceiverForImageClassificationConvProcessing"),GQo=o(" (Perceiver model)"),OQo=l(),Zv=a("li"),hpe=a("strong"),VQo=o("poolformer"),XQo=o(" \u2014 "),tX=a("a"),zQo=o("PoolFormerForImageClassification"),WQo=o(" (PoolFormer model)"),QQo=l(),e3=a("li"),ppe=a("strong"),HQo=o("regnet"),UQo=o(" \u2014 "),aX=a("a"),JQo=o("RegNetForImageClassification"),YQo=o(" (RegNet model)"),KQo=l(),o3=a("li"),_pe=a("strong"),ZQo=o("resnet"),eHo=o(" \u2014 "),nX=a("a"),oHo=o("ResNetForImageClassification"),rHo=o(" (ResNet model)"),tHo=l(),r3=a("li"),upe=a("strong"),aHo=o("segformer"),nHo=o(" \u2014 "),sX=a("a"),sHo=o("SegformerForImageClassification"),lHo=o(" (SegFormer model)"),iHo=l(),t3=a("li"),bpe=a("strong"),dHo=o("swin"),cHo=o(" \u2014 "),lX=a("a"),fHo=o("SwinForImageClassification"),mHo=o(" (Swin model)"),gHo=l(),a3=a("li"),vpe=a("strong"),hHo=o("van"),pHo=o(" \u2014 "),iX=a("a"),_Ho=o("VanForImageClassification"),uHo=o(" (VAN model)"),bHo=l(),n3=a("li"),Fpe=a("strong"),vHo=o("vit"),FHo=o(" \u2014 "),dX=a("a"),THo=o("ViTForImageClassification"),MHo=o(" (ViT model)"),EHo=l(),s3=a("p"),CHo=o("The model is set in evaluation mode by default using "),Tpe=a("code"),wHo=o("model.eval()"),AHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=a("code"),yHo=o("model.train()"),LHo=l(),F(l3.$$.fragment),Iqe=l(),sd=a("h2"),i3=a("a"),Epe=a("span"),F(W6.$$.fragment),xHo=l(),Cpe=a("span"),$Ho=o("AutoModelForVision2Seq"),qqe=l(),Do=a("div"),F(Q6.$$.fragment),kHo=l(),ld=a("p"),SHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cX=a("a"),RHo=o("from_pretrained()"),PHo=o(" class method or the "),fX=a("a"),BHo=o("from_config()"),IHo=o(` class
method.`),qHo=l(),H6=a("p"),NHo=o("This class cannot be instantiated directly using "),wpe=a("code"),jHo=o("__init__()"),DHo=o(" (throws an error)."),GHo=l(),_t=a("div"),F(U6.$$.fragment),OHo=l(),Ape=a("p"),VHo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XHo=l(),id=a("p"),zHo=o(`Note:
Loading a model from its configuration file does `),ype=a("strong"),WHo=o("not"),QHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),HHo=o("from_pretrained()"),UHo=o(" to load the model weights."),JHo=l(),F(d3.$$.fragment),YHo=l(),io=a("div"),F(J6.$$.fragment),KHo=l(),Lpe=a("p"),ZHo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eUo=l(),Da=a("p"),oUo=o("The model class to instantiate is selected based on the "),xpe=a("code"),rUo=o("model_type"),tUo=o(` property of the config object (either
passed as an argument or loaded from `),$pe=a("code"),aUo=o("pretrained_model_name_or_path"),nUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=a("code"),sUo=o("pretrained_model_name_or_path"),lUo=o(":"),iUo=l(),Spe=a("ul"),c3=a("li"),Rpe=a("strong"),dUo=o("vision-encoder-decoder"),cUo=o(" \u2014 "),gX=a("a"),fUo=o("VisionEncoderDecoderModel"),mUo=o(" (Vision Encoder decoder model)"),gUo=l(),f3=a("p"),hUo=o("The model is set in evaluation mode by default using "),Ppe=a("code"),pUo=o("model.eval()"),_Uo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),uUo=o("model.train()"),bUo=l(),F(m3.$$.fragment),Nqe=l(),dd=a("h2"),g3=a("a"),Ipe=a("span"),F(Y6.$$.fragment),vUo=l(),qpe=a("span"),FUo=o("AutoModelForAudioClassification"),jqe=l(),Go=a("div"),F(K6.$$.fragment),TUo=l(),cd=a("p"),MUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hX=a("a"),EUo=o("from_pretrained()"),CUo=o(" class method or the "),pX=a("a"),wUo=o("from_config()"),AUo=o(` class
method.`),yUo=l(),Z6=a("p"),LUo=o("This class cannot be instantiated directly using "),Npe=a("code"),xUo=o("__init__()"),$Uo=o(" (throws an error)."),kUo=l(),ut=a("div"),F(ey.$$.fragment),SUo=l(),jpe=a("p"),RUo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),PUo=l(),fd=a("p"),BUo=o(`Note:
Loading a model from its configuration file does `),Dpe=a("strong"),IUo=o("not"),qUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),NUo=o("from_pretrained()"),jUo=o(" to load the model weights."),DUo=l(),F(h3.$$.fragment),GUo=l(),co=a("div"),F(oy.$$.fragment),OUo=l(),Gpe=a("p"),VUo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),XUo=l(),Ga=a("p"),zUo=o("The model class to instantiate is selected based on the "),Ope=a("code"),WUo=o("model_type"),QUo=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),HUo=o("pretrained_model_name_or_path"),UUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=a("code"),JUo=o("pretrained_model_name_or_path"),YUo=o(":"),KUo=l(),ke=a("ul"),p3=a("li"),zpe=a("strong"),ZUo=o("data2vec-audio"),eJo=o(" \u2014 "),uX=a("a"),oJo=o("Data2VecAudioForSequenceClassification"),rJo=o(" (Data2VecAudio model)"),tJo=l(),_3=a("li"),Wpe=a("strong"),aJo=o("hubert"),nJo=o(" \u2014 "),bX=a("a"),sJo=o("HubertForSequenceClassification"),lJo=o(" (Hubert model)"),iJo=l(),u3=a("li"),Qpe=a("strong"),dJo=o("sew"),cJo=o(" \u2014 "),vX=a("a"),fJo=o("SEWForSequenceClassification"),mJo=o(" (SEW model)"),gJo=l(),b3=a("li"),Hpe=a("strong"),hJo=o("sew-d"),pJo=o(" \u2014 "),FX=a("a"),_Jo=o("SEWDForSequenceClassification"),uJo=o(" (SEW-D model)"),bJo=l(),v3=a("li"),Upe=a("strong"),vJo=o("unispeech"),FJo=o(" \u2014 "),TX=a("a"),TJo=o("UniSpeechForSequenceClassification"),MJo=o(" (UniSpeech model)"),EJo=l(),F3=a("li"),Jpe=a("strong"),CJo=o("unispeech-sat"),wJo=o(" \u2014 "),MX=a("a"),AJo=o("UniSpeechSatForSequenceClassification"),yJo=o(" (UniSpeechSat model)"),LJo=l(),T3=a("li"),Ype=a("strong"),xJo=o("wav2vec2"),$Jo=o(" \u2014 "),EX=a("a"),kJo=o("Wav2Vec2ForSequenceClassification"),SJo=o(" (Wav2Vec2 model)"),RJo=l(),M3=a("li"),Kpe=a("strong"),PJo=o("wav2vec2-conformer"),BJo=o(" \u2014 "),CX=a("a"),IJo=o("Wav2Vec2ConformerForSequenceClassification"),qJo=o(" (Wav2Vec2-Conformer model)"),NJo=l(),E3=a("li"),Zpe=a("strong"),jJo=o("wavlm"),DJo=o(" \u2014 "),wX=a("a"),GJo=o("WavLMForSequenceClassification"),OJo=o(" (WavLM model)"),VJo=l(),C3=a("p"),XJo=o("The model is set in evaluation mode by default using "),e_e=a("code"),zJo=o("model.eval()"),WJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=a("code"),QJo=o("model.train()"),HJo=l(),F(w3.$$.fragment),Dqe=l(),md=a("h2"),A3=a("a"),r_e=a("span"),F(ry.$$.fragment),UJo=l(),t_e=a("span"),JJo=o("AutoModelForAudioFrameClassification"),Gqe=l(),Oo=a("div"),F(ty.$$.fragment),YJo=l(),gd=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),yX=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),ay=a("p"),aYo=o("This class cannot be instantiated directly using "),a_e=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),bt=a("div"),F(ny.$$.fragment),iYo=l(),n_e=a("p"),dYo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cYo=l(),hd=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),hYo=o("from_pretrained()"),pYo=o(" to load the model weights."),_Yo=l(),F(y3.$$.fragment),uYo=l(),fo=a("div"),F(sy.$$.fragment),bYo=l(),l_e=a("p"),vYo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),FYo=l(),Oa=a("p"),TYo=o("The model class to instantiate is selected based on the "),i_e=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(":"),LYo=l(),Kr=a("ul"),L3=a("li"),f_e=a("strong"),xYo=o("data2vec-audio"),$Yo=o(" \u2014 "),xX=a("a"),kYo=o("Data2VecAudioForAudioFrameClassification"),SYo=o(" (Data2VecAudio model)"),RYo=l(),x3=a("li"),m_e=a("strong"),PYo=o("unispeech-sat"),BYo=o(" \u2014 "),$X=a("a"),IYo=o("UniSpeechSatForAudioFrameClassification"),qYo=o(" (UniSpeechSat model)"),NYo=l(),$3=a("li"),g_e=a("strong"),jYo=o("wav2vec2"),DYo=o(" \u2014 "),kX=a("a"),GYo=o("Wav2Vec2ForAudioFrameClassification"),OYo=o(" (Wav2Vec2 model)"),VYo=l(),k3=a("li"),h_e=a("strong"),XYo=o("wav2vec2-conformer"),zYo=o(" \u2014 "),SX=a("a"),WYo=o("Wav2Vec2ConformerForAudioFrameClassification"),QYo=o(" (Wav2Vec2-Conformer model)"),HYo=l(),S3=a("li"),p_e=a("strong"),UYo=o("wavlm"),JYo=o(" \u2014 "),RX=a("a"),YYo=o("WavLMForAudioFrameClassification"),KYo=o(" (WavLM model)"),ZYo=l(),R3=a("p"),eKo=o("The model is set in evaluation mode by default using "),__e=a("code"),oKo=o("model.eval()"),rKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),tKo=o("model.train()"),aKo=l(),F(P3.$$.fragment),Oqe=l(),pd=a("h2"),B3=a("a"),b_e=a("span"),F(ly.$$.fragment),nKo=l(),v_e=a("span"),sKo=o("AutoModelForCTC"),Vqe=l(),Vo=a("div"),F(iy.$$.fragment),lKo=l(),_d=a("p"),iKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PX=a("a"),dKo=o("from_pretrained()"),cKo=o(" class method or the "),BX=a("a"),fKo=o("from_config()"),mKo=o(` class
method.`),gKo=l(),dy=a("p"),hKo=o("This class cannot be instantiated directly using "),F_e=a("code"),pKo=o("__init__()"),_Ko=o(" (throws an error)."),uKo=l(),vt=a("div"),F(cy.$$.fragment),bKo=l(),T_e=a("p"),vKo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),FKo=l(),ud=a("p"),TKo=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),MKo=o("not"),EKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),CKo=o("from_pretrained()"),wKo=o(" to load the model weights."),AKo=l(),F(I3.$$.fragment),yKo=l(),mo=a("div"),F(fy.$$.fragment),LKo=l(),E_e=a("p"),xKo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$Ko=l(),Va=a("p"),kKo=o("The model class to instantiate is selected based on the "),C_e=a("code"),SKo=o("model_type"),RKo=o(` property of the config object (either
passed as an argument or loaded from `),w_e=a("code"),PKo=o("pretrained_model_name_or_path"),BKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=a("code"),IKo=o("pretrained_model_name_or_path"),qKo=o(":"),NKo=l(),Se=a("ul"),q3=a("li"),y_e=a("strong"),jKo=o("data2vec-audio"),DKo=o(" \u2014 "),qX=a("a"),GKo=o("Data2VecAudioForCTC"),OKo=o(" (Data2VecAudio model)"),VKo=l(),N3=a("li"),L_e=a("strong"),XKo=o("hubert"),zKo=o(" \u2014 "),NX=a("a"),WKo=o("HubertForCTC"),QKo=o(" (Hubert model)"),HKo=l(),j3=a("li"),x_e=a("strong"),UKo=o("sew"),JKo=o(" \u2014 "),jX=a("a"),YKo=o("SEWForCTC"),KKo=o(" (SEW model)"),ZKo=l(),D3=a("li"),$_e=a("strong"),eZo=o("sew-d"),oZo=o(" \u2014 "),DX=a("a"),rZo=o("SEWDForCTC"),tZo=o(" (SEW-D model)"),aZo=l(),G3=a("li"),k_e=a("strong"),nZo=o("unispeech"),sZo=o(" \u2014 "),GX=a("a"),lZo=o("UniSpeechForCTC"),iZo=o(" (UniSpeech model)"),dZo=l(),O3=a("li"),S_e=a("strong"),cZo=o("unispeech-sat"),fZo=o(" \u2014 "),OX=a("a"),mZo=o("UniSpeechSatForCTC"),gZo=o(" (UniSpeechSat model)"),hZo=l(),V3=a("li"),R_e=a("strong"),pZo=o("wav2vec2"),_Zo=o(" \u2014 "),VX=a("a"),uZo=o("Wav2Vec2ForCTC"),bZo=o(" (Wav2Vec2 model)"),vZo=l(),X3=a("li"),P_e=a("strong"),FZo=o("wav2vec2-conformer"),TZo=o(" \u2014 "),XX=a("a"),MZo=o("Wav2Vec2ConformerForCTC"),EZo=o(" (Wav2Vec2-Conformer model)"),CZo=l(),z3=a("li"),B_e=a("strong"),wZo=o("wavlm"),AZo=o(" \u2014 "),zX=a("a"),yZo=o("WavLMForCTC"),LZo=o(" (WavLM model)"),xZo=l(),W3=a("p"),$Zo=o("The model is set in evaluation mode by default using "),I_e=a("code"),kZo=o("model.eval()"),SZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),RZo=o("model.train()"),PZo=l(),F(Q3.$$.fragment),Xqe=l(),bd=a("h2"),H3=a("a"),N_e=a("span"),F(my.$$.fragment),BZo=l(),j_e=a("span"),IZo=o("AutoModelForSpeechSeq2Seq"),zqe=l(),Xo=a("div"),F(gy.$$.fragment),qZo=l(),vd=a("p"),NZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WX=a("a"),jZo=o("from_pretrained()"),DZo=o(" class method or the "),QX=a("a"),GZo=o("from_config()"),OZo=o(` class
method.`),VZo=l(),hy=a("p"),XZo=o("This class cannot be instantiated directly using "),D_e=a("code"),zZo=o("__init__()"),WZo=o(" (throws an error)."),QZo=l(),Ft=a("div"),F(py.$$.fragment),HZo=l(),G_e=a("p"),UZo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JZo=l(),Fd=a("p"),YZo=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),KZo=o("not"),ZZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),eer=o("from_pretrained()"),oer=o(" to load the model weights."),rer=l(),F(U3.$$.fragment),ter=l(),go=a("div"),F(_y.$$.fragment),aer=l(),V_e=a("p"),ner=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ser=l(),Xa=a("p"),ler=o("The model class to instantiate is selected based on the "),X_e=a("code"),ier=o("model_type"),der=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),cer=o("pretrained_model_name_or_path"),fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),mer=o("pretrained_model_name_or_path"),ger=o(":"),her=l(),uy=a("ul"),J3=a("li"),Q_e=a("strong"),per=o("speech-encoder-decoder"),_er=o(" \u2014 "),UX=a("a"),uer=o("SpeechEncoderDecoderModel"),ber=o(" (Speech Encoder decoder model)"),ver=l(),Y3=a("li"),H_e=a("strong"),Fer=o("speech_to_text"),Ter=o(" \u2014 "),JX=a("a"),Mer=o("Speech2TextForConditionalGeneration"),Eer=o(" (Speech2Text model)"),Cer=l(),K3=a("p"),wer=o("The model is set in evaluation mode by default using "),U_e=a("code"),Aer=o("model.eval()"),yer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=a("code"),Ler=o("model.train()"),xer=l(),F(Z3.$$.fragment),Wqe=l(),Td=a("h2"),eF=a("a"),Y_e=a("span"),F(by.$$.fragment),$er=l(),K_e=a("span"),ker=o("AutoModelForAudioXVector"),Qqe=l(),zo=a("div"),F(vy.$$.fragment),Ser=l(),Md=a("p"),Rer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YX=a("a"),Per=o("from_pretrained()"),Ber=o(" class method or the "),KX=a("a"),Ier=o("from_config()"),qer=o(` class
method.`),Ner=l(),Fy=a("p"),jer=o("This class cannot be instantiated directly using "),Z_e=a("code"),Der=o("__init__()"),Ger=o(" (throws an error)."),Oer=l(),Tt=a("div"),F(Ty.$$.fragment),Ver=l(),eue=a("p"),Xer=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zer=l(),Ed=a("p"),Wer=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),Qer=o("not"),Her=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Uer=o("from_pretrained()"),Jer=o(" to load the model weights."),Yer=l(),F(oF.$$.fragment),Ker=l(),ho=a("div"),F(My.$$.fragment),Zer=l(),rue=a("p"),eor=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),oor=l(),za=a("p"),ror=o("The model class to instantiate is selected based on the "),tue=a("code"),tor=o("model_type"),aor=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),nor=o("pretrained_model_name_or_path"),sor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),lor=o("pretrained_model_name_or_path"),ior=o(":"),dor=l(),Zr=a("ul"),rF=a("li"),sue=a("strong"),cor=o("data2vec-audio"),mor=o(" \u2014 "),ez=a("a"),gor=o("Data2VecAudioForXVector"),hor=o(" (Data2VecAudio model)"),por=l(),tF=a("li"),lue=a("strong"),_or=o("unispeech-sat"),uor=o(" \u2014 "),oz=a("a"),bor=o("UniSpeechSatForXVector"),vor=o(" (UniSpeechSat model)"),For=l(),aF=a("li"),iue=a("strong"),Tor=o("wav2vec2"),Mor=o(" \u2014 "),rz=a("a"),Eor=o("Wav2Vec2ForXVector"),Cor=o(" (Wav2Vec2 model)"),wor=l(),nF=a("li"),due=a("strong"),Aor=o("wav2vec2-conformer"),yor=o(" \u2014 "),tz=a("a"),Lor=o("Wav2Vec2ConformerForXVector"),xor=o(" (Wav2Vec2-Conformer model)"),$or=l(),sF=a("li"),cue=a("strong"),kor=o("wavlm"),Sor=o(" \u2014 "),az=a("a"),Ror=o("WavLMForXVector"),Por=o(" (WavLM model)"),Bor=l(),lF=a("p"),Ior=o("The model is set in evaluation mode by default using "),fue=a("code"),qor=o("model.eval()"),Nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=a("code"),jor=o("model.train()"),Dor=l(),F(iF.$$.fragment),Hqe=l(),Cd=a("h2"),dF=a("a"),gue=a("span"),F(Ey.$$.fragment),Gor=l(),hue=a("span"),Oor=o("AutoModelForMaskedImageModeling"),Uqe=l(),Wo=a("div"),F(Cy.$$.fragment),Vor=l(),wd=a("p"),Xor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nz=a("a"),zor=o("from_pretrained()"),Wor=o(" class method or the "),sz=a("a"),Qor=o("from_config()"),Hor=o(` class
method.`),Uor=l(),wy=a("p"),Jor=o("This class cannot be instantiated directly using "),pue=a("code"),Yor=o("__init__()"),Kor=o(" (throws an error)."),Zor=l(),Mt=a("div"),F(Ay.$$.fragment),err=l(),_ue=a("p"),orr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rrr=l(),Ad=a("p"),trr=o(`Note:
Loading a model from its configuration file does `),uue=a("strong"),arr=o("not"),nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),srr=o("from_pretrained()"),lrr=o(" to load the model weights."),irr=l(),F(cF.$$.fragment),drr=l(),po=a("div"),F(yy.$$.fragment),crr=l(),bue=a("p"),frr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mrr=l(),Wa=a("p"),grr=o("The model class to instantiate is selected based on the "),vue=a("code"),hrr=o("model_type"),prr=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),_rr=o("pretrained_model_name_or_path"),urr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(":"),Frr=l(),yd=a("ul"),fF=a("li"),Mue=a("strong"),Trr=o("deit"),Mrr=o(" \u2014 "),iz=a("a"),Err=o("DeiTForMaskedImageModeling"),Crr=o(" (DeiT model)"),wrr=l(),mF=a("li"),Eue=a("strong"),Arr=o("swin"),yrr=o(" \u2014 "),dz=a("a"),Lrr=o("SwinForMaskedImageModeling"),xrr=o(" (Swin model)"),$rr=l(),gF=a("li"),Cue=a("strong"),krr=o("vit"),Srr=o(" \u2014 "),cz=a("a"),Rrr=o("ViTForMaskedImageModeling"),Prr=o(" (ViT model)"),Brr=l(),hF=a("p"),Irr=o("The model is set in evaluation mode by default using "),wue=a("code"),qrr=o("model.eval()"),Nrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=a("code"),jrr=o("model.train()"),Drr=l(),F(pF.$$.fragment),Jqe=l(),Ld=a("h2"),_F=a("a"),yue=a("span"),F(Ly.$$.fragment),Grr=l(),Lue=a("span"),Orr=o("AutoModelForObjectDetection"),Yqe=l(),Qo=a("div"),F(xy.$$.fragment),Vrr=l(),xd=a("p"),Xrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fz=a("a"),zrr=o("from_pretrained()"),Wrr=o(" class method or the "),mz=a("a"),Qrr=o("from_config()"),Hrr=o(` class
method.`),Urr=l(),$y=a("p"),Jrr=o("This class cannot be instantiated directly using "),xue=a("code"),Yrr=o("__init__()"),Krr=o(" (throws an error)."),Zrr=l(),Et=a("div"),F(ky.$$.fragment),etr=l(),$ue=a("p"),otr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rtr=l(),$d=a("p"),ttr=o(`Note:
Loading a model from its configuration file does `),kue=a("strong"),atr=o("not"),ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=a("a"),str=o("from_pretrained()"),ltr=o(" to load the model weights."),itr=l(),F(uF.$$.fragment),dtr=l(),_o=a("div"),F(Sy.$$.fragment),ctr=l(),Sue=a("p"),ftr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mtr=l(),Qa=a("p"),gtr=o("The model class to instantiate is selected based on the "),Rue=a("code"),htr=o("model_type"),ptr=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),_tr=o("pretrained_model_name_or_path"),utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(":"),Ftr=l(),Ry=a("ul"),bF=a("li"),Iue=a("strong"),Ttr=o("detr"),Mtr=o(" \u2014 "),hz=a("a"),Etr=o("DetrForObjectDetection"),Ctr=o(" (DETR model)"),wtr=l(),vF=a("li"),que=a("strong"),Atr=o("yolos"),ytr=o(" \u2014 "),pz=a("a"),Ltr=o("YolosForObjectDetection"),xtr=o(" (YOLOS model)"),$tr=l(),FF=a("p"),ktr=o("The model is set in evaluation mode by default using "),Nue=a("code"),Str=o("model.eval()"),Rtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=a("code"),Ptr=o("model.train()"),Btr=l(),F(TF.$$.fragment),Kqe=l(),kd=a("h2"),MF=a("a"),Due=a("span"),F(Py.$$.fragment),Itr=l(),Gue=a("span"),qtr=o("AutoModelForImageSegmentation"),Zqe=l(),Ho=a("div"),F(By.$$.fragment),Ntr=l(),Sd=a("p"),jtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_z=a("a"),Dtr=o("from_pretrained()"),Gtr=o(" class method or the "),uz=a("a"),Otr=o("from_config()"),Vtr=o(` class
method.`),Xtr=l(),Iy=a("p"),ztr=o("This class cannot be instantiated directly using "),Oue=a("code"),Wtr=o("__init__()"),Qtr=o(" (throws an error)."),Htr=l(),Ct=a("div"),F(qy.$$.fragment),Utr=l(),Vue=a("p"),Jtr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ytr=l(),Rd=a("p"),Ktr=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),Ztr=o("not"),ear=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),oar=o("from_pretrained()"),rar=o(" to load the model weights."),tar=l(),F(EF.$$.fragment),aar=l(),uo=a("div"),F(Ny.$$.fragment),nar=l(),zue=a("p"),sar=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),lar=l(),Ha=a("p"),iar=o("The model class to instantiate is selected based on the "),Wue=a("code"),dar=o("model_type"),car=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),far=o("pretrained_model_name_or_path"),mar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),gar=o("pretrained_model_name_or_path"),har=o(":"),par=l(),Uue=a("ul"),CF=a("li"),Jue=a("strong"),_ar=o("detr"),uar=o(" \u2014 "),vz=a("a"),bar=o("DetrForSegmentation"),Far=o(" (DETR model)"),Tar=l(),wF=a("p"),Mar=o("The model is set in evaluation mode by default using "),Yue=a("code"),Ear=o("model.eval()"),Car=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=a("code"),war=o("model.train()"),Aar=l(),F(AF.$$.fragment),eNe=l(),Pd=a("h2"),yF=a("a"),Zue=a("span"),F(jy.$$.fragment),yar=l(),e1e=a("span"),Lar=o("AutoModelForSemanticSegmentation"),oNe=l(),Uo=a("div"),F(Dy.$$.fragment),xar=l(),Bd=a("p"),$ar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fz=a("a"),kar=o("from_pretrained()"),Sar=o(" class method or the "),Tz=a("a"),Rar=o("from_config()"),Par=o(` class
method.`),Bar=l(),Gy=a("p"),Iar=o("This class cannot be instantiated directly using "),o1e=a("code"),qar=o("__init__()"),Nar=o(" (throws an error)."),jar=l(),wt=a("div"),F(Oy.$$.fragment),Dar=l(),r1e=a("p"),Gar=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Oar=l(),Id=a("p"),Var=o(`Note:
Loading a model from its configuration file does `),t1e=a("strong"),Xar=o("not"),zar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),War=o("from_pretrained()"),Qar=o(" to load the model weights."),Har=l(),F(LF.$$.fragment),Uar=l(),bo=a("div"),F(Vy.$$.fragment),Jar=l(),a1e=a("p"),Yar=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Kar=l(),Ua=a("p"),Zar=o("The model class to instantiate is selected based on the "),n1e=a("code"),enr=o("model_type"),onr=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),rnr=o("pretrained_model_name_or_path"),tnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),anr=o("pretrained_model_name_or_path"),nnr=o(":"),snr=l(),Ja=a("ul"),xF=a("li"),i1e=a("strong"),lnr=o("beit"),inr=o(" \u2014 "),Ez=a("a"),dnr=o("BeitForSemanticSegmentation"),cnr=o(" (BEiT model)"),fnr=l(),$F=a("li"),d1e=a("strong"),mnr=o("data2vec-vision"),gnr=o(" \u2014 "),Cz=a("a"),hnr=o("Data2VecVisionForSemanticSegmentation"),pnr=o(" (Data2VecVision model)"),_nr=l(),kF=a("li"),c1e=a("strong"),unr=o("dpt"),bnr=o(" \u2014 "),wz=a("a"),vnr=o("DPTForSemanticSegmentation"),Fnr=o(" (DPT model)"),Tnr=l(),SF=a("li"),f1e=a("strong"),Mnr=o("segformer"),Enr=o(" \u2014 "),Az=a("a"),Cnr=o("SegformerForSemanticSegmentation"),wnr=o(" (SegFormer model)"),Anr=l(),RF=a("p"),ynr=o("The model is set in evaluation mode by default using "),m1e=a("code"),Lnr=o("model.eval()"),xnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=a("code"),$nr=o("model.train()"),knr=l(),F(PF.$$.fragment),rNe=l(),qd=a("h2"),BF=a("a"),h1e=a("span"),F(Xy.$$.fragment),Snr=l(),p1e=a("span"),Rnr=o("AutoModelForInstanceSegmentation"),tNe=l(),Jo=a("div"),F(zy.$$.fragment),Pnr=l(),Nd=a("p"),Bnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yz=a("a"),Inr=o("from_pretrained()"),qnr=o(" class method or the "),Lz=a("a"),Nnr=o("from_config()"),jnr=o(` class
method.`),Dnr=l(),Wy=a("p"),Gnr=o("This class cannot be instantiated directly using "),_1e=a("code"),Onr=o("__init__()"),Vnr=o(" (throws an error)."),Xnr=l(),At=a("div"),F(Qy.$$.fragment),znr=l(),u1e=a("p"),Wnr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Qnr=l(),jd=a("p"),Hnr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),Unr=o("not"),Jnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),Ynr=o("from_pretrained()"),Knr=o(" to load the model weights."),Znr=l(),F(IF.$$.fragment),esr=l(),vo=a("div"),F(Hy.$$.fragment),osr=l(),v1e=a("p"),rsr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tsr=l(),Ya=a("p"),asr=o("The model class to instantiate is selected based on the "),F1e=a("code"),nsr=o("model_type"),ssr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),lsr=o("pretrained_model_name_or_path"),isr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),dsr=o("pretrained_model_name_or_path"),csr=o(":"),fsr=l(),E1e=a("ul"),qF=a("li"),C1e=a("strong"),msr=o("maskformer"),gsr=o(" \u2014 "),$z=a("a"),hsr=o("MaskFormerForInstanceSegmentation"),psr=o(" (MaskFormer model)"),_sr=l(),NF=a("p"),usr=o("The model is set in evaluation mode by default using "),w1e=a("code"),bsr=o("model.eval()"),vsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=a("code"),Fsr=o("model.train()"),Tsr=l(),F(jF.$$.fragment),aNe=l(),Dd=a("h2"),DF=a("a"),y1e=a("span"),F(Uy.$$.fragment),Msr=l(),L1e=a("span"),Esr=o("TFAutoModel"),nNe=l(),Yo=a("div"),F(Jy.$$.fragment),Csr=l(),Gd=a("p"),wsr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kz=a("a"),Asr=o("from_pretrained()"),ysr=o(" class method or the "),Sz=a("a"),Lsr=o("from_config()"),xsr=o(` class
method.`),$sr=l(),Yy=a("p"),ksr=o("This class cannot be instantiated directly using "),x1e=a("code"),Ssr=o("__init__()"),Rsr=o(" (throws an error)."),Psr=l(),yt=a("div"),F(Ky.$$.fragment),Bsr=l(),$1e=a("p"),Isr=o("Instantiates one of the base model classes of the library from a configuration."),qsr=l(),Od=a("p"),Nsr=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),jsr=o("not"),Dsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),Gsr=o("from_pretrained()"),Osr=o(" to load the model weights."),Vsr=l(),F(GF.$$.fragment),Xsr=l(),wr=a("div"),F(Zy.$$.fragment),zsr=l(),S1e=a("p"),Wsr=o("Instantiate one of the base model classes of the library from a pretrained model."),Qsr=l(),Ka=a("p"),Hsr=o("The model class to instantiate is selected based on the "),R1e=a("code"),Usr=o("model_type"),Jsr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),Ysr=o("pretrained_model_name_or_path"),Ksr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=a("code"),Zsr=o("pretrained_model_name_or_path"),elr=o(":"),olr=l(),N=a("ul"),OF=a("li"),I1e=a("strong"),rlr=o("albert"),tlr=o(" \u2014 "),Pz=a("a"),alr=o("TFAlbertModel"),nlr=o(" (ALBERT model)"),slr=l(),VF=a("li"),q1e=a("strong"),llr=o("bart"),ilr=o(" \u2014 "),Bz=a("a"),dlr=o("TFBartModel"),clr=o(" (BART model)"),flr=l(),XF=a("li"),N1e=a("strong"),mlr=o("bert"),glr=o(" \u2014 "),Iz=a("a"),hlr=o("TFBertModel"),plr=o(" (BERT model)"),_lr=l(),zF=a("li"),j1e=a("strong"),ulr=o("blenderbot"),blr=o(" \u2014 "),qz=a("a"),vlr=o("TFBlenderbotModel"),Flr=o(" (Blenderbot model)"),Tlr=l(),WF=a("li"),D1e=a("strong"),Mlr=o("blenderbot-small"),Elr=o(" \u2014 "),Nz=a("a"),Clr=o("TFBlenderbotSmallModel"),wlr=o(" (BlenderbotSmall model)"),Alr=l(),QF=a("li"),G1e=a("strong"),ylr=o("camembert"),Llr=o(" \u2014 "),jz=a("a"),xlr=o("TFCamembertModel"),$lr=o(" (CamemBERT model)"),klr=l(),HF=a("li"),O1e=a("strong"),Slr=o("clip"),Rlr=o(" \u2014 "),Dz=a("a"),Plr=o("TFCLIPModel"),Blr=o(" (CLIP model)"),Ilr=l(),UF=a("li"),V1e=a("strong"),qlr=o("convbert"),Nlr=o(" \u2014 "),Gz=a("a"),jlr=o("TFConvBertModel"),Dlr=o(" (ConvBERT model)"),Glr=l(),JF=a("li"),X1e=a("strong"),Olr=o("convnext"),Vlr=o(" \u2014 "),Oz=a("a"),Xlr=o("TFConvNextModel"),zlr=o(" (ConvNext model)"),Wlr=l(),YF=a("li"),z1e=a("strong"),Qlr=o("ctrl"),Hlr=o(" \u2014 "),Vz=a("a"),Ulr=o("TFCTRLModel"),Jlr=o(" (CTRL model)"),Ylr=l(),KF=a("li"),W1e=a("strong"),Klr=o("data2vec-vision"),Zlr=o(" \u2014 "),Xz=a("a"),eir=o("TFData2VecVisionModel"),oir=o(" (Data2VecVision model)"),rir=l(),ZF=a("li"),Q1e=a("strong"),tir=o("deberta"),air=o(" \u2014 "),zz=a("a"),nir=o("TFDebertaModel"),sir=o(" (DeBERTa model)"),lir=l(),eT=a("li"),H1e=a("strong"),iir=o("deberta-v2"),dir=o(" \u2014 "),Wz=a("a"),cir=o("TFDebertaV2Model"),fir=o(" (DeBERTa-v2 model)"),mir=l(),oT=a("li"),U1e=a("strong"),gir=o("distilbert"),hir=o(" \u2014 "),Qz=a("a"),pir=o("TFDistilBertModel"),_ir=o(" (DistilBERT model)"),uir=l(),rT=a("li"),J1e=a("strong"),bir=o("dpr"),vir=o(" \u2014 "),Hz=a("a"),Fir=o("TFDPRQuestionEncoder"),Tir=o(" (DPR model)"),Mir=l(),tT=a("li"),Y1e=a("strong"),Eir=o("electra"),Cir=o(" \u2014 "),Uz=a("a"),wir=o("TFElectraModel"),Air=o(" (ELECTRA model)"),yir=l(),aT=a("li"),K1e=a("strong"),Lir=o("flaubert"),xir=o(" \u2014 "),Jz=a("a"),$ir=o("TFFlaubertModel"),kir=o(" (FlauBERT model)"),Sir=l(),Bs=a("li"),Z1e=a("strong"),Rir=o("funnel"),Pir=o(" \u2014 "),Yz=a("a"),Bir=o("TFFunnelModel"),Iir=o(" or "),Kz=a("a"),qir=o("TFFunnelBaseModel"),Nir=o(" (Funnel Transformer model)"),jir=l(),nT=a("li"),e7e=a("strong"),Dir=o("gpt2"),Gir=o(" \u2014 "),Zz=a("a"),Oir=o("TFGPT2Model"),Vir=o(" (OpenAI GPT-2 model)"),Xir=l(),sT=a("li"),o7e=a("strong"),zir=o("gptj"),Wir=o(" \u2014 "),eW=a("a"),Qir=o("TFGPTJModel"),Hir=o(" (GPT-J model)"),Uir=l(),lT=a("li"),r7e=a("strong"),Jir=o("hubert"),Yir=o(" \u2014 "),oW=a("a"),Kir=o("TFHubertModel"),Zir=o(" (Hubert model)"),edr=l(),iT=a("li"),t7e=a("strong"),odr=o("layoutlm"),rdr=o(" \u2014 "),rW=a("a"),tdr=o("TFLayoutLMModel"),adr=o(" (LayoutLM model)"),ndr=l(),dT=a("li"),a7e=a("strong"),sdr=o("led"),ldr=o(" \u2014 "),tW=a("a"),idr=o("TFLEDModel"),ddr=o(" (LED model)"),cdr=l(),cT=a("li"),n7e=a("strong"),fdr=o("longformer"),mdr=o(" \u2014 "),aW=a("a"),gdr=o("TFLongformerModel"),hdr=o(" (Longformer model)"),pdr=l(),fT=a("li"),s7e=a("strong"),_dr=o("lxmert"),udr=o(" \u2014 "),nW=a("a"),bdr=o("TFLxmertModel"),vdr=o(" (LXMERT model)"),Fdr=l(),mT=a("li"),l7e=a("strong"),Tdr=o("marian"),Mdr=o(" \u2014 "),sW=a("a"),Edr=o("TFMarianModel"),Cdr=o(" (Marian model)"),wdr=l(),gT=a("li"),i7e=a("strong"),Adr=o("mbart"),ydr=o(" \u2014 "),lW=a("a"),Ldr=o("TFMBartModel"),xdr=o(" (mBART model)"),$dr=l(),hT=a("li"),d7e=a("strong"),kdr=o("mobilebert"),Sdr=o(" \u2014 "),iW=a("a"),Rdr=o("TFMobileBertModel"),Pdr=o(" (MobileBERT model)"),Bdr=l(),pT=a("li"),c7e=a("strong"),Idr=o("mpnet"),qdr=o(" \u2014 "),dW=a("a"),Ndr=o("TFMPNetModel"),jdr=o(" (MPNet model)"),Ddr=l(),_T=a("li"),f7e=a("strong"),Gdr=o("mt5"),Odr=o(" \u2014 "),cW=a("a"),Vdr=o("TFMT5Model"),Xdr=o(" (mT5 model)"),zdr=l(),uT=a("li"),m7e=a("strong"),Wdr=o("openai-gpt"),Qdr=o(" \u2014 "),fW=a("a"),Hdr=o("TFOpenAIGPTModel"),Udr=o(" (OpenAI GPT model)"),Jdr=l(),bT=a("li"),g7e=a("strong"),Ydr=o("pegasus"),Kdr=o(" \u2014 "),mW=a("a"),Zdr=o("TFPegasusModel"),ecr=o(" (Pegasus model)"),ocr=l(),vT=a("li"),h7e=a("strong"),rcr=o("rembert"),tcr=o(" \u2014 "),gW=a("a"),acr=o("TFRemBertModel"),ncr=o(" (RemBERT model)"),scr=l(),FT=a("li"),p7e=a("strong"),lcr=o("roberta"),icr=o(" \u2014 "),hW=a("a"),dcr=o("TFRobertaModel"),ccr=o(" (RoBERTa model)"),fcr=l(),TT=a("li"),_7e=a("strong"),mcr=o("roformer"),gcr=o(" \u2014 "),pW=a("a"),hcr=o("TFRoFormerModel"),pcr=o(" (RoFormer model)"),_cr=l(),MT=a("li"),u7e=a("strong"),ucr=o("speech_to_text"),bcr=o(" \u2014 "),_W=a("a"),vcr=o("TFSpeech2TextModel"),Fcr=o(" (Speech2Text model)"),Tcr=l(),ET=a("li"),b7e=a("strong"),Mcr=o("swin"),Ecr=o(" \u2014 "),uW=a("a"),Ccr=o("TFSwinModel"),wcr=o(" (Swin model)"),Acr=l(),CT=a("li"),v7e=a("strong"),ycr=o("t5"),Lcr=o(" \u2014 "),bW=a("a"),xcr=o("TFT5Model"),$cr=o(" (T5 model)"),kcr=l(),wT=a("li"),F7e=a("strong"),Scr=o("tapas"),Rcr=o(" \u2014 "),vW=a("a"),Pcr=o("TFTapasModel"),Bcr=o(" (TAPAS model)"),Icr=l(),AT=a("li"),T7e=a("strong"),qcr=o("transfo-xl"),Ncr=o(" \u2014 "),FW=a("a"),jcr=o("TFTransfoXLModel"),Dcr=o(" (Transformer-XL model)"),Gcr=l(),yT=a("li"),M7e=a("strong"),Ocr=o("vit"),Vcr=o(" \u2014 "),TW=a("a"),Xcr=o("TFViTModel"),zcr=o(" (ViT model)"),Wcr=l(),LT=a("li"),E7e=a("strong"),Qcr=o("vit_mae"),Hcr=o(" \u2014 "),MW=a("a"),Ucr=o("TFViTMAEModel"),Jcr=o(" (ViTMAE model)"),Ycr=l(),xT=a("li"),C7e=a("strong"),Kcr=o("wav2vec2"),Zcr=o(" \u2014 "),EW=a("a"),efr=o("TFWav2Vec2Model"),ofr=o(" (Wav2Vec2 model)"),rfr=l(),$T=a("li"),w7e=a("strong"),tfr=o("xlm"),afr=o(" \u2014 "),CW=a("a"),nfr=o("TFXLMModel"),sfr=o(" (XLM model)"),lfr=l(),kT=a("li"),A7e=a("strong"),ifr=o("xlm-roberta"),dfr=o(" \u2014 "),wW=a("a"),cfr=o("TFXLMRobertaModel"),ffr=o(" (XLM-RoBERTa model)"),mfr=l(),ST=a("li"),y7e=a("strong"),gfr=o("xlnet"),hfr=o(" \u2014 "),AW=a("a"),pfr=o("TFXLNetModel"),_fr=o(" (XLNet model)"),ufr=l(),F(RT.$$.fragment),sNe=l(),Vd=a("h2"),PT=a("a"),L7e=a("span"),F(eL.$$.fragment),bfr=l(),x7e=a("span"),vfr=o("TFAutoModelForPreTraining"),lNe=l(),Ko=a("div"),F(oL.$$.fragment),Ffr=l(),Xd=a("p"),Tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yW=a("a"),Mfr=o("from_pretrained()"),Efr=o(" class method or the "),LW=a("a"),Cfr=o("from_config()"),wfr=o(` class
method.`),Afr=l(),rL=a("p"),yfr=o("This class cannot be instantiated directly using "),$7e=a("code"),Lfr=o("__init__()"),xfr=o(" (throws an error)."),$fr=l(),Lt=a("div"),F(tL.$$.fragment),kfr=l(),k7e=a("p"),Sfr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rfr=l(),zd=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),S7e=a("strong"),Bfr=o("not"),Ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),qfr=o("from_pretrained()"),Nfr=o(" to load the model weights."),jfr=l(),F(BT.$$.fragment),Dfr=l(),Ar=a("div"),F(aL.$$.fragment),Gfr=l(),R7e=a("p"),Ofr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vfr=l(),Za=a("p"),Xfr=o("The model class to instantiate is selected based on the "),P7e=a("code"),zfr=o("model_type"),Wfr=o(` property of the config object (either
passed as an argument or loaded from `),B7e=a("code"),Qfr=o("pretrained_model_name_or_path"),Hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(":"),Yfr=l(),se=a("ul"),IT=a("li"),q7e=a("strong"),Kfr=o("albert"),Zfr=o(" \u2014 "),$W=a("a"),emr=o("TFAlbertForPreTraining"),omr=o(" (ALBERT model)"),rmr=l(),qT=a("li"),N7e=a("strong"),tmr=o("bart"),amr=o(" \u2014 "),kW=a("a"),nmr=o("TFBartForConditionalGeneration"),smr=o(" (BART model)"),lmr=l(),NT=a("li"),j7e=a("strong"),imr=o("bert"),dmr=o(" \u2014 "),SW=a("a"),cmr=o("TFBertForPreTraining"),fmr=o(" (BERT model)"),mmr=l(),jT=a("li"),D7e=a("strong"),gmr=o("camembert"),hmr=o(" \u2014 "),RW=a("a"),pmr=o("TFCamembertForMaskedLM"),_mr=o(" (CamemBERT model)"),umr=l(),DT=a("li"),G7e=a("strong"),bmr=o("ctrl"),vmr=o(" \u2014 "),PW=a("a"),Fmr=o("TFCTRLLMHeadModel"),Tmr=o(" (CTRL model)"),Mmr=l(),GT=a("li"),O7e=a("strong"),Emr=o("distilbert"),Cmr=o(" \u2014 "),BW=a("a"),wmr=o("TFDistilBertForMaskedLM"),Amr=o(" (DistilBERT model)"),ymr=l(),OT=a("li"),V7e=a("strong"),Lmr=o("electra"),xmr=o(" \u2014 "),IW=a("a"),$mr=o("TFElectraForPreTraining"),kmr=o(" (ELECTRA model)"),Smr=l(),VT=a("li"),X7e=a("strong"),Rmr=o("flaubert"),Pmr=o(" \u2014 "),qW=a("a"),Bmr=o("TFFlaubertWithLMHeadModel"),Imr=o(" (FlauBERT model)"),qmr=l(),XT=a("li"),z7e=a("strong"),Nmr=o("funnel"),jmr=o(" \u2014 "),NW=a("a"),Dmr=o("TFFunnelForPreTraining"),Gmr=o(" (Funnel Transformer model)"),Omr=l(),zT=a("li"),W7e=a("strong"),Vmr=o("gpt2"),Xmr=o(" \u2014 "),jW=a("a"),zmr=o("TFGPT2LMHeadModel"),Wmr=o(" (OpenAI GPT-2 model)"),Qmr=l(),WT=a("li"),Q7e=a("strong"),Hmr=o("layoutlm"),Umr=o(" \u2014 "),DW=a("a"),Jmr=o("TFLayoutLMForMaskedLM"),Ymr=o(" (LayoutLM model)"),Kmr=l(),QT=a("li"),H7e=a("strong"),Zmr=o("lxmert"),egr=o(" \u2014 "),GW=a("a"),ogr=o("TFLxmertForPreTraining"),rgr=o(" (LXMERT model)"),tgr=l(),HT=a("li"),U7e=a("strong"),agr=o("mobilebert"),ngr=o(" \u2014 "),OW=a("a"),sgr=o("TFMobileBertForPreTraining"),lgr=o(" (MobileBERT model)"),igr=l(),UT=a("li"),J7e=a("strong"),dgr=o("mpnet"),cgr=o(" \u2014 "),VW=a("a"),fgr=o("TFMPNetForMaskedLM"),mgr=o(" (MPNet model)"),ggr=l(),JT=a("li"),Y7e=a("strong"),hgr=o("openai-gpt"),pgr=o(" \u2014 "),XW=a("a"),_gr=o("TFOpenAIGPTLMHeadModel"),ugr=o(" (OpenAI GPT model)"),bgr=l(),YT=a("li"),K7e=a("strong"),vgr=o("roberta"),Fgr=o(" \u2014 "),zW=a("a"),Tgr=o("TFRobertaForMaskedLM"),Mgr=o(" (RoBERTa model)"),Egr=l(),KT=a("li"),Z7e=a("strong"),Cgr=o("t5"),wgr=o(" \u2014 "),WW=a("a"),Agr=o("TFT5ForConditionalGeneration"),ygr=o(" (T5 model)"),Lgr=l(),ZT=a("li"),ebe=a("strong"),xgr=o("tapas"),$gr=o(" \u2014 "),QW=a("a"),kgr=o("TFTapasForMaskedLM"),Sgr=o(" (TAPAS model)"),Rgr=l(),e8=a("li"),obe=a("strong"),Pgr=o("transfo-xl"),Bgr=o(" \u2014 "),HW=a("a"),Igr=o("TFTransfoXLLMHeadModel"),qgr=o(" (Transformer-XL model)"),Ngr=l(),o8=a("li"),rbe=a("strong"),jgr=o("vit_mae"),Dgr=o(" \u2014 "),UW=a("a"),Ggr=o("TFViTMAEForPreTraining"),Ogr=o(" (ViTMAE model)"),Vgr=l(),r8=a("li"),tbe=a("strong"),Xgr=o("xlm"),zgr=o(" \u2014 "),JW=a("a"),Wgr=o("TFXLMWithLMHeadModel"),Qgr=o(" (XLM model)"),Hgr=l(),t8=a("li"),abe=a("strong"),Ugr=o("xlm-roberta"),Jgr=o(" \u2014 "),YW=a("a"),Ygr=o("TFXLMRobertaForMaskedLM"),Kgr=o(" (XLM-RoBERTa model)"),Zgr=l(),a8=a("li"),nbe=a("strong"),ehr=o("xlnet"),ohr=o(" \u2014 "),KW=a("a"),rhr=o("TFXLNetLMHeadModel"),thr=o(" (XLNet model)"),ahr=l(),F(n8.$$.fragment),iNe=l(),Wd=a("h2"),s8=a("a"),sbe=a("span"),F(nL.$$.fragment),nhr=l(),lbe=a("span"),shr=o("TFAutoModelForCausalLM"),dNe=l(),Zo=a("div"),F(sL.$$.fragment),lhr=l(),Qd=a("p"),ihr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZW=a("a"),dhr=o("from_pretrained()"),chr=o(" class method or the "),eQ=a("a"),fhr=o("from_config()"),mhr=o(` class
method.`),ghr=l(),lL=a("p"),hhr=o("This class cannot be instantiated directly using "),ibe=a("code"),phr=o("__init__()"),_hr=o(" (throws an error)."),uhr=l(),xt=a("div"),F(iL.$$.fragment),bhr=l(),dbe=a("p"),vhr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fhr=l(),Hd=a("p"),Thr=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),Mhr=o("not"),Ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),Chr=o("from_pretrained()"),whr=o(" to load the model weights."),Ahr=l(),F(l8.$$.fragment),yhr=l(),yr=a("div"),F(dL.$$.fragment),Lhr=l(),fbe=a("p"),xhr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$hr=l(),en=a("p"),khr=o("The model class to instantiate is selected based on the "),mbe=a("code"),Shr=o("model_type"),Rhr=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),Phr=o("pretrained_model_name_or_path"),Bhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),Ihr=o("pretrained_model_name_or_path"),qhr=o(":"),Nhr=l(),Me=a("ul"),i8=a("li"),pbe=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),rQ=a("a"),Ghr=o("TFBertLMHeadModel"),Ohr=o(" (BERT model)"),Vhr=l(),d8=a("li"),_be=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),tQ=a("a"),Whr=o("TFCamembertForCausalLM"),Qhr=o(" (CamemBERT model)"),Hhr=l(),c8=a("li"),ube=a("strong"),Uhr=o("ctrl"),Jhr=o(" \u2014 "),aQ=a("a"),Yhr=o("TFCTRLLMHeadModel"),Khr=o(" (CTRL model)"),Zhr=l(),f8=a("li"),bbe=a("strong"),epr=o("gpt2"),opr=o(" \u2014 "),nQ=a("a"),rpr=o("TFGPT2LMHeadModel"),tpr=o(" (OpenAI GPT-2 model)"),apr=l(),m8=a("li"),vbe=a("strong"),npr=o("gptj"),spr=o(" \u2014 "),sQ=a("a"),lpr=o("TFGPTJForCausalLM"),ipr=o(" (GPT-J model)"),dpr=l(),g8=a("li"),Fbe=a("strong"),cpr=o("openai-gpt"),fpr=o(" \u2014 "),lQ=a("a"),mpr=o("TFOpenAIGPTLMHeadModel"),gpr=o(" (OpenAI GPT model)"),hpr=l(),h8=a("li"),Tbe=a("strong"),ppr=o("rembert"),_pr=o(" \u2014 "),iQ=a("a"),upr=o("TFRemBertForCausalLM"),bpr=o(" (RemBERT model)"),vpr=l(),p8=a("li"),Mbe=a("strong"),Fpr=o("roberta"),Tpr=o(" \u2014 "),dQ=a("a"),Mpr=o("TFRobertaForCausalLM"),Epr=o(" (RoBERTa model)"),Cpr=l(),_8=a("li"),Ebe=a("strong"),wpr=o("roformer"),Apr=o(" \u2014 "),cQ=a("a"),ypr=o("TFRoFormerForCausalLM"),Lpr=o(" (RoFormer model)"),xpr=l(),u8=a("li"),Cbe=a("strong"),$pr=o("transfo-xl"),kpr=o(" \u2014 "),fQ=a("a"),Spr=o("TFTransfoXLLMHeadModel"),Rpr=o(" (Transformer-XL model)"),Ppr=l(),b8=a("li"),wbe=a("strong"),Bpr=o("xlm"),Ipr=o(" \u2014 "),mQ=a("a"),qpr=o("TFXLMWithLMHeadModel"),Npr=o(" (XLM model)"),jpr=l(),v8=a("li"),Abe=a("strong"),Dpr=o("xlnet"),Gpr=o(" \u2014 "),gQ=a("a"),Opr=o("TFXLNetLMHeadModel"),Vpr=o(" (XLNet model)"),Xpr=l(),F(F8.$$.fragment),cNe=l(),Ud=a("h2"),T8=a("a"),ybe=a("span"),F(cL.$$.fragment),zpr=l(),Lbe=a("span"),Wpr=o("TFAutoModelForImageClassification"),fNe=l(),er=a("div"),F(fL.$$.fragment),Qpr=l(),Jd=a("p"),Hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hQ=a("a"),Upr=o("from_pretrained()"),Jpr=o(" class method or the "),pQ=a("a"),Ypr=o("from_config()"),Kpr=o(` class
method.`),Zpr=l(),mL=a("p"),e_r=o("This class cannot be instantiated directly using "),xbe=a("code"),o_r=o("__init__()"),r_r=o(" (throws an error)."),t_r=l(),$t=a("div"),F(gL.$$.fragment),a_r=l(),$be=a("p"),n_r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),s_r=l(),Yd=a("p"),l_r=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),i_r=o("not"),d_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),c_r=o("from_pretrained()"),f_r=o(" to load the model weights."),m_r=l(),F(M8.$$.fragment),g_r=l(),Lr=a("div"),F(hL.$$.fragment),h_r=l(),Sbe=a("p"),p_r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),__r=l(),on=a("p"),u_r=o("The model class to instantiate is selected based on the "),Rbe=a("code"),b_r=o("model_type"),v_r=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),F_r=o("pretrained_model_name_or_path"),T_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),M_r=o("pretrained_model_name_or_path"),E_r=o(":"),C_r=l(),rn=a("ul"),E8=a("li"),Ibe=a("strong"),w_r=o("convnext"),A_r=o(" \u2014 "),uQ=a("a"),y_r=o("TFConvNextForImageClassification"),L_r=o(" (ConvNext model)"),x_r=l(),C8=a("li"),qbe=a("strong"),$_r=o("data2vec-vision"),k_r=o(" \u2014 "),bQ=a("a"),S_r=o("TFData2VecVisionForImageClassification"),R_r=o(" (Data2VecVision model)"),P_r=l(),w8=a("li"),Nbe=a("strong"),B_r=o("swin"),I_r=o(" \u2014 "),vQ=a("a"),q_r=o("TFSwinForImageClassification"),N_r=o(" (Swin model)"),j_r=l(),A8=a("li"),jbe=a("strong"),D_r=o("vit"),G_r=o(" \u2014 "),FQ=a("a"),O_r=o("TFViTForImageClassification"),V_r=o(" (ViT model)"),X_r=l(),F(y8.$$.fragment),mNe=l(),Kd=a("h2"),L8=a("a"),Dbe=a("span"),F(pL.$$.fragment),z_r=l(),Gbe=a("span"),W_r=o("TFAutoModelForMaskedLM"),gNe=l(),or=a("div"),F(_L.$$.fragment),Q_r=l(),Zd=a("p"),H_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TQ=a("a"),U_r=o("from_pretrained()"),J_r=o(" class method or the "),MQ=a("a"),Y_r=o("from_config()"),K_r=o(` class
method.`),Z_r=l(),uL=a("p"),eur=o("This class cannot be instantiated directly using "),Obe=a("code"),our=o("__init__()"),rur=o(" (throws an error)."),tur=l(),kt=a("div"),F(bL.$$.fragment),aur=l(),Vbe=a("p"),nur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sur=l(),ec=a("p"),lur=o(`Note:
Loading a model from its configuration file does `),Xbe=a("strong"),iur=o("not"),dur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),cur=o("from_pretrained()"),fur=o(" to load the model weights."),mur=l(),F(x8.$$.fragment),gur=l(),xr=a("div"),F(vL.$$.fragment),hur=l(),zbe=a("p"),pur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_ur=l(),tn=a("p"),uur=o("The model class to instantiate is selected based on the "),Wbe=a("code"),bur=o("model_type"),vur=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),Fur=o("pretrained_model_name_or_path"),Tur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=a("code"),Mur=o("pretrained_model_name_or_path"),Eur=o(":"),Cur=l(),ie=a("ul"),$8=a("li"),Ube=a("strong"),wur=o("albert"),Aur=o(" \u2014 "),CQ=a("a"),yur=o("TFAlbertForMaskedLM"),Lur=o(" (ALBERT model)"),xur=l(),k8=a("li"),Jbe=a("strong"),$ur=o("bert"),kur=o(" \u2014 "),wQ=a("a"),Sur=o("TFBertForMaskedLM"),Rur=o(" (BERT model)"),Pur=l(),S8=a("li"),Ybe=a("strong"),Bur=o("camembert"),Iur=o(" \u2014 "),AQ=a("a"),qur=o("TFCamembertForMaskedLM"),Nur=o(" (CamemBERT model)"),jur=l(),R8=a("li"),Kbe=a("strong"),Dur=o("convbert"),Gur=o(" \u2014 "),yQ=a("a"),Our=o("TFConvBertForMaskedLM"),Vur=o(" (ConvBERT model)"),Xur=l(),P8=a("li"),Zbe=a("strong"),zur=o("deberta"),Wur=o(" \u2014 "),LQ=a("a"),Qur=o("TFDebertaForMaskedLM"),Hur=o(" (DeBERTa model)"),Uur=l(),B8=a("li"),e2e=a("strong"),Jur=o("deberta-v2"),Yur=o(" \u2014 "),xQ=a("a"),Kur=o("TFDebertaV2ForMaskedLM"),Zur=o(" (DeBERTa-v2 model)"),e1r=l(),I8=a("li"),o2e=a("strong"),o1r=o("distilbert"),r1r=o(" \u2014 "),$Q=a("a"),t1r=o("TFDistilBertForMaskedLM"),a1r=o(" (DistilBERT model)"),n1r=l(),q8=a("li"),r2e=a("strong"),s1r=o("electra"),l1r=o(" \u2014 "),kQ=a("a"),i1r=o("TFElectraForMaskedLM"),d1r=o(" (ELECTRA model)"),c1r=l(),N8=a("li"),t2e=a("strong"),f1r=o("flaubert"),m1r=o(" \u2014 "),SQ=a("a"),g1r=o("TFFlaubertWithLMHeadModel"),h1r=o(" (FlauBERT model)"),p1r=l(),j8=a("li"),a2e=a("strong"),_1r=o("funnel"),u1r=o(" \u2014 "),RQ=a("a"),b1r=o("TFFunnelForMaskedLM"),v1r=o(" (Funnel Transformer model)"),F1r=l(),D8=a("li"),n2e=a("strong"),T1r=o("layoutlm"),M1r=o(" \u2014 "),PQ=a("a"),E1r=o("TFLayoutLMForMaskedLM"),C1r=o(" (LayoutLM model)"),w1r=l(),G8=a("li"),s2e=a("strong"),A1r=o("longformer"),y1r=o(" \u2014 "),BQ=a("a"),L1r=o("TFLongformerForMaskedLM"),x1r=o(" (Longformer model)"),$1r=l(),O8=a("li"),l2e=a("strong"),k1r=o("mobilebert"),S1r=o(" \u2014 "),IQ=a("a"),R1r=o("TFMobileBertForMaskedLM"),P1r=o(" (MobileBERT model)"),B1r=l(),V8=a("li"),i2e=a("strong"),I1r=o("mpnet"),q1r=o(" \u2014 "),qQ=a("a"),N1r=o("TFMPNetForMaskedLM"),j1r=o(" (MPNet model)"),D1r=l(),X8=a("li"),d2e=a("strong"),G1r=o("rembert"),O1r=o(" \u2014 "),NQ=a("a"),V1r=o("TFRemBertForMaskedLM"),X1r=o(" (RemBERT model)"),z1r=l(),z8=a("li"),c2e=a("strong"),W1r=o("roberta"),Q1r=o(" \u2014 "),jQ=a("a"),H1r=o("TFRobertaForMaskedLM"),U1r=o(" (RoBERTa model)"),J1r=l(),W8=a("li"),f2e=a("strong"),Y1r=o("roformer"),K1r=o(" \u2014 "),DQ=a("a"),Z1r=o("TFRoFormerForMaskedLM"),e7r=o(" (RoFormer model)"),o7r=l(),Q8=a("li"),m2e=a("strong"),r7r=o("tapas"),t7r=o(" \u2014 "),GQ=a("a"),a7r=o("TFTapasForMaskedLM"),n7r=o(" (TAPAS model)"),s7r=l(),H8=a("li"),g2e=a("strong"),l7r=o("xlm"),i7r=o(" \u2014 "),OQ=a("a"),d7r=o("TFXLMWithLMHeadModel"),c7r=o(" (XLM model)"),f7r=l(),U8=a("li"),h2e=a("strong"),m7r=o("xlm-roberta"),g7r=o(" \u2014 "),VQ=a("a"),h7r=o("TFXLMRobertaForMaskedLM"),p7r=o(" (XLM-RoBERTa model)"),_7r=l(),F(J8.$$.fragment),hNe=l(),oc=a("h2"),Y8=a("a"),p2e=a("span"),F(FL.$$.fragment),u7r=l(),_2e=a("span"),b7r=o("TFAutoModelForSeq2SeqLM"),pNe=l(),rr=a("div"),F(TL.$$.fragment),v7r=l(),rc=a("p"),F7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XQ=a("a"),T7r=o("from_pretrained()"),M7r=o(" class method or the "),zQ=a("a"),E7r=o("from_config()"),C7r=o(` class
method.`),w7r=l(),ML=a("p"),A7r=o("This class cannot be instantiated directly using "),u2e=a("code"),y7r=o("__init__()"),L7r=o(" (throws an error)."),x7r=l(),St=a("div"),F(EL.$$.fragment),$7r=l(),b2e=a("p"),k7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S7r=l(),tc=a("p"),R7r=o(`Note:
Loading a model from its configuration file does `),v2e=a("strong"),P7r=o("not"),B7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),I7r=o("from_pretrained()"),q7r=o(" to load the model weights."),N7r=l(),F(K8.$$.fragment),j7r=l(),$r=a("div"),F(CL.$$.fragment),D7r=l(),F2e=a("p"),G7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O7r=l(),an=a("p"),V7r=o("The model class to instantiate is selected based on the "),T2e=a("code"),X7r=o("model_type"),z7r=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),W7r=o("pretrained_model_name_or_path"),Q7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),H7r=o("pretrained_model_name_or_path"),U7r=o(":"),J7r=l(),ye=a("ul"),Z8=a("li"),C2e=a("strong"),Y7r=o("bart"),K7r=o(" \u2014 "),QQ=a("a"),Z7r=o("TFBartForConditionalGeneration"),ebr=o(" (BART model)"),obr=l(),eM=a("li"),w2e=a("strong"),rbr=o("blenderbot"),tbr=o(" \u2014 "),HQ=a("a"),abr=o("TFBlenderbotForConditionalGeneration"),nbr=o(" (Blenderbot model)"),sbr=l(),oM=a("li"),A2e=a("strong"),lbr=o("blenderbot-small"),ibr=o(" \u2014 "),UQ=a("a"),dbr=o("TFBlenderbotSmallForConditionalGeneration"),cbr=o(" (BlenderbotSmall model)"),fbr=l(),rM=a("li"),y2e=a("strong"),mbr=o("encoder-decoder"),gbr=o(" \u2014 "),JQ=a("a"),hbr=o("TFEncoderDecoderModel"),pbr=o(" (Encoder decoder model)"),_br=l(),tM=a("li"),L2e=a("strong"),ubr=o("led"),bbr=o(" \u2014 "),YQ=a("a"),vbr=o("TFLEDForConditionalGeneration"),Fbr=o(" (LED model)"),Tbr=l(),aM=a("li"),x2e=a("strong"),Mbr=o("marian"),Ebr=o(" \u2014 "),KQ=a("a"),Cbr=o("TFMarianMTModel"),wbr=o(" (Marian model)"),Abr=l(),nM=a("li"),$2e=a("strong"),ybr=o("mbart"),Lbr=o(" \u2014 "),ZQ=a("a"),xbr=o("TFMBartForConditionalGeneration"),$br=o(" (mBART model)"),kbr=l(),sM=a("li"),k2e=a("strong"),Sbr=o("mt5"),Rbr=o(" \u2014 "),eH=a("a"),Pbr=o("TFMT5ForConditionalGeneration"),Bbr=o(" (mT5 model)"),Ibr=l(),lM=a("li"),S2e=a("strong"),qbr=o("pegasus"),Nbr=o(" \u2014 "),oH=a("a"),jbr=o("TFPegasusForConditionalGeneration"),Dbr=o(" (Pegasus model)"),Gbr=l(),iM=a("li"),R2e=a("strong"),Obr=o("t5"),Vbr=o(" \u2014 "),rH=a("a"),Xbr=o("TFT5ForConditionalGeneration"),zbr=o(" (T5 model)"),Wbr=l(),F(dM.$$.fragment),_Ne=l(),ac=a("h2"),cM=a("a"),P2e=a("span"),F(wL.$$.fragment),Qbr=l(),B2e=a("span"),Hbr=o("TFAutoModelForSequenceClassification"),uNe=l(),tr=a("div"),F(AL.$$.fragment),Ubr=l(),nc=a("p"),Jbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tH=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" class method or the "),aH=a("a"),Zbr=o("from_config()"),e2r=o(` class
method.`),o2r=l(),yL=a("p"),r2r=o("This class cannot be instantiated directly using "),I2e=a("code"),t2r=o("__init__()"),a2r=o(" (throws an error)."),n2r=l(),Rt=a("div"),F(LL.$$.fragment),s2r=l(),q2e=a("p"),l2r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),i2r=l(),sc=a("p"),d2r=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),c2r=o("not"),f2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=a("a"),m2r=o("from_pretrained()"),g2r=o(" to load the model weights."),h2r=l(),F(fM.$$.fragment),p2r=l(),kr=a("div"),F(xL.$$.fragment),_2r=l(),j2e=a("p"),u2r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b2r=l(),nn=a("p"),v2r=o("The model class to instantiate is selected based on the "),D2e=a("code"),F2r=o("model_type"),T2r=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(":"),A2r=l(),ee=a("ul"),mM=a("li"),V2e=a("strong"),y2r=o("albert"),L2r=o(" \u2014 "),sH=a("a"),x2r=o("TFAlbertForSequenceClassification"),$2r=o(" (ALBERT model)"),k2r=l(),gM=a("li"),X2e=a("strong"),S2r=o("bert"),R2r=o(" \u2014 "),lH=a("a"),P2r=o("TFBertForSequenceClassification"),B2r=o(" (BERT model)"),I2r=l(),hM=a("li"),z2e=a("strong"),q2r=o("camembert"),N2r=o(" \u2014 "),iH=a("a"),j2r=o("TFCamembertForSequenceClassification"),D2r=o(" (CamemBERT model)"),G2r=l(),pM=a("li"),W2e=a("strong"),O2r=o("convbert"),V2r=o(" \u2014 "),dH=a("a"),X2r=o("TFConvBertForSequenceClassification"),z2r=o(" (ConvBERT model)"),W2r=l(),_M=a("li"),Q2e=a("strong"),Q2r=o("ctrl"),H2r=o(" \u2014 "),cH=a("a"),U2r=o("TFCTRLForSequenceClassification"),J2r=o(" (CTRL model)"),Y2r=l(),uM=a("li"),H2e=a("strong"),K2r=o("deberta"),Z2r=o(" \u2014 "),fH=a("a"),evr=o("TFDebertaForSequenceClassification"),ovr=o(" (DeBERTa model)"),rvr=l(),bM=a("li"),U2e=a("strong"),tvr=o("deberta-v2"),avr=o(" \u2014 "),mH=a("a"),nvr=o("TFDebertaV2ForSequenceClassification"),svr=o(" (DeBERTa-v2 model)"),lvr=l(),vM=a("li"),J2e=a("strong"),ivr=o("distilbert"),dvr=o(" \u2014 "),gH=a("a"),cvr=o("TFDistilBertForSequenceClassification"),fvr=o(" (DistilBERT model)"),mvr=l(),FM=a("li"),Y2e=a("strong"),gvr=o("electra"),hvr=o(" \u2014 "),hH=a("a"),pvr=o("TFElectraForSequenceClassification"),_vr=o(" (ELECTRA model)"),uvr=l(),TM=a("li"),K2e=a("strong"),bvr=o("flaubert"),vvr=o(" \u2014 "),pH=a("a"),Fvr=o("TFFlaubertForSequenceClassification"),Tvr=o(" (FlauBERT model)"),Mvr=l(),MM=a("li"),Z2e=a("strong"),Evr=o("funnel"),Cvr=o(" \u2014 "),_H=a("a"),wvr=o("TFFunnelForSequenceClassification"),Avr=o(" (Funnel Transformer model)"),yvr=l(),EM=a("li"),eve=a("strong"),Lvr=o("gpt2"),xvr=o(" \u2014 "),uH=a("a"),$vr=o("TFGPT2ForSequenceClassification"),kvr=o(" (OpenAI GPT-2 model)"),Svr=l(),CM=a("li"),ove=a("strong"),Rvr=o("gptj"),Pvr=o(" \u2014 "),bH=a("a"),Bvr=o("TFGPTJForSequenceClassification"),Ivr=o(" (GPT-J model)"),qvr=l(),wM=a("li"),rve=a("strong"),Nvr=o("layoutlm"),jvr=o(" \u2014 "),vH=a("a"),Dvr=o("TFLayoutLMForSequenceClassification"),Gvr=o(" (LayoutLM model)"),Ovr=l(),AM=a("li"),tve=a("strong"),Vvr=o("longformer"),Xvr=o(" \u2014 "),FH=a("a"),zvr=o("TFLongformerForSequenceClassification"),Wvr=o(" (Longformer model)"),Qvr=l(),yM=a("li"),ave=a("strong"),Hvr=o("mobilebert"),Uvr=o(" \u2014 "),TH=a("a"),Jvr=o("TFMobileBertForSequenceClassification"),Yvr=o(" (MobileBERT model)"),Kvr=l(),LM=a("li"),nve=a("strong"),Zvr=o("mpnet"),e3r=o(" \u2014 "),MH=a("a"),o3r=o("TFMPNetForSequenceClassification"),r3r=o(" (MPNet model)"),t3r=l(),xM=a("li"),sve=a("strong"),a3r=o("openai-gpt"),n3r=o(" \u2014 "),EH=a("a"),s3r=o("TFOpenAIGPTForSequenceClassification"),l3r=o(" (OpenAI GPT model)"),i3r=l(),$M=a("li"),lve=a("strong"),d3r=o("rembert"),c3r=o(" \u2014 "),CH=a("a"),f3r=o("TFRemBertForSequenceClassification"),m3r=o(" (RemBERT model)"),g3r=l(),kM=a("li"),ive=a("strong"),h3r=o("roberta"),p3r=o(" \u2014 "),wH=a("a"),_3r=o("TFRobertaForSequenceClassification"),u3r=o(" (RoBERTa model)"),b3r=l(),SM=a("li"),dve=a("strong"),v3r=o("roformer"),F3r=o(" \u2014 "),AH=a("a"),T3r=o("TFRoFormerForSequenceClassification"),M3r=o(" (RoFormer model)"),E3r=l(),RM=a("li"),cve=a("strong"),C3r=o("tapas"),w3r=o(" \u2014 "),yH=a("a"),A3r=o("TFTapasForSequenceClassification"),y3r=o(" (TAPAS model)"),L3r=l(),PM=a("li"),fve=a("strong"),x3r=o("transfo-xl"),$3r=o(" \u2014 "),LH=a("a"),k3r=o("TFTransfoXLForSequenceClassification"),S3r=o(" (Transformer-XL model)"),R3r=l(),BM=a("li"),mve=a("strong"),P3r=o("xlm"),B3r=o(" \u2014 "),xH=a("a"),I3r=o("TFXLMForSequenceClassification"),q3r=o(" (XLM model)"),N3r=l(),IM=a("li"),gve=a("strong"),j3r=o("xlm-roberta"),D3r=o(" \u2014 "),$H=a("a"),G3r=o("TFXLMRobertaForSequenceClassification"),O3r=o(" (XLM-RoBERTa model)"),V3r=l(),qM=a("li"),hve=a("strong"),X3r=o("xlnet"),z3r=o(" \u2014 "),kH=a("a"),W3r=o("TFXLNetForSequenceClassification"),Q3r=o(" (XLNet model)"),H3r=l(),F(NM.$$.fragment),bNe=l(),lc=a("h2"),jM=a("a"),pve=a("span"),F($L.$$.fragment),U3r=l(),_ve=a("span"),J3r=o("TFAutoModelForMultipleChoice"),vNe=l(),ar=a("div"),F(kL.$$.fragment),Y3r=l(),ic=a("p"),K3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SH=a("a"),Z3r=o("from_pretrained()"),eFr=o(" class method or the "),RH=a("a"),oFr=o("from_config()"),rFr=o(` class
method.`),tFr=l(),SL=a("p"),aFr=o("This class cannot be instantiated directly using "),uve=a("code"),nFr=o("__init__()"),sFr=o(" (throws an error)."),lFr=l(),Pt=a("div"),F(RL.$$.fragment),iFr=l(),bve=a("p"),dFr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cFr=l(),dc=a("p"),fFr=o(`Note:
Loading a model from its configuration file does `),vve=a("strong"),mFr=o("not"),gFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),hFr=o("from_pretrained()"),pFr=o(" to load the model weights."),_Fr=l(),F(DM.$$.fragment),uFr=l(),Sr=a("div"),F(PL.$$.fragment),bFr=l(),Fve=a("p"),vFr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FFr=l(),sn=a("p"),TFr=o("The model class to instantiate is selected based on the "),Tve=a("code"),MFr=o("model_type"),EFr=o(` property of the config object (either
passed as an argument or loaded from `),Mve=a("code"),CFr=o("pretrained_model_name_or_path"),wFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=a("code"),AFr=o("pretrained_model_name_or_path"),yFr=o(":"),LFr=l(),he=a("ul"),GM=a("li"),Cve=a("strong"),xFr=o("albert"),$Fr=o(" \u2014 "),BH=a("a"),kFr=o("TFAlbertForMultipleChoice"),SFr=o(" (ALBERT model)"),RFr=l(),OM=a("li"),wve=a("strong"),PFr=o("bert"),BFr=o(" \u2014 "),IH=a("a"),IFr=o("TFBertForMultipleChoice"),qFr=o(" (BERT model)"),NFr=l(),VM=a("li"),Ave=a("strong"),jFr=o("camembert"),DFr=o(" \u2014 "),qH=a("a"),GFr=o("TFCamembertForMultipleChoice"),OFr=o(" (CamemBERT model)"),VFr=l(),XM=a("li"),yve=a("strong"),XFr=o("convbert"),zFr=o(" \u2014 "),NH=a("a"),WFr=o("TFConvBertForMultipleChoice"),QFr=o(" (ConvBERT model)"),HFr=l(),zM=a("li"),Lve=a("strong"),UFr=o("distilbert"),JFr=o(" \u2014 "),jH=a("a"),YFr=o("TFDistilBertForMultipleChoice"),KFr=o(" (DistilBERT model)"),ZFr=l(),WM=a("li"),xve=a("strong"),eTr=o("electra"),oTr=o(" \u2014 "),DH=a("a"),rTr=o("TFElectraForMultipleChoice"),tTr=o(" (ELECTRA model)"),aTr=l(),QM=a("li"),$ve=a("strong"),nTr=o("flaubert"),sTr=o(" \u2014 "),GH=a("a"),lTr=o("TFFlaubertForMultipleChoice"),iTr=o(" (FlauBERT model)"),dTr=l(),HM=a("li"),kve=a("strong"),cTr=o("funnel"),fTr=o(" \u2014 "),OH=a("a"),mTr=o("TFFunnelForMultipleChoice"),gTr=o(" (Funnel Transformer model)"),hTr=l(),UM=a("li"),Sve=a("strong"),pTr=o("longformer"),_Tr=o(" \u2014 "),VH=a("a"),uTr=o("TFLongformerForMultipleChoice"),bTr=o(" (Longformer model)"),vTr=l(),JM=a("li"),Rve=a("strong"),FTr=o("mobilebert"),TTr=o(" \u2014 "),XH=a("a"),MTr=o("TFMobileBertForMultipleChoice"),ETr=o(" (MobileBERT model)"),CTr=l(),YM=a("li"),Pve=a("strong"),wTr=o("mpnet"),ATr=o(" \u2014 "),zH=a("a"),yTr=o("TFMPNetForMultipleChoice"),LTr=o(" (MPNet model)"),xTr=l(),KM=a("li"),Bve=a("strong"),$Tr=o("rembert"),kTr=o(" \u2014 "),WH=a("a"),STr=o("TFRemBertForMultipleChoice"),RTr=o(" (RemBERT model)"),PTr=l(),ZM=a("li"),Ive=a("strong"),BTr=o("roberta"),ITr=o(" \u2014 "),QH=a("a"),qTr=o("TFRobertaForMultipleChoice"),NTr=o(" (RoBERTa model)"),jTr=l(),e4=a("li"),qve=a("strong"),DTr=o("roformer"),GTr=o(" \u2014 "),HH=a("a"),OTr=o("TFRoFormerForMultipleChoice"),VTr=o(" (RoFormer model)"),XTr=l(),o4=a("li"),Nve=a("strong"),zTr=o("xlm"),WTr=o(" \u2014 "),UH=a("a"),QTr=o("TFXLMForMultipleChoice"),HTr=o(" (XLM model)"),UTr=l(),r4=a("li"),jve=a("strong"),JTr=o("xlm-roberta"),YTr=o(" \u2014 "),JH=a("a"),KTr=o("TFXLMRobertaForMultipleChoice"),ZTr=o(" (XLM-RoBERTa model)"),e8r=l(),t4=a("li"),Dve=a("strong"),o8r=o("xlnet"),r8r=o(" \u2014 "),YH=a("a"),t8r=o("TFXLNetForMultipleChoice"),a8r=o(" (XLNet model)"),n8r=l(),F(a4.$$.fragment),FNe=l(),cc=a("h2"),n4=a("a"),Gve=a("span"),F(BL.$$.fragment),s8r=l(),Ove=a("span"),l8r=o("TFAutoModelForNextSentencePrediction"),TNe=l(),nr=a("div"),F(IL.$$.fragment),i8r=l(),fc=a("p"),d8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KH=a("a"),c8r=o("from_pretrained()"),f8r=o(" class method or the "),ZH=a("a"),m8r=o("from_config()"),g8r=o(` class
method.`),h8r=l(),qL=a("p"),p8r=o("This class cannot be instantiated directly using "),Vve=a("code"),_8r=o("__init__()"),u8r=o(" (throws an error)."),b8r=l(),Bt=a("div"),F(NL.$$.fragment),v8r=l(),Xve=a("p"),F8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),T8r=l(),mc=a("p"),M8r=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),E8r=o("not"),C8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=a("a"),w8r=o("from_pretrained()"),A8r=o(" to load the model weights."),y8r=l(),F(s4.$$.fragment),L8r=l(),Rr=a("div"),F(jL.$$.fragment),x8r=l(),Wve=a("p"),$8r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),k8r=l(),ln=a("p"),S8r=o("The model class to instantiate is selected based on the "),Qve=a("code"),R8r=o("model_type"),P8r=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),B8r=o("pretrained_model_name_or_path"),I8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),q8r=o("pretrained_model_name_or_path"),N8r=o(":"),j8r=l(),DL=a("ul"),l4=a("li"),Jve=a("strong"),D8r=o("bert"),G8r=o(" \u2014 "),oU=a("a"),O8r=o("TFBertForNextSentencePrediction"),V8r=o(" (BERT model)"),X8r=l(),i4=a("li"),Yve=a("strong"),z8r=o("mobilebert"),W8r=o(" \u2014 "),rU=a("a"),Q8r=o("TFMobileBertForNextSentencePrediction"),H8r=o(" (MobileBERT model)"),U8r=l(),F(d4.$$.fragment),MNe=l(),gc=a("h2"),c4=a("a"),Kve=a("span"),F(GL.$$.fragment),J8r=l(),Zve=a("span"),Y8r=o("TFAutoModelForTableQuestionAnswering"),ENe=l(),sr=a("div"),F(OL.$$.fragment),K8r=l(),hc=a("p"),Z8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tU=a("a"),eMr=o("from_pretrained()"),oMr=o(" class method or the "),aU=a("a"),rMr=o("from_config()"),tMr=o(` class
method.`),aMr=l(),VL=a("p"),nMr=o("This class cannot be instantiated directly using "),e3e=a("code"),sMr=o("__init__()"),lMr=o(" (throws an error)."),iMr=l(),It=a("div"),F(XL.$$.fragment),dMr=l(),o3e=a("p"),cMr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fMr=l(),pc=a("p"),mMr=o(`Note:
Loading a model from its configuration file does `),r3e=a("strong"),gMr=o("not"),hMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),pMr=o("from_pretrained()"),_Mr=o(" to load the model weights."),uMr=l(),F(f4.$$.fragment),bMr=l(),Pr=a("div"),F(zL.$$.fragment),vMr=l(),t3e=a("p"),FMr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TMr=l(),dn=a("p"),MMr=o("The model class to instantiate is selected based on the "),a3e=a("code"),EMr=o("model_type"),CMr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),wMr=o("pretrained_model_name_or_path"),AMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),yMr=o("pretrained_model_name_or_path"),LMr=o(":"),xMr=l(),l3e=a("ul"),m4=a("li"),i3e=a("strong"),$Mr=o("tapas"),kMr=o(" \u2014 "),sU=a("a"),SMr=o("TFTapasForQuestionAnswering"),RMr=o(" (TAPAS model)"),PMr=l(),F(g4.$$.fragment),CNe=l(),_c=a("h2"),h4=a("a"),d3e=a("span"),F(WL.$$.fragment),BMr=l(),c3e=a("span"),IMr=o("TFAutoModelForTokenClassification"),wNe=l(),lr=a("div"),F(QL.$$.fragment),qMr=l(),uc=a("p"),NMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lU=a("a"),jMr=o("from_pretrained()"),DMr=o(" class method or the "),iU=a("a"),GMr=o("from_config()"),OMr=o(` class
method.`),VMr=l(),HL=a("p"),XMr=o("This class cannot be instantiated directly using "),f3e=a("code"),zMr=o("__init__()"),WMr=o(" (throws an error)."),QMr=l(),qt=a("div"),F(UL.$$.fragment),HMr=l(),m3e=a("p"),UMr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JMr=l(),bc=a("p"),YMr=o(`Note:
Loading a model from its configuration file does `),g3e=a("strong"),KMr=o("not"),ZMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),e4r=o("from_pretrained()"),o4r=o(" to load the model weights."),r4r=l(),F(p4.$$.fragment),t4r=l(),Br=a("div"),F(JL.$$.fragment),a4r=l(),h3e=a("p"),n4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s4r=l(),cn=a("p"),l4r=o("The model class to instantiate is selected based on the "),p3e=a("code"),i4r=o("model_type"),d4r=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),c4r=o("pretrained_model_name_or_path"),f4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),m4r=o("pretrained_model_name_or_path"),g4r=o(":"),h4r=l(),de=a("ul"),_4=a("li"),b3e=a("strong"),p4r=o("albert"),_4r=o(" \u2014 "),cU=a("a"),u4r=o("TFAlbertForTokenClassification"),b4r=o(" (ALBERT model)"),v4r=l(),u4=a("li"),v3e=a("strong"),F4r=o("bert"),T4r=o(" \u2014 "),fU=a("a"),M4r=o("TFBertForTokenClassification"),E4r=o(" (BERT model)"),C4r=l(),b4=a("li"),F3e=a("strong"),w4r=o("camembert"),A4r=o(" \u2014 "),mU=a("a"),y4r=o("TFCamembertForTokenClassification"),L4r=o(" (CamemBERT model)"),x4r=l(),v4=a("li"),T3e=a("strong"),$4r=o("convbert"),k4r=o(" \u2014 "),gU=a("a"),S4r=o("TFConvBertForTokenClassification"),R4r=o(" (ConvBERT model)"),P4r=l(),F4=a("li"),M3e=a("strong"),B4r=o("deberta"),I4r=o(" \u2014 "),hU=a("a"),q4r=o("TFDebertaForTokenClassification"),N4r=o(" (DeBERTa model)"),j4r=l(),T4=a("li"),E3e=a("strong"),D4r=o("deberta-v2"),G4r=o(" \u2014 "),pU=a("a"),O4r=o("TFDebertaV2ForTokenClassification"),V4r=o(" (DeBERTa-v2 model)"),X4r=l(),M4=a("li"),C3e=a("strong"),z4r=o("distilbert"),W4r=o(" \u2014 "),_U=a("a"),Q4r=o("TFDistilBertForTokenClassification"),H4r=o(" (DistilBERT model)"),U4r=l(),E4=a("li"),w3e=a("strong"),J4r=o("electra"),Y4r=o(" \u2014 "),uU=a("a"),K4r=o("TFElectraForTokenClassification"),Z4r=o(" (ELECTRA model)"),eEr=l(),C4=a("li"),A3e=a("strong"),oEr=o("flaubert"),rEr=o(" \u2014 "),bU=a("a"),tEr=o("TFFlaubertForTokenClassification"),aEr=o(" (FlauBERT model)"),nEr=l(),w4=a("li"),y3e=a("strong"),sEr=o("funnel"),lEr=o(" \u2014 "),vU=a("a"),iEr=o("TFFunnelForTokenClassification"),dEr=o(" (Funnel Transformer model)"),cEr=l(),A4=a("li"),L3e=a("strong"),fEr=o("layoutlm"),mEr=o(" \u2014 "),FU=a("a"),gEr=o("TFLayoutLMForTokenClassification"),hEr=o(" (LayoutLM model)"),pEr=l(),y4=a("li"),x3e=a("strong"),_Er=o("longformer"),uEr=o(" \u2014 "),TU=a("a"),bEr=o("TFLongformerForTokenClassification"),vEr=o(" (Longformer model)"),FEr=l(),L4=a("li"),$3e=a("strong"),TEr=o("mobilebert"),MEr=o(" \u2014 "),MU=a("a"),EEr=o("TFMobileBertForTokenClassification"),CEr=o(" (MobileBERT model)"),wEr=l(),x4=a("li"),k3e=a("strong"),AEr=o("mpnet"),yEr=o(" \u2014 "),EU=a("a"),LEr=o("TFMPNetForTokenClassification"),xEr=o(" (MPNet model)"),$Er=l(),$4=a("li"),S3e=a("strong"),kEr=o("rembert"),SEr=o(" \u2014 "),CU=a("a"),REr=o("TFRemBertForTokenClassification"),PEr=o(" (RemBERT model)"),BEr=l(),k4=a("li"),R3e=a("strong"),IEr=o("roberta"),qEr=o(" \u2014 "),wU=a("a"),NEr=o("TFRobertaForTokenClassification"),jEr=o(" (RoBERTa model)"),DEr=l(),S4=a("li"),P3e=a("strong"),GEr=o("roformer"),OEr=o(" \u2014 "),AU=a("a"),VEr=o("TFRoFormerForTokenClassification"),XEr=o(" (RoFormer model)"),zEr=l(),R4=a("li"),B3e=a("strong"),WEr=o("xlm"),QEr=o(" \u2014 "),yU=a("a"),HEr=o("TFXLMForTokenClassification"),UEr=o(" (XLM model)"),JEr=l(),P4=a("li"),I3e=a("strong"),YEr=o("xlm-roberta"),KEr=o(" \u2014 "),LU=a("a"),ZEr=o("TFXLMRobertaForTokenClassification"),eCr=o(" (XLM-RoBERTa model)"),oCr=l(),B4=a("li"),q3e=a("strong"),rCr=o("xlnet"),tCr=o(" \u2014 "),xU=a("a"),aCr=o("TFXLNetForTokenClassification"),nCr=o(" (XLNet model)"),sCr=l(),F(I4.$$.fragment),ANe=l(),vc=a("h2"),q4=a("a"),N3e=a("span"),F(YL.$$.fragment),lCr=l(),j3e=a("span"),iCr=o("TFAutoModelForQuestionAnswering"),yNe=l(),ir=a("div"),F(KL.$$.fragment),dCr=l(),Fc=a("p"),cCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$U=a("a"),fCr=o("from_pretrained()"),mCr=o(" class method or the "),kU=a("a"),gCr=o("from_config()"),hCr=o(` class
method.`),pCr=l(),ZL=a("p"),_Cr=o("This class cannot be instantiated directly using "),D3e=a("code"),uCr=o("__init__()"),bCr=o(" (throws an error)."),vCr=l(),Nt=a("div"),F(e9.$$.fragment),FCr=l(),G3e=a("p"),TCr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MCr=l(),Tc=a("p"),ECr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),CCr=o("not"),wCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),ACr=o("from_pretrained()"),yCr=o(" to load the model weights."),LCr=l(),F(N4.$$.fragment),xCr=l(),Ir=a("div"),F(o9.$$.fragment),$Cr=l(),V3e=a("p"),kCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SCr=l(),fn=a("p"),RCr=o("The model class to instantiate is selected based on the "),X3e=a("code"),PCr=o("model_type"),BCr=o(` property of the config object (either
passed as an argument or loaded from `),z3e=a("code"),ICr=o("pretrained_model_name_or_path"),qCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=a("code"),NCr=o("pretrained_model_name_or_path"),jCr=o(":"),DCr=l(),ce=a("ul"),j4=a("li"),Q3e=a("strong"),GCr=o("albert"),OCr=o(" \u2014 "),RU=a("a"),VCr=o("TFAlbertForQuestionAnswering"),XCr=o(" (ALBERT model)"),zCr=l(),D4=a("li"),H3e=a("strong"),WCr=o("bert"),QCr=o(" \u2014 "),PU=a("a"),HCr=o("TFBertForQuestionAnswering"),UCr=o(" (BERT model)"),JCr=l(),G4=a("li"),U3e=a("strong"),YCr=o("camembert"),KCr=o(" \u2014 "),BU=a("a"),ZCr=o("TFCamembertForQuestionAnswering"),e5r=o(" (CamemBERT model)"),o5r=l(),O4=a("li"),J3e=a("strong"),r5r=o("convbert"),t5r=o(" \u2014 "),IU=a("a"),a5r=o("TFConvBertForQuestionAnswering"),n5r=o(" (ConvBERT model)"),s5r=l(),V4=a("li"),Y3e=a("strong"),l5r=o("deberta"),i5r=o(" \u2014 "),qU=a("a"),d5r=o("TFDebertaForQuestionAnswering"),c5r=o(" (DeBERTa model)"),f5r=l(),X4=a("li"),K3e=a("strong"),m5r=o("deberta-v2"),g5r=o(" \u2014 "),NU=a("a"),h5r=o("TFDebertaV2ForQuestionAnswering"),p5r=o(" (DeBERTa-v2 model)"),_5r=l(),z4=a("li"),Z3e=a("strong"),u5r=o("distilbert"),b5r=o(" \u2014 "),jU=a("a"),v5r=o("TFDistilBertForQuestionAnswering"),F5r=o(" (DistilBERT model)"),T5r=l(),W4=a("li"),eFe=a("strong"),M5r=o("electra"),E5r=o(" \u2014 "),DU=a("a"),C5r=o("TFElectraForQuestionAnswering"),w5r=o(" (ELECTRA model)"),A5r=l(),Q4=a("li"),oFe=a("strong"),y5r=o("flaubert"),L5r=o(" \u2014 "),GU=a("a"),x5r=o("TFFlaubertForQuestionAnsweringSimple"),$5r=o(" (FlauBERT model)"),k5r=l(),H4=a("li"),rFe=a("strong"),S5r=o("funnel"),R5r=o(" \u2014 "),OU=a("a"),P5r=o("TFFunnelForQuestionAnswering"),B5r=o(" (Funnel Transformer model)"),I5r=l(),U4=a("li"),tFe=a("strong"),q5r=o("gptj"),N5r=o(" \u2014 "),VU=a("a"),j5r=o("TFGPTJForQuestionAnswering"),D5r=o(" (GPT-J model)"),G5r=l(),J4=a("li"),aFe=a("strong"),O5r=o("longformer"),V5r=o(" \u2014 "),XU=a("a"),X5r=o("TFLongformerForQuestionAnswering"),z5r=o(" (Longformer model)"),W5r=l(),Y4=a("li"),nFe=a("strong"),Q5r=o("mobilebert"),H5r=o(" \u2014 "),zU=a("a"),U5r=o("TFMobileBertForQuestionAnswering"),J5r=o(" (MobileBERT model)"),Y5r=l(),K4=a("li"),sFe=a("strong"),K5r=o("mpnet"),Z5r=o(" \u2014 "),WU=a("a"),ewr=o("TFMPNetForQuestionAnswering"),owr=o(" (MPNet model)"),rwr=l(),Z4=a("li"),lFe=a("strong"),twr=o("rembert"),awr=o(" \u2014 "),QU=a("a"),nwr=o("TFRemBertForQuestionAnswering"),swr=o(" (RemBERT model)"),lwr=l(),eE=a("li"),iFe=a("strong"),iwr=o("roberta"),dwr=o(" \u2014 "),HU=a("a"),cwr=o("TFRobertaForQuestionAnswering"),fwr=o(" (RoBERTa model)"),mwr=l(),oE=a("li"),dFe=a("strong"),gwr=o("roformer"),hwr=o(" \u2014 "),UU=a("a"),pwr=o("TFRoFormerForQuestionAnswering"),_wr=o(" (RoFormer model)"),uwr=l(),rE=a("li"),cFe=a("strong"),bwr=o("xlm"),vwr=o(" \u2014 "),JU=a("a"),Fwr=o("TFXLMForQuestionAnsweringSimple"),Twr=o(" (XLM model)"),Mwr=l(),tE=a("li"),fFe=a("strong"),Ewr=o("xlm-roberta"),Cwr=o(" \u2014 "),YU=a("a"),wwr=o("TFXLMRobertaForQuestionAnswering"),Awr=o(" (XLM-RoBERTa model)"),ywr=l(),aE=a("li"),mFe=a("strong"),Lwr=o("xlnet"),xwr=o(" \u2014 "),KU=a("a"),$wr=o("TFXLNetForQuestionAnsweringSimple"),kwr=o(" (XLNet model)"),Swr=l(),F(nE.$$.fragment),LNe=l(),Mc=a("h2"),sE=a("a"),gFe=a("span"),F(r9.$$.fragment),Rwr=l(),hFe=a("span"),Pwr=o("TFAutoModelForVision2Seq"),xNe=l(),dr=a("div"),F(t9.$$.fragment),Bwr=l(),Ec=a("p"),Iwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZU=a("a"),qwr=o("from_pretrained()"),Nwr=o(" class method or the "),eJ=a("a"),jwr=o("from_config()"),Dwr=o(` class
method.`),Gwr=l(),a9=a("p"),Owr=o("This class cannot be instantiated directly using "),pFe=a("code"),Vwr=o("__init__()"),Xwr=o(" (throws an error)."),zwr=l(),jt=a("div"),F(n9.$$.fragment),Wwr=l(),_Fe=a("p"),Qwr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hwr=l(),Cc=a("p"),Uwr=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),Jwr=o("not"),Ywr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),Kwr=o("from_pretrained()"),Zwr=o(" to load the model weights."),e0r=l(),F(lE.$$.fragment),o0r=l(),qr=a("div"),F(s9.$$.fragment),r0r=l(),bFe=a("p"),t0r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a0r=l(),mn=a("p"),n0r=o("The model class to instantiate is selected based on the "),vFe=a("code"),s0r=o("model_type"),l0r=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),i0r=o("pretrained_model_name_or_path"),d0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),c0r=o("pretrained_model_name_or_path"),f0r=o(":"),m0r=l(),MFe=a("ul"),iE=a("li"),EFe=a("strong"),g0r=o("vision-encoder-decoder"),h0r=o(" \u2014 "),rJ=a("a"),p0r=o("TFVisionEncoderDecoderModel"),_0r=o(" (Vision Encoder decoder model)"),u0r=l(),F(dE.$$.fragment),$Ne=l(),wc=a("h2"),cE=a("a"),CFe=a("span"),F(l9.$$.fragment),b0r=l(),wFe=a("span"),v0r=o("TFAutoModelForSpeechSeq2Seq"),kNe=l(),cr=a("div"),F(i9.$$.fragment),F0r=l(),Ac=a("p"),T0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tJ=a("a"),M0r=o("from_pretrained()"),E0r=o(" class method or the "),aJ=a("a"),C0r=o("from_config()"),w0r=o(` class
method.`),A0r=l(),d9=a("p"),y0r=o("This class cannot be instantiated directly using "),AFe=a("code"),L0r=o("__init__()"),x0r=o(" (throws an error)."),$0r=l(),Dt=a("div"),F(c9.$$.fragment),k0r=l(),yFe=a("p"),S0r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R0r=l(),yc=a("p"),P0r=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),B0r=o("not"),I0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),q0r=o("from_pretrained()"),N0r=o(" to load the model weights."),j0r=l(),F(fE.$$.fragment),D0r=l(),Nr=a("div"),F(f9.$$.fragment),G0r=l(),xFe=a("p"),O0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),V0r=l(),gn=a("p"),X0r=o("The model class to instantiate is selected based on the "),$Fe=a("code"),z0r=o("model_type"),W0r=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),Q0r=o("pretrained_model_name_or_path"),H0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),U0r=o("pretrained_model_name_or_path"),J0r=o(":"),Y0r=l(),RFe=a("ul"),mE=a("li"),PFe=a("strong"),K0r=o("speech_to_text"),Z0r=o(" \u2014 "),sJ=a("a"),eAr=o("TFSpeech2TextForConditionalGeneration"),oAr=o(" (Speech2Text model)"),rAr=l(),F(gE.$$.fragment),SNe=l(),Lc=a("h2"),hE=a("a"),BFe=a("span"),F(m9.$$.fragment),tAr=l(),IFe=a("span"),aAr=o("FlaxAutoModel"),RNe=l(),fr=a("div"),F(g9.$$.fragment),nAr=l(),xc=a("p"),sAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lJ=a("a"),lAr=o("from_pretrained()"),iAr=o(" class method or the "),iJ=a("a"),dAr=o("from_config()"),cAr=o(` class
method.`),fAr=l(),h9=a("p"),mAr=o("This class cannot be instantiated directly using "),qFe=a("code"),gAr=o("__init__()"),hAr=o(" (throws an error)."),pAr=l(),Gt=a("div"),F(p9.$$.fragment),_Ar=l(),NFe=a("p"),uAr=o("Instantiates one of the base model classes of the library from a configuration."),bAr=l(),$c=a("p"),vAr=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),FAr=o("not"),TAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),MAr=o("from_pretrained()"),EAr=o(" to load the model weights."),CAr=l(),F(pE.$$.fragment),wAr=l(),jr=a("div"),F(_9.$$.fragment),AAr=l(),DFe=a("p"),yAr=o("Instantiate one of the base model classes of the library from a pretrained model."),LAr=l(),hn=a("p"),xAr=o("The model class to instantiate is selected based on the "),GFe=a("code"),$Ar=o("model_type"),kAr=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),SAr=o("pretrained_model_name_or_path"),RAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),PAr=o("pretrained_model_name_or_path"),BAr=o(":"),IAr=l(),te=a("ul"),_E=a("li"),XFe=a("strong"),qAr=o("albert"),NAr=o(" \u2014 "),cJ=a("a"),jAr=o("FlaxAlbertModel"),DAr=o(" (ALBERT model)"),GAr=l(),uE=a("li"),zFe=a("strong"),OAr=o("bart"),VAr=o(" \u2014 "),fJ=a("a"),XAr=o("FlaxBartModel"),zAr=o(" (BART model)"),WAr=l(),bE=a("li"),WFe=a("strong"),QAr=o("beit"),HAr=o(" \u2014 "),mJ=a("a"),UAr=o("FlaxBeitModel"),JAr=o(" (BEiT model)"),YAr=l(),vE=a("li"),QFe=a("strong"),KAr=o("bert"),ZAr=o(" \u2014 "),gJ=a("a"),e6r=o("FlaxBertModel"),o6r=o(" (BERT model)"),r6r=l(),FE=a("li"),HFe=a("strong"),t6r=o("big_bird"),a6r=o(" \u2014 "),hJ=a("a"),n6r=o("FlaxBigBirdModel"),s6r=o(" (BigBird model)"),l6r=l(),TE=a("li"),UFe=a("strong"),i6r=o("blenderbot"),d6r=o(" \u2014 "),pJ=a("a"),c6r=o("FlaxBlenderbotModel"),f6r=o(" (Blenderbot model)"),m6r=l(),ME=a("li"),JFe=a("strong"),g6r=o("blenderbot-small"),h6r=o(" \u2014 "),_J=a("a"),p6r=o("FlaxBlenderbotSmallModel"),_6r=o(" (BlenderbotSmall model)"),u6r=l(),EE=a("li"),YFe=a("strong"),b6r=o("clip"),v6r=o(" \u2014 "),uJ=a("a"),F6r=o("FlaxCLIPModel"),T6r=o(" (CLIP model)"),M6r=l(),CE=a("li"),KFe=a("strong"),E6r=o("distilbert"),C6r=o(" \u2014 "),bJ=a("a"),w6r=o("FlaxDistilBertModel"),A6r=o(" (DistilBERT model)"),y6r=l(),wE=a("li"),ZFe=a("strong"),L6r=o("electra"),x6r=o(" \u2014 "),vJ=a("a"),$6r=o("FlaxElectraModel"),k6r=o(" (ELECTRA model)"),S6r=l(),AE=a("li"),eTe=a("strong"),R6r=o("gpt2"),P6r=o(" \u2014 "),FJ=a("a"),B6r=o("FlaxGPT2Model"),I6r=o(" (OpenAI GPT-2 model)"),q6r=l(),yE=a("li"),oTe=a("strong"),N6r=o("gpt_neo"),j6r=o(" \u2014 "),TJ=a("a"),D6r=o("FlaxGPTNeoModel"),G6r=o(" (GPT Neo model)"),O6r=l(),LE=a("li"),rTe=a("strong"),V6r=o("gptj"),X6r=o(" \u2014 "),MJ=a("a"),z6r=o("FlaxGPTJModel"),W6r=o(" (GPT-J model)"),Q6r=l(),xE=a("li"),tTe=a("strong"),H6r=o("marian"),U6r=o(" \u2014 "),EJ=a("a"),J6r=o("FlaxMarianModel"),Y6r=o(" (Marian model)"),K6r=l(),$E=a("li"),aTe=a("strong"),Z6r=o("mbart"),eyr=o(" \u2014 "),CJ=a("a"),oyr=o("FlaxMBartModel"),ryr=o(" (mBART model)"),tyr=l(),kE=a("li"),nTe=a("strong"),ayr=o("mt5"),nyr=o(" \u2014 "),wJ=a("a"),syr=o("FlaxMT5Model"),lyr=o(" (mT5 model)"),iyr=l(),SE=a("li"),sTe=a("strong"),dyr=o("pegasus"),cyr=o(" \u2014 "),AJ=a("a"),fyr=o("FlaxPegasusModel"),myr=o(" (Pegasus model)"),gyr=l(),RE=a("li"),lTe=a("strong"),hyr=o("roberta"),pyr=o(" \u2014 "),yJ=a("a"),_yr=o("FlaxRobertaModel"),uyr=o(" (RoBERTa model)"),byr=l(),PE=a("li"),iTe=a("strong"),vyr=o("roformer"),Fyr=o(" \u2014 "),LJ=a("a"),Tyr=o("FlaxRoFormerModel"),Myr=o(" (RoFormer model)"),Eyr=l(),BE=a("li"),dTe=a("strong"),Cyr=o("t5"),wyr=o(" \u2014 "),xJ=a("a"),Ayr=o("FlaxT5Model"),yyr=o(" (T5 model)"),Lyr=l(),IE=a("li"),cTe=a("strong"),xyr=o("vision-text-dual-encoder"),$yr=o(" \u2014 "),$J=a("a"),kyr=o("FlaxVisionTextDualEncoderModel"),Syr=o(" (VisionTextDualEncoder model)"),Ryr=l(),qE=a("li"),fTe=a("strong"),Pyr=o("vit"),Byr=o(" \u2014 "),kJ=a("a"),Iyr=o("FlaxViTModel"),qyr=o(" (ViT model)"),Nyr=l(),NE=a("li"),mTe=a("strong"),jyr=o("wav2vec2"),Dyr=o(" \u2014 "),SJ=a("a"),Gyr=o("FlaxWav2Vec2Model"),Oyr=o(" (Wav2Vec2 model)"),Vyr=l(),jE=a("li"),gTe=a("strong"),Xyr=o("xglm"),zyr=o(" \u2014 "),RJ=a("a"),Wyr=o("FlaxXGLMModel"),Qyr=o(" (XGLM model)"),Hyr=l(),DE=a("li"),hTe=a("strong"),Uyr=o("xlm-roberta"),Jyr=o(" \u2014 "),PJ=a("a"),Yyr=o("FlaxXLMRobertaModel"),Kyr=o(" (XLM-RoBERTa model)"),Zyr=l(),F(GE.$$.fragment),PNe=l(),kc=a("h2"),OE=a("a"),pTe=a("span"),F(u9.$$.fragment),eLr=l(),_Te=a("span"),oLr=o("FlaxAutoModelForCausalLM"),BNe=l(),mr=a("div"),F(b9.$$.fragment),rLr=l(),Sc=a("p"),tLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BJ=a("a"),aLr=o("from_pretrained()"),nLr=o(" class method or the "),IJ=a("a"),sLr=o("from_config()"),lLr=o(` class
method.`),iLr=l(),v9=a("p"),dLr=o("This class cannot be instantiated directly using "),uTe=a("code"),cLr=o("__init__()"),fLr=o(" (throws an error)."),mLr=l(),Ot=a("div"),F(F9.$$.fragment),gLr=l(),bTe=a("p"),hLr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pLr=l(),Rc=a("p"),_Lr=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),uLr=o("not"),bLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),vLr=o("from_pretrained()"),FLr=o(" to load the model weights."),TLr=l(),F(VE.$$.fragment),MLr=l(),Dr=a("div"),F(T9.$$.fragment),ELr=l(),FTe=a("p"),CLr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wLr=l(),pn=a("p"),ALr=o("The model class to instantiate is selected based on the "),TTe=a("code"),yLr=o("model_type"),LLr=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),xLr=o("pretrained_model_name_or_path"),$Lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(":"),RLr=l(),Re=a("ul"),XE=a("li"),CTe=a("strong"),PLr=o("bart"),BLr=o(" \u2014 "),NJ=a("a"),ILr=o("FlaxBartForCausalLM"),qLr=o(" (BART model)"),NLr=l(),zE=a("li"),wTe=a("strong"),jLr=o("bert"),DLr=o(" \u2014 "),jJ=a("a"),GLr=o("FlaxBertForCausalLM"),OLr=o(" (BERT model)"),VLr=l(),WE=a("li"),ATe=a("strong"),XLr=o("big_bird"),zLr=o(" \u2014 "),DJ=a("a"),WLr=o("FlaxBigBirdForCausalLM"),QLr=o(" (BigBird model)"),HLr=l(),QE=a("li"),yTe=a("strong"),ULr=o("electra"),JLr=o(" \u2014 "),GJ=a("a"),YLr=o("FlaxElectraForCausalLM"),KLr=o(" (ELECTRA model)"),ZLr=l(),HE=a("li"),LTe=a("strong"),e9r=o("gpt2"),o9r=o(" \u2014 "),OJ=a("a"),r9r=o("FlaxGPT2LMHeadModel"),t9r=o(" (OpenAI GPT-2 model)"),a9r=l(),UE=a("li"),xTe=a("strong"),n9r=o("gpt_neo"),s9r=o(" \u2014 "),VJ=a("a"),l9r=o("FlaxGPTNeoForCausalLM"),i9r=o(" (GPT Neo model)"),d9r=l(),JE=a("li"),$Te=a("strong"),c9r=o("gptj"),f9r=o(" \u2014 "),XJ=a("a"),m9r=o("FlaxGPTJForCausalLM"),g9r=o(" (GPT-J model)"),h9r=l(),YE=a("li"),kTe=a("strong"),p9r=o("roberta"),_9r=o(" \u2014 "),zJ=a("a"),u9r=o("FlaxRobertaForCausalLM"),b9r=o(" (RoBERTa model)"),v9r=l(),KE=a("li"),STe=a("strong"),F9r=o("xglm"),T9r=o(" \u2014 "),WJ=a("a"),M9r=o("FlaxXGLMForCausalLM"),E9r=o(" (XGLM model)"),C9r=l(),F(ZE.$$.fragment),INe=l(),Pc=a("h2"),eC=a("a"),RTe=a("span"),F(M9.$$.fragment),w9r=l(),PTe=a("span"),A9r=o("FlaxAutoModelForPreTraining"),qNe=l(),gr=a("div"),F(E9.$$.fragment),y9r=l(),Bc=a("p"),L9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QJ=a("a"),x9r=o("from_pretrained()"),$9r=o(" class method or the "),HJ=a("a"),k9r=o("from_config()"),S9r=o(` class
method.`),R9r=l(),C9=a("p"),P9r=o("This class cannot be instantiated directly using "),BTe=a("code"),B9r=o("__init__()"),I9r=o(" (throws an error)."),q9r=l(),Vt=a("div"),F(w9.$$.fragment),N9r=l(),ITe=a("p"),j9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),D9r=l(),Ic=a("p"),G9r=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),O9r=o("not"),V9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),X9r=o("from_pretrained()"),z9r=o(" to load the model weights."),W9r=l(),F(oC.$$.fragment),Q9r=l(),Gr=a("div"),F(A9.$$.fragment),H9r=l(),NTe=a("p"),U9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),J9r=l(),_n=a("p"),Y9r=o("The model class to instantiate is selected based on the "),jTe=a("code"),K9r=o("model_type"),Z9r=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),rxr=o("pretrained_model_name_or_path"),txr=o(":"),axr=l(),Ee=a("ul"),rC=a("li"),OTe=a("strong"),nxr=o("albert"),sxr=o(" \u2014 "),JJ=a("a"),lxr=o("FlaxAlbertForPreTraining"),ixr=o(" (ALBERT model)"),dxr=l(),tC=a("li"),VTe=a("strong"),cxr=o("bart"),fxr=o(" \u2014 "),YJ=a("a"),mxr=o("FlaxBartForConditionalGeneration"),gxr=o(" (BART model)"),hxr=l(),aC=a("li"),XTe=a("strong"),pxr=o("bert"),_xr=o(" \u2014 "),KJ=a("a"),uxr=o("FlaxBertForPreTraining"),bxr=o(" (BERT model)"),vxr=l(),nC=a("li"),zTe=a("strong"),Fxr=o("big_bird"),Txr=o(" \u2014 "),ZJ=a("a"),Mxr=o("FlaxBigBirdForPreTraining"),Exr=o(" (BigBird model)"),Cxr=l(),sC=a("li"),WTe=a("strong"),wxr=o("electra"),Axr=o(" \u2014 "),eY=a("a"),yxr=o("FlaxElectraForPreTraining"),Lxr=o(" (ELECTRA model)"),xxr=l(),lC=a("li"),QTe=a("strong"),$xr=o("mbart"),kxr=o(" \u2014 "),oY=a("a"),Sxr=o("FlaxMBartForConditionalGeneration"),Rxr=o(" (mBART model)"),Pxr=l(),iC=a("li"),HTe=a("strong"),Bxr=o("mt5"),Ixr=o(" \u2014 "),rY=a("a"),qxr=o("FlaxMT5ForConditionalGeneration"),Nxr=o(" (mT5 model)"),jxr=l(),dC=a("li"),UTe=a("strong"),Dxr=o("roberta"),Gxr=o(" \u2014 "),tY=a("a"),Oxr=o("FlaxRobertaForMaskedLM"),Vxr=o(" (RoBERTa model)"),Xxr=l(),cC=a("li"),JTe=a("strong"),zxr=o("roformer"),Wxr=o(" \u2014 "),aY=a("a"),Qxr=o("FlaxRoFormerForMaskedLM"),Hxr=o(" (RoFormer model)"),Uxr=l(),fC=a("li"),YTe=a("strong"),Jxr=o("t5"),Yxr=o(" \u2014 "),nY=a("a"),Kxr=o("FlaxT5ForConditionalGeneration"),Zxr=o(" (T5 model)"),e$r=l(),mC=a("li"),KTe=a("strong"),o$r=o("wav2vec2"),r$r=o(" \u2014 "),sY=a("a"),t$r=o("FlaxWav2Vec2ForPreTraining"),a$r=o(" (Wav2Vec2 model)"),n$r=l(),gC=a("li"),ZTe=a("strong"),s$r=o("xlm-roberta"),l$r=o(" \u2014 "),lY=a("a"),i$r=o("FlaxXLMRobertaForMaskedLM"),d$r=o(" (XLM-RoBERTa model)"),c$r=l(),F(hC.$$.fragment),NNe=l(),qc=a("h2"),pC=a("a"),e8e=a("span"),F(y9.$$.fragment),f$r=l(),o8e=a("span"),m$r=o("FlaxAutoModelForMaskedLM"),jNe=l(),hr=a("div"),F(L9.$$.fragment),g$r=l(),Nc=a("p"),h$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=a("a"),p$r=o("from_pretrained()"),_$r=o(" class method or the "),dY=a("a"),u$r=o("from_config()"),b$r=o(` class
method.`),v$r=l(),x9=a("p"),F$r=o("This class cannot be instantiated directly using "),r8e=a("code"),T$r=o("__init__()"),M$r=o(" (throws an error)."),E$r=l(),Xt=a("div"),F($9.$$.fragment),C$r=l(),t8e=a("p"),w$r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A$r=l(),jc=a("p"),y$r=o(`Note:
Loading a model from its configuration file does `),a8e=a("strong"),L$r=o("not"),x$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),$$r=o("from_pretrained()"),k$r=o(" to load the model weights."),S$r=l(),F(_C.$$.fragment),R$r=l(),Or=a("div"),F(k9.$$.fragment),P$r=l(),n8e=a("p"),B$r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I$r=l(),un=a("p"),q$r=o("The model class to instantiate is selected based on the "),s8e=a("code"),N$r=o("model_type"),j$r=o(` property of the config object (either
passed as an argument or loaded from `),l8e=a("code"),D$r=o("pretrained_model_name_or_path"),G$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=a("code"),O$r=o("pretrained_model_name_or_path"),V$r=o(":"),X$r=l(),Le=a("ul"),uC=a("li"),d8e=a("strong"),z$r=o("albert"),W$r=o(" \u2014 "),fY=a("a"),Q$r=o("FlaxAlbertForMaskedLM"),H$r=o(" (ALBERT model)"),U$r=l(),bC=a("li"),c8e=a("strong"),J$r=o("bart"),Y$r=o(" \u2014 "),mY=a("a"),K$r=o("FlaxBartForConditionalGeneration"),Z$r=o(" (BART model)"),ekr=l(),vC=a("li"),f8e=a("strong"),okr=o("bert"),rkr=o(" \u2014 "),gY=a("a"),tkr=o("FlaxBertForMaskedLM"),akr=o(" (BERT model)"),nkr=l(),FC=a("li"),m8e=a("strong"),skr=o("big_bird"),lkr=o(" \u2014 "),hY=a("a"),ikr=o("FlaxBigBirdForMaskedLM"),dkr=o(" (BigBird model)"),ckr=l(),TC=a("li"),g8e=a("strong"),fkr=o("distilbert"),mkr=o(" \u2014 "),pY=a("a"),gkr=o("FlaxDistilBertForMaskedLM"),hkr=o(" (DistilBERT model)"),pkr=l(),MC=a("li"),h8e=a("strong"),_kr=o("electra"),ukr=o(" \u2014 "),_Y=a("a"),bkr=o("FlaxElectraForMaskedLM"),vkr=o(" (ELECTRA model)"),Fkr=l(),EC=a("li"),p8e=a("strong"),Tkr=o("mbart"),Mkr=o(" \u2014 "),uY=a("a"),Ekr=o("FlaxMBartForConditionalGeneration"),Ckr=o(" (mBART model)"),wkr=l(),CC=a("li"),_8e=a("strong"),Akr=o("roberta"),ykr=o(" \u2014 "),bY=a("a"),Lkr=o("FlaxRobertaForMaskedLM"),xkr=o(" (RoBERTa model)"),$kr=l(),wC=a("li"),u8e=a("strong"),kkr=o("roformer"),Skr=o(" \u2014 "),vY=a("a"),Rkr=o("FlaxRoFormerForMaskedLM"),Pkr=o(" (RoFormer model)"),Bkr=l(),AC=a("li"),b8e=a("strong"),Ikr=o("xlm-roberta"),qkr=o(" \u2014 "),FY=a("a"),Nkr=o("FlaxXLMRobertaForMaskedLM"),jkr=o(" (XLM-RoBERTa model)"),Dkr=l(),F(yC.$$.fragment),DNe=l(),Dc=a("h2"),LC=a("a"),v8e=a("span"),F(S9.$$.fragment),Gkr=l(),F8e=a("span"),Okr=o("FlaxAutoModelForSeq2SeqLM"),GNe=l(),pr=a("div"),F(R9.$$.fragment),Vkr=l(),Gc=a("p"),Xkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TY=a("a"),zkr=o("from_pretrained()"),Wkr=o(" class method or the "),MY=a("a"),Qkr=o("from_config()"),Hkr=o(` class
method.`),Ukr=l(),P9=a("p"),Jkr=o("This class cannot be instantiated directly using "),T8e=a("code"),Ykr=o("__init__()"),Kkr=o(" (throws an error)."),Zkr=l(),zt=a("div"),F(B9.$$.fragment),eSr=l(),M8e=a("p"),oSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rSr=l(),Oc=a("p"),tSr=o(`Note:
Loading a model from its configuration file does `),E8e=a("strong"),aSr=o("not"),nSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),sSr=o("from_pretrained()"),lSr=o(" to load the model weights."),iSr=l(),F(xC.$$.fragment),dSr=l(),Vr=a("div"),F(I9.$$.fragment),cSr=l(),C8e=a("p"),fSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mSr=l(),bn=a("p"),gSr=o("The model class to instantiate is selected based on the "),w8e=a("code"),hSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),A8e=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),Pe=a("ul"),$C=a("li"),L8e=a("strong"),TSr=o("bart"),MSr=o(" \u2014 "),CY=a("a"),ESr=o("FlaxBartForConditionalGeneration"),CSr=o(" (BART model)"),wSr=l(),kC=a("li"),x8e=a("strong"),ASr=o("blenderbot"),ySr=o(" \u2014 "),wY=a("a"),LSr=o("FlaxBlenderbotForConditionalGeneration"),xSr=o(" (Blenderbot model)"),$Sr=l(),SC=a("li"),$8e=a("strong"),kSr=o("blenderbot-small"),SSr=o(" \u2014 "),AY=a("a"),RSr=o("FlaxBlenderbotSmallForConditionalGeneration"),PSr=o(" (BlenderbotSmall model)"),BSr=l(),RC=a("li"),k8e=a("strong"),ISr=o("encoder-decoder"),qSr=o(" \u2014 "),yY=a("a"),NSr=o("FlaxEncoderDecoderModel"),jSr=o(" (Encoder decoder model)"),DSr=l(),PC=a("li"),S8e=a("strong"),GSr=o("marian"),OSr=o(" \u2014 "),LY=a("a"),VSr=o("FlaxMarianMTModel"),XSr=o(" (Marian model)"),zSr=l(),BC=a("li"),R8e=a("strong"),WSr=o("mbart"),QSr=o(" \u2014 "),xY=a("a"),HSr=o("FlaxMBartForConditionalGeneration"),USr=o(" (mBART model)"),JSr=l(),IC=a("li"),P8e=a("strong"),YSr=o("mt5"),KSr=o(" \u2014 "),$Y=a("a"),ZSr=o("FlaxMT5ForConditionalGeneration"),eRr=o(" (mT5 model)"),oRr=l(),qC=a("li"),B8e=a("strong"),rRr=o("pegasus"),tRr=o(" \u2014 "),kY=a("a"),aRr=o("FlaxPegasusForConditionalGeneration"),nRr=o(" (Pegasus model)"),sRr=l(),NC=a("li"),I8e=a("strong"),lRr=o("t5"),iRr=o(" \u2014 "),SY=a("a"),dRr=o("FlaxT5ForConditionalGeneration"),cRr=o(" (T5 model)"),fRr=l(),F(jC.$$.fragment),ONe=l(),Vc=a("h2"),DC=a("a"),q8e=a("span"),F(q9.$$.fragment),mRr=l(),N8e=a("span"),gRr=o("FlaxAutoModelForSequenceClassification"),VNe=l(),_r=a("div"),F(N9.$$.fragment),hRr=l(),Xc=a("p"),pRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RY=a("a"),_Rr=o("from_pretrained()"),uRr=o(" class method or the "),PY=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),j9=a("p"),TRr=o("This class cannot be instantiated directly using "),j8e=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),Wt=a("div"),F(D9.$$.fragment),wRr=l(),D8e=a("p"),ARr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yRr=l(),zc=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),G8e=a("strong"),xRr=o("not"),$Rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),kRr=o("from_pretrained()"),SRr=o(" to load the model weights."),RRr=l(),F(GC.$$.fragment),PRr=l(),Xr=a("div"),F(G9.$$.fragment),BRr=l(),O8e=a("p"),IRr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qRr=l(),vn=a("p"),NRr=o("The model class to instantiate is selected based on the "),V8e=a("code"),jRr=o("model_type"),DRr=o(` property of the config object (either
passed as an argument or loaded from `),X8e=a("code"),GRr=o("pretrained_model_name_or_path"),ORr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(":"),zRr=l(),xe=a("ul"),OC=a("li"),W8e=a("strong"),WRr=o("albert"),QRr=o(" \u2014 "),IY=a("a"),HRr=o("FlaxAlbertForSequenceClassification"),URr=o(" (ALBERT model)"),JRr=l(),VC=a("li"),Q8e=a("strong"),YRr=o("bart"),KRr=o(" \u2014 "),qY=a("a"),ZRr=o("FlaxBartForSequenceClassification"),ePr=o(" (BART model)"),oPr=l(),XC=a("li"),H8e=a("strong"),rPr=o("bert"),tPr=o(" \u2014 "),NY=a("a"),aPr=o("FlaxBertForSequenceClassification"),nPr=o(" (BERT model)"),sPr=l(),zC=a("li"),U8e=a("strong"),lPr=o("big_bird"),iPr=o(" \u2014 "),jY=a("a"),dPr=o("FlaxBigBirdForSequenceClassification"),cPr=o(" (BigBird model)"),fPr=l(),WC=a("li"),J8e=a("strong"),mPr=o("distilbert"),gPr=o(" \u2014 "),DY=a("a"),hPr=o("FlaxDistilBertForSequenceClassification"),pPr=o(" (DistilBERT model)"),_Pr=l(),QC=a("li"),Y8e=a("strong"),uPr=o("electra"),bPr=o(" \u2014 "),GY=a("a"),vPr=o("FlaxElectraForSequenceClassification"),FPr=o(" (ELECTRA model)"),TPr=l(),HC=a("li"),K8e=a("strong"),MPr=o("mbart"),EPr=o(" \u2014 "),OY=a("a"),CPr=o("FlaxMBartForSequenceClassification"),wPr=o(" (mBART model)"),APr=l(),UC=a("li"),Z8e=a("strong"),yPr=o("roberta"),LPr=o(" \u2014 "),VY=a("a"),xPr=o("FlaxRobertaForSequenceClassification"),$Pr=o(" (RoBERTa model)"),kPr=l(),JC=a("li"),eMe=a("strong"),SPr=o("roformer"),RPr=o(" \u2014 "),XY=a("a"),PPr=o("FlaxRoFormerForSequenceClassification"),BPr=o(" (RoFormer model)"),IPr=l(),YC=a("li"),oMe=a("strong"),qPr=o("xlm-roberta"),NPr=o(" \u2014 "),zY=a("a"),jPr=o("FlaxXLMRobertaForSequenceClassification"),DPr=o(" (XLM-RoBERTa model)"),GPr=l(),F(KC.$$.fragment),XNe=l(),Wc=a("h2"),ZC=a("a"),rMe=a("span"),F(O9.$$.fragment),OPr=l(),tMe=a("span"),VPr=o("FlaxAutoModelForQuestionAnswering"),zNe=l(),ur=a("div"),F(V9.$$.fragment),XPr=l(),Qc=a("p"),zPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WY=a("a"),WPr=o("from_pretrained()"),QPr=o(" class method or the "),QY=a("a"),HPr=o("from_config()"),UPr=o(` class
method.`),JPr=l(),X9=a("p"),YPr=o("This class cannot be instantiated directly using "),aMe=a("code"),KPr=o("__init__()"),ZPr=o(" (throws an error)."),eBr=l(),Qt=a("div"),F(z9.$$.fragment),oBr=l(),nMe=a("p"),rBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tBr=l(),Hc=a("p"),aBr=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),nBr=o("not"),sBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),lBr=o("from_pretrained()"),iBr=o(" to load the model weights."),dBr=l(),F(e5.$$.fragment),cBr=l(),zr=a("div"),F(W9.$$.fragment),fBr=l(),lMe=a("p"),mBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gBr=l(),Fn=a("p"),hBr=o("The model class to instantiate is selected based on the "),iMe=a("code"),pBr=o("model_type"),_Br=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),uBr=o("pretrained_model_name_or_path"),bBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(":"),TBr=l(),$e=a("ul"),o5=a("li"),fMe=a("strong"),MBr=o("albert"),EBr=o(" \u2014 "),UY=a("a"),CBr=o("FlaxAlbertForQuestionAnswering"),wBr=o(" (ALBERT model)"),ABr=l(),r5=a("li"),mMe=a("strong"),yBr=o("bart"),LBr=o(" \u2014 "),JY=a("a"),xBr=o("FlaxBartForQuestionAnswering"),$Br=o(" (BART model)"),kBr=l(),t5=a("li"),gMe=a("strong"),SBr=o("bert"),RBr=o(" \u2014 "),YY=a("a"),PBr=o("FlaxBertForQuestionAnswering"),BBr=o(" (BERT model)"),IBr=l(),a5=a("li"),hMe=a("strong"),qBr=o("big_bird"),NBr=o(" \u2014 "),KY=a("a"),jBr=o("FlaxBigBirdForQuestionAnswering"),DBr=o(" (BigBird model)"),GBr=l(),n5=a("li"),pMe=a("strong"),OBr=o("distilbert"),VBr=o(" \u2014 "),ZY=a("a"),XBr=o("FlaxDistilBertForQuestionAnswering"),zBr=o(" (DistilBERT model)"),WBr=l(),s5=a("li"),_Me=a("strong"),QBr=o("electra"),HBr=o(" \u2014 "),eK=a("a"),UBr=o("FlaxElectraForQuestionAnswering"),JBr=o(" (ELECTRA model)"),YBr=l(),l5=a("li"),uMe=a("strong"),KBr=o("mbart"),ZBr=o(" \u2014 "),oK=a("a"),eIr=o("FlaxMBartForQuestionAnswering"),oIr=o(" (mBART model)"),rIr=l(),i5=a("li"),bMe=a("strong"),tIr=o("roberta"),aIr=o(" \u2014 "),rK=a("a"),nIr=o("FlaxRobertaForQuestionAnswering"),sIr=o(" (RoBERTa model)"),lIr=l(),d5=a("li"),vMe=a("strong"),iIr=o("roformer"),dIr=o(" \u2014 "),tK=a("a"),cIr=o("FlaxRoFormerForQuestionAnswering"),fIr=o(" (RoFormer model)"),mIr=l(),c5=a("li"),FMe=a("strong"),gIr=o("xlm-roberta"),hIr=o(" \u2014 "),aK=a("a"),pIr=o("FlaxXLMRobertaForQuestionAnswering"),_Ir=o(" (XLM-RoBERTa model)"),uIr=l(),F(f5.$$.fragment),WNe=l(),Uc=a("h2"),m5=a("a"),TMe=a("span"),F(Q9.$$.fragment),bIr=l(),MMe=a("span"),vIr=o("FlaxAutoModelForTokenClassification"),QNe=l(),br=a("div"),F(H9.$$.fragment),FIr=l(),Jc=a("p"),TIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nK=a("a"),MIr=o("from_pretrained()"),EIr=o(" class method or the "),sK=a("a"),CIr=o("from_config()"),wIr=o(` class
method.`),AIr=l(),U9=a("p"),yIr=o("This class cannot be instantiated directly using "),EMe=a("code"),LIr=o("__init__()"),xIr=o(" (throws an error)."),$Ir=l(),Ht=a("div"),F(J9.$$.fragment),kIr=l(),CMe=a("p"),SIr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RIr=l(),Yc=a("p"),PIr=o(`Note:
Loading a model from its configuration file does `),wMe=a("strong"),BIr=o("not"),IIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),qIr=o("from_pretrained()"),NIr=o(" to load the model weights."),jIr=l(),F(g5.$$.fragment),DIr=l(),Wr=a("div"),F(Y9.$$.fragment),GIr=l(),AMe=a("p"),OIr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VIr=l(),Tn=a("p"),XIr=o("The model class to instantiate is selected based on the "),yMe=a("code"),zIr=o("model_type"),WIr=o(` property of the config object (either
passed as an argument or loaded from `),LMe=a("code"),QIr=o("pretrained_model_name_or_path"),HIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=a("code"),UIr=o("pretrained_model_name_or_path"),JIr=o(":"),YIr=l(),De=a("ul"),h5=a("li"),$Me=a("strong"),KIr=o("albert"),ZIr=o(" \u2014 "),iK=a("a"),eqr=o("FlaxAlbertForTokenClassification"),oqr=o(" (ALBERT model)"),rqr=l(),p5=a("li"),kMe=a("strong"),tqr=o("bert"),aqr=o(" \u2014 "),dK=a("a"),nqr=o("FlaxBertForTokenClassification"),sqr=o(" (BERT model)"),lqr=l(),_5=a("li"),SMe=a("strong"),iqr=o("big_bird"),dqr=o(" \u2014 "),cK=a("a"),cqr=o("FlaxBigBirdForTokenClassification"),fqr=o(" (BigBird model)"),mqr=l(),u5=a("li"),RMe=a("strong"),gqr=o("distilbert"),hqr=o(" \u2014 "),fK=a("a"),pqr=o("FlaxDistilBertForTokenClassification"),_qr=o(" (DistilBERT model)"),uqr=l(),b5=a("li"),PMe=a("strong"),bqr=o("electra"),vqr=o(" \u2014 "),mK=a("a"),Fqr=o("FlaxElectraForTokenClassification"),Tqr=o(" (ELECTRA model)"),Mqr=l(),v5=a("li"),BMe=a("strong"),Eqr=o("roberta"),Cqr=o(" \u2014 "),gK=a("a"),wqr=o("FlaxRobertaForTokenClassification"),Aqr=o(" (RoBERTa model)"),yqr=l(),F5=a("li"),IMe=a("strong"),Lqr=o("roformer"),xqr=o(" \u2014 "),hK=a("a"),$qr=o("FlaxRoFormerForTokenClassification"),kqr=o(" (RoFormer model)"),Sqr=l(),T5=a("li"),qMe=a("strong"),Rqr=o("xlm-roberta"),Pqr=o(" \u2014 "),pK=a("a"),Bqr=o("FlaxXLMRobertaForTokenClassification"),Iqr=o(" (XLM-RoBERTa model)"),qqr=l(),F(M5.$$.fragment),HNe=l(),Kc=a("h2"),E5=a("a"),NMe=a("span"),F(K9.$$.fragment),Nqr=l(),jMe=a("span"),jqr=o("FlaxAutoModelForMultipleChoice"),UNe=l(),vr=a("div"),F(Z9.$$.fragment),Dqr=l(),Zc=a("p"),Gqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_K=a("a"),Oqr=o("from_pretrained()"),Vqr=o(" class method or the "),uK=a("a"),Xqr=o("from_config()"),zqr=o(` class
method.`),Wqr=l(),ex=a("p"),Qqr=o("This class cannot be instantiated directly using "),DMe=a("code"),Hqr=o("__init__()"),Uqr=o(" (throws an error)."),Jqr=l(),Ut=a("div"),F(ox.$$.fragment),Yqr=l(),GMe=a("p"),Kqr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zqr=l(),ef=a("p"),eNr=o(`Note:
Loading a model from its configuration file does `),OMe=a("strong"),oNr=o("not"),rNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=a("a"),tNr=o("from_pretrained()"),aNr=o(" to load the model weights."),nNr=l(),F(C5.$$.fragment),sNr=l(),Qr=a("div"),F(rx.$$.fragment),lNr=l(),VMe=a("p"),iNr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dNr=l(),Mn=a("p"),cNr=o("The model class to instantiate is selected based on the "),XMe=a("code"),fNr=o("model_type"),mNr=o(` property of the config object (either
passed as an argument or loaded from `),zMe=a("code"),gNr=o("pretrained_model_name_or_path"),hNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=a("code"),pNr=o("pretrained_model_name_or_path"),_Nr=o(":"),uNr=l(),Ge=a("ul"),w5=a("li"),QMe=a("strong"),bNr=o("albert"),vNr=o(" \u2014 "),vK=a("a"),FNr=o("FlaxAlbertForMultipleChoice"),TNr=o(" (ALBERT model)"),MNr=l(),A5=a("li"),HMe=a("strong"),ENr=o("bert"),CNr=o(" \u2014 "),FK=a("a"),wNr=o("FlaxBertForMultipleChoice"),ANr=o(" (BERT model)"),yNr=l(),y5=a("li"),UMe=a("strong"),LNr=o("big_bird"),xNr=o(" \u2014 "),TK=a("a"),$Nr=o("FlaxBigBirdForMultipleChoice"),kNr=o(" (BigBird model)"),SNr=l(),L5=a("li"),JMe=a("strong"),RNr=o("distilbert"),PNr=o(" \u2014 "),MK=a("a"),BNr=o("FlaxDistilBertForMultipleChoice"),INr=o(" (DistilBERT model)"),qNr=l(),x5=a("li"),YMe=a("strong"),NNr=o("electra"),jNr=o(" \u2014 "),EK=a("a"),DNr=o("FlaxElectraForMultipleChoice"),GNr=o(" (ELECTRA model)"),ONr=l(),$5=a("li"),KMe=a("strong"),VNr=o("roberta"),XNr=o(" \u2014 "),CK=a("a"),zNr=o("FlaxRobertaForMultipleChoice"),WNr=o(" (RoBERTa model)"),QNr=l(),k5=a("li"),ZMe=a("strong"),HNr=o("roformer"),UNr=o(" \u2014 "),wK=a("a"),JNr=o("FlaxRoFormerForMultipleChoice"),YNr=o(" (RoFormer model)"),KNr=l(),S5=a("li"),e4e=a("strong"),ZNr=o("xlm-roberta"),ejr=o(" \u2014 "),AK=a("a"),ojr=o("FlaxXLMRobertaForMultipleChoice"),rjr=o(" (XLM-RoBERTa model)"),tjr=l(),F(R5.$$.fragment),JNe=l(),of=a("h2"),P5=a("a"),o4e=a("span"),F(tx.$$.fragment),ajr=l(),r4e=a("span"),njr=o("FlaxAutoModelForNextSentencePrediction"),YNe=l(),Fr=a("div"),F(ax.$$.fragment),sjr=l(),rf=a("p"),ljr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yK=a("a"),ijr=o("from_pretrained()"),djr=o(" class method or the "),LK=a("a"),cjr=o("from_config()"),fjr=o(` class
method.`),mjr=l(),nx=a("p"),gjr=o("This class cannot be instantiated directly using "),t4e=a("code"),hjr=o("__init__()"),pjr=o(" (throws an error)."),_jr=l(),Jt=a("div"),F(sx.$$.fragment),ujr=l(),a4e=a("p"),bjr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vjr=l(),tf=a("p"),Fjr=o(`Note:
Loading a model from its configuration file does `),n4e=a("strong"),Tjr=o("not"),Mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),Ejr=o("from_pretrained()"),Cjr=o(" to load the model weights."),wjr=l(),F(B5.$$.fragment),Ajr=l(),Hr=a("div"),F(lx.$$.fragment),yjr=l(),s4e=a("p"),Ljr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xjr=l(),En=a("p"),$jr=o("The model class to instantiate is selected based on the "),l4e=a("code"),kjr=o("model_type"),Sjr=o(` property of the config object (either
passed as an argument or loaded from `),i4e=a("code"),Rjr=o("pretrained_model_name_or_path"),Pjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=a("code"),Bjr=o("pretrained_model_name_or_path"),Ijr=o(":"),qjr=l(),c4e=a("ul"),I5=a("li"),f4e=a("strong"),Njr=o("bert"),jjr=o(" \u2014 "),$K=a("a"),Djr=o("FlaxBertForNextSentencePrediction"),Gjr=o(" (BERT model)"),Ojr=l(),F(q5.$$.fragment),KNe=l(),af=a("h2"),N5=a("a"),m4e=a("span"),F(ix.$$.fragment),Vjr=l(),g4e=a("span"),Xjr=o("FlaxAutoModelForImageClassification"),ZNe=l(),Tr=a("div"),F(dx.$$.fragment),zjr=l(),nf=a("p"),Wjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kK=a("a"),Qjr=o("from_pretrained()"),Hjr=o(" class method or the "),SK=a("a"),Ujr=o("from_config()"),Jjr=o(` class
method.`),Yjr=l(),cx=a("p"),Kjr=o("This class cannot be instantiated directly using "),h4e=a("code"),Zjr=o("__init__()"),eDr=o(" (throws an error)."),oDr=l(),Yt=a("div"),F(fx.$$.fragment),rDr=l(),p4e=a("p"),tDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aDr=l(),sf=a("p"),nDr=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),sDr=o("not"),lDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),iDr=o("from_pretrained()"),dDr=o(" to load the model weights."),cDr=l(),F(j5.$$.fragment),fDr=l(),Ur=a("div"),F(mx.$$.fragment),mDr=l(),u4e=a("p"),gDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hDr=l(),Cn=a("p"),pDr=o("The model class to instantiate is selected based on the "),b4e=a("code"),_Dr=o("model_type"),uDr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),bDr=o("pretrained_model_name_or_path"),vDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),FDr=o("pretrained_model_name_or_path"),TDr=o(":"),MDr=l(),gx=a("ul"),D5=a("li"),T4e=a("strong"),EDr=o("beit"),CDr=o(" \u2014 "),PK=a("a"),wDr=o("FlaxBeitForImageClassification"),ADr=o(" (BEiT model)"),yDr=l(),G5=a("li"),M4e=a("strong"),LDr=o("vit"),xDr=o(" \u2014 "),BK=a("a"),$Dr=o("FlaxViTForImageClassification"),kDr=o(" (ViT model)"),SDr=l(),F(O5.$$.fragment),eje=l(),lf=a("h2"),V5=a("a"),E4e=a("span"),F(hx.$$.fragment),RDr=l(),C4e=a("span"),PDr=o("FlaxAutoModelForVision2Seq"),oje=l(),Mr=a("div"),F(px.$$.fragment),BDr=l(),df=a("p"),IDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IK=a("a"),qDr=o("from_pretrained()"),NDr=o(" class method or the "),qK=a("a"),jDr=o("from_config()"),DDr=o(` class
method.`),GDr=l(),_x=a("p"),ODr=o("This class cannot be instantiated directly using "),w4e=a("code"),VDr=o("__init__()"),XDr=o(" (throws an error)."),zDr=l(),Kt=a("div"),F(ux.$$.fragment),WDr=l(),A4e=a("p"),QDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HDr=l(),cf=a("p"),UDr=o(`Note:
Loading a model from its configuration file does `),y4e=a("strong"),JDr=o("not"),YDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),KDr=o("from_pretrained()"),ZDr=o(" to load the model weights."),eGr=l(),F(X5.$$.fragment),oGr=l(),Jr=a("div"),F(bx.$$.fragment),rGr=l(),L4e=a("p"),tGr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aGr=l(),wn=a("p"),nGr=o("The model class to instantiate is selected based on the "),x4e=a("code"),sGr=o("model_type"),lGr=o(` property of the config object (either
passed as an argument or loaded from `),$4e=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=a("code"),cGr=o("pretrained_model_name_or_path"),fGr=o(":"),mGr=l(),S4e=a("ul"),z5=a("li"),R4e=a("strong"),gGr=o("vision-encoder-decoder"),hGr=o(" \u2014 "),jK=a("a"),pGr=o("FlaxVisionEncoderDecoderModel"),_Gr=o(" (Vision Encoder decoder model)"),uGr=l(),F(W5.$$.fragment),this.h()},l(f){const u=CLt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var vx=s(p);m=n(vx,"A",{id:!0,class:!0,href:!0});var P4e=s(m);_=n(P4e,"SPAN",{});var B4e=s(_);T(d.$$.fragment,B4e),B4e.forEach(t),P4e.forEach(t),h=i(vx),Mo=n(vx,"SPAN",{});var I4e=s(Mo);ci=r(I4e,"Auto Classes"),I4e.forEach(t),vx.forEach(t),hf=i(f),rt=n(f,"P",{});var Fx=s(rt);fi=r(Fx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),mi=n(Fx,"CODE",{});var q4e=s(mi);cA=r(q4e,"from_pretrained()"),q4e.forEach(t),pf=r(Fx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Fx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var N4e=s(yn);fA=r(N4e,"AutoConfig"),N4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var j4e=s(xn);mA=r(j4e,"AutoModel"),j4e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var D4e=s($n);gA=r(D4e,"AutoTokenizer"),D4e.forEach(t),pi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Tx=s(Ae);k$=r(Tx,"will create a model that is an instance of "),_i=n(Tx,"A",{href:!0});var G4e=s(_i);S$=r(G4e,"BertModel"),G4e.forEach(t),R$=r(Tx,"."),Tx.forEach(t),Eo=i(f),wa=n(f,"P",{});var Mx=s(wa);P$=r(Mx,"There is one class of "),uf=n(Mx,"CODE",{});var O4e=s(uf);B$=r(O4e,"AutoModel"),O4e.forEach(t),cGe=r(Mx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Mx.forEach(t),ZIe=i(f),ui=n(f,"H2",{class:!0});var Ex=s(ui);bf=n(Ex,"A",{id:!0,class:!0,href:!0});var V4e=s(bf);See=n(V4e,"SPAN",{});var X4e=s(See);T(hA.$$.fragment,X4e),X4e.forEach(t),V4e.forEach(t),fGe=i(Ex),Ree=n(Ex,"SPAN",{});var z4e=s(Ree);mGe=r(z4e,"Extending the Auto Classes"),z4e.forEach(t),Ex.forEach(t),eqe=i(f),kn=n(f,"P",{});var ff=s(kn);gGe=r(ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Pee=n(ff,"CODE",{});var W4e=s(Pee);hGe=r(W4e,"NewModel"),W4e.forEach(t),pGe=r(ff,", make sure you have a "),Bee=n(ff,"CODE",{});var Q4e=s(Bee);_Ge=r(Q4e,"NewModelConfig"),Q4e.forEach(t),uGe=r(ff,` then you can add those to the auto
classes like this:`),ff.forEach(t),oqe=i(f),T(pA.$$.fragment,f),rqe=i(f),I$=n(f,"P",{});var H4e=s(I$);bGe=r(H4e,"You will then be able to use the auto classes like you would usually do!"),H4e.forEach(t),tqe=i(f),T(vf.$$.fragment,f),aqe=i(f),bi=n(f,"H2",{class:!0});var Cx=s(bi);Ff=n(Cx,"A",{id:!0,class:!0,href:!0});var U4e=s(Ff);Iee=n(U4e,"SPAN",{});var J4e=s(Iee);T(_A.$$.fragment,J4e),J4e.forEach(t),U4e.forEach(t),vGe=i(Cx),qee=n(Cx,"SPAN",{});var Y4e=s(qee);FGe=r(Y4e,"AutoConfig"),Y4e.forEach(t),Cx.forEach(t),nqe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T(uA.$$.fragment,et),TGe=i(et),bA=n(et,"P",{});var wx=s(bA);MGe=r(wx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),q$=n(wx,"A",{href:!0});var K4e=s(q$);EGe=r(K4e,"from_pretrained()"),K4e.forEach(t),CGe=r(wx," class method."),wx.forEach(t),wGe=i(et),vA=n(et,"P",{});var Ax=s(vA);AGe=r(Ax,"This class cannot be instantiated directly using "),Nee=n(Ax,"CODE",{});var Z4e=s(Nee);yGe=r(Z4e,"__init__()"),Z4e.forEach(t),LGe=r(Ax," (throws an error)."),Ax.forEach(t),xGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(FA.$$.fragment,ot),$Ge=i(ot),jee=n(ot,"P",{});var eEe=s(jee);kGe=r(eEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),eEe.forEach(t),SGe=i(ot),vi=n(ot,"P",{});var mf=s(vi);RGe=r(mf,"The configuration class to instantiate is selected based on the "),Dee=n(mf,"CODE",{});var oEe=s(Dee);PGe=r(oEe,"model_type"),oEe.forEach(t),BGe=r(mf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Gee=n(mf,"CODE",{});var rEe=s(Gee);IGe=r(rEe,"pretrained_model_name_or_path"),rEe.forEach(t),qGe=r(mf,":"),mf.forEach(t),NGe=i(ot),A=n(ot,"UL",{});var y=s(A);Tf=n(y,"LI",{});var Q5=s(Tf);Oee=n(Q5,"STRONG",{});var tEe=s(Oee);jGe=r(tEe,"albert"),tEe.forEach(t),DGe=r(Q5," \u2014 "),N$=n(Q5,"A",{href:!0});var aEe=s(N$);GGe=r(aEe,"AlbertConfig"),aEe.forEach(t),OGe=r(Q5," (ALBERT model)"),Q5.forEach(t),VGe=i(y),Mf=n(y,"LI",{});var H5=s(Mf);Vee=n(H5,"STRONG",{});var nEe=s(Vee);XGe=r(nEe,"bart"),nEe.forEach(t),zGe=r(H5," \u2014 "),j$=n(H5,"A",{href:!0});var sEe=s(j$);WGe=r(sEe,"BartConfig"),sEe.forEach(t),QGe=r(H5," (BART model)"),H5.forEach(t),HGe=i(y),Ef=n(y,"LI",{});var U5=s(Ef);Xee=n(U5,"STRONG",{});var lEe=s(Xee);UGe=r(lEe,"beit"),lEe.forEach(t),JGe=r(U5," \u2014 "),D$=n(U5,"A",{href:!0});var iEe=s(D$);YGe=r(iEe,"BeitConfig"),iEe.forEach(t),KGe=r(U5," (BEiT model)"),U5.forEach(t),ZGe=i(y),Cf=n(y,"LI",{});var J5=s(Cf);zee=n(J5,"STRONG",{});var dEe=s(zee);eOe=r(dEe,"bert"),dEe.forEach(t),oOe=r(J5," \u2014 "),G$=n(J5,"A",{href:!0});var cEe=s(G$);rOe=r(cEe,"BertConfig"),cEe.forEach(t),tOe=r(J5," (BERT model)"),J5.forEach(t),aOe=i(y),wf=n(y,"LI",{});var Y5=s(wf);Wee=n(Y5,"STRONG",{});var fEe=s(Wee);nOe=r(fEe,"bert-generation"),fEe.forEach(t),sOe=r(Y5," \u2014 "),O$=n(Y5,"A",{href:!0});var mEe=s(O$);lOe=r(mEe,"BertGenerationConfig"),mEe.forEach(t),iOe=r(Y5," (Bert Generation model)"),Y5.forEach(t),dOe=i(y),Af=n(y,"LI",{});var K5=s(Af);Qee=n(K5,"STRONG",{});var gEe=s(Qee);cOe=r(gEe,"big_bird"),gEe.forEach(t),fOe=r(K5," \u2014 "),V$=n(K5,"A",{href:!0});var hEe=s(V$);mOe=r(hEe,"BigBirdConfig"),hEe.forEach(t),gOe=r(K5," (BigBird model)"),K5.forEach(t),hOe=i(y),yf=n(y,"LI",{});var Z5=s(yf);Hee=n(Z5,"STRONG",{});var pEe=s(Hee);pOe=r(pEe,"bigbird_pegasus"),pEe.forEach(t),_Oe=r(Z5," \u2014 "),X$=n(Z5,"A",{href:!0});var _Ee=s(X$);uOe=r(_Ee,"BigBirdPegasusConfig"),_Ee.forEach(t),bOe=r(Z5," (BigBirdPegasus model)"),Z5.forEach(t),vOe=i(y),Lf=n(y,"LI",{});var ew=s(Lf);Uee=n(ew,"STRONG",{});var uEe=s(Uee);FOe=r(uEe,"blenderbot"),uEe.forEach(t),TOe=r(ew," \u2014 "),z$=n(ew,"A",{href:!0});var bEe=s(z$);MOe=r(bEe,"BlenderbotConfig"),bEe.forEach(t),EOe=r(ew," (Blenderbot model)"),ew.forEach(t),COe=i(y),xf=n(y,"LI",{});var ow=s(xf);Jee=n(ow,"STRONG",{});var vEe=s(Jee);wOe=r(vEe,"blenderbot-small"),vEe.forEach(t),AOe=r(ow," \u2014 "),W$=n(ow,"A",{href:!0});var FEe=s(W$);yOe=r(FEe,"BlenderbotSmallConfig"),FEe.forEach(t),LOe=r(ow," (BlenderbotSmall model)"),ow.forEach(t),xOe=i(y),$f=n(y,"LI",{});var rw=s($f);Yee=n(rw,"STRONG",{});var TEe=s(Yee);$Oe=r(TEe,"camembert"),TEe.forEach(t),kOe=r(rw," \u2014 "),Q$=n(rw,"A",{href:!0});var MEe=s(Q$);SOe=r(MEe,"CamembertConfig"),MEe.forEach(t),ROe=r(rw," (CamemBERT model)"),rw.forEach(t),POe=i(y),kf=n(y,"LI",{});var tw=s(kf);Kee=n(tw,"STRONG",{});var EEe=s(Kee);BOe=r(EEe,"canine"),EEe.forEach(t),IOe=r(tw," \u2014 "),H$=n(tw,"A",{href:!0});var CEe=s(H$);qOe=r(CEe,"CanineConfig"),CEe.forEach(t),NOe=r(tw," (Canine model)"),tw.forEach(t),jOe=i(y),Sf=n(y,"LI",{});var aw=s(Sf);Zee=n(aw,"STRONG",{});var wEe=s(Zee);DOe=r(wEe,"clip"),wEe.forEach(t),GOe=r(aw," \u2014 "),U$=n(aw,"A",{href:!0});var AEe=s(U$);OOe=r(AEe,"CLIPConfig"),AEe.forEach(t),VOe=r(aw," (CLIP model)"),aw.forEach(t),XOe=i(y),Rf=n(y,"LI",{});var nw=s(Rf);eoe=n(nw,"STRONG",{});var yEe=s(eoe);zOe=r(yEe,"convbert"),yEe.forEach(t),WOe=r(nw," \u2014 "),J$=n(nw,"A",{href:!0});var LEe=s(J$);QOe=r(LEe,"ConvBertConfig"),LEe.forEach(t),HOe=r(nw," (ConvBERT model)"),nw.forEach(t),UOe=i(y),Pf=n(y,"LI",{});var sw=s(Pf);ooe=n(sw,"STRONG",{});var xEe=s(ooe);JOe=r(xEe,"convnext"),xEe.forEach(t),YOe=r(sw," \u2014 "),Y$=n(sw,"A",{href:!0});var $Ee=s(Y$);KOe=r($Ee,"ConvNextConfig"),$Ee.forEach(t),ZOe=r(sw," (ConvNext model)"),sw.forEach(t),eVe=i(y),Bf=n(y,"LI",{});var lw=s(Bf);roe=n(lw,"STRONG",{});var kEe=s(roe);oVe=r(kEe,"ctrl"),kEe.forEach(t),rVe=r(lw," \u2014 "),K$=n(lw,"A",{href:!0});var SEe=s(K$);tVe=r(SEe,"CTRLConfig"),SEe.forEach(t),aVe=r(lw," (CTRL model)"),lw.forEach(t),nVe=i(y),If=n(y,"LI",{});var iw=s(If);toe=n(iw,"STRONG",{});var REe=s(toe);sVe=r(REe,"cvt"),REe.forEach(t),lVe=r(iw," \u2014 "),Z$=n(iw,"A",{href:!0});var PEe=s(Z$);iVe=r(PEe,"CvtConfig"),PEe.forEach(t),dVe=r(iw," (CvT model)"),iw.forEach(t),cVe=i(y),qf=n(y,"LI",{});var dw=s(qf);aoe=n(dw,"STRONG",{});var BEe=s(aoe);fVe=r(BEe,"data2vec-audio"),BEe.forEach(t),mVe=r(dw," \u2014 "),ek=n(dw,"A",{href:!0});var IEe=s(ek);gVe=r(IEe,"Data2VecAudioConfig"),IEe.forEach(t),hVe=r(dw," (Data2VecAudio model)"),dw.forEach(t),pVe=i(y),Nf=n(y,"LI",{});var cw=s(Nf);noe=n(cw,"STRONG",{});var qEe=s(noe);_Ve=r(qEe,"data2vec-text"),qEe.forEach(t),uVe=r(cw," \u2014 "),ok=n(cw,"A",{href:!0});var NEe=s(ok);bVe=r(NEe,"Data2VecTextConfig"),NEe.forEach(t),vVe=r(cw," (Data2VecText model)"),cw.forEach(t),FVe=i(y),jf=n(y,"LI",{});var fw=s(jf);soe=n(fw,"STRONG",{});var jEe=s(soe);TVe=r(jEe,"data2vec-vision"),jEe.forEach(t),MVe=r(fw," \u2014 "),rk=n(fw,"A",{href:!0});var DEe=s(rk);EVe=r(DEe,"Data2VecVisionConfig"),DEe.forEach(t),CVe=r(fw," (Data2VecVision model)"),fw.forEach(t),wVe=i(y),Df=n(y,"LI",{});var mw=s(Df);loe=n(mw,"STRONG",{});var GEe=s(loe);AVe=r(GEe,"deberta"),GEe.forEach(t),yVe=r(mw," \u2014 "),tk=n(mw,"A",{href:!0});var OEe=s(tk);LVe=r(OEe,"DebertaConfig"),OEe.forEach(t),xVe=r(mw," (DeBERTa model)"),mw.forEach(t),$Ve=i(y),Gf=n(y,"LI",{});var gw=s(Gf);ioe=n(gw,"STRONG",{});var VEe=s(ioe);kVe=r(VEe,"deberta-v2"),VEe.forEach(t),SVe=r(gw," \u2014 "),ak=n(gw,"A",{href:!0});var XEe=s(ak);RVe=r(XEe,"DebertaV2Config"),XEe.forEach(t),PVe=r(gw," (DeBERTa-v2 model)"),gw.forEach(t),BVe=i(y),Of=n(y,"LI",{});var hw=s(Of);doe=n(hw,"STRONG",{});var zEe=s(doe);IVe=r(zEe,"decision_transformer"),zEe.forEach(t),qVe=r(hw," \u2014 "),nk=n(hw,"A",{href:!0});var WEe=s(nk);NVe=r(WEe,"DecisionTransformerConfig"),WEe.forEach(t),jVe=r(hw," (Decision Transformer model)"),hw.forEach(t),DVe=i(y),Vf=n(y,"LI",{});var pw=s(Vf);coe=n(pw,"STRONG",{});var QEe=s(coe);GVe=r(QEe,"deit"),QEe.forEach(t),OVe=r(pw," \u2014 "),sk=n(pw,"A",{href:!0});var vGr=s(sk);VVe=r(vGr,"DeiTConfig"),vGr.forEach(t),XVe=r(pw," (DeiT model)"),pw.forEach(t),zVe=i(y),Xf=n(y,"LI",{});var HEe=s(Xf);foe=n(HEe,"STRONG",{});var FGr=s(foe);WVe=r(FGr,"detr"),FGr.forEach(t),QVe=r(HEe," \u2014 "),lk=n(HEe,"A",{href:!0});var TGr=s(lk);HVe=r(TGr,"DetrConfig"),TGr.forEach(t),UVe=r(HEe," (DETR model)"),HEe.forEach(t),JVe=i(y),zf=n(y,"LI",{});var UEe=s(zf);moe=n(UEe,"STRONG",{});var MGr=s(moe);YVe=r(MGr,"distilbert"),MGr.forEach(t),KVe=r(UEe," \u2014 "),ik=n(UEe,"A",{href:!0});var EGr=s(ik);ZVe=r(EGr,"DistilBertConfig"),EGr.forEach(t),eXe=r(UEe," (DistilBERT model)"),UEe.forEach(t),oXe=i(y),Wf=n(y,"LI",{});var JEe=s(Wf);goe=n(JEe,"STRONG",{});var CGr=s(goe);rXe=r(CGr,"dpr"),CGr.forEach(t),tXe=r(JEe," \u2014 "),dk=n(JEe,"A",{href:!0});var wGr=s(dk);aXe=r(wGr,"DPRConfig"),wGr.forEach(t),nXe=r(JEe," (DPR model)"),JEe.forEach(t),sXe=i(y),Qf=n(y,"LI",{});var YEe=s(Qf);hoe=n(YEe,"STRONG",{});var AGr=s(hoe);lXe=r(AGr,"dpt"),AGr.forEach(t),iXe=r(YEe," \u2014 "),ck=n(YEe,"A",{href:!0});var yGr=s(ck);dXe=r(yGr,"DPTConfig"),yGr.forEach(t),cXe=r(YEe," (DPT model)"),YEe.forEach(t),fXe=i(y),Hf=n(y,"LI",{});var KEe=s(Hf);poe=n(KEe,"STRONG",{});var LGr=s(poe);mXe=r(LGr,"electra"),LGr.forEach(t),gXe=r(KEe," \u2014 "),fk=n(KEe,"A",{href:!0});var xGr=s(fk);hXe=r(xGr,"ElectraConfig"),xGr.forEach(t),pXe=r(KEe," (ELECTRA model)"),KEe.forEach(t),_Xe=i(y),Uf=n(y,"LI",{});var ZEe=s(Uf);_oe=n(ZEe,"STRONG",{});var $Gr=s(_oe);uXe=r($Gr,"encoder-decoder"),$Gr.forEach(t),bXe=r(ZEe," \u2014 "),mk=n(ZEe,"A",{href:!0});var kGr=s(mk);vXe=r(kGr,"EncoderDecoderConfig"),kGr.forEach(t),FXe=r(ZEe," (Encoder decoder model)"),ZEe.forEach(t),TXe=i(y),Jf=n(y,"LI",{});var eCe=s(Jf);uoe=n(eCe,"STRONG",{});var SGr=s(uoe);MXe=r(SGr,"flaubert"),SGr.forEach(t),EXe=r(eCe," \u2014 "),gk=n(eCe,"A",{href:!0});var RGr=s(gk);CXe=r(RGr,"FlaubertConfig"),RGr.forEach(t),wXe=r(eCe," (FlauBERT model)"),eCe.forEach(t),AXe=i(y),Yf=n(y,"LI",{});var oCe=s(Yf);boe=n(oCe,"STRONG",{});var PGr=s(boe);yXe=r(PGr,"flava"),PGr.forEach(t),LXe=r(oCe," \u2014 "),hk=n(oCe,"A",{href:!0});var BGr=s(hk);xXe=r(BGr,"FlavaConfig"),BGr.forEach(t),$Xe=r(oCe," (Flava model)"),oCe.forEach(t),kXe=i(y),Kf=n(y,"LI",{});var rCe=s(Kf);voe=n(rCe,"STRONG",{});var IGr=s(voe);SXe=r(IGr,"fnet"),IGr.forEach(t),RXe=r(rCe," \u2014 "),pk=n(rCe,"A",{href:!0});var qGr=s(pk);PXe=r(qGr,"FNetConfig"),qGr.forEach(t),BXe=r(rCe," (FNet model)"),rCe.forEach(t),IXe=i(y),Zf=n(y,"LI",{});var tCe=s(Zf);Foe=n(tCe,"STRONG",{});var NGr=s(Foe);qXe=r(NGr,"fsmt"),NGr.forEach(t),NXe=r(tCe," \u2014 "),_k=n(tCe,"A",{href:!0});var jGr=s(_k);jXe=r(jGr,"FSMTConfig"),jGr.forEach(t),DXe=r(tCe," (FairSeq Machine-Translation model)"),tCe.forEach(t),GXe=i(y),em=n(y,"LI",{});var aCe=s(em);Toe=n(aCe,"STRONG",{});var DGr=s(Toe);OXe=r(DGr,"funnel"),DGr.forEach(t),VXe=r(aCe," \u2014 "),uk=n(aCe,"A",{href:!0});var GGr=s(uk);XXe=r(GGr,"FunnelConfig"),GGr.forEach(t),zXe=r(aCe," (Funnel Transformer model)"),aCe.forEach(t),WXe=i(y),om=n(y,"LI",{});var nCe=s(om);Moe=n(nCe,"STRONG",{});var OGr=s(Moe);QXe=r(OGr,"glpn"),OGr.forEach(t),HXe=r(nCe," \u2014 "),bk=n(nCe,"A",{href:!0});var VGr=s(bk);UXe=r(VGr,"GLPNConfig"),VGr.forEach(t),JXe=r(nCe," (GLPN model)"),nCe.forEach(t),YXe=i(y),rm=n(y,"LI",{});var sCe=s(rm);Eoe=n(sCe,"STRONG",{});var XGr=s(Eoe);KXe=r(XGr,"gpt2"),XGr.forEach(t),ZXe=r(sCe," \u2014 "),vk=n(sCe,"A",{href:!0});var zGr=s(vk);eze=r(zGr,"GPT2Config"),zGr.forEach(t),oze=r(sCe," (OpenAI GPT-2 model)"),sCe.forEach(t),rze=i(y),tm=n(y,"LI",{});var lCe=s(tm);Coe=n(lCe,"STRONG",{});var WGr=s(Coe);tze=r(WGr,"gpt_neo"),WGr.forEach(t),aze=r(lCe," \u2014 "),Fk=n(lCe,"A",{href:!0});var QGr=s(Fk);nze=r(QGr,"GPTNeoConfig"),QGr.forEach(t),sze=r(lCe," (GPT Neo model)"),lCe.forEach(t),lze=i(y),am=n(y,"LI",{});var iCe=s(am);woe=n(iCe,"STRONG",{});var HGr=s(woe);ize=r(HGr,"gptj"),HGr.forEach(t),dze=r(iCe," \u2014 "),Tk=n(iCe,"A",{href:!0});var UGr=s(Tk);cze=r(UGr,"GPTJConfig"),UGr.forEach(t),fze=r(iCe," (GPT-J model)"),iCe.forEach(t),mze=i(y),nm=n(y,"LI",{});var dCe=s(nm);Aoe=n(dCe,"STRONG",{});var JGr=s(Aoe);gze=r(JGr,"hubert"),JGr.forEach(t),hze=r(dCe," \u2014 "),Mk=n(dCe,"A",{href:!0});var YGr=s(Mk);pze=r(YGr,"HubertConfig"),YGr.forEach(t),_ze=r(dCe," (Hubert model)"),dCe.forEach(t),uze=i(y),sm=n(y,"LI",{});var cCe=s(sm);yoe=n(cCe,"STRONG",{});var KGr=s(yoe);bze=r(KGr,"ibert"),KGr.forEach(t),vze=r(cCe," \u2014 "),Ek=n(cCe,"A",{href:!0});var ZGr=s(Ek);Fze=r(ZGr,"IBertConfig"),ZGr.forEach(t),Tze=r(cCe," (I-BERT model)"),cCe.forEach(t),Mze=i(y),lm=n(y,"LI",{});var fCe=s(lm);Loe=n(fCe,"STRONG",{});var eOr=s(Loe);Eze=r(eOr,"imagegpt"),eOr.forEach(t),Cze=r(fCe," \u2014 "),Ck=n(fCe,"A",{href:!0});var oOr=s(Ck);wze=r(oOr,"ImageGPTConfig"),oOr.forEach(t),Aze=r(fCe," (ImageGPT model)"),fCe.forEach(t),yze=i(y),im=n(y,"LI",{});var mCe=s(im);xoe=n(mCe,"STRONG",{});var rOr=s(xoe);Lze=r(rOr,"layoutlm"),rOr.forEach(t),xze=r(mCe," \u2014 "),wk=n(mCe,"A",{href:!0});var tOr=s(wk);$ze=r(tOr,"LayoutLMConfig"),tOr.forEach(t),kze=r(mCe," (LayoutLM model)"),mCe.forEach(t),Sze=i(y),dm=n(y,"LI",{});var gCe=s(dm);$oe=n(gCe,"STRONG",{});var aOr=s($oe);Rze=r(aOr,"layoutlmv2"),aOr.forEach(t),Pze=r(gCe," \u2014 "),Ak=n(gCe,"A",{href:!0});var nOr=s(Ak);Bze=r(nOr,"LayoutLMv2Config"),nOr.forEach(t),Ize=r(gCe," (LayoutLMv2 model)"),gCe.forEach(t),qze=i(y),cm=n(y,"LI",{});var hCe=s(cm);koe=n(hCe,"STRONG",{});var sOr=s(koe);Nze=r(sOr,"led"),sOr.forEach(t),jze=r(hCe," \u2014 "),yk=n(hCe,"A",{href:!0});var lOr=s(yk);Dze=r(lOr,"LEDConfig"),lOr.forEach(t),Gze=r(hCe," (LED model)"),hCe.forEach(t),Oze=i(y),fm=n(y,"LI",{});var pCe=s(fm);Soe=n(pCe,"STRONG",{});var iOr=s(Soe);Vze=r(iOr,"longformer"),iOr.forEach(t),Xze=r(pCe," \u2014 "),Lk=n(pCe,"A",{href:!0});var dOr=s(Lk);zze=r(dOr,"LongformerConfig"),dOr.forEach(t),Wze=r(pCe," (Longformer model)"),pCe.forEach(t),Qze=i(y),mm=n(y,"LI",{});var _Ce=s(mm);Roe=n(_Ce,"STRONG",{});var cOr=s(Roe);Hze=r(cOr,"luke"),cOr.forEach(t),Uze=r(_Ce," \u2014 "),xk=n(_Ce,"A",{href:!0});var fOr=s(xk);Jze=r(fOr,"LukeConfig"),fOr.forEach(t),Yze=r(_Ce," (LUKE model)"),_Ce.forEach(t),Kze=i(y),gm=n(y,"LI",{});var uCe=s(gm);Poe=n(uCe,"STRONG",{});var mOr=s(Poe);Zze=r(mOr,"lxmert"),mOr.forEach(t),eWe=r(uCe," \u2014 "),$k=n(uCe,"A",{href:!0});var gOr=s($k);oWe=r(gOr,"LxmertConfig"),gOr.forEach(t),rWe=r(uCe," (LXMERT model)"),uCe.forEach(t),tWe=i(y),hm=n(y,"LI",{});var bCe=s(hm);Boe=n(bCe,"STRONG",{});var hOr=s(Boe);aWe=r(hOr,"m2m_100"),hOr.forEach(t),nWe=r(bCe," \u2014 "),kk=n(bCe,"A",{href:!0});var pOr=s(kk);sWe=r(pOr,"M2M100Config"),pOr.forEach(t),lWe=r(bCe," (M2M100 model)"),bCe.forEach(t),iWe=i(y),pm=n(y,"LI",{});var vCe=s(pm);Ioe=n(vCe,"STRONG",{});var _Or=s(Ioe);dWe=r(_Or,"marian"),_Or.forEach(t),cWe=r(vCe," \u2014 "),Sk=n(vCe,"A",{href:!0});var uOr=s(Sk);fWe=r(uOr,"MarianConfig"),uOr.forEach(t),mWe=r(vCe," (Marian model)"),vCe.forEach(t),gWe=i(y),_m=n(y,"LI",{});var FCe=s(_m);qoe=n(FCe,"STRONG",{});var bOr=s(qoe);hWe=r(bOr,"maskformer"),bOr.forEach(t),pWe=r(FCe," \u2014 "),Rk=n(FCe,"A",{href:!0});var vOr=s(Rk);_We=r(vOr,"MaskFormerConfig"),vOr.forEach(t),uWe=r(FCe," (MaskFormer model)"),FCe.forEach(t),bWe=i(y),um=n(y,"LI",{});var TCe=s(um);Noe=n(TCe,"STRONG",{});var FOr=s(Noe);vWe=r(FOr,"mbart"),FOr.forEach(t),FWe=r(TCe," \u2014 "),Pk=n(TCe,"A",{href:!0});var TOr=s(Pk);TWe=r(TOr,"MBartConfig"),TOr.forEach(t),MWe=r(TCe," (mBART model)"),TCe.forEach(t),EWe=i(y),bm=n(y,"LI",{});var MCe=s(bm);joe=n(MCe,"STRONG",{});var MOr=s(joe);CWe=r(MOr,"megatron-bert"),MOr.forEach(t),wWe=r(MCe," \u2014 "),Bk=n(MCe,"A",{href:!0});var EOr=s(Bk);AWe=r(EOr,"MegatronBertConfig"),EOr.forEach(t),yWe=r(MCe," (MegatronBert model)"),MCe.forEach(t),LWe=i(y),vm=n(y,"LI",{});var ECe=s(vm);Doe=n(ECe,"STRONG",{});var COr=s(Doe);xWe=r(COr,"mobilebert"),COr.forEach(t),$We=r(ECe," \u2014 "),Ik=n(ECe,"A",{href:!0});var wOr=s(Ik);kWe=r(wOr,"MobileBertConfig"),wOr.forEach(t),SWe=r(ECe," (MobileBERT model)"),ECe.forEach(t),RWe=i(y),Fm=n(y,"LI",{});var CCe=s(Fm);Goe=n(CCe,"STRONG",{});var AOr=s(Goe);PWe=r(AOr,"mpnet"),AOr.forEach(t),BWe=r(CCe," \u2014 "),qk=n(CCe,"A",{href:!0});var yOr=s(qk);IWe=r(yOr,"MPNetConfig"),yOr.forEach(t),qWe=r(CCe," (MPNet model)"),CCe.forEach(t),NWe=i(y),Tm=n(y,"LI",{});var wCe=s(Tm);Ooe=n(wCe,"STRONG",{});var LOr=s(Ooe);jWe=r(LOr,"mt5"),LOr.forEach(t),DWe=r(wCe," \u2014 "),Nk=n(wCe,"A",{href:!0});var xOr=s(Nk);GWe=r(xOr,"MT5Config"),xOr.forEach(t),OWe=r(wCe," (mT5 model)"),wCe.forEach(t),VWe=i(y),Mm=n(y,"LI",{});var ACe=s(Mm);Voe=n(ACe,"STRONG",{});var $Or=s(Voe);XWe=r($Or,"nystromformer"),$Or.forEach(t),zWe=r(ACe," \u2014 "),jk=n(ACe,"A",{href:!0});var kOr=s(jk);WWe=r(kOr,"NystromformerConfig"),kOr.forEach(t),QWe=r(ACe," (Nystromformer model)"),ACe.forEach(t),HWe=i(y),Em=n(y,"LI",{});var yCe=s(Em);Xoe=n(yCe,"STRONG",{});var SOr=s(Xoe);UWe=r(SOr,"openai-gpt"),SOr.forEach(t),JWe=r(yCe," \u2014 "),Dk=n(yCe,"A",{href:!0});var ROr=s(Dk);YWe=r(ROr,"OpenAIGPTConfig"),ROr.forEach(t),KWe=r(yCe," (OpenAI GPT model)"),yCe.forEach(t),ZWe=i(y),Cm=n(y,"LI",{});var LCe=s(Cm);zoe=n(LCe,"STRONG",{});var POr=s(zoe);eQe=r(POr,"opt"),POr.forEach(t),oQe=r(LCe," \u2014 "),Gk=n(LCe,"A",{href:!0});var BOr=s(Gk);rQe=r(BOr,"OPTConfig"),BOr.forEach(t),tQe=r(LCe," (OPT model)"),LCe.forEach(t),aQe=i(y),wm=n(y,"LI",{});var xCe=s(wm);Woe=n(xCe,"STRONG",{});var IOr=s(Woe);nQe=r(IOr,"pegasus"),IOr.forEach(t),sQe=r(xCe," \u2014 "),Ok=n(xCe,"A",{href:!0});var qOr=s(Ok);lQe=r(qOr,"PegasusConfig"),qOr.forEach(t),iQe=r(xCe," (Pegasus model)"),xCe.forEach(t),dQe=i(y),Am=n(y,"LI",{});var $Ce=s(Am);Qoe=n($Ce,"STRONG",{});var NOr=s(Qoe);cQe=r(NOr,"perceiver"),NOr.forEach(t),fQe=r($Ce," \u2014 "),Vk=n($Ce,"A",{href:!0});var jOr=s(Vk);mQe=r(jOr,"PerceiverConfig"),jOr.forEach(t),gQe=r($Ce," (Perceiver model)"),$Ce.forEach(t),hQe=i(y),ym=n(y,"LI",{});var kCe=s(ym);Hoe=n(kCe,"STRONG",{});var DOr=s(Hoe);pQe=r(DOr,"plbart"),DOr.forEach(t),_Qe=r(kCe," \u2014 "),Xk=n(kCe,"A",{href:!0});var GOr=s(Xk);uQe=r(GOr,"PLBartConfig"),GOr.forEach(t),bQe=r(kCe," (PLBart model)"),kCe.forEach(t),vQe=i(y),Lm=n(y,"LI",{});var SCe=s(Lm);Uoe=n(SCe,"STRONG",{});var OOr=s(Uoe);FQe=r(OOr,"poolformer"),OOr.forEach(t),TQe=r(SCe," \u2014 "),zk=n(SCe,"A",{href:!0});var VOr=s(zk);MQe=r(VOr,"PoolFormerConfig"),VOr.forEach(t),EQe=r(SCe," (PoolFormer model)"),SCe.forEach(t),CQe=i(y),xm=n(y,"LI",{});var RCe=s(xm);Joe=n(RCe,"STRONG",{});var XOr=s(Joe);wQe=r(XOr,"prophetnet"),XOr.forEach(t),AQe=r(RCe," \u2014 "),Wk=n(RCe,"A",{href:!0});var zOr=s(Wk);yQe=r(zOr,"ProphetNetConfig"),zOr.forEach(t),LQe=r(RCe," (ProphetNet model)"),RCe.forEach(t),xQe=i(y),$m=n(y,"LI",{});var PCe=s($m);Yoe=n(PCe,"STRONG",{});var WOr=s(Yoe);$Qe=r(WOr,"qdqbert"),WOr.forEach(t),kQe=r(PCe," \u2014 "),Qk=n(PCe,"A",{href:!0});var QOr=s(Qk);SQe=r(QOr,"QDQBertConfig"),QOr.forEach(t),RQe=r(PCe," (QDQBert model)"),PCe.forEach(t),PQe=i(y),km=n(y,"LI",{});var BCe=s(km);Koe=n(BCe,"STRONG",{});var HOr=s(Koe);BQe=r(HOr,"rag"),HOr.forEach(t),IQe=r(BCe," \u2014 "),Hk=n(BCe,"A",{href:!0});var UOr=s(Hk);qQe=r(UOr,"RagConfig"),UOr.forEach(t),NQe=r(BCe," (RAG model)"),BCe.forEach(t),jQe=i(y),Sm=n(y,"LI",{});var ICe=s(Sm);Zoe=n(ICe,"STRONG",{});var JOr=s(Zoe);DQe=r(JOr,"realm"),JOr.forEach(t),GQe=r(ICe," \u2014 "),Uk=n(ICe,"A",{href:!0});var YOr=s(Uk);OQe=r(YOr,"RealmConfig"),YOr.forEach(t),VQe=r(ICe," (Realm model)"),ICe.forEach(t),XQe=i(y),Rm=n(y,"LI",{});var qCe=s(Rm);ere=n(qCe,"STRONG",{});var KOr=s(ere);zQe=r(KOr,"reformer"),KOr.forEach(t),WQe=r(qCe," \u2014 "),Jk=n(qCe,"A",{href:!0});var ZOr=s(Jk);QQe=r(ZOr,"ReformerConfig"),ZOr.forEach(t),HQe=r(qCe," (Reformer model)"),qCe.forEach(t),UQe=i(y),Pm=n(y,"LI",{});var NCe=s(Pm);ore=n(NCe,"STRONG",{});var eVr=s(ore);JQe=r(eVr,"regnet"),eVr.forEach(t),YQe=r(NCe," \u2014 "),Yk=n(NCe,"A",{href:!0});var oVr=s(Yk);KQe=r(oVr,"RegNetConfig"),oVr.forEach(t),ZQe=r(NCe," (RegNet model)"),NCe.forEach(t),eHe=i(y),Bm=n(y,"LI",{});var jCe=s(Bm);rre=n(jCe,"STRONG",{});var rVr=s(rre);oHe=r(rVr,"rembert"),rVr.forEach(t),rHe=r(jCe," \u2014 "),Kk=n(jCe,"A",{href:!0});var tVr=s(Kk);tHe=r(tVr,"RemBertConfig"),tVr.forEach(t),aHe=r(jCe," (RemBERT model)"),jCe.forEach(t),nHe=i(y),Im=n(y,"LI",{});var DCe=s(Im);tre=n(DCe,"STRONG",{});var aVr=s(tre);sHe=r(aVr,"resnet"),aVr.forEach(t),lHe=r(DCe," \u2014 "),Zk=n(DCe,"A",{href:!0});var nVr=s(Zk);iHe=r(nVr,"ResNetConfig"),nVr.forEach(t),dHe=r(DCe," (ResNet model)"),DCe.forEach(t),cHe=i(y),qm=n(y,"LI",{});var GCe=s(qm);are=n(GCe,"STRONG",{});var sVr=s(are);fHe=r(sVr,"retribert"),sVr.forEach(t),mHe=r(GCe," \u2014 "),eS=n(GCe,"A",{href:!0});var lVr=s(eS);gHe=r(lVr,"RetriBertConfig"),lVr.forEach(t),hHe=r(GCe," (RetriBERT model)"),GCe.forEach(t),pHe=i(y),Nm=n(y,"LI",{});var OCe=s(Nm);nre=n(OCe,"STRONG",{});var iVr=s(nre);_He=r(iVr,"roberta"),iVr.forEach(t),uHe=r(OCe," \u2014 "),oS=n(OCe,"A",{href:!0});var dVr=s(oS);bHe=r(dVr,"RobertaConfig"),dVr.forEach(t),vHe=r(OCe," (RoBERTa model)"),OCe.forEach(t),FHe=i(y),jm=n(y,"LI",{});var VCe=s(jm);sre=n(VCe,"STRONG",{});var cVr=s(sre);THe=r(cVr,"roformer"),cVr.forEach(t),MHe=r(VCe," \u2014 "),rS=n(VCe,"A",{href:!0});var fVr=s(rS);EHe=r(fVr,"RoFormerConfig"),fVr.forEach(t),CHe=r(VCe," (RoFormer model)"),VCe.forEach(t),wHe=i(y),Dm=n(y,"LI",{});var XCe=s(Dm);lre=n(XCe,"STRONG",{});var mVr=s(lre);AHe=r(mVr,"segformer"),mVr.forEach(t),yHe=r(XCe," \u2014 "),tS=n(XCe,"A",{href:!0});var gVr=s(tS);LHe=r(gVr,"SegformerConfig"),gVr.forEach(t),xHe=r(XCe," (SegFormer model)"),XCe.forEach(t),$He=i(y),Gm=n(y,"LI",{});var zCe=s(Gm);ire=n(zCe,"STRONG",{});var hVr=s(ire);kHe=r(hVr,"sew"),hVr.forEach(t),SHe=r(zCe," \u2014 "),aS=n(zCe,"A",{href:!0});var pVr=s(aS);RHe=r(pVr,"SEWConfig"),pVr.forEach(t),PHe=r(zCe," (SEW model)"),zCe.forEach(t),BHe=i(y),Om=n(y,"LI",{});var WCe=s(Om);dre=n(WCe,"STRONG",{});var _Vr=s(dre);IHe=r(_Vr,"sew-d"),_Vr.forEach(t),qHe=r(WCe," \u2014 "),nS=n(WCe,"A",{href:!0});var uVr=s(nS);NHe=r(uVr,"SEWDConfig"),uVr.forEach(t),jHe=r(WCe," (SEW-D model)"),WCe.forEach(t),DHe=i(y),Vm=n(y,"LI",{});var QCe=s(Vm);cre=n(QCe,"STRONG",{});var bVr=s(cre);GHe=r(bVr,"speech-encoder-decoder"),bVr.forEach(t),OHe=r(QCe," \u2014 "),sS=n(QCe,"A",{href:!0});var vVr=s(sS);VHe=r(vVr,"SpeechEncoderDecoderConfig"),vVr.forEach(t),XHe=r(QCe," (Speech Encoder decoder model)"),QCe.forEach(t),zHe=i(y),Xm=n(y,"LI",{});var HCe=s(Xm);fre=n(HCe,"STRONG",{});var FVr=s(fre);WHe=r(FVr,"speech_to_text"),FVr.forEach(t),QHe=r(HCe," \u2014 "),lS=n(HCe,"A",{href:!0});var TVr=s(lS);HHe=r(TVr,"Speech2TextConfig"),TVr.forEach(t),UHe=r(HCe," (Speech2Text model)"),HCe.forEach(t),JHe=i(y),zm=n(y,"LI",{});var UCe=s(zm);mre=n(UCe,"STRONG",{});var MVr=s(mre);YHe=r(MVr,"speech_to_text_2"),MVr.forEach(t),KHe=r(UCe," \u2014 "),iS=n(UCe,"A",{href:!0});var EVr=s(iS);ZHe=r(EVr,"Speech2Text2Config"),EVr.forEach(t),eUe=r(UCe," (Speech2Text2 model)"),UCe.forEach(t),oUe=i(y),Wm=n(y,"LI",{});var JCe=s(Wm);gre=n(JCe,"STRONG",{});var CVr=s(gre);rUe=r(CVr,"splinter"),CVr.forEach(t),tUe=r(JCe," \u2014 "),dS=n(JCe,"A",{href:!0});var wVr=s(dS);aUe=r(wVr,"SplinterConfig"),wVr.forEach(t),nUe=r(JCe," (Splinter model)"),JCe.forEach(t),sUe=i(y),Qm=n(y,"LI",{});var YCe=s(Qm);hre=n(YCe,"STRONG",{});var AVr=s(hre);lUe=r(AVr,"squeezebert"),AVr.forEach(t),iUe=r(YCe," \u2014 "),cS=n(YCe,"A",{href:!0});var yVr=s(cS);dUe=r(yVr,"SqueezeBertConfig"),yVr.forEach(t),cUe=r(YCe," (SqueezeBERT model)"),YCe.forEach(t),fUe=i(y),Hm=n(y,"LI",{});var KCe=s(Hm);pre=n(KCe,"STRONG",{});var LVr=s(pre);mUe=r(LVr,"swin"),LVr.forEach(t),gUe=r(KCe," \u2014 "),fS=n(KCe,"A",{href:!0});var xVr=s(fS);hUe=r(xVr,"SwinConfig"),xVr.forEach(t),pUe=r(KCe," (Swin model)"),KCe.forEach(t),_Ue=i(y),Um=n(y,"LI",{});var ZCe=s(Um);_re=n(ZCe,"STRONG",{});var $Vr=s(_re);uUe=r($Vr,"t5"),$Vr.forEach(t),bUe=r(ZCe," \u2014 "),mS=n(ZCe,"A",{href:!0});var kVr=s(mS);vUe=r(kVr,"T5Config"),kVr.forEach(t),FUe=r(ZCe," (T5 model)"),ZCe.forEach(t),TUe=i(y),Jm=n(y,"LI",{});var e5e=s(Jm);ure=n(e5e,"STRONG",{});var SVr=s(ure);MUe=r(SVr,"tapas"),SVr.forEach(t),EUe=r(e5e," \u2014 "),gS=n(e5e,"A",{href:!0});var RVr=s(gS);CUe=r(RVr,"TapasConfig"),RVr.forEach(t),wUe=r(e5e," (TAPAS model)"),e5e.forEach(t),AUe=i(y),Ym=n(y,"LI",{});var o5e=s(Ym);bre=n(o5e,"STRONG",{});var PVr=s(bre);yUe=r(PVr,"trajectory_transformer"),PVr.forEach(t),LUe=r(o5e," \u2014 "),hS=n(o5e,"A",{href:!0});var BVr=s(hS);xUe=r(BVr,"TrajectoryTransformerConfig"),BVr.forEach(t),$Ue=r(o5e," (Trajectory Transformer model)"),o5e.forEach(t),kUe=i(y),Km=n(y,"LI",{});var r5e=s(Km);vre=n(r5e,"STRONG",{});var IVr=s(vre);SUe=r(IVr,"transfo-xl"),IVr.forEach(t),RUe=r(r5e," \u2014 "),pS=n(r5e,"A",{href:!0});var qVr=s(pS);PUe=r(qVr,"TransfoXLConfig"),qVr.forEach(t),BUe=r(r5e," (Transformer-XL model)"),r5e.forEach(t),IUe=i(y),Zm=n(y,"LI",{});var t5e=s(Zm);Fre=n(t5e,"STRONG",{});var NVr=s(Fre);qUe=r(NVr,"trocr"),NVr.forEach(t),NUe=r(t5e," \u2014 "),_S=n(t5e,"A",{href:!0});var jVr=s(_S);jUe=r(jVr,"TrOCRConfig"),jVr.forEach(t),DUe=r(t5e," (TrOCR model)"),t5e.forEach(t),GUe=i(y),eg=n(y,"LI",{});var a5e=s(eg);Tre=n(a5e,"STRONG",{});var DVr=s(Tre);OUe=r(DVr,"unispeech"),DVr.forEach(t),VUe=r(a5e," \u2014 "),uS=n(a5e,"A",{href:!0});var GVr=s(uS);XUe=r(GVr,"UniSpeechConfig"),GVr.forEach(t),zUe=r(a5e," (UniSpeech model)"),a5e.forEach(t),WUe=i(y),og=n(y,"LI",{});var n5e=s(og);Mre=n(n5e,"STRONG",{});var OVr=s(Mre);QUe=r(OVr,"unispeech-sat"),OVr.forEach(t),HUe=r(n5e," \u2014 "),bS=n(n5e,"A",{href:!0});var VVr=s(bS);UUe=r(VVr,"UniSpeechSatConfig"),VVr.forEach(t),JUe=r(n5e," (UniSpeechSat model)"),n5e.forEach(t),YUe=i(y),rg=n(y,"LI",{});var s5e=s(rg);Ere=n(s5e,"STRONG",{});var XVr=s(Ere);KUe=r(XVr,"van"),XVr.forEach(t),ZUe=r(s5e," \u2014 "),vS=n(s5e,"A",{href:!0});var zVr=s(vS);eJe=r(zVr,"VanConfig"),zVr.forEach(t),oJe=r(s5e," (VAN model)"),s5e.forEach(t),rJe=i(y),tg=n(y,"LI",{});var l5e=s(tg);Cre=n(l5e,"STRONG",{});var WVr=s(Cre);tJe=r(WVr,"vilt"),WVr.forEach(t),aJe=r(l5e," \u2014 "),FS=n(l5e,"A",{href:!0});var QVr=s(FS);nJe=r(QVr,"ViltConfig"),QVr.forEach(t),sJe=r(l5e," (ViLT model)"),l5e.forEach(t),lJe=i(y),ag=n(y,"LI",{});var i5e=s(ag);wre=n(i5e,"STRONG",{});var HVr=s(wre);iJe=r(HVr,"vision-encoder-decoder"),HVr.forEach(t),dJe=r(i5e," \u2014 "),TS=n(i5e,"A",{href:!0});var UVr=s(TS);cJe=r(UVr,"VisionEncoderDecoderConfig"),UVr.forEach(t),fJe=r(i5e," (Vision Encoder decoder model)"),i5e.forEach(t),mJe=i(y),ng=n(y,"LI",{});var d5e=s(ng);Are=n(d5e,"STRONG",{});var JVr=s(Are);gJe=r(JVr,"vision-text-dual-encoder"),JVr.forEach(t),hJe=r(d5e," \u2014 "),MS=n(d5e,"A",{href:!0});var YVr=s(MS);pJe=r(YVr,"VisionTextDualEncoderConfig"),YVr.forEach(t),_Je=r(d5e," (VisionTextDualEncoder model)"),d5e.forEach(t),uJe=i(y),sg=n(y,"LI",{});var c5e=s(sg);yre=n(c5e,"STRONG",{});var KVr=s(yre);bJe=r(KVr,"visual_bert"),KVr.forEach(t),vJe=r(c5e," \u2014 "),ES=n(c5e,"A",{href:!0});var ZVr=s(ES);FJe=r(ZVr,"VisualBertConfig"),ZVr.forEach(t),TJe=r(c5e," (VisualBert model)"),c5e.forEach(t),MJe=i(y),lg=n(y,"LI",{});var f5e=s(lg);Lre=n(f5e,"STRONG",{});var eXr=s(Lre);EJe=r(eXr,"vit"),eXr.forEach(t),CJe=r(f5e," \u2014 "),CS=n(f5e,"A",{href:!0});var oXr=s(CS);wJe=r(oXr,"ViTConfig"),oXr.forEach(t),AJe=r(f5e," (ViT model)"),f5e.forEach(t),yJe=i(y),ig=n(y,"LI",{});var m5e=s(ig);xre=n(m5e,"STRONG",{});var rXr=s(xre);LJe=r(rXr,"vit_mae"),rXr.forEach(t),xJe=r(m5e," \u2014 "),wS=n(m5e,"A",{href:!0});var tXr=s(wS);$Je=r(tXr,"ViTMAEConfig"),tXr.forEach(t),kJe=r(m5e," (ViTMAE model)"),m5e.forEach(t),SJe=i(y),dg=n(y,"LI",{});var g5e=s(dg);$re=n(g5e,"STRONG",{});var aXr=s($re);RJe=r(aXr,"wav2vec2"),aXr.forEach(t),PJe=r(g5e," \u2014 "),AS=n(g5e,"A",{href:!0});var nXr=s(AS);BJe=r(nXr,"Wav2Vec2Config"),nXr.forEach(t),IJe=r(g5e," (Wav2Vec2 model)"),g5e.forEach(t),qJe=i(y),cg=n(y,"LI",{});var h5e=s(cg);kre=n(h5e,"STRONG",{});var sXr=s(kre);NJe=r(sXr,"wav2vec2-conformer"),sXr.forEach(t),jJe=r(h5e," \u2014 "),yS=n(h5e,"A",{href:!0});var lXr=s(yS);DJe=r(lXr,"Wav2Vec2ConformerConfig"),lXr.forEach(t),GJe=r(h5e," (Wav2Vec2-Conformer model)"),h5e.forEach(t),OJe=i(y),fg=n(y,"LI",{});var p5e=s(fg);Sre=n(p5e,"STRONG",{});var iXr=s(Sre);VJe=r(iXr,"wavlm"),iXr.forEach(t),XJe=r(p5e," \u2014 "),LS=n(p5e,"A",{href:!0});var dXr=s(LS);zJe=r(dXr,"WavLMConfig"),dXr.forEach(t),WJe=r(p5e," (WavLM model)"),p5e.forEach(t),QJe=i(y),mg=n(y,"LI",{});var _5e=s(mg);Rre=n(_5e,"STRONG",{});var cXr=s(Rre);HJe=r(cXr,"xglm"),cXr.forEach(t),UJe=r(_5e," \u2014 "),xS=n(_5e,"A",{href:!0});var fXr=s(xS);JJe=r(fXr,"XGLMConfig"),fXr.forEach(t),YJe=r(_5e," (XGLM model)"),_5e.forEach(t),KJe=i(y),gg=n(y,"LI",{});var u5e=s(gg);Pre=n(u5e,"STRONG",{});var mXr=s(Pre);ZJe=r(mXr,"xlm"),mXr.forEach(t),eYe=r(u5e," \u2014 "),$S=n(u5e,"A",{href:!0});var gXr=s($S);oYe=r(gXr,"XLMConfig"),gXr.forEach(t),rYe=r(u5e," (XLM model)"),u5e.forEach(t),tYe=i(y),hg=n(y,"LI",{});var b5e=s(hg);Bre=n(b5e,"STRONG",{});var hXr=s(Bre);aYe=r(hXr,"xlm-prophetnet"),hXr.forEach(t),nYe=r(b5e," \u2014 "),kS=n(b5e,"A",{href:!0});var pXr=s(kS);sYe=r(pXr,"XLMProphetNetConfig"),pXr.forEach(t),lYe=r(b5e," (XLMProphetNet model)"),b5e.forEach(t),iYe=i(y),pg=n(y,"LI",{});var v5e=s(pg);Ire=n(v5e,"STRONG",{});var _Xr=s(Ire);dYe=r(_Xr,"xlm-roberta"),_Xr.forEach(t),cYe=r(v5e," \u2014 "),SS=n(v5e,"A",{href:!0});var uXr=s(SS);fYe=r(uXr,"XLMRobertaConfig"),uXr.forEach(t),mYe=r(v5e," (XLM-RoBERTa model)"),v5e.forEach(t),gYe=i(y),_g=n(y,"LI",{});var F5e=s(_g);qre=n(F5e,"STRONG",{});var bXr=s(qre);hYe=r(bXr,"xlm-roberta-xl"),bXr.forEach(t),pYe=r(F5e," \u2014 "),RS=n(F5e,"A",{href:!0});var vXr=s(RS);_Ye=r(vXr,"XLMRobertaXLConfig"),vXr.forEach(t),uYe=r(F5e," (XLM-RoBERTa-XL model)"),F5e.forEach(t),bYe=i(y),ug=n(y,"LI",{});var T5e=s(ug);Nre=n(T5e,"STRONG",{});var FXr=s(Nre);vYe=r(FXr,"xlnet"),FXr.forEach(t),FYe=r(T5e," \u2014 "),PS=n(T5e,"A",{href:!0});var TXr=s(PS);TYe=r(TXr,"XLNetConfig"),TXr.forEach(t),MYe=r(T5e," (XLNet model)"),T5e.forEach(t),EYe=i(y),bg=n(y,"LI",{});var M5e=s(bg);jre=n(M5e,"STRONG",{});var MXr=s(jre);CYe=r(MXr,"yolos"),MXr.forEach(t),wYe=r(M5e," \u2014 "),BS=n(M5e,"A",{href:!0});var EXr=s(BS);AYe=r(EXr,"YolosConfig"),EXr.forEach(t),yYe=r(M5e," (YOLOS model)"),M5e.forEach(t),LYe=i(y),vg=n(y,"LI",{});var E5e=s(vg);Dre=n(E5e,"STRONG",{});var CXr=s(Dre);xYe=r(CXr,"yoso"),CXr.forEach(t),$Ye=r(E5e," \u2014 "),IS=n(E5e,"A",{href:!0});var wXr=s(IS);kYe=r(wXr,"YosoConfig"),wXr.forEach(t),SYe=r(E5e," (YOSO model)"),E5e.forEach(t),y.forEach(t),RYe=i(ot),T(Fg.$$.fragment,ot),ot.forEach(t),PYe=i(et),Tg=n(et,"DIV",{class:!0});var tje=s(Tg);T(TA.$$.fragment,tje),BYe=i(tje),Gre=n(tje,"P",{});var AXr=s(Gre);IYe=r(AXr,"Register a new configuration for this class."),AXr.forEach(t),tje.forEach(t),et.forEach(t),sqe=i(f),Fi=n(f,"H2",{class:!0});var aje=s(Fi);Mg=n(aje,"A",{id:!0,class:!0,href:!0});var yXr=s(Mg);Ore=n(yXr,"SPAN",{});var LXr=s(Ore);T(MA.$$.fragment,LXr),LXr.forEach(t),yXr.forEach(t),qYe=i(aje),Vre=n(aje,"SPAN",{});var xXr=s(Vre);NYe=r(xXr,"AutoTokenizer"),xXr.forEach(t),aje.forEach(t),lqe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(EA.$$.fragment,Is),jYe=i(Is),CA=n(Is,"P",{});var nje=s(CA);DYe=r(nje,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),qS=n(nje,"A",{href:!0});var $Xr=s(qS);GYe=r($Xr,"AutoTokenizer.from_pretrained()"),$Xr.forEach(t),OYe=r(nje," class method."),nje.forEach(t),VYe=i(Is),wA=n(Is,"P",{});var sje=s(wA);XYe=r(sje,"This class cannot be instantiated directly using "),Xre=n(sje,"CODE",{});var kXr=s(Xre);zYe=r(kXr,"__init__()"),kXr.forEach(t),WYe=r(sje," (throws an error)."),sje.forEach(t),QYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(AA.$$.fragment,qs),HYe=i(qs),zre=n(qs,"P",{});var SXr=s(zre);UYe=r(SXr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),SXr.forEach(t),JYe=i(qs),Aa=n(qs,"P",{});var _w=s(Aa);YYe=r(_w,"The tokenizer class to instantiate is selected based on the "),Wre=n(_w,"CODE",{});var RXr=s(Wre);KYe=r(RXr,"model_type"),RXr.forEach(t),ZYe=r(_w,` property of the config object (either
passed as an argument or loaded from `),Qre=n(_w,"CODE",{});var PXr=s(Qre);eKe=r(PXr,"pretrained_model_name_or_path"),PXr.forEach(t),oKe=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hre=n(_w,"CODE",{});var BXr=s(Hre);rKe=r(BXr,"pretrained_model_name_or_path"),BXr.forEach(t),tKe=r(_w,":"),_w.forEach(t),aKe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var yx=s(Sn);Ure=n(yx,"STRONG",{});var IXr=s(Ure);nKe=r(IXr,"albert"),IXr.forEach(t),sKe=r(yx," \u2014 "),NS=n(yx,"A",{href:!0});var qXr=s(NS);lKe=r(qXr,"AlbertTokenizer"),qXr.forEach(t),iKe=r(yx," or "),jS=n(yx,"A",{href:!0});var NXr=s(jS);dKe=r(NXr,"AlbertTokenizerFast"),NXr.forEach(t),cKe=r(yx," (ALBERT model)"),yx.forEach(t),fKe=i(S),Rn=n(S,"LI",{});var Lx=s(Rn);Jre=n(Lx,"STRONG",{});var jXr=s(Jre);mKe=r(jXr,"bart"),jXr.forEach(t),gKe=r(Lx," \u2014 "),DS=n(Lx,"A",{href:!0});var DXr=s(DS);hKe=r(DXr,"BartTokenizer"),DXr.forEach(t),pKe=r(Lx," or "),GS=n(Lx,"A",{href:!0});var GXr=s(GS);_Ke=r(GXr,"BartTokenizerFast"),GXr.forEach(t),uKe=r(Lx," (BART model)"),Lx.forEach(t),bKe=i(S),Pn=n(S,"LI",{});var xx=s(Pn);Yre=n(xx,"STRONG",{});var OXr=s(Yre);vKe=r(OXr,"barthez"),OXr.forEach(t),FKe=r(xx," \u2014 "),OS=n(xx,"A",{href:!0});var VXr=s(OS);TKe=r(VXr,"BarthezTokenizer"),VXr.forEach(t),MKe=r(xx," or "),VS=n(xx,"A",{href:!0});var XXr=s(VS);EKe=r(XXr,"BarthezTokenizerFast"),XXr.forEach(t),CKe=r(xx," (BARThez model)"),xx.forEach(t),wKe=i(S),Eg=n(S,"LI",{});var C5e=s(Eg);Kre=n(C5e,"STRONG",{});var zXr=s(Kre);AKe=r(zXr,"bartpho"),zXr.forEach(t),yKe=r(C5e," \u2014 "),XS=n(C5e,"A",{href:!0});var WXr=s(XS);LKe=r(WXr,"BartphoTokenizer"),WXr.forEach(t),xKe=r(C5e," (BARTpho model)"),C5e.forEach(t),$Ke=i(S),Bn=n(S,"LI",{});var $x=s(Bn);Zre=n($x,"STRONG",{});var QXr=s(Zre);kKe=r(QXr,"bert"),QXr.forEach(t),SKe=r($x," \u2014 "),zS=n($x,"A",{href:!0});var HXr=s(zS);RKe=r(HXr,"BertTokenizer"),HXr.forEach(t),PKe=r($x," or "),WS=n($x,"A",{href:!0});var UXr=s(WS);BKe=r(UXr,"BertTokenizerFast"),UXr.forEach(t),IKe=r($x," (BERT model)"),$x.forEach(t),qKe=i(S),Cg=n(S,"LI",{});var w5e=s(Cg);ete=n(w5e,"STRONG",{});var JXr=s(ete);NKe=r(JXr,"bert-generation"),JXr.forEach(t),jKe=r(w5e," \u2014 "),QS=n(w5e,"A",{href:!0});var YXr=s(QS);DKe=r(YXr,"BertGenerationTokenizer"),YXr.forEach(t),GKe=r(w5e," (Bert Generation model)"),w5e.forEach(t),OKe=i(S),wg=n(S,"LI",{});var A5e=s(wg);ote=n(A5e,"STRONG",{});var KXr=s(ote);VKe=r(KXr,"bert-japanese"),KXr.forEach(t),XKe=r(A5e," \u2014 "),HS=n(A5e,"A",{href:!0});var ZXr=s(HS);zKe=r(ZXr,"BertJapaneseTokenizer"),ZXr.forEach(t),WKe=r(A5e," (BertJapanese model)"),A5e.forEach(t),QKe=i(S),Ag=n(S,"LI",{});var y5e=s(Ag);rte=n(y5e,"STRONG",{});var ezr=s(rte);HKe=r(ezr,"bertweet"),ezr.forEach(t),UKe=r(y5e," \u2014 "),US=n(y5e,"A",{href:!0});var ozr=s(US);JKe=r(ozr,"BertweetTokenizer"),ozr.forEach(t),YKe=r(y5e," (Bertweet model)"),y5e.forEach(t),KKe=i(S),In=n(S,"LI",{});var kx=s(In);tte=n(kx,"STRONG",{});var rzr=s(tte);ZKe=r(rzr,"big_bird"),rzr.forEach(t),eZe=r(kx," \u2014 "),JS=n(kx,"A",{href:!0});var tzr=s(JS);oZe=r(tzr,"BigBirdTokenizer"),tzr.forEach(t),rZe=r(kx," or "),YS=n(kx,"A",{href:!0});var azr=s(YS);tZe=r(azr,"BigBirdTokenizerFast"),azr.forEach(t),aZe=r(kx," (BigBird model)"),kx.forEach(t),nZe=i(S),qn=n(S,"LI",{});var Sx=s(qn);ate=n(Sx,"STRONG",{});var nzr=s(ate);sZe=r(nzr,"bigbird_pegasus"),nzr.forEach(t),lZe=r(Sx," \u2014 "),KS=n(Sx,"A",{href:!0});var szr=s(KS);iZe=r(szr,"PegasusTokenizer"),szr.forEach(t),dZe=r(Sx," or "),ZS=n(Sx,"A",{href:!0});var lzr=s(ZS);cZe=r(lzr,"PegasusTokenizerFast"),lzr.forEach(t),fZe=r(Sx," (BigBirdPegasus model)"),Sx.forEach(t),mZe=i(S),Nn=n(S,"LI",{});var Rx=s(Nn);nte=n(Rx,"STRONG",{});var izr=s(nte);gZe=r(izr,"blenderbot"),izr.forEach(t),hZe=r(Rx," \u2014 "),eR=n(Rx,"A",{href:!0});var dzr=s(eR);pZe=r(dzr,"BlenderbotTokenizer"),dzr.forEach(t),_Ze=r(Rx," or "),oR=n(Rx,"A",{href:!0});var czr=s(oR);uZe=r(czr,"BlenderbotTokenizerFast"),czr.forEach(t),bZe=r(Rx," (Blenderbot model)"),Rx.forEach(t),vZe=i(S),yg=n(S,"LI",{});var L5e=s(yg);ste=n(L5e,"STRONG",{});var fzr=s(ste);FZe=r(fzr,"blenderbot-small"),fzr.forEach(t),TZe=r(L5e," \u2014 "),rR=n(L5e,"A",{href:!0});var mzr=s(rR);MZe=r(mzr,"BlenderbotSmallTokenizer"),mzr.forEach(t),EZe=r(L5e," (BlenderbotSmall model)"),L5e.forEach(t),CZe=i(S),Lg=n(S,"LI",{});var x5e=s(Lg);lte=n(x5e,"STRONG",{});var gzr=s(lte);wZe=r(gzr,"byt5"),gzr.forEach(t),AZe=r(x5e," \u2014 "),tR=n(x5e,"A",{href:!0});var hzr=s(tR);yZe=r(hzr,"ByT5Tokenizer"),hzr.forEach(t),LZe=r(x5e," (ByT5 model)"),x5e.forEach(t),xZe=i(S),jn=n(S,"LI",{});var Px=s(jn);ite=n(Px,"STRONG",{});var pzr=s(ite);$Ze=r(pzr,"camembert"),pzr.forEach(t),kZe=r(Px," \u2014 "),aR=n(Px,"A",{href:!0});var _zr=s(aR);SZe=r(_zr,"CamembertTokenizer"),_zr.forEach(t),RZe=r(Px," or "),nR=n(Px,"A",{href:!0});var uzr=s(nR);PZe=r(uzr,"CamembertTokenizerFast"),uzr.forEach(t),BZe=r(Px," (CamemBERT model)"),Px.forEach(t),IZe=i(S),xg=n(S,"LI",{});var $5e=s(xg);dte=n($5e,"STRONG",{});var bzr=s(dte);qZe=r(bzr,"canine"),bzr.forEach(t),NZe=r($5e," \u2014 "),sR=n($5e,"A",{href:!0});var vzr=s(sR);jZe=r(vzr,"CanineTokenizer"),vzr.forEach(t),DZe=r($5e," (Canine model)"),$5e.forEach(t),GZe=i(S),Dn=n(S,"LI",{});var Bx=s(Dn);cte=n(Bx,"STRONG",{});var Fzr=s(cte);OZe=r(Fzr,"clip"),Fzr.forEach(t),VZe=r(Bx," \u2014 "),lR=n(Bx,"A",{href:!0});var Tzr=s(lR);XZe=r(Tzr,"CLIPTokenizer"),Tzr.forEach(t),zZe=r(Bx," or "),iR=n(Bx,"A",{href:!0});var Mzr=s(iR);WZe=r(Mzr,"CLIPTokenizerFast"),Mzr.forEach(t),QZe=r(Bx," (CLIP model)"),Bx.forEach(t),HZe=i(S),Gn=n(S,"LI",{});var Ix=s(Gn);fte=n(Ix,"STRONG",{});var Ezr=s(fte);UZe=r(Ezr,"convbert"),Ezr.forEach(t),JZe=r(Ix," \u2014 "),dR=n(Ix,"A",{href:!0});var Czr=s(dR);YZe=r(Czr,"ConvBertTokenizer"),Czr.forEach(t),KZe=r(Ix," or "),cR=n(Ix,"A",{href:!0});var wzr=s(cR);ZZe=r(wzr,"ConvBertTokenizerFast"),wzr.forEach(t),eeo=r(Ix," (ConvBERT model)"),Ix.forEach(t),oeo=i(S),On=n(S,"LI",{});var qx=s(On);mte=n(qx,"STRONG",{});var Azr=s(mte);reo=r(Azr,"cpm"),Azr.forEach(t),teo=r(qx," \u2014 "),fR=n(qx,"A",{href:!0});var yzr=s(fR);aeo=r(yzr,"CpmTokenizer"),yzr.forEach(t),neo=r(qx," or "),mR=n(qx,"A",{href:!0});var Lzr=s(mR);seo=r(Lzr,"CpmTokenizerFast"),Lzr.forEach(t),leo=r(qx," (CPM model)"),qx.forEach(t),ieo=i(S),$g=n(S,"LI",{});var k5e=s($g);gte=n(k5e,"STRONG",{});var xzr=s(gte);deo=r(xzr,"ctrl"),xzr.forEach(t),ceo=r(k5e," \u2014 "),gR=n(k5e,"A",{href:!0});var $zr=s(gR);feo=r($zr,"CTRLTokenizer"),$zr.forEach(t),meo=r(k5e," (CTRL model)"),k5e.forEach(t),geo=i(S),Vn=n(S,"LI",{});var Nx=s(Vn);hte=n(Nx,"STRONG",{});var kzr=s(hte);heo=r(kzr,"data2vec-text"),kzr.forEach(t),peo=r(Nx," \u2014 "),hR=n(Nx,"A",{href:!0});var Szr=s(hR);_eo=r(Szr,"RobertaTokenizer"),Szr.forEach(t),ueo=r(Nx," or "),pR=n(Nx,"A",{href:!0});var Rzr=s(pR);beo=r(Rzr,"RobertaTokenizerFast"),Rzr.forEach(t),veo=r(Nx," (Data2VecText model)"),Nx.forEach(t),Feo=i(S),Xn=n(S,"LI",{});var jx=s(Xn);pte=n(jx,"STRONG",{});var Pzr=s(pte);Teo=r(Pzr,"deberta"),Pzr.forEach(t),Meo=r(jx," \u2014 "),_R=n(jx,"A",{href:!0});var Bzr=s(_R);Eeo=r(Bzr,"DebertaTokenizer"),Bzr.forEach(t),Ceo=r(jx," or "),uR=n(jx,"A",{href:!0});var Izr=s(uR);weo=r(Izr,"DebertaTokenizerFast"),Izr.forEach(t),Aeo=r(jx," (DeBERTa model)"),jx.forEach(t),yeo=i(S),zn=n(S,"LI",{});var Dx=s(zn);_te=n(Dx,"STRONG",{});var qzr=s(_te);Leo=r(qzr,"deberta-v2"),qzr.forEach(t),xeo=r(Dx," \u2014 "),bR=n(Dx,"A",{href:!0});var Nzr=s(bR);$eo=r(Nzr,"DebertaV2Tokenizer"),Nzr.forEach(t),keo=r(Dx," or "),vR=n(Dx,"A",{href:!0});var jzr=s(vR);Seo=r(jzr,"DebertaV2TokenizerFast"),jzr.forEach(t),Reo=r(Dx," (DeBERTa-v2 model)"),Dx.forEach(t),Peo=i(S),Wn=n(S,"LI",{});var Gx=s(Wn);ute=n(Gx,"STRONG",{});var Dzr=s(ute);Beo=r(Dzr,"distilbert"),Dzr.forEach(t),Ieo=r(Gx," \u2014 "),FR=n(Gx,"A",{href:!0});var Gzr=s(FR);qeo=r(Gzr,"DistilBertTokenizer"),Gzr.forEach(t),Neo=r(Gx," or "),TR=n(Gx,"A",{href:!0});var Ozr=s(TR);jeo=r(Ozr,"DistilBertTokenizerFast"),Ozr.forEach(t),Deo=r(Gx," (DistilBERT model)"),Gx.forEach(t),Geo=i(S),Qn=n(S,"LI",{});var Ox=s(Qn);bte=n(Ox,"STRONG",{});var Vzr=s(bte);Oeo=r(Vzr,"dpr"),Vzr.forEach(t),Veo=r(Ox," \u2014 "),MR=n(Ox,"A",{href:!0});var Xzr=s(MR);Xeo=r(Xzr,"DPRQuestionEncoderTokenizer"),Xzr.forEach(t),zeo=r(Ox," or "),ER=n(Ox,"A",{href:!0});var zzr=s(ER);Weo=r(zzr,"DPRQuestionEncoderTokenizerFast"),zzr.forEach(t),Qeo=r(Ox," (DPR model)"),Ox.forEach(t),Heo=i(S),Hn=n(S,"LI",{});var Vx=s(Hn);vte=n(Vx,"STRONG",{});var Wzr=s(vte);Ueo=r(Wzr,"electra"),Wzr.forEach(t),Jeo=r(Vx," \u2014 "),CR=n(Vx,"A",{href:!0});var Qzr=s(CR);Yeo=r(Qzr,"ElectraTokenizer"),Qzr.forEach(t),Keo=r(Vx," or "),wR=n(Vx,"A",{href:!0});var Hzr=s(wR);Zeo=r(Hzr,"ElectraTokenizerFast"),Hzr.forEach(t),eoo=r(Vx," (ELECTRA model)"),Vx.forEach(t),ooo=i(S),kg=n(S,"LI",{});var S5e=s(kg);Fte=n(S5e,"STRONG",{});var Uzr=s(Fte);roo=r(Uzr,"flaubert"),Uzr.forEach(t),too=r(S5e," \u2014 "),AR=n(S5e,"A",{href:!0});var Jzr=s(AR);aoo=r(Jzr,"FlaubertTokenizer"),Jzr.forEach(t),noo=r(S5e," (FlauBERT model)"),S5e.forEach(t),soo=i(S),Un=n(S,"LI",{});var Xx=s(Un);Tte=n(Xx,"STRONG",{});var Yzr=s(Tte);loo=r(Yzr,"fnet"),Yzr.forEach(t),ioo=r(Xx," \u2014 "),yR=n(Xx,"A",{href:!0});var Kzr=s(yR);doo=r(Kzr,"FNetTokenizer"),Kzr.forEach(t),coo=r(Xx," or "),LR=n(Xx,"A",{href:!0});var Zzr=s(LR);foo=r(Zzr,"FNetTokenizerFast"),Zzr.forEach(t),moo=r(Xx," (FNet model)"),Xx.forEach(t),goo=i(S),Sg=n(S,"LI",{});var R5e=s(Sg);Mte=n(R5e,"STRONG",{});var eWr=s(Mte);hoo=r(eWr,"fsmt"),eWr.forEach(t),poo=r(R5e," \u2014 "),xR=n(R5e,"A",{href:!0});var oWr=s(xR);_oo=r(oWr,"FSMTTokenizer"),oWr.forEach(t),uoo=r(R5e," (FairSeq Machine-Translation model)"),R5e.forEach(t),boo=i(S),Jn=n(S,"LI",{});var zx=s(Jn);Ete=n(zx,"STRONG",{});var rWr=s(Ete);voo=r(rWr,"funnel"),rWr.forEach(t),Foo=r(zx," \u2014 "),$R=n(zx,"A",{href:!0});var tWr=s($R);Too=r(tWr,"FunnelTokenizer"),tWr.forEach(t),Moo=r(zx," or "),kR=n(zx,"A",{href:!0});var aWr=s(kR);Eoo=r(aWr,"FunnelTokenizerFast"),aWr.forEach(t),Coo=r(zx," (Funnel Transformer model)"),zx.forEach(t),woo=i(S),Yn=n(S,"LI",{});var Wx=s(Yn);Cte=n(Wx,"STRONG",{});var nWr=s(Cte);Aoo=r(nWr,"gpt2"),nWr.forEach(t),yoo=r(Wx," \u2014 "),SR=n(Wx,"A",{href:!0});var sWr=s(SR);Loo=r(sWr,"GPT2Tokenizer"),sWr.forEach(t),xoo=r(Wx," or "),RR=n(Wx,"A",{href:!0});var lWr=s(RR);$oo=r(lWr,"GPT2TokenizerFast"),lWr.forEach(t),koo=r(Wx," (OpenAI GPT-2 model)"),Wx.forEach(t),Soo=i(S),Kn=n(S,"LI",{});var Qx=s(Kn);wte=n(Qx,"STRONG",{});var iWr=s(wte);Roo=r(iWr,"gpt_neo"),iWr.forEach(t),Poo=r(Qx," \u2014 "),PR=n(Qx,"A",{href:!0});var dWr=s(PR);Boo=r(dWr,"GPT2Tokenizer"),dWr.forEach(t),Ioo=r(Qx," or "),BR=n(Qx,"A",{href:!0});var cWr=s(BR);qoo=r(cWr,"GPT2TokenizerFast"),cWr.forEach(t),Noo=r(Qx," (GPT Neo model)"),Qx.forEach(t),joo=i(S),Zn=n(S,"LI",{});var Hx=s(Zn);Ate=n(Hx,"STRONG",{});var fWr=s(Ate);Doo=r(fWr,"gptj"),fWr.forEach(t),Goo=r(Hx," \u2014 "),IR=n(Hx,"A",{href:!0});var mWr=s(IR);Ooo=r(mWr,"GPT2Tokenizer"),mWr.forEach(t),Voo=r(Hx," or "),qR=n(Hx,"A",{href:!0});var gWr=s(qR);Xoo=r(gWr,"GPT2TokenizerFast"),gWr.forEach(t),zoo=r(Hx," (GPT-J model)"),Hx.forEach(t),Woo=i(S),es=n(S,"LI",{});var Ux=s(es);yte=n(Ux,"STRONG",{});var hWr=s(yte);Qoo=r(hWr,"herbert"),hWr.forEach(t),Hoo=r(Ux," \u2014 "),NR=n(Ux,"A",{href:!0});var pWr=s(NR);Uoo=r(pWr,"HerbertTokenizer"),pWr.forEach(t),Joo=r(Ux," or "),jR=n(Ux,"A",{href:!0});var _Wr=s(jR);Yoo=r(_Wr,"HerbertTokenizerFast"),_Wr.forEach(t),Koo=r(Ux," (HerBERT model)"),Ux.forEach(t),Zoo=i(S),Rg=n(S,"LI",{});var P5e=s(Rg);Lte=n(P5e,"STRONG",{});var uWr=s(Lte);ero=r(uWr,"hubert"),uWr.forEach(t),oro=r(P5e," \u2014 "),DR=n(P5e,"A",{href:!0});var bWr=s(DR);rro=r(bWr,"Wav2Vec2CTCTokenizer"),bWr.forEach(t),tro=r(P5e," (Hubert model)"),P5e.forEach(t),aro=i(S),os=n(S,"LI",{});var Jx=s(os);xte=n(Jx,"STRONG",{});var vWr=s(xte);nro=r(vWr,"ibert"),vWr.forEach(t),sro=r(Jx," \u2014 "),GR=n(Jx,"A",{href:!0});var FWr=s(GR);lro=r(FWr,"RobertaTokenizer"),FWr.forEach(t),iro=r(Jx," or "),OR=n(Jx,"A",{href:!0});var TWr=s(OR);dro=r(TWr,"RobertaTokenizerFast"),TWr.forEach(t),cro=r(Jx," (I-BERT model)"),Jx.forEach(t),fro=i(S),rs=n(S,"LI",{});var Yx=s(rs);$te=n(Yx,"STRONG",{});var MWr=s($te);mro=r(MWr,"layoutlm"),MWr.forEach(t),gro=r(Yx," \u2014 "),VR=n(Yx,"A",{href:!0});var EWr=s(VR);hro=r(EWr,"LayoutLMTokenizer"),EWr.forEach(t),pro=r(Yx," or "),XR=n(Yx,"A",{href:!0});var CWr=s(XR);_ro=r(CWr,"LayoutLMTokenizerFast"),CWr.forEach(t),uro=r(Yx," (LayoutLM model)"),Yx.forEach(t),bro=i(S),ts=n(S,"LI",{});var Kx=s(ts);kte=n(Kx,"STRONG",{});var wWr=s(kte);vro=r(wWr,"layoutlmv2"),wWr.forEach(t),Fro=r(Kx," \u2014 "),zR=n(Kx,"A",{href:!0});var AWr=s(zR);Tro=r(AWr,"LayoutLMv2Tokenizer"),AWr.forEach(t),Mro=r(Kx," or "),WR=n(Kx,"A",{href:!0});var yWr=s(WR);Ero=r(yWr,"LayoutLMv2TokenizerFast"),yWr.forEach(t),Cro=r(Kx," (LayoutLMv2 model)"),Kx.forEach(t),wro=i(S),as=n(S,"LI",{});var Zx=s(as);Ste=n(Zx,"STRONG",{});var LWr=s(Ste);Aro=r(LWr,"layoutxlm"),LWr.forEach(t),yro=r(Zx," \u2014 "),QR=n(Zx,"A",{href:!0});var xWr=s(QR);Lro=r(xWr,"LayoutXLMTokenizer"),xWr.forEach(t),xro=r(Zx," or "),HR=n(Zx,"A",{href:!0});var $Wr=s(HR);$ro=r($Wr,"LayoutXLMTokenizerFast"),$Wr.forEach(t),kro=r(Zx," (LayoutXLM model)"),Zx.forEach(t),Sro=i(S),ns=n(S,"LI",{});var e$=s(ns);Rte=n(e$,"STRONG",{});var kWr=s(Rte);Rro=r(kWr,"led"),kWr.forEach(t),Pro=r(e$," \u2014 "),UR=n(e$,"A",{href:!0});var SWr=s(UR);Bro=r(SWr,"LEDTokenizer"),SWr.forEach(t),Iro=r(e$," or "),JR=n(e$,"A",{href:!0});var RWr=s(JR);qro=r(RWr,"LEDTokenizerFast"),RWr.forEach(t),Nro=r(e$," (LED model)"),e$.forEach(t),jro=i(S),ss=n(S,"LI",{});var o$=s(ss);Pte=n(o$,"STRONG",{});var PWr=s(Pte);Dro=r(PWr,"longformer"),PWr.forEach(t),Gro=r(o$," \u2014 "),YR=n(o$,"A",{href:!0});var BWr=s(YR);Oro=r(BWr,"LongformerTokenizer"),BWr.forEach(t),Vro=r(o$," or "),KR=n(o$,"A",{href:!0});var IWr=s(KR);Xro=r(IWr,"LongformerTokenizerFast"),IWr.forEach(t),zro=r(o$," (Longformer model)"),o$.forEach(t),Wro=i(S),Pg=n(S,"LI",{});var B5e=s(Pg);Bte=n(B5e,"STRONG",{});var qWr=s(Bte);Qro=r(qWr,"luke"),qWr.forEach(t),Hro=r(B5e," \u2014 "),ZR=n(B5e,"A",{href:!0});var NWr=s(ZR);Uro=r(NWr,"LukeTokenizer"),NWr.forEach(t),Jro=r(B5e," (LUKE model)"),B5e.forEach(t),Yro=i(S),ls=n(S,"LI",{});var r$=s(ls);Ite=n(r$,"STRONG",{});var jWr=s(Ite);Kro=r(jWr,"lxmert"),jWr.forEach(t),Zro=r(r$," \u2014 "),eP=n(r$,"A",{href:!0});var DWr=s(eP);eto=r(DWr,"LxmertTokenizer"),DWr.forEach(t),oto=r(r$," or "),oP=n(r$,"A",{href:!0});var GWr=s(oP);rto=r(GWr,"LxmertTokenizerFast"),GWr.forEach(t),tto=r(r$," (LXMERT model)"),r$.forEach(t),ato=i(S),Bg=n(S,"LI",{});var I5e=s(Bg);qte=n(I5e,"STRONG",{});var OWr=s(qte);nto=r(OWr,"m2m_100"),OWr.forEach(t),sto=r(I5e," \u2014 "),rP=n(I5e,"A",{href:!0});var VWr=s(rP);lto=r(VWr,"M2M100Tokenizer"),VWr.forEach(t),ito=r(I5e," (M2M100 model)"),I5e.forEach(t),dto=i(S),Ig=n(S,"LI",{});var q5e=s(Ig);Nte=n(q5e,"STRONG",{});var XWr=s(Nte);cto=r(XWr,"marian"),XWr.forEach(t),fto=r(q5e," \u2014 "),tP=n(q5e,"A",{href:!0});var zWr=s(tP);mto=r(zWr,"MarianTokenizer"),zWr.forEach(t),gto=r(q5e," (Marian model)"),q5e.forEach(t),hto=i(S),is=n(S,"LI",{});var t$=s(is);jte=n(t$,"STRONG",{});var WWr=s(jte);pto=r(WWr,"mbart"),WWr.forEach(t),_to=r(t$," \u2014 "),aP=n(t$,"A",{href:!0});var QWr=s(aP);uto=r(QWr,"MBartTokenizer"),QWr.forEach(t),bto=r(t$," or "),nP=n(t$,"A",{href:!0});var HWr=s(nP);vto=r(HWr,"MBartTokenizerFast"),HWr.forEach(t),Fto=r(t$," (mBART model)"),t$.forEach(t),Tto=i(S),ds=n(S,"LI",{});var a$=s(ds);Dte=n(a$,"STRONG",{});var UWr=s(Dte);Mto=r(UWr,"mbart50"),UWr.forEach(t),Eto=r(a$," \u2014 "),sP=n(a$,"A",{href:!0});var JWr=s(sP);Cto=r(JWr,"MBart50Tokenizer"),JWr.forEach(t),wto=r(a$," or "),lP=n(a$,"A",{href:!0});var YWr=s(lP);Ato=r(YWr,"MBart50TokenizerFast"),YWr.forEach(t),yto=r(a$," (mBART-50 model)"),a$.forEach(t),Lto=i(S),cs=n(S,"LI",{});var n$=s(cs);Gte=n(n$,"STRONG",{});var KWr=s(Gte);xto=r(KWr,"megatron-bert"),KWr.forEach(t),$to=r(n$," \u2014 "),iP=n(n$,"A",{href:!0});var ZWr=s(iP);kto=r(ZWr,"BertTokenizer"),ZWr.forEach(t),Sto=r(n$," or "),dP=n(n$,"A",{href:!0});var eQr=s(dP);Rto=r(eQr,"BertTokenizerFast"),eQr.forEach(t),Pto=r(n$," (MegatronBert model)"),n$.forEach(t),Bto=i(S),qg=n(S,"LI",{});var N5e=s(qg);Ote=n(N5e,"STRONG",{});var oQr=s(Ote);Ito=r(oQr,"mluke"),oQr.forEach(t),qto=r(N5e," \u2014 "),cP=n(N5e,"A",{href:!0});var rQr=s(cP);Nto=r(rQr,"MLukeTokenizer"),rQr.forEach(t),jto=r(N5e," (mLUKE model)"),N5e.forEach(t),Dto=i(S),fs=n(S,"LI",{});var s$=s(fs);Vte=n(s$,"STRONG",{});var tQr=s(Vte);Gto=r(tQr,"mobilebert"),tQr.forEach(t),Oto=r(s$," \u2014 "),fP=n(s$,"A",{href:!0});var aQr=s(fP);Vto=r(aQr,"MobileBertTokenizer"),aQr.forEach(t),Xto=r(s$," or "),mP=n(s$,"A",{href:!0});var nQr=s(mP);zto=r(nQr,"MobileBertTokenizerFast"),nQr.forEach(t),Wto=r(s$," (MobileBERT model)"),s$.forEach(t),Qto=i(S),ms=n(S,"LI",{});var l$=s(ms);Xte=n(l$,"STRONG",{});var sQr=s(Xte);Hto=r(sQr,"mpnet"),sQr.forEach(t),Uto=r(l$," \u2014 "),gP=n(l$,"A",{href:!0});var lQr=s(gP);Jto=r(lQr,"MPNetTokenizer"),lQr.forEach(t),Yto=r(l$," or "),hP=n(l$,"A",{href:!0});var iQr=s(hP);Kto=r(iQr,"MPNetTokenizerFast"),iQr.forEach(t),Zto=r(l$," (MPNet model)"),l$.forEach(t),eao=i(S),gs=n(S,"LI",{});var i$=s(gs);zte=n(i$,"STRONG",{});var dQr=s(zte);oao=r(dQr,"mt5"),dQr.forEach(t),rao=r(i$," \u2014 "),pP=n(i$,"A",{href:!0});var cQr=s(pP);tao=r(cQr,"MT5Tokenizer"),cQr.forEach(t),aao=r(i$," or "),_P=n(i$,"A",{href:!0});var fQr=s(_P);nao=r(fQr,"MT5TokenizerFast"),fQr.forEach(t),sao=r(i$," (mT5 model)"),i$.forEach(t),lao=i(S),hs=n(S,"LI",{});var d$=s(hs);Wte=n(d$,"STRONG",{});var mQr=s(Wte);iao=r(mQr,"nystromformer"),mQr.forEach(t),dao=r(d$," \u2014 "),uP=n(d$,"A",{href:!0});var gQr=s(uP);cao=r(gQr,"AlbertTokenizer"),gQr.forEach(t),fao=r(d$," or "),bP=n(d$,"A",{href:!0});var hQr=s(bP);mao=r(hQr,"AlbertTokenizerFast"),hQr.forEach(t),gao=r(d$," (Nystromformer model)"),d$.forEach(t),hao=i(S),ps=n(S,"LI",{});var c$=s(ps);Qte=n(c$,"STRONG",{});var pQr=s(Qte);pao=r(pQr,"openai-gpt"),pQr.forEach(t),_ao=r(c$," \u2014 "),vP=n(c$,"A",{href:!0});var _Qr=s(vP);uao=r(_Qr,"OpenAIGPTTokenizer"),_Qr.forEach(t),bao=r(c$," or "),FP=n(c$,"A",{href:!0});var uQr=s(FP);vao=r(uQr,"OpenAIGPTTokenizerFast"),uQr.forEach(t),Fao=r(c$," (OpenAI GPT model)"),c$.forEach(t),Tao=i(S),Ng=n(S,"LI",{});var j5e=s(Ng);Hte=n(j5e,"STRONG",{});var bQr=s(Hte);Mao=r(bQr,"opt"),bQr.forEach(t),Eao=r(j5e," \u2014 "),TP=n(j5e,"A",{href:!0});var vQr=s(TP);Cao=r(vQr,"GPT2Tokenizer"),vQr.forEach(t),wao=r(j5e," (OPT model)"),j5e.forEach(t),Aao=i(S),_s=n(S,"LI",{});var f$=s(_s);Ute=n(f$,"STRONG",{});var FQr=s(Ute);yao=r(FQr,"pegasus"),FQr.forEach(t),Lao=r(f$," \u2014 "),MP=n(f$,"A",{href:!0});var TQr=s(MP);xao=r(TQr,"PegasusTokenizer"),TQr.forEach(t),$ao=r(f$," or "),EP=n(f$,"A",{href:!0});var MQr=s(EP);kao=r(MQr,"PegasusTokenizerFast"),MQr.forEach(t),Sao=r(f$," (Pegasus model)"),f$.forEach(t),Rao=i(S),jg=n(S,"LI",{});var D5e=s(jg);Jte=n(D5e,"STRONG",{});var EQr=s(Jte);Pao=r(EQr,"perceiver"),EQr.forEach(t),Bao=r(D5e," \u2014 "),CP=n(D5e,"A",{href:!0});var CQr=s(CP);Iao=r(CQr,"PerceiverTokenizer"),CQr.forEach(t),qao=r(D5e," (Perceiver model)"),D5e.forEach(t),Nao=i(S),Dg=n(S,"LI",{});var G5e=s(Dg);Yte=n(G5e,"STRONG",{});var wQr=s(Yte);jao=r(wQr,"phobert"),wQr.forEach(t),Dao=r(G5e," \u2014 "),wP=n(G5e,"A",{href:!0});var AQr=s(wP);Gao=r(AQr,"PhobertTokenizer"),AQr.forEach(t),Oao=r(G5e," (PhoBERT model)"),G5e.forEach(t),Vao=i(S),Gg=n(S,"LI",{});var O5e=s(Gg);Kte=n(O5e,"STRONG",{});var yQr=s(Kte);Xao=r(yQr,"plbart"),yQr.forEach(t),zao=r(O5e," \u2014 "),AP=n(O5e,"A",{href:!0});var LQr=s(AP);Wao=r(LQr,"PLBartTokenizer"),LQr.forEach(t),Qao=r(O5e," (PLBart model)"),O5e.forEach(t),Hao=i(S),Og=n(S,"LI",{});var V5e=s(Og);Zte=n(V5e,"STRONG",{});var xQr=s(Zte);Uao=r(xQr,"prophetnet"),xQr.forEach(t),Jao=r(V5e," \u2014 "),yP=n(V5e,"A",{href:!0});var $Qr=s(yP);Yao=r($Qr,"ProphetNetTokenizer"),$Qr.forEach(t),Kao=r(V5e," (ProphetNet model)"),V5e.forEach(t),Zao=i(S),us=n(S,"LI",{});var m$=s(us);eae=n(m$,"STRONG",{});var kQr=s(eae);eno=r(kQr,"qdqbert"),kQr.forEach(t),ono=r(m$," \u2014 "),LP=n(m$,"A",{href:!0});var SQr=s(LP);rno=r(SQr,"BertTokenizer"),SQr.forEach(t),tno=r(m$," or "),xP=n(m$,"A",{href:!0});var RQr=s(xP);ano=r(RQr,"BertTokenizerFast"),RQr.forEach(t),nno=r(m$," (QDQBert model)"),m$.forEach(t),sno=i(S),Vg=n(S,"LI",{});var X5e=s(Vg);oae=n(X5e,"STRONG",{});var PQr=s(oae);lno=r(PQr,"rag"),PQr.forEach(t),ino=r(X5e," \u2014 "),$P=n(X5e,"A",{href:!0});var BQr=s($P);dno=r(BQr,"RagTokenizer"),BQr.forEach(t),cno=r(X5e," (RAG model)"),X5e.forEach(t),fno=i(S),bs=n(S,"LI",{});var g$=s(bs);rae=n(g$,"STRONG",{});var IQr=s(rae);mno=r(IQr,"realm"),IQr.forEach(t),gno=r(g$," \u2014 "),kP=n(g$,"A",{href:!0});var qQr=s(kP);hno=r(qQr,"RealmTokenizer"),qQr.forEach(t),pno=r(g$," or "),SP=n(g$,"A",{href:!0});var NQr=s(SP);_no=r(NQr,"RealmTokenizerFast"),NQr.forEach(t),uno=r(g$," (Realm model)"),g$.forEach(t),bno=i(S),vs=n(S,"LI",{});var h$=s(vs);tae=n(h$,"STRONG",{});var jQr=s(tae);vno=r(jQr,"reformer"),jQr.forEach(t),Fno=r(h$," \u2014 "),RP=n(h$,"A",{href:!0});var DQr=s(RP);Tno=r(DQr,"ReformerTokenizer"),DQr.forEach(t),Mno=r(h$," or "),PP=n(h$,"A",{href:!0});var GQr=s(PP);Eno=r(GQr,"ReformerTokenizerFast"),GQr.forEach(t),Cno=r(h$," (Reformer model)"),h$.forEach(t),wno=i(S),Fs=n(S,"LI",{});var p$=s(Fs);aae=n(p$,"STRONG",{});var OQr=s(aae);Ano=r(OQr,"rembert"),OQr.forEach(t),yno=r(p$," \u2014 "),BP=n(p$,"A",{href:!0});var VQr=s(BP);Lno=r(VQr,"RemBertTokenizer"),VQr.forEach(t),xno=r(p$," or "),IP=n(p$,"A",{href:!0});var XQr=s(IP);$no=r(XQr,"RemBertTokenizerFast"),XQr.forEach(t),kno=r(p$," (RemBERT model)"),p$.forEach(t),Sno=i(S),Ts=n(S,"LI",{});var _$=s(Ts);nae=n(_$,"STRONG",{});var zQr=s(nae);Rno=r(zQr,"retribert"),zQr.forEach(t),Pno=r(_$," \u2014 "),qP=n(_$,"A",{href:!0});var WQr=s(qP);Bno=r(WQr,"RetriBertTokenizer"),WQr.forEach(t),Ino=r(_$," or "),NP=n(_$,"A",{href:!0});var QQr=s(NP);qno=r(QQr,"RetriBertTokenizerFast"),QQr.forEach(t),Nno=r(_$," (RetriBERT model)"),_$.forEach(t),jno=i(S),Ms=n(S,"LI",{});var u$=s(Ms);sae=n(u$,"STRONG",{});var HQr=s(sae);Dno=r(HQr,"roberta"),HQr.forEach(t),Gno=r(u$," \u2014 "),jP=n(u$,"A",{href:!0});var UQr=s(jP);Ono=r(UQr,"RobertaTokenizer"),UQr.forEach(t),Vno=r(u$," or "),DP=n(u$,"A",{href:!0});var JQr=s(DP);Xno=r(JQr,"RobertaTokenizerFast"),JQr.forEach(t),zno=r(u$," (RoBERTa model)"),u$.forEach(t),Wno=i(S),Es=n(S,"LI",{});var b$=s(Es);lae=n(b$,"STRONG",{});var YQr=s(lae);Qno=r(YQr,"roformer"),YQr.forEach(t),Hno=r(b$," \u2014 "),GP=n(b$,"A",{href:!0});var KQr=s(GP);Uno=r(KQr,"RoFormerTokenizer"),KQr.forEach(t),Jno=r(b$," or "),OP=n(b$,"A",{href:!0});var ZQr=s(OP);Yno=r(ZQr,"RoFormerTokenizerFast"),ZQr.forEach(t),Kno=r(b$," (RoFormer model)"),b$.forEach(t),Zno=i(S),Xg=n(S,"LI",{});var z5e=s(Xg);iae=n(z5e,"STRONG",{});var eHr=s(iae);eso=r(eHr,"speech_to_text"),eHr.forEach(t),oso=r(z5e," \u2014 "),VP=n(z5e,"A",{href:!0});var oHr=s(VP);rso=r(oHr,"Speech2TextTokenizer"),oHr.forEach(t),tso=r(z5e," (Speech2Text model)"),z5e.forEach(t),aso=i(S),zg=n(S,"LI",{});var W5e=s(zg);dae=n(W5e,"STRONG",{});var rHr=s(dae);nso=r(rHr,"speech_to_text_2"),rHr.forEach(t),sso=r(W5e," \u2014 "),XP=n(W5e,"A",{href:!0});var tHr=s(XP);lso=r(tHr,"Speech2Text2Tokenizer"),tHr.forEach(t),iso=r(W5e," (Speech2Text2 model)"),W5e.forEach(t),dso=i(S),Cs=n(S,"LI",{});var v$=s(Cs);cae=n(v$,"STRONG",{});var aHr=s(cae);cso=r(aHr,"splinter"),aHr.forEach(t),fso=r(v$," \u2014 "),zP=n(v$,"A",{href:!0});var nHr=s(zP);mso=r(nHr,"SplinterTokenizer"),nHr.forEach(t),gso=r(v$," or "),WP=n(v$,"A",{href:!0});var sHr=s(WP);hso=r(sHr,"SplinterTokenizerFast"),sHr.forEach(t),pso=r(v$," (Splinter model)"),v$.forEach(t),_so=i(S),ws=n(S,"LI",{});var F$=s(ws);fae=n(F$,"STRONG",{});var lHr=s(fae);uso=r(lHr,"squeezebert"),lHr.forEach(t),bso=r(F$," \u2014 "),QP=n(F$,"A",{href:!0});var iHr=s(QP);vso=r(iHr,"SqueezeBertTokenizer"),iHr.forEach(t),Fso=r(F$," or "),HP=n(F$,"A",{href:!0});var dHr=s(HP);Tso=r(dHr,"SqueezeBertTokenizerFast"),dHr.forEach(t),Mso=r(F$," (SqueezeBERT model)"),F$.forEach(t),Eso=i(S),As=n(S,"LI",{});var T$=s(As);mae=n(T$,"STRONG",{});var cHr=s(mae);Cso=r(cHr,"t5"),cHr.forEach(t),wso=r(T$," \u2014 "),UP=n(T$,"A",{href:!0});var fHr=s(UP);Aso=r(fHr,"T5Tokenizer"),fHr.forEach(t),yso=r(T$," or "),JP=n(T$,"A",{href:!0});var mHr=s(JP);Lso=r(mHr,"T5TokenizerFast"),mHr.forEach(t),xso=r(T$," (T5 model)"),T$.forEach(t),$so=i(S),Wg=n(S,"LI",{});var Q5e=s(Wg);gae=n(Q5e,"STRONG",{});var gHr=s(gae);kso=r(gHr,"tapas"),gHr.forEach(t),Sso=r(Q5e," \u2014 "),YP=n(Q5e,"A",{href:!0});var hHr=s(YP);Rso=r(hHr,"TapasTokenizer"),hHr.forEach(t),Pso=r(Q5e," (TAPAS model)"),Q5e.forEach(t),Bso=i(S),Qg=n(S,"LI",{});var H5e=s(Qg);hae=n(H5e,"STRONG",{});var pHr=s(hae);Iso=r(pHr,"tapex"),pHr.forEach(t),qso=r(H5e," \u2014 "),KP=n(H5e,"A",{href:!0});var _Hr=s(KP);Nso=r(_Hr,"TapexTokenizer"),_Hr.forEach(t),jso=r(H5e," (TAPEX model)"),H5e.forEach(t),Dso=i(S),Hg=n(S,"LI",{});var U5e=s(Hg);pae=n(U5e,"STRONG",{});var uHr=s(pae);Gso=r(uHr,"transfo-xl"),uHr.forEach(t),Oso=r(U5e," \u2014 "),ZP=n(U5e,"A",{href:!0});var bHr=s(ZP);Vso=r(bHr,"TransfoXLTokenizer"),bHr.forEach(t),Xso=r(U5e," (Transformer-XL model)"),U5e.forEach(t),zso=i(S),ys=n(S,"LI",{});var M$=s(ys);_ae=n(M$,"STRONG",{});var vHr=s(_ae);Wso=r(vHr,"visual_bert"),vHr.forEach(t),Qso=r(M$," \u2014 "),eB=n(M$,"A",{href:!0});var FHr=s(eB);Hso=r(FHr,"BertTokenizer"),FHr.forEach(t),Uso=r(M$," or "),oB=n(M$,"A",{href:!0});var THr=s(oB);Jso=r(THr,"BertTokenizerFast"),THr.forEach(t),Yso=r(M$," (VisualBert model)"),M$.forEach(t),Kso=i(S),Ug=n(S,"LI",{});var J5e=s(Ug);uae=n(J5e,"STRONG",{});var MHr=s(uae);Zso=r(MHr,"wav2vec2"),MHr.forEach(t),elo=r(J5e," \u2014 "),rB=n(J5e,"A",{href:!0});var EHr=s(rB);olo=r(EHr,"Wav2Vec2CTCTokenizer"),EHr.forEach(t),rlo=r(J5e," (Wav2Vec2 model)"),J5e.forEach(t),tlo=i(S),Jg=n(S,"LI",{});var Y5e=s(Jg);bae=n(Y5e,"STRONG",{});var CHr=s(bae);alo=r(CHr,"wav2vec2-conformer"),CHr.forEach(t),nlo=r(Y5e," \u2014 "),tB=n(Y5e,"A",{href:!0});var wHr=s(tB);slo=r(wHr,"Wav2Vec2CTCTokenizer"),wHr.forEach(t),llo=r(Y5e," (Wav2Vec2-Conformer model)"),Y5e.forEach(t),ilo=i(S),Yg=n(S,"LI",{});var K5e=s(Yg);vae=n(K5e,"STRONG",{});var AHr=s(vae);dlo=r(AHr,"wav2vec2_phoneme"),AHr.forEach(t),clo=r(K5e," \u2014 "),aB=n(K5e,"A",{href:!0});var yHr=s(aB);flo=r(yHr,"Wav2Vec2PhonemeCTCTokenizer"),yHr.forEach(t),mlo=r(K5e," (Wav2Vec2Phoneme model)"),K5e.forEach(t),glo=i(S),Ls=n(S,"LI",{});var E$=s(Ls);Fae=n(E$,"STRONG",{});var LHr=s(Fae);hlo=r(LHr,"xglm"),LHr.forEach(t),plo=r(E$," \u2014 "),nB=n(E$,"A",{href:!0});var xHr=s(nB);_lo=r(xHr,"XGLMTokenizer"),xHr.forEach(t),ulo=r(E$," or "),sB=n(E$,"A",{href:!0});var $Hr=s(sB);blo=r($Hr,"XGLMTokenizerFast"),$Hr.forEach(t),vlo=r(E$," (XGLM model)"),E$.forEach(t),Flo=i(S),Kg=n(S,"LI",{});var Z5e=s(Kg);Tae=n(Z5e,"STRONG",{});var kHr=s(Tae);Tlo=r(kHr,"xlm"),kHr.forEach(t),Mlo=r(Z5e," \u2014 "),lB=n(Z5e,"A",{href:!0});var SHr=s(lB);Elo=r(SHr,"XLMTokenizer"),SHr.forEach(t),Clo=r(Z5e," (XLM model)"),Z5e.forEach(t),wlo=i(S),Zg=n(S,"LI",{});var ewe=s(Zg);Mae=n(ewe,"STRONG",{});var RHr=s(Mae);Alo=r(RHr,"xlm-prophetnet"),RHr.forEach(t),ylo=r(ewe," \u2014 "),iB=n(ewe,"A",{href:!0});var PHr=s(iB);Llo=r(PHr,"XLMProphetNetTokenizer"),PHr.forEach(t),xlo=r(ewe," (XLMProphetNet model)"),ewe.forEach(t),$lo=i(S),xs=n(S,"LI",{});var C$=s(xs);Eae=n(C$,"STRONG",{});var BHr=s(Eae);klo=r(BHr,"xlm-roberta"),BHr.forEach(t),Slo=r(C$," \u2014 "),dB=n(C$,"A",{href:!0});var IHr=s(dB);Rlo=r(IHr,"XLMRobertaTokenizer"),IHr.forEach(t),Plo=r(C$," or "),cB=n(C$,"A",{href:!0});var qHr=s(cB);Blo=r(qHr,"XLMRobertaTokenizerFast"),qHr.forEach(t),Ilo=r(C$," (XLM-RoBERTa model)"),C$.forEach(t),qlo=i(S),$s=n(S,"LI",{});var w$=s($s);Cae=n(w$,"STRONG",{});var NHr=s(Cae);Nlo=r(NHr,"xlm-roberta-xl"),NHr.forEach(t),jlo=r(w$," \u2014 "),fB=n(w$,"A",{href:!0});var jHr=s(fB);Dlo=r(jHr,"RobertaTokenizer"),jHr.forEach(t),Glo=r(w$," or "),mB=n(w$,"A",{href:!0});var DHr=s(mB);Olo=r(DHr,"RobertaTokenizerFast"),DHr.forEach(t),Vlo=r(w$," (XLM-RoBERTa-XL model)"),w$.forEach(t),Xlo=i(S),ks=n(S,"LI",{});var A$=s(ks);wae=n(A$,"STRONG",{});var GHr=s(wae);zlo=r(GHr,"xlnet"),GHr.forEach(t),Wlo=r(A$," \u2014 "),gB=n(A$,"A",{href:!0});var OHr=s(gB);Qlo=r(OHr,"XLNetTokenizer"),OHr.forEach(t),Hlo=r(A$," or "),hB=n(A$,"A",{href:!0});var VHr=s(hB);Ulo=r(VHr,"XLNetTokenizerFast"),VHr.forEach(t),Jlo=r(A$," (XLNet model)"),A$.forEach(t),Ylo=i(S),Ss=n(S,"LI",{});var y$=s(Ss);Aae=n(y$,"STRONG",{});var XHr=s(Aae);Klo=r(XHr,"yoso"),XHr.forEach(t),Zlo=r(y$," \u2014 "),pB=n(y$,"A",{href:!0});var zHr=s(pB);eio=r(zHr,"AlbertTokenizer"),zHr.forEach(t),oio=r(y$," or "),_B=n(y$,"A",{href:!0});var WHr=s(_B);rio=r(WHr,"AlbertTokenizerFast"),WHr.forEach(t),tio=r(y$," (YOSO model)"),y$.forEach(t),S.forEach(t),aio=i(qs),T(eh.$$.fragment,qs),qs.forEach(t),nio=i(Is),oh=n(Is,"DIV",{class:!0});var lje=s(oh);T(yA.$$.fragment,lje),sio=i(lje),yae=n(lje,"P",{});var QHr=s(yae);lio=r(QHr,"Register a new tokenizer in this mapping."),QHr.forEach(t),lje.forEach(t),Is.forEach(t),iqe=i(f),Ti=n(f,"H2",{class:!0});var ije=s(Ti);rh=n(ije,"A",{id:!0,class:!0,href:!0});var HHr=s(rh);Lae=n(HHr,"SPAN",{});var UHr=s(Lae);T(LA.$$.fragment,UHr),UHr.forEach(t),HHr.forEach(t),iio=i(ije),xae=n(ije,"SPAN",{});var JHr=s(xae);dio=r(JHr,"AutoFeatureExtractor"),JHr.forEach(t),ije.forEach(t),dqe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(xA.$$.fragment,Ns),cio=i(Ns),$A=n(Ns,"P",{});var dje=s($A);fio=r(dje,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),uB=n(dje,"A",{href:!0});var YHr=s(uB);mio=r(YHr,"AutoFeatureExtractor.from_pretrained()"),YHr.forEach(t),gio=r(dje," class method."),dje.forEach(t),hio=i(Ns),kA=n(Ns,"P",{});var cje=s(kA);pio=r(cje,"This class cannot be instantiated directly using "),$ae=n(cje,"CODE",{});var KHr=s($ae);_io=r(KHr,"__init__()"),KHr.forEach(t),uio=r(cje," (throws an error)."),cje.forEach(t),bio=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(SA.$$.fragment,Zt),vio=i(Zt),kae=n(Zt,"P",{});var ZHr=s(kae);Fio=r(ZHr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ZHr.forEach(t),Tio=i(Zt),ya=n(Zt,"P",{});var uw=s(ya);Mio=r(uw,"The feature extractor class to instantiate is selected based on the "),Sae=n(uw,"CODE",{});var eUr=s(Sae);Eio=r(eUr,"model_type"),eUr.forEach(t),Cio=r(uw,` property of the config object
(either passed as an argument or loaded from `),Rae=n(uw,"CODE",{});var oUr=s(Rae);wio=r(oUr,"pretrained_model_name_or_path"),oUr.forEach(t),Aio=r(uw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Pae=n(uw,"CODE",{});var rUr=s(Pae);yio=r(rUr,"pretrained_model_name_or_path"),rUr.forEach(t),Lio=r(uw,":"),uw.forEach(t),xio=i(Zt),Z=n(Zt,"UL",{});var re=s(Z);th=n(re,"LI",{});var owe=s(th);Bae=n(owe,"STRONG",{});var tUr=s(Bae);$io=r(tUr,"beit"),tUr.forEach(t),kio=r(owe," \u2014 "),bB=n(owe,"A",{href:!0});var aUr=s(bB);Sio=r(aUr,"BeitFeatureExtractor"),aUr.forEach(t),Rio=r(owe," (BEiT model)"),owe.forEach(t),Pio=i(re),ah=n(re,"LI",{});var rwe=s(ah);Iae=n(rwe,"STRONG",{});var nUr=s(Iae);Bio=r(nUr,"clip"),nUr.forEach(t),Iio=r(rwe," \u2014 "),vB=n(rwe,"A",{href:!0});var sUr=s(vB);qio=r(sUr,"CLIPFeatureExtractor"),sUr.forEach(t),Nio=r(rwe," (CLIP model)"),rwe.forEach(t),jio=i(re),nh=n(re,"LI",{});var twe=s(nh);qae=n(twe,"STRONG",{});var lUr=s(qae);Dio=r(lUr,"convnext"),lUr.forEach(t),Gio=r(twe," \u2014 "),FB=n(twe,"A",{href:!0});var iUr=s(FB);Oio=r(iUr,"ConvNextFeatureExtractor"),iUr.forEach(t),Vio=r(twe," (ConvNext model)"),twe.forEach(t),Xio=i(re),sh=n(re,"LI",{});var awe=s(sh);Nae=n(awe,"STRONG",{});var dUr=s(Nae);zio=r(dUr,"cvt"),dUr.forEach(t),Wio=r(awe," \u2014 "),TB=n(awe,"A",{href:!0});var cUr=s(TB);Qio=r(cUr,"ConvNextFeatureExtractor"),cUr.forEach(t),Hio=r(awe," (CvT model)"),awe.forEach(t),Uio=i(re),lh=n(re,"LI",{});var nwe=s(lh);jae=n(nwe,"STRONG",{});var fUr=s(jae);Jio=r(fUr,"data2vec-audio"),fUr.forEach(t),Yio=r(nwe," \u2014 "),MB=n(nwe,"A",{href:!0});var mUr=s(MB);Kio=r(mUr,"Wav2Vec2FeatureExtractor"),mUr.forEach(t),Zio=r(nwe," (Data2VecAudio model)"),nwe.forEach(t),edo=i(re),ih=n(re,"LI",{});var swe=s(ih);Dae=n(swe,"STRONG",{});var gUr=s(Dae);odo=r(gUr,"data2vec-vision"),gUr.forEach(t),rdo=r(swe," \u2014 "),EB=n(swe,"A",{href:!0});var hUr=s(EB);tdo=r(hUr,"BeitFeatureExtractor"),hUr.forEach(t),ado=r(swe," (Data2VecVision model)"),swe.forEach(t),ndo=i(re),dh=n(re,"LI",{});var lwe=s(dh);Gae=n(lwe,"STRONG",{});var pUr=s(Gae);sdo=r(pUr,"deit"),pUr.forEach(t),ldo=r(lwe," \u2014 "),CB=n(lwe,"A",{href:!0});var _Ur=s(CB);ido=r(_Ur,"DeiTFeatureExtractor"),_Ur.forEach(t),ddo=r(lwe," (DeiT model)"),lwe.forEach(t),cdo=i(re),ch=n(re,"LI",{});var iwe=s(ch);Oae=n(iwe,"STRONG",{});var uUr=s(Oae);fdo=r(uUr,"detr"),uUr.forEach(t),mdo=r(iwe," \u2014 "),wB=n(iwe,"A",{href:!0});var bUr=s(wB);gdo=r(bUr,"DetrFeatureExtractor"),bUr.forEach(t),hdo=r(iwe," (DETR model)"),iwe.forEach(t),pdo=i(re),fh=n(re,"LI",{});var dwe=s(fh);Vae=n(dwe,"STRONG",{});var vUr=s(Vae);_do=r(vUr,"dpt"),vUr.forEach(t),udo=r(dwe," \u2014 "),AB=n(dwe,"A",{href:!0});var FUr=s(AB);bdo=r(FUr,"DPTFeatureExtractor"),FUr.forEach(t),vdo=r(dwe," (DPT model)"),dwe.forEach(t),Fdo=i(re),mh=n(re,"LI",{});var cwe=s(mh);Xae=n(cwe,"STRONG",{});var TUr=s(Xae);Tdo=r(TUr,"flava"),TUr.forEach(t),Mdo=r(cwe," \u2014 "),yB=n(cwe,"A",{href:!0});var MUr=s(yB);Edo=r(MUr,"FlavaFeatureExtractor"),MUr.forEach(t),Cdo=r(cwe," (Flava model)"),cwe.forEach(t),wdo=i(re),gh=n(re,"LI",{});var fwe=s(gh);zae=n(fwe,"STRONG",{});var EUr=s(zae);Ado=r(EUr,"glpn"),EUr.forEach(t),ydo=r(fwe," \u2014 "),LB=n(fwe,"A",{href:!0});var CUr=s(LB);Ldo=r(CUr,"GLPNFeatureExtractor"),CUr.forEach(t),xdo=r(fwe," (GLPN model)"),fwe.forEach(t),$do=i(re),hh=n(re,"LI",{});var mwe=s(hh);Wae=n(mwe,"STRONG",{});var wUr=s(Wae);kdo=r(wUr,"hubert"),wUr.forEach(t),Sdo=r(mwe," \u2014 "),xB=n(mwe,"A",{href:!0});var AUr=s(xB);Rdo=r(AUr,"Wav2Vec2FeatureExtractor"),AUr.forEach(t),Pdo=r(mwe," (Hubert model)"),mwe.forEach(t),Bdo=i(re),ph=n(re,"LI",{});var gwe=s(ph);Qae=n(gwe,"STRONG",{});var yUr=s(Qae);Ido=r(yUr,"layoutlmv2"),yUr.forEach(t),qdo=r(gwe," \u2014 "),$B=n(gwe,"A",{href:!0});var LUr=s($B);Ndo=r(LUr,"LayoutLMv2FeatureExtractor"),LUr.forEach(t),jdo=r(gwe," (LayoutLMv2 model)"),gwe.forEach(t),Ddo=i(re),_h=n(re,"LI",{});var hwe=s(_h);Hae=n(hwe,"STRONG",{});var xUr=s(Hae);Gdo=r(xUr,"maskformer"),xUr.forEach(t),Odo=r(hwe," \u2014 "),kB=n(hwe,"A",{href:!0});var $Ur=s(kB);Vdo=r($Ur,"MaskFormerFeatureExtractor"),$Ur.forEach(t),Xdo=r(hwe," (MaskFormer model)"),hwe.forEach(t),zdo=i(re),uh=n(re,"LI",{});var pwe=s(uh);Uae=n(pwe,"STRONG",{});var kUr=s(Uae);Wdo=r(kUr,"perceiver"),kUr.forEach(t),Qdo=r(pwe," \u2014 "),SB=n(pwe,"A",{href:!0});var SUr=s(SB);Hdo=r(SUr,"PerceiverFeatureExtractor"),SUr.forEach(t),Udo=r(pwe," (Perceiver model)"),pwe.forEach(t),Jdo=i(re),bh=n(re,"LI",{});var _we=s(bh);Jae=n(_we,"STRONG",{});var RUr=s(Jae);Ydo=r(RUr,"poolformer"),RUr.forEach(t),Kdo=r(_we," \u2014 "),RB=n(_we,"A",{href:!0});var PUr=s(RB);Zdo=r(PUr,"PoolFormerFeatureExtractor"),PUr.forEach(t),eco=r(_we," (PoolFormer model)"),_we.forEach(t),oco=i(re),vh=n(re,"LI",{});var uwe=s(vh);Yae=n(uwe,"STRONG",{});var BUr=s(Yae);rco=r(BUr,"regnet"),BUr.forEach(t),tco=r(uwe," \u2014 "),PB=n(uwe,"A",{href:!0});var IUr=s(PB);aco=r(IUr,"ConvNextFeatureExtractor"),IUr.forEach(t),nco=r(uwe," (RegNet model)"),uwe.forEach(t),sco=i(re),Fh=n(re,"LI",{});var bwe=s(Fh);Kae=n(bwe,"STRONG",{});var qUr=s(Kae);lco=r(qUr,"resnet"),qUr.forEach(t),ico=r(bwe," \u2014 "),BB=n(bwe,"A",{href:!0});var NUr=s(BB);dco=r(NUr,"ConvNextFeatureExtractor"),NUr.forEach(t),cco=r(bwe," (ResNet model)"),bwe.forEach(t),fco=i(re),Th=n(re,"LI",{});var vwe=s(Th);Zae=n(vwe,"STRONG",{});var jUr=s(Zae);mco=r(jUr,"segformer"),jUr.forEach(t),gco=r(vwe," \u2014 "),IB=n(vwe,"A",{href:!0});var DUr=s(IB);hco=r(DUr,"SegformerFeatureExtractor"),DUr.forEach(t),pco=r(vwe," (SegFormer model)"),vwe.forEach(t),_co=i(re),Mh=n(re,"LI",{});var Fwe=s(Mh);ene=n(Fwe,"STRONG",{});var GUr=s(ene);uco=r(GUr,"speech_to_text"),GUr.forEach(t),bco=r(Fwe," \u2014 "),qB=n(Fwe,"A",{href:!0});var OUr=s(qB);vco=r(OUr,"Speech2TextFeatureExtractor"),OUr.forEach(t),Fco=r(Fwe," (Speech2Text model)"),Fwe.forEach(t),Tco=i(re),Eh=n(re,"LI",{});var Twe=s(Eh);one=n(Twe,"STRONG",{});var VUr=s(one);Mco=r(VUr,"swin"),VUr.forEach(t),Eco=r(Twe," \u2014 "),NB=n(Twe,"A",{href:!0});var XUr=s(NB);Cco=r(XUr,"ViTFeatureExtractor"),XUr.forEach(t),wco=r(Twe," (Swin model)"),Twe.forEach(t),Aco=i(re),Ch=n(re,"LI",{});var Mwe=s(Ch);rne=n(Mwe,"STRONG",{});var zUr=s(rne);yco=r(zUr,"van"),zUr.forEach(t),Lco=r(Mwe," \u2014 "),jB=n(Mwe,"A",{href:!0});var WUr=s(jB);xco=r(WUr,"ConvNextFeatureExtractor"),WUr.forEach(t),$co=r(Mwe," (VAN model)"),Mwe.forEach(t),kco=i(re),wh=n(re,"LI",{});var Ewe=s(wh);tne=n(Ewe,"STRONG",{});var QUr=s(tne);Sco=r(QUr,"vit"),QUr.forEach(t),Rco=r(Ewe," \u2014 "),DB=n(Ewe,"A",{href:!0});var HUr=s(DB);Pco=r(HUr,"ViTFeatureExtractor"),HUr.forEach(t),Bco=r(Ewe," (ViT model)"),Ewe.forEach(t),Ico=i(re),Ah=n(re,"LI",{});var Cwe=s(Ah);ane=n(Cwe,"STRONG",{});var UUr=s(ane);qco=r(UUr,"vit_mae"),UUr.forEach(t),Nco=r(Cwe," \u2014 "),GB=n(Cwe,"A",{href:!0});var JUr=s(GB);jco=r(JUr,"ViTFeatureExtractor"),JUr.forEach(t),Dco=r(Cwe," (ViTMAE model)"),Cwe.forEach(t),Gco=i(re),yh=n(re,"LI",{});var wwe=s(yh);nne=n(wwe,"STRONG",{});var YUr=s(nne);Oco=r(YUr,"wav2vec2"),YUr.forEach(t),Vco=r(wwe," \u2014 "),OB=n(wwe,"A",{href:!0});var KUr=s(OB);Xco=r(KUr,"Wav2Vec2FeatureExtractor"),KUr.forEach(t),zco=r(wwe," (Wav2Vec2 model)"),wwe.forEach(t),Wco=i(re),Lh=n(re,"LI",{});var Awe=s(Lh);sne=n(Awe,"STRONG",{});var ZUr=s(sne);Qco=r(ZUr,"wav2vec2-conformer"),ZUr.forEach(t),Hco=r(Awe," \u2014 "),VB=n(Awe,"A",{href:!0});var eJr=s(VB);Uco=r(eJr,"Wav2Vec2FeatureExtractor"),eJr.forEach(t),Jco=r(Awe," (Wav2Vec2-Conformer model)"),Awe.forEach(t),Yco=i(re),xh=n(re,"LI",{});var ywe=s(xh);lne=n(ywe,"STRONG",{});var oJr=s(lne);Kco=r(oJr,"yolos"),oJr.forEach(t),Zco=r(ywe," \u2014 "),XB=n(ywe,"A",{href:!0});var rJr=s(XB);efo=r(rJr,"YolosFeatureExtractor"),rJr.forEach(t),ofo=r(ywe," (YOLOS model)"),ywe.forEach(t),re.forEach(t),rfo=i(Zt),T($h.$$.fragment,Zt),tfo=i(Zt),T(kh.$$.fragment,Zt),Zt.forEach(t),afo=i(Ns),Sh=n(Ns,"DIV",{class:!0});var fje=s(Sh);T(RA.$$.fragment,fje),nfo=i(fje),ine=n(fje,"P",{});var tJr=s(ine);sfo=r(tJr,"Register a new feature extractor for this class."),tJr.forEach(t),fje.forEach(t),Ns.forEach(t),cqe=i(f),Mi=n(f,"H2",{class:!0});var mje=s(Mi);Rh=n(mje,"A",{id:!0,class:!0,href:!0});var aJr=s(Rh);dne=n(aJr,"SPAN",{});var nJr=s(dne);T(PA.$$.fragment,nJr),nJr.forEach(t),aJr.forEach(t),lfo=i(mje),cne=n(mje,"SPAN",{});var sJr=s(cne);ifo=r(sJr,"AutoProcessor"),sJr.forEach(t),mje.forEach(t),fqe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(BA.$$.fragment,js),dfo=i(js),IA=n(js,"P",{});var gje=s(IA);cfo=r(gje,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),zB=n(gje,"A",{href:!0});var lJr=s(zB);ffo=r(lJr,"AutoProcessor.from_pretrained()"),lJr.forEach(t),mfo=r(gje," class method."),gje.forEach(t),gfo=i(js),qA=n(js,"P",{});var hje=s(qA);hfo=r(hje,"This class cannot be instantiated directly using "),fne=n(hje,"CODE",{});var iJr=s(fne);pfo=r(iJr,"__init__()"),iJr.forEach(t),_fo=r(hje," (throws an error)."),hje.forEach(t),ufo=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(NA.$$.fragment,ea),bfo=i(ea),mne=n(ea,"P",{});var dJr=s(mne);vfo=r(dJr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),dJr.forEach(t),Ffo=i(ea),Ei=n(ea,"P",{});var DK=s(Ei);Tfo=r(DK,"The processor class to instantiate is selected based on the "),gne=n(DK,"CODE",{});var cJr=s(gne);Mfo=r(cJr,"model_type"),cJr.forEach(t),Efo=r(DK,` property of the config object (either
passed as an argument or loaded from `),hne=n(DK,"CODE",{});var fJr=s(hne);Cfo=r(fJr,"pretrained_model_name_or_path"),fJr.forEach(t),wfo=r(DK," if possible):"),DK.forEach(t),Afo=i(ea),pe=n(ea,"UL",{});var be=s(pe);Ph=n(be,"LI",{});var Lwe=s(Ph);pne=n(Lwe,"STRONG",{});var mJr=s(pne);yfo=r(mJr,"clip"),mJr.forEach(t),Lfo=r(Lwe," \u2014 "),WB=n(Lwe,"A",{href:!0});var gJr=s(WB);xfo=r(gJr,"CLIPProcessor"),gJr.forEach(t),$fo=r(Lwe," (CLIP model)"),Lwe.forEach(t),kfo=i(be),Bh=n(be,"LI",{});var xwe=s(Bh);_ne=n(xwe,"STRONG",{});var hJr=s(_ne);Sfo=r(hJr,"flava"),hJr.forEach(t),Rfo=r(xwe," \u2014 "),une=n(xwe,"CODE",{});var pJr=s(une);Pfo=r(pJr,"FLAVAProcessor"),pJr.forEach(t),Bfo=r(xwe," (Flava model)"),xwe.forEach(t),Ifo=i(be),Ih=n(be,"LI",{});var $we=s(Ih);bne=n($we,"STRONG",{});var _Jr=s(bne);qfo=r(_Jr,"layoutlmv2"),_Jr.forEach(t),Nfo=r($we," \u2014 "),QB=n($we,"A",{href:!0});var uJr=s(QB);jfo=r(uJr,"LayoutLMv2Processor"),uJr.forEach(t),Dfo=r($we," (LayoutLMv2 model)"),$we.forEach(t),Gfo=i(be),qh=n(be,"LI",{});var kwe=s(qh);vne=n(kwe,"STRONG",{});var bJr=s(vne);Ofo=r(bJr,"layoutxlm"),bJr.forEach(t),Vfo=r(kwe," \u2014 "),HB=n(kwe,"A",{href:!0});var vJr=s(HB);Xfo=r(vJr,"LayoutXLMProcessor"),vJr.forEach(t),zfo=r(kwe," (LayoutXLM model)"),kwe.forEach(t),Wfo=i(be),Nh=n(be,"LI",{});var Swe=s(Nh);Fne=n(Swe,"STRONG",{});var FJr=s(Fne);Qfo=r(FJr,"sew"),FJr.forEach(t),Hfo=r(Swe," \u2014 "),UB=n(Swe,"A",{href:!0});var TJr=s(UB);Ufo=r(TJr,"Wav2Vec2Processor"),TJr.forEach(t),Jfo=r(Swe," (SEW model)"),Swe.forEach(t),Yfo=i(be),jh=n(be,"LI",{});var Rwe=s(jh);Tne=n(Rwe,"STRONG",{});var MJr=s(Tne);Kfo=r(MJr,"sew-d"),MJr.forEach(t),Zfo=r(Rwe," \u2014 "),JB=n(Rwe,"A",{href:!0});var EJr=s(JB);emo=r(EJr,"Wav2Vec2Processor"),EJr.forEach(t),omo=r(Rwe," (SEW-D model)"),Rwe.forEach(t),rmo=i(be),Dh=n(be,"LI",{});var Pwe=s(Dh);Mne=n(Pwe,"STRONG",{});var CJr=s(Mne);tmo=r(CJr,"speech_to_text"),CJr.forEach(t),amo=r(Pwe," \u2014 "),YB=n(Pwe,"A",{href:!0});var wJr=s(YB);nmo=r(wJr,"Speech2TextProcessor"),wJr.forEach(t),smo=r(Pwe," (Speech2Text model)"),Pwe.forEach(t),lmo=i(be),Gh=n(be,"LI",{});var Bwe=s(Gh);Ene=n(Bwe,"STRONG",{});var AJr=s(Ene);imo=r(AJr,"speech_to_text_2"),AJr.forEach(t),dmo=r(Bwe," \u2014 "),KB=n(Bwe,"A",{href:!0});var yJr=s(KB);cmo=r(yJr,"Speech2Text2Processor"),yJr.forEach(t),fmo=r(Bwe," (Speech2Text2 model)"),Bwe.forEach(t),mmo=i(be),Oh=n(be,"LI",{});var Iwe=s(Oh);Cne=n(Iwe,"STRONG",{});var LJr=s(Cne);gmo=r(LJr,"trocr"),LJr.forEach(t),hmo=r(Iwe," \u2014 "),ZB=n(Iwe,"A",{href:!0});var xJr=s(ZB);pmo=r(xJr,"TrOCRProcessor"),xJr.forEach(t),_mo=r(Iwe," (TrOCR model)"),Iwe.forEach(t),umo=i(be),Vh=n(be,"LI",{});var qwe=s(Vh);wne=n(qwe,"STRONG",{});var $Jr=s(wne);bmo=r($Jr,"unispeech"),$Jr.forEach(t),vmo=r(qwe," \u2014 "),eI=n(qwe,"A",{href:!0});var kJr=s(eI);Fmo=r(kJr,"Wav2Vec2Processor"),kJr.forEach(t),Tmo=r(qwe," (UniSpeech model)"),qwe.forEach(t),Mmo=i(be),Xh=n(be,"LI",{});var Nwe=s(Xh);Ane=n(Nwe,"STRONG",{});var SJr=s(Ane);Emo=r(SJr,"unispeech-sat"),SJr.forEach(t),Cmo=r(Nwe," \u2014 "),oI=n(Nwe,"A",{href:!0});var RJr=s(oI);wmo=r(RJr,"Wav2Vec2Processor"),RJr.forEach(t),Amo=r(Nwe," (UniSpeechSat model)"),Nwe.forEach(t),ymo=i(be),zh=n(be,"LI",{});var jwe=s(zh);yne=n(jwe,"STRONG",{});var PJr=s(yne);Lmo=r(PJr,"vilt"),PJr.forEach(t),xmo=r(jwe," \u2014 "),rI=n(jwe,"A",{href:!0});var BJr=s(rI);$mo=r(BJr,"ViltProcessor"),BJr.forEach(t),kmo=r(jwe," (ViLT model)"),jwe.forEach(t),Smo=i(be),Wh=n(be,"LI",{});var Dwe=s(Wh);Lne=n(Dwe,"STRONG",{});var IJr=s(Lne);Rmo=r(IJr,"vision-text-dual-encoder"),IJr.forEach(t),Pmo=r(Dwe," \u2014 "),tI=n(Dwe,"A",{href:!0});var qJr=s(tI);Bmo=r(qJr,"VisionTextDualEncoderProcessor"),qJr.forEach(t),Imo=r(Dwe," (VisionTextDualEncoder model)"),Dwe.forEach(t),qmo=i(be),Qh=n(be,"LI",{});var Gwe=s(Qh);xne=n(Gwe,"STRONG",{});var NJr=s(xne);Nmo=r(NJr,"wav2vec2"),NJr.forEach(t),jmo=r(Gwe," \u2014 "),aI=n(Gwe,"A",{href:!0});var jJr=s(aI);Dmo=r(jJr,"Wav2Vec2Processor"),jJr.forEach(t),Gmo=r(Gwe," (Wav2Vec2 model)"),Gwe.forEach(t),Omo=i(be),Hh=n(be,"LI",{});var Owe=s(Hh);$ne=n(Owe,"STRONG",{});var DJr=s($ne);Vmo=r(DJr,"wav2vec2-conformer"),DJr.forEach(t),Xmo=r(Owe," \u2014 "),nI=n(Owe,"A",{href:!0});var GJr=s(nI);zmo=r(GJr,"Wav2Vec2Processor"),GJr.forEach(t),Wmo=r(Owe," (Wav2Vec2-Conformer model)"),Owe.forEach(t),Qmo=i(be),Uh=n(be,"LI",{});var Vwe=s(Uh);kne=n(Vwe,"STRONG",{});var OJr=s(kne);Hmo=r(OJr,"wavlm"),OJr.forEach(t),Umo=r(Vwe," \u2014 "),sI=n(Vwe,"A",{href:!0});var VJr=s(sI);Jmo=r(VJr,"Wav2Vec2Processor"),VJr.forEach(t),Ymo=r(Vwe," (WavLM model)"),Vwe.forEach(t),be.forEach(t),Kmo=i(ea),T(Jh.$$.fragment,ea),Zmo=i(ea),T(Yh.$$.fragment,ea),ea.forEach(t),ego=i(js),Kh=n(js,"DIV",{class:!0});var pje=s(Kh);T(jA.$$.fragment,pje),ogo=i(pje),Sne=n(pje,"P",{});var XJr=s(Sne);rgo=r(XJr,"Register a new processor for this class."),XJr.forEach(t),pje.forEach(t),js.forEach(t),mqe=i(f),Ci=n(f,"H2",{class:!0});var _je=s(Ci);Zh=n(_je,"A",{id:!0,class:!0,href:!0});var zJr=s(Zh);Rne=n(zJr,"SPAN",{});var WJr=s(Rne);T(DA.$$.fragment,WJr),WJr.forEach(t),zJr.forEach(t),tgo=i(_je),Pne=n(_je,"SPAN",{});var QJr=s(Pne);ago=r(QJr,"AutoModel"),QJr.forEach(t),_je.forEach(t),gqe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(GA.$$.fragment,Ds),ngo=i(Ds),wi=n(Ds,"P",{});var GK=s(wi);sgo=r(GK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lI=n(GK,"A",{href:!0});var HJr=s(lI);lgo=r(HJr,"from_pretrained()"),HJr.forEach(t),igo=r(GK," class method or the "),iI=n(GK,"A",{href:!0});var UJr=s(iI);dgo=r(UJr,"from_config()"),UJr.forEach(t),cgo=r(GK,` class
method.`),GK.forEach(t),fgo=i(Ds),OA=n(Ds,"P",{});var uje=s(OA);mgo=r(uje,"This class cannot be instantiated directly using "),Bne=n(uje,"CODE",{});var JJr=s(Bne);ggo=r(JJr,"__init__()"),JJr.forEach(t),hgo=r(uje," (throws an error)."),uje.forEach(t),pgo=i(Ds),tt=n(Ds,"DIV",{class:!0});var bw=s(tt);T(VA.$$.fragment,bw),_go=i(bw),Ine=n(bw,"P",{});var YJr=s(Ine);ugo=r(YJr,"Instantiates one of the base model classes of the library from a configuration."),YJr.forEach(t),bgo=i(bw),Ai=n(bw,"P",{});var OK=s(Ai);vgo=r(OK,`Note:
Loading a model from its configuration file does `),qne=n(OK,"STRONG",{});var KJr=s(qne);Fgo=r(KJr,"not"),KJr.forEach(t),Tgo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dI=n(OK,"A",{href:!0});var ZJr=s(dI);Mgo=r(ZJr,"from_pretrained()"),ZJr.forEach(t),Ego=r(OK," to load the model weights."),OK.forEach(t),Cgo=i(bw),T(ep.$$.fragment,bw),bw.forEach(t),wgo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(XA.$$.fragment,oa),Ago=i(oa),Nne=n(oa,"P",{});var eYr=s(Nne);ygo=r(eYr,"Instantiate one of the base model classes of the library from a pretrained model."),eYr.forEach(t),Lgo=i(oa),La=n(oa,"P",{});var vw=s(La);xgo=r(vw,"The model class to instantiate is selected based on the "),jne=n(vw,"CODE",{});var oYr=s(jne);$go=r(oYr,"model_type"),oYr.forEach(t),kgo=r(vw,` property of the config object (either
passed as an argument or loaded from `),Dne=n(vw,"CODE",{});var rYr=s(Dne);Sgo=r(rYr,"pretrained_model_name_or_path"),rYr.forEach(t),Rgo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=n(vw,"CODE",{});var tYr=s(Gne);Pgo=r(tYr,"pretrained_model_name_or_path"),tYr.forEach(t),Bgo=r(vw,":"),vw.forEach(t),Igo=i(oa),x=n(oa,"UL",{});var $=s(x);op=n($,"LI",{});var Xwe=s(op);One=n(Xwe,"STRONG",{});var aYr=s(One);qgo=r(aYr,"albert"),aYr.forEach(t),Ngo=r(Xwe," \u2014 "),cI=n(Xwe,"A",{href:!0});var nYr=s(cI);jgo=r(nYr,"AlbertModel"),nYr.forEach(t),Dgo=r(Xwe," (ALBERT model)"),Xwe.forEach(t),Ggo=i($),rp=n($,"LI",{});var zwe=s(rp);Vne=n(zwe,"STRONG",{});var sYr=s(Vne);Ogo=r(sYr,"bart"),sYr.forEach(t),Vgo=r(zwe," \u2014 "),fI=n(zwe,"A",{href:!0});var lYr=s(fI);Xgo=r(lYr,"BartModel"),lYr.forEach(t),zgo=r(zwe," (BART model)"),zwe.forEach(t),Wgo=i($),tp=n($,"LI",{});var Wwe=s(tp);Xne=n(Wwe,"STRONG",{});var iYr=s(Xne);Qgo=r(iYr,"beit"),iYr.forEach(t),Hgo=r(Wwe," \u2014 "),mI=n(Wwe,"A",{href:!0});var dYr=s(mI);Ugo=r(dYr,"BeitModel"),dYr.forEach(t),Jgo=r(Wwe," (BEiT model)"),Wwe.forEach(t),Ygo=i($),ap=n($,"LI",{});var Qwe=s(ap);zne=n(Qwe,"STRONG",{});var cYr=s(zne);Kgo=r(cYr,"bert"),cYr.forEach(t),Zgo=r(Qwe," \u2014 "),gI=n(Qwe,"A",{href:!0});var fYr=s(gI);eho=r(fYr,"BertModel"),fYr.forEach(t),oho=r(Qwe," (BERT model)"),Qwe.forEach(t),rho=i($),np=n($,"LI",{});var Hwe=s(np);Wne=n(Hwe,"STRONG",{});var mYr=s(Wne);tho=r(mYr,"bert-generation"),mYr.forEach(t),aho=r(Hwe," \u2014 "),hI=n(Hwe,"A",{href:!0});var gYr=s(hI);nho=r(gYr,"BertGenerationEncoder"),gYr.forEach(t),sho=r(Hwe," (Bert Generation model)"),Hwe.forEach(t),lho=i($),sp=n($,"LI",{});var Uwe=s(sp);Qne=n(Uwe,"STRONG",{});var hYr=s(Qne);iho=r(hYr,"big_bird"),hYr.forEach(t),dho=r(Uwe," \u2014 "),pI=n(Uwe,"A",{href:!0});var pYr=s(pI);cho=r(pYr,"BigBirdModel"),pYr.forEach(t),fho=r(Uwe," (BigBird model)"),Uwe.forEach(t),mho=i($),lp=n($,"LI",{});var Jwe=s(lp);Hne=n(Jwe,"STRONG",{});var _Yr=s(Hne);gho=r(_Yr,"bigbird_pegasus"),_Yr.forEach(t),hho=r(Jwe," \u2014 "),_I=n(Jwe,"A",{href:!0});var uYr=s(_I);pho=r(uYr,"BigBirdPegasusModel"),uYr.forEach(t),_ho=r(Jwe," (BigBirdPegasus model)"),Jwe.forEach(t),uho=i($),ip=n($,"LI",{});var Ywe=s(ip);Une=n(Ywe,"STRONG",{});var bYr=s(Une);bho=r(bYr,"blenderbot"),bYr.forEach(t),vho=r(Ywe," \u2014 "),uI=n(Ywe,"A",{href:!0});var vYr=s(uI);Fho=r(vYr,"BlenderbotModel"),vYr.forEach(t),Tho=r(Ywe," (Blenderbot model)"),Ywe.forEach(t),Mho=i($),dp=n($,"LI",{});var Kwe=s(dp);Jne=n(Kwe,"STRONG",{});var FYr=s(Jne);Eho=r(FYr,"blenderbot-small"),FYr.forEach(t),Cho=r(Kwe," \u2014 "),bI=n(Kwe,"A",{href:!0});var TYr=s(bI);who=r(TYr,"BlenderbotSmallModel"),TYr.forEach(t),Aho=r(Kwe," (BlenderbotSmall model)"),Kwe.forEach(t),yho=i($),cp=n($,"LI",{});var Zwe=s(cp);Yne=n(Zwe,"STRONG",{});var MYr=s(Yne);Lho=r(MYr,"camembert"),MYr.forEach(t),xho=r(Zwe," \u2014 "),vI=n(Zwe,"A",{href:!0});var EYr=s(vI);$ho=r(EYr,"CamembertModel"),EYr.forEach(t),kho=r(Zwe," (CamemBERT model)"),Zwe.forEach(t),Sho=i($),fp=n($,"LI",{});var e0e=s(fp);Kne=n(e0e,"STRONG",{});var CYr=s(Kne);Rho=r(CYr,"canine"),CYr.forEach(t),Pho=r(e0e," \u2014 "),FI=n(e0e,"A",{href:!0});var wYr=s(FI);Bho=r(wYr,"CanineModel"),wYr.forEach(t),Iho=r(e0e," (Canine model)"),e0e.forEach(t),qho=i($),mp=n($,"LI",{});var o0e=s(mp);Zne=n(o0e,"STRONG",{});var AYr=s(Zne);Nho=r(AYr,"clip"),AYr.forEach(t),jho=r(o0e," \u2014 "),TI=n(o0e,"A",{href:!0});var yYr=s(TI);Dho=r(yYr,"CLIPModel"),yYr.forEach(t),Gho=r(o0e," (CLIP model)"),o0e.forEach(t),Oho=i($),gp=n($,"LI",{});var r0e=s(gp);ese=n(r0e,"STRONG",{});var LYr=s(ese);Vho=r(LYr,"convbert"),LYr.forEach(t),Xho=r(r0e," \u2014 "),MI=n(r0e,"A",{href:!0});var xYr=s(MI);zho=r(xYr,"ConvBertModel"),xYr.forEach(t),Who=r(r0e," (ConvBERT model)"),r0e.forEach(t),Qho=i($),hp=n($,"LI",{});var t0e=s(hp);ose=n(t0e,"STRONG",{});var $Yr=s(ose);Hho=r($Yr,"convnext"),$Yr.forEach(t),Uho=r(t0e," \u2014 "),EI=n(t0e,"A",{href:!0});var kYr=s(EI);Jho=r(kYr,"ConvNextModel"),kYr.forEach(t),Yho=r(t0e," (ConvNext model)"),t0e.forEach(t),Kho=i($),pp=n($,"LI",{});var a0e=s(pp);rse=n(a0e,"STRONG",{});var SYr=s(rse);Zho=r(SYr,"ctrl"),SYr.forEach(t),epo=r(a0e," \u2014 "),CI=n(a0e,"A",{href:!0});var RYr=s(CI);opo=r(RYr,"CTRLModel"),RYr.forEach(t),rpo=r(a0e," (CTRL model)"),a0e.forEach(t),tpo=i($),_p=n($,"LI",{});var n0e=s(_p);tse=n(n0e,"STRONG",{});var PYr=s(tse);apo=r(PYr,"cvt"),PYr.forEach(t),npo=r(n0e," \u2014 "),wI=n(n0e,"A",{href:!0});var BYr=s(wI);spo=r(BYr,"CvtModel"),BYr.forEach(t),lpo=r(n0e," (CvT model)"),n0e.forEach(t),ipo=i($),up=n($,"LI",{});var s0e=s(up);ase=n(s0e,"STRONG",{});var IYr=s(ase);dpo=r(IYr,"data2vec-audio"),IYr.forEach(t),cpo=r(s0e," \u2014 "),AI=n(s0e,"A",{href:!0});var qYr=s(AI);fpo=r(qYr,"Data2VecAudioModel"),qYr.forEach(t),mpo=r(s0e," (Data2VecAudio model)"),s0e.forEach(t),gpo=i($),bp=n($,"LI",{});var l0e=s(bp);nse=n(l0e,"STRONG",{});var NYr=s(nse);hpo=r(NYr,"data2vec-text"),NYr.forEach(t),ppo=r(l0e," \u2014 "),yI=n(l0e,"A",{href:!0});var jYr=s(yI);_po=r(jYr,"Data2VecTextModel"),jYr.forEach(t),upo=r(l0e," (Data2VecText model)"),l0e.forEach(t),bpo=i($),vp=n($,"LI",{});var i0e=s(vp);sse=n(i0e,"STRONG",{});var DYr=s(sse);vpo=r(DYr,"data2vec-vision"),DYr.forEach(t),Fpo=r(i0e," \u2014 "),LI=n(i0e,"A",{href:!0});var GYr=s(LI);Tpo=r(GYr,"Data2VecVisionModel"),GYr.forEach(t),Mpo=r(i0e," (Data2VecVision model)"),i0e.forEach(t),Epo=i($),Fp=n($,"LI",{});var d0e=s(Fp);lse=n(d0e,"STRONG",{});var OYr=s(lse);Cpo=r(OYr,"deberta"),OYr.forEach(t),wpo=r(d0e," \u2014 "),xI=n(d0e,"A",{href:!0});var VYr=s(xI);Apo=r(VYr,"DebertaModel"),VYr.forEach(t),ypo=r(d0e," (DeBERTa model)"),d0e.forEach(t),Lpo=i($),Tp=n($,"LI",{});var c0e=s(Tp);ise=n(c0e,"STRONG",{});var XYr=s(ise);xpo=r(XYr,"deberta-v2"),XYr.forEach(t),$po=r(c0e," \u2014 "),$I=n(c0e,"A",{href:!0});var zYr=s($I);kpo=r(zYr,"DebertaV2Model"),zYr.forEach(t),Spo=r(c0e," (DeBERTa-v2 model)"),c0e.forEach(t),Rpo=i($),Mp=n($,"LI",{});var f0e=s(Mp);dse=n(f0e,"STRONG",{});var WYr=s(dse);Ppo=r(WYr,"decision_transformer"),WYr.forEach(t),Bpo=r(f0e," \u2014 "),kI=n(f0e,"A",{href:!0});var QYr=s(kI);Ipo=r(QYr,"DecisionTransformerModel"),QYr.forEach(t),qpo=r(f0e," (Decision Transformer model)"),f0e.forEach(t),Npo=i($),Ep=n($,"LI",{});var m0e=s(Ep);cse=n(m0e,"STRONG",{});var HYr=s(cse);jpo=r(HYr,"deit"),HYr.forEach(t),Dpo=r(m0e," \u2014 "),SI=n(m0e,"A",{href:!0});var UYr=s(SI);Gpo=r(UYr,"DeiTModel"),UYr.forEach(t),Opo=r(m0e," (DeiT model)"),m0e.forEach(t),Vpo=i($),Cp=n($,"LI",{});var g0e=s(Cp);fse=n(g0e,"STRONG",{});var JYr=s(fse);Xpo=r(JYr,"detr"),JYr.forEach(t),zpo=r(g0e," \u2014 "),RI=n(g0e,"A",{href:!0});var YYr=s(RI);Wpo=r(YYr,"DetrModel"),YYr.forEach(t),Qpo=r(g0e," (DETR model)"),g0e.forEach(t),Hpo=i($),wp=n($,"LI",{});var h0e=s(wp);mse=n(h0e,"STRONG",{});var KYr=s(mse);Upo=r(KYr,"distilbert"),KYr.forEach(t),Jpo=r(h0e," \u2014 "),PI=n(h0e,"A",{href:!0});var ZYr=s(PI);Ypo=r(ZYr,"DistilBertModel"),ZYr.forEach(t),Kpo=r(h0e," (DistilBERT model)"),h0e.forEach(t),Zpo=i($),Ap=n($,"LI",{});var p0e=s(Ap);gse=n(p0e,"STRONG",{});var eKr=s(gse);e_o=r(eKr,"dpr"),eKr.forEach(t),o_o=r(p0e," \u2014 "),BI=n(p0e,"A",{href:!0});var oKr=s(BI);r_o=r(oKr,"DPRQuestionEncoder"),oKr.forEach(t),t_o=r(p0e," (DPR model)"),p0e.forEach(t),a_o=i($),yp=n($,"LI",{});var _0e=s(yp);hse=n(_0e,"STRONG",{});var rKr=s(hse);n_o=r(rKr,"dpt"),rKr.forEach(t),s_o=r(_0e," \u2014 "),II=n(_0e,"A",{href:!0});var tKr=s(II);l_o=r(tKr,"DPTModel"),tKr.forEach(t),i_o=r(_0e," (DPT model)"),_0e.forEach(t),d_o=i($),Lp=n($,"LI",{});var u0e=s(Lp);pse=n(u0e,"STRONG",{});var aKr=s(pse);c_o=r(aKr,"electra"),aKr.forEach(t),f_o=r(u0e," \u2014 "),qI=n(u0e,"A",{href:!0});var nKr=s(qI);m_o=r(nKr,"ElectraModel"),nKr.forEach(t),g_o=r(u0e," (ELECTRA model)"),u0e.forEach(t),h_o=i($),xp=n($,"LI",{});var b0e=s(xp);_se=n(b0e,"STRONG",{});var sKr=s(_se);p_o=r(sKr,"flaubert"),sKr.forEach(t),__o=r(b0e," \u2014 "),NI=n(b0e,"A",{href:!0});var lKr=s(NI);u_o=r(lKr,"FlaubertModel"),lKr.forEach(t),b_o=r(b0e," (FlauBERT model)"),b0e.forEach(t),v_o=i($),$p=n($,"LI",{});var v0e=s($p);use=n(v0e,"STRONG",{});var iKr=s(use);F_o=r(iKr,"flava"),iKr.forEach(t),T_o=r(v0e," \u2014 "),jI=n(v0e,"A",{href:!0});var dKr=s(jI);M_o=r(dKr,"FlavaModel"),dKr.forEach(t),E_o=r(v0e," (Flava model)"),v0e.forEach(t),C_o=i($),kp=n($,"LI",{});var F0e=s(kp);bse=n(F0e,"STRONG",{});var cKr=s(bse);w_o=r(cKr,"fnet"),cKr.forEach(t),A_o=r(F0e," \u2014 "),DI=n(F0e,"A",{href:!0});var fKr=s(DI);y_o=r(fKr,"FNetModel"),fKr.forEach(t),L_o=r(F0e," (FNet model)"),F0e.forEach(t),x_o=i($),Sp=n($,"LI",{});var T0e=s(Sp);vse=n(T0e,"STRONG",{});var mKr=s(vse);$_o=r(mKr,"fsmt"),mKr.forEach(t),k_o=r(T0e," \u2014 "),GI=n(T0e,"A",{href:!0});var gKr=s(GI);S_o=r(gKr,"FSMTModel"),gKr.forEach(t),R_o=r(T0e," (FairSeq Machine-Translation model)"),T0e.forEach(t),P_o=i($),Rs=n($,"LI",{});var L$=s(Rs);Fse=n(L$,"STRONG",{});var hKr=s(Fse);B_o=r(hKr,"funnel"),hKr.forEach(t),I_o=r(L$," \u2014 "),OI=n(L$,"A",{href:!0});var pKr=s(OI);q_o=r(pKr,"FunnelModel"),pKr.forEach(t),N_o=r(L$," or "),VI=n(L$,"A",{href:!0});var _Kr=s(VI);j_o=r(_Kr,"FunnelBaseModel"),_Kr.forEach(t),D_o=r(L$," (Funnel Transformer model)"),L$.forEach(t),G_o=i($),Rp=n($,"LI",{});var M0e=s(Rp);Tse=n(M0e,"STRONG",{});var uKr=s(Tse);O_o=r(uKr,"glpn"),uKr.forEach(t),V_o=r(M0e," \u2014 "),XI=n(M0e,"A",{href:!0});var bKr=s(XI);X_o=r(bKr,"GLPNModel"),bKr.forEach(t),z_o=r(M0e," (GLPN model)"),M0e.forEach(t),W_o=i($),Pp=n($,"LI",{});var E0e=s(Pp);Mse=n(E0e,"STRONG",{});var vKr=s(Mse);Q_o=r(vKr,"gpt2"),vKr.forEach(t),H_o=r(E0e," \u2014 "),zI=n(E0e,"A",{href:!0});var FKr=s(zI);U_o=r(FKr,"GPT2Model"),FKr.forEach(t),J_o=r(E0e," (OpenAI GPT-2 model)"),E0e.forEach(t),Y_o=i($),Bp=n($,"LI",{});var C0e=s(Bp);Ese=n(C0e,"STRONG",{});var TKr=s(Ese);K_o=r(TKr,"gpt_neo"),TKr.forEach(t),Z_o=r(C0e," \u2014 "),WI=n(C0e,"A",{href:!0});var MKr=s(WI);euo=r(MKr,"GPTNeoModel"),MKr.forEach(t),ouo=r(C0e," (GPT Neo model)"),C0e.forEach(t),ruo=i($),Ip=n($,"LI",{});var w0e=s(Ip);Cse=n(w0e,"STRONG",{});var EKr=s(Cse);tuo=r(EKr,"gptj"),EKr.forEach(t),auo=r(w0e," \u2014 "),QI=n(w0e,"A",{href:!0});var CKr=s(QI);nuo=r(CKr,"GPTJModel"),CKr.forEach(t),suo=r(w0e," (GPT-J model)"),w0e.forEach(t),luo=i($),qp=n($,"LI",{});var A0e=s(qp);wse=n(A0e,"STRONG",{});var wKr=s(wse);iuo=r(wKr,"hubert"),wKr.forEach(t),duo=r(A0e," \u2014 "),HI=n(A0e,"A",{href:!0});var AKr=s(HI);cuo=r(AKr,"HubertModel"),AKr.forEach(t),fuo=r(A0e," (Hubert model)"),A0e.forEach(t),muo=i($),Np=n($,"LI",{});var y0e=s(Np);Ase=n(y0e,"STRONG",{});var yKr=s(Ase);guo=r(yKr,"ibert"),yKr.forEach(t),huo=r(y0e," \u2014 "),UI=n(y0e,"A",{href:!0});var LKr=s(UI);puo=r(LKr,"IBertModel"),LKr.forEach(t),_uo=r(y0e," (I-BERT model)"),y0e.forEach(t),uuo=i($),jp=n($,"LI",{});var L0e=s(jp);yse=n(L0e,"STRONG",{});var xKr=s(yse);buo=r(xKr,"imagegpt"),xKr.forEach(t),vuo=r(L0e," \u2014 "),JI=n(L0e,"A",{href:!0});var $Kr=s(JI);Fuo=r($Kr,"ImageGPTModel"),$Kr.forEach(t),Tuo=r(L0e," (ImageGPT model)"),L0e.forEach(t),Muo=i($),Dp=n($,"LI",{});var x0e=s(Dp);Lse=n(x0e,"STRONG",{});var kKr=s(Lse);Euo=r(kKr,"layoutlm"),kKr.forEach(t),Cuo=r(x0e," \u2014 "),YI=n(x0e,"A",{href:!0});var SKr=s(YI);wuo=r(SKr,"LayoutLMModel"),SKr.forEach(t),Auo=r(x0e," (LayoutLM model)"),x0e.forEach(t),yuo=i($),Gp=n($,"LI",{});var $0e=s(Gp);xse=n($0e,"STRONG",{});var RKr=s(xse);Luo=r(RKr,"layoutlmv2"),RKr.forEach(t),xuo=r($0e," \u2014 "),KI=n($0e,"A",{href:!0});var PKr=s(KI);$uo=r(PKr,"LayoutLMv2Model"),PKr.forEach(t),kuo=r($0e," (LayoutLMv2 model)"),$0e.forEach(t),Suo=i($),Op=n($,"LI",{});var k0e=s(Op);$se=n(k0e,"STRONG",{});var BKr=s($se);Ruo=r(BKr,"led"),BKr.forEach(t),Puo=r(k0e," \u2014 "),ZI=n(k0e,"A",{href:!0});var IKr=s(ZI);Buo=r(IKr,"LEDModel"),IKr.forEach(t),Iuo=r(k0e," (LED model)"),k0e.forEach(t),quo=i($),Vp=n($,"LI",{});var S0e=s(Vp);kse=n(S0e,"STRONG",{});var qKr=s(kse);Nuo=r(qKr,"longformer"),qKr.forEach(t),juo=r(S0e," \u2014 "),eq=n(S0e,"A",{href:!0});var NKr=s(eq);Duo=r(NKr,"LongformerModel"),NKr.forEach(t),Guo=r(S0e," (Longformer model)"),S0e.forEach(t),Ouo=i($),Xp=n($,"LI",{});var R0e=s(Xp);Sse=n(R0e,"STRONG",{});var jKr=s(Sse);Vuo=r(jKr,"luke"),jKr.forEach(t),Xuo=r(R0e," \u2014 "),oq=n(R0e,"A",{href:!0});var DKr=s(oq);zuo=r(DKr,"LukeModel"),DKr.forEach(t),Wuo=r(R0e," (LUKE model)"),R0e.forEach(t),Quo=i($),zp=n($,"LI",{});var P0e=s(zp);Rse=n(P0e,"STRONG",{});var GKr=s(Rse);Huo=r(GKr,"lxmert"),GKr.forEach(t),Uuo=r(P0e," \u2014 "),rq=n(P0e,"A",{href:!0});var OKr=s(rq);Juo=r(OKr,"LxmertModel"),OKr.forEach(t),Yuo=r(P0e," (LXMERT model)"),P0e.forEach(t),Kuo=i($),Wp=n($,"LI",{});var B0e=s(Wp);Pse=n(B0e,"STRONG",{});var VKr=s(Pse);Zuo=r(VKr,"m2m_100"),VKr.forEach(t),e1o=r(B0e," \u2014 "),tq=n(B0e,"A",{href:!0});var XKr=s(tq);o1o=r(XKr,"M2M100Model"),XKr.forEach(t),r1o=r(B0e," (M2M100 model)"),B0e.forEach(t),t1o=i($),Qp=n($,"LI",{});var I0e=s(Qp);Bse=n(I0e,"STRONG",{});var zKr=s(Bse);a1o=r(zKr,"marian"),zKr.forEach(t),n1o=r(I0e," \u2014 "),aq=n(I0e,"A",{href:!0});var WKr=s(aq);s1o=r(WKr,"MarianModel"),WKr.forEach(t),l1o=r(I0e," (Marian model)"),I0e.forEach(t),i1o=i($),Hp=n($,"LI",{});var q0e=s(Hp);Ise=n(q0e,"STRONG",{});var QKr=s(Ise);d1o=r(QKr,"maskformer"),QKr.forEach(t),c1o=r(q0e," \u2014 "),nq=n(q0e,"A",{href:!0});var HKr=s(nq);f1o=r(HKr,"MaskFormerModel"),HKr.forEach(t),m1o=r(q0e," (MaskFormer model)"),q0e.forEach(t),g1o=i($),Up=n($,"LI",{});var N0e=s(Up);qse=n(N0e,"STRONG",{});var UKr=s(qse);h1o=r(UKr,"mbart"),UKr.forEach(t),p1o=r(N0e," \u2014 "),sq=n(N0e,"A",{href:!0});var JKr=s(sq);_1o=r(JKr,"MBartModel"),JKr.forEach(t),u1o=r(N0e," (mBART model)"),N0e.forEach(t),b1o=i($),Jp=n($,"LI",{});var j0e=s(Jp);Nse=n(j0e,"STRONG",{});var YKr=s(Nse);v1o=r(YKr,"megatron-bert"),YKr.forEach(t),F1o=r(j0e," \u2014 "),lq=n(j0e,"A",{href:!0});var KKr=s(lq);T1o=r(KKr,"MegatronBertModel"),KKr.forEach(t),M1o=r(j0e," (MegatronBert model)"),j0e.forEach(t),E1o=i($),Yp=n($,"LI",{});var D0e=s(Yp);jse=n(D0e,"STRONG",{});var ZKr=s(jse);C1o=r(ZKr,"mobilebert"),ZKr.forEach(t),w1o=r(D0e," \u2014 "),iq=n(D0e,"A",{href:!0});var eZr=s(iq);A1o=r(eZr,"MobileBertModel"),eZr.forEach(t),y1o=r(D0e," (MobileBERT model)"),D0e.forEach(t),L1o=i($),Kp=n($,"LI",{});var G0e=s(Kp);Dse=n(G0e,"STRONG",{});var oZr=s(Dse);x1o=r(oZr,"mpnet"),oZr.forEach(t),$1o=r(G0e," \u2014 "),dq=n(G0e,"A",{href:!0});var rZr=s(dq);k1o=r(rZr,"MPNetModel"),rZr.forEach(t),S1o=r(G0e," (MPNet model)"),G0e.forEach(t),R1o=i($),Zp=n($,"LI",{});var O0e=s(Zp);Gse=n(O0e,"STRONG",{});var tZr=s(Gse);P1o=r(tZr,"mt5"),tZr.forEach(t),B1o=r(O0e," \u2014 "),cq=n(O0e,"A",{href:!0});var aZr=s(cq);I1o=r(aZr,"MT5Model"),aZr.forEach(t),q1o=r(O0e," (mT5 model)"),O0e.forEach(t),N1o=i($),e_=n($,"LI",{});var V0e=s(e_);Ose=n(V0e,"STRONG",{});var nZr=s(Ose);j1o=r(nZr,"nystromformer"),nZr.forEach(t),D1o=r(V0e," \u2014 "),fq=n(V0e,"A",{href:!0});var sZr=s(fq);G1o=r(sZr,"NystromformerModel"),sZr.forEach(t),O1o=r(V0e," (Nystromformer model)"),V0e.forEach(t),V1o=i($),o_=n($,"LI",{});var X0e=s(o_);Vse=n(X0e,"STRONG",{});var lZr=s(Vse);X1o=r(lZr,"openai-gpt"),lZr.forEach(t),z1o=r(X0e," \u2014 "),mq=n(X0e,"A",{href:!0});var iZr=s(mq);W1o=r(iZr,"OpenAIGPTModel"),iZr.forEach(t),Q1o=r(X0e," (OpenAI GPT model)"),X0e.forEach(t),H1o=i($),r_=n($,"LI",{});var z0e=s(r_);Xse=n(z0e,"STRONG",{});var dZr=s(Xse);U1o=r(dZr,"opt"),dZr.forEach(t),J1o=r(z0e," \u2014 "),gq=n(z0e,"A",{href:!0});var cZr=s(gq);Y1o=r(cZr,"OPTModel"),cZr.forEach(t),K1o=r(z0e," (OPT model)"),z0e.forEach(t),Z1o=i($),t_=n($,"LI",{});var W0e=s(t_);zse=n(W0e,"STRONG",{});var fZr=s(zse);e7o=r(fZr,"pegasus"),fZr.forEach(t),o7o=r(W0e," \u2014 "),hq=n(W0e,"A",{href:!0});var mZr=s(hq);r7o=r(mZr,"PegasusModel"),mZr.forEach(t),t7o=r(W0e," (Pegasus model)"),W0e.forEach(t),a7o=i($),a_=n($,"LI",{});var Q0e=s(a_);Wse=n(Q0e,"STRONG",{});var gZr=s(Wse);n7o=r(gZr,"perceiver"),gZr.forEach(t),s7o=r(Q0e," \u2014 "),pq=n(Q0e,"A",{href:!0});var hZr=s(pq);l7o=r(hZr,"PerceiverModel"),hZr.forEach(t),i7o=r(Q0e," (Perceiver model)"),Q0e.forEach(t),d7o=i($),n_=n($,"LI",{});var H0e=s(n_);Qse=n(H0e,"STRONG",{});var pZr=s(Qse);c7o=r(pZr,"plbart"),pZr.forEach(t),f7o=r(H0e," \u2014 "),_q=n(H0e,"A",{href:!0});var _Zr=s(_q);m7o=r(_Zr,"PLBartModel"),_Zr.forEach(t),g7o=r(H0e," (PLBart model)"),H0e.forEach(t),h7o=i($),s_=n($,"LI",{});var U0e=s(s_);Hse=n(U0e,"STRONG",{});var uZr=s(Hse);p7o=r(uZr,"poolformer"),uZr.forEach(t),_7o=r(U0e," \u2014 "),uq=n(U0e,"A",{href:!0});var bZr=s(uq);u7o=r(bZr,"PoolFormerModel"),bZr.forEach(t),b7o=r(U0e," (PoolFormer model)"),U0e.forEach(t),v7o=i($),l_=n($,"LI",{});var J0e=s(l_);Use=n(J0e,"STRONG",{});var vZr=s(Use);F7o=r(vZr,"prophetnet"),vZr.forEach(t),T7o=r(J0e," \u2014 "),bq=n(J0e,"A",{href:!0});var FZr=s(bq);M7o=r(FZr,"ProphetNetModel"),FZr.forEach(t),E7o=r(J0e," (ProphetNet model)"),J0e.forEach(t),C7o=i($),i_=n($,"LI",{});var Y0e=s(i_);Jse=n(Y0e,"STRONG",{});var TZr=s(Jse);w7o=r(TZr,"qdqbert"),TZr.forEach(t),A7o=r(Y0e," \u2014 "),vq=n(Y0e,"A",{href:!0});var MZr=s(vq);y7o=r(MZr,"QDQBertModel"),MZr.forEach(t),L7o=r(Y0e," (QDQBert model)"),Y0e.forEach(t),x7o=i($),d_=n($,"LI",{});var K0e=s(d_);Yse=n(K0e,"STRONG",{});var EZr=s(Yse);$7o=r(EZr,"reformer"),EZr.forEach(t),k7o=r(K0e," \u2014 "),Fq=n(K0e,"A",{href:!0});var CZr=s(Fq);S7o=r(CZr,"ReformerModel"),CZr.forEach(t),R7o=r(K0e," (Reformer model)"),K0e.forEach(t),P7o=i($),c_=n($,"LI",{});var Z0e=s(c_);Kse=n(Z0e,"STRONG",{});var wZr=s(Kse);B7o=r(wZr,"regnet"),wZr.forEach(t),I7o=r(Z0e," \u2014 "),Tq=n(Z0e,"A",{href:!0});var AZr=s(Tq);q7o=r(AZr,"RegNetModel"),AZr.forEach(t),N7o=r(Z0e," (RegNet model)"),Z0e.forEach(t),j7o=i($),f_=n($,"LI",{});var eAe=s(f_);Zse=n(eAe,"STRONG",{});var yZr=s(Zse);D7o=r(yZr,"rembert"),yZr.forEach(t),G7o=r(eAe," \u2014 "),Mq=n(eAe,"A",{href:!0});var LZr=s(Mq);O7o=r(LZr,"RemBertModel"),LZr.forEach(t),V7o=r(eAe," (RemBERT model)"),eAe.forEach(t),X7o=i($),m_=n($,"LI",{});var oAe=s(m_);ele=n(oAe,"STRONG",{});var xZr=s(ele);z7o=r(xZr,"resnet"),xZr.forEach(t),W7o=r(oAe," \u2014 "),Eq=n(oAe,"A",{href:!0});var $Zr=s(Eq);Q7o=r($Zr,"ResNetModel"),$Zr.forEach(t),H7o=r(oAe," (ResNet model)"),oAe.forEach(t),U7o=i($),g_=n($,"LI",{});var rAe=s(g_);ole=n(rAe,"STRONG",{});var kZr=s(ole);J7o=r(kZr,"retribert"),kZr.forEach(t),Y7o=r(rAe," \u2014 "),Cq=n(rAe,"A",{href:!0});var SZr=s(Cq);K7o=r(SZr,"RetriBertModel"),SZr.forEach(t),Z7o=r(rAe," (RetriBERT model)"),rAe.forEach(t),ebo=i($),h_=n($,"LI",{});var tAe=s(h_);rle=n(tAe,"STRONG",{});var RZr=s(rle);obo=r(RZr,"roberta"),RZr.forEach(t),rbo=r(tAe," \u2014 "),wq=n(tAe,"A",{href:!0});var PZr=s(wq);tbo=r(PZr,"RobertaModel"),PZr.forEach(t),abo=r(tAe," (RoBERTa model)"),tAe.forEach(t),nbo=i($),p_=n($,"LI",{});var aAe=s(p_);tle=n(aAe,"STRONG",{});var BZr=s(tle);sbo=r(BZr,"roformer"),BZr.forEach(t),lbo=r(aAe," \u2014 "),Aq=n(aAe,"A",{href:!0});var IZr=s(Aq);ibo=r(IZr,"RoFormerModel"),IZr.forEach(t),dbo=r(aAe," (RoFormer model)"),aAe.forEach(t),cbo=i($),__=n($,"LI",{});var nAe=s(__);ale=n(nAe,"STRONG",{});var qZr=s(ale);fbo=r(qZr,"segformer"),qZr.forEach(t),mbo=r(nAe," \u2014 "),yq=n(nAe,"A",{href:!0});var NZr=s(yq);gbo=r(NZr,"SegformerModel"),NZr.forEach(t),hbo=r(nAe," (SegFormer model)"),nAe.forEach(t),pbo=i($),u_=n($,"LI",{});var sAe=s(u_);nle=n(sAe,"STRONG",{});var jZr=s(nle);_bo=r(jZr,"sew"),jZr.forEach(t),ubo=r(sAe," \u2014 "),Lq=n(sAe,"A",{href:!0});var DZr=s(Lq);bbo=r(DZr,"SEWModel"),DZr.forEach(t),vbo=r(sAe," (SEW model)"),sAe.forEach(t),Fbo=i($),b_=n($,"LI",{});var lAe=s(b_);sle=n(lAe,"STRONG",{});var GZr=s(sle);Tbo=r(GZr,"sew-d"),GZr.forEach(t),Mbo=r(lAe," \u2014 "),xq=n(lAe,"A",{href:!0});var OZr=s(xq);Ebo=r(OZr,"SEWDModel"),OZr.forEach(t),Cbo=r(lAe," (SEW-D model)"),lAe.forEach(t),wbo=i($),v_=n($,"LI",{});var iAe=s(v_);lle=n(iAe,"STRONG",{});var VZr=s(lle);Abo=r(VZr,"speech_to_text"),VZr.forEach(t),ybo=r(iAe," \u2014 "),$q=n(iAe,"A",{href:!0});var XZr=s($q);Lbo=r(XZr,"Speech2TextModel"),XZr.forEach(t),xbo=r(iAe," (Speech2Text model)"),iAe.forEach(t),$bo=i($),F_=n($,"LI",{});var dAe=s(F_);ile=n(dAe,"STRONG",{});var zZr=s(ile);kbo=r(zZr,"splinter"),zZr.forEach(t),Sbo=r(dAe," \u2014 "),kq=n(dAe,"A",{href:!0});var WZr=s(kq);Rbo=r(WZr,"SplinterModel"),WZr.forEach(t),Pbo=r(dAe," (Splinter model)"),dAe.forEach(t),Bbo=i($),T_=n($,"LI",{});var cAe=s(T_);dle=n(cAe,"STRONG",{});var QZr=s(dle);Ibo=r(QZr,"squeezebert"),QZr.forEach(t),qbo=r(cAe," \u2014 "),Sq=n(cAe,"A",{href:!0});var HZr=s(Sq);Nbo=r(HZr,"SqueezeBertModel"),HZr.forEach(t),jbo=r(cAe," (SqueezeBERT model)"),cAe.forEach(t),Dbo=i($),M_=n($,"LI",{});var fAe=s(M_);cle=n(fAe,"STRONG",{});var UZr=s(cle);Gbo=r(UZr,"swin"),UZr.forEach(t),Obo=r(fAe," \u2014 "),Rq=n(fAe,"A",{href:!0});var JZr=s(Rq);Vbo=r(JZr,"SwinModel"),JZr.forEach(t),Xbo=r(fAe," (Swin model)"),fAe.forEach(t),zbo=i($),E_=n($,"LI",{});var mAe=s(E_);fle=n(mAe,"STRONG",{});var YZr=s(fle);Wbo=r(YZr,"t5"),YZr.forEach(t),Qbo=r(mAe," \u2014 "),Pq=n(mAe,"A",{href:!0});var KZr=s(Pq);Hbo=r(KZr,"T5Model"),KZr.forEach(t),Ubo=r(mAe," (T5 model)"),mAe.forEach(t),Jbo=i($),C_=n($,"LI",{});var gAe=s(C_);mle=n(gAe,"STRONG",{});var ZZr=s(mle);Ybo=r(ZZr,"tapas"),ZZr.forEach(t),Kbo=r(gAe," \u2014 "),Bq=n(gAe,"A",{href:!0});var eet=s(Bq);Zbo=r(eet,"TapasModel"),eet.forEach(t),e2o=r(gAe," (TAPAS model)"),gAe.forEach(t),o2o=i($),w_=n($,"LI",{});var hAe=s(w_);gle=n(hAe,"STRONG",{});var oet=s(gle);r2o=r(oet,"trajectory_transformer"),oet.forEach(t),t2o=r(hAe," \u2014 "),Iq=n(hAe,"A",{href:!0});var ret=s(Iq);a2o=r(ret,"TrajectoryTransformerModel"),ret.forEach(t),n2o=r(hAe," (Trajectory Transformer model)"),hAe.forEach(t),s2o=i($),A_=n($,"LI",{});var pAe=s(A_);hle=n(pAe,"STRONG",{});var tet=s(hle);l2o=r(tet,"transfo-xl"),tet.forEach(t),i2o=r(pAe," \u2014 "),qq=n(pAe,"A",{href:!0});var aet=s(qq);d2o=r(aet,"TransfoXLModel"),aet.forEach(t),c2o=r(pAe," (Transformer-XL model)"),pAe.forEach(t),f2o=i($),y_=n($,"LI",{});var _Ae=s(y_);ple=n(_Ae,"STRONG",{});var net=s(ple);m2o=r(net,"unispeech"),net.forEach(t),g2o=r(_Ae," \u2014 "),Nq=n(_Ae,"A",{href:!0});var set=s(Nq);h2o=r(set,"UniSpeechModel"),set.forEach(t),p2o=r(_Ae," (UniSpeech model)"),_Ae.forEach(t),_2o=i($),L_=n($,"LI",{});var uAe=s(L_);_le=n(uAe,"STRONG",{});var iet=s(_le);u2o=r(iet,"unispeech-sat"),iet.forEach(t),b2o=r(uAe," \u2014 "),jq=n(uAe,"A",{href:!0});var det=s(jq);v2o=r(det,"UniSpeechSatModel"),det.forEach(t),F2o=r(uAe," (UniSpeechSat model)"),uAe.forEach(t),T2o=i($),x_=n($,"LI",{});var bAe=s(x_);ule=n(bAe,"STRONG",{});var cet=s(ule);M2o=r(cet,"van"),cet.forEach(t),E2o=r(bAe," \u2014 "),Dq=n(bAe,"A",{href:!0});var fet=s(Dq);C2o=r(fet,"VanModel"),fet.forEach(t),w2o=r(bAe," (VAN model)"),bAe.forEach(t),A2o=i($),$_=n($,"LI",{});var vAe=s($_);ble=n(vAe,"STRONG",{});var met=s(ble);y2o=r(met,"vilt"),met.forEach(t),L2o=r(vAe," \u2014 "),Gq=n(vAe,"A",{href:!0});var get=s(Gq);x2o=r(get,"ViltModel"),get.forEach(t),$2o=r(vAe," (ViLT model)"),vAe.forEach(t),k2o=i($),k_=n($,"LI",{});var FAe=s(k_);vle=n(FAe,"STRONG",{});var het=s(vle);S2o=r(het,"vision-text-dual-encoder"),het.forEach(t),R2o=r(FAe," \u2014 "),Oq=n(FAe,"A",{href:!0});var pet=s(Oq);P2o=r(pet,"VisionTextDualEncoderModel"),pet.forEach(t),B2o=r(FAe," (VisionTextDualEncoder model)"),FAe.forEach(t),I2o=i($),S_=n($,"LI",{});var TAe=s(S_);Fle=n(TAe,"STRONG",{});var _et=s(Fle);q2o=r(_et,"visual_bert"),_et.forEach(t),N2o=r(TAe," \u2014 "),Vq=n(TAe,"A",{href:!0});var uet=s(Vq);j2o=r(uet,"VisualBertModel"),uet.forEach(t),D2o=r(TAe," (VisualBert model)"),TAe.forEach(t),G2o=i($),R_=n($,"LI",{});var MAe=s(R_);Tle=n(MAe,"STRONG",{});var bet=s(Tle);O2o=r(bet,"vit"),bet.forEach(t),V2o=r(MAe," \u2014 "),Xq=n(MAe,"A",{href:!0});var vet=s(Xq);X2o=r(vet,"ViTModel"),vet.forEach(t),z2o=r(MAe," (ViT model)"),MAe.forEach(t),W2o=i($),P_=n($,"LI",{});var EAe=s(P_);Mle=n(EAe,"STRONG",{});var Fet=s(Mle);Q2o=r(Fet,"vit_mae"),Fet.forEach(t),H2o=r(EAe," \u2014 "),zq=n(EAe,"A",{href:!0});var Tet=s(zq);U2o=r(Tet,"ViTMAEModel"),Tet.forEach(t),J2o=r(EAe," (ViTMAE model)"),EAe.forEach(t),Y2o=i($),B_=n($,"LI",{});var CAe=s(B_);Ele=n(CAe,"STRONG",{});var Met=s(Ele);K2o=r(Met,"wav2vec2"),Met.forEach(t),Z2o=r(CAe," \u2014 "),Wq=n(CAe,"A",{href:!0});var Eet=s(Wq);evo=r(Eet,"Wav2Vec2Model"),Eet.forEach(t),ovo=r(CAe," (Wav2Vec2 model)"),CAe.forEach(t),rvo=i($),I_=n($,"LI",{});var wAe=s(I_);Cle=n(wAe,"STRONG",{});var Cet=s(Cle);tvo=r(Cet,"wav2vec2-conformer"),Cet.forEach(t),avo=r(wAe," \u2014 "),Qq=n(wAe,"A",{href:!0});var wet=s(Qq);nvo=r(wet,"Wav2Vec2ConformerModel"),wet.forEach(t),svo=r(wAe," (Wav2Vec2-Conformer model)"),wAe.forEach(t),lvo=i($),q_=n($,"LI",{});var AAe=s(q_);wle=n(AAe,"STRONG",{});var Aet=s(wle);ivo=r(Aet,"wavlm"),Aet.forEach(t),dvo=r(AAe," \u2014 "),Hq=n(AAe,"A",{href:!0});var yet=s(Hq);cvo=r(yet,"WavLMModel"),yet.forEach(t),fvo=r(AAe," (WavLM model)"),AAe.forEach(t),mvo=i($),N_=n($,"LI",{});var yAe=s(N_);Ale=n(yAe,"STRONG",{});var Let=s(Ale);gvo=r(Let,"xglm"),Let.forEach(t),hvo=r(yAe," \u2014 "),Uq=n(yAe,"A",{href:!0});var xet=s(Uq);pvo=r(xet,"XGLMModel"),xet.forEach(t),_vo=r(yAe," (XGLM model)"),yAe.forEach(t),uvo=i($),j_=n($,"LI",{});var LAe=s(j_);yle=n(LAe,"STRONG",{});var $et=s(yle);bvo=r($et,"xlm"),$et.forEach(t),vvo=r(LAe," \u2014 "),Jq=n(LAe,"A",{href:!0});var ket=s(Jq);Fvo=r(ket,"XLMModel"),ket.forEach(t),Tvo=r(LAe," (XLM model)"),LAe.forEach(t),Mvo=i($),D_=n($,"LI",{});var xAe=s(D_);Lle=n(xAe,"STRONG",{});var Set=s(Lle);Evo=r(Set,"xlm-prophetnet"),Set.forEach(t),Cvo=r(xAe," \u2014 "),Yq=n(xAe,"A",{href:!0});var Ret=s(Yq);wvo=r(Ret,"XLMProphetNetModel"),Ret.forEach(t),Avo=r(xAe," (XLMProphetNet model)"),xAe.forEach(t),yvo=i($),G_=n($,"LI",{});var $Ae=s(G_);xle=n($Ae,"STRONG",{});var Pet=s(xle);Lvo=r(Pet,"xlm-roberta"),Pet.forEach(t),xvo=r($Ae," \u2014 "),Kq=n($Ae,"A",{href:!0});var Bet=s(Kq);$vo=r(Bet,"XLMRobertaModel"),Bet.forEach(t),kvo=r($Ae," (XLM-RoBERTa model)"),$Ae.forEach(t),Svo=i($),O_=n($,"LI",{});var kAe=s(O_);$le=n(kAe,"STRONG",{});var Iet=s($le);Rvo=r(Iet,"xlm-roberta-xl"),Iet.forEach(t),Pvo=r(kAe," \u2014 "),Zq=n(kAe,"A",{href:!0});var qet=s(Zq);Bvo=r(qet,"XLMRobertaXLModel"),qet.forEach(t),Ivo=r(kAe," (XLM-RoBERTa-XL model)"),kAe.forEach(t),qvo=i($),V_=n($,"LI",{});var SAe=s(V_);kle=n(SAe,"STRONG",{});var Net=s(kle);Nvo=r(Net,"xlnet"),Net.forEach(t),jvo=r(SAe," \u2014 "),eN=n(SAe,"A",{href:!0});var jet=s(eN);Dvo=r(jet,"XLNetModel"),jet.forEach(t),Gvo=r(SAe," (XLNet model)"),SAe.forEach(t),Ovo=i($),X_=n($,"LI",{});var RAe=s(X_);Sle=n(RAe,"STRONG",{});var Det=s(Sle);Vvo=r(Det,"yolos"),Det.forEach(t),Xvo=r(RAe," \u2014 "),oN=n(RAe,"A",{href:!0});var Get=s(oN);zvo=r(Get,"YolosModel"),Get.forEach(t),Wvo=r(RAe," (YOLOS model)"),RAe.forEach(t),Qvo=i($),z_=n($,"LI",{});var PAe=s(z_);Rle=n(PAe,"STRONG",{});var Oet=s(Rle);Hvo=r(Oet,"yoso"),Oet.forEach(t),Uvo=r(PAe," \u2014 "),rN=n(PAe,"A",{href:!0});var Vet=s(rN);Jvo=r(Vet,"YosoModel"),Vet.forEach(t),Yvo=r(PAe," (YOSO model)"),PAe.forEach(t),$.forEach(t),Kvo=i(oa),W_=n(oa,"P",{});var BAe=s(W_);Zvo=r(BAe,"The model is set in evaluation mode by default using "),Ple=n(BAe,"CODE",{});var Xet=s(Ple);e3o=r(Xet,"model.eval()"),Xet.forEach(t),o3o=r(BAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ble=n(BAe,"CODE",{});var zet=s(Ble);r3o=r(zet,"model.train()"),zet.forEach(t),BAe.forEach(t),t3o=i(oa),T(Q_.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),hqe=i(f),yi=n(f,"H2",{class:!0});var bje=s(yi);H_=n(bje,"A",{id:!0,class:!0,href:!0});var Wet=s(H_);Ile=n(Wet,"SPAN",{});var Qet=s(Ile);T(zA.$$.fragment,Qet),Qet.forEach(t),Wet.forEach(t),a3o=i(bje),qle=n(bje,"SPAN",{});var Het=s(qle);n3o=r(Het,"AutoModelForPreTraining"),Het.forEach(t),bje.forEach(t),pqe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(WA.$$.fragment,Gs),s3o=i(Gs),Li=n(Gs,"P",{});var VK=s(Li);l3o=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tN=n(VK,"A",{href:!0});var Uet=s(tN);i3o=r(Uet,"from_pretrained()"),Uet.forEach(t),d3o=r(VK," class method or the "),aN=n(VK,"A",{href:!0});var Jet=s(aN);c3o=r(Jet,"from_config()"),Jet.forEach(t),f3o=r(VK,` class
method.`),VK.forEach(t),m3o=i(Gs),QA=n(Gs,"P",{});var vje=s(QA);g3o=r(vje,"This class cannot be instantiated directly using "),Nle=n(vje,"CODE",{});var Yet=s(Nle);h3o=r(Yet,"__init__()"),Yet.forEach(t),p3o=r(vje," (throws an error)."),vje.forEach(t),_3o=i(Gs),at=n(Gs,"DIV",{class:!0});var Fw=s(at);T(HA.$$.fragment,Fw),u3o=i(Fw),jle=n(Fw,"P",{});var Ket=s(jle);b3o=r(Ket,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ket.forEach(t),v3o=i(Fw),xi=n(Fw,"P",{});var XK=s(xi);F3o=r(XK,`Note:
Loading a model from its configuration file does `),Dle=n(XK,"STRONG",{});var Zet=s(Dle);T3o=r(Zet,"not"),Zet.forEach(t),M3o=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=n(XK,"A",{href:!0});var eot=s(nN);E3o=r(eot,"from_pretrained()"),eot.forEach(t),C3o=r(XK," to load the model weights."),XK.forEach(t),w3o=i(Fw),T(U_.$$.fragment,Fw),Fw.forEach(t),A3o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(UA.$$.fragment,ra),y3o=i(ra),Gle=n(ra,"P",{});var oot=s(Gle);L3o=r(oot,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),oot.forEach(t),x3o=i(ra),xa=n(ra,"P",{});var Tw=s(xa);$3o=r(Tw,"The model class to instantiate is selected based on the "),Ole=n(Tw,"CODE",{});var rot=s(Ole);k3o=r(rot,"model_type"),rot.forEach(t),S3o=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Vle=n(Tw,"CODE",{});var tot=s(Vle);R3o=r(tot,"pretrained_model_name_or_path"),tot.forEach(t),P3o=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xle=n(Tw,"CODE",{});var aot=s(Xle);B3o=r(aot,"pretrained_model_name_or_path"),aot.forEach(t),I3o=r(Tw,":"),Tw.forEach(t),q3o=i(ra),G=n(ra,"UL",{});var O=s(G);J_=n(O,"LI",{});var IAe=s(J_);zle=n(IAe,"STRONG",{});var not=s(zle);N3o=r(not,"albert"),not.forEach(t),j3o=r(IAe," \u2014 "),sN=n(IAe,"A",{href:!0});var sot=s(sN);D3o=r(sot,"AlbertForPreTraining"),sot.forEach(t),G3o=r(IAe," (ALBERT model)"),IAe.forEach(t),O3o=i(O),Y_=n(O,"LI",{});var qAe=s(Y_);Wle=n(qAe,"STRONG",{});var lot=s(Wle);V3o=r(lot,"bart"),lot.forEach(t),X3o=r(qAe," \u2014 "),lN=n(qAe,"A",{href:!0});var iot=s(lN);z3o=r(iot,"BartForConditionalGeneration"),iot.forEach(t),W3o=r(qAe," (BART model)"),qAe.forEach(t),Q3o=i(O),K_=n(O,"LI",{});var NAe=s(K_);Qle=n(NAe,"STRONG",{});var dot=s(Qle);H3o=r(dot,"bert"),dot.forEach(t),U3o=r(NAe," \u2014 "),iN=n(NAe,"A",{href:!0});var cot=s(iN);J3o=r(cot,"BertForPreTraining"),cot.forEach(t),Y3o=r(NAe," (BERT model)"),NAe.forEach(t),K3o=i(O),Z_=n(O,"LI",{});var jAe=s(Z_);Hle=n(jAe,"STRONG",{});var fot=s(Hle);Z3o=r(fot,"big_bird"),fot.forEach(t),eFo=r(jAe," \u2014 "),dN=n(jAe,"A",{href:!0});var mot=s(dN);oFo=r(mot,"BigBirdForPreTraining"),mot.forEach(t),rFo=r(jAe," (BigBird model)"),jAe.forEach(t),tFo=i(O),eu=n(O,"LI",{});var DAe=s(eu);Ule=n(DAe,"STRONG",{});var got=s(Ule);aFo=r(got,"camembert"),got.forEach(t),nFo=r(DAe," \u2014 "),cN=n(DAe,"A",{href:!0});var hot=s(cN);sFo=r(hot,"CamembertForMaskedLM"),hot.forEach(t),lFo=r(DAe," (CamemBERT model)"),DAe.forEach(t),iFo=i(O),ou=n(O,"LI",{});var GAe=s(ou);Jle=n(GAe,"STRONG",{});var pot=s(Jle);dFo=r(pot,"ctrl"),pot.forEach(t),cFo=r(GAe," \u2014 "),fN=n(GAe,"A",{href:!0});var _ot=s(fN);fFo=r(_ot,"CTRLLMHeadModel"),_ot.forEach(t),mFo=r(GAe," (CTRL model)"),GAe.forEach(t),gFo=i(O),ru=n(O,"LI",{});var OAe=s(ru);Yle=n(OAe,"STRONG",{});var uot=s(Yle);hFo=r(uot,"data2vec-text"),uot.forEach(t),pFo=r(OAe," \u2014 "),mN=n(OAe,"A",{href:!0});var bot=s(mN);_Fo=r(bot,"Data2VecTextForMaskedLM"),bot.forEach(t),uFo=r(OAe," (Data2VecText model)"),OAe.forEach(t),bFo=i(O),tu=n(O,"LI",{});var VAe=s(tu);Kle=n(VAe,"STRONG",{});var vot=s(Kle);vFo=r(vot,"deberta"),vot.forEach(t),FFo=r(VAe," \u2014 "),gN=n(VAe,"A",{href:!0});var Fot=s(gN);TFo=r(Fot,"DebertaForMaskedLM"),Fot.forEach(t),MFo=r(VAe," (DeBERTa model)"),VAe.forEach(t),EFo=i(O),au=n(O,"LI",{});var XAe=s(au);Zle=n(XAe,"STRONG",{});var Tot=s(Zle);CFo=r(Tot,"deberta-v2"),Tot.forEach(t),wFo=r(XAe," \u2014 "),hN=n(XAe,"A",{href:!0});var Mot=s(hN);AFo=r(Mot,"DebertaV2ForMaskedLM"),Mot.forEach(t),yFo=r(XAe," (DeBERTa-v2 model)"),XAe.forEach(t),LFo=i(O),nu=n(O,"LI",{});var zAe=s(nu);eie=n(zAe,"STRONG",{});var Eot=s(eie);xFo=r(Eot,"distilbert"),Eot.forEach(t),$Fo=r(zAe," \u2014 "),pN=n(zAe,"A",{href:!0});var Cot=s(pN);kFo=r(Cot,"DistilBertForMaskedLM"),Cot.forEach(t),SFo=r(zAe," (DistilBERT model)"),zAe.forEach(t),RFo=i(O),su=n(O,"LI",{});var WAe=s(su);oie=n(WAe,"STRONG",{});var wot=s(oie);PFo=r(wot,"electra"),wot.forEach(t),BFo=r(WAe," \u2014 "),_N=n(WAe,"A",{href:!0});var Aot=s(_N);IFo=r(Aot,"ElectraForPreTraining"),Aot.forEach(t),qFo=r(WAe," (ELECTRA model)"),WAe.forEach(t),NFo=i(O),lu=n(O,"LI",{});var QAe=s(lu);rie=n(QAe,"STRONG",{});var yot=s(rie);jFo=r(yot,"flaubert"),yot.forEach(t),DFo=r(QAe," \u2014 "),uN=n(QAe,"A",{href:!0});var Lot=s(uN);GFo=r(Lot,"FlaubertWithLMHeadModel"),Lot.forEach(t),OFo=r(QAe," (FlauBERT model)"),QAe.forEach(t),VFo=i(O),iu=n(O,"LI",{});var HAe=s(iu);tie=n(HAe,"STRONG",{});var xot=s(tie);XFo=r(xot,"flava"),xot.forEach(t),zFo=r(HAe," \u2014 "),bN=n(HAe,"A",{href:!0});var $ot=s(bN);WFo=r($ot,"FlavaForPreTraining"),$ot.forEach(t),QFo=r(HAe," (Flava model)"),HAe.forEach(t),HFo=i(O),du=n(O,"LI",{});var UAe=s(du);aie=n(UAe,"STRONG",{});var kot=s(aie);UFo=r(kot,"fnet"),kot.forEach(t),JFo=r(UAe," \u2014 "),vN=n(UAe,"A",{href:!0});var Sot=s(vN);YFo=r(Sot,"FNetForPreTraining"),Sot.forEach(t),KFo=r(UAe," (FNet model)"),UAe.forEach(t),ZFo=i(O),cu=n(O,"LI",{});var JAe=s(cu);nie=n(JAe,"STRONG",{});var Rot=s(nie);eTo=r(Rot,"fsmt"),Rot.forEach(t),oTo=r(JAe," \u2014 "),FN=n(JAe,"A",{href:!0});var Pot=s(FN);rTo=r(Pot,"FSMTForConditionalGeneration"),Pot.forEach(t),tTo=r(JAe," (FairSeq Machine-Translation model)"),JAe.forEach(t),aTo=i(O),fu=n(O,"LI",{});var YAe=s(fu);sie=n(YAe,"STRONG",{});var Bot=s(sie);nTo=r(Bot,"funnel"),Bot.forEach(t),sTo=r(YAe," \u2014 "),TN=n(YAe,"A",{href:!0});var Iot=s(TN);lTo=r(Iot,"FunnelForPreTraining"),Iot.forEach(t),iTo=r(YAe," (Funnel Transformer model)"),YAe.forEach(t),dTo=i(O),mu=n(O,"LI",{});var KAe=s(mu);lie=n(KAe,"STRONG",{});var qot=s(lie);cTo=r(qot,"gpt2"),qot.forEach(t),fTo=r(KAe," \u2014 "),MN=n(KAe,"A",{href:!0});var Not=s(MN);mTo=r(Not,"GPT2LMHeadModel"),Not.forEach(t),gTo=r(KAe," (OpenAI GPT-2 model)"),KAe.forEach(t),hTo=i(O),gu=n(O,"LI",{});var ZAe=s(gu);iie=n(ZAe,"STRONG",{});var jot=s(iie);pTo=r(jot,"ibert"),jot.forEach(t),_To=r(ZAe," \u2014 "),EN=n(ZAe,"A",{href:!0});var Dot=s(EN);uTo=r(Dot,"IBertForMaskedLM"),Dot.forEach(t),bTo=r(ZAe," (I-BERT model)"),ZAe.forEach(t),vTo=i(O),hu=n(O,"LI",{});var e6e=s(hu);die=n(e6e,"STRONG",{});var Got=s(die);FTo=r(Got,"layoutlm"),Got.forEach(t),TTo=r(e6e," \u2014 "),CN=n(e6e,"A",{href:!0});var Oot=s(CN);MTo=r(Oot,"LayoutLMForMaskedLM"),Oot.forEach(t),ETo=r(e6e," (LayoutLM model)"),e6e.forEach(t),CTo=i(O),pu=n(O,"LI",{});var o6e=s(pu);cie=n(o6e,"STRONG",{});var Vot=s(cie);wTo=r(Vot,"longformer"),Vot.forEach(t),ATo=r(o6e," \u2014 "),wN=n(o6e,"A",{href:!0});var Xot=s(wN);yTo=r(Xot,"LongformerForMaskedLM"),Xot.forEach(t),LTo=r(o6e," (Longformer model)"),o6e.forEach(t),xTo=i(O),_u=n(O,"LI",{});var r6e=s(_u);fie=n(r6e,"STRONG",{});var zot=s(fie);$To=r(zot,"lxmert"),zot.forEach(t),kTo=r(r6e," \u2014 "),AN=n(r6e,"A",{href:!0});var Wot=s(AN);STo=r(Wot,"LxmertForPreTraining"),Wot.forEach(t),RTo=r(r6e," (LXMERT model)"),r6e.forEach(t),PTo=i(O),uu=n(O,"LI",{});var t6e=s(uu);mie=n(t6e,"STRONG",{});var Qot=s(mie);BTo=r(Qot,"megatron-bert"),Qot.forEach(t),ITo=r(t6e," \u2014 "),yN=n(t6e,"A",{href:!0});var Hot=s(yN);qTo=r(Hot,"MegatronBertForPreTraining"),Hot.forEach(t),NTo=r(t6e," (MegatronBert model)"),t6e.forEach(t),jTo=i(O),bu=n(O,"LI",{});var a6e=s(bu);gie=n(a6e,"STRONG",{});var Uot=s(gie);DTo=r(Uot,"mobilebert"),Uot.forEach(t),GTo=r(a6e," \u2014 "),LN=n(a6e,"A",{href:!0});var Jot=s(LN);OTo=r(Jot,"MobileBertForPreTraining"),Jot.forEach(t),VTo=r(a6e," (MobileBERT model)"),a6e.forEach(t),XTo=i(O),vu=n(O,"LI",{});var n6e=s(vu);hie=n(n6e,"STRONG",{});var Yot=s(hie);zTo=r(Yot,"mpnet"),Yot.forEach(t),WTo=r(n6e," \u2014 "),xN=n(n6e,"A",{href:!0});var Kot=s(xN);QTo=r(Kot,"MPNetForMaskedLM"),Kot.forEach(t),HTo=r(n6e," (MPNet model)"),n6e.forEach(t),UTo=i(O),Fu=n(O,"LI",{});var s6e=s(Fu);pie=n(s6e,"STRONG",{});var Zot=s(pie);JTo=r(Zot,"openai-gpt"),Zot.forEach(t),YTo=r(s6e," \u2014 "),$N=n(s6e,"A",{href:!0});var ert=s($N);KTo=r(ert,"OpenAIGPTLMHeadModel"),ert.forEach(t),ZTo=r(s6e," (OpenAI GPT model)"),s6e.forEach(t),e8o=i(O),Tu=n(O,"LI",{});var l6e=s(Tu);_ie=n(l6e,"STRONG",{});var ort=s(_ie);o8o=r(ort,"retribert"),ort.forEach(t),r8o=r(l6e," \u2014 "),kN=n(l6e,"A",{href:!0});var rrt=s(kN);t8o=r(rrt,"RetriBertModel"),rrt.forEach(t),a8o=r(l6e," (RetriBERT model)"),l6e.forEach(t),n8o=i(O),Mu=n(O,"LI",{});var i6e=s(Mu);uie=n(i6e,"STRONG",{});var trt=s(uie);s8o=r(trt,"roberta"),trt.forEach(t),l8o=r(i6e," \u2014 "),SN=n(i6e,"A",{href:!0});var art=s(SN);i8o=r(art,"RobertaForMaskedLM"),art.forEach(t),d8o=r(i6e," (RoBERTa model)"),i6e.forEach(t),c8o=i(O),Eu=n(O,"LI",{});var d6e=s(Eu);bie=n(d6e,"STRONG",{});var nrt=s(bie);f8o=r(nrt,"splinter"),nrt.forEach(t),m8o=r(d6e," \u2014 "),RN=n(d6e,"A",{href:!0});var srt=s(RN);g8o=r(srt,"SplinterForPreTraining"),srt.forEach(t),h8o=r(d6e," (Splinter model)"),d6e.forEach(t),p8o=i(O),Cu=n(O,"LI",{});var c6e=s(Cu);vie=n(c6e,"STRONG",{});var lrt=s(vie);_8o=r(lrt,"squeezebert"),lrt.forEach(t),u8o=r(c6e," \u2014 "),PN=n(c6e,"A",{href:!0});var irt=s(PN);b8o=r(irt,"SqueezeBertForMaskedLM"),irt.forEach(t),v8o=r(c6e," (SqueezeBERT model)"),c6e.forEach(t),F8o=i(O),wu=n(O,"LI",{});var f6e=s(wu);Fie=n(f6e,"STRONG",{});var drt=s(Fie);T8o=r(drt,"t5"),drt.forEach(t),M8o=r(f6e," \u2014 "),BN=n(f6e,"A",{href:!0});var crt=s(BN);E8o=r(crt,"T5ForConditionalGeneration"),crt.forEach(t),C8o=r(f6e," (T5 model)"),f6e.forEach(t),w8o=i(O),Au=n(O,"LI",{});var m6e=s(Au);Tie=n(m6e,"STRONG",{});var frt=s(Tie);A8o=r(frt,"tapas"),frt.forEach(t),y8o=r(m6e," \u2014 "),IN=n(m6e,"A",{href:!0});var mrt=s(IN);L8o=r(mrt,"TapasForMaskedLM"),mrt.forEach(t),x8o=r(m6e," (TAPAS model)"),m6e.forEach(t),$8o=i(O),yu=n(O,"LI",{});var g6e=s(yu);Mie=n(g6e,"STRONG",{});var grt=s(Mie);k8o=r(grt,"transfo-xl"),grt.forEach(t),S8o=r(g6e," \u2014 "),qN=n(g6e,"A",{href:!0});var hrt=s(qN);R8o=r(hrt,"TransfoXLLMHeadModel"),hrt.forEach(t),P8o=r(g6e," (Transformer-XL model)"),g6e.forEach(t),B8o=i(O),Lu=n(O,"LI",{});var h6e=s(Lu);Eie=n(h6e,"STRONG",{});var prt=s(Eie);I8o=r(prt,"unispeech"),prt.forEach(t),q8o=r(h6e," \u2014 "),NN=n(h6e,"A",{href:!0});var _rt=s(NN);N8o=r(_rt,"UniSpeechForPreTraining"),_rt.forEach(t),j8o=r(h6e," (UniSpeech model)"),h6e.forEach(t),D8o=i(O),xu=n(O,"LI",{});var p6e=s(xu);Cie=n(p6e,"STRONG",{});var urt=s(Cie);G8o=r(urt,"unispeech-sat"),urt.forEach(t),O8o=r(p6e," \u2014 "),jN=n(p6e,"A",{href:!0});var brt=s(jN);V8o=r(brt,"UniSpeechSatForPreTraining"),brt.forEach(t),X8o=r(p6e," (UniSpeechSat model)"),p6e.forEach(t),z8o=i(O),$u=n(O,"LI",{});var _6e=s($u);wie=n(_6e,"STRONG",{});var vrt=s(wie);W8o=r(vrt,"visual_bert"),vrt.forEach(t),Q8o=r(_6e," \u2014 "),DN=n(_6e,"A",{href:!0});var Frt=s(DN);H8o=r(Frt,"VisualBertForPreTraining"),Frt.forEach(t),U8o=r(_6e," (VisualBert model)"),_6e.forEach(t),J8o=i(O),ku=n(O,"LI",{});var u6e=s(ku);Aie=n(u6e,"STRONG",{});var Trt=s(Aie);Y8o=r(Trt,"vit_mae"),Trt.forEach(t),K8o=r(u6e," \u2014 "),GN=n(u6e,"A",{href:!0});var Mrt=s(GN);Z8o=r(Mrt,"ViTMAEForPreTraining"),Mrt.forEach(t),eMo=r(u6e," (ViTMAE model)"),u6e.forEach(t),oMo=i(O),Su=n(O,"LI",{});var b6e=s(Su);yie=n(b6e,"STRONG",{});var Ert=s(yie);rMo=r(Ert,"wav2vec2"),Ert.forEach(t),tMo=r(b6e," \u2014 "),ON=n(b6e,"A",{href:!0});var Crt=s(ON);aMo=r(Crt,"Wav2Vec2ForPreTraining"),Crt.forEach(t),nMo=r(b6e," (Wav2Vec2 model)"),b6e.forEach(t),sMo=i(O),Ru=n(O,"LI",{});var v6e=s(Ru);Lie=n(v6e,"STRONG",{});var wrt=s(Lie);lMo=r(wrt,"wav2vec2-conformer"),wrt.forEach(t),iMo=r(v6e," \u2014 "),VN=n(v6e,"A",{href:!0});var Art=s(VN);dMo=r(Art,"Wav2Vec2ConformerForPreTraining"),Art.forEach(t),cMo=r(v6e," (Wav2Vec2-Conformer model)"),v6e.forEach(t),fMo=i(O),Pu=n(O,"LI",{});var F6e=s(Pu);xie=n(F6e,"STRONG",{});var yrt=s(xie);mMo=r(yrt,"xlm"),yrt.forEach(t),gMo=r(F6e," \u2014 "),XN=n(F6e,"A",{href:!0});var Lrt=s(XN);hMo=r(Lrt,"XLMWithLMHeadModel"),Lrt.forEach(t),pMo=r(F6e," (XLM model)"),F6e.forEach(t),_Mo=i(O),Bu=n(O,"LI",{});var T6e=s(Bu);$ie=n(T6e,"STRONG",{});var xrt=s($ie);uMo=r(xrt,"xlm-roberta"),xrt.forEach(t),bMo=r(T6e," \u2014 "),zN=n(T6e,"A",{href:!0});var $rt=s(zN);vMo=r($rt,"XLMRobertaForMaskedLM"),$rt.forEach(t),FMo=r(T6e," (XLM-RoBERTa model)"),T6e.forEach(t),TMo=i(O),Iu=n(O,"LI",{});var M6e=s(Iu);kie=n(M6e,"STRONG",{});var krt=s(kie);MMo=r(krt,"xlm-roberta-xl"),krt.forEach(t),EMo=r(M6e," \u2014 "),WN=n(M6e,"A",{href:!0});var Srt=s(WN);CMo=r(Srt,"XLMRobertaXLForMaskedLM"),Srt.forEach(t),wMo=r(M6e," (XLM-RoBERTa-XL model)"),M6e.forEach(t),AMo=i(O),qu=n(O,"LI",{});var E6e=s(qu);Sie=n(E6e,"STRONG",{});var Rrt=s(Sie);yMo=r(Rrt,"xlnet"),Rrt.forEach(t),LMo=r(E6e," \u2014 "),QN=n(E6e,"A",{href:!0});var Prt=s(QN);xMo=r(Prt,"XLNetLMHeadModel"),Prt.forEach(t),$Mo=r(E6e," (XLNet model)"),E6e.forEach(t),O.forEach(t),kMo=i(ra),Nu=n(ra,"P",{});var C6e=s(Nu);SMo=r(C6e,"The model is set in evaluation mode by default using "),Rie=n(C6e,"CODE",{});var Brt=s(Rie);RMo=r(Brt,"model.eval()"),Brt.forEach(t),PMo=r(C6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=n(C6e,"CODE",{});var Irt=s(Pie);BMo=r(Irt,"model.train()"),Irt.forEach(t),C6e.forEach(t),IMo=i(ra),T(ju.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),_qe=i(f),$i=n(f,"H2",{class:!0});var Fje=s($i);Du=n(Fje,"A",{id:!0,class:!0,href:!0});var qrt=s(Du);Bie=n(qrt,"SPAN",{});var Nrt=s(Bie);T(JA.$$.fragment,Nrt),Nrt.forEach(t),qrt.forEach(t),qMo=i(Fje),Iie=n(Fje,"SPAN",{});var jrt=s(Iie);NMo=r(jrt,"AutoModelForCausalLM"),jrt.forEach(t),Fje.forEach(t),uqe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(YA.$$.fragment,Os),jMo=i(Os),ki=n(Os,"P",{});var zK=s(ki);DMo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HN=n(zK,"A",{href:!0});var Drt=s(HN);GMo=r(Drt,"from_pretrained()"),Drt.forEach(t),OMo=r(zK," class method or the "),UN=n(zK,"A",{href:!0});var Grt=s(UN);VMo=r(Grt,"from_config()"),Grt.forEach(t),XMo=r(zK,` class
method.`),zK.forEach(t),zMo=i(Os),KA=n(Os,"P",{});var Tje=s(KA);WMo=r(Tje,"This class cannot be instantiated directly using "),qie=n(Tje,"CODE",{});var Ort=s(qie);QMo=r(Ort,"__init__()"),Ort.forEach(t),HMo=r(Tje," (throws an error)."),Tje.forEach(t),UMo=i(Os),nt=n(Os,"DIV",{class:!0});var Mw=s(nt);T(ZA.$$.fragment,Mw),JMo=i(Mw),Nie=n(Mw,"P",{});var Vrt=s(Nie);YMo=r(Vrt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vrt.forEach(t),KMo=i(Mw),Si=n(Mw,"P",{});var WK=s(Si);ZMo=r(WK,`Note:
Loading a model from its configuration file does `),jie=n(WK,"STRONG",{});var Xrt=s(jie);e4o=r(Xrt,"not"),Xrt.forEach(t),o4o=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JN=n(WK,"A",{href:!0});var zrt=s(JN);r4o=r(zrt,"from_pretrained()"),zrt.forEach(t),t4o=r(WK," to load the model weights."),WK.forEach(t),a4o=i(Mw),T(Gu.$$.fragment,Mw),Mw.forEach(t),n4o=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(e6.$$.fragment,ta),s4o=i(ta),Die=n(ta,"P",{});var Wrt=s(Die);l4o=r(Wrt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wrt.forEach(t),i4o=i(ta),$a=n(ta,"P",{});var Ew=s($a);d4o=r(Ew,"The model class to instantiate is selected based on the "),Gie=n(Ew,"CODE",{});var Qrt=s(Gie);c4o=r(Qrt,"model_type"),Qrt.forEach(t),f4o=r(Ew,` property of the config object (either
passed as an argument or loaded from `),Oie=n(Ew,"CODE",{});var Hrt=s(Oie);m4o=r(Hrt,"pretrained_model_name_or_path"),Hrt.forEach(t),g4o=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=n(Ew,"CODE",{});var Urt=s(Vie);h4o=r(Urt,"pretrained_model_name_or_path"),Urt.forEach(t),p4o=r(Ew,":"),Ew.forEach(t),_4o=i(ta),z=n(ta,"UL",{});var Q=s(z);Ou=n(Q,"LI",{});var w6e=s(Ou);Xie=n(w6e,"STRONG",{});var Jrt=s(Xie);u4o=r(Jrt,"bart"),Jrt.forEach(t),b4o=r(w6e," \u2014 "),YN=n(w6e,"A",{href:!0});var Yrt=s(YN);v4o=r(Yrt,"BartForCausalLM"),Yrt.forEach(t),F4o=r(w6e," (BART model)"),w6e.forEach(t),T4o=i(Q),Vu=n(Q,"LI",{});var A6e=s(Vu);zie=n(A6e,"STRONG",{});var Krt=s(zie);M4o=r(Krt,"bert"),Krt.forEach(t),E4o=r(A6e," \u2014 "),KN=n(A6e,"A",{href:!0});var Zrt=s(KN);C4o=r(Zrt,"BertLMHeadModel"),Zrt.forEach(t),w4o=r(A6e," (BERT model)"),A6e.forEach(t),A4o=i(Q),Xu=n(Q,"LI",{});var y6e=s(Xu);Wie=n(y6e,"STRONG",{});var ett=s(Wie);y4o=r(ett,"bert-generation"),ett.forEach(t),L4o=r(y6e," \u2014 "),ZN=n(y6e,"A",{href:!0});var ott=s(ZN);x4o=r(ott,"BertGenerationDecoder"),ott.forEach(t),$4o=r(y6e," (Bert Generation model)"),y6e.forEach(t),k4o=i(Q),zu=n(Q,"LI",{});var L6e=s(zu);Qie=n(L6e,"STRONG",{});var rtt=s(Qie);S4o=r(rtt,"big_bird"),rtt.forEach(t),R4o=r(L6e," \u2014 "),ej=n(L6e,"A",{href:!0});var ttt=s(ej);P4o=r(ttt,"BigBirdForCausalLM"),ttt.forEach(t),B4o=r(L6e," (BigBird model)"),L6e.forEach(t),I4o=i(Q),Wu=n(Q,"LI",{});var x6e=s(Wu);Hie=n(x6e,"STRONG",{});var att=s(Hie);q4o=r(att,"bigbird_pegasus"),att.forEach(t),N4o=r(x6e," \u2014 "),oj=n(x6e,"A",{href:!0});var ntt=s(oj);j4o=r(ntt,"BigBirdPegasusForCausalLM"),ntt.forEach(t),D4o=r(x6e," (BigBirdPegasus model)"),x6e.forEach(t),G4o=i(Q),Qu=n(Q,"LI",{});var $6e=s(Qu);Uie=n($6e,"STRONG",{});var stt=s(Uie);O4o=r(stt,"blenderbot"),stt.forEach(t),V4o=r($6e," \u2014 "),rj=n($6e,"A",{href:!0});var ltt=s(rj);X4o=r(ltt,"BlenderbotForCausalLM"),ltt.forEach(t),z4o=r($6e," (Blenderbot model)"),$6e.forEach(t),W4o=i(Q),Hu=n(Q,"LI",{});var k6e=s(Hu);Jie=n(k6e,"STRONG",{});var itt=s(Jie);Q4o=r(itt,"blenderbot-small"),itt.forEach(t),H4o=r(k6e," \u2014 "),tj=n(k6e,"A",{href:!0});var dtt=s(tj);U4o=r(dtt,"BlenderbotSmallForCausalLM"),dtt.forEach(t),J4o=r(k6e," (BlenderbotSmall model)"),k6e.forEach(t),Y4o=i(Q),Uu=n(Q,"LI",{});var S6e=s(Uu);Yie=n(S6e,"STRONG",{});var ctt=s(Yie);K4o=r(ctt,"camembert"),ctt.forEach(t),Z4o=r(S6e," \u2014 "),aj=n(S6e,"A",{href:!0});var ftt=s(aj);eEo=r(ftt,"CamembertForCausalLM"),ftt.forEach(t),oEo=r(S6e," (CamemBERT model)"),S6e.forEach(t),rEo=i(Q),Ju=n(Q,"LI",{});var R6e=s(Ju);Kie=n(R6e,"STRONG",{});var mtt=s(Kie);tEo=r(mtt,"ctrl"),mtt.forEach(t),aEo=r(R6e," \u2014 "),nj=n(R6e,"A",{href:!0});var gtt=s(nj);nEo=r(gtt,"CTRLLMHeadModel"),gtt.forEach(t),sEo=r(R6e," (CTRL model)"),R6e.forEach(t),lEo=i(Q),Yu=n(Q,"LI",{});var P6e=s(Yu);Zie=n(P6e,"STRONG",{});var htt=s(Zie);iEo=r(htt,"data2vec-text"),htt.forEach(t),dEo=r(P6e," \u2014 "),sj=n(P6e,"A",{href:!0});var ptt=s(sj);cEo=r(ptt,"Data2VecTextForCausalLM"),ptt.forEach(t),fEo=r(P6e," (Data2VecText model)"),P6e.forEach(t),mEo=i(Q),Ku=n(Q,"LI",{});var B6e=s(Ku);ede=n(B6e,"STRONG",{});var _tt=s(ede);gEo=r(_tt,"electra"),_tt.forEach(t),hEo=r(B6e," \u2014 "),lj=n(B6e,"A",{href:!0});var utt=s(lj);pEo=r(utt,"ElectraForCausalLM"),utt.forEach(t),_Eo=r(B6e," (ELECTRA model)"),B6e.forEach(t),uEo=i(Q),Zu=n(Q,"LI",{});var I6e=s(Zu);ode=n(I6e,"STRONG",{});var btt=s(ode);bEo=r(btt,"gpt2"),btt.forEach(t),vEo=r(I6e," \u2014 "),ij=n(I6e,"A",{href:!0});var vtt=s(ij);FEo=r(vtt,"GPT2LMHeadModel"),vtt.forEach(t),TEo=r(I6e," (OpenAI GPT-2 model)"),I6e.forEach(t),MEo=i(Q),e1=n(Q,"LI",{});var q6e=s(e1);rde=n(q6e,"STRONG",{});var Ftt=s(rde);EEo=r(Ftt,"gpt_neo"),Ftt.forEach(t),CEo=r(q6e," \u2014 "),dj=n(q6e,"A",{href:!0});var Ttt=s(dj);wEo=r(Ttt,"GPTNeoForCausalLM"),Ttt.forEach(t),AEo=r(q6e," (GPT Neo model)"),q6e.forEach(t),yEo=i(Q),o1=n(Q,"LI",{});var N6e=s(o1);tde=n(N6e,"STRONG",{});var Mtt=s(tde);LEo=r(Mtt,"gptj"),Mtt.forEach(t),xEo=r(N6e," \u2014 "),cj=n(N6e,"A",{href:!0});var Ett=s(cj);$Eo=r(Ett,"GPTJForCausalLM"),Ett.forEach(t),kEo=r(N6e," (GPT-J model)"),N6e.forEach(t),SEo=i(Q),r1=n(Q,"LI",{});var j6e=s(r1);ade=n(j6e,"STRONG",{});var Ctt=s(ade);REo=r(Ctt,"marian"),Ctt.forEach(t),PEo=r(j6e," \u2014 "),fj=n(j6e,"A",{href:!0});var wtt=s(fj);BEo=r(wtt,"MarianForCausalLM"),wtt.forEach(t),IEo=r(j6e," (Marian model)"),j6e.forEach(t),qEo=i(Q),t1=n(Q,"LI",{});var D6e=s(t1);nde=n(D6e,"STRONG",{});var Att=s(nde);NEo=r(Att,"mbart"),Att.forEach(t),jEo=r(D6e," \u2014 "),mj=n(D6e,"A",{href:!0});var ytt=s(mj);DEo=r(ytt,"MBartForCausalLM"),ytt.forEach(t),GEo=r(D6e," (mBART model)"),D6e.forEach(t),OEo=i(Q),a1=n(Q,"LI",{});var G6e=s(a1);sde=n(G6e,"STRONG",{});var Ltt=s(sde);VEo=r(Ltt,"megatron-bert"),Ltt.forEach(t),XEo=r(G6e," \u2014 "),gj=n(G6e,"A",{href:!0});var xtt=s(gj);zEo=r(xtt,"MegatronBertForCausalLM"),xtt.forEach(t),WEo=r(G6e," (MegatronBert model)"),G6e.forEach(t),QEo=i(Q),n1=n(Q,"LI",{});var O6e=s(n1);lde=n(O6e,"STRONG",{});var $tt=s(lde);HEo=r($tt,"openai-gpt"),$tt.forEach(t),UEo=r(O6e," \u2014 "),hj=n(O6e,"A",{href:!0});var ktt=s(hj);JEo=r(ktt,"OpenAIGPTLMHeadModel"),ktt.forEach(t),YEo=r(O6e," (OpenAI GPT model)"),O6e.forEach(t),KEo=i(Q),s1=n(Q,"LI",{});var V6e=s(s1);ide=n(V6e,"STRONG",{});var Stt=s(ide);ZEo=r(Stt,"opt"),Stt.forEach(t),eCo=r(V6e," \u2014 "),pj=n(V6e,"A",{href:!0});var Rtt=s(pj);oCo=r(Rtt,"OPTForCausalLM"),Rtt.forEach(t),rCo=r(V6e," (OPT model)"),V6e.forEach(t),tCo=i(Q),l1=n(Q,"LI",{});var X6e=s(l1);dde=n(X6e,"STRONG",{});var Ptt=s(dde);aCo=r(Ptt,"pegasus"),Ptt.forEach(t),nCo=r(X6e," \u2014 "),_j=n(X6e,"A",{href:!0});var Btt=s(_j);sCo=r(Btt,"PegasusForCausalLM"),Btt.forEach(t),lCo=r(X6e," (Pegasus model)"),X6e.forEach(t),iCo=i(Q),i1=n(Q,"LI",{});var z6e=s(i1);cde=n(z6e,"STRONG",{});var Itt=s(cde);dCo=r(Itt,"plbart"),Itt.forEach(t),cCo=r(z6e," \u2014 "),uj=n(z6e,"A",{href:!0});var qtt=s(uj);fCo=r(qtt,"PLBartForCausalLM"),qtt.forEach(t),mCo=r(z6e," (PLBart model)"),z6e.forEach(t),gCo=i(Q),d1=n(Q,"LI",{});var W6e=s(d1);fde=n(W6e,"STRONG",{});var Ntt=s(fde);hCo=r(Ntt,"prophetnet"),Ntt.forEach(t),pCo=r(W6e," \u2014 "),bj=n(W6e,"A",{href:!0});var jtt=s(bj);_Co=r(jtt,"ProphetNetForCausalLM"),jtt.forEach(t),uCo=r(W6e," (ProphetNet model)"),W6e.forEach(t),bCo=i(Q),c1=n(Q,"LI",{});var Q6e=s(c1);mde=n(Q6e,"STRONG",{});var Dtt=s(mde);vCo=r(Dtt,"qdqbert"),Dtt.forEach(t),FCo=r(Q6e," \u2014 "),vj=n(Q6e,"A",{href:!0});var Gtt=s(vj);TCo=r(Gtt,"QDQBertLMHeadModel"),Gtt.forEach(t),MCo=r(Q6e," (QDQBert model)"),Q6e.forEach(t),ECo=i(Q),f1=n(Q,"LI",{});var H6e=s(f1);gde=n(H6e,"STRONG",{});var Ott=s(gde);CCo=r(Ott,"reformer"),Ott.forEach(t),wCo=r(H6e," \u2014 "),Fj=n(H6e,"A",{href:!0});var Vtt=s(Fj);ACo=r(Vtt,"ReformerModelWithLMHead"),Vtt.forEach(t),yCo=r(H6e," (Reformer model)"),H6e.forEach(t),LCo=i(Q),m1=n(Q,"LI",{});var U6e=s(m1);hde=n(U6e,"STRONG",{});var Xtt=s(hde);xCo=r(Xtt,"rembert"),Xtt.forEach(t),$Co=r(U6e," \u2014 "),Tj=n(U6e,"A",{href:!0});var ztt=s(Tj);kCo=r(ztt,"RemBertForCausalLM"),ztt.forEach(t),SCo=r(U6e," (RemBERT model)"),U6e.forEach(t),RCo=i(Q),g1=n(Q,"LI",{});var J6e=s(g1);pde=n(J6e,"STRONG",{});var Wtt=s(pde);PCo=r(Wtt,"roberta"),Wtt.forEach(t),BCo=r(J6e," \u2014 "),Mj=n(J6e,"A",{href:!0});var Qtt=s(Mj);ICo=r(Qtt,"RobertaForCausalLM"),Qtt.forEach(t),qCo=r(J6e," (RoBERTa model)"),J6e.forEach(t),NCo=i(Q),h1=n(Q,"LI",{});var Y6e=s(h1);_de=n(Y6e,"STRONG",{});var Htt=s(_de);jCo=r(Htt,"roformer"),Htt.forEach(t),DCo=r(Y6e," \u2014 "),Ej=n(Y6e,"A",{href:!0});var Utt=s(Ej);GCo=r(Utt,"RoFormerForCausalLM"),Utt.forEach(t),OCo=r(Y6e," (RoFormer model)"),Y6e.forEach(t),VCo=i(Q),p1=n(Q,"LI",{});var K6e=s(p1);ude=n(K6e,"STRONG",{});var Jtt=s(ude);XCo=r(Jtt,"speech_to_text_2"),Jtt.forEach(t),zCo=r(K6e," \u2014 "),Cj=n(K6e,"A",{href:!0});var Ytt=s(Cj);WCo=r(Ytt,"Speech2Text2ForCausalLM"),Ytt.forEach(t),QCo=r(K6e," (Speech2Text2 model)"),K6e.forEach(t),HCo=i(Q),_1=n(Q,"LI",{});var Z6e=s(_1);bde=n(Z6e,"STRONG",{});var Ktt=s(bde);UCo=r(Ktt,"transfo-xl"),Ktt.forEach(t),JCo=r(Z6e," \u2014 "),wj=n(Z6e,"A",{href:!0});var Ztt=s(wj);YCo=r(Ztt,"TransfoXLLMHeadModel"),Ztt.forEach(t),KCo=r(Z6e," (Transformer-XL model)"),Z6e.forEach(t),ZCo=i(Q),u1=n(Q,"LI",{});var eye=s(u1);vde=n(eye,"STRONG",{});var eat=s(vde);e5o=r(eat,"trocr"),eat.forEach(t),o5o=r(eye," \u2014 "),Aj=n(eye,"A",{href:!0});var oat=s(Aj);r5o=r(oat,"TrOCRForCausalLM"),oat.forEach(t),t5o=r(eye," (TrOCR model)"),eye.forEach(t),a5o=i(Q),b1=n(Q,"LI",{});var oye=s(b1);Fde=n(oye,"STRONG",{});var rat=s(Fde);n5o=r(rat,"xglm"),rat.forEach(t),s5o=r(oye," \u2014 "),yj=n(oye,"A",{href:!0});var tat=s(yj);l5o=r(tat,"XGLMForCausalLM"),tat.forEach(t),i5o=r(oye," (XGLM model)"),oye.forEach(t),d5o=i(Q),v1=n(Q,"LI",{});var rye=s(v1);Tde=n(rye,"STRONG",{});var aat=s(Tde);c5o=r(aat,"xlm"),aat.forEach(t),f5o=r(rye," \u2014 "),Lj=n(rye,"A",{href:!0});var nat=s(Lj);m5o=r(nat,"XLMWithLMHeadModel"),nat.forEach(t),g5o=r(rye," (XLM model)"),rye.forEach(t),h5o=i(Q),F1=n(Q,"LI",{});var tye=s(F1);Mde=n(tye,"STRONG",{});var sat=s(Mde);p5o=r(sat,"xlm-prophetnet"),sat.forEach(t),_5o=r(tye," \u2014 "),xj=n(tye,"A",{href:!0});var lat=s(xj);u5o=r(lat,"XLMProphetNetForCausalLM"),lat.forEach(t),b5o=r(tye," (XLMProphetNet model)"),tye.forEach(t),v5o=i(Q),T1=n(Q,"LI",{});var aye=s(T1);Ede=n(aye,"STRONG",{});var iat=s(Ede);F5o=r(iat,"xlm-roberta"),iat.forEach(t),T5o=r(aye," \u2014 "),$j=n(aye,"A",{href:!0});var dat=s($j);M5o=r(dat,"XLMRobertaForCausalLM"),dat.forEach(t),E5o=r(aye," (XLM-RoBERTa model)"),aye.forEach(t),C5o=i(Q),M1=n(Q,"LI",{});var nye=s(M1);Cde=n(nye,"STRONG",{});var cat=s(Cde);w5o=r(cat,"xlm-roberta-xl"),cat.forEach(t),A5o=r(nye," \u2014 "),kj=n(nye,"A",{href:!0});var fat=s(kj);y5o=r(fat,"XLMRobertaXLForCausalLM"),fat.forEach(t),L5o=r(nye," (XLM-RoBERTa-XL model)"),nye.forEach(t),x5o=i(Q),E1=n(Q,"LI",{});var sye=s(E1);wde=n(sye,"STRONG",{});var mat=s(wde);$5o=r(mat,"xlnet"),mat.forEach(t),k5o=r(sye," \u2014 "),Sj=n(sye,"A",{href:!0});var gat=s(Sj);S5o=r(gat,"XLNetLMHeadModel"),gat.forEach(t),R5o=r(sye," (XLNet model)"),sye.forEach(t),Q.forEach(t),P5o=i(ta),C1=n(ta,"P",{});var lye=s(C1);B5o=r(lye,"The model is set in evaluation mode by default using "),Ade=n(lye,"CODE",{});var hat=s(Ade);I5o=r(hat,"model.eval()"),hat.forEach(t),q5o=r(lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yde=n(lye,"CODE",{});var pat=s(yde);N5o=r(pat,"model.train()"),pat.forEach(t),lye.forEach(t),j5o=i(ta),T(w1.$$.fragment,ta),ta.forEach(t),Os.forEach(t),bqe=i(f),Ri=n(f,"H2",{class:!0});var Mje=s(Ri);A1=n(Mje,"A",{id:!0,class:!0,href:!0});var _at=s(A1);Lde=n(_at,"SPAN",{});var uat=s(Lde);T(o6.$$.fragment,uat),uat.forEach(t),_at.forEach(t),D5o=i(Mje),xde=n(Mje,"SPAN",{});var bat=s(xde);G5o=r(bat,"AutoModelForMaskedLM"),bat.forEach(t),Mje.forEach(t),vqe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(r6.$$.fragment,Vs),O5o=i(Vs),Pi=n(Vs,"P",{});var QK=s(Pi);V5o=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Rj=n(QK,"A",{href:!0});var vat=s(Rj);X5o=r(vat,"from_pretrained()"),vat.forEach(t),z5o=r(QK," class method or the "),Pj=n(QK,"A",{href:!0});var Fat=s(Pj);W5o=r(Fat,"from_config()"),Fat.forEach(t),Q5o=r(QK,` class
method.`),QK.forEach(t),H5o=i(Vs),t6=n(Vs,"P",{});var Eje=s(t6);U5o=r(Eje,"This class cannot be instantiated directly using "),$de=n(Eje,"CODE",{});var Tat=s($de);J5o=r(Tat,"__init__()"),Tat.forEach(t),Y5o=r(Eje," (throws an error)."),Eje.forEach(t),K5o=i(Vs),st=n(Vs,"DIV",{class:!0});var Cw=s(st);T(a6.$$.fragment,Cw),Z5o=i(Cw),kde=n(Cw,"P",{});var Mat=s(kde);ewo=r(Mat,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Mat.forEach(t),owo=i(Cw),Bi=n(Cw,"P",{});var HK=s(Bi);rwo=r(HK,`Note:
Loading a model from its configuration file does `),Sde=n(HK,"STRONG",{});var Eat=s(Sde);two=r(Eat,"not"),Eat.forEach(t),awo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bj=n(HK,"A",{href:!0});var Cat=s(Bj);nwo=r(Cat,"from_pretrained()"),Cat.forEach(t),swo=r(HK," to load the model weights."),HK.forEach(t),lwo=i(Cw),T(y1.$$.fragment,Cw),Cw.forEach(t),iwo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(n6.$$.fragment,aa),dwo=i(aa),Rde=n(aa,"P",{});var wat=s(Rde);cwo=r(wat,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wat.forEach(t),fwo=i(aa),ka=n(aa,"P",{});var ww=s(ka);mwo=r(ww,"The model class to instantiate is selected based on the "),Pde=n(ww,"CODE",{});var Aat=s(Pde);gwo=r(Aat,"model_type"),Aat.forEach(t),hwo=r(ww,` property of the config object (either
passed as an argument or loaded from `),Bde=n(ww,"CODE",{});var yat=s(Bde);pwo=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),_wo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(ww,"CODE",{});var Lat=s(Ide);uwo=r(Lat,"pretrained_model_name_or_path"),Lat.forEach(t),bwo=r(ww,":"),ww.forEach(t),vwo=i(aa),W=n(aa,"UL",{});var H=s(W);L1=n(H,"LI",{});var iye=s(L1);qde=n(iye,"STRONG",{});var xat=s(qde);Fwo=r(xat,"albert"),xat.forEach(t),Two=r(iye," \u2014 "),Ij=n(iye,"A",{href:!0});var $at=s(Ij);Mwo=r($at,"AlbertForMaskedLM"),$at.forEach(t),Ewo=r(iye," (ALBERT model)"),iye.forEach(t),Cwo=i(H),x1=n(H,"LI",{});var dye=s(x1);Nde=n(dye,"STRONG",{});var kat=s(Nde);wwo=r(kat,"bart"),kat.forEach(t),Awo=r(dye," \u2014 "),qj=n(dye,"A",{href:!0});var Sat=s(qj);ywo=r(Sat,"BartForConditionalGeneration"),Sat.forEach(t),Lwo=r(dye," (BART model)"),dye.forEach(t),xwo=i(H),$1=n(H,"LI",{});var cye=s($1);jde=n(cye,"STRONG",{});var Rat=s(jde);$wo=r(Rat,"bert"),Rat.forEach(t),kwo=r(cye," \u2014 "),Nj=n(cye,"A",{href:!0});var Pat=s(Nj);Swo=r(Pat,"BertForMaskedLM"),Pat.forEach(t),Rwo=r(cye," (BERT model)"),cye.forEach(t),Pwo=i(H),k1=n(H,"LI",{});var fye=s(k1);Dde=n(fye,"STRONG",{});var Bat=s(Dde);Bwo=r(Bat,"big_bird"),Bat.forEach(t),Iwo=r(fye," \u2014 "),jj=n(fye,"A",{href:!0});var Iat=s(jj);qwo=r(Iat,"BigBirdForMaskedLM"),Iat.forEach(t),Nwo=r(fye," (BigBird model)"),fye.forEach(t),jwo=i(H),S1=n(H,"LI",{});var mye=s(S1);Gde=n(mye,"STRONG",{});var qat=s(Gde);Dwo=r(qat,"camembert"),qat.forEach(t),Gwo=r(mye," \u2014 "),Dj=n(mye,"A",{href:!0});var Nat=s(Dj);Owo=r(Nat,"CamembertForMaskedLM"),Nat.forEach(t),Vwo=r(mye," (CamemBERT model)"),mye.forEach(t),Xwo=i(H),R1=n(H,"LI",{});var gye=s(R1);Ode=n(gye,"STRONG",{});var jat=s(Ode);zwo=r(jat,"convbert"),jat.forEach(t),Wwo=r(gye," \u2014 "),Gj=n(gye,"A",{href:!0});var Dat=s(Gj);Qwo=r(Dat,"ConvBertForMaskedLM"),Dat.forEach(t),Hwo=r(gye," (ConvBERT model)"),gye.forEach(t),Uwo=i(H),P1=n(H,"LI",{});var hye=s(P1);Vde=n(hye,"STRONG",{});var Gat=s(Vde);Jwo=r(Gat,"data2vec-text"),Gat.forEach(t),Ywo=r(hye," \u2014 "),Oj=n(hye,"A",{href:!0});var Oat=s(Oj);Kwo=r(Oat,"Data2VecTextForMaskedLM"),Oat.forEach(t),Zwo=r(hye," (Data2VecText model)"),hye.forEach(t),e0o=i(H),B1=n(H,"LI",{});var pye=s(B1);Xde=n(pye,"STRONG",{});var Vat=s(Xde);o0o=r(Vat,"deberta"),Vat.forEach(t),r0o=r(pye," \u2014 "),Vj=n(pye,"A",{href:!0});var Xat=s(Vj);t0o=r(Xat,"DebertaForMaskedLM"),Xat.forEach(t),a0o=r(pye," (DeBERTa model)"),pye.forEach(t),n0o=i(H),I1=n(H,"LI",{});var _ye=s(I1);zde=n(_ye,"STRONG",{});var zat=s(zde);s0o=r(zat,"deberta-v2"),zat.forEach(t),l0o=r(_ye," \u2014 "),Xj=n(_ye,"A",{href:!0});var Wat=s(Xj);i0o=r(Wat,"DebertaV2ForMaskedLM"),Wat.forEach(t),d0o=r(_ye," (DeBERTa-v2 model)"),_ye.forEach(t),c0o=i(H),q1=n(H,"LI",{});var uye=s(q1);Wde=n(uye,"STRONG",{});var Qat=s(Wde);f0o=r(Qat,"distilbert"),Qat.forEach(t),m0o=r(uye," \u2014 "),zj=n(uye,"A",{href:!0});var Hat=s(zj);g0o=r(Hat,"DistilBertForMaskedLM"),Hat.forEach(t),h0o=r(uye," (DistilBERT model)"),uye.forEach(t),p0o=i(H),N1=n(H,"LI",{});var bye=s(N1);Qde=n(bye,"STRONG",{});var Uat=s(Qde);_0o=r(Uat,"electra"),Uat.forEach(t),u0o=r(bye," \u2014 "),Wj=n(bye,"A",{href:!0});var Jat=s(Wj);b0o=r(Jat,"ElectraForMaskedLM"),Jat.forEach(t),v0o=r(bye," (ELECTRA model)"),bye.forEach(t),F0o=i(H),j1=n(H,"LI",{});var vye=s(j1);Hde=n(vye,"STRONG",{});var Yat=s(Hde);T0o=r(Yat,"flaubert"),Yat.forEach(t),M0o=r(vye," \u2014 "),Qj=n(vye,"A",{href:!0});var Kat=s(Qj);E0o=r(Kat,"FlaubertWithLMHeadModel"),Kat.forEach(t),C0o=r(vye," (FlauBERT model)"),vye.forEach(t),w0o=i(H),D1=n(H,"LI",{});var Fye=s(D1);Ude=n(Fye,"STRONG",{});var Zat=s(Ude);A0o=r(Zat,"fnet"),Zat.forEach(t),y0o=r(Fye," \u2014 "),Hj=n(Fye,"A",{href:!0});var ent=s(Hj);L0o=r(ent,"FNetForMaskedLM"),ent.forEach(t),x0o=r(Fye," (FNet model)"),Fye.forEach(t),$0o=i(H),G1=n(H,"LI",{});var Tye=s(G1);Jde=n(Tye,"STRONG",{});var ont=s(Jde);k0o=r(ont,"funnel"),ont.forEach(t),S0o=r(Tye," \u2014 "),Uj=n(Tye,"A",{href:!0});var rnt=s(Uj);R0o=r(rnt,"FunnelForMaskedLM"),rnt.forEach(t),P0o=r(Tye," (Funnel Transformer model)"),Tye.forEach(t),B0o=i(H),O1=n(H,"LI",{});var Mye=s(O1);Yde=n(Mye,"STRONG",{});var tnt=s(Yde);I0o=r(tnt,"ibert"),tnt.forEach(t),q0o=r(Mye," \u2014 "),Jj=n(Mye,"A",{href:!0});var ant=s(Jj);N0o=r(ant,"IBertForMaskedLM"),ant.forEach(t),j0o=r(Mye," (I-BERT model)"),Mye.forEach(t),D0o=i(H),V1=n(H,"LI",{});var Eye=s(V1);Kde=n(Eye,"STRONG",{});var nnt=s(Kde);G0o=r(nnt,"layoutlm"),nnt.forEach(t),O0o=r(Eye," \u2014 "),Yj=n(Eye,"A",{href:!0});var snt=s(Yj);V0o=r(snt,"LayoutLMForMaskedLM"),snt.forEach(t),X0o=r(Eye," (LayoutLM model)"),Eye.forEach(t),z0o=i(H),X1=n(H,"LI",{});var Cye=s(X1);Zde=n(Cye,"STRONG",{});var lnt=s(Zde);W0o=r(lnt,"longformer"),lnt.forEach(t),Q0o=r(Cye," \u2014 "),Kj=n(Cye,"A",{href:!0});var int=s(Kj);H0o=r(int,"LongformerForMaskedLM"),int.forEach(t),U0o=r(Cye," (Longformer model)"),Cye.forEach(t),J0o=i(H),z1=n(H,"LI",{});var wye=s(z1);ece=n(wye,"STRONG",{});var dnt=s(ece);Y0o=r(dnt,"mbart"),dnt.forEach(t),K0o=r(wye," \u2014 "),Zj=n(wye,"A",{href:!0});var cnt=s(Zj);Z0o=r(cnt,"MBartForConditionalGeneration"),cnt.forEach(t),eAo=r(wye," (mBART model)"),wye.forEach(t),oAo=i(H),W1=n(H,"LI",{});var Aye=s(W1);oce=n(Aye,"STRONG",{});var fnt=s(oce);rAo=r(fnt,"megatron-bert"),fnt.forEach(t),tAo=r(Aye," \u2014 "),eD=n(Aye,"A",{href:!0});var mnt=s(eD);aAo=r(mnt,"MegatronBertForMaskedLM"),mnt.forEach(t),nAo=r(Aye," (MegatronBert model)"),Aye.forEach(t),sAo=i(H),Q1=n(H,"LI",{});var yye=s(Q1);rce=n(yye,"STRONG",{});var gnt=s(rce);lAo=r(gnt,"mobilebert"),gnt.forEach(t),iAo=r(yye," \u2014 "),oD=n(yye,"A",{href:!0});var hnt=s(oD);dAo=r(hnt,"MobileBertForMaskedLM"),hnt.forEach(t),cAo=r(yye," (MobileBERT model)"),yye.forEach(t),fAo=i(H),H1=n(H,"LI",{});var Lye=s(H1);tce=n(Lye,"STRONG",{});var pnt=s(tce);mAo=r(pnt,"mpnet"),pnt.forEach(t),gAo=r(Lye," \u2014 "),rD=n(Lye,"A",{href:!0});var _nt=s(rD);hAo=r(_nt,"MPNetForMaskedLM"),_nt.forEach(t),pAo=r(Lye," (MPNet model)"),Lye.forEach(t),_Ao=i(H),U1=n(H,"LI",{});var xye=s(U1);ace=n(xye,"STRONG",{});var unt=s(ace);uAo=r(unt,"nystromformer"),unt.forEach(t),bAo=r(xye," \u2014 "),tD=n(xye,"A",{href:!0});var bnt=s(tD);vAo=r(bnt,"NystromformerForMaskedLM"),bnt.forEach(t),FAo=r(xye," (Nystromformer model)"),xye.forEach(t),TAo=i(H),J1=n(H,"LI",{});var $ye=s(J1);nce=n($ye,"STRONG",{});var vnt=s(nce);MAo=r(vnt,"perceiver"),vnt.forEach(t),EAo=r($ye," \u2014 "),aD=n($ye,"A",{href:!0});var Fnt=s(aD);CAo=r(Fnt,"PerceiverForMaskedLM"),Fnt.forEach(t),wAo=r($ye," (Perceiver model)"),$ye.forEach(t),AAo=i(H),Y1=n(H,"LI",{});var kye=s(Y1);sce=n(kye,"STRONG",{});var Tnt=s(sce);yAo=r(Tnt,"qdqbert"),Tnt.forEach(t),LAo=r(kye," \u2014 "),nD=n(kye,"A",{href:!0});var Mnt=s(nD);xAo=r(Mnt,"QDQBertForMaskedLM"),Mnt.forEach(t),$Ao=r(kye," (QDQBert model)"),kye.forEach(t),kAo=i(H),K1=n(H,"LI",{});var Sye=s(K1);lce=n(Sye,"STRONG",{});var Ent=s(lce);SAo=r(Ent,"reformer"),Ent.forEach(t),RAo=r(Sye," \u2014 "),sD=n(Sye,"A",{href:!0});var Cnt=s(sD);PAo=r(Cnt,"ReformerForMaskedLM"),Cnt.forEach(t),BAo=r(Sye," (Reformer model)"),Sye.forEach(t),IAo=i(H),Z1=n(H,"LI",{});var Rye=s(Z1);ice=n(Rye,"STRONG",{});var wnt=s(ice);qAo=r(wnt,"rembert"),wnt.forEach(t),NAo=r(Rye," \u2014 "),lD=n(Rye,"A",{href:!0});var Ant=s(lD);jAo=r(Ant,"RemBertForMaskedLM"),Ant.forEach(t),DAo=r(Rye," (RemBERT model)"),Rye.forEach(t),GAo=i(H),e7=n(H,"LI",{});var Pye=s(e7);dce=n(Pye,"STRONG",{});var ynt=s(dce);OAo=r(ynt,"roberta"),ynt.forEach(t),VAo=r(Pye," \u2014 "),iD=n(Pye,"A",{href:!0});var Lnt=s(iD);XAo=r(Lnt,"RobertaForMaskedLM"),Lnt.forEach(t),zAo=r(Pye," (RoBERTa model)"),Pye.forEach(t),WAo=i(H),o7=n(H,"LI",{});var Bye=s(o7);cce=n(Bye,"STRONG",{});var xnt=s(cce);QAo=r(xnt,"roformer"),xnt.forEach(t),HAo=r(Bye," \u2014 "),dD=n(Bye,"A",{href:!0});var $nt=s(dD);UAo=r($nt,"RoFormerForMaskedLM"),$nt.forEach(t),JAo=r(Bye," (RoFormer model)"),Bye.forEach(t),YAo=i(H),r7=n(H,"LI",{});var Iye=s(r7);fce=n(Iye,"STRONG",{});var knt=s(fce);KAo=r(knt,"squeezebert"),knt.forEach(t),ZAo=r(Iye," \u2014 "),cD=n(Iye,"A",{href:!0});var Snt=s(cD);e6o=r(Snt,"SqueezeBertForMaskedLM"),Snt.forEach(t),o6o=r(Iye," (SqueezeBERT model)"),Iye.forEach(t),r6o=i(H),t7=n(H,"LI",{});var qye=s(t7);mce=n(qye,"STRONG",{});var Rnt=s(mce);t6o=r(Rnt,"tapas"),Rnt.forEach(t),a6o=r(qye," \u2014 "),fD=n(qye,"A",{href:!0});var Pnt=s(fD);n6o=r(Pnt,"TapasForMaskedLM"),Pnt.forEach(t),s6o=r(qye," (TAPAS model)"),qye.forEach(t),l6o=i(H),a7=n(H,"LI",{});var Nye=s(a7);gce=n(Nye,"STRONG",{});var Bnt=s(gce);i6o=r(Bnt,"wav2vec2"),Bnt.forEach(t),d6o=r(Nye," \u2014 "),hce=n(Nye,"CODE",{});var Int=s(hce);c6o=r(Int,"Wav2Vec2ForMaskedLM"),Int.forEach(t),f6o=r(Nye," (Wav2Vec2 model)"),Nye.forEach(t),m6o=i(H),n7=n(H,"LI",{});var jye=s(n7);pce=n(jye,"STRONG",{});var qnt=s(pce);g6o=r(qnt,"xlm"),qnt.forEach(t),h6o=r(jye," \u2014 "),mD=n(jye,"A",{href:!0});var Nnt=s(mD);p6o=r(Nnt,"XLMWithLMHeadModel"),Nnt.forEach(t),_6o=r(jye," (XLM model)"),jye.forEach(t),u6o=i(H),s7=n(H,"LI",{});var Dye=s(s7);_ce=n(Dye,"STRONG",{});var jnt=s(_ce);b6o=r(jnt,"xlm-roberta"),jnt.forEach(t),v6o=r(Dye," \u2014 "),gD=n(Dye,"A",{href:!0});var Dnt=s(gD);F6o=r(Dnt,"XLMRobertaForMaskedLM"),Dnt.forEach(t),T6o=r(Dye," (XLM-RoBERTa model)"),Dye.forEach(t),M6o=i(H),l7=n(H,"LI",{});var Gye=s(l7);uce=n(Gye,"STRONG",{});var Gnt=s(uce);E6o=r(Gnt,"xlm-roberta-xl"),Gnt.forEach(t),C6o=r(Gye," \u2014 "),hD=n(Gye,"A",{href:!0});var Ont=s(hD);w6o=r(Ont,"XLMRobertaXLForMaskedLM"),Ont.forEach(t),A6o=r(Gye," (XLM-RoBERTa-XL model)"),Gye.forEach(t),y6o=i(H),i7=n(H,"LI",{});var Oye=s(i7);bce=n(Oye,"STRONG",{});var Vnt=s(bce);L6o=r(Vnt,"yoso"),Vnt.forEach(t),x6o=r(Oye," \u2014 "),pD=n(Oye,"A",{href:!0});var Xnt=s(pD);$6o=r(Xnt,"YosoForMaskedLM"),Xnt.forEach(t),k6o=r(Oye," (YOSO model)"),Oye.forEach(t),H.forEach(t),S6o=i(aa),d7=n(aa,"P",{});var Vye=s(d7);R6o=r(Vye,"The model is set in evaluation mode by default using "),vce=n(Vye,"CODE",{});var znt=s(vce);P6o=r(znt,"model.eval()"),znt.forEach(t),B6o=r(Vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fce=n(Vye,"CODE",{});var Wnt=s(Fce);I6o=r(Wnt,"model.train()"),Wnt.forEach(t),Vye.forEach(t),q6o=i(aa),T(c7.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),Fqe=i(f),Ii=n(f,"H2",{class:!0});var Cje=s(Ii);f7=n(Cje,"A",{id:!0,class:!0,href:!0});var Qnt=s(f7);Tce=n(Qnt,"SPAN",{});var Hnt=s(Tce);T(s6.$$.fragment,Hnt),Hnt.forEach(t),Qnt.forEach(t),N6o=i(Cje),Mce=n(Cje,"SPAN",{});var Unt=s(Mce);j6o=r(Unt,"AutoModelForSeq2SeqLM"),Unt.forEach(t),Cje.forEach(t),Tqe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(l6.$$.fragment,Xs),D6o=i(Xs),qi=n(Xs,"P",{});var UK=s(qi);G6o=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),_D=n(UK,"A",{href:!0});var Jnt=s(_D);O6o=r(Jnt,"from_pretrained()"),Jnt.forEach(t),V6o=r(UK," class method or the "),uD=n(UK,"A",{href:!0});var Ynt=s(uD);X6o=r(Ynt,"from_config()"),Ynt.forEach(t),z6o=r(UK,` class
method.`),UK.forEach(t),W6o=i(Xs),i6=n(Xs,"P",{});var wje=s(i6);Q6o=r(wje,"This class cannot be instantiated directly using "),Ece=n(wje,"CODE",{});var Knt=s(Ece);H6o=r(Knt,"__init__()"),Knt.forEach(t),U6o=r(wje," (throws an error)."),wje.forEach(t),J6o=i(Xs),lt=n(Xs,"DIV",{class:!0});var Aw=s(lt);T(d6.$$.fragment,Aw),Y6o=i(Aw),Cce=n(Aw,"P",{});var Znt=s(Cce);K6o=r(Znt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Znt.forEach(t),Z6o=i(Aw),Ni=n(Aw,"P",{});var JK=s(Ni);eyo=r(JK,`Note:
Loading a model from its configuration file does `),wce=n(JK,"STRONG",{});var est=s(wce);oyo=r(est,"not"),est.forEach(t),ryo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(JK,"A",{href:!0});var ost=s(bD);tyo=r(ost,"from_pretrained()"),ost.forEach(t),ayo=r(JK," to load the model weights."),JK.forEach(t),nyo=i(Aw),T(m7.$$.fragment,Aw),Aw.forEach(t),syo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(c6.$$.fragment,na),lyo=i(na),Ace=n(na,"P",{});var rst=s(Ace);iyo=r(rst,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rst.forEach(t),dyo=i(na),Sa=n(na,"P",{});var yw=s(Sa);cyo=r(yw,"The model class to instantiate is selected based on the "),yce=n(yw,"CODE",{});var tst=s(yce);fyo=r(tst,"model_type"),tst.forEach(t),myo=r(yw,` property of the config object (either
passed as an argument or loaded from `),Lce=n(yw,"CODE",{});var ast=s(Lce);gyo=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),hyo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(yw,"CODE",{});var nst=s(xce);pyo=r(nst,"pretrained_model_name_or_path"),nst.forEach(t),_yo=r(yw,":"),yw.forEach(t),uyo=i(na),_e=n(na,"UL",{});var ve=s(_e);g7=n(ve,"LI",{});var Xye=s(g7);$ce=n(Xye,"STRONG",{});var sst=s($ce);byo=r(sst,"bart"),sst.forEach(t),vyo=r(Xye," \u2014 "),vD=n(Xye,"A",{href:!0});var lst=s(vD);Fyo=r(lst,"BartForConditionalGeneration"),lst.forEach(t),Tyo=r(Xye," (BART model)"),Xye.forEach(t),Myo=i(ve),h7=n(ve,"LI",{});var zye=s(h7);kce=n(zye,"STRONG",{});var ist=s(kce);Eyo=r(ist,"bigbird_pegasus"),ist.forEach(t),Cyo=r(zye," \u2014 "),FD=n(zye,"A",{href:!0});var dst=s(FD);wyo=r(dst,"BigBirdPegasusForConditionalGeneration"),dst.forEach(t),Ayo=r(zye," (BigBirdPegasus model)"),zye.forEach(t),yyo=i(ve),p7=n(ve,"LI",{});var Wye=s(p7);Sce=n(Wye,"STRONG",{});var cst=s(Sce);Lyo=r(cst,"blenderbot"),cst.forEach(t),xyo=r(Wye," \u2014 "),TD=n(Wye,"A",{href:!0});var fst=s(TD);$yo=r(fst,"BlenderbotForConditionalGeneration"),fst.forEach(t),kyo=r(Wye," (Blenderbot model)"),Wye.forEach(t),Syo=i(ve),_7=n(ve,"LI",{});var Qye=s(_7);Rce=n(Qye,"STRONG",{});var mst=s(Rce);Ryo=r(mst,"blenderbot-small"),mst.forEach(t),Pyo=r(Qye," \u2014 "),MD=n(Qye,"A",{href:!0});var gst=s(MD);Byo=r(gst,"BlenderbotSmallForConditionalGeneration"),gst.forEach(t),Iyo=r(Qye," (BlenderbotSmall model)"),Qye.forEach(t),qyo=i(ve),u7=n(ve,"LI",{});var Hye=s(u7);Pce=n(Hye,"STRONG",{});var hst=s(Pce);Nyo=r(hst,"encoder-decoder"),hst.forEach(t),jyo=r(Hye," \u2014 "),ED=n(Hye,"A",{href:!0});var pst=s(ED);Dyo=r(pst,"EncoderDecoderModel"),pst.forEach(t),Gyo=r(Hye," (Encoder decoder model)"),Hye.forEach(t),Oyo=i(ve),b7=n(ve,"LI",{});var Uye=s(b7);Bce=n(Uye,"STRONG",{});var _st=s(Bce);Vyo=r(_st,"fsmt"),_st.forEach(t),Xyo=r(Uye," \u2014 "),CD=n(Uye,"A",{href:!0});var ust=s(CD);zyo=r(ust,"FSMTForConditionalGeneration"),ust.forEach(t),Wyo=r(Uye," (FairSeq Machine-Translation model)"),Uye.forEach(t),Qyo=i(ve),v7=n(ve,"LI",{});var Jye=s(v7);Ice=n(Jye,"STRONG",{});var bst=s(Ice);Hyo=r(bst,"led"),bst.forEach(t),Uyo=r(Jye," \u2014 "),wD=n(Jye,"A",{href:!0});var vst=s(wD);Jyo=r(vst,"LEDForConditionalGeneration"),vst.forEach(t),Yyo=r(Jye," (LED model)"),Jye.forEach(t),Kyo=i(ve),F7=n(ve,"LI",{});var Yye=s(F7);qce=n(Yye,"STRONG",{});var Fst=s(qce);Zyo=r(Fst,"m2m_100"),Fst.forEach(t),eLo=r(Yye," \u2014 "),AD=n(Yye,"A",{href:!0});var Tst=s(AD);oLo=r(Tst,"M2M100ForConditionalGeneration"),Tst.forEach(t),rLo=r(Yye," (M2M100 model)"),Yye.forEach(t),tLo=i(ve),T7=n(ve,"LI",{});var Kye=s(T7);Nce=n(Kye,"STRONG",{});var Mst=s(Nce);aLo=r(Mst,"marian"),Mst.forEach(t),nLo=r(Kye," \u2014 "),yD=n(Kye,"A",{href:!0});var Est=s(yD);sLo=r(Est,"MarianMTModel"),Est.forEach(t),lLo=r(Kye," (Marian model)"),Kye.forEach(t),iLo=i(ve),M7=n(ve,"LI",{});var Zye=s(M7);jce=n(Zye,"STRONG",{});var Cst=s(jce);dLo=r(Cst,"mbart"),Cst.forEach(t),cLo=r(Zye," \u2014 "),LD=n(Zye,"A",{href:!0});var wst=s(LD);fLo=r(wst,"MBartForConditionalGeneration"),wst.forEach(t),mLo=r(Zye," (mBART model)"),Zye.forEach(t),gLo=i(ve),E7=n(ve,"LI",{});var eLe=s(E7);Dce=n(eLe,"STRONG",{});var Ast=s(Dce);hLo=r(Ast,"mt5"),Ast.forEach(t),pLo=r(eLe," \u2014 "),xD=n(eLe,"A",{href:!0});var yst=s(xD);_Lo=r(yst,"MT5ForConditionalGeneration"),yst.forEach(t),uLo=r(eLe," (mT5 model)"),eLe.forEach(t),bLo=i(ve),C7=n(ve,"LI",{});var oLe=s(C7);Gce=n(oLe,"STRONG",{});var Lst=s(Gce);vLo=r(Lst,"pegasus"),Lst.forEach(t),FLo=r(oLe," \u2014 "),$D=n(oLe,"A",{href:!0});var xst=s($D);TLo=r(xst,"PegasusForConditionalGeneration"),xst.forEach(t),MLo=r(oLe," (Pegasus model)"),oLe.forEach(t),ELo=i(ve),w7=n(ve,"LI",{});var rLe=s(w7);Oce=n(rLe,"STRONG",{});var $st=s(Oce);CLo=r($st,"plbart"),$st.forEach(t),wLo=r(rLe," \u2014 "),kD=n(rLe,"A",{href:!0});var kst=s(kD);ALo=r(kst,"PLBartForConditionalGeneration"),kst.forEach(t),yLo=r(rLe," (PLBart model)"),rLe.forEach(t),LLo=i(ve),A7=n(ve,"LI",{});var tLe=s(A7);Vce=n(tLe,"STRONG",{});var Sst=s(Vce);xLo=r(Sst,"prophetnet"),Sst.forEach(t),$Lo=r(tLe," \u2014 "),SD=n(tLe,"A",{href:!0});var Rst=s(SD);kLo=r(Rst,"ProphetNetForConditionalGeneration"),Rst.forEach(t),SLo=r(tLe," (ProphetNet model)"),tLe.forEach(t),RLo=i(ve),y7=n(ve,"LI",{});var aLe=s(y7);Xce=n(aLe,"STRONG",{});var Pst=s(Xce);PLo=r(Pst,"t5"),Pst.forEach(t),BLo=r(aLe," \u2014 "),RD=n(aLe,"A",{href:!0});var Bst=s(RD);ILo=r(Bst,"T5ForConditionalGeneration"),Bst.forEach(t),qLo=r(aLe," (T5 model)"),aLe.forEach(t),NLo=i(ve),L7=n(ve,"LI",{});var nLe=s(L7);zce=n(nLe,"STRONG",{});var Ist=s(zce);jLo=r(Ist,"xlm-prophetnet"),Ist.forEach(t),DLo=r(nLe," \u2014 "),PD=n(nLe,"A",{href:!0});var qst=s(PD);GLo=r(qst,"XLMProphetNetForConditionalGeneration"),qst.forEach(t),OLo=r(nLe," (XLMProphetNet model)"),nLe.forEach(t),ve.forEach(t),VLo=i(na),x7=n(na,"P",{});var sLe=s(x7);XLo=r(sLe,"The model is set in evaluation mode by default using "),Wce=n(sLe,"CODE",{});var Nst=s(Wce);zLo=r(Nst,"model.eval()"),Nst.forEach(t),WLo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(sLe,"CODE",{});var jst=s(Qce);QLo=r(jst,"model.train()"),jst.forEach(t),sLe.forEach(t),HLo=i(na),T($7.$$.fragment,na),na.forEach(t),Xs.forEach(t),Mqe=i(f),ji=n(f,"H2",{class:!0});var Aje=s(ji);k7=n(Aje,"A",{id:!0,class:!0,href:!0});var Dst=s(k7);Hce=n(Dst,"SPAN",{});var Gst=s(Hce);T(f6.$$.fragment,Gst),Gst.forEach(t),Dst.forEach(t),ULo=i(Aje),Uce=n(Aje,"SPAN",{});var Ost=s(Uce);JLo=r(Ost,"AutoModelForSequenceClassification"),Ost.forEach(t),Aje.forEach(t),Eqe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(m6.$$.fragment,zs),YLo=i(zs),Di=n(zs,"P",{});var YK=s(Di);KLo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BD=n(YK,"A",{href:!0});var Vst=s(BD);ZLo=r(Vst,"from_pretrained()"),Vst.forEach(t),e9o=r(YK," class method or the "),ID=n(YK,"A",{href:!0});var Xst=s(ID);o9o=r(Xst,"from_config()"),Xst.forEach(t),r9o=r(YK,` class
method.`),YK.forEach(t),t9o=i(zs),g6=n(zs,"P",{});var yje=s(g6);a9o=r(yje,"This class cannot be instantiated directly using "),Jce=n(yje,"CODE",{});var zst=s(Jce);n9o=r(zst,"__init__()"),zst.forEach(t),s9o=r(yje," (throws an error)."),yje.forEach(t),l9o=i(zs),it=n(zs,"DIV",{class:!0});var Lw=s(it);T(h6.$$.fragment,Lw),i9o=i(Lw),Yce=n(Lw,"P",{});var Wst=s(Yce);d9o=r(Wst,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wst.forEach(t),c9o=i(Lw),Gi=n(Lw,"P",{});var KK=s(Gi);f9o=r(KK,`Note:
Loading a model from its configuration file does `),Kce=n(KK,"STRONG",{});var Qst=s(Kce);m9o=r(Qst,"not"),Qst.forEach(t),g9o=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(KK,"A",{href:!0});var Hst=s(qD);h9o=r(Hst,"from_pretrained()"),Hst.forEach(t),p9o=r(KK," to load the model weights."),KK.forEach(t),_9o=i(Lw),T(S7.$$.fragment,Lw),Lw.forEach(t),u9o=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(p6.$$.fragment,sa),b9o=i(sa),Zce=n(sa,"P",{});var Ust=s(Zce);v9o=r(Ust,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ust.forEach(t),F9o=i(sa),Ra=n(sa,"P",{});var xw=s(Ra);T9o=r(xw,"The model class to instantiate is selected based on the "),efe=n(xw,"CODE",{});var Jst=s(efe);M9o=r(Jst,"model_type"),Jst.forEach(t),E9o=r(xw,` property of the config object (either
passed as an argument or loaded from `),ofe=n(xw,"CODE",{});var Yst=s(ofe);C9o=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),w9o=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=n(xw,"CODE",{});var Kst=s(rfe);A9o=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),y9o=r(xw,":"),xw.forEach(t),L9o=i(sa),q=n(sa,"UL",{});var j=s(q);R7=n(j,"LI",{});var lLe=s(R7);tfe=n(lLe,"STRONG",{});var Zst=s(tfe);x9o=r(Zst,"albert"),Zst.forEach(t),$9o=r(lLe," \u2014 "),ND=n(lLe,"A",{href:!0});var elt=s(ND);k9o=r(elt,"AlbertForSequenceClassification"),elt.forEach(t),S9o=r(lLe," (ALBERT model)"),lLe.forEach(t),R9o=i(j),P7=n(j,"LI",{});var iLe=s(P7);afe=n(iLe,"STRONG",{});var olt=s(afe);P9o=r(olt,"bart"),olt.forEach(t),B9o=r(iLe," \u2014 "),jD=n(iLe,"A",{href:!0});var rlt=s(jD);I9o=r(rlt,"BartForSequenceClassification"),rlt.forEach(t),q9o=r(iLe," (BART model)"),iLe.forEach(t),N9o=i(j),B7=n(j,"LI",{});var dLe=s(B7);nfe=n(dLe,"STRONG",{});var tlt=s(nfe);j9o=r(tlt,"bert"),tlt.forEach(t),D9o=r(dLe," \u2014 "),DD=n(dLe,"A",{href:!0});var alt=s(DD);G9o=r(alt,"BertForSequenceClassification"),alt.forEach(t),O9o=r(dLe," (BERT model)"),dLe.forEach(t),V9o=i(j),I7=n(j,"LI",{});var cLe=s(I7);sfe=n(cLe,"STRONG",{});var nlt=s(sfe);X9o=r(nlt,"big_bird"),nlt.forEach(t),z9o=r(cLe," \u2014 "),GD=n(cLe,"A",{href:!0});var slt=s(GD);W9o=r(slt,"BigBirdForSequenceClassification"),slt.forEach(t),Q9o=r(cLe," (BigBird model)"),cLe.forEach(t),H9o=i(j),q7=n(j,"LI",{});var fLe=s(q7);lfe=n(fLe,"STRONG",{});var llt=s(lfe);U9o=r(llt,"bigbird_pegasus"),llt.forEach(t),J9o=r(fLe," \u2014 "),OD=n(fLe,"A",{href:!0});var ilt=s(OD);Y9o=r(ilt,"BigBirdPegasusForSequenceClassification"),ilt.forEach(t),K9o=r(fLe," (BigBirdPegasus model)"),fLe.forEach(t),Z9o=i(j),N7=n(j,"LI",{});var mLe=s(N7);ife=n(mLe,"STRONG",{});var dlt=s(ife);exo=r(dlt,"camembert"),dlt.forEach(t),oxo=r(mLe," \u2014 "),VD=n(mLe,"A",{href:!0});var clt=s(VD);rxo=r(clt,"CamembertForSequenceClassification"),clt.forEach(t),txo=r(mLe," (CamemBERT model)"),mLe.forEach(t),axo=i(j),j7=n(j,"LI",{});var gLe=s(j7);dfe=n(gLe,"STRONG",{});var flt=s(dfe);nxo=r(flt,"canine"),flt.forEach(t),sxo=r(gLe," \u2014 "),XD=n(gLe,"A",{href:!0});var mlt=s(XD);lxo=r(mlt,"CanineForSequenceClassification"),mlt.forEach(t),ixo=r(gLe," (Canine model)"),gLe.forEach(t),dxo=i(j),D7=n(j,"LI",{});var hLe=s(D7);cfe=n(hLe,"STRONG",{});var glt=s(cfe);cxo=r(glt,"convbert"),glt.forEach(t),fxo=r(hLe," \u2014 "),zD=n(hLe,"A",{href:!0});var hlt=s(zD);mxo=r(hlt,"ConvBertForSequenceClassification"),hlt.forEach(t),gxo=r(hLe," (ConvBERT model)"),hLe.forEach(t),hxo=i(j),G7=n(j,"LI",{});var pLe=s(G7);ffe=n(pLe,"STRONG",{});var plt=s(ffe);pxo=r(plt,"ctrl"),plt.forEach(t),_xo=r(pLe," \u2014 "),WD=n(pLe,"A",{href:!0});var _lt=s(WD);uxo=r(_lt,"CTRLForSequenceClassification"),_lt.forEach(t),bxo=r(pLe," (CTRL model)"),pLe.forEach(t),vxo=i(j),O7=n(j,"LI",{});var _Le=s(O7);mfe=n(_Le,"STRONG",{});var ult=s(mfe);Fxo=r(ult,"data2vec-text"),ult.forEach(t),Txo=r(_Le," \u2014 "),QD=n(_Le,"A",{href:!0});var blt=s(QD);Mxo=r(blt,"Data2VecTextForSequenceClassification"),blt.forEach(t),Exo=r(_Le," (Data2VecText model)"),_Le.forEach(t),Cxo=i(j),V7=n(j,"LI",{});var uLe=s(V7);gfe=n(uLe,"STRONG",{});var vlt=s(gfe);wxo=r(vlt,"deberta"),vlt.forEach(t),Axo=r(uLe," \u2014 "),HD=n(uLe,"A",{href:!0});var Flt=s(HD);yxo=r(Flt,"DebertaForSequenceClassification"),Flt.forEach(t),Lxo=r(uLe," (DeBERTa model)"),uLe.forEach(t),xxo=i(j),X7=n(j,"LI",{});var bLe=s(X7);hfe=n(bLe,"STRONG",{});var Tlt=s(hfe);$xo=r(Tlt,"deberta-v2"),Tlt.forEach(t),kxo=r(bLe," \u2014 "),UD=n(bLe,"A",{href:!0});var Mlt=s(UD);Sxo=r(Mlt,"DebertaV2ForSequenceClassification"),Mlt.forEach(t),Rxo=r(bLe," (DeBERTa-v2 model)"),bLe.forEach(t),Pxo=i(j),z7=n(j,"LI",{});var vLe=s(z7);pfe=n(vLe,"STRONG",{});var Elt=s(pfe);Bxo=r(Elt,"distilbert"),Elt.forEach(t),Ixo=r(vLe," \u2014 "),JD=n(vLe,"A",{href:!0});var Clt=s(JD);qxo=r(Clt,"DistilBertForSequenceClassification"),Clt.forEach(t),Nxo=r(vLe," (DistilBERT model)"),vLe.forEach(t),jxo=i(j),W7=n(j,"LI",{});var FLe=s(W7);_fe=n(FLe,"STRONG",{});var wlt=s(_fe);Dxo=r(wlt,"electra"),wlt.forEach(t),Gxo=r(FLe," \u2014 "),YD=n(FLe,"A",{href:!0});var Alt=s(YD);Oxo=r(Alt,"ElectraForSequenceClassification"),Alt.forEach(t),Vxo=r(FLe," (ELECTRA model)"),FLe.forEach(t),Xxo=i(j),Q7=n(j,"LI",{});var TLe=s(Q7);ufe=n(TLe,"STRONG",{});var ylt=s(ufe);zxo=r(ylt,"flaubert"),ylt.forEach(t),Wxo=r(TLe," \u2014 "),KD=n(TLe,"A",{href:!0});var Llt=s(KD);Qxo=r(Llt,"FlaubertForSequenceClassification"),Llt.forEach(t),Hxo=r(TLe," (FlauBERT model)"),TLe.forEach(t),Uxo=i(j),H7=n(j,"LI",{});var MLe=s(H7);bfe=n(MLe,"STRONG",{});var xlt=s(bfe);Jxo=r(xlt,"fnet"),xlt.forEach(t),Yxo=r(MLe," \u2014 "),ZD=n(MLe,"A",{href:!0});var $lt=s(ZD);Kxo=r($lt,"FNetForSequenceClassification"),$lt.forEach(t),Zxo=r(MLe," (FNet model)"),MLe.forEach(t),e$o=i(j),U7=n(j,"LI",{});var ELe=s(U7);vfe=n(ELe,"STRONG",{});var klt=s(vfe);o$o=r(klt,"funnel"),klt.forEach(t),r$o=r(ELe," \u2014 "),eG=n(ELe,"A",{href:!0});var Slt=s(eG);t$o=r(Slt,"FunnelForSequenceClassification"),Slt.forEach(t),a$o=r(ELe," (Funnel Transformer model)"),ELe.forEach(t),n$o=i(j),J7=n(j,"LI",{});var CLe=s(J7);Ffe=n(CLe,"STRONG",{});var Rlt=s(Ffe);s$o=r(Rlt,"gpt2"),Rlt.forEach(t),l$o=r(CLe," \u2014 "),oG=n(CLe,"A",{href:!0});var Plt=s(oG);i$o=r(Plt,"GPT2ForSequenceClassification"),Plt.forEach(t),d$o=r(CLe," (OpenAI GPT-2 model)"),CLe.forEach(t),c$o=i(j),Y7=n(j,"LI",{});var wLe=s(Y7);Tfe=n(wLe,"STRONG",{});var Blt=s(Tfe);f$o=r(Blt,"gpt_neo"),Blt.forEach(t),m$o=r(wLe," \u2014 "),rG=n(wLe,"A",{href:!0});var Ilt=s(rG);g$o=r(Ilt,"GPTNeoForSequenceClassification"),Ilt.forEach(t),h$o=r(wLe," (GPT Neo model)"),wLe.forEach(t),p$o=i(j),K7=n(j,"LI",{});var ALe=s(K7);Mfe=n(ALe,"STRONG",{});var qlt=s(Mfe);_$o=r(qlt,"gptj"),qlt.forEach(t),u$o=r(ALe," \u2014 "),tG=n(ALe,"A",{href:!0});var Nlt=s(tG);b$o=r(Nlt,"GPTJForSequenceClassification"),Nlt.forEach(t),v$o=r(ALe," (GPT-J model)"),ALe.forEach(t),F$o=i(j),Z7=n(j,"LI",{});var yLe=s(Z7);Efe=n(yLe,"STRONG",{});var jlt=s(Efe);T$o=r(jlt,"ibert"),jlt.forEach(t),M$o=r(yLe," \u2014 "),aG=n(yLe,"A",{href:!0});var Dlt=s(aG);E$o=r(Dlt,"IBertForSequenceClassification"),Dlt.forEach(t),C$o=r(yLe," (I-BERT model)"),yLe.forEach(t),w$o=i(j),eb=n(j,"LI",{});var LLe=s(eb);Cfe=n(LLe,"STRONG",{});var Glt=s(Cfe);A$o=r(Glt,"layoutlm"),Glt.forEach(t),y$o=r(LLe," \u2014 "),nG=n(LLe,"A",{href:!0});var Olt=s(nG);L$o=r(Olt,"LayoutLMForSequenceClassification"),Olt.forEach(t),x$o=r(LLe," (LayoutLM model)"),LLe.forEach(t),$$o=i(j),ob=n(j,"LI",{});var xLe=s(ob);wfe=n(xLe,"STRONG",{});var Vlt=s(wfe);k$o=r(Vlt,"layoutlmv2"),Vlt.forEach(t),S$o=r(xLe," \u2014 "),sG=n(xLe,"A",{href:!0});var Xlt=s(sG);R$o=r(Xlt,"LayoutLMv2ForSequenceClassification"),Xlt.forEach(t),P$o=r(xLe," (LayoutLMv2 model)"),xLe.forEach(t),B$o=i(j),rb=n(j,"LI",{});var $Le=s(rb);Afe=n($Le,"STRONG",{});var zlt=s(Afe);I$o=r(zlt,"led"),zlt.forEach(t),q$o=r($Le," \u2014 "),lG=n($Le,"A",{href:!0});var Wlt=s(lG);N$o=r(Wlt,"LEDForSequenceClassification"),Wlt.forEach(t),j$o=r($Le," (LED model)"),$Le.forEach(t),D$o=i(j),tb=n(j,"LI",{});var kLe=s(tb);yfe=n(kLe,"STRONG",{});var Qlt=s(yfe);G$o=r(Qlt,"longformer"),Qlt.forEach(t),O$o=r(kLe," \u2014 "),iG=n(kLe,"A",{href:!0});var Hlt=s(iG);V$o=r(Hlt,"LongformerForSequenceClassification"),Hlt.forEach(t),X$o=r(kLe," (Longformer model)"),kLe.forEach(t),z$o=i(j),ab=n(j,"LI",{});var SLe=s(ab);Lfe=n(SLe,"STRONG",{});var Ult=s(Lfe);W$o=r(Ult,"mbart"),Ult.forEach(t),Q$o=r(SLe," \u2014 "),dG=n(SLe,"A",{href:!0});var Jlt=s(dG);H$o=r(Jlt,"MBartForSequenceClassification"),Jlt.forEach(t),U$o=r(SLe," (mBART model)"),SLe.forEach(t),J$o=i(j),nb=n(j,"LI",{});var RLe=s(nb);xfe=n(RLe,"STRONG",{});var Ylt=s(xfe);Y$o=r(Ylt,"megatron-bert"),Ylt.forEach(t),K$o=r(RLe," \u2014 "),cG=n(RLe,"A",{href:!0});var Klt=s(cG);Z$o=r(Klt,"MegatronBertForSequenceClassification"),Klt.forEach(t),eko=r(RLe," (MegatronBert model)"),RLe.forEach(t),oko=i(j),sb=n(j,"LI",{});var PLe=s(sb);$fe=n(PLe,"STRONG",{});var Zlt=s($fe);rko=r(Zlt,"mobilebert"),Zlt.forEach(t),tko=r(PLe," \u2014 "),fG=n(PLe,"A",{href:!0});var eit=s(fG);ako=r(eit,"MobileBertForSequenceClassification"),eit.forEach(t),nko=r(PLe," (MobileBERT model)"),PLe.forEach(t),sko=i(j),lb=n(j,"LI",{});var BLe=s(lb);kfe=n(BLe,"STRONG",{});var oit=s(kfe);lko=r(oit,"mpnet"),oit.forEach(t),iko=r(BLe," \u2014 "),mG=n(BLe,"A",{href:!0});var rit=s(mG);dko=r(rit,"MPNetForSequenceClassification"),rit.forEach(t),cko=r(BLe," (MPNet model)"),BLe.forEach(t),fko=i(j),ib=n(j,"LI",{});var ILe=s(ib);Sfe=n(ILe,"STRONG",{});var tit=s(Sfe);mko=r(tit,"nystromformer"),tit.forEach(t),gko=r(ILe," \u2014 "),gG=n(ILe,"A",{href:!0});var ait=s(gG);hko=r(ait,"NystromformerForSequenceClassification"),ait.forEach(t),pko=r(ILe," (Nystromformer model)"),ILe.forEach(t),_ko=i(j),db=n(j,"LI",{});var qLe=s(db);Rfe=n(qLe,"STRONG",{});var nit=s(Rfe);uko=r(nit,"openai-gpt"),nit.forEach(t),bko=r(qLe," \u2014 "),hG=n(qLe,"A",{href:!0});var sit=s(hG);vko=r(sit,"OpenAIGPTForSequenceClassification"),sit.forEach(t),Fko=r(qLe," (OpenAI GPT model)"),qLe.forEach(t),Tko=i(j),cb=n(j,"LI",{});var NLe=s(cb);Pfe=n(NLe,"STRONG",{});var lit=s(Pfe);Mko=r(lit,"perceiver"),lit.forEach(t),Eko=r(NLe," \u2014 "),pG=n(NLe,"A",{href:!0});var iit=s(pG);Cko=r(iit,"PerceiverForSequenceClassification"),iit.forEach(t),wko=r(NLe," (Perceiver model)"),NLe.forEach(t),Ako=i(j),fb=n(j,"LI",{});var jLe=s(fb);Bfe=n(jLe,"STRONG",{});var dit=s(Bfe);yko=r(dit,"plbart"),dit.forEach(t),Lko=r(jLe," \u2014 "),_G=n(jLe,"A",{href:!0});var cit=s(_G);xko=r(cit,"PLBartForSequenceClassification"),cit.forEach(t),$ko=r(jLe," (PLBart model)"),jLe.forEach(t),kko=i(j),mb=n(j,"LI",{});var DLe=s(mb);Ife=n(DLe,"STRONG",{});var fit=s(Ife);Sko=r(fit,"qdqbert"),fit.forEach(t),Rko=r(DLe," \u2014 "),uG=n(DLe,"A",{href:!0});var mit=s(uG);Pko=r(mit,"QDQBertForSequenceClassification"),mit.forEach(t),Bko=r(DLe," (QDQBert model)"),DLe.forEach(t),Iko=i(j),gb=n(j,"LI",{});var GLe=s(gb);qfe=n(GLe,"STRONG",{});var git=s(qfe);qko=r(git,"reformer"),git.forEach(t),Nko=r(GLe," \u2014 "),bG=n(GLe,"A",{href:!0});var hit=s(bG);jko=r(hit,"ReformerForSequenceClassification"),hit.forEach(t),Dko=r(GLe," (Reformer model)"),GLe.forEach(t),Gko=i(j),hb=n(j,"LI",{});var OLe=s(hb);Nfe=n(OLe,"STRONG",{});var pit=s(Nfe);Oko=r(pit,"rembert"),pit.forEach(t),Vko=r(OLe," \u2014 "),vG=n(OLe,"A",{href:!0});var _it=s(vG);Xko=r(_it,"RemBertForSequenceClassification"),_it.forEach(t),zko=r(OLe," (RemBERT model)"),OLe.forEach(t),Wko=i(j),pb=n(j,"LI",{});var VLe=s(pb);jfe=n(VLe,"STRONG",{});var uit=s(jfe);Qko=r(uit,"roberta"),uit.forEach(t),Hko=r(VLe," \u2014 "),FG=n(VLe,"A",{href:!0});var bit=s(FG);Uko=r(bit,"RobertaForSequenceClassification"),bit.forEach(t),Jko=r(VLe," (RoBERTa model)"),VLe.forEach(t),Yko=i(j),_b=n(j,"LI",{});var XLe=s(_b);Dfe=n(XLe,"STRONG",{});var vit=s(Dfe);Kko=r(vit,"roformer"),vit.forEach(t),Zko=r(XLe," \u2014 "),TG=n(XLe,"A",{href:!0});var Fit=s(TG);eSo=r(Fit,"RoFormerForSequenceClassification"),Fit.forEach(t),oSo=r(XLe," (RoFormer model)"),XLe.forEach(t),rSo=i(j),ub=n(j,"LI",{});var zLe=s(ub);Gfe=n(zLe,"STRONG",{});var Tit=s(Gfe);tSo=r(Tit,"squeezebert"),Tit.forEach(t),aSo=r(zLe," \u2014 "),MG=n(zLe,"A",{href:!0});var Mit=s(MG);nSo=r(Mit,"SqueezeBertForSequenceClassification"),Mit.forEach(t),sSo=r(zLe," (SqueezeBERT model)"),zLe.forEach(t),lSo=i(j),bb=n(j,"LI",{});var WLe=s(bb);Ofe=n(WLe,"STRONG",{});var Eit=s(Ofe);iSo=r(Eit,"tapas"),Eit.forEach(t),dSo=r(WLe," \u2014 "),EG=n(WLe,"A",{href:!0});var Cit=s(EG);cSo=r(Cit,"TapasForSequenceClassification"),Cit.forEach(t),fSo=r(WLe," (TAPAS model)"),WLe.forEach(t),mSo=i(j),vb=n(j,"LI",{});var QLe=s(vb);Vfe=n(QLe,"STRONG",{});var wit=s(Vfe);gSo=r(wit,"transfo-xl"),wit.forEach(t),hSo=r(QLe," \u2014 "),CG=n(QLe,"A",{href:!0});var Ait=s(CG);pSo=r(Ait,"TransfoXLForSequenceClassification"),Ait.forEach(t),_So=r(QLe," (Transformer-XL model)"),QLe.forEach(t),uSo=i(j),Fb=n(j,"LI",{});var HLe=s(Fb);Xfe=n(HLe,"STRONG",{});var yit=s(Xfe);bSo=r(yit,"xlm"),yit.forEach(t),vSo=r(HLe," \u2014 "),wG=n(HLe,"A",{href:!0});var Lit=s(wG);FSo=r(Lit,"XLMForSequenceClassification"),Lit.forEach(t),TSo=r(HLe," (XLM model)"),HLe.forEach(t),MSo=i(j),Tb=n(j,"LI",{});var ULe=s(Tb);zfe=n(ULe,"STRONG",{});var xit=s(zfe);ESo=r(xit,"xlm-roberta"),xit.forEach(t),CSo=r(ULe," \u2014 "),AG=n(ULe,"A",{href:!0});var $it=s(AG);wSo=r($it,"XLMRobertaForSequenceClassification"),$it.forEach(t),ASo=r(ULe," (XLM-RoBERTa model)"),ULe.forEach(t),ySo=i(j),Mb=n(j,"LI",{});var JLe=s(Mb);Wfe=n(JLe,"STRONG",{});var kit=s(Wfe);LSo=r(kit,"xlm-roberta-xl"),kit.forEach(t),xSo=r(JLe," \u2014 "),yG=n(JLe,"A",{href:!0});var Sit=s(yG);$So=r(Sit,"XLMRobertaXLForSequenceClassification"),Sit.forEach(t),kSo=r(JLe," (XLM-RoBERTa-XL model)"),JLe.forEach(t),SSo=i(j),Eb=n(j,"LI",{});var YLe=s(Eb);Qfe=n(YLe,"STRONG",{});var Rit=s(Qfe);RSo=r(Rit,"xlnet"),Rit.forEach(t),PSo=r(YLe," \u2014 "),LG=n(YLe,"A",{href:!0});var Pit=s(LG);BSo=r(Pit,"XLNetForSequenceClassification"),Pit.forEach(t),ISo=r(YLe," (XLNet model)"),YLe.forEach(t),qSo=i(j),Cb=n(j,"LI",{});var KLe=s(Cb);Hfe=n(KLe,"STRONG",{});var Bit=s(Hfe);NSo=r(Bit,"yoso"),Bit.forEach(t),jSo=r(KLe," \u2014 "),xG=n(KLe,"A",{href:!0});var Iit=s(xG);DSo=r(Iit,"YosoForSequenceClassification"),Iit.forEach(t),GSo=r(KLe," (YOSO model)"),KLe.forEach(t),j.forEach(t),OSo=i(sa),wb=n(sa,"P",{});var ZLe=s(wb);VSo=r(ZLe,"The model is set in evaluation mode by default using "),Ufe=n(ZLe,"CODE",{});var qit=s(Ufe);XSo=r(qit,"model.eval()"),qit.forEach(t),zSo=r(ZLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=n(ZLe,"CODE",{});var Nit=s(Jfe);WSo=r(Nit,"model.train()"),Nit.forEach(t),ZLe.forEach(t),QSo=i(sa),T(Ab.$$.fragment,sa),sa.forEach(t),zs.forEach(t),Cqe=i(f),Oi=n(f,"H2",{class:!0});var Lje=s(Oi);yb=n(Lje,"A",{id:!0,class:!0,href:!0});var jit=s(yb);Yfe=n(jit,"SPAN",{});var Dit=s(Yfe);T(_6.$$.fragment,Dit),Dit.forEach(t),jit.forEach(t),HSo=i(Lje),Kfe=n(Lje,"SPAN",{});var Git=s(Kfe);USo=r(Git,"AutoModelForMultipleChoice"),Git.forEach(t),Lje.forEach(t),wqe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(u6.$$.fragment,Ws),JSo=i(Ws),Vi=n(Ws,"P",{});var ZK=s(Vi);YSo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$G=n(ZK,"A",{href:!0});var Oit=s($G);KSo=r(Oit,"from_pretrained()"),Oit.forEach(t),ZSo=r(ZK," class method or the "),kG=n(ZK,"A",{href:!0});var Vit=s(kG);eRo=r(Vit,"from_config()"),Vit.forEach(t),oRo=r(ZK,` class
method.`),ZK.forEach(t),rRo=i(Ws),b6=n(Ws,"P",{});var xje=s(b6);tRo=r(xje,"This class cannot be instantiated directly using "),Zfe=n(xje,"CODE",{});var Xit=s(Zfe);aRo=r(Xit,"__init__()"),Xit.forEach(t),nRo=r(xje," (throws an error)."),xje.forEach(t),sRo=i(Ws),dt=n(Ws,"DIV",{class:!0});var $w=s(dt);T(v6.$$.fragment,$w),lRo=i($w),eme=n($w,"P",{});var zit=s(eme);iRo=r(zit,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zit.forEach(t),dRo=i($w),Xi=n($w,"P",{});var eZ=s(Xi);cRo=r(eZ,`Note:
Loading a model from its configuration file does `),ome=n(eZ,"STRONG",{});var Wit=s(ome);fRo=r(Wit,"not"),Wit.forEach(t),mRo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(eZ,"A",{href:!0});var Qit=s(SG);gRo=r(Qit,"from_pretrained()"),Qit.forEach(t),hRo=r(eZ," to load the model weights."),eZ.forEach(t),pRo=i($w),T(Lb.$$.fragment,$w),$w.forEach(t),_Ro=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(F6.$$.fragment,la),uRo=i(la),rme=n(la,"P",{});var Hit=s(rme);bRo=r(Hit,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hit.forEach(t),vRo=i(la),Pa=n(la,"P",{});var kw=s(Pa);FRo=r(kw,"The model class to instantiate is selected based on the "),tme=n(kw,"CODE",{});var Uit=s(tme);TRo=r(Uit,"model_type"),Uit.forEach(t),MRo=r(kw,` property of the config object (either
passed as an argument or loaded from `),ame=n(kw,"CODE",{});var Jit=s(ame);ERo=r(Jit,"pretrained_model_name_or_path"),Jit.forEach(t),CRo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=n(kw,"CODE",{});var Yit=s(nme);wRo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),ARo=r(kw,":"),kw.forEach(t),yRo=i(la),Y=n(la,"UL",{});var K=s(Y);xb=n(K,"LI",{});var e9e=s(xb);sme=n(e9e,"STRONG",{});var Kit=s(sme);LRo=r(Kit,"albert"),Kit.forEach(t),xRo=r(e9e," \u2014 "),RG=n(e9e,"A",{href:!0});var Zit=s(RG);$Ro=r(Zit,"AlbertForMultipleChoice"),Zit.forEach(t),kRo=r(e9e," (ALBERT model)"),e9e.forEach(t),SRo=i(K),$b=n(K,"LI",{});var o9e=s($b);lme=n(o9e,"STRONG",{});var edt=s(lme);RRo=r(edt,"bert"),edt.forEach(t),PRo=r(o9e," \u2014 "),PG=n(o9e,"A",{href:!0});var odt=s(PG);BRo=r(odt,"BertForMultipleChoice"),odt.forEach(t),IRo=r(o9e," (BERT model)"),o9e.forEach(t),qRo=i(K),kb=n(K,"LI",{});var r9e=s(kb);ime=n(r9e,"STRONG",{});var rdt=s(ime);NRo=r(rdt,"big_bird"),rdt.forEach(t),jRo=r(r9e," \u2014 "),BG=n(r9e,"A",{href:!0});var tdt=s(BG);DRo=r(tdt,"BigBirdForMultipleChoice"),tdt.forEach(t),GRo=r(r9e," (BigBird model)"),r9e.forEach(t),ORo=i(K),Sb=n(K,"LI",{});var t9e=s(Sb);dme=n(t9e,"STRONG",{});var adt=s(dme);VRo=r(adt,"camembert"),adt.forEach(t),XRo=r(t9e," \u2014 "),IG=n(t9e,"A",{href:!0});var ndt=s(IG);zRo=r(ndt,"CamembertForMultipleChoice"),ndt.forEach(t),WRo=r(t9e," (CamemBERT model)"),t9e.forEach(t),QRo=i(K),Rb=n(K,"LI",{});var a9e=s(Rb);cme=n(a9e,"STRONG",{});var sdt=s(cme);HRo=r(sdt,"canine"),sdt.forEach(t),URo=r(a9e," \u2014 "),qG=n(a9e,"A",{href:!0});var ldt=s(qG);JRo=r(ldt,"CanineForMultipleChoice"),ldt.forEach(t),YRo=r(a9e," (Canine model)"),a9e.forEach(t),KRo=i(K),Pb=n(K,"LI",{});var n9e=s(Pb);fme=n(n9e,"STRONG",{});var idt=s(fme);ZRo=r(idt,"convbert"),idt.forEach(t),ePo=r(n9e," \u2014 "),NG=n(n9e,"A",{href:!0});var ddt=s(NG);oPo=r(ddt,"ConvBertForMultipleChoice"),ddt.forEach(t),rPo=r(n9e," (ConvBERT model)"),n9e.forEach(t),tPo=i(K),Bb=n(K,"LI",{});var s9e=s(Bb);mme=n(s9e,"STRONG",{});var cdt=s(mme);aPo=r(cdt,"data2vec-text"),cdt.forEach(t),nPo=r(s9e," \u2014 "),jG=n(s9e,"A",{href:!0});var fdt=s(jG);sPo=r(fdt,"Data2VecTextForMultipleChoice"),fdt.forEach(t),lPo=r(s9e," (Data2VecText model)"),s9e.forEach(t),iPo=i(K),Ib=n(K,"LI",{});var l9e=s(Ib);gme=n(l9e,"STRONG",{});var mdt=s(gme);dPo=r(mdt,"deberta-v2"),mdt.forEach(t),cPo=r(l9e," \u2014 "),DG=n(l9e,"A",{href:!0});var gdt=s(DG);fPo=r(gdt,"DebertaV2ForMultipleChoice"),gdt.forEach(t),mPo=r(l9e," (DeBERTa-v2 model)"),l9e.forEach(t),gPo=i(K),qb=n(K,"LI",{});var i9e=s(qb);hme=n(i9e,"STRONG",{});var hdt=s(hme);hPo=r(hdt,"distilbert"),hdt.forEach(t),pPo=r(i9e," \u2014 "),GG=n(i9e,"A",{href:!0});var pdt=s(GG);_Po=r(pdt,"DistilBertForMultipleChoice"),pdt.forEach(t),uPo=r(i9e," (DistilBERT model)"),i9e.forEach(t),bPo=i(K),Nb=n(K,"LI",{});var d9e=s(Nb);pme=n(d9e,"STRONG",{});var _dt=s(pme);vPo=r(_dt,"electra"),_dt.forEach(t),FPo=r(d9e," \u2014 "),OG=n(d9e,"A",{href:!0});var udt=s(OG);TPo=r(udt,"ElectraForMultipleChoice"),udt.forEach(t),MPo=r(d9e," (ELECTRA model)"),d9e.forEach(t),EPo=i(K),jb=n(K,"LI",{});var c9e=s(jb);_me=n(c9e,"STRONG",{});var bdt=s(_me);CPo=r(bdt,"flaubert"),bdt.forEach(t),wPo=r(c9e," \u2014 "),VG=n(c9e,"A",{href:!0});var vdt=s(VG);APo=r(vdt,"FlaubertForMultipleChoice"),vdt.forEach(t),yPo=r(c9e," (FlauBERT model)"),c9e.forEach(t),LPo=i(K),Db=n(K,"LI",{});var f9e=s(Db);ume=n(f9e,"STRONG",{});var Fdt=s(ume);xPo=r(Fdt,"fnet"),Fdt.forEach(t),$Po=r(f9e," \u2014 "),XG=n(f9e,"A",{href:!0});var Tdt=s(XG);kPo=r(Tdt,"FNetForMultipleChoice"),Tdt.forEach(t),SPo=r(f9e," (FNet model)"),f9e.forEach(t),RPo=i(K),Gb=n(K,"LI",{});var m9e=s(Gb);bme=n(m9e,"STRONG",{});var Mdt=s(bme);PPo=r(Mdt,"funnel"),Mdt.forEach(t),BPo=r(m9e," \u2014 "),zG=n(m9e,"A",{href:!0});var Edt=s(zG);IPo=r(Edt,"FunnelForMultipleChoice"),Edt.forEach(t),qPo=r(m9e," (Funnel Transformer model)"),m9e.forEach(t),NPo=i(K),Ob=n(K,"LI",{});var g9e=s(Ob);vme=n(g9e,"STRONG",{});var Cdt=s(vme);jPo=r(Cdt,"ibert"),Cdt.forEach(t),DPo=r(g9e," \u2014 "),WG=n(g9e,"A",{href:!0});var wdt=s(WG);GPo=r(wdt,"IBertForMultipleChoice"),wdt.forEach(t),OPo=r(g9e," (I-BERT model)"),g9e.forEach(t),VPo=i(K),Vb=n(K,"LI",{});var h9e=s(Vb);Fme=n(h9e,"STRONG",{});var Adt=s(Fme);XPo=r(Adt,"longformer"),Adt.forEach(t),zPo=r(h9e," \u2014 "),QG=n(h9e,"A",{href:!0});var ydt=s(QG);WPo=r(ydt,"LongformerForMultipleChoice"),ydt.forEach(t),QPo=r(h9e," (Longformer model)"),h9e.forEach(t),HPo=i(K),Xb=n(K,"LI",{});var p9e=s(Xb);Tme=n(p9e,"STRONG",{});var Ldt=s(Tme);UPo=r(Ldt,"megatron-bert"),Ldt.forEach(t),JPo=r(p9e," \u2014 "),HG=n(p9e,"A",{href:!0});var xdt=s(HG);YPo=r(xdt,"MegatronBertForMultipleChoice"),xdt.forEach(t),KPo=r(p9e," (MegatronBert model)"),p9e.forEach(t),ZPo=i(K),zb=n(K,"LI",{});var _9e=s(zb);Mme=n(_9e,"STRONG",{});var $dt=s(Mme);eBo=r($dt,"mobilebert"),$dt.forEach(t),oBo=r(_9e," \u2014 "),UG=n(_9e,"A",{href:!0});var kdt=s(UG);rBo=r(kdt,"MobileBertForMultipleChoice"),kdt.forEach(t),tBo=r(_9e," (MobileBERT model)"),_9e.forEach(t),aBo=i(K),Wb=n(K,"LI",{});var u9e=s(Wb);Eme=n(u9e,"STRONG",{});var Sdt=s(Eme);nBo=r(Sdt,"mpnet"),Sdt.forEach(t),sBo=r(u9e," \u2014 "),JG=n(u9e,"A",{href:!0});var Rdt=s(JG);lBo=r(Rdt,"MPNetForMultipleChoice"),Rdt.forEach(t),iBo=r(u9e," (MPNet model)"),u9e.forEach(t),dBo=i(K),Qb=n(K,"LI",{});var b9e=s(Qb);Cme=n(b9e,"STRONG",{});var Pdt=s(Cme);cBo=r(Pdt,"nystromformer"),Pdt.forEach(t),fBo=r(b9e," \u2014 "),YG=n(b9e,"A",{href:!0});var Bdt=s(YG);mBo=r(Bdt,"NystromformerForMultipleChoice"),Bdt.forEach(t),gBo=r(b9e," (Nystromformer model)"),b9e.forEach(t),hBo=i(K),Hb=n(K,"LI",{});var v9e=s(Hb);wme=n(v9e,"STRONG",{});var Idt=s(wme);pBo=r(Idt,"qdqbert"),Idt.forEach(t),_Bo=r(v9e," \u2014 "),KG=n(v9e,"A",{href:!0});var qdt=s(KG);uBo=r(qdt,"QDQBertForMultipleChoice"),qdt.forEach(t),bBo=r(v9e," (QDQBert model)"),v9e.forEach(t),vBo=i(K),Ub=n(K,"LI",{});var F9e=s(Ub);Ame=n(F9e,"STRONG",{});var Ndt=s(Ame);FBo=r(Ndt,"rembert"),Ndt.forEach(t),TBo=r(F9e," \u2014 "),ZG=n(F9e,"A",{href:!0});var jdt=s(ZG);MBo=r(jdt,"RemBertForMultipleChoice"),jdt.forEach(t),EBo=r(F9e," (RemBERT model)"),F9e.forEach(t),CBo=i(K),Jb=n(K,"LI",{});var T9e=s(Jb);yme=n(T9e,"STRONG",{});var Ddt=s(yme);wBo=r(Ddt,"roberta"),Ddt.forEach(t),ABo=r(T9e," \u2014 "),eO=n(T9e,"A",{href:!0});var Gdt=s(eO);yBo=r(Gdt,"RobertaForMultipleChoice"),Gdt.forEach(t),LBo=r(T9e," (RoBERTa model)"),T9e.forEach(t),xBo=i(K),Yb=n(K,"LI",{});var M9e=s(Yb);Lme=n(M9e,"STRONG",{});var Odt=s(Lme);$Bo=r(Odt,"roformer"),Odt.forEach(t),kBo=r(M9e," \u2014 "),oO=n(M9e,"A",{href:!0});var Vdt=s(oO);SBo=r(Vdt,"RoFormerForMultipleChoice"),Vdt.forEach(t),RBo=r(M9e," (RoFormer model)"),M9e.forEach(t),PBo=i(K),Kb=n(K,"LI",{});var E9e=s(Kb);xme=n(E9e,"STRONG",{});var Xdt=s(xme);BBo=r(Xdt,"squeezebert"),Xdt.forEach(t),IBo=r(E9e," \u2014 "),rO=n(E9e,"A",{href:!0});var zdt=s(rO);qBo=r(zdt,"SqueezeBertForMultipleChoice"),zdt.forEach(t),NBo=r(E9e," (SqueezeBERT model)"),E9e.forEach(t),jBo=i(K),Zb=n(K,"LI",{});var C9e=s(Zb);$me=n(C9e,"STRONG",{});var Wdt=s($me);DBo=r(Wdt,"xlm"),Wdt.forEach(t),GBo=r(C9e," \u2014 "),tO=n(C9e,"A",{href:!0});var Qdt=s(tO);OBo=r(Qdt,"XLMForMultipleChoice"),Qdt.forEach(t),VBo=r(C9e," (XLM model)"),C9e.forEach(t),XBo=i(K),e2=n(K,"LI",{});var w9e=s(e2);kme=n(w9e,"STRONG",{});var Hdt=s(kme);zBo=r(Hdt,"xlm-roberta"),Hdt.forEach(t),WBo=r(w9e," \u2014 "),aO=n(w9e,"A",{href:!0});var Udt=s(aO);QBo=r(Udt,"XLMRobertaForMultipleChoice"),Udt.forEach(t),HBo=r(w9e," (XLM-RoBERTa model)"),w9e.forEach(t),UBo=i(K),o2=n(K,"LI",{});var A9e=s(o2);Sme=n(A9e,"STRONG",{});var Jdt=s(Sme);JBo=r(Jdt,"xlm-roberta-xl"),Jdt.forEach(t),YBo=r(A9e," \u2014 "),nO=n(A9e,"A",{href:!0});var Ydt=s(nO);KBo=r(Ydt,"XLMRobertaXLForMultipleChoice"),Ydt.forEach(t),ZBo=r(A9e," (XLM-RoBERTa-XL model)"),A9e.forEach(t),eIo=i(K),r2=n(K,"LI",{});var y9e=s(r2);Rme=n(y9e,"STRONG",{});var Kdt=s(Rme);oIo=r(Kdt,"xlnet"),Kdt.forEach(t),rIo=r(y9e," \u2014 "),sO=n(y9e,"A",{href:!0});var Zdt=s(sO);tIo=r(Zdt,"XLNetForMultipleChoice"),Zdt.forEach(t),aIo=r(y9e," (XLNet model)"),y9e.forEach(t),nIo=i(K),t2=n(K,"LI",{});var L9e=s(t2);Pme=n(L9e,"STRONG",{});var ect=s(Pme);sIo=r(ect,"yoso"),ect.forEach(t),lIo=r(L9e," \u2014 "),lO=n(L9e,"A",{href:!0});var oct=s(lO);iIo=r(oct,"YosoForMultipleChoice"),oct.forEach(t),dIo=r(L9e," (YOSO model)"),L9e.forEach(t),K.forEach(t),cIo=i(la),a2=n(la,"P",{});var x9e=s(a2);fIo=r(x9e,"The model is set in evaluation mode by default using "),Bme=n(x9e,"CODE",{});var rct=s(Bme);mIo=r(rct,"model.eval()"),rct.forEach(t),gIo=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ime=n(x9e,"CODE",{});var tct=s(Ime);hIo=r(tct,"model.train()"),tct.forEach(t),x9e.forEach(t),pIo=i(la),T(n2.$$.fragment,la),la.forEach(t),Ws.forEach(t),Aqe=i(f),zi=n(f,"H2",{class:!0});var $je=s(zi);s2=n($je,"A",{id:!0,class:!0,href:!0});var act=s(s2);qme=n(act,"SPAN",{});var nct=s(qme);T(T6.$$.fragment,nct),nct.forEach(t),act.forEach(t),_Io=i($je),Nme=n($je,"SPAN",{});var sct=s(Nme);uIo=r(sct,"AutoModelForNextSentencePrediction"),sct.forEach(t),$je.forEach(t),yqe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(M6.$$.fragment,Qs),bIo=i(Qs),Wi=n(Qs,"P",{});var oZ=s(Wi);vIo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iO=n(oZ,"A",{href:!0});var lct=s(iO);FIo=r(lct,"from_pretrained()"),lct.forEach(t),TIo=r(oZ," class method or the "),dO=n(oZ,"A",{href:!0});var ict=s(dO);MIo=r(ict,"from_config()"),ict.forEach(t),EIo=r(oZ,` class
method.`),oZ.forEach(t),CIo=i(Qs),E6=n(Qs,"P",{});var kje=s(E6);wIo=r(kje,"This class cannot be instantiated directly using "),jme=n(kje,"CODE",{});var dct=s(jme);AIo=r(dct,"__init__()"),dct.forEach(t),yIo=r(kje," (throws an error)."),kje.forEach(t),LIo=i(Qs),ct=n(Qs,"DIV",{class:!0});var Sw=s(ct);T(C6.$$.fragment,Sw),xIo=i(Sw),Dme=n(Sw,"P",{});var cct=s(Dme);$Io=r(cct,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cct.forEach(t),kIo=i(Sw),Qi=n(Sw,"P",{});var rZ=s(Qi);SIo=r(rZ,`Note:
Loading a model from its configuration file does `),Gme=n(rZ,"STRONG",{});var fct=s(Gme);RIo=r(fct,"not"),fct.forEach(t),PIo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(rZ,"A",{href:!0});var mct=s(cO);BIo=r(mct,"from_pretrained()"),mct.forEach(t),IIo=r(rZ," to load the model weights."),rZ.forEach(t),qIo=i(Sw),T(l2.$$.fragment,Sw),Sw.forEach(t),NIo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(w6.$$.fragment,ia),jIo=i(ia),Ome=n(ia,"P",{});var gct=s(Ome);DIo=r(gct,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gct.forEach(t),GIo=i(ia),Ba=n(ia,"P",{});var Rw=s(Ba);OIo=r(Rw,"The model class to instantiate is selected based on the "),Vme=n(Rw,"CODE",{});var hct=s(Vme);VIo=r(hct,"model_type"),hct.forEach(t),XIo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Xme=n(Rw,"CODE",{});var pct=s(Xme);zIo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),WIo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(Rw,"CODE",{});var _ct=s(zme);QIo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),HIo=r(Rw,":"),Rw.forEach(t),UIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);i2=n(Hs,"LI",{});var $9e=s(i2);Wme=n($9e,"STRONG",{});var uct=s(Wme);JIo=r(uct,"bert"),uct.forEach(t),YIo=r($9e," \u2014 "),fO=n($9e,"A",{href:!0});var bct=s(fO);KIo=r(bct,"BertForNextSentencePrediction"),bct.forEach(t),ZIo=r($9e," (BERT model)"),$9e.forEach(t),eqo=i(Hs),d2=n(Hs,"LI",{});var k9e=s(d2);Qme=n(k9e,"STRONG",{});var vct=s(Qme);oqo=r(vct,"fnet"),vct.forEach(t),rqo=r(k9e," \u2014 "),mO=n(k9e,"A",{href:!0});var Fct=s(mO);tqo=r(Fct,"FNetForNextSentencePrediction"),Fct.forEach(t),aqo=r(k9e," (FNet model)"),k9e.forEach(t),nqo=i(Hs),c2=n(Hs,"LI",{});var S9e=s(c2);Hme=n(S9e,"STRONG",{});var Tct=s(Hme);sqo=r(Tct,"megatron-bert"),Tct.forEach(t),lqo=r(S9e," \u2014 "),gO=n(S9e,"A",{href:!0});var Mct=s(gO);iqo=r(Mct,"MegatronBertForNextSentencePrediction"),Mct.forEach(t),dqo=r(S9e," (MegatronBert model)"),S9e.forEach(t),cqo=i(Hs),f2=n(Hs,"LI",{});var R9e=s(f2);Ume=n(R9e,"STRONG",{});var Ect=s(Ume);fqo=r(Ect,"mobilebert"),Ect.forEach(t),mqo=r(R9e," \u2014 "),hO=n(R9e,"A",{href:!0});var Cct=s(hO);gqo=r(Cct,"MobileBertForNextSentencePrediction"),Cct.forEach(t),hqo=r(R9e," (MobileBERT model)"),R9e.forEach(t),pqo=i(Hs),m2=n(Hs,"LI",{});var P9e=s(m2);Jme=n(P9e,"STRONG",{});var wct=s(Jme);_qo=r(wct,"qdqbert"),wct.forEach(t),uqo=r(P9e," \u2014 "),pO=n(P9e,"A",{href:!0});var Act=s(pO);bqo=r(Act,"QDQBertForNextSentencePrediction"),Act.forEach(t),vqo=r(P9e," (QDQBert model)"),P9e.forEach(t),Hs.forEach(t),Fqo=i(ia),g2=n(ia,"P",{});var B9e=s(g2);Tqo=r(B9e,"The model is set in evaluation mode by default using "),Yme=n(B9e,"CODE",{});var yct=s(Yme);Mqo=r(yct,"model.eval()"),yct.forEach(t),Eqo=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kme=n(B9e,"CODE",{});var Lct=s(Kme);Cqo=r(Lct,"model.train()"),Lct.forEach(t),B9e.forEach(t),wqo=i(ia),T(h2.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Lqe=i(f),Hi=n(f,"H2",{class:!0});var Sje=s(Hi);p2=n(Sje,"A",{id:!0,class:!0,href:!0});var xct=s(p2);Zme=n(xct,"SPAN",{});var $ct=s(Zme);T(A6.$$.fragment,$ct),$ct.forEach(t),xct.forEach(t),Aqo=i(Sje),ege=n(Sje,"SPAN",{});var kct=s(ege);yqo=r(kct,"AutoModelForTokenClassification"),kct.forEach(t),Sje.forEach(t),xqe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(y6.$$.fragment,Us),Lqo=i(Us),Ui=n(Us,"P",{});var tZ=s(Ui);xqo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_O=n(tZ,"A",{href:!0});var Sct=s(_O);$qo=r(Sct,"from_pretrained()"),Sct.forEach(t),kqo=r(tZ," class method or the "),uO=n(tZ,"A",{href:!0});var Rct=s(uO);Sqo=r(Rct,"from_config()"),Rct.forEach(t),Rqo=r(tZ,` class
method.`),tZ.forEach(t),Pqo=i(Us),L6=n(Us,"P",{});var Rje=s(L6);Bqo=r(Rje,"This class cannot be instantiated directly using "),oge=n(Rje,"CODE",{});var Pct=s(oge);Iqo=r(Pct,"__init__()"),Pct.forEach(t),qqo=r(Rje," (throws an error)."),Rje.forEach(t),Nqo=i(Us),ft=n(Us,"DIV",{class:!0});var Pw=s(ft);T(x6.$$.fragment,Pw),jqo=i(Pw),rge=n(Pw,"P",{});var Bct=s(rge);Dqo=r(Bct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bct.forEach(t),Gqo=i(Pw),Ji=n(Pw,"P",{});var aZ=s(Ji);Oqo=r(aZ,`Note:
Loading a model from its configuration file does `),tge=n(aZ,"STRONG",{});var Ict=s(tge);Vqo=r(Ict,"not"),Ict.forEach(t),Xqo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(aZ,"A",{href:!0});var qct=s(bO);zqo=r(qct,"from_pretrained()"),qct.forEach(t),Wqo=r(aZ," to load the model weights."),aZ.forEach(t),Qqo=i(Pw),T(_2.$$.fragment,Pw),Pw.forEach(t),Hqo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T($6.$$.fragment,da),Uqo=i(da),age=n(da,"P",{});var Nct=s(age);Jqo=r(Nct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nct.forEach(t),Yqo=i(da),Ia=n(da,"P",{});var Bw=s(Ia);Kqo=r(Bw,"The model class to instantiate is selected based on the "),nge=n(Bw,"CODE",{});var jct=s(nge);Zqo=r(jct,"model_type"),jct.forEach(t),eNo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),sge=n(Bw,"CODE",{});var Dct=s(sge);oNo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),rNo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lge=n(Bw,"CODE",{});var Gct=s(lge);tNo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),aNo=r(Bw,":"),Bw.forEach(t),nNo=i(da),U=n(da,"UL",{});var J=s(U);u2=n(J,"LI",{});var I9e=s(u2);ige=n(I9e,"STRONG",{});var Oct=s(ige);sNo=r(Oct,"albert"),Oct.forEach(t),lNo=r(I9e," \u2014 "),vO=n(I9e,"A",{href:!0});var Vct=s(vO);iNo=r(Vct,"AlbertForTokenClassification"),Vct.forEach(t),dNo=r(I9e," (ALBERT model)"),I9e.forEach(t),cNo=i(J),b2=n(J,"LI",{});var q9e=s(b2);dge=n(q9e,"STRONG",{});var Xct=s(dge);fNo=r(Xct,"bert"),Xct.forEach(t),mNo=r(q9e," \u2014 "),FO=n(q9e,"A",{href:!0});var zct=s(FO);gNo=r(zct,"BertForTokenClassification"),zct.forEach(t),hNo=r(q9e," (BERT model)"),q9e.forEach(t),pNo=i(J),v2=n(J,"LI",{});var N9e=s(v2);cge=n(N9e,"STRONG",{});var Wct=s(cge);_No=r(Wct,"big_bird"),Wct.forEach(t),uNo=r(N9e," \u2014 "),TO=n(N9e,"A",{href:!0});var Qct=s(TO);bNo=r(Qct,"BigBirdForTokenClassification"),Qct.forEach(t),vNo=r(N9e," (BigBird model)"),N9e.forEach(t),FNo=i(J),F2=n(J,"LI",{});var j9e=s(F2);fge=n(j9e,"STRONG",{});var Hct=s(fge);TNo=r(Hct,"camembert"),Hct.forEach(t),MNo=r(j9e," \u2014 "),MO=n(j9e,"A",{href:!0});var Uct=s(MO);ENo=r(Uct,"CamembertForTokenClassification"),Uct.forEach(t),CNo=r(j9e," (CamemBERT model)"),j9e.forEach(t),wNo=i(J),T2=n(J,"LI",{});var D9e=s(T2);mge=n(D9e,"STRONG",{});var Jct=s(mge);ANo=r(Jct,"canine"),Jct.forEach(t),yNo=r(D9e," \u2014 "),EO=n(D9e,"A",{href:!0});var Yct=s(EO);LNo=r(Yct,"CanineForTokenClassification"),Yct.forEach(t),xNo=r(D9e," (Canine model)"),D9e.forEach(t),$No=i(J),M2=n(J,"LI",{});var G9e=s(M2);gge=n(G9e,"STRONG",{});var Kct=s(gge);kNo=r(Kct,"convbert"),Kct.forEach(t),SNo=r(G9e," \u2014 "),CO=n(G9e,"A",{href:!0});var Zct=s(CO);RNo=r(Zct,"ConvBertForTokenClassification"),Zct.forEach(t),PNo=r(G9e," (ConvBERT model)"),G9e.forEach(t),BNo=i(J),E2=n(J,"LI",{});var O9e=s(E2);hge=n(O9e,"STRONG",{});var eft=s(hge);INo=r(eft,"data2vec-text"),eft.forEach(t),qNo=r(O9e," \u2014 "),wO=n(O9e,"A",{href:!0});var oft=s(wO);NNo=r(oft,"Data2VecTextForTokenClassification"),oft.forEach(t),jNo=r(O9e," (Data2VecText model)"),O9e.forEach(t),DNo=i(J),C2=n(J,"LI",{});var V9e=s(C2);pge=n(V9e,"STRONG",{});var rft=s(pge);GNo=r(rft,"deberta"),rft.forEach(t),ONo=r(V9e," \u2014 "),AO=n(V9e,"A",{href:!0});var tft=s(AO);VNo=r(tft,"DebertaForTokenClassification"),tft.forEach(t),XNo=r(V9e," (DeBERTa model)"),V9e.forEach(t),zNo=i(J),w2=n(J,"LI",{});var X9e=s(w2);_ge=n(X9e,"STRONG",{});var aft=s(_ge);WNo=r(aft,"deberta-v2"),aft.forEach(t),QNo=r(X9e," \u2014 "),yO=n(X9e,"A",{href:!0});var nft=s(yO);HNo=r(nft,"DebertaV2ForTokenClassification"),nft.forEach(t),UNo=r(X9e," (DeBERTa-v2 model)"),X9e.forEach(t),JNo=i(J),A2=n(J,"LI",{});var z9e=s(A2);uge=n(z9e,"STRONG",{});var sft=s(uge);YNo=r(sft,"distilbert"),sft.forEach(t),KNo=r(z9e," \u2014 "),LO=n(z9e,"A",{href:!0});var lft=s(LO);ZNo=r(lft,"DistilBertForTokenClassification"),lft.forEach(t),ejo=r(z9e," (DistilBERT model)"),z9e.forEach(t),ojo=i(J),y2=n(J,"LI",{});var W9e=s(y2);bge=n(W9e,"STRONG",{});var ift=s(bge);rjo=r(ift,"electra"),ift.forEach(t),tjo=r(W9e," \u2014 "),xO=n(W9e,"A",{href:!0});var dft=s(xO);ajo=r(dft,"ElectraForTokenClassification"),dft.forEach(t),njo=r(W9e," (ELECTRA model)"),W9e.forEach(t),sjo=i(J),L2=n(J,"LI",{});var Q9e=s(L2);vge=n(Q9e,"STRONG",{});var cft=s(vge);ljo=r(cft,"flaubert"),cft.forEach(t),ijo=r(Q9e," \u2014 "),$O=n(Q9e,"A",{href:!0});var fft=s($O);djo=r(fft,"FlaubertForTokenClassification"),fft.forEach(t),cjo=r(Q9e," (FlauBERT model)"),Q9e.forEach(t),fjo=i(J),x2=n(J,"LI",{});var H9e=s(x2);Fge=n(H9e,"STRONG",{});var mft=s(Fge);mjo=r(mft,"fnet"),mft.forEach(t),gjo=r(H9e," \u2014 "),kO=n(H9e,"A",{href:!0});var gft=s(kO);hjo=r(gft,"FNetForTokenClassification"),gft.forEach(t),pjo=r(H9e," (FNet model)"),H9e.forEach(t),_jo=i(J),$2=n(J,"LI",{});var U9e=s($2);Tge=n(U9e,"STRONG",{});var hft=s(Tge);ujo=r(hft,"funnel"),hft.forEach(t),bjo=r(U9e," \u2014 "),SO=n(U9e,"A",{href:!0});var pft=s(SO);vjo=r(pft,"FunnelForTokenClassification"),pft.forEach(t),Fjo=r(U9e," (Funnel Transformer model)"),U9e.forEach(t),Tjo=i(J),k2=n(J,"LI",{});var J9e=s(k2);Mge=n(J9e,"STRONG",{});var _ft=s(Mge);Mjo=r(_ft,"gpt2"),_ft.forEach(t),Ejo=r(J9e," \u2014 "),RO=n(J9e,"A",{href:!0});var uft=s(RO);Cjo=r(uft,"GPT2ForTokenClassification"),uft.forEach(t),wjo=r(J9e," (OpenAI GPT-2 model)"),J9e.forEach(t),Ajo=i(J),S2=n(J,"LI",{});var Y9e=s(S2);Ege=n(Y9e,"STRONG",{});var bft=s(Ege);yjo=r(bft,"ibert"),bft.forEach(t),Ljo=r(Y9e," \u2014 "),PO=n(Y9e,"A",{href:!0});var vft=s(PO);xjo=r(vft,"IBertForTokenClassification"),vft.forEach(t),$jo=r(Y9e," (I-BERT model)"),Y9e.forEach(t),kjo=i(J),R2=n(J,"LI",{});var K9e=s(R2);Cge=n(K9e,"STRONG",{});var Fft=s(Cge);Sjo=r(Fft,"layoutlm"),Fft.forEach(t),Rjo=r(K9e," \u2014 "),BO=n(K9e,"A",{href:!0});var Tft=s(BO);Pjo=r(Tft,"LayoutLMForTokenClassification"),Tft.forEach(t),Bjo=r(K9e," (LayoutLM model)"),K9e.forEach(t),Ijo=i(J),P2=n(J,"LI",{});var Z9e=s(P2);wge=n(Z9e,"STRONG",{});var Mft=s(wge);qjo=r(Mft,"layoutlmv2"),Mft.forEach(t),Njo=r(Z9e," \u2014 "),IO=n(Z9e,"A",{href:!0});var Eft=s(IO);jjo=r(Eft,"LayoutLMv2ForTokenClassification"),Eft.forEach(t),Djo=r(Z9e," (LayoutLMv2 model)"),Z9e.forEach(t),Gjo=i(J),B2=n(J,"LI",{});var exe=s(B2);Age=n(exe,"STRONG",{});var Cft=s(Age);Ojo=r(Cft,"longformer"),Cft.forEach(t),Vjo=r(exe," \u2014 "),qO=n(exe,"A",{href:!0});var wft=s(qO);Xjo=r(wft,"LongformerForTokenClassification"),wft.forEach(t),zjo=r(exe," (Longformer model)"),exe.forEach(t),Wjo=i(J),I2=n(J,"LI",{});var oxe=s(I2);yge=n(oxe,"STRONG",{});var Aft=s(yge);Qjo=r(Aft,"megatron-bert"),Aft.forEach(t),Hjo=r(oxe," \u2014 "),NO=n(oxe,"A",{href:!0});var yft=s(NO);Ujo=r(yft,"MegatronBertForTokenClassification"),yft.forEach(t),Jjo=r(oxe," (MegatronBert model)"),oxe.forEach(t),Yjo=i(J),q2=n(J,"LI",{});var rxe=s(q2);Lge=n(rxe,"STRONG",{});var Lft=s(Lge);Kjo=r(Lft,"mobilebert"),Lft.forEach(t),Zjo=r(rxe," \u2014 "),jO=n(rxe,"A",{href:!0});var xft=s(jO);eDo=r(xft,"MobileBertForTokenClassification"),xft.forEach(t),oDo=r(rxe," (MobileBERT model)"),rxe.forEach(t),rDo=i(J),N2=n(J,"LI",{});var txe=s(N2);xge=n(txe,"STRONG",{});var $ft=s(xge);tDo=r($ft,"mpnet"),$ft.forEach(t),aDo=r(txe," \u2014 "),DO=n(txe,"A",{href:!0});var kft=s(DO);nDo=r(kft,"MPNetForTokenClassification"),kft.forEach(t),sDo=r(txe," (MPNet model)"),txe.forEach(t),lDo=i(J),j2=n(J,"LI",{});var axe=s(j2);$ge=n(axe,"STRONG",{});var Sft=s($ge);iDo=r(Sft,"nystromformer"),Sft.forEach(t),dDo=r(axe," \u2014 "),GO=n(axe,"A",{href:!0});var Rft=s(GO);cDo=r(Rft,"NystromformerForTokenClassification"),Rft.forEach(t),fDo=r(axe," (Nystromformer model)"),axe.forEach(t),mDo=i(J),D2=n(J,"LI",{});var nxe=s(D2);kge=n(nxe,"STRONG",{});var Pft=s(kge);gDo=r(Pft,"qdqbert"),Pft.forEach(t),hDo=r(nxe," \u2014 "),OO=n(nxe,"A",{href:!0});var Bft=s(OO);pDo=r(Bft,"QDQBertForTokenClassification"),Bft.forEach(t),_Do=r(nxe," (QDQBert model)"),nxe.forEach(t),uDo=i(J),G2=n(J,"LI",{});var sxe=s(G2);Sge=n(sxe,"STRONG",{});var Ift=s(Sge);bDo=r(Ift,"rembert"),Ift.forEach(t),vDo=r(sxe," \u2014 "),VO=n(sxe,"A",{href:!0});var qft=s(VO);FDo=r(qft,"RemBertForTokenClassification"),qft.forEach(t),TDo=r(sxe," (RemBERT model)"),sxe.forEach(t),MDo=i(J),O2=n(J,"LI",{});var lxe=s(O2);Rge=n(lxe,"STRONG",{});var Nft=s(Rge);EDo=r(Nft,"roberta"),Nft.forEach(t),CDo=r(lxe," \u2014 "),XO=n(lxe,"A",{href:!0});var jft=s(XO);wDo=r(jft,"RobertaForTokenClassification"),jft.forEach(t),ADo=r(lxe," (RoBERTa model)"),lxe.forEach(t),yDo=i(J),V2=n(J,"LI",{});var ixe=s(V2);Pge=n(ixe,"STRONG",{});var Dft=s(Pge);LDo=r(Dft,"roformer"),Dft.forEach(t),xDo=r(ixe," \u2014 "),zO=n(ixe,"A",{href:!0});var Gft=s(zO);$Do=r(Gft,"RoFormerForTokenClassification"),Gft.forEach(t),kDo=r(ixe," (RoFormer model)"),ixe.forEach(t),SDo=i(J),X2=n(J,"LI",{});var dxe=s(X2);Bge=n(dxe,"STRONG",{});var Oft=s(Bge);RDo=r(Oft,"squeezebert"),Oft.forEach(t),PDo=r(dxe," \u2014 "),WO=n(dxe,"A",{href:!0});var Vft=s(WO);BDo=r(Vft,"SqueezeBertForTokenClassification"),Vft.forEach(t),IDo=r(dxe," (SqueezeBERT model)"),dxe.forEach(t),qDo=i(J),z2=n(J,"LI",{});var cxe=s(z2);Ige=n(cxe,"STRONG",{});var Xft=s(Ige);NDo=r(Xft,"xlm"),Xft.forEach(t),jDo=r(cxe," \u2014 "),QO=n(cxe,"A",{href:!0});var zft=s(QO);DDo=r(zft,"XLMForTokenClassification"),zft.forEach(t),GDo=r(cxe," (XLM model)"),cxe.forEach(t),ODo=i(J),W2=n(J,"LI",{});var fxe=s(W2);qge=n(fxe,"STRONG",{});var Wft=s(qge);VDo=r(Wft,"xlm-roberta"),Wft.forEach(t),XDo=r(fxe," \u2014 "),HO=n(fxe,"A",{href:!0});var Qft=s(HO);zDo=r(Qft,"XLMRobertaForTokenClassification"),Qft.forEach(t),WDo=r(fxe," (XLM-RoBERTa model)"),fxe.forEach(t),QDo=i(J),Q2=n(J,"LI",{});var mxe=s(Q2);Nge=n(mxe,"STRONG",{});var Hft=s(Nge);HDo=r(Hft,"xlm-roberta-xl"),Hft.forEach(t),UDo=r(mxe," \u2014 "),UO=n(mxe,"A",{href:!0});var Uft=s(UO);JDo=r(Uft,"XLMRobertaXLForTokenClassification"),Uft.forEach(t),YDo=r(mxe," (XLM-RoBERTa-XL model)"),mxe.forEach(t),KDo=i(J),H2=n(J,"LI",{});var gxe=s(H2);jge=n(gxe,"STRONG",{});var Jft=s(jge);ZDo=r(Jft,"xlnet"),Jft.forEach(t),eGo=r(gxe," \u2014 "),JO=n(gxe,"A",{href:!0});var Yft=s(JO);oGo=r(Yft,"XLNetForTokenClassification"),Yft.forEach(t),rGo=r(gxe," (XLNet model)"),gxe.forEach(t),tGo=i(J),U2=n(J,"LI",{});var hxe=s(U2);Dge=n(hxe,"STRONG",{});var Kft=s(Dge);aGo=r(Kft,"yoso"),Kft.forEach(t),nGo=r(hxe," \u2014 "),YO=n(hxe,"A",{href:!0});var Zft=s(YO);sGo=r(Zft,"YosoForTokenClassification"),Zft.forEach(t),lGo=r(hxe," (YOSO model)"),hxe.forEach(t),J.forEach(t),iGo=i(da),J2=n(da,"P",{});var pxe=s(J2);dGo=r(pxe,"The model is set in evaluation mode by default using "),Gge=n(pxe,"CODE",{});var emt=s(Gge);cGo=r(emt,"model.eval()"),emt.forEach(t),fGo=r(pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(pxe,"CODE",{});var omt=s(Oge);mGo=r(omt,"model.train()"),omt.forEach(t),pxe.forEach(t),gGo=i(da),T(Y2.$$.fragment,da),da.forEach(t),Us.forEach(t),$qe=i(f),Yi=n(f,"H2",{class:!0});var Pje=s(Yi);K2=n(Pje,"A",{id:!0,class:!0,href:!0});var rmt=s(K2);Vge=n(rmt,"SPAN",{});var tmt=s(Vge);T(k6.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),hGo=i(Pje),Xge=n(Pje,"SPAN",{});var amt=s(Xge);pGo=r(amt,"AutoModelForQuestionAnswering"),amt.forEach(t),Pje.forEach(t),kqe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(S6.$$.fragment,Js),_Go=i(Js),Ki=n(Js,"P",{});var nZ=s(Ki);uGo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KO=n(nZ,"A",{href:!0});var nmt=s(KO);bGo=r(nmt,"from_pretrained()"),nmt.forEach(t),vGo=r(nZ," class method or the "),ZO=n(nZ,"A",{href:!0});var smt=s(ZO);FGo=r(smt,"from_config()"),smt.forEach(t),TGo=r(nZ,` class
method.`),nZ.forEach(t),MGo=i(Js),R6=n(Js,"P",{});var Bje=s(R6);EGo=r(Bje,"This class cannot be instantiated directly using "),zge=n(Bje,"CODE",{});var lmt=s(zge);CGo=r(lmt,"__init__()"),lmt.forEach(t),wGo=r(Bje," (throws an error)."),Bje.forEach(t),AGo=i(Js),mt=n(Js,"DIV",{class:!0});var Iw=s(mt);T(P6.$$.fragment,Iw),yGo=i(Iw),Wge=n(Iw,"P",{});var imt=s(Wge);LGo=r(imt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),imt.forEach(t),xGo=i(Iw),Zi=n(Iw,"P",{});var sZ=s(Zi);$Go=r(sZ,`Note:
Loading a model from its configuration file does `),Qge=n(sZ,"STRONG",{});var dmt=s(Qge);kGo=r(dmt,"not"),dmt.forEach(t),SGo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(sZ,"A",{href:!0});var cmt=s(eV);RGo=r(cmt,"from_pretrained()"),cmt.forEach(t),PGo=r(sZ," to load the model weights."),sZ.forEach(t),BGo=i(Iw),T(Z2.$$.fragment,Iw),Iw.forEach(t),IGo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(B6.$$.fragment,ca),qGo=i(ca),Hge=n(ca,"P",{});var fmt=s(Hge);NGo=r(fmt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fmt.forEach(t),jGo=i(ca),qa=n(ca,"P",{});var qw=s(qa);DGo=r(qw,"The model class to instantiate is selected based on the "),Uge=n(qw,"CODE",{});var mmt=s(Uge);GGo=r(mmt,"model_type"),mmt.forEach(t),OGo=r(qw,` property of the config object (either
passed as an argument or loaded from `),Jge=n(qw,"CODE",{});var gmt=s(Jge);VGo=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),XGo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(qw,"CODE",{});var hmt=s(Yge);zGo=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),WGo=r(qw,":"),qw.forEach(t),QGo=i(ca),V=n(ca,"UL",{});var X=s(V);ev=n(X,"LI",{});var _xe=s(ev);Kge=n(_xe,"STRONG",{});var pmt=s(Kge);HGo=r(pmt,"albert"),pmt.forEach(t),UGo=r(_xe," \u2014 "),oV=n(_xe,"A",{href:!0});var _mt=s(oV);JGo=r(_mt,"AlbertForQuestionAnswering"),_mt.forEach(t),YGo=r(_xe," (ALBERT model)"),_xe.forEach(t),KGo=i(X),ov=n(X,"LI",{});var uxe=s(ov);Zge=n(uxe,"STRONG",{});var umt=s(Zge);ZGo=r(umt,"bart"),umt.forEach(t),eOo=r(uxe," \u2014 "),rV=n(uxe,"A",{href:!0});var bmt=s(rV);oOo=r(bmt,"BartForQuestionAnswering"),bmt.forEach(t),rOo=r(uxe," (BART model)"),uxe.forEach(t),tOo=i(X),rv=n(X,"LI",{});var bxe=s(rv);ehe=n(bxe,"STRONG",{});var vmt=s(ehe);aOo=r(vmt,"bert"),vmt.forEach(t),nOo=r(bxe," \u2014 "),tV=n(bxe,"A",{href:!0});var Fmt=s(tV);sOo=r(Fmt,"BertForQuestionAnswering"),Fmt.forEach(t),lOo=r(bxe," (BERT model)"),bxe.forEach(t),iOo=i(X),tv=n(X,"LI",{});var vxe=s(tv);ohe=n(vxe,"STRONG",{});var Tmt=s(ohe);dOo=r(Tmt,"big_bird"),Tmt.forEach(t),cOo=r(vxe," \u2014 "),aV=n(vxe,"A",{href:!0});var Mmt=s(aV);fOo=r(Mmt,"BigBirdForQuestionAnswering"),Mmt.forEach(t),mOo=r(vxe," (BigBird model)"),vxe.forEach(t),gOo=i(X),av=n(X,"LI",{});var Fxe=s(av);rhe=n(Fxe,"STRONG",{});var Emt=s(rhe);hOo=r(Emt,"bigbird_pegasus"),Emt.forEach(t),pOo=r(Fxe," \u2014 "),nV=n(Fxe,"A",{href:!0});var Cmt=s(nV);_Oo=r(Cmt,"BigBirdPegasusForQuestionAnswering"),Cmt.forEach(t),uOo=r(Fxe," (BigBirdPegasus model)"),Fxe.forEach(t),bOo=i(X),nv=n(X,"LI",{});var Txe=s(nv);the=n(Txe,"STRONG",{});var wmt=s(the);vOo=r(wmt,"camembert"),wmt.forEach(t),FOo=r(Txe," \u2014 "),sV=n(Txe,"A",{href:!0});var Amt=s(sV);TOo=r(Amt,"CamembertForQuestionAnswering"),Amt.forEach(t),MOo=r(Txe," (CamemBERT model)"),Txe.forEach(t),EOo=i(X),sv=n(X,"LI",{});var Mxe=s(sv);ahe=n(Mxe,"STRONG",{});var ymt=s(ahe);COo=r(ymt,"canine"),ymt.forEach(t),wOo=r(Mxe," \u2014 "),lV=n(Mxe,"A",{href:!0});var Lmt=s(lV);AOo=r(Lmt,"CanineForQuestionAnswering"),Lmt.forEach(t),yOo=r(Mxe," (Canine model)"),Mxe.forEach(t),LOo=i(X),lv=n(X,"LI",{});var Exe=s(lv);nhe=n(Exe,"STRONG",{});var xmt=s(nhe);xOo=r(xmt,"convbert"),xmt.forEach(t),$Oo=r(Exe," \u2014 "),iV=n(Exe,"A",{href:!0});var $mt=s(iV);kOo=r($mt,"ConvBertForQuestionAnswering"),$mt.forEach(t),SOo=r(Exe," (ConvBERT model)"),Exe.forEach(t),ROo=i(X),iv=n(X,"LI",{});var Cxe=s(iv);she=n(Cxe,"STRONG",{});var kmt=s(she);POo=r(kmt,"data2vec-text"),kmt.forEach(t),BOo=r(Cxe," \u2014 "),dV=n(Cxe,"A",{href:!0});var Smt=s(dV);IOo=r(Smt,"Data2VecTextForQuestionAnswering"),Smt.forEach(t),qOo=r(Cxe," (Data2VecText model)"),Cxe.forEach(t),NOo=i(X),dv=n(X,"LI",{});var wxe=s(dv);lhe=n(wxe,"STRONG",{});var Rmt=s(lhe);jOo=r(Rmt,"deberta"),Rmt.forEach(t),DOo=r(wxe," \u2014 "),cV=n(wxe,"A",{href:!0});var Pmt=s(cV);GOo=r(Pmt,"DebertaForQuestionAnswering"),Pmt.forEach(t),OOo=r(wxe," (DeBERTa model)"),wxe.forEach(t),VOo=i(X),cv=n(X,"LI",{});var Axe=s(cv);ihe=n(Axe,"STRONG",{});var Bmt=s(ihe);XOo=r(Bmt,"deberta-v2"),Bmt.forEach(t),zOo=r(Axe," \u2014 "),fV=n(Axe,"A",{href:!0});var Imt=s(fV);WOo=r(Imt,"DebertaV2ForQuestionAnswering"),Imt.forEach(t),QOo=r(Axe," (DeBERTa-v2 model)"),Axe.forEach(t),HOo=i(X),fv=n(X,"LI",{});var yxe=s(fv);dhe=n(yxe,"STRONG",{});var qmt=s(dhe);UOo=r(qmt,"distilbert"),qmt.forEach(t),JOo=r(yxe," \u2014 "),mV=n(yxe,"A",{href:!0});var Nmt=s(mV);YOo=r(Nmt,"DistilBertForQuestionAnswering"),Nmt.forEach(t),KOo=r(yxe," (DistilBERT model)"),yxe.forEach(t),ZOo=i(X),mv=n(X,"LI",{});var Lxe=s(mv);che=n(Lxe,"STRONG",{});var jmt=s(che);eVo=r(jmt,"electra"),jmt.forEach(t),oVo=r(Lxe," \u2014 "),gV=n(Lxe,"A",{href:!0});var Dmt=s(gV);rVo=r(Dmt,"ElectraForQuestionAnswering"),Dmt.forEach(t),tVo=r(Lxe," (ELECTRA model)"),Lxe.forEach(t),aVo=i(X),gv=n(X,"LI",{});var xxe=s(gv);fhe=n(xxe,"STRONG",{});var Gmt=s(fhe);nVo=r(Gmt,"flaubert"),Gmt.forEach(t),sVo=r(xxe," \u2014 "),hV=n(xxe,"A",{href:!0});var Omt=s(hV);lVo=r(Omt,"FlaubertForQuestionAnsweringSimple"),Omt.forEach(t),iVo=r(xxe," (FlauBERT model)"),xxe.forEach(t),dVo=i(X),hv=n(X,"LI",{});var $xe=s(hv);mhe=n($xe,"STRONG",{});var Vmt=s(mhe);cVo=r(Vmt,"fnet"),Vmt.forEach(t),fVo=r($xe," \u2014 "),pV=n($xe,"A",{href:!0});var Xmt=s(pV);mVo=r(Xmt,"FNetForQuestionAnswering"),Xmt.forEach(t),gVo=r($xe," (FNet model)"),$xe.forEach(t),hVo=i(X),pv=n(X,"LI",{});var kxe=s(pv);ghe=n(kxe,"STRONG",{});var zmt=s(ghe);pVo=r(zmt,"funnel"),zmt.forEach(t),_Vo=r(kxe," \u2014 "),_V=n(kxe,"A",{href:!0});var Wmt=s(_V);uVo=r(Wmt,"FunnelForQuestionAnswering"),Wmt.forEach(t),bVo=r(kxe," (Funnel Transformer model)"),kxe.forEach(t),vVo=i(X),_v=n(X,"LI",{});var Sxe=s(_v);hhe=n(Sxe,"STRONG",{});var Qmt=s(hhe);FVo=r(Qmt,"gptj"),Qmt.forEach(t),TVo=r(Sxe," \u2014 "),uV=n(Sxe,"A",{href:!0});var Hmt=s(uV);MVo=r(Hmt,"GPTJForQuestionAnswering"),Hmt.forEach(t),EVo=r(Sxe," (GPT-J model)"),Sxe.forEach(t),CVo=i(X),uv=n(X,"LI",{});var Rxe=s(uv);phe=n(Rxe,"STRONG",{});var Umt=s(phe);wVo=r(Umt,"ibert"),Umt.forEach(t),AVo=r(Rxe," \u2014 "),bV=n(Rxe,"A",{href:!0});var Jmt=s(bV);yVo=r(Jmt,"IBertForQuestionAnswering"),Jmt.forEach(t),LVo=r(Rxe," (I-BERT model)"),Rxe.forEach(t),xVo=i(X),bv=n(X,"LI",{});var Pxe=s(bv);_he=n(Pxe,"STRONG",{});var Ymt=s(_he);$Vo=r(Ymt,"layoutlmv2"),Ymt.forEach(t),kVo=r(Pxe," \u2014 "),vV=n(Pxe,"A",{href:!0});var Kmt=s(vV);SVo=r(Kmt,"LayoutLMv2ForQuestionAnswering"),Kmt.forEach(t),RVo=r(Pxe," (LayoutLMv2 model)"),Pxe.forEach(t),PVo=i(X),vv=n(X,"LI",{});var Bxe=s(vv);uhe=n(Bxe,"STRONG",{});var Zmt=s(uhe);BVo=r(Zmt,"led"),Zmt.forEach(t),IVo=r(Bxe," \u2014 "),FV=n(Bxe,"A",{href:!0});var egt=s(FV);qVo=r(egt,"LEDForQuestionAnswering"),egt.forEach(t),NVo=r(Bxe," (LED model)"),Bxe.forEach(t),jVo=i(X),Fv=n(X,"LI",{});var Ixe=s(Fv);bhe=n(Ixe,"STRONG",{});var ogt=s(bhe);DVo=r(ogt,"longformer"),ogt.forEach(t),GVo=r(Ixe," \u2014 "),TV=n(Ixe,"A",{href:!0});var rgt=s(TV);OVo=r(rgt,"LongformerForQuestionAnswering"),rgt.forEach(t),VVo=r(Ixe," (Longformer model)"),Ixe.forEach(t),XVo=i(X),Tv=n(X,"LI",{});var qxe=s(Tv);vhe=n(qxe,"STRONG",{});var tgt=s(vhe);zVo=r(tgt,"lxmert"),tgt.forEach(t),WVo=r(qxe," \u2014 "),MV=n(qxe,"A",{href:!0});var agt=s(MV);QVo=r(agt,"LxmertForQuestionAnswering"),agt.forEach(t),HVo=r(qxe," (LXMERT model)"),qxe.forEach(t),UVo=i(X),Mv=n(X,"LI",{});var Nxe=s(Mv);Fhe=n(Nxe,"STRONG",{});var ngt=s(Fhe);JVo=r(ngt,"mbart"),ngt.forEach(t),YVo=r(Nxe," \u2014 "),EV=n(Nxe,"A",{href:!0});var sgt=s(EV);KVo=r(sgt,"MBartForQuestionAnswering"),sgt.forEach(t),ZVo=r(Nxe," (mBART model)"),Nxe.forEach(t),eXo=i(X),Ev=n(X,"LI",{});var jxe=s(Ev);The=n(jxe,"STRONG",{});var lgt=s(The);oXo=r(lgt,"megatron-bert"),lgt.forEach(t),rXo=r(jxe," \u2014 "),CV=n(jxe,"A",{href:!0});var igt=s(CV);tXo=r(igt,"MegatronBertForQuestionAnswering"),igt.forEach(t),aXo=r(jxe," (MegatronBert model)"),jxe.forEach(t),nXo=i(X),Cv=n(X,"LI",{});var Dxe=s(Cv);Mhe=n(Dxe,"STRONG",{});var dgt=s(Mhe);sXo=r(dgt,"mobilebert"),dgt.forEach(t),lXo=r(Dxe," \u2014 "),wV=n(Dxe,"A",{href:!0});var cgt=s(wV);iXo=r(cgt,"MobileBertForQuestionAnswering"),cgt.forEach(t),dXo=r(Dxe," (MobileBERT model)"),Dxe.forEach(t),cXo=i(X),wv=n(X,"LI",{});var Gxe=s(wv);Ehe=n(Gxe,"STRONG",{});var fgt=s(Ehe);fXo=r(fgt,"mpnet"),fgt.forEach(t),mXo=r(Gxe," \u2014 "),AV=n(Gxe,"A",{href:!0});var mgt=s(AV);gXo=r(mgt,"MPNetForQuestionAnswering"),mgt.forEach(t),hXo=r(Gxe," (MPNet model)"),Gxe.forEach(t),pXo=i(X),Av=n(X,"LI",{});var Oxe=s(Av);Che=n(Oxe,"STRONG",{});var ggt=s(Che);_Xo=r(ggt,"nystromformer"),ggt.forEach(t),uXo=r(Oxe," \u2014 "),yV=n(Oxe,"A",{href:!0});var hgt=s(yV);bXo=r(hgt,"NystromformerForQuestionAnswering"),hgt.forEach(t),vXo=r(Oxe," (Nystromformer model)"),Oxe.forEach(t),FXo=i(X),yv=n(X,"LI",{});var Vxe=s(yv);whe=n(Vxe,"STRONG",{});var pgt=s(whe);TXo=r(pgt,"qdqbert"),pgt.forEach(t),MXo=r(Vxe," \u2014 "),LV=n(Vxe,"A",{href:!0});var _gt=s(LV);EXo=r(_gt,"QDQBertForQuestionAnswering"),_gt.forEach(t),CXo=r(Vxe," (QDQBert model)"),Vxe.forEach(t),wXo=i(X),Lv=n(X,"LI",{});var Xxe=s(Lv);Ahe=n(Xxe,"STRONG",{});var ugt=s(Ahe);AXo=r(ugt,"reformer"),ugt.forEach(t),yXo=r(Xxe," \u2014 "),xV=n(Xxe,"A",{href:!0});var bgt=s(xV);LXo=r(bgt,"ReformerForQuestionAnswering"),bgt.forEach(t),xXo=r(Xxe," (Reformer model)"),Xxe.forEach(t),$Xo=i(X),xv=n(X,"LI",{});var zxe=s(xv);yhe=n(zxe,"STRONG",{});var vgt=s(yhe);kXo=r(vgt,"rembert"),vgt.forEach(t),SXo=r(zxe," \u2014 "),$V=n(zxe,"A",{href:!0});var Fgt=s($V);RXo=r(Fgt,"RemBertForQuestionAnswering"),Fgt.forEach(t),PXo=r(zxe," (RemBERT model)"),zxe.forEach(t),BXo=i(X),$v=n(X,"LI",{});var Wxe=s($v);Lhe=n(Wxe,"STRONG",{});var Tgt=s(Lhe);IXo=r(Tgt,"roberta"),Tgt.forEach(t),qXo=r(Wxe," \u2014 "),kV=n(Wxe,"A",{href:!0});var Mgt=s(kV);NXo=r(Mgt,"RobertaForQuestionAnswering"),Mgt.forEach(t),jXo=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),DXo=i(X),kv=n(X,"LI",{});var Qxe=s(kv);xhe=n(Qxe,"STRONG",{});var Egt=s(xhe);GXo=r(Egt,"roformer"),Egt.forEach(t),OXo=r(Qxe," \u2014 "),SV=n(Qxe,"A",{href:!0});var Cgt=s(SV);VXo=r(Cgt,"RoFormerForQuestionAnswering"),Cgt.forEach(t),XXo=r(Qxe," (RoFormer model)"),Qxe.forEach(t),zXo=i(X),Sv=n(X,"LI",{});var Hxe=s(Sv);$he=n(Hxe,"STRONG",{});var wgt=s($he);WXo=r(wgt,"splinter"),wgt.forEach(t),QXo=r(Hxe," \u2014 "),RV=n(Hxe,"A",{href:!0});var Agt=s(RV);HXo=r(Agt,"SplinterForQuestionAnswering"),Agt.forEach(t),UXo=r(Hxe," (Splinter model)"),Hxe.forEach(t),JXo=i(X),Rv=n(X,"LI",{});var Uxe=s(Rv);khe=n(Uxe,"STRONG",{});var ygt=s(khe);YXo=r(ygt,"squeezebert"),ygt.forEach(t),KXo=r(Uxe," \u2014 "),PV=n(Uxe,"A",{href:!0});var Lgt=s(PV);ZXo=r(Lgt,"SqueezeBertForQuestionAnswering"),Lgt.forEach(t),ezo=r(Uxe," (SqueezeBERT model)"),Uxe.forEach(t),ozo=i(X),Pv=n(X,"LI",{});var Jxe=s(Pv);She=n(Jxe,"STRONG",{});var xgt=s(She);rzo=r(xgt,"xlm"),xgt.forEach(t),tzo=r(Jxe," \u2014 "),BV=n(Jxe,"A",{href:!0});var $gt=s(BV);azo=r($gt,"XLMForQuestionAnsweringSimple"),$gt.forEach(t),nzo=r(Jxe," (XLM model)"),Jxe.forEach(t),szo=i(X),Bv=n(X,"LI",{});var Yxe=s(Bv);Rhe=n(Yxe,"STRONG",{});var kgt=s(Rhe);lzo=r(kgt,"xlm-roberta"),kgt.forEach(t),izo=r(Yxe," \u2014 "),IV=n(Yxe,"A",{href:!0});var Sgt=s(IV);dzo=r(Sgt,"XLMRobertaForQuestionAnswering"),Sgt.forEach(t),czo=r(Yxe," (XLM-RoBERTa model)"),Yxe.forEach(t),fzo=i(X),Iv=n(X,"LI",{});var Kxe=s(Iv);Phe=n(Kxe,"STRONG",{});var Rgt=s(Phe);mzo=r(Rgt,"xlm-roberta-xl"),Rgt.forEach(t),gzo=r(Kxe," \u2014 "),qV=n(Kxe,"A",{href:!0});var Pgt=s(qV);hzo=r(Pgt,"XLMRobertaXLForQuestionAnswering"),Pgt.forEach(t),pzo=r(Kxe," (XLM-RoBERTa-XL model)"),Kxe.forEach(t),_zo=i(X),qv=n(X,"LI",{});var Zxe=s(qv);Bhe=n(Zxe,"STRONG",{});var Bgt=s(Bhe);uzo=r(Bgt,"xlnet"),Bgt.forEach(t),bzo=r(Zxe," \u2014 "),NV=n(Zxe,"A",{href:!0});var Igt=s(NV);vzo=r(Igt,"XLNetForQuestionAnsweringSimple"),Igt.forEach(t),Fzo=r(Zxe," (XLNet model)"),Zxe.forEach(t),Tzo=i(X),Nv=n(X,"LI",{});var e$e=s(Nv);Ihe=n(e$e,"STRONG",{});var qgt=s(Ihe);Mzo=r(qgt,"yoso"),qgt.forEach(t),Ezo=r(e$e," \u2014 "),jV=n(e$e,"A",{href:!0});var Ngt=s(jV);Czo=r(Ngt,"YosoForQuestionAnswering"),Ngt.forEach(t),wzo=r(e$e," (YOSO model)"),e$e.forEach(t),X.forEach(t),Azo=i(ca),jv=n(ca,"P",{});var o$e=s(jv);yzo=r(o$e,"The model is set in evaluation mode by default using "),qhe=n(o$e,"CODE",{});var jgt=s(qhe);Lzo=r(jgt,"model.eval()"),jgt.forEach(t),xzo=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(o$e,"CODE",{});var Dgt=s(Nhe);$zo=r(Dgt,"model.train()"),Dgt.forEach(t),o$e.forEach(t),kzo=i(ca),T(Dv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Sqe=i(f),ed=n(f,"H2",{class:!0});var Ije=s(ed);Gv=n(Ije,"A",{id:!0,class:!0,href:!0});var Ggt=s(Gv);jhe=n(Ggt,"SPAN",{});var Ogt=s(jhe);T(I6.$$.fragment,Ogt),Ogt.forEach(t),Ggt.forEach(t),Szo=i(Ije),Dhe=n(Ije,"SPAN",{});var Vgt=s(Dhe);Rzo=r(Vgt,"AutoModelForTableQuestionAnswering"),Vgt.forEach(t),Ije.forEach(t),Rqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(q6.$$.fragment,Ys),Pzo=i(Ys),od=n(Ys,"P",{});var lZ=s(od);Bzo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DV=n(lZ,"A",{href:!0});var Xgt=s(DV);Izo=r(Xgt,"from_pretrained()"),Xgt.forEach(t),qzo=r(lZ," class method or the "),GV=n(lZ,"A",{href:!0});var zgt=s(GV);Nzo=r(zgt,"from_config()"),zgt.forEach(t),jzo=r(lZ,` class
method.`),lZ.forEach(t),Dzo=i(Ys),N6=n(Ys,"P",{});var qje=s(N6);Gzo=r(qje,"This class cannot be instantiated directly using "),Ghe=n(qje,"CODE",{});var Wgt=s(Ghe);Ozo=r(Wgt,"__init__()"),Wgt.forEach(t),Vzo=r(qje," (throws an error)."),qje.forEach(t),Xzo=i(Ys),gt=n(Ys,"DIV",{class:!0});var Nw=s(gt);T(j6.$$.fragment,Nw),zzo=i(Nw),Ohe=n(Nw,"P",{});var Qgt=s(Ohe);Wzo=r(Qgt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qgt.forEach(t),Qzo=i(Nw),rd=n(Nw,"P",{});var iZ=s(rd);Hzo=r(iZ,`Note:
Loading a model from its configuration file does `),Vhe=n(iZ,"STRONG",{});var Hgt=s(Vhe);Uzo=r(Hgt,"not"),Hgt.forEach(t),Jzo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(iZ,"A",{href:!0});var Ugt=s(OV);Yzo=r(Ugt,"from_pretrained()"),Ugt.forEach(t),Kzo=r(iZ," to load the model weights."),iZ.forEach(t),Zzo=i(Nw),T(Ov.$$.fragment,Nw),Nw.forEach(t),eWo=i(Ys),so=n(Ys,"DIV",{class:!0});var fa=s(so);T(D6.$$.fragment,fa),oWo=i(fa),Xhe=n(fa,"P",{});var Jgt=s(Xhe);rWo=r(Jgt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jgt.forEach(t),tWo=i(fa),Na=n(fa,"P",{});var jw=s(Na);aWo=r(jw,"The model class to instantiate is selected based on the "),zhe=n(jw,"CODE",{});var Ygt=s(zhe);nWo=r(Ygt,"model_type"),Ygt.forEach(t),sWo=r(jw,` property of the config object (either
passed as an argument or loaded from `),Whe=n(jw,"CODE",{});var Kgt=s(Whe);lWo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),iWo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(jw,"CODE",{});var Zgt=s(Qhe);dWo=r(Zgt,"pretrained_model_name_or_path"),Zgt.forEach(t),cWo=r(jw,":"),jw.forEach(t),fWo=i(fa),Hhe=n(fa,"UL",{});var eht=s(Hhe);Vv=n(eht,"LI",{});var r$e=s(Vv);Uhe=n(r$e,"STRONG",{});var oht=s(Uhe);mWo=r(oht,"tapas"),oht.forEach(t),gWo=r(r$e," \u2014 "),VV=n(r$e,"A",{href:!0});var rht=s(VV);hWo=r(rht,"TapasForQuestionAnswering"),rht.forEach(t),pWo=r(r$e," (TAPAS model)"),r$e.forEach(t),eht.forEach(t),_Wo=i(fa),Xv=n(fa,"P",{});var t$e=s(Xv);uWo=r(t$e,"The model is set in evaluation mode by default using "),Jhe=n(t$e,"CODE",{});var tht=s(Jhe);bWo=r(tht,"model.eval()"),tht.forEach(t),vWo=r(t$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(t$e,"CODE",{});var aht=s(Yhe);FWo=r(aht,"model.train()"),aht.forEach(t),t$e.forEach(t),TWo=i(fa),T(zv.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),Pqe=i(f),td=n(f,"H2",{class:!0});var Nje=s(td);Wv=n(Nje,"A",{id:!0,class:!0,href:!0});var nht=s(Wv);Khe=n(nht,"SPAN",{});var sht=s(Khe);T(G6.$$.fragment,sht),sht.forEach(t),nht.forEach(t),MWo=i(Nje),Zhe=n(Nje,"SPAN",{});var lht=s(Zhe);EWo=r(lht,"AutoModelForImageClassification"),lht.forEach(t),Nje.forEach(t),Bqe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(O6.$$.fragment,Ks),CWo=i(Ks),ad=n(Ks,"P",{});var dZ=s(ad);wWo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XV=n(dZ,"A",{href:!0});var iht=s(XV);AWo=r(iht,"from_pretrained()"),iht.forEach(t),yWo=r(dZ," class method or the "),zV=n(dZ,"A",{href:!0});var dht=s(zV);LWo=r(dht,"from_config()"),dht.forEach(t),xWo=r(dZ,` class
method.`),dZ.forEach(t),$Wo=i(Ks),V6=n(Ks,"P",{});var jje=s(V6);kWo=r(jje,"This class cannot be instantiated directly using "),epe=n(jje,"CODE",{});var cht=s(epe);SWo=r(cht,"__init__()"),cht.forEach(t),RWo=r(jje," (throws an error)."),jje.forEach(t),PWo=i(Ks),ht=n(Ks,"DIV",{class:!0});var Dw=s(ht);T(X6.$$.fragment,Dw),BWo=i(Dw),ope=n(Dw,"P",{});var fht=s(ope);IWo=r(fht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fht.forEach(t),qWo=i(Dw),nd=n(Dw,"P",{});var cZ=s(nd);NWo=r(cZ,`Note:
Loading a model from its configuration file does `),rpe=n(cZ,"STRONG",{});var mht=s(rpe);jWo=r(mht,"not"),mht.forEach(t),DWo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(cZ,"A",{href:!0});var ght=s(WV);GWo=r(ght,"from_pretrained()"),ght.forEach(t),OWo=r(cZ," to load the model weights."),cZ.forEach(t),VWo=i(Dw),T(Qv.$$.fragment,Dw),Dw.forEach(t),XWo=i(Ks),lo=n(Ks,"DIV",{class:!0});var ma=s(lo);T(z6.$$.fragment,ma),zWo=i(ma),tpe=n(ma,"P",{});var hht=s(tpe);WWo=r(hht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hht.forEach(t),QWo=i(ma),ja=n(ma,"P",{});var Gw=s(ja);HWo=r(Gw,"The model class to instantiate is selected based on the "),ape=n(Gw,"CODE",{});var pht=s(ape);UWo=r(pht,"model_type"),pht.forEach(t),JWo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),npe=n(Gw,"CODE",{});var _ht=s(npe);YWo=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),KWo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(Gw,"CODE",{});var uht=s(spe);ZWo=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),eQo=r(Gw,":"),Gw.forEach(t),oQo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);Hv=n(Te,"LI",{});var a$e=s(Hv);lpe=n(a$e,"STRONG",{});var bht=s(lpe);rQo=r(bht,"beit"),bht.forEach(t),tQo=r(a$e," \u2014 "),QV=n(a$e,"A",{href:!0});var vht=s(QV);aQo=r(vht,"BeitForImageClassification"),vht.forEach(t),nQo=r(a$e," (BEiT model)"),a$e.forEach(t),sQo=i(Te),Uv=n(Te,"LI",{});var n$e=s(Uv);ipe=n(n$e,"STRONG",{});var Fht=s(ipe);lQo=r(Fht,"convnext"),Fht.forEach(t),iQo=r(n$e," \u2014 "),HV=n(n$e,"A",{href:!0});var Tht=s(HV);dQo=r(Tht,"ConvNextForImageClassification"),Tht.forEach(t),cQo=r(n$e," (ConvNext model)"),n$e.forEach(t),fQo=i(Te),Jv=n(Te,"LI",{});var s$e=s(Jv);dpe=n(s$e,"STRONG",{});var Mht=s(dpe);mQo=r(Mht,"cvt"),Mht.forEach(t),gQo=r(s$e," \u2014 "),UV=n(s$e,"A",{href:!0});var Eht=s(UV);hQo=r(Eht,"CvtForImageClassification"),Eht.forEach(t),pQo=r(s$e," (CvT model)"),s$e.forEach(t),_Qo=i(Te),Yv=n(Te,"LI",{});var l$e=s(Yv);cpe=n(l$e,"STRONG",{});var Cht=s(cpe);uQo=r(Cht,"data2vec-vision"),Cht.forEach(t),bQo=r(l$e," \u2014 "),JV=n(l$e,"A",{href:!0});var wht=s(JV);vQo=r(wht,"Data2VecVisionForImageClassification"),wht.forEach(t),FQo=r(l$e," (Data2VecVision model)"),l$e.forEach(t),TQo=i(Te),Ps=n(Te,"LI",{});var x$=s(Ps);fpe=n(x$,"STRONG",{});var Aht=s(fpe);MQo=r(Aht,"deit"),Aht.forEach(t),EQo=r(x$," \u2014 "),YV=n(x$,"A",{href:!0});var yht=s(YV);CQo=r(yht,"DeiTForImageClassification"),yht.forEach(t),wQo=r(x$," or "),KV=n(x$,"A",{href:!0});var Lht=s(KV);AQo=r(Lht,"DeiTForImageClassificationWithTeacher"),Lht.forEach(t),yQo=r(x$," (DeiT model)"),x$.forEach(t),LQo=i(Te),Kv=n(Te,"LI",{});var i$e=s(Kv);mpe=n(i$e,"STRONG",{});var xht=s(mpe);xQo=r(xht,"imagegpt"),xht.forEach(t),$Qo=r(i$e," \u2014 "),ZV=n(i$e,"A",{href:!0});var $ht=s(ZV);kQo=r($ht,"ImageGPTForImageClassification"),$ht.forEach(t),SQo=r(i$e," (ImageGPT model)"),i$e.forEach(t),RQo=i(Te),pt=n(Te,"LI",{});var gf=s(pt);gpe=n(gf,"STRONG",{});var kht=s(gpe);PQo=r(kht,"perceiver"),kht.forEach(t),BQo=r(gf," \u2014 "),eX=n(gf,"A",{href:!0});var Sht=s(eX);IQo=r(Sht,"PerceiverForImageClassificationLearned"),Sht.forEach(t),qQo=r(gf," or "),oX=n(gf,"A",{href:!0});var Rht=s(oX);NQo=r(Rht,"PerceiverForImageClassificationFourier"),Rht.forEach(t),jQo=r(gf," or "),rX=n(gf,"A",{href:!0});var Pht=s(rX);DQo=r(Pht,"PerceiverForImageClassificationConvProcessing"),Pht.forEach(t),GQo=r(gf," (Perceiver model)"),gf.forEach(t),OQo=i(Te),Zv=n(Te,"LI",{});var d$e=s(Zv);hpe=n(d$e,"STRONG",{});var Bht=s(hpe);VQo=r(Bht,"poolformer"),Bht.forEach(t),XQo=r(d$e," \u2014 "),tX=n(d$e,"A",{href:!0});var Iht=s(tX);zQo=r(Iht,"PoolFormerForImageClassification"),Iht.forEach(t),WQo=r(d$e," (PoolFormer model)"),d$e.forEach(t),QQo=i(Te),e3=n(Te,"LI",{});var c$e=s(e3);ppe=n(c$e,"STRONG",{});var qht=s(ppe);HQo=r(qht,"regnet"),qht.forEach(t),UQo=r(c$e," \u2014 "),aX=n(c$e,"A",{href:!0});var Nht=s(aX);JQo=r(Nht,"RegNetForImageClassification"),Nht.forEach(t),YQo=r(c$e," (RegNet model)"),c$e.forEach(t),KQo=i(Te),o3=n(Te,"LI",{});var f$e=s(o3);_pe=n(f$e,"STRONG",{});var jht=s(_pe);ZQo=r(jht,"resnet"),jht.forEach(t),eHo=r(f$e," \u2014 "),nX=n(f$e,"A",{href:!0});var Dht=s(nX);oHo=r(Dht,"ResNetForImageClassification"),Dht.forEach(t),rHo=r(f$e," (ResNet model)"),f$e.forEach(t),tHo=i(Te),r3=n(Te,"LI",{});var m$e=s(r3);upe=n(m$e,"STRONG",{});var Ght=s(upe);aHo=r(Ght,"segformer"),Ght.forEach(t),nHo=r(m$e," \u2014 "),sX=n(m$e,"A",{href:!0});var Oht=s(sX);sHo=r(Oht,"SegformerForImageClassification"),Oht.forEach(t),lHo=r(m$e," (SegFormer model)"),m$e.forEach(t),iHo=i(Te),t3=n(Te,"LI",{});var g$e=s(t3);bpe=n(g$e,"STRONG",{});var Vht=s(bpe);dHo=r(Vht,"swin"),Vht.forEach(t),cHo=r(g$e," \u2014 "),lX=n(g$e,"A",{href:!0});var Xht=s(lX);fHo=r(Xht,"SwinForImageClassification"),Xht.forEach(t),mHo=r(g$e," (Swin model)"),g$e.forEach(t),gHo=i(Te),a3=n(Te,"LI",{});var h$e=s(a3);vpe=n(h$e,"STRONG",{});var zht=s(vpe);hHo=r(zht,"van"),zht.forEach(t),pHo=r(h$e," \u2014 "),iX=n(h$e,"A",{href:!0});var Wht=s(iX);_Ho=r(Wht,"VanForImageClassification"),Wht.forEach(t),uHo=r(h$e," (VAN model)"),h$e.forEach(t),bHo=i(Te),n3=n(Te,"LI",{});var p$e=s(n3);Fpe=n(p$e,"STRONG",{});var Qht=s(Fpe);vHo=r(Qht,"vit"),Qht.forEach(t),FHo=r(p$e," \u2014 "),dX=n(p$e,"A",{href:!0});var Hht=s(dX);THo=r(Hht,"ViTForImageClassification"),Hht.forEach(t),MHo=r(p$e," (ViT model)"),p$e.forEach(t),Te.forEach(t),EHo=i(ma),s3=n(ma,"P",{});var _$e=s(s3);CHo=r(_$e,"The model is set in evaluation mode by default using "),Tpe=n(_$e,"CODE",{});var Uht=s(Tpe);wHo=r(Uht,"model.eval()"),Uht.forEach(t),AHo=r(_$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=n(_$e,"CODE",{});var Jht=s(Mpe);yHo=r(Jht,"model.train()"),Jht.forEach(t),_$e.forEach(t),LHo=i(ma),T(l3.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Iqe=i(f),sd=n(f,"H2",{class:!0});var Dje=s(sd);i3=n(Dje,"A",{id:!0,class:!0,href:!0});var Yht=s(i3);Epe=n(Yht,"SPAN",{});var Kht=s(Epe);T(W6.$$.fragment,Kht),Kht.forEach(t),Yht.forEach(t),xHo=i(Dje),Cpe=n(Dje,"SPAN",{});var Zht=s(Cpe);$Ho=r(Zht,"AutoModelForVision2Seq"),Zht.forEach(t),Dje.forEach(t),qqe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(Q6.$$.fragment,Zs),kHo=i(Zs),ld=n(Zs,"P",{});var fZ=s(ld);SHo=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cX=n(fZ,"A",{href:!0});var ept=s(cX);RHo=r(ept,"from_pretrained()"),ept.forEach(t),PHo=r(fZ," class method or the "),fX=n(fZ,"A",{href:!0});var opt=s(fX);BHo=r(opt,"from_config()"),opt.forEach(t),IHo=r(fZ,` class
method.`),fZ.forEach(t),qHo=i(Zs),H6=n(Zs,"P",{});var Gje=s(H6);NHo=r(Gje,"This class cannot be instantiated directly using "),wpe=n(Gje,"CODE",{});var rpt=s(wpe);jHo=r(rpt,"__init__()"),rpt.forEach(t),DHo=r(Gje," (throws an error)."),Gje.forEach(t),GHo=i(Zs),_t=n(Zs,"DIV",{class:!0});var Ow=s(_t);T(U6.$$.fragment,Ow),OHo=i(Ow),Ape=n(Ow,"P",{});var tpt=s(Ape);VHo=r(tpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tpt.forEach(t),XHo=i(Ow),id=n(Ow,"P",{});var mZ=s(id);zHo=r(mZ,`Note:
Loading a model from its configuration file does `),ype=n(mZ,"STRONG",{});var apt=s(ype);WHo=r(apt,"not"),apt.forEach(t),QHo=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(mZ,"A",{href:!0});var npt=s(mX);HHo=r(npt,"from_pretrained()"),npt.forEach(t),UHo=r(mZ," to load the model weights."),mZ.forEach(t),JHo=i(Ow),T(d3.$$.fragment,Ow),Ow.forEach(t),YHo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(J6.$$.fragment,ga),KHo=i(ga),Lpe=n(ga,"P",{});var spt=s(Lpe);ZHo=r(spt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),spt.forEach(t),eUo=i(ga),Da=n(ga,"P",{});var Vw=s(Da);oUo=r(Vw,"The model class to instantiate is selected based on the "),xpe=n(Vw,"CODE",{});var lpt=s(xpe);rUo=r(lpt,"model_type"),lpt.forEach(t),tUo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),$pe=n(Vw,"CODE",{});var ipt=s($pe);aUo=r(ipt,"pretrained_model_name_or_path"),ipt.forEach(t),nUo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=n(Vw,"CODE",{});var dpt=s(kpe);sUo=r(dpt,"pretrained_model_name_or_path"),dpt.forEach(t),lUo=r(Vw,":"),Vw.forEach(t),iUo=i(ga),Spe=n(ga,"UL",{});var cpt=s(Spe);c3=n(cpt,"LI",{});var u$e=s(c3);Rpe=n(u$e,"STRONG",{});var fpt=s(Rpe);dUo=r(fpt,"vision-encoder-decoder"),fpt.forEach(t),cUo=r(u$e," \u2014 "),gX=n(u$e,"A",{href:!0});var mpt=s(gX);fUo=r(mpt,"VisionEncoderDecoderModel"),mpt.forEach(t),mUo=r(u$e," (Vision Encoder decoder model)"),u$e.forEach(t),cpt.forEach(t),gUo=i(ga),f3=n(ga,"P",{});var b$e=s(f3);hUo=r(b$e,"The model is set in evaluation mode by default using "),Ppe=n(b$e,"CODE",{});var gpt=s(Ppe);pUo=r(gpt,"model.eval()"),gpt.forEach(t),_Uo=r(b$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(b$e,"CODE",{});var hpt=s(Bpe);uUo=r(hpt,"model.train()"),hpt.forEach(t),b$e.forEach(t),bUo=i(ga),T(m3.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Nqe=i(f),dd=n(f,"H2",{class:!0});var Oje=s(dd);g3=n(Oje,"A",{id:!0,class:!0,href:!0});var ppt=s(g3);Ipe=n(ppt,"SPAN",{});var _pt=s(Ipe);T(Y6.$$.fragment,_pt),_pt.forEach(t),ppt.forEach(t),vUo=i(Oje),qpe=n(Oje,"SPAN",{});var upt=s(qpe);FUo=r(upt,"AutoModelForAudioClassification"),upt.forEach(t),Oje.forEach(t),jqe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(K6.$$.fragment,el),TUo=i(el),cd=n(el,"P",{});var gZ=s(cd);MUo=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hX=n(gZ,"A",{href:!0});var bpt=s(hX);EUo=r(bpt,"from_pretrained()"),bpt.forEach(t),CUo=r(gZ," class method or the "),pX=n(gZ,"A",{href:!0});var vpt=s(pX);wUo=r(vpt,"from_config()"),vpt.forEach(t),AUo=r(gZ,` class
method.`),gZ.forEach(t),yUo=i(el),Z6=n(el,"P",{});var Vje=s(Z6);LUo=r(Vje,"This class cannot be instantiated directly using "),Npe=n(Vje,"CODE",{});var Fpt=s(Npe);xUo=r(Fpt,"__init__()"),Fpt.forEach(t),$Uo=r(Vje," (throws an error)."),Vje.forEach(t),kUo=i(el),ut=n(el,"DIV",{class:!0});var Xw=s(ut);T(ey.$$.fragment,Xw),SUo=i(Xw),jpe=n(Xw,"P",{});var Tpt=s(jpe);RUo=r(Tpt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Tpt.forEach(t),PUo=i(Xw),fd=n(Xw,"P",{});var hZ=s(fd);BUo=r(hZ,`Note:
Loading a model from its configuration file does `),Dpe=n(hZ,"STRONG",{});var Mpt=s(Dpe);IUo=r(Mpt,"not"),Mpt.forEach(t),qUo=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(hZ,"A",{href:!0});var Ept=s(_X);NUo=r(Ept,"from_pretrained()"),Ept.forEach(t),jUo=r(hZ," to load the model weights."),hZ.forEach(t),DUo=i(Xw),T(h3.$$.fragment,Xw),Xw.forEach(t),GUo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(oy.$$.fragment,ha),OUo=i(ha),Gpe=n(ha,"P",{});var Cpt=s(Gpe);VUo=r(Cpt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Cpt.forEach(t),XUo=i(ha),Ga=n(ha,"P",{});var zw=s(Ga);zUo=r(zw,"The model class to instantiate is selected based on the "),Ope=n(zw,"CODE",{});var wpt=s(Ope);WUo=r(wpt,"model_type"),wpt.forEach(t),QUo=r(zw,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(zw,"CODE",{});var Apt=s(Vpe);HUo=r(Apt,"pretrained_model_name_or_path"),Apt.forEach(t),UUo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=n(zw,"CODE",{});var ypt=s(Xpe);JUo=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),YUo=r(zw,":"),zw.forEach(t),KUo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);p3=n(Oe,"LI",{});var v$e=s(p3);zpe=n(v$e,"STRONG",{});var Lpt=s(zpe);ZUo=r(Lpt,"data2vec-audio"),Lpt.forEach(t),eJo=r(v$e," \u2014 "),uX=n(v$e,"A",{href:!0});var xpt=s(uX);oJo=r(xpt,"Data2VecAudioForSequenceClassification"),xpt.forEach(t),rJo=r(v$e," (Data2VecAudio model)"),v$e.forEach(t),tJo=i(Oe),_3=n(Oe,"LI",{});var F$e=s(_3);Wpe=n(F$e,"STRONG",{});var $pt=s(Wpe);aJo=r($pt,"hubert"),$pt.forEach(t),nJo=r(F$e," \u2014 "),bX=n(F$e,"A",{href:!0});var kpt=s(bX);sJo=r(kpt,"HubertForSequenceClassification"),kpt.forEach(t),lJo=r(F$e," (Hubert model)"),F$e.forEach(t),iJo=i(Oe),u3=n(Oe,"LI",{});var T$e=s(u3);Qpe=n(T$e,"STRONG",{});var Spt=s(Qpe);dJo=r(Spt,"sew"),Spt.forEach(t),cJo=r(T$e," \u2014 "),vX=n(T$e,"A",{href:!0});var Rpt=s(vX);fJo=r(Rpt,"SEWForSequenceClassification"),Rpt.forEach(t),mJo=r(T$e," (SEW model)"),T$e.forEach(t),gJo=i(Oe),b3=n(Oe,"LI",{});var M$e=s(b3);Hpe=n(M$e,"STRONG",{});var Ppt=s(Hpe);hJo=r(Ppt,"sew-d"),Ppt.forEach(t),pJo=r(M$e," \u2014 "),FX=n(M$e,"A",{href:!0});var Bpt=s(FX);_Jo=r(Bpt,"SEWDForSequenceClassification"),Bpt.forEach(t),uJo=r(M$e," (SEW-D model)"),M$e.forEach(t),bJo=i(Oe),v3=n(Oe,"LI",{});var E$e=s(v3);Upe=n(E$e,"STRONG",{});var Ipt=s(Upe);vJo=r(Ipt,"unispeech"),Ipt.forEach(t),FJo=r(E$e," \u2014 "),TX=n(E$e,"A",{href:!0});var qpt=s(TX);TJo=r(qpt,"UniSpeechForSequenceClassification"),qpt.forEach(t),MJo=r(E$e," (UniSpeech model)"),E$e.forEach(t),EJo=i(Oe),F3=n(Oe,"LI",{});var C$e=s(F3);Jpe=n(C$e,"STRONG",{});var Npt=s(Jpe);CJo=r(Npt,"unispeech-sat"),Npt.forEach(t),wJo=r(C$e," \u2014 "),MX=n(C$e,"A",{href:!0});var jpt=s(MX);AJo=r(jpt,"UniSpeechSatForSequenceClassification"),jpt.forEach(t),yJo=r(C$e," (UniSpeechSat model)"),C$e.forEach(t),LJo=i(Oe),T3=n(Oe,"LI",{});var w$e=s(T3);Ype=n(w$e,"STRONG",{});var Dpt=s(Ype);xJo=r(Dpt,"wav2vec2"),Dpt.forEach(t),$Jo=r(w$e," \u2014 "),EX=n(w$e,"A",{href:!0});var Gpt=s(EX);kJo=r(Gpt,"Wav2Vec2ForSequenceClassification"),Gpt.forEach(t),SJo=r(w$e," (Wav2Vec2 model)"),w$e.forEach(t),RJo=i(Oe),M3=n(Oe,"LI",{});var A$e=s(M3);Kpe=n(A$e,"STRONG",{});var Opt=s(Kpe);PJo=r(Opt,"wav2vec2-conformer"),Opt.forEach(t),BJo=r(A$e," \u2014 "),CX=n(A$e,"A",{href:!0});var Vpt=s(CX);IJo=r(Vpt,"Wav2Vec2ConformerForSequenceClassification"),Vpt.forEach(t),qJo=r(A$e," (Wav2Vec2-Conformer model)"),A$e.forEach(t),NJo=i(Oe),E3=n(Oe,"LI",{});var y$e=s(E3);Zpe=n(y$e,"STRONG",{});var Xpt=s(Zpe);jJo=r(Xpt,"wavlm"),Xpt.forEach(t),DJo=r(y$e," \u2014 "),wX=n(y$e,"A",{href:!0});var zpt=s(wX);GJo=r(zpt,"WavLMForSequenceClassification"),zpt.forEach(t),OJo=r(y$e," (WavLM model)"),y$e.forEach(t),Oe.forEach(t),VJo=i(ha),C3=n(ha,"P",{});var L$e=s(C3);XJo=r(L$e,"The model is set in evaluation mode by default using "),e_e=n(L$e,"CODE",{});var Wpt=s(e_e);zJo=r(Wpt,"model.eval()"),Wpt.forEach(t),WJo=r(L$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=n(L$e,"CODE",{});var Qpt=s(o_e);QJo=r(Qpt,"model.train()"),Qpt.forEach(t),L$e.forEach(t),HJo=i(ha),T(w3.$$.fragment,ha),ha.forEach(t),el.forEach(t),Dqe=i(f),md=n(f,"H2",{class:!0});var Xje=s(md);A3=n(Xje,"A",{id:!0,class:!0,href:!0});var Hpt=s(A3);r_e=n(Hpt,"SPAN",{});var Upt=s(r_e);T(ry.$$.fragment,Upt),Upt.forEach(t),Hpt.forEach(t),UJo=i(Xje),t_e=n(Xje,"SPAN",{});var Jpt=s(t_e);JJo=r(Jpt,"AutoModelForAudioFrameClassification"),Jpt.forEach(t),Xje.forEach(t),Gqe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(ty.$$.fragment,ol),YJo=i(ol),gd=n(ol,"P",{});var pZ=s(gd);KJo=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AX=n(pZ,"A",{href:!0});var Ypt=s(AX);ZJo=r(Ypt,"from_pretrained()"),Ypt.forEach(t),eYo=r(pZ," class method or the "),yX=n(pZ,"A",{href:!0});var Kpt=s(yX);oYo=r(Kpt,"from_config()"),Kpt.forEach(t),rYo=r(pZ,` class
method.`),pZ.forEach(t),tYo=i(ol),ay=n(ol,"P",{});var zje=s(ay);aYo=r(zje,"This class cannot be instantiated directly using "),a_e=n(zje,"CODE",{});var Zpt=s(a_e);nYo=r(Zpt,"__init__()"),Zpt.forEach(t),sYo=r(zje," (throws an error)."),zje.forEach(t),lYo=i(ol),bt=n(ol,"DIV",{class:!0});var Ww=s(bt);T(ny.$$.fragment,Ww),iYo=i(Ww),n_e=n(Ww,"P",{});var e_t=s(n_e);dYo=r(e_t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),e_t.forEach(t),cYo=i(Ww),hd=n(Ww,"P",{});var _Z=s(hd);fYo=r(_Z,`Note:
Loading a model from its configuration file does `),s_e=n(_Z,"STRONG",{});var o_t=s(s_e);mYo=r(o_t,"not"),o_t.forEach(t),gYo=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(_Z,"A",{href:!0});var r_t=s(LX);hYo=r(r_t,"from_pretrained()"),r_t.forEach(t),pYo=r(_Z," to load the model weights."),_Z.forEach(t),_Yo=i(Ww),T(y3.$$.fragment,Ww),Ww.forEach(t),uYo=i(ol),fo=n(ol,"DIV",{class:!0});var pa=s(fo);T(sy.$$.fragment,pa),bYo=i(pa),l_e=n(pa,"P",{});var t_t=s(l_e);vYo=r(t_t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),t_t.forEach(t),FYo=i(pa),Oa=n(pa,"P",{});var Qw=s(Oa);TYo=r(Qw,"The model class to instantiate is selected based on the "),i_e=n(Qw,"CODE",{});var a_t=s(i_e);MYo=r(a_t,"model_type"),a_t.forEach(t),EYo=r(Qw,` property of the config object (either
passed as an argument or loaded from `),d_e=n(Qw,"CODE",{});var n_t=s(d_e);CYo=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),wYo=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(Qw,"CODE",{});var s_t=s(c_e);AYo=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),yYo=r(Qw,":"),Qw.forEach(t),LYo=i(pa),Kr=n(pa,"UL",{});var rl=s(Kr);L3=n(rl,"LI",{});var x$e=s(L3);f_e=n(x$e,"STRONG",{});var l_t=s(f_e);xYo=r(l_t,"data2vec-audio"),l_t.forEach(t),$Yo=r(x$e," \u2014 "),xX=n(x$e,"A",{href:!0});var i_t=s(xX);kYo=r(i_t,"Data2VecAudioForAudioFrameClassification"),i_t.forEach(t),SYo=r(x$e," (Data2VecAudio model)"),x$e.forEach(t),RYo=i(rl),x3=n(rl,"LI",{});var $$e=s(x3);m_e=n($$e,"STRONG",{});var d_t=s(m_e);PYo=r(d_t,"unispeech-sat"),d_t.forEach(t),BYo=r($$e," \u2014 "),$X=n($$e,"A",{href:!0});var c_t=s($X);IYo=r(c_t,"UniSpeechSatForAudioFrameClassification"),c_t.forEach(t),qYo=r($$e," (UniSpeechSat model)"),$$e.forEach(t),NYo=i(rl),$3=n(rl,"LI",{});var k$e=s($3);g_e=n(k$e,"STRONG",{});var f_t=s(g_e);jYo=r(f_t,"wav2vec2"),f_t.forEach(t),DYo=r(k$e," \u2014 "),kX=n(k$e,"A",{href:!0});var m_t=s(kX);GYo=r(m_t,"Wav2Vec2ForAudioFrameClassification"),m_t.forEach(t),OYo=r(k$e," (Wav2Vec2 model)"),k$e.forEach(t),VYo=i(rl),k3=n(rl,"LI",{});var S$e=s(k3);h_e=n(S$e,"STRONG",{});var g_t=s(h_e);XYo=r(g_t,"wav2vec2-conformer"),g_t.forEach(t),zYo=r(S$e," \u2014 "),SX=n(S$e,"A",{href:!0});var h_t=s(SX);WYo=r(h_t,"Wav2Vec2ConformerForAudioFrameClassification"),h_t.forEach(t),QYo=r(S$e," (Wav2Vec2-Conformer model)"),S$e.forEach(t),HYo=i(rl),S3=n(rl,"LI",{});var R$e=s(S3);p_e=n(R$e,"STRONG",{});var p_t=s(p_e);UYo=r(p_t,"wavlm"),p_t.forEach(t),JYo=r(R$e," \u2014 "),RX=n(R$e,"A",{href:!0});var __t=s(RX);YYo=r(__t,"WavLMForAudioFrameClassification"),__t.forEach(t),KYo=r(R$e," (WavLM model)"),R$e.forEach(t),rl.forEach(t),ZYo=i(pa),R3=n(pa,"P",{});var P$e=s(R3);eKo=r(P$e,"The model is set in evaluation mode by default using "),__e=n(P$e,"CODE",{});var u_t=s(__e);oKo=r(u_t,"model.eval()"),u_t.forEach(t),rKo=r(P$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(P$e,"CODE",{});var b_t=s(u_e);tKo=r(b_t,"model.train()"),b_t.forEach(t),P$e.forEach(t),aKo=i(pa),T(P3.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Oqe=i(f),pd=n(f,"H2",{class:!0});var Wje=s(pd);B3=n(Wje,"A",{id:!0,class:!0,href:!0});var v_t=s(B3);b_e=n(v_t,"SPAN",{});var F_t=s(b_e);T(ly.$$.fragment,F_t),F_t.forEach(t),v_t.forEach(t),nKo=i(Wje),v_e=n(Wje,"SPAN",{});var T_t=s(v_e);sKo=r(T_t,"AutoModelForCTC"),T_t.forEach(t),Wje.forEach(t),Vqe=i(f),Vo=n(f,"DIV",{class:!0});var tl=s(Vo);T(iy.$$.fragment,tl),lKo=i(tl),_d=n(tl,"P",{});var uZ=s(_d);iKo=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PX=n(uZ,"A",{href:!0});var M_t=s(PX);dKo=r(M_t,"from_pretrained()"),M_t.forEach(t),cKo=r(uZ," class method or the "),BX=n(uZ,"A",{href:!0});var E_t=s(BX);fKo=r(E_t,"from_config()"),E_t.forEach(t),mKo=r(uZ,` class
method.`),uZ.forEach(t),gKo=i(tl),dy=n(tl,"P",{});var Qje=s(dy);hKo=r(Qje,"This class cannot be instantiated directly using "),F_e=n(Qje,"CODE",{});var C_t=s(F_e);pKo=r(C_t,"__init__()"),C_t.forEach(t),_Ko=r(Qje," (throws an error)."),Qje.forEach(t),uKo=i(tl),vt=n(tl,"DIV",{class:!0});var Hw=s(vt);T(cy.$$.fragment,Hw),bKo=i(Hw),T_e=n(Hw,"P",{});var w_t=s(T_e);vKo=r(w_t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),w_t.forEach(t),FKo=i(Hw),ud=n(Hw,"P",{});var bZ=s(ud);TKo=r(bZ,`Note:
Loading a model from its configuration file does `),M_e=n(bZ,"STRONG",{});var A_t=s(M_e);MKo=r(A_t,"not"),A_t.forEach(t),EKo=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(bZ,"A",{href:!0});var y_t=s(IX);CKo=r(y_t,"from_pretrained()"),y_t.forEach(t),wKo=r(bZ," to load the model weights."),bZ.forEach(t),AKo=i(Hw),T(I3.$$.fragment,Hw),Hw.forEach(t),yKo=i(tl),mo=n(tl,"DIV",{class:!0});var _a=s(mo);T(fy.$$.fragment,_a),LKo=i(_a),E_e=n(_a,"P",{});var L_t=s(E_e);xKo=r(L_t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),L_t.forEach(t),$Ko=i(_a),Va=n(_a,"P",{});var Uw=s(Va);kKo=r(Uw,"The model class to instantiate is selected based on the "),C_e=n(Uw,"CODE",{});var x_t=s(C_e);SKo=r(x_t,"model_type"),x_t.forEach(t),RKo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),w_e=n(Uw,"CODE",{});var $_t=s(w_e);PKo=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),BKo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A_e=n(Uw,"CODE",{});var k_t=s(A_e);IKo=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),qKo=r(Uw,":"),Uw.forEach(t),NKo=i(_a),Se=n(_a,"UL",{});var Ve=s(Se);q3=n(Ve,"LI",{});var B$e=s(q3);y_e=n(B$e,"STRONG",{});var S_t=s(y_e);jKo=r(S_t,"data2vec-audio"),S_t.forEach(t),DKo=r(B$e," \u2014 "),qX=n(B$e,"A",{href:!0});var R_t=s(qX);GKo=r(R_t,"Data2VecAudioForCTC"),R_t.forEach(t),OKo=r(B$e," (Data2VecAudio model)"),B$e.forEach(t),VKo=i(Ve),N3=n(Ve,"LI",{});var I$e=s(N3);L_e=n(I$e,"STRONG",{});var P_t=s(L_e);XKo=r(P_t,"hubert"),P_t.forEach(t),zKo=r(I$e," \u2014 "),NX=n(I$e,"A",{href:!0});var B_t=s(NX);WKo=r(B_t,"HubertForCTC"),B_t.forEach(t),QKo=r(I$e," (Hubert model)"),I$e.forEach(t),HKo=i(Ve),j3=n(Ve,"LI",{});var q$e=s(j3);x_e=n(q$e,"STRONG",{});var I_t=s(x_e);UKo=r(I_t,"sew"),I_t.forEach(t),JKo=r(q$e," \u2014 "),jX=n(q$e,"A",{href:!0});var q_t=s(jX);YKo=r(q_t,"SEWForCTC"),q_t.forEach(t),KKo=r(q$e," (SEW model)"),q$e.forEach(t),ZKo=i(Ve),D3=n(Ve,"LI",{});var N$e=s(D3);$_e=n(N$e,"STRONG",{});var N_t=s($_e);eZo=r(N_t,"sew-d"),N_t.forEach(t),oZo=r(N$e," \u2014 "),DX=n(N$e,"A",{href:!0});var j_t=s(DX);rZo=r(j_t,"SEWDForCTC"),j_t.forEach(t),tZo=r(N$e," (SEW-D model)"),N$e.forEach(t),aZo=i(Ve),G3=n(Ve,"LI",{});var j$e=s(G3);k_e=n(j$e,"STRONG",{});var D_t=s(k_e);nZo=r(D_t,"unispeech"),D_t.forEach(t),sZo=r(j$e," \u2014 "),GX=n(j$e,"A",{href:!0});var G_t=s(GX);lZo=r(G_t,"UniSpeechForCTC"),G_t.forEach(t),iZo=r(j$e," (UniSpeech model)"),j$e.forEach(t),dZo=i(Ve),O3=n(Ve,"LI",{});var D$e=s(O3);S_e=n(D$e,"STRONG",{});var O_t=s(S_e);cZo=r(O_t,"unispeech-sat"),O_t.forEach(t),fZo=r(D$e," \u2014 "),OX=n(D$e,"A",{href:!0});var V_t=s(OX);mZo=r(V_t,"UniSpeechSatForCTC"),V_t.forEach(t),gZo=r(D$e," (UniSpeechSat model)"),D$e.forEach(t),hZo=i(Ve),V3=n(Ve,"LI",{});var G$e=s(V3);R_e=n(G$e,"STRONG",{});var X_t=s(R_e);pZo=r(X_t,"wav2vec2"),X_t.forEach(t),_Zo=r(G$e," \u2014 "),VX=n(G$e,"A",{href:!0});var z_t=s(VX);uZo=r(z_t,"Wav2Vec2ForCTC"),z_t.forEach(t),bZo=r(G$e," (Wav2Vec2 model)"),G$e.forEach(t),vZo=i(Ve),X3=n(Ve,"LI",{});var O$e=s(X3);P_e=n(O$e,"STRONG",{});var W_t=s(P_e);FZo=r(W_t,"wav2vec2-conformer"),W_t.forEach(t),TZo=r(O$e," \u2014 "),XX=n(O$e,"A",{href:!0});var Q_t=s(XX);MZo=r(Q_t,"Wav2Vec2ConformerForCTC"),Q_t.forEach(t),EZo=r(O$e," (Wav2Vec2-Conformer model)"),O$e.forEach(t),CZo=i(Ve),z3=n(Ve,"LI",{});var V$e=s(z3);B_e=n(V$e,"STRONG",{});var H_t=s(B_e);wZo=r(H_t,"wavlm"),H_t.forEach(t),AZo=r(V$e," \u2014 "),zX=n(V$e,"A",{href:!0});var U_t=s(zX);yZo=r(U_t,"WavLMForCTC"),U_t.forEach(t),LZo=r(V$e," (WavLM model)"),V$e.forEach(t),Ve.forEach(t),xZo=i(_a),W3=n(_a,"P",{});var X$e=s(W3);$Zo=r(X$e,"The model is set in evaluation mode by default using "),I_e=n(X$e,"CODE",{});var J_t=s(I_e);kZo=r(J_t,"model.eval()"),J_t.forEach(t),SZo=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(X$e,"CODE",{});var Y_t=s(q_e);RZo=r(Y_t,"model.train()"),Y_t.forEach(t),X$e.forEach(t),PZo=i(_a),T(Q3.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Xqe=i(f),bd=n(f,"H2",{class:!0});var Hje=s(bd);H3=n(Hje,"A",{id:!0,class:!0,href:!0});var K_t=s(H3);N_e=n(K_t,"SPAN",{});var Z_t=s(N_e);T(my.$$.fragment,Z_t),Z_t.forEach(t),K_t.forEach(t),BZo=i(Hje),j_e=n(Hje,"SPAN",{});var eut=s(j_e);IZo=r(eut,"AutoModelForSpeechSeq2Seq"),eut.forEach(t),Hje.forEach(t),zqe=i(f),Xo=n(f,"DIV",{class:!0});var al=s(Xo);T(gy.$$.fragment,al),qZo=i(al),vd=n(al,"P",{});var vZ=s(vd);NZo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WX=n(vZ,"A",{href:!0});var out=s(WX);jZo=r(out,"from_pretrained()"),out.forEach(t),DZo=r(vZ," class method or the "),QX=n(vZ,"A",{href:!0});var rut=s(QX);GZo=r(rut,"from_config()"),rut.forEach(t),OZo=r(vZ,` class
method.`),vZ.forEach(t),VZo=i(al),hy=n(al,"P",{});var Uje=s(hy);XZo=r(Uje,"This class cannot be instantiated directly using "),D_e=n(Uje,"CODE",{});var tut=s(D_e);zZo=r(tut,"__init__()"),tut.forEach(t),WZo=r(Uje," (throws an error)."),Uje.forEach(t),QZo=i(al),Ft=n(al,"DIV",{class:!0});var Jw=s(Ft);T(py.$$.fragment,Jw),HZo=i(Jw),G_e=n(Jw,"P",{});var aut=s(G_e);UZo=r(aut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),aut.forEach(t),JZo=i(Jw),Fd=n(Jw,"P",{});var FZ=s(Fd);YZo=r(FZ,`Note:
Loading a model from its configuration file does `),O_e=n(FZ,"STRONG",{});var nut=s(O_e);KZo=r(nut,"not"),nut.forEach(t),ZZo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(FZ,"A",{href:!0});var sut=s(HX);eer=r(sut,"from_pretrained()"),sut.forEach(t),oer=r(FZ," to load the model weights."),FZ.forEach(t),rer=i(Jw),T(U3.$$.fragment,Jw),Jw.forEach(t),ter=i(al),go=n(al,"DIV",{class:!0});var ua=s(go);T(_y.$$.fragment,ua),aer=i(ua),V_e=n(ua,"P",{});var lut=s(V_e);ner=r(lut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lut.forEach(t),ser=i(ua),Xa=n(ua,"P",{});var Yw=s(Xa);ler=r(Yw,"The model class to instantiate is selected based on the "),X_e=n(Yw,"CODE",{});var iut=s(X_e);ier=r(iut,"model_type"),iut.forEach(t),der=r(Yw,` property of the config object (either
passed as an argument or loaded from `),z_e=n(Yw,"CODE",{});var dut=s(z_e);cer=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),fer=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(Yw,"CODE",{});var cut=s(W_e);mer=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),ger=r(Yw,":"),Yw.forEach(t),her=i(ua),uy=n(ua,"UL",{});var Jje=s(uy);J3=n(Jje,"LI",{});var z$e=s(J3);Q_e=n(z$e,"STRONG",{});var fut=s(Q_e);per=r(fut,"speech-encoder-decoder"),fut.forEach(t),_er=r(z$e," \u2014 "),UX=n(z$e,"A",{href:!0});var mut=s(UX);uer=r(mut,"SpeechEncoderDecoderModel"),mut.forEach(t),ber=r(z$e," (Speech Encoder decoder model)"),z$e.forEach(t),ver=i(Jje),Y3=n(Jje,"LI",{});var W$e=s(Y3);H_e=n(W$e,"STRONG",{});var gut=s(H_e);Fer=r(gut,"speech_to_text"),gut.forEach(t),Ter=r(W$e," \u2014 "),JX=n(W$e,"A",{href:!0});var hut=s(JX);Mer=r(hut,"Speech2TextForConditionalGeneration"),hut.forEach(t),Eer=r(W$e," (Speech2Text model)"),W$e.forEach(t),Jje.forEach(t),Cer=i(ua),K3=n(ua,"P",{});var Q$e=s(K3);wer=r(Q$e,"The model is set in evaluation mode by default using "),U_e=n(Q$e,"CODE",{});var put=s(U_e);Aer=r(put,"model.eval()"),put.forEach(t),yer=r(Q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=n(Q$e,"CODE",{});var _ut=s(J_e);Ler=r(_ut,"model.train()"),_ut.forEach(t),Q$e.forEach(t),xer=i(ua),T(Z3.$$.fragment,ua),ua.forEach(t),al.forEach(t),Wqe=i(f),Td=n(f,"H2",{class:!0});var Yje=s(Td);eF=n(Yje,"A",{id:!0,class:!0,href:!0});var uut=s(eF);Y_e=n(uut,"SPAN",{});var but=s(Y_e);T(by.$$.fragment,but),but.forEach(t),uut.forEach(t),$er=i(Yje),K_e=n(Yje,"SPAN",{});var vut=s(K_e);ker=r(vut,"AutoModelForAudioXVector"),vut.forEach(t),Yje.forEach(t),Qqe=i(f),zo=n(f,"DIV",{class:!0});var nl=s(zo);T(vy.$$.fragment,nl),Ser=i(nl),Md=n(nl,"P",{});var TZ=s(Md);Rer=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YX=n(TZ,"A",{href:!0});var Fut=s(YX);Per=r(Fut,"from_pretrained()"),Fut.forEach(t),Ber=r(TZ," class method or the "),KX=n(TZ,"A",{href:!0});var Tut=s(KX);Ier=r(Tut,"from_config()"),Tut.forEach(t),qer=r(TZ,` class
method.`),TZ.forEach(t),Ner=i(nl),Fy=n(nl,"P",{});var Kje=s(Fy);jer=r(Kje,"This class cannot be instantiated directly using "),Z_e=n(Kje,"CODE",{});var Mut=s(Z_e);Der=r(Mut,"__init__()"),Mut.forEach(t),Ger=r(Kje," (throws an error)."),Kje.forEach(t),Oer=i(nl),Tt=n(nl,"DIV",{class:!0});var Kw=s(Tt);T(Ty.$$.fragment,Kw),Ver=i(Kw),eue=n(Kw,"P",{});var Eut=s(eue);Xer=r(Eut,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Eut.forEach(t),zer=i(Kw),Ed=n(Kw,"P",{});var MZ=s(Ed);Wer=r(MZ,`Note:
Loading a model from its configuration file does `),oue=n(MZ,"STRONG",{});var Cut=s(oue);Qer=r(Cut,"not"),Cut.forEach(t),Her=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(MZ,"A",{href:!0});var wut=s(ZX);Uer=r(wut,"from_pretrained()"),wut.forEach(t),Jer=r(MZ," to load the model weights."),MZ.forEach(t),Yer=i(Kw),T(oF.$$.fragment,Kw),Kw.forEach(t),Ker=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(My.$$.fragment,ba),Zer=i(ba),rue=n(ba,"P",{});var Aut=s(rue);eor=r(Aut,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Aut.forEach(t),oor=i(ba),za=n(ba,"P",{});var Zw=s(za);ror=r(Zw,"The model class to instantiate is selected based on the "),tue=n(Zw,"CODE",{});var yut=s(tue);tor=r(yut,"model_type"),yut.forEach(t),aor=r(Zw,` property of the config object (either
passed as an argument or loaded from `),aue=n(Zw,"CODE",{});var Lut=s(aue);nor=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),sor=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(Zw,"CODE",{});var xut=s(nue);lor=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),ior=r(Zw,":"),Zw.forEach(t),dor=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);rF=n(sl,"LI",{});var H$e=s(rF);sue=n(H$e,"STRONG",{});var $ut=s(sue);cor=r($ut,"data2vec-audio"),$ut.forEach(t),mor=r(H$e," \u2014 "),ez=n(H$e,"A",{href:!0});var kut=s(ez);gor=r(kut,"Data2VecAudioForXVector"),kut.forEach(t),hor=r(H$e," (Data2VecAudio model)"),H$e.forEach(t),por=i(sl),tF=n(sl,"LI",{});var U$e=s(tF);lue=n(U$e,"STRONG",{});var Sut=s(lue);_or=r(Sut,"unispeech-sat"),Sut.forEach(t),uor=r(U$e," \u2014 "),oz=n(U$e,"A",{href:!0});var Rut=s(oz);bor=r(Rut,"UniSpeechSatForXVector"),Rut.forEach(t),vor=r(U$e," (UniSpeechSat model)"),U$e.forEach(t),For=i(sl),aF=n(sl,"LI",{});var J$e=s(aF);iue=n(J$e,"STRONG",{});var Put=s(iue);Tor=r(Put,"wav2vec2"),Put.forEach(t),Mor=r(J$e," \u2014 "),rz=n(J$e,"A",{href:!0});var But=s(rz);Eor=r(But,"Wav2Vec2ForXVector"),But.forEach(t),Cor=r(J$e," (Wav2Vec2 model)"),J$e.forEach(t),wor=i(sl),nF=n(sl,"LI",{});var Y$e=s(nF);due=n(Y$e,"STRONG",{});var Iut=s(due);Aor=r(Iut,"wav2vec2-conformer"),Iut.forEach(t),yor=r(Y$e," \u2014 "),tz=n(Y$e,"A",{href:!0});var qut=s(tz);Lor=r(qut,"Wav2Vec2ConformerForXVector"),qut.forEach(t),xor=r(Y$e," (Wav2Vec2-Conformer model)"),Y$e.forEach(t),$or=i(sl),sF=n(sl,"LI",{});var K$e=s(sF);cue=n(K$e,"STRONG",{});var Nut=s(cue);kor=r(Nut,"wavlm"),Nut.forEach(t),Sor=r(K$e," \u2014 "),az=n(K$e,"A",{href:!0});var jut=s(az);Ror=r(jut,"WavLMForXVector"),jut.forEach(t),Por=r(K$e," (WavLM model)"),K$e.forEach(t),sl.forEach(t),Bor=i(ba),lF=n(ba,"P",{});var Z$e=s(lF);Ior=r(Z$e,"The model is set in evaluation mode by default using "),fue=n(Z$e,"CODE",{});var Dut=s(fue);qor=r(Dut,"model.eval()"),Dut.forEach(t),Nor=r(Z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=n(Z$e,"CODE",{});var Gut=s(mue);jor=r(Gut,"model.train()"),Gut.forEach(t),Z$e.forEach(t),Dor=i(ba),T(iF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Hqe=i(f),Cd=n(f,"H2",{class:!0});var Zje=s(Cd);dF=n(Zje,"A",{id:!0,class:!0,href:!0});var Out=s(dF);gue=n(Out,"SPAN",{});var Vut=s(gue);T(Ey.$$.fragment,Vut),Vut.forEach(t),Out.forEach(t),Gor=i(Zje),hue=n(Zje,"SPAN",{});var Xut=s(hue);Oor=r(Xut,"AutoModelForMaskedImageModeling"),Xut.forEach(t),Zje.forEach(t),Uqe=i(f),Wo=n(f,"DIV",{class:!0});var ll=s(Wo);T(Cy.$$.fragment,ll),Vor=i(ll),wd=n(ll,"P",{});var EZ=s(wd);Xor=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nz=n(EZ,"A",{href:!0});var zut=s(nz);zor=r(zut,"from_pretrained()"),zut.forEach(t),Wor=r(EZ," class method or the "),sz=n(EZ,"A",{href:!0});var Wut=s(sz);Qor=r(Wut,"from_config()"),Wut.forEach(t),Hor=r(EZ,` class
method.`),EZ.forEach(t),Uor=i(ll),wy=n(ll,"P",{});var eDe=s(wy);Jor=r(eDe,"This class cannot be instantiated directly using "),pue=n(eDe,"CODE",{});var Qut=s(pue);Yor=r(Qut,"__init__()"),Qut.forEach(t),Kor=r(eDe," (throws an error)."),eDe.forEach(t),Zor=i(ll),Mt=n(ll,"DIV",{class:!0});var e0=s(Mt);T(Ay.$$.fragment,e0),err=i(e0),_ue=n(e0,"P",{});var Hut=s(_ue);orr=r(Hut,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Hut.forEach(t),rrr=i(e0),Ad=n(e0,"P",{});var CZ=s(Ad);trr=r(CZ,`Note:
Loading a model from its configuration file does `),uue=n(CZ,"STRONG",{});var Uut=s(uue);arr=r(Uut,"not"),Uut.forEach(t),nrr=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(CZ,"A",{href:!0});var Jut=s(lz);srr=r(Jut,"from_pretrained()"),Jut.forEach(t),lrr=r(CZ," to load the model weights."),CZ.forEach(t),irr=i(e0),T(cF.$$.fragment,e0),e0.forEach(t),drr=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(yy.$$.fragment,va),crr=i(va),bue=n(va,"P",{});var Yut=s(bue);frr=r(Yut,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Yut.forEach(t),mrr=i(va),Wa=n(va,"P",{});var o0=s(Wa);grr=r(o0,"The model class to instantiate is selected based on the "),vue=n(o0,"CODE",{});var Kut=s(vue);hrr=r(Kut,"model_type"),Kut.forEach(t),prr=r(o0,` property of the config object (either
passed as an argument or loaded from `),Fue=n(o0,"CODE",{});var Zut=s(Fue);_rr=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),urr=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(o0,"CODE",{});var e1t=s(Tue);brr=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),vrr=r(o0,":"),o0.forEach(t),Frr=i(va),yd=n(va,"UL",{});var wZ=s(yd);fF=n(wZ,"LI",{});var eke=s(fF);Mue=n(eke,"STRONG",{});var o1t=s(Mue);Trr=r(o1t,"deit"),o1t.forEach(t),Mrr=r(eke," \u2014 "),iz=n(eke,"A",{href:!0});var r1t=s(iz);Err=r(r1t,"DeiTForMaskedImageModeling"),r1t.forEach(t),Crr=r(eke," (DeiT model)"),eke.forEach(t),wrr=i(wZ),mF=n(wZ,"LI",{});var oke=s(mF);Eue=n(oke,"STRONG",{});var t1t=s(Eue);Arr=r(t1t,"swin"),t1t.forEach(t),yrr=r(oke," \u2014 "),dz=n(oke,"A",{href:!0});var a1t=s(dz);Lrr=r(a1t,"SwinForMaskedImageModeling"),a1t.forEach(t),xrr=r(oke," (Swin model)"),oke.forEach(t),$rr=i(wZ),gF=n(wZ,"LI",{});var rke=s(gF);Cue=n(rke,"STRONG",{});var n1t=s(Cue);krr=r(n1t,"vit"),n1t.forEach(t),Srr=r(rke," \u2014 "),cz=n(rke,"A",{href:!0});var s1t=s(cz);Rrr=r(s1t,"ViTForMaskedImageModeling"),s1t.forEach(t),Prr=r(rke," (ViT model)"),rke.forEach(t),wZ.forEach(t),Brr=i(va),hF=n(va,"P",{});var tke=s(hF);Irr=r(tke,"The model is set in evaluation mode by default using "),wue=n(tke,"CODE",{});var l1t=s(wue);qrr=r(l1t,"model.eval()"),l1t.forEach(t),Nrr=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Aue=n(tke,"CODE",{});var i1t=s(Aue);jrr=r(i1t,"model.train()"),i1t.forEach(t),tke.forEach(t),Drr=i(va),T(pF.$$.fragment,va),va.forEach(t),ll.forEach(t),Jqe=i(f),Ld=n(f,"H2",{class:!0});var oDe=s(Ld);_F=n(oDe,"A",{id:!0,class:!0,href:!0});var d1t=s(_F);yue=n(d1t,"SPAN",{});var c1t=s(yue);T(Ly.$$.fragment,c1t),c1t.forEach(t),d1t.forEach(t),Grr=i(oDe),Lue=n(oDe,"SPAN",{});var f1t=s(Lue);Orr=r(f1t,"AutoModelForObjectDetection"),f1t.forEach(t),oDe.forEach(t),Yqe=i(f),Qo=n(f,"DIV",{class:!0});var il=s(Qo);T(xy.$$.fragment,il),Vrr=i(il),xd=n(il,"P",{});var AZ=s(xd);Xrr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),fz=n(AZ,"A",{href:!0});var m1t=s(fz);zrr=r(m1t,"from_pretrained()"),m1t.forEach(t),Wrr=r(AZ," class method or the "),mz=n(AZ,"A",{href:!0});var g1t=s(mz);Qrr=r(g1t,"from_config()"),g1t.forEach(t),Hrr=r(AZ,` class
method.`),AZ.forEach(t),Urr=i(il),$y=n(il,"P",{});var rDe=s($y);Jrr=r(rDe,"This class cannot be instantiated directly using "),xue=n(rDe,"CODE",{});var h1t=s(xue);Yrr=r(h1t,"__init__()"),h1t.forEach(t),Krr=r(rDe," (throws an error)."),rDe.forEach(t),Zrr=i(il),Et=n(il,"DIV",{class:!0});var r0=s(Et);T(ky.$$.fragment,r0),etr=i(r0),$ue=n(r0,"P",{});var p1t=s($ue);otr=r(p1t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),p1t.forEach(t),rtr=i(r0),$d=n(r0,"P",{});var yZ=s($d);ttr=r(yZ,`Note:
Loading a model from its configuration file does `),kue=n(yZ,"STRONG",{});var _1t=s(kue);atr=r(_1t,"not"),_1t.forEach(t),ntr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=n(yZ,"A",{href:!0});var u1t=s(gz);str=r(u1t,"from_pretrained()"),u1t.forEach(t),ltr=r(yZ," to load the model weights."),yZ.forEach(t),itr=i(r0),T(uF.$$.fragment,r0),r0.forEach(t),dtr=i(il),_o=n(il,"DIV",{class:!0});var Fa=s(_o);T(Sy.$$.fragment,Fa),ctr=i(Fa),Sue=n(Fa,"P",{});var b1t=s(Sue);ftr=r(b1t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),b1t.forEach(t),mtr=i(Fa),Qa=n(Fa,"P",{});var t0=s(Qa);gtr=r(t0,"The model class to instantiate is selected based on the "),Rue=n(t0,"CODE",{});var v1t=s(Rue);htr=r(v1t,"model_type"),v1t.forEach(t),ptr=r(t0,` property of the config object (either
passed as an argument or loaded from `),Pue=n(t0,"CODE",{});var F1t=s(Pue);_tr=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),utr=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(t0,"CODE",{});var T1t=s(Bue);btr=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),vtr=r(t0,":"),t0.forEach(t),Ftr=i(Fa),Ry=n(Fa,"UL",{});var tDe=s(Ry);bF=n(tDe,"LI",{});var ake=s(bF);Iue=n(ake,"STRONG",{});var M1t=s(Iue);Ttr=r(M1t,"detr"),M1t.forEach(t),Mtr=r(ake," \u2014 "),hz=n(ake,"A",{href:!0});var E1t=s(hz);Etr=r(E1t,"DetrForObjectDetection"),E1t.forEach(t),Ctr=r(ake," (DETR model)"),ake.forEach(t),wtr=i(tDe),vF=n(tDe,"LI",{});var nke=s(vF);que=n(nke,"STRONG",{});var C1t=s(que);Atr=r(C1t,"yolos"),C1t.forEach(t),ytr=r(nke," \u2014 "),pz=n(nke,"A",{href:!0});var w1t=s(pz);Ltr=r(w1t,"YolosForObjectDetection"),w1t.forEach(t),xtr=r(nke," (YOLOS model)"),nke.forEach(t),tDe.forEach(t),$tr=i(Fa),FF=n(Fa,"P",{});var ske=s(FF);ktr=r(ske,"The model is set in evaluation mode by default using "),Nue=n(ske,"CODE",{});var A1t=s(Nue);Str=r(A1t,"model.eval()"),A1t.forEach(t),Rtr=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jue=n(ske,"CODE",{});var y1t=s(jue);Ptr=r(y1t,"model.train()"),y1t.forEach(t),ske.forEach(t),Btr=i(Fa),T(TF.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Kqe=i(f),kd=n(f,"H2",{class:!0});var aDe=s(kd);MF=n(aDe,"A",{id:!0,class:!0,href:!0});var L1t=s(MF);Due=n(L1t,"SPAN",{});var x1t=s(Due);T(Py.$$.fragment,x1t),x1t.forEach(t),L1t.forEach(t),Itr=i(aDe),Gue=n(aDe,"SPAN",{});var $1t=s(Gue);qtr=r($1t,"AutoModelForImageSegmentation"),$1t.forEach(t),aDe.forEach(t),Zqe=i(f),Ho=n(f,"DIV",{class:!0});var dl=s(Ho);T(By.$$.fragment,dl),Ntr=i(dl),Sd=n(dl,"P",{});var LZ=s(Sd);jtr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_z=n(LZ,"A",{href:!0});var k1t=s(_z);Dtr=r(k1t,"from_pretrained()"),k1t.forEach(t),Gtr=r(LZ," class method or the "),uz=n(LZ,"A",{href:!0});var S1t=s(uz);Otr=r(S1t,"from_config()"),S1t.forEach(t),Vtr=r(LZ,` class
method.`),LZ.forEach(t),Xtr=i(dl),Iy=n(dl,"P",{});var nDe=s(Iy);ztr=r(nDe,"This class cannot be instantiated directly using "),Oue=n(nDe,"CODE",{});var R1t=s(Oue);Wtr=r(R1t,"__init__()"),R1t.forEach(t),Qtr=r(nDe," (throws an error)."),nDe.forEach(t),Htr=i(dl),Ct=n(dl,"DIV",{class:!0});var a0=s(Ct);T(qy.$$.fragment,a0),Utr=i(a0),Vue=n(a0,"P",{});var P1t=s(Vue);Jtr=r(P1t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),P1t.forEach(t),Ytr=i(a0),Rd=n(a0,"P",{});var xZ=s(Rd);Ktr=r(xZ,`Note:
Loading a model from its configuration file does `),Xue=n(xZ,"STRONG",{});var B1t=s(Xue);Ztr=r(B1t,"not"),B1t.forEach(t),ear=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(xZ,"A",{href:!0});var I1t=s(bz);oar=r(I1t,"from_pretrained()"),I1t.forEach(t),rar=r(xZ," to load the model weights."),xZ.forEach(t),tar=i(a0),T(EF.$$.fragment,a0),a0.forEach(t),aar=i(dl),uo=n(dl,"DIV",{class:!0});var Ta=s(uo);T(Ny.$$.fragment,Ta),nar=i(Ta),zue=n(Ta,"P",{});var q1t=s(zue);sar=r(q1t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),q1t.forEach(t),lar=i(Ta),Ha=n(Ta,"P",{});var n0=s(Ha);iar=r(n0,"The model class to instantiate is selected based on the "),Wue=n(n0,"CODE",{});var N1t=s(Wue);dar=r(N1t,"model_type"),N1t.forEach(t),car=r(n0,` property of the config object (either
passed as an argument or loaded from `),Que=n(n0,"CODE",{});var j1t=s(Que);far=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),mar=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(n0,"CODE",{});var D1t=s(Hue);gar=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),har=r(n0,":"),n0.forEach(t),par=i(Ta),Uue=n(Ta,"UL",{});var G1t=s(Uue);CF=n(G1t,"LI",{});var lke=s(CF);Jue=n(lke,"STRONG",{});var O1t=s(Jue);_ar=r(O1t,"detr"),O1t.forEach(t),uar=r(lke," \u2014 "),vz=n(lke,"A",{href:!0});var V1t=s(vz);bar=r(V1t,"DetrForSegmentation"),V1t.forEach(t),Far=r(lke," (DETR model)"),lke.forEach(t),G1t.forEach(t),Tar=i(Ta),wF=n(Ta,"P",{});var ike=s(wF);Mar=r(ike,"The model is set in evaluation mode by default using "),Yue=n(ike,"CODE",{});var X1t=s(Yue);Ear=r(X1t,"model.eval()"),X1t.forEach(t),Car=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kue=n(ike,"CODE",{});var z1t=s(Kue);war=r(z1t,"model.train()"),z1t.forEach(t),ike.forEach(t),Aar=i(Ta),T(AF.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),eNe=i(f),Pd=n(f,"H2",{class:!0});var sDe=s(Pd);yF=n(sDe,"A",{id:!0,class:!0,href:!0});var W1t=s(yF);Zue=n(W1t,"SPAN",{});var Q1t=s(Zue);T(jy.$$.fragment,Q1t),Q1t.forEach(t),W1t.forEach(t),yar=i(sDe),e1e=n(sDe,"SPAN",{});var H1t=s(e1e);Lar=r(H1t,"AutoModelForSemanticSegmentation"),H1t.forEach(t),sDe.forEach(t),oNe=i(f),Uo=n(f,"DIV",{class:!0});var cl=s(Uo);T(Dy.$$.fragment,cl),xar=i(cl),Bd=n(cl,"P",{});var $Z=s(Bd);$ar=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Fz=n($Z,"A",{href:!0});var U1t=s(Fz);kar=r(U1t,"from_pretrained()"),U1t.forEach(t),Sar=r($Z," class method or the "),Tz=n($Z,"A",{href:!0});var J1t=s(Tz);Rar=r(J1t,"from_config()"),J1t.forEach(t),Par=r($Z,` class
method.`),$Z.forEach(t),Bar=i(cl),Gy=n(cl,"P",{});var lDe=s(Gy);Iar=r(lDe,"This class cannot be instantiated directly using "),o1e=n(lDe,"CODE",{});var Y1t=s(o1e);qar=r(Y1t,"__init__()"),Y1t.forEach(t),Nar=r(lDe," (throws an error)."),lDe.forEach(t),jar=i(cl),wt=n(cl,"DIV",{class:!0});var s0=s(wt);T(Oy.$$.fragment,s0),Dar=i(s0),r1e=n(s0,"P",{});var K1t=s(r1e);Gar=r(K1t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),K1t.forEach(t),Oar=i(s0),Id=n(s0,"P",{});var kZ=s(Id);Var=r(kZ,`Note:
Loading a model from its configuration file does `),t1e=n(kZ,"STRONG",{});var Z1t=s(t1e);Xar=r(Z1t,"not"),Z1t.forEach(t),zar=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(kZ,"A",{href:!0});var e7t=s(Mz);War=r(e7t,"from_pretrained()"),e7t.forEach(t),Qar=r(kZ," to load the model weights."),kZ.forEach(t),Har=i(s0),T(LF.$$.fragment,s0),s0.forEach(t),Uar=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(Vy.$$.fragment,Ma),Jar=i(Ma),a1e=n(Ma,"P",{});var o7t=s(a1e);Yar=r(o7t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),o7t.forEach(t),Kar=i(Ma),Ua=n(Ma,"P",{});var l0=s(Ua);Zar=r(l0,"The model class to instantiate is selected based on the "),n1e=n(l0,"CODE",{});var r7t=s(n1e);enr=r(r7t,"model_type"),r7t.forEach(t),onr=r(l0,` property of the config object (either
passed as an argument or loaded from `),s1e=n(l0,"CODE",{});var t7t=s(s1e);rnr=r(t7t,"pretrained_model_name_or_path"),t7t.forEach(t),tnr=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(l0,"CODE",{});var a7t=s(l1e);anr=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),nnr=r(l0,":"),l0.forEach(t),snr=i(Ma),Ja=n(Ma,"UL",{});var i0=s(Ja);xF=n(i0,"LI",{});var dke=s(xF);i1e=n(dke,"STRONG",{});var n7t=s(i1e);lnr=r(n7t,"beit"),n7t.forEach(t),inr=r(dke," \u2014 "),Ez=n(dke,"A",{href:!0});var s7t=s(Ez);dnr=r(s7t,"BeitForSemanticSegmentation"),s7t.forEach(t),cnr=r(dke," (BEiT model)"),dke.forEach(t),fnr=i(i0),$F=n(i0,"LI",{});var cke=s($F);d1e=n(cke,"STRONG",{});var l7t=s(d1e);mnr=r(l7t,"data2vec-vision"),l7t.forEach(t),gnr=r(cke," \u2014 "),Cz=n(cke,"A",{href:!0});var i7t=s(Cz);hnr=r(i7t,"Data2VecVisionForSemanticSegmentation"),i7t.forEach(t),pnr=r(cke," (Data2VecVision model)"),cke.forEach(t),_nr=i(i0),kF=n(i0,"LI",{});var fke=s(kF);c1e=n(fke,"STRONG",{});var d7t=s(c1e);unr=r(d7t,"dpt"),d7t.forEach(t),bnr=r(fke," \u2014 "),wz=n(fke,"A",{href:!0});var c7t=s(wz);vnr=r(c7t,"DPTForSemanticSegmentation"),c7t.forEach(t),Fnr=r(fke," (DPT model)"),fke.forEach(t),Tnr=i(i0),SF=n(i0,"LI",{});var mke=s(SF);f1e=n(mke,"STRONG",{});var f7t=s(f1e);Mnr=r(f7t,"segformer"),f7t.forEach(t),Enr=r(mke," \u2014 "),Az=n(mke,"A",{href:!0});var m7t=s(Az);Cnr=r(m7t,"SegformerForSemanticSegmentation"),m7t.forEach(t),wnr=r(mke," (SegFormer model)"),mke.forEach(t),i0.forEach(t),Anr=i(Ma),RF=n(Ma,"P",{});var gke=s(RF);ynr=r(gke,"The model is set in evaluation mode by default using "),m1e=n(gke,"CODE",{});var g7t=s(m1e);Lnr=r(g7t,"model.eval()"),g7t.forEach(t),xnr=r(gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=n(gke,"CODE",{});var h7t=s(g1e);$nr=r(h7t,"model.train()"),h7t.forEach(t),gke.forEach(t),knr=i(Ma),T(PF.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),rNe=i(f),qd=n(f,"H2",{class:!0});var iDe=s(qd);BF=n(iDe,"A",{id:!0,class:!0,href:!0});var p7t=s(BF);h1e=n(p7t,"SPAN",{});var _7t=s(h1e);T(Xy.$$.fragment,_7t),_7t.forEach(t),p7t.forEach(t),Snr=i(iDe),p1e=n(iDe,"SPAN",{});var u7t=s(p1e);Rnr=r(u7t,"AutoModelForInstanceSegmentation"),u7t.forEach(t),iDe.forEach(t),tNe=i(f),Jo=n(f,"DIV",{class:!0});var fl=s(Jo);T(zy.$$.fragment,fl),Pnr=i(fl),Nd=n(fl,"P",{});var SZ=s(Nd);Bnr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yz=n(SZ,"A",{href:!0});var b7t=s(yz);Inr=r(b7t,"from_pretrained()"),b7t.forEach(t),qnr=r(SZ," class method or the "),Lz=n(SZ,"A",{href:!0});var v7t=s(Lz);Nnr=r(v7t,"from_config()"),v7t.forEach(t),jnr=r(SZ,` class
method.`),SZ.forEach(t),Dnr=i(fl),Wy=n(fl,"P",{});var dDe=s(Wy);Gnr=r(dDe,"This class cannot be instantiated directly using "),_1e=n(dDe,"CODE",{});var F7t=s(_1e);Onr=r(F7t,"__init__()"),F7t.forEach(t),Vnr=r(dDe," (throws an error)."),dDe.forEach(t),Xnr=i(fl),At=n(fl,"DIV",{class:!0});var d0=s(At);T(Qy.$$.fragment,d0),znr=i(d0),u1e=n(d0,"P",{});var T7t=s(u1e);Wnr=r(T7t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),T7t.forEach(t),Qnr=i(d0),jd=n(d0,"P",{});var RZ=s(jd);Hnr=r(RZ,`Note:
Loading a model from its configuration file does `),b1e=n(RZ,"STRONG",{});var M7t=s(b1e);Unr=r(M7t,"not"),M7t.forEach(t),Jnr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(RZ,"A",{href:!0});var E7t=s(xz);Ynr=r(E7t,"from_pretrained()"),E7t.forEach(t),Knr=r(RZ," to load the model weights."),RZ.forEach(t),Znr=i(d0),T(IF.$$.fragment,d0),d0.forEach(t),esr=i(fl),vo=n(fl,"DIV",{class:!0});var Ea=s(vo);T(Hy.$$.fragment,Ea),osr=i(Ea),v1e=n(Ea,"P",{});var C7t=s(v1e);rsr=r(C7t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),C7t.forEach(t),tsr=i(Ea),Ya=n(Ea,"P",{});var c0=s(Ya);asr=r(c0,"The model class to instantiate is selected based on the "),F1e=n(c0,"CODE",{});var w7t=s(F1e);nsr=r(w7t,"model_type"),w7t.forEach(t),ssr=r(c0,` property of the config object (either
passed as an argument or loaded from `),T1e=n(c0,"CODE",{});var A7t=s(T1e);lsr=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),isr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(c0,"CODE",{});var y7t=s(M1e);dsr=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),csr=r(c0,":"),c0.forEach(t),fsr=i(Ea),E1e=n(Ea,"UL",{});var L7t=s(E1e);qF=n(L7t,"LI",{});var hke=s(qF);C1e=n(hke,"STRONG",{});var x7t=s(C1e);msr=r(x7t,"maskformer"),x7t.forEach(t),gsr=r(hke," \u2014 "),$z=n(hke,"A",{href:!0});var $7t=s($z);hsr=r($7t,"MaskFormerForInstanceSegmentation"),$7t.forEach(t),psr=r(hke," (MaskFormer model)"),hke.forEach(t),L7t.forEach(t),_sr=i(Ea),NF=n(Ea,"P",{});var pke=s(NF);usr=r(pke,"The model is set in evaluation mode by default using "),w1e=n(pke,"CODE",{});var k7t=s(w1e);bsr=r(k7t,"model.eval()"),k7t.forEach(t),vsr=r(pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A1e=n(pke,"CODE",{});var S7t=s(A1e);Fsr=r(S7t,"model.train()"),S7t.forEach(t),pke.forEach(t),Tsr=i(Ea),T(jF.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),aNe=i(f),Dd=n(f,"H2",{class:!0});var cDe=s(Dd);DF=n(cDe,"A",{id:!0,class:!0,href:!0});var R7t=s(DF);y1e=n(R7t,"SPAN",{});var P7t=s(y1e);T(Uy.$$.fragment,P7t),P7t.forEach(t),R7t.forEach(t),Msr=i(cDe),L1e=n(cDe,"SPAN",{});var B7t=s(L1e);Esr=r(B7t,"TFAutoModel"),B7t.forEach(t),cDe.forEach(t),nNe=i(f),Yo=n(f,"DIV",{class:!0});var ml=s(Yo);T(Jy.$$.fragment,ml),Csr=i(ml),Gd=n(ml,"P",{});var PZ=s(Gd);wsr=r(PZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kz=n(PZ,"A",{href:!0});var I7t=s(kz);Asr=r(I7t,"from_pretrained()"),I7t.forEach(t),ysr=r(PZ," class method or the "),Sz=n(PZ,"A",{href:!0});var q7t=s(Sz);Lsr=r(q7t,"from_config()"),q7t.forEach(t),xsr=r(PZ,` class
method.`),PZ.forEach(t),$sr=i(ml),Yy=n(ml,"P",{});var fDe=s(Yy);ksr=r(fDe,"This class cannot be instantiated directly using "),x1e=n(fDe,"CODE",{});var N7t=s(x1e);Ssr=r(N7t,"__init__()"),N7t.forEach(t),Rsr=r(fDe," (throws an error)."),fDe.forEach(t),Psr=i(ml),yt=n(ml,"DIV",{class:!0});var f0=s(yt);T(Ky.$$.fragment,f0),Bsr=i(f0),$1e=n(f0,"P",{});var j7t=s($1e);Isr=r(j7t,"Instantiates one of the base model classes of the library from a configuration."),j7t.forEach(t),qsr=i(f0),Od=n(f0,"P",{});var BZ=s(Od);Nsr=r(BZ,`Note:
Loading a model from its configuration file does `),k1e=n(BZ,"STRONG",{});var D7t=s(k1e);jsr=r(D7t,"not"),D7t.forEach(t),Dsr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(BZ,"A",{href:!0});var G7t=s(Rz);Gsr=r(G7t,"from_pretrained()"),G7t.forEach(t),Osr=r(BZ," to load the model weights."),BZ.forEach(t),Vsr=i(f0),T(GF.$$.fragment,f0),f0.forEach(t),Xsr=i(ml),wr=n(ml,"DIV",{class:!0});var gl=s(wr);T(Zy.$$.fragment,gl),zsr=i(gl),S1e=n(gl,"P",{});var O7t=s(S1e);Wsr=r(O7t,"Instantiate one of the base model classes of the library from a pretrained model."),O7t.forEach(t),Qsr=i(gl),Ka=n(gl,"P",{});var m0=s(Ka);Hsr=r(m0,"The model class to instantiate is selected based on the "),R1e=n(m0,"CODE",{});var V7t=s(R1e);Usr=r(V7t,"model_type"),V7t.forEach(t),Jsr=r(m0,` property of the config object (either
passed as an argument or loaded from `),P1e=n(m0,"CODE",{});var X7t=s(P1e);Ysr=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),Ksr=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=n(m0,"CODE",{});var z7t=s(B1e);Zsr=r(z7t,"pretrained_model_name_or_path"),z7t.forEach(t),elr=r(m0,":"),m0.forEach(t),olr=i(gl),N=n(gl,"UL",{});var D=s(N);OF=n(D,"LI",{});var _ke=s(OF);I1e=n(_ke,"STRONG",{});var W7t=s(I1e);rlr=r(W7t,"albert"),W7t.forEach(t),tlr=r(_ke," \u2014 "),Pz=n(_ke,"A",{href:!0});var Q7t=s(Pz);alr=r(Q7t,"TFAlbertModel"),Q7t.forEach(t),nlr=r(_ke," (ALBERT model)"),_ke.forEach(t),slr=i(D),VF=n(D,"LI",{});var uke=s(VF);q1e=n(uke,"STRONG",{});var H7t=s(q1e);llr=r(H7t,"bart"),H7t.forEach(t),ilr=r(uke," \u2014 "),Bz=n(uke,"A",{href:!0});var U7t=s(Bz);dlr=r(U7t,"TFBartModel"),U7t.forEach(t),clr=r(uke," (BART model)"),uke.forEach(t),flr=i(D),XF=n(D,"LI",{});var bke=s(XF);N1e=n(bke,"STRONG",{});var J7t=s(N1e);mlr=r(J7t,"bert"),J7t.forEach(t),glr=r(bke," \u2014 "),Iz=n(bke,"A",{href:!0});var Y7t=s(Iz);hlr=r(Y7t,"TFBertModel"),Y7t.forEach(t),plr=r(bke," (BERT model)"),bke.forEach(t),_lr=i(D),zF=n(D,"LI",{});var vke=s(zF);j1e=n(vke,"STRONG",{});var K7t=s(j1e);ulr=r(K7t,"blenderbot"),K7t.forEach(t),blr=r(vke," \u2014 "),qz=n(vke,"A",{href:!0});var Z7t=s(qz);vlr=r(Z7t,"TFBlenderbotModel"),Z7t.forEach(t),Flr=r(vke," (Blenderbot model)"),vke.forEach(t),Tlr=i(D),WF=n(D,"LI",{});var Fke=s(WF);D1e=n(Fke,"STRONG",{});var ebt=s(D1e);Mlr=r(ebt,"blenderbot-small"),ebt.forEach(t),Elr=r(Fke," \u2014 "),Nz=n(Fke,"A",{href:!0});var obt=s(Nz);Clr=r(obt,"TFBlenderbotSmallModel"),obt.forEach(t),wlr=r(Fke," (BlenderbotSmall model)"),Fke.forEach(t),Alr=i(D),QF=n(D,"LI",{});var Tke=s(QF);G1e=n(Tke,"STRONG",{});var rbt=s(G1e);ylr=r(rbt,"camembert"),rbt.forEach(t),Llr=r(Tke," \u2014 "),jz=n(Tke,"A",{href:!0});var tbt=s(jz);xlr=r(tbt,"TFCamembertModel"),tbt.forEach(t),$lr=r(Tke," (CamemBERT model)"),Tke.forEach(t),klr=i(D),HF=n(D,"LI",{});var Mke=s(HF);O1e=n(Mke,"STRONG",{});var abt=s(O1e);Slr=r(abt,"clip"),abt.forEach(t),Rlr=r(Mke," \u2014 "),Dz=n(Mke,"A",{href:!0});var nbt=s(Dz);Plr=r(nbt,"TFCLIPModel"),nbt.forEach(t),Blr=r(Mke," (CLIP model)"),Mke.forEach(t),Ilr=i(D),UF=n(D,"LI",{});var Eke=s(UF);V1e=n(Eke,"STRONG",{});var sbt=s(V1e);qlr=r(sbt,"convbert"),sbt.forEach(t),Nlr=r(Eke," \u2014 "),Gz=n(Eke,"A",{href:!0});var lbt=s(Gz);jlr=r(lbt,"TFConvBertModel"),lbt.forEach(t),Dlr=r(Eke," (ConvBERT model)"),Eke.forEach(t),Glr=i(D),JF=n(D,"LI",{});var Cke=s(JF);X1e=n(Cke,"STRONG",{});var ibt=s(X1e);Olr=r(ibt,"convnext"),ibt.forEach(t),Vlr=r(Cke," \u2014 "),Oz=n(Cke,"A",{href:!0});var dbt=s(Oz);Xlr=r(dbt,"TFConvNextModel"),dbt.forEach(t),zlr=r(Cke," (ConvNext model)"),Cke.forEach(t),Wlr=i(D),YF=n(D,"LI",{});var wke=s(YF);z1e=n(wke,"STRONG",{});var cbt=s(z1e);Qlr=r(cbt,"ctrl"),cbt.forEach(t),Hlr=r(wke," \u2014 "),Vz=n(wke,"A",{href:!0});var fbt=s(Vz);Ulr=r(fbt,"TFCTRLModel"),fbt.forEach(t),Jlr=r(wke," (CTRL model)"),wke.forEach(t),Ylr=i(D),KF=n(D,"LI",{});var Ake=s(KF);W1e=n(Ake,"STRONG",{});var mbt=s(W1e);Klr=r(mbt,"data2vec-vision"),mbt.forEach(t),Zlr=r(Ake," \u2014 "),Xz=n(Ake,"A",{href:!0});var gbt=s(Xz);eir=r(gbt,"TFData2VecVisionModel"),gbt.forEach(t),oir=r(Ake," (Data2VecVision model)"),Ake.forEach(t),rir=i(D),ZF=n(D,"LI",{});var yke=s(ZF);Q1e=n(yke,"STRONG",{});var hbt=s(Q1e);tir=r(hbt,"deberta"),hbt.forEach(t),air=r(yke," \u2014 "),zz=n(yke,"A",{href:!0});var pbt=s(zz);nir=r(pbt,"TFDebertaModel"),pbt.forEach(t),sir=r(yke," (DeBERTa model)"),yke.forEach(t),lir=i(D),eT=n(D,"LI",{});var Lke=s(eT);H1e=n(Lke,"STRONG",{});var _bt=s(H1e);iir=r(_bt,"deberta-v2"),_bt.forEach(t),dir=r(Lke," \u2014 "),Wz=n(Lke,"A",{href:!0});var ubt=s(Wz);cir=r(ubt,"TFDebertaV2Model"),ubt.forEach(t),fir=r(Lke," (DeBERTa-v2 model)"),Lke.forEach(t),mir=i(D),oT=n(D,"LI",{});var xke=s(oT);U1e=n(xke,"STRONG",{});var bbt=s(U1e);gir=r(bbt,"distilbert"),bbt.forEach(t),hir=r(xke," \u2014 "),Qz=n(xke,"A",{href:!0});var vbt=s(Qz);pir=r(vbt,"TFDistilBertModel"),vbt.forEach(t),_ir=r(xke," (DistilBERT model)"),xke.forEach(t),uir=i(D),rT=n(D,"LI",{});var $ke=s(rT);J1e=n($ke,"STRONG",{});var Fbt=s(J1e);bir=r(Fbt,"dpr"),Fbt.forEach(t),vir=r($ke," \u2014 "),Hz=n($ke,"A",{href:!0});var Tbt=s(Hz);Fir=r(Tbt,"TFDPRQuestionEncoder"),Tbt.forEach(t),Tir=r($ke," (DPR model)"),$ke.forEach(t),Mir=i(D),tT=n(D,"LI",{});var kke=s(tT);Y1e=n(kke,"STRONG",{});var Mbt=s(Y1e);Eir=r(Mbt,"electra"),Mbt.forEach(t),Cir=r(kke," \u2014 "),Uz=n(kke,"A",{href:!0});var Ebt=s(Uz);wir=r(Ebt,"TFElectraModel"),Ebt.forEach(t),Air=r(kke," (ELECTRA model)"),kke.forEach(t),yir=i(D),aT=n(D,"LI",{});var Ske=s(aT);K1e=n(Ske,"STRONG",{});var Cbt=s(K1e);Lir=r(Cbt,"flaubert"),Cbt.forEach(t),xir=r(Ske," \u2014 "),Jz=n(Ske,"A",{href:!0});var wbt=s(Jz);$ir=r(wbt,"TFFlaubertModel"),wbt.forEach(t),kir=r(Ske," (FlauBERT model)"),Ske.forEach(t),Sir=i(D),Bs=n(D,"LI",{});var $$=s(Bs);Z1e=n($$,"STRONG",{});var Abt=s(Z1e);Rir=r(Abt,"funnel"),Abt.forEach(t),Pir=r($$," \u2014 "),Yz=n($$,"A",{href:!0});var ybt=s(Yz);Bir=r(ybt,"TFFunnelModel"),ybt.forEach(t),Iir=r($$," or "),Kz=n($$,"A",{href:!0});var Lbt=s(Kz);qir=r(Lbt,"TFFunnelBaseModel"),Lbt.forEach(t),Nir=r($$," (Funnel Transformer model)"),$$.forEach(t),jir=i(D),nT=n(D,"LI",{});var Rke=s(nT);e7e=n(Rke,"STRONG",{});var xbt=s(e7e);Dir=r(xbt,"gpt2"),xbt.forEach(t),Gir=r(Rke," \u2014 "),Zz=n(Rke,"A",{href:!0});var $bt=s(Zz);Oir=r($bt,"TFGPT2Model"),$bt.forEach(t),Vir=r(Rke," (OpenAI GPT-2 model)"),Rke.forEach(t),Xir=i(D),sT=n(D,"LI",{});var Pke=s(sT);o7e=n(Pke,"STRONG",{});var kbt=s(o7e);zir=r(kbt,"gptj"),kbt.forEach(t),Wir=r(Pke," \u2014 "),eW=n(Pke,"A",{href:!0});var Sbt=s(eW);Qir=r(Sbt,"TFGPTJModel"),Sbt.forEach(t),Hir=r(Pke," (GPT-J model)"),Pke.forEach(t),Uir=i(D),lT=n(D,"LI",{});var Bke=s(lT);r7e=n(Bke,"STRONG",{});var Rbt=s(r7e);Jir=r(Rbt,"hubert"),Rbt.forEach(t),Yir=r(Bke," \u2014 "),oW=n(Bke,"A",{href:!0});var Pbt=s(oW);Kir=r(Pbt,"TFHubertModel"),Pbt.forEach(t),Zir=r(Bke," (Hubert model)"),Bke.forEach(t),edr=i(D),iT=n(D,"LI",{});var Ike=s(iT);t7e=n(Ike,"STRONG",{});var Bbt=s(t7e);odr=r(Bbt,"layoutlm"),Bbt.forEach(t),rdr=r(Ike," \u2014 "),rW=n(Ike,"A",{href:!0});var Ibt=s(rW);tdr=r(Ibt,"TFLayoutLMModel"),Ibt.forEach(t),adr=r(Ike," (LayoutLM model)"),Ike.forEach(t),ndr=i(D),dT=n(D,"LI",{});var qke=s(dT);a7e=n(qke,"STRONG",{});var qbt=s(a7e);sdr=r(qbt,"led"),qbt.forEach(t),ldr=r(qke," \u2014 "),tW=n(qke,"A",{href:!0});var Nbt=s(tW);idr=r(Nbt,"TFLEDModel"),Nbt.forEach(t),ddr=r(qke," (LED model)"),qke.forEach(t),cdr=i(D),cT=n(D,"LI",{});var Nke=s(cT);n7e=n(Nke,"STRONG",{});var jbt=s(n7e);fdr=r(jbt,"longformer"),jbt.forEach(t),mdr=r(Nke," \u2014 "),aW=n(Nke,"A",{href:!0});var Dbt=s(aW);gdr=r(Dbt,"TFLongformerModel"),Dbt.forEach(t),hdr=r(Nke," (Longformer model)"),Nke.forEach(t),pdr=i(D),fT=n(D,"LI",{});var jke=s(fT);s7e=n(jke,"STRONG",{});var Gbt=s(s7e);_dr=r(Gbt,"lxmert"),Gbt.forEach(t),udr=r(jke," \u2014 "),nW=n(jke,"A",{href:!0});var Obt=s(nW);bdr=r(Obt,"TFLxmertModel"),Obt.forEach(t),vdr=r(jke," (LXMERT model)"),jke.forEach(t),Fdr=i(D),mT=n(D,"LI",{});var Dke=s(mT);l7e=n(Dke,"STRONG",{});var Vbt=s(l7e);Tdr=r(Vbt,"marian"),Vbt.forEach(t),Mdr=r(Dke," \u2014 "),sW=n(Dke,"A",{href:!0});var Xbt=s(sW);Edr=r(Xbt,"TFMarianModel"),Xbt.forEach(t),Cdr=r(Dke," (Marian model)"),Dke.forEach(t),wdr=i(D),gT=n(D,"LI",{});var Gke=s(gT);i7e=n(Gke,"STRONG",{});var zbt=s(i7e);Adr=r(zbt,"mbart"),zbt.forEach(t),ydr=r(Gke," \u2014 "),lW=n(Gke,"A",{href:!0});var Wbt=s(lW);Ldr=r(Wbt,"TFMBartModel"),Wbt.forEach(t),xdr=r(Gke," (mBART model)"),Gke.forEach(t),$dr=i(D),hT=n(D,"LI",{});var Oke=s(hT);d7e=n(Oke,"STRONG",{});var Qbt=s(d7e);kdr=r(Qbt,"mobilebert"),Qbt.forEach(t),Sdr=r(Oke," \u2014 "),iW=n(Oke,"A",{href:!0});var Hbt=s(iW);Rdr=r(Hbt,"TFMobileBertModel"),Hbt.forEach(t),Pdr=r(Oke," (MobileBERT model)"),Oke.forEach(t),Bdr=i(D),pT=n(D,"LI",{});var Vke=s(pT);c7e=n(Vke,"STRONG",{});var Ubt=s(c7e);Idr=r(Ubt,"mpnet"),Ubt.forEach(t),qdr=r(Vke," \u2014 "),dW=n(Vke,"A",{href:!0});var Jbt=s(dW);Ndr=r(Jbt,"TFMPNetModel"),Jbt.forEach(t),jdr=r(Vke," (MPNet model)"),Vke.forEach(t),Ddr=i(D),_T=n(D,"LI",{});var Xke=s(_T);f7e=n(Xke,"STRONG",{});var Ybt=s(f7e);Gdr=r(Ybt,"mt5"),Ybt.forEach(t),Odr=r(Xke," \u2014 "),cW=n(Xke,"A",{href:!0});var Kbt=s(cW);Vdr=r(Kbt,"TFMT5Model"),Kbt.forEach(t),Xdr=r(Xke," (mT5 model)"),Xke.forEach(t),zdr=i(D),uT=n(D,"LI",{});var zke=s(uT);m7e=n(zke,"STRONG",{});var Zbt=s(m7e);Wdr=r(Zbt,"openai-gpt"),Zbt.forEach(t),Qdr=r(zke," \u2014 "),fW=n(zke,"A",{href:!0});var e2t=s(fW);Hdr=r(e2t,"TFOpenAIGPTModel"),e2t.forEach(t),Udr=r(zke," (OpenAI GPT model)"),zke.forEach(t),Jdr=i(D),bT=n(D,"LI",{});var Wke=s(bT);g7e=n(Wke,"STRONG",{});var o2t=s(g7e);Ydr=r(o2t,"pegasus"),o2t.forEach(t),Kdr=r(Wke," \u2014 "),mW=n(Wke,"A",{href:!0});var r2t=s(mW);Zdr=r(r2t,"TFPegasusModel"),r2t.forEach(t),ecr=r(Wke," (Pegasus model)"),Wke.forEach(t),ocr=i(D),vT=n(D,"LI",{});var Qke=s(vT);h7e=n(Qke,"STRONG",{});var t2t=s(h7e);rcr=r(t2t,"rembert"),t2t.forEach(t),tcr=r(Qke," \u2014 "),gW=n(Qke,"A",{href:!0});var a2t=s(gW);acr=r(a2t,"TFRemBertModel"),a2t.forEach(t),ncr=r(Qke," (RemBERT model)"),Qke.forEach(t),scr=i(D),FT=n(D,"LI",{});var Hke=s(FT);p7e=n(Hke,"STRONG",{});var n2t=s(p7e);lcr=r(n2t,"roberta"),n2t.forEach(t),icr=r(Hke," \u2014 "),hW=n(Hke,"A",{href:!0});var s2t=s(hW);dcr=r(s2t,"TFRobertaModel"),s2t.forEach(t),ccr=r(Hke," (RoBERTa model)"),Hke.forEach(t),fcr=i(D),TT=n(D,"LI",{});var Uke=s(TT);_7e=n(Uke,"STRONG",{});var l2t=s(_7e);mcr=r(l2t,"roformer"),l2t.forEach(t),gcr=r(Uke," \u2014 "),pW=n(Uke,"A",{href:!0});var i2t=s(pW);hcr=r(i2t,"TFRoFormerModel"),i2t.forEach(t),pcr=r(Uke," (RoFormer model)"),Uke.forEach(t),_cr=i(D),MT=n(D,"LI",{});var Jke=s(MT);u7e=n(Jke,"STRONG",{});var d2t=s(u7e);ucr=r(d2t,"speech_to_text"),d2t.forEach(t),bcr=r(Jke," \u2014 "),_W=n(Jke,"A",{href:!0});var c2t=s(_W);vcr=r(c2t,"TFSpeech2TextModel"),c2t.forEach(t),Fcr=r(Jke," (Speech2Text model)"),Jke.forEach(t),Tcr=i(D),ET=n(D,"LI",{});var Yke=s(ET);b7e=n(Yke,"STRONG",{});var f2t=s(b7e);Mcr=r(f2t,"swin"),f2t.forEach(t),Ecr=r(Yke," \u2014 "),uW=n(Yke,"A",{href:!0});var m2t=s(uW);Ccr=r(m2t,"TFSwinModel"),m2t.forEach(t),wcr=r(Yke," (Swin model)"),Yke.forEach(t),Acr=i(D),CT=n(D,"LI",{});var Kke=s(CT);v7e=n(Kke,"STRONG",{});var g2t=s(v7e);ycr=r(g2t,"t5"),g2t.forEach(t),Lcr=r(Kke," \u2014 "),bW=n(Kke,"A",{href:!0});var h2t=s(bW);xcr=r(h2t,"TFT5Model"),h2t.forEach(t),$cr=r(Kke," (T5 model)"),Kke.forEach(t),kcr=i(D),wT=n(D,"LI",{});var Zke=s(wT);F7e=n(Zke,"STRONG",{});var p2t=s(F7e);Scr=r(p2t,"tapas"),p2t.forEach(t),Rcr=r(Zke," \u2014 "),vW=n(Zke,"A",{href:!0});var _2t=s(vW);Pcr=r(_2t,"TFTapasModel"),_2t.forEach(t),Bcr=r(Zke," (TAPAS model)"),Zke.forEach(t),Icr=i(D),AT=n(D,"LI",{});var eSe=s(AT);T7e=n(eSe,"STRONG",{});var u2t=s(T7e);qcr=r(u2t,"transfo-xl"),u2t.forEach(t),Ncr=r(eSe," \u2014 "),FW=n(eSe,"A",{href:!0});var b2t=s(FW);jcr=r(b2t,"TFTransfoXLModel"),b2t.forEach(t),Dcr=r(eSe," (Transformer-XL model)"),eSe.forEach(t),Gcr=i(D),yT=n(D,"LI",{});var oSe=s(yT);M7e=n(oSe,"STRONG",{});var v2t=s(M7e);Ocr=r(v2t,"vit"),v2t.forEach(t),Vcr=r(oSe," \u2014 "),TW=n(oSe,"A",{href:!0});var F2t=s(TW);Xcr=r(F2t,"TFViTModel"),F2t.forEach(t),zcr=r(oSe," (ViT model)"),oSe.forEach(t),Wcr=i(D),LT=n(D,"LI",{});var rSe=s(LT);E7e=n(rSe,"STRONG",{});var T2t=s(E7e);Qcr=r(T2t,"vit_mae"),T2t.forEach(t),Hcr=r(rSe," \u2014 "),MW=n(rSe,"A",{href:!0});var M2t=s(MW);Ucr=r(M2t,"TFViTMAEModel"),M2t.forEach(t),Jcr=r(rSe," (ViTMAE model)"),rSe.forEach(t),Ycr=i(D),xT=n(D,"LI",{});var tSe=s(xT);C7e=n(tSe,"STRONG",{});var E2t=s(C7e);Kcr=r(E2t,"wav2vec2"),E2t.forEach(t),Zcr=r(tSe," \u2014 "),EW=n(tSe,"A",{href:!0});var C2t=s(EW);efr=r(C2t,"TFWav2Vec2Model"),C2t.forEach(t),ofr=r(tSe," (Wav2Vec2 model)"),tSe.forEach(t),rfr=i(D),$T=n(D,"LI",{});var aSe=s($T);w7e=n(aSe,"STRONG",{});var w2t=s(w7e);tfr=r(w2t,"xlm"),w2t.forEach(t),afr=r(aSe," \u2014 "),CW=n(aSe,"A",{href:!0});var A2t=s(CW);nfr=r(A2t,"TFXLMModel"),A2t.forEach(t),sfr=r(aSe," (XLM model)"),aSe.forEach(t),lfr=i(D),kT=n(D,"LI",{});var nSe=s(kT);A7e=n(nSe,"STRONG",{});var y2t=s(A7e);ifr=r(y2t,"xlm-roberta"),y2t.forEach(t),dfr=r(nSe," \u2014 "),wW=n(nSe,"A",{href:!0});var L2t=s(wW);cfr=r(L2t,"TFXLMRobertaModel"),L2t.forEach(t),ffr=r(nSe," (XLM-RoBERTa model)"),nSe.forEach(t),mfr=i(D),ST=n(D,"LI",{});var sSe=s(ST);y7e=n(sSe,"STRONG",{});var x2t=s(y7e);gfr=r(x2t,"xlnet"),x2t.forEach(t),hfr=r(sSe," \u2014 "),AW=n(sSe,"A",{href:!0});var $2t=s(AW);pfr=r($2t,"TFXLNetModel"),$2t.forEach(t),_fr=r(sSe," (XLNet model)"),sSe.forEach(t),D.forEach(t),ufr=i(gl),T(RT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),sNe=i(f),Vd=n(f,"H2",{class:!0});var mDe=s(Vd);PT=n(mDe,"A",{id:!0,class:!0,href:!0});var k2t=s(PT);L7e=n(k2t,"SPAN",{});var S2t=s(L7e);T(eL.$$.fragment,S2t),S2t.forEach(t),k2t.forEach(t),bfr=i(mDe),x7e=n(mDe,"SPAN",{});var R2t=s(x7e);vfr=r(R2t,"TFAutoModelForPreTraining"),R2t.forEach(t),mDe.forEach(t),lNe=i(f),Ko=n(f,"DIV",{class:!0});var hl=s(Ko);T(oL.$$.fragment,hl),Ffr=i(hl),Xd=n(hl,"P",{});var IZ=s(Xd);Tfr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yW=n(IZ,"A",{href:!0});var P2t=s(yW);Mfr=r(P2t,"from_pretrained()"),P2t.forEach(t),Efr=r(IZ," class method or the "),LW=n(IZ,"A",{href:!0});var B2t=s(LW);Cfr=r(B2t,"from_config()"),B2t.forEach(t),wfr=r(IZ,` class
method.`),IZ.forEach(t),Afr=i(hl),rL=n(hl,"P",{});var gDe=s(rL);yfr=r(gDe,"This class cannot be instantiated directly using "),$7e=n(gDe,"CODE",{});var I2t=s($7e);Lfr=r(I2t,"__init__()"),I2t.forEach(t),xfr=r(gDe," (throws an error)."),gDe.forEach(t),$fr=i(hl),Lt=n(hl,"DIV",{class:!0});var g0=s(Lt);T(tL.$$.fragment,g0),kfr=i(g0),k7e=n(g0,"P",{});var q2t=s(k7e);Sfr=r(q2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),q2t.forEach(t),Rfr=i(g0),zd=n(g0,"P",{});var qZ=s(zd);Pfr=r(qZ,`Note:
Loading a model from its configuration file does `),S7e=n(qZ,"STRONG",{});var N2t=s(S7e);Bfr=r(N2t,"not"),N2t.forEach(t),Ifr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(qZ,"A",{href:!0});var j2t=s(xW);qfr=r(j2t,"from_pretrained()"),j2t.forEach(t),Nfr=r(qZ," to load the model weights."),qZ.forEach(t),jfr=i(g0),T(BT.$$.fragment,g0),g0.forEach(t),Dfr=i(hl),Ar=n(hl,"DIV",{class:!0});var pl=s(Ar);T(aL.$$.fragment,pl),Gfr=i(pl),R7e=n(pl,"P",{});var D2t=s(R7e);Ofr=r(D2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),D2t.forEach(t),Vfr=i(pl),Za=n(pl,"P",{});var h0=s(Za);Xfr=r(h0,"The model class to instantiate is selected based on the "),P7e=n(h0,"CODE",{});var G2t=s(P7e);zfr=r(G2t,"model_type"),G2t.forEach(t),Wfr=r(h0,` property of the config object (either
passed as an argument or loaded from `),B7e=n(h0,"CODE",{});var O2t=s(B7e);Qfr=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),Hfr=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I7e=n(h0,"CODE",{});var V2t=s(I7e);Ufr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),Jfr=r(h0,":"),h0.forEach(t),Yfr=i(pl),se=n(pl,"UL",{});var le=s(se);IT=n(le,"LI",{});var lSe=s(IT);q7e=n(lSe,"STRONG",{});var X2t=s(q7e);Kfr=r(X2t,"albert"),X2t.forEach(t),Zfr=r(lSe," \u2014 "),$W=n(lSe,"A",{href:!0});var z2t=s($W);emr=r(z2t,"TFAlbertForPreTraining"),z2t.forEach(t),omr=r(lSe," (ALBERT model)"),lSe.forEach(t),rmr=i(le),qT=n(le,"LI",{});var iSe=s(qT);N7e=n(iSe,"STRONG",{});var W2t=s(N7e);tmr=r(W2t,"bart"),W2t.forEach(t),amr=r(iSe," \u2014 "),kW=n(iSe,"A",{href:!0});var Q2t=s(kW);nmr=r(Q2t,"TFBartForConditionalGeneration"),Q2t.forEach(t),smr=r(iSe," (BART model)"),iSe.forEach(t),lmr=i(le),NT=n(le,"LI",{});var dSe=s(NT);j7e=n(dSe,"STRONG",{});var H2t=s(j7e);imr=r(H2t,"bert"),H2t.forEach(t),dmr=r(dSe," \u2014 "),SW=n(dSe,"A",{href:!0});var U2t=s(SW);cmr=r(U2t,"TFBertForPreTraining"),U2t.forEach(t),fmr=r(dSe," (BERT model)"),dSe.forEach(t),mmr=i(le),jT=n(le,"LI",{});var cSe=s(jT);D7e=n(cSe,"STRONG",{});var J2t=s(D7e);gmr=r(J2t,"camembert"),J2t.forEach(t),hmr=r(cSe," \u2014 "),RW=n(cSe,"A",{href:!0});var Y2t=s(RW);pmr=r(Y2t,"TFCamembertForMaskedLM"),Y2t.forEach(t),_mr=r(cSe," (CamemBERT model)"),cSe.forEach(t),umr=i(le),DT=n(le,"LI",{});var fSe=s(DT);G7e=n(fSe,"STRONG",{});var K2t=s(G7e);bmr=r(K2t,"ctrl"),K2t.forEach(t),vmr=r(fSe," \u2014 "),PW=n(fSe,"A",{href:!0});var Z2t=s(PW);Fmr=r(Z2t,"TFCTRLLMHeadModel"),Z2t.forEach(t),Tmr=r(fSe," (CTRL model)"),fSe.forEach(t),Mmr=i(le),GT=n(le,"LI",{});var mSe=s(GT);O7e=n(mSe,"STRONG",{});var evt=s(O7e);Emr=r(evt,"distilbert"),evt.forEach(t),Cmr=r(mSe," \u2014 "),BW=n(mSe,"A",{href:!0});var ovt=s(BW);wmr=r(ovt,"TFDistilBertForMaskedLM"),ovt.forEach(t),Amr=r(mSe," (DistilBERT model)"),mSe.forEach(t),ymr=i(le),OT=n(le,"LI",{});var gSe=s(OT);V7e=n(gSe,"STRONG",{});var rvt=s(V7e);Lmr=r(rvt,"electra"),rvt.forEach(t),xmr=r(gSe," \u2014 "),IW=n(gSe,"A",{href:!0});var tvt=s(IW);$mr=r(tvt,"TFElectraForPreTraining"),tvt.forEach(t),kmr=r(gSe," (ELECTRA model)"),gSe.forEach(t),Smr=i(le),VT=n(le,"LI",{});var hSe=s(VT);X7e=n(hSe,"STRONG",{});var avt=s(X7e);Rmr=r(avt,"flaubert"),avt.forEach(t),Pmr=r(hSe," \u2014 "),qW=n(hSe,"A",{href:!0});var nvt=s(qW);Bmr=r(nvt,"TFFlaubertWithLMHeadModel"),nvt.forEach(t),Imr=r(hSe," (FlauBERT model)"),hSe.forEach(t),qmr=i(le),XT=n(le,"LI",{});var pSe=s(XT);z7e=n(pSe,"STRONG",{});var svt=s(z7e);Nmr=r(svt,"funnel"),svt.forEach(t),jmr=r(pSe," \u2014 "),NW=n(pSe,"A",{href:!0});var lvt=s(NW);Dmr=r(lvt,"TFFunnelForPreTraining"),lvt.forEach(t),Gmr=r(pSe," (Funnel Transformer model)"),pSe.forEach(t),Omr=i(le),zT=n(le,"LI",{});var _Se=s(zT);W7e=n(_Se,"STRONG",{});var ivt=s(W7e);Vmr=r(ivt,"gpt2"),ivt.forEach(t),Xmr=r(_Se," \u2014 "),jW=n(_Se,"A",{href:!0});var dvt=s(jW);zmr=r(dvt,"TFGPT2LMHeadModel"),dvt.forEach(t),Wmr=r(_Se," (OpenAI GPT-2 model)"),_Se.forEach(t),Qmr=i(le),WT=n(le,"LI",{});var uSe=s(WT);Q7e=n(uSe,"STRONG",{});var cvt=s(Q7e);Hmr=r(cvt,"layoutlm"),cvt.forEach(t),Umr=r(uSe," \u2014 "),DW=n(uSe,"A",{href:!0});var fvt=s(DW);Jmr=r(fvt,"TFLayoutLMForMaskedLM"),fvt.forEach(t),Ymr=r(uSe," (LayoutLM model)"),uSe.forEach(t),Kmr=i(le),QT=n(le,"LI",{});var bSe=s(QT);H7e=n(bSe,"STRONG",{});var mvt=s(H7e);Zmr=r(mvt,"lxmert"),mvt.forEach(t),egr=r(bSe," \u2014 "),GW=n(bSe,"A",{href:!0});var gvt=s(GW);ogr=r(gvt,"TFLxmertForPreTraining"),gvt.forEach(t),rgr=r(bSe," (LXMERT model)"),bSe.forEach(t),tgr=i(le),HT=n(le,"LI",{});var vSe=s(HT);U7e=n(vSe,"STRONG",{});var hvt=s(U7e);agr=r(hvt,"mobilebert"),hvt.forEach(t),ngr=r(vSe," \u2014 "),OW=n(vSe,"A",{href:!0});var pvt=s(OW);sgr=r(pvt,"TFMobileBertForPreTraining"),pvt.forEach(t),lgr=r(vSe," (MobileBERT model)"),vSe.forEach(t),igr=i(le),UT=n(le,"LI",{});var FSe=s(UT);J7e=n(FSe,"STRONG",{});var _vt=s(J7e);dgr=r(_vt,"mpnet"),_vt.forEach(t),cgr=r(FSe," \u2014 "),VW=n(FSe,"A",{href:!0});var uvt=s(VW);fgr=r(uvt,"TFMPNetForMaskedLM"),uvt.forEach(t),mgr=r(FSe," (MPNet model)"),FSe.forEach(t),ggr=i(le),JT=n(le,"LI",{});var TSe=s(JT);Y7e=n(TSe,"STRONG",{});var bvt=s(Y7e);hgr=r(bvt,"openai-gpt"),bvt.forEach(t),pgr=r(TSe," \u2014 "),XW=n(TSe,"A",{href:!0});var vvt=s(XW);_gr=r(vvt,"TFOpenAIGPTLMHeadModel"),vvt.forEach(t),ugr=r(TSe," (OpenAI GPT model)"),TSe.forEach(t),bgr=i(le),YT=n(le,"LI",{});var MSe=s(YT);K7e=n(MSe,"STRONG",{});var Fvt=s(K7e);vgr=r(Fvt,"roberta"),Fvt.forEach(t),Fgr=r(MSe," \u2014 "),zW=n(MSe,"A",{href:!0});var Tvt=s(zW);Tgr=r(Tvt,"TFRobertaForMaskedLM"),Tvt.forEach(t),Mgr=r(MSe," (RoBERTa model)"),MSe.forEach(t),Egr=i(le),KT=n(le,"LI",{});var ESe=s(KT);Z7e=n(ESe,"STRONG",{});var Mvt=s(Z7e);Cgr=r(Mvt,"t5"),Mvt.forEach(t),wgr=r(ESe," \u2014 "),WW=n(ESe,"A",{href:!0});var Evt=s(WW);Agr=r(Evt,"TFT5ForConditionalGeneration"),Evt.forEach(t),ygr=r(ESe," (T5 model)"),ESe.forEach(t),Lgr=i(le),ZT=n(le,"LI",{});var CSe=s(ZT);ebe=n(CSe,"STRONG",{});var Cvt=s(ebe);xgr=r(Cvt,"tapas"),Cvt.forEach(t),$gr=r(CSe," \u2014 "),QW=n(CSe,"A",{href:!0});var wvt=s(QW);kgr=r(wvt,"TFTapasForMaskedLM"),wvt.forEach(t),Sgr=r(CSe," (TAPAS model)"),CSe.forEach(t),Rgr=i(le),e8=n(le,"LI",{});var wSe=s(e8);obe=n(wSe,"STRONG",{});var Avt=s(obe);Pgr=r(Avt,"transfo-xl"),Avt.forEach(t),Bgr=r(wSe," \u2014 "),HW=n(wSe,"A",{href:!0});var yvt=s(HW);Igr=r(yvt,"TFTransfoXLLMHeadModel"),yvt.forEach(t),qgr=r(wSe," (Transformer-XL model)"),wSe.forEach(t),Ngr=i(le),o8=n(le,"LI",{});var ASe=s(o8);rbe=n(ASe,"STRONG",{});var Lvt=s(rbe);jgr=r(Lvt,"vit_mae"),Lvt.forEach(t),Dgr=r(ASe," \u2014 "),UW=n(ASe,"A",{href:!0});var xvt=s(UW);Ggr=r(xvt,"TFViTMAEForPreTraining"),xvt.forEach(t),Ogr=r(ASe," (ViTMAE model)"),ASe.forEach(t),Vgr=i(le),r8=n(le,"LI",{});var ySe=s(r8);tbe=n(ySe,"STRONG",{});var $vt=s(tbe);Xgr=r($vt,"xlm"),$vt.forEach(t),zgr=r(ySe," \u2014 "),JW=n(ySe,"A",{href:!0});var kvt=s(JW);Wgr=r(kvt,"TFXLMWithLMHeadModel"),kvt.forEach(t),Qgr=r(ySe," (XLM model)"),ySe.forEach(t),Hgr=i(le),t8=n(le,"LI",{});var LSe=s(t8);abe=n(LSe,"STRONG",{});var Svt=s(abe);Ugr=r(Svt,"xlm-roberta"),Svt.forEach(t),Jgr=r(LSe," \u2014 "),YW=n(LSe,"A",{href:!0});var Rvt=s(YW);Ygr=r(Rvt,"TFXLMRobertaForMaskedLM"),Rvt.forEach(t),Kgr=r(LSe," (XLM-RoBERTa model)"),LSe.forEach(t),Zgr=i(le),a8=n(le,"LI",{});var xSe=s(a8);nbe=n(xSe,"STRONG",{});var Pvt=s(nbe);ehr=r(Pvt,"xlnet"),Pvt.forEach(t),ohr=r(xSe," \u2014 "),KW=n(xSe,"A",{href:!0});var Bvt=s(KW);rhr=r(Bvt,"TFXLNetLMHeadModel"),Bvt.forEach(t),thr=r(xSe," (XLNet model)"),xSe.forEach(t),le.forEach(t),ahr=i(pl),T(n8.$$.fragment,pl),pl.forEach(t),hl.forEach(t),iNe=i(f),Wd=n(f,"H2",{class:!0});var hDe=s(Wd);s8=n(hDe,"A",{id:!0,class:!0,href:!0});var Ivt=s(s8);sbe=n(Ivt,"SPAN",{});var qvt=s(sbe);T(nL.$$.fragment,qvt),qvt.forEach(t),Ivt.forEach(t),nhr=i(hDe),lbe=n(hDe,"SPAN",{});var Nvt=s(lbe);shr=r(Nvt,"TFAutoModelForCausalLM"),Nvt.forEach(t),hDe.forEach(t),dNe=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(sL.$$.fragment,_l),lhr=i(_l),Qd=n(_l,"P",{});var NZ=s(Qd);ihr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZW=n(NZ,"A",{href:!0});var jvt=s(ZW);dhr=r(jvt,"from_pretrained()"),jvt.forEach(t),chr=r(NZ," class method or the "),eQ=n(NZ,"A",{href:!0});var Dvt=s(eQ);fhr=r(Dvt,"from_config()"),Dvt.forEach(t),mhr=r(NZ,` class
method.`),NZ.forEach(t),ghr=i(_l),lL=n(_l,"P",{});var pDe=s(lL);hhr=r(pDe,"This class cannot be instantiated directly using "),ibe=n(pDe,"CODE",{});var Gvt=s(ibe);phr=r(Gvt,"__init__()"),Gvt.forEach(t),_hr=r(pDe," (throws an error)."),pDe.forEach(t),uhr=i(_l),xt=n(_l,"DIV",{class:!0});var p0=s(xt);T(iL.$$.fragment,p0),bhr=i(p0),dbe=n(p0,"P",{});var Ovt=s(dbe);vhr=r(Ovt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ovt.forEach(t),Fhr=i(p0),Hd=n(p0,"P",{});var jZ=s(Hd);Thr=r(jZ,`Note:
Loading a model from its configuration file does `),cbe=n(jZ,"STRONG",{});var Vvt=s(cbe);Mhr=r(Vvt,"not"),Vvt.forEach(t),Ehr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(jZ,"A",{href:!0});var Xvt=s(oQ);Chr=r(Xvt,"from_pretrained()"),Xvt.forEach(t),whr=r(jZ," to load the model weights."),jZ.forEach(t),Ahr=i(p0),T(l8.$$.fragment,p0),p0.forEach(t),yhr=i(_l),yr=n(_l,"DIV",{class:!0});var ul=s(yr);T(dL.$$.fragment,ul),Lhr=i(ul),fbe=n(ul,"P",{});var zvt=s(fbe);xhr=r(zvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),zvt.forEach(t),$hr=i(ul),en=n(ul,"P",{});var _0=s(en);khr=r(_0,"The model class to instantiate is selected based on the "),mbe=n(_0,"CODE",{});var Wvt=s(mbe);Shr=r(Wvt,"model_type"),Wvt.forEach(t),Rhr=r(_0,` property of the config object (either
passed as an argument or loaded from `),gbe=n(_0,"CODE",{});var Qvt=s(gbe);Phr=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),Bhr=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(_0,"CODE",{});var Hvt=s(hbe);Ihr=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),qhr=r(_0,":"),_0.forEach(t),Nhr=i(ul),Me=n(ul,"UL",{});var Ce=s(Me);i8=n(Ce,"LI",{});var $Se=s(i8);pbe=n($Se,"STRONG",{});var Uvt=s(pbe);jhr=r(Uvt,"bert"),Uvt.forEach(t),Dhr=r($Se," \u2014 "),rQ=n($Se,"A",{href:!0});var Jvt=s(rQ);Ghr=r(Jvt,"TFBertLMHeadModel"),Jvt.forEach(t),Ohr=r($Se," (BERT model)"),$Se.forEach(t),Vhr=i(Ce),d8=n(Ce,"LI",{});var kSe=s(d8);_be=n(kSe,"STRONG",{});var Yvt=s(_be);Xhr=r(Yvt,"camembert"),Yvt.forEach(t),zhr=r(kSe," \u2014 "),tQ=n(kSe,"A",{href:!0});var Kvt=s(tQ);Whr=r(Kvt,"TFCamembertForCausalLM"),Kvt.forEach(t),Qhr=r(kSe," (CamemBERT model)"),kSe.forEach(t),Hhr=i(Ce),c8=n(Ce,"LI",{});var SSe=s(c8);ube=n(SSe,"STRONG",{});var Zvt=s(ube);Uhr=r(Zvt,"ctrl"),Zvt.forEach(t),Jhr=r(SSe," \u2014 "),aQ=n(SSe,"A",{href:!0});var e3t=s(aQ);Yhr=r(e3t,"TFCTRLLMHeadModel"),e3t.forEach(t),Khr=r(SSe," (CTRL model)"),SSe.forEach(t),Zhr=i(Ce),f8=n(Ce,"LI",{});var RSe=s(f8);bbe=n(RSe,"STRONG",{});var o3t=s(bbe);epr=r(o3t,"gpt2"),o3t.forEach(t),opr=r(RSe," \u2014 "),nQ=n(RSe,"A",{href:!0});var r3t=s(nQ);rpr=r(r3t,"TFGPT2LMHeadModel"),r3t.forEach(t),tpr=r(RSe," (OpenAI GPT-2 model)"),RSe.forEach(t),apr=i(Ce),m8=n(Ce,"LI",{});var PSe=s(m8);vbe=n(PSe,"STRONG",{});var t3t=s(vbe);npr=r(t3t,"gptj"),t3t.forEach(t),spr=r(PSe," \u2014 "),sQ=n(PSe,"A",{href:!0});var a3t=s(sQ);lpr=r(a3t,"TFGPTJForCausalLM"),a3t.forEach(t),ipr=r(PSe," (GPT-J model)"),PSe.forEach(t),dpr=i(Ce),g8=n(Ce,"LI",{});var BSe=s(g8);Fbe=n(BSe,"STRONG",{});var n3t=s(Fbe);cpr=r(n3t,"openai-gpt"),n3t.forEach(t),fpr=r(BSe," \u2014 "),lQ=n(BSe,"A",{href:!0});var s3t=s(lQ);mpr=r(s3t,"TFOpenAIGPTLMHeadModel"),s3t.forEach(t),gpr=r(BSe," (OpenAI GPT model)"),BSe.forEach(t),hpr=i(Ce),h8=n(Ce,"LI",{});var ISe=s(h8);Tbe=n(ISe,"STRONG",{});var l3t=s(Tbe);ppr=r(l3t,"rembert"),l3t.forEach(t),_pr=r(ISe," \u2014 "),iQ=n(ISe,"A",{href:!0});var i3t=s(iQ);upr=r(i3t,"TFRemBertForCausalLM"),i3t.forEach(t),bpr=r(ISe," (RemBERT model)"),ISe.forEach(t),vpr=i(Ce),p8=n(Ce,"LI",{});var qSe=s(p8);Mbe=n(qSe,"STRONG",{});var d3t=s(Mbe);Fpr=r(d3t,"roberta"),d3t.forEach(t),Tpr=r(qSe," \u2014 "),dQ=n(qSe,"A",{href:!0});var c3t=s(dQ);Mpr=r(c3t,"TFRobertaForCausalLM"),c3t.forEach(t),Epr=r(qSe," (RoBERTa model)"),qSe.forEach(t),Cpr=i(Ce),_8=n(Ce,"LI",{});var NSe=s(_8);Ebe=n(NSe,"STRONG",{});var f3t=s(Ebe);wpr=r(f3t,"roformer"),f3t.forEach(t),Apr=r(NSe," \u2014 "),cQ=n(NSe,"A",{href:!0});var m3t=s(cQ);ypr=r(m3t,"TFRoFormerForCausalLM"),m3t.forEach(t),Lpr=r(NSe," (RoFormer model)"),NSe.forEach(t),xpr=i(Ce),u8=n(Ce,"LI",{});var jSe=s(u8);Cbe=n(jSe,"STRONG",{});var g3t=s(Cbe);$pr=r(g3t,"transfo-xl"),g3t.forEach(t),kpr=r(jSe," \u2014 "),fQ=n(jSe,"A",{href:!0});var h3t=s(fQ);Spr=r(h3t,"TFTransfoXLLMHeadModel"),h3t.forEach(t),Rpr=r(jSe," (Transformer-XL model)"),jSe.forEach(t),Ppr=i(Ce),b8=n(Ce,"LI",{});var DSe=s(b8);wbe=n(DSe,"STRONG",{});var p3t=s(wbe);Bpr=r(p3t,"xlm"),p3t.forEach(t),Ipr=r(DSe," \u2014 "),mQ=n(DSe,"A",{href:!0});var _3t=s(mQ);qpr=r(_3t,"TFXLMWithLMHeadModel"),_3t.forEach(t),Npr=r(DSe," (XLM model)"),DSe.forEach(t),jpr=i(Ce),v8=n(Ce,"LI",{});var GSe=s(v8);Abe=n(GSe,"STRONG",{});var u3t=s(Abe);Dpr=r(u3t,"xlnet"),u3t.forEach(t),Gpr=r(GSe," \u2014 "),gQ=n(GSe,"A",{href:!0});var b3t=s(gQ);Opr=r(b3t,"TFXLNetLMHeadModel"),b3t.forEach(t),Vpr=r(GSe," (XLNet model)"),GSe.forEach(t),Ce.forEach(t),Xpr=i(ul),T(F8.$$.fragment,ul),ul.forEach(t),_l.forEach(t),cNe=i(f),Ud=n(f,"H2",{class:!0});var _De=s(Ud);T8=n(_De,"A",{id:!0,class:!0,href:!0});var v3t=s(T8);ybe=n(v3t,"SPAN",{});var F3t=s(ybe);T(cL.$$.fragment,F3t),F3t.forEach(t),v3t.forEach(t),zpr=i(_De),Lbe=n(_De,"SPAN",{});var T3t=s(Lbe);Wpr=r(T3t,"TFAutoModelForImageClassification"),T3t.forEach(t),_De.forEach(t),fNe=i(f),er=n(f,"DIV",{class:!0});var bl=s(er);T(fL.$$.fragment,bl),Qpr=i(bl),Jd=n(bl,"P",{});var DZ=s(Jd);Hpr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hQ=n(DZ,"A",{href:!0});var M3t=s(hQ);Upr=r(M3t,"from_pretrained()"),M3t.forEach(t),Jpr=r(DZ," class method or the "),pQ=n(DZ,"A",{href:!0});var E3t=s(pQ);Ypr=r(E3t,"from_config()"),E3t.forEach(t),Kpr=r(DZ,` class
method.`),DZ.forEach(t),Zpr=i(bl),mL=n(bl,"P",{});var uDe=s(mL);e_r=r(uDe,"This class cannot be instantiated directly using "),xbe=n(uDe,"CODE",{});var C3t=s(xbe);o_r=r(C3t,"__init__()"),C3t.forEach(t),r_r=r(uDe," (throws an error)."),uDe.forEach(t),t_r=i(bl),$t=n(bl,"DIV",{class:!0});var u0=s($t);T(gL.$$.fragment,u0),a_r=i(u0),$be=n(u0,"P",{});var w3t=s($be);n_r=r(w3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),w3t.forEach(t),s_r=i(u0),Yd=n(u0,"P",{});var GZ=s(Yd);l_r=r(GZ,`Note:
Loading a model from its configuration file does `),kbe=n(GZ,"STRONG",{});var A3t=s(kbe);i_r=r(A3t,"not"),A3t.forEach(t),d_r=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(GZ,"A",{href:!0});var y3t=s(_Q);c_r=r(y3t,"from_pretrained()"),y3t.forEach(t),f_r=r(GZ," to load the model weights."),GZ.forEach(t),m_r=i(u0),T(M8.$$.fragment,u0),u0.forEach(t),g_r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(hL.$$.fragment,vl),h_r=i(vl),Sbe=n(vl,"P",{});var L3t=s(Sbe);p_r=r(L3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),L3t.forEach(t),__r=i(vl),on=n(vl,"P",{});var b0=s(on);u_r=r(b0,"The model class to instantiate is selected based on the "),Rbe=n(b0,"CODE",{});var x3t=s(Rbe);b_r=r(x3t,"model_type"),x3t.forEach(t),v_r=r(b0,` property of the config object (either
passed as an argument or loaded from `),Pbe=n(b0,"CODE",{});var $3t=s(Pbe);F_r=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),T_r=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(b0,"CODE",{});var k3t=s(Bbe);M_r=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),E_r=r(b0,":"),b0.forEach(t),C_r=i(vl),rn=n(vl,"UL",{});var v0=s(rn);E8=n(v0,"LI",{});var OSe=s(E8);Ibe=n(OSe,"STRONG",{});var S3t=s(Ibe);w_r=r(S3t,"convnext"),S3t.forEach(t),A_r=r(OSe," \u2014 "),uQ=n(OSe,"A",{href:!0});var R3t=s(uQ);y_r=r(R3t,"TFConvNextForImageClassification"),R3t.forEach(t),L_r=r(OSe," (ConvNext model)"),OSe.forEach(t),x_r=i(v0),C8=n(v0,"LI",{});var VSe=s(C8);qbe=n(VSe,"STRONG",{});var P3t=s(qbe);$_r=r(P3t,"data2vec-vision"),P3t.forEach(t),k_r=r(VSe," \u2014 "),bQ=n(VSe,"A",{href:!0});var B3t=s(bQ);S_r=r(B3t,"TFData2VecVisionForImageClassification"),B3t.forEach(t),R_r=r(VSe," (Data2VecVision model)"),VSe.forEach(t),P_r=i(v0),w8=n(v0,"LI",{});var XSe=s(w8);Nbe=n(XSe,"STRONG",{});var I3t=s(Nbe);B_r=r(I3t,"swin"),I3t.forEach(t),I_r=r(XSe," \u2014 "),vQ=n(XSe,"A",{href:!0});var q3t=s(vQ);q_r=r(q3t,"TFSwinForImageClassification"),q3t.forEach(t),N_r=r(XSe," (Swin model)"),XSe.forEach(t),j_r=i(v0),A8=n(v0,"LI",{});var zSe=s(A8);jbe=n(zSe,"STRONG",{});var N3t=s(jbe);D_r=r(N3t,"vit"),N3t.forEach(t),G_r=r(zSe," \u2014 "),FQ=n(zSe,"A",{href:!0});var j3t=s(FQ);O_r=r(j3t,"TFViTForImageClassification"),j3t.forEach(t),V_r=r(zSe," (ViT model)"),zSe.forEach(t),v0.forEach(t),X_r=i(vl),T(y8.$$.fragment,vl),vl.forEach(t),bl.forEach(t),mNe=i(f),Kd=n(f,"H2",{class:!0});var bDe=s(Kd);L8=n(bDe,"A",{id:!0,class:!0,href:!0});var D3t=s(L8);Dbe=n(D3t,"SPAN",{});var G3t=s(Dbe);T(pL.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),z_r=i(bDe),Gbe=n(bDe,"SPAN",{});var O3t=s(Gbe);W_r=r(O3t,"TFAutoModelForMaskedLM"),O3t.forEach(t),bDe.forEach(t),gNe=i(f),or=n(f,"DIV",{class:!0});var Fl=s(or);T(_L.$$.fragment,Fl),Q_r=i(Fl),Zd=n(Fl,"P",{});var OZ=s(Zd);H_r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TQ=n(OZ,"A",{href:!0});var V3t=s(TQ);U_r=r(V3t,"from_pretrained()"),V3t.forEach(t),J_r=r(OZ," class method or the "),MQ=n(OZ,"A",{href:!0});var X3t=s(MQ);Y_r=r(X3t,"from_config()"),X3t.forEach(t),K_r=r(OZ,` class
method.`),OZ.forEach(t),Z_r=i(Fl),uL=n(Fl,"P",{});var vDe=s(uL);eur=r(vDe,"This class cannot be instantiated directly using "),Obe=n(vDe,"CODE",{});var z3t=s(Obe);our=r(z3t,"__init__()"),z3t.forEach(t),rur=r(vDe," (throws an error)."),vDe.forEach(t),tur=i(Fl),kt=n(Fl,"DIV",{class:!0});var F0=s(kt);T(bL.$$.fragment,F0),aur=i(F0),Vbe=n(F0,"P",{});var W3t=s(Vbe);nur=r(W3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),W3t.forEach(t),sur=i(F0),ec=n(F0,"P",{});var VZ=s(ec);lur=r(VZ,`Note:
Loading a model from its configuration file does `),Xbe=n(VZ,"STRONG",{});var Q3t=s(Xbe);iur=r(Q3t,"not"),Q3t.forEach(t),dur=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(VZ,"A",{href:!0});var H3t=s(EQ);cur=r(H3t,"from_pretrained()"),H3t.forEach(t),fur=r(VZ," to load the model weights."),VZ.forEach(t),mur=i(F0),T(x8.$$.fragment,F0),F0.forEach(t),gur=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(vL.$$.fragment,Tl),hur=i(Tl),zbe=n(Tl,"P",{});var U3t=s(zbe);pur=r(U3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),U3t.forEach(t),_ur=i(Tl),tn=n(Tl,"P",{});var T0=s(tn);uur=r(T0,"The model class to instantiate is selected based on the "),Wbe=n(T0,"CODE",{});var J3t=s(Wbe);bur=r(J3t,"model_type"),J3t.forEach(t),vur=r(T0,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(T0,"CODE",{});var Y3t=s(Qbe);Fur=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),Tur=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hbe=n(T0,"CODE",{});var K3t=s(Hbe);Mur=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),Eur=r(T0,":"),T0.forEach(t),Cur=i(Tl),ie=n(Tl,"UL",{});var fe=s(ie);$8=n(fe,"LI",{});var WSe=s($8);Ube=n(WSe,"STRONG",{});var Z3t=s(Ube);wur=r(Z3t,"albert"),Z3t.forEach(t),Aur=r(WSe," \u2014 "),CQ=n(WSe,"A",{href:!0});var eFt=s(CQ);yur=r(eFt,"TFAlbertForMaskedLM"),eFt.forEach(t),Lur=r(WSe," (ALBERT model)"),WSe.forEach(t),xur=i(fe),k8=n(fe,"LI",{});var QSe=s(k8);Jbe=n(QSe,"STRONG",{});var oFt=s(Jbe);$ur=r(oFt,"bert"),oFt.forEach(t),kur=r(QSe," \u2014 "),wQ=n(QSe,"A",{href:!0});var rFt=s(wQ);Sur=r(rFt,"TFBertForMaskedLM"),rFt.forEach(t),Rur=r(QSe," (BERT model)"),QSe.forEach(t),Pur=i(fe),S8=n(fe,"LI",{});var HSe=s(S8);Ybe=n(HSe,"STRONG",{});var tFt=s(Ybe);Bur=r(tFt,"camembert"),tFt.forEach(t),Iur=r(HSe," \u2014 "),AQ=n(HSe,"A",{href:!0});var aFt=s(AQ);qur=r(aFt,"TFCamembertForMaskedLM"),aFt.forEach(t),Nur=r(HSe," (CamemBERT model)"),HSe.forEach(t),jur=i(fe),R8=n(fe,"LI",{});var USe=s(R8);Kbe=n(USe,"STRONG",{});var nFt=s(Kbe);Dur=r(nFt,"convbert"),nFt.forEach(t),Gur=r(USe," \u2014 "),yQ=n(USe,"A",{href:!0});var sFt=s(yQ);Our=r(sFt,"TFConvBertForMaskedLM"),sFt.forEach(t),Vur=r(USe," (ConvBERT model)"),USe.forEach(t),Xur=i(fe),P8=n(fe,"LI",{});var JSe=s(P8);Zbe=n(JSe,"STRONG",{});var lFt=s(Zbe);zur=r(lFt,"deberta"),lFt.forEach(t),Wur=r(JSe," \u2014 "),LQ=n(JSe,"A",{href:!0});var iFt=s(LQ);Qur=r(iFt,"TFDebertaForMaskedLM"),iFt.forEach(t),Hur=r(JSe," (DeBERTa model)"),JSe.forEach(t),Uur=i(fe),B8=n(fe,"LI",{});var YSe=s(B8);e2e=n(YSe,"STRONG",{});var dFt=s(e2e);Jur=r(dFt,"deberta-v2"),dFt.forEach(t),Yur=r(YSe," \u2014 "),xQ=n(YSe,"A",{href:!0});var cFt=s(xQ);Kur=r(cFt,"TFDebertaV2ForMaskedLM"),cFt.forEach(t),Zur=r(YSe," (DeBERTa-v2 model)"),YSe.forEach(t),e1r=i(fe),I8=n(fe,"LI",{});var KSe=s(I8);o2e=n(KSe,"STRONG",{});var fFt=s(o2e);o1r=r(fFt,"distilbert"),fFt.forEach(t),r1r=r(KSe," \u2014 "),$Q=n(KSe,"A",{href:!0});var mFt=s($Q);t1r=r(mFt,"TFDistilBertForMaskedLM"),mFt.forEach(t),a1r=r(KSe," (DistilBERT model)"),KSe.forEach(t),n1r=i(fe),q8=n(fe,"LI",{});var ZSe=s(q8);r2e=n(ZSe,"STRONG",{});var gFt=s(r2e);s1r=r(gFt,"electra"),gFt.forEach(t),l1r=r(ZSe," \u2014 "),kQ=n(ZSe,"A",{href:!0});var hFt=s(kQ);i1r=r(hFt,"TFElectraForMaskedLM"),hFt.forEach(t),d1r=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),c1r=i(fe),N8=n(fe,"LI",{});var eRe=s(N8);t2e=n(eRe,"STRONG",{});var pFt=s(t2e);f1r=r(pFt,"flaubert"),pFt.forEach(t),m1r=r(eRe," \u2014 "),SQ=n(eRe,"A",{href:!0});var _Ft=s(SQ);g1r=r(_Ft,"TFFlaubertWithLMHeadModel"),_Ft.forEach(t),h1r=r(eRe," (FlauBERT model)"),eRe.forEach(t),p1r=i(fe),j8=n(fe,"LI",{});var oRe=s(j8);a2e=n(oRe,"STRONG",{});var uFt=s(a2e);_1r=r(uFt,"funnel"),uFt.forEach(t),u1r=r(oRe," \u2014 "),RQ=n(oRe,"A",{href:!0});var bFt=s(RQ);b1r=r(bFt,"TFFunnelForMaskedLM"),bFt.forEach(t),v1r=r(oRe," (Funnel Transformer model)"),oRe.forEach(t),F1r=i(fe),D8=n(fe,"LI",{});var rRe=s(D8);n2e=n(rRe,"STRONG",{});var vFt=s(n2e);T1r=r(vFt,"layoutlm"),vFt.forEach(t),M1r=r(rRe," \u2014 "),PQ=n(rRe,"A",{href:!0});var FFt=s(PQ);E1r=r(FFt,"TFLayoutLMForMaskedLM"),FFt.forEach(t),C1r=r(rRe," (LayoutLM model)"),rRe.forEach(t),w1r=i(fe),G8=n(fe,"LI",{});var tRe=s(G8);s2e=n(tRe,"STRONG",{});var TFt=s(s2e);A1r=r(TFt,"longformer"),TFt.forEach(t),y1r=r(tRe," \u2014 "),BQ=n(tRe,"A",{href:!0});var MFt=s(BQ);L1r=r(MFt,"TFLongformerForMaskedLM"),MFt.forEach(t),x1r=r(tRe," (Longformer model)"),tRe.forEach(t),$1r=i(fe),O8=n(fe,"LI",{});var aRe=s(O8);l2e=n(aRe,"STRONG",{});var EFt=s(l2e);k1r=r(EFt,"mobilebert"),EFt.forEach(t),S1r=r(aRe," \u2014 "),IQ=n(aRe,"A",{href:!0});var CFt=s(IQ);R1r=r(CFt,"TFMobileBertForMaskedLM"),CFt.forEach(t),P1r=r(aRe," (MobileBERT model)"),aRe.forEach(t),B1r=i(fe),V8=n(fe,"LI",{});var nRe=s(V8);i2e=n(nRe,"STRONG",{});var wFt=s(i2e);I1r=r(wFt,"mpnet"),wFt.forEach(t),q1r=r(nRe," \u2014 "),qQ=n(nRe,"A",{href:!0});var AFt=s(qQ);N1r=r(AFt,"TFMPNetForMaskedLM"),AFt.forEach(t),j1r=r(nRe," (MPNet model)"),nRe.forEach(t),D1r=i(fe),X8=n(fe,"LI",{});var sRe=s(X8);d2e=n(sRe,"STRONG",{});var yFt=s(d2e);G1r=r(yFt,"rembert"),yFt.forEach(t),O1r=r(sRe," \u2014 "),NQ=n(sRe,"A",{href:!0});var LFt=s(NQ);V1r=r(LFt,"TFRemBertForMaskedLM"),LFt.forEach(t),X1r=r(sRe," (RemBERT model)"),sRe.forEach(t),z1r=i(fe),z8=n(fe,"LI",{});var lRe=s(z8);c2e=n(lRe,"STRONG",{});var xFt=s(c2e);W1r=r(xFt,"roberta"),xFt.forEach(t),Q1r=r(lRe," \u2014 "),jQ=n(lRe,"A",{href:!0});var $Ft=s(jQ);H1r=r($Ft,"TFRobertaForMaskedLM"),$Ft.forEach(t),U1r=r(lRe," (RoBERTa model)"),lRe.forEach(t),J1r=i(fe),W8=n(fe,"LI",{});var iRe=s(W8);f2e=n(iRe,"STRONG",{});var kFt=s(f2e);Y1r=r(kFt,"roformer"),kFt.forEach(t),K1r=r(iRe," \u2014 "),DQ=n(iRe,"A",{href:!0});var SFt=s(DQ);Z1r=r(SFt,"TFRoFormerForMaskedLM"),SFt.forEach(t),e7r=r(iRe," (RoFormer model)"),iRe.forEach(t),o7r=i(fe),Q8=n(fe,"LI",{});var dRe=s(Q8);m2e=n(dRe,"STRONG",{});var RFt=s(m2e);r7r=r(RFt,"tapas"),RFt.forEach(t),t7r=r(dRe," \u2014 "),GQ=n(dRe,"A",{href:!0});var PFt=s(GQ);a7r=r(PFt,"TFTapasForMaskedLM"),PFt.forEach(t),n7r=r(dRe," (TAPAS model)"),dRe.forEach(t),s7r=i(fe),H8=n(fe,"LI",{});var cRe=s(H8);g2e=n(cRe,"STRONG",{});var BFt=s(g2e);l7r=r(BFt,"xlm"),BFt.forEach(t),i7r=r(cRe," \u2014 "),OQ=n(cRe,"A",{href:!0});var IFt=s(OQ);d7r=r(IFt,"TFXLMWithLMHeadModel"),IFt.forEach(t),c7r=r(cRe," (XLM model)"),cRe.forEach(t),f7r=i(fe),U8=n(fe,"LI",{});var fRe=s(U8);h2e=n(fRe,"STRONG",{});var qFt=s(h2e);m7r=r(qFt,"xlm-roberta"),qFt.forEach(t),g7r=r(fRe," \u2014 "),VQ=n(fRe,"A",{href:!0});var NFt=s(VQ);h7r=r(NFt,"TFXLMRobertaForMaskedLM"),NFt.forEach(t),p7r=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),fe.forEach(t),_7r=i(Tl),T(J8.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),hNe=i(f),oc=n(f,"H2",{class:!0});var FDe=s(oc);Y8=n(FDe,"A",{id:!0,class:!0,href:!0});var jFt=s(Y8);p2e=n(jFt,"SPAN",{});var DFt=s(p2e);T(FL.$$.fragment,DFt),DFt.forEach(t),jFt.forEach(t),u7r=i(FDe),_2e=n(FDe,"SPAN",{});var GFt=s(_2e);b7r=r(GFt,"TFAutoModelForSeq2SeqLM"),GFt.forEach(t),FDe.forEach(t),pNe=i(f),rr=n(f,"DIV",{class:!0});var Ml=s(rr);T(TL.$$.fragment,Ml),v7r=i(Ml),rc=n(Ml,"P",{});var XZ=s(rc);F7r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),XQ=n(XZ,"A",{href:!0});var OFt=s(XQ);T7r=r(OFt,"from_pretrained()"),OFt.forEach(t),M7r=r(XZ," class method or the "),zQ=n(XZ,"A",{href:!0});var VFt=s(zQ);E7r=r(VFt,"from_config()"),VFt.forEach(t),C7r=r(XZ,` class
method.`),XZ.forEach(t),w7r=i(Ml),ML=n(Ml,"P",{});var TDe=s(ML);A7r=r(TDe,"This class cannot be instantiated directly using "),u2e=n(TDe,"CODE",{});var XFt=s(u2e);y7r=r(XFt,"__init__()"),XFt.forEach(t),L7r=r(TDe," (throws an error)."),TDe.forEach(t),x7r=i(Ml),St=n(Ml,"DIV",{class:!0});var M0=s(St);T(EL.$$.fragment,M0),$7r=i(M0),b2e=n(M0,"P",{});var zFt=s(b2e);k7r=r(zFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zFt.forEach(t),S7r=i(M0),tc=n(M0,"P",{});var zZ=s(tc);R7r=r(zZ,`Note:
Loading a model from its configuration file does `),v2e=n(zZ,"STRONG",{});var WFt=s(v2e);P7r=r(WFt,"not"),WFt.forEach(t),B7r=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(zZ,"A",{href:!0});var QFt=s(WQ);I7r=r(QFt,"from_pretrained()"),QFt.forEach(t),q7r=r(zZ," to load the model weights."),zZ.forEach(t),N7r=i(M0),T(K8.$$.fragment,M0),M0.forEach(t),j7r=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(CL.$$.fragment,El),D7r=i(El),F2e=n(El,"P",{});var HFt=s(F2e);G7r=r(HFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HFt.forEach(t),O7r=i(El),an=n(El,"P",{});var E0=s(an);V7r=r(E0,"The model class to instantiate is selected based on the "),T2e=n(E0,"CODE",{});var UFt=s(T2e);X7r=r(UFt,"model_type"),UFt.forEach(t),z7r=r(E0,` property of the config object (either
passed as an argument or loaded from `),M2e=n(E0,"CODE",{});var JFt=s(M2e);W7r=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),Q7r=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(E0,"CODE",{});var YFt=s(E2e);H7r=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),U7r=r(E0,":"),E0.forEach(t),J7r=i(El),ye=n(El,"UL",{});var Be=s(ye);Z8=n(Be,"LI",{});var mRe=s(Z8);C2e=n(mRe,"STRONG",{});var KFt=s(C2e);Y7r=r(KFt,"bart"),KFt.forEach(t),K7r=r(mRe," \u2014 "),QQ=n(mRe,"A",{href:!0});var ZFt=s(QQ);Z7r=r(ZFt,"TFBartForConditionalGeneration"),ZFt.forEach(t),ebr=r(mRe," (BART model)"),mRe.forEach(t),obr=i(Be),eM=n(Be,"LI",{});var gRe=s(eM);w2e=n(gRe,"STRONG",{});var eTt=s(w2e);rbr=r(eTt,"blenderbot"),eTt.forEach(t),tbr=r(gRe," \u2014 "),HQ=n(gRe,"A",{href:!0});var oTt=s(HQ);abr=r(oTt,"TFBlenderbotForConditionalGeneration"),oTt.forEach(t),nbr=r(gRe," (Blenderbot model)"),gRe.forEach(t),sbr=i(Be),oM=n(Be,"LI",{});var hRe=s(oM);A2e=n(hRe,"STRONG",{});var rTt=s(A2e);lbr=r(rTt,"blenderbot-small"),rTt.forEach(t),ibr=r(hRe," \u2014 "),UQ=n(hRe,"A",{href:!0});var tTt=s(UQ);dbr=r(tTt,"TFBlenderbotSmallForConditionalGeneration"),tTt.forEach(t),cbr=r(hRe," (BlenderbotSmall model)"),hRe.forEach(t),fbr=i(Be),rM=n(Be,"LI",{});var pRe=s(rM);y2e=n(pRe,"STRONG",{});var aTt=s(y2e);mbr=r(aTt,"encoder-decoder"),aTt.forEach(t),gbr=r(pRe," \u2014 "),JQ=n(pRe,"A",{href:!0});var nTt=s(JQ);hbr=r(nTt,"TFEncoderDecoderModel"),nTt.forEach(t),pbr=r(pRe," (Encoder decoder model)"),pRe.forEach(t),_br=i(Be),tM=n(Be,"LI",{});var _Re=s(tM);L2e=n(_Re,"STRONG",{});var sTt=s(L2e);ubr=r(sTt,"led"),sTt.forEach(t),bbr=r(_Re," \u2014 "),YQ=n(_Re,"A",{href:!0});var lTt=s(YQ);vbr=r(lTt,"TFLEDForConditionalGeneration"),lTt.forEach(t),Fbr=r(_Re," (LED model)"),_Re.forEach(t),Tbr=i(Be),aM=n(Be,"LI",{});var uRe=s(aM);x2e=n(uRe,"STRONG",{});var iTt=s(x2e);Mbr=r(iTt,"marian"),iTt.forEach(t),Ebr=r(uRe," \u2014 "),KQ=n(uRe,"A",{href:!0});var dTt=s(KQ);Cbr=r(dTt,"TFMarianMTModel"),dTt.forEach(t),wbr=r(uRe," (Marian model)"),uRe.forEach(t),Abr=i(Be),nM=n(Be,"LI",{});var bRe=s(nM);$2e=n(bRe,"STRONG",{});var cTt=s($2e);ybr=r(cTt,"mbart"),cTt.forEach(t),Lbr=r(bRe," \u2014 "),ZQ=n(bRe,"A",{href:!0});var fTt=s(ZQ);xbr=r(fTt,"TFMBartForConditionalGeneration"),fTt.forEach(t),$br=r(bRe," (mBART model)"),bRe.forEach(t),kbr=i(Be),sM=n(Be,"LI",{});var vRe=s(sM);k2e=n(vRe,"STRONG",{});var mTt=s(k2e);Sbr=r(mTt,"mt5"),mTt.forEach(t),Rbr=r(vRe," \u2014 "),eH=n(vRe,"A",{href:!0});var gTt=s(eH);Pbr=r(gTt,"TFMT5ForConditionalGeneration"),gTt.forEach(t),Bbr=r(vRe," (mT5 model)"),vRe.forEach(t),Ibr=i(Be),lM=n(Be,"LI",{});var FRe=s(lM);S2e=n(FRe,"STRONG",{});var hTt=s(S2e);qbr=r(hTt,"pegasus"),hTt.forEach(t),Nbr=r(FRe," \u2014 "),oH=n(FRe,"A",{href:!0});var pTt=s(oH);jbr=r(pTt,"TFPegasusForConditionalGeneration"),pTt.forEach(t),Dbr=r(FRe," (Pegasus model)"),FRe.forEach(t),Gbr=i(Be),iM=n(Be,"LI",{});var TRe=s(iM);R2e=n(TRe,"STRONG",{});var _Tt=s(R2e);Obr=r(_Tt,"t5"),_Tt.forEach(t),Vbr=r(TRe," \u2014 "),rH=n(TRe,"A",{href:!0});var uTt=s(rH);Xbr=r(uTt,"TFT5ForConditionalGeneration"),uTt.forEach(t),zbr=r(TRe," (T5 model)"),TRe.forEach(t),Be.forEach(t),Wbr=i(El),T(dM.$$.fragment,El),El.forEach(t),Ml.forEach(t),_Ne=i(f),ac=n(f,"H2",{class:!0});var MDe=s(ac);cM=n(MDe,"A",{id:!0,class:!0,href:!0});var bTt=s(cM);P2e=n(bTt,"SPAN",{});var vTt=s(P2e);T(wL.$$.fragment,vTt),vTt.forEach(t),bTt.forEach(t),Qbr=i(MDe),B2e=n(MDe,"SPAN",{});var FTt=s(B2e);Hbr=r(FTt,"TFAutoModelForSequenceClassification"),FTt.forEach(t),MDe.forEach(t),uNe=i(f),tr=n(f,"DIV",{class:!0});var Cl=s(tr);T(AL.$$.fragment,Cl),Ubr=i(Cl),nc=n(Cl,"P",{});var WZ=s(nc);Jbr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tH=n(WZ,"A",{href:!0});var TTt=s(tH);Ybr=r(TTt,"from_pretrained()"),TTt.forEach(t),Kbr=r(WZ," class method or the "),aH=n(WZ,"A",{href:!0});var MTt=s(aH);Zbr=r(MTt,"from_config()"),MTt.forEach(t),e2r=r(WZ,` class
method.`),WZ.forEach(t),o2r=i(Cl),yL=n(Cl,"P",{});var EDe=s(yL);r2r=r(EDe,"This class cannot be instantiated directly using "),I2e=n(EDe,"CODE",{});var ETt=s(I2e);t2r=r(ETt,"__init__()"),ETt.forEach(t),a2r=r(EDe," (throws an error)."),EDe.forEach(t),n2r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var C0=s(Rt);T(LL.$$.fragment,C0),s2r=i(C0),q2e=n(C0,"P",{});var CTt=s(q2e);l2r=r(CTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CTt.forEach(t),i2r=i(C0),sc=n(C0,"P",{});var QZ=s(sc);d2r=r(QZ,`Note:
Loading a model from its configuration file does `),N2e=n(QZ,"STRONG",{});var wTt=s(N2e);c2r=r(wTt,"not"),wTt.forEach(t),f2r=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nH=n(QZ,"A",{href:!0});var ATt=s(nH);m2r=r(ATt,"from_pretrained()"),ATt.forEach(t),g2r=r(QZ," to load the model weights."),QZ.forEach(t),h2r=i(C0),T(fM.$$.fragment,C0),C0.forEach(t),p2r=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(xL.$$.fragment,wl),_2r=i(wl),j2e=n(wl,"P",{});var yTt=s(j2e);u2r=r(yTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yTt.forEach(t),b2r=i(wl),nn=n(wl,"P",{});var w0=s(nn);v2r=r(w0,"The model class to instantiate is selected based on the "),D2e=n(w0,"CODE",{});var LTt=s(D2e);F2r=r(LTt,"model_type"),LTt.forEach(t),T2r=r(w0,` property of the config object (either
passed as an argument or loaded from `),G2e=n(w0,"CODE",{});var xTt=s(G2e);M2r=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),E2r=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(w0,"CODE",{});var $Tt=s(O2e);C2r=r($Tt,"pretrained_model_name_or_path"),$Tt.forEach(t),w2r=r(w0,":"),w0.forEach(t),A2r=i(wl),ee=n(wl,"UL",{});var ae=s(ee);mM=n(ae,"LI",{});var MRe=s(mM);V2e=n(MRe,"STRONG",{});var kTt=s(V2e);y2r=r(kTt,"albert"),kTt.forEach(t),L2r=r(MRe," \u2014 "),sH=n(MRe,"A",{href:!0});var STt=s(sH);x2r=r(STt,"TFAlbertForSequenceClassification"),STt.forEach(t),$2r=r(MRe," (ALBERT model)"),MRe.forEach(t),k2r=i(ae),gM=n(ae,"LI",{});var ERe=s(gM);X2e=n(ERe,"STRONG",{});var RTt=s(X2e);S2r=r(RTt,"bert"),RTt.forEach(t),R2r=r(ERe," \u2014 "),lH=n(ERe,"A",{href:!0});var PTt=s(lH);P2r=r(PTt,"TFBertForSequenceClassification"),PTt.forEach(t),B2r=r(ERe," (BERT model)"),ERe.forEach(t),I2r=i(ae),hM=n(ae,"LI",{});var CRe=s(hM);z2e=n(CRe,"STRONG",{});var BTt=s(z2e);q2r=r(BTt,"camembert"),BTt.forEach(t),N2r=r(CRe," \u2014 "),iH=n(CRe,"A",{href:!0});var ITt=s(iH);j2r=r(ITt,"TFCamembertForSequenceClassification"),ITt.forEach(t),D2r=r(CRe," (CamemBERT model)"),CRe.forEach(t),G2r=i(ae),pM=n(ae,"LI",{});var wRe=s(pM);W2e=n(wRe,"STRONG",{});var qTt=s(W2e);O2r=r(qTt,"convbert"),qTt.forEach(t),V2r=r(wRe," \u2014 "),dH=n(wRe,"A",{href:!0});var NTt=s(dH);X2r=r(NTt,"TFConvBertForSequenceClassification"),NTt.forEach(t),z2r=r(wRe," (ConvBERT model)"),wRe.forEach(t),W2r=i(ae),_M=n(ae,"LI",{});var ARe=s(_M);Q2e=n(ARe,"STRONG",{});var jTt=s(Q2e);Q2r=r(jTt,"ctrl"),jTt.forEach(t),H2r=r(ARe," \u2014 "),cH=n(ARe,"A",{href:!0});var DTt=s(cH);U2r=r(DTt,"TFCTRLForSequenceClassification"),DTt.forEach(t),J2r=r(ARe," (CTRL model)"),ARe.forEach(t),Y2r=i(ae),uM=n(ae,"LI",{});var yRe=s(uM);H2e=n(yRe,"STRONG",{});var GTt=s(H2e);K2r=r(GTt,"deberta"),GTt.forEach(t),Z2r=r(yRe," \u2014 "),fH=n(yRe,"A",{href:!0});var OTt=s(fH);evr=r(OTt,"TFDebertaForSequenceClassification"),OTt.forEach(t),ovr=r(yRe," (DeBERTa model)"),yRe.forEach(t),rvr=i(ae),bM=n(ae,"LI",{});var LRe=s(bM);U2e=n(LRe,"STRONG",{});var VTt=s(U2e);tvr=r(VTt,"deberta-v2"),VTt.forEach(t),avr=r(LRe," \u2014 "),mH=n(LRe,"A",{href:!0});var XTt=s(mH);nvr=r(XTt,"TFDebertaV2ForSequenceClassification"),XTt.forEach(t),svr=r(LRe," (DeBERTa-v2 model)"),LRe.forEach(t),lvr=i(ae),vM=n(ae,"LI",{});var xRe=s(vM);J2e=n(xRe,"STRONG",{});var zTt=s(J2e);ivr=r(zTt,"distilbert"),zTt.forEach(t),dvr=r(xRe," \u2014 "),gH=n(xRe,"A",{href:!0});var WTt=s(gH);cvr=r(WTt,"TFDistilBertForSequenceClassification"),WTt.forEach(t),fvr=r(xRe," (DistilBERT model)"),xRe.forEach(t),mvr=i(ae),FM=n(ae,"LI",{});var $Re=s(FM);Y2e=n($Re,"STRONG",{});var QTt=s(Y2e);gvr=r(QTt,"electra"),QTt.forEach(t),hvr=r($Re," \u2014 "),hH=n($Re,"A",{href:!0});var HTt=s(hH);pvr=r(HTt,"TFElectraForSequenceClassification"),HTt.forEach(t),_vr=r($Re," (ELECTRA model)"),$Re.forEach(t),uvr=i(ae),TM=n(ae,"LI",{});var kRe=s(TM);K2e=n(kRe,"STRONG",{});var UTt=s(K2e);bvr=r(UTt,"flaubert"),UTt.forEach(t),vvr=r(kRe," \u2014 "),pH=n(kRe,"A",{href:!0});var JTt=s(pH);Fvr=r(JTt,"TFFlaubertForSequenceClassification"),JTt.forEach(t),Tvr=r(kRe," (FlauBERT model)"),kRe.forEach(t),Mvr=i(ae),MM=n(ae,"LI",{});var SRe=s(MM);Z2e=n(SRe,"STRONG",{});var YTt=s(Z2e);Evr=r(YTt,"funnel"),YTt.forEach(t),Cvr=r(SRe," \u2014 "),_H=n(SRe,"A",{href:!0});var KTt=s(_H);wvr=r(KTt,"TFFunnelForSequenceClassification"),KTt.forEach(t),Avr=r(SRe," (Funnel Transformer model)"),SRe.forEach(t),yvr=i(ae),EM=n(ae,"LI",{});var RRe=s(EM);eve=n(RRe,"STRONG",{});var ZTt=s(eve);Lvr=r(ZTt,"gpt2"),ZTt.forEach(t),xvr=r(RRe," \u2014 "),uH=n(RRe,"A",{href:!0});var e8t=s(uH);$vr=r(e8t,"TFGPT2ForSequenceClassification"),e8t.forEach(t),kvr=r(RRe," (OpenAI GPT-2 model)"),RRe.forEach(t),Svr=i(ae),CM=n(ae,"LI",{});var PRe=s(CM);ove=n(PRe,"STRONG",{});var o8t=s(ove);Rvr=r(o8t,"gptj"),o8t.forEach(t),Pvr=r(PRe," \u2014 "),bH=n(PRe,"A",{href:!0});var r8t=s(bH);Bvr=r(r8t,"TFGPTJForSequenceClassification"),r8t.forEach(t),Ivr=r(PRe," (GPT-J model)"),PRe.forEach(t),qvr=i(ae),wM=n(ae,"LI",{});var BRe=s(wM);rve=n(BRe,"STRONG",{});var t8t=s(rve);Nvr=r(t8t,"layoutlm"),t8t.forEach(t),jvr=r(BRe," \u2014 "),vH=n(BRe,"A",{href:!0});var a8t=s(vH);Dvr=r(a8t,"TFLayoutLMForSequenceClassification"),a8t.forEach(t),Gvr=r(BRe," (LayoutLM model)"),BRe.forEach(t),Ovr=i(ae),AM=n(ae,"LI",{});var IRe=s(AM);tve=n(IRe,"STRONG",{});var n8t=s(tve);Vvr=r(n8t,"longformer"),n8t.forEach(t),Xvr=r(IRe," \u2014 "),FH=n(IRe,"A",{href:!0});var s8t=s(FH);zvr=r(s8t,"TFLongformerForSequenceClassification"),s8t.forEach(t),Wvr=r(IRe," (Longformer model)"),IRe.forEach(t),Qvr=i(ae),yM=n(ae,"LI",{});var qRe=s(yM);ave=n(qRe,"STRONG",{});var l8t=s(ave);Hvr=r(l8t,"mobilebert"),l8t.forEach(t),Uvr=r(qRe," \u2014 "),TH=n(qRe,"A",{href:!0});var i8t=s(TH);Jvr=r(i8t,"TFMobileBertForSequenceClassification"),i8t.forEach(t),Yvr=r(qRe," (MobileBERT model)"),qRe.forEach(t),Kvr=i(ae),LM=n(ae,"LI",{});var NRe=s(LM);nve=n(NRe,"STRONG",{});var d8t=s(nve);Zvr=r(d8t,"mpnet"),d8t.forEach(t),e3r=r(NRe," \u2014 "),MH=n(NRe,"A",{href:!0});var c8t=s(MH);o3r=r(c8t,"TFMPNetForSequenceClassification"),c8t.forEach(t),r3r=r(NRe," (MPNet model)"),NRe.forEach(t),t3r=i(ae),xM=n(ae,"LI",{});var jRe=s(xM);sve=n(jRe,"STRONG",{});var f8t=s(sve);a3r=r(f8t,"openai-gpt"),f8t.forEach(t),n3r=r(jRe," \u2014 "),EH=n(jRe,"A",{href:!0});var m8t=s(EH);s3r=r(m8t,"TFOpenAIGPTForSequenceClassification"),m8t.forEach(t),l3r=r(jRe," (OpenAI GPT model)"),jRe.forEach(t),i3r=i(ae),$M=n(ae,"LI",{});var DRe=s($M);lve=n(DRe,"STRONG",{});var g8t=s(lve);d3r=r(g8t,"rembert"),g8t.forEach(t),c3r=r(DRe," \u2014 "),CH=n(DRe,"A",{href:!0});var h8t=s(CH);f3r=r(h8t,"TFRemBertForSequenceClassification"),h8t.forEach(t),m3r=r(DRe," (RemBERT model)"),DRe.forEach(t),g3r=i(ae),kM=n(ae,"LI",{});var GRe=s(kM);ive=n(GRe,"STRONG",{});var p8t=s(ive);h3r=r(p8t,"roberta"),p8t.forEach(t),p3r=r(GRe," \u2014 "),wH=n(GRe,"A",{href:!0});var _8t=s(wH);_3r=r(_8t,"TFRobertaForSequenceClassification"),_8t.forEach(t),u3r=r(GRe," (RoBERTa model)"),GRe.forEach(t),b3r=i(ae),SM=n(ae,"LI",{});var ORe=s(SM);dve=n(ORe,"STRONG",{});var u8t=s(dve);v3r=r(u8t,"roformer"),u8t.forEach(t),F3r=r(ORe," \u2014 "),AH=n(ORe,"A",{href:!0});var b8t=s(AH);T3r=r(b8t,"TFRoFormerForSequenceClassification"),b8t.forEach(t),M3r=r(ORe," (RoFormer model)"),ORe.forEach(t),E3r=i(ae),RM=n(ae,"LI",{});var VRe=s(RM);cve=n(VRe,"STRONG",{});var v8t=s(cve);C3r=r(v8t,"tapas"),v8t.forEach(t),w3r=r(VRe," \u2014 "),yH=n(VRe,"A",{href:!0});var F8t=s(yH);A3r=r(F8t,"TFTapasForSequenceClassification"),F8t.forEach(t),y3r=r(VRe," (TAPAS model)"),VRe.forEach(t),L3r=i(ae),PM=n(ae,"LI",{});var XRe=s(PM);fve=n(XRe,"STRONG",{});var T8t=s(fve);x3r=r(T8t,"transfo-xl"),T8t.forEach(t),$3r=r(XRe," \u2014 "),LH=n(XRe,"A",{href:!0});var M8t=s(LH);k3r=r(M8t,"TFTransfoXLForSequenceClassification"),M8t.forEach(t),S3r=r(XRe," (Transformer-XL model)"),XRe.forEach(t),R3r=i(ae),BM=n(ae,"LI",{});var zRe=s(BM);mve=n(zRe,"STRONG",{});var E8t=s(mve);P3r=r(E8t,"xlm"),E8t.forEach(t),B3r=r(zRe," \u2014 "),xH=n(zRe,"A",{href:!0});var C8t=s(xH);I3r=r(C8t,"TFXLMForSequenceClassification"),C8t.forEach(t),q3r=r(zRe," (XLM model)"),zRe.forEach(t),N3r=i(ae),IM=n(ae,"LI",{});var WRe=s(IM);gve=n(WRe,"STRONG",{});var w8t=s(gve);j3r=r(w8t,"xlm-roberta"),w8t.forEach(t),D3r=r(WRe," \u2014 "),$H=n(WRe,"A",{href:!0});var A8t=s($H);G3r=r(A8t,"TFXLMRobertaForSequenceClassification"),A8t.forEach(t),O3r=r(WRe," (XLM-RoBERTa model)"),WRe.forEach(t),V3r=i(ae),qM=n(ae,"LI",{});var QRe=s(qM);hve=n(QRe,"STRONG",{});var y8t=s(hve);X3r=r(y8t,"xlnet"),y8t.forEach(t),z3r=r(QRe," \u2014 "),kH=n(QRe,"A",{href:!0});var L8t=s(kH);W3r=r(L8t,"TFXLNetForSequenceClassification"),L8t.forEach(t),Q3r=r(QRe," (XLNet model)"),QRe.forEach(t),ae.forEach(t),H3r=i(wl),T(NM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),bNe=i(f),lc=n(f,"H2",{class:!0});var CDe=s(lc);jM=n(CDe,"A",{id:!0,class:!0,href:!0});var x8t=s(jM);pve=n(x8t,"SPAN",{});var $8t=s(pve);T($L.$$.fragment,$8t),$8t.forEach(t),x8t.forEach(t),U3r=i(CDe),_ve=n(CDe,"SPAN",{});var k8t=s(_ve);J3r=r(k8t,"TFAutoModelForMultipleChoice"),k8t.forEach(t),CDe.forEach(t),vNe=i(f),ar=n(f,"DIV",{class:!0});var Al=s(ar);T(kL.$$.fragment,Al),Y3r=i(Al),ic=n(Al,"P",{});var HZ=s(ic);K3r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SH=n(HZ,"A",{href:!0});var S8t=s(SH);Z3r=r(S8t,"from_pretrained()"),S8t.forEach(t),eFr=r(HZ," class method or the "),RH=n(HZ,"A",{href:!0});var R8t=s(RH);oFr=r(R8t,"from_config()"),R8t.forEach(t),rFr=r(HZ,` class
method.`),HZ.forEach(t),tFr=i(Al),SL=n(Al,"P",{});var wDe=s(SL);aFr=r(wDe,"This class cannot be instantiated directly using "),uve=n(wDe,"CODE",{});var P8t=s(uve);nFr=r(P8t,"__init__()"),P8t.forEach(t),sFr=r(wDe," (throws an error)."),wDe.forEach(t),lFr=i(Al),Pt=n(Al,"DIV",{class:!0});var A0=s(Pt);T(RL.$$.fragment,A0),iFr=i(A0),bve=n(A0,"P",{});var B8t=s(bve);dFr=r(B8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),B8t.forEach(t),cFr=i(A0),dc=n(A0,"P",{});var UZ=s(dc);fFr=r(UZ,`Note:
Loading a model from its configuration file does `),vve=n(UZ,"STRONG",{});var I8t=s(vve);mFr=r(I8t,"not"),I8t.forEach(t),gFr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(UZ,"A",{href:!0});var q8t=s(PH);hFr=r(q8t,"from_pretrained()"),q8t.forEach(t),pFr=r(UZ," to load the model weights."),UZ.forEach(t),_Fr=i(A0),T(DM.$$.fragment,A0),A0.forEach(t),uFr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(PL.$$.fragment,yl),bFr=i(yl),Fve=n(yl,"P",{});var N8t=s(Fve);vFr=r(N8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),N8t.forEach(t),FFr=i(yl),sn=n(yl,"P",{});var y0=s(sn);TFr=r(y0,"The model class to instantiate is selected based on the "),Tve=n(y0,"CODE",{});var j8t=s(Tve);MFr=r(j8t,"model_type"),j8t.forEach(t),EFr=r(y0,` property of the config object (either
passed as an argument or loaded from `),Mve=n(y0,"CODE",{});var D8t=s(Mve);CFr=r(D8t,"pretrained_model_name_or_path"),D8t.forEach(t),wFr=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eve=n(y0,"CODE",{});var G8t=s(Eve);AFr=r(G8t,"pretrained_model_name_or_path"),G8t.forEach(t),yFr=r(y0,":"),y0.forEach(t),LFr=i(yl),he=n(yl,"UL",{});var ue=s(he);GM=n(ue,"LI",{});var HRe=s(GM);Cve=n(HRe,"STRONG",{});var O8t=s(Cve);xFr=r(O8t,"albert"),O8t.forEach(t),$Fr=r(HRe," \u2014 "),BH=n(HRe,"A",{href:!0});var V8t=s(BH);kFr=r(V8t,"TFAlbertForMultipleChoice"),V8t.forEach(t),SFr=r(HRe," (ALBERT model)"),HRe.forEach(t),RFr=i(ue),OM=n(ue,"LI",{});var URe=s(OM);wve=n(URe,"STRONG",{});var X8t=s(wve);PFr=r(X8t,"bert"),X8t.forEach(t),BFr=r(URe," \u2014 "),IH=n(URe,"A",{href:!0});var z8t=s(IH);IFr=r(z8t,"TFBertForMultipleChoice"),z8t.forEach(t),qFr=r(URe," (BERT model)"),URe.forEach(t),NFr=i(ue),VM=n(ue,"LI",{});var JRe=s(VM);Ave=n(JRe,"STRONG",{});var W8t=s(Ave);jFr=r(W8t,"camembert"),W8t.forEach(t),DFr=r(JRe," \u2014 "),qH=n(JRe,"A",{href:!0});var Q8t=s(qH);GFr=r(Q8t,"TFCamembertForMultipleChoice"),Q8t.forEach(t),OFr=r(JRe," (CamemBERT model)"),JRe.forEach(t),VFr=i(ue),XM=n(ue,"LI",{});var YRe=s(XM);yve=n(YRe,"STRONG",{});var H8t=s(yve);XFr=r(H8t,"convbert"),H8t.forEach(t),zFr=r(YRe," \u2014 "),NH=n(YRe,"A",{href:!0});var U8t=s(NH);WFr=r(U8t,"TFConvBertForMultipleChoice"),U8t.forEach(t),QFr=r(YRe," (ConvBERT model)"),YRe.forEach(t),HFr=i(ue),zM=n(ue,"LI",{});var KRe=s(zM);Lve=n(KRe,"STRONG",{});var J8t=s(Lve);UFr=r(J8t,"distilbert"),J8t.forEach(t),JFr=r(KRe," \u2014 "),jH=n(KRe,"A",{href:!0});var Y8t=s(jH);YFr=r(Y8t,"TFDistilBertForMultipleChoice"),Y8t.forEach(t),KFr=r(KRe," (DistilBERT model)"),KRe.forEach(t),ZFr=i(ue),WM=n(ue,"LI",{});var ZRe=s(WM);xve=n(ZRe,"STRONG",{});var K8t=s(xve);eTr=r(K8t,"electra"),K8t.forEach(t),oTr=r(ZRe," \u2014 "),DH=n(ZRe,"A",{href:!0});var Z8t=s(DH);rTr=r(Z8t,"TFElectraForMultipleChoice"),Z8t.forEach(t),tTr=r(ZRe," (ELECTRA model)"),ZRe.forEach(t),aTr=i(ue),QM=n(ue,"LI",{});var ePe=s(QM);$ve=n(ePe,"STRONG",{});var eMt=s($ve);nTr=r(eMt,"flaubert"),eMt.forEach(t),sTr=r(ePe," \u2014 "),GH=n(ePe,"A",{href:!0});var oMt=s(GH);lTr=r(oMt,"TFFlaubertForMultipleChoice"),oMt.forEach(t),iTr=r(ePe," (FlauBERT model)"),ePe.forEach(t),dTr=i(ue),HM=n(ue,"LI",{});var oPe=s(HM);kve=n(oPe,"STRONG",{});var rMt=s(kve);cTr=r(rMt,"funnel"),rMt.forEach(t),fTr=r(oPe," \u2014 "),OH=n(oPe,"A",{href:!0});var tMt=s(OH);mTr=r(tMt,"TFFunnelForMultipleChoice"),tMt.forEach(t),gTr=r(oPe," (Funnel Transformer model)"),oPe.forEach(t),hTr=i(ue),UM=n(ue,"LI",{});var rPe=s(UM);Sve=n(rPe,"STRONG",{});var aMt=s(Sve);pTr=r(aMt,"longformer"),aMt.forEach(t),_Tr=r(rPe," \u2014 "),VH=n(rPe,"A",{href:!0});var nMt=s(VH);uTr=r(nMt,"TFLongformerForMultipleChoice"),nMt.forEach(t),bTr=r(rPe," (Longformer model)"),rPe.forEach(t),vTr=i(ue),JM=n(ue,"LI",{});var tPe=s(JM);Rve=n(tPe,"STRONG",{});var sMt=s(Rve);FTr=r(sMt,"mobilebert"),sMt.forEach(t),TTr=r(tPe," \u2014 "),XH=n(tPe,"A",{href:!0});var lMt=s(XH);MTr=r(lMt,"TFMobileBertForMultipleChoice"),lMt.forEach(t),ETr=r(tPe," (MobileBERT model)"),tPe.forEach(t),CTr=i(ue),YM=n(ue,"LI",{});var aPe=s(YM);Pve=n(aPe,"STRONG",{});var iMt=s(Pve);wTr=r(iMt,"mpnet"),iMt.forEach(t),ATr=r(aPe," \u2014 "),zH=n(aPe,"A",{href:!0});var dMt=s(zH);yTr=r(dMt,"TFMPNetForMultipleChoice"),dMt.forEach(t),LTr=r(aPe," (MPNet model)"),aPe.forEach(t),xTr=i(ue),KM=n(ue,"LI",{});var nPe=s(KM);Bve=n(nPe,"STRONG",{});var cMt=s(Bve);$Tr=r(cMt,"rembert"),cMt.forEach(t),kTr=r(nPe," \u2014 "),WH=n(nPe,"A",{href:!0});var fMt=s(WH);STr=r(fMt,"TFRemBertForMultipleChoice"),fMt.forEach(t),RTr=r(nPe," (RemBERT model)"),nPe.forEach(t),PTr=i(ue),ZM=n(ue,"LI",{});var sPe=s(ZM);Ive=n(sPe,"STRONG",{});var mMt=s(Ive);BTr=r(mMt,"roberta"),mMt.forEach(t),ITr=r(sPe," \u2014 "),QH=n(sPe,"A",{href:!0});var gMt=s(QH);qTr=r(gMt,"TFRobertaForMultipleChoice"),gMt.forEach(t),NTr=r(sPe," (RoBERTa model)"),sPe.forEach(t),jTr=i(ue),e4=n(ue,"LI",{});var lPe=s(e4);qve=n(lPe,"STRONG",{});var hMt=s(qve);DTr=r(hMt,"roformer"),hMt.forEach(t),GTr=r(lPe," \u2014 "),HH=n(lPe,"A",{href:!0});var pMt=s(HH);OTr=r(pMt,"TFRoFormerForMultipleChoice"),pMt.forEach(t),VTr=r(lPe," (RoFormer model)"),lPe.forEach(t),XTr=i(ue),o4=n(ue,"LI",{});var iPe=s(o4);Nve=n(iPe,"STRONG",{});var _Mt=s(Nve);zTr=r(_Mt,"xlm"),_Mt.forEach(t),WTr=r(iPe," \u2014 "),UH=n(iPe,"A",{href:!0});var uMt=s(UH);QTr=r(uMt,"TFXLMForMultipleChoice"),uMt.forEach(t),HTr=r(iPe," (XLM model)"),iPe.forEach(t),UTr=i(ue),r4=n(ue,"LI",{});var dPe=s(r4);jve=n(dPe,"STRONG",{});var bMt=s(jve);JTr=r(bMt,"xlm-roberta"),bMt.forEach(t),YTr=r(dPe," \u2014 "),JH=n(dPe,"A",{href:!0});var vMt=s(JH);KTr=r(vMt,"TFXLMRobertaForMultipleChoice"),vMt.forEach(t),ZTr=r(dPe," (XLM-RoBERTa model)"),dPe.forEach(t),e8r=i(ue),t4=n(ue,"LI",{});var cPe=s(t4);Dve=n(cPe,"STRONG",{});var FMt=s(Dve);o8r=r(FMt,"xlnet"),FMt.forEach(t),r8r=r(cPe," \u2014 "),YH=n(cPe,"A",{href:!0});var TMt=s(YH);t8r=r(TMt,"TFXLNetForMultipleChoice"),TMt.forEach(t),a8r=r(cPe," (XLNet model)"),cPe.forEach(t),ue.forEach(t),n8r=i(yl),T(a4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),FNe=i(f),cc=n(f,"H2",{class:!0});var ADe=s(cc);n4=n(ADe,"A",{id:!0,class:!0,href:!0});var MMt=s(n4);Gve=n(MMt,"SPAN",{});var EMt=s(Gve);T(BL.$$.fragment,EMt),EMt.forEach(t),MMt.forEach(t),s8r=i(ADe),Ove=n(ADe,"SPAN",{});var CMt=s(Ove);l8r=r(CMt,"TFAutoModelForNextSentencePrediction"),CMt.forEach(t),ADe.forEach(t),TNe=i(f),nr=n(f,"DIV",{class:!0});var Ll=s(nr);T(IL.$$.fragment,Ll),i8r=i(Ll),fc=n(Ll,"P",{});var JZ=s(fc);d8r=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KH=n(JZ,"A",{href:!0});var wMt=s(KH);c8r=r(wMt,"from_pretrained()"),wMt.forEach(t),f8r=r(JZ," class method or the "),ZH=n(JZ,"A",{href:!0});var AMt=s(ZH);m8r=r(AMt,"from_config()"),AMt.forEach(t),g8r=r(JZ,` class
method.`),JZ.forEach(t),h8r=i(Ll),qL=n(Ll,"P",{});var yDe=s(qL);p8r=r(yDe,"This class cannot be instantiated directly using "),Vve=n(yDe,"CODE",{});var yMt=s(Vve);_8r=r(yMt,"__init__()"),yMt.forEach(t),u8r=r(yDe," (throws an error)."),yDe.forEach(t),b8r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var L0=s(Bt);T(NL.$$.fragment,L0),v8r=i(L0),Xve=n(L0,"P",{});var LMt=s(Xve);F8r=r(LMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LMt.forEach(t),T8r=i(L0),mc=n(L0,"P",{});var YZ=s(mc);M8r=r(YZ,`Note:
Loading a model from its configuration file does `),zve=n(YZ,"STRONG",{});var xMt=s(zve);E8r=r(xMt,"not"),xMt.forEach(t),C8r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eU=n(YZ,"A",{href:!0});var $Mt=s(eU);w8r=r($Mt,"from_pretrained()"),$Mt.forEach(t),A8r=r(YZ," to load the model weights."),YZ.forEach(t),y8r=i(L0),T(s4.$$.fragment,L0),L0.forEach(t),L8r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(jL.$$.fragment,xl),x8r=i(xl),Wve=n(xl,"P",{});var kMt=s(Wve);$8r=r(kMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kMt.forEach(t),k8r=i(xl),ln=n(xl,"P",{});var x0=s(ln);S8r=r(x0,"The model class to instantiate is selected based on the "),Qve=n(x0,"CODE",{});var SMt=s(Qve);R8r=r(SMt,"model_type"),SMt.forEach(t),P8r=r(x0,` property of the config object (either
passed as an argument or loaded from `),Hve=n(x0,"CODE",{});var RMt=s(Hve);B8r=r(RMt,"pretrained_model_name_or_path"),RMt.forEach(t),I8r=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(x0,"CODE",{});var PMt=s(Uve);q8r=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),N8r=r(x0,":"),x0.forEach(t),j8r=i(xl),DL=n(xl,"UL",{});var LDe=s(DL);l4=n(LDe,"LI",{});var fPe=s(l4);Jve=n(fPe,"STRONG",{});var BMt=s(Jve);D8r=r(BMt,"bert"),BMt.forEach(t),G8r=r(fPe," \u2014 "),oU=n(fPe,"A",{href:!0});var IMt=s(oU);O8r=r(IMt,"TFBertForNextSentencePrediction"),IMt.forEach(t),V8r=r(fPe," (BERT model)"),fPe.forEach(t),X8r=i(LDe),i4=n(LDe,"LI",{});var mPe=s(i4);Yve=n(mPe,"STRONG",{});var qMt=s(Yve);z8r=r(qMt,"mobilebert"),qMt.forEach(t),W8r=r(mPe," \u2014 "),rU=n(mPe,"A",{href:!0});var NMt=s(rU);Q8r=r(NMt,"TFMobileBertForNextSentencePrediction"),NMt.forEach(t),H8r=r(mPe," (MobileBERT model)"),mPe.forEach(t),LDe.forEach(t),U8r=i(xl),T(d4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),MNe=i(f),gc=n(f,"H2",{class:!0});var xDe=s(gc);c4=n(xDe,"A",{id:!0,class:!0,href:!0});var jMt=s(c4);Kve=n(jMt,"SPAN",{});var DMt=s(Kve);T(GL.$$.fragment,DMt),DMt.forEach(t),jMt.forEach(t),J8r=i(xDe),Zve=n(xDe,"SPAN",{});var GMt=s(Zve);Y8r=r(GMt,"TFAutoModelForTableQuestionAnswering"),GMt.forEach(t),xDe.forEach(t),ENe=i(f),sr=n(f,"DIV",{class:!0});var $l=s(sr);T(OL.$$.fragment,$l),K8r=i($l),hc=n($l,"P",{});var KZ=s(hc);Z8r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),tU=n(KZ,"A",{href:!0});var OMt=s(tU);eMr=r(OMt,"from_pretrained()"),OMt.forEach(t),oMr=r(KZ," class method or the "),aU=n(KZ,"A",{href:!0});var VMt=s(aU);rMr=r(VMt,"from_config()"),VMt.forEach(t),tMr=r(KZ,` class
method.`),KZ.forEach(t),aMr=i($l),VL=n($l,"P",{});var $De=s(VL);nMr=r($De,"This class cannot be instantiated directly using "),e3e=n($De,"CODE",{});var XMt=s(e3e);sMr=r(XMt,"__init__()"),XMt.forEach(t),lMr=r($De," (throws an error)."),$De.forEach(t),iMr=i($l),It=n($l,"DIV",{class:!0});var $0=s(It);T(XL.$$.fragment,$0),dMr=i($0),o3e=n($0,"P",{});var zMt=s(o3e);cMr=r(zMt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zMt.forEach(t),fMr=i($0),pc=n($0,"P",{});var ZZ=s(pc);mMr=r(ZZ,`Note:
Loading a model from its configuration file does `),r3e=n(ZZ,"STRONG",{});var WMt=s(r3e);gMr=r(WMt,"not"),WMt.forEach(t),hMr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(ZZ,"A",{href:!0});var QMt=s(nU);pMr=r(QMt,"from_pretrained()"),QMt.forEach(t),_Mr=r(ZZ," to load the model weights."),ZZ.forEach(t),uMr=i($0),T(f4.$$.fragment,$0),$0.forEach(t),bMr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(zL.$$.fragment,kl),vMr=i(kl),t3e=n(kl,"P",{});var HMt=s(t3e);FMr=r(HMt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HMt.forEach(t),TMr=i(kl),dn=n(kl,"P",{});var k0=s(dn);MMr=r(k0,"The model class to instantiate is selected based on the "),a3e=n(k0,"CODE",{});var UMt=s(a3e);EMr=r(UMt,"model_type"),UMt.forEach(t),CMr=r(k0,` property of the config object (either
passed as an argument or loaded from `),n3e=n(k0,"CODE",{});var JMt=s(n3e);wMr=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),AMr=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(k0,"CODE",{});var YMt=s(s3e);yMr=r(YMt,"pretrained_model_name_or_path"),YMt.forEach(t),LMr=r(k0,":"),k0.forEach(t),xMr=i(kl),l3e=n(kl,"UL",{});var KMt=s(l3e);m4=n(KMt,"LI",{});var gPe=s(m4);i3e=n(gPe,"STRONG",{});var ZMt=s(i3e);$Mr=r(ZMt,"tapas"),ZMt.forEach(t),kMr=r(gPe," \u2014 "),sU=n(gPe,"A",{href:!0});var e4t=s(sU);SMr=r(e4t,"TFTapasForQuestionAnswering"),e4t.forEach(t),RMr=r(gPe," (TAPAS model)"),gPe.forEach(t),KMt.forEach(t),PMr=i(kl),T(g4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),CNe=i(f),_c=n(f,"H2",{class:!0});var kDe=s(_c);h4=n(kDe,"A",{id:!0,class:!0,href:!0});var o4t=s(h4);d3e=n(o4t,"SPAN",{});var r4t=s(d3e);T(WL.$$.fragment,r4t),r4t.forEach(t),o4t.forEach(t),BMr=i(kDe),c3e=n(kDe,"SPAN",{});var t4t=s(c3e);IMr=r(t4t,"TFAutoModelForTokenClassification"),t4t.forEach(t),kDe.forEach(t),wNe=i(f),lr=n(f,"DIV",{class:!0});var Sl=s(lr);T(QL.$$.fragment,Sl),qMr=i(Sl),uc=n(Sl,"P",{});var eee=s(uc);NMr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lU=n(eee,"A",{href:!0});var a4t=s(lU);jMr=r(a4t,"from_pretrained()"),a4t.forEach(t),DMr=r(eee," class method or the "),iU=n(eee,"A",{href:!0});var n4t=s(iU);GMr=r(n4t,"from_config()"),n4t.forEach(t),OMr=r(eee,` class
method.`),eee.forEach(t),VMr=i(Sl),HL=n(Sl,"P",{});var SDe=s(HL);XMr=r(SDe,"This class cannot be instantiated directly using "),f3e=n(SDe,"CODE",{});var s4t=s(f3e);zMr=r(s4t,"__init__()"),s4t.forEach(t),WMr=r(SDe," (throws an error)."),SDe.forEach(t),QMr=i(Sl),qt=n(Sl,"DIV",{class:!0});var S0=s(qt);T(UL.$$.fragment,S0),HMr=i(S0),m3e=n(S0,"P",{});var l4t=s(m3e);UMr=r(l4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),l4t.forEach(t),JMr=i(S0),bc=n(S0,"P",{});var oee=s(bc);YMr=r(oee,`Note:
Loading a model from its configuration file does `),g3e=n(oee,"STRONG",{});var i4t=s(g3e);KMr=r(i4t,"not"),i4t.forEach(t),ZMr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(oee,"A",{href:!0});var d4t=s(dU);e4r=r(d4t,"from_pretrained()"),d4t.forEach(t),o4r=r(oee," to load the model weights."),oee.forEach(t),r4r=i(S0),T(p4.$$.fragment,S0),S0.forEach(t),t4r=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(JL.$$.fragment,Rl),a4r=i(Rl),h3e=n(Rl,"P",{});var c4t=s(h3e);n4r=r(c4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),c4t.forEach(t),s4r=i(Rl),cn=n(Rl,"P",{});var R0=s(cn);l4r=r(R0,"The model class to instantiate is selected based on the "),p3e=n(R0,"CODE",{});var f4t=s(p3e);i4r=r(f4t,"model_type"),f4t.forEach(t),d4r=r(R0,` property of the config object (either
passed as an argument or loaded from `),_3e=n(R0,"CODE",{});var m4t=s(_3e);c4r=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),f4r=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(R0,"CODE",{});var g4t=s(u3e);m4r=r(g4t,"pretrained_model_name_or_path"),g4t.forEach(t),g4r=r(R0,":"),R0.forEach(t),h4r=i(Rl),de=n(Rl,"UL",{});var me=s(de);_4=n(me,"LI",{});var hPe=s(_4);b3e=n(hPe,"STRONG",{});var h4t=s(b3e);p4r=r(h4t,"albert"),h4t.forEach(t),_4r=r(hPe," \u2014 "),cU=n(hPe,"A",{href:!0});var p4t=s(cU);u4r=r(p4t,"TFAlbertForTokenClassification"),p4t.forEach(t),b4r=r(hPe," (ALBERT model)"),hPe.forEach(t),v4r=i(me),u4=n(me,"LI",{});var pPe=s(u4);v3e=n(pPe,"STRONG",{});var _4t=s(v3e);F4r=r(_4t,"bert"),_4t.forEach(t),T4r=r(pPe," \u2014 "),fU=n(pPe,"A",{href:!0});var u4t=s(fU);M4r=r(u4t,"TFBertForTokenClassification"),u4t.forEach(t),E4r=r(pPe," (BERT model)"),pPe.forEach(t),C4r=i(me),b4=n(me,"LI",{});var _Pe=s(b4);F3e=n(_Pe,"STRONG",{});var b4t=s(F3e);w4r=r(b4t,"camembert"),b4t.forEach(t),A4r=r(_Pe," \u2014 "),mU=n(_Pe,"A",{href:!0});var v4t=s(mU);y4r=r(v4t,"TFCamembertForTokenClassification"),v4t.forEach(t),L4r=r(_Pe," (CamemBERT model)"),_Pe.forEach(t),x4r=i(me),v4=n(me,"LI",{});var uPe=s(v4);T3e=n(uPe,"STRONG",{});var F4t=s(T3e);$4r=r(F4t,"convbert"),F4t.forEach(t),k4r=r(uPe," \u2014 "),gU=n(uPe,"A",{href:!0});var T4t=s(gU);S4r=r(T4t,"TFConvBertForTokenClassification"),T4t.forEach(t),R4r=r(uPe," (ConvBERT model)"),uPe.forEach(t),P4r=i(me),F4=n(me,"LI",{});var bPe=s(F4);M3e=n(bPe,"STRONG",{});var M4t=s(M3e);B4r=r(M4t,"deberta"),M4t.forEach(t),I4r=r(bPe," \u2014 "),hU=n(bPe,"A",{href:!0});var E4t=s(hU);q4r=r(E4t,"TFDebertaForTokenClassification"),E4t.forEach(t),N4r=r(bPe," (DeBERTa model)"),bPe.forEach(t),j4r=i(me),T4=n(me,"LI",{});var vPe=s(T4);E3e=n(vPe,"STRONG",{});var C4t=s(E3e);D4r=r(C4t,"deberta-v2"),C4t.forEach(t),G4r=r(vPe," \u2014 "),pU=n(vPe,"A",{href:!0});var w4t=s(pU);O4r=r(w4t,"TFDebertaV2ForTokenClassification"),w4t.forEach(t),V4r=r(vPe," (DeBERTa-v2 model)"),vPe.forEach(t),X4r=i(me),M4=n(me,"LI",{});var FPe=s(M4);C3e=n(FPe,"STRONG",{});var A4t=s(C3e);z4r=r(A4t,"distilbert"),A4t.forEach(t),W4r=r(FPe," \u2014 "),_U=n(FPe,"A",{href:!0});var y4t=s(_U);Q4r=r(y4t,"TFDistilBertForTokenClassification"),y4t.forEach(t),H4r=r(FPe," (DistilBERT model)"),FPe.forEach(t),U4r=i(me),E4=n(me,"LI",{});var TPe=s(E4);w3e=n(TPe,"STRONG",{});var L4t=s(w3e);J4r=r(L4t,"electra"),L4t.forEach(t),Y4r=r(TPe," \u2014 "),uU=n(TPe,"A",{href:!0});var x4t=s(uU);K4r=r(x4t,"TFElectraForTokenClassification"),x4t.forEach(t),Z4r=r(TPe," (ELECTRA model)"),TPe.forEach(t),eEr=i(me),C4=n(me,"LI",{});var MPe=s(C4);A3e=n(MPe,"STRONG",{});var $4t=s(A3e);oEr=r($4t,"flaubert"),$4t.forEach(t),rEr=r(MPe," \u2014 "),bU=n(MPe,"A",{href:!0});var k4t=s(bU);tEr=r(k4t,"TFFlaubertForTokenClassification"),k4t.forEach(t),aEr=r(MPe," (FlauBERT model)"),MPe.forEach(t),nEr=i(me),w4=n(me,"LI",{});var EPe=s(w4);y3e=n(EPe,"STRONG",{});var S4t=s(y3e);sEr=r(S4t,"funnel"),S4t.forEach(t),lEr=r(EPe," \u2014 "),vU=n(EPe,"A",{href:!0});var R4t=s(vU);iEr=r(R4t,"TFFunnelForTokenClassification"),R4t.forEach(t),dEr=r(EPe," (Funnel Transformer model)"),EPe.forEach(t),cEr=i(me),A4=n(me,"LI",{});var CPe=s(A4);L3e=n(CPe,"STRONG",{});var P4t=s(L3e);fEr=r(P4t,"layoutlm"),P4t.forEach(t),mEr=r(CPe," \u2014 "),FU=n(CPe,"A",{href:!0});var B4t=s(FU);gEr=r(B4t,"TFLayoutLMForTokenClassification"),B4t.forEach(t),hEr=r(CPe," (LayoutLM model)"),CPe.forEach(t),pEr=i(me),y4=n(me,"LI",{});var wPe=s(y4);x3e=n(wPe,"STRONG",{});var I4t=s(x3e);_Er=r(I4t,"longformer"),I4t.forEach(t),uEr=r(wPe," \u2014 "),TU=n(wPe,"A",{href:!0});var q4t=s(TU);bEr=r(q4t,"TFLongformerForTokenClassification"),q4t.forEach(t),vEr=r(wPe," (Longformer model)"),wPe.forEach(t),FEr=i(me),L4=n(me,"LI",{});var APe=s(L4);$3e=n(APe,"STRONG",{});var N4t=s($3e);TEr=r(N4t,"mobilebert"),N4t.forEach(t),MEr=r(APe," \u2014 "),MU=n(APe,"A",{href:!0});var j4t=s(MU);EEr=r(j4t,"TFMobileBertForTokenClassification"),j4t.forEach(t),CEr=r(APe," (MobileBERT model)"),APe.forEach(t),wEr=i(me),x4=n(me,"LI",{});var yPe=s(x4);k3e=n(yPe,"STRONG",{});var D4t=s(k3e);AEr=r(D4t,"mpnet"),D4t.forEach(t),yEr=r(yPe," \u2014 "),EU=n(yPe,"A",{href:!0});var G4t=s(EU);LEr=r(G4t,"TFMPNetForTokenClassification"),G4t.forEach(t),xEr=r(yPe," (MPNet model)"),yPe.forEach(t),$Er=i(me),$4=n(me,"LI",{});var LPe=s($4);S3e=n(LPe,"STRONG",{});var O4t=s(S3e);kEr=r(O4t,"rembert"),O4t.forEach(t),SEr=r(LPe," \u2014 "),CU=n(LPe,"A",{href:!0});var V4t=s(CU);REr=r(V4t,"TFRemBertForTokenClassification"),V4t.forEach(t),PEr=r(LPe," (RemBERT model)"),LPe.forEach(t),BEr=i(me),k4=n(me,"LI",{});var xPe=s(k4);R3e=n(xPe,"STRONG",{});var X4t=s(R3e);IEr=r(X4t,"roberta"),X4t.forEach(t),qEr=r(xPe," \u2014 "),wU=n(xPe,"A",{href:!0});var z4t=s(wU);NEr=r(z4t,"TFRobertaForTokenClassification"),z4t.forEach(t),jEr=r(xPe," (RoBERTa model)"),xPe.forEach(t),DEr=i(me),S4=n(me,"LI",{});var $Pe=s(S4);P3e=n($Pe,"STRONG",{});var W4t=s(P3e);GEr=r(W4t,"roformer"),W4t.forEach(t),OEr=r($Pe," \u2014 "),AU=n($Pe,"A",{href:!0});var Q4t=s(AU);VEr=r(Q4t,"TFRoFormerForTokenClassification"),Q4t.forEach(t),XEr=r($Pe," (RoFormer model)"),$Pe.forEach(t),zEr=i(me),R4=n(me,"LI",{});var kPe=s(R4);B3e=n(kPe,"STRONG",{});var H4t=s(B3e);WEr=r(H4t,"xlm"),H4t.forEach(t),QEr=r(kPe," \u2014 "),yU=n(kPe,"A",{href:!0});var U4t=s(yU);HEr=r(U4t,"TFXLMForTokenClassification"),U4t.forEach(t),UEr=r(kPe," (XLM model)"),kPe.forEach(t),JEr=i(me),P4=n(me,"LI",{});var SPe=s(P4);I3e=n(SPe,"STRONG",{});var J4t=s(I3e);YEr=r(J4t,"xlm-roberta"),J4t.forEach(t),KEr=r(SPe," \u2014 "),LU=n(SPe,"A",{href:!0});var Y4t=s(LU);ZEr=r(Y4t,"TFXLMRobertaForTokenClassification"),Y4t.forEach(t),eCr=r(SPe," (XLM-RoBERTa model)"),SPe.forEach(t),oCr=i(me),B4=n(me,"LI",{});var RPe=s(B4);q3e=n(RPe,"STRONG",{});var K4t=s(q3e);rCr=r(K4t,"xlnet"),K4t.forEach(t),tCr=r(RPe," \u2014 "),xU=n(RPe,"A",{href:!0});var Z4t=s(xU);aCr=r(Z4t,"TFXLNetForTokenClassification"),Z4t.forEach(t),nCr=r(RPe," (XLNet model)"),RPe.forEach(t),me.forEach(t),sCr=i(Rl),T(I4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ANe=i(f),vc=n(f,"H2",{class:!0});var RDe=s(vc);q4=n(RDe,"A",{id:!0,class:!0,href:!0});var eEt=s(q4);N3e=n(eEt,"SPAN",{});var oEt=s(N3e);T(YL.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),lCr=i(RDe),j3e=n(RDe,"SPAN",{});var rEt=s(j3e);iCr=r(rEt,"TFAutoModelForQuestionAnswering"),rEt.forEach(t),RDe.forEach(t),yNe=i(f),ir=n(f,"DIV",{class:!0});var Pl=s(ir);T(KL.$$.fragment,Pl),dCr=i(Pl),Fc=n(Pl,"P",{});var ree=s(Fc);cCr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$U=n(ree,"A",{href:!0});var tEt=s($U);fCr=r(tEt,"from_pretrained()"),tEt.forEach(t),mCr=r(ree," class method or the "),kU=n(ree,"A",{href:!0});var aEt=s(kU);gCr=r(aEt,"from_config()"),aEt.forEach(t),hCr=r(ree,` class
method.`),ree.forEach(t),pCr=i(Pl),ZL=n(Pl,"P",{});var PDe=s(ZL);_Cr=r(PDe,"This class cannot be instantiated directly using "),D3e=n(PDe,"CODE",{});var nEt=s(D3e);uCr=r(nEt,"__init__()"),nEt.forEach(t),bCr=r(PDe," (throws an error)."),PDe.forEach(t),vCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var P0=s(Nt);T(e9.$$.fragment,P0),FCr=i(P0),G3e=n(P0,"P",{});var sEt=s(G3e);TCr=r(sEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sEt.forEach(t),MCr=i(P0),Tc=n(P0,"P",{});var tee=s(Tc);ECr=r(tee,`Note:
Loading a model from its configuration file does `),O3e=n(tee,"STRONG",{});var lEt=s(O3e);CCr=r(lEt,"not"),lEt.forEach(t),wCr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(tee,"A",{href:!0});var iEt=s(SU);ACr=r(iEt,"from_pretrained()"),iEt.forEach(t),yCr=r(tee," to load the model weights."),tee.forEach(t),LCr=i(P0),T(N4.$$.fragment,P0),P0.forEach(t),xCr=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(o9.$$.fragment,Bl),$Cr=i(Bl),V3e=n(Bl,"P",{});var dEt=s(V3e);kCr=r(dEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dEt.forEach(t),SCr=i(Bl),fn=n(Bl,"P",{});var B0=s(fn);RCr=r(B0,"The model class to instantiate is selected based on the "),X3e=n(B0,"CODE",{});var cEt=s(X3e);PCr=r(cEt,"model_type"),cEt.forEach(t),BCr=r(B0,` property of the config object (either
passed as an argument or loaded from `),z3e=n(B0,"CODE",{});var fEt=s(z3e);ICr=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),qCr=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=n(B0,"CODE",{});var mEt=s(W3e);NCr=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),jCr=r(B0,":"),B0.forEach(t),DCr=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);j4=n(ge,"LI",{});var PPe=s(j4);Q3e=n(PPe,"STRONG",{});var gEt=s(Q3e);GCr=r(gEt,"albert"),gEt.forEach(t),OCr=r(PPe," \u2014 "),RU=n(PPe,"A",{href:!0});var hEt=s(RU);VCr=r(hEt,"TFAlbertForQuestionAnswering"),hEt.forEach(t),XCr=r(PPe," (ALBERT model)"),PPe.forEach(t),zCr=i(ge),D4=n(ge,"LI",{});var BPe=s(D4);H3e=n(BPe,"STRONG",{});var pEt=s(H3e);WCr=r(pEt,"bert"),pEt.forEach(t),QCr=r(BPe," \u2014 "),PU=n(BPe,"A",{href:!0});var _Et=s(PU);HCr=r(_Et,"TFBertForQuestionAnswering"),_Et.forEach(t),UCr=r(BPe," (BERT model)"),BPe.forEach(t),JCr=i(ge),G4=n(ge,"LI",{});var IPe=s(G4);U3e=n(IPe,"STRONG",{});var uEt=s(U3e);YCr=r(uEt,"camembert"),uEt.forEach(t),KCr=r(IPe," \u2014 "),BU=n(IPe,"A",{href:!0});var bEt=s(BU);ZCr=r(bEt,"TFCamembertForQuestionAnswering"),bEt.forEach(t),e5r=r(IPe," (CamemBERT model)"),IPe.forEach(t),o5r=i(ge),O4=n(ge,"LI",{});var qPe=s(O4);J3e=n(qPe,"STRONG",{});var vEt=s(J3e);r5r=r(vEt,"convbert"),vEt.forEach(t),t5r=r(qPe," \u2014 "),IU=n(qPe,"A",{href:!0});var FEt=s(IU);a5r=r(FEt,"TFConvBertForQuestionAnswering"),FEt.forEach(t),n5r=r(qPe," (ConvBERT model)"),qPe.forEach(t),s5r=i(ge),V4=n(ge,"LI",{});var NPe=s(V4);Y3e=n(NPe,"STRONG",{});var TEt=s(Y3e);l5r=r(TEt,"deberta"),TEt.forEach(t),i5r=r(NPe," \u2014 "),qU=n(NPe,"A",{href:!0});var MEt=s(qU);d5r=r(MEt,"TFDebertaForQuestionAnswering"),MEt.forEach(t),c5r=r(NPe," (DeBERTa model)"),NPe.forEach(t),f5r=i(ge),X4=n(ge,"LI",{});var jPe=s(X4);K3e=n(jPe,"STRONG",{});var EEt=s(K3e);m5r=r(EEt,"deberta-v2"),EEt.forEach(t),g5r=r(jPe," \u2014 "),NU=n(jPe,"A",{href:!0});var CEt=s(NU);h5r=r(CEt,"TFDebertaV2ForQuestionAnswering"),CEt.forEach(t),p5r=r(jPe," (DeBERTa-v2 model)"),jPe.forEach(t),_5r=i(ge),z4=n(ge,"LI",{});var DPe=s(z4);Z3e=n(DPe,"STRONG",{});var wEt=s(Z3e);u5r=r(wEt,"distilbert"),wEt.forEach(t),b5r=r(DPe," \u2014 "),jU=n(DPe,"A",{href:!0});var AEt=s(jU);v5r=r(AEt,"TFDistilBertForQuestionAnswering"),AEt.forEach(t),F5r=r(DPe," (DistilBERT model)"),DPe.forEach(t),T5r=i(ge),W4=n(ge,"LI",{});var GPe=s(W4);eFe=n(GPe,"STRONG",{});var yEt=s(eFe);M5r=r(yEt,"electra"),yEt.forEach(t),E5r=r(GPe," \u2014 "),DU=n(GPe,"A",{href:!0});var LEt=s(DU);C5r=r(LEt,"TFElectraForQuestionAnswering"),LEt.forEach(t),w5r=r(GPe," (ELECTRA model)"),GPe.forEach(t),A5r=i(ge),Q4=n(ge,"LI",{});var OPe=s(Q4);oFe=n(OPe,"STRONG",{});var xEt=s(oFe);y5r=r(xEt,"flaubert"),xEt.forEach(t),L5r=r(OPe," \u2014 "),GU=n(OPe,"A",{href:!0});var $Et=s(GU);x5r=r($Et,"TFFlaubertForQuestionAnsweringSimple"),$Et.forEach(t),$5r=r(OPe," (FlauBERT model)"),OPe.forEach(t),k5r=i(ge),H4=n(ge,"LI",{});var VPe=s(H4);rFe=n(VPe,"STRONG",{});var kEt=s(rFe);S5r=r(kEt,"funnel"),kEt.forEach(t),R5r=r(VPe," \u2014 "),OU=n(VPe,"A",{href:!0});var SEt=s(OU);P5r=r(SEt,"TFFunnelForQuestionAnswering"),SEt.forEach(t),B5r=r(VPe," (Funnel Transformer model)"),VPe.forEach(t),I5r=i(ge),U4=n(ge,"LI",{});var XPe=s(U4);tFe=n(XPe,"STRONG",{});var REt=s(tFe);q5r=r(REt,"gptj"),REt.forEach(t),N5r=r(XPe," \u2014 "),VU=n(XPe,"A",{href:!0});var PEt=s(VU);j5r=r(PEt,"TFGPTJForQuestionAnswering"),PEt.forEach(t),D5r=r(XPe," (GPT-J model)"),XPe.forEach(t),G5r=i(ge),J4=n(ge,"LI",{});var zPe=s(J4);aFe=n(zPe,"STRONG",{});var BEt=s(aFe);O5r=r(BEt,"longformer"),BEt.forEach(t),V5r=r(zPe," \u2014 "),XU=n(zPe,"A",{href:!0});var IEt=s(XU);X5r=r(IEt,"TFLongformerForQuestionAnswering"),IEt.forEach(t),z5r=r(zPe," (Longformer model)"),zPe.forEach(t),W5r=i(ge),Y4=n(ge,"LI",{});var WPe=s(Y4);nFe=n(WPe,"STRONG",{});var qEt=s(nFe);Q5r=r(qEt,"mobilebert"),qEt.forEach(t),H5r=r(WPe," \u2014 "),zU=n(WPe,"A",{href:!0});var NEt=s(zU);U5r=r(NEt,"TFMobileBertForQuestionAnswering"),NEt.forEach(t),J5r=r(WPe," (MobileBERT model)"),WPe.forEach(t),Y5r=i(ge),K4=n(ge,"LI",{});var QPe=s(K4);sFe=n(QPe,"STRONG",{});var jEt=s(sFe);K5r=r(jEt,"mpnet"),jEt.forEach(t),Z5r=r(QPe," \u2014 "),WU=n(QPe,"A",{href:!0});var DEt=s(WU);ewr=r(DEt,"TFMPNetForQuestionAnswering"),DEt.forEach(t),owr=r(QPe," (MPNet model)"),QPe.forEach(t),rwr=i(ge),Z4=n(ge,"LI",{});var HPe=s(Z4);lFe=n(HPe,"STRONG",{});var GEt=s(lFe);twr=r(GEt,"rembert"),GEt.forEach(t),awr=r(HPe," \u2014 "),QU=n(HPe,"A",{href:!0});var OEt=s(QU);nwr=r(OEt,"TFRemBertForQuestionAnswering"),OEt.forEach(t),swr=r(HPe," (RemBERT model)"),HPe.forEach(t),lwr=i(ge),eE=n(ge,"LI",{});var UPe=s(eE);iFe=n(UPe,"STRONG",{});var VEt=s(iFe);iwr=r(VEt,"roberta"),VEt.forEach(t),dwr=r(UPe," \u2014 "),HU=n(UPe,"A",{href:!0});var XEt=s(HU);cwr=r(XEt,"TFRobertaForQuestionAnswering"),XEt.forEach(t),fwr=r(UPe," (RoBERTa model)"),UPe.forEach(t),mwr=i(ge),oE=n(ge,"LI",{});var JPe=s(oE);dFe=n(JPe,"STRONG",{});var zEt=s(dFe);gwr=r(zEt,"roformer"),zEt.forEach(t),hwr=r(JPe," \u2014 "),UU=n(JPe,"A",{href:!0});var WEt=s(UU);pwr=r(WEt,"TFRoFormerForQuestionAnswering"),WEt.forEach(t),_wr=r(JPe," (RoFormer model)"),JPe.forEach(t),uwr=i(ge),rE=n(ge,"LI",{});var YPe=s(rE);cFe=n(YPe,"STRONG",{});var QEt=s(cFe);bwr=r(QEt,"xlm"),QEt.forEach(t),vwr=r(YPe," \u2014 "),JU=n(YPe,"A",{href:!0});var HEt=s(JU);Fwr=r(HEt,"TFXLMForQuestionAnsweringSimple"),HEt.forEach(t),Twr=r(YPe," (XLM model)"),YPe.forEach(t),Mwr=i(ge),tE=n(ge,"LI",{});var KPe=s(tE);fFe=n(KPe,"STRONG",{});var UEt=s(fFe);Ewr=r(UEt,"xlm-roberta"),UEt.forEach(t),Cwr=r(KPe," \u2014 "),YU=n(KPe,"A",{href:!0});var JEt=s(YU);wwr=r(JEt,"TFXLMRobertaForQuestionAnswering"),JEt.forEach(t),Awr=r(KPe," (XLM-RoBERTa model)"),KPe.forEach(t),ywr=i(ge),aE=n(ge,"LI",{});var ZPe=s(aE);mFe=n(ZPe,"STRONG",{});var YEt=s(mFe);Lwr=r(YEt,"xlnet"),YEt.forEach(t),xwr=r(ZPe," \u2014 "),KU=n(ZPe,"A",{href:!0});var KEt=s(KU);$wr=r(KEt,"TFXLNetForQuestionAnsweringSimple"),KEt.forEach(t),kwr=r(ZPe," (XLNet model)"),ZPe.forEach(t),ge.forEach(t),Swr=i(Bl),T(nE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),LNe=i(f),Mc=n(f,"H2",{class:!0});var BDe=s(Mc);sE=n(BDe,"A",{id:!0,class:!0,href:!0});var ZEt=s(sE);gFe=n(ZEt,"SPAN",{});var eCt=s(gFe);T(r9.$$.fragment,eCt),eCt.forEach(t),ZEt.forEach(t),Rwr=i(BDe),hFe=n(BDe,"SPAN",{});var oCt=s(hFe);Pwr=r(oCt,"TFAutoModelForVision2Seq"),oCt.forEach(t),BDe.forEach(t),xNe=i(f),dr=n(f,"DIV",{class:!0});var Il=s(dr);T(t9.$$.fragment,Il),Bwr=i(Il),Ec=n(Il,"P",{});var aee=s(Ec);Iwr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ZU=n(aee,"A",{href:!0});var rCt=s(ZU);qwr=r(rCt,"from_pretrained()"),rCt.forEach(t),Nwr=r(aee," class method or the "),eJ=n(aee,"A",{href:!0});var tCt=s(eJ);jwr=r(tCt,"from_config()"),tCt.forEach(t),Dwr=r(aee,` class
method.`),aee.forEach(t),Gwr=i(Il),a9=n(Il,"P",{});var IDe=s(a9);Owr=r(IDe,"This class cannot be instantiated directly using "),pFe=n(IDe,"CODE",{});var aCt=s(pFe);Vwr=r(aCt,"__init__()"),aCt.forEach(t),Xwr=r(IDe," (throws an error)."),IDe.forEach(t),zwr=i(Il),jt=n(Il,"DIV",{class:!0});var I0=s(jt);T(n9.$$.fragment,I0),Wwr=i(I0),_Fe=n(I0,"P",{});var nCt=s(_Fe);Qwr=r(nCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nCt.forEach(t),Hwr=i(I0),Cc=n(I0,"P",{});var nee=s(Cc);Uwr=r(nee,`Note:
Loading a model from its configuration file does `),uFe=n(nee,"STRONG",{});var sCt=s(uFe);Jwr=r(sCt,"not"),sCt.forEach(t),Ywr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(nee,"A",{href:!0});var lCt=s(oJ);Kwr=r(lCt,"from_pretrained()"),lCt.forEach(t),Zwr=r(nee," to load the model weights."),nee.forEach(t),e0r=i(I0),T(lE.$$.fragment,I0),I0.forEach(t),o0r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(s9.$$.fragment,ql),r0r=i(ql),bFe=n(ql,"P",{});var iCt=s(bFe);t0r=r(iCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iCt.forEach(t),a0r=i(ql),mn=n(ql,"P",{});var q0=s(mn);n0r=r(q0,"The model class to instantiate is selected based on the "),vFe=n(q0,"CODE",{});var dCt=s(vFe);s0r=r(dCt,"model_type"),dCt.forEach(t),l0r=r(q0,` property of the config object (either
passed as an argument or loaded from `),FFe=n(q0,"CODE",{});var cCt=s(FFe);i0r=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),d0r=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(q0,"CODE",{});var fCt=s(TFe);c0r=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),f0r=r(q0,":"),q0.forEach(t),m0r=i(ql),MFe=n(ql,"UL",{});var mCt=s(MFe);iE=n(mCt,"LI",{});var eBe=s(iE);EFe=n(eBe,"STRONG",{});var gCt=s(EFe);g0r=r(gCt,"vision-encoder-decoder"),gCt.forEach(t),h0r=r(eBe," \u2014 "),rJ=n(eBe,"A",{href:!0});var hCt=s(rJ);p0r=r(hCt,"TFVisionEncoderDecoderModel"),hCt.forEach(t),_0r=r(eBe," (Vision Encoder decoder model)"),eBe.forEach(t),mCt.forEach(t),u0r=i(ql),T(dE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),$Ne=i(f),wc=n(f,"H2",{class:!0});var qDe=s(wc);cE=n(qDe,"A",{id:!0,class:!0,href:!0});var pCt=s(cE);CFe=n(pCt,"SPAN",{});var _Ct=s(CFe);T(l9.$$.fragment,_Ct),_Ct.forEach(t),pCt.forEach(t),b0r=i(qDe),wFe=n(qDe,"SPAN",{});var uCt=s(wFe);v0r=r(uCt,"TFAutoModelForSpeechSeq2Seq"),uCt.forEach(t),qDe.forEach(t),kNe=i(f),cr=n(f,"DIV",{class:!0});var Nl=s(cr);T(i9.$$.fragment,Nl),F0r=i(Nl),Ac=n(Nl,"P",{});var see=s(Ac);T0r=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),tJ=n(see,"A",{href:!0});var bCt=s(tJ);M0r=r(bCt,"from_pretrained()"),bCt.forEach(t),E0r=r(see," class method or the "),aJ=n(see,"A",{href:!0});var vCt=s(aJ);C0r=r(vCt,"from_config()"),vCt.forEach(t),w0r=r(see,` class
method.`),see.forEach(t),A0r=i(Nl),d9=n(Nl,"P",{});var NDe=s(d9);y0r=r(NDe,"This class cannot be instantiated directly using "),AFe=n(NDe,"CODE",{});var FCt=s(AFe);L0r=r(FCt,"__init__()"),FCt.forEach(t),x0r=r(NDe," (throws an error)."),NDe.forEach(t),$0r=i(Nl),Dt=n(Nl,"DIV",{class:!0});var N0=s(Dt);T(c9.$$.fragment,N0),k0r=i(N0),yFe=n(N0,"P",{});var TCt=s(yFe);S0r=r(TCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TCt.forEach(t),R0r=i(N0),yc=n(N0,"P",{});var lee=s(yc);P0r=r(lee,`Note:
Loading a model from its configuration file does `),LFe=n(lee,"STRONG",{});var MCt=s(LFe);B0r=r(MCt,"not"),MCt.forEach(t),I0r=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(lee,"A",{href:!0});var ECt=s(nJ);q0r=r(ECt,"from_pretrained()"),ECt.forEach(t),N0r=r(lee," to load the model weights."),lee.forEach(t),j0r=i(N0),T(fE.$$.fragment,N0),N0.forEach(t),D0r=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(f9.$$.fragment,jl),G0r=i(jl),xFe=n(jl,"P",{});var CCt=s(xFe);O0r=r(CCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),CCt.forEach(t),V0r=i(jl),gn=n(jl,"P",{});var j0=s(gn);X0r=r(j0,"The model class to instantiate is selected based on the "),$Fe=n(j0,"CODE",{});var wCt=s($Fe);z0r=r(wCt,"model_type"),wCt.forEach(t),W0r=r(j0,` property of the config object (either
passed as an argument or loaded from `),kFe=n(j0,"CODE",{});var ACt=s(kFe);Q0r=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),H0r=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(j0,"CODE",{});var yCt=s(SFe);U0r=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),J0r=r(j0,":"),j0.forEach(t),Y0r=i(jl),RFe=n(jl,"UL",{});var LCt=s(RFe);mE=n(LCt,"LI",{});var oBe=s(mE);PFe=n(oBe,"STRONG",{});var xCt=s(PFe);K0r=r(xCt,"speech_to_text"),xCt.forEach(t),Z0r=r(oBe," \u2014 "),sJ=n(oBe,"A",{href:!0});var $Ct=s(sJ);eAr=r($Ct,"TFSpeech2TextForConditionalGeneration"),$Ct.forEach(t),oAr=r(oBe," (Speech2Text model)"),oBe.forEach(t),LCt.forEach(t),rAr=i(jl),T(gE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),SNe=i(f),Lc=n(f,"H2",{class:!0});var jDe=s(Lc);hE=n(jDe,"A",{id:!0,class:!0,href:!0});var kCt=s(hE);BFe=n(kCt,"SPAN",{});var SCt=s(BFe);T(m9.$$.fragment,SCt),SCt.forEach(t),kCt.forEach(t),tAr=i(jDe),IFe=n(jDe,"SPAN",{});var RCt=s(IFe);aAr=r(RCt,"FlaxAutoModel"),RCt.forEach(t),jDe.forEach(t),RNe=i(f),fr=n(f,"DIV",{class:!0});var Dl=s(fr);T(g9.$$.fragment,Dl),nAr=i(Dl),xc=n(Dl,"P",{});var iee=s(xc);sAr=r(iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lJ=n(iee,"A",{href:!0});var PCt=s(lJ);lAr=r(PCt,"from_pretrained()"),PCt.forEach(t),iAr=r(iee," class method or the "),iJ=n(iee,"A",{href:!0});var BCt=s(iJ);dAr=r(BCt,"from_config()"),BCt.forEach(t),cAr=r(iee,` class
method.`),iee.forEach(t),fAr=i(Dl),h9=n(Dl,"P",{});var DDe=s(h9);mAr=r(DDe,"This class cannot be instantiated directly using "),qFe=n(DDe,"CODE",{});var ICt=s(qFe);gAr=r(ICt,"__init__()"),ICt.forEach(t),hAr=r(DDe," (throws an error)."),DDe.forEach(t),pAr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var D0=s(Gt);T(p9.$$.fragment,D0),_Ar=i(D0),NFe=n(D0,"P",{});var qCt=s(NFe);uAr=r(qCt,"Instantiates one of the base model classes of the library from a configuration."),qCt.forEach(t),bAr=i(D0),$c=n(D0,"P",{});var dee=s($c);vAr=r(dee,`Note:
Loading a model from its configuration file does `),jFe=n(dee,"STRONG",{});var NCt=s(jFe);FAr=r(NCt,"not"),NCt.forEach(t),TAr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(dee,"A",{href:!0});var jCt=s(dJ);MAr=r(jCt,"from_pretrained()"),jCt.forEach(t),EAr=r(dee," to load the model weights."),dee.forEach(t),CAr=i(D0),T(pE.$$.fragment,D0),D0.forEach(t),wAr=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(_9.$$.fragment,Gl),AAr=i(Gl),DFe=n(Gl,"P",{});var DCt=s(DFe);yAr=r(DCt,"Instantiate one of the base model classes of the library from a pretrained model."),DCt.forEach(t),LAr=i(Gl),hn=n(Gl,"P",{});var G0=s(hn);xAr=r(G0,"The model class to instantiate is selected based on the "),GFe=n(G0,"CODE",{});var GCt=s(GFe);$Ar=r(GCt,"model_type"),GCt.forEach(t),kAr=r(G0,` property of the config object (either
passed as an argument or loaded from `),OFe=n(G0,"CODE",{});var OCt=s(OFe);SAr=r(OCt,"pretrained_model_name_or_path"),OCt.forEach(t),RAr=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(G0,"CODE",{});var VCt=s(VFe);PAr=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),BAr=r(G0,":"),G0.forEach(t),IAr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);_E=n(ne,"LI",{});var rBe=s(_E);XFe=n(rBe,"STRONG",{});var XCt=s(XFe);qAr=r(XCt,"albert"),XCt.forEach(t),NAr=r(rBe," \u2014 "),cJ=n(rBe,"A",{href:!0});var zCt=s(cJ);jAr=r(zCt,"FlaxAlbertModel"),zCt.forEach(t),DAr=r(rBe," (ALBERT model)"),rBe.forEach(t),GAr=i(ne),uE=n(ne,"LI",{});var tBe=s(uE);zFe=n(tBe,"STRONG",{});var WCt=s(zFe);OAr=r(WCt,"bart"),WCt.forEach(t),VAr=r(tBe," \u2014 "),fJ=n(tBe,"A",{href:!0});var QCt=s(fJ);XAr=r(QCt,"FlaxBartModel"),QCt.forEach(t),zAr=r(tBe," (BART model)"),tBe.forEach(t),WAr=i(ne),bE=n(ne,"LI",{});var aBe=s(bE);WFe=n(aBe,"STRONG",{});var HCt=s(WFe);QAr=r(HCt,"beit"),HCt.forEach(t),HAr=r(aBe," \u2014 "),mJ=n(aBe,"A",{href:!0});var UCt=s(mJ);UAr=r(UCt,"FlaxBeitModel"),UCt.forEach(t),JAr=r(aBe," (BEiT model)"),aBe.forEach(t),YAr=i(ne),vE=n(ne,"LI",{});var nBe=s(vE);QFe=n(nBe,"STRONG",{});var JCt=s(QFe);KAr=r(JCt,"bert"),JCt.forEach(t),ZAr=r(nBe," \u2014 "),gJ=n(nBe,"A",{href:!0});var YCt=s(gJ);e6r=r(YCt,"FlaxBertModel"),YCt.forEach(t),o6r=r(nBe," (BERT model)"),nBe.forEach(t),r6r=i(ne),FE=n(ne,"LI",{});var sBe=s(FE);HFe=n(sBe,"STRONG",{});var KCt=s(HFe);t6r=r(KCt,"big_bird"),KCt.forEach(t),a6r=r(sBe," \u2014 "),hJ=n(sBe,"A",{href:!0});var ZCt=s(hJ);n6r=r(ZCt,"FlaxBigBirdModel"),ZCt.forEach(t),s6r=r(sBe," (BigBird model)"),sBe.forEach(t),l6r=i(ne),TE=n(ne,"LI",{});var lBe=s(TE);UFe=n(lBe,"STRONG",{});var e5t=s(UFe);i6r=r(e5t,"blenderbot"),e5t.forEach(t),d6r=r(lBe," \u2014 "),pJ=n(lBe,"A",{href:!0});var o5t=s(pJ);c6r=r(o5t,"FlaxBlenderbotModel"),o5t.forEach(t),f6r=r(lBe," (Blenderbot model)"),lBe.forEach(t),m6r=i(ne),ME=n(ne,"LI",{});var iBe=s(ME);JFe=n(iBe,"STRONG",{});var r5t=s(JFe);g6r=r(r5t,"blenderbot-small"),r5t.forEach(t),h6r=r(iBe," \u2014 "),_J=n(iBe,"A",{href:!0});var t5t=s(_J);p6r=r(t5t,"FlaxBlenderbotSmallModel"),t5t.forEach(t),_6r=r(iBe," (BlenderbotSmall model)"),iBe.forEach(t),u6r=i(ne),EE=n(ne,"LI",{});var dBe=s(EE);YFe=n(dBe,"STRONG",{});var a5t=s(YFe);b6r=r(a5t,"clip"),a5t.forEach(t),v6r=r(dBe," \u2014 "),uJ=n(dBe,"A",{href:!0});var n5t=s(uJ);F6r=r(n5t,"FlaxCLIPModel"),n5t.forEach(t),T6r=r(dBe," (CLIP model)"),dBe.forEach(t),M6r=i(ne),CE=n(ne,"LI",{});var cBe=s(CE);KFe=n(cBe,"STRONG",{});var s5t=s(KFe);E6r=r(s5t,"distilbert"),s5t.forEach(t),C6r=r(cBe," \u2014 "),bJ=n(cBe,"A",{href:!0});var l5t=s(bJ);w6r=r(l5t,"FlaxDistilBertModel"),l5t.forEach(t),A6r=r(cBe," (DistilBERT model)"),cBe.forEach(t),y6r=i(ne),wE=n(ne,"LI",{});var fBe=s(wE);ZFe=n(fBe,"STRONG",{});var i5t=s(ZFe);L6r=r(i5t,"electra"),i5t.forEach(t),x6r=r(fBe," \u2014 "),vJ=n(fBe,"A",{href:!0});var d5t=s(vJ);$6r=r(d5t,"FlaxElectraModel"),d5t.forEach(t),k6r=r(fBe," (ELECTRA model)"),fBe.forEach(t),S6r=i(ne),AE=n(ne,"LI",{});var mBe=s(AE);eTe=n(mBe,"STRONG",{});var c5t=s(eTe);R6r=r(c5t,"gpt2"),c5t.forEach(t),P6r=r(mBe," \u2014 "),FJ=n(mBe,"A",{href:!0});var f5t=s(FJ);B6r=r(f5t,"FlaxGPT2Model"),f5t.forEach(t),I6r=r(mBe," (OpenAI GPT-2 model)"),mBe.forEach(t),q6r=i(ne),yE=n(ne,"LI",{});var gBe=s(yE);oTe=n(gBe,"STRONG",{});var m5t=s(oTe);N6r=r(m5t,"gpt_neo"),m5t.forEach(t),j6r=r(gBe," \u2014 "),TJ=n(gBe,"A",{href:!0});var g5t=s(TJ);D6r=r(g5t,"FlaxGPTNeoModel"),g5t.forEach(t),G6r=r(gBe," (GPT Neo model)"),gBe.forEach(t),O6r=i(ne),LE=n(ne,"LI",{});var hBe=s(LE);rTe=n(hBe,"STRONG",{});var h5t=s(rTe);V6r=r(h5t,"gptj"),h5t.forEach(t),X6r=r(hBe," \u2014 "),MJ=n(hBe,"A",{href:!0});var p5t=s(MJ);z6r=r(p5t,"FlaxGPTJModel"),p5t.forEach(t),W6r=r(hBe," (GPT-J model)"),hBe.forEach(t),Q6r=i(ne),xE=n(ne,"LI",{});var pBe=s(xE);tTe=n(pBe,"STRONG",{});var _5t=s(tTe);H6r=r(_5t,"marian"),_5t.forEach(t),U6r=r(pBe," \u2014 "),EJ=n(pBe,"A",{href:!0});var u5t=s(EJ);J6r=r(u5t,"FlaxMarianModel"),u5t.forEach(t),Y6r=r(pBe," (Marian model)"),pBe.forEach(t),K6r=i(ne),$E=n(ne,"LI",{});var _Be=s($E);aTe=n(_Be,"STRONG",{});var b5t=s(aTe);Z6r=r(b5t,"mbart"),b5t.forEach(t),eyr=r(_Be," \u2014 "),CJ=n(_Be,"A",{href:!0});var v5t=s(CJ);oyr=r(v5t,"FlaxMBartModel"),v5t.forEach(t),ryr=r(_Be," (mBART model)"),_Be.forEach(t),tyr=i(ne),kE=n(ne,"LI",{});var uBe=s(kE);nTe=n(uBe,"STRONG",{});var F5t=s(nTe);ayr=r(F5t,"mt5"),F5t.forEach(t),nyr=r(uBe," \u2014 "),wJ=n(uBe,"A",{href:!0});var T5t=s(wJ);syr=r(T5t,"FlaxMT5Model"),T5t.forEach(t),lyr=r(uBe," (mT5 model)"),uBe.forEach(t),iyr=i(ne),SE=n(ne,"LI",{});var bBe=s(SE);sTe=n(bBe,"STRONG",{});var M5t=s(sTe);dyr=r(M5t,"pegasus"),M5t.forEach(t),cyr=r(bBe," \u2014 "),AJ=n(bBe,"A",{href:!0});var E5t=s(AJ);fyr=r(E5t,"FlaxPegasusModel"),E5t.forEach(t),myr=r(bBe," (Pegasus model)"),bBe.forEach(t),gyr=i(ne),RE=n(ne,"LI",{});var vBe=s(RE);lTe=n(vBe,"STRONG",{});var C5t=s(lTe);hyr=r(C5t,"roberta"),C5t.forEach(t),pyr=r(vBe," \u2014 "),yJ=n(vBe,"A",{href:!0});var w5t=s(yJ);_yr=r(w5t,"FlaxRobertaModel"),w5t.forEach(t),uyr=r(vBe," (RoBERTa model)"),vBe.forEach(t),byr=i(ne),PE=n(ne,"LI",{});var FBe=s(PE);iTe=n(FBe,"STRONG",{});var A5t=s(iTe);vyr=r(A5t,"roformer"),A5t.forEach(t),Fyr=r(FBe," \u2014 "),LJ=n(FBe,"A",{href:!0});var y5t=s(LJ);Tyr=r(y5t,"FlaxRoFormerModel"),y5t.forEach(t),Myr=r(FBe," (RoFormer model)"),FBe.forEach(t),Eyr=i(ne),BE=n(ne,"LI",{});var TBe=s(BE);dTe=n(TBe,"STRONG",{});var L5t=s(dTe);Cyr=r(L5t,"t5"),L5t.forEach(t),wyr=r(TBe," \u2014 "),xJ=n(TBe,"A",{href:!0});var x5t=s(xJ);Ayr=r(x5t,"FlaxT5Model"),x5t.forEach(t),yyr=r(TBe," (T5 model)"),TBe.forEach(t),Lyr=i(ne),IE=n(ne,"LI",{});var MBe=s(IE);cTe=n(MBe,"STRONG",{});var $5t=s(cTe);xyr=r($5t,"vision-text-dual-encoder"),$5t.forEach(t),$yr=r(MBe," \u2014 "),$J=n(MBe,"A",{href:!0});var k5t=s($J);kyr=r(k5t,"FlaxVisionTextDualEncoderModel"),k5t.forEach(t),Syr=r(MBe," (VisionTextDualEncoder model)"),MBe.forEach(t),Ryr=i(ne),qE=n(ne,"LI",{});var EBe=s(qE);fTe=n(EBe,"STRONG",{});var S5t=s(fTe);Pyr=r(S5t,"vit"),S5t.forEach(t),Byr=r(EBe," \u2014 "),kJ=n(EBe,"A",{href:!0});var R5t=s(kJ);Iyr=r(R5t,"FlaxViTModel"),R5t.forEach(t),qyr=r(EBe," (ViT model)"),EBe.forEach(t),Nyr=i(ne),NE=n(ne,"LI",{});var CBe=s(NE);mTe=n(CBe,"STRONG",{});var P5t=s(mTe);jyr=r(P5t,"wav2vec2"),P5t.forEach(t),Dyr=r(CBe," \u2014 "),SJ=n(CBe,"A",{href:!0});var B5t=s(SJ);Gyr=r(B5t,"FlaxWav2Vec2Model"),B5t.forEach(t),Oyr=r(CBe," (Wav2Vec2 model)"),CBe.forEach(t),Vyr=i(ne),jE=n(ne,"LI",{});var wBe=s(jE);gTe=n(wBe,"STRONG",{});var I5t=s(gTe);Xyr=r(I5t,"xglm"),I5t.forEach(t),zyr=r(wBe," \u2014 "),RJ=n(wBe,"A",{href:!0});var q5t=s(RJ);Wyr=r(q5t,"FlaxXGLMModel"),q5t.forEach(t),Qyr=r(wBe," (XGLM model)"),wBe.forEach(t),Hyr=i(ne),DE=n(ne,"LI",{});var ABe=s(DE);hTe=n(ABe,"STRONG",{});var N5t=s(hTe);Uyr=r(N5t,"xlm-roberta"),N5t.forEach(t),Jyr=r(ABe," \u2014 "),PJ=n(ABe,"A",{href:!0});var j5t=s(PJ);Yyr=r(j5t,"FlaxXLMRobertaModel"),j5t.forEach(t),Kyr=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),ne.forEach(t),Zyr=i(Gl),T(GE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),PNe=i(f),kc=n(f,"H2",{class:!0});var GDe=s(kc);OE=n(GDe,"A",{id:!0,class:!0,href:!0});var D5t=s(OE);pTe=n(D5t,"SPAN",{});var G5t=s(pTe);T(u9.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),eLr=i(GDe),_Te=n(GDe,"SPAN",{});var O5t=s(_Te);oLr=r(O5t,"FlaxAutoModelForCausalLM"),O5t.forEach(t),GDe.forEach(t),BNe=i(f),mr=n(f,"DIV",{class:!0});var Ol=s(mr);T(b9.$$.fragment,Ol),rLr=i(Ol),Sc=n(Ol,"P",{});var cee=s(Sc);tLr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BJ=n(cee,"A",{href:!0});var V5t=s(BJ);aLr=r(V5t,"from_pretrained()"),V5t.forEach(t),nLr=r(cee," class method or the "),IJ=n(cee,"A",{href:!0});var X5t=s(IJ);sLr=r(X5t,"from_config()"),X5t.forEach(t),lLr=r(cee,` class
method.`),cee.forEach(t),iLr=i(Ol),v9=n(Ol,"P",{});var ODe=s(v9);dLr=r(ODe,"This class cannot be instantiated directly using "),uTe=n(ODe,"CODE",{});var z5t=s(uTe);cLr=r(z5t,"__init__()"),z5t.forEach(t),fLr=r(ODe," (throws an error)."),ODe.forEach(t),mLr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var O0=s(Ot);T(F9.$$.fragment,O0),gLr=i(O0),bTe=n(O0,"P",{});var W5t=s(bTe);hLr=r(W5t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W5t.forEach(t),pLr=i(O0),Rc=n(O0,"P",{});var fee=s(Rc);_Lr=r(fee,`Note:
Loading a model from its configuration file does `),vTe=n(fee,"STRONG",{});var Q5t=s(vTe);uLr=r(Q5t,"not"),Q5t.forEach(t),bLr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(fee,"A",{href:!0});var H5t=s(qJ);vLr=r(H5t,"from_pretrained()"),H5t.forEach(t),FLr=r(fee," to load the model weights."),fee.forEach(t),TLr=i(O0),T(VE.$$.fragment,O0),O0.forEach(t),MLr=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(T9.$$.fragment,Vl),ELr=i(Vl),FTe=n(Vl,"P",{});var U5t=s(FTe);CLr=r(U5t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),U5t.forEach(t),wLr=i(Vl),pn=n(Vl,"P",{});var V0=s(pn);ALr=r(V0,"The model class to instantiate is selected based on the "),TTe=n(V0,"CODE",{});var J5t=s(TTe);yLr=r(J5t,"model_type"),J5t.forEach(t),LLr=r(V0,` property of the config object (either
passed as an argument or loaded from `),MTe=n(V0,"CODE",{});var Y5t=s(MTe);xLr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),$Lr=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(V0,"CODE",{});var K5t=s(ETe);kLr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),SLr=r(V0,":"),V0.forEach(t),RLr=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);XE=n(Xe,"LI",{});var yBe=s(XE);CTe=n(yBe,"STRONG",{});var Z5t=s(CTe);PLr=r(Z5t,"bart"),Z5t.forEach(t),BLr=r(yBe," \u2014 "),NJ=n(yBe,"A",{href:!0});var ewt=s(NJ);ILr=r(ewt,"FlaxBartForCausalLM"),ewt.forEach(t),qLr=r(yBe," (BART model)"),yBe.forEach(t),NLr=i(Xe),zE=n(Xe,"LI",{});var LBe=s(zE);wTe=n(LBe,"STRONG",{});var owt=s(wTe);jLr=r(owt,"bert"),owt.forEach(t),DLr=r(LBe," \u2014 "),jJ=n(LBe,"A",{href:!0});var rwt=s(jJ);GLr=r(rwt,"FlaxBertForCausalLM"),rwt.forEach(t),OLr=r(LBe," (BERT model)"),LBe.forEach(t),VLr=i(Xe),WE=n(Xe,"LI",{});var xBe=s(WE);ATe=n(xBe,"STRONG",{});var twt=s(ATe);XLr=r(twt,"big_bird"),twt.forEach(t),zLr=r(xBe," \u2014 "),DJ=n(xBe,"A",{href:!0});var awt=s(DJ);WLr=r(awt,"FlaxBigBirdForCausalLM"),awt.forEach(t),QLr=r(xBe," (BigBird model)"),xBe.forEach(t),HLr=i(Xe),QE=n(Xe,"LI",{});var $Be=s(QE);yTe=n($Be,"STRONG",{});var nwt=s(yTe);ULr=r(nwt,"electra"),nwt.forEach(t),JLr=r($Be," \u2014 "),GJ=n($Be,"A",{href:!0});var swt=s(GJ);YLr=r(swt,"FlaxElectraForCausalLM"),swt.forEach(t),KLr=r($Be," (ELECTRA model)"),$Be.forEach(t),ZLr=i(Xe),HE=n(Xe,"LI",{});var kBe=s(HE);LTe=n(kBe,"STRONG",{});var lwt=s(LTe);e9r=r(lwt,"gpt2"),lwt.forEach(t),o9r=r(kBe," \u2014 "),OJ=n(kBe,"A",{href:!0});var iwt=s(OJ);r9r=r(iwt,"FlaxGPT2LMHeadModel"),iwt.forEach(t),t9r=r(kBe," (OpenAI GPT-2 model)"),kBe.forEach(t),a9r=i(Xe),UE=n(Xe,"LI",{});var SBe=s(UE);xTe=n(SBe,"STRONG",{});var dwt=s(xTe);n9r=r(dwt,"gpt_neo"),dwt.forEach(t),s9r=r(SBe," \u2014 "),VJ=n(SBe,"A",{href:!0});var cwt=s(VJ);l9r=r(cwt,"FlaxGPTNeoForCausalLM"),cwt.forEach(t),i9r=r(SBe," (GPT Neo model)"),SBe.forEach(t),d9r=i(Xe),JE=n(Xe,"LI",{});var RBe=s(JE);$Te=n(RBe,"STRONG",{});var fwt=s($Te);c9r=r(fwt,"gptj"),fwt.forEach(t),f9r=r(RBe," \u2014 "),XJ=n(RBe,"A",{href:!0});var mwt=s(XJ);m9r=r(mwt,"FlaxGPTJForCausalLM"),mwt.forEach(t),g9r=r(RBe," (GPT-J model)"),RBe.forEach(t),h9r=i(Xe),YE=n(Xe,"LI",{});var PBe=s(YE);kTe=n(PBe,"STRONG",{});var gwt=s(kTe);p9r=r(gwt,"roberta"),gwt.forEach(t),_9r=r(PBe," \u2014 "),zJ=n(PBe,"A",{href:!0});var hwt=s(zJ);u9r=r(hwt,"FlaxRobertaForCausalLM"),hwt.forEach(t),b9r=r(PBe," (RoBERTa model)"),PBe.forEach(t),v9r=i(Xe),KE=n(Xe,"LI",{});var BBe=s(KE);STe=n(BBe,"STRONG",{});var pwt=s(STe);F9r=r(pwt,"xglm"),pwt.forEach(t),T9r=r(BBe," \u2014 "),WJ=n(BBe,"A",{href:!0});var _wt=s(WJ);M9r=r(_wt,"FlaxXGLMForCausalLM"),_wt.forEach(t),E9r=r(BBe," (XGLM model)"),BBe.forEach(t),Xe.forEach(t),C9r=i(Vl),T(ZE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),INe=i(f),Pc=n(f,"H2",{class:!0});var VDe=s(Pc);eC=n(VDe,"A",{id:!0,class:!0,href:!0});var uwt=s(eC);RTe=n(uwt,"SPAN",{});var bwt=s(RTe);T(M9.$$.fragment,bwt),bwt.forEach(t),uwt.forEach(t),w9r=i(VDe),PTe=n(VDe,"SPAN",{});var vwt=s(PTe);A9r=r(vwt,"FlaxAutoModelForPreTraining"),vwt.forEach(t),VDe.forEach(t),qNe=i(f),gr=n(f,"DIV",{class:!0});var Xl=s(gr);T(E9.$$.fragment,Xl),y9r=i(Xl),Bc=n(Xl,"P",{});var mee=s(Bc);L9r=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QJ=n(mee,"A",{href:!0});var Fwt=s(QJ);x9r=r(Fwt,"from_pretrained()"),Fwt.forEach(t),$9r=r(mee," class method or the "),HJ=n(mee,"A",{href:!0});var Twt=s(HJ);k9r=r(Twt,"from_config()"),Twt.forEach(t),S9r=r(mee,` class
method.`),mee.forEach(t),R9r=i(Xl),C9=n(Xl,"P",{});var XDe=s(C9);P9r=r(XDe,"This class cannot be instantiated directly using "),BTe=n(XDe,"CODE",{});var Mwt=s(BTe);B9r=r(Mwt,"__init__()"),Mwt.forEach(t),I9r=r(XDe," (throws an error)."),XDe.forEach(t),q9r=i(Xl),Vt=n(Xl,"DIV",{class:!0});var X0=s(Vt);T(w9.$$.fragment,X0),N9r=i(X0),ITe=n(X0,"P",{});var Ewt=s(ITe);j9r=r(Ewt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ewt.forEach(t),D9r=i(X0),Ic=n(X0,"P",{});var gee=s(Ic);G9r=r(gee,`Note:
Loading a model from its configuration file does `),qTe=n(gee,"STRONG",{});var Cwt=s(qTe);O9r=r(Cwt,"not"),Cwt.forEach(t),V9r=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(gee,"A",{href:!0});var wwt=s(UJ);X9r=r(wwt,"from_pretrained()"),wwt.forEach(t),z9r=r(gee," to load the model weights."),gee.forEach(t),W9r=i(X0),T(oC.$$.fragment,X0),X0.forEach(t),Q9r=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(A9.$$.fragment,zl),H9r=i(zl),NTe=n(zl,"P",{});var Awt=s(NTe);U9r=r(Awt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Awt.forEach(t),J9r=i(zl),_n=n(zl,"P",{});var z0=s(_n);Y9r=r(z0,"The model class to instantiate is selected based on the "),jTe=n(z0,"CODE",{});var ywt=s(jTe);K9r=r(ywt,"model_type"),ywt.forEach(t),Z9r=r(z0,` property of the config object (either
passed as an argument or loaded from `),DTe=n(z0,"CODE",{});var Lwt=s(DTe);exr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),oxr=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(z0,"CODE",{});var xwt=s(GTe);rxr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),txr=r(z0,":"),z0.forEach(t),axr=i(zl),Ee=n(zl,"UL",{});var we=s(Ee);rC=n(we,"LI",{});var IBe=s(rC);OTe=n(IBe,"STRONG",{});var $wt=s(OTe);nxr=r($wt,"albert"),$wt.forEach(t),sxr=r(IBe," \u2014 "),JJ=n(IBe,"A",{href:!0});var kwt=s(JJ);lxr=r(kwt,"FlaxAlbertForPreTraining"),kwt.forEach(t),ixr=r(IBe," (ALBERT model)"),IBe.forEach(t),dxr=i(we),tC=n(we,"LI",{});var qBe=s(tC);VTe=n(qBe,"STRONG",{});var Swt=s(VTe);cxr=r(Swt,"bart"),Swt.forEach(t),fxr=r(qBe," \u2014 "),YJ=n(qBe,"A",{href:!0});var Rwt=s(YJ);mxr=r(Rwt,"FlaxBartForConditionalGeneration"),Rwt.forEach(t),gxr=r(qBe," (BART model)"),qBe.forEach(t),hxr=i(we),aC=n(we,"LI",{});var NBe=s(aC);XTe=n(NBe,"STRONG",{});var Pwt=s(XTe);pxr=r(Pwt,"bert"),Pwt.forEach(t),_xr=r(NBe," \u2014 "),KJ=n(NBe,"A",{href:!0});var Bwt=s(KJ);uxr=r(Bwt,"FlaxBertForPreTraining"),Bwt.forEach(t),bxr=r(NBe," (BERT model)"),NBe.forEach(t),vxr=i(we),nC=n(we,"LI",{});var jBe=s(nC);zTe=n(jBe,"STRONG",{});var Iwt=s(zTe);Fxr=r(Iwt,"big_bird"),Iwt.forEach(t),Txr=r(jBe," \u2014 "),ZJ=n(jBe,"A",{href:!0});var qwt=s(ZJ);Mxr=r(qwt,"FlaxBigBirdForPreTraining"),qwt.forEach(t),Exr=r(jBe," (BigBird model)"),jBe.forEach(t),Cxr=i(we),sC=n(we,"LI",{});var DBe=s(sC);WTe=n(DBe,"STRONG",{});var Nwt=s(WTe);wxr=r(Nwt,"electra"),Nwt.forEach(t),Axr=r(DBe," \u2014 "),eY=n(DBe,"A",{href:!0});var jwt=s(eY);yxr=r(jwt,"FlaxElectraForPreTraining"),jwt.forEach(t),Lxr=r(DBe," (ELECTRA model)"),DBe.forEach(t),xxr=i(we),lC=n(we,"LI",{});var GBe=s(lC);QTe=n(GBe,"STRONG",{});var Dwt=s(QTe);$xr=r(Dwt,"mbart"),Dwt.forEach(t),kxr=r(GBe," \u2014 "),oY=n(GBe,"A",{href:!0});var Gwt=s(oY);Sxr=r(Gwt,"FlaxMBartForConditionalGeneration"),Gwt.forEach(t),Rxr=r(GBe," (mBART model)"),GBe.forEach(t),Pxr=i(we),iC=n(we,"LI",{});var OBe=s(iC);HTe=n(OBe,"STRONG",{});var Owt=s(HTe);Bxr=r(Owt,"mt5"),Owt.forEach(t),Ixr=r(OBe," \u2014 "),rY=n(OBe,"A",{href:!0});var Vwt=s(rY);qxr=r(Vwt,"FlaxMT5ForConditionalGeneration"),Vwt.forEach(t),Nxr=r(OBe," (mT5 model)"),OBe.forEach(t),jxr=i(we),dC=n(we,"LI",{});var VBe=s(dC);UTe=n(VBe,"STRONG",{});var Xwt=s(UTe);Dxr=r(Xwt,"roberta"),Xwt.forEach(t),Gxr=r(VBe," \u2014 "),tY=n(VBe,"A",{href:!0});var zwt=s(tY);Oxr=r(zwt,"FlaxRobertaForMaskedLM"),zwt.forEach(t),Vxr=r(VBe," (RoBERTa model)"),VBe.forEach(t),Xxr=i(we),cC=n(we,"LI",{});var XBe=s(cC);JTe=n(XBe,"STRONG",{});var Wwt=s(JTe);zxr=r(Wwt,"roformer"),Wwt.forEach(t),Wxr=r(XBe," \u2014 "),aY=n(XBe,"A",{href:!0});var Qwt=s(aY);Qxr=r(Qwt,"FlaxRoFormerForMaskedLM"),Qwt.forEach(t),Hxr=r(XBe," (RoFormer model)"),XBe.forEach(t),Uxr=i(we),fC=n(we,"LI",{});var zBe=s(fC);YTe=n(zBe,"STRONG",{});var Hwt=s(YTe);Jxr=r(Hwt,"t5"),Hwt.forEach(t),Yxr=r(zBe," \u2014 "),nY=n(zBe,"A",{href:!0});var Uwt=s(nY);Kxr=r(Uwt,"FlaxT5ForConditionalGeneration"),Uwt.forEach(t),Zxr=r(zBe," (T5 model)"),zBe.forEach(t),e$r=i(we),mC=n(we,"LI",{});var WBe=s(mC);KTe=n(WBe,"STRONG",{});var Jwt=s(KTe);o$r=r(Jwt,"wav2vec2"),Jwt.forEach(t),r$r=r(WBe," \u2014 "),sY=n(WBe,"A",{href:!0});var Ywt=s(sY);t$r=r(Ywt,"FlaxWav2Vec2ForPreTraining"),Ywt.forEach(t),a$r=r(WBe," (Wav2Vec2 model)"),WBe.forEach(t),n$r=i(we),gC=n(we,"LI",{});var QBe=s(gC);ZTe=n(QBe,"STRONG",{});var Kwt=s(ZTe);s$r=r(Kwt,"xlm-roberta"),Kwt.forEach(t),l$r=r(QBe," \u2014 "),lY=n(QBe,"A",{href:!0});var Zwt=s(lY);i$r=r(Zwt,"FlaxXLMRobertaForMaskedLM"),Zwt.forEach(t),d$r=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),we.forEach(t),c$r=i(zl),T(hC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),NNe=i(f),qc=n(f,"H2",{class:!0});var zDe=s(qc);pC=n(zDe,"A",{id:!0,class:!0,href:!0});var e0t=s(pC);e8e=n(e0t,"SPAN",{});var o0t=s(e8e);T(y9.$$.fragment,o0t),o0t.forEach(t),e0t.forEach(t),f$r=i(zDe),o8e=n(zDe,"SPAN",{});var r0t=s(o8e);m$r=r(r0t,"FlaxAutoModelForMaskedLM"),r0t.forEach(t),zDe.forEach(t),jNe=i(f),hr=n(f,"DIV",{class:!0});var Wl=s(hr);T(L9.$$.fragment,Wl),g$r=i(Wl),Nc=n(Wl,"P",{});var hee=s(Nc);h$r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iY=n(hee,"A",{href:!0});var t0t=s(iY);p$r=r(t0t,"from_pretrained()"),t0t.forEach(t),_$r=r(hee," class method or the "),dY=n(hee,"A",{href:!0});var a0t=s(dY);u$r=r(a0t,"from_config()"),a0t.forEach(t),b$r=r(hee,` class
method.`),hee.forEach(t),v$r=i(Wl),x9=n(Wl,"P",{});var WDe=s(x9);F$r=r(WDe,"This class cannot be instantiated directly using "),r8e=n(WDe,"CODE",{});var n0t=s(r8e);T$r=r(n0t,"__init__()"),n0t.forEach(t),M$r=r(WDe," (throws an error)."),WDe.forEach(t),E$r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var W0=s(Xt);T($9.$$.fragment,W0),C$r=i(W0),t8e=n(W0,"P",{});var s0t=s(t8e);w$r=r(s0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),s0t.forEach(t),A$r=i(W0),jc=n(W0,"P",{});var pee=s(jc);y$r=r(pee,`Note:
Loading a model from its configuration file does `),a8e=n(pee,"STRONG",{});var l0t=s(a8e);L$r=r(l0t,"not"),l0t.forEach(t),x$r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(pee,"A",{href:!0});var i0t=s(cY);$$r=r(i0t,"from_pretrained()"),i0t.forEach(t),k$r=r(pee," to load the model weights."),pee.forEach(t),S$r=i(W0),T(_C.$$.fragment,W0),W0.forEach(t),R$r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(k9.$$.fragment,Ql),P$r=i(Ql),n8e=n(Ql,"P",{});var d0t=s(n8e);B$r=r(d0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),d0t.forEach(t),I$r=i(Ql),un=n(Ql,"P",{});var Q0=s(un);q$r=r(Q0,"The model class to instantiate is selected based on the "),s8e=n(Q0,"CODE",{});var c0t=s(s8e);N$r=r(c0t,"model_type"),c0t.forEach(t),j$r=r(Q0,` property of the config object (either
passed as an argument or loaded from `),l8e=n(Q0,"CODE",{});var f0t=s(l8e);D$r=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),G$r=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i8e=n(Q0,"CODE",{});var m0t=s(i8e);O$r=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),V$r=r(Q0,":"),Q0.forEach(t),X$r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);uC=n(Ie,"LI",{});var HBe=s(uC);d8e=n(HBe,"STRONG",{});var g0t=s(d8e);z$r=r(g0t,"albert"),g0t.forEach(t),W$r=r(HBe," \u2014 "),fY=n(HBe,"A",{href:!0});var h0t=s(fY);Q$r=r(h0t,"FlaxAlbertForMaskedLM"),h0t.forEach(t),H$r=r(HBe," (ALBERT model)"),HBe.forEach(t),U$r=i(Ie),bC=n(Ie,"LI",{});var UBe=s(bC);c8e=n(UBe,"STRONG",{});var p0t=s(c8e);J$r=r(p0t,"bart"),p0t.forEach(t),Y$r=r(UBe," \u2014 "),mY=n(UBe,"A",{href:!0});var _0t=s(mY);K$r=r(_0t,"FlaxBartForConditionalGeneration"),_0t.forEach(t),Z$r=r(UBe," (BART model)"),UBe.forEach(t),ekr=i(Ie),vC=n(Ie,"LI",{});var JBe=s(vC);f8e=n(JBe,"STRONG",{});var u0t=s(f8e);okr=r(u0t,"bert"),u0t.forEach(t),rkr=r(JBe," \u2014 "),gY=n(JBe,"A",{href:!0});var b0t=s(gY);tkr=r(b0t,"FlaxBertForMaskedLM"),b0t.forEach(t),akr=r(JBe," (BERT model)"),JBe.forEach(t),nkr=i(Ie),FC=n(Ie,"LI",{});var YBe=s(FC);m8e=n(YBe,"STRONG",{});var v0t=s(m8e);skr=r(v0t,"big_bird"),v0t.forEach(t),lkr=r(YBe," \u2014 "),hY=n(YBe,"A",{href:!0});var F0t=s(hY);ikr=r(F0t,"FlaxBigBirdForMaskedLM"),F0t.forEach(t),dkr=r(YBe," (BigBird model)"),YBe.forEach(t),ckr=i(Ie),TC=n(Ie,"LI",{});var KBe=s(TC);g8e=n(KBe,"STRONG",{});var T0t=s(g8e);fkr=r(T0t,"distilbert"),T0t.forEach(t),mkr=r(KBe," \u2014 "),pY=n(KBe,"A",{href:!0});var M0t=s(pY);gkr=r(M0t,"FlaxDistilBertForMaskedLM"),M0t.forEach(t),hkr=r(KBe," (DistilBERT model)"),KBe.forEach(t),pkr=i(Ie),MC=n(Ie,"LI",{});var ZBe=s(MC);h8e=n(ZBe,"STRONG",{});var E0t=s(h8e);_kr=r(E0t,"electra"),E0t.forEach(t),ukr=r(ZBe," \u2014 "),_Y=n(ZBe,"A",{href:!0});var C0t=s(_Y);bkr=r(C0t,"FlaxElectraForMaskedLM"),C0t.forEach(t),vkr=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),Fkr=i(Ie),EC=n(Ie,"LI",{});var eIe=s(EC);p8e=n(eIe,"STRONG",{});var w0t=s(p8e);Tkr=r(w0t,"mbart"),w0t.forEach(t),Mkr=r(eIe," \u2014 "),uY=n(eIe,"A",{href:!0});var A0t=s(uY);Ekr=r(A0t,"FlaxMBartForConditionalGeneration"),A0t.forEach(t),Ckr=r(eIe," (mBART model)"),eIe.forEach(t),wkr=i(Ie),CC=n(Ie,"LI",{});var oIe=s(CC);_8e=n(oIe,"STRONG",{});var y0t=s(_8e);Akr=r(y0t,"roberta"),y0t.forEach(t),ykr=r(oIe," \u2014 "),bY=n(oIe,"A",{href:!0});var L0t=s(bY);Lkr=r(L0t,"FlaxRobertaForMaskedLM"),L0t.forEach(t),xkr=r(oIe," (RoBERTa model)"),oIe.forEach(t),$kr=i(Ie),wC=n(Ie,"LI",{});var rIe=s(wC);u8e=n(rIe,"STRONG",{});var x0t=s(u8e);kkr=r(x0t,"roformer"),x0t.forEach(t),Skr=r(rIe," \u2014 "),vY=n(rIe,"A",{href:!0});var $0t=s(vY);Rkr=r($0t,"FlaxRoFormerForMaskedLM"),$0t.forEach(t),Pkr=r(rIe," (RoFormer model)"),rIe.forEach(t),Bkr=i(Ie),AC=n(Ie,"LI",{});var tIe=s(AC);b8e=n(tIe,"STRONG",{});var k0t=s(b8e);Ikr=r(k0t,"xlm-roberta"),k0t.forEach(t),qkr=r(tIe," \u2014 "),FY=n(tIe,"A",{href:!0});var S0t=s(FY);Nkr=r(S0t,"FlaxXLMRobertaForMaskedLM"),S0t.forEach(t),jkr=r(tIe," (XLM-RoBERTa model)"),tIe.forEach(t),Ie.forEach(t),Dkr=i(Ql),T(yC.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),DNe=i(f),Dc=n(f,"H2",{class:!0});var QDe=s(Dc);LC=n(QDe,"A",{id:!0,class:!0,href:!0});var R0t=s(LC);v8e=n(R0t,"SPAN",{});var P0t=s(v8e);T(S9.$$.fragment,P0t),P0t.forEach(t),R0t.forEach(t),Gkr=i(QDe),F8e=n(QDe,"SPAN",{});var B0t=s(F8e);Okr=r(B0t,"FlaxAutoModelForSeq2SeqLM"),B0t.forEach(t),QDe.forEach(t),GNe=i(f),pr=n(f,"DIV",{class:!0});var Hl=s(pr);T(R9.$$.fragment,Hl),Vkr=i(Hl),Gc=n(Hl,"P",{});var _ee=s(Gc);Xkr=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),TY=n(_ee,"A",{href:!0});var I0t=s(TY);zkr=r(I0t,"from_pretrained()"),I0t.forEach(t),Wkr=r(_ee," class method or the "),MY=n(_ee,"A",{href:!0});var q0t=s(MY);Qkr=r(q0t,"from_config()"),q0t.forEach(t),Hkr=r(_ee,` class
method.`),_ee.forEach(t),Ukr=i(Hl),P9=n(Hl,"P",{});var HDe=s(P9);Jkr=r(HDe,"This class cannot be instantiated directly using "),T8e=n(HDe,"CODE",{});var N0t=s(T8e);Ykr=r(N0t,"__init__()"),N0t.forEach(t),Kkr=r(HDe," (throws an error)."),HDe.forEach(t),Zkr=i(Hl),zt=n(Hl,"DIV",{class:!0});var H0=s(zt);T(B9.$$.fragment,H0),eSr=i(H0),M8e=n(H0,"P",{});var j0t=s(M8e);oSr=r(j0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),j0t.forEach(t),rSr=i(H0),Oc=n(H0,"P",{});var uee=s(Oc);tSr=r(uee,`Note:
Loading a model from its configuration file does `),E8e=n(uee,"STRONG",{});var D0t=s(E8e);aSr=r(D0t,"not"),D0t.forEach(t),nSr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(uee,"A",{href:!0});var G0t=s(EY);sSr=r(G0t,"from_pretrained()"),G0t.forEach(t),lSr=r(uee," to load the model weights."),uee.forEach(t),iSr=i(H0),T(xC.$$.fragment,H0),H0.forEach(t),dSr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T(I9.$$.fragment,Ul),cSr=i(Ul),C8e=n(Ul,"P",{});var O0t=s(C8e);fSr=r(O0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O0t.forEach(t),mSr=i(Ul),bn=n(Ul,"P",{});var U0=s(bn);gSr=r(U0,"The model class to instantiate is selected based on the "),w8e=n(U0,"CODE",{});var V0t=s(w8e);hSr=r(V0t,"model_type"),V0t.forEach(t),pSr=r(U0,` property of the config object (either
passed as an argument or loaded from `),A8e=n(U0,"CODE",{});var X0t=s(A8e);_Sr=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),uSr=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y8e=n(U0,"CODE",{});var z0t=s(y8e);bSr=r(z0t,"pretrained_model_name_or_path"),z0t.forEach(t),vSr=r(U0,":"),U0.forEach(t),FSr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);$C=n(ze,"LI",{});var aIe=s($C);L8e=n(aIe,"STRONG",{});var W0t=s(L8e);TSr=r(W0t,"bart"),W0t.forEach(t),MSr=r(aIe," \u2014 "),CY=n(aIe,"A",{href:!0});var Q0t=s(CY);ESr=r(Q0t,"FlaxBartForConditionalGeneration"),Q0t.forEach(t),CSr=r(aIe," (BART model)"),aIe.forEach(t),wSr=i(ze),kC=n(ze,"LI",{});var nIe=s(kC);x8e=n(nIe,"STRONG",{});var H0t=s(x8e);ASr=r(H0t,"blenderbot"),H0t.forEach(t),ySr=r(nIe," \u2014 "),wY=n(nIe,"A",{href:!0});var U0t=s(wY);LSr=r(U0t,"FlaxBlenderbotForConditionalGeneration"),U0t.forEach(t),xSr=r(nIe," (Blenderbot model)"),nIe.forEach(t),$Sr=i(ze),SC=n(ze,"LI",{});var sIe=s(SC);$8e=n(sIe,"STRONG",{});var J0t=s($8e);kSr=r(J0t,"blenderbot-small"),J0t.forEach(t),SSr=r(sIe," \u2014 "),AY=n(sIe,"A",{href:!0});var Y0t=s(AY);RSr=r(Y0t,"FlaxBlenderbotSmallForConditionalGeneration"),Y0t.forEach(t),PSr=r(sIe," (BlenderbotSmall model)"),sIe.forEach(t),BSr=i(ze),RC=n(ze,"LI",{});var lIe=s(RC);k8e=n(lIe,"STRONG",{});var K0t=s(k8e);ISr=r(K0t,"encoder-decoder"),K0t.forEach(t),qSr=r(lIe," \u2014 "),yY=n(lIe,"A",{href:!0});var Z0t=s(yY);NSr=r(Z0t,"FlaxEncoderDecoderModel"),Z0t.forEach(t),jSr=r(lIe," (Encoder decoder model)"),lIe.forEach(t),DSr=i(ze),PC=n(ze,"LI",{});var iIe=s(PC);S8e=n(iIe,"STRONG",{});var eAt=s(S8e);GSr=r(eAt,"marian"),eAt.forEach(t),OSr=r(iIe," \u2014 "),LY=n(iIe,"A",{href:!0});var oAt=s(LY);VSr=r(oAt,"FlaxMarianMTModel"),oAt.forEach(t),XSr=r(iIe," (Marian model)"),iIe.forEach(t),zSr=i(ze),BC=n(ze,"LI",{});var dIe=s(BC);R8e=n(dIe,"STRONG",{});var rAt=s(R8e);WSr=r(rAt,"mbart"),rAt.forEach(t),QSr=r(dIe," \u2014 "),xY=n(dIe,"A",{href:!0});var tAt=s(xY);HSr=r(tAt,"FlaxMBartForConditionalGeneration"),tAt.forEach(t),USr=r(dIe," (mBART model)"),dIe.forEach(t),JSr=i(ze),IC=n(ze,"LI",{});var cIe=s(IC);P8e=n(cIe,"STRONG",{});var aAt=s(P8e);YSr=r(aAt,"mt5"),aAt.forEach(t),KSr=r(cIe," \u2014 "),$Y=n(cIe,"A",{href:!0});var nAt=s($Y);ZSr=r(nAt,"FlaxMT5ForConditionalGeneration"),nAt.forEach(t),eRr=r(cIe," (mT5 model)"),cIe.forEach(t),oRr=i(ze),qC=n(ze,"LI",{});var fIe=s(qC);B8e=n(fIe,"STRONG",{});var sAt=s(B8e);rRr=r(sAt,"pegasus"),sAt.forEach(t),tRr=r(fIe," \u2014 "),kY=n(fIe,"A",{href:!0});var lAt=s(kY);aRr=r(lAt,"FlaxPegasusForConditionalGeneration"),lAt.forEach(t),nRr=r(fIe," (Pegasus model)"),fIe.forEach(t),sRr=i(ze),NC=n(ze,"LI",{});var mIe=s(NC);I8e=n(mIe,"STRONG",{});var iAt=s(I8e);lRr=r(iAt,"t5"),iAt.forEach(t),iRr=r(mIe," \u2014 "),SY=n(mIe,"A",{href:!0});var dAt=s(SY);dRr=r(dAt,"FlaxT5ForConditionalGeneration"),dAt.forEach(t),cRr=r(mIe," (T5 model)"),mIe.forEach(t),ze.forEach(t),fRr=i(Ul),T(jC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),ONe=i(f),Vc=n(f,"H2",{class:!0});var UDe=s(Vc);DC=n(UDe,"A",{id:!0,class:!0,href:!0});var cAt=s(DC);q8e=n(cAt,"SPAN",{});var fAt=s(q8e);T(q9.$$.fragment,fAt),fAt.forEach(t),cAt.forEach(t),mRr=i(UDe),N8e=n(UDe,"SPAN",{});var mAt=s(N8e);gRr=r(mAt,"FlaxAutoModelForSequenceClassification"),mAt.forEach(t),UDe.forEach(t),VNe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(N9.$$.fragment,Jl),hRr=i(Jl),Xc=n(Jl,"P",{});var bee=s(Xc);pRr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),RY=n(bee,"A",{href:!0});var gAt=s(RY);_Rr=r(gAt,"from_pretrained()"),gAt.forEach(t),uRr=r(bee," class method or the "),PY=n(bee,"A",{href:!0});var hAt=s(PY);bRr=r(hAt,"from_config()"),hAt.forEach(t),vRr=r(bee,` class
method.`),bee.forEach(t),FRr=i(Jl),j9=n(Jl,"P",{});var JDe=s(j9);TRr=r(JDe,"This class cannot be instantiated directly using "),j8e=n(JDe,"CODE",{});var pAt=s(j8e);MRr=r(pAt,"__init__()"),pAt.forEach(t),ERr=r(JDe," (throws an error)."),JDe.forEach(t),CRr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var J0=s(Wt);T(D9.$$.fragment,J0),wRr=i(J0),D8e=n(J0,"P",{});var _At=s(D8e);ARr=r(_At,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_At.forEach(t),yRr=i(J0),zc=n(J0,"P",{});var vee=s(zc);LRr=r(vee,`Note:
Loading a model from its configuration file does `),G8e=n(vee,"STRONG",{});var uAt=s(G8e);xRr=r(uAt,"not"),uAt.forEach(t),$Rr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(vee,"A",{href:!0});var bAt=s(BY);kRr=r(bAt,"from_pretrained()"),bAt.forEach(t),SRr=r(vee," to load the model weights."),vee.forEach(t),RRr=i(J0),T(GC.$$.fragment,J0),J0.forEach(t),PRr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(G9.$$.fragment,Yl),BRr=i(Yl),O8e=n(Yl,"P",{});var vAt=s(O8e);IRr=r(vAt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vAt.forEach(t),qRr=i(Yl),vn=n(Yl,"P",{});var Y0=s(vn);NRr=r(Y0,"The model class to instantiate is selected based on the "),V8e=n(Y0,"CODE",{});var FAt=s(V8e);jRr=r(FAt,"model_type"),FAt.forEach(t),DRr=r(Y0,` property of the config object (either
passed as an argument or loaded from `),X8e=n(Y0,"CODE",{});var TAt=s(X8e);GRr=r(TAt,"pretrained_model_name_or_path"),TAt.forEach(t),ORr=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z8e=n(Y0,"CODE",{});var MAt=s(z8e);VRr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),XRr=r(Y0,":"),Y0.forEach(t),zRr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);OC=n(qe,"LI",{});var gIe=s(OC);W8e=n(gIe,"STRONG",{});var EAt=s(W8e);WRr=r(EAt,"albert"),EAt.forEach(t),QRr=r(gIe," \u2014 "),IY=n(gIe,"A",{href:!0});var CAt=s(IY);HRr=r(CAt,"FlaxAlbertForSequenceClassification"),CAt.forEach(t),URr=r(gIe," (ALBERT model)"),gIe.forEach(t),JRr=i(qe),VC=n(qe,"LI",{});var hIe=s(VC);Q8e=n(hIe,"STRONG",{});var wAt=s(Q8e);YRr=r(wAt,"bart"),wAt.forEach(t),KRr=r(hIe," \u2014 "),qY=n(hIe,"A",{href:!0});var AAt=s(qY);ZRr=r(AAt,"FlaxBartForSequenceClassification"),AAt.forEach(t),ePr=r(hIe," (BART model)"),hIe.forEach(t),oPr=i(qe),XC=n(qe,"LI",{});var pIe=s(XC);H8e=n(pIe,"STRONG",{});var yAt=s(H8e);rPr=r(yAt,"bert"),yAt.forEach(t),tPr=r(pIe," \u2014 "),NY=n(pIe,"A",{href:!0});var LAt=s(NY);aPr=r(LAt,"FlaxBertForSequenceClassification"),LAt.forEach(t),nPr=r(pIe," (BERT model)"),pIe.forEach(t),sPr=i(qe),zC=n(qe,"LI",{});var _Ie=s(zC);U8e=n(_Ie,"STRONG",{});var xAt=s(U8e);lPr=r(xAt,"big_bird"),xAt.forEach(t),iPr=r(_Ie," \u2014 "),jY=n(_Ie,"A",{href:!0});var $At=s(jY);dPr=r($At,"FlaxBigBirdForSequenceClassification"),$At.forEach(t),cPr=r(_Ie," (BigBird model)"),_Ie.forEach(t),fPr=i(qe),WC=n(qe,"LI",{});var uIe=s(WC);J8e=n(uIe,"STRONG",{});var kAt=s(J8e);mPr=r(kAt,"distilbert"),kAt.forEach(t),gPr=r(uIe," \u2014 "),DY=n(uIe,"A",{href:!0});var SAt=s(DY);hPr=r(SAt,"FlaxDistilBertForSequenceClassification"),SAt.forEach(t),pPr=r(uIe," (DistilBERT model)"),uIe.forEach(t),_Pr=i(qe),QC=n(qe,"LI",{});var bIe=s(QC);Y8e=n(bIe,"STRONG",{});var RAt=s(Y8e);uPr=r(RAt,"electra"),RAt.forEach(t),bPr=r(bIe," \u2014 "),GY=n(bIe,"A",{href:!0});var PAt=s(GY);vPr=r(PAt,"FlaxElectraForSequenceClassification"),PAt.forEach(t),FPr=r(bIe," (ELECTRA model)"),bIe.forEach(t),TPr=i(qe),HC=n(qe,"LI",{});var vIe=s(HC);K8e=n(vIe,"STRONG",{});var BAt=s(K8e);MPr=r(BAt,"mbart"),BAt.forEach(t),EPr=r(vIe," \u2014 "),OY=n(vIe,"A",{href:!0});var IAt=s(OY);CPr=r(IAt,"FlaxMBartForSequenceClassification"),IAt.forEach(t),wPr=r(vIe," (mBART model)"),vIe.forEach(t),APr=i(qe),UC=n(qe,"LI",{});var FIe=s(UC);Z8e=n(FIe,"STRONG",{});var qAt=s(Z8e);yPr=r(qAt,"roberta"),qAt.forEach(t),LPr=r(FIe," \u2014 "),VY=n(FIe,"A",{href:!0});var NAt=s(VY);xPr=r(NAt,"FlaxRobertaForSequenceClassification"),NAt.forEach(t),$Pr=r(FIe," (RoBERTa model)"),FIe.forEach(t),kPr=i(qe),JC=n(qe,"LI",{});var TIe=s(JC);eMe=n(TIe,"STRONG",{});var jAt=s(eMe);SPr=r(jAt,"roformer"),jAt.forEach(t),RPr=r(TIe," \u2014 "),XY=n(TIe,"A",{href:!0});var DAt=s(XY);PPr=r(DAt,"FlaxRoFormerForSequenceClassification"),DAt.forEach(t),BPr=r(TIe," (RoFormer model)"),TIe.forEach(t),IPr=i(qe),YC=n(qe,"LI",{});var MIe=s(YC);oMe=n(MIe,"STRONG",{});var GAt=s(oMe);qPr=r(GAt,"xlm-roberta"),GAt.forEach(t),NPr=r(MIe," \u2014 "),zY=n(MIe,"A",{href:!0});var OAt=s(zY);jPr=r(OAt,"FlaxXLMRobertaForSequenceClassification"),OAt.forEach(t),DPr=r(MIe," (XLM-RoBERTa model)"),MIe.forEach(t),qe.forEach(t),GPr=i(Yl),T(KC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),XNe=i(f),Wc=n(f,"H2",{class:!0});var YDe=s(Wc);ZC=n(YDe,"A",{id:!0,class:!0,href:!0});var VAt=s(ZC);rMe=n(VAt,"SPAN",{});var XAt=s(rMe);T(O9.$$.fragment,XAt),XAt.forEach(t),VAt.forEach(t),OPr=i(YDe),tMe=n(YDe,"SPAN",{});var zAt=s(tMe);VPr=r(zAt,"FlaxAutoModelForQuestionAnswering"),zAt.forEach(t),YDe.forEach(t),zNe=i(f),ur=n(f,"DIV",{class:!0});var Kl=s(ur);T(V9.$$.fragment,Kl),XPr=i(Kl),Qc=n(Kl,"P",{});var Fee=s(Qc);zPr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),WY=n(Fee,"A",{href:!0});var WAt=s(WY);WPr=r(WAt,"from_pretrained()"),WAt.forEach(t),QPr=r(Fee," class method or the "),QY=n(Fee,"A",{href:!0});var QAt=s(QY);HPr=r(QAt,"from_config()"),QAt.forEach(t),UPr=r(Fee,` class
method.`),Fee.forEach(t),JPr=i(Kl),X9=n(Kl,"P",{});var KDe=s(X9);YPr=r(KDe,"This class cannot be instantiated directly using "),aMe=n(KDe,"CODE",{});var HAt=s(aMe);KPr=r(HAt,"__init__()"),HAt.forEach(t),ZPr=r(KDe," (throws an error)."),KDe.forEach(t),eBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var K0=s(Qt);T(z9.$$.fragment,K0),oBr=i(K0),nMe=n(K0,"P",{});var UAt=s(nMe);rBr=r(UAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UAt.forEach(t),tBr=i(K0),Hc=n(K0,"P",{});var Tee=s(Hc);aBr=r(Tee,`Note:
Loading a model from its configuration file does `),sMe=n(Tee,"STRONG",{});var JAt=s(sMe);nBr=r(JAt,"not"),JAt.forEach(t),sBr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Tee,"A",{href:!0});var YAt=s(HY);lBr=r(YAt,"from_pretrained()"),YAt.forEach(t),iBr=r(Tee," to load the model weights."),Tee.forEach(t),dBr=i(K0),T(e5.$$.fragment,K0),K0.forEach(t),cBr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(W9.$$.fragment,Zl),fBr=i(Zl),lMe=n(Zl,"P",{});var KAt=s(lMe);mBr=r(KAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KAt.forEach(t),gBr=i(Zl),Fn=n(Zl,"P",{});var Z0=s(Fn);hBr=r(Z0,"The model class to instantiate is selected based on the "),iMe=n(Z0,"CODE",{});var ZAt=s(iMe);pBr=r(ZAt,"model_type"),ZAt.forEach(t),_Br=r(Z0,` property of the config object (either
passed as an argument or loaded from `),dMe=n(Z0,"CODE",{});var e6t=s(dMe);uBr=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),bBr=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(Z0,"CODE",{});var o6t=s(cMe);vBr=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),FBr=r(Z0,":"),Z0.forEach(t),TBr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);o5=n(Ne,"LI",{});var EIe=s(o5);fMe=n(EIe,"STRONG",{});var r6t=s(fMe);MBr=r(r6t,"albert"),r6t.forEach(t),EBr=r(EIe," \u2014 "),UY=n(EIe,"A",{href:!0});var t6t=s(UY);CBr=r(t6t,"FlaxAlbertForQuestionAnswering"),t6t.forEach(t),wBr=r(EIe," (ALBERT model)"),EIe.forEach(t),ABr=i(Ne),r5=n(Ne,"LI",{});var CIe=s(r5);mMe=n(CIe,"STRONG",{});var a6t=s(mMe);yBr=r(a6t,"bart"),a6t.forEach(t),LBr=r(CIe," \u2014 "),JY=n(CIe,"A",{href:!0});var n6t=s(JY);xBr=r(n6t,"FlaxBartForQuestionAnswering"),n6t.forEach(t),$Br=r(CIe," (BART model)"),CIe.forEach(t),kBr=i(Ne),t5=n(Ne,"LI",{});var wIe=s(t5);gMe=n(wIe,"STRONG",{});var s6t=s(gMe);SBr=r(s6t,"bert"),s6t.forEach(t),RBr=r(wIe," \u2014 "),YY=n(wIe,"A",{href:!0});var l6t=s(YY);PBr=r(l6t,"FlaxBertForQuestionAnswering"),l6t.forEach(t),BBr=r(wIe," (BERT model)"),wIe.forEach(t),IBr=i(Ne),a5=n(Ne,"LI",{});var AIe=s(a5);hMe=n(AIe,"STRONG",{});var i6t=s(hMe);qBr=r(i6t,"big_bird"),i6t.forEach(t),NBr=r(AIe," \u2014 "),KY=n(AIe,"A",{href:!0});var d6t=s(KY);jBr=r(d6t,"FlaxBigBirdForQuestionAnswering"),d6t.forEach(t),DBr=r(AIe," (BigBird model)"),AIe.forEach(t),GBr=i(Ne),n5=n(Ne,"LI",{});var yIe=s(n5);pMe=n(yIe,"STRONG",{});var c6t=s(pMe);OBr=r(c6t,"distilbert"),c6t.forEach(t),VBr=r(yIe," \u2014 "),ZY=n(yIe,"A",{href:!0});var f6t=s(ZY);XBr=r(f6t,"FlaxDistilBertForQuestionAnswering"),f6t.forEach(t),zBr=r(yIe," (DistilBERT model)"),yIe.forEach(t),WBr=i(Ne),s5=n(Ne,"LI",{});var LIe=s(s5);_Me=n(LIe,"STRONG",{});var m6t=s(_Me);QBr=r(m6t,"electra"),m6t.forEach(t),HBr=r(LIe," \u2014 "),eK=n(LIe,"A",{href:!0});var g6t=s(eK);UBr=r(g6t,"FlaxElectraForQuestionAnswering"),g6t.forEach(t),JBr=r(LIe," (ELECTRA model)"),LIe.forEach(t),YBr=i(Ne),l5=n(Ne,"LI",{});var xIe=s(l5);uMe=n(xIe,"STRONG",{});var h6t=s(uMe);KBr=r(h6t,"mbart"),h6t.forEach(t),ZBr=r(xIe," \u2014 "),oK=n(xIe,"A",{href:!0});var p6t=s(oK);eIr=r(p6t,"FlaxMBartForQuestionAnswering"),p6t.forEach(t),oIr=r(xIe," (mBART model)"),xIe.forEach(t),rIr=i(Ne),i5=n(Ne,"LI",{});var $Ie=s(i5);bMe=n($Ie,"STRONG",{});var _6t=s(bMe);tIr=r(_6t,"roberta"),_6t.forEach(t),aIr=r($Ie," \u2014 "),rK=n($Ie,"A",{href:!0});var u6t=s(rK);nIr=r(u6t,"FlaxRobertaForQuestionAnswering"),u6t.forEach(t),sIr=r($Ie," (RoBERTa model)"),$Ie.forEach(t),lIr=i(Ne),d5=n(Ne,"LI",{});var kIe=s(d5);vMe=n(kIe,"STRONG",{});var b6t=s(vMe);iIr=r(b6t,"roformer"),b6t.forEach(t),dIr=r(kIe," \u2014 "),tK=n(kIe,"A",{href:!0});var v6t=s(tK);cIr=r(v6t,"FlaxRoFormerForQuestionAnswering"),v6t.forEach(t),fIr=r(kIe," (RoFormer model)"),kIe.forEach(t),mIr=i(Ne),c5=n(Ne,"LI",{});var SIe=s(c5);FMe=n(SIe,"STRONG",{});var F6t=s(FMe);gIr=r(F6t,"xlm-roberta"),F6t.forEach(t),hIr=r(SIe," \u2014 "),aK=n(SIe,"A",{href:!0});var T6t=s(aK);pIr=r(T6t,"FlaxXLMRobertaForQuestionAnswering"),T6t.forEach(t),_Ir=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),Ne.forEach(t),uIr=i(Zl),T(f5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),WNe=i(f),Uc=n(f,"H2",{class:!0});var ZDe=s(Uc);m5=n(ZDe,"A",{id:!0,class:!0,href:!0});var M6t=s(m5);TMe=n(M6t,"SPAN",{});var E6t=s(TMe);T(Q9.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),bIr=i(ZDe),MMe=n(ZDe,"SPAN",{});var C6t=s(MMe);vIr=r(C6t,"FlaxAutoModelForTokenClassification"),C6t.forEach(t),ZDe.forEach(t),QNe=i(f),br=n(f,"DIV",{class:!0});var ei=s(br);T(H9.$$.fragment,ei),FIr=i(ei),Jc=n(ei,"P",{});var Mee=s(Jc);TIr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nK=n(Mee,"A",{href:!0});var w6t=s(nK);MIr=r(w6t,"from_pretrained()"),w6t.forEach(t),EIr=r(Mee," class method or the "),sK=n(Mee,"A",{href:!0});var A6t=s(sK);CIr=r(A6t,"from_config()"),A6t.forEach(t),wIr=r(Mee,` class
method.`),Mee.forEach(t),AIr=i(ei),U9=n(ei,"P",{});var eGe=s(U9);yIr=r(eGe,"This class cannot be instantiated directly using "),EMe=n(eGe,"CODE",{});var y6t=s(EMe);LIr=r(y6t,"__init__()"),y6t.forEach(t),xIr=r(eGe," (throws an error)."),eGe.forEach(t),$Ir=i(ei),Ht=n(ei,"DIV",{class:!0});var eA=s(Ht);T(J9.$$.fragment,eA),kIr=i(eA),CMe=n(eA,"P",{});var L6t=s(CMe);SIr=r(L6t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),L6t.forEach(t),RIr=i(eA),Yc=n(eA,"P",{});var Eee=s(Yc);PIr=r(Eee,`Note:
Loading a model from its configuration file does `),wMe=n(Eee,"STRONG",{});var x6t=s(wMe);BIr=r(x6t,"not"),x6t.forEach(t),IIr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(Eee,"A",{href:!0});var $6t=s(lK);qIr=r($6t,"from_pretrained()"),$6t.forEach(t),NIr=r(Eee," to load the model weights."),Eee.forEach(t),jIr=i(eA),T(g5.$$.fragment,eA),eA.forEach(t),DIr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Y9.$$.fragment,oi),GIr=i(oi),AMe=n(oi,"P",{});var k6t=s(AMe);OIr=r(k6t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k6t.forEach(t),VIr=i(oi),Tn=n(oi,"P",{});var oA=s(Tn);XIr=r(oA,"The model class to instantiate is selected based on the "),yMe=n(oA,"CODE",{});var S6t=s(yMe);zIr=r(S6t,"model_type"),S6t.forEach(t),WIr=r(oA,` property of the config object (either
passed as an argument or loaded from `),LMe=n(oA,"CODE",{});var R6t=s(LMe);QIr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),HIr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xMe=n(oA,"CODE",{});var P6t=s(xMe);UIr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),JIr=r(oA,":"),oA.forEach(t),YIr=i(oi),De=n(oi,"UL",{});var Fo=s(De);h5=n(Fo,"LI",{});var RIe=s(h5);$Me=n(RIe,"STRONG",{});var B6t=s($Me);KIr=r(B6t,"albert"),B6t.forEach(t),ZIr=r(RIe," \u2014 "),iK=n(RIe,"A",{href:!0});var I6t=s(iK);eqr=r(I6t,"FlaxAlbertForTokenClassification"),I6t.forEach(t),oqr=r(RIe," (ALBERT model)"),RIe.forEach(t),rqr=i(Fo),p5=n(Fo,"LI",{});var PIe=s(p5);kMe=n(PIe,"STRONG",{});var q6t=s(kMe);tqr=r(q6t,"bert"),q6t.forEach(t),aqr=r(PIe," \u2014 "),dK=n(PIe,"A",{href:!0});var N6t=s(dK);nqr=r(N6t,"FlaxBertForTokenClassification"),N6t.forEach(t),sqr=r(PIe," (BERT model)"),PIe.forEach(t),lqr=i(Fo),_5=n(Fo,"LI",{});var BIe=s(_5);SMe=n(BIe,"STRONG",{});var j6t=s(SMe);iqr=r(j6t,"big_bird"),j6t.forEach(t),dqr=r(BIe," \u2014 "),cK=n(BIe,"A",{href:!0});var D6t=s(cK);cqr=r(D6t,"FlaxBigBirdForTokenClassification"),D6t.forEach(t),fqr=r(BIe," (BigBird model)"),BIe.forEach(t),mqr=i(Fo),u5=n(Fo,"LI",{});var IIe=s(u5);RMe=n(IIe,"STRONG",{});var G6t=s(RMe);gqr=r(G6t,"distilbert"),G6t.forEach(t),hqr=r(IIe," \u2014 "),fK=n(IIe,"A",{href:!0});var O6t=s(fK);pqr=r(O6t,"FlaxDistilBertForTokenClassification"),O6t.forEach(t),_qr=r(IIe," (DistilBERT model)"),IIe.forEach(t),uqr=i(Fo),b5=n(Fo,"LI",{});var qIe=s(b5);PMe=n(qIe,"STRONG",{});var V6t=s(PMe);bqr=r(V6t,"electra"),V6t.forEach(t),vqr=r(qIe," \u2014 "),mK=n(qIe,"A",{href:!0});var X6t=s(mK);Fqr=r(X6t,"FlaxElectraForTokenClassification"),X6t.forEach(t),Tqr=r(qIe," (ELECTRA model)"),qIe.forEach(t),Mqr=i(Fo),v5=n(Fo,"LI",{});var NIe=s(v5);BMe=n(NIe,"STRONG",{});var z6t=s(BMe);Eqr=r(z6t,"roberta"),z6t.forEach(t),Cqr=r(NIe," \u2014 "),gK=n(NIe,"A",{href:!0});var W6t=s(gK);wqr=r(W6t,"FlaxRobertaForTokenClassification"),W6t.forEach(t),Aqr=r(NIe," (RoBERTa model)"),NIe.forEach(t),yqr=i(Fo),F5=n(Fo,"LI",{});var jIe=s(F5);IMe=n(jIe,"STRONG",{});var Q6t=s(IMe);Lqr=r(Q6t,"roformer"),Q6t.forEach(t),xqr=r(jIe," \u2014 "),hK=n(jIe,"A",{href:!0});var H6t=s(hK);$qr=r(H6t,"FlaxRoFormerForTokenClassification"),H6t.forEach(t),kqr=r(jIe," (RoFormer model)"),jIe.forEach(t),Sqr=i(Fo),T5=n(Fo,"LI",{});var DIe=s(T5);qMe=n(DIe,"STRONG",{});var U6t=s(qMe);Rqr=r(U6t,"xlm-roberta"),U6t.forEach(t),Pqr=r(DIe," \u2014 "),pK=n(DIe,"A",{href:!0});var J6t=s(pK);Bqr=r(J6t,"FlaxXLMRobertaForTokenClassification"),J6t.forEach(t),Iqr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),Fo.forEach(t),qqr=i(oi),T(M5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),HNe=i(f),Kc=n(f,"H2",{class:!0});var oGe=s(Kc);E5=n(oGe,"A",{id:!0,class:!0,href:!0});var Y6t=s(E5);NMe=n(Y6t,"SPAN",{});var K6t=s(NMe);T(K9.$$.fragment,K6t),K6t.forEach(t),Y6t.forEach(t),Nqr=i(oGe),jMe=n(oGe,"SPAN",{});var Z6t=s(jMe);jqr=r(Z6t,"FlaxAutoModelForMultipleChoice"),Z6t.forEach(t),oGe.forEach(t),UNe=i(f),vr=n(f,"DIV",{class:!0});var ri=s(vr);T(Z9.$$.fragment,ri),Dqr=i(ri),Zc=n(ri,"P",{});var Cee=s(Zc);Gqr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_K=n(Cee,"A",{href:!0});var eyt=s(_K);Oqr=r(eyt,"from_pretrained()"),eyt.forEach(t),Vqr=r(Cee," class method or the "),uK=n(Cee,"A",{href:!0});var oyt=s(uK);Xqr=r(oyt,"from_config()"),oyt.forEach(t),zqr=r(Cee,` class
method.`),Cee.forEach(t),Wqr=i(ri),ex=n(ri,"P",{});var rGe=s(ex);Qqr=r(rGe,"This class cannot be instantiated directly using "),DMe=n(rGe,"CODE",{});var ryt=s(DMe);Hqr=r(ryt,"__init__()"),ryt.forEach(t),Uqr=r(rGe," (throws an error)."),rGe.forEach(t),Jqr=i(ri),Ut=n(ri,"DIV",{class:!0});var rA=s(Ut);T(ox.$$.fragment,rA),Yqr=i(rA),GMe=n(rA,"P",{});var tyt=s(GMe);Kqr=r(tyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tyt.forEach(t),Zqr=i(rA),ef=n(rA,"P",{});var wee=s(ef);eNr=r(wee,`Note:
Loading a model from its configuration file does `),OMe=n(wee,"STRONG",{});var ayt=s(OMe);oNr=r(ayt,"not"),ayt.forEach(t),rNr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),bK=n(wee,"A",{href:!0});var nyt=s(bK);tNr=r(nyt,"from_pretrained()"),nyt.forEach(t),aNr=r(wee," to load the model weights."),wee.forEach(t),nNr=i(rA),T(C5.$$.fragment,rA),rA.forEach(t),sNr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(rx.$$.fragment,ti),lNr=i(ti),VMe=n(ti,"P",{});var syt=s(VMe);iNr=r(syt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),syt.forEach(t),dNr=i(ti),Mn=n(ti,"P",{});var tA=s(Mn);cNr=r(tA,"The model class to instantiate is selected based on the "),XMe=n(tA,"CODE",{});var lyt=s(XMe);fNr=r(lyt,"model_type"),lyt.forEach(t),mNr=r(tA,` property of the config object (either
passed as an argument or loaded from `),zMe=n(tA,"CODE",{});var iyt=s(zMe);gNr=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),hNr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WMe=n(tA,"CODE",{});var dyt=s(WMe);pNr=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),_Nr=r(tA,":"),tA.forEach(t),uNr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);w5=n(To,"LI",{});var GIe=s(w5);QMe=n(GIe,"STRONG",{});var cyt=s(QMe);bNr=r(cyt,"albert"),cyt.forEach(t),vNr=r(GIe," \u2014 "),vK=n(GIe,"A",{href:!0});var fyt=s(vK);FNr=r(fyt,"FlaxAlbertForMultipleChoice"),fyt.forEach(t),TNr=r(GIe," (ALBERT model)"),GIe.forEach(t),MNr=i(To),A5=n(To,"LI",{});var OIe=s(A5);HMe=n(OIe,"STRONG",{});var myt=s(HMe);ENr=r(myt,"bert"),myt.forEach(t),CNr=r(OIe," \u2014 "),FK=n(OIe,"A",{href:!0});var gyt=s(FK);wNr=r(gyt,"FlaxBertForMultipleChoice"),gyt.forEach(t),ANr=r(OIe," (BERT model)"),OIe.forEach(t),yNr=i(To),y5=n(To,"LI",{});var VIe=s(y5);UMe=n(VIe,"STRONG",{});var hyt=s(UMe);LNr=r(hyt,"big_bird"),hyt.forEach(t),xNr=r(VIe," \u2014 "),TK=n(VIe,"A",{href:!0});var pyt=s(TK);$Nr=r(pyt,"FlaxBigBirdForMultipleChoice"),pyt.forEach(t),kNr=r(VIe," (BigBird model)"),VIe.forEach(t),SNr=i(To),L5=n(To,"LI",{});var XIe=s(L5);JMe=n(XIe,"STRONG",{});var _yt=s(JMe);RNr=r(_yt,"distilbert"),_yt.forEach(t),PNr=r(XIe," \u2014 "),MK=n(XIe,"A",{href:!0});var uyt=s(MK);BNr=r(uyt,"FlaxDistilBertForMultipleChoice"),uyt.forEach(t),INr=r(XIe," (DistilBERT model)"),XIe.forEach(t),qNr=i(To),x5=n(To,"LI",{});var zIe=s(x5);YMe=n(zIe,"STRONG",{});var byt=s(YMe);NNr=r(byt,"electra"),byt.forEach(t),jNr=r(zIe," \u2014 "),EK=n(zIe,"A",{href:!0});var vyt=s(EK);DNr=r(vyt,"FlaxElectraForMultipleChoice"),vyt.forEach(t),GNr=r(zIe," (ELECTRA model)"),zIe.forEach(t),ONr=i(To),$5=n(To,"LI",{});var WIe=s($5);KMe=n(WIe,"STRONG",{});var Fyt=s(KMe);VNr=r(Fyt,"roberta"),Fyt.forEach(t),XNr=r(WIe," \u2014 "),CK=n(WIe,"A",{href:!0});var Tyt=s(CK);zNr=r(Tyt,"FlaxRobertaForMultipleChoice"),Tyt.forEach(t),WNr=r(WIe," (RoBERTa model)"),WIe.forEach(t),QNr=i(To),k5=n(To,"LI",{});var QIe=s(k5);ZMe=n(QIe,"STRONG",{});var Myt=s(ZMe);HNr=r(Myt,"roformer"),Myt.forEach(t),UNr=r(QIe," \u2014 "),wK=n(QIe,"A",{href:!0});var Eyt=s(wK);JNr=r(Eyt,"FlaxRoFormerForMultipleChoice"),Eyt.forEach(t),YNr=r(QIe," (RoFormer model)"),QIe.forEach(t),KNr=i(To),S5=n(To,"LI",{});var HIe=s(S5);e4e=n(HIe,"STRONG",{});var Cyt=s(e4e);ZNr=r(Cyt,"xlm-roberta"),Cyt.forEach(t),ejr=r(HIe," \u2014 "),AK=n(HIe,"A",{href:!0});var wyt=s(AK);ojr=r(wyt,"FlaxXLMRobertaForMultipleChoice"),wyt.forEach(t),rjr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),To.forEach(t),tjr=i(ti),T(R5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),JNe=i(f),of=n(f,"H2",{class:!0});var tGe=s(of);P5=n(tGe,"A",{id:!0,class:!0,href:!0});var Ayt=s(P5);o4e=n(Ayt,"SPAN",{});var yyt=s(o4e);T(tx.$$.fragment,yyt),yyt.forEach(t),Ayt.forEach(t),ajr=i(tGe),r4e=n(tGe,"SPAN",{});var Lyt=s(r4e);njr=r(Lyt,"FlaxAutoModelForNextSentencePrediction"),Lyt.forEach(t),tGe.forEach(t),YNe=i(f),Fr=n(f,"DIV",{class:!0});var ai=s(Fr);T(ax.$$.fragment,ai),sjr=i(ai),rf=n(ai,"P",{});var Aee=s(rf);ljr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),yK=n(Aee,"A",{href:!0});var xyt=s(yK);ijr=r(xyt,"from_pretrained()"),xyt.forEach(t),djr=r(Aee," class method or the "),LK=n(Aee,"A",{href:!0});var $yt=s(LK);cjr=r($yt,"from_config()"),$yt.forEach(t),fjr=r(Aee,` class
method.`),Aee.forEach(t),mjr=i(ai),nx=n(ai,"P",{});var aGe=s(nx);gjr=r(aGe,"This class cannot be instantiated directly using "),t4e=n(aGe,"CODE",{});var kyt=s(t4e);hjr=r(kyt,"__init__()"),kyt.forEach(t),pjr=r(aGe," (throws an error)."),aGe.forEach(t),_jr=i(ai),Jt=n(ai,"DIV",{class:!0});var aA=s(Jt);T(sx.$$.fragment,aA),ujr=i(aA),a4e=n(aA,"P",{});var Syt=s(a4e);bjr=r(Syt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Syt.forEach(t),vjr=i(aA),tf=n(aA,"P",{});var yee=s(tf);Fjr=r(yee,`Note:
Loading a model from its configuration file does `),n4e=n(yee,"STRONG",{});var Ryt=s(n4e);Tjr=r(Ryt,"not"),Ryt.forEach(t),Mjr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(yee,"A",{href:!0});var Pyt=s(xK);Ejr=r(Pyt,"from_pretrained()"),Pyt.forEach(t),Cjr=r(yee," to load the model weights."),yee.forEach(t),wjr=i(aA),T(B5.$$.fragment,aA),aA.forEach(t),Ajr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(lx.$$.fragment,ni),yjr=i(ni),s4e=n(ni,"P",{});var Byt=s(s4e);Ljr=r(Byt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Byt.forEach(t),xjr=i(ni),En=n(ni,"P",{});var nA=s(En);$jr=r(nA,"The model class to instantiate is selected based on the "),l4e=n(nA,"CODE",{});var Iyt=s(l4e);kjr=r(Iyt,"model_type"),Iyt.forEach(t),Sjr=r(nA,` property of the config object (either
passed as an argument or loaded from `),i4e=n(nA,"CODE",{});var qyt=s(i4e);Rjr=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),Pjr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d4e=n(nA,"CODE",{});var Nyt=s(d4e);Bjr=r(Nyt,"pretrained_model_name_or_path"),Nyt.forEach(t),Ijr=r(nA,":"),nA.forEach(t),qjr=i(ni),c4e=n(ni,"UL",{});var jyt=s(c4e);I5=n(jyt,"LI",{});var UIe=s(I5);f4e=n(UIe,"STRONG",{});var Dyt=s(f4e);Njr=r(Dyt,"bert"),Dyt.forEach(t),jjr=r(UIe," \u2014 "),$K=n(UIe,"A",{href:!0});var Gyt=s($K);Djr=r(Gyt,"FlaxBertForNextSentencePrediction"),Gyt.forEach(t),Gjr=r(UIe," (BERT model)"),UIe.forEach(t),jyt.forEach(t),Ojr=i(ni),T(q5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),KNe=i(f),af=n(f,"H2",{class:!0});var nGe=s(af);N5=n(nGe,"A",{id:!0,class:!0,href:!0});var Oyt=s(N5);m4e=n(Oyt,"SPAN",{});var Vyt=s(m4e);T(ix.$$.fragment,Vyt),Vyt.forEach(t),Oyt.forEach(t),Vjr=i(nGe),g4e=n(nGe,"SPAN",{});var Xyt=s(g4e);Xjr=r(Xyt,"FlaxAutoModelForImageClassification"),Xyt.forEach(t),nGe.forEach(t),ZNe=i(f),Tr=n(f,"DIV",{class:!0});var si=s(Tr);T(dx.$$.fragment,si),zjr=i(si),nf=n(si,"P",{});var Lee=s(nf);Wjr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kK=n(Lee,"A",{href:!0});var zyt=s(kK);Qjr=r(zyt,"from_pretrained()"),zyt.forEach(t),Hjr=r(Lee," class method or the "),SK=n(Lee,"A",{href:!0});var Wyt=s(SK);Ujr=r(Wyt,"from_config()"),Wyt.forEach(t),Jjr=r(Lee,` class
method.`),Lee.forEach(t),Yjr=i(si),cx=n(si,"P",{});var sGe=s(cx);Kjr=r(sGe,"This class cannot be instantiated directly using "),h4e=n(sGe,"CODE",{});var Qyt=s(h4e);Zjr=r(Qyt,"__init__()"),Qyt.forEach(t),eDr=r(sGe," (throws an error)."),sGe.forEach(t),oDr=i(si),Yt=n(si,"DIV",{class:!0});var sA=s(Yt);T(fx.$$.fragment,sA),rDr=i(sA),p4e=n(sA,"P",{});var Hyt=s(p4e);tDr=r(Hyt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hyt.forEach(t),aDr=i(sA),sf=n(sA,"P",{});var xee=s(sf);nDr=r(xee,`Note:
Loading a model from its configuration file does `),_4e=n(xee,"STRONG",{});var Uyt=s(_4e);sDr=r(Uyt,"not"),Uyt.forEach(t),lDr=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(xee,"A",{href:!0});var Jyt=s(RK);iDr=r(Jyt,"from_pretrained()"),Jyt.forEach(t),dDr=r(xee," to load the model weights."),xee.forEach(t),cDr=i(sA),T(j5.$$.fragment,sA),sA.forEach(t),fDr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(mx.$$.fragment,li),mDr=i(li),u4e=n(li,"P",{});var Yyt=s(u4e);gDr=r(Yyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Yyt.forEach(t),hDr=i(li),Cn=n(li,"P",{});var lA=s(Cn);pDr=r(lA,"The model class to instantiate is selected based on the "),b4e=n(lA,"CODE",{});var Kyt=s(b4e);_Dr=r(Kyt,"model_type"),Kyt.forEach(t),uDr=r(lA,` property of the config object (either
passed as an argument or loaded from `),v4e=n(lA,"CODE",{});var Zyt=s(v4e);bDr=r(Zyt,"pretrained_model_name_or_path"),Zyt.forEach(t),vDr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(lA,"CODE",{});var eLt=s(F4e);FDr=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),TDr=r(lA,":"),lA.forEach(t),MDr=i(li),gx=n(li,"UL",{});var lGe=s(gx);D5=n(lGe,"LI",{});var JIe=s(D5);T4e=n(JIe,"STRONG",{});var oLt=s(T4e);EDr=r(oLt,"beit"),oLt.forEach(t),CDr=r(JIe," \u2014 "),PK=n(JIe,"A",{href:!0});var rLt=s(PK);wDr=r(rLt,"FlaxBeitForImageClassification"),rLt.forEach(t),ADr=r(JIe," (BEiT model)"),JIe.forEach(t),yDr=i(lGe),G5=n(lGe,"LI",{});var YIe=s(G5);M4e=n(YIe,"STRONG",{});var tLt=s(M4e);LDr=r(tLt,"vit"),tLt.forEach(t),xDr=r(YIe," \u2014 "),BK=n(YIe,"A",{href:!0});var aLt=s(BK);$Dr=r(aLt,"FlaxViTForImageClassification"),aLt.forEach(t),kDr=r(YIe," (ViT model)"),YIe.forEach(t),lGe.forEach(t),SDr=i(li),T(O5.$$.fragment,li),li.forEach(t),si.forEach(t),eje=i(f),lf=n(f,"H2",{class:!0});var iGe=s(lf);V5=n(iGe,"A",{id:!0,class:!0,href:!0});var nLt=s(V5);E4e=n(nLt,"SPAN",{});var sLt=s(E4e);T(hx.$$.fragment,sLt),sLt.forEach(t),nLt.forEach(t),RDr=i(iGe),C4e=n(iGe,"SPAN",{});var lLt=s(C4e);PDr=r(lLt,"FlaxAutoModelForVision2Seq"),lLt.forEach(t),iGe.forEach(t),oje=i(f),Mr=n(f,"DIV",{class:!0});var ii=s(Mr);T(px.$$.fragment,ii),BDr=i(ii),df=n(ii,"P",{});var $ee=s(df);IDr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IK=n($ee,"A",{href:!0});var iLt=s(IK);qDr=r(iLt,"from_pretrained()"),iLt.forEach(t),NDr=r($ee," class method or the "),qK=n($ee,"A",{href:!0});var dLt=s(qK);jDr=r(dLt,"from_config()"),dLt.forEach(t),DDr=r($ee,` class
method.`),$ee.forEach(t),GDr=i(ii),_x=n(ii,"P",{});var dGe=s(_x);ODr=r(dGe,"This class cannot be instantiated directly using "),w4e=n(dGe,"CODE",{});var cLt=s(w4e);VDr=r(cLt,"__init__()"),cLt.forEach(t),XDr=r(dGe," (throws an error)."),dGe.forEach(t),zDr=i(ii),Kt=n(ii,"DIV",{class:!0});var iA=s(Kt);T(ux.$$.fragment,iA),WDr=i(iA),A4e=n(iA,"P",{});var fLt=s(A4e);QDr=r(fLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fLt.forEach(t),HDr=i(iA),cf=n(iA,"P",{});var kee=s(cf);UDr=r(kee,`Note:
Loading a model from its configuration file does `),y4e=n(kee,"STRONG",{});var mLt=s(y4e);JDr=r(mLt,"not"),mLt.forEach(t),YDr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(kee,"A",{href:!0});var gLt=s(NK);KDr=r(gLt,"from_pretrained()"),gLt.forEach(t),ZDr=r(kee," to load the model weights."),kee.forEach(t),eGr=i(iA),T(X5.$$.fragment,iA),iA.forEach(t),oGr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(bx.$$.fragment,di),rGr=i(di),L4e=n(di,"P",{});var hLt=s(L4e);tGr=r(hLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hLt.forEach(t),aGr=i(di),wn=n(di,"P",{});var dA=s(wn);nGr=r(dA,"The model class to instantiate is selected based on the "),x4e=n(dA,"CODE",{});var pLt=s(x4e);sGr=r(pLt,"model_type"),pLt.forEach(t),lGr=r(dA,` property of the config object (either
passed as an argument or loaded from `),$4e=n(dA,"CODE",{});var _Lt=s($4e);iGr=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),dGr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k4e=n(dA,"CODE",{});var uLt=s(k4e);cGr=r(uLt,"pretrained_model_name_or_path"),uLt.forEach(t),fGr=r(dA,":"),dA.forEach(t),mGr=i(di),S4e=n(di,"UL",{});var bLt=s(S4e);z5=n(bLt,"LI",{});var KIe=s(z5);R4e=n(KIe,"STRONG",{});var vLt=s(R4e);gGr=r(vLt,"vision-encoder-decoder"),vLt.forEach(t),hGr=r(KIe," \u2014 "),jK=n(KIe,"A",{href:!0});var FLt=s(jK);pGr=r(FLt,"FlaxVisionEncoderDecoderModel"),FLt.forEach(t),_Gr=r(KIe," (Vision Encoder decoder model)"),KIe.forEach(t),bLt.forEach(t),uGr=i(di),T(W5.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Cxt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertModel"),c(bf,"id","extending-the-auto-classes"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#extending-the-auto-classes"),c(ui,"class","relative group"),c(Ff,"id","transformers.AutoConfig"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(q$,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(N$,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertConfig"),c(j$,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartConfig"),c(D$,"href","/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitConfig"),c(G$,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertConfig"),c(O$,"href","/docs/transformers/pr_17378/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(V$,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdConfig"),c(X$,"href","/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(z$,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(W$,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Q$,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertConfig"),c(H$,"href","/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineConfig"),c(U$,"href","/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPConfig"),c(J$,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertConfig"),c(Y$,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextConfig"),c(K$,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLConfig"),c(Z$,"href","/docs/transformers/pr_17378/en/model_doc/cvt#transformers.CvtConfig"),c(ek,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(ok,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(rk,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(tk,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaConfig"),c(ak,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(nk,"href","/docs/transformers/pr_17378/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(sk,"href","/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTConfig"),c(lk,"href","/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrConfig"),c(ik,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertConfig"),c(dk,"href","/docs/transformers/pr_17378/en/model_doc/dpr#transformers.DPRConfig"),c(ck,"href","/docs/transformers/pr_17378/en/model_doc/dpt#transformers.DPTConfig"),c(fk,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraConfig"),c(mk,"href","/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(gk,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertConfig"),c(hk,"href","/docs/transformers/pr_17378/en/model_doc/flava#transformers.FlavaConfig"),c(pk,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetConfig"),c(_k,"href","/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTConfig"),c(uk,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelConfig"),c(bk,"href","/docs/transformers/pr_17378/en/model_doc/glpn#transformers.GLPNConfig"),c(vk,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Config"),c(Fk,"href","/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Tk,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJConfig"),c(Mk,"href","/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertConfig"),c(Ek,"href","/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertConfig"),c(Ck,"href","/docs/transformers/pr_17378/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(wk,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Ak,"href","/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(yk,"href","/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDConfig"),c(Lk,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerConfig"),c(xk,"href","/docs/transformers/pr_17378/en/model_doc/luke#transformers.LukeConfig"),c($k,"href","/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertConfig"),c(kk,"href","/docs/transformers/pr_17378/en/model_doc/m2m_100#transformers.M2M100Config"),c(Sk,"href","/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianConfig"),c(Rk,"href","/docs/transformers/pr_17378/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Pk,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartConfig"),c(Bk,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Ik,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(qk,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetConfig"),c(Nk,"href","/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Config"),c(jk,"href","/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Dk,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Gk,"href","/docs/transformers/pr_17378/en/model_doc/opt#transformers.OPTConfig"),c(Ok,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusConfig"),c(Vk,"href","/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Xk,"href","/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartConfig"),c(zk,"href","/docs/transformers/pr_17378/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Wk,"href","/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Qk,"href","/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Hk,"href","/docs/transformers/pr_17378/en/model_doc/rag#transformers.RagConfig"),c(Uk,"href","/docs/transformers/pr_17378/en/model_doc/realm#transformers.RealmConfig"),c(Jk,"href","/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerConfig"),c(Yk,"href","/docs/transformers/pr_17378/en/model_doc/regnet#transformers.RegNetConfig"),c(Kk,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertConfig"),c(Zk,"href","/docs/transformers/pr_17378/en/model_doc/resnet#transformers.ResNetConfig"),c(eS,"href","/docs/transformers/pr_17378/en/model_doc/retribert#transformers.RetriBertConfig"),c(oS,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaConfig"),c(rS,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerConfig"),c(tS,"href","/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerConfig"),c(aS,"href","/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWConfig"),c(nS,"href","/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDConfig"),c(sS,"href","/docs/transformers/pr_17378/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(lS,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(iS,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(dS,"href","/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterConfig"),c(cS,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(fS,"href","/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinConfig"),c(mS,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Config"),c(gS,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasConfig"),c(hS,"href","/docs/transformers/pr_17378/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(pS,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(_S,"href","/docs/transformers/pr_17378/en/model_doc/trocr#transformers.TrOCRConfig"),c(uS,"href","/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(bS,"href","/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(vS,"href","/docs/transformers/pr_17378/en/model_doc/van#transformers.VanConfig"),c(FS,"href","/docs/transformers/pr_17378/en/model_doc/vilt#transformers.ViltConfig"),c(TS,"href","/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(MS,"href","/docs/transformers/pr_17378/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(ES,"href","/docs/transformers/pr_17378/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(CS,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTConfig"),c(wS,"href","/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(AS,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(yS,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(LS,"href","/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMConfig"),c(xS,"href","/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMConfig"),c($S,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMConfig"),c(kS,"href","/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(SS,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(RS,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(PS,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetConfig"),c(BS,"href","/docs/transformers/pr_17378/en/model_doc/yolos#transformers.YolosConfig"),c(IS,"href","/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mg,"id","transformers.AutoTokenizer"),c(Mg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(qS,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(NS,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertTokenizer"),c(jS,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(DS,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartTokenizer"),c(GS,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartTokenizerFast"),c(OS,"href","/docs/transformers/pr_17378/en/model_doc/barthez#transformers.BarthezTokenizer"),c(VS,"href","/docs/transformers/pr_17378/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(XS,"href","/docs/transformers/pr_17378/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(zS,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertTokenizer"),c(WS,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertTokenizerFast"),c(QS,"href","/docs/transformers/pr_17378/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(HS,"href","/docs/transformers/pr_17378/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(US,"href","/docs/transformers/pr_17378/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(JS,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(YS,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(KS,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZS,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(eR,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(oR,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(rR,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(tR,"href","/docs/transformers/pr_17378/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(aR,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertTokenizer"),c(nR,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(sR,"href","/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineTokenizer"),c(lR,"href","/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPTokenizer"),c(iR,"href","/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(dR,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(cR,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(fR,"href","/docs/transformers/pr_17378/en/model_doc/cpm#transformers.CpmTokenizer"),c(mR,"href","/docs/transformers/pr_17378/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(gR,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(hR,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pR,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_R,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaTokenizer"),c(uR,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(bR,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(vR,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(FR,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(TR,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(MR,"href","/docs/transformers/pr_17378/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(ER,"href","/docs/transformers/pr_17378/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(CR,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraTokenizer"),c(wR,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(AR,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(yR,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetTokenizer"),c(LR,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(xR,"href","/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTTokenizer"),c($R,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelTokenizer"),c(kR,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(SR,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(RR,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(PR,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(BR,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(IR,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(qR,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(NR,"href","/docs/transformers/pr_17378/en/model_doc/herbert#transformers.HerbertTokenizer"),c(jR,"href","/docs/transformers/pr_17378/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GR,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OR,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VR,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(XR,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(zR,"href","/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(WR,"href","/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(QR,"href","/docs/transformers/pr_17378/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(HR,"href","/docs/transformers/pr_17378/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(UR,"href","/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDTokenizer"),c(JR,"href","/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDTokenizerFast"),c(YR,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerTokenizer"),c(KR,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17378/en/model_doc/luke#transformers.LukeTokenizer"),c(eP,"href","/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(oP,"href","/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(rP,"href","/docs/transformers/pr_17378/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(tP,"href","/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianTokenizer"),c(aP,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartTokenizer"),c(nP,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(sP,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(lP,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(iP,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertTokenizer"),c(dP,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertTokenizerFast"),c(cP,"href","/docs/transformers/pr_17378/en/model_doc/mluke#transformers.MLukeTokenizer"),c(fP,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(mP,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(gP,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(hP,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(pP,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Tokenizer"),c(_P,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5TokenizerFast"),c(uP,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertTokenizer"),c(bP,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(vP,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(FP,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(TP,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MP,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(EP,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CP,"href","/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(wP,"href","/docs/transformers/pr_17378/en/model_doc/phobert#transformers.PhobertTokenizer"),c(AP,"href","/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartTokenizer"),c(yP,"href","/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(LP,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertTokenizer"),c(xP,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertTokenizerFast"),c($P,"href","/docs/transformers/pr_17378/en/model_doc/rag#transformers.RagTokenizer"),c(kP,"href","/docs/transformers/pr_17378/en/model_doc/realm#transformers.RealmTokenizer"),c(SP,"href","/docs/transformers/pr_17378/en/model_doc/realm#transformers.RealmTokenizerFast"),c(RP,"href","/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerTokenizer"),c(PP,"href","/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(BP,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertTokenizer"),c(IP,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(qP,"href","/docs/transformers/pr_17378/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(NP,"href","/docs/transformers/pr_17378/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(jP,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DP,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GP,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(OP,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(VP,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(XP,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(zP,"href","/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterTokenizer"),c(WP,"href","/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(QP,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(HP,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(UP,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Tokenizer"),c(JP,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5TokenizerFast"),c(YP,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasTokenizer"),c(KP,"href","/docs/transformers/pr_17378/en/model_doc/tapex#transformers.TapexTokenizer"),c(ZP,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(eB,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertTokenizer"),c(oB,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertTokenizerFast"),c(rB,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(tB,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aB,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(nB,"href","/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMTokenizer"),c(sB,"href","/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(lB,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMTokenizer"),c(iB,"href","/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(dB,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(cB,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(fB,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mB,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gB,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(hB,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(pB,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertTokenizer"),c(_B,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rh,"id","transformers.AutoFeatureExtractor"),c(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(uB,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(bB,"href","/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(FB,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TB,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EB,"href","/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17378/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17378/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17378/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($B,"href","/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(kB,"href","/docs/transformers/pr_17378/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(RB,"href","/docs/transformers/pr_17378/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(PB,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BB,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(IB,"href","/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(qB,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(jB,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VB,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XB,"href","/docs/transformers/pr_17378/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoProcessor"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(zB,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(WB,"href","/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPProcessor"),c(QB,"href","/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(HB,"href","/docs/transformers/pr_17378/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(UB,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(KB,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(ZB,"href","/docs/transformers/pr_17378/en/model_doc/trocr#transformers.TrOCRProcessor"),c(eI,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(oI,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rI,"href","/docs/transformers/pr_17378/en/model_doc/vilt#transformers.ViltProcessor"),c(tI,"href","/docs/transformers/pr_17378/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(aI,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(nI,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sI,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zh,"id","transformers.AutoModel"),c(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(lI,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iI,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dI,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cI,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertModel"),c(fI,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartModel"),c(mI,"href","/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitModel"),c(gI,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertModel"),c(hI,"href","/docs/transformers/pr_17378/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(pI,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdModel"),c(_I,"href","/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(uI,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(bI,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(vI,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertModel"),c(FI,"href","/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineModel"),c(TI,"href","/docs/transformers/pr_17378/en/model_doc/clip#transformers.CLIPModel"),c(MI,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertModel"),c(EI,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextModel"),c(CI,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLModel"),c(wI,"href","/docs/transformers/pr_17378/en/model_doc/cvt#transformers.CvtModel"),c(AI,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(yI,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(LI,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(xI,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaModel"),c($I,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(kI,"href","/docs/transformers/pr_17378/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(SI,"href","/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTModel"),c(RI,"href","/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrModel"),c(PI,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertModel"),c(BI,"href","/docs/transformers/pr_17378/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(II,"href","/docs/transformers/pr_17378/en/model_doc/dpt#transformers.DPTModel"),c(qI,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraModel"),c(NI,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertModel"),c(jI,"href","/docs/transformers/pr_17378/en/model_doc/flava#transformers.FlavaModel"),c(DI,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetModel"),c(GI,"href","/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTModel"),c(OI,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelModel"),c(VI,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelBaseModel"),c(XI,"href","/docs/transformers/pr_17378/en/model_doc/glpn#transformers.GLPNModel"),c(zI,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2Model"),c(WI,"href","/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(QI,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJModel"),c(HI,"href","/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertModel"),c(UI,"href","/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertModel"),c(JI,"href","/docs/transformers/pr_17378/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(YI,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(KI,"href","/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(ZI,"href","/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDModel"),c(eq,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerModel"),c(oq,"href","/docs/transformers/pr_17378/en/model_doc/luke#transformers.LukeModel"),c(rq,"href","/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertModel"),c(tq,"href","/docs/transformers/pr_17378/en/model_doc/m2m_100#transformers.M2M100Model"),c(aq,"href","/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianModel"),c(nq,"href","/docs/transformers/pr_17378/en/model_doc/maskformer#transformers.MaskFormerModel"),c(sq,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartModel"),c(lq,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(iq,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertModel"),c(dq,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetModel"),c(cq,"href","/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5Model"),c(fq,"href","/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerModel"),c(mq,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(gq,"href","/docs/transformers/pr_17378/en/model_doc/opt#transformers.OPTModel"),c(hq,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusModel"),c(pq,"href","/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverModel"),c(_q,"href","/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartModel"),c(uq,"href","/docs/transformers/pr_17378/en/model_doc/poolformer#transformers.PoolFormerModel"),c(bq,"href","/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(vq,"href","/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Fq,"href","/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerModel"),c(Tq,"href","/docs/transformers/pr_17378/en/model_doc/regnet#transformers.RegNetModel"),c(Mq,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertModel"),c(Eq,"href","/docs/transformers/pr_17378/en/model_doc/resnet#transformers.ResNetModel"),c(Cq,"href","/docs/transformers/pr_17378/en/model_doc/retribert#transformers.RetriBertModel"),c(wq,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaModel"),c(Aq,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerModel"),c(yq,"href","/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerModel"),c(Lq,"href","/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWModel"),c(xq,"href","/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDModel"),c($q,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(kq,"href","/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterModel"),c(Sq,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Rq,"href","/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinModel"),c(Pq,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5Model"),c(Bq,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasModel"),c(Iq,"href","/docs/transformers/pr_17378/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(qq,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Nq,"href","/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechModel"),c(jq,"href","/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Dq,"href","/docs/transformers/pr_17378/en/model_doc/van#transformers.VanModel"),c(Gq,"href","/docs/transformers/pr_17378/en/model_doc/vilt#transformers.ViltModel"),c(Oq,"href","/docs/transformers/pr_17378/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Vq,"href","/docs/transformers/pr_17378/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Xq,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTModel"),c(zq,"href","/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Wq,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Qq,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Hq,"href","/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMModel"),c(Uq,"href","/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMModel"),c(Jq,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMModel"),c(Yq,"href","/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Kq,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Zq,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(eN,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetModel"),c(oN,"href","/docs/transformers/pr_17378/en/model_doc/yolos#transformers.YolosModel"),c(rN,"href","/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForPreTraining"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(tN,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aN,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nN,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sN,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForPreTraining"),c(lN,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(iN,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForPreTraining"),c(dN,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(cN,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(fN,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mN,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(gN,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hN,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pN,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_N,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForPreTraining"),c(uN,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bN,"href","/docs/transformers/pr_17378/en/model_doc/flava#transformers.FlavaForPreTraining"),c(vN,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForPreTraining"),c(FN,"href","/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(TN,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(MN,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(EN,"href","/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CN,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wN,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AN,"href","/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(yN,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(LN,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(xN,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($N,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(kN,"href","/docs/transformers/pr_17378/en/model_doc/retribert#transformers.RetriBertModel"),c(SN,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(RN,"href","/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(PN,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(IN,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qN,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(NN,"href","/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(jN,"href","/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(DN,"href","/docs/transformers/pr_17378/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(GN,"href","/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(ON,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(VN,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(XN,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zN,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(WN,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QN,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Du,"id","transformers.AutoModelForCausalLM"),c(Du,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Du,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(HN,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UN,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JN,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YN,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForCausalLM"),c(KN,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertLMHeadModel"),c(ZN,"href","/docs/transformers/pr_17378/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(ej,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(oj,"href","/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(rj,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(tj,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(aj,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nj,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sj,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(lj,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForCausalLM"),c(ij,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dj,"href","/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(cj,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(fj,"href","/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianForCausalLM"),c(mj,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForCausalLM"),c(gj,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(hj,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pj,"href","/docs/transformers/pr_17378/en/model_doc/opt#transformers.OPTForCausalLM"),c(_j,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(uj,"href","/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(bj,"href","/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(vj,"href","/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Fj,"href","/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Tj,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Mj,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Ej,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Cj,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(wj,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Aj,"href","/docs/transformers/pr_17378/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yj,"href","/docs/transformers/pr_17378/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Lj,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xj,"href","/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c($j,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(kj,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Sj,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A1,"id","transformers.AutoModelForMaskedLM"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Rj,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pj,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bj,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ij,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(qj,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForMaskedLM"),c(jj,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Gj,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(zj,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Wj,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Qj,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Hj,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Uj,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Jj,"href","/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Yj,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(oD,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(rD,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tD,"href","/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(aD,"href","/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(nD,"href","/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(sD,"href","/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(lD,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(iD,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(dD,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(cD,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mD,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(gD,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(hD,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(pD,"href","/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f7,"id","transformers.AutoModelForSeq2SeqLM"),c(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f7,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(_D,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uD,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bD,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vD,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(FD,"href","/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(TD,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(MD,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(CD,"href","/docs/transformers/pr_17378/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(AD,"href","/docs/transformers/pr_17378/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17378/en/model_doc/marian#transformers.MarianMTModel"),c(LD,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xD,"href","/docs/transformers/pr_17378/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c($D,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(kD,"href","/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(SD,"href","/docs/transformers/pr_17378/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(RD,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(PD,"href","/docs/transformers/pr_17378/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.AutoModelForSequenceClassification"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(BD,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ID,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ND,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(oG,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(rG,"href","/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(tG,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(aG,"href","/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(nG,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(sG,"href","/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(lG,"href","/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDForSequenceClassification"),c(iG,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(dG,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(cG,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(fG,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17378/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yb,"id","transformers.AutoModelForMultipleChoice"),c(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yb,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c($G,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(PG,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForMultipleChoice"),c(BG,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(IG,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(qG,"href","/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(NG,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(jG,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(DG,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(GG,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(OG,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(VG,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(XG,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(zG,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(WG,"href","/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(QG,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(HG,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(UG,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(JG,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(YG,"href","/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(KG,"href","/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(ZG,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(eO,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(oO,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(rO,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(tO,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(aO,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(nO,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(sO,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(lO,"href","/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s2,"id","transformers.AutoModelForNextSentencePrediction"),c(s2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s2,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(iO,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dO,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cO,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fO,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(mO,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(gO,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(hO,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(pO,"href","/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p2,"id","transformers.AutoModelForTokenClassification"),c(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p2,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(_O,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uO,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(FO,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForTokenClassification"),c(TO,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(MO,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(EO,"href","/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineForTokenClassification"),c(CO,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(wO,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(AO,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(yO,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(LO,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(xO,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForTokenClassification"),c($O,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(kO,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(SO,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(RO,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(PO,"href","/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(BO,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(IO,"href","/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(qO,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(NO,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(jO,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(DO,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(GO,"href","/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(OO,"href","/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(VO,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(XO,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(zO,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(WO,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(QO,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(HO,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(UO,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(JO,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(YO,"href","/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K2,"id","transformers.AutoModelForQuestionAnswering"),c(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K2,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(KO,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZO,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eV,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oV,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17378/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_17378/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(gV,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(pV,"href","/docs/transformers/pr_17378/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(_V,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(uV,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(bV,"href","/docs/transformers/pr_17378/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(vV,"href","/docs/transformers/pr_17378/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(FV,"href","/docs/transformers/pr_17378/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(TV,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(MV,"href","/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(EV,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(CV,"href","/docs/transformers/pr_17378/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(wV,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(AV,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(yV,"href","/docs/transformers/pr_17378/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(LV,"href","/docs/transformers/pr_17378/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_17378/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c($V,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17378/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17378/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(IV,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(jV,"href","/docs/transformers/pr_17378/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(DV,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForImageClassification"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(XV,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitForImageClassification"),c(HV,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(UV,"href","/docs/transformers/pr_17378/en/model_doc/cvt#transformers.CvtForImageClassification"),c(JV,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(YV,"href","/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTForImageClassification"),c(KV,"href","/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(ZV,"href","/docs/transformers/pr_17378/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(eX,"href","/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(oX,"href","/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(rX,"href","/docs/transformers/pr_17378/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(tX,"href","/docs/transformers/pr_17378/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(aX,"href","/docs/transformers/pr_17378/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(nX,"href","/docs/transformers/pr_17378/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(sX,"href","/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(lX,"href","/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinForImageClassification"),c(iX,"href","/docs/transformers/pr_17378/en/model_doc/van#transformers.VanForImageClassification"),c(dX,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.AutoModelForVision2Seq"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(cX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gX,"href","/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.AutoModelForAudioClassification"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(hX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.AutoModelForAudioFrameClassification"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.AutoModelForAudioFrameClassification"),c(md,"class","relative group"),c(AX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c($X,"href","/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(kX,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(SX,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(RX,"href","/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B3,"id","transformers.AutoModelForCTC"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.AutoModelForCTC"),c(pd,"class","relative group"),c(PX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(NX,"href","/docs/transformers/pr_17378/en/model_doc/hubert#transformers.HubertForCTC"),c(jX,"href","/docs/transformers/pr_17378/en/model_doc/sew#transformers.SEWForCTC"),c(DX,"href","/docs/transformers/pr_17378/en/model_doc/sew-d#transformers.SEWDForCTC"),c(GX,"href","/docs/transformers/pr_17378/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(OX,"href","/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(VX,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(XX,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(zX,"href","/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.AutoModelForSpeechSeq2Seq"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(WX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_17378/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(JX,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForAudioXVector"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(YX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(oz,"href","/docs/transformers/pr_17378/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(rz,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(tz,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(az,"href","/docs/transformers/pr_17378/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForMaskedImageModeling"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(nz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iz,"href","/docs/transformers/pr_17378/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(dz,"href","/docs/transformers/pr_17378/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(cz,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_F,"id","transformers.AutoModelForObjectDetection"),c(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_F,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(fz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hz,"href","/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrForObjectDetection"),c(pz,"href","/docs/transformers/pr_17378/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForImageSegmentation"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(_z,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/pr_17378/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForSemanticSegmentation"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(Fz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_17378/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Cz,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(wz,"href","/docs/transformers/pr_17378/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(Az,"href","/docs/transformers/pr_17378/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForInstanceSegmentation"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(yz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_17378/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.TFAutoModel"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(kz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertModel"),c(Bz,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.TFBartModel"),c(Iz,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertModel"),c(qz,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Nz,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(jz,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertModel"),c(Dz,"href","/docs/transformers/pr_17378/en/model_doc/clip#transformers.TFCLIPModel"),c(Gz,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertModel"),c(Oz,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.TFConvNextModel"),c(Vz,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Xz,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(zz,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaModel"),c(Wz,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Qz,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Hz,"href","/docs/transformers/pr_17378/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Uz,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraModel"),c(Jz,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Yz,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelModel"),c(Kz,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Zz,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.TFGPT2Model"),c(eW,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.TFGPTJModel"),c(oW,"href","/docs/transformers/pr_17378/en/model_doc/hubert#transformers.TFHubertModel"),c(rW,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(tW,"href","/docs/transformers/pr_17378/en/model_doc/led#transformers.TFLEDModel"),c(aW,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerModel"),c(nW,"href","/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.TFLxmertModel"),c(sW,"href","/docs/transformers/pr_17378/en/model_doc/marian#transformers.TFMarianModel"),c(lW,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.TFMBartModel"),c(iW,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(dW,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetModel"),c(cW,"href","/docs/transformers/pr_17378/en/model_doc/mt5#transformers.TFMT5Model"),c(fW,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(mW,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.TFPegasusModel"),c(gW,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertModel"),c(hW,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaModel"),c(pW,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerModel"),c(_W,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(uW,"href","/docs/transformers/pr_17378/en/model_doc/swin#transformers.TFSwinModel"),c(bW,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.TFT5Model"),c(vW,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasModel"),c(FW,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(TW,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.TFViTModel"),c(MW,"href","/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(EW,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(CW,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMModel"),c(wW,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(AW,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.TFAutoModelForPreTraining"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(yW,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(kW,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SW,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForPreTraining"),c(RW,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(PW,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BW,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IW,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(qW,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(NW,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(jW,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(DW,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(GW,"href","/docs/transformers/pr_17378/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(OW,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(VW,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(XW,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zW,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WW,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(QW,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(HW,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UW,"href","/docs/transformers/pr_17378/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(JW,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YW,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(KW,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s8,"id","transformers.TFAutoModelForCausalLM"),c(s8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s8,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(tQ,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(aQ,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(nQ,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sQ,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(lQ,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(dQ,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(cQ,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(fQ,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(mQ,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T8,"id","transformers.TFAutoModelForImageClassification"),c(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T8,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(hQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_17378/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(bQ,"href","/docs/transformers/pr_17378/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(vQ,"href","/docs/transformers/pr_17378/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(FQ,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L8,"id","transformers.TFAutoModelForMaskedLM"),c(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L8,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(TQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(AQ,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c($Q,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y8,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y8,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(XQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WQ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QQ,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(UQ,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(YQ,"href","/docs/transformers/pr_17378/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_17378/en/model_doc/marian#transformers.TFMarianMTModel"),c(ZQ,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(eH,"href","/docs/transformers/pr_17378/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(oH,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(rH,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForSequenceClassification"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(tH,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aH,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nH,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sH,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(lH,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(iH,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(dH,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(cH,"href","/docs/transformers/pr_17378/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(fH,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(mH,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(gH,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(hH,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(pH,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(_H,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(uH,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(bH,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(vH,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(FH,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(TH,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(MH,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(EH,"href","/docs/transformers/pr_17378/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(CH,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(wH,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(AH,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(yH,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(LH,"href","/docs/transformers/pr_17378/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(xH,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c($H,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(kH,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForMultipleChoice"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(SH,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BH,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(IH,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(qH,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(NH,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(jH,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(DH,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(GH,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(OH,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(VH,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(XH,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(zH,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(WH,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(QH,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(HH,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(UH,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(JH,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(YH,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(KH,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZH,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oU,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(rU,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(tU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17378/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h4,"id","transformers.TFAutoModelForTokenClassification"),c(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h4,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(lU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(fU,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(mU,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(gU,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hU,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(pU,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(_U,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(uU,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(bU,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(vU,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(FU,"href","/docs/transformers/pr_17378/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(TU,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(MU,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(EU,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(CU,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(wU,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(AU,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(yU,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(LU,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(xU,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q4,"id","transformers.TFAutoModelForQuestionAnswering"),c(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c($U,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(PU,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(BU,"href","/docs/transformers/pr_17378/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(IU,"href","/docs/transformers/pr_17378/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(qU,"href","/docs/transformers/pr_17378/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(NU,"href","/docs/transformers/pr_17378/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(jU,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(DU,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(GU,"href","/docs/transformers/pr_17378/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(OU,"href","/docs/transformers/pr_17378/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(VU,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(XU,"href","/docs/transformers/pr_17378/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(zU,"href","/docs/transformers/pr_17378/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(WU,"href","/docs/transformers/pr_17378/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(QU,"href","/docs/transformers/pr_17378/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(HU,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(UU,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(JU,"href","/docs/transformers/pr_17378/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(YU,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(KU,"href","/docs/transformers/pr_17378/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.TFAutoModelForVision2Seq"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17378/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.FlaxAutoModel"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(lJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertModel"),c(fJ,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartModel"),c(mJ,"href","/docs/transformers/pr_17378/en/model_doc/beit#transformers.FlaxBeitModel"),c(gJ,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertModel"),c(hJ,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(pJ,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(_J,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(uJ,"href","/docs/transformers/pr_17378/en/model_doc/clip#transformers.FlaxCLIPModel"),c(bJ,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(vJ,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraModel"),c(FJ,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(TJ,"href","/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(MJ,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(EJ,"href","/docs/transformers/pr_17378/en/model_doc/marian#transformers.FlaxMarianModel"),c(CJ,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wJ,"href","/docs/transformers/pr_17378/en/model_doc/mt5#transformers.FlaxMT5Model"),c(AJ,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(yJ,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(LJ,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(xJ,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.FlaxT5Model"),c($J,"href","/docs/transformers/pr_17378/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(kJ,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.FlaxViTModel"),c(SJ,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(RJ,"href","/docs/transformers/pr_17378/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(PJ,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.FlaxAutoModelForCausalLM"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(jJ,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(DJ,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(GJ,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(OJ,"href","/docs/transformers/pr_17378/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(VJ,"href","/docs/transformers/pr_17378/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(XJ,"href","/docs/transformers/pr_17378/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(zJ,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(WJ,"href","/docs/transformers/pr_17378/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForPreTraining"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(QJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(YJ,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ZJ,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(eY,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(oY,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_17378/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(tY,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(aY,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(nY,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(sY,"href","/docs/transformers/pr_17378/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(lY,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForMaskedLM"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(iY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(mY,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gY,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(hY,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(pY,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(uY,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bY,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(vY,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(FY,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(TY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wY,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_17378/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_17378/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(LY,"href","/docs/transformers/pr_17378/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(xY,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17378/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17378/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(SY,"href","/docs/transformers/pr_17378/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(DC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(RY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(qY,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(NY,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(jY,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(WY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17378/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17378/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(rK,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(aK,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.FlaxAutoModelForTokenClassification"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(nK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(dK,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(cK,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(fK,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(mK,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(gK,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(hK,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(pK,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(_K,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vK,"href","/docs/transformers/pr_17378/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_17378/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17378/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17378/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17378/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17378/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17378/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(of,"class","relative group"),c(yK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/pr_17378/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModelForImageClassification"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModelForImageClassification"),c(af,"class","relative group"),c(kK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_17378/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(BK,"href","/docs/transformers/pr_17378/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForVision2Seq"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lf,"class","relative group"),c(IK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/pr_17378/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_17378/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,ci),b(f,hf,u),b(f,rt,u),e(rt,fi),e(rt,mi),e(mi,cA),e(rt,pf),b(f,je,u),b(f,We,u),e(We,gi),e(We,yn),e(yn,fA),e(We,Ln),e(We,xn),e(xn,mA),e(We,hi),e(We,$n),e($n,gA),e(We,pi),b(f,_f,u),M(Ca,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,k$),e(Ae,_i),e(_i,S$),e(Ae,R$),b(f,Eo,u),b(f,wa,u),e(wa,P$),e(wa,uf),e(uf,B$),e(wa,cGe),b(f,ZIe,u),b(f,ui,u),e(ui,bf),e(bf,See),M(hA,See,null),e(ui,fGe),e(ui,Ree),e(Ree,mGe),b(f,eqe,u),b(f,kn,u),e(kn,gGe),e(kn,Pee),e(Pee,hGe),e(kn,pGe),e(kn,Bee),e(Bee,_Ge),e(kn,uGe),b(f,oqe,u),M(pA,f,u),b(f,rqe,u),b(f,I$,u),e(I$,bGe),b(f,tqe,u),M(vf,f,u),b(f,aqe,u),b(f,bi,u),e(bi,Ff),e(Ff,Iee),M(_A,Iee,null),e(bi,vGe),e(bi,qee),e(qee,FGe),b(f,nqe,u),b(f,Co,u),M(uA,Co,null),e(Co,TGe),e(Co,bA),e(bA,MGe),e(bA,q$),e(q$,EGe),e(bA,CGe),e(Co,wGe),e(Co,vA),e(vA,AGe),e(vA,Nee),e(Nee,yGe),e(vA,LGe),e(Co,xGe),e(Co,Er),M(FA,Er,null),e(Er,$Ge),e(Er,jee),e(jee,kGe),e(Er,SGe),e(Er,vi),e(vi,RGe),e(vi,Dee),e(Dee,PGe),e(vi,BGe),e(vi,Gee),e(Gee,IGe),e(vi,qGe),e(Er,NGe),e(Er,A),e(A,Tf),e(Tf,Oee),e(Oee,jGe),e(Tf,DGe),e(Tf,N$),e(N$,GGe),e(Tf,OGe),e(A,VGe),e(A,Mf),e(Mf,Vee),e(Vee,XGe),e(Mf,zGe),e(Mf,j$),e(j$,WGe),e(Mf,QGe),e(A,HGe),e(A,Ef),e(Ef,Xee),e(Xee,UGe),e(Ef,JGe),e(Ef,D$),e(D$,YGe),e(Ef,KGe),e(A,ZGe),e(A,Cf),e(Cf,zee),e(zee,eOe),e(Cf,oOe),e(Cf,G$),e(G$,rOe),e(Cf,tOe),e(A,aOe),e(A,wf),e(wf,Wee),e(Wee,nOe),e(wf,sOe),e(wf,O$),e(O$,lOe),e(wf,iOe),e(A,dOe),e(A,Af),e(Af,Qee),e(Qee,cOe),e(Af,fOe),e(Af,V$),e(V$,mOe),e(Af,gOe),e(A,hOe),e(A,yf),e(yf,Hee),e(Hee,pOe),e(yf,_Oe),e(yf,X$),e(X$,uOe),e(yf,bOe),e(A,vOe),e(A,Lf),e(Lf,Uee),e(Uee,FOe),e(Lf,TOe),e(Lf,z$),e(z$,MOe),e(Lf,EOe),e(A,COe),e(A,xf),e(xf,Jee),e(Jee,wOe),e(xf,AOe),e(xf,W$),e(W$,yOe),e(xf,LOe),e(A,xOe),e(A,$f),e($f,Yee),e(Yee,$Oe),e($f,kOe),e($f,Q$),e(Q$,SOe),e($f,ROe),e(A,POe),e(A,kf),e(kf,Kee),e(Kee,BOe),e(kf,IOe),e(kf,H$),e(H$,qOe),e(kf,NOe),e(A,jOe),e(A,Sf),e(Sf,Zee),e(Zee,DOe),e(Sf,GOe),e(Sf,U$),e(U$,OOe),e(Sf,VOe),e(A,XOe),e(A,Rf),e(Rf,eoe),e(eoe,zOe),e(Rf,WOe),e(Rf,J$),e(J$,QOe),e(Rf,HOe),e(A,UOe),e(A,Pf),e(Pf,ooe),e(ooe,JOe),e(Pf,YOe),e(Pf,Y$),e(Y$,KOe),e(Pf,ZOe),e(A,eVe),e(A,Bf),e(Bf,roe),e(roe,oVe),e(Bf,rVe),e(Bf,K$),e(K$,tVe),e(Bf,aVe),e(A,nVe),e(A,If),e(If,toe),e(toe,sVe),e(If,lVe),e(If,Z$),e(Z$,iVe),e(If,dVe),e(A,cVe),e(A,qf),e(qf,aoe),e(aoe,fVe),e(qf,mVe),e(qf,ek),e(ek,gVe),e(qf,hVe),e(A,pVe),e(A,Nf),e(Nf,noe),e(noe,_Ve),e(Nf,uVe),e(Nf,ok),e(ok,bVe),e(Nf,vVe),e(A,FVe),e(A,jf),e(jf,soe),e(soe,TVe),e(jf,MVe),e(jf,rk),e(rk,EVe),e(jf,CVe),e(A,wVe),e(A,Df),e(Df,loe),e(loe,AVe),e(Df,yVe),e(Df,tk),e(tk,LVe),e(Df,xVe),e(A,$Ve),e(A,Gf),e(Gf,ioe),e(ioe,kVe),e(Gf,SVe),e(Gf,ak),e(ak,RVe),e(Gf,PVe),e(A,BVe),e(A,Of),e(Of,doe),e(doe,IVe),e(Of,qVe),e(Of,nk),e(nk,NVe),e(Of,jVe),e(A,DVe),e(A,Vf),e(Vf,coe),e(coe,GVe),e(Vf,OVe),e(Vf,sk),e(sk,VVe),e(Vf,XVe),e(A,zVe),e(A,Xf),e(Xf,foe),e(foe,WVe),e(Xf,QVe),e(Xf,lk),e(lk,HVe),e(Xf,UVe),e(A,JVe),e(A,zf),e(zf,moe),e(moe,YVe),e(zf,KVe),e(zf,ik),e(ik,ZVe),e(zf,eXe),e(A,oXe),e(A,Wf),e(Wf,goe),e(goe,rXe),e(Wf,tXe),e(Wf,dk),e(dk,aXe),e(Wf,nXe),e(A,sXe),e(A,Qf),e(Qf,hoe),e(hoe,lXe),e(Qf,iXe),e(Qf,ck),e(ck,dXe),e(Qf,cXe),e(A,fXe),e(A,Hf),e(Hf,poe),e(poe,mXe),e(Hf,gXe),e(Hf,fk),e(fk,hXe),e(Hf,pXe),e(A,_Xe),e(A,Uf),e(Uf,_oe),e(_oe,uXe),e(Uf,bXe),e(Uf,mk),e(mk,vXe),e(Uf,FXe),e(A,TXe),e(A,Jf),e(Jf,uoe),e(uoe,MXe),e(Jf,EXe),e(Jf,gk),e(gk,CXe),e(Jf,wXe),e(A,AXe),e(A,Yf),e(Yf,boe),e(boe,yXe),e(Yf,LXe),e(Yf,hk),e(hk,xXe),e(Yf,$Xe),e(A,kXe),e(A,Kf),e(Kf,voe),e(voe,SXe),e(Kf,RXe),e(Kf,pk),e(pk,PXe),e(Kf,BXe),e(A,IXe),e(A,Zf),e(Zf,Foe),e(Foe,qXe),e(Zf,NXe),e(Zf,_k),e(_k,jXe),e(Zf,DXe),e(A,GXe),e(A,em),e(em,Toe),e(Toe,OXe),e(em,VXe),e(em,uk),e(uk,XXe),e(em,zXe),e(A,WXe),e(A,om),e(om,Moe),e(Moe,QXe),e(om,HXe),e(om,bk),e(bk,UXe),e(om,JXe),e(A,YXe),e(A,rm),e(rm,Eoe),e(Eoe,KXe),e(rm,ZXe),e(rm,vk),e(vk,eze),e(rm,oze),e(A,rze),e(A,tm),e(tm,Coe),e(Coe,tze),e(tm,aze),e(tm,Fk),e(Fk,nze),e(tm,sze),e(A,lze),e(A,am),e(am,woe),e(woe,ize),e(am,dze),e(am,Tk),e(Tk,cze),e(am,fze),e(A,mze),e(A,nm),e(nm,Aoe),e(Aoe,gze),e(nm,hze),e(nm,Mk),e(Mk,pze),e(nm,_ze),e(A,uze),e(A,sm),e(sm,yoe),e(yoe,bze),e(sm,vze),e(sm,Ek),e(Ek,Fze),e(sm,Tze),e(A,Mze),e(A,lm),e(lm,Loe),e(Loe,Eze),e(lm,Cze),e(lm,Ck),e(Ck,wze),e(lm,Aze),e(A,yze),e(A,im),e(im,xoe),e(xoe,Lze),e(im,xze),e(im,wk),e(wk,$ze),e(im,kze),e(A,Sze),e(A,dm),e(dm,$oe),e($oe,Rze),e(dm,Pze),e(dm,Ak),e(Ak,Bze),e(dm,Ize),e(A,qze),e(A,cm),e(cm,koe),e(koe,Nze),e(cm,jze),e(cm,yk),e(yk,Dze),e(cm,Gze),e(A,Oze),e(A,fm),e(fm,Soe),e(Soe,Vze),e(fm,Xze),e(fm,Lk),e(Lk,zze),e(fm,Wze),e(A,Qze),e(A,mm),e(mm,Roe),e(Roe,Hze),e(mm,Uze),e(mm,xk),e(xk,Jze),e(mm,Yze),e(A,Kze),e(A,gm),e(gm,Poe),e(Poe,Zze),e(gm,eWe),e(gm,$k),e($k,oWe),e(gm,rWe),e(A,tWe),e(A,hm),e(hm,Boe),e(Boe,aWe),e(hm,nWe),e(hm,kk),e(kk,sWe),e(hm,lWe),e(A,iWe),e(A,pm),e(pm,Ioe),e(Ioe,dWe),e(pm,cWe),e(pm,Sk),e(Sk,fWe),e(pm,mWe),e(A,gWe),e(A,_m),e(_m,qoe),e(qoe,hWe),e(_m,pWe),e(_m,Rk),e(Rk,_We),e(_m,uWe),e(A,bWe),e(A,um),e(um,Noe),e(Noe,vWe),e(um,FWe),e(um,Pk),e(Pk,TWe),e(um,MWe),e(A,EWe),e(A,bm),e(bm,joe),e(joe,CWe),e(bm,wWe),e(bm,Bk),e(Bk,AWe),e(bm,yWe),e(A,LWe),e(A,vm),e(vm,Doe),e(Doe,xWe),e(vm,$We),e(vm,Ik),e(Ik,kWe),e(vm,SWe),e(A,RWe),e(A,Fm),e(Fm,Goe),e(Goe,PWe),e(Fm,BWe),e(Fm,qk),e(qk,IWe),e(Fm,qWe),e(A,NWe),e(A,Tm),e(Tm,Ooe),e(Ooe,jWe),e(Tm,DWe),e(Tm,Nk),e(Nk,GWe),e(Tm,OWe),e(A,VWe),e(A,Mm),e(Mm,Voe),e(Voe,XWe),e(Mm,zWe),e(Mm,jk),e(jk,WWe),e(Mm,QWe),e(A,HWe),e(A,Em),e(Em,Xoe),e(Xoe,UWe),e(Em,JWe),e(Em,Dk),e(Dk,YWe),e(Em,KWe),e(A,ZWe),e(A,Cm),e(Cm,zoe),e(zoe,eQe),e(Cm,oQe),e(Cm,Gk),e(Gk,rQe),e(Cm,tQe),e(A,aQe),e(A,wm),e(wm,Woe),e(Woe,nQe),e(wm,sQe),e(wm,Ok),e(Ok,lQe),e(wm,iQe),e(A,dQe),e(A,Am),e(Am,Qoe),e(Qoe,cQe),e(Am,fQe),e(Am,Vk),e(Vk,mQe),e(Am,gQe),e(A,hQe),e(A,ym),e(ym,Hoe),e(Hoe,pQe),e(ym,_Qe),e(ym,Xk),e(Xk,uQe),e(ym,bQe),e(A,vQe),e(A,Lm),e(Lm,Uoe),e(Uoe,FQe),e(Lm,TQe),e(Lm,zk),e(zk,MQe),e(Lm,EQe),e(A,CQe),e(A,xm),e(xm,Joe),e(Joe,wQe),e(xm,AQe),e(xm,Wk),e(Wk,yQe),e(xm,LQe),e(A,xQe),e(A,$m),e($m,Yoe),e(Yoe,$Qe),e($m,kQe),e($m,Qk),e(Qk,SQe),e($m,RQe),e(A,PQe),e(A,km),e(km,Koe),e(Koe,BQe),e(km,IQe),e(km,Hk),e(Hk,qQe),e(km,NQe),e(A,jQe),e(A,Sm),e(Sm,Zoe),e(Zoe,DQe),e(Sm,GQe),e(Sm,Uk),e(Uk,OQe),e(Sm,VQe),e(A,XQe),e(A,Rm),e(Rm,ere),e(ere,zQe),e(Rm,WQe),e(Rm,Jk),e(Jk,QQe),e(Rm,HQe),e(A,UQe),e(A,Pm),e(Pm,ore),e(ore,JQe),e(Pm,YQe),e(Pm,Yk),e(Yk,KQe),e(Pm,ZQe),e(A,eHe),e(A,Bm),e(Bm,rre),e(rre,oHe),e(Bm,rHe),e(Bm,Kk),e(Kk,tHe),e(Bm,aHe),e(A,nHe),e(A,Im),e(Im,tre),e(tre,sHe),e(Im,lHe),e(Im,Zk),e(Zk,iHe),e(Im,dHe),e(A,cHe),e(A,qm),e(qm,are),e(are,fHe),e(qm,mHe),e(qm,eS),e(eS,gHe),e(qm,hHe),e(A,pHe),e(A,Nm),e(Nm,nre),e(nre,_He),e(Nm,uHe),e(Nm,oS),e(oS,bHe),e(Nm,vHe),e(A,FHe),e(A,jm),e(jm,sre),e(sre,THe),e(jm,MHe),e(jm,rS),e(rS,EHe),e(jm,CHe),e(A,wHe),e(A,Dm),e(Dm,lre),e(lre,AHe),e(Dm,yHe),e(Dm,tS),e(tS,LHe),e(Dm,xHe),e(A,$He),e(A,Gm),e(Gm,ire),e(ire,kHe),e(Gm,SHe),e(Gm,aS),e(aS,RHe),e(Gm,PHe),e(A,BHe),e(A,Om),e(Om,dre),e(dre,IHe),e(Om,qHe),e(Om,nS),e(nS,NHe),e(Om,jHe),e(A,DHe),e(A,Vm),e(Vm,cre),e(cre,GHe),e(Vm,OHe),e(Vm,sS),e(sS,VHe),e(Vm,XHe),e(A,zHe),e(A,Xm),e(Xm,fre),e(fre,WHe),e(Xm,QHe),e(Xm,lS),e(lS,HHe),e(Xm,UHe),e(A,JHe),e(A,zm),e(zm,mre),e(mre,YHe),e(zm,KHe),e(zm,iS),e(iS,ZHe),e(zm,eUe),e(A,oUe),e(A,Wm),e(Wm,gre),e(gre,rUe),e(Wm,tUe),e(Wm,dS),e(dS,aUe),e(Wm,nUe),e(A,sUe),e(A,Qm),e(Qm,hre),e(hre,lUe),e(Qm,iUe),e(Qm,cS),e(cS,dUe),e(Qm,cUe),e(A,fUe),e(A,Hm),e(Hm,pre),e(pre,mUe),e(Hm,gUe),e(Hm,fS),e(fS,hUe),e(Hm,pUe),e(A,_Ue),e(A,Um),e(Um,_re),e(_re,uUe),e(Um,bUe),e(Um,mS),e(mS,vUe),e(Um,FUe),e(A,TUe),e(A,Jm),e(Jm,ure),e(ure,MUe),e(Jm,EUe),e(Jm,gS),e(gS,CUe),e(Jm,wUe),e(A,AUe),e(A,Ym),e(Ym,bre),e(bre,yUe),e(Ym,LUe),e(Ym,hS),e(hS,xUe),e(Ym,$Ue),e(A,kUe),e(A,Km),e(Km,vre),e(vre,SUe),e(Km,RUe),e(Km,pS),e(pS,PUe),e(Km,BUe),e(A,IUe),e(A,Zm),e(Zm,Fre),e(Fre,qUe),e(Zm,NUe),e(Zm,_S),e(_S,jUe),e(Zm,DUe),e(A,GUe),e(A,eg),e(eg,Tre),e(Tre,OUe),e(eg,VUe),e(eg,uS),e(uS,XUe),e(eg,zUe),e(A,WUe),e(A,og),e(og,Mre),e(Mre,QUe),e(og,HUe),e(og,bS),e(bS,UUe),e(og,JUe),e(A,YUe),e(A,rg),e(rg,Ere),e(Ere,KUe),e(rg,ZUe),e(rg,vS),e(vS,eJe),e(rg,oJe),e(A,rJe),e(A,tg),e(tg,Cre),e(Cre,tJe),e(tg,aJe),e(tg,FS),e(FS,nJe),e(tg,sJe),e(A,lJe),e(A,ag),e(ag,wre),e(wre,iJe),e(ag,dJe),e(ag,TS),e(TS,cJe),e(ag,fJe),e(A,mJe),e(A,ng),e(ng,Are),e(Are,gJe),e(ng,hJe),e(ng,MS),e(MS,pJe),e(ng,_Je),e(A,uJe),e(A,sg),e(sg,yre),e(yre,bJe),e(sg,vJe),e(sg,ES),e(ES,FJe),e(sg,TJe),e(A,MJe),e(A,lg),e(lg,Lre),e(Lre,EJe),e(lg,CJe),e(lg,CS),e(CS,wJe),e(lg,AJe),e(A,yJe),e(A,ig),e(ig,xre),e(xre,LJe),e(ig,xJe),e(ig,wS),e(wS,$Je),e(ig,kJe),e(A,SJe),e(A,dg),e(dg,$re),e($re,RJe),e(dg,PJe),e(dg,AS),e(AS,BJe),e(dg,IJe),e(A,qJe),e(A,cg),e(cg,kre),e(kre,NJe),e(cg,jJe),e(cg,yS),e(yS,DJe),e(cg,GJe),e(A,OJe),e(A,fg),e(fg,Sre),e(Sre,VJe),e(fg,XJe),e(fg,LS),e(LS,zJe),e(fg,WJe),e(A,QJe),e(A,mg),e(mg,Rre),e(Rre,HJe),e(mg,UJe),e(mg,xS),e(xS,JJe),e(mg,YJe),e(A,KJe),e(A,gg),e(gg,Pre),e(Pre,ZJe),e(gg,eYe),e(gg,$S),e($S,oYe),e(gg,rYe),e(A,tYe),e(A,hg),e(hg,Bre),e(Bre,aYe),e(hg,nYe),e(hg,kS),e(kS,sYe),e(hg,lYe),e(A,iYe),e(A,pg),e(pg,Ire),e(Ire,dYe),e(pg,cYe),e(pg,SS),e(SS,fYe),e(pg,mYe),e(A,gYe),e(A,_g),e(_g,qre),e(qre,hYe),e(_g,pYe),e(_g,RS),e(RS,_Ye),e(_g,uYe),e(A,bYe),e(A,ug),e(ug,Nre),e(Nre,vYe),e(ug,FYe),e(ug,PS),e(PS,TYe),e(ug,MYe),e(A,EYe),e(A,bg),e(bg,jre),e(jre,CYe),e(bg,wYe),e(bg,BS),e(BS,AYe),e(bg,yYe),e(A,LYe),e(A,vg),e(vg,Dre),e(Dre,xYe),e(vg,$Ye),e(vg,IS),e(IS,kYe),e(vg,SYe),e(Er,RYe),M(Fg,Er,null),e(Co,PYe),e(Co,Tg),M(TA,Tg,null),e(Tg,BYe),e(Tg,Gre),e(Gre,IYe),b(f,sqe,u),b(f,Fi,u),e(Fi,Mg),e(Mg,Ore),M(MA,Ore,null),e(Fi,qYe),e(Fi,Vre),e(Vre,NYe),b(f,lqe,u),b(f,wo,u),M(EA,wo,null),e(wo,jYe),e(wo,CA),e(CA,DYe),e(CA,qS),e(qS,GYe),e(CA,OYe),e(wo,VYe),e(wo,wA),e(wA,XYe),e(wA,Xre),e(Xre,zYe),e(wA,WYe),e(wo,QYe),e(wo,Cr),M(AA,Cr,null),e(Cr,HYe),e(Cr,zre),e(zre,UYe),e(Cr,JYe),e(Cr,Aa),e(Aa,YYe),e(Aa,Wre),e(Wre,KYe),e(Aa,ZYe),e(Aa,Qre),e(Qre,eKe),e(Aa,oKe),e(Aa,Hre),e(Hre,rKe),e(Aa,tKe),e(Cr,aKe),e(Cr,k),e(k,Sn),e(Sn,Ure),e(Ure,nKe),e(Sn,sKe),e(Sn,NS),e(NS,lKe),e(Sn,iKe),e(Sn,jS),e(jS,dKe),e(Sn,cKe),e(k,fKe),e(k,Rn),e(Rn,Jre),e(Jre,mKe),e(Rn,gKe),e(Rn,DS),e(DS,hKe),e(Rn,pKe),e(Rn,GS),e(GS,_Ke),e(Rn,uKe),e(k,bKe),e(k,Pn),e(Pn,Yre),e(Yre,vKe),e(Pn,FKe),e(Pn,OS),e(OS,TKe),e(Pn,MKe),e(Pn,VS),e(VS,EKe),e(Pn,CKe),e(k,wKe),e(k,Eg),e(Eg,Kre),e(Kre,AKe),e(Eg,yKe),e(Eg,XS),e(XS,LKe),e(Eg,xKe),e(k,$Ke),e(k,Bn),e(Bn,Zre),e(Zre,kKe),e(Bn,SKe),e(Bn,zS),e(zS,RKe),e(Bn,PKe),e(Bn,WS),e(WS,BKe),e(Bn,IKe),e(k,qKe),e(k,Cg),e(Cg,ete),e(ete,NKe),e(Cg,jKe),e(Cg,QS),e(QS,DKe),e(Cg,GKe),e(k,OKe),e(k,wg),e(wg,ote),e(ote,VKe),e(wg,XKe),e(wg,HS),e(HS,zKe),e(wg,WKe),e(k,QKe),e(k,Ag),e(Ag,rte),e(rte,HKe),e(Ag,UKe),e(Ag,US),e(US,JKe),e(Ag,YKe),e(k,KKe),e(k,In),e(In,tte),e(tte,ZKe),e(In,eZe),e(In,JS),e(JS,oZe),e(In,rZe),e(In,YS),e(YS,tZe),e(In,aZe),e(k,nZe),e(k,qn),e(qn,ate),e(ate,sZe),e(qn,lZe),e(qn,KS),e(KS,iZe),e(qn,dZe),e(qn,ZS),e(ZS,cZe),e(qn,fZe),e(k,mZe),e(k,Nn),e(Nn,nte),e(nte,gZe),e(Nn,hZe),e(Nn,eR),e(eR,pZe),e(Nn,_Ze),e(Nn,oR),e(oR,uZe),e(Nn,bZe),e(k,vZe),e(k,yg),e(yg,ste),e(ste,FZe),e(yg,TZe),e(yg,rR),e(rR,MZe),e(yg,EZe),e(k,CZe),e(k,Lg),e(Lg,lte),e(lte,wZe),e(Lg,AZe),e(Lg,tR),e(tR,yZe),e(Lg,LZe),e(k,xZe),e(k,jn),e(jn,ite),e(ite,$Ze),e(jn,kZe),e(jn,aR),e(aR,SZe),e(jn,RZe),e(jn,nR),e(nR,PZe),e(jn,BZe),e(k,IZe),e(k,xg),e(xg,dte),e(dte,qZe),e(xg,NZe),e(xg,sR),e(sR,jZe),e(xg,DZe),e(k,GZe),e(k,Dn),e(Dn,cte),e(cte,OZe),e(Dn,VZe),e(Dn,lR),e(lR,XZe),e(Dn,zZe),e(Dn,iR),e(iR,WZe),e(Dn,QZe),e(k,HZe),e(k,Gn),e(Gn,fte),e(fte,UZe),e(Gn,JZe),e(Gn,dR),e(dR,YZe),e(Gn,KZe),e(Gn,cR),e(cR,ZZe),e(Gn,eeo),e(k,oeo),e(k,On),e(On,mte),e(mte,reo),e(On,teo),e(On,fR),e(fR,aeo),e(On,neo),e(On,mR),e(mR,seo),e(On,leo),e(k,ieo),e(k,$g),e($g,gte),e(gte,deo),e($g,ceo),e($g,gR),e(gR,feo),e($g,meo),e(k,geo),e(k,Vn),e(Vn,hte),e(hte,heo),e(Vn,peo),e(Vn,hR),e(hR,_eo),e(Vn,ueo),e(Vn,pR),e(pR,beo),e(Vn,veo),e(k,Feo),e(k,Xn),e(Xn,pte),e(pte,Teo),e(Xn,Meo),e(Xn,_R),e(_R,Eeo),e(Xn,Ceo),e(Xn,uR),e(uR,weo),e(Xn,Aeo),e(k,yeo),e(k,zn),e(zn,_te),e(_te,Leo),e(zn,xeo),e(zn,bR),e(bR,$eo),e(zn,keo),e(zn,vR),e(vR,Seo),e(zn,Reo),e(k,Peo),e(k,Wn),e(Wn,ute),e(ute,Beo),e(Wn,Ieo),e(Wn,FR),e(FR,qeo),e(Wn,Neo),e(Wn,TR),e(TR,jeo),e(Wn,Deo),e(k,Geo),e(k,Qn),e(Qn,bte),e(bte,Oeo),e(Qn,Veo),e(Qn,MR),e(MR,Xeo),e(Qn,zeo),e(Qn,ER),e(ER,Weo),e(Qn,Qeo),e(k,Heo),e(k,Hn),e(Hn,vte),e(vte,Ueo),e(Hn,Jeo),e(Hn,CR),e(CR,Yeo),e(Hn,Keo),e(Hn,wR),e(wR,Zeo),e(Hn,eoo),e(k,ooo),e(k,kg),e(kg,Fte),e(Fte,roo),e(kg,too),e(kg,AR),e(AR,aoo),e(kg,noo),e(k,soo),e(k,Un),e(Un,Tte),e(Tte,loo),e(Un,ioo),e(Un,yR),e(yR,doo),e(Un,coo),e(Un,LR),e(LR,foo),e(Un,moo),e(k,goo),e(k,Sg),e(Sg,Mte),e(Mte,hoo),e(Sg,poo),e(Sg,xR),e(xR,_oo),e(Sg,uoo),e(k,boo),e(k,Jn),e(Jn,Ete),e(Ete,voo),e(Jn,Foo),e(Jn,$R),e($R,Too),e(Jn,Moo),e(Jn,kR),e(kR,Eoo),e(Jn,Coo),e(k,woo),e(k,Yn),e(Yn,Cte),e(Cte,Aoo),e(Yn,yoo),e(Yn,SR),e(SR,Loo),e(Yn,xoo),e(Yn,RR),e(RR,$oo),e(Yn,koo),e(k,Soo),e(k,Kn),e(Kn,wte),e(wte,Roo),e(Kn,Poo),e(Kn,PR),e(PR,Boo),e(Kn,Ioo),e(Kn,BR),e(BR,qoo),e(Kn,Noo),e(k,joo),e(k,Zn),e(Zn,Ate),e(Ate,Doo),e(Zn,Goo),e(Zn,IR),e(IR,Ooo),e(Zn,Voo),e(Zn,qR),e(qR,Xoo),e(Zn,zoo),e(k,Woo),e(k,es),e(es,yte),e(yte,Qoo),e(es,Hoo),e(es,NR),e(NR,Uoo),e(es,Joo),e(es,jR),e(jR,Yoo),e(es,Koo),e(k,Zoo),e(k,Rg),e(Rg,Lte),e(Lte,ero),e(Rg,oro),e(Rg,DR),e(DR,rro),e(Rg,tro),e(k,aro),e(k,os),e(os,xte),e(xte,nro),e(os,sro),e(os,GR),e(GR,lro),e(os,iro),e(os,OR),e(OR,dro),e(os,cro),e(k,fro),e(k,rs),e(rs,$te),e($te,mro),e(rs,gro),e(rs,VR),e(VR,hro),e(rs,pro),e(rs,XR),e(XR,_ro),e(rs,uro),e(k,bro),e(k,ts),e(ts,kte),e(kte,vro),e(ts,Fro),e(ts,zR),e(zR,Tro),e(ts,Mro),e(ts,WR),e(WR,Ero),e(ts,Cro),e(k,wro),e(k,as),e(as,Ste),e(Ste,Aro),e(as,yro),e(as,QR),e(QR,Lro),e(as,xro),e(as,HR),e(HR,$ro),e(as,kro),e(k,Sro),e(k,ns),e(ns,Rte),e(Rte,Rro),e(ns,Pro),e(ns,UR),e(UR,Bro),e(ns,Iro),e(ns,JR),e(JR,qro),e(ns,Nro),e(k,jro),e(k,ss),e(ss,Pte),e(Pte,Dro),e(ss,Gro),e(ss,YR),e(YR,Oro),e(ss,Vro),e(ss,KR),e(KR,Xro),e(ss,zro),e(k,Wro),e(k,Pg),e(Pg,Bte),e(Bte,Qro),e(Pg,Hro),e(Pg,ZR),e(ZR,Uro),e(Pg,Jro),e(k,Yro),e(k,ls),e(ls,Ite),e(Ite,Kro),e(ls,Zro),e(ls,eP),e(eP,eto),e(ls,oto),e(ls,oP),e(oP,rto),e(ls,tto),e(k,ato),e(k,Bg),e(Bg,qte),e(qte,nto),e(Bg,sto),e(Bg,rP),e(rP,lto),e(Bg,ito),e(k,dto),e(k,Ig),e(Ig,Nte),e(Nte,cto),e(Ig,fto),e(Ig,tP),e(tP,mto),e(Ig,gto),e(k,hto),e(k,is),e(is,jte),e(jte,pto),e(is,_to),e(is,aP),e(aP,uto),e(is,bto),e(is,nP),e(nP,vto),e(is,Fto),e(k,Tto),e(k,ds),e(ds,Dte),e(Dte,Mto),e(ds,Eto),e(ds,sP),e(sP,Cto),e(ds,wto),e(ds,lP),e(lP,Ato),e(ds,yto),e(k,Lto),e(k,cs),e(cs,Gte),e(Gte,xto),e(cs,$to),e(cs,iP),e(iP,kto),e(cs,Sto),e(cs,dP),e(dP,Rto),e(cs,Pto),e(k,Bto),e(k,qg),e(qg,Ote),e(Ote,Ito),e(qg,qto),e(qg,cP),e(cP,Nto),e(qg,jto),e(k,Dto),e(k,fs),e(fs,Vte),e(Vte,Gto),e(fs,Oto),e(fs,fP),e(fP,Vto),e(fs,Xto),e(fs,mP),e(mP,zto),e(fs,Wto),e(k,Qto),e(k,ms),e(ms,Xte),e(Xte,Hto),e(ms,Uto),e(ms,gP),e(gP,Jto),e(ms,Yto),e(ms,hP),e(hP,Kto),e(ms,Zto),e(k,eao),e(k,gs),e(gs,zte),e(zte,oao),e(gs,rao),e(gs,pP),e(pP,tao),e(gs,aao),e(gs,_P),e(_P,nao),e(gs,sao),e(k,lao),e(k,hs),e(hs,Wte),e(Wte,iao),e(hs,dao),e(hs,uP),e(uP,cao),e(hs,fao),e(hs,bP),e(bP,mao),e(hs,gao),e(k,hao),e(k,ps),e(ps,Qte),e(Qte,pao),e(ps,_ao),e(ps,vP),e(vP,uao),e(ps,bao),e(ps,FP),e(FP,vao),e(ps,Fao),e(k,Tao),e(k,Ng),e(Ng,Hte),e(Hte,Mao),e(Ng,Eao),e(Ng,TP),e(TP,Cao),e(Ng,wao),e(k,Aao),e(k,_s),e(_s,Ute),e(Ute,yao),e(_s,Lao),e(_s,MP),e(MP,xao),e(_s,$ao),e(_s,EP),e(EP,kao),e(_s,Sao),e(k,Rao),e(k,jg),e(jg,Jte),e(Jte,Pao),e(jg,Bao),e(jg,CP),e(CP,Iao),e(jg,qao),e(k,Nao),e(k,Dg),e(Dg,Yte),e(Yte,jao),e(Dg,Dao),e(Dg,wP),e(wP,Gao),e(Dg,Oao),e(k,Vao),e(k,Gg),e(Gg,Kte),e(Kte,Xao),e(Gg,zao),e(Gg,AP),e(AP,Wao),e(Gg,Qao),e(k,Hao),e(k,Og),e(Og,Zte),e(Zte,Uao),e(Og,Jao),e(Og,yP),e(yP,Yao),e(Og,Kao),e(k,Zao),e(k,us),e(us,eae),e(eae,eno),e(us,ono),e(us,LP),e(LP,rno),e(us,tno),e(us,xP),e(xP,ano),e(us,nno),e(k,sno),e(k,Vg),e(Vg,oae),e(oae,lno),e(Vg,ino),e(Vg,$P),e($P,dno),e(Vg,cno),e(k,fno),e(k,bs),e(bs,rae),e(rae,mno),e(bs,gno),e(bs,kP),e(kP,hno),e(bs,pno),e(bs,SP),e(SP,_no),e(bs,uno),e(k,bno),e(k,vs),e(vs,tae),e(tae,vno),e(vs,Fno),e(vs,RP),e(RP,Tno),e(vs,Mno),e(vs,PP),e(PP,Eno),e(vs,Cno),e(k,wno),e(k,Fs),e(Fs,aae),e(aae,Ano),e(Fs,yno),e(Fs,BP),e(BP,Lno),e(Fs,xno),e(Fs,IP),e(IP,$no),e(Fs,kno),e(k,Sno),e(k,Ts),e(Ts,nae),e(nae,Rno),e(Ts,Pno),e(Ts,qP),e(qP,Bno),e(Ts,Ino),e(Ts,NP),e(NP,qno),e(Ts,Nno),e(k,jno),e(k,Ms),e(Ms,sae),e(sae,Dno),e(Ms,Gno),e(Ms,jP),e(jP,Ono),e(Ms,Vno),e(Ms,DP),e(DP,Xno),e(Ms,zno),e(k,Wno),e(k,Es),e(Es,lae),e(lae,Qno),e(Es,Hno),e(Es,GP),e(GP,Uno),e(Es,Jno),e(Es,OP),e(OP,Yno),e(Es,Kno),e(k,Zno),e(k,Xg),e(Xg,iae),e(iae,eso),e(Xg,oso),e(Xg,VP),e(VP,rso),e(Xg,tso),e(k,aso),e(k,zg),e(zg,dae),e(dae,nso),e(zg,sso),e(zg,XP),e(XP,lso),e(zg,iso),e(k,dso),e(k,Cs),e(Cs,cae),e(cae,cso),e(Cs,fso),e(Cs,zP),e(zP,mso),e(Cs,gso),e(Cs,WP),e(WP,hso),e(Cs,pso),e(k,_so),e(k,ws),e(ws,fae),e(fae,uso),e(ws,bso),e(ws,QP),e(QP,vso),e(ws,Fso),e(ws,HP),e(HP,Tso),e(ws,Mso),e(k,Eso),e(k,As),e(As,mae),e(mae,Cso),e(As,wso),e(As,UP),e(UP,Aso),e(As,yso),e(As,JP),e(JP,Lso),e(As,xso),e(k,$so),e(k,Wg),e(Wg,gae),e(gae,kso),e(Wg,Sso),e(Wg,YP),e(YP,Rso),e(Wg,Pso),e(k,Bso),e(k,Qg),e(Qg,hae),e(hae,Iso),e(Qg,qso),e(Qg,KP),e(KP,Nso),e(Qg,jso),e(k,Dso),e(k,Hg),e(Hg,pae),e(pae,Gso),e(Hg,Oso),e(Hg,ZP),e(ZP,Vso),e(Hg,Xso),e(k,zso),e(k,ys),e(ys,_ae),e(_ae,Wso),e(ys,Qso),e(ys,eB),e(eB,Hso),e(ys,Uso),e(ys,oB),e(oB,Jso),e(ys,Yso),e(k,Kso),e(k,Ug),e(Ug,uae),e(uae,Zso),e(Ug,elo),e(Ug,rB),e(rB,olo),e(Ug,rlo),e(k,tlo),e(k,Jg),e(Jg,bae),e(bae,alo),e(Jg,nlo),e(Jg,tB),e(tB,slo),e(Jg,llo),e(k,ilo),e(k,Yg),e(Yg,vae),e(vae,dlo),e(Yg,clo),e(Yg,aB),e(aB,flo),e(Yg,mlo),e(k,glo),e(k,Ls),e(Ls,Fae),e(Fae,hlo),e(Ls,plo),e(Ls,nB),e(nB,_lo),e(Ls,ulo),e(Ls,sB),e(sB,blo),e(Ls,vlo),e(k,Flo),e(k,Kg),e(Kg,Tae),e(Tae,Tlo),e(Kg,Mlo),e(Kg,lB),e(lB,Elo),e(Kg,Clo),e(k,wlo),e(k,Zg),e(Zg,Mae),e(Mae,Alo),e(Zg,ylo),e(Zg,iB),e(iB,Llo),e(Zg,xlo),e(k,$lo),e(k,xs),e(xs,Eae),e(Eae,klo),e(xs,Slo),e(xs,dB),e(dB,Rlo),e(xs,Plo),e(xs,cB),e(cB,Blo),e(xs,Ilo),e(k,qlo),e(k,$s),e($s,Cae),e(Cae,Nlo),e($s,jlo),e($s,fB),e(fB,Dlo),e($s,Glo),e($s,mB),e(mB,Olo),e($s,Vlo),e(k,Xlo),e(k,ks),e(ks,wae),e(wae,zlo),e(ks,Wlo),e(ks,gB),e(gB,Qlo),e(ks,Hlo),e(ks,hB),e(hB,Ulo),e(ks,Jlo),e(k,Ylo),e(k,Ss),e(Ss,Aae),e(Aae,Klo),e(Ss,Zlo),e(Ss,pB),e(pB,eio),e(Ss,oio),e(Ss,_B),e(_B,rio),e(Ss,tio),e(Cr,aio),M(eh,Cr,null),e(wo,nio),e(wo,oh),M(yA,oh,null),e(oh,sio),e(oh,yae),e(yae,lio),b(f,iqe,u),b(f,Ti,u),e(Ti,rh),e(rh,Lae),M(LA,Lae,null),e(Ti,iio),e(Ti,xae),e(xae,dio),b(f,dqe,u),b(f,Ao,u),M(xA,Ao,null),e(Ao,cio),e(Ao,$A),e($A,fio),e($A,uB),e(uB,mio),e($A,gio),e(Ao,hio),e(Ao,kA),e(kA,pio),e(kA,$ae),e($ae,_io),e(kA,uio),e(Ao,bio),e(Ao,He),M(SA,He,null),e(He,vio),e(He,kae),e(kae,Fio),e(He,Tio),e(He,ya),e(ya,Mio),e(ya,Sae),e(Sae,Eio),e(ya,Cio),e(ya,Rae),e(Rae,wio),e(ya,Aio),e(ya,Pae),e(Pae,yio),e(ya,Lio),e(He,xio),e(He,Z),e(Z,th),e(th,Bae),e(Bae,$io),e(th,kio),e(th,bB),e(bB,Sio),e(th,Rio),e(Z,Pio),e(Z,ah),e(ah,Iae),e(Iae,Bio),e(ah,Iio),e(ah,vB),e(vB,qio),e(ah,Nio),e(Z,jio),e(Z,nh),e(nh,qae),e(qae,Dio),e(nh,Gio),e(nh,FB),e(FB,Oio),e(nh,Vio),e(Z,Xio),e(Z,sh),e(sh,Nae),e(Nae,zio),e(sh,Wio),e(sh,TB),e(TB,Qio),e(sh,Hio),e(Z,Uio),e(Z,lh),e(lh,jae),e(jae,Jio),e(lh,Yio),e(lh,MB),e(MB,Kio),e(lh,Zio),e(Z,edo),e(Z,ih),e(ih,Dae),e(Dae,odo),e(ih,rdo),e(ih,EB),e(EB,tdo),e(ih,ado),e(Z,ndo),e(Z,dh),e(dh,Gae),e(Gae,sdo),e(dh,ldo),e(dh,CB),e(CB,ido),e(dh,ddo),e(Z,cdo),e(Z,ch),e(ch,Oae),e(Oae,fdo),e(ch,mdo),e(ch,wB),e(wB,gdo),e(ch,hdo),e(Z,pdo),e(Z,fh),e(fh,Vae),e(Vae,_do),e(fh,udo),e(fh,AB),e(AB,bdo),e(fh,vdo),e(Z,Fdo),e(Z,mh),e(mh,Xae),e(Xae,Tdo),e(mh,Mdo),e(mh,yB),e(yB,Edo),e(mh,Cdo),e(Z,wdo),e(Z,gh),e(gh,zae),e(zae,Ado),e(gh,ydo),e(gh,LB),e(LB,Ldo),e(gh,xdo),e(Z,$do),e(Z,hh),e(hh,Wae),e(Wae,kdo),e(hh,Sdo),e(hh,xB),e(xB,Rdo),e(hh,Pdo),e(Z,Bdo),e(Z,ph),e(ph,Qae),e(Qae,Ido),e(ph,qdo),e(ph,$B),e($B,Ndo),e(ph,jdo),e(Z,Ddo),e(Z,_h),e(_h,Hae),e(Hae,Gdo),e(_h,Odo),e(_h,kB),e(kB,Vdo),e(_h,Xdo),e(Z,zdo),e(Z,uh),e(uh,Uae),e(Uae,Wdo),e(uh,Qdo),e(uh,SB),e(SB,Hdo),e(uh,Udo),e(Z,Jdo),e(Z,bh),e(bh,Jae),e(Jae,Ydo),e(bh,Kdo),e(bh,RB),e(RB,Zdo),e(bh,eco),e(Z,oco),e(Z,vh),e(vh,Yae),e(Yae,rco),e(vh,tco),e(vh,PB),e(PB,aco),e(vh,nco),e(Z,sco),e(Z,Fh),e(Fh,Kae),e(Kae,lco),e(Fh,ico),e(Fh,BB),e(BB,dco),e(Fh,cco),e(Z,fco),e(Z,Th),e(Th,Zae),e(Zae,mco),e(Th,gco),e(Th,IB),e(IB,hco),e(Th,pco),e(Z,_co),e(Z,Mh),e(Mh,ene),e(ene,uco),e(Mh,bco),e(Mh,qB),e(qB,vco),e(Mh,Fco),e(Z,Tco),e(Z,Eh),e(Eh,one),e(one,Mco),e(Eh,Eco),e(Eh,NB),e(NB,Cco),e(Eh,wco),e(Z,Aco),e(Z,Ch),e(Ch,rne),e(rne,yco),e(Ch,Lco),e(Ch,jB),e(jB,xco),e(Ch,$co),e(Z,kco),e(Z,wh),e(wh,tne),e(tne,Sco),e(wh,Rco),e(wh,DB),e(DB,Pco),e(wh,Bco),e(Z,Ico),e(Z,Ah),e(Ah,ane),e(ane,qco),e(Ah,Nco),e(Ah,GB),e(GB,jco),e(Ah,Dco),e(Z,Gco),e(Z,yh),e(yh,nne),e(nne,Oco),e(yh,Vco),e(yh,OB),e(OB,Xco),e(yh,zco),e(Z,Wco),e(Z,Lh),e(Lh,sne),e(sne,Qco),e(Lh,Hco),e(Lh,VB),e(VB,Uco),e(Lh,Jco),e(Z,Yco),e(Z,xh),e(xh,lne),e(lne,Kco),e(xh,Zco),e(xh,XB),e(XB,efo),e(xh,ofo),e(He,rfo),M($h,He,null),e(He,tfo),M(kh,He,null),e(Ao,afo),e(Ao,Sh),M(RA,Sh,null),e(Sh,nfo),e(Sh,ine),e(ine,sfo),b(f,cqe,u),b(f,Mi,u),e(Mi,Rh),e(Rh,dne),M(PA,dne,null),e(Mi,lfo),e(Mi,cne),e(cne,ifo),b(f,fqe,u),b(f,yo,u),M(BA,yo,null),e(yo,dfo),e(yo,IA),e(IA,cfo),e(IA,zB),e(zB,ffo),e(IA,mfo),e(yo,gfo),e(yo,qA),e(qA,hfo),e(qA,fne),e(fne,pfo),e(qA,_fo),e(yo,ufo),e(yo,Ue),M(NA,Ue,null),e(Ue,bfo),e(Ue,mne),e(mne,vfo),e(Ue,Ffo),e(Ue,Ei),e(Ei,Tfo),e(Ei,gne),e(gne,Mfo),e(Ei,Efo),e(Ei,hne),e(hne,Cfo),e(Ei,wfo),e(Ue,Afo),e(Ue,pe),e(pe,Ph),e(Ph,pne),e(pne,yfo),e(Ph,Lfo),e(Ph,WB),e(WB,xfo),e(Ph,$fo),e(pe,kfo),e(pe,Bh),e(Bh,_ne),e(_ne,Sfo),e(Bh,Rfo),e(Bh,une),e(une,Pfo),e(Bh,Bfo),e(pe,Ifo),e(pe,Ih),e(Ih,bne),e(bne,qfo),e(Ih,Nfo),e(Ih,QB),e(QB,jfo),e(Ih,Dfo),e(pe,Gfo),e(pe,qh),e(qh,vne),e(vne,Ofo),e(qh,Vfo),e(qh,HB),e(HB,Xfo),e(qh,zfo),e(pe,Wfo),e(pe,Nh),e(Nh,Fne),e(Fne,Qfo),e(Nh,Hfo),e(Nh,UB),e(UB,Ufo),e(Nh,Jfo),e(pe,Yfo),e(pe,jh),e(jh,Tne),e(Tne,Kfo),e(jh,Zfo),e(jh,JB),e(JB,emo),e(jh,omo),e(pe,rmo),e(pe,Dh),e(Dh,Mne),e(Mne,tmo),e(Dh,amo),e(Dh,YB),e(YB,nmo),e(Dh,smo),e(pe,lmo),e(pe,Gh),e(Gh,Ene),e(Ene,imo),e(Gh,dmo),e(Gh,KB),e(KB,cmo),e(Gh,fmo),e(pe,mmo),e(pe,Oh),e(Oh,Cne),e(Cne,gmo),e(Oh,hmo),e(Oh,ZB),e(ZB,pmo),e(Oh,_mo),e(pe,umo),e(pe,Vh),e(Vh,wne),e(wne,bmo),e(Vh,vmo),e(Vh,eI),e(eI,Fmo),e(Vh,Tmo),e(pe,Mmo),e(pe,Xh),e(Xh,Ane),e(Ane,Emo),e(Xh,Cmo),e(Xh,oI),e(oI,wmo),e(Xh,Amo),e(pe,ymo),e(pe,zh),e(zh,yne),e(yne,Lmo),e(zh,xmo),e(zh,rI),e(rI,$mo),e(zh,kmo),e(pe,Smo),e(pe,Wh),e(Wh,Lne),e(Lne,Rmo),e(Wh,Pmo),e(Wh,tI),e(tI,Bmo),e(Wh,Imo),e(pe,qmo),e(pe,Qh),e(Qh,xne),e(xne,Nmo),e(Qh,jmo),e(Qh,aI),e(aI,Dmo),e(Qh,Gmo),e(pe,Omo),e(pe,Hh),e(Hh,$ne),e($ne,Vmo),e(Hh,Xmo),e(Hh,nI),e(nI,zmo),e(Hh,Wmo),e(pe,Qmo),e(pe,Uh),e(Uh,kne),e(kne,Hmo),e(Uh,Umo),e(Uh,sI),e(sI,Jmo),e(Uh,Ymo),e(Ue,Kmo),M(Jh,Ue,null),e(Ue,Zmo),M(Yh,Ue,null),e(yo,ego),e(yo,Kh),M(jA,Kh,null),e(Kh,ogo),e(Kh,Sne),e(Sne,rgo),b(f,mqe,u),b(f,Ci,u),e(Ci,Zh),e(Zh,Rne),M(DA,Rne,null),e(Ci,tgo),e(Ci,Pne),e(Pne,ago),b(f,gqe,u),b(f,Lo,u),M(GA,Lo,null),e(Lo,ngo),e(Lo,wi),e(wi,sgo),e(wi,lI),e(lI,lgo),e(wi,igo),e(wi,iI),e(iI,dgo),e(wi,cgo),e(Lo,fgo),e(Lo,OA),e(OA,mgo),e(OA,Bne),e(Bne,ggo),e(OA,hgo),e(Lo,pgo),e(Lo,tt),M(VA,tt,null),e(tt,_go),e(tt,Ine),e(Ine,ugo),e(tt,bgo),e(tt,Ai),e(Ai,vgo),e(Ai,qne),e(qne,Fgo),e(Ai,Tgo),e(Ai,dI),e(dI,Mgo),e(Ai,Ego),e(tt,Cgo),M(ep,tt,null),e(Lo,wgo),e(Lo,Je),M(XA,Je,null),e(Je,Ago),e(Je,Nne),e(Nne,ygo),e(Je,Lgo),e(Je,La),e(La,xgo),e(La,jne),e(jne,$go),e(La,kgo),e(La,Dne),e(Dne,Sgo),e(La,Rgo),e(La,Gne),e(Gne,Pgo),e(La,Bgo),e(Je,Igo),e(Je,x),e(x,op),e(op,One),e(One,qgo),e(op,Ngo),e(op,cI),e(cI,jgo),e(op,Dgo),e(x,Ggo),e(x,rp),e(rp,Vne),e(Vne,Ogo),e(rp,Vgo),e(rp,fI),e(fI,Xgo),e(rp,zgo),e(x,Wgo),e(x,tp),e(tp,Xne),e(Xne,Qgo),e(tp,Hgo),e(tp,mI),e(mI,Ugo),e(tp,Jgo),e(x,Ygo),e(x,ap),e(ap,zne),e(zne,Kgo),e(ap,Zgo),e(ap,gI),e(gI,eho),e(ap,oho),e(x,rho),e(x,np),e(np,Wne),e(Wne,tho),e(np,aho),e(np,hI),e(hI,nho),e(np,sho),e(x,lho),e(x,sp),e(sp,Qne),e(Qne,iho),e(sp,dho),e(sp,pI),e(pI,cho),e(sp,fho),e(x,mho),e(x,lp),e(lp,Hne),e(Hne,gho),e(lp,hho),e(lp,_I),e(_I,pho),e(lp,_ho),e(x,uho),e(x,ip),e(ip,Une),e(Une,bho),e(ip,vho),e(ip,uI),e(uI,Fho),e(ip,Tho),e(x,Mho),e(x,dp),e(dp,Jne),e(Jne,Eho),e(dp,Cho),e(dp,bI),e(bI,who),e(dp,Aho),e(x,yho),e(x,cp),e(cp,Yne),e(Yne,Lho),e(cp,xho),e(cp,vI),e(vI,$ho),e(cp,kho),e(x,Sho),e(x,fp),e(fp,Kne),e(Kne,Rho),e(fp,Pho),e(fp,FI),e(FI,Bho),e(fp,Iho),e(x,qho),e(x,mp),e(mp,Zne),e(Zne,Nho),e(mp,jho),e(mp,TI),e(TI,Dho),e(mp,Gho),e(x,Oho),e(x,gp),e(gp,ese),e(ese,Vho),e(gp,Xho),e(gp,MI),e(MI,zho),e(gp,Who),e(x,Qho),e(x,hp),e(hp,ose),e(ose,Hho),e(hp,Uho),e(hp,EI),e(EI,Jho),e(hp,Yho),e(x,Kho),e(x,pp),e(pp,rse),e(rse,Zho),e(pp,epo),e(pp,CI),e(CI,opo),e(pp,rpo),e(x,tpo),e(x,_p),e(_p,tse),e(tse,apo),e(_p,npo),e(_p,wI),e(wI,spo),e(_p,lpo),e(x,ipo),e(x,up),e(up,ase),e(ase,dpo),e(up,cpo),e(up,AI),e(AI,fpo),e(up,mpo),e(x,gpo),e(x,bp),e(bp,nse),e(nse,hpo),e(bp,ppo),e(bp,yI),e(yI,_po),e(bp,upo),e(x,bpo),e(x,vp),e(vp,sse),e(sse,vpo),e(vp,Fpo),e(vp,LI),e(LI,Tpo),e(vp,Mpo),e(x,Epo),e(x,Fp),e(Fp,lse),e(lse,Cpo),e(Fp,wpo),e(Fp,xI),e(xI,Apo),e(Fp,ypo),e(x,Lpo),e(x,Tp),e(Tp,ise),e(ise,xpo),e(Tp,$po),e(Tp,$I),e($I,kpo),e(Tp,Spo),e(x,Rpo),e(x,Mp),e(Mp,dse),e(dse,Ppo),e(Mp,Bpo),e(Mp,kI),e(kI,Ipo),e(Mp,qpo),e(x,Npo),e(x,Ep),e(Ep,cse),e(cse,jpo),e(Ep,Dpo),e(Ep,SI),e(SI,Gpo),e(Ep,Opo),e(x,Vpo),e(x,Cp),e(Cp,fse),e(fse,Xpo),e(Cp,zpo),e(Cp,RI),e(RI,Wpo),e(Cp,Qpo),e(x,Hpo),e(x,wp),e(wp,mse),e(mse,Upo),e(wp,Jpo),e(wp,PI),e(PI,Ypo),e(wp,Kpo),e(x,Zpo),e(x,Ap),e(Ap,gse),e(gse,e_o),e(Ap,o_o),e(Ap,BI),e(BI,r_o),e(Ap,t_o),e(x,a_o),e(x,yp),e(yp,hse),e(hse,n_o),e(yp,s_o),e(yp,II),e(II,l_o),e(yp,i_o),e(x,d_o),e(x,Lp),e(Lp,pse),e(pse,c_o),e(Lp,f_o),e(Lp,qI),e(qI,m_o),e(Lp,g_o),e(x,h_o),e(x,xp),e(xp,_se),e(_se,p_o),e(xp,__o),e(xp,NI),e(NI,u_o),e(xp,b_o),e(x,v_o),e(x,$p),e($p,use),e(use,F_o),e($p,T_o),e($p,jI),e(jI,M_o),e($p,E_o),e(x,C_o),e(x,kp),e(kp,bse),e(bse,w_o),e(kp,A_o),e(kp,DI),e(DI,y_o),e(kp,L_o),e(x,x_o),e(x,Sp),e(Sp,vse),e(vse,$_o),e(Sp,k_o),e(Sp,GI),e(GI,S_o),e(Sp,R_o),e(x,P_o),e(x,Rs),e(Rs,Fse),e(Fse,B_o),e(Rs,I_o),e(Rs,OI),e(OI,q_o),e(Rs,N_o),e(Rs,VI),e(VI,j_o),e(Rs,D_o),e(x,G_o),e(x,Rp),e(Rp,Tse),e(Tse,O_o),e(Rp,V_o),e(Rp,XI),e(XI,X_o),e(Rp,z_o),e(x,W_o),e(x,Pp),e(Pp,Mse),e(Mse,Q_o),e(Pp,H_o),e(Pp,zI),e(zI,U_o),e(Pp,J_o),e(x,Y_o),e(x,Bp),e(Bp,Ese),e(Ese,K_o),e(Bp,Z_o),e(Bp,WI),e(WI,euo),e(Bp,ouo),e(x,ruo),e(x,Ip),e(Ip,Cse),e(Cse,tuo),e(Ip,auo),e(Ip,QI),e(QI,nuo),e(Ip,suo),e(x,luo),e(x,qp),e(qp,wse),e(wse,iuo),e(qp,duo),e(qp,HI),e(HI,cuo),e(qp,fuo),e(x,muo),e(x,Np),e(Np,Ase),e(Ase,guo),e(Np,huo),e(Np,UI),e(UI,puo),e(Np,_uo),e(x,uuo),e(x,jp),e(jp,yse),e(yse,buo),e(jp,vuo),e(jp,JI),e(JI,Fuo),e(jp,Tuo),e(x,Muo),e(x,Dp),e(Dp,Lse),e(Lse,Euo),e(Dp,Cuo),e(Dp,YI),e(YI,wuo),e(Dp,Auo),e(x,yuo),e(x,Gp),e(Gp,xse),e(xse,Luo),e(Gp,xuo),e(Gp,KI),e(KI,$uo),e(Gp,kuo),e(x,Suo),e(x,Op),e(Op,$se),e($se,Ruo),e(Op,Puo),e(Op,ZI),e(ZI,Buo),e(Op,Iuo),e(x,quo),e(x,Vp),e(Vp,kse),e(kse,Nuo),e(Vp,juo),e(Vp,eq),e(eq,Duo),e(Vp,Guo),e(x,Ouo),e(x,Xp),e(Xp,Sse),e(Sse,Vuo),e(Xp,Xuo),e(Xp,oq),e(oq,zuo),e(Xp,Wuo),e(x,Quo),e(x,zp),e(zp,Rse),e(Rse,Huo),e(zp,Uuo),e(zp,rq),e(rq,Juo),e(zp,Yuo),e(x,Kuo),e(x,Wp),e(Wp,Pse),e(Pse,Zuo),e(Wp,e1o),e(Wp,tq),e(tq,o1o),e(Wp,r1o),e(x,t1o),e(x,Qp),e(Qp,Bse),e(Bse,a1o),e(Qp,n1o),e(Qp,aq),e(aq,s1o),e(Qp,l1o),e(x,i1o),e(x,Hp),e(Hp,Ise),e(Ise,d1o),e(Hp,c1o),e(Hp,nq),e(nq,f1o),e(Hp,m1o),e(x,g1o),e(x,Up),e(Up,qse),e(qse,h1o),e(Up,p1o),e(Up,sq),e(sq,_1o),e(Up,u1o),e(x,b1o),e(x,Jp),e(Jp,Nse),e(Nse,v1o),e(Jp,F1o),e(Jp,lq),e(lq,T1o),e(Jp,M1o),e(x,E1o),e(x,Yp),e(Yp,jse),e(jse,C1o),e(Yp,w1o),e(Yp,iq),e(iq,A1o),e(Yp,y1o),e(x,L1o),e(x,Kp),e(Kp,Dse),e(Dse,x1o),e(Kp,$1o),e(Kp,dq),e(dq,k1o),e(Kp,S1o),e(x,R1o),e(x,Zp),e(Zp,Gse),e(Gse,P1o),e(Zp,B1o),e(Zp,cq),e(cq,I1o),e(Zp,q1o),e(x,N1o),e(x,e_),e(e_,Ose),e(Ose,j1o),e(e_,D1o),e(e_,fq),e(fq,G1o),e(e_,O1o),e(x,V1o),e(x,o_),e(o_,Vse),e(Vse,X1o),e(o_,z1o),e(o_,mq),e(mq,W1o),e(o_,Q1o),e(x,H1o),e(x,r_),e(r_,Xse),e(Xse,U1o),e(r_,J1o),e(r_,gq),e(gq,Y1o),e(r_,K1o),e(x,Z1o),e(x,t_),e(t_,zse),e(zse,e7o),e(t_,o7o),e(t_,hq),e(hq,r7o),e(t_,t7o),e(x,a7o),e(x,a_),e(a_,Wse),e(Wse,n7o),e(a_,s7o),e(a_,pq),e(pq,l7o),e(a_,i7o),e(x,d7o),e(x,n_),e(n_,Qse),e(Qse,c7o),e(n_,f7o),e(n_,_q),e(_q,m7o),e(n_,g7o),e(x,h7o),e(x,s_),e(s_,Hse),e(Hse,p7o),e(s_,_7o),e(s_,uq),e(uq,u7o),e(s_,b7o),e(x,v7o),e(x,l_),e(l_,Use),e(Use,F7o),e(l_,T7o),e(l_,bq),e(bq,M7o),e(l_,E7o),e(x,C7o),e(x,i_),e(i_,Jse),e(Jse,w7o),e(i_,A7o),e(i_,vq),e(vq,y7o),e(i_,L7o),e(x,x7o),e(x,d_),e(d_,Yse),e(Yse,$7o),e(d_,k7o),e(d_,Fq),e(Fq,S7o),e(d_,R7o),e(x,P7o),e(x,c_),e(c_,Kse),e(Kse,B7o),e(c_,I7o),e(c_,Tq),e(Tq,q7o),e(c_,N7o),e(x,j7o),e(x,f_),e(f_,Zse),e(Zse,D7o),e(f_,G7o),e(f_,Mq),e(Mq,O7o),e(f_,V7o),e(x,X7o),e(x,m_),e(m_,ele),e(ele,z7o),e(m_,W7o),e(m_,Eq),e(Eq,Q7o),e(m_,H7o),e(x,U7o),e(x,g_),e(g_,ole),e(ole,J7o),e(g_,Y7o),e(g_,Cq),e(Cq,K7o),e(g_,Z7o),e(x,ebo),e(x,h_),e(h_,rle),e(rle,obo),e(h_,rbo),e(h_,wq),e(wq,tbo),e(h_,abo),e(x,nbo),e(x,p_),e(p_,tle),e(tle,sbo),e(p_,lbo),e(p_,Aq),e(Aq,ibo),e(p_,dbo),e(x,cbo),e(x,__),e(__,ale),e(ale,fbo),e(__,mbo),e(__,yq),e(yq,gbo),e(__,hbo),e(x,pbo),e(x,u_),e(u_,nle),e(nle,_bo),e(u_,ubo),e(u_,Lq),e(Lq,bbo),e(u_,vbo),e(x,Fbo),e(x,b_),e(b_,sle),e(sle,Tbo),e(b_,Mbo),e(b_,xq),e(xq,Ebo),e(b_,Cbo),e(x,wbo),e(x,v_),e(v_,lle),e(lle,Abo),e(v_,ybo),e(v_,$q),e($q,Lbo),e(v_,xbo),e(x,$bo),e(x,F_),e(F_,ile),e(ile,kbo),e(F_,Sbo),e(F_,kq),e(kq,Rbo),e(F_,Pbo),e(x,Bbo),e(x,T_),e(T_,dle),e(dle,Ibo),e(T_,qbo),e(T_,Sq),e(Sq,Nbo),e(T_,jbo),e(x,Dbo),e(x,M_),e(M_,cle),e(cle,Gbo),e(M_,Obo),e(M_,Rq),e(Rq,Vbo),e(M_,Xbo),e(x,zbo),e(x,E_),e(E_,fle),e(fle,Wbo),e(E_,Qbo),e(E_,Pq),e(Pq,Hbo),e(E_,Ubo),e(x,Jbo),e(x,C_),e(C_,mle),e(mle,Ybo),e(C_,Kbo),e(C_,Bq),e(Bq,Zbo),e(C_,e2o),e(x,o2o),e(x,w_),e(w_,gle),e(gle,r2o),e(w_,t2o),e(w_,Iq),e(Iq,a2o),e(w_,n2o),e(x,s2o),e(x,A_),e(A_,hle),e(hle,l2o),e(A_,i2o),e(A_,qq),e(qq,d2o),e(A_,c2o),e(x,f2o),e(x,y_),e(y_,ple),e(ple,m2o),e(y_,g2o),e(y_,Nq),e(Nq,h2o),e(y_,p2o),e(x,_2o),e(x,L_),e(L_,_le),e(_le,u2o),e(L_,b2o),e(L_,jq),e(jq,v2o),e(L_,F2o),e(x,T2o),e(x,x_),e(x_,ule),e(ule,M2o),e(x_,E2o),e(x_,Dq),e(Dq,C2o),e(x_,w2o),e(x,A2o),e(x,$_),e($_,ble),e(ble,y2o),e($_,L2o),e($_,Gq),e(Gq,x2o),e($_,$2o),e(x,k2o),e(x,k_),e(k_,vle),e(vle,S2o),e(k_,R2o),e(k_,Oq),e(Oq,P2o),e(k_,B2o),e(x,I2o),e(x,S_),e(S_,Fle),e(Fle,q2o),e(S_,N2o),e(S_,Vq),e(Vq,j2o),e(S_,D2o),e(x,G2o),e(x,R_),e(R_,Tle),e(Tle,O2o),e(R_,V2o),e(R_,Xq),e(Xq,X2o),e(R_,z2o),e(x,W2o),e(x,P_),e(P_,Mle),e(Mle,Q2o),e(P_,H2o),e(P_,zq),e(zq,U2o),e(P_,J2o),e(x,Y2o),e(x,B_),e(B_,Ele),e(Ele,K2o),e(B_,Z2o),e(B_,Wq),e(Wq,evo),e(B_,ovo),e(x,rvo),e(x,I_),e(I_,Cle),e(Cle,tvo),e(I_,avo),e(I_,Qq),e(Qq,nvo),e(I_,svo),e(x,lvo),e(x,q_),e(q_,wle),e(wle,ivo),e(q_,dvo),e(q_,Hq),e(Hq,cvo),e(q_,fvo),e(x,mvo),e(x,N_),e(N_,Ale),e(Ale,gvo),e(N_,hvo),e(N_,Uq),e(Uq,pvo),e(N_,_vo),e(x,uvo),e(x,j_),e(j_,yle),e(yle,bvo),e(j_,vvo),e(j_,Jq),e(Jq,Fvo),e(j_,Tvo),e(x,Mvo),e(x,D_),e(D_,Lle),e(Lle,Evo),e(D_,Cvo),e(D_,Yq),e(Yq,wvo),e(D_,Avo),e(x,yvo),e(x,G_),e(G_,xle),e(xle,Lvo),e(G_,xvo),e(G_,Kq),e(Kq,$vo),e(G_,kvo),e(x,Svo),e(x,O_),e(O_,$le),e($le,Rvo),e(O_,Pvo),e(O_,Zq),e(Zq,Bvo),e(O_,Ivo),e(x,qvo),e(x,V_),e(V_,kle),e(kle,Nvo),e(V_,jvo),e(V_,eN),e(eN,Dvo),e(V_,Gvo),e(x,Ovo),e(x,X_),e(X_,Sle),e(Sle,Vvo),e(X_,Xvo),e(X_,oN),e(oN,zvo),e(X_,Wvo),e(x,Qvo),e(x,z_),e(z_,Rle),e(Rle,Hvo),e(z_,Uvo),e(z_,rN),e(rN,Jvo),e(z_,Yvo),e(Je,Kvo),e(Je,W_),e(W_,Zvo),e(W_,Ple),e(Ple,e3o),e(W_,o3o),e(W_,Ble),e(Ble,r3o),e(Je,t3o),M(Q_,Je,null),b(f,hqe,u),b(f,yi,u),e(yi,H_),e(H_,Ile),M(zA,Ile,null),e(yi,a3o),e(yi,qle),e(qle,n3o),b(f,pqe,u),b(f,xo,u),M(WA,xo,null),e(xo,s3o),e(xo,Li),e(Li,l3o),e(Li,tN),e(tN,i3o),e(Li,d3o),e(Li,aN),e(aN,c3o),e(Li,f3o),e(xo,m3o),e(xo,QA),e(QA,g3o),e(QA,Nle),e(Nle,h3o),e(QA,p3o),e(xo,_3o),e(xo,at),M(HA,at,null),e(at,u3o),e(at,jle),e(jle,b3o),e(at,v3o),e(at,xi),e(xi,F3o),e(xi,Dle),e(Dle,T3o),e(xi,M3o),e(xi,nN),e(nN,E3o),e(xi,C3o),e(at,w3o),M(U_,at,null),e(xo,A3o),e(xo,Ye),M(UA,Ye,null),e(Ye,y3o),e(Ye,Gle),e(Gle,L3o),e(Ye,x3o),e(Ye,xa),e(xa,$3o),e(xa,Ole),e(Ole,k3o),e(xa,S3o),e(xa,Vle),e(Vle,R3o),e(xa,P3o),e(xa,Xle),e(Xle,B3o),e(xa,I3o),e(Ye,q3o),e(Ye,G),e(G,J_),e(J_,zle),e(zle,N3o),e(J_,j3o),e(J_,sN),e(sN,D3o),e(J_,G3o),e(G,O3o),e(G,Y_),e(Y_,Wle),e(Wle,V3o),e(Y_,X3o),e(Y_,lN),e(lN,z3o),e(Y_,W3o),e(G,Q3o),e(G,K_),e(K_,Qle),e(Qle,H3o),e(K_,U3o),e(K_,iN),e(iN,J3o),e(K_,Y3o),e(G,K3o),e(G,Z_),e(Z_,Hle),e(Hle,Z3o),e(Z_,eFo),e(Z_,dN),e(dN,oFo),e(Z_,rFo),e(G,tFo),e(G,eu),e(eu,Ule),e(Ule,aFo),e(eu,nFo),e(eu,cN),e(cN,sFo),e(eu,lFo),e(G,iFo),e(G,ou),e(ou,Jle),e(Jle,dFo),e(ou,cFo),e(ou,fN),e(fN,fFo),e(ou,mFo),e(G,gFo),e(G,ru),e(ru,Yle),e(Yle,hFo),e(ru,pFo),e(ru,mN),e(mN,_Fo),e(ru,uFo),e(G,bFo),e(G,tu),e(tu,Kle),e(Kle,vFo),e(tu,FFo),e(tu,gN),e(gN,TFo),e(tu,MFo),e(G,EFo),e(G,au),e(au,Zle),e(Zle,CFo),e(au,wFo),e(au,hN),e(hN,AFo),e(au,yFo),e(G,LFo),e(G,nu),e(nu,eie),e(eie,xFo),e(nu,$Fo),e(nu,pN),e(pN,kFo),e(nu,SFo),e(G,RFo),e(G,su),e(su,oie),e(oie,PFo),e(su,BFo),e(su,_N),e(_N,IFo),e(su,qFo),e(G,NFo),e(G,lu),e(lu,rie),e(rie,jFo),e(lu,DFo),e(lu,uN),e(uN,GFo),e(lu,OFo),e(G,VFo),e(G,iu),e(iu,tie),e(tie,XFo),e(iu,zFo),e(iu,bN),e(bN,WFo),e(iu,QFo),e(G,HFo),e(G,du),e(du,aie),e(aie,UFo),e(du,JFo),e(du,vN),e(vN,YFo),e(du,KFo),e(G,ZFo),e(G,cu),e(cu,nie),e(nie,eTo),e(cu,oTo),e(cu,FN),e(FN,rTo),e(cu,tTo),e(G,aTo),e(G,fu),e(fu,sie),e(sie,nTo),e(fu,sTo),e(fu,TN),e(TN,lTo),e(fu,iTo),e(G,dTo),e(G,mu),e(mu,lie),e(lie,cTo),e(mu,fTo),e(mu,MN),e(MN,mTo),e(mu,gTo),e(G,hTo),e(G,gu),e(gu,iie),e(iie,pTo),e(gu,_To),e(gu,EN),e(EN,uTo),e(gu,bTo),e(G,vTo),e(G,hu),e(hu,die),e(die,FTo),e(hu,TTo),e(hu,CN),e(CN,MTo),e(hu,ETo),e(G,CTo),e(G,pu),e(pu,cie),e(cie,wTo),e(pu,ATo),e(pu,wN),e(wN,yTo),e(pu,LTo),e(G,xTo),e(G,_u),e(_u,fie),e(fie,$To),e(_u,kTo),e(_u,AN),e(AN,STo),e(_u,RTo),e(G,PTo),e(G,uu),e(uu,mie),e(mie,BTo),e(uu,ITo),e(uu,yN),e(yN,qTo),e(uu,NTo),e(G,jTo),e(G,bu),e(bu,gie),e(gie,DTo),e(bu,GTo),e(bu,LN),e(LN,OTo),e(bu,VTo),e(G,XTo),e(G,vu),e(vu,hie),e(hie,zTo),e(vu,WTo),e(vu,xN),e(xN,QTo),e(vu,HTo),e(G,UTo),e(G,Fu),e(Fu,pie),e(pie,JTo),e(Fu,YTo),e(Fu,$N),e($N,KTo),e(Fu,ZTo),e(G,e8o),e(G,Tu),e(Tu,_ie),e(_ie,o8o),e(Tu,r8o),e(Tu,kN),e(kN,t8o),e(Tu,a8o),e(G,n8o),e(G,Mu),e(Mu,uie),e(uie,s8o),e(Mu,l8o),e(Mu,SN),e(SN,i8o),e(Mu,d8o),e(G,c8o),e(G,Eu),e(Eu,bie),e(bie,f8o),e(Eu,m8o),e(Eu,RN),e(RN,g8o),e(Eu,h8o),e(G,p8o),e(G,Cu),e(Cu,vie),e(vie,_8o),e(Cu,u8o),e(Cu,PN),e(PN,b8o),e(Cu,v8o),e(G,F8o),e(G,wu),e(wu,Fie),e(Fie,T8o),e(wu,M8o),e(wu,BN),e(BN,E8o),e(wu,C8o),e(G,w8o),e(G,Au),e(Au,Tie),e(Tie,A8o),e(Au,y8o),e(Au,IN),e(IN,L8o),e(Au,x8o),e(G,$8o),e(G,yu),e(yu,Mie),e(Mie,k8o),e(yu,S8o),e(yu,qN),e(qN,R8o),e(yu,P8o),e(G,B8o),e(G,Lu),e(Lu,Eie),e(Eie,I8o),e(Lu,q8o),e(Lu,NN),e(NN,N8o),e(Lu,j8o),e(G,D8o),e(G,xu),e(xu,Cie),e(Cie,G8o),e(xu,O8o),e(xu,jN),e(jN,V8o),e(xu,X8o),e(G,z8o),e(G,$u),e($u,wie),e(wie,W8o),e($u,Q8o),e($u,DN),e(DN,H8o),e($u,U8o),e(G,J8o),e(G,ku),e(ku,Aie),e(Aie,Y8o),e(ku,K8o),e(ku,GN),e(GN,Z8o),e(ku,eMo),e(G,oMo),e(G,Su),e(Su,yie),e(yie,rMo),e(Su,tMo),e(Su,ON),e(ON,aMo),e(Su,nMo),e(G,sMo),e(G,Ru),e(Ru,Lie),e(Lie,lMo),e(Ru,iMo),e(Ru,VN),e(VN,dMo),e(Ru,cMo),e(G,fMo),e(G,Pu),e(Pu,xie),e(xie,mMo),e(Pu,gMo),e(Pu,XN),e(XN,hMo),e(Pu,pMo),e(G,_Mo),e(G,Bu),e(Bu,$ie),e($ie,uMo),e(Bu,bMo),e(Bu,zN),e(zN,vMo),e(Bu,FMo),e(G,TMo),e(G,Iu),e(Iu,kie),e(kie,MMo),e(Iu,EMo),e(Iu,WN),e(WN,CMo),e(Iu,wMo),e(G,AMo),e(G,qu),e(qu,Sie),e(Sie,yMo),e(qu,LMo),e(qu,QN),e(QN,xMo),e(qu,$Mo),e(Ye,kMo),e(Ye,Nu),e(Nu,SMo),e(Nu,Rie),e(Rie,RMo),e(Nu,PMo),e(Nu,Pie),e(Pie,BMo),e(Ye,IMo),M(ju,Ye,null),b(f,_qe,u),b(f,$i,u),e($i,Du),e(Du,Bie),M(JA,Bie,null),e($i,qMo),e($i,Iie),e(Iie,NMo),b(f,uqe,u),b(f,$o,u),M(YA,$o,null),e($o,jMo),e($o,ki),e(ki,DMo),e(ki,HN),e(HN,GMo),e(ki,OMo),e(ki,UN),e(UN,VMo),e(ki,XMo),e($o,zMo),e($o,KA),e(KA,WMo),e(KA,qie),e(qie,QMo),e(KA,HMo),e($o,UMo),e($o,nt),M(ZA,nt,null),e(nt,JMo),e(nt,Nie),e(Nie,YMo),e(nt,KMo),e(nt,Si),e(Si,ZMo),e(Si,jie),e(jie,e4o),e(Si,o4o),e(Si,JN),e(JN,r4o),e(Si,t4o),e(nt,a4o),M(Gu,nt,null),e($o,n4o),e($o,Ke),M(e6,Ke,null),e(Ke,s4o),e(Ke,Die),e(Die,l4o),e(Ke,i4o),e(Ke,$a),e($a,d4o),e($a,Gie),e(Gie,c4o),e($a,f4o),e($a,Oie),e(Oie,m4o),e($a,g4o),e($a,Vie),e(Vie,h4o),e($a,p4o),e(Ke,_4o),e(Ke,z),e(z,Ou),e(Ou,Xie),e(Xie,u4o),e(Ou,b4o),e(Ou,YN),e(YN,v4o),e(Ou,F4o),e(z,T4o),e(z,Vu),e(Vu,zie),e(zie,M4o),e(Vu,E4o),e(Vu,KN),e(KN,C4o),e(Vu,w4o),e(z,A4o),e(z,Xu),e(Xu,Wie),e(Wie,y4o),e(Xu,L4o),e(Xu,ZN),e(ZN,x4o),e(Xu,$4o),e(z,k4o),e(z,zu),e(zu,Qie),e(Qie,S4o),e(zu,R4o),e(zu,ej),e(ej,P4o),e(zu,B4o),e(z,I4o),e(z,Wu),e(Wu,Hie),e(Hie,q4o),e(Wu,N4o),e(Wu,oj),e(oj,j4o),e(Wu,D4o),e(z,G4o),e(z,Qu),e(Qu,Uie),e(Uie,O4o),e(Qu,V4o),e(Qu,rj),e(rj,X4o),e(Qu,z4o),e(z,W4o),e(z,Hu),e(Hu,Jie),e(Jie,Q4o),e(Hu,H4o),e(Hu,tj),e(tj,U4o),e(Hu,J4o),e(z,Y4o),e(z,Uu),e(Uu,Yie),e(Yie,K4o),e(Uu,Z4o),e(Uu,aj),e(aj,eEo),e(Uu,oEo),e(z,rEo),e(z,Ju),e(Ju,Kie),e(Kie,tEo),e(Ju,aEo),e(Ju,nj),e(nj,nEo),e(Ju,sEo),e(z,lEo),e(z,Yu),e(Yu,Zie),e(Zie,iEo),e(Yu,dEo),e(Yu,sj),e(sj,cEo),e(Yu,fEo),e(z,mEo),e(z,Ku),e(Ku,ede),e(ede,gEo),e(Ku,hEo),e(Ku,lj),e(lj,pEo),e(Ku,_Eo),e(z,uEo),e(z,Zu),e(Zu,ode),e(ode,bEo),e(Zu,vEo),e(Zu,ij),e(ij,FEo),e(Zu,TEo),e(z,MEo),e(z,e1),e(e1,rde),e(rde,EEo),e(e1,CEo),e(e1,dj),e(dj,wEo),e(e1,AEo),e(z,yEo),e(z,o1),e(o1,tde),e(tde,LEo),e(o1,xEo),e(o1,cj),e(cj,$Eo),e(o1,kEo),e(z,SEo),e(z,r1),e(r1,ade),e(ade,REo),e(r1,PEo),e(r1,fj),e(fj,BEo),e(r1,IEo),e(z,qEo),e(z,t1),e(t1,nde),e(nde,NEo),e(t1,jEo),e(t1,mj),e(mj,DEo),e(t1,GEo),e(z,OEo),e(z,a1),e(a1,sde),e(sde,VEo),e(a1,XEo),e(a1,gj),e(gj,zEo),e(a1,WEo),e(z,QEo),e(z,n1),e(n1,lde),e(lde,HEo),e(n1,UEo),e(n1,hj),e(hj,JEo),e(n1,YEo),e(z,KEo),e(z,s1),e(s1,ide),e(ide,ZEo),e(s1,eCo),e(s1,pj),e(pj,oCo),e(s1,rCo),e(z,tCo),e(z,l1),e(l1,dde),e(dde,aCo),e(l1,nCo),e(l1,_j),e(_j,sCo),e(l1,lCo),e(z,iCo),e(z,i1),e(i1,cde),e(cde,dCo),e(i1,cCo),e(i1,uj),e(uj,fCo),e(i1,mCo),e(z,gCo),e(z,d1),e(d1,fde),e(fde,hCo),e(d1,pCo),e(d1,bj),e(bj,_Co),e(d1,uCo),e(z,bCo),e(z,c1),e(c1,mde),e(mde,vCo),e(c1,FCo),e(c1,vj),e(vj,TCo),e(c1,MCo),e(z,ECo),e(z,f1),e(f1,gde),e(gde,CCo),e(f1,wCo),e(f1,Fj),e(Fj,ACo),e(f1,yCo),e(z,LCo),e(z,m1),e(m1,hde),e(hde,xCo),e(m1,$Co),e(m1,Tj),e(Tj,kCo),e(m1,SCo),e(z,RCo),e(z,g1),e(g1,pde),e(pde,PCo),e(g1,BCo),e(g1,Mj),e(Mj,ICo),e(g1,qCo),e(z,NCo),e(z,h1),e(h1,_de),e(_de,jCo),e(h1,DCo),e(h1,Ej),e(Ej,GCo),e(h1,OCo),e(z,VCo),e(z,p1),e(p1,ude),e(ude,XCo),e(p1,zCo),e(p1,Cj),e(Cj,WCo),e(p1,QCo),e(z,HCo),e(z,_1),e(_1,bde),e(bde,UCo),e(_1,JCo),e(_1,wj),e(wj,YCo),e(_1,KCo),e(z,ZCo),e(z,u1),e(u1,vde),e(vde,e5o),e(u1,o5o),e(u1,Aj),e(Aj,r5o),e(u1,t5o),e(z,a5o),e(z,b1),e(b1,Fde),e(Fde,n5o),e(b1,s5o),e(b1,yj),e(yj,l5o),e(b1,i5o),e(z,d5o),e(z,v1),e(v1,Tde),e(Tde,c5o),e(v1,f5o),e(v1,Lj),e(Lj,m5o),e(v1,g5o),e(z,h5o),e(z,F1),e(F1,Mde),e(Mde,p5o),e(F1,_5o),e(F1,xj),e(xj,u5o),e(F1,b5o),e(z,v5o),e(z,T1),e(T1,Ede),e(Ede,F5o),e(T1,T5o),e(T1,$j),e($j,M5o),e(T1,E5o),e(z,C5o),e(z,M1),e(M1,Cde),e(Cde,w5o),e(M1,A5o),e(M1,kj),e(kj,y5o),e(M1,L5o),e(z,x5o),e(z,E1),e(E1,wde),e(wde,$5o),e(E1,k5o),e(E1,Sj),e(Sj,S5o),e(E1,R5o),e(Ke,P5o),e(Ke,C1),e(C1,B5o),e(C1,Ade),e(Ade,I5o),e(C1,q5o),e(C1,yde),e(yde,N5o),e(Ke,j5o),M(w1,Ke,null),b(f,bqe,u),b(f,Ri,u),e(Ri,A1),e(A1,Lde),M(o6,Lde,null),e(Ri,D5o),e(Ri,xde),e(xde,G5o),b(f,vqe,u),b(f,ko,u),M(r6,ko,null),e(ko,O5o),e(ko,Pi),e(Pi,V5o),e(Pi,Rj),e(Rj,X5o),e(Pi,z5o),e(Pi,Pj),e(Pj,W5o),e(Pi,Q5o),e(ko,H5o),e(ko,t6),e(t6,U5o),e(t6,$de),e($de,J5o),e(t6,Y5o),e(ko,K5o),e(ko,st),M(a6,st,null),e(st,Z5o),e(st,kde),e(kde,ewo),e(st,owo),e(st,Bi),e(Bi,rwo),e(Bi,Sde),e(Sde,two),e(Bi,awo),e(Bi,Bj),e(Bj,nwo),e(Bi,swo),e(st,lwo),M(y1,st,null),e(ko,iwo),e(ko,Ze),M(n6,Ze,null),e(Ze,dwo),e(Ze,Rde),e(Rde,cwo),e(Ze,fwo),e(Ze,ka),e(ka,mwo),e(ka,Pde),e(Pde,gwo),e(ka,hwo),e(ka,Bde),e(Bde,pwo),e(ka,_wo),e(ka,Ide),e(Ide,uwo),e(ka,bwo),e(Ze,vwo),e(Ze,W),e(W,L1),e(L1,qde),e(qde,Fwo),e(L1,Two),e(L1,Ij),e(Ij,Mwo),e(L1,Ewo),e(W,Cwo),e(W,x1),e(x1,Nde),e(Nde,wwo),e(x1,Awo),e(x1,qj),e(qj,ywo),e(x1,Lwo),e(W,xwo),e(W,$1),e($1,jde),e(jde,$wo),e($1,kwo),e($1,Nj),e(Nj,Swo),e($1,Rwo),e(W,Pwo),e(W,k1),e(k1,Dde),e(Dde,Bwo),e(k1,Iwo),e(k1,jj),e(jj,qwo),e(k1,Nwo),e(W,jwo),e(W,S1),e(S1,Gde),e(Gde,Dwo),e(S1,Gwo),e(S1,Dj),e(Dj,Owo),e(S1,Vwo),e(W,Xwo),e(W,R1),e(R1,Ode),e(Ode,zwo),e(R1,Wwo),e(R1,Gj),e(Gj,Qwo),e(R1,Hwo),e(W,Uwo),e(W,P1),e(P1,Vde),e(Vde,Jwo),e(P1,Ywo),e(P1,Oj),e(Oj,Kwo),e(P1,Zwo),e(W,e0o),e(W,B1),e(B1,Xde),e(Xde,o0o),e(B1,r0o),e(B1,Vj),e(Vj,t0o),e(B1,a0o),e(W,n0o),e(W,I1),e(I1,zde),e(zde,s0o),e(I1,l0o),e(I1,Xj),e(Xj,i0o),e(I1,d0o),e(W,c0o),e(W,q1),e(q1,Wde),e(Wde,f0o),e(q1,m0o),e(q1,zj),e(zj,g0o),e(q1,h0o),e(W,p0o),e(W,N1),e(N1,Qde),e(Qde,_0o),e(N1,u0o),e(N1,Wj),e(Wj,b0o),e(N1,v0o),e(W,F0o),e(W,j1),e(j1,Hde),e(Hde,T0o),e(j1,M0o),e(j1,Qj),e(Qj,E0o),e(j1,C0o),e(W,w0o),e(W,D1),e(D1,Ude),e(Ude,A0o),e(D1,y0o),e(D1,Hj),e(Hj,L0o),e(D1,x0o),e(W,$0o),e(W,G1),e(G1,Jde),e(Jde,k0o),e(G1,S0o),e(G1,Uj),e(Uj,R0o),e(G1,P0o),e(W,B0o),e(W,O1),e(O1,Yde),e(Yde,I0o),e(O1,q0o),e(O1,Jj),e(Jj,N0o),e(O1,j0o),e(W,D0o),e(W,V1),e(V1,Kde),e(Kde,G0o),e(V1,O0o),e(V1,Yj),e(Yj,V0o),e(V1,X0o),e(W,z0o),e(W,X1),e(X1,Zde),e(Zde,W0o),e(X1,Q0o),e(X1,Kj),e(Kj,H0o),e(X1,U0o),e(W,J0o),e(W,z1),e(z1,ece),e(ece,Y0o),e(z1,K0o),e(z1,Zj),e(Zj,Z0o),e(z1,eAo),e(W,oAo),e(W,W1),e(W1,oce),e(oce,rAo),e(W1,tAo),e(W1,eD),e(eD,aAo),e(W1,nAo),e(W,sAo),e(W,Q1),e(Q1,rce),e(rce,lAo),e(Q1,iAo),e(Q1,oD),e(oD,dAo),e(Q1,cAo),e(W,fAo),e(W,H1),e(H1,tce),e(tce,mAo),e(H1,gAo),e(H1,rD),e(rD,hAo),e(H1,pAo),e(W,_Ao),e(W,U1),e(U1,ace),e(ace,uAo),e(U1,bAo),e(U1,tD),e(tD,vAo),e(U1,FAo),e(W,TAo),e(W,J1),e(J1,nce),e(nce,MAo),e(J1,EAo),e(J1,aD),e(aD,CAo),e(J1,wAo),e(W,AAo),e(W,Y1),e(Y1,sce),e(sce,yAo),e(Y1,LAo),e(Y1,nD),e(nD,xAo),e(Y1,$Ao),e(W,kAo),e(W,K1),e(K1,lce),e(lce,SAo),e(K1,RAo),e(K1,sD),e(sD,PAo),e(K1,BAo),e(W,IAo),e(W,Z1),e(Z1,ice),e(ice,qAo),e(Z1,NAo),e(Z1,lD),e(lD,jAo),e(Z1,DAo),e(W,GAo),e(W,e7),e(e7,dce),e(dce,OAo),e(e7,VAo),e(e7,iD),e(iD,XAo),e(e7,zAo),e(W,WAo),e(W,o7),e(o7,cce),e(cce,QAo),e(o7,HAo),e(o7,dD),e(dD,UAo),e(o7,JAo),e(W,YAo),e(W,r7),e(r7,fce),e(fce,KAo),e(r7,ZAo),e(r7,cD),e(cD,e6o),e(r7,o6o),e(W,r6o),e(W,t7),e(t7,mce),e(mce,t6o),e(t7,a6o),e(t7,fD),e(fD,n6o),e(t7,s6o),e(W,l6o),e(W,a7),e(a7,gce),e(gce,i6o),e(a7,d6o),e(a7,hce),e(hce,c6o),e(a7,f6o),e(W,m6o),e(W,n7),e(n7,pce),e(pce,g6o),e(n7,h6o),e(n7,mD),e(mD,p6o),e(n7,_6o),e(W,u6o),e(W,s7),e(s7,_ce),e(_ce,b6o),e(s7,v6o),e(s7,gD),e(gD,F6o),e(s7,T6o),e(W,M6o),e(W,l7),e(l7,uce),e(uce,E6o),e(l7,C6o),e(l7,hD),e(hD,w6o),e(l7,A6o),e(W,y6o),e(W,i7),e(i7,bce),e(bce,L6o),e(i7,x6o),e(i7,pD),e(pD,$6o),e(i7,k6o),e(Ze,S6o),e(Ze,d7),e(d7,R6o),e(d7,vce),e(vce,P6o),e(d7,B6o),e(d7,Fce),e(Fce,I6o),e(Ze,q6o),M(c7,Ze,null),b(f,Fqe,u),b(f,Ii,u),e(Ii,f7),e(f7,Tce),M(s6,Tce,null),e(Ii,N6o),e(Ii,Mce),e(Mce,j6o),b(f,Tqe,u),b(f,So,u),M(l6,So,null),e(So,D6o),e(So,qi),e(qi,G6o),e(qi,_D),e(_D,O6o),e(qi,V6o),e(qi,uD),e(uD,X6o),e(qi,z6o),e(So,W6o),e(So,i6),e(i6,Q6o),e(i6,Ece),e(Ece,H6o),e(i6,U6o),e(So,J6o),e(So,lt),M(d6,lt,null),e(lt,Y6o),e(lt,Cce),e(Cce,K6o),e(lt,Z6o),e(lt,Ni),e(Ni,eyo),e(Ni,wce),e(wce,oyo),e(Ni,ryo),e(Ni,bD),e(bD,tyo),e(Ni,ayo),e(lt,nyo),M(m7,lt,null),e(So,syo),e(So,eo),M(c6,eo,null),e(eo,lyo),e(eo,Ace),e(Ace,iyo),e(eo,dyo),e(eo,Sa),e(Sa,cyo),e(Sa,yce),e(yce,fyo),e(Sa,myo),e(Sa,Lce),e(Lce,gyo),e(Sa,hyo),e(Sa,xce),e(xce,pyo),e(Sa,_yo),e(eo,uyo),e(eo,_e),e(_e,g7),e(g7,$ce),e($ce,byo),e(g7,vyo),e(g7,vD),e(vD,Fyo),e(g7,Tyo),e(_e,Myo),e(_e,h7),e(h7,kce),e(kce,Eyo),e(h7,Cyo),e(h7,FD),e(FD,wyo),e(h7,Ayo),e(_e,yyo),e(_e,p7),e(p7,Sce),e(Sce,Lyo),e(p7,xyo),e(p7,TD),e(TD,$yo),e(p7,kyo),e(_e,Syo),e(_e,_7),e(_7,Rce),e(Rce,Ryo),e(_7,Pyo),e(_7,MD),e(MD,Byo),e(_7,Iyo),e(_e,qyo),e(_e,u7),e(u7,Pce),e(Pce,Nyo),e(u7,jyo),e(u7,ED),e(ED,Dyo),e(u7,Gyo),e(_e,Oyo),e(_e,b7),e(b7,Bce),e(Bce,Vyo),e(b7,Xyo),e(b7,CD),e(CD,zyo),e(b7,Wyo),e(_e,Qyo),e(_e,v7),e(v7,Ice),e(Ice,Hyo),e(v7,Uyo),e(v7,wD),e(wD,Jyo),e(v7,Yyo),e(_e,Kyo),e(_e,F7),e(F7,qce),e(qce,Zyo),e(F7,eLo),e(F7,AD),e(AD,oLo),e(F7,rLo),e(_e,tLo),e(_e,T7),e(T7,Nce),e(Nce,aLo),e(T7,nLo),e(T7,yD),e(yD,sLo),e(T7,lLo),e(_e,iLo),e(_e,M7),e(M7,jce),e(jce,dLo),e(M7,cLo),e(M7,LD),e(LD,fLo),e(M7,mLo),e(_e,gLo),e(_e,E7),e(E7,Dce),e(Dce,hLo),e(E7,pLo),e(E7,xD),e(xD,_Lo),e(E7,uLo),e(_e,bLo),e(_e,C7),e(C7,Gce),e(Gce,vLo),e(C7,FLo),e(C7,$D),e($D,TLo),e(C7,MLo),e(_e,ELo),e(_e,w7),e(w7,Oce),e(Oce,CLo),e(w7,wLo),e(w7,kD),e(kD,ALo),e(w7,yLo),e(_e,LLo),e(_e,A7),e(A7,Vce),e(Vce,xLo),e(A7,$Lo),e(A7,SD),e(SD,kLo),e(A7,SLo),e(_e,RLo),e(_e,y7),e(y7,Xce),e(Xce,PLo),e(y7,BLo),e(y7,RD),e(RD,ILo),e(y7,qLo),e(_e,NLo),e(_e,L7),e(L7,zce),e(zce,jLo),e(L7,DLo),e(L7,PD),e(PD,GLo),e(L7,OLo),e(eo,VLo),e(eo,x7),e(x7,XLo),e(x7,Wce),e(Wce,zLo),e(x7,WLo),e(x7,Qce),e(Qce,QLo),e(eo,HLo),M($7,eo,null),b(f,Mqe,u),b(f,ji,u),e(ji,k7),e(k7,Hce),M(f6,Hce,null),e(ji,ULo),e(ji,Uce),e(Uce,JLo),b(f,Eqe,u),b(f,Ro,u),M(m6,Ro,null),e(Ro,YLo),e(Ro,Di),e(Di,KLo),e(Di,BD),e(BD,ZLo),e(Di,e9o),e(Di,ID),e(ID,o9o),e(Di,r9o),e(Ro,t9o),e(Ro,g6),e(g6,a9o),e(g6,Jce),e(Jce,n9o),e(g6,s9o),e(Ro,l9o),e(Ro,it),M(h6,it,null),e(it,i9o),e(it,Yce),e(Yce,d9o),e(it,c9o),e(it,Gi),e(Gi,f9o),e(Gi,Kce),e(Kce,m9o),e(Gi,g9o),e(Gi,qD),e(qD,h9o),e(Gi,p9o),e(it,_9o),M(S7,it,null),e(Ro,u9o),e(Ro,oo),M(p6,oo,null),e(oo,b9o),e(oo,Zce),e(Zce,v9o),e(oo,F9o),e(oo,Ra),e(Ra,T9o),e(Ra,efe),e(efe,M9o),e(Ra,E9o),e(Ra,ofe),e(ofe,C9o),e(Ra,w9o),e(Ra,rfe),e(rfe,A9o),e(Ra,y9o),e(oo,L9o),e(oo,q),e(q,R7),e(R7,tfe),e(tfe,x9o),e(R7,$9o),e(R7,ND),e(ND,k9o),e(R7,S9o),e(q,R9o),e(q,P7),e(P7,afe),e(afe,P9o),e(P7,B9o),e(P7,jD),e(jD,I9o),e(P7,q9o),e(q,N9o),e(q,B7),e(B7,nfe),e(nfe,j9o),e(B7,D9o),e(B7,DD),e(DD,G9o),e(B7,O9o),e(q,V9o),e(q,I7),e(I7,sfe),e(sfe,X9o),e(I7,z9o),e(I7,GD),e(GD,W9o),e(I7,Q9o),e(q,H9o),e(q,q7),e(q7,lfe),e(lfe,U9o),e(q7,J9o),e(q7,OD),e(OD,Y9o),e(q7,K9o),e(q,Z9o),e(q,N7),e(N7,ife),e(ife,exo),e(N7,oxo),e(N7,VD),e(VD,rxo),e(N7,txo),e(q,axo),e(q,j7),e(j7,dfe),e(dfe,nxo),e(j7,sxo),e(j7,XD),e(XD,lxo),e(j7,ixo),e(q,dxo),e(q,D7),e(D7,cfe),e(cfe,cxo),e(D7,fxo),e(D7,zD),e(zD,mxo),e(D7,gxo),e(q,hxo),e(q,G7),e(G7,ffe),e(ffe,pxo),e(G7,_xo),e(G7,WD),e(WD,uxo),e(G7,bxo),e(q,vxo),e(q,O7),e(O7,mfe),e(mfe,Fxo),e(O7,Txo),e(O7,QD),e(QD,Mxo),e(O7,Exo),e(q,Cxo),e(q,V7),e(V7,gfe),e(gfe,wxo),e(V7,Axo),e(V7,HD),e(HD,yxo),e(V7,Lxo),e(q,xxo),e(q,X7),e(X7,hfe),e(hfe,$xo),e(X7,kxo),e(X7,UD),e(UD,Sxo),e(X7,Rxo),e(q,Pxo),e(q,z7),e(z7,pfe),e(pfe,Bxo),e(z7,Ixo),e(z7,JD),e(JD,qxo),e(z7,Nxo),e(q,jxo),e(q,W7),e(W7,_fe),e(_fe,Dxo),e(W7,Gxo),e(W7,YD),e(YD,Oxo),e(W7,Vxo),e(q,Xxo),e(q,Q7),e(Q7,ufe),e(ufe,zxo),e(Q7,Wxo),e(Q7,KD),e(KD,Qxo),e(Q7,Hxo),e(q,Uxo),e(q,H7),e(H7,bfe),e(bfe,Jxo),e(H7,Yxo),e(H7,ZD),e(ZD,Kxo),e(H7,Zxo),e(q,e$o),e(q,U7),e(U7,vfe),e(vfe,o$o),e(U7,r$o),e(U7,eG),e(eG,t$o),e(U7,a$o),e(q,n$o),e(q,J7),e(J7,Ffe),e(Ffe,s$o),e(J7,l$o),e(J7,oG),e(oG,i$o),e(J7,d$o),e(q,c$o),e(q,Y7),e(Y7,Tfe),e(Tfe,f$o),e(Y7,m$o),e(Y7,rG),e(rG,g$o),e(Y7,h$o),e(q,p$o),e(q,K7),e(K7,Mfe),e(Mfe,_$o),e(K7,u$o),e(K7,tG),e(tG,b$o),e(K7,v$o),e(q,F$o),e(q,Z7),e(Z7,Efe),e(Efe,T$o),e(Z7,M$o),e(Z7,aG),e(aG,E$o),e(Z7,C$o),e(q,w$o),e(q,eb),e(eb,Cfe),e(Cfe,A$o),e(eb,y$o),e(eb,nG),e(nG,L$o),e(eb,x$o),e(q,$$o),e(q,ob),e(ob,wfe),e(wfe,k$o),e(ob,S$o),e(ob,sG),e(sG,R$o),e(ob,P$o),e(q,B$o),e(q,rb),e(rb,Afe),e(Afe,I$o),e(rb,q$o),e(rb,lG),e(lG,N$o),e(rb,j$o),e(q,D$o),e(q,tb),e(tb,yfe),e(yfe,G$o),e(tb,O$o),e(tb,iG),e(iG,V$o),e(tb,X$o),e(q,z$o),e(q,ab),e(ab,Lfe),e(Lfe,W$o),e(ab,Q$o),e(ab,dG),e(dG,H$o),e(ab,U$o),e(q,J$o),e(q,nb),e(nb,xfe),e(xfe,Y$o),e(nb,K$o),e(nb,cG),e(cG,Z$o),e(nb,eko),e(q,oko),e(q,sb),e(sb,$fe),e($fe,rko),e(sb,tko),e(sb,fG),e(fG,ako),e(sb,nko),e(q,sko),e(q,lb),e(lb,kfe),e(kfe,lko),e(lb,iko),e(lb,mG),e(mG,dko),e(lb,cko),e(q,fko),e(q,ib),e(ib,Sfe),e(Sfe,mko),e(ib,gko),e(ib,gG),e(gG,hko),e(ib,pko),e(q,_ko),e(q,db),e(db,Rfe),e(Rfe,uko),e(db,bko),e(db,hG),e(hG,vko),e(db,Fko),e(q,Tko),e(q,cb),e(cb,Pfe),e(Pfe,Mko),e(cb,Eko),e(cb,pG),e(pG,Cko),e(cb,wko),e(q,Ako),e(q,fb),e(fb,Bfe),e(Bfe,yko),e(fb,Lko),e(fb,_G),e(_G,xko),e(fb,$ko),e(q,kko),e(q,mb),e(mb,Ife),e(Ife,Sko),e(mb,Rko),e(mb,uG),e(uG,Pko),e(mb,Bko),e(q,Iko),e(q,gb),e(gb,qfe),e(qfe,qko),e(gb,Nko),e(gb,bG),e(bG,jko),e(gb,Dko),e(q,Gko),e(q,hb),e(hb,Nfe),e(Nfe,Oko),e(hb,Vko),e(hb,vG),e(vG,Xko),e(hb,zko),e(q,Wko),e(q,pb),e(pb,jfe),e(jfe,Qko),e(pb,Hko),e(pb,FG),e(FG,Uko),e(pb,Jko),e(q,Yko),e(q,_b),e(_b,Dfe),e(Dfe,Kko),e(_b,Zko),e(_b,TG),e(TG,eSo),e(_b,oSo),e(q,rSo),e(q,ub),e(ub,Gfe),e(Gfe,tSo),e(ub,aSo),e(ub,MG),e(MG,nSo),e(ub,sSo),e(q,lSo),e(q,bb),e(bb,Ofe),e(Ofe,iSo),e(bb,dSo),e(bb,EG),e(EG,cSo),e(bb,fSo),e(q,mSo),e(q,vb),e(vb,Vfe),e(Vfe,gSo),e(vb,hSo),e(vb,CG),e(CG,pSo),e(vb,_So),e(q,uSo),e(q,Fb),e(Fb,Xfe),e(Xfe,bSo),e(Fb,vSo),e(Fb,wG),e(wG,FSo),e(Fb,TSo),e(q,MSo),e(q,Tb),e(Tb,zfe),e(zfe,ESo),e(Tb,CSo),e(Tb,AG),e(AG,wSo),e(Tb,ASo),e(q,ySo),e(q,Mb),e(Mb,Wfe),e(Wfe,LSo),e(Mb,xSo),e(Mb,yG),e(yG,$So),e(Mb,kSo),e(q,SSo),e(q,Eb),e(Eb,Qfe),e(Qfe,RSo),e(Eb,PSo),e(Eb,LG),e(LG,BSo),e(Eb,ISo),e(q,qSo),e(q,Cb),e(Cb,Hfe),e(Hfe,NSo),e(Cb,jSo),e(Cb,xG),e(xG,DSo),e(Cb,GSo),e(oo,OSo),e(oo,wb),e(wb,VSo),e(wb,Ufe),e(Ufe,XSo),e(wb,zSo),e(wb,Jfe),e(Jfe,WSo),e(oo,QSo),M(Ab,oo,null),b(f,Cqe,u),b(f,Oi,u),e(Oi,yb),e(yb,Yfe),M(_6,Yfe,null),e(Oi,HSo),e(Oi,Kfe),e(Kfe,USo),b(f,wqe,u),b(f,Po,u),M(u6,Po,null),e(Po,JSo),e(Po,Vi),e(Vi,YSo),e(Vi,$G),e($G,KSo),e(Vi,ZSo),e(Vi,kG),e(kG,eRo),e(Vi,oRo),e(Po,rRo),e(Po,b6),e(b6,tRo),e(b6,Zfe),e(Zfe,aRo),e(b6,nRo),e(Po,sRo),e(Po,dt),M(v6,dt,null),e(dt,lRo),e(dt,eme),e(eme,iRo),e(dt,dRo),e(dt,Xi),e(Xi,cRo),e(Xi,ome),e(ome,fRo),e(Xi,mRo),e(Xi,SG),e(SG,gRo),e(Xi,hRo),e(dt,pRo),M(Lb,dt,null),e(Po,_Ro),e(Po,ro),M(F6,ro,null),e(ro,uRo),e(ro,rme),e(rme,bRo),e(ro,vRo),e(ro,Pa),e(Pa,FRo),e(Pa,tme),e(tme,TRo),e(Pa,MRo),e(Pa,ame),e(ame,ERo),e(Pa,CRo),e(Pa,nme),e(nme,wRo),e(Pa,ARo),e(ro,yRo),e(ro,Y),e(Y,xb),e(xb,sme),e(sme,LRo),e(xb,xRo),e(xb,RG),e(RG,$Ro),e(xb,kRo),e(Y,SRo),e(Y,$b),e($b,lme),e(lme,RRo),e($b,PRo),e($b,PG),e(PG,BRo),e($b,IRo),e(Y,qRo),e(Y,kb),e(kb,ime),e(ime,NRo),e(kb,jRo),e(kb,BG),e(BG,DRo),e(kb,GRo),e(Y,ORo),e(Y,Sb),e(Sb,dme),e(dme,VRo),e(Sb,XRo),e(Sb,IG),e(IG,zRo),e(Sb,WRo),e(Y,QRo),e(Y,Rb),e(Rb,cme),e(cme,HRo),e(Rb,URo),e(Rb,qG),e(qG,JRo),e(Rb,YRo),e(Y,KRo),e(Y,Pb),e(Pb,fme),e(fme,ZRo),e(Pb,ePo),e(Pb,NG),e(NG,oPo),e(Pb,rPo),e(Y,tPo),e(Y,Bb),e(Bb,mme),e(mme,aPo),e(Bb,nPo),e(Bb,jG),e(jG,sPo),e(Bb,lPo),e(Y,iPo),e(Y,Ib),e(Ib,gme),e(gme,dPo),e(Ib,cPo),e(Ib,DG),e(DG,fPo),e(Ib,mPo),e(Y,gPo),e(Y,qb),e(qb,hme),e(hme,hPo),e(qb,pPo),e(qb,GG),e(GG,_Po),e(qb,uPo),e(Y,bPo),e(Y,Nb),e(Nb,pme),e(pme,vPo),e(Nb,FPo),e(Nb,OG),e(OG,TPo),e(Nb,MPo),e(Y,EPo),e(Y,jb),e(jb,_me),e(_me,CPo),e(jb,wPo),e(jb,VG),e(VG,APo),e(jb,yPo),e(Y,LPo),e(Y,Db),e(Db,ume),e(ume,xPo),e(Db,$Po),e(Db,XG),e(XG,kPo),e(Db,SPo),e(Y,RPo),e(Y,Gb),e(Gb,bme),e(bme,PPo),e(Gb,BPo),e(Gb,zG),e(zG,IPo),e(Gb,qPo),e(Y,NPo),e(Y,Ob),e(Ob,vme),e(vme,jPo),e(Ob,DPo),e(Ob,WG),e(WG,GPo),e(Ob,OPo),e(Y,VPo),e(Y,Vb),e(Vb,Fme),e(Fme,XPo),e(Vb,zPo),e(Vb,QG),e(QG,WPo),e(Vb,QPo),e(Y,HPo),e(Y,Xb),e(Xb,Tme),e(Tme,UPo),e(Xb,JPo),e(Xb,HG),e(HG,YPo),e(Xb,KPo),e(Y,ZPo),e(Y,zb),e(zb,Mme),e(Mme,eBo),e(zb,oBo),e(zb,UG),e(UG,rBo),e(zb,tBo),e(Y,aBo),e(Y,Wb),e(Wb,Eme),e(Eme,nBo),e(Wb,sBo),e(Wb,JG),e(JG,lBo),e(Wb,iBo),e(Y,dBo),e(Y,Qb),e(Qb,Cme),e(Cme,cBo),e(Qb,fBo),e(Qb,YG),e(YG,mBo),e(Qb,gBo),e(Y,hBo),e(Y,Hb),e(Hb,wme),e(wme,pBo),e(Hb,_Bo),e(Hb,KG),e(KG,uBo),e(Hb,bBo),e(Y,vBo),e(Y,Ub),e(Ub,Ame),e(Ame,FBo),e(Ub,TBo),e(Ub,ZG),e(ZG,MBo),e(Ub,EBo),e(Y,CBo),e(Y,Jb),e(Jb,yme),e(yme,wBo),e(Jb,ABo),e(Jb,eO),e(eO,yBo),e(Jb,LBo),e(Y,xBo),e(Y,Yb),e(Yb,Lme),e(Lme,$Bo),e(Yb,kBo),e(Yb,oO),e(oO,SBo),e(Yb,RBo),e(Y,PBo),e(Y,Kb),e(Kb,xme),e(xme,BBo),e(Kb,IBo),e(Kb,rO),e(rO,qBo),e(Kb,NBo),e(Y,jBo),e(Y,Zb),e(Zb,$me),e($me,DBo),e(Zb,GBo),e(Zb,tO),e(tO,OBo),e(Zb,VBo),e(Y,XBo),e(Y,e2),e(e2,kme),e(kme,zBo),e(e2,WBo),e(e2,aO),e(aO,QBo),e(e2,HBo),e(Y,UBo),e(Y,o2),e(o2,Sme),e(Sme,JBo),e(o2,YBo),e(o2,nO),e(nO,KBo),e(o2,ZBo),e(Y,eIo),e(Y,r2),e(r2,Rme),e(Rme,oIo),e(r2,rIo),e(r2,sO),e(sO,tIo),e(r2,aIo),e(Y,nIo),e(Y,t2),e(t2,Pme),e(Pme,sIo),e(t2,lIo),e(t2,lO),e(lO,iIo),e(t2,dIo),e(ro,cIo),e(ro,a2),e(a2,fIo),e(a2,Bme),e(Bme,mIo),e(a2,gIo),e(a2,Ime),e(Ime,hIo),e(ro,pIo),M(n2,ro,null),b(f,Aqe,u),b(f,zi,u),e(zi,s2),e(s2,qme),M(T6,qme,null),e(zi,_Io),e(zi,Nme),e(Nme,uIo),b(f,yqe,u),b(f,Bo,u),M(M6,Bo,null),e(Bo,bIo),e(Bo,Wi),e(Wi,vIo),e(Wi,iO),e(iO,FIo),e(Wi,TIo),e(Wi,dO),e(dO,MIo),e(Wi,EIo),e(Bo,CIo),e(Bo,E6),e(E6,wIo),e(E6,jme),e(jme,AIo),e(E6,yIo),e(Bo,LIo),e(Bo,ct),M(C6,ct,null),e(ct,xIo),e(ct,Dme),e(Dme,$Io),e(ct,kIo),e(ct,Qi),e(Qi,SIo),e(Qi,Gme),e(Gme,RIo),e(Qi,PIo),e(Qi,cO),e(cO,BIo),e(Qi,IIo),e(ct,qIo),M(l2,ct,null),e(Bo,NIo),e(Bo,to),M(w6,to,null),e(to,jIo),e(to,Ome),e(Ome,DIo),e(to,GIo),e(to,Ba),e(Ba,OIo),e(Ba,Vme),e(Vme,VIo),e(Ba,XIo),e(Ba,Xme),e(Xme,zIo),e(Ba,WIo),e(Ba,zme),e(zme,QIo),e(Ba,HIo),e(to,UIo),e(to,Yr),e(Yr,i2),e(i2,Wme),e(Wme,JIo),e(i2,YIo),e(i2,fO),e(fO,KIo),e(i2,ZIo),e(Yr,eqo),e(Yr,d2),e(d2,Qme),e(Qme,oqo),e(d2,rqo),e(d2,mO),e(mO,tqo),e(d2,aqo),e(Yr,nqo),e(Yr,c2),e(c2,Hme),e(Hme,sqo),e(c2,lqo),e(c2,gO),e(gO,iqo),e(c2,dqo),e(Yr,cqo),e(Yr,f2),e(f2,Ume),e(Ume,fqo),e(f2,mqo),e(f2,hO),e(hO,gqo),e(f2,hqo),e(Yr,pqo),e(Yr,m2),e(m2,Jme),e(Jme,_qo),e(m2,uqo),e(m2,pO),e(pO,bqo),e(m2,vqo),e(to,Fqo),e(to,g2),e(g2,Tqo),e(g2,Yme),e(Yme,Mqo),e(g2,Eqo),e(g2,Kme),e(Kme,Cqo),e(to,wqo),M(h2,to,null),b(f,Lqe,u),b(f,Hi,u),e(Hi,p2),e(p2,Zme),M(A6,Zme,null),e(Hi,Aqo),e(Hi,ege),e(ege,yqo),b(f,xqe,u),b(f,Io,u),M(y6,Io,null),e(Io,Lqo),e(Io,Ui),e(Ui,xqo),e(Ui,_O),e(_O,$qo),e(Ui,kqo),e(Ui,uO),e(uO,Sqo),e(Ui,Rqo),e(Io,Pqo),e(Io,L6),e(L6,Bqo),e(L6,oge),e(oge,Iqo),e(L6,qqo),e(Io,Nqo),e(Io,ft),M(x6,ft,null),e(ft,jqo),e(ft,rge),e(rge,Dqo),e(ft,Gqo),e(ft,Ji),e(Ji,Oqo),e(Ji,tge),e(tge,Vqo),e(Ji,Xqo),e(Ji,bO),e(bO,zqo),e(Ji,Wqo),e(ft,Qqo),M(_2,ft,null),e(Io,Hqo),e(Io,ao),M($6,ao,null),e(ao,Uqo),e(ao,age),e(age,Jqo),e(ao,Yqo),e(ao,Ia),e(Ia,Kqo),e(Ia,nge),e(nge,Zqo),e(Ia,eNo),e(Ia,sge),e(sge,oNo),e(Ia,rNo),e(Ia,lge),e(lge,tNo),e(Ia,aNo),e(ao,nNo),e(ao,U),e(U,u2),e(u2,ige),e(ige,sNo),e(u2,lNo),e(u2,vO),e(vO,iNo),e(u2,dNo),e(U,cNo),e(U,b2),e(b2,dge),e(dge,fNo),e(b2,mNo),e(b2,FO),e(FO,gNo),e(b2,hNo),e(U,pNo),e(U,v2),e(v2,cge),e(cge,_No),e(v2,uNo),e(v2,TO),e(TO,bNo),e(v2,vNo),e(U,FNo),e(U,F2),e(F2,fge),e(fge,TNo),e(F2,MNo),e(F2,MO),e(MO,ENo),e(F2,CNo),e(U,wNo),e(U,T2),e(T2,mge),e(mge,ANo),e(T2,yNo),e(T2,EO),e(EO,LNo),e(T2,xNo),e(U,$No),e(U,M2),e(M2,gge),e(gge,kNo),e(M2,SNo),e(M2,CO),e(CO,RNo),e(M2,PNo),e(U,BNo),e(U,E2),e(E2,hge),e(hge,INo),e(E2,qNo),e(E2,wO),e(wO,NNo),e(E2,jNo),e(U,DNo),e(U,C2),e(C2,pge),e(pge,GNo),e(C2,ONo),e(C2,AO),e(AO,VNo),e(C2,XNo),e(U,zNo),e(U,w2),e(w2,_ge),e(_ge,WNo),e(w2,QNo),e(w2,yO),e(yO,HNo),e(w2,UNo),e(U,JNo),e(U,A2),e(A2,uge),e(uge,YNo),e(A2,KNo),e(A2,LO),e(LO,ZNo),e(A2,ejo),e(U,ojo),e(U,y2),e(y2,bge),e(bge,rjo),e(y2,tjo),e(y2,xO),e(xO,ajo),e(y2,njo),e(U,sjo),e(U,L2),e(L2,vge),e(vge,ljo),e(L2,ijo),e(L2,$O),e($O,djo),e(L2,cjo),e(U,fjo),e(U,x2),e(x2,Fge),e(Fge,mjo),e(x2,gjo),e(x2,kO),e(kO,hjo),e(x2,pjo),e(U,_jo),e(U,$2),e($2,Tge),e(Tge,ujo),e($2,bjo),e($2,SO),e(SO,vjo),e($2,Fjo),e(U,Tjo),e(U,k2),e(k2,Mge),e(Mge,Mjo),e(k2,Ejo),e(k2,RO),e(RO,Cjo),e(k2,wjo),e(U,Ajo),e(U,S2),e(S2,Ege),e(Ege,yjo),e(S2,Ljo),e(S2,PO),e(PO,xjo),e(S2,$jo),e(U,kjo),e(U,R2),e(R2,Cge),e(Cge,Sjo),e(R2,Rjo),e(R2,BO),e(BO,Pjo),e(R2,Bjo),e(U,Ijo),e(U,P2),e(P2,wge),e(wge,qjo),e(P2,Njo),e(P2,IO),e(IO,jjo),e(P2,Djo),e(U,Gjo),e(U,B2),e(B2,Age),e(Age,Ojo),e(B2,Vjo),e(B2,qO),e(qO,Xjo),e(B2,zjo),e(U,Wjo),e(U,I2),e(I2,yge),e(yge,Qjo),e(I2,Hjo),e(I2,NO),e(NO,Ujo),e(I2,Jjo),e(U,Yjo),e(U,q2),e(q2,Lge),e(Lge,Kjo),e(q2,Zjo),e(q2,jO),e(jO,eDo),e(q2,oDo),e(U,rDo),e(U,N2),e(N2,xge),e(xge,tDo),e(N2,aDo),e(N2,DO),e(DO,nDo),e(N2,sDo),e(U,lDo),e(U,j2),e(j2,$ge),e($ge,iDo),e(j2,dDo),e(j2,GO),e(GO,cDo),e(j2,fDo),e(U,mDo),e(U,D2),e(D2,kge),e(kge,gDo),e(D2,hDo),e(D2,OO),e(OO,pDo),e(D2,_Do),e(U,uDo),e(U,G2),e(G2,Sge),e(Sge,bDo),e(G2,vDo),e(G2,VO),e(VO,FDo),e(G2,TDo),e(U,MDo),e(U,O2),e(O2,Rge),e(Rge,EDo),e(O2,CDo),e(O2,XO),e(XO,wDo),e(O2,ADo),e(U,yDo),e(U,V2),e(V2,Pge),e(Pge,LDo),e(V2,xDo),e(V2,zO),e(zO,$Do),e(V2,kDo),e(U,SDo),e(U,X2),e(X2,Bge),e(Bge,RDo),e(X2,PDo),e(X2,WO),e(WO,BDo),e(X2,IDo),e(U,qDo),e(U,z2),e(z2,Ige),e(Ige,NDo),e(z2,jDo),e(z2,QO),e(QO,DDo),e(z2,GDo),e(U,ODo),e(U,W2),e(W2,qge),e(qge,VDo),e(W2,XDo),e(W2,HO),e(HO,zDo),e(W2,WDo),e(U,QDo),e(U,Q2),e(Q2,Nge),e(Nge,HDo),e(Q2,UDo),e(Q2,UO),e(UO,JDo),e(Q2,YDo),e(U,KDo),e(U,H2),e(H2,jge),e(jge,ZDo),e(H2,eGo),e(H2,JO),e(JO,oGo),e(H2,rGo),e(U,tGo),e(U,U2),e(U2,Dge),e(Dge,aGo),e(U2,nGo),e(U2,YO),e(YO,sGo),e(U2,lGo),e(ao,iGo),e(ao,J2),e(J2,dGo),e(J2,Gge),e(Gge,cGo),e(J2,fGo),e(J2,Oge),e(Oge,mGo),e(ao,gGo),M(Y2,ao,null),b(f,$qe,u),b(f,Yi,u),e(Yi,K2),e(K2,Vge),M(k6,Vge,null),e(Yi,hGo),e(Yi,Xge),e(Xge,pGo),b(f,kqe,u),b(f,qo,u),M(S6,qo,null),e(qo,_Go),e(qo,Ki),e(Ki,uGo),e(Ki,KO),e(KO,bGo),e(Ki,vGo),e(Ki,ZO),e(ZO,FGo),e(Ki,TGo),e(qo,MGo),e(qo,R6),e(R6,EGo),e(R6,zge),e(zge,CGo),e(R6,wGo),e(qo,AGo),e(qo,mt),M(P6,mt,null),e(mt,yGo),e(mt,Wge),e(Wge,LGo),e(mt,xGo),e(mt,Zi),e(Zi,$Go),e(Zi,Qge),e(Qge,kGo),e(Zi,SGo),e(Zi,eV),e(eV,RGo),e(Zi,PGo),e(mt,BGo),M(Z2,mt,null),e(qo,IGo),e(qo,no),M(B6,no,null),e(no,qGo),e(no,Hge),e(Hge,NGo),e(no,jGo),e(no,qa),e(qa,DGo),e(qa,Uge),e(Uge,GGo),e(qa,OGo),e(qa,Jge),e(Jge,VGo),e(qa,XGo),e(qa,Yge),e(Yge,zGo),e(qa,WGo),e(no,QGo),e(no,V),e(V,ev),e(ev,Kge),e(Kge,HGo),e(ev,UGo),e(ev,oV),e(oV,JGo),e(ev,YGo),e(V,KGo),e(V,ov),e(ov,Zge),e(Zge,ZGo),e(ov,eOo),e(ov,rV),e(rV,oOo),e(ov,rOo),e(V,tOo),e(V,rv),e(rv,ehe),e(ehe,aOo),e(rv,nOo),e(rv,tV),e(tV,sOo),e(rv,lOo),e(V,iOo),e(V,tv),e(tv,ohe),e(ohe,dOo),e(tv,cOo),e(tv,aV),e(aV,fOo),e(tv,mOo),e(V,gOo),e(V,av),e(av,rhe),e(rhe,hOo),e(av,pOo),e(av,nV),e(nV,_Oo),e(av,uOo),e(V,bOo),e(V,nv),e(nv,the),e(the,vOo),e(nv,FOo),e(nv,sV),e(sV,TOo),e(nv,MOo),e(V,EOo),e(V,sv),e(sv,ahe),e(ahe,COo),e(sv,wOo),e(sv,lV),e(lV,AOo),e(sv,yOo),e(V,LOo),e(V,lv),e(lv,nhe),e(nhe,xOo),e(lv,$Oo),e(lv,iV),e(iV,kOo),e(lv,SOo),e(V,ROo),e(V,iv),e(iv,she),e(she,POo),e(iv,BOo),e(iv,dV),e(dV,IOo),e(iv,qOo),e(V,NOo),e(V,dv),e(dv,lhe),e(lhe,jOo),e(dv,DOo),e(dv,cV),e(cV,GOo),e(dv,OOo),e(V,VOo),e(V,cv),e(cv,ihe),e(ihe,XOo),e(cv,zOo),e(cv,fV),e(fV,WOo),e(cv,QOo),e(V,HOo),e(V,fv),e(fv,dhe),e(dhe,UOo),e(fv,JOo),e(fv,mV),e(mV,YOo),e(fv,KOo),e(V,ZOo),e(V,mv),e(mv,che),e(che,eVo),e(mv,oVo),e(mv,gV),e(gV,rVo),e(mv,tVo),e(V,aVo),e(V,gv),e(gv,fhe),e(fhe,nVo),e(gv,sVo),e(gv,hV),e(hV,lVo),e(gv,iVo),e(V,dVo),e(V,hv),e(hv,mhe),e(mhe,cVo),e(hv,fVo),e(hv,pV),e(pV,mVo),e(hv,gVo),e(V,hVo),e(V,pv),e(pv,ghe),e(ghe,pVo),e(pv,_Vo),e(pv,_V),e(_V,uVo),e(pv,bVo),e(V,vVo),e(V,_v),e(_v,hhe),e(hhe,FVo),e(_v,TVo),e(_v,uV),e(uV,MVo),e(_v,EVo),e(V,CVo),e(V,uv),e(uv,phe),e(phe,wVo),e(uv,AVo),e(uv,bV),e(bV,yVo),e(uv,LVo),e(V,xVo),e(V,bv),e(bv,_he),e(_he,$Vo),e(bv,kVo),e(bv,vV),e(vV,SVo),e(bv,RVo),e(V,PVo),e(V,vv),e(vv,uhe),e(uhe,BVo),e(vv,IVo),e(vv,FV),e(FV,qVo),e(vv,NVo),e(V,jVo),e(V,Fv),e(Fv,bhe),e(bhe,DVo),e(Fv,GVo),e(Fv,TV),e(TV,OVo),e(Fv,VVo),e(V,XVo),e(V,Tv),e(Tv,vhe),e(vhe,zVo),e(Tv,WVo),e(Tv,MV),e(MV,QVo),e(Tv,HVo),e(V,UVo),e(V,Mv),e(Mv,Fhe),e(Fhe,JVo),e(Mv,YVo),e(Mv,EV),e(EV,KVo),e(Mv,ZVo),e(V,eXo),e(V,Ev),e(Ev,The),e(The,oXo),e(Ev,rXo),e(Ev,CV),e(CV,tXo),e(Ev,aXo),e(V,nXo),e(V,Cv),e(Cv,Mhe),e(Mhe,sXo),e(Cv,lXo),e(Cv,wV),e(wV,iXo),e(Cv,dXo),e(V,cXo),e(V,wv),e(wv,Ehe),e(Ehe,fXo),e(wv,mXo),e(wv,AV),e(AV,gXo),e(wv,hXo),e(V,pXo),e(V,Av),e(Av,Che),e(Che,_Xo),e(Av,uXo),e(Av,yV),e(yV,bXo),e(Av,vXo),e(V,FXo),e(V,yv),e(yv,whe),e(whe,TXo),e(yv,MXo),e(yv,LV),e(LV,EXo),e(yv,CXo),e(V,wXo),e(V,Lv),e(Lv,Ahe),e(Ahe,AXo),e(Lv,yXo),e(Lv,xV),e(xV,LXo),e(Lv,xXo),e(V,$Xo),e(V,xv),e(xv,yhe),e(yhe,kXo),e(xv,SXo),e(xv,$V),e($V,RXo),e(xv,PXo),e(V,BXo),e(V,$v),e($v,Lhe),e(Lhe,IXo),e($v,qXo),e($v,kV),e(kV,NXo),e($v,jXo),e(V,DXo),e(V,kv),e(kv,xhe),e(xhe,GXo),e(kv,OXo),e(kv,SV),e(SV,VXo),e(kv,XXo),e(V,zXo),e(V,Sv),e(Sv,$he),e($he,WXo),e(Sv,QXo),e(Sv,RV),e(RV,HXo),e(Sv,UXo),e(V,JXo),e(V,Rv),e(Rv,khe),e(khe,YXo),e(Rv,KXo),e(Rv,PV),e(PV,ZXo),e(Rv,ezo),e(V,ozo),e(V,Pv),e(Pv,She),e(She,rzo),e(Pv,tzo),e(Pv,BV),e(BV,azo),e(Pv,nzo),e(V,szo),e(V,Bv),e(Bv,Rhe),e(Rhe,lzo),e(Bv,izo),e(Bv,IV),e(IV,dzo),e(Bv,czo),e(V,fzo),e(V,Iv),e(Iv,Phe),e(Phe,mzo),e(Iv,gzo),e(Iv,qV),e(qV,hzo),e(Iv,pzo),e(V,_zo),e(V,qv),e(qv,Bhe),e(Bhe,uzo),e(qv,bzo),e(qv,NV),e(NV,vzo),e(qv,Fzo),e(V,Tzo),e(V,Nv),e(Nv,Ihe),e(Ihe,Mzo),e(Nv,Ezo),e(Nv,jV),e(jV,Czo),e(Nv,wzo),e(no,Azo),e(no,jv),e(jv,yzo),e(jv,qhe),e(qhe,Lzo),e(jv,xzo),e(jv,Nhe),e(Nhe,$zo),e(no,kzo),M(Dv,no,null),b(f,Sqe,u),b(f,ed,u),e(ed,Gv),e(Gv,jhe),M(I6,jhe,null),e(ed,Szo),e(ed,Dhe),e(Dhe,Rzo),b(f,Rqe,u),b(f,No,u),M(q6,No,null),e(No,Pzo),e(No,od),e(od,Bzo),e(od,DV),e(DV,Izo),e(od,qzo),e(od,GV),e(GV,Nzo),e(od,jzo),e(No,Dzo),e(No,N6),e(N6,Gzo),e(N6,Ghe),e(Ghe,Ozo),e(N6,Vzo),e(No,Xzo),e(No,gt),M(j6,gt,null),e(gt,zzo),e(gt,Ohe),e(Ohe,Wzo),e(gt,Qzo),e(gt,rd),e(rd,Hzo),e(rd,Vhe),e(Vhe,Uzo),e(rd,Jzo),e(rd,OV),e(OV,Yzo),e(rd,Kzo),e(gt,Zzo),M(Ov,gt,null),e(No,eWo),e(No,so),M(D6,so,null),e(so,oWo),e(so,Xhe),e(Xhe,rWo),e(so,tWo),e(so,Na),e(Na,aWo),e(Na,zhe),e(zhe,nWo),e(Na,sWo),e(Na,Whe),e(Whe,lWo),e(Na,iWo),e(Na,Qhe),e(Qhe,dWo),e(Na,cWo),e(so,fWo),e(so,Hhe),e(Hhe,Vv),e(Vv,Uhe),e(Uhe,mWo),e(Vv,gWo),e(Vv,VV),e(VV,hWo),e(Vv,pWo),e(so,_Wo),e(so,Xv),e(Xv,uWo),e(Xv,Jhe),e(Jhe,bWo),e(Xv,vWo),e(Xv,Yhe),e(Yhe,FWo),e(so,TWo),M(zv,so,null),b(f,Pqe,u),b(f,td,u),e(td,Wv),e(Wv,Khe),M(G6,Khe,null),e(td,MWo),e(td,Zhe),e(Zhe,EWo),b(f,Bqe,u),b(f,jo,u),M(O6,jo,null),e(jo,CWo),e(jo,ad),e(ad,wWo),e(ad,XV),e(XV,AWo),e(ad,yWo),e(ad,zV),e(zV,LWo),e(ad,xWo),e(jo,$Wo),e(jo,V6),e(V6,kWo),e(V6,epe),e(epe,SWo),e(V6,RWo),e(jo,PWo),e(jo,ht),M(X6,ht,null),e(ht,BWo),e(ht,ope),e(ope,IWo),e(ht,qWo),e(ht,nd),e(nd,NWo),e(nd,rpe),e(rpe,jWo),e(nd,DWo),e(nd,WV),e(WV,GWo),e(nd,OWo),e(ht,VWo),M(Qv,ht,null),e(jo,XWo),e(jo,lo),M(z6,lo,null),e(lo,zWo),e(lo,tpe),e(tpe,WWo),e(lo,QWo),e(lo,ja),e(ja,HWo),e(ja,ape),e(ape,UWo),e(ja,JWo),e(ja,npe),e(npe,YWo),e(ja,KWo),e(ja,spe),e(spe,ZWo),e(ja,eQo),e(lo,oQo),e(lo,Fe),e(Fe,Hv),e(Hv,lpe),e(lpe,rQo),e(Hv,tQo),e(Hv,QV),e(QV,aQo),e(Hv,nQo),e(Fe,sQo),e(Fe,Uv),e(Uv,ipe),e(ipe,lQo),e(Uv,iQo),e(Uv,HV),e(HV,dQo),e(Uv,cQo),e(Fe,fQo),e(Fe,Jv),e(Jv,dpe),e(dpe,mQo),e(Jv,gQo),e(Jv,UV),e(UV,hQo),e(Jv,pQo),e(Fe,_Qo),e(Fe,Yv),e(Yv,cpe),e(cpe,uQo),e(Yv,bQo),e(Yv,JV),e(JV,vQo),e(Yv,FQo),e(Fe,TQo),e(Fe,Ps),e(Ps,fpe),e(fpe,MQo),e(Ps,EQo),e(Ps,YV),e(YV,CQo),e(Ps,wQo),e(Ps,KV),e(KV,AQo),e(Ps,yQo),e(Fe,LQo),e(Fe,Kv),e(Kv,mpe),e(mpe,xQo),e(Kv,$Qo),e(Kv,ZV),e(ZV,kQo),e(Kv,SQo),e(Fe,RQo),e(Fe,pt),e(pt,gpe),e(gpe,PQo),e(pt,BQo),e(pt,eX),e(eX,IQo),e(pt,qQo),e(pt,oX),e(oX,NQo),e(pt,jQo),e(pt,rX),e(rX,DQo),e(pt,GQo),e(Fe,OQo),e(Fe,Zv),e(Zv,hpe),e(hpe,VQo),e(Zv,XQo),e(Zv,tX),e(tX,zQo),e(Zv,WQo),e(Fe,QQo),e(Fe,e3),e(e3,ppe),e(ppe,HQo),e(e3,UQo),e(e3,aX),e(aX,JQo),e(e3,YQo),e(Fe,KQo),e(Fe,o3),e(o3,_pe),e(_pe,ZQo),e(o3,eHo),e(o3,nX),e(nX,oHo),e(o3,rHo),e(Fe,tHo),e(Fe,r3),e(r3,upe),e(upe,aHo),e(r3,nHo),e(r3,sX),e(sX,sHo),e(r3,lHo),e(Fe,iHo),e(Fe,t3),e(t3,bpe),e(bpe,dHo),e(t3,cHo),e(t3,lX),e(lX,fHo),e(t3,mHo),e(Fe,gHo),e(Fe,a3),e(a3,vpe),e(vpe,hHo),e(a3,pHo),e(a3,iX),e(iX,_Ho),e(a3,uHo),e(Fe,bHo),e(Fe,n3),e(n3,Fpe),e(Fpe,vHo),e(n3,FHo),e(n3,dX),e(dX,THo),e(n3,MHo),e(lo,EHo),e(lo,s3),e(s3,CHo),e(s3,Tpe),e(Tpe,wHo),e(s3,AHo),e(s3,Mpe),e(Mpe,yHo),e(lo,LHo),M(l3,lo,null),b(f,Iqe,u),b(f,sd,u),e(sd,i3),e(i3,Epe),M(W6,Epe,null),e(sd,xHo),e(sd,Cpe),e(Cpe,$Ho),b(f,qqe,u),b(f,Do,u),M(Q6,Do,null),e(Do,kHo),e(Do,ld),e(ld,SHo),e(ld,cX),e(cX,RHo),e(ld,PHo),e(ld,fX),e(fX,BHo),e(ld,IHo),e(Do,qHo),e(Do,H6),e(H6,NHo),e(H6,wpe),e(wpe,jHo),e(H6,DHo),e(Do,GHo),e(Do,_t),M(U6,_t,null),e(_t,OHo),e(_t,Ape),e(Ape,VHo),e(_t,XHo),e(_t,id),e(id,zHo),e(id,ype),e(ype,WHo),e(id,QHo),e(id,mX),e(mX,HHo),e(id,UHo),e(_t,JHo),M(d3,_t,null),e(Do,YHo),e(Do,io),M(J6,io,null),e(io,KHo),e(io,Lpe),e(Lpe,ZHo),e(io,eUo),e(io,Da),e(Da,oUo),e(Da,xpe),e(xpe,rUo),e(Da,tUo),e(Da,$pe),e($pe,aUo),e(Da,nUo),e(Da,kpe),e(kpe,sUo),e(Da,lUo),e(io,iUo),e(io,Spe),e(Spe,c3),e(c3,Rpe),e(Rpe,dUo),e(c3,cUo),e(c3,gX),e(gX,fUo),e(c3,mUo),e(io,gUo),e(io,f3),e(f3,hUo),e(f3,Ppe),e(Ppe,pUo),e(f3,_Uo),e(f3,Bpe),e(Bpe,uUo),e(io,bUo),M(m3,io,null),b(f,Nqe,u),b(f,dd,u),e(dd,g3),e(g3,Ipe),M(Y6,Ipe,null),e(dd,vUo),e(dd,qpe),e(qpe,FUo),b(f,jqe,u),b(f,Go,u),M(K6,Go,null),e(Go,TUo),e(Go,cd),e(cd,MUo),e(cd,hX),e(hX,EUo),e(cd,CUo),e(cd,pX),e(pX,wUo),e(cd,AUo),e(Go,yUo),e(Go,Z6),e(Z6,LUo),e(Z6,Npe),e(Npe,xUo),e(Z6,$Uo),e(Go,kUo),e(Go,ut),M(ey,ut,null),e(ut,SUo),e(ut,jpe),e(jpe,RUo),e(ut,PUo),e(ut,fd),e(fd,BUo),e(fd,Dpe),e(Dpe,IUo),e(fd,qUo),e(fd,_X),e(_X,NUo),e(fd,jUo),e(ut,DUo),M(h3,ut,null),e(Go,GUo),e(Go,co),M(oy,co,null),e(co,OUo),e(co,Gpe),e(Gpe,VUo),e(co,XUo),e(co,Ga),e(Ga,zUo),e(Ga,Ope),e(Ope,WUo),e(Ga,QUo),e(Ga,Vpe),e(Vpe,HUo),e(Ga,UUo),e(Ga,Xpe),e(Xpe,JUo),e(Ga,YUo),e(co,KUo),e(co,ke),e(ke,p3),e(p3,zpe),e(zpe,ZUo),e(p3,eJo),e(p3,uX),e(uX,oJo),e(p3,rJo),e(ke,tJo),e(ke,_3),e(_3,Wpe),e(Wpe,aJo),e(_3,nJo),e(_3,bX),e(bX,sJo),e(_3,lJo),e(ke,iJo),e(ke,u3),e(u3,Qpe),e(Qpe,dJo),e(u3,cJo),e(u3,vX),e(vX,fJo),e(u3,mJo),e(ke,gJo),e(ke,b3),e(b3,Hpe),e(Hpe,hJo),e(b3,pJo),e(b3,FX),e(FX,_Jo),e(b3,uJo),e(ke,bJo),e(ke,v3),e(v3,Upe),e(Upe,vJo),e(v3,FJo),e(v3,TX),e(TX,TJo),e(v3,MJo),e(ke,EJo),e(ke,F3),e(F3,Jpe),e(Jpe,CJo),e(F3,wJo),e(F3,MX),e(MX,AJo),e(F3,yJo),e(ke,LJo),e(ke,T3),e(T3,Ype),e(Ype,xJo),e(T3,$Jo),e(T3,EX),e(EX,kJo),e(T3,SJo),e(ke,RJo),e(ke,M3),e(M3,Kpe),e(Kpe,PJo),e(M3,BJo),e(M3,CX),e(CX,IJo),e(M3,qJo),e(ke,NJo),e(ke,E3),e(E3,Zpe),e(Zpe,jJo),e(E3,DJo),e(E3,wX),e(wX,GJo),e(E3,OJo),e(co,VJo),e(co,C3),e(C3,XJo),e(C3,e_e),e(e_e,zJo),e(C3,WJo),e(C3,o_e),e(o_e,QJo),e(co,HJo),M(w3,co,null),b(f,Dqe,u),b(f,md,u),e(md,A3),e(A3,r_e),M(ry,r_e,null),e(md,UJo),e(md,t_e),e(t_e,JJo),b(f,Gqe,u),b(f,Oo,u),M(ty,Oo,null),e(Oo,YJo),e(Oo,gd),e(gd,KJo),e(gd,AX),e(AX,ZJo),e(gd,eYo),e(gd,yX),e(yX,oYo),e(gd,rYo),e(Oo,tYo),e(Oo,ay),e(ay,aYo),e(ay,a_e),e(a_e,nYo),e(ay,sYo),e(Oo,lYo),e(Oo,bt),M(ny,bt,null),e(bt,iYo),e(bt,n_e),e(n_e,dYo),e(bt,cYo),e(bt,hd),e(hd,fYo),e(hd,s_e),e(s_e,mYo),e(hd,gYo),e(hd,LX),e(LX,hYo),e(hd,pYo),e(bt,_Yo),M(y3,bt,null),e(Oo,uYo),e(Oo,fo),M(sy,fo,null),e(fo,bYo),e(fo,l_e),e(l_e,vYo),e(fo,FYo),e(fo,Oa),e(Oa,TYo),e(Oa,i_e),e(i_e,MYo),e(Oa,EYo),e(Oa,d_e),e(d_e,CYo),e(Oa,wYo),e(Oa,c_e),e(c_e,AYo),e(Oa,yYo),e(fo,LYo),e(fo,Kr),e(Kr,L3),e(L3,f_e),e(f_e,xYo),e(L3,$Yo),e(L3,xX),e(xX,kYo),e(L3,SYo),e(Kr,RYo),e(Kr,x3),e(x3,m_e),e(m_e,PYo),e(x3,BYo),e(x3,$X),e($X,IYo),e(x3,qYo),e(Kr,NYo),e(Kr,$3),e($3,g_e),e(g_e,jYo),e($3,DYo),e($3,kX),e(kX,GYo),e($3,OYo),e(Kr,VYo),e(Kr,k3),e(k3,h_e),e(h_e,XYo),e(k3,zYo),e(k3,SX),e(SX,WYo),e(k3,QYo),e(Kr,HYo),e(Kr,S3),e(S3,p_e),e(p_e,UYo),e(S3,JYo),e(S3,RX),e(RX,YYo),e(S3,KYo),e(fo,ZYo),e(fo,R3),e(R3,eKo),e(R3,__e),e(__e,oKo),e(R3,rKo),e(R3,u_e),e(u_e,tKo),e(fo,aKo),M(P3,fo,null),b(f,Oqe,u),b(f,pd,u),e(pd,B3),e(B3,b_e),M(ly,b_e,null),e(pd,nKo),e(pd,v_e),e(v_e,sKo),b(f,Vqe,u),b(f,Vo,u),M(iy,Vo,null),e(Vo,lKo),e(Vo,_d),e(_d,iKo),e(_d,PX),e(PX,dKo),e(_d,cKo),e(_d,BX),e(BX,fKo),e(_d,mKo),e(Vo,gKo),e(Vo,dy),e(dy,hKo),e(dy,F_e),e(F_e,pKo),e(dy,_Ko),e(Vo,uKo),e(Vo,vt),M(cy,vt,null),e(vt,bKo),e(vt,T_e),e(T_e,vKo),e(vt,FKo),e(vt,ud),e(ud,TKo),e(ud,M_e),e(M_e,MKo),e(ud,EKo),e(ud,IX),e(IX,CKo),e(ud,wKo),e(vt,AKo),M(I3,vt,null),e(Vo,yKo),e(Vo,mo),M(fy,mo,null),e(mo,LKo),e(mo,E_e),e(E_e,xKo),e(mo,$Ko),e(mo,Va),e(Va,kKo),e(Va,C_e),e(C_e,SKo),e(Va,RKo),e(Va,w_e),e(w_e,PKo),e(Va,BKo),e(Va,A_e),e(A_e,IKo),e(Va,qKo),e(mo,NKo),e(mo,Se),e(Se,q3),e(q3,y_e),e(y_e,jKo),e(q3,DKo),e(q3,qX),e(qX,GKo),e(q3,OKo),e(Se,VKo),e(Se,N3),e(N3,L_e),e(L_e,XKo),e(N3,zKo),e(N3,NX),e(NX,WKo),e(N3,QKo),e(Se,HKo),e(Se,j3),e(j3,x_e),e(x_e,UKo),e(j3,JKo),e(j3,jX),e(jX,YKo),e(j3,KKo),e(Se,ZKo),e(Se,D3),e(D3,$_e),e($_e,eZo),e(D3,oZo),e(D3,DX),e(DX,rZo),e(D3,tZo),e(Se,aZo),e(Se,G3),e(G3,k_e),e(k_e,nZo),e(G3,sZo),e(G3,GX),e(GX,lZo),e(G3,iZo),e(Se,dZo),e(Se,O3),e(O3,S_e),e(S_e,cZo),e(O3,fZo),e(O3,OX),e(OX,mZo),e(O3,gZo),e(Se,hZo),e(Se,V3),e(V3,R_e),e(R_e,pZo),e(V3,_Zo),e(V3,VX),e(VX,uZo),e(V3,bZo),e(Se,vZo),e(Se,X3),e(X3,P_e),e(P_e,FZo),e(X3,TZo),e(X3,XX),e(XX,MZo),e(X3,EZo),e(Se,CZo),e(Se,z3),e(z3,B_e),e(B_e,wZo),e(z3,AZo),e(z3,zX),e(zX,yZo),e(z3,LZo),e(mo,xZo),e(mo,W3),e(W3,$Zo),e(W3,I_e),e(I_e,kZo),e(W3,SZo),e(W3,q_e),e(q_e,RZo),e(mo,PZo),M(Q3,mo,null),b(f,Xqe,u),b(f,bd,u),e(bd,H3),e(H3,N_e),M(my,N_e,null),e(bd,BZo),e(bd,j_e),e(j_e,IZo),b(f,zqe,u),b(f,Xo,u),M(gy,Xo,null),e(Xo,qZo),e(Xo,vd),e(vd,NZo),e(vd,WX),e(WX,jZo),e(vd,DZo),e(vd,QX),e(QX,GZo),e(vd,OZo),e(Xo,VZo),e(Xo,hy),e(hy,XZo),e(hy,D_e),e(D_e,zZo),e(hy,WZo),e(Xo,QZo),e(Xo,Ft),M(py,Ft,null),e(Ft,HZo),e(Ft,G_e),e(G_e,UZo),e(Ft,JZo),e(Ft,Fd),e(Fd,YZo),e(Fd,O_e),e(O_e,KZo),e(Fd,ZZo),e(Fd,HX),e(HX,eer),e(Fd,oer),e(Ft,rer),M(U3,Ft,null),e(Xo,ter),e(Xo,go),M(_y,go,null),e(go,aer),e(go,V_e),e(V_e,ner),e(go,ser),e(go,Xa),e(Xa,ler),e(Xa,X_e),e(X_e,ier),e(Xa,der),e(Xa,z_e),e(z_e,cer),e(Xa,fer),e(Xa,W_e),e(W_e,mer),e(Xa,ger),e(go,her),e(go,uy),e(uy,J3),e(J3,Q_e),e(Q_e,per),e(J3,_er),e(J3,UX),e(UX,uer),e(J3,ber),e(uy,ver),e(uy,Y3),e(Y3,H_e),e(H_e,Fer),e(Y3,Ter),e(Y3,JX),e(JX,Mer),e(Y3,Eer),e(go,Cer),e(go,K3),e(K3,wer),e(K3,U_e),e(U_e,Aer),e(K3,yer),e(K3,J_e),e(J_e,Ler),e(go,xer),M(Z3,go,null),b(f,Wqe,u),b(f,Td,u),e(Td,eF),e(eF,Y_e),M(by,Y_e,null),e(Td,$er),e(Td,K_e),e(K_e,ker),b(f,Qqe,u),b(f,zo,u),M(vy,zo,null),e(zo,Ser),e(zo,Md),e(Md,Rer),e(Md,YX),e(YX,Per),e(Md,Ber),e(Md,KX),e(KX,Ier),e(Md,qer),e(zo,Ner),e(zo,Fy),e(Fy,jer),e(Fy,Z_e),e(Z_e,Der),e(Fy,Ger),e(zo,Oer),e(zo,Tt),M(Ty,Tt,null),e(Tt,Ver),e(Tt,eue),e(eue,Xer),e(Tt,zer),e(Tt,Ed),e(Ed,Wer),e(Ed,oue),e(oue,Qer),e(Ed,Her),e(Ed,ZX),e(ZX,Uer),e(Ed,Jer),e(Tt,Yer),M(oF,Tt,null),e(zo,Ker),e(zo,ho),M(My,ho,null),e(ho,Zer),e(ho,rue),e(rue,eor),e(ho,oor),e(ho,za),e(za,ror),e(za,tue),e(tue,tor),e(za,aor),e(za,aue),e(aue,nor),e(za,sor),e(za,nue),e(nue,lor),e(za,ior),e(ho,dor),e(ho,Zr),e(Zr,rF),e(rF,sue),e(sue,cor),e(rF,mor),e(rF,ez),e(ez,gor),e(rF,hor),e(Zr,por),e(Zr,tF),e(tF,lue),e(lue,_or),e(tF,uor),e(tF,oz),e(oz,bor),e(tF,vor),e(Zr,For),e(Zr,aF),e(aF,iue),e(iue,Tor),e(aF,Mor),e(aF,rz),e(rz,Eor),e(aF,Cor),e(Zr,wor),e(Zr,nF),e(nF,due),e(due,Aor),e(nF,yor),e(nF,tz),e(tz,Lor),e(nF,xor),e(Zr,$or),e(Zr,sF),e(sF,cue),e(cue,kor),e(sF,Sor),e(sF,az),e(az,Ror),e(sF,Por),e(ho,Bor),e(ho,lF),e(lF,Ior),e(lF,fue),e(fue,qor),e(lF,Nor),e(lF,mue),e(mue,jor),e(ho,Dor),M(iF,ho,null),b(f,Hqe,u),b(f,Cd,u),e(Cd,dF),e(dF,gue),M(Ey,gue,null),e(Cd,Gor),e(Cd,hue),e(hue,Oor),b(f,Uqe,u),b(f,Wo,u),M(Cy,Wo,null),e(Wo,Vor),e(Wo,wd),e(wd,Xor),e(wd,nz),e(nz,zor),e(wd,Wor),e(wd,sz),e(sz,Qor),e(wd,Hor),e(Wo,Uor),e(Wo,wy),e(wy,Jor),e(wy,pue),e(pue,Yor),e(wy,Kor),e(Wo,Zor),e(Wo,Mt),M(Ay,Mt,null),e(Mt,err),e(Mt,_ue),e(_ue,orr),e(Mt,rrr),e(Mt,Ad),e(Ad,trr),e(Ad,uue),e(uue,arr),e(Ad,nrr),e(Ad,lz),e(lz,srr),e(Ad,lrr),e(Mt,irr),M(cF,Mt,null),e(Wo,drr),e(Wo,po),M(yy,po,null),e(po,crr),e(po,bue),e(bue,frr),e(po,mrr),e(po,Wa),e(Wa,grr),e(Wa,vue),e(vue,hrr),e(Wa,prr),e(Wa,Fue),e(Fue,_rr),e(Wa,urr),e(Wa,Tue),e(Tue,brr),e(Wa,vrr),e(po,Frr),e(po,yd),e(yd,fF),e(fF,Mue),e(Mue,Trr),e(fF,Mrr),e(fF,iz),e(iz,Err),e(fF,Crr),e(yd,wrr),e(yd,mF),e(mF,Eue),e(Eue,Arr),e(mF,yrr),e(mF,dz),e(dz,Lrr),e(mF,xrr),e(yd,$rr),e(yd,gF),e(gF,Cue),e(Cue,krr),e(gF,Srr),e(gF,cz),e(cz,Rrr),e(gF,Prr),e(po,Brr),e(po,hF),e(hF,Irr),e(hF,wue),e(wue,qrr),e(hF,Nrr),e(hF,Aue),e(Aue,jrr),e(po,Drr),M(pF,po,null),b(f,Jqe,u),b(f,Ld,u),e(Ld,_F),e(_F,yue),M(Ly,yue,null),e(Ld,Grr),e(Ld,Lue),e(Lue,Orr),b(f,Yqe,u),b(f,Qo,u),M(xy,Qo,null),e(Qo,Vrr),e(Qo,xd),e(xd,Xrr),e(xd,fz),e(fz,zrr),e(xd,Wrr),e(xd,mz),e(mz,Qrr),e(xd,Hrr),e(Qo,Urr),e(Qo,$y),e($y,Jrr),e($y,xue),e(xue,Yrr),e($y,Krr),e(Qo,Zrr),e(Qo,Et),M(ky,Et,null),e(Et,etr),e(Et,$ue),e($ue,otr),e(Et,rtr),e(Et,$d),e($d,ttr),e($d,kue),e(kue,atr),e($d,ntr),e($d,gz),e(gz,str),e($d,ltr),e(Et,itr),M(uF,Et,null),e(Qo,dtr),e(Qo,_o),M(Sy,_o,null),e(_o,ctr),e(_o,Sue),e(Sue,ftr),e(_o,mtr),e(_o,Qa),e(Qa,gtr),e(Qa,Rue),e(Rue,htr),e(Qa,ptr),e(Qa,Pue),e(Pue,_tr),e(Qa,utr),e(Qa,Bue),e(Bue,btr),e(Qa,vtr),e(_o,Ftr),e(_o,Ry),e(Ry,bF),e(bF,Iue),e(Iue,Ttr),e(bF,Mtr),e(bF,hz),e(hz,Etr),e(bF,Ctr),e(Ry,wtr),e(Ry,vF),e(vF,que),e(que,Atr),e(vF,ytr),e(vF,pz),e(pz,Ltr),e(vF,xtr),e(_o,$tr),e(_o,FF),e(FF,ktr),e(FF,Nue),e(Nue,Str),e(FF,Rtr),e(FF,jue),e(jue,Ptr),e(_o,Btr),M(TF,_o,null),b(f,Kqe,u),b(f,kd,u),e(kd,MF),e(MF,Due),M(Py,Due,null),e(kd,Itr),e(kd,Gue),e(Gue,qtr),b(f,Zqe,u),b(f,Ho,u),M(By,Ho,null),e(Ho,Ntr),e(Ho,Sd),e(Sd,jtr),e(Sd,_z),e(_z,Dtr),e(Sd,Gtr),e(Sd,uz),e(uz,Otr),e(Sd,Vtr),e(Ho,Xtr),e(Ho,Iy),e(Iy,ztr),e(Iy,Oue),e(Oue,Wtr),e(Iy,Qtr),e(Ho,Htr),e(Ho,Ct),M(qy,Ct,null),e(Ct,Utr),e(Ct,Vue),e(Vue,Jtr),e(Ct,Ytr),e(Ct,Rd),e(Rd,Ktr),e(Rd,Xue),e(Xue,Ztr),e(Rd,ear),e(Rd,bz),e(bz,oar),e(Rd,rar),e(Ct,tar),M(EF,Ct,null),e(Ho,aar),e(Ho,uo),M(Ny,uo,null),e(uo,nar),e(uo,zue),e(zue,sar),e(uo,lar),e(uo,Ha),e(Ha,iar),e(Ha,Wue),e(Wue,dar),e(Ha,car),e(Ha,Que),e(Que,far),e(Ha,mar),e(Ha,Hue),e(Hue,gar),e(Ha,har),e(uo,par),e(uo,Uue),e(Uue,CF),e(CF,Jue),e(Jue,_ar),e(CF,uar),e(CF,vz),e(vz,bar),e(CF,Far),e(uo,Tar),e(uo,wF),e(wF,Mar),e(wF,Yue),e(Yue,Ear),e(wF,Car),e(wF,Kue),e(Kue,war),e(uo,Aar),M(AF,uo,null),b(f,eNe,u),b(f,Pd,u),e(Pd,yF),e(yF,Zue),M(jy,Zue,null),e(Pd,yar),e(Pd,e1e),e(e1e,Lar),b(f,oNe,u),b(f,Uo,u),M(Dy,Uo,null),e(Uo,xar),e(Uo,Bd),e(Bd,$ar),e(Bd,Fz),e(Fz,kar),e(Bd,Sar),e(Bd,Tz),e(Tz,Rar),e(Bd,Par),e(Uo,Bar),e(Uo,Gy),e(Gy,Iar),e(Gy,o1e),e(o1e,qar),e(Gy,Nar),e(Uo,jar),e(Uo,wt),M(Oy,wt,null),e(wt,Dar),e(wt,r1e),e(r1e,Gar),e(wt,Oar),e(wt,Id),e(Id,Var),e(Id,t1e),e(t1e,Xar),e(Id,zar),e(Id,Mz),e(Mz,War),e(Id,Qar),e(wt,Har),M(LF,wt,null),e(Uo,Uar),e(Uo,bo),M(Vy,bo,null),e(bo,Jar),e(bo,a1e),e(a1e,Yar),e(bo,Kar),e(bo,Ua),e(Ua,Zar),e(Ua,n1e),e(n1e,enr),e(Ua,onr),e(Ua,s1e),e(s1e,rnr),e(Ua,tnr),e(Ua,l1e),e(l1e,anr),e(Ua,nnr),e(bo,snr),e(bo,Ja),e(Ja,xF),e(xF,i1e),e(i1e,lnr),e(xF,inr),e(xF,Ez),e(Ez,dnr),e(xF,cnr),e(Ja,fnr),e(Ja,$F),e($F,d1e),e(d1e,mnr),e($F,gnr),e($F,Cz),e(Cz,hnr),e($F,pnr),e(Ja,_nr),e(Ja,kF),e(kF,c1e),e(c1e,unr),e(kF,bnr),e(kF,wz),e(wz,vnr),e(kF,Fnr),e(Ja,Tnr),e(Ja,SF),e(SF,f1e),e(f1e,Mnr),e(SF,Enr),e(SF,Az),e(Az,Cnr),e(SF,wnr),e(bo,Anr),e(bo,RF),e(RF,ynr),e(RF,m1e),e(m1e,Lnr),e(RF,xnr),e(RF,g1e),e(g1e,$nr),e(bo,knr),M(PF,bo,null),b(f,rNe,u),b(f,qd,u),e(qd,BF),e(BF,h1e),M(Xy,h1e,null),e(qd,Snr),e(qd,p1e),e(p1e,Rnr),b(f,tNe,u),b(f,Jo,u),M(zy,Jo,null),e(Jo,Pnr),e(Jo,Nd),e(Nd,Bnr),e(Nd,yz),e(yz,Inr),e(Nd,qnr),e(Nd,Lz),e(Lz,Nnr),e(Nd,jnr),e(Jo,Dnr),e(Jo,Wy),e(Wy,Gnr),e(Wy,_1e),e(_1e,Onr),e(Wy,Vnr),e(Jo,Xnr),e(Jo,At),M(Qy,At,null),e(At,znr),e(At,u1e),e(u1e,Wnr),e(At,Qnr),e(At,jd),e(jd,Hnr),e(jd,b1e),e(b1e,Unr),e(jd,Jnr),e(jd,xz),e(xz,Ynr),e(jd,Knr),e(At,Znr),M(IF,At,null),e(Jo,esr),e(Jo,vo),M(Hy,vo,null),e(vo,osr),e(vo,v1e),e(v1e,rsr),e(vo,tsr),e(vo,Ya),e(Ya,asr),e(Ya,F1e),e(F1e,nsr),e(Ya,ssr),e(Ya,T1e),e(T1e,lsr),e(Ya,isr),e(Ya,M1e),e(M1e,dsr),e(Ya,csr),e(vo,fsr),e(vo,E1e),e(E1e,qF),e(qF,C1e),e(C1e,msr),e(qF,gsr),e(qF,$z),e($z,hsr),e(qF,psr),e(vo,_sr),e(vo,NF),e(NF,usr),e(NF,w1e),e(w1e,bsr),e(NF,vsr),e(NF,A1e),e(A1e,Fsr),e(vo,Tsr),M(jF,vo,null),b(f,aNe,u),b(f,Dd,u),e(Dd,DF),e(DF,y1e),M(Uy,y1e,null),e(Dd,Msr),e(Dd,L1e),e(L1e,Esr),b(f,nNe,u),b(f,Yo,u),M(Jy,Yo,null),e(Yo,Csr),e(Yo,Gd),e(Gd,wsr),e(Gd,kz),e(kz,Asr),e(Gd,ysr),e(Gd,Sz),e(Sz,Lsr),e(Gd,xsr),e(Yo,$sr),e(Yo,Yy),e(Yy,ksr),e(Yy,x1e),e(x1e,Ssr),e(Yy,Rsr),e(Yo,Psr),e(Yo,yt),M(Ky,yt,null),e(yt,Bsr),e(yt,$1e),e($1e,Isr),e(yt,qsr),e(yt,Od),e(Od,Nsr),e(Od,k1e),e(k1e,jsr),e(Od,Dsr),e(Od,Rz),e(Rz,Gsr),e(Od,Osr),e(yt,Vsr),M(GF,yt,null),e(Yo,Xsr),e(Yo,wr),M(Zy,wr,null),e(wr,zsr),e(wr,S1e),e(S1e,Wsr),e(wr,Qsr),e(wr,Ka),e(Ka,Hsr),e(Ka,R1e),e(R1e,Usr),e(Ka,Jsr),e(Ka,P1e),e(P1e,Ysr),e(Ka,Ksr),e(Ka,B1e),e(B1e,Zsr),e(Ka,elr),e(wr,olr),e(wr,N),e(N,OF),e(OF,I1e),e(I1e,rlr),e(OF,tlr),e(OF,Pz),e(Pz,alr),e(OF,nlr),e(N,slr),e(N,VF),e(VF,q1e),e(q1e,llr),e(VF,ilr),e(VF,Bz),e(Bz,dlr),e(VF,clr),e(N,flr),e(N,XF),e(XF,N1e),e(N1e,mlr),e(XF,glr),e(XF,Iz),e(Iz,hlr),e(XF,plr),e(N,_lr),e(N,zF),e(zF,j1e),e(j1e,ulr),e(zF,blr),e(zF,qz),e(qz,vlr),e(zF,Flr),e(N,Tlr),e(N,WF),e(WF,D1e),e(D1e,Mlr),e(WF,Elr),e(WF,Nz),e(Nz,Clr),e(WF,wlr),e(N,Alr),e(N,QF),e(QF,G1e),e(G1e,ylr),e(QF,Llr),e(QF,jz),e(jz,xlr),e(QF,$lr),e(N,klr),e(N,HF),e(HF,O1e),e(O1e,Slr),e(HF,Rlr),e(HF,Dz),e(Dz,Plr),e(HF,Blr),e(N,Ilr),e(N,UF),e(UF,V1e),e(V1e,qlr),e(UF,Nlr),e(UF,Gz),e(Gz,jlr),e(UF,Dlr),e(N,Glr),e(N,JF),e(JF,X1e),e(X1e,Olr),e(JF,Vlr),e(JF,Oz),e(Oz,Xlr),e(JF,zlr),e(N,Wlr),e(N,YF),e(YF,z1e),e(z1e,Qlr),e(YF,Hlr),e(YF,Vz),e(Vz,Ulr),e(YF,Jlr),e(N,Ylr),e(N,KF),e(KF,W1e),e(W1e,Klr),e(KF,Zlr),e(KF,Xz),e(Xz,eir),e(KF,oir),e(N,rir),e(N,ZF),e(ZF,Q1e),e(Q1e,tir),e(ZF,air),e(ZF,zz),e(zz,nir),e(ZF,sir),e(N,lir),e(N,eT),e(eT,H1e),e(H1e,iir),e(eT,dir),e(eT,Wz),e(Wz,cir),e(eT,fir),e(N,mir),e(N,oT),e(oT,U1e),e(U1e,gir),e(oT,hir),e(oT,Qz),e(Qz,pir),e(oT,_ir),e(N,uir),e(N,rT),e(rT,J1e),e(J1e,bir),e(rT,vir),e(rT,Hz),e(Hz,Fir),e(rT,Tir),e(N,Mir),e(N,tT),e(tT,Y1e),e(Y1e,Eir),e(tT,Cir),e(tT,Uz),e(Uz,wir),e(tT,Air),e(N,yir),e(N,aT),e(aT,K1e),e(K1e,Lir),e(aT,xir),e(aT,Jz),e(Jz,$ir),e(aT,kir),e(N,Sir),e(N,Bs),e(Bs,Z1e),e(Z1e,Rir),e(Bs,Pir),e(Bs,Yz),e(Yz,Bir),e(Bs,Iir),e(Bs,Kz),e(Kz,qir),e(Bs,Nir),e(N,jir),e(N,nT),e(nT,e7e),e(e7e,Dir),e(nT,Gir),e(nT,Zz),e(Zz,Oir),e(nT,Vir),e(N,Xir),e(N,sT),e(sT,o7e),e(o7e,zir),e(sT,Wir),e(sT,eW),e(eW,Qir),e(sT,Hir),e(N,Uir),e(N,lT),e(lT,r7e),e(r7e,Jir),e(lT,Yir),e(lT,oW),e(oW,Kir),e(lT,Zir),e(N,edr),e(N,iT),e(iT,t7e),e(t7e,odr),e(iT,rdr),e(iT,rW),e(rW,tdr),e(iT,adr),e(N,ndr),e(N,dT),e(dT,a7e),e(a7e,sdr),e(dT,ldr),e(dT,tW),e(tW,idr),e(dT,ddr),e(N,cdr),e(N,cT),e(cT,n7e),e(n7e,fdr),e(cT,mdr),e(cT,aW),e(aW,gdr),e(cT,hdr),e(N,pdr),e(N,fT),e(fT,s7e),e(s7e,_dr),e(fT,udr),e(fT,nW),e(nW,bdr),e(fT,vdr),e(N,Fdr),e(N,mT),e(mT,l7e),e(l7e,Tdr),e(mT,Mdr),e(mT,sW),e(sW,Edr),e(mT,Cdr),e(N,wdr),e(N,gT),e(gT,i7e),e(i7e,Adr),e(gT,ydr),e(gT,lW),e(lW,Ldr),e(gT,xdr),e(N,$dr),e(N,hT),e(hT,d7e),e(d7e,kdr),e(hT,Sdr),e(hT,iW),e(iW,Rdr),e(hT,Pdr),e(N,Bdr),e(N,pT),e(pT,c7e),e(c7e,Idr),e(pT,qdr),e(pT,dW),e(dW,Ndr),e(pT,jdr),e(N,Ddr),e(N,_T),e(_T,f7e),e(f7e,Gdr),e(_T,Odr),e(_T,cW),e(cW,Vdr),e(_T,Xdr),e(N,zdr),e(N,uT),e(uT,m7e),e(m7e,Wdr),e(uT,Qdr),e(uT,fW),e(fW,Hdr),e(uT,Udr),e(N,Jdr),e(N,bT),e(bT,g7e),e(g7e,Ydr),e(bT,Kdr),e(bT,mW),e(mW,Zdr),e(bT,ecr),e(N,ocr),e(N,vT),e(vT,h7e),e(h7e,rcr),e(vT,tcr),e(vT,gW),e(gW,acr),e(vT,ncr),e(N,scr),e(N,FT),e(FT,p7e),e(p7e,lcr),e(FT,icr),e(FT,hW),e(hW,dcr),e(FT,ccr),e(N,fcr),e(N,TT),e(TT,_7e),e(_7e,mcr),e(TT,gcr),e(TT,pW),e(pW,hcr),e(TT,pcr),e(N,_cr),e(N,MT),e(MT,u7e),e(u7e,ucr),e(MT,bcr),e(MT,_W),e(_W,vcr),e(MT,Fcr),e(N,Tcr),e(N,ET),e(ET,b7e),e(b7e,Mcr),e(ET,Ecr),e(ET,uW),e(uW,Ccr),e(ET,wcr),e(N,Acr),e(N,CT),e(CT,v7e),e(v7e,ycr),e(CT,Lcr),e(CT,bW),e(bW,xcr),e(CT,$cr),e(N,kcr),e(N,wT),e(wT,F7e),e(F7e,Scr),e(wT,Rcr),e(wT,vW),e(vW,Pcr),e(wT,Bcr),e(N,Icr),e(N,AT),e(AT,T7e),e(T7e,qcr),e(AT,Ncr),e(AT,FW),e(FW,jcr),e(AT,Dcr),e(N,Gcr),e(N,yT),e(yT,M7e),e(M7e,Ocr),e(yT,Vcr),e(yT,TW),e(TW,Xcr),e(yT,zcr),e(N,Wcr),e(N,LT),e(LT,E7e),e(E7e,Qcr),e(LT,Hcr),e(LT,MW),e(MW,Ucr),e(LT,Jcr),e(N,Ycr),e(N,xT),e(xT,C7e),e(C7e,Kcr),e(xT,Zcr),e(xT,EW),e(EW,efr),e(xT,ofr),e(N,rfr),e(N,$T),e($T,w7e),e(w7e,tfr),e($T,afr),e($T,CW),e(CW,nfr),e($T,sfr),e(N,lfr),e(N,kT),e(kT,A7e),e(A7e,ifr),e(kT,dfr),e(kT,wW),e(wW,cfr),e(kT,ffr),e(N,mfr),e(N,ST),e(ST,y7e),e(y7e,gfr),e(ST,hfr),e(ST,AW),e(AW,pfr),e(ST,_fr),e(wr,ufr),M(RT,wr,null),b(f,sNe,u),b(f,Vd,u),e(Vd,PT),e(PT,L7e),M(eL,L7e,null),e(Vd,bfr),e(Vd,x7e),e(x7e,vfr),b(f,lNe,u),b(f,Ko,u),M(oL,Ko,null),e(Ko,Ffr),e(Ko,Xd),e(Xd,Tfr),e(Xd,yW),e(yW,Mfr),e(Xd,Efr),e(Xd,LW),e(LW,Cfr),e(Xd,wfr),e(Ko,Afr),e(Ko,rL),e(rL,yfr),e(rL,$7e),e($7e,Lfr),e(rL,xfr),e(Ko,$fr),e(Ko,Lt),M(tL,Lt,null),e(Lt,kfr),e(Lt,k7e),e(k7e,Sfr),e(Lt,Rfr),e(Lt,zd),e(zd,Pfr),e(zd,S7e),e(S7e,Bfr),e(zd,Ifr),e(zd,xW),e(xW,qfr),e(zd,Nfr),e(Lt,jfr),M(BT,Lt,null),e(Ko,Dfr),e(Ko,Ar),M(aL,Ar,null),e(Ar,Gfr),e(Ar,R7e),e(R7e,Ofr),e(Ar,Vfr),e(Ar,Za),e(Za,Xfr),e(Za,P7e),e(P7e,zfr),e(Za,Wfr),e(Za,B7e),e(B7e,Qfr),e(Za,Hfr),e(Za,I7e),e(I7e,Ufr),e(Za,Jfr),e(Ar,Yfr),e(Ar,se),e(se,IT),e(IT,q7e),e(q7e,Kfr),e(IT,Zfr),e(IT,$W),e($W,emr),e(IT,omr),e(se,rmr),e(se,qT),e(qT,N7e),e(N7e,tmr),e(qT,amr),e(qT,kW),e(kW,nmr),e(qT,smr),e(se,lmr),e(se,NT),e(NT,j7e),e(j7e,imr),e(NT,dmr),e(NT,SW),e(SW,cmr),e(NT,fmr),e(se,mmr),e(se,jT),e(jT,D7e),e(D7e,gmr),e(jT,hmr),e(jT,RW),e(RW,pmr),e(jT,_mr),e(se,umr),e(se,DT),e(DT,G7e),e(G7e,bmr),e(DT,vmr),e(DT,PW),e(PW,Fmr),e(DT,Tmr),e(se,Mmr),e(se,GT),e(GT,O7e),e(O7e,Emr),e(GT,Cmr),e(GT,BW),e(BW,wmr),e(GT,Amr),e(se,ymr),e(se,OT),e(OT,V7e),e(V7e,Lmr),e(OT,xmr),e(OT,IW),e(IW,$mr),e(OT,kmr),e(se,Smr),e(se,VT),e(VT,X7e),e(X7e,Rmr),e(VT,Pmr),e(VT,qW),e(qW,Bmr),e(VT,Imr),e(se,qmr),e(se,XT),e(XT,z7e),e(z7e,Nmr),e(XT,jmr),e(XT,NW),e(NW,Dmr),e(XT,Gmr),e(se,Omr),e(se,zT),e(zT,W7e),e(W7e,Vmr),e(zT,Xmr),e(zT,jW),e(jW,zmr),e(zT,Wmr),e(se,Qmr),e(se,WT),e(WT,Q7e),e(Q7e,Hmr),e(WT,Umr),e(WT,DW),e(DW,Jmr),e(WT,Ymr),e(se,Kmr),e(se,QT),e(QT,H7e),e(H7e,Zmr),e(QT,egr),e(QT,GW),e(GW,ogr),e(QT,rgr),e(se,tgr),e(se,HT),e(HT,U7e),e(U7e,agr),e(HT,ngr),e(HT,OW),e(OW,sgr),e(HT,lgr),e(se,igr),e(se,UT),e(UT,J7e),e(J7e,dgr),e(UT,cgr),e(UT,VW),e(VW,fgr),e(UT,mgr),e(se,ggr),e(se,JT),e(JT,Y7e),e(Y7e,hgr),e(JT,pgr),e(JT,XW),e(XW,_gr),e(JT,ugr),e(se,bgr),e(se,YT),e(YT,K7e),e(K7e,vgr),e(YT,Fgr),e(YT,zW),e(zW,Tgr),e(YT,Mgr),e(se,Egr),e(se,KT),e(KT,Z7e),e(Z7e,Cgr),e(KT,wgr),e(KT,WW),e(WW,Agr),e(KT,ygr),e(se,Lgr),e(se,ZT),e(ZT,ebe),e(ebe,xgr),e(ZT,$gr),e(ZT,QW),e(QW,kgr),e(ZT,Sgr),e(se,Rgr),e(se,e8),e(e8,obe),e(obe,Pgr),e(e8,Bgr),e(e8,HW),e(HW,Igr),e(e8,qgr),e(se,Ngr),e(se,o8),e(o8,rbe),e(rbe,jgr),e(o8,Dgr),e(o8,UW),e(UW,Ggr),e(o8,Ogr),e(se,Vgr),e(se,r8),e(r8,tbe),e(tbe,Xgr),e(r8,zgr),e(r8,JW),e(JW,Wgr),e(r8,Qgr),e(se,Hgr),e(se,t8),e(t8,abe),e(abe,Ugr),e(t8,Jgr),e(t8,YW),e(YW,Ygr),e(t8,Kgr),e(se,Zgr),e(se,a8),e(a8,nbe),e(nbe,ehr),e(a8,ohr),e(a8,KW),e(KW,rhr),e(a8,thr),e(Ar,ahr),M(n8,Ar,null),b(f,iNe,u),b(f,Wd,u),e(Wd,s8),e(s8,sbe),M(nL,sbe,null),e(Wd,nhr),e(Wd,lbe),e(lbe,shr),b(f,dNe,u),b(f,Zo,u),M(sL,Zo,null),e(Zo,lhr),e(Zo,Qd),e(Qd,ihr),e(Qd,ZW),e(ZW,dhr),e(Qd,chr),e(Qd,eQ),e(eQ,fhr),e(Qd,mhr),e(Zo,ghr),e(Zo,lL),e(lL,hhr),e(lL,ibe),e(ibe,phr),e(lL,_hr),e(Zo,uhr),e(Zo,xt),M(iL,xt,null),e(xt,bhr),e(xt,dbe),e(dbe,vhr),e(xt,Fhr),e(xt,Hd),e(Hd,Thr),e(Hd,cbe),e(cbe,Mhr),e(Hd,Ehr),e(Hd,oQ),e(oQ,Chr),e(Hd,whr),e(xt,Ahr),M(l8,xt,null),e(Zo,yhr),e(Zo,yr),M(dL,yr,null),e(yr,Lhr),e(yr,fbe),e(fbe,xhr),e(yr,$hr),e(yr,en),e(en,khr),e(en,mbe),e(mbe,Shr),e(en,Rhr),e(en,gbe),e(gbe,Phr),e(en,Bhr),e(en,hbe),e(hbe,Ihr),e(en,qhr),e(yr,Nhr),e(yr,Me),e(Me,i8),e(i8,pbe),e(pbe,jhr),e(i8,Dhr),e(i8,rQ),e(rQ,Ghr),e(i8,Ohr),e(Me,Vhr),e(Me,d8),e(d8,_be),e(_be,Xhr),e(d8,zhr),e(d8,tQ),e(tQ,Whr),e(d8,Qhr),e(Me,Hhr),e(Me,c8),e(c8,ube),e(ube,Uhr),e(c8,Jhr),e(c8,aQ),e(aQ,Yhr),e(c8,Khr),e(Me,Zhr),e(Me,f8),e(f8,bbe),e(bbe,epr),e(f8,opr),e(f8,nQ),e(nQ,rpr),e(f8,tpr),e(Me,apr),e(Me,m8),e(m8,vbe),e(vbe,npr),e(m8,spr),e(m8,sQ),e(sQ,lpr),e(m8,ipr),e(Me,dpr),e(Me,g8),e(g8,Fbe),e(Fbe,cpr),e(g8,fpr),e(g8,lQ),e(lQ,mpr),e(g8,gpr),e(Me,hpr),e(Me,h8),e(h8,Tbe),e(Tbe,ppr),e(h8,_pr),e(h8,iQ),e(iQ,upr),e(h8,bpr),e(Me,vpr),e(Me,p8),e(p8,Mbe),e(Mbe,Fpr),e(p8,Tpr),e(p8,dQ),e(dQ,Mpr),e(p8,Epr),e(Me,Cpr),e(Me,_8),e(_8,Ebe),e(Ebe,wpr),e(_8,Apr),e(_8,cQ),e(cQ,ypr),e(_8,Lpr),e(Me,xpr),e(Me,u8),e(u8,Cbe),e(Cbe,$pr),e(u8,kpr),e(u8,fQ),e(fQ,Spr),e(u8,Rpr),e(Me,Ppr),e(Me,b8),e(b8,wbe),e(wbe,Bpr),e(b8,Ipr),e(b8,mQ),e(mQ,qpr),e(b8,Npr),e(Me,jpr),e(Me,v8),e(v8,Abe),e(Abe,Dpr),e(v8,Gpr),e(v8,gQ),e(gQ,Opr),e(v8,Vpr),e(yr,Xpr),M(F8,yr,null),b(f,cNe,u),b(f,Ud,u),e(Ud,T8),e(T8,ybe),M(cL,ybe,null),e(Ud,zpr),e(Ud,Lbe),e(Lbe,Wpr),b(f,fNe,u),b(f,er,u),M(fL,er,null),e(er,Qpr),e(er,Jd),e(Jd,Hpr),e(Jd,hQ),e(hQ,Upr),e(Jd,Jpr),e(Jd,pQ),e(pQ,Ypr),e(Jd,Kpr),e(er,Zpr),e(er,mL),e(mL,e_r),e(mL,xbe),e(xbe,o_r),e(mL,r_r),e(er,t_r),e(er,$t),M(gL,$t,null),e($t,a_r),e($t,$be),e($be,n_r),e($t,s_r),e($t,Yd),e(Yd,l_r),e(Yd,kbe),e(kbe,i_r),e(Yd,d_r),e(Yd,_Q),e(_Q,c_r),e(Yd,f_r),e($t,m_r),M(M8,$t,null),e(er,g_r),e(er,Lr),M(hL,Lr,null),e(Lr,h_r),e(Lr,Sbe),e(Sbe,p_r),e(Lr,__r),e(Lr,on),e(on,u_r),e(on,Rbe),e(Rbe,b_r),e(on,v_r),e(on,Pbe),e(Pbe,F_r),e(on,T_r),e(on,Bbe),e(Bbe,M_r),e(on,E_r),e(Lr,C_r),e(Lr,rn),e(rn,E8),e(E8,Ibe),e(Ibe,w_r),e(E8,A_r),e(E8,uQ),e(uQ,y_r),e(E8,L_r),e(rn,x_r),e(rn,C8),e(C8,qbe),e(qbe,$_r),e(C8,k_r),e(C8,bQ),e(bQ,S_r),e(C8,R_r),e(rn,P_r),e(rn,w8),e(w8,Nbe),e(Nbe,B_r),e(w8,I_r),e(w8,vQ),e(vQ,q_r),e(w8,N_r),e(rn,j_r),e(rn,A8),e(A8,jbe),e(jbe,D_r),e(A8,G_r),e(A8,FQ),e(FQ,O_r),e(A8,V_r),e(Lr,X_r),M(y8,Lr,null),b(f,mNe,u),b(f,Kd,u),e(Kd,L8),e(L8,Dbe),M(pL,Dbe,null),e(Kd,z_r),e(Kd,Gbe),e(Gbe,W_r),b(f,gNe,u),b(f,or,u),M(_L,or,null),e(or,Q_r),e(or,Zd),e(Zd,H_r),e(Zd,TQ),e(TQ,U_r),e(Zd,J_r),e(Zd,MQ),e(MQ,Y_r),e(Zd,K_r),e(or,Z_r),e(or,uL),e(uL,eur),e(uL,Obe),e(Obe,our),e(uL,rur),e(or,tur),e(or,kt),M(bL,kt,null),e(kt,aur),e(kt,Vbe),e(Vbe,nur),e(kt,sur),e(kt,ec),e(ec,lur),e(ec,Xbe),e(Xbe,iur),e(ec,dur),e(ec,EQ),e(EQ,cur),e(ec,fur),e(kt,mur),M(x8,kt,null),e(or,gur),e(or,xr),M(vL,xr,null),e(xr,hur),e(xr,zbe),e(zbe,pur),e(xr,_ur),e(xr,tn),e(tn,uur),e(tn,Wbe),e(Wbe,bur),e(tn,vur),e(tn,Qbe),e(Qbe,Fur),e(tn,Tur),e(tn,Hbe),e(Hbe,Mur),e(tn,Eur),e(xr,Cur),e(xr,ie),e(ie,$8),e($8,Ube),e(Ube,wur),e($8,Aur),e($8,CQ),e(CQ,yur),e($8,Lur),e(ie,xur),e(ie,k8),e(k8,Jbe),e(Jbe,$ur),e(k8,kur),e(k8,wQ),e(wQ,Sur),e(k8,Rur),e(ie,Pur),e(ie,S8),e(S8,Ybe),e(Ybe,Bur),e(S8,Iur),e(S8,AQ),e(AQ,qur),e(S8,Nur),e(ie,jur),e(ie,R8),e(R8,Kbe),e(Kbe,Dur),e(R8,Gur),e(R8,yQ),e(yQ,Our),e(R8,Vur),e(ie,Xur),e(ie,P8),e(P8,Zbe),e(Zbe,zur),e(P8,Wur),e(P8,LQ),e(LQ,Qur),e(P8,Hur),e(ie,Uur),e(ie,B8),e(B8,e2e),e(e2e,Jur),e(B8,Yur),e(B8,xQ),e(xQ,Kur),e(B8,Zur),e(ie,e1r),e(ie,I8),e(I8,o2e),e(o2e,o1r),e(I8,r1r),e(I8,$Q),e($Q,t1r),e(I8,a1r),e(ie,n1r),e(ie,q8),e(q8,r2e),e(r2e,s1r),e(q8,l1r),e(q8,kQ),e(kQ,i1r),e(q8,d1r),e(ie,c1r),e(ie,N8),e(N8,t2e),e(t2e,f1r),e(N8,m1r),e(N8,SQ),e(SQ,g1r),e(N8,h1r),e(ie,p1r),e(ie,j8),e(j8,a2e),e(a2e,_1r),e(j8,u1r),e(j8,RQ),e(RQ,b1r),e(j8,v1r),e(ie,F1r),e(ie,D8),e(D8,n2e),e(n2e,T1r),e(D8,M1r),e(D8,PQ),e(PQ,E1r),e(D8,C1r),e(ie,w1r),e(ie,G8),e(G8,s2e),e(s2e,A1r),e(G8,y1r),e(G8,BQ),e(BQ,L1r),e(G8,x1r),e(ie,$1r),e(ie,O8),e(O8,l2e),e(l2e,k1r),e(O8,S1r),e(O8,IQ),e(IQ,R1r),e(O8,P1r),e(ie,B1r),e(ie,V8),e(V8,i2e),e(i2e,I1r),e(V8,q1r),e(V8,qQ),e(qQ,N1r),e(V8,j1r),e(ie,D1r),e(ie,X8),e(X8,d2e),e(d2e,G1r),e(X8,O1r),e(X8,NQ),e(NQ,V1r),e(X8,X1r),e(ie,z1r),e(ie,z8),e(z8,c2e),e(c2e,W1r),e(z8,Q1r),e(z8,jQ),e(jQ,H1r),e(z8,U1r),e(ie,J1r),e(ie,W8),e(W8,f2e),e(f2e,Y1r),e(W8,K1r),e(W8,DQ),e(DQ,Z1r),e(W8,e7r),e(ie,o7r),e(ie,Q8),e(Q8,m2e),e(m2e,r7r),e(Q8,t7r),e(Q8,GQ),e(GQ,a7r),e(Q8,n7r),e(ie,s7r),e(ie,H8),e(H8,g2e),e(g2e,l7r),e(H8,i7r),e(H8,OQ),e(OQ,d7r),e(H8,c7r),e(ie,f7r),e(ie,U8),e(U8,h2e),e(h2e,m7r),e(U8,g7r),e(U8,VQ),e(VQ,h7r),e(U8,p7r),e(xr,_7r),M(J8,xr,null),b(f,hNe,u),b(f,oc,u),e(oc,Y8),e(Y8,p2e),M(FL,p2e,null),e(oc,u7r),e(oc,_2e),e(_2e,b7r),b(f,pNe,u),b(f,rr,u),M(TL,rr,null),e(rr,v7r),e(rr,rc),e(rc,F7r),e(rc,XQ),e(XQ,T7r),e(rc,M7r),e(rc,zQ),e(zQ,E7r),e(rc,C7r),e(rr,w7r),e(rr,ML),e(ML,A7r),e(ML,u2e),e(u2e,y7r),e(ML,L7r),e(rr,x7r),e(rr,St),M(EL,St,null),e(St,$7r),e(St,b2e),e(b2e,k7r),e(St,S7r),e(St,tc),e(tc,R7r),e(tc,v2e),e(v2e,P7r),e(tc,B7r),e(tc,WQ),e(WQ,I7r),e(tc,q7r),e(St,N7r),M(K8,St,null),e(rr,j7r),e(rr,$r),M(CL,$r,null),e($r,D7r),e($r,F2e),e(F2e,G7r),e($r,O7r),e($r,an),e(an,V7r),e(an,T2e),e(T2e,X7r),e(an,z7r),e(an,M2e),e(M2e,W7r),e(an,Q7r),e(an,E2e),e(E2e,H7r),e(an,U7r),e($r,J7r),e($r,ye),e(ye,Z8),e(Z8,C2e),e(C2e,Y7r),e(Z8,K7r),e(Z8,QQ),e(QQ,Z7r),e(Z8,ebr),e(ye,obr),e(ye,eM),e(eM,w2e),e(w2e,rbr),e(eM,tbr),e(eM,HQ),e(HQ,abr),e(eM,nbr),e(ye,sbr),e(ye,oM),e(oM,A2e),e(A2e,lbr),e(oM,ibr),e(oM,UQ),e(UQ,dbr),e(oM,cbr),e(ye,fbr),e(ye,rM),e(rM,y2e),e(y2e,mbr),e(rM,gbr),e(rM,JQ),e(JQ,hbr),e(rM,pbr),e(ye,_br),e(ye,tM),e(tM,L2e),e(L2e,ubr),e(tM,bbr),e(tM,YQ),e(YQ,vbr),e(tM,Fbr),e(ye,Tbr),e(ye,aM),e(aM,x2e),e(x2e,Mbr),e(aM,Ebr),e(aM,KQ),e(KQ,Cbr),e(aM,wbr),e(ye,Abr),e(ye,nM),e(nM,$2e),e($2e,ybr),e(nM,Lbr),e(nM,ZQ),e(ZQ,xbr),e(nM,$br),e(ye,kbr),e(ye,sM),e(sM,k2e),e(k2e,Sbr),e(sM,Rbr),e(sM,eH),e(eH,Pbr),e(sM,Bbr),e(ye,Ibr),e(ye,lM),e(lM,S2e),e(S2e,qbr),e(lM,Nbr),e(lM,oH),e(oH,jbr),e(lM,Dbr),e(ye,Gbr),e(ye,iM),e(iM,R2e),e(R2e,Obr),e(iM,Vbr),e(iM,rH),e(rH,Xbr),e(iM,zbr),e($r,Wbr),M(dM,$r,null),b(f,_Ne,u),b(f,ac,u),e(ac,cM),e(cM,P2e),M(wL,P2e,null),e(ac,Qbr),e(ac,B2e),e(B2e,Hbr),b(f,uNe,u),b(f,tr,u),M(AL,tr,null),e(tr,Ubr),e(tr,nc),e(nc,Jbr),e(nc,tH),e(tH,Ybr),e(nc,Kbr),e(nc,aH),e(aH,Zbr),e(nc,e2r),e(tr,o2r),e(tr,yL),e(yL,r2r),e(yL,I2e),e(I2e,t2r),e(yL,a2r),e(tr,n2r),e(tr,Rt),M(LL,Rt,null),e(Rt,s2r),e(Rt,q2e),e(q2e,l2r),e(Rt,i2r),e(Rt,sc),e(sc,d2r),e(sc,N2e),e(N2e,c2r),e(sc,f2r),e(sc,nH),e(nH,m2r),e(sc,g2r),e(Rt,h2r),M(fM,Rt,null),e(tr,p2r),e(tr,kr),M(xL,kr,null),e(kr,_2r),e(kr,j2e),e(j2e,u2r),e(kr,b2r),e(kr,nn),e(nn,v2r),e(nn,D2e),e(D2e,F2r),e(nn,T2r),e(nn,G2e),e(G2e,M2r),e(nn,E2r),e(nn,O2e),e(O2e,C2r),e(nn,w2r),e(kr,A2r),e(kr,ee),e(ee,mM),e(mM,V2e),e(V2e,y2r),e(mM,L2r),e(mM,sH),e(sH,x2r),e(mM,$2r),e(ee,k2r),e(ee,gM),e(gM,X2e),e(X2e,S2r),e(gM,R2r),e(gM,lH),e(lH,P2r),e(gM,B2r),e(ee,I2r),e(ee,hM),e(hM,z2e),e(z2e,q2r),e(hM,N2r),e(hM,iH),e(iH,j2r),e(hM,D2r),e(ee,G2r),e(ee,pM),e(pM,W2e),e(W2e,O2r),e(pM,V2r),e(pM,dH),e(dH,X2r),e(pM,z2r),e(ee,W2r),e(ee,_M),e(_M,Q2e),e(Q2e,Q2r),e(_M,H2r),e(_M,cH),e(cH,U2r),e(_M,J2r),e(ee,Y2r),e(ee,uM),e(uM,H2e),e(H2e,K2r),e(uM,Z2r),e(uM,fH),e(fH,evr),e(uM,ovr),e(ee,rvr),e(ee,bM),e(bM,U2e),e(U2e,tvr),e(bM,avr),e(bM,mH),e(mH,nvr),e(bM,svr),e(ee,lvr),e(ee,vM),e(vM,J2e),e(J2e,ivr),e(vM,dvr),e(vM,gH),e(gH,cvr),e(vM,fvr),e(ee,mvr),e(ee,FM),e(FM,Y2e),e(Y2e,gvr),e(FM,hvr),e(FM,hH),e(hH,pvr),e(FM,_vr),e(ee,uvr),e(ee,TM),e(TM,K2e),e(K2e,bvr),e(TM,vvr),e(TM,pH),e(pH,Fvr),e(TM,Tvr),e(ee,Mvr),e(ee,MM),e(MM,Z2e),e(Z2e,Evr),e(MM,Cvr),e(MM,_H),e(_H,wvr),e(MM,Avr),e(ee,yvr),e(ee,EM),e(EM,eve),e(eve,Lvr),e(EM,xvr),e(EM,uH),e(uH,$vr),e(EM,kvr),e(ee,Svr),e(ee,CM),e(CM,ove),e(ove,Rvr),e(CM,Pvr),e(CM,bH),e(bH,Bvr),e(CM,Ivr),e(ee,qvr),e(ee,wM),e(wM,rve),e(rve,Nvr),e(wM,jvr),e(wM,vH),e(vH,Dvr),e(wM,Gvr),e(ee,Ovr),e(ee,AM),e(AM,tve),e(tve,Vvr),e(AM,Xvr),e(AM,FH),e(FH,zvr),e(AM,Wvr),e(ee,Qvr),e(ee,yM),e(yM,ave),e(ave,Hvr),e(yM,Uvr),e(yM,TH),e(TH,Jvr),e(yM,Yvr),e(ee,Kvr),e(ee,LM),e(LM,nve),e(nve,Zvr),e(LM,e3r),e(LM,MH),e(MH,o3r),e(LM,r3r),e(ee,t3r),e(ee,xM),e(xM,sve),e(sve,a3r),e(xM,n3r),e(xM,EH),e(EH,s3r),e(xM,l3r),e(ee,i3r),e(ee,$M),e($M,lve),e(lve,d3r),e($M,c3r),e($M,CH),e(CH,f3r),e($M,m3r),e(ee,g3r),e(ee,kM),e(kM,ive),e(ive,h3r),e(kM,p3r),e(kM,wH),e(wH,_3r),e(kM,u3r),e(ee,b3r),e(ee,SM),e(SM,dve),e(dve,v3r),e(SM,F3r),e(SM,AH),e(AH,T3r),e(SM,M3r),e(ee,E3r),e(ee,RM),e(RM,cve),e(cve,C3r),e(RM,w3r),e(RM,yH),e(yH,A3r),e(RM,y3r),e(ee,L3r),e(ee,PM),e(PM,fve),e(fve,x3r),e(PM,$3r),e(PM,LH),e(LH,k3r),e(PM,S3r),e(ee,R3r),e(ee,BM),e(BM,mve),e(mve,P3r),e(BM,B3r),e(BM,xH),e(xH,I3r),e(BM,q3r),e(ee,N3r),e(ee,IM),e(IM,gve),e(gve,j3r),e(IM,D3r),e(IM,$H),e($H,G3r),e(IM,O3r),e(ee,V3r),e(ee,qM),e(qM,hve),e(hve,X3r),e(qM,z3r),e(qM,kH),e(kH,W3r),e(qM,Q3r),e(kr,H3r),M(NM,kr,null),b(f,bNe,u),b(f,lc,u),e(lc,jM),e(jM,pve),M($L,pve,null),e(lc,U3r),e(lc,_ve),e(_ve,J3r),b(f,vNe,u),b(f,ar,u),M(kL,ar,null),e(ar,Y3r),e(ar,ic),e(ic,K3r),e(ic,SH),e(SH,Z3r),e(ic,eFr),e(ic,RH),e(RH,oFr),e(ic,rFr),e(ar,tFr),e(ar,SL),e(SL,aFr),e(SL,uve),e(uve,nFr),e(SL,sFr),e(ar,lFr),e(ar,Pt),M(RL,Pt,null),e(Pt,iFr),e(Pt,bve),e(bve,dFr),e(Pt,cFr),e(Pt,dc),e(dc,fFr),e(dc,vve),e(vve,mFr),e(dc,gFr),e(dc,PH),e(PH,hFr),e(dc,pFr),e(Pt,_Fr),M(DM,Pt,null),e(ar,uFr),e(ar,Sr),M(PL,Sr,null),e(Sr,bFr),e(Sr,Fve),e(Fve,vFr),e(Sr,FFr),e(Sr,sn),e(sn,TFr),e(sn,Tve),e(Tve,MFr),e(sn,EFr),e(sn,Mve),e(Mve,CFr),e(sn,wFr),e(sn,Eve),e(Eve,AFr),e(sn,yFr),e(Sr,LFr),e(Sr,he),e(he,GM),e(GM,Cve),e(Cve,xFr),e(GM,$Fr),e(GM,BH),e(BH,kFr),e(GM,SFr),e(he,RFr),e(he,OM),e(OM,wve),e(wve,PFr),e(OM,BFr),e(OM,IH),e(IH,IFr),e(OM,qFr),e(he,NFr),e(he,VM),e(VM,Ave),e(Ave,jFr),e(VM,DFr),e(VM,qH),e(qH,GFr),e(VM,OFr),e(he,VFr),e(he,XM),e(XM,yve),e(yve,XFr),e(XM,zFr),e(XM,NH),e(NH,WFr),e(XM,QFr),e(he,HFr),e(he,zM),e(zM,Lve),e(Lve,UFr),e(zM,JFr),e(zM,jH),e(jH,YFr),e(zM,KFr),e(he,ZFr),e(he,WM),e(WM,xve),e(xve,eTr),e(WM,oTr),e(WM,DH),e(DH,rTr),e(WM,tTr),e(he,aTr),e(he,QM),e(QM,$ve),e($ve,nTr),e(QM,sTr),e(QM,GH),e(GH,lTr),e(QM,iTr),e(he,dTr),e(he,HM),e(HM,kve),e(kve,cTr),e(HM,fTr),e(HM,OH),e(OH,mTr),e(HM,gTr),e(he,hTr),e(he,UM),e(UM,Sve),e(Sve,pTr),e(UM,_Tr),e(UM,VH),e(VH,uTr),e(UM,bTr),e(he,vTr),e(he,JM),e(JM,Rve),e(Rve,FTr),e(JM,TTr),e(JM,XH),e(XH,MTr),e(JM,ETr),e(he,CTr),e(he,YM),e(YM,Pve),e(Pve,wTr),e(YM,ATr),e(YM,zH),e(zH,yTr),e(YM,LTr),e(he,xTr),e(he,KM),e(KM,Bve),e(Bve,$Tr),e(KM,kTr),e(KM,WH),e(WH,STr),e(KM,RTr),e(he,PTr),e(he,ZM),e(ZM,Ive),e(Ive,BTr),e(ZM,ITr),e(ZM,QH),e(QH,qTr),e(ZM,NTr),e(he,jTr),e(he,e4),e(e4,qve),e(qve,DTr),e(e4,GTr),e(e4,HH),e(HH,OTr),e(e4,VTr),e(he,XTr),e(he,o4),e(o4,Nve),e(Nve,zTr),e(o4,WTr),e(o4,UH),e(UH,QTr),e(o4,HTr),e(he,UTr),e(he,r4),e(r4,jve),e(jve,JTr),e(r4,YTr),e(r4,JH),e(JH,KTr),e(r4,ZTr),e(he,e8r),e(he,t4),e(t4,Dve),e(Dve,o8r),e(t4,r8r),e(t4,YH),e(YH,t8r),e(t4,a8r),e(Sr,n8r),M(a4,Sr,null),b(f,FNe,u),b(f,cc,u),e(cc,n4),e(n4,Gve),M(BL,Gve,null),e(cc,s8r),e(cc,Ove),e(Ove,l8r),b(f,TNe,u),b(f,nr,u),M(IL,nr,null),e(nr,i8r),e(nr,fc),e(fc,d8r),e(fc,KH),e(KH,c8r),e(fc,f8r),e(fc,ZH),e(ZH,m8r),e(fc,g8r),e(nr,h8r),e(nr,qL),e(qL,p8r),e(qL,Vve),e(Vve,_8r),e(qL,u8r),e(nr,b8r),e(nr,Bt),M(NL,Bt,null),e(Bt,v8r),e(Bt,Xve),e(Xve,F8r),e(Bt,T8r),e(Bt,mc),e(mc,M8r),e(mc,zve),e(zve,E8r),e(mc,C8r),e(mc,eU),e(eU,w8r),e(mc,A8r),e(Bt,y8r),M(s4,Bt,null),e(nr,L8r),e(nr,Rr),M(jL,Rr,null),e(Rr,x8r),e(Rr,Wve),e(Wve,$8r),e(Rr,k8r),e(Rr,ln),e(ln,S8r),e(ln,Qve),e(Qve,R8r),e(ln,P8r),e(ln,Hve),e(Hve,B8r),e(ln,I8r),e(ln,Uve),e(Uve,q8r),e(ln,N8r),e(Rr,j8r),e(Rr,DL),e(DL,l4),e(l4,Jve),e(Jve,D8r),e(l4,G8r),e(l4,oU),e(oU,O8r),e(l4,V8r),e(DL,X8r),e(DL,i4),e(i4,Yve),e(Yve,z8r),e(i4,W8r),e(i4,rU),e(rU,Q8r),e(i4,H8r),e(Rr,U8r),M(d4,Rr,null),b(f,MNe,u),b(f,gc,u),e(gc,c4),e(c4,Kve),M(GL,Kve,null),e(gc,J8r),e(gc,Zve),e(Zve,Y8r),b(f,ENe,u),b(f,sr,u),M(OL,sr,null),e(sr,K8r),e(sr,hc),e(hc,Z8r),e(hc,tU),e(tU,eMr),e(hc,oMr),e(hc,aU),e(aU,rMr),e(hc,tMr),e(sr,aMr),e(sr,VL),e(VL,nMr),e(VL,e3e),e(e3e,sMr),e(VL,lMr),e(sr,iMr),e(sr,It),M(XL,It,null),e(It,dMr),e(It,o3e),e(o3e,cMr),e(It,fMr),e(It,pc),e(pc,mMr),e(pc,r3e),e(r3e,gMr),e(pc,hMr),e(pc,nU),e(nU,pMr),e(pc,_Mr),e(It,uMr),M(f4,It,null),e(sr,bMr),e(sr,Pr),M(zL,Pr,null),e(Pr,vMr),e(Pr,t3e),e(t3e,FMr),e(Pr,TMr),e(Pr,dn),e(dn,MMr),e(dn,a3e),e(a3e,EMr),e(dn,CMr),e(dn,n3e),e(n3e,wMr),e(dn,AMr),e(dn,s3e),e(s3e,yMr),e(dn,LMr),e(Pr,xMr),e(Pr,l3e),e(l3e,m4),e(m4,i3e),e(i3e,$Mr),e(m4,kMr),e(m4,sU),e(sU,SMr),e(m4,RMr),e(Pr,PMr),M(g4,Pr,null),b(f,CNe,u),b(f,_c,u),e(_c,h4),e(h4,d3e),M(WL,d3e,null),e(_c,BMr),e(_c,c3e),e(c3e,IMr),b(f,wNe,u),b(f,lr,u),M(QL,lr,null),e(lr,qMr),e(lr,uc),e(uc,NMr),e(uc,lU),e(lU,jMr),e(uc,DMr),e(uc,iU),e(iU,GMr),e(uc,OMr),e(lr,VMr),e(lr,HL),e(HL,XMr),e(HL,f3e),e(f3e,zMr),e(HL,WMr),e(lr,QMr),e(lr,qt),M(UL,qt,null),e(qt,HMr),e(qt,m3e),e(m3e,UMr),e(qt,JMr),e(qt,bc),e(bc,YMr),e(bc,g3e),e(g3e,KMr),e(bc,ZMr),e(bc,dU),e(dU,e4r),e(bc,o4r),e(qt,r4r),M(p4,qt,null),e(lr,t4r),e(lr,Br),M(JL,Br,null),e(Br,a4r),e(Br,h3e),e(h3e,n4r),e(Br,s4r),e(Br,cn),e(cn,l4r),e(cn,p3e),e(p3e,i4r),e(cn,d4r),e(cn,_3e),e(_3e,c4r),e(cn,f4r),e(cn,u3e),e(u3e,m4r),e(cn,g4r),e(Br,h4r),e(Br,de),e(de,_4),e(_4,b3e),e(b3e,p4r),e(_4,_4r),e(_4,cU),e(cU,u4r),e(_4,b4r),e(de,v4r),e(de,u4),e(u4,v3e),e(v3e,F4r),e(u4,T4r),e(u4,fU),e(fU,M4r),e(u4,E4r),e(de,C4r),e(de,b4),e(b4,F3e),e(F3e,w4r),e(b4,A4r),e(b4,mU),e(mU,y4r),e(b4,L4r),e(de,x4r),e(de,v4),e(v4,T3e),e(T3e,$4r),e(v4,k4r),e(v4,gU),e(gU,S4r),e(v4,R4r),e(de,P4r),e(de,F4),e(F4,M3e),e(M3e,B4r),e(F4,I4r),e(F4,hU),e(hU,q4r),e(F4,N4r),e(de,j4r),e(de,T4),e(T4,E3e),e(E3e,D4r),e(T4,G4r),e(T4,pU),e(pU,O4r),e(T4,V4r),e(de,X4r),e(de,M4),e(M4,C3e),e(C3e,z4r),e(M4,W4r),e(M4,_U),e(_U,Q4r),e(M4,H4r),e(de,U4r),e(de,E4),e(E4,w3e),e(w3e,J4r),e(E4,Y4r),e(E4,uU),e(uU,K4r),e(E4,Z4r),e(de,eEr),e(de,C4),e(C4,A3e),e(A3e,oEr),e(C4,rEr),e(C4,bU),e(bU,tEr),e(C4,aEr),e(de,nEr),e(de,w4),e(w4,y3e),e(y3e,sEr),e(w4,lEr),e(w4,vU),e(vU,iEr),e(w4,dEr),e(de,cEr),e(de,A4),e(A4,L3e),e(L3e,fEr),e(A4,mEr),e(A4,FU),e(FU,gEr),e(A4,hEr),e(de,pEr),e(de,y4),e(y4,x3e),e(x3e,_Er),e(y4,uEr),e(y4,TU),e(TU,bEr),e(y4,vEr),e(de,FEr),e(de,L4),e(L4,$3e),e($3e,TEr),e(L4,MEr),e(L4,MU),e(MU,EEr),e(L4,CEr),e(de,wEr),e(de,x4),e(x4,k3e),e(k3e,AEr),e(x4,yEr),e(x4,EU),e(EU,LEr),e(x4,xEr),e(de,$Er),e(de,$4),e($4,S3e),e(S3e,kEr),e($4,SEr),e($4,CU),e(CU,REr),e($4,PEr),e(de,BEr),e(de,k4),e(k4,R3e),e(R3e,IEr),e(k4,qEr),e(k4,wU),e(wU,NEr),e(k4,jEr),e(de,DEr),e(de,S4),e(S4,P3e),e(P3e,GEr),e(S4,OEr),e(S4,AU),e(AU,VEr),e(S4,XEr),e(de,zEr),e(de,R4),e(R4,B3e),e(B3e,WEr),e(R4,QEr),e(R4,yU),e(yU,HEr),e(R4,UEr),e(de,JEr),e(de,P4),e(P4,I3e),e(I3e,YEr),e(P4,KEr),e(P4,LU),e(LU,ZEr),e(P4,eCr),e(de,oCr),e(de,B4),e(B4,q3e),e(q3e,rCr),e(B4,tCr),e(B4,xU),e(xU,aCr),e(B4,nCr),e(Br,sCr),M(I4,Br,null),b(f,ANe,u),b(f,vc,u),e(vc,q4),e(q4,N3e),M(YL,N3e,null),e(vc,lCr),e(vc,j3e),e(j3e,iCr),b(f,yNe,u),b(f,ir,u),M(KL,ir,null),e(ir,dCr),e(ir,Fc),e(Fc,cCr),e(Fc,$U),e($U,fCr),e(Fc,mCr),e(Fc,kU),e(kU,gCr),e(Fc,hCr),e(ir,pCr),e(ir,ZL),e(ZL,_Cr),e(ZL,D3e),e(D3e,uCr),e(ZL,bCr),e(ir,vCr),e(ir,Nt),M(e9,Nt,null),e(Nt,FCr),e(Nt,G3e),e(G3e,TCr),e(Nt,MCr),e(Nt,Tc),e(Tc,ECr),e(Tc,O3e),e(O3e,CCr),e(Tc,wCr),e(Tc,SU),e(SU,ACr),e(Tc,yCr),e(Nt,LCr),M(N4,Nt,null),e(ir,xCr),e(ir,Ir),M(o9,Ir,null),e(Ir,$Cr),e(Ir,V3e),e(V3e,kCr),e(Ir,SCr),e(Ir,fn),e(fn,RCr),e(fn,X3e),e(X3e,PCr),e(fn,BCr),e(fn,z3e),e(z3e,ICr),e(fn,qCr),e(fn,W3e),e(W3e,NCr),e(fn,jCr),e(Ir,DCr),e(Ir,ce),e(ce,j4),e(j4,Q3e),e(Q3e,GCr),e(j4,OCr),e(j4,RU),e(RU,VCr),e(j4,XCr),e(ce,zCr),e(ce,D4),e(D4,H3e),e(H3e,WCr),e(D4,QCr),e(D4,PU),e(PU,HCr),e(D4,UCr),e(ce,JCr),e(ce,G4),e(G4,U3e),e(U3e,YCr),e(G4,KCr),e(G4,BU),e(BU,ZCr),e(G4,e5r),e(ce,o5r),e(ce,O4),e(O4,J3e),e(J3e,r5r),e(O4,t5r),e(O4,IU),e(IU,a5r),e(O4,n5r),e(ce,s5r),e(ce,V4),e(V4,Y3e),e(Y3e,l5r),e(V4,i5r),e(V4,qU),e(qU,d5r),e(V4,c5r),e(ce,f5r),e(ce,X4),e(X4,K3e),e(K3e,m5r),e(X4,g5r),e(X4,NU),e(NU,h5r),e(X4,p5r),e(ce,_5r),e(ce,z4),e(z4,Z3e),e(Z3e,u5r),e(z4,b5r),e(z4,jU),e(jU,v5r),e(z4,F5r),e(ce,T5r),e(ce,W4),e(W4,eFe),e(eFe,M5r),e(W4,E5r),e(W4,DU),e(DU,C5r),e(W4,w5r),e(ce,A5r),e(ce,Q4),e(Q4,oFe),e(oFe,y5r),e(Q4,L5r),e(Q4,GU),e(GU,x5r),e(Q4,$5r),e(ce,k5r),e(ce,H4),e(H4,rFe),e(rFe,S5r),e(H4,R5r),e(H4,OU),e(OU,P5r),e(H4,B5r),e(ce,I5r),e(ce,U4),e(U4,tFe),e(tFe,q5r),e(U4,N5r),e(U4,VU),e(VU,j5r),e(U4,D5r),e(ce,G5r),e(ce,J4),e(J4,aFe),e(aFe,O5r),e(J4,V5r),e(J4,XU),e(XU,X5r),e(J4,z5r),e(ce,W5r),e(ce,Y4),e(Y4,nFe),e(nFe,Q5r),e(Y4,H5r),e(Y4,zU),e(zU,U5r),e(Y4,J5r),e(ce,Y5r),e(ce,K4),e(K4,sFe),e(sFe,K5r),e(K4,Z5r),e(K4,WU),e(WU,ewr),e(K4,owr),e(ce,rwr),e(ce,Z4),e(Z4,lFe),e(lFe,twr),e(Z4,awr),e(Z4,QU),e(QU,nwr),e(Z4,swr),e(ce,lwr),e(ce,eE),e(eE,iFe),e(iFe,iwr),e(eE,dwr),e(eE,HU),e(HU,cwr),e(eE,fwr),e(ce,mwr),e(ce,oE),e(oE,dFe),e(dFe,gwr),e(oE,hwr),e(oE,UU),e(UU,pwr),e(oE,_wr),e(ce,uwr),e(ce,rE),e(rE,cFe),e(cFe,bwr),e(rE,vwr),e(rE,JU),e(JU,Fwr),e(rE,Twr),e(ce,Mwr),e(ce,tE),e(tE,fFe),e(fFe,Ewr),e(tE,Cwr),e(tE,YU),e(YU,wwr),e(tE,Awr),e(ce,ywr),e(ce,aE),e(aE,mFe),e(mFe,Lwr),e(aE,xwr),e(aE,KU),e(KU,$wr),e(aE,kwr),e(Ir,Swr),M(nE,Ir,null),b(f,LNe,u),b(f,Mc,u),e(Mc,sE),e(sE,gFe),M(r9,gFe,null),e(Mc,Rwr),e(Mc,hFe),e(hFe,Pwr),b(f,xNe,u),b(f,dr,u),M(t9,dr,null),e(dr,Bwr),e(dr,Ec),e(Ec,Iwr),e(Ec,ZU),e(ZU,qwr),e(Ec,Nwr),e(Ec,eJ),e(eJ,jwr),e(Ec,Dwr),e(dr,Gwr),e(dr,a9),e(a9,Owr),e(a9,pFe),e(pFe,Vwr),e(a9,Xwr),e(dr,zwr),e(dr,jt),M(n9,jt,null),e(jt,Wwr),e(jt,_Fe),e(_Fe,Qwr),e(jt,Hwr),e(jt,Cc),e(Cc,Uwr),e(Cc,uFe),e(uFe,Jwr),e(Cc,Ywr),e(Cc,oJ),e(oJ,Kwr),e(Cc,Zwr),e(jt,e0r),M(lE,jt,null),e(dr,o0r),e(dr,qr),M(s9,qr,null),e(qr,r0r),e(qr,bFe),e(bFe,t0r),e(qr,a0r),e(qr,mn),e(mn,n0r),e(mn,vFe),e(vFe,s0r),e(mn,l0r),e(mn,FFe),e(FFe,i0r),e(mn,d0r),e(mn,TFe),e(TFe,c0r),e(mn,f0r),e(qr,m0r),e(qr,MFe),e(MFe,iE),e(iE,EFe),e(EFe,g0r),e(iE,h0r),e(iE,rJ),e(rJ,p0r),e(iE,_0r),e(qr,u0r),M(dE,qr,null),b(f,$Ne,u),b(f,wc,u),e(wc,cE),e(cE,CFe),M(l9,CFe,null),e(wc,b0r),e(wc,wFe),e(wFe,v0r),b(f,kNe,u),b(f,cr,u),M(i9,cr,null),e(cr,F0r),e(cr,Ac),e(Ac,T0r),e(Ac,tJ),e(tJ,M0r),e(Ac,E0r),e(Ac,aJ),e(aJ,C0r),e(Ac,w0r),e(cr,A0r),e(cr,d9),e(d9,y0r),e(d9,AFe),e(AFe,L0r),e(d9,x0r),e(cr,$0r),e(cr,Dt),M(c9,Dt,null),e(Dt,k0r),e(Dt,yFe),e(yFe,S0r),e(Dt,R0r),e(Dt,yc),e(yc,P0r),e(yc,LFe),e(LFe,B0r),e(yc,I0r),e(yc,nJ),e(nJ,q0r),e(yc,N0r),e(Dt,j0r),M(fE,Dt,null),e(cr,D0r),e(cr,Nr),M(f9,Nr,null),e(Nr,G0r),e(Nr,xFe),e(xFe,O0r),e(Nr,V0r),e(Nr,gn),e(gn,X0r),e(gn,$Fe),e($Fe,z0r),e(gn,W0r),e(gn,kFe),e(kFe,Q0r),e(gn,H0r),e(gn,SFe),e(SFe,U0r),e(gn,J0r),e(Nr,Y0r),e(Nr,RFe),e(RFe,mE),e(mE,PFe),e(PFe,K0r),e(mE,Z0r),e(mE,sJ),e(sJ,eAr),e(mE,oAr),e(Nr,rAr),M(gE,Nr,null),b(f,SNe,u),b(f,Lc,u),e(Lc,hE),e(hE,BFe),M(m9,BFe,null),e(Lc,tAr),e(Lc,IFe),e(IFe,aAr),b(f,RNe,u),b(f,fr,u),M(g9,fr,null),e(fr,nAr),e(fr,xc),e(xc,sAr),e(xc,lJ),e(lJ,lAr),e(xc,iAr),e(xc,iJ),e(iJ,dAr),e(xc,cAr),e(fr,fAr),e(fr,h9),e(h9,mAr),e(h9,qFe),e(qFe,gAr),e(h9,hAr),e(fr,pAr),e(fr,Gt),M(p9,Gt,null),e(Gt,_Ar),e(Gt,NFe),e(NFe,uAr),e(Gt,bAr),e(Gt,$c),e($c,vAr),e($c,jFe),e(jFe,FAr),e($c,TAr),e($c,dJ),e(dJ,MAr),e($c,EAr),e(Gt,CAr),M(pE,Gt,null),e(fr,wAr),e(fr,jr),M(_9,jr,null),e(jr,AAr),e(jr,DFe),e(DFe,yAr),e(jr,LAr),e(jr,hn),e(hn,xAr),e(hn,GFe),e(GFe,$Ar),e(hn,kAr),e(hn,OFe),e(OFe,SAr),e(hn,RAr),e(hn,VFe),e(VFe,PAr),e(hn,BAr),e(jr,IAr),e(jr,te),e(te,_E),e(_E,XFe),e(XFe,qAr),e(_E,NAr),e(_E,cJ),e(cJ,jAr),e(_E,DAr),e(te,GAr),e(te,uE),e(uE,zFe),e(zFe,OAr),e(uE,VAr),e(uE,fJ),e(fJ,XAr),e(uE,zAr),e(te,WAr),e(te,bE),e(bE,WFe),e(WFe,QAr),e(bE,HAr),e(bE,mJ),e(mJ,UAr),e(bE,JAr),e(te,YAr),e(te,vE),e(vE,QFe),e(QFe,KAr),e(vE,ZAr),e(vE,gJ),e(gJ,e6r),e(vE,o6r),e(te,r6r),e(te,FE),e(FE,HFe),e(HFe,t6r),e(FE,a6r),e(FE,hJ),e(hJ,n6r),e(FE,s6r),e(te,l6r),e(te,TE),e(TE,UFe),e(UFe,i6r),e(TE,d6r),e(TE,pJ),e(pJ,c6r),e(TE,f6r),e(te,m6r),e(te,ME),e(ME,JFe),e(JFe,g6r),e(ME,h6r),e(ME,_J),e(_J,p6r),e(ME,_6r),e(te,u6r),e(te,EE),e(EE,YFe),e(YFe,b6r),e(EE,v6r),e(EE,uJ),e(uJ,F6r),e(EE,T6r),e(te,M6r),e(te,CE),e(CE,KFe),e(KFe,E6r),e(CE,C6r),e(CE,bJ),e(bJ,w6r),e(CE,A6r),e(te,y6r),e(te,wE),e(wE,ZFe),e(ZFe,L6r),e(wE,x6r),e(wE,vJ),e(vJ,$6r),e(wE,k6r),e(te,S6r),e(te,AE),e(AE,eTe),e(eTe,R6r),e(AE,P6r),e(AE,FJ),e(FJ,B6r),e(AE,I6r),e(te,q6r),e(te,yE),e(yE,oTe),e(oTe,N6r),e(yE,j6r),e(yE,TJ),e(TJ,D6r),e(yE,G6r),e(te,O6r),e(te,LE),e(LE,rTe),e(rTe,V6r),e(LE,X6r),e(LE,MJ),e(MJ,z6r),e(LE,W6r),e(te,Q6r),e(te,xE),e(xE,tTe),e(tTe,H6r),e(xE,U6r),e(xE,EJ),e(EJ,J6r),e(xE,Y6r),e(te,K6r),e(te,$E),e($E,aTe),e(aTe,Z6r),e($E,eyr),e($E,CJ),e(CJ,oyr),e($E,ryr),e(te,tyr),e(te,kE),e(kE,nTe),e(nTe,ayr),e(kE,nyr),e(kE,wJ),e(wJ,syr),e(kE,lyr),e(te,iyr),e(te,SE),e(SE,sTe),e(sTe,dyr),e(SE,cyr),e(SE,AJ),e(AJ,fyr),e(SE,myr),e(te,gyr),e(te,RE),e(RE,lTe),e(lTe,hyr),e(RE,pyr),e(RE,yJ),e(yJ,_yr),e(RE,uyr),e(te,byr),e(te,PE),e(PE,iTe),e(iTe,vyr),e(PE,Fyr),e(PE,LJ),e(LJ,Tyr),e(PE,Myr),e(te,Eyr),e(te,BE),e(BE,dTe),e(dTe,Cyr),e(BE,wyr),e(BE,xJ),e(xJ,Ayr),e(BE,yyr),e(te,Lyr),e(te,IE),e(IE,cTe),e(cTe,xyr),e(IE,$yr),e(IE,$J),e($J,kyr),e(IE,Syr),e(te,Ryr),e(te,qE),e(qE,fTe),e(fTe,Pyr),e(qE,Byr),e(qE,kJ),e(kJ,Iyr),e(qE,qyr),e(te,Nyr),e(te,NE),e(NE,mTe),e(mTe,jyr),e(NE,Dyr),e(NE,SJ),e(SJ,Gyr),e(NE,Oyr),e(te,Vyr),e(te,jE),e(jE,gTe),e(gTe,Xyr),e(jE,zyr),e(jE,RJ),e(RJ,Wyr),e(jE,Qyr),e(te,Hyr),e(te,DE),e(DE,hTe),e(hTe,Uyr),e(DE,Jyr),e(DE,PJ),e(PJ,Yyr),e(DE,Kyr),e(jr,Zyr),M(GE,jr,null),b(f,PNe,u),b(f,kc,u),e(kc,OE),e(OE,pTe),M(u9,pTe,null),e(kc,eLr),e(kc,_Te),e(_Te,oLr),b(f,BNe,u),b(f,mr,u),M(b9,mr,null),e(mr,rLr),e(mr,Sc),e(Sc,tLr),e(Sc,BJ),e(BJ,aLr),e(Sc,nLr),e(Sc,IJ),e(IJ,sLr),e(Sc,lLr),e(mr,iLr),e(mr,v9),e(v9,dLr),e(v9,uTe),e(uTe,cLr),e(v9,fLr),e(mr,mLr),e(mr,Ot),M(F9,Ot,null),e(Ot,gLr),e(Ot,bTe),e(bTe,hLr),e(Ot,pLr),e(Ot,Rc),e(Rc,_Lr),e(Rc,vTe),e(vTe,uLr),e(Rc,bLr),e(Rc,qJ),e(qJ,vLr),e(Rc,FLr),e(Ot,TLr),M(VE,Ot,null),e(mr,MLr),e(mr,Dr),M(T9,Dr,null),e(Dr,ELr),e(Dr,FTe),e(FTe,CLr),e(Dr,wLr),e(Dr,pn),e(pn,ALr),e(pn,TTe),e(TTe,yLr),e(pn,LLr),e(pn,MTe),e(MTe,xLr),e(pn,$Lr),e(pn,ETe),e(ETe,kLr),e(pn,SLr),e(Dr,RLr),e(Dr,Re),e(Re,XE),e(XE,CTe),e(CTe,PLr),e(XE,BLr),e(XE,NJ),e(NJ,ILr),e(XE,qLr),e(Re,NLr),e(Re,zE),e(zE,wTe),e(wTe,jLr),e(zE,DLr),e(zE,jJ),e(jJ,GLr),e(zE,OLr),e(Re,VLr),e(Re,WE),e(WE,ATe),e(ATe,XLr),e(WE,zLr),e(WE,DJ),e(DJ,WLr),e(WE,QLr),e(Re,HLr),e(Re,QE),e(QE,yTe),e(yTe,ULr),e(QE,JLr),e(QE,GJ),e(GJ,YLr),e(QE,KLr),e(Re,ZLr),e(Re,HE),e(HE,LTe),e(LTe,e9r),e(HE,o9r),e(HE,OJ),e(OJ,r9r),e(HE,t9r),e(Re,a9r),e(Re,UE),e(UE,xTe),e(xTe,n9r),e(UE,s9r),e(UE,VJ),e(VJ,l9r),e(UE,i9r),e(Re,d9r),e(Re,JE),e(JE,$Te),e($Te,c9r),e(JE,f9r),e(JE,XJ),e(XJ,m9r),e(JE,g9r),e(Re,h9r),e(Re,YE),e(YE,kTe),e(kTe,p9r),e(YE,_9r),e(YE,zJ),e(zJ,u9r),e(YE,b9r),e(Re,v9r),e(Re,KE),e(KE,STe),e(STe,F9r),e(KE,T9r),e(KE,WJ),e(WJ,M9r),e(KE,E9r),e(Dr,C9r),M(ZE,Dr,null),b(f,INe,u),b(f,Pc,u),e(Pc,eC),e(eC,RTe),M(M9,RTe,null),e(Pc,w9r),e(Pc,PTe),e(PTe,A9r),b(f,qNe,u),b(f,gr,u),M(E9,gr,null),e(gr,y9r),e(gr,Bc),e(Bc,L9r),e(Bc,QJ),e(QJ,x9r),e(Bc,$9r),e(Bc,HJ),e(HJ,k9r),e(Bc,S9r),e(gr,R9r),e(gr,C9),e(C9,P9r),e(C9,BTe),e(BTe,B9r),e(C9,I9r),e(gr,q9r),e(gr,Vt),M(w9,Vt,null),e(Vt,N9r),e(Vt,ITe),e(ITe,j9r),e(Vt,D9r),e(Vt,Ic),e(Ic,G9r),e(Ic,qTe),e(qTe,O9r),e(Ic,V9r),e(Ic,UJ),e(UJ,X9r),e(Ic,z9r),e(Vt,W9r),M(oC,Vt,null),e(gr,Q9r),e(gr,Gr),M(A9,Gr,null),e(Gr,H9r),e(Gr,NTe),e(NTe,U9r),e(Gr,J9r),e(Gr,_n),e(_n,Y9r),e(_n,jTe),e(jTe,K9r),e(_n,Z9r),e(_n,DTe),e(DTe,exr),e(_n,oxr),e(_n,GTe),e(GTe,rxr),e(_n,txr),e(Gr,axr),e(Gr,Ee),e(Ee,rC),e(rC,OTe),e(OTe,nxr),e(rC,sxr),e(rC,JJ),e(JJ,lxr),e(rC,ixr),e(Ee,dxr),e(Ee,tC),e(tC,VTe),e(VTe,cxr),e(tC,fxr),e(tC,YJ),e(YJ,mxr),e(tC,gxr),e(Ee,hxr),e(Ee,aC),e(aC,XTe),e(XTe,pxr),e(aC,_xr),e(aC,KJ),e(KJ,uxr),e(aC,bxr),e(Ee,vxr),e(Ee,nC),e(nC,zTe),e(zTe,Fxr),e(nC,Txr),e(nC,ZJ),e(ZJ,Mxr),e(nC,Exr),e(Ee,Cxr),e(Ee,sC),e(sC,WTe),e(WTe,wxr),e(sC,Axr),e(sC,eY),e(eY,yxr),e(sC,Lxr),e(Ee,xxr),e(Ee,lC),e(lC,QTe),e(QTe,$xr),e(lC,kxr),e(lC,oY),e(oY,Sxr),e(lC,Rxr),e(Ee,Pxr),e(Ee,iC),e(iC,HTe),e(HTe,Bxr),e(iC,Ixr),e(iC,rY),e(rY,qxr),e(iC,Nxr),e(Ee,jxr),e(Ee,dC),e(dC,UTe),e(UTe,Dxr),e(dC,Gxr),e(dC,tY),e(tY,Oxr),e(dC,Vxr),e(Ee,Xxr),e(Ee,cC),e(cC,JTe),e(JTe,zxr),e(cC,Wxr),e(cC,aY),e(aY,Qxr),e(cC,Hxr),e(Ee,Uxr),e(Ee,fC),e(fC,YTe),e(YTe,Jxr),e(fC,Yxr),e(fC,nY),e(nY,Kxr),e(fC,Zxr),e(Ee,e$r),e(Ee,mC),e(mC,KTe),e(KTe,o$r),e(mC,r$r),e(mC,sY),e(sY,t$r),e(mC,a$r),e(Ee,n$r),e(Ee,gC),e(gC,ZTe),e(ZTe,s$r),e(gC,l$r),e(gC,lY),e(lY,i$r),e(gC,d$r),e(Gr,c$r),M(hC,Gr,null),b(f,NNe,u),b(f,qc,u),e(qc,pC),e(pC,e8e),M(y9,e8e,null),e(qc,f$r),e(qc,o8e),e(o8e,m$r),b(f,jNe,u),b(f,hr,u),M(L9,hr,null),e(hr,g$r),e(hr,Nc),e(Nc,h$r),e(Nc,iY),e(iY,p$r),e(Nc,_$r),e(Nc,dY),e(dY,u$r),e(Nc,b$r),e(hr,v$r),e(hr,x9),e(x9,F$r),e(x9,r8e),e(r8e,T$r),e(x9,M$r),e(hr,E$r),e(hr,Xt),M($9,Xt,null),e(Xt,C$r),e(Xt,t8e),e(t8e,w$r),e(Xt,A$r),e(Xt,jc),e(jc,y$r),e(jc,a8e),e(a8e,L$r),e(jc,x$r),e(jc,cY),e(cY,$$r),e(jc,k$r),e(Xt,S$r),M(_C,Xt,null),e(hr,R$r),e(hr,Or),M(k9,Or,null),e(Or,P$r),e(Or,n8e),e(n8e,B$r),e(Or,I$r),e(Or,un),e(un,q$r),e(un,s8e),e(s8e,N$r),e(un,j$r),e(un,l8e),e(l8e,D$r),e(un,G$r),e(un,i8e),e(i8e,O$r),e(un,V$r),e(Or,X$r),e(Or,Le),e(Le,uC),e(uC,d8e),e(d8e,z$r),e(uC,W$r),e(uC,fY),e(fY,Q$r),e(uC,H$r),e(Le,U$r),e(Le,bC),e(bC,c8e),e(c8e,J$r),e(bC,Y$r),e(bC,mY),e(mY,K$r),e(bC,Z$r),e(Le,ekr),e(Le,vC),e(vC,f8e),e(f8e,okr),e(vC,rkr),e(vC,gY),e(gY,tkr),e(vC,akr),e(Le,nkr),e(Le,FC),e(FC,m8e),e(m8e,skr),e(FC,lkr),e(FC,hY),e(hY,ikr),e(FC,dkr),e(Le,ckr),e(Le,TC),e(TC,g8e),e(g8e,fkr),e(TC,mkr),e(TC,pY),e(pY,gkr),e(TC,hkr),e(Le,pkr),e(Le,MC),e(MC,h8e),e(h8e,_kr),e(MC,ukr),e(MC,_Y),e(_Y,bkr),e(MC,vkr),e(Le,Fkr),e(Le,EC),e(EC,p8e),e(p8e,Tkr),e(EC,Mkr),e(EC,uY),e(uY,Ekr),e(EC,Ckr),e(Le,wkr),e(Le,CC),e(CC,_8e),e(_8e,Akr),e(CC,ykr),e(CC,bY),e(bY,Lkr),e(CC,xkr),e(Le,$kr),e(Le,wC),e(wC,u8e),e(u8e,kkr),e(wC,Skr),e(wC,vY),e(vY,Rkr),e(wC,Pkr),e(Le,Bkr),e(Le,AC),e(AC,b8e),e(b8e,Ikr),e(AC,qkr),e(AC,FY),e(FY,Nkr),e(AC,jkr),e(Or,Dkr),M(yC,Or,null),b(f,DNe,u),b(f,Dc,u),e(Dc,LC),e(LC,v8e),M(S9,v8e,null),e(Dc,Gkr),e(Dc,F8e),e(F8e,Okr),b(f,GNe,u),b(f,pr,u),M(R9,pr,null),e(pr,Vkr),e(pr,Gc),e(Gc,Xkr),e(Gc,TY),e(TY,zkr),e(Gc,Wkr),e(Gc,MY),e(MY,Qkr),e(Gc,Hkr),e(pr,Ukr),e(pr,P9),e(P9,Jkr),e(P9,T8e),e(T8e,Ykr),e(P9,Kkr),e(pr,Zkr),e(pr,zt),M(B9,zt,null),e(zt,eSr),e(zt,M8e),e(M8e,oSr),e(zt,rSr),e(zt,Oc),e(Oc,tSr),e(Oc,E8e),e(E8e,aSr),e(Oc,nSr),e(Oc,EY),e(EY,sSr),e(Oc,lSr),e(zt,iSr),M(xC,zt,null),e(pr,dSr),e(pr,Vr),M(I9,Vr,null),e(Vr,cSr),e(Vr,C8e),e(C8e,fSr),e(Vr,mSr),e(Vr,bn),e(bn,gSr),e(bn,w8e),e(w8e,hSr),e(bn,pSr),e(bn,A8e),e(A8e,_Sr),e(bn,uSr),e(bn,y8e),e(y8e,bSr),e(bn,vSr),e(Vr,FSr),e(Vr,Pe),e(Pe,$C),e($C,L8e),e(L8e,TSr),e($C,MSr),e($C,CY),e(CY,ESr),e($C,CSr),e(Pe,wSr),e(Pe,kC),e(kC,x8e),e(x8e,ASr),e(kC,ySr),e(kC,wY),e(wY,LSr),e(kC,xSr),e(Pe,$Sr),e(Pe,SC),e(SC,$8e),e($8e,kSr),e(SC,SSr),e(SC,AY),e(AY,RSr),e(SC,PSr),e(Pe,BSr),e(Pe,RC),e(RC,k8e),e(k8e,ISr),e(RC,qSr),e(RC,yY),e(yY,NSr),e(RC,jSr),e(Pe,DSr),e(Pe,PC),e(PC,S8e),e(S8e,GSr),e(PC,OSr),e(PC,LY),e(LY,VSr),e(PC,XSr),e(Pe,zSr),e(Pe,BC),e(BC,R8e),e(R8e,WSr),e(BC,QSr),e(BC,xY),e(xY,HSr),e(BC,USr),e(Pe,JSr),e(Pe,IC),e(IC,P8e),e(P8e,YSr),e(IC,KSr),e(IC,$Y),e($Y,ZSr),e(IC,eRr),e(Pe,oRr),e(Pe,qC),e(qC,B8e),e(B8e,rRr),e(qC,tRr),e(qC,kY),e(kY,aRr),e(qC,nRr),e(Pe,sRr),e(Pe,NC),e(NC,I8e),e(I8e,lRr),e(NC,iRr),e(NC,SY),e(SY,dRr),e(NC,cRr),e(Vr,fRr),M(jC,Vr,null),b(f,ONe,u),b(f,Vc,u),e(Vc,DC),e(DC,q8e),M(q9,q8e,null),e(Vc,mRr),e(Vc,N8e),e(N8e,gRr),b(f,VNe,u),b(f,_r,u),M(N9,_r,null),e(_r,hRr),e(_r,Xc),e(Xc,pRr),e(Xc,RY),e(RY,_Rr),e(Xc,uRr),e(Xc,PY),e(PY,bRr),e(Xc,vRr),e(_r,FRr),e(_r,j9),e(j9,TRr),e(j9,j8e),e(j8e,MRr),e(j9,ERr),e(_r,CRr),e(_r,Wt),M(D9,Wt,null),e(Wt,wRr),e(Wt,D8e),e(D8e,ARr),e(Wt,yRr),e(Wt,zc),e(zc,LRr),e(zc,G8e),e(G8e,xRr),e(zc,$Rr),e(zc,BY),e(BY,kRr),e(zc,SRr),e(Wt,RRr),M(GC,Wt,null),e(_r,PRr),e(_r,Xr),M(G9,Xr,null),e(Xr,BRr),e(Xr,O8e),e(O8e,IRr),e(Xr,qRr),e(Xr,vn),e(vn,NRr),e(vn,V8e),e(V8e,jRr),e(vn,DRr),e(vn,X8e),e(X8e,GRr),e(vn,ORr),e(vn,z8e),e(z8e,VRr),e(vn,XRr),e(Xr,zRr),e(Xr,xe),e(xe,OC),e(OC,W8e),e(W8e,WRr),e(OC,QRr),e(OC,IY),e(IY,HRr),e(OC,URr),e(xe,JRr),e(xe,VC),e(VC,Q8e),e(Q8e,YRr),e(VC,KRr),e(VC,qY),e(qY,ZRr),e(VC,ePr),e(xe,oPr),e(xe,XC),e(XC,H8e),e(H8e,rPr),e(XC,tPr),e(XC,NY),e(NY,aPr),e(XC,nPr),e(xe,sPr),e(xe,zC),e(zC,U8e),e(U8e,lPr),e(zC,iPr),e(zC,jY),e(jY,dPr),e(zC,cPr),e(xe,fPr),e(xe,WC),e(WC,J8e),e(J8e,mPr),e(WC,gPr),e(WC,DY),e(DY,hPr),e(WC,pPr),e(xe,_Pr),e(xe,QC),e(QC,Y8e),e(Y8e,uPr),e(QC,bPr),e(QC,GY),e(GY,vPr),e(QC,FPr),e(xe,TPr),e(xe,HC),e(HC,K8e),e(K8e,MPr),e(HC,EPr),e(HC,OY),e(OY,CPr),e(HC,wPr),e(xe,APr),e(xe,UC),e(UC,Z8e),e(Z8e,yPr),e(UC,LPr),e(UC,VY),e(VY,xPr),e(UC,$Pr),e(xe,kPr),e(xe,JC),e(JC,eMe),e(eMe,SPr),e(JC,RPr),e(JC,XY),e(XY,PPr),e(JC,BPr),e(xe,IPr),e(xe,YC),e(YC,oMe),e(oMe,qPr),e(YC,NPr),e(YC,zY),e(zY,jPr),e(YC,DPr),e(Xr,GPr),M(KC,Xr,null),b(f,XNe,u),b(f,Wc,u),e(Wc,ZC),e(ZC,rMe),M(O9,rMe,null),e(Wc,OPr),e(Wc,tMe),e(tMe,VPr),b(f,zNe,u),b(f,ur,u),M(V9,ur,null),e(ur,XPr),e(ur,Qc),e(Qc,zPr),e(Qc,WY),e(WY,WPr),e(Qc,QPr),e(Qc,QY),e(QY,HPr),e(Qc,UPr),e(ur,JPr),e(ur,X9),e(X9,YPr),e(X9,aMe),e(aMe,KPr),e(X9,ZPr),e(ur,eBr),e(ur,Qt),M(z9,Qt,null),e(Qt,oBr),e(Qt,nMe),e(nMe,rBr),e(Qt,tBr),e(Qt,Hc),e(Hc,aBr),e(Hc,sMe),e(sMe,nBr),e(Hc,sBr),e(Hc,HY),e(HY,lBr),e(Hc,iBr),e(Qt,dBr),M(e5,Qt,null),e(ur,cBr),e(ur,zr),M(W9,zr,null),e(zr,fBr),e(zr,lMe),e(lMe,mBr),e(zr,gBr),e(zr,Fn),e(Fn,hBr),e(Fn,iMe),e(iMe,pBr),e(Fn,_Br),e(Fn,dMe),e(dMe,uBr),e(Fn,bBr),e(Fn,cMe),e(cMe,vBr),e(Fn,FBr),e(zr,TBr),e(zr,$e),e($e,o5),e(o5,fMe),e(fMe,MBr),e(o5,EBr),e(o5,UY),e(UY,CBr),e(o5,wBr),e($e,ABr),e($e,r5),e(r5,mMe),e(mMe,yBr),e(r5,LBr),e(r5,JY),e(JY,xBr),e(r5,$Br),e($e,kBr),e($e,t5),e(t5,gMe),e(gMe,SBr),e(t5,RBr),e(t5,YY),e(YY,PBr),e(t5,BBr),e($e,IBr),e($e,a5),e(a5,hMe),e(hMe,qBr),e(a5,NBr),e(a5,KY),e(KY,jBr),e(a5,DBr),e($e,GBr),e($e,n5),e(n5,pMe),e(pMe,OBr),e(n5,VBr),e(n5,ZY),e(ZY,XBr),e(n5,zBr),e($e,WBr),e($e,s5),e(s5,_Me),e(_Me,QBr),e(s5,HBr),e(s5,eK),e(eK,UBr),e(s5,JBr),e($e,YBr),e($e,l5),e(l5,uMe),e(uMe,KBr),e(l5,ZBr),e(l5,oK),e(oK,eIr),e(l5,oIr),e($e,rIr),e($e,i5),e(i5,bMe),e(bMe,tIr),e(i5,aIr),e(i5,rK),e(rK,nIr),e(i5,sIr),e($e,lIr),e($e,d5),e(d5,vMe),e(vMe,iIr),e(d5,dIr),e(d5,tK),e(tK,cIr),e(d5,fIr),e($e,mIr),e($e,c5),e(c5,FMe),e(FMe,gIr),e(c5,hIr),e(c5,aK),e(aK,pIr),e(c5,_Ir),e(zr,uIr),M(f5,zr,null),b(f,WNe,u),b(f,Uc,u),e(Uc,m5),e(m5,TMe),M(Q9,TMe,null),e(Uc,bIr),e(Uc,MMe),e(MMe,vIr),b(f,QNe,u),b(f,br,u),M(H9,br,null),e(br,FIr),e(br,Jc),e(Jc,TIr),e(Jc,nK),e(nK,MIr),e(Jc,EIr),e(Jc,sK),e(sK,CIr),e(Jc,wIr),e(br,AIr),e(br,U9),e(U9,yIr),e(U9,EMe),e(EMe,LIr),e(U9,xIr),e(br,$Ir),e(br,Ht),M(J9,Ht,null),e(Ht,kIr),e(Ht,CMe),e(CMe,SIr),e(Ht,RIr),e(Ht,Yc),e(Yc,PIr),e(Yc,wMe),e(wMe,BIr),e(Yc,IIr),e(Yc,lK),e(lK,qIr),e(Yc,NIr),e(Ht,jIr),M(g5,Ht,null),e(br,DIr),e(br,Wr),M(Y9,Wr,null),e(Wr,GIr),e(Wr,AMe),e(AMe,OIr),e(Wr,VIr),e(Wr,Tn),e(Tn,XIr),e(Tn,yMe),e(yMe,zIr),e(Tn,WIr),e(Tn,LMe),e(LMe,QIr),e(Tn,HIr),e(Tn,xMe),e(xMe,UIr),e(Tn,JIr),e(Wr,YIr),e(Wr,De),e(De,h5),e(h5,$Me),e($Me,KIr),e(h5,ZIr),e(h5,iK),e(iK,eqr),e(h5,oqr),e(De,rqr),e(De,p5),e(p5,kMe),e(kMe,tqr),e(p5,aqr),e(p5,dK),e(dK,nqr),e(p5,sqr),e(De,lqr),e(De,_5),e(_5,SMe),e(SMe,iqr),e(_5,dqr),e(_5,cK),e(cK,cqr),e(_5,fqr),e(De,mqr),e(De,u5),e(u5,RMe),e(RMe,gqr),e(u5,hqr),e(u5,fK),e(fK,pqr),e(u5,_qr),e(De,uqr),e(De,b5),e(b5,PMe),e(PMe,bqr),e(b5,vqr),e(b5,mK),e(mK,Fqr),e(b5,Tqr),e(De,Mqr),e(De,v5),e(v5,BMe),e(BMe,Eqr),e(v5,Cqr),e(v5,gK),e(gK,wqr),e(v5,Aqr),e(De,yqr),e(De,F5),e(F5,IMe),e(IMe,Lqr),e(F5,xqr),e(F5,hK),e(hK,$qr),e(F5,kqr),e(De,Sqr),e(De,T5),e(T5,qMe),e(qMe,Rqr),e(T5,Pqr),e(T5,pK),e(pK,Bqr),e(T5,Iqr),e(Wr,qqr),M(M5,Wr,null),b(f,HNe,u),b(f,Kc,u),e(Kc,E5),e(E5,NMe),M(K9,NMe,null),e(Kc,Nqr),e(Kc,jMe),e(jMe,jqr),b(f,UNe,u),b(f,vr,u),M(Z9,vr,null),e(vr,Dqr),e(vr,Zc),e(Zc,Gqr),e(Zc,_K),e(_K,Oqr),e(Zc,Vqr),e(Zc,uK),e(uK,Xqr),e(Zc,zqr),e(vr,Wqr),e(vr,ex),e(ex,Qqr),e(ex,DMe),e(DMe,Hqr),e(ex,Uqr),e(vr,Jqr),e(vr,Ut),M(ox,Ut,null),e(Ut,Yqr),e(Ut,GMe),e(GMe,Kqr),e(Ut,Zqr),e(Ut,ef),e(ef,eNr),e(ef,OMe),e(OMe,oNr),e(ef,rNr),e(ef,bK),e(bK,tNr),e(ef,aNr),e(Ut,nNr),M(C5,Ut,null),e(vr,sNr),e(vr,Qr),M(rx,Qr,null),e(Qr,lNr),e(Qr,VMe),e(VMe,iNr),e(Qr,dNr),e(Qr,Mn),e(Mn,cNr),e(Mn,XMe),e(XMe,fNr),e(Mn,mNr),e(Mn,zMe),e(zMe,gNr),e(Mn,hNr),e(Mn,WMe),e(WMe,pNr),e(Mn,_Nr),e(Qr,uNr),e(Qr,Ge),e(Ge,w5),e(w5,QMe),e(QMe,bNr),e(w5,vNr),e(w5,vK),e(vK,FNr),e(w5,TNr),e(Ge,MNr),e(Ge,A5),e(A5,HMe),e(HMe,ENr),e(A5,CNr),e(A5,FK),e(FK,wNr),e(A5,ANr),e(Ge,yNr),e(Ge,y5),e(y5,UMe),e(UMe,LNr),e(y5,xNr),e(y5,TK),e(TK,$Nr),e(y5,kNr),e(Ge,SNr),e(Ge,L5),e(L5,JMe),e(JMe,RNr),e(L5,PNr),e(L5,MK),e(MK,BNr),e(L5,INr),e(Ge,qNr),e(Ge,x5),e(x5,YMe),e(YMe,NNr),e(x5,jNr),e(x5,EK),e(EK,DNr),e(x5,GNr),e(Ge,ONr),e(Ge,$5),e($5,KMe),e(KMe,VNr),e($5,XNr),e($5,CK),e(CK,zNr),e($5,WNr),e(Ge,QNr),e(Ge,k5),e(k5,ZMe),e(ZMe,HNr),e(k5,UNr),e(k5,wK),e(wK,JNr),e(k5,YNr),e(Ge,KNr),e(Ge,S5),e(S5,e4e),e(e4e,ZNr),e(S5,ejr),e(S5,AK),e(AK,ojr),e(S5,rjr),e(Qr,tjr),M(R5,Qr,null),b(f,JNe,u),b(f,of,u),e(of,P5),e(P5,o4e),M(tx,o4e,null),e(of,ajr),e(of,r4e),e(r4e,njr),b(f,YNe,u),b(f,Fr,u),M(ax,Fr,null),e(Fr,sjr),e(Fr,rf),e(rf,ljr),e(rf,yK),e(yK,ijr),e(rf,djr),e(rf,LK),e(LK,cjr),e(rf,fjr),e(Fr,mjr),e(Fr,nx),e(nx,gjr),e(nx,t4e),e(t4e,hjr),e(nx,pjr),e(Fr,_jr),e(Fr,Jt),M(sx,Jt,null),e(Jt,ujr),e(Jt,a4e),e(a4e,bjr),e(Jt,vjr),e(Jt,tf),e(tf,Fjr),e(tf,n4e),e(n4e,Tjr),e(tf,Mjr),e(tf,xK),e(xK,Ejr),e(tf,Cjr),e(Jt,wjr),M(B5,Jt,null),e(Fr,Ajr),e(Fr,Hr),M(lx,Hr,null),e(Hr,yjr),e(Hr,s4e),e(s4e,Ljr),e(Hr,xjr),e(Hr,En),e(En,$jr),e(En,l4e),e(l4e,kjr),e(En,Sjr),e(En,i4e),e(i4e,Rjr),e(En,Pjr),e(En,d4e),e(d4e,Bjr),e(En,Ijr),e(Hr,qjr),e(Hr,c4e),e(c4e,I5),e(I5,f4e),e(f4e,Njr),e(I5,jjr),e(I5,$K),e($K,Djr),e(I5,Gjr),e(Hr,Ojr),M(q5,Hr,null),b(f,KNe,u),b(f,af,u),e(af,N5),e(N5,m4e),M(ix,m4e,null),e(af,Vjr),e(af,g4e),e(g4e,Xjr),b(f,ZNe,u),b(f,Tr,u),M(dx,Tr,null),e(Tr,zjr),e(Tr,nf),e(nf,Wjr),e(nf,kK),e(kK,Qjr),e(nf,Hjr),e(nf,SK),e(SK,Ujr),e(nf,Jjr),e(Tr,Yjr),e(Tr,cx),e(cx,Kjr),e(cx,h4e),e(h4e,Zjr),e(cx,eDr),e(Tr,oDr),e(Tr,Yt),M(fx,Yt,null),e(Yt,rDr),e(Yt,p4e),e(p4e,tDr),e(Yt,aDr),e(Yt,sf),e(sf,nDr),e(sf,_4e),e(_4e,sDr),e(sf,lDr),e(sf,RK),e(RK,iDr),e(sf,dDr),e(Yt,cDr),M(j5,Yt,null),e(Tr,fDr),e(Tr,Ur),M(mx,Ur,null),e(Ur,mDr),e(Ur,u4e),e(u4e,gDr),e(Ur,hDr),e(Ur,Cn),e(Cn,pDr),e(Cn,b4e),e(b4e,_Dr),e(Cn,uDr),e(Cn,v4e),e(v4e,bDr),e(Cn,vDr),e(Cn,F4e),e(F4e,FDr),e(Cn,TDr),e(Ur,MDr),e(Ur,gx),e(gx,D5),e(D5,T4e),e(T4e,EDr),e(D5,CDr),e(D5,PK),e(PK,wDr),e(D5,ADr),e(gx,yDr),e(gx,G5),e(G5,M4e),e(M4e,LDr),e(G5,xDr),e(G5,BK),e(BK,$Dr),e(G5,kDr),e(Ur,SDr),M(O5,Ur,null),b(f,eje,u),b(f,lf,u),e(lf,V5),e(V5,E4e),M(hx,E4e,null),e(lf,RDr),e(lf,C4e),e(C4e,PDr),b(f,oje,u),b(f,Mr,u),M(px,Mr,null),e(Mr,BDr),e(Mr,df),e(df,IDr),e(df,IK),e(IK,qDr),e(df,NDr),e(df,qK),e(qK,jDr),e(df,DDr),e(Mr,GDr),e(Mr,_x),e(_x,ODr),e(_x,w4e),e(w4e,VDr),e(_x,XDr),e(Mr,zDr),e(Mr,Kt),M(ux,Kt,null),e(Kt,WDr),e(Kt,A4e),e(A4e,QDr),e(Kt,HDr),e(Kt,cf),e(cf,UDr),e(cf,y4e),e(y4e,JDr),e(cf,YDr),e(cf,NK),e(NK,KDr),e(cf,ZDr),e(Kt,eGr),M(X5,Kt,null),e(Mr,oGr),e(Mr,Jr),M(bx,Jr,null),e(Jr,rGr),e(Jr,L4e),e(L4e,tGr),e(Jr,aGr),e(Jr,wn),e(wn,nGr),e(wn,x4e),e(x4e,sGr),e(wn,lGr),e(wn,$4e),e($4e,iGr),e(wn,dGr),e(wn,k4e),e(k4e,cGr),e(wn,fGr),e(Jr,mGr),e(Jr,S4e),e(S4e,z5),e(z5,R4e),e(R4e,gGr),e(z5,hGr),e(z5,jK),e(jK,pGr),e(z5,_Gr),e(Jr,uGr),M(W5,Jr,null),rje=!0},p(f,[u]){const vx={};u&2&&(vx.$$scope={dirty:u,ctx:f}),vf.$set(vx);const P4e={};u&2&&(P4e.$$scope={dirty:u,ctx:f}),Fg.$set(P4e);const B4e={};u&2&&(B4e.$$scope={dirty:u,ctx:f}),eh.$set(B4e);const I4e={};u&2&&(I4e.$$scope={dirty:u,ctx:f}),$h.$set(I4e);const Fx={};u&2&&(Fx.$$scope={dirty:u,ctx:f}),kh.$set(Fx);const q4e={};u&2&&(q4e.$$scope={dirty:u,ctx:f}),Jh.$set(q4e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),Yh.$set(An);const N4e={};u&2&&(N4e.$$scope={dirty:u,ctx:f}),ep.$set(N4e);const j4e={};u&2&&(j4e.$$scope={dirty:u,ctx:f}),Q_.$set(j4e);const D4e={};u&2&&(D4e.$$scope={dirty:u,ctx:f}),U_.$set(D4e);const Tx={};u&2&&(Tx.$$scope={dirty:u,ctx:f}),ju.$set(Tx);const G4e={};u&2&&(G4e.$$scope={dirty:u,ctx:f}),Gu.$set(G4e);const Mx={};u&2&&(Mx.$$scope={dirty:u,ctx:f}),w1.$set(Mx);const O4e={};u&2&&(O4e.$$scope={dirty:u,ctx:f}),y1.$set(O4e);const Ex={};u&2&&(Ex.$$scope={dirty:u,ctx:f}),c7.$set(Ex);const V4e={};u&2&&(V4e.$$scope={dirty:u,ctx:f}),m7.$set(V4e);const X4e={};u&2&&(X4e.$$scope={dirty:u,ctx:f}),$7.$set(X4e);const z4e={};u&2&&(z4e.$$scope={dirty:u,ctx:f}),S7.$set(z4e);const ff={};u&2&&(ff.$$scope={dirty:u,ctx:f}),Ab.$set(ff);const W4e={};u&2&&(W4e.$$scope={dirty:u,ctx:f}),Lb.$set(W4e);const Q4e={};u&2&&(Q4e.$$scope={dirty:u,ctx:f}),n2.$set(Q4e);const H4e={};u&2&&(H4e.$$scope={dirty:u,ctx:f}),l2.$set(H4e);const Cx={};u&2&&(Cx.$$scope={dirty:u,ctx:f}),h2.$set(Cx);const U4e={};u&2&&(U4e.$$scope={dirty:u,ctx:f}),_2.$set(U4e);const J4e={};u&2&&(J4e.$$scope={dirty:u,ctx:f}),Y2.$set(J4e);const Y4e={};u&2&&(Y4e.$$scope={dirty:u,ctx:f}),Z2.$set(Y4e);const et={};u&2&&(et.$$scope={dirty:u,ctx:f}),Dv.$set(et);const wx={};u&2&&(wx.$$scope={dirty:u,ctx:f}),Ov.$set(wx);const K4e={};u&2&&(K4e.$$scope={dirty:u,ctx:f}),zv.$set(K4e);const Ax={};u&2&&(Ax.$$scope={dirty:u,ctx:f}),Qv.$set(Ax);const Z4e={};u&2&&(Z4e.$$scope={dirty:u,ctx:f}),l3.$set(Z4e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),d3.$set(ot);const eEe={};u&2&&(eEe.$$scope={dirty:u,ctx:f}),m3.$set(eEe);const mf={};u&2&&(mf.$$scope={dirty:u,ctx:f}),h3.$set(mf);const oEe={};u&2&&(oEe.$$scope={dirty:u,ctx:f}),w3.$set(oEe);const rEe={};u&2&&(rEe.$$scope={dirty:u,ctx:f}),y3.$set(rEe);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),P3.$set(y);const Q5={};u&2&&(Q5.$$scope={dirty:u,ctx:f}),I3.$set(Q5);const tEe={};u&2&&(tEe.$$scope={dirty:u,ctx:f}),Q3.$set(tEe);const aEe={};u&2&&(aEe.$$scope={dirty:u,ctx:f}),U3.$set(aEe);const H5={};u&2&&(H5.$$scope={dirty:u,ctx:f}),Z3.$set(H5);const nEe={};u&2&&(nEe.$$scope={dirty:u,ctx:f}),oF.$set(nEe);const sEe={};u&2&&(sEe.$$scope={dirty:u,ctx:f}),iF.$set(sEe);const U5={};u&2&&(U5.$$scope={dirty:u,ctx:f}),cF.$set(U5);const lEe={};u&2&&(lEe.$$scope={dirty:u,ctx:f}),pF.$set(lEe);const iEe={};u&2&&(iEe.$$scope={dirty:u,ctx:f}),uF.$set(iEe);const J5={};u&2&&(J5.$$scope={dirty:u,ctx:f}),TF.$set(J5);const dEe={};u&2&&(dEe.$$scope={dirty:u,ctx:f}),EF.$set(dEe);const cEe={};u&2&&(cEe.$$scope={dirty:u,ctx:f}),AF.$set(cEe);const Y5={};u&2&&(Y5.$$scope={dirty:u,ctx:f}),LF.$set(Y5);const fEe={};u&2&&(fEe.$$scope={dirty:u,ctx:f}),PF.$set(fEe);const mEe={};u&2&&(mEe.$$scope={dirty:u,ctx:f}),IF.$set(mEe);const K5={};u&2&&(K5.$$scope={dirty:u,ctx:f}),jF.$set(K5);const gEe={};u&2&&(gEe.$$scope={dirty:u,ctx:f}),GF.$set(gEe);const hEe={};u&2&&(hEe.$$scope={dirty:u,ctx:f}),RT.$set(hEe);const Z5={};u&2&&(Z5.$$scope={dirty:u,ctx:f}),BT.$set(Z5);const pEe={};u&2&&(pEe.$$scope={dirty:u,ctx:f}),n8.$set(pEe);const _Ee={};u&2&&(_Ee.$$scope={dirty:u,ctx:f}),l8.$set(_Ee);const ew={};u&2&&(ew.$$scope={dirty:u,ctx:f}),F8.$set(ew);const uEe={};u&2&&(uEe.$$scope={dirty:u,ctx:f}),M8.$set(uEe);const bEe={};u&2&&(bEe.$$scope={dirty:u,ctx:f}),y8.$set(bEe);const ow={};u&2&&(ow.$$scope={dirty:u,ctx:f}),x8.$set(ow);const vEe={};u&2&&(vEe.$$scope={dirty:u,ctx:f}),J8.$set(vEe);const FEe={};u&2&&(FEe.$$scope={dirty:u,ctx:f}),K8.$set(FEe);const rw={};u&2&&(rw.$$scope={dirty:u,ctx:f}),dM.$set(rw);const TEe={};u&2&&(TEe.$$scope={dirty:u,ctx:f}),fM.$set(TEe);const MEe={};u&2&&(MEe.$$scope={dirty:u,ctx:f}),NM.$set(MEe);const tw={};u&2&&(tw.$$scope={dirty:u,ctx:f}),DM.$set(tw);const EEe={};u&2&&(EEe.$$scope={dirty:u,ctx:f}),a4.$set(EEe);const CEe={};u&2&&(CEe.$$scope={dirty:u,ctx:f}),s4.$set(CEe);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),d4.$set(aw);const wEe={};u&2&&(wEe.$$scope={dirty:u,ctx:f}),f4.$set(wEe);const AEe={};u&2&&(AEe.$$scope={dirty:u,ctx:f}),g4.$set(AEe);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),p4.$set(nw);const yEe={};u&2&&(yEe.$$scope={dirty:u,ctx:f}),I4.$set(yEe);const LEe={};u&2&&(LEe.$$scope={dirty:u,ctx:f}),N4.$set(LEe);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),nE.$set(sw);const xEe={};u&2&&(xEe.$$scope={dirty:u,ctx:f}),lE.$set(xEe);const $Ee={};u&2&&($Ee.$$scope={dirty:u,ctx:f}),dE.$set($Ee);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),fE.$set(lw);const kEe={};u&2&&(kEe.$$scope={dirty:u,ctx:f}),gE.$set(kEe);const SEe={};u&2&&(SEe.$$scope={dirty:u,ctx:f}),pE.$set(SEe);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),GE.$set(iw);const REe={};u&2&&(REe.$$scope={dirty:u,ctx:f}),VE.$set(REe);const PEe={};u&2&&(PEe.$$scope={dirty:u,ctx:f}),ZE.$set(PEe);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),oC.$set(dw);const BEe={};u&2&&(BEe.$$scope={dirty:u,ctx:f}),hC.$set(BEe);const IEe={};u&2&&(IEe.$$scope={dirty:u,ctx:f}),_C.$set(IEe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),yC.$set(cw);const qEe={};u&2&&(qEe.$$scope={dirty:u,ctx:f}),xC.$set(qEe);const NEe={};u&2&&(NEe.$$scope={dirty:u,ctx:f}),jC.$set(NEe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),GC.$set(fw);const jEe={};u&2&&(jEe.$$scope={dirty:u,ctx:f}),KC.$set(jEe);const DEe={};u&2&&(DEe.$$scope={dirty:u,ctx:f}),e5.$set(DEe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),f5.$set(mw);const GEe={};u&2&&(GEe.$$scope={dirty:u,ctx:f}),g5.$set(GEe);const OEe={};u&2&&(OEe.$$scope={dirty:u,ctx:f}),M5.$set(OEe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),C5.$set(gw);const VEe={};u&2&&(VEe.$$scope={dirty:u,ctx:f}),R5.$set(VEe);const XEe={};u&2&&(XEe.$$scope={dirty:u,ctx:f}),B5.$set(XEe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),q5.$set(hw);const zEe={};u&2&&(zEe.$$scope={dirty:u,ctx:f}),j5.$set(zEe);const WEe={};u&2&&(WEe.$$scope={dirty:u,ctx:f}),O5.$set(WEe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),X5.$set(pw);const QEe={};u&2&&(QEe.$$scope={dirty:u,ctx:f}),W5.$set(QEe)},i(f){rje||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(vf.$$.fragment,f),E(_A.$$.fragment,f),E(uA.$$.fragment,f),E(FA.$$.fragment,f),E(Fg.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(EA.$$.fragment,f),E(AA.$$.fragment,f),E(eh.$$.fragment,f),E(yA.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(SA.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(RA.$$.fragment,f),E(PA.$$.fragment,f),E(BA.$$.fragment,f),E(NA.$$.fragment,f),E(Jh.$$.fragment,f),E(Yh.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(VA.$$.fragment,f),E(ep.$$.fragment,f),E(XA.$$.fragment,f),E(Q_.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(U_.$$.fragment,f),E(UA.$$.fragment,f),E(ju.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(Gu.$$.fragment,f),E(e6.$$.fragment,f),E(w1.$$.fragment,f),E(o6.$$.fragment,f),E(r6.$$.fragment,f),E(a6.$$.fragment,f),E(y1.$$.fragment,f),E(n6.$$.fragment,f),E(c7.$$.fragment,f),E(s6.$$.fragment,f),E(l6.$$.fragment,f),E(d6.$$.fragment,f),E(m7.$$.fragment,f),E(c6.$$.fragment,f),E($7.$$.fragment,f),E(f6.$$.fragment,f),E(m6.$$.fragment,f),E(h6.$$.fragment,f),E(S7.$$.fragment,f),E(p6.$$.fragment,f),E(Ab.$$.fragment,f),E(_6.$$.fragment,f),E(u6.$$.fragment,f),E(v6.$$.fragment,f),E(Lb.$$.fragment,f),E(F6.$$.fragment,f),E(n2.$$.fragment,f),E(T6.$$.fragment,f),E(M6.$$.fragment,f),E(C6.$$.fragment,f),E(l2.$$.fragment,f),E(w6.$$.fragment,f),E(h2.$$.fragment,f),E(A6.$$.fragment,f),E(y6.$$.fragment,f),E(x6.$$.fragment,f),E(_2.$$.fragment,f),E($6.$$.fragment,f),E(Y2.$$.fragment,f),E(k6.$$.fragment,f),E(S6.$$.fragment,f),E(P6.$$.fragment,f),E(Z2.$$.fragment,f),E(B6.$$.fragment,f),E(Dv.$$.fragment,f),E(I6.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(Ov.$$.fragment,f),E(D6.$$.fragment,f),E(zv.$$.fragment,f),E(G6.$$.fragment,f),E(O6.$$.fragment,f),E(X6.$$.fragment,f),E(Qv.$$.fragment,f),E(z6.$$.fragment,f),E(l3.$$.fragment,f),E(W6.$$.fragment,f),E(Q6.$$.fragment,f),E(U6.$$.fragment,f),E(d3.$$.fragment,f),E(J6.$$.fragment,f),E(m3.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(ey.$$.fragment,f),E(h3.$$.fragment,f),E(oy.$$.fragment,f),E(w3.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(y3.$$.fragment,f),E(sy.$$.fragment,f),E(P3.$$.fragment,f),E(ly.$$.fragment,f),E(iy.$$.fragment,f),E(cy.$$.fragment,f),E(I3.$$.fragment,f),E(fy.$$.fragment,f),E(Q3.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(py.$$.fragment,f),E(U3.$$.fragment,f),E(_y.$$.fragment,f),E(Z3.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(oF.$$.fragment,f),E(My.$$.fragment,f),E(iF.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(cF.$$.fragment,f),E(yy.$$.fragment,f),E(pF.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(uF.$$.fragment,f),E(Sy.$$.fragment,f),E(TF.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(qy.$$.fragment,f),E(EF.$$.fragment,f),E(Ny.$$.fragment,f),E(AF.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(LF.$$.fragment,f),E(Vy.$$.fragment,f),E(PF.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(IF.$$.fragment,f),E(Hy.$$.fragment,f),E(jF.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(GF.$$.fragment,f),E(Zy.$$.fragment,f),E(RT.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(BT.$$.fragment,f),E(aL.$$.fragment,f),E(n8.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(l8.$$.fragment,f),E(dL.$$.fragment,f),E(F8.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(M8.$$.fragment,f),E(hL.$$.fragment,f),E(y8.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(x8.$$.fragment,f),E(vL.$$.fragment,f),E(J8.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(K8.$$.fragment,f),E(CL.$$.fragment,f),E(dM.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(fM.$$.fragment,f),E(xL.$$.fragment,f),E(NM.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(DM.$$.fragment,f),E(PL.$$.fragment,f),E(a4.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(s4.$$.fragment,f),E(jL.$$.fragment,f),E(d4.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(f4.$$.fragment,f),E(zL.$$.fragment,f),E(g4.$$.fragment,f),E(WL.$$.fragment,f),E(QL.$$.fragment,f),E(UL.$$.fragment,f),E(p4.$$.fragment,f),E(JL.$$.fragment,f),E(I4.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e9.$$.fragment,f),E(N4.$$.fragment,f),E(o9.$$.fragment,f),E(nE.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(lE.$$.fragment,f),E(s9.$$.fragment,f),E(dE.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(fE.$$.fragment,f),E(f9.$$.fragment,f),E(gE.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(pE.$$.fragment,f),E(_9.$$.fragment,f),E(GE.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(VE.$$.fragment,f),E(T9.$$.fragment,f),E(ZE.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(oC.$$.fragment,f),E(A9.$$.fragment,f),E(hC.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(_C.$$.fragment,f),E(k9.$$.fragment,f),E(yC.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(xC.$$.fragment,f),E(I9.$$.fragment,f),E(jC.$$.fragment,f),E(q9.$$.fragment,f),E(N9.$$.fragment,f),E(D9.$$.fragment,f),E(GC.$$.fragment,f),E(G9.$$.fragment,f),E(KC.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(e5.$$.fragment,f),E(W9.$$.fragment,f),E(f5.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(g5.$$.fragment,f),E(Y9.$$.fragment,f),E(M5.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(C5.$$.fragment,f),E(rx.$$.fragment,f),E(R5.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(B5.$$.fragment,f),E(lx.$$.fragment,f),E(q5.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(j5.$$.fragment,f),E(mx.$$.fragment,f),E(O5.$$.fragment,f),E(hx.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(X5.$$.fragment,f),E(bx.$$.fragment,f),E(W5.$$.fragment,f),rje=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(vf.$$.fragment,f),C(_A.$$.fragment,f),C(uA.$$.fragment,f),C(FA.$$.fragment,f),C(Fg.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(EA.$$.fragment,f),C(AA.$$.fragment,f),C(eh.$$.fragment,f),C(yA.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(SA.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(RA.$$.fragment,f),C(PA.$$.fragment,f),C(BA.$$.fragment,f),C(NA.$$.fragment,f),C(Jh.$$.fragment,f),C(Yh.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(VA.$$.fragment,f),C(ep.$$.fragment,f),C(XA.$$.fragment,f),C(Q_.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(U_.$$.fragment,f),C(UA.$$.fragment,f),C(ju.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(Gu.$$.fragment,f),C(e6.$$.fragment,f),C(w1.$$.fragment,f),C(o6.$$.fragment,f),C(r6.$$.fragment,f),C(a6.$$.fragment,f),C(y1.$$.fragment,f),C(n6.$$.fragment,f),C(c7.$$.fragment,f),C(s6.$$.fragment,f),C(l6.$$.fragment,f),C(d6.$$.fragment,f),C(m7.$$.fragment,f),C(c6.$$.fragment,f),C($7.$$.fragment,f),C(f6.$$.fragment,f),C(m6.$$.fragment,f),C(h6.$$.fragment,f),C(S7.$$.fragment,f),C(p6.$$.fragment,f),C(Ab.$$.fragment,f),C(_6.$$.fragment,f),C(u6.$$.fragment,f),C(v6.$$.fragment,f),C(Lb.$$.fragment,f),C(F6.$$.fragment,f),C(n2.$$.fragment,f),C(T6.$$.fragment,f),C(M6.$$.fragment,f),C(C6.$$.fragment,f),C(l2.$$.fragment,f),C(w6.$$.fragment,f),C(h2.$$.fragment,f),C(A6.$$.fragment,f),C(y6.$$.fragment,f),C(x6.$$.fragment,f),C(_2.$$.fragment,f),C($6.$$.fragment,f),C(Y2.$$.fragment,f),C(k6.$$.fragment,f),C(S6.$$.fragment,f),C(P6.$$.fragment,f),C(Z2.$$.fragment,f),C(B6.$$.fragment,f),C(Dv.$$.fragment,f),C(I6.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(Ov.$$.fragment,f),C(D6.$$.fragment,f),C(zv.$$.fragment,f),C(G6.$$.fragment,f),C(O6.$$.fragment,f),C(X6.$$.fragment,f),C(Qv.$$.fragment,f),C(z6.$$.fragment,f),C(l3.$$.fragment,f),C(W6.$$.fragment,f),C(Q6.$$.fragment,f),C(U6.$$.fragment,f),C(d3.$$.fragment,f),C(J6.$$.fragment,f),C(m3.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(ey.$$.fragment,f),C(h3.$$.fragment,f),C(oy.$$.fragment,f),C(w3.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(y3.$$.fragment,f),C(sy.$$.fragment,f),C(P3.$$.fragment,f),C(ly.$$.fragment,f),C(iy.$$.fragment,f),C(cy.$$.fragment,f),C(I3.$$.fragment,f),C(fy.$$.fragment,f),C(Q3.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(py.$$.fragment,f),C(U3.$$.fragment,f),C(_y.$$.fragment,f),C(Z3.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(oF.$$.fragment,f),C(My.$$.fragment,f),C(iF.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(cF.$$.fragment,f),C(yy.$$.fragment,f),C(pF.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(uF.$$.fragment,f),C(Sy.$$.fragment,f),C(TF.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(qy.$$.fragment,f),C(EF.$$.fragment,f),C(Ny.$$.fragment,f),C(AF.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(LF.$$.fragment,f),C(Vy.$$.fragment,f),C(PF.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(IF.$$.fragment,f),C(Hy.$$.fragment,f),C(jF.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(GF.$$.fragment,f),C(Zy.$$.fragment,f),C(RT.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(BT.$$.fragment,f),C(aL.$$.fragment,f),C(n8.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(l8.$$.fragment,f),C(dL.$$.fragment,f),C(F8.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(M8.$$.fragment,f),C(hL.$$.fragment,f),C(y8.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(x8.$$.fragment,f),C(vL.$$.fragment,f),C(J8.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(K8.$$.fragment,f),C(CL.$$.fragment,f),C(dM.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(fM.$$.fragment,f),C(xL.$$.fragment,f),C(NM.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(DM.$$.fragment,f),C(PL.$$.fragment,f),C(a4.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(s4.$$.fragment,f),C(jL.$$.fragment,f),C(d4.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(f4.$$.fragment,f),C(zL.$$.fragment,f),C(g4.$$.fragment,f),C(WL.$$.fragment,f),C(QL.$$.fragment,f),C(UL.$$.fragment,f),C(p4.$$.fragment,f),C(JL.$$.fragment,f),C(I4.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e9.$$.fragment,f),C(N4.$$.fragment,f),C(o9.$$.fragment,f),C(nE.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(lE.$$.fragment,f),C(s9.$$.fragment,f),C(dE.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(fE.$$.fragment,f),C(f9.$$.fragment,f),C(gE.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(pE.$$.fragment,f),C(_9.$$.fragment,f),C(GE.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(VE.$$.fragment,f),C(T9.$$.fragment,f),C(ZE.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(oC.$$.fragment,f),C(A9.$$.fragment,f),C(hC.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(_C.$$.fragment,f),C(k9.$$.fragment,f),C(yC.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(xC.$$.fragment,f),C(I9.$$.fragment,f),C(jC.$$.fragment,f),C(q9.$$.fragment,f),C(N9.$$.fragment,f),C(D9.$$.fragment,f),C(GC.$$.fragment,f),C(G9.$$.fragment,f),C(KC.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(e5.$$.fragment,f),C(W9.$$.fragment,f),C(f5.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(g5.$$.fragment,f),C(Y9.$$.fragment,f),C(M5.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(C5.$$.fragment,f),C(rx.$$.fragment,f),C(R5.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(B5.$$.fragment,f),C(lx.$$.fragment,f),C(q5.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(j5.$$.fragment,f),C(mx.$$.fragment,f),C(O5.$$.fragment,f),C(hx.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(X5.$$.fragment,f),C(bx.$$.fragment,f),C(W5.$$.fragment,f),rje=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(hf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(ZIe),f&&t(ui),w(hA),f&&t(eqe),f&&t(kn),f&&t(oqe),w(pA,f),f&&t(rqe),f&&t(I$),f&&t(tqe),w(vf,f),f&&t(aqe),f&&t(bi),w(_A),f&&t(nqe),f&&t(Co),w(uA),w(FA),w(Fg),w(TA),f&&t(sqe),f&&t(Fi),w(MA),f&&t(lqe),f&&t(wo),w(EA),w(AA),w(eh),w(yA),f&&t(iqe),f&&t(Ti),w(LA),f&&t(dqe),f&&t(Ao),w(xA),w(SA),w($h),w(kh),w(RA),f&&t(cqe),f&&t(Mi),w(PA),f&&t(fqe),f&&t(yo),w(BA),w(NA),w(Jh),w(Yh),w(jA),f&&t(mqe),f&&t(Ci),w(DA),f&&t(gqe),f&&t(Lo),w(GA),w(VA),w(ep),w(XA),w(Q_),f&&t(hqe),f&&t(yi),w(zA),f&&t(pqe),f&&t(xo),w(WA),w(HA),w(U_),w(UA),w(ju),f&&t(_qe),f&&t($i),w(JA),f&&t(uqe),f&&t($o),w(YA),w(ZA),w(Gu),w(e6),w(w1),f&&t(bqe),f&&t(Ri),w(o6),f&&t(vqe),f&&t(ko),w(r6),w(a6),w(y1),w(n6),w(c7),f&&t(Fqe),f&&t(Ii),w(s6),f&&t(Tqe),f&&t(So),w(l6),w(d6),w(m7),w(c6),w($7),f&&t(Mqe),f&&t(ji),w(f6),f&&t(Eqe),f&&t(Ro),w(m6),w(h6),w(S7),w(p6),w(Ab),f&&t(Cqe),f&&t(Oi),w(_6),f&&t(wqe),f&&t(Po),w(u6),w(v6),w(Lb),w(F6),w(n2),f&&t(Aqe),f&&t(zi),w(T6),f&&t(yqe),f&&t(Bo),w(M6),w(C6),w(l2),w(w6),w(h2),f&&t(Lqe),f&&t(Hi),w(A6),f&&t(xqe),f&&t(Io),w(y6),w(x6),w(_2),w($6),w(Y2),f&&t($qe),f&&t(Yi),w(k6),f&&t(kqe),f&&t(qo),w(S6),w(P6),w(Z2),w(B6),w(Dv),f&&t(Sqe),f&&t(ed),w(I6),f&&t(Rqe),f&&t(No),w(q6),w(j6),w(Ov),w(D6),w(zv),f&&t(Pqe),f&&t(td),w(G6),f&&t(Bqe),f&&t(jo),w(O6),w(X6),w(Qv),w(z6),w(l3),f&&t(Iqe),f&&t(sd),w(W6),f&&t(qqe),f&&t(Do),w(Q6),w(U6),w(d3),w(J6),w(m3),f&&t(Nqe),f&&t(dd),w(Y6),f&&t(jqe),f&&t(Go),w(K6),w(ey),w(h3),w(oy),w(w3),f&&t(Dqe),f&&t(md),w(ry),f&&t(Gqe),f&&t(Oo),w(ty),w(ny),w(y3),w(sy),w(P3),f&&t(Oqe),f&&t(pd),w(ly),f&&t(Vqe),f&&t(Vo),w(iy),w(cy),w(I3),w(fy),w(Q3),f&&t(Xqe),f&&t(bd),w(my),f&&t(zqe),f&&t(Xo),w(gy),w(py),w(U3),w(_y),w(Z3),f&&t(Wqe),f&&t(Td),w(by),f&&t(Qqe),f&&t(zo),w(vy),w(Ty),w(oF),w(My),w(iF),f&&t(Hqe),f&&t(Cd),w(Ey),f&&t(Uqe),f&&t(Wo),w(Cy),w(Ay),w(cF),w(yy),w(pF),f&&t(Jqe),f&&t(Ld),w(Ly),f&&t(Yqe),f&&t(Qo),w(xy),w(ky),w(uF),w(Sy),w(TF),f&&t(Kqe),f&&t(kd),w(Py),f&&t(Zqe),f&&t(Ho),w(By),w(qy),w(EF),w(Ny),w(AF),f&&t(eNe),f&&t(Pd),w(jy),f&&t(oNe),f&&t(Uo),w(Dy),w(Oy),w(LF),w(Vy),w(PF),f&&t(rNe),f&&t(qd),w(Xy),f&&t(tNe),f&&t(Jo),w(zy),w(Qy),w(IF),w(Hy),w(jF),f&&t(aNe),f&&t(Dd),w(Uy),f&&t(nNe),f&&t(Yo),w(Jy),w(Ky),w(GF),w(Zy),w(RT),f&&t(sNe),f&&t(Vd),w(eL),f&&t(lNe),f&&t(Ko),w(oL),w(tL),w(BT),w(aL),w(n8),f&&t(iNe),f&&t(Wd),w(nL),f&&t(dNe),f&&t(Zo),w(sL),w(iL),w(l8),w(dL),w(F8),f&&t(cNe),f&&t(Ud),w(cL),f&&t(fNe),f&&t(er),w(fL),w(gL),w(M8),w(hL),w(y8),f&&t(mNe),f&&t(Kd),w(pL),f&&t(gNe),f&&t(or),w(_L),w(bL),w(x8),w(vL),w(J8),f&&t(hNe),f&&t(oc),w(FL),f&&t(pNe),f&&t(rr),w(TL),w(EL),w(K8),w(CL),w(dM),f&&t(_Ne),f&&t(ac),w(wL),f&&t(uNe),f&&t(tr),w(AL),w(LL),w(fM),w(xL),w(NM),f&&t(bNe),f&&t(lc),w($L),f&&t(vNe),f&&t(ar),w(kL),w(RL),w(DM),w(PL),w(a4),f&&t(FNe),f&&t(cc),w(BL),f&&t(TNe),f&&t(nr),w(IL),w(NL),w(s4),w(jL),w(d4),f&&t(MNe),f&&t(gc),w(GL),f&&t(ENe),f&&t(sr),w(OL),w(XL),w(f4),w(zL),w(g4),f&&t(CNe),f&&t(_c),w(WL),f&&t(wNe),f&&t(lr),w(QL),w(UL),w(p4),w(JL),w(I4),f&&t(ANe),f&&t(vc),w(YL),f&&t(yNe),f&&t(ir),w(KL),w(e9),w(N4),w(o9),w(nE),f&&t(LNe),f&&t(Mc),w(r9),f&&t(xNe),f&&t(dr),w(t9),w(n9),w(lE),w(s9),w(dE),f&&t($Ne),f&&t(wc),w(l9),f&&t(kNe),f&&t(cr),w(i9),w(c9),w(fE),w(f9),w(gE),f&&t(SNe),f&&t(Lc),w(m9),f&&t(RNe),f&&t(fr),w(g9),w(p9),w(pE),w(_9),w(GE),f&&t(PNe),f&&t(kc),w(u9),f&&t(BNe),f&&t(mr),w(b9),w(F9),w(VE),w(T9),w(ZE),f&&t(INe),f&&t(Pc),w(M9),f&&t(qNe),f&&t(gr),w(E9),w(w9),w(oC),w(A9),w(hC),f&&t(NNe),f&&t(qc),w(y9),f&&t(jNe),f&&t(hr),w(L9),w($9),w(_C),w(k9),w(yC),f&&t(DNe),f&&t(Dc),w(S9),f&&t(GNe),f&&t(pr),w(R9),w(B9),w(xC),w(I9),w(jC),f&&t(ONe),f&&t(Vc),w(q9),f&&t(VNe),f&&t(_r),w(N9),w(D9),w(GC),w(G9),w(KC),f&&t(XNe),f&&t(Wc),w(O9),f&&t(zNe),f&&t(ur),w(V9),w(z9),w(e5),w(W9),w(f5),f&&t(WNe),f&&t(Uc),w(Q9),f&&t(QNe),f&&t(br),w(H9),w(J9),w(g5),w(Y9),w(M5),f&&t(HNe),f&&t(Kc),w(K9),f&&t(UNe),f&&t(vr),w(Z9),w(ox),w(C5),w(rx),w(R5),f&&t(JNe),f&&t(of),w(tx),f&&t(YNe),f&&t(Fr),w(ax),w(sx),w(B5),w(lx),w(q5),f&&t(KNe),f&&t(af),w(ix),f&&t(ZNe),f&&t(Tr),w(dx),w(fx),w(j5),w(mx),w(O5),f&&t(eje),f&&t(lf),w(hx),f&&t(oje),f&&t(Mr),w(px),w(ux),w(X5),w(bx),w(W5)}}}const Cxt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function wxt(L){return wLt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Sxt extends TLt{constructor(g){super();MLt(this,g,wxt,Ext,ELt,{})}}export{Sxt as default,Cxt as metadata};
