import{S as s$t,i as l$t,s as i$t,e as a,k as l,w as F,t as o,M as d$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as c$t,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as $Vr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function f$t(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,Ey,uf,je,We,hi,yn,Cy,Ln,xn,wy,pi,$n,Ay,ui,_f,Ca;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),pf=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),gi=o('"new-model"'),Ey=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),hi=a("code"),yn=o("NewModel"),Cy=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),wy=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),Ay=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),_f=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var z$=s(p);m=r(z$,"NewModelConfig"),z$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var _i=s(d);h=r(_i,"PretrainedConfig"),_i.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var W$=s(fi);pf=r(W$,"model_type"),W$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var Q$=s(mi);gi=r(Q$,'"new-model"'),Q$.forEach(t),Ey=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),hi=n(Eo,"CODE",{});var wa=s(hi);yn=r(wa,"NewModel"),wa.forEach(t),Cy=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var H$=s(Ln);xn=r(H$,"PreTrainedModel"),H$.forEach(t),wy=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bf=s(pi);$n=r(bf,"config_class"),bf.forEach(t),Ay=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var U$=s(ui);_f=r(U$,"NewModelConfig"),U$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,pf),e(g,rt),e(g,mi),e(mi,gi),e(g,Ey),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,hi),e(hi,yn),e(je,Cy),e(je,Ln),e(Ln,xn),e(je,wy),e(je,pi),e(pi,$n),e(je,Ay),e(je,ui),e(ui,_f),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function m$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function p$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u$t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function _$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,u,d,h,Mo,fi,pf,rt,mi,gi,Ey,uf,je,We,hi,yn,Cy,Ln,xn,wy,pi,$n,Ay,ui,_f,Ca,Qe,Ae,z$,_i,W$,Q$,Eo,wa,H$,bf,U$,dOe,Kqe,bi,vf,soe,yy,cOe,loe,fOe,Zqe,kn,mOe,ioe,gOe,hOe,doe,pOe,uOe,eNe,Ly,oNe,J$,_Oe,rNe,Ff,tNe,vi,Tf,coe,xy,bOe,foe,vOe,aNe,Co,$y,FOe,ky,TOe,Y$,MOe,EOe,COe,Sy,wOe,moe,AOe,yOe,LOe,Er,Ry,xOe,goe,$Oe,kOe,Fi,SOe,hoe,ROe,POe,poe,BOe,IOe,qOe,A,Mf,uoe,NOe,jOe,K$,DOe,GOe,OOe,Ef,_oe,VOe,XOe,Z$,zOe,WOe,QOe,Cf,boe,HOe,UOe,ek,JOe,YOe,KOe,wf,voe,ZOe,eVe,ok,oVe,rVe,tVe,Af,Foe,aVe,nVe,rk,sVe,lVe,iVe,yf,Toe,dVe,cVe,tk,fVe,mVe,gVe,Lf,Moe,hVe,pVe,ak,uVe,_Ve,bVe,xf,Eoe,vVe,FVe,nk,TVe,MVe,EVe,$f,Coe,CVe,wVe,sk,AVe,yVe,LVe,kf,woe,xVe,$Ve,lk,kVe,SVe,RVe,Sf,Aoe,PVe,BVe,ik,IVe,qVe,NVe,Rf,yoe,jVe,DVe,dk,GVe,OVe,VVe,Pf,Loe,XVe,zVe,ck,WVe,QVe,HVe,Bf,xoe,UVe,JVe,fk,YVe,KVe,ZVe,If,$oe,eXe,oXe,mk,rXe,tXe,aXe,qf,koe,nXe,sXe,gk,lXe,iXe,dXe,Nf,Soe,cXe,fXe,hk,mXe,gXe,hXe,jf,Roe,pXe,uXe,pk,_Xe,bXe,vXe,Df,Poe,FXe,TXe,uk,MXe,EXe,CXe,Gf,Boe,wXe,AXe,_k,yXe,LXe,xXe,Of,Ioe,$Xe,kXe,bk,SXe,RXe,PXe,Vf,qoe,BXe,IXe,vk,qXe,NXe,jXe,Xf,Noe,DXe,GXe,Fk,OXe,VXe,XXe,zf,joe,zXe,WXe,Tk,QXe,HXe,UXe,Wf,Doe,JXe,YXe,Mk,KXe,ZXe,eze,Qf,Goe,oze,rze,Ek,tze,aze,nze,Hf,Ooe,sze,lze,Ck,ize,dze,cze,Uf,Voe,fze,mze,wk,gze,hze,pze,Jf,Xoe,uze,_ze,Ak,bze,vze,Fze,Yf,zoe,Tze,Mze,yk,Eze,Cze,wze,Kf,Woe,Aze,yze,Lk,Lze,xze,$ze,Zf,Qoe,kze,Sze,xk,Rze,Pze,Bze,em,Hoe,Ize,qze,$k,Nze,jze,Dze,om,Uoe,Gze,Oze,kk,Vze,Xze,zze,rm,Joe,Wze,Qze,Sk,Hze,Uze,Jze,tm,Yoe,Yze,Kze,Rk,Zze,eWe,oWe,am,Koe,rWe,tWe,Pk,aWe,nWe,sWe,nm,Zoe,lWe,iWe,Bk,dWe,cWe,fWe,sm,ere,mWe,gWe,Ik,hWe,pWe,uWe,lm,ore,_We,bWe,qk,vWe,FWe,TWe,im,rre,MWe,EWe,Nk,CWe,wWe,AWe,dm,tre,yWe,LWe,jk,xWe,$We,kWe,cm,are,SWe,RWe,Dk,PWe,BWe,IWe,fm,nre,qWe,NWe,Gk,jWe,DWe,GWe,mm,sre,OWe,VWe,Ok,XWe,zWe,WWe,gm,lre,QWe,HWe,Vk,UWe,JWe,YWe,hm,ire,KWe,ZWe,Xk,eQe,oQe,rQe,pm,dre,tQe,aQe,zk,nQe,sQe,lQe,um,cre,iQe,dQe,Wk,cQe,fQe,mQe,_m,fre,gQe,hQe,Qk,pQe,uQe,_Qe,bm,mre,bQe,vQe,Hk,FQe,TQe,MQe,vm,gre,EQe,CQe,Uk,wQe,AQe,yQe,Fm,hre,LQe,xQe,Jk,$Qe,kQe,SQe,Tm,pre,RQe,PQe,Yk,BQe,IQe,qQe,Mm,ure,NQe,jQe,Kk,DQe,GQe,OQe,Em,_re,VQe,XQe,Zk,zQe,WQe,QQe,Cm,bre,HQe,UQe,eS,JQe,YQe,KQe,wm,vre,ZQe,eHe,oS,oHe,rHe,tHe,Am,Fre,aHe,nHe,rS,sHe,lHe,iHe,ym,Tre,dHe,cHe,tS,fHe,mHe,gHe,Lm,Mre,hHe,pHe,aS,uHe,_He,bHe,xm,Ere,vHe,FHe,nS,THe,MHe,EHe,$m,Cre,CHe,wHe,sS,AHe,yHe,LHe,km,wre,xHe,$He,lS,kHe,SHe,RHe,Sm,Are,PHe,BHe,iS,IHe,qHe,NHe,Rm,yre,jHe,DHe,dS,GHe,OHe,VHe,Pm,Lre,XHe,zHe,cS,WHe,QHe,HHe,Bm,xre,UHe,JHe,fS,YHe,KHe,ZHe,Im,$re,eUe,oUe,mS,rUe,tUe,aUe,qm,kre,nUe,sUe,gS,lUe,iUe,dUe,Nm,Sre,cUe,fUe,hS,mUe,gUe,hUe,jm,Rre,pUe,uUe,pS,_Ue,bUe,vUe,Dm,Pre,FUe,TUe,uS,MUe,EUe,CUe,Gm,Bre,wUe,AUe,_S,yUe,LUe,xUe,Om,Ire,$Ue,kUe,bS,SUe,RUe,PUe,Vm,qre,BUe,IUe,vS,qUe,NUe,jUe,Xm,Nre,DUe,GUe,FS,OUe,VUe,XUe,zm,jre,zUe,WUe,TS,QUe,HUe,UUe,Wm,Dre,JUe,YUe,MS,KUe,ZUe,eJe,Qm,Gre,oJe,rJe,ES,tJe,aJe,nJe,Hm,Ore,sJe,lJe,CS,iJe,dJe,cJe,Um,Vre,fJe,mJe,wS,gJe,hJe,pJe,Jm,Xre,uJe,_Je,AS,bJe,vJe,FJe,Ym,zre,TJe,MJe,yS,EJe,CJe,wJe,Km,Wre,AJe,yJe,LS,LJe,xJe,$Je,Zm,Qre,kJe,SJe,xS,RJe,PJe,BJe,eg,Hre,IJe,qJe,$S,NJe,jJe,DJe,og,Ure,GJe,OJe,kS,VJe,XJe,zJe,rg,Jre,WJe,QJe,SS,HJe,UJe,JJe,tg,Yre,YJe,KJe,RS,ZJe,eYe,oYe,ag,Kre,rYe,tYe,PS,aYe,nYe,sYe,ng,Zre,lYe,iYe,BS,dYe,cYe,fYe,sg,ete,mYe,gYe,IS,hYe,pYe,uYe,lg,ote,_Ye,bYe,qS,vYe,FYe,TYe,ig,rte,MYe,EYe,NS,CYe,wYe,AYe,dg,tte,yYe,LYe,jS,xYe,$Ye,kYe,cg,ate,SYe,RYe,DS,PYe,BYe,IYe,fg,nte,qYe,NYe,GS,jYe,DYe,GYe,mg,ste,OYe,VYe,OS,XYe,zYe,WYe,gg,lte,QYe,HYe,VS,UYe,JYe,YYe,hg,ite,KYe,ZYe,XS,eKe,oKe,rKe,pg,dte,tKe,aKe,zS,nKe,sKe,lKe,ug,cte,iKe,dKe,WS,cKe,fKe,mKe,_g,fte,gKe,hKe,QS,pKe,uKe,_Ke,bg,mte,bKe,vKe,HS,FKe,TKe,MKe,vg,gte,EKe,CKe,US,wKe,AKe,yKe,Fg,hte,LKe,xKe,JS,$Ke,kKe,SKe,Tg,pte,RKe,PKe,YS,BKe,IKe,qKe,Mg,ute,NKe,jKe,KS,DKe,GKe,OKe,Eg,VKe,Cg,Py,XKe,_te,zKe,nNe,Ti,wg,bte,By,WKe,vte,QKe,sNe,wo,Iy,HKe,qy,UKe,ZS,JKe,YKe,KKe,Ny,ZKe,Fte,eZe,oZe,rZe,Cr,jy,tZe,Tte,aZe,nZe,Aa,sZe,Mte,lZe,iZe,Ete,dZe,cZe,Cte,fZe,mZe,gZe,k,Sn,wte,hZe,pZe,eR,uZe,_Ze,oR,bZe,vZe,FZe,Rn,Ate,TZe,MZe,rR,EZe,CZe,tR,wZe,AZe,yZe,Pn,yte,LZe,xZe,aR,$Ze,kZe,nR,SZe,RZe,PZe,Ag,Lte,BZe,IZe,sR,qZe,NZe,jZe,Bn,xte,DZe,GZe,lR,OZe,VZe,iR,XZe,zZe,WZe,yg,$te,QZe,HZe,dR,UZe,JZe,YZe,Lg,kte,KZe,ZZe,cR,eeo,oeo,reo,xg,Ste,teo,aeo,fR,neo,seo,leo,In,Rte,ieo,deo,mR,ceo,feo,gR,meo,geo,heo,qn,Pte,peo,ueo,hR,_eo,beo,pR,veo,Feo,Teo,Nn,Bte,Meo,Eeo,uR,Ceo,weo,_R,Aeo,yeo,Leo,$g,Ite,xeo,$eo,bR,keo,Seo,Reo,kg,qte,Peo,Beo,vR,Ieo,qeo,Neo,jn,Nte,jeo,Deo,FR,Geo,Oeo,TR,Veo,Xeo,zeo,Sg,jte,Weo,Qeo,MR,Heo,Ueo,Jeo,Dn,Dte,Yeo,Keo,ER,Zeo,eoo,CR,ooo,roo,too,Gn,Gte,aoo,noo,wR,soo,loo,AR,ioo,doo,coo,On,Ote,foo,moo,yR,goo,hoo,LR,poo,uoo,_oo,Rg,Vte,boo,voo,xR,Foo,Too,Moo,Vn,Xte,Eoo,Coo,$R,woo,Aoo,kR,yoo,Loo,xoo,Xn,zte,$oo,koo,SR,Soo,Roo,RR,Poo,Boo,Ioo,zn,Wte,qoo,Noo,PR,joo,Doo,BR,Goo,Ooo,Voo,Wn,Qte,Xoo,zoo,IR,Woo,Qoo,qR,Hoo,Uoo,Joo,Qn,Hte,Yoo,Koo,NR,Zoo,ero,jR,oro,rro,tro,Hn,Ute,aro,nro,DR,sro,lro,GR,iro,dro,cro,Pg,Jte,fro,mro,OR,gro,hro,pro,Un,Yte,uro,_ro,VR,bro,vro,XR,Fro,Tro,Mro,Bg,Kte,Ero,Cro,zR,wro,Aro,yro,Jn,Zte,Lro,xro,WR,$ro,kro,QR,Sro,Rro,Pro,Yn,eae,Bro,Iro,HR,qro,Nro,UR,jro,Dro,Gro,Kn,oae,Oro,Vro,JR,Xro,zro,YR,Wro,Qro,Hro,Ig,rae,Uro,Jro,KR,Yro,Kro,Zro,Zn,tae,eto,oto,ZR,rto,tto,eP,ato,nto,sto,es,aae,lto,ito,oP,dto,cto,rP,fto,mto,gto,qg,nae,hto,pto,tP,uto,_to,bto,os,sae,vto,Fto,aP,Tto,Mto,nP,Eto,Cto,wto,rs,lae,Ato,yto,sP,Lto,xto,lP,$to,kto,Sto,ts,iae,Rto,Pto,iP,Bto,Ito,dP,qto,Nto,jto,as,dae,Dto,Gto,cP,Oto,Vto,fP,Xto,zto,Wto,ns,cae,Qto,Hto,mP,Uto,Jto,gP,Yto,Kto,Zto,ss,fae,eao,oao,hP,rao,tao,pP,aao,nao,sao,ls,mae,lao,iao,uP,dao,cao,_P,fao,mao,gao,Ng,gae,hao,pao,bP,uao,_ao,bao,is,hae,vao,Fao,vP,Tao,Mao,FP,Eao,Cao,wao,jg,pae,Aao,yao,TP,Lao,xao,$ao,Dg,uae,kao,Sao,MP,Rao,Pao,Bao,ds,_ae,Iao,qao,EP,Nao,jao,CP,Dao,Gao,Oao,cs,bae,Vao,Xao,wP,zao,Wao,AP,Qao,Hao,Uao,fs,vae,Jao,Yao,yP,Kao,Zao,LP,eno,ono,rno,Gg,Fae,tno,ano,xP,nno,sno,lno,ms,Tae,ino,dno,$P,cno,fno,kP,mno,gno,hno,gs,Mae,pno,uno,SP,_no,bno,RP,vno,Fno,Tno,hs,Eae,Mno,Eno,PP,Cno,wno,BP,Ano,yno,Lno,ps,Cae,xno,$no,IP,kno,Sno,qP,Rno,Pno,Bno,us,wae,Ino,qno,NP,Nno,jno,jP,Dno,Gno,Ono,Og,Aae,Vno,Xno,DP,zno,Wno,Qno,_s,yae,Hno,Uno,GP,Jno,Yno,OP,Kno,Zno,eso,Vg,Lae,oso,rso,VP,tso,aso,nso,Xg,xae,sso,lso,XP,iso,dso,cso,zg,$ae,fso,mso,zP,gso,hso,pso,Wg,kae,uso,_so,WP,bso,vso,Fso,bs,Sae,Tso,Mso,QP,Eso,Cso,HP,wso,Aso,yso,Qg,Rae,Lso,xso,UP,$so,kso,Sso,vs,Pae,Rso,Pso,JP,Bso,Iso,YP,qso,Nso,jso,Fs,Bae,Dso,Gso,KP,Oso,Vso,ZP,Xso,zso,Wso,Ts,Iae,Qso,Hso,eB,Uso,Jso,oB,Yso,Kso,Zso,Ms,qae,elo,olo,rB,rlo,tlo,tB,alo,nlo,slo,Es,Nae,llo,ilo,aB,dlo,clo,nB,flo,mlo,glo,Cs,jae,hlo,plo,sB,ulo,_lo,lB,blo,vlo,Flo,Hg,Dae,Tlo,Mlo,iB,Elo,Clo,wlo,Ug,Gae,Alo,ylo,dB,Llo,xlo,$lo,ws,Oae,klo,Slo,cB,Rlo,Plo,fB,Blo,Ilo,qlo,As,Vae,Nlo,jlo,mB,Dlo,Glo,gB,Olo,Vlo,Xlo,ys,Xae,zlo,Wlo,hB,Qlo,Hlo,pB,Ulo,Jlo,Ylo,Jg,zae,Klo,Zlo,uB,eio,oio,rio,Yg,Wae,tio,aio,_B,nio,sio,lio,Kg,Qae,iio,dio,bB,cio,fio,mio,Ls,Hae,gio,hio,vB,pio,uio,FB,_io,bio,vio,Zg,Uae,Fio,Tio,TB,Mio,Eio,Cio,eh,Jae,wio,Aio,MB,yio,Lio,xio,oh,Yae,$io,kio,EB,Sio,Rio,Pio,xs,Kae,Bio,Iio,CB,qio,Nio,wB,jio,Dio,Gio,rh,Zae,Oio,Vio,AB,Xio,zio,Wio,th,ene,Qio,Hio,yB,Uio,Jio,Yio,$s,one,Kio,Zio,LB,edo,odo,xB,rdo,tdo,ado,ks,rne,ndo,sdo,$B,ldo,ido,kB,ddo,cdo,fdo,Ss,tne,mdo,gdo,SB,hdo,pdo,RB,udo,_do,bdo,Rs,ane,vdo,Fdo,PB,Tdo,Mdo,BB,Edo,Cdo,wdo,ah,Ado,nh,Dy,ydo,nne,Ldo,lNe,Mi,sh,sne,Gy,xdo,lne,$do,iNe,Ao,Oy,kdo,Vy,Sdo,IB,Rdo,Pdo,Bdo,Xy,Ido,ine,qdo,Ndo,jdo,He,zy,Ddo,dne,Gdo,Odo,ya,Vdo,cne,Xdo,zdo,fne,Wdo,Qdo,mne,Hdo,Udo,Jdo,Y,lh,gne,Ydo,Kdo,qB,Zdo,eco,oco,ih,hne,rco,tco,NB,aco,nco,sco,dh,pne,lco,ico,jB,dco,cco,fco,ch,une,mco,gco,DB,hco,pco,uco,fh,_ne,_co,bco,GB,vco,Fco,Tco,mh,bne,Mco,Eco,OB,Cco,wco,Aco,gh,vne,yco,Lco,VB,xco,$co,kco,hh,Fne,Sco,Rco,XB,Pco,Bco,Ico,ph,Tne,qco,Nco,zB,jco,Dco,Gco,uh,Mne,Oco,Vco,WB,Xco,zco,Wco,_h,Ene,Qco,Hco,QB,Uco,Jco,Yco,bh,Cne,Kco,Zco,HB,efo,ofo,rfo,vh,wne,tfo,afo,UB,nfo,sfo,lfo,Fh,Ane,ifo,dfo,JB,cfo,ffo,mfo,Th,yne,gfo,hfo,YB,pfo,ufo,_fo,Mh,Lne,bfo,vfo,KB,Ffo,Tfo,Mfo,Eh,xne,Efo,Cfo,ZB,wfo,Afo,yfo,Ch,$ne,Lfo,xfo,eI,$fo,kfo,Sfo,wh,kne,Rfo,Pfo,oI,Bfo,Ifo,qfo,Ah,Sne,Nfo,jfo,rI,Dfo,Gfo,Ofo,yh,Rne,Vfo,Xfo,tI,zfo,Wfo,Qfo,Lh,Pne,Hfo,Ufo,aI,Jfo,Yfo,Kfo,xh,Bne,Zfo,emo,nI,omo,rmo,tmo,$h,Ine,amo,nmo,sI,smo,lmo,imo,kh,qne,dmo,cmo,lI,fmo,mmo,gmo,Sh,Nne,hmo,pmo,iI,umo,_mo,bmo,Rh,jne,vmo,Fmo,dI,Tmo,Mmo,Emo,Ph,Dne,Cmo,wmo,cI,Amo,ymo,Lmo,Bh,Gne,xmo,$mo,fI,kmo,Smo,Rmo,Ih,Pmo,qh,Bmo,Nh,Wy,Imo,One,qmo,dNe,Ei,jh,Vne,Qy,Nmo,Xne,jmo,cNe,yo,Hy,Dmo,Uy,Gmo,mI,Omo,Vmo,Xmo,Jy,zmo,zne,Wmo,Qmo,Hmo,Ue,Yy,Umo,Wne,Jmo,Ymo,Ci,Kmo,Qne,Zmo,ego,Hne,ogo,rgo,tgo,he,Dh,Une,ago,ngo,gI,sgo,lgo,igo,Gh,Jne,dgo,cgo,Yne,fgo,mgo,ggo,Oh,Kne,hgo,pgo,hI,ugo,_go,bgo,Vh,Zne,vgo,Fgo,pI,Tgo,Mgo,Ego,Xh,ese,Cgo,wgo,uI,Ago,ygo,Lgo,zh,ose,xgo,$go,_I,kgo,Sgo,Rgo,Wh,rse,Pgo,Bgo,bI,Igo,qgo,Ngo,Qh,tse,jgo,Dgo,vI,Ggo,Ogo,Vgo,Hh,ase,Xgo,zgo,FI,Wgo,Qgo,Hgo,Uh,nse,Ugo,Jgo,TI,Ygo,Kgo,Zgo,Jh,sse,eho,oho,MI,rho,tho,aho,Yh,lse,nho,sho,EI,lho,iho,dho,Kh,ise,cho,fho,CI,mho,gho,hho,Zh,dse,pho,uho,wI,_ho,bho,vho,ep,cse,Fho,Tho,AI,Mho,Eho,Cho,op,fse,who,Aho,yI,yho,Lho,xho,rp,mse,$ho,kho,LI,Sho,Rho,Pho,tp,Bho,ap,Iho,np,Ky,qho,gse,Nho,fNe,wi,sp,hse,Zy,jho,pse,Dho,mNe,Lo,eL,Gho,Ai,Oho,xI,Vho,Xho,$I,zho,Who,Qho,oL,Hho,use,Uho,Jho,Yho,tt,rL,Kho,_se,Zho,epo,yi,opo,bse,rpo,tpo,kI,apo,npo,spo,lp,lpo,Je,tL,ipo,vse,dpo,cpo,La,fpo,Fse,mpo,gpo,Tse,hpo,ppo,Mse,upo,_po,bpo,x,ip,Ese,vpo,Fpo,SI,Tpo,Mpo,Epo,dp,Cse,Cpo,wpo,RI,Apo,ypo,Lpo,cp,wse,xpo,$po,PI,kpo,Spo,Rpo,fp,Ase,Ppo,Bpo,BI,Ipo,qpo,Npo,mp,yse,jpo,Dpo,II,Gpo,Opo,Vpo,gp,Lse,Xpo,zpo,qI,Wpo,Qpo,Hpo,hp,xse,Upo,Jpo,NI,Ypo,Kpo,Zpo,pp,$se,euo,ouo,jI,ruo,tuo,auo,up,kse,nuo,suo,DI,luo,iuo,duo,_p,Sse,cuo,fuo,GI,muo,guo,huo,bp,Rse,puo,uuo,OI,_uo,buo,vuo,vp,Pse,Fuo,Tuo,VI,Muo,Euo,Cuo,Fp,Bse,wuo,Auo,XI,yuo,Luo,xuo,Tp,Ise,$uo,kuo,zI,Suo,Ruo,Puo,Mp,qse,Buo,Iuo,WI,quo,Nuo,juo,Ep,Nse,Duo,Guo,QI,Ouo,Vuo,Xuo,Cp,jse,zuo,Wuo,HI,Quo,Huo,Uuo,wp,Dse,Juo,Yuo,UI,Kuo,Zuo,e_o,Ap,Gse,o_o,r_o,JI,t_o,a_o,n_o,yp,Ose,s_o,l_o,YI,i_o,d_o,c_o,Lp,Vse,f_o,m_o,KI,g_o,h_o,p_o,xp,Xse,u_o,__o,ZI,b_o,v_o,F_o,$p,zse,T_o,M_o,eq,E_o,C_o,w_o,kp,Wse,A_o,y_o,oq,L_o,x_o,$_o,Sp,Qse,k_o,S_o,rq,R_o,P_o,B_o,Rp,Hse,I_o,q_o,tq,N_o,j_o,D_o,Pp,Use,G_o,O_o,aq,V_o,X_o,z_o,Bp,Jse,W_o,Q_o,nq,H_o,U_o,J_o,Ip,Yse,Y_o,K_o,sq,Z_o,e0o,o0o,qp,Kse,r0o,t0o,lq,a0o,n0o,s0o,Np,Zse,l0o,i0o,iq,d0o,c0o,f0o,jp,ele,m0o,g0o,dq,h0o,p0o,u0o,Ps,ole,_0o,b0o,cq,v0o,F0o,fq,T0o,M0o,E0o,Dp,rle,C0o,w0o,mq,A0o,y0o,L0o,Gp,tle,x0o,$0o,gq,k0o,S0o,R0o,Op,ale,P0o,B0o,hq,I0o,q0o,N0o,Vp,nle,j0o,D0o,pq,G0o,O0o,V0o,Xp,sle,X0o,z0o,uq,W0o,Q0o,H0o,zp,lle,U0o,J0o,_q,Y0o,K0o,Z0o,Wp,ile,e1o,o1o,bq,r1o,t1o,a1o,Qp,dle,n1o,s1o,vq,l1o,i1o,d1o,Hp,cle,c1o,f1o,Fq,m1o,g1o,h1o,Up,fle,p1o,u1o,Tq,_1o,b1o,v1o,Jp,mle,F1o,T1o,Mq,M1o,E1o,C1o,Yp,gle,w1o,A1o,Eq,y1o,L1o,x1o,Kp,hle,$1o,k1o,Cq,S1o,R1o,P1o,Zp,ple,B1o,I1o,wq,q1o,N1o,j1o,eu,ule,D1o,G1o,Aq,O1o,V1o,X1o,ou,_le,z1o,W1o,yq,Q1o,H1o,U1o,ru,ble,J1o,Y1o,Lq,K1o,Z1o,ebo,tu,vle,obo,rbo,xq,tbo,abo,nbo,au,Fle,sbo,lbo,$q,ibo,dbo,cbo,nu,Tle,fbo,mbo,kq,gbo,hbo,pbo,su,Mle,ubo,_bo,Sq,bbo,vbo,Fbo,lu,Ele,Tbo,Mbo,Rq,Ebo,Cbo,wbo,iu,Cle,Abo,ybo,Pq,Lbo,xbo,$bo,du,wle,kbo,Sbo,Bq,Rbo,Pbo,Bbo,cu,Ale,Ibo,qbo,Iq,Nbo,jbo,Dbo,fu,yle,Gbo,Obo,qq,Vbo,Xbo,zbo,mu,Lle,Wbo,Qbo,Nq,Hbo,Ubo,Jbo,gu,xle,Ybo,Kbo,jq,Zbo,e2o,o2o,hu,$le,r2o,t2o,Dq,a2o,n2o,s2o,pu,kle,l2o,i2o,Gq,d2o,c2o,f2o,uu,Sle,m2o,g2o,Oq,h2o,p2o,u2o,_u,Rle,_2o,b2o,Vq,v2o,F2o,T2o,bu,Ple,M2o,E2o,Xq,C2o,w2o,A2o,vu,Ble,y2o,L2o,zq,x2o,$2o,k2o,Fu,Ile,S2o,R2o,Wq,P2o,B2o,I2o,Tu,qle,q2o,N2o,Qq,j2o,D2o,G2o,Mu,Nle,O2o,V2o,Hq,X2o,z2o,W2o,Eu,jle,Q2o,H2o,Uq,U2o,J2o,Y2o,Cu,Dle,K2o,Z2o,Jq,e4o,o4o,r4o,wu,Gle,t4o,a4o,Yq,n4o,s4o,l4o,Au,Ole,i4o,d4o,Kq,c4o,f4o,m4o,yu,Vle,g4o,h4o,Zq,p4o,u4o,_4o,Lu,Xle,b4o,v4o,eN,F4o,T4o,M4o,xu,zle,E4o,C4o,oN,w4o,A4o,y4o,$u,Wle,L4o,x4o,rN,$4o,k4o,S4o,ku,Qle,R4o,P4o,tN,B4o,I4o,q4o,Su,Hle,N4o,j4o,aN,D4o,G4o,O4o,Ru,Ule,V4o,X4o,nN,z4o,W4o,Q4o,Pu,Jle,H4o,U4o,sN,J4o,Y4o,K4o,Bu,Yle,Z4o,evo,lN,ovo,rvo,tvo,Iu,Kle,avo,nvo,iN,svo,lvo,ivo,qu,Zle,dvo,cvo,dN,fvo,mvo,gvo,Nu,eie,hvo,pvo,cN,uvo,_vo,bvo,ju,oie,vvo,Fvo,fN,Tvo,Mvo,Evo,Du,rie,Cvo,wvo,mN,Avo,yvo,Lvo,Gu,tie,xvo,$vo,gN,kvo,Svo,Rvo,Ou,aie,Pvo,Bvo,hN,Ivo,qvo,Nvo,Vu,nie,jvo,Dvo,pN,Gvo,Ovo,Vvo,Xu,sie,Xvo,zvo,uN,Wvo,Qvo,Hvo,zu,lie,Uvo,Jvo,_N,Yvo,Kvo,Zvo,Wu,iie,eFo,oFo,bN,rFo,tFo,aFo,Qu,die,nFo,sFo,vN,lFo,iFo,dFo,Hu,cie,cFo,fFo,FN,mFo,gFo,hFo,Uu,fie,pFo,uFo,TN,_Fo,bFo,vFo,Ju,mie,FFo,TFo,MN,MFo,EFo,CFo,Yu,gie,wFo,AFo,EN,yFo,LFo,xFo,Ku,hie,$Fo,kFo,CN,SFo,RFo,PFo,Zu,pie,BFo,IFo,wN,qFo,NFo,jFo,e_,uie,DFo,GFo,AN,OFo,VFo,XFo,o_,zFo,_ie,WFo,QFo,bie,HFo,UFo,r_,gNe,Li,t_,vie,aL,JFo,Fie,YFo,hNe,xo,nL,KFo,xi,ZFo,yN,e6o,o6o,LN,r6o,t6o,a6o,sL,n6o,Tie,s6o,l6o,i6o,at,lL,d6o,Mie,c6o,f6o,$i,m6o,Eie,g6o,h6o,xN,p6o,u6o,_6o,a_,b6o,Ye,iL,v6o,Cie,F6o,T6o,xa,M6o,wie,E6o,C6o,Aie,w6o,A6o,yie,y6o,L6o,x6o,G,n_,Lie,$6o,k6o,$N,S6o,R6o,P6o,s_,xie,B6o,I6o,kN,q6o,N6o,j6o,l_,$ie,D6o,G6o,SN,O6o,V6o,X6o,i_,kie,z6o,W6o,RN,Q6o,H6o,U6o,d_,Sie,J6o,Y6o,PN,K6o,Z6o,eTo,c_,Rie,oTo,rTo,BN,tTo,aTo,nTo,f_,Pie,sTo,lTo,IN,iTo,dTo,cTo,m_,Bie,fTo,mTo,qN,gTo,hTo,pTo,g_,Iie,uTo,_To,NN,bTo,vTo,FTo,h_,qie,TTo,MTo,jN,ETo,CTo,wTo,p_,Nie,ATo,yTo,DN,LTo,xTo,$To,u_,jie,kTo,STo,GN,RTo,PTo,BTo,__,Die,ITo,qTo,ON,NTo,jTo,DTo,b_,Gie,GTo,OTo,VN,VTo,XTo,zTo,v_,Oie,WTo,QTo,XN,HTo,UTo,JTo,F_,Vie,YTo,KTo,zN,ZTo,eMo,oMo,T_,Xie,rMo,tMo,WN,aMo,nMo,sMo,M_,zie,lMo,iMo,QN,dMo,cMo,fMo,E_,Wie,mMo,gMo,HN,hMo,pMo,uMo,C_,Qie,_Mo,bMo,UN,vMo,FMo,TMo,w_,Hie,MMo,EMo,JN,CMo,wMo,AMo,A_,Uie,yMo,LMo,YN,xMo,$Mo,kMo,y_,Jie,SMo,RMo,KN,PMo,BMo,IMo,L_,Yie,qMo,NMo,ZN,jMo,DMo,GMo,x_,Kie,OMo,VMo,ej,XMo,zMo,WMo,$_,Zie,QMo,HMo,oj,UMo,JMo,YMo,k_,ede,KMo,ZMo,rj,eEo,oEo,rEo,S_,ode,tEo,aEo,tj,nEo,sEo,lEo,R_,rde,iEo,dEo,aj,cEo,fEo,mEo,P_,tde,gEo,hEo,nj,pEo,uEo,_Eo,B_,ade,bEo,vEo,sj,FEo,TEo,MEo,I_,nde,EEo,CEo,lj,wEo,AEo,yEo,q_,sde,LEo,xEo,ij,$Eo,kEo,SEo,N_,lde,REo,PEo,dj,BEo,IEo,qEo,j_,ide,NEo,jEo,cj,DEo,GEo,OEo,D_,dde,VEo,XEo,fj,zEo,WEo,QEo,G_,cde,HEo,UEo,mj,JEo,YEo,KEo,O_,fde,ZEo,eCo,gj,oCo,rCo,tCo,V_,mde,aCo,nCo,hj,sCo,lCo,iCo,X_,gde,dCo,cCo,pj,fCo,mCo,gCo,z_,hde,hCo,pCo,uj,uCo,_Co,bCo,W_,pde,vCo,FCo,_j,TCo,MCo,ECo,Q_,CCo,ude,wCo,ACo,_de,yCo,LCo,H_,pNe,ki,U_,bde,dL,xCo,vde,$Co,uNe,$o,cL,kCo,Si,SCo,bj,RCo,PCo,vj,BCo,ICo,qCo,fL,NCo,Fde,jCo,DCo,GCo,nt,mL,OCo,Tde,VCo,XCo,Ri,zCo,Mde,WCo,QCo,Fj,HCo,UCo,JCo,J_,YCo,Ke,gL,KCo,Ede,ZCo,e5o,$a,o5o,Cde,r5o,t5o,wde,a5o,n5o,Ade,s5o,l5o,i5o,z,Y_,yde,d5o,c5o,Tj,f5o,m5o,g5o,K_,Lde,h5o,p5o,Mj,u5o,_5o,b5o,Z_,xde,v5o,F5o,Ej,T5o,M5o,E5o,e0,$de,C5o,w5o,Cj,A5o,y5o,L5o,o0,kde,x5o,$5o,wj,k5o,S5o,R5o,r0,Sde,P5o,B5o,Aj,I5o,q5o,N5o,t0,Rde,j5o,D5o,yj,G5o,O5o,V5o,a0,Pde,X5o,z5o,Lj,W5o,Q5o,H5o,n0,Bde,U5o,J5o,xj,Y5o,K5o,Z5o,s0,Ide,e3o,o3o,$j,r3o,t3o,a3o,l0,qde,n3o,s3o,kj,l3o,i3o,d3o,i0,Nde,c3o,f3o,Sj,m3o,g3o,h3o,d0,jde,p3o,u3o,Rj,_3o,b3o,v3o,c0,Dde,F3o,T3o,Pj,M3o,E3o,C3o,f0,Gde,w3o,A3o,Bj,y3o,L3o,x3o,m0,Ode,$3o,k3o,Ij,S3o,R3o,P3o,g0,Vde,B3o,I3o,qj,q3o,N3o,j3o,h0,Xde,D3o,G3o,Nj,O3o,V3o,X3o,p0,zde,z3o,W3o,jj,Q3o,H3o,U3o,u0,Wde,J3o,Y3o,Dj,K3o,Z3o,ewo,_0,Qde,owo,rwo,Gj,two,awo,nwo,b0,Hde,swo,lwo,Oj,iwo,dwo,cwo,v0,Ude,fwo,mwo,Vj,gwo,hwo,pwo,F0,Jde,uwo,_wo,Xj,bwo,vwo,Fwo,T0,Yde,Two,Mwo,zj,Ewo,Cwo,wwo,M0,Kde,Awo,ywo,Wj,Lwo,xwo,$wo,E0,Zde,kwo,Swo,Qj,Rwo,Pwo,Bwo,C0,ece,Iwo,qwo,Hj,Nwo,jwo,Dwo,w0,oce,Gwo,Owo,Uj,Vwo,Xwo,zwo,A0,rce,Wwo,Qwo,Jj,Hwo,Uwo,Jwo,y0,tce,Ywo,Kwo,Yj,Zwo,eAo,oAo,L0,ace,rAo,tAo,Kj,aAo,nAo,sAo,x0,nce,lAo,iAo,Zj,dAo,cAo,fAo,$0,sce,mAo,gAo,eD,hAo,pAo,uAo,k0,lce,_Ao,bAo,oD,vAo,FAo,TAo,S0,ice,MAo,EAo,rD,CAo,wAo,AAo,R0,dce,yAo,LAo,tD,xAo,$Ao,kAo,P0,SAo,cce,RAo,PAo,fce,BAo,IAo,B0,_Ne,Pi,I0,mce,hL,qAo,gce,NAo,bNe,ko,pL,jAo,Bi,DAo,aD,GAo,OAo,nD,VAo,XAo,zAo,uL,WAo,hce,QAo,HAo,UAo,st,_L,JAo,pce,YAo,KAo,Ii,ZAo,uce,eyo,oyo,sD,ryo,tyo,ayo,q0,nyo,Ze,bL,syo,_ce,lyo,iyo,ka,dyo,bce,cyo,fyo,vce,myo,gyo,Fce,hyo,pyo,uyo,Q,N0,Tce,_yo,byo,lD,vyo,Fyo,Tyo,j0,Mce,Myo,Eyo,iD,Cyo,wyo,Ayo,D0,Ece,yyo,Lyo,dD,xyo,$yo,kyo,G0,Cce,Syo,Ryo,cD,Pyo,Byo,Iyo,O0,wce,qyo,Nyo,fD,jyo,Dyo,Gyo,V0,Ace,Oyo,Vyo,mD,Xyo,zyo,Wyo,X0,yce,Qyo,Hyo,gD,Uyo,Jyo,Yyo,z0,Lce,Kyo,Zyo,hD,eLo,oLo,rLo,W0,xce,tLo,aLo,pD,nLo,sLo,lLo,Q0,$ce,iLo,dLo,uD,cLo,fLo,mLo,H0,kce,gLo,hLo,_D,pLo,uLo,_Lo,U0,Sce,bLo,vLo,bD,FLo,TLo,MLo,J0,Rce,ELo,CLo,vD,wLo,ALo,yLo,Y0,Pce,LLo,xLo,FD,$Lo,kLo,SLo,K0,Bce,RLo,PLo,TD,BLo,ILo,qLo,Z0,Ice,NLo,jLo,MD,DLo,GLo,OLo,e1,qce,VLo,XLo,ED,zLo,WLo,QLo,o1,Nce,HLo,ULo,CD,JLo,YLo,KLo,r1,jce,ZLo,e8o,wD,o8o,r8o,t8o,t1,Dce,a8o,n8o,AD,s8o,l8o,i8o,a1,Gce,d8o,c8o,yD,f8o,m8o,g8o,n1,Oce,h8o,p8o,LD,u8o,_8o,b8o,s1,Vce,v8o,F8o,xD,T8o,M8o,E8o,l1,Xce,C8o,w8o,$D,A8o,y8o,L8o,i1,zce,x8o,$8o,kD,k8o,S8o,R8o,d1,Wce,P8o,B8o,SD,I8o,q8o,N8o,c1,Qce,j8o,D8o,RD,G8o,O8o,V8o,f1,Hce,X8o,z8o,PD,W8o,Q8o,H8o,m1,Uce,U8o,J8o,BD,Y8o,K8o,Z8o,g1,Jce,e7o,o7o,ID,r7o,t7o,a7o,h1,Yce,n7o,s7o,Kce,l7o,i7o,d7o,p1,Zce,c7o,f7o,qD,m7o,g7o,h7o,u1,efe,p7o,u7o,ND,_7o,b7o,v7o,_1,ofe,F7o,T7o,jD,M7o,E7o,C7o,b1,rfe,w7o,A7o,DD,y7o,L7o,x7o,v1,$7o,tfe,k7o,S7o,afe,R7o,P7o,F1,vNe,qi,T1,nfe,vL,B7o,sfe,I7o,FNe,So,FL,q7o,Ni,N7o,GD,j7o,D7o,OD,G7o,O7o,V7o,TL,X7o,lfe,z7o,W7o,Q7o,lt,ML,H7o,ife,U7o,J7o,ji,Y7o,dfe,K7o,Z7o,VD,e9o,o9o,r9o,M1,t9o,eo,EL,a9o,cfe,n9o,s9o,Sa,l9o,ffe,i9o,d9o,mfe,c9o,f9o,gfe,m9o,g9o,h9o,ue,E1,hfe,p9o,u9o,XD,_9o,b9o,v9o,C1,pfe,F9o,T9o,zD,M9o,E9o,C9o,w1,ufe,w9o,A9o,WD,y9o,L9o,x9o,A1,_fe,$9o,k9o,QD,S9o,R9o,P9o,y1,bfe,B9o,I9o,HD,q9o,N9o,j9o,L1,vfe,D9o,G9o,UD,O9o,V9o,X9o,x1,Ffe,z9o,W9o,JD,Q9o,H9o,U9o,$1,Tfe,J9o,Y9o,YD,K9o,Z9o,exo,k1,Mfe,oxo,rxo,KD,txo,axo,nxo,S1,Efe,sxo,lxo,ZD,ixo,dxo,cxo,R1,Cfe,fxo,mxo,eG,gxo,hxo,pxo,P1,wfe,uxo,_xo,oG,bxo,vxo,Fxo,B1,Afe,Txo,Mxo,rG,Exo,Cxo,wxo,I1,yfe,Axo,yxo,tG,Lxo,xxo,$xo,q1,Lfe,kxo,Sxo,aG,Rxo,Pxo,Bxo,N1,xfe,Ixo,qxo,nG,Nxo,jxo,Dxo,j1,Gxo,$fe,Oxo,Vxo,kfe,Xxo,zxo,D1,TNe,Di,G1,Sfe,CL,Wxo,Rfe,Qxo,MNe,Ro,wL,Hxo,Gi,Uxo,sG,Jxo,Yxo,lG,Kxo,Zxo,e$o,AL,o$o,Pfe,r$o,t$o,a$o,it,yL,n$o,Bfe,s$o,l$o,Oi,i$o,Ife,d$o,c$o,iG,f$o,m$o,g$o,O1,h$o,oo,LL,p$o,qfe,u$o,_$o,Ra,b$o,Nfe,v$o,F$o,jfe,T$o,M$o,Dfe,E$o,C$o,w$o,q,V1,Gfe,A$o,y$o,dG,L$o,x$o,$$o,X1,Ofe,k$o,S$o,cG,R$o,P$o,B$o,z1,Vfe,I$o,q$o,fG,N$o,j$o,D$o,W1,Xfe,G$o,O$o,mG,V$o,X$o,z$o,Q1,zfe,W$o,Q$o,gG,H$o,U$o,J$o,H1,Wfe,Y$o,K$o,hG,Z$o,eko,oko,U1,Qfe,rko,tko,pG,ako,nko,sko,J1,Hfe,lko,iko,uG,dko,cko,fko,Y1,Ufe,mko,gko,_G,hko,pko,uko,K1,Jfe,_ko,bko,bG,vko,Fko,Tko,Z1,Yfe,Mko,Eko,vG,Cko,wko,Ako,eb,Kfe,yko,Lko,FG,xko,$ko,kko,ob,Zfe,Sko,Rko,TG,Pko,Bko,Iko,rb,eme,qko,Nko,MG,jko,Dko,Gko,tb,ome,Oko,Vko,EG,Xko,zko,Wko,ab,rme,Qko,Hko,CG,Uko,Jko,Yko,nb,tme,Kko,Zko,wG,eSo,oSo,rSo,sb,ame,tSo,aSo,AG,nSo,sSo,lSo,lb,nme,iSo,dSo,yG,cSo,fSo,mSo,ib,sme,gSo,hSo,LG,pSo,uSo,_So,db,lme,bSo,vSo,xG,FSo,TSo,MSo,cb,ime,ESo,CSo,$G,wSo,ASo,ySo,fb,dme,LSo,xSo,kG,$So,kSo,SSo,mb,cme,RSo,PSo,SG,BSo,ISo,qSo,gb,fme,NSo,jSo,RG,DSo,GSo,OSo,hb,mme,VSo,XSo,PG,zSo,WSo,QSo,pb,gme,HSo,USo,BG,JSo,YSo,KSo,ub,hme,ZSo,eRo,IG,oRo,rRo,tRo,_b,pme,aRo,nRo,qG,sRo,lRo,iRo,bb,ume,dRo,cRo,NG,fRo,mRo,gRo,vb,_me,hRo,pRo,jG,uRo,_Ro,bRo,Fb,bme,vRo,FRo,DG,TRo,MRo,ERo,Tb,vme,CRo,wRo,GG,ARo,yRo,LRo,Mb,Fme,xRo,$Ro,OG,kRo,SRo,RRo,Eb,Tme,PRo,BRo,VG,IRo,qRo,NRo,Cb,Mme,jRo,DRo,XG,GRo,ORo,VRo,wb,Eme,XRo,zRo,zG,WRo,QRo,HRo,Ab,Cme,URo,JRo,WG,YRo,KRo,ZRo,yb,wme,ePo,oPo,QG,rPo,tPo,aPo,Lb,Ame,nPo,sPo,HG,lPo,iPo,dPo,xb,yme,cPo,fPo,UG,mPo,gPo,hPo,$b,Lme,pPo,uPo,JG,_Po,bPo,vPo,kb,xme,FPo,TPo,YG,MPo,EPo,CPo,Sb,$me,wPo,APo,KG,yPo,LPo,xPo,Rb,kme,$Po,kPo,ZG,SPo,RPo,PPo,Pb,Sme,BPo,IPo,eO,qPo,NPo,jPo,Bb,Rme,DPo,GPo,oO,OPo,VPo,XPo,Ib,zPo,Pme,WPo,QPo,Bme,HPo,UPo,qb,ENe,Vi,Nb,Ime,xL,JPo,qme,YPo,CNe,Po,$L,KPo,Xi,ZPo,rO,eBo,oBo,tO,rBo,tBo,aBo,kL,nBo,Nme,sBo,lBo,iBo,dt,SL,dBo,jme,cBo,fBo,zi,mBo,Dme,gBo,hBo,aO,pBo,uBo,_Bo,jb,bBo,ro,RL,vBo,Gme,FBo,TBo,Pa,MBo,Ome,EBo,CBo,Vme,wBo,ABo,Xme,yBo,LBo,xBo,K,Db,zme,$Bo,kBo,nO,SBo,RBo,PBo,Gb,Wme,BBo,IBo,sO,qBo,NBo,jBo,Ob,Qme,DBo,GBo,lO,OBo,VBo,XBo,Vb,Hme,zBo,WBo,iO,QBo,HBo,UBo,Xb,Ume,JBo,YBo,dO,KBo,ZBo,eIo,zb,Jme,oIo,rIo,cO,tIo,aIo,nIo,Wb,Yme,sIo,lIo,fO,iIo,dIo,cIo,Qb,Kme,fIo,mIo,mO,gIo,hIo,pIo,Hb,Zme,uIo,_Io,gO,bIo,vIo,FIo,Ub,ege,TIo,MIo,hO,EIo,CIo,wIo,Jb,oge,AIo,yIo,pO,LIo,xIo,$Io,Yb,rge,kIo,SIo,uO,RIo,PIo,BIo,Kb,tge,IIo,qIo,_O,NIo,jIo,DIo,Zb,age,GIo,OIo,bO,VIo,XIo,zIo,e2,nge,WIo,QIo,vO,HIo,UIo,JIo,o2,sge,YIo,KIo,FO,ZIo,eqo,oqo,r2,lge,rqo,tqo,TO,aqo,nqo,sqo,t2,ige,lqo,iqo,MO,dqo,cqo,fqo,a2,dge,mqo,gqo,EO,hqo,pqo,uqo,n2,cge,_qo,bqo,CO,vqo,Fqo,Tqo,s2,fge,Mqo,Eqo,wO,Cqo,wqo,Aqo,l2,mge,yqo,Lqo,AO,xqo,$qo,kqo,i2,gge,Sqo,Rqo,yO,Pqo,Bqo,Iqo,d2,hge,qqo,Nqo,LO,jqo,Dqo,Gqo,c2,pge,Oqo,Vqo,xO,Xqo,zqo,Wqo,f2,uge,Qqo,Hqo,$O,Uqo,Jqo,Yqo,m2,_ge,Kqo,Zqo,kO,eNo,oNo,rNo,g2,bge,tNo,aNo,SO,nNo,sNo,lNo,h2,vge,iNo,dNo,RO,cNo,fNo,mNo,p2,gNo,Fge,hNo,pNo,Tge,uNo,_No,u2,wNe,Wi,_2,Mge,PL,bNo,Ege,vNo,ANe,Bo,BL,FNo,Qi,TNo,PO,MNo,ENo,BO,CNo,wNo,ANo,IL,yNo,Cge,LNo,xNo,$No,ct,qL,kNo,wge,SNo,RNo,Hi,PNo,Age,BNo,INo,IO,qNo,NNo,jNo,b2,DNo,to,NL,GNo,yge,ONo,VNo,Ba,XNo,Lge,zNo,WNo,xge,QNo,HNo,$ge,UNo,JNo,YNo,Yr,v2,kge,KNo,ZNo,qO,ejo,ojo,rjo,F2,Sge,tjo,ajo,NO,njo,sjo,ljo,T2,Rge,ijo,djo,jO,cjo,fjo,mjo,M2,Pge,gjo,hjo,DO,pjo,ujo,_jo,E2,Bge,bjo,vjo,GO,Fjo,Tjo,Mjo,C2,Ejo,Ige,Cjo,wjo,qge,Ajo,yjo,w2,yNe,Ui,A2,Nge,jL,Ljo,jge,xjo,LNe,Io,DL,$jo,Ji,kjo,OO,Sjo,Rjo,VO,Pjo,Bjo,Ijo,GL,qjo,Dge,Njo,jjo,Djo,ft,OL,Gjo,Gge,Ojo,Vjo,Yi,Xjo,Oge,zjo,Wjo,XO,Qjo,Hjo,Ujo,y2,Jjo,ao,VL,Yjo,Vge,Kjo,Zjo,Ia,eDo,Xge,oDo,rDo,zge,tDo,aDo,Wge,nDo,sDo,lDo,H,L2,Qge,iDo,dDo,zO,cDo,fDo,mDo,x2,Hge,gDo,hDo,WO,pDo,uDo,_Do,$2,Uge,bDo,vDo,QO,FDo,TDo,MDo,k2,Jge,EDo,CDo,HO,wDo,ADo,yDo,S2,Yge,LDo,xDo,UO,$Do,kDo,SDo,R2,Kge,RDo,PDo,JO,BDo,IDo,qDo,P2,Zge,NDo,jDo,YO,DDo,GDo,ODo,B2,ehe,VDo,XDo,KO,zDo,WDo,QDo,I2,ohe,HDo,UDo,ZO,JDo,YDo,KDo,q2,rhe,ZDo,eGo,eV,oGo,rGo,tGo,N2,the,aGo,nGo,oV,sGo,lGo,iGo,j2,ahe,dGo,cGo,rV,fGo,mGo,gGo,D2,nhe,hGo,pGo,tV,uGo,_Go,bGo,G2,she,vGo,FGo,aV,TGo,MGo,EGo,O2,lhe,CGo,wGo,nV,AGo,yGo,LGo,V2,ihe,xGo,$Go,sV,kGo,SGo,RGo,X2,dhe,PGo,BGo,lV,IGo,qGo,NGo,z2,che,jGo,DGo,iV,GGo,OGo,VGo,W2,fhe,XGo,zGo,dV,WGo,QGo,HGo,Q2,mhe,UGo,JGo,cV,YGo,KGo,ZGo,H2,ghe,eOo,oOo,fV,rOo,tOo,aOo,U2,hhe,nOo,sOo,mV,lOo,iOo,dOo,J2,phe,cOo,fOo,gV,mOo,gOo,hOo,Y2,uhe,pOo,uOo,hV,_Oo,bOo,vOo,K2,_he,FOo,TOo,pV,MOo,EOo,COo,Z2,bhe,wOo,AOo,uV,yOo,LOo,xOo,e4,vhe,$Oo,kOo,_V,SOo,ROo,POo,o4,Fhe,BOo,IOo,bV,qOo,NOo,jOo,r4,The,DOo,GOo,vV,OOo,VOo,XOo,t4,Mhe,zOo,WOo,FV,QOo,HOo,UOo,a4,Ehe,JOo,YOo,TV,KOo,ZOo,eVo,n4,Che,oVo,rVo,MV,tVo,aVo,nVo,s4,whe,sVo,lVo,EV,iVo,dVo,cVo,l4,Ahe,fVo,mVo,CV,gVo,hVo,pVo,i4,uVo,yhe,_Vo,bVo,Lhe,vVo,FVo,d4,xNe,Ki,c4,xhe,XL,TVo,$he,MVo,$Ne,qo,zL,EVo,Zi,CVo,wV,wVo,AVo,AV,yVo,LVo,xVo,WL,$Vo,khe,kVo,SVo,RVo,mt,QL,PVo,She,BVo,IVo,ed,qVo,Rhe,NVo,jVo,yV,DVo,GVo,OVo,f4,VVo,no,HL,XVo,Phe,zVo,WVo,qa,QVo,Bhe,HVo,UVo,Ihe,JVo,YVo,qhe,KVo,ZVo,eXo,V,m4,Nhe,oXo,rXo,LV,tXo,aXo,nXo,g4,jhe,sXo,lXo,xV,iXo,dXo,cXo,h4,Dhe,fXo,mXo,$V,gXo,hXo,pXo,p4,Ghe,uXo,_Xo,kV,bXo,vXo,FXo,u4,Ohe,TXo,MXo,SV,EXo,CXo,wXo,_4,Vhe,AXo,yXo,RV,LXo,xXo,$Xo,b4,Xhe,kXo,SXo,PV,RXo,PXo,BXo,v4,zhe,IXo,qXo,BV,NXo,jXo,DXo,F4,Whe,GXo,OXo,IV,VXo,XXo,zXo,T4,Qhe,WXo,QXo,qV,HXo,UXo,JXo,M4,Hhe,YXo,KXo,NV,ZXo,ezo,ozo,E4,Uhe,rzo,tzo,jV,azo,nzo,szo,C4,Jhe,lzo,izo,DV,dzo,czo,fzo,w4,Yhe,mzo,gzo,GV,hzo,pzo,uzo,A4,Khe,_zo,bzo,OV,vzo,Fzo,Tzo,y4,Zhe,Mzo,Ezo,VV,Czo,wzo,Azo,L4,epe,yzo,Lzo,XV,xzo,$zo,kzo,x4,ope,Szo,Rzo,zV,Pzo,Bzo,Izo,$4,rpe,qzo,Nzo,WV,jzo,Dzo,Gzo,k4,tpe,Ozo,Vzo,QV,Xzo,zzo,Wzo,S4,ape,Qzo,Hzo,HV,Uzo,Jzo,Yzo,R4,npe,Kzo,Zzo,UV,eWo,oWo,rWo,P4,spe,tWo,aWo,JV,nWo,sWo,lWo,B4,lpe,iWo,dWo,YV,cWo,fWo,mWo,I4,ipe,gWo,hWo,KV,pWo,uWo,_Wo,q4,dpe,bWo,vWo,ZV,FWo,TWo,MWo,N4,cpe,EWo,CWo,eX,wWo,AWo,yWo,j4,fpe,LWo,xWo,oX,$Wo,kWo,SWo,D4,mpe,RWo,PWo,rX,BWo,IWo,qWo,G4,gpe,NWo,jWo,tX,DWo,GWo,OWo,O4,hpe,VWo,XWo,aX,zWo,WWo,QWo,V4,ppe,HWo,UWo,nX,JWo,YWo,KWo,X4,upe,ZWo,eQo,sX,oQo,rQo,tQo,z4,_pe,aQo,nQo,lX,sQo,lQo,iQo,W4,bpe,dQo,cQo,iX,fQo,mQo,gQo,Q4,vpe,hQo,pQo,dX,uQo,_Qo,bQo,H4,Fpe,vQo,FQo,cX,TQo,MQo,EQo,U4,Tpe,CQo,wQo,fX,AQo,yQo,LQo,J4,Mpe,xQo,$Qo,mX,kQo,SQo,RQo,Y4,Epe,PQo,BQo,gX,IQo,qQo,NQo,K4,jQo,Cpe,DQo,GQo,wpe,OQo,VQo,Z4,kNe,od,ev,Ape,UL,XQo,ype,zQo,SNe,No,JL,WQo,rd,QQo,hX,HQo,UQo,pX,JQo,YQo,KQo,YL,ZQo,Lpe,eHo,oHo,rHo,gt,KL,tHo,xpe,aHo,nHo,td,sHo,$pe,lHo,iHo,uX,dHo,cHo,fHo,ov,mHo,so,ZL,gHo,kpe,hHo,pHo,Na,uHo,Spe,_Ho,bHo,Rpe,vHo,FHo,Ppe,THo,MHo,EHo,Bpe,rv,Ipe,CHo,wHo,_X,AHo,yHo,LHo,tv,xHo,qpe,$Ho,kHo,Npe,SHo,RHo,av,RNe,ad,nv,jpe,e8,PHo,Dpe,BHo,PNe,jo,o8,IHo,nd,qHo,bX,NHo,jHo,vX,DHo,GHo,OHo,r8,VHo,Gpe,XHo,zHo,WHo,ht,t8,QHo,Ope,HHo,UHo,sd,JHo,Vpe,YHo,KHo,FX,ZHo,eUo,oUo,sv,rUo,lo,a8,tUo,Xpe,aUo,nUo,ja,sUo,zpe,lUo,iUo,Wpe,dUo,cUo,Qpe,fUo,mUo,gUo,Fe,lv,Hpe,hUo,pUo,TX,uUo,_Uo,bUo,iv,Upe,vUo,FUo,MX,TUo,MUo,EUo,dv,Jpe,CUo,wUo,EX,AUo,yUo,LUo,cv,Ype,xUo,$Uo,CX,kUo,SUo,RUo,Bs,Kpe,PUo,BUo,wX,IUo,qUo,AX,NUo,jUo,DUo,fv,Zpe,GUo,OUo,yX,VUo,XUo,zUo,pt,eue,WUo,QUo,LX,HUo,UUo,xX,JUo,YUo,$X,KUo,ZUo,eJo,mv,oue,oJo,rJo,kX,tJo,aJo,nJo,gv,rue,sJo,lJo,SX,iJo,dJo,cJo,hv,tue,fJo,mJo,RX,gJo,hJo,pJo,pv,aue,uJo,_Jo,PX,bJo,vJo,FJo,uv,nue,TJo,MJo,BX,EJo,CJo,wJo,_v,sue,AJo,yJo,IX,LJo,xJo,$Jo,bv,lue,kJo,SJo,qX,RJo,PJo,BJo,vv,IJo,iue,qJo,NJo,due,jJo,DJo,Fv,BNe,ld,Tv,cue,n8,GJo,fue,OJo,INe,Do,s8,VJo,id,XJo,NX,zJo,WJo,jX,QJo,HJo,UJo,l8,JJo,mue,YJo,KJo,ZJo,ut,i8,eYo,gue,oYo,rYo,dd,tYo,hue,aYo,nYo,DX,sYo,lYo,iYo,Mv,dYo,io,d8,cYo,pue,fYo,mYo,Da,gYo,uue,hYo,pYo,_ue,uYo,_Yo,bue,bYo,vYo,FYo,vue,Ev,Fue,TYo,MYo,GX,EYo,CYo,wYo,Cv,AYo,Tue,yYo,LYo,Mue,xYo,$Yo,wv,qNe,cd,Av,Eue,c8,kYo,Cue,SYo,NNe,Go,f8,RYo,fd,PYo,OX,BYo,IYo,VX,qYo,NYo,jYo,m8,DYo,wue,GYo,OYo,VYo,_t,g8,XYo,Aue,zYo,WYo,md,QYo,yue,HYo,UYo,XX,JYo,YYo,KYo,yv,ZYo,co,h8,eKo,Lue,oKo,rKo,Ga,tKo,xue,aKo,nKo,$ue,sKo,lKo,kue,iKo,dKo,cKo,ke,Lv,Sue,fKo,mKo,zX,gKo,hKo,pKo,xv,Rue,uKo,_Ko,WX,bKo,vKo,FKo,$v,Pue,TKo,MKo,QX,EKo,CKo,wKo,kv,Bue,AKo,yKo,HX,LKo,xKo,$Ko,Sv,Iue,kKo,SKo,UX,RKo,PKo,BKo,Rv,que,IKo,qKo,JX,NKo,jKo,DKo,Pv,Nue,GKo,OKo,YX,VKo,XKo,zKo,Bv,jue,WKo,QKo,KX,HKo,UKo,JKo,Iv,Due,YKo,KKo,ZX,ZKo,eZo,oZo,qv,rZo,Gue,tZo,aZo,Oue,nZo,sZo,Nv,jNe,gd,jv,Vue,p8,lZo,Xue,iZo,DNe,Oo,u8,dZo,hd,cZo,ez,fZo,mZo,oz,gZo,hZo,pZo,_8,uZo,zue,_Zo,bZo,vZo,bt,b8,FZo,Wue,TZo,MZo,pd,EZo,Que,CZo,wZo,rz,AZo,yZo,LZo,Dv,xZo,fo,v8,$Zo,Hue,kZo,SZo,Oa,RZo,Uue,PZo,BZo,Jue,IZo,qZo,Yue,NZo,jZo,DZo,Kr,Gv,Kue,GZo,OZo,tz,VZo,XZo,zZo,Ov,Zue,WZo,QZo,az,HZo,UZo,JZo,Vv,e_e,YZo,KZo,nz,ZZo,eer,oer,Xv,o_e,rer,ter,sz,aer,ner,ser,zv,r_e,ler,ier,lz,der,cer,fer,Wv,mer,t_e,ger,her,a_e,per,uer,Qv,GNe,ud,Hv,n_e,F8,_er,s_e,ber,ONe,Vo,T8,ver,_d,Fer,iz,Ter,Mer,dz,Eer,Cer,wer,M8,Aer,l_e,yer,Ler,xer,vt,E8,$er,i_e,ker,Ser,bd,Rer,d_e,Per,Ber,cz,Ier,qer,Ner,Uv,jer,mo,C8,Der,c_e,Ger,Oer,Va,Ver,f_e,Xer,zer,m_e,Wer,Qer,g_e,Her,Uer,Jer,Se,Jv,h_e,Yer,Ker,fz,Zer,eor,oor,Yv,p_e,ror,tor,mz,aor,nor,sor,Kv,u_e,lor,ior,gz,dor,cor,mor,Zv,__e,gor,hor,hz,por,uor,_or,eF,b_e,bor,vor,pz,For,Tor,Mor,oF,v_e,Eor,Cor,uz,wor,Aor,yor,rF,F_e,Lor,xor,_z,$or,kor,Sor,tF,T_e,Ror,Por,bz,Bor,Ior,qor,aF,M_e,Nor,jor,vz,Dor,Gor,Oor,nF,Vor,E_e,Xor,zor,C_e,Wor,Qor,sF,VNe,vd,lF,w_e,w8,Hor,A_e,Uor,XNe,Xo,A8,Jor,Fd,Yor,Fz,Kor,Zor,Tz,err,orr,rrr,y8,trr,y_e,arr,nrr,srr,Ft,L8,lrr,L_e,irr,drr,Td,crr,x_e,frr,mrr,Mz,grr,hrr,prr,iF,urr,go,x8,_rr,$_e,brr,vrr,Xa,Frr,k_e,Trr,Mrr,S_e,Err,Crr,R_e,wrr,Arr,yrr,$8,dF,P_e,Lrr,xrr,Ez,$rr,krr,Srr,cF,B_e,Rrr,Prr,Cz,Brr,Irr,qrr,fF,Nrr,I_e,jrr,Drr,q_e,Grr,Orr,mF,zNe,Md,gF,N_e,k8,Vrr,j_e,Xrr,WNe,zo,S8,zrr,Ed,Wrr,wz,Qrr,Hrr,Az,Urr,Jrr,Yrr,R8,Krr,D_e,Zrr,etr,otr,Tt,P8,rtr,G_e,ttr,atr,Cd,ntr,O_e,str,ltr,yz,itr,dtr,ctr,hF,ftr,ho,B8,mtr,V_e,gtr,htr,za,ptr,X_e,utr,_tr,z_e,btr,vtr,W_e,Ftr,Ttr,Mtr,Zr,pF,Q_e,Etr,Ctr,Lz,wtr,Atr,ytr,uF,H_e,Ltr,xtr,xz,$tr,ktr,Str,_F,U_e,Rtr,Ptr,$z,Btr,Itr,qtr,bF,J_e,Ntr,jtr,kz,Dtr,Gtr,Otr,vF,Y_e,Vtr,Xtr,Sz,ztr,Wtr,Qtr,FF,Htr,K_e,Utr,Jtr,Z_e,Ytr,Ktr,TF,QNe,wd,MF,e0e,I8,Ztr,o0e,ear,HNe,Wo,q8,oar,Ad,rar,Rz,tar,aar,Pz,nar,sar,lar,N8,iar,r0e,dar,car,far,Mt,j8,mar,t0e,gar,har,yd,par,a0e,uar,_ar,Bz,bar,Far,Tar,EF,Mar,po,D8,Ear,n0e,Car,war,Wa,Aar,s0e,yar,Lar,l0e,xar,$ar,i0e,kar,Sar,Rar,Ld,CF,d0e,Par,Bar,Iz,Iar,qar,Nar,wF,c0e,jar,Dar,qz,Gar,Oar,Var,AF,f0e,Xar,zar,Nz,War,Qar,Har,yF,Uar,m0e,Jar,Yar,g0e,Kar,Zar,LF,UNe,xd,xF,h0e,G8,enr,p0e,onr,JNe,Qo,O8,rnr,$d,tnr,jz,anr,nnr,Dz,snr,lnr,inr,V8,dnr,u0e,cnr,fnr,mnr,Et,X8,gnr,_0e,hnr,pnr,kd,unr,b0e,_nr,bnr,Gz,vnr,Fnr,Tnr,$F,Mnr,uo,z8,Enr,v0e,Cnr,wnr,Qa,Anr,F0e,ynr,Lnr,T0e,xnr,$nr,M0e,knr,Snr,Rnr,W8,kF,E0e,Pnr,Bnr,Oz,Inr,qnr,Nnr,SF,C0e,jnr,Dnr,Vz,Gnr,Onr,Vnr,RF,Xnr,w0e,znr,Wnr,A0e,Qnr,Hnr,PF,YNe,Sd,BF,y0e,Q8,Unr,L0e,Jnr,KNe,Ho,H8,Ynr,Rd,Knr,Xz,Znr,esr,zz,osr,rsr,tsr,U8,asr,x0e,nsr,ssr,lsr,Ct,J8,isr,$0e,dsr,csr,Pd,fsr,k0e,msr,gsr,Wz,hsr,psr,usr,IF,_sr,_o,Y8,bsr,S0e,vsr,Fsr,Ha,Tsr,R0e,Msr,Esr,P0e,Csr,wsr,B0e,Asr,ysr,Lsr,I0e,qF,q0e,xsr,$sr,Qz,ksr,Ssr,Rsr,NF,Psr,N0e,Bsr,Isr,j0e,qsr,Nsr,jF,ZNe,Bd,DF,D0e,K8,jsr,G0e,Dsr,eje,Uo,Z8,Gsr,Id,Osr,Hz,Vsr,Xsr,Uz,zsr,Wsr,Qsr,e7,Hsr,O0e,Usr,Jsr,Ysr,wt,o7,Ksr,V0e,Zsr,elr,qd,olr,X0e,rlr,tlr,Jz,alr,nlr,slr,GF,llr,bo,r7,ilr,z0e,dlr,clr,Ua,flr,W0e,mlr,glr,Q0e,hlr,plr,H0e,ulr,_lr,blr,Ja,OF,U0e,vlr,Flr,Yz,Tlr,Mlr,Elr,VF,J0e,Clr,wlr,Kz,Alr,ylr,Llr,XF,Y0e,xlr,$lr,Zz,klr,Slr,Rlr,zF,K0e,Plr,Blr,eW,Ilr,qlr,Nlr,WF,jlr,Z0e,Dlr,Glr,e1e,Olr,Vlr,QF,oje,Nd,HF,o1e,t7,Xlr,r1e,zlr,rje,Jo,a7,Wlr,jd,Qlr,oW,Hlr,Ulr,rW,Jlr,Ylr,Klr,n7,Zlr,t1e,eir,oir,rir,At,s7,tir,a1e,air,nir,Dd,sir,n1e,lir,iir,tW,dir,cir,fir,UF,mir,vo,l7,gir,s1e,hir,pir,Ya,uir,l1e,_ir,bir,i1e,vir,Fir,d1e,Tir,Mir,Eir,c1e,JF,f1e,Cir,wir,aW,Air,yir,Lir,YF,xir,m1e,$ir,kir,g1e,Sir,Rir,KF,tje,Gd,ZF,h1e,i7,Pir,p1e,Bir,aje,Yo,d7,Iir,Od,qir,nW,Nir,jir,sW,Dir,Gir,Oir,c7,Vir,u1e,Xir,zir,Wir,yt,f7,Qir,_1e,Hir,Uir,Vd,Jir,b1e,Yir,Kir,lW,Zir,edr,odr,e6,rdr,wr,m7,tdr,v1e,adr,ndr,Ka,sdr,F1e,ldr,idr,T1e,ddr,cdr,M1e,fdr,mdr,gdr,N,o6,E1e,hdr,pdr,iW,udr,_dr,bdr,r6,C1e,vdr,Fdr,dW,Tdr,Mdr,Edr,t6,w1e,Cdr,wdr,cW,Adr,ydr,Ldr,a6,A1e,xdr,$dr,fW,kdr,Sdr,Rdr,n6,y1e,Pdr,Bdr,mW,Idr,qdr,Ndr,s6,L1e,jdr,Ddr,gW,Gdr,Odr,Vdr,l6,x1e,Xdr,zdr,hW,Wdr,Qdr,Hdr,i6,$1e,Udr,Jdr,pW,Ydr,Kdr,Zdr,d6,k1e,ecr,ocr,uW,rcr,tcr,acr,c6,S1e,ncr,scr,_W,lcr,icr,dcr,f6,R1e,ccr,fcr,bW,mcr,gcr,hcr,m6,P1e,pcr,ucr,vW,_cr,bcr,vcr,g6,B1e,Fcr,Tcr,FW,Mcr,Ecr,Ccr,h6,I1e,wcr,Acr,TW,ycr,Lcr,xcr,p6,q1e,$cr,kcr,MW,Scr,Rcr,Pcr,u6,N1e,Bcr,Icr,EW,qcr,Ncr,jcr,_6,j1e,Dcr,Gcr,CW,Ocr,Vcr,Xcr,Is,D1e,zcr,Wcr,wW,Qcr,Hcr,AW,Ucr,Jcr,Ycr,b6,G1e,Kcr,Zcr,yW,efr,ofr,rfr,v6,O1e,tfr,afr,LW,nfr,sfr,lfr,F6,V1e,ifr,dfr,xW,cfr,ffr,mfr,T6,X1e,gfr,hfr,$W,pfr,ufr,_fr,M6,z1e,bfr,vfr,kW,Ffr,Tfr,Mfr,E6,W1e,Efr,Cfr,SW,wfr,Afr,yfr,C6,Q1e,Lfr,xfr,RW,$fr,kfr,Sfr,w6,H1e,Rfr,Pfr,PW,Bfr,Ifr,qfr,A6,U1e,Nfr,jfr,BW,Dfr,Gfr,Ofr,y6,J1e,Vfr,Xfr,IW,zfr,Wfr,Qfr,L6,Y1e,Hfr,Ufr,qW,Jfr,Yfr,Kfr,x6,K1e,Zfr,emr,NW,omr,rmr,tmr,$6,Z1e,amr,nmr,jW,smr,lmr,imr,k6,ebe,dmr,cmr,DW,fmr,mmr,gmr,S6,obe,hmr,pmr,GW,umr,_mr,bmr,R6,rbe,vmr,Fmr,OW,Tmr,Mmr,Emr,P6,tbe,Cmr,wmr,VW,Amr,ymr,Lmr,B6,abe,xmr,$mr,XW,kmr,Smr,Rmr,I6,nbe,Pmr,Bmr,zW,Imr,qmr,Nmr,q6,sbe,jmr,Dmr,WW,Gmr,Omr,Vmr,N6,lbe,Xmr,zmr,QW,Wmr,Qmr,Hmr,j6,ibe,Umr,Jmr,HW,Ymr,Kmr,Zmr,D6,dbe,egr,ogr,UW,rgr,tgr,agr,G6,cbe,ngr,sgr,JW,lgr,igr,dgr,O6,fbe,cgr,fgr,YW,mgr,ggr,hgr,V6,mbe,pgr,ugr,KW,_gr,bgr,vgr,X6,gbe,Fgr,Tgr,ZW,Mgr,Egr,Cgr,z6,hbe,wgr,Agr,eQ,ygr,Lgr,xgr,W6,nje,Xd,Q6,pbe,g7,$gr,ube,kgr,sje,Ko,h7,Sgr,zd,Rgr,oQ,Pgr,Bgr,rQ,Igr,qgr,Ngr,p7,jgr,_be,Dgr,Ggr,Ogr,Lt,u7,Vgr,bbe,Xgr,zgr,Wd,Wgr,vbe,Qgr,Hgr,tQ,Ugr,Jgr,Ygr,H6,Kgr,Ar,_7,Zgr,Fbe,ehr,ohr,Za,rhr,Tbe,thr,ahr,Mbe,nhr,shr,Ebe,lhr,ihr,dhr,se,U6,Cbe,chr,fhr,aQ,mhr,ghr,hhr,J6,wbe,phr,uhr,nQ,_hr,bhr,vhr,Y6,Abe,Fhr,Thr,sQ,Mhr,Ehr,Chr,K6,ybe,whr,Ahr,lQ,yhr,Lhr,xhr,Z6,Lbe,$hr,khr,iQ,Shr,Rhr,Phr,eT,xbe,Bhr,Ihr,dQ,qhr,Nhr,jhr,oT,$be,Dhr,Ghr,cQ,Ohr,Vhr,Xhr,rT,kbe,zhr,Whr,fQ,Qhr,Hhr,Uhr,tT,Sbe,Jhr,Yhr,mQ,Khr,Zhr,epr,aT,Rbe,opr,rpr,gQ,tpr,apr,npr,nT,Pbe,spr,lpr,hQ,ipr,dpr,cpr,sT,Bbe,fpr,mpr,pQ,gpr,hpr,ppr,lT,Ibe,upr,_pr,uQ,bpr,vpr,Fpr,iT,qbe,Tpr,Mpr,_Q,Epr,Cpr,wpr,dT,Nbe,Apr,ypr,bQ,Lpr,xpr,$pr,cT,jbe,kpr,Spr,vQ,Rpr,Ppr,Bpr,fT,Dbe,Ipr,qpr,FQ,Npr,jpr,Dpr,mT,Gbe,Gpr,Opr,TQ,Vpr,Xpr,zpr,gT,Obe,Wpr,Qpr,MQ,Hpr,Upr,Jpr,hT,Vbe,Ypr,Kpr,EQ,Zpr,eur,our,pT,Xbe,rur,tur,CQ,aur,nur,sur,uT,zbe,lur,iur,wQ,dur,cur,fur,_T,Wbe,mur,gur,AQ,hur,pur,uur,bT,lje,Qd,vT,Qbe,b7,_ur,Hbe,bur,ije,Zo,v7,vur,Hd,Fur,yQ,Tur,Mur,LQ,Eur,Cur,wur,F7,Aur,Ube,yur,Lur,xur,xt,T7,$ur,Jbe,kur,Sur,Ud,Rur,Ybe,Pur,Bur,xQ,Iur,qur,Nur,FT,jur,yr,M7,Dur,Kbe,Gur,Our,en,Vur,Zbe,Xur,zur,e2e,Wur,Qur,o2e,Hur,Uur,Jur,Me,TT,r2e,Yur,Kur,$Q,Zur,e_r,o_r,MT,t2e,r_r,t_r,kQ,a_r,n_r,s_r,ET,a2e,l_r,i_r,SQ,d_r,c_r,f_r,CT,n2e,m_r,g_r,RQ,h_r,p_r,u_r,wT,s2e,__r,b_r,PQ,v_r,F_r,T_r,AT,l2e,M_r,E_r,BQ,C_r,w_r,A_r,yT,i2e,y_r,L_r,IQ,x_r,$_r,k_r,LT,d2e,S_r,R_r,qQ,P_r,B_r,I_r,xT,c2e,q_r,N_r,NQ,j_r,D_r,G_r,$T,f2e,O_r,V_r,jQ,X_r,z_r,W_r,kT,m2e,Q_r,H_r,DQ,U_r,J_r,Y_r,ST,g2e,K_r,Z_r,GQ,e0r,o0r,r0r,RT,dje,Jd,PT,h2e,E7,t0r,p2e,a0r,cje,er,C7,n0r,Yd,s0r,OQ,l0r,i0r,VQ,d0r,c0r,f0r,w7,m0r,u2e,g0r,h0r,p0r,$t,A7,u0r,_2e,_0r,b0r,Kd,v0r,b2e,F0r,T0r,XQ,M0r,E0r,C0r,BT,w0r,Lr,y7,A0r,v2e,y0r,L0r,on,x0r,F2e,$0r,k0r,T2e,S0r,R0r,M2e,P0r,B0r,I0r,rn,IT,E2e,q0r,N0r,zQ,j0r,D0r,G0r,qT,C2e,O0r,V0r,WQ,X0r,z0r,W0r,NT,w2e,Q0r,H0r,QQ,U0r,J0r,Y0r,jT,A2e,K0r,Z0r,HQ,e1r,o1r,r1r,DT,fje,Zd,GT,y2e,L7,t1r,L2e,a1r,mje,or,x7,n1r,ec,s1r,UQ,l1r,i1r,JQ,d1r,c1r,f1r,$7,m1r,x2e,g1r,h1r,p1r,kt,k7,u1r,$2e,_1r,b1r,oc,v1r,k2e,F1r,T1r,YQ,M1r,E1r,C1r,OT,w1r,xr,S7,A1r,S2e,y1r,L1r,tn,x1r,R2e,$1r,k1r,P2e,S1r,R1r,B2e,P1r,B1r,I1r,ie,VT,I2e,q1r,N1r,KQ,j1r,D1r,G1r,XT,q2e,O1r,V1r,ZQ,X1r,z1r,W1r,zT,N2e,Q1r,H1r,eH,U1r,J1r,Y1r,WT,j2e,K1r,Z1r,oH,ebr,obr,rbr,QT,D2e,tbr,abr,rH,nbr,sbr,lbr,HT,G2e,ibr,dbr,tH,cbr,fbr,mbr,UT,O2e,gbr,hbr,aH,pbr,ubr,_br,JT,V2e,bbr,vbr,nH,Fbr,Tbr,Mbr,YT,X2e,Ebr,Cbr,sH,wbr,Abr,ybr,KT,z2e,Lbr,xbr,lH,$br,kbr,Sbr,ZT,W2e,Rbr,Pbr,iH,Bbr,Ibr,qbr,eM,Q2e,Nbr,jbr,dH,Dbr,Gbr,Obr,oM,H2e,Vbr,Xbr,cH,zbr,Wbr,Qbr,rM,U2e,Hbr,Ubr,fH,Jbr,Ybr,Kbr,tM,J2e,Zbr,e2r,mH,o2r,r2r,t2r,aM,Y2e,a2r,n2r,gH,s2r,l2r,i2r,nM,K2e,d2r,c2r,hH,f2r,m2r,g2r,sM,Z2e,h2r,p2r,pH,u2r,_2r,b2r,lM,e4e,v2r,F2r,uH,T2r,M2r,E2r,iM,o4e,C2r,w2r,_H,A2r,y2r,L2r,dM,gje,rc,cM,r4e,R7,x2r,t4e,$2r,hje,rr,P7,k2r,tc,S2r,bH,R2r,P2r,vH,B2r,I2r,q2r,B7,N2r,a4e,j2r,D2r,G2r,St,I7,O2r,n4e,V2r,X2r,ac,z2r,s4e,W2r,Q2r,FH,H2r,U2r,J2r,fM,Y2r,$r,q7,K2r,l4e,Z2r,e4r,an,o4r,i4e,r4r,t4r,d4e,a4r,n4r,c4e,s4r,l4r,i4r,ye,mM,f4e,d4r,c4r,TH,f4r,m4r,g4r,gM,m4e,h4r,p4r,MH,u4r,_4r,b4r,hM,g4e,v4r,F4r,EH,T4r,M4r,E4r,pM,h4e,C4r,w4r,CH,A4r,y4r,L4r,uM,p4e,x4r,$4r,wH,k4r,S4r,R4r,_M,u4e,P4r,B4r,AH,I4r,q4r,N4r,bM,_4e,j4r,D4r,yH,G4r,O4r,V4r,vM,b4e,X4r,z4r,LH,W4r,Q4r,H4r,FM,v4e,U4r,J4r,xH,Y4r,K4r,Z4r,TM,F4e,evr,ovr,$H,rvr,tvr,avr,MM,pje,nc,EM,T4e,N7,nvr,M4e,svr,uje,tr,j7,lvr,sc,ivr,kH,dvr,cvr,SH,fvr,mvr,gvr,D7,hvr,E4e,pvr,uvr,_vr,Rt,G7,bvr,C4e,vvr,Fvr,lc,Tvr,w4e,Mvr,Evr,RH,Cvr,wvr,Avr,CM,yvr,kr,O7,Lvr,A4e,xvr,$vr,nn,kvr,y4e,Svr,Rvr,L4e,Pvr,Bvr,x4e,Ivr,qvr,Nvr,oe,wM,$4e,jvr,Dvr,PH,Gvr,Ovr,Vvr,AM,k4e,Xvr,zvr,BH,Wvr,Qvr,Hvr,yM,S4e,Uvr,Jvr,IH,Yvr,Kvr,Zvr,LM,R4e,eFr,oFr,qH,rFr,tFr,aFr,xM,P4e,nFr,sFr,NH,lFr,iFr,dFr,$M,B4e,cFr,fFr,jH,mFr,gFr,hFr,kM,I4e,pFr,uFr,DH,_Fr,bFr,vFr,SM,q4e,FFr,TFr,GH,MFr,EFr,CFr,RM,N4e,wFr,AFr,OH,yFr,LFr,xFr,PM,j4e,$Fr,kFr,VH,SFr,RFr,PFr,BM,D4e,BFr,IFr,XH,qFr,NFr,jFr,IM,G4e,DFr,GFr,zH,OFr,VFr,XFr,qM,O4e,zFr,WFr,WH,QFr,HFr,UFr,NM,V4e,JFr,YFr,QH,KFr,ZFr,e6r,jM,X4e,o6r,r6r,HH,t6r,a6r,n6r,DM,z4e,s6r,l6r,UH,i6r,d6r,c6r,GM,W4e,f6r,m6r,JH,g6r,h6r,p6r,OM,Q4e,u6r,_6r,YH,b6r,v6r,F6r,VM,H4e,T6r,M6r,KH,E6r,C6r,w6r,XM,U4e,A6r,y6r,ZH,L6r,x6r,$6r,zM,J4e,k6r,S6r,eU,R6r,P6r,B6r,WM,Y4e,I6r,q6r,oU,N6r,j6r,D6r,QM,K4e,G6r,O6r,rU,V6r,X6r,z6r,HM,Z4e,W6r,Q6r,tU,H6r,U6r,J6r,UM,eve,Y6r,K6r,aU,Z6r,eTr,oTr,JM,ove,rTr,tTr,nU,aTr,nTr,sTr,YM,_je,ic,KM,rve,V7,lTr,tve,iTr,bje,ar,X7,dTr,dc,cTr,sU,fTr,mTr,lU,gTr,hTr,pTr,z7,uTr,ave,_Tr,bTr,vTr,Pt,W7,FTr,nve,TTr,MTr,cc,ETr,sve,CTr,wTr,iU,ATr,yTr,LTr,ZM,xTr,Sr,Q7,$Tr,lve,kTr,STr,sn,RTr,ive,PTr,BTr,dve,ITr,qTr,cve,NTr,jTr,DTr,pe,eE,fve,GTr,OTr,dU,VTr,XTr,zTr,oE,mve,WTr,QTr,cU,HTr,UTr,JTr,rE,gve,YTr,KTr,fU,ZTr,eMr,oMr,tE,hve,rMr,tMr,mU,aMr,nMr,sMr,aE,pve,lMr,iMr,gU,dMr,cMr,fMr,nE,uve,mMr,gMr,hU,hMr,pMr,uMr,sE,_ve,_Mr,bMr,pU,vMr,FMr,TMr,lE,bve,MMr,EMr,uU,CMr,wMr,AMr,iE,vve,yMr,LMr,_U,xMr,$Mr,kMr,dE,Fve,SMr,RMr,bU,PMr,BMr,IMr,cE,Tve,qMr,NMr,vU,jMr,DMr,GMr,fE,Mve,OMr,VMr,FU,XMr,zMr,WMr,mE,Eve,QMr,HMr,TU,UMr,JMr,YMr,gE,Cve,KMr,ZMr,MU,eEr,oEr,rEr,hE,wve,tEr,aEr,EU,nEr,sEr,lEr,pE,Ave,iEr,dEr,CU,cEr,fEr,mEr,uE,yve,gEr,hEr,wU,pEr,uEr,_Er,_E,vje,fc,bE,Lve,H7,bEr,xve,vEr,Fje,nr,U7,FEr,mc,TEr,AU,MEr,EEr,yU,CEr,wEr,AEr,J7,yEr,$ve,LEr,xEr,$Er,Bt,Y7,kEr,kve,SEr,REr,gc,PEr,Sve,BEr,IEr,LU,qEr,NEr,jEr,vE,DEr,Rr,K7,GEr,Rve,OEr,VEr,ln,XEr,Pve,zEr,WEr,Bve,QEr,HEr,Ive,UEr,JEr,YEr,Z7,FE,qve,KEr,ZEr,xU,eCr,oCr,rCr,TE,Nve,tCr,aCr,$U,nCr,sCr,lCr,ME,Tje,hc,EE,jve,e9,iCr,Dve,dCr,Mje,sr,o9,cCr,pc,fCr,kU,mCr,gCr,SU,hCr,pCr,uCr,r9,_Cr,Gve,bCr,vCr,FCr,It,t9,TCr,Ove,MCr,ECr,uc,CCr,Vve,wCr,ACr,RU,yCr,LCr,xCr,CE,$Cr,Pr,a9,kCr,Xve,SCr,RCr,dn,PCr,zve,BCr,ICr,Wve,qCr,NCr,Qve,jCr,DCr,GCr,Hve,wE,Uve,OCr,VCr,PU,XCr,zCr,WCr,AE,Eje,_c,yE,Jve,n9,QCr,Yve,HCr,Cje,lr,s9,UCr,bc,JCr,BU,YCr,KCr,IU,ZCr,e5r,o5r,l9,r5r,Kve,t5r,a5r,n5r,qt,i9,s5r,Zve,l5r,i5r,vc,d5r,eFe,c5r,f5r,qU,m5r,g5r,h5r,LE,p5r,Br,d9,u5r,oFe,_5r,b5r,cn,v5r,rFe,F5r,T5r,tFe,M5r,E5r,aFe,C5r,w5r,A5r,de,xE,nFe,y5r,L5r,NU,x5r,$5r,k5r,$E,sFe,S5r,R5r,jU,P5r,B5r,I5r,kE,lFe,q5r,N5r,DU,j5r,D5r,G5r,SE,iFe,O5r,V5r,GU,X5r,z5r,W5r,RE,dFe,Q5r,H5r,OU,U5r,J5r,Y5r,PE,cFe,K5r,Z5r,VU,e3r,o3r,r3r,BE,fFe,t3r,a3r,XU,n3r,s3r,l3r,IE,mFe,i3r,d3r,zU,c3r,f3r,m3r,qE,gFe,g3r,h3r,WU,p3r,u3r,_3r,NE,hFe,b3r,v3r,QU,F3r,T3r,M3r,jE,pFe,E3r,C3r,HU,w3r,A3r,y3r,DE,uFe,L3r,x3r,UU,$3r,k3r,S3r,GE,_Fe,R3r,P3r,JU,B3r,I3r,q3r,OE,bFe,N3r,j3r,YU,D3r,G3r,O3r,VE,vFe,V3r,X3r,KU,z3r,W3r,Q3r,XE,FFe,H3r,U3r,ZU,J3r,Y3r,K3r,zE,TFe,Z3r,ewr,eJ,owr,rwr,twr,WE,MFe,awr,nwr,oJ,swr,lwr,iwr,QE,EFe,dwr,cwr,rJ,fwr,mwr,gwr,HE,CFe,hwr,pwr,tJ,uwr,_wr,bwr,UE,wje,Fc,JE,wFe,c9,vwr,AFe,Fwr,Aje,ir,f9,Twr,Tc,Mwr,aJ,Ewr,Cwr,nJ,wwr,Awr,ywr,m9,Lwr,yFe,xwr,$wr,kwr,Nt,g9,Swr,LFe,Rwr,Pwr,Mc,Bwr,xFe,Iwr,qwr,sJ,Nwr,jwr,Dwr,YE,Gwr,Ir,h9,Owr,$Fe,Vwr,Xwr,fn,zwr,kFe,Wwr,Qwr,SFe,Hwr,Uwr,RFe,Jwr,Ywr,Kwr,ce,KE,PFe,Zwr,eAr,lJ,oAr,rAr,tAr,ZE,BFe,aAr,nAr,iJ,sAr,lAr,iAr,eC,IFe,dAr,cAr,dJ,fAr,mAr,gAr,oC,qFe,hAr,pAr,cJ,uAr,_Ar,bAr,rC,NFe,vAr,FAr,fJ,TAr,MAr,EAr,tC,jFe,CAr,wAr,mJ,AAr,yAr,LAr,aC,DFe,xAr,$Ar,gJ,kAr,SAr,RAr,nC,GFe,PAr,BAr,hJ,IAr,qAr,NAr,sC,OFe,jAr,DAr,pJ,GAr,OAr,VAr,lC,VFe,XAr,zAr,uJ,WAr,QAr,HAr,iC,XFe,UAr,JAr,_J,YAr,KAr,ZAr,dC,zFe,eyr,oyr,bJ,ryr,tyr,ayr,cC,WFe,nyr,syr,vJ,lyr,iyr,dyr,fC,QFe,cyr,fyr,FJ,myr,gyr,hyr,mC,HFe,pyr,uyr,TJ,_yr,byr,vyr,gC,UFe,Fyr,Tyr,MJ,Myr,Eyr,Cyr,hC,JFe,wyr,Ayr,EJ,yyr,Lyr,xyr,pC,YFe,$yr,kyr,CJ,Syr,Ryr,Pyr,uC,KFe,Byr,Iyr,wJ,qyr,Nyr,jyr,_C,ZFe,Dyr,Gyr,AJ,Oyr,Vyr,Xyr,bC,yje,Ec,vC,e6e,p9,zyr,o6e,Wyr,Lje,dr,u9,Qyr,Cc,Hyr,yJ,Uyr,Jyr,LJ,Yyr,Kyr,Zyr,_9,eLr,r6e,oLr,rLr,tLr,jt,b9,aLr,t6e,nLr,sLr,wc,lLr,a6e,iLr,dLr,xJ,cLr,fLr,mLr,FC,gLr,qr,v9,hLr,n6e,pLr,uLr,mn,_Lr,s6e,bLr,vLr,l6e,FLr,TLr,i6e,MLr,ELr,CLr,d6e,TC,c6e,wLr,ALr,$J,yLr,LLr,xLr,MC,xje,Ac,EC,f6e,F9,$Lr,m6e,kLr,$je,cr,T9,SLr,yc,RLr,kJ,PLr,BLr,SJ,ILr,qLr,NLr,M9,jLr,g6e,DLr,GLr,OLr,Dt,E9,VLr,h6e,XLr,zLr,Lc,WLr,p6e,QLr,HLr,RJ,ULr,JLr,YLr,CC,KLr,Nr,C9,ZLr,u6e,e8r,o8r,gn,r8r,_6e,t8r,a8r,b6e,n8r,s8r,v6e,l8r,i8r,d8r,F6e,wC,T6e,c8r,f8r,PJ,m8r,g8r,h8r,AC,kje,xc,yC,M6e,w9,p8r,E6e,u8r,Sje,fr,A9,_8r,$c,b8r,BJ,v8r,F8r,IJ,T8r,M8r,E8r,y9,C8r,C6e,w8r,A8r,y8r,Gt,L9,L8r,w6e,x8r,$8r,kc,k8r,A6e,S8r,R8r,qJ,P8r,B8r,I8r,LC,q8r,jr,x9,N8r,y6e,j8r,D8r,hn,G8r,L6e,O8r,V8r,x6e,X8r,z8r,$6e,W8r,Q8r,H8r,te,xC,k6e,U8r,J8r,NJ,Y8r,K8r,Z8r,$C,S6e,e7r,o7r,jJ,r7r,t7r,a7r,kC,R6e,n7r,s7r,DJ,l7r,i7r,d7r,SC,P6e,c7r,f7r,GJ,m7r,g7r,h7r,RC,B6e,p7r,u7r,OJ,_7r,b7r,v7r,PC,I6e,F7r,T7r,VJ,M7r,E7r,C7r,BC,q6e,w7r,A7r,XJ,y7r,L7r,x7r,IC,N6e,$7r,k7r,zJ,S7r,R7r,P7r,qC,j6e,B7r,I7r,WJ,q7r,N7r,j7r,NC,D6e,D7r,G7r,QJ,O7r,V7r,X7r,jC,G6e,z7r,W7r,HJ,Q7r,H7r,U7r,DC,O6e,J7r,Y7r,UJ,K7r,Z7r,e9r,GC,V6e,o9r,r9r,JJ,t9r,a9r,n9r,OC,X6e,s9r,l9r,YJ,i9r,d9r,c9r,VC,z6e,f9r,m9r,KJ,g9r,h9r,p9r,XC,W6e,u9r,_9r,ZJ,b9r,v9r,F9r,zC,Q6e,T9r,M9r,eY,E9r,C9r,w9r,WC,H6e,A9r,y9r,oY,L9r,x9r,$9r,QC,U6e,k9r,S9r,rY,R9r,P9r,B9r,HC,J6e,I9r,q9r,tY,N9r,j9r,D9r,UC,Y6e,G9r,O9r,aY,V9r,X9r,z9r,JC,K6e,W9r,Q9r,nY,H9r,U9r,J9r,YC,Z6e,Y9r,K9r,sY,Z9r,exr,oxr,KC,eTe,rxr,txr,lY,axr,nxr,sxr,ZC,oTe,lxr,ixr,iY,dxr,cxr,fxr,e5,Rje,Sc,o5,rTe,$9,mxr,tTe,gxr,Pje,mr,k9,hxr,Rc,pxr,dY,uxr,_xr,cY,bxr,vxr,Fxr,S9,Txr,aTe,Mxr,Exr,Cxr,Ot,R9,wxr,nTe,Axr,yxr,Pc,Lxr,sTe,xxr,$xr,fY,kxr,Sxr,Rxr,r5,Pxr,Dr,P9,Bxr,lTe,Ixr,qxr,pn,Nxr,iTe,jxr,Dxr,dTe,Gxr,Oxr,cTe,Vxr,Xxr,zxr,Re,t5,fTe,Wxr,Qxr,mY,Hxr,Uxr,Jxr,a5,mTe,Yxr,Kxr,gY,Zxr,e$r,o$r,n5,gTe,r$r,t$r,hY,a$r,n$r,s$r,s5,hTe,l$r,i$r,pY,d$r,c$r,f$r,l5,pTe,m$r,g$r,uY,h$r,p$r,u$r,i5,uTe,_$r,b$r,_Y,v$r,F$r,T$r,d5,_Te,M$r,E$r,bY,C$r,w$r,A$r,c5,bTe,y$r,L$r,vY,x$r,$$r,k$r,f5,vTe,S$r,R$r,FY,P$r,B$r,I$r,m5,Bje,Bc,g5,FTe,B9,q$r,TTe,N$r,Ije,gr,I9,j$r,Ic,D$r,TY,G$r,O$r,MY,V$r,X$r,z$r,q9,W$r,MTe,Q$r,H$r,U$r,Vt,N9,J$r,ETe,Y$r,K$r,qc,Z$r,CTe,ekr,okr,EY,rkr,tkr,akr,h5,nkr,Gr,j9,skr,wTe,lkr,ikr,un,dkr,ATe,ckr,fkr,yTe,mkr,gkr,LTe,hkr,pkr,ukr,Ee,p5,xTe,_kr,bkr,CY,vkr,Fkr,Tkr,u5,$Te,Mkr,Ekr,wY,Ckr,wkr,Akr,_5,kTe,ykr,Lkr,AY,xkr,$kr,kkr,b5,STe,Skr,Rkr,yY,Pkr,Bkr,Ikr,v5,RTe,qkr,Nkr,LY,jkr,Dkr,Gkr,F5,PTe,Okr,Vkr,xY,Xkr,zkr,Wkr,T5,BTe,Qkr,Hkr,$Y,Ukr,Jkr,Ykr,M5,ITe,Kkr,Zkr,kY,eSr,oSr,rSr,E5,qTe,tSr,aSr,SY,nSr,sSr,lSr,C5,NTe,iSr,dSr,RY,cSr,fSr,mSr,w5,jTe,gSr,hSr,PY,pSr,uSr,_Sr,A5,DTe,bSr,vSr,BY,FSr,TSr,MSr,y5,qje,Nc,L5,GTe,D9,ESr,OTe,CSr,Nje,hr,G9,wSr,jc,ASr,IY,ySr,LSr,qY,xSr,$Sr,kSr,O9,SSr,VTe,RSr,PSr,BSr,Xt,V9,ISr,XTe,qSr,NSr,Dc,jSr,zTe,DSr,GSr,NY,OSr,VSr,XSr,x5,zSr,Or,X9,WSr,WTe,QSr,HSr,_n,USr,QTe,JSr,YSr,HTe,KSr,ZSr,UTe,eRr,oRr,rRr,Le,$5,JTe,tRr,aRr,jY,nRr,sRr,lRr,k5,YTe,iRr,dRr,DY,cRr,fRr,mRr,S5,KTe,gRr,hRr,GY,pRr,uRr,_Rr,R5,ZTe,bRr,vRr,OY,FRr,TRr,MRr,P5,eMe,ERr,CRr,VY,wRr,ARr,yRr,B5,oMe,LRr,xRr,XY,$Rr,kRr,SRr,I5,rMe,RRr,PRr,zY,BRr,IRr,qRr,q5,tMe,NRr,jRr,WY,DRr,GRr,ORr,N5,aMe,VRr,XRr,QY,zRr,WRr,QRr,j5,nMe,HRr,URr,HY,JRr,YRr,KRr,D5,jje,Gc,G5,sMe,z9,ZRr,lMe,ePr,Dje,pr,W9,oPr,Oc,rPr,UY,tPr,aPr,JY,nPr,sPr,lPr,Q9,iPr,iMe,dPr,cPr,fPr,zt,H9,mPr,dMe,gPr,hPr,Vc,pPr,cMe,uPr,_Pr,YY,bPr,vPr,FPr,O5,TPr,Vr,U9,MPr,fMe,EPr,CPr,bn,wPr,mMe,APr,yPr,gMe,LPr,xPr,hMe,$Pr,kPr,SPr,Pe,V5,pMe,RPr,PPr,KY,BPr,IPr,qPr,X5,uMe,NPr,jPr,ZY,DPr,GPr,OPr,z5,_Me,VPr,XPr,eK,zPr,WPr,QPr,W5,bMe,HPr,UPr,oK,JPr,YPr,KPr,Q5,vMe,ZPr,eBr,rK,oBr,rBr,tBr,H5,FMe,aBr,nBr,tK,sBr,lBr,iBr,U5,TMe,dBr,cBr,aK,fBr,mBr,gBr,J5,MMe,hBr,pBr,nK,uBr,_Br,bBr,Y5,EMe,vBr,FBr,sK,TBr,MBr,EBr,K5,Gje,Xc,Z5,CMe,J9,CBr,wMe,wBr,Oje,ur,Y9,ABr,zc,yBr,lK,LBr,xBr,iK,$Br,kBr,SBr,K9,RBr,AMe,PBr,BBr,IBr,Wt,Z9,qBr,yMe,NBr,jBr,Wc,DBr,LMe,GBr,OBr,dK,VBr,XBr,zBr,e3,WBr,Xr,ex,QBr,xMe,HBr,UBr,vn,JBr,$Me,YBr,KBr,kMe,ZBr,eIr,SMe,oIr,rIr,tIr,xe,o3,RMe,aIr,nIr,cK,sIr,lIr,iIr,r3,PMe,dIr,cIr,fK,fIr,mIr,gIr,t3,BMe,hIr,pIr,mK,uIr,_Ir,bIr,a3,IMe,vIr,FIr,gK,TIr,MIr,EIr,n3,qMe,CIr,wIr,hK,AIr,yIr,LIr,s3,NMe,xIr,$Ir,pK,kIr,SIr,RIr,l3,jMe,PIr,BIr,uK,IIr,qIr,NIr,i3,DMe,jIr,DIr,_K,GIr,OIr,VIr,d3,GMe,XIr,zIr,bK,WIr,QIr,HIr,c3,OMe,UIr,JIr,vK,YIr,KIr,ZIr,f3,Vje,Qc,m3,VMe,ox,eqr,XMe,oqr,Xje,_r,rx,rqr,Hc,tqr,FK,aqr,nqr,TK,sqr,lqr,iqr,tx,dqr,zMe,cqr,fqr,mqr,Qt,ax,gqr,WMe,hqr,pqr,Uc,uqr,QMe,_qr,bqr,MK,vqr,Fqr,Tqr,g3,Mqr,zr,nx,Eqr,HMe,Cqr,wqr,Fn,Aqr,UMe,yqr,Lqr,JMe,xqr,$qr,YMe,kqr,Sqr,Rqr,$e,h3,KMe,Pqr,Bqr,EK,Iqr,qqr,Nqr,p3,ZMe,jqr,Dqr,CK,Gqr,Oqr,Vqr,u3,eEe,Xqr,zqr,wK,Wqr,Qqr,Hqr,_3,oEe,Uqr,Jqr,AK,Yqr,Kqr,Zqr,b3,rEe,eNr,oNr,yK,rNr,tNr,aNr,v3,tEe,nNr,sNr,LK,lNr,iNr,dNr,F3,aEe,cNr,fNr,xK,mNr,gNr,hNr,T3,nEe,pNr,uNr,$K,_Nr,bNr,vNr,M3,sEe,FNr,TNr,kK,MNr,ENr,CNr,E3,lEe,wNr,ANr,SK,yNr,LNr,xNr,C3,zje,Jc,w3,iEe,sx,$Nr,dEe,kNr,Wje,br,lx,SNr,Yc,RNr,RK,PNr,BNr,PK,INr,qNr,NNr,ix,jNr,cEe,DNr,GNr,ONr,Ht,dx,VNr,fEe,XNr,zNr,Kc,WNr,mEe,QNr,HNr,BK,UNr,JNr,YNr,A3,KNr,Wr,cx,ZNr,gEe,ejr,ojr,Tn,rjr,hEe,tjr,ajr,pEe,njr,sjr,uEe,ljr,ijr,djr,De,y3,_Ee,cjr,fjr,IK,mjr,gjr,hjr,L3,bEe,pjr,ujr,qK,_jr,bjr,vjr,x3,vEe,Fjr,Tjr,NK,Mjr,Ejr,Cjr,$3,FEe,wjr,Ajr,jK,yjr,Ljr,xjr,k3,TEe,$jr,kjr,DK,Sjr,Rjr,Pjr,S3,MEe,Bjr,Ijr,GK,qjr,Njr,jjr,R3,EEe,Djr,Gjr,OK,Ojr,Vjr,Xjr,P3,CEe,zjr,Wjr,VK,Qjr,Hjr,Ujr,B3,Qje,Zc,I3,wEe,fx,Jjr,AEe,Yjr,Hje,vr,mx,Kjr,ef,Zjr,XK,eDr,oDr,zK,rDr,tDr,aDr,gx,nDr,yEe,sDr,lDr,iDr,Ut,hx,dDr,LEe,cDr,fDr,of,mDr,xEe,gDr,hDr,WK,pDr,uDr,_Dr,q3,bDr,Qr,px,vDr,$Ee,FDr,TDr,Mn,MDr,kEe,EDr,CDr,SEe,wDr,ADr,REe,yDr,LDr,xDr,Ge,N3,PEe,$Dr,kDr,QK,SDr,RDr,PDr,j3,BEe,BDr,IDr,HK,qDr,NDr,jDr,D3,IEe,DDr,GDr,UK,ODr,VDr,XDr,G3,qEe,zDr,WDr,JK,QDr,HDr,UDr,O3,NEe,JDr,YDr,YK,KDr,ZDr,eGr,V3,jEe,oGr,rGr,KK,tGr,aGr,nGr,X3,DEe,sGr,lGr,ZK,iGr,dGr,cGr,z3,GEe,fGr,mGr,eZ,gGr,hGr,pGr,W3,Uje,rf,Q3,OEe,ux,uGr,VEe,_Gr,Jje,Fr,_x,bGr,tf,vGr,oZ,FGr,TGr,rZ,MGr,EGr,CGr,bx,wGr,XEe,AGr,yGr,LGr,Jt,vx,xGr,zEe,$Gr,kGr,af,SGr,WEe,RGr,PGr,tZ,BGr,IGr,qGr,H3,NGr,Hr,Fx,jGr,QEe,DGr,GGr,En,OGr,HEe,VGr,XGr,UEe,zGr,WGr,JEe,QGr,HGr,UGr,YEe,U3,KEe,JGr,YGr,aZ,KGr,ZGr,eOr,J3,Yje,nf,Y3,ZEe,Tx,oOr,eCe,rOr,Kje,Tr,Mx,tOr,sf,aOr,nZ,nOr,sOr,sZ,lOr,iOr,dOr,Ex,cOr,oCe,fOr,mOr,gOr,Yt,Cx,hOr,rCe,pOr,uOr,lf,_Or,tCe,bOr,vOr,lZ,FOr,TOr,MOr,K3,EOr,Ur,wx,COr,aCe,wOr,AOr,Cn,yOr,nCe,LOr,xOr,sCe,$Or,kOr,lCe,SOr,ROr,POr,Ax,Z3,iCe,BOr,IOr,iZ,qOr,NOr,jOr,ew,dCe,DOr,GOr,dZ,OOr,VOr,XOr,ow,Zje,df,rw,cCe,yx,zOr,fCe,WOr,eDe,Mr,Lx,QOr,cf,HOr,cZ,UOr,JOr,fZ,YOr,KOr,ZOr,xx,eVr,mCe,oVr,rVr,tVr,Kt,$x,aVr,gCe,nVr,sVr,ff,lVr,hCe,iVr,dVr,mZ,cVr,fVr,mVr,tw,gVr,Jr,kx,hVr,pCe,pVr,uVr,wn,_Vr,uCe,bVr,vVr,_Ce,FVr,TVr,bCe,MVr,EVr,CVr,vCe,aw,FCe,wVr,AVr,gZ,yVr,LVr,xVr,nw,oDe;return d=new re({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yy=new re({}),Ly=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Ff=new $Vr({props:{warning:!0,$$slots:{default:[f$t]},$$scope:{ctx:L}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/configuration_auto.py#L584"}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/configuration_auto.py#L607"}}),Eg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[m$t]},$$scope:{ctx:L}}}),Py=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/configuration_auto.py#L730"}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/tokenization_auto.py#L390"}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16004/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/tokenization_auto.py#L404"}}),ah=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[g$t]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/tokenization_auto.py#L603"}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16004/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Ih=new $Vr({props:{$$slots:{default:[h$t]},$$scope:{ctx:L}}}),qh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[p$t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),Qy=new re({}),Hy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/processing_auto.py#L88"}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/processing_auto.py#L102"}}),tp=new $Vr({props:{$$slots:{default:[u$t]},$$scope:{ctx:L}}}),ap=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_$t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/processing_auto.py#L255"}}),Zy=new re({}),eL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L736"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),lp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[b$t]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),r_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[v$t]},$$scope:{ctx:L}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L743"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),a_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[F$t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[T$t]},$$scope:{ctx:L}}}),dL=new re({}),cL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L758"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[M$t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[E$t]},$$scope:{ctx:L}}}),hL=new re({}),pL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L765"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[C$t]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),F1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[w$t]},$$scope:{ctx:L}}}),vL=new re({}),FL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L772"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),M1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[A$t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[y$t]},$$scope:{ctx:L}}}),CL=new re({}),wL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L781"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[L$t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[x$t]},$$scope:{ctx:L}}}),xL=new re({}),$L=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L815"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),jb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[$$t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),u2=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[k$t]},$$scope:{ctx:L}}}),PL=new re({}),BL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L822"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),b2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[S$t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[R$t]},$$scope:{ctx:L}}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L808"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),XL=new re({}),zL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L790"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),f4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[I$t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[q$t]},$$scope:{ctx:L}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L797"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),av=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),e8=new re({}),o8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L831"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),n8=new re({}),s8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L870"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),wv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),c8=new re({}),f8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L877"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),Nv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),p8=new re({}),u8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L900"}}),b8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),Dv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),F8=new re({}),T8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L884"}}),E8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),sF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),w8=new re({}),A8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L891"}}),L8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),iF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L909"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),TF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),I8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L916"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),EF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),G8=new re({}),O8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L863"}}),X8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Q8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L838"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L845"}}),o7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),t7=new re({}),a7=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_auto.py#L854"}}),s7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),i7=new re({}),d7=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),f7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),m7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),W6=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),g7=new re({}),h7=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),u7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),H6=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),b7=new re({}),v7=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),T7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),M7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),E7=new re({}),C7=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),A7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),y7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),L7=new re({}),x7=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),k7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),S7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),R7=new re({}),P7=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),I7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),q7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),N7=new re({}),j7=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),G7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),O7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),V7=new re({}),X7=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),W7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),H7=new re({}),U7=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),Y7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),K7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),e9=new re({}),o9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),p9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),w9=new re({}),A9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),L9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),e5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),$9=new re({}),k9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),R9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),r5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),B9=new re({}),I9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),N9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),D9=new re({}),G9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),V9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),z9=new re({}),W9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),H9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),K5=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),e3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),ox=new re({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),sx=new re({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),fx=new re({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),W3=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),ux=new re({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),yx=new re({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16004/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16004/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16004/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),pf=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=a("code"),Ey=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),hi=o("Instantiating one of "),yn=a("a"),Cy=o("AutoConfig"),Ln=o(", "),xn=a("a"),wy=o("AutoModel"),pi=o(`, and
`),$n=a("a"),Ay=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),_f=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),z$=o("will create a model that is an instance of "),_i=a("a"),W$=o("BertModel"),Q$=o("."),Eo=l(),wa=a("p"),H$=o("There is one class of "),bf=a("code"),U$=o("AutoModel"),dOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Kqe=l(),bi=a("h2"),vf=a("a"),soe=a("span"),F(yy.$$.fragment),cOe=l(),loe=a("span"),fOe=o("Extending the Auto Classes"),Zqe=l(),kn=a("p"),mOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ioe=a("code"),gOe=o("NewModel"),hOe=o(", make sure you have a "),doe=a("code"),pOe=o("NewModelConfig"),uOe=o(` then you can add those to the auto
classes like this:`),eNe=l(),F(Ly.$$.fragment),oNe=l(),J$=a("p"),_Oe=o("You will then be able to use the auto classes like you would usually do!"),rNe=l(),F(Ff.$$.fragment),tNe=l(),vi=a("h2"),Tf=a("a"),coe=a("span"),F(xy.$$.fragment),bOe=l(),foe=a("span"),vOe=o("AutoConfig"),aNe=l(),Co=a("div"),F($y.$$.fragment),FOe=l(),ky=a("p"),TOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y$=a("a"),MOe=o("from_pretrained()"),EOe=o(" class method."),COe=l(),Sy=a("p"),wOe=o("This class cannot be instantiated directly using "),moe=a("code"),AOe=o("__init__()"),yOe=o(" (throws an error)."),LOe=l(),Er=a("div"),F(Ry.$$.fragment),xOe=l(),goe=a("p"),$Oe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),kOe=l(),Fi=a("p"),SOe=o("The configuration class to instantiate is selected based on the "),hoe=a("code"),ROe=o("model_type"),POe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),poe=a("code"),BOe=o("pretrained_model_name_or_path"),IOe=o(":"),qOe=l(),A=a("ul"),Mf=a("li"),uoe=a("strong"),NOe=o("albert"),jOe=o(" \u2014 "),K$=a("a"),DOe=o("AlbertConfig"),GOe=o(" (ALBERT model)"),OOe=l(),Ef=a("li"),_oe=a("strong"),VOe=o("bart"),XOe=o(" \u2014 "),Z$=a("a"),zOe=o("BartConfig"),WOe=o(" (BART model)"),QOe=l(),Cf=a("li"),boe=a("strong"),HOe=o("beit"),UOe=o(" \u2014 "),ek=a("a"),JOe=o("BeitConfig"),YOe=o(" (BEiT model)"),KOe=l(),wf=a("li"),voe=a("strong"),ZOe=o("bert"),eVe=o(" \u2014 "),ok=a("a"),oVe=o("BertConfig"),rVe=o(" (BERT model)"),tVe=l(),Af=a("li"),Foe=a("strong"),aVe=o("bert-generation"),nVe=o(" \u2014 "),rk=a("a"),sVe=o("BertGenerationConfig"),lVe=o(" (Bert Generation model)"),iVe=l(),yf=a("li"),Toe=a("strong"),dVe=o("big_bird"),cVe=o(" \u2014 "),tk=a("a"),fVe=o("BigBirdConfig"),mVe=o(" (BigBird model)"),gVe=l(),Lf=a("li"),Moe=a("strong"),hVe=o("bigbird_pegasus"),pVe=o(" \u2014 "),ak=a("a"),uVe=o("BigBirdPegasusConfig"),_Ve=o(" (BigBirdPegasus model)"),bVe=l(),xf=a("li"),Eoe=a("strong"),vVe=o("blenderbot"),FVe=o(" \u2014 "),nk=a("a"),TVe=o("BlenderbotConfig"),MVe=o(" (Blenderbot model)"),EVe=l(),$f=a("li"),Coe=a("strong"),CVe=o("blenderbot-small"),wVe=o(" \u2014 "),sk=a("a"),AVe=o("BlenderbotSmallConfig"),yVe=o(" (BlenderbotSmall model)"),LVe=l(),kf=a("li"),woe=a("strong"),xVe=o("camembert"),$Ve=o(" \u2014 "),lk=a("a"),kVe=o("CamembertConfig"),SVe=o(" (CamemBERT model)"),RVe=l(),Sf=a("li"),Aoe=a("strong"),PVe=o("canine"),BVe=o(" \u2014 "),ik=a("a"),IVe=o("CanineConfig"),qVe=o(" (Canine model)"),NVe=l(),Rf=a("li"),yoe=a("strong"),jVe=o("clip"),DVe=o(" \u2014 "),dk=a("a"),GVe=o("CLIPConfig"),OVe=o(" (CLIP model)"),VVe=l(),Pf=a("li"),Loe=a("strong"),XVe=o("convbert"),zVe=o(" \u2014 "),ck=a("a"),WVe=o("ConvBertConfig"),QVe=o(" (ConvBERT model)"),HVe=l(),Bf=a("li"),xoe=a("strong"),UVe=o("convnext"),JVe=o(" \u2014 "),fk=a("a"),YVe=o("ConvNextConfig"),KVe=o(" (ConvNext model)"),ZVe=l(),If=a("li"),$oe=a("strong"),eXe=o("ctrl"),oXe=o(" \u2014 "),mk=a("a"),rXe=o("CTRLConfig"),tXe=o(" (CTRL model)"),aXe=l(),qf=a("li"),koe=a("strong"),nXe=o("cvt"),sXe=o(" \u2014 "),gk=a("a"),lXe=o("CvtConfig"),iXe=o(" (CvT model)"),dXe=l(),Nf=a("li"),Soe=a("strong"),cXe=o("data2vec-audio"),fXe=o(" \u2014 "),hk=a("a"),mXe=o("Data2VecAudioConfig"),gXe=o(" (Data2VecAudio model)"),hXe=l(),jf=a("li"),Roe=a("strong"),pXe=o("data2vec-text"),uXe=o(" \u2014 "),pk=a("a"),_Xe=o("Data2VecTextConfig"),bXe=o(" (Data2VecText model)"),vXe=l(),Df=a("li"),Poe=a("strong"),FXe=o("data2vec-vision"),TXe=o(" \u2014 "),uk=a("a"),MXe=o("Data2VecVisionConfig"),EXe=o(" (Data2VecVision model)"),CXe=l(),Gf=a("li"),Boe=a("strong"),wXe=o("deberta"),AXe=o(" \u2014 "),_k=a("a"),yXe=o("DebertaConfig"),LXe=o(" (DeBERTa model)"),xXe=l(),Of=a("li"),Ioe=a("strong"),$Xe=o("deberta-v2"),kXe=o(" \u2014 "),bk=a("a"),SXe=o("DebertaV2Config"),RXe=o(" (DeBERTa-v2 model)"),PXe=l(),Vf=a("li"),qoe=a("strong"),BXe=o("decision_transformer"),IXe=o(" \u2014 "),vk=a("a"),qXe=o("DecisionTransformerConfig"),NXe=o(" (Decision Transformer model)"),jXe=l(),Xf=a("li"),Noe=a("strong"),DXe=o("deit"),GXe=o(" \u2014 "),Fk=a("a"),OXe=o("DeiTConfig"),VXe=o(" (DeiT model)"),XXe=l(),zf=a("li"),joe=a("strong"),zXe=o("detr"),WXe=o(" \u2014 "),Tk=a("a"),QXe=o("DetrConfig"),HXe=o(" (DETR model)"),UXe=l(),Wf=a("li"),Doe=a("strong"),JXe=o("distilbert"),YXe=o(" \u2014 "),Mk=a("a"),KXe=o("DistilBertConfig"),ZXe=o(" (DistilBERT model)"),eze=l(),Qf=a("li"),Goe=a("strong"),oze=o("dpr"),rze=o(" \u2014 "),Ek=a("a"),tze=o("DPRConfig"),aze=o(" (DPR model)"),nze=l(),Hf=a("li"),Ooe=a("strong"),sze=o("dpt"),lze=o(" \u2014 "),Ck=a("a"),ize=o("DPTConfig"),dze=o(" (DPT model)"),cze=l(),Uf=a("li"),Voe=a("strong"),fze=o("electra"),mze=o(" \u2014 "),wk=a("a"),gze=o("ElectraConfig"),hze=o(" (ELECTRA model)"),pze=l(),Jf=a("li"),Xoe=a("strong"),uze=o("encoder-decoder"),_ze=o(" \u2014 "),Ak=a("a"),bze=o("EncoderDecoderConfig"),vze=o(" (Encoder decoder model)"),Fze=l(),Yf=a("li"),zoe=a("strong"),Tze=o("flaubert"),Mze=o(" \u2014 "),yk=a("a"),Eze=o("FlaubertConfig"),Cze=o(" (FlauBERT model)"),wze=l(),Kf=a("li"),Woe=a("strong"),Aze=o("flava"),yze=o(" \u2014 "),Lk=a("a"),Lze=o("FlavaConfig"),xze=o(" (Flava model)"),$ze=l(),Zf=a("li"),Qoe=a("strong"),kze=o("fnet"),Sze=o(" \u2014 "),xk=a("a"),Rze=o("FNetConfig"),Pze=o(" (FNet model)"),Bze=l(),em=a("li"),Hoe=a("strong"),Ize=o("fsmt"),qze=o(" \u2014 "),$k=a("a"),Nze=o("FSMTConfig"),jze=o(" (FairSeq Machine-Translation model)"),Dze=l(),om=a("li"),Uoe=a("strong"),Gze=o("funnel"),Oze=o(" \u2014 "),kk=a("a"),Vze=o("FunnelConfig"),Xze=o(" (Funnel Transformer model)"),zze=l(),rm=a("li"),Joe=a("strong"),Wze=o("glpn"),Qze=o(" \u2014 "),Sk=a("a"),Hze=o("GLPNConfig"),Uze=o(" (GLPN model)"),Jze=l(),tm=a("li"),Yoe=a("strong"),Yze=o("gpt2"),Kze=o(" \u2014 "),Rk=a("a"),Zze=o("GPT2Config"),eWe=o(" (OpenAI GPT-2 model)"),oWe=l(),am=a("li"),Koe=a("strong"),rWe=o("gpt_neo"),tWe=o(" \u2014 "),Pk=a("a"),aWe=o("GPTNeoConfig"),nWe=o(" (GPT Neo model)"),sWe=l(),nm=a("li"),Zoe=a("strong"),lWe=o("gpt_neox"),iWe=o(" \u2014 "),Bk=a("a"),dWe=o("GPTNeoXConfig"),cWe=o(" (GPT NeoX model)"),fWe=l(),sm=a("li"),ere=a("strong"),mWe=o("gptj"),gWe=o(" \u2014 "),Ik=a("a"),hWe=o("GPTJConfig"),pWe=o(" (GPT-J model)"),uWe=l(),lm=a("li"),ore=a("strong"),_We=o("hubert"),bWe=o(" \u2014 "),qk=a("a"),vWe=o("HubertConfig"),FWe=o(" (Hubert model)"),TWe=l(),im=a("li"),rre=a("strong"),MWe=o("ibert"),EWe=o(" \u2014 "),Nk=a("a"),CWe=o("IBertConfig"),wWe=o(" (I-BERT model)"),AWe=l(),dm=a("li"),tre=a("strong"),yWe=o("imagegpt"),LWe=o(" \u2014 "),jk=a("a"),xWe=o("ImageGPTConfig"),$We=o(" (ImageGPT model)"),kWe=l(),cm=a("li"),are=a("strong"),SWe=o("layoutlm"),RWe=o(" \u2014 "),Dk=a("a"),PWe=o("LayoutLMConfig"),BWe=o(" (LayoutLM model)"),IWe=l(),fm=a("li"),nre=a("strong"),qWe=o("layoutlmv2"),NWe=o(" \u2014 "),Gk=a("a"),jWe=o("LayoutLMv2Config"),DWe=o(" (LayoutLMv2 model)"),GWe=l(),mm=a("li"),sre=a("strong"),OWe=o("layoutlmv3"),VWe=o(" \u2014 "),Ok=a("a"),XWe=o("LayoutLMv3Config"),zWe=o(" (LayoutLMv3 model)"),WWe=l(),gm=a("li"),lre=a("strong"),QWe=o("led"),HWe=o(" \u2014 "),Vk=a("a"),UWe=o("LEDConfig"),JWe=o(" (LED model)"),YWe=l(),hm=a("li"),ire=a("strong"),KWe=o("longformer"),ZWe=o(" \u2014 "),Xk=a("a"),eQe=o("LongformerConfig"),oQe=o(" (Longformer model)"),rQe=l(),pm=a("li"),dre=a("strong"),tQe=o("luke"),aQe=o(" \u2014 "),zk=a("a"),nQe=o("LukeConfig"),sQe=o(" (LUKE model)"),lQe=l(),um=a("li"),cre=a("strong"),iQe=o("lxmert"),dQe=o(" \u2014 "),Wk=a("a"),cQe=o("LxmertConfig"),fQe=o(" (LXMERT model)"),mQe=l(),_m=a("li"),fre=a("strong"),gQe=o("m2m_100"),hQe=o(" \u2014 "),Qk=a("a"),pQe=o("M2M100Config"),uQe=o(" (M2M100 model)"),_Qe=l(),bm=a("li"),mre=a("strong"),bQe=o("marian"),vQe=o(" \u2014 "),Hk=a("a"),FQe=o("MarianConfig"),TQe=o(" (Marian model)"),MQe=l(),vm=a("li"),gre=a("strong"),EQe=o("maskformer"),CQe=o(" \u2014 "),Uk=a("a"),wQe=o("MaskFormerConfig"),AQe=o(" (MaskFormer model)"),yQe=l(),Fm=a("li"),hre=a("strong"),LQe=o("mbart"),xQe=o(" \u2014 "),Jk=a("a"),$Qe=o("MBartConfig"),kQe=o(" (mBART model)"),SQe=l(),Tm=a("li"),pre=a("strong"),RQe=o("megatron-bert"),PQe=o(" \u2014 "),Yk=a("a"),BQe=o("MegatronBertConfig"),IQe=o(" (MegatronBert model)"),qQe=l(),Mm=a("li"),ure=a("strong"),NQe=o("mobilebert"),jQe=o(" \u2014 "),Kk=a("a"),DQe=o("MobileBertConfig"),GQe=o(" (MobileBERT model)"),OQe=l(),Em=a("li"),_re=a("strong"),VQe=o("mpnet"),XQe=o(" \u2014 "),Zk=a("a"),zQe=o("MPNetConfig"),WQe=o(" (MPNet model)"),QQe=l(),Cm=a("li"),bre=a("strong"),HQe=o("mt5"),UQe=o(" \u2014 "),eS=a("a"),JQe=o("MT5Config"),YQe=o(" (mT5 model)"),KQe=l(),wm=a("li"),vre=a("strong"),ZQe=o("nystromformer"),eHe=o(" \u2014 "),oS=a("a"),oHe=o("NystromformerConfig"),rHe=o(" (Nystromformer model)"),tHe=l(),Am=a("li"),Fre=a("strong"),aHe=o("openai-gpt"),nHe=o(" \u2014 "),rS=a("a"),sHe=o("OpenAIGPTConfig"),lHe=o(" (OpenAI GPT model)"),iHe=l(),ym=a("li"),Tre=a("strong"),dHe=o("opt"),cHe=o(" \u2014 "),tS=a("a"),fHe=o("OPTConfig"),mHe=o(" (OPT model)"),gHe=l(),Lm=a("li"),Mre=a("strong"),hHe=o("pegasus"),pHe=o(" \u2014 "),aS=a("a"),uHe=o("PegasusConfig"),_He=o(" (Pegasus model)"),bHe=l(),xm=a("li"),Ere=a("strong"),vHe=o("perceiver"),FHe=o(" \u2014 "),nS=a("a"),THe=o("PerceiverConfig"),MHe=o(" (Perceiver model)"),EHe=l(),$m=a("li"),Cre=a("strong"),CHe=o("plbart"),wHe=o(" \u2014 "),sS=a("a"),AHe=o("PLBartConfig"),yHe=o(" (PLBart model)"),LHe=l(),km=a("li"),wre=a("strong"),xHe=o("poolformer"),$He=o(" \u2014 "),lS=a("a"),kHe=o("PoolFormerConfig"),SHe=o(" (PoolFormer model)"),RHe=l(),Sm=a("li"),Are=a("strong"),PHe=o("prophetnet"),BHe=o(" \u2014 "),iS=a("a"),IHe=o("ProphetNetConfig"),qHe=o(" (ProphetNet model)"),NHe=l(),Rm=a("li"),yre=a("strong"),jHe=o("qdqbert"),DHe=o(" \u2014 "),dS=a("a"),GHe=o("QDQBertConfig"),OHe=o(" (QDQBert model)"),VHe=l(),Pm=a("li"),Lre=a("strong"),XHe=o("rag"),zHe=o(" \u2014 "),cS=a("a"),WHe=o("RagConfig"),QHe=o(" (RAG model)"),HHe=l(),Bm=a("li"),xre=a("strong"),UHe=o("realm"),JHe=o(" \u2014 "),fS=a("a"),YHe=o("RealmConfig"),KHe=o(" (Realm model)"),ZHe=l(),Im=a("li"),$re=a("strong"),eUe=o("reformer"),oUe=o(" \u2014 "),mS=a("a"),rUe=o("ReformerConfig"),tUe=o(" (Reformer model)"),aUe=l(),qm=a("li"),kre=a("strong"),nUe=o("regnet"),sUe=o(" \u2014 "),gS=a("a"),lUe=o("RegNetConfig"),iUe=o(" (RegNet model)"),dUe=l(),Nm=a("li"),Sre=a("strong"),cUe=o("rembert"),fUe=o(" \u2014 "),hS=a("a"),mUe=o("RemBertConfig"),gUe=o(" (RemBERT model)"),hUe=l(),jm=a("li"),Rre=a("strong"),pUe=o("resnet"),uUe=o(" \u2014 "),pS=a("a"),_Ue=o("ResNetConfig"),bUe=o(" (ResNet model)"),vUe=l(),Dm=a("li"),Pre=a("strong"),FUe=o("retribert"),TUe=o(" \u2014 "),uS=a("a"),MUe=o("RetriBertConfig"),EUe=o(" (RetriBERT model)"),CUe=l(),Gm=a("li"),Bre=a("strong"),wUe=o("roberta"),AUe=o(" \u2014 "),_S=a("a"),yUe=o("RobertaConfig"),LUe=o(" (RoBERTa model)"),xUe=l(),Om=a("li"),Ire=a("strong"),$Ue=o("roformer"),kUe=o(" \u2014 "),bS=a("a"),SUe=o("RoFormerConfig"),RUe=o(" (RoFormer model)"),PUe=l(),Vm=a("li"),qre=a("strong"),BUe=o("segformer"),IUe=o(" \u2014 "),vS=a("a"),qUe=o("SegformerConfig"),NUe=o(" (SegFormer model)"),jUe=l(),Xm=a("li"),Nre=a("strong"),DUe=o("sew"),GUe=o(" \u2014 "),FS=a("a"),OUe=o("SEWConfig"),VUe=o(" (SEW model)"),XUe=l(),zm=a("li"),jre=a("strong"),zUe=o("sew-d"),WUe=o(" \u2014 "),TS=a("a"),QUe=o("SEWDConfig"),HUe=o(" (SEW-D model)"),UUe=l(),Wm=a("li"),Dre=a("strong"),JUe=o("speech-encoder-decoder"),YUe=o(" \u2014 "),MS=a("a"),KUe=o("SpeechEncoderDecoderConfig"),ZUe=o(" (Speech Encoder decoder model)"),eJe=l(),Qm=a("li"),Gre=a("strong"),oJe=o("speech_to_text"),rJe=o(" \u2014 "),ES=a("a"),tJe=o("Speech2TextConfig"),aJe=o(" (Speech2Text model)"),nJe=l(),Hm=a("li"),Ore=a("strong"),sJe=o("speech_to_text_2"),lJe=o(" \u2014 "),CS=a("a"),iJe=o("Speech2Text2Config"),dJe=o(" (Speech2Text2 model)"),cJe=l(),Um=a("li"),Vre=a("strong"),fJe=o("splinter"),mJe=o(" \u2014 "),wS=a("a"),gJe=o("SplinterConfig"),hJe=o(" (Splinter model)"),pJe=l(),Jm=a("li"),Xre=a("strong"),uJe=o("squeezebert"),_Je=o(" \u2014 "),AS=a("a"),bJe=o("SqueezeBertConfig"),vJe=o(" (SqueezeBERT model)"),FJe=l(),Ym=a("li"),zre=a("strong"),TJe=o("swin"),MJe=o(" \u2014 "),yS=a("a"),EJe=o("SwinConfig"),CJe=o(" (Swin model)"),wJe=l(),Km=a("li"),Wre=a("strong"),AJe=o("t5"),yJe=o(" \u2014 "),LS=a("a"),LJe=o("T5Config"),xJe=o(" (T5 model)"),$Je=l(),Zm=a("li"),Qre=a("strong"),kJe=o("tapas"),SJe=o(" \u2014 "),xS=a("a"),RJe=o("TapasConfig"),PJe=o(" (TAPAS model)"),BJe=l(),eg=a("li"),Hre=a("strong"),IJe=o("trajectory_transformer"),qJe=o(" \u2014 "),$S=a("a"),NJe=o("TrajectoryTransformerConfig"),jJe=o(" (Trajectory Transformer model)"),DJe=l(),og=a("li"),Ure=a("strong"),GJe=o("transfo-xl"),OJe=o(" \u2014 "),kS=a("a"),VJe=o("TransfoXLConfig"),XJe=o(" (Transformer-XL model)"),zJe=l(),rg=a("li"),Jre=a("strong"),WJe=o("trocr"),QJe=o(" \u2014 "),SS=a("a"),HJe=o("TrOCRConfig"),UJe=o(" (TrOCR model)"),JJe=l(),tg=a("li"),Yre=a("strong"),YJe=o("unispeech"),KJe=o(" \u2014 "),RS=a("a"),ZJe=o("UniSpeechConfig"),eYe=o(" (UniSpeech model)"),oYe=l(),ag=a("li"),Kre=a("strong"),rYe=o("unispeech-sat"),tYe=o(" \u2014 "),PS=a("a"),aYe=o("UniSpeechSatConfig"),nYe=o(" (UniSpeechSat model)"),sYe=l(),ng=a("li"),Zre=a("strong"),lYe=o("van"),iYe=o(" \u2014 "),BS=a("a"),dYe=o("VanConfig"),cYe=o(" (VAN model)"),fYe=l(),sg=a("li"),ete=a("strong"),mYe=o("vilt"),gYe=o(" \u2014 "),IS=a("a"),hYe=o("ViltConfig"),pYe=o(" (ViLT model)"),uYe=l(),lg=a("li"),ote=a("strong"),_Ye=o("vision-encoder-decoder"),bYe=o(" \u2014 "),qS=a("a"),vYe=o("VisionEncoderDecoderConfig"),FYe=o(" (Vision Encoder decoder model)"),TYe=l(),ig=a("li"),rte=a("strong"),MYe=o("vision-text-dual-encoder"),EYe=o(" \u2014 "),NS=a("a"),CYe=o("VisionTextDualEncoderConfig"),wYe=o(" (VisionTextDualEncoder model)"),AYe=l(),dg=a("li"),tte=a("strong"),yYe=o("visual_bert"),LYe=o(" \u2014 "),jS=a("a"),xYe=o("VisualBertConfig"),$Ye=o(" (VisualBert model)"),kYe=l(),cg=a("li"),ate=a("strong"),SYe=o("vit"),RYe=o(" \u2014 "),DS=a("a"),PYe=o("ViTConfig"),BYe=o(" (ViT model)"),IYe=l(),fg=a("li"),nte=a("strong"),qYe=o("vit_mae"),NYe=o(" \u2014 "),GS=a("a"),jYe=o("ViTMAEConfig"),DYe=o(" (ViTMAE model)"),GYe=l(),mg=a("li"),ste=a("strong"),OYe=o("wav2vec2"),VYe=o(" \u2014 "),OS=a("a"),XYe=o("Wav2Vec2Config"),zYe=o(" (Wav2Vec2 model)"),WYe=l(),gg=a("li"),lte=a("strong"),QYe=o("wav2vec2-conformer"),HYe=o(" \u2014 "),VS=a("a"),UYe=o("Wav2Vec2ConformerConfig"),JYe=o(" (Wav2Vec2-Conformer model)"),YYe=l(),hg=a("li"),ite=a("strong"),KYe=o("wavlm"),ZYe=o(" \u2014 "),XS=a("a"),eKe=o("WavLMConfig"),oKe=o(" (WavLM model)"),rKe=l(),pg=a("li"),dte=a("strong"),tKe=o("xglm"),aKe=o(" \u2014 "),zS=a("a"),nKe=o("XGLMConfig"),sKe=o(" (XGLM model)"),lKe=l(),ug=a("li"),cte=a("strong"),iKe=o("xlm"),dKe=o(" \u2014 "),WS=a("a"),cKe=o("XLMConfig"),fKe=o(" (XLM model)"),mKe=l(),_g=a("li"),fte=a("strong"),gKe=o("xlm-prophetnet"),hKe=o(" \u2014 "),QS=a("a"),pKe=o("XLMProphetNetConfig"),uKe=o(" (XLMProphetNet model)"),_Ke=l(),bg=a("li"),mte=a("strong"),bKe=o("xlm-roberta"),vKe=o(" \u2014 "),HS=a("a"),FKe=o("XLMRobertaConfig"),TKe=o(" (XLM-RoBERTa model)"),MKe=l(),vg=a("li"),gte=a("strong"),EKe=o("xlm-roberta-xl"),CKe=o(" \u2014 "),US=a("a"),wKe=o("XLMRobertaXLConfig"),AKe=o(" (XLM-RoBERTa-XL model)"),yKe=l(),Fg=a("li"),hte=a("strong"),LKe=o("xlnet"),xKe=o(" \u2014 "),JS=a("a"),$Ke=o("XLNetConfig"),kKe=o(" (XLNet model)"),SKe=l(),Tg=a("li"),pte=a("strong"),RKe=o("yolos"),PKe=o(" \u2014 "),YS=a("a"),BKe=o("YolosConfig"),IKe=o(" (YOLOS model)"),qKe=l(),Mg=a("li"),ute=a("strong"),NKe=o("yoso"),jKe=o(" \u2014 "),KS=a("a"),DKe=o("YosoConfig"),GKe=o(" (YOSO model)"),OKe=l(),F(Eg.$$.fragment),VKe=l(),Cg=a("div"),F(Py.$$.fragment),XKe=l(),_te=a("p"),zKe=o("Register a new configuration for this class."),nNe=l(),Ti=a("h2"),wg=a("a"),bte=a("span"),F(By.$$.fragment),WKe=l(),vte=a("span"),QKe=o("AutoTokenizer"),sNe=l(),wo=a("div"),F(Iy.$$.fragment),HKe=l(),qy=a("p"),UKe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=a("a"),JKe=o("AutoTokenizer.from_pretrained()"),YKe=o(" class method."),KKe=l(),Ny=a("p"),ZKe=o("This class cannot be instantiated directly using "),Fte=a("code"),eZe=o("__init__()"),oZe=o(" (throws an error)."),rZe=l(),Cr=a("div"),F(jy.$$.fragment),tZe=l(),Tte=a("p"),aZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nZe=l(),Aa=a("p"),sZe=o("The tokenizer class to instantiate is selected based on the "),Mte=a("code"),lZe=o("model_type"),iZe=o(` property of the config object (either
passed as an argument or loaded from `),Ete=a("code"),dZe=o("pretrained_model_name_or_path"),cZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=a("code"),fZe=o("pretrained_model_name_or_path"),mZe=o(":"),gZe=l(),k=a("ul"),Sn=a("li"),wte=a("strong"),hZe=o("albert"),pZe=o(" \u2014 "),eR=a("a"),uZe=o("AlbertTokenizer"),_Ze=o(" or "),oR=a("a"),bZe=o("AlbertTokenizerFast"),vZe=o(" (ALBERT model)"),FZe=l(),Rn=a("li"),Ate=a("strong"),TZe=o("bart"),MZe=o(" \u2014 "),rR=a("a"),EZe=o("BartTokenizer"),CZe=o(" or "),tR=a("a"),wZe=o("BartTokenizerFast"),AZe=o(" (BART model)"),yZe=l(),Pn=a("li"),yte=a("strong"),LZe=o("barthez"),xZe=o(" \u2014 "),aR=a("a"),$Ze=o("BarthezTokenizer"),kZe=o(" or "),nR=a("a"),SZe=o("BarthezTokenizerFast"),RZe=o(" (BARThez model)"),PZe=l(),Ag=a("li"),Lte=a("strong"),BZe=o("bartpho"),IZe=o(" \u2014 "),sR=a("a"),qZe=o("BartphoTokenizer"),NZe=o(" (BARTpho model)"),jZe=l(),Bn=a("li"),xte=a("strong"),DZe=o("bert"),GZe=o(" \u2014 "),lR=a("a"),OZe=o("BertTokenizer"),VZe=o(" or "),iR=a("a"),XZe=o("BertTokenizerFast"),zZe=o(" (BERT model)"),WZe=l(),yg=a("li"),$te=a("strong"),QZe=o("bert-generation"),HZe=o(" \u2014 "),dR=a("a"),UZe=o("BertGenerationTokenizer"),JZe=o(" (Bert Generation model)"),YZe=l(),Lg=a("li"),kte=a("strong"),KZe=o("bert-japanese"),ZZe=o(" \u2014 "),cR=a("a"),eeo=o("BertJapaneseTokenizer"),oeo=o(" (BertJapanese model)"),reo=l(),xg=a("li"),Ste=a("strong"),teo=o("bertweet"),aeo=o(" \u2014 "),fR=a("a"),neo=o("BertweetTokenizer"),seo=o(" (Bertweet model)"),leo=l(),In=a("li"),Rte=a("strong"),ieo=o("big_bird"),deo=o(" \u2014 "),mR=a("a"),ceo=o("BigBirdTokenizer"),feo=o(" or "),gR=a("a"),meo=o("BigBirdTokenizerFast"),geo=o(" (BigBird model)"),heo=l(),qn=a("li"),Pte=a("strong"),peo=o("bigbird_pegasus"),ueo=o(" \u2014 "),hR=a("a"),_eo=o("PegasusTokenizer"),beo=o(" or "),pR=a("a"),veo=o("PegasusTokenizerFast"),Feo=o(" (BigBirdPegasus model)"),Teo=l(),Nn=a("li"),Bte=a("strong"),Meo=o("blenderbot"),Eeo=o(" \u2014 "),uR=a("a"),Ceo=o("BlenderbotTokenizer"),weo=o(" or "),_R=a("a"),Aeo=o("BlenderbotTokenizerFast"),yeo=o(" (Blenderbot model)"),Leo=l(),$g=a("li"),Ite=a("strong"),xeo=o("blenderbot-small"),$eo=o(" \u2014 "),bR=a("a"),keo=o("BlenderbotSmallTokenizer"),Seo=o(" (BlenderbotSmall model)"),Reo=l(),kg=a("li"),qte=a("strong"),Peo=o("byt5"),Beo=o(" \u2014 "),vR=a("a"),Ieo=o("ByT5Tokenizer"),qeo=o(" (ByT5 model)"),Neo=l(),jn=a("li"),Nte=a("strong"),jeo=o("camembert"),Deo=o(" \u2014 "),FR=a("a"),Geo=o("CamembertTokenizer"),Oeo=o(" or "),TR=a("a"),Veo=o("CamembertTokenizerFast"),Xeo=o(" (CamemBERT model)"),zeo=l(),Sg=a("li"),jte=a("strong"),Weo=o("canine"),Qeo=o(" \u2014 "),MR=a("a"),Heo=o("CanineTokenizer"),Ueo=o(" (Canine model)"),Jeo=l(),Dn=a("li"),Dte=a("strong"),Yeo=o("clip"),Keo=o(" \u2014 "),ER=a("a"),Zeo=o("CLIPTokenizer"),eoo=o(" or "),CR=a("a"),ooo=o("CLIPTokenizerFast"),roo=o(" (CLIP model)"),too=l(),Gn=a("li"),Gte=a("strong"),aoo=o("convbert"),noo=o(" \u2014 "),wR=a("a"),soo=o("ConvBertTokenizer"),loo=o(" or "),AR=a("a"),ioo=o("ConvBertTokenizerFast"),doo=o(" (ConvBERT model)"),coo=l(),On=a("li"),Ote=a("strong"),foo=o("cpm"),moo=o(" \u2014 "),yR=a("a"),goo=o("CpmTokenizer"),hoo=o(" or "),LR=a("a"),poo=o("CpmTokenizerFast"),uoo=o(" (CPM model)"),_oo=l(),Rg=a("li"),Vte=a("strong"),boo=o("ctrl"),voo=o(" \u2014 "),xR=a("a"),Foo=o("CTRLTokenizer"),Too=o(" (CTRL model)"),Moo=l(),Vn=a("li"),Xte=a("strong"),Eoo=o("data2vec-text"),Coo=o(" \u2014 "),$R=a("a"),woo=o("RobertaTokenizer"),Aoo=o(" or "),kR=a("a"),yoo=o("RobertaTokenizerFast"),Loo=o(" (Data2VecText model)"),xoo=l(),Xn=a("li"),zte=a("strong"),$oo=o("deberta"),koo=o(" \u2014 "),SR=a("a"),Soo=o("DebertaTokenizer"),Roo=o(" or "),RR=a("a"),Poo=o("DebertaTokenizerFast"),Boo=o(" (DeBERTa model)"),Ioo=l(),zn=a("li"),Wte=a("strong"),qoo=o("deberta-v2"),Noo=o(" \u2014 "),PR=a("a"),joo=o("DebertaV2Tokenizer"),Doo=o(" or "),BR=a("a"),Goo=o("DebertaV2TokenizerFast"),Ooo=o(" (DeBERTa-v2 model)"),Voo=l(),Wn=a("li"),Qte=a("strong"),Xoo=o("distilbert"),zoo=o(" \u2014 "),IR=a("a"),Woo=o("DistilBertTokenizer"),Qoo=o(" or "),qR=a("a"),Hoo=o("DistilBertTokenizerFast"),Uoo=o(" (DistilBERT model)"),Joo=l(),Qn=a("li"),Hte=a("strong"),Yoo=o("dpr"),Koo=o(" \u2014 "),NR=a("a"),Zoo=o("DPRQuestionEncoderTokenizer"),ero=o(" or "),jR=a("a"),oro=o("DPRQuestionEncoderTokenizerFast"),rro=o(" (DPR model)"),tro=l(),Hn=a("li"),Ute=a("strong"),aro=o("electra"),nro=o(" \u2014 "),DR=a("a"),sro=o("ElectraTokenizer"),lro=o(" or "),GR=a("a"),iro=o("ElectraTokenizerFast"),dro=o(" (ELECTRA model)"),cro=l(),Pg=a("li"),Jte=a("strong"),fro=o("flaubert"),mro=o(" \u2014 "),OR=a("a"),gro=o("FlaubertTokenizer"),hro=o(" (FlauBERT model)"),pro=l(),Un=a("li"),Yte=a("strong"),uro=o("fnet"),_ro=o(" \u2014 "),VR=a("a"),bro=o("FNetTokenizer"),vro=o(" or "),XR=a("a"),Fro=o("FNetTokenizerFast"),Tro=o(" (FNet model)"),Mro=l(),Bg=a("li"),Kte=a("strong"),Ero=o("fsmt"),Cro=o(" \u2014 "),zR=a("a"),wro=o("FSMTTokenizer"),Aro=o(" (FairSeq Machine-Translation model)"),yro=l(),Jn=a("li"),Zte=a("strong"),Lro=o("funnel"),xro=o(" \u2014 "),WR=a("a"),$ro=o("FunnelTokenizer"),kro=o(" or "),QR=a("a"),Sro=o("FunnelTokenizerFast"),Rro=o(" (Funnel Transformer model)"),Pro=l(),Yn=a("li"),eae=a("strong"),Bro=o("gpt2"),Iro=o(" \u2014 "),HR=a("a"),qro=o("GPT2Tokenizer"),Nro=o(" or "),UR=a("a"),jro=o("GPT2TokenizerFast"),Dro=o(" (OpenAI GPT-2 model)"),Gro=l(),Kn=a("li"),oae=a("strong"),Oro=o("gpt_neo"),Vro=o(" \u2014 "),JR=a("a"),Xro=o("GPT2Tokenizer"),zro=o(" or "),YR=a("a"),Wro=o("GPT2TokenizerFast"),Qro=o(" (GPT Neo model)"),Hro=l(),Ig=a("li"),rae=a("strong"),Uro=o("gpt_neox"),Jro=o(" \u2014 "),KR=a("a"),Yro=o("GPTNeoXTokenizerFast"),Kro=o(" (GPT NeoX model)"),Zro=l(),Zn=a("li"),tae=a("strong"),eto=o("gptj"),oto=o(" \u2014 "),ZR=a("a"),rto=o("GPT2Tokenizer"),tto=o(" or "),eP=a("a"),ato=o("GPT2TokenizerFast"),nto=o(" (GPT-J model)"),sto=l(),es=a("li"),aae=a("strong"),lto=o("herbert"),ito=o(" \u2014 "),oP=a("a"),dto=o("HerbertTokenizer"),cto=o(" or "),rP=a("a"),fto=o("HerbertTokenizerFast"),mto=o(" (HerBERT model)"),gto=l(),qg=a("li"),nae=a("strong"),hto=o("hubert"),pto=o(" \u2014 "),tP=a("a"),uto=o("Wav2Vec2CTCTokenizer"),_to=o(" (Hubert model)"),bto=l(),os=a("li"),sae=a("strong"),vto=o("ibert"),Fto=o(" \u2014 "),aP=a("a"),Tto=o("RobertaTokenizer"),Mto=o(" or "),nP=a("a"),Eto=o("RobertaTokenizerFast"),Cto=o(" (I-BERT model)"),wto=l(),rs=a("li"),lae=a("strong"),Ato=o("layoutlm"),yto=o(" \u2014 "),sP=a("a"),Lto=o("LayoutLMTokenizer"),xto=o(" or "),lP=a("a"),$to=o("LayoutLMTokenizerFast"),kto=o(" (LayoutLM model)"),Sto=l(),ts=a("li"),iae=a("strong"),Rto=o("layoutlmv2"),Pto=o(" \u2014 "),iP=a("a"),Bto=o("LayoutLMv2Tokenizer"),Ito=o(" or "),dP=a("a"),qto=o("LayoutLMv2TokenizerFast"),Nto=o(" (LayoutLMv2 model)"),jto=l(),as=a("li"),dae=a("strong"),Dto=o("layoutlmv3"),Gto=o(" \u2014 "),cP=a("a"),Oto=o("LayoutLMv3Tokenizer"),Vto=o(" or "),fP=a("a"),Xto=o("LayoutLMv3TokenizerFast"),zto=o(" (LayoutLMv3 model)"),Wto=l(),ns=a("li"),cae=a("strong"),Qto=o("layoutxlm"),Hto=o(" \u2014 "),mP=a("a"),Uto=o("LayoutXLMTokenizer"),Jto=o(" or "),gP=a("a"),Yto=o("LayoutXLMTokenizerFast"),Kto=o(" (LayoutXLM model)"),Zto=l(),ss=a("li"),fae=a("strong"),eao=o("led"),oao=o(" \u2014 "),hP=a("a"),rao=o("LEDTokenizer"),tao=o(" or "),pP=a("a"),aao=o("LEDTokenizerFast"),nao=o(" (LED model)"),sao=l(),ls=a("li"),mae=a("strong"),lao=o("longformer"),iao=o(" \u2014 "),uP=a("a"),dao=o("LongformerTokenizer"),cao=o(" or "),_P=a("a"),fao=o("LongformerTokenizerFast"),mao=o(" (Longformer model)"),gao=l(),Ng=a("li"),gae=a("strong"),hao=o("luke"),pao=o(" \u2014 "),bP=a("a"),uao=o("LukeTokenizer"),_ao=o(" (LUKE model)"),bao=l(),is=a("li"),hae=a("strong"),vao=o("lxmert"),Fao=o(" \u2014 "),vP=a("a"),Tao=o("LxmertTokenizer"),Mao=o(" or "),FP=a("a"),Eao=o("LxmertTokenizerFast"),Cao=o(" (LXMERT model)"),wao=l(),jg=a("li"),pae=a("strong"),Aao=o("m2m_100"),yao=o(" \u2014 "),TP=a("a"),Lao=o("M2M100Tokenizer"),xao=o(" (M2M100 model)"),$ao=l(),Dg=a("li"),uae=a("strong"),kao=o("marian"),Sao=o(" \u2014 "),MP=a("a"),Rao=o("MarianTokenizer"),Pao=o(" (Marian model)"),Bao=l(),ds=a("li"),_ae=a("strong"),Iao=o("mbart"),qao=o(" \u2014 "),EP=a("a"),Nao=o("MBartTokenizer"),jao=o(" or "),CP=a("a"),Dao=o("MBartTokenizerFast"),Gao=o(" (mBART model)"),Oao=l(),cs=a("li"),bae=a("strong"),Vao=o("mbart50"),Xao=o(" \u2014 "),wP=a("a"),zao=o("MBart50Tokenizer"),Wao=o(" or "),AP=a("a"),Qao=o("MBart50TokenizerFast"),Hao=o(" (mBART-50 model)"),Uao=l(),fs=a("li"),vae=a("strong"),Jao=o("megatron-bert"),Yao=o(" \u2014 "),yP=a("a"),Kao=o("BertTokenizer"),Zao=o(" or "),LP=a("a"),eno=o("BertTokenizerFast"),ono=o(" (MegatronBert model)"),rno=l(),Gg=a("li"),Fae=a("strong"),tno=o("mluke"),ano=o(" \u2014 "),xP=a("a"),nno=o("MLukeTokenizer"),sno=o(" (mLUKE model)"),lno=l(),ms=a("li"),Tae=a("strong"),ino=o("mobilebert"),dno=o(" \u2014 "),$P=a("a"),cno=o("MobileBertTokenizer"),fno=o(" or "),kP=a("a"),mno=o("MobileBertTokenizerFast"),gno=o(" (MobileBERT model)"),hno=l(),gs=a("li"),Mae=a("strong"),pno=o("mpnet"),uno=o(" \u2014 "),SP=a("a"),_no=o("MPNetTokenizer"),bno=o(" or "),RP=a("a"),vno=o("MPNetTokenizerFast"),Fno=o(" (MPNet model)"),Tno=l(),hs=a("li"),Eae=a("strong"),Mno=o("mt5"),Eno=o(" \u2014 "),PP=a("a"),Cno=o("MT5Tokenizer"),wno=o(" or "),BP=a("a"),Ano=o("MT5TokenizerFast"),yno=o(" (mT5 model)"),Lno=l(),ps=a("li"),Cae=a("strong"),xno=o("nystromformer"),$no=o(" \u2014 "),IP=a("a"),kno=o("AlbertTokenizer"),Sno=o(" or "),qP=a("a"),Rno=o("AlbertTokenizerFast"),Pno=o(" (Nystromformer model)"),Bno=l(),us=a("li"),wae=a("strong"),Ino=o("openai-gpt"),qno=o(" \u2014 "),NP=a("a"),Nno=o("OpenAIGPTTokenizer"),jno=o(" or "),jP=a("a"),Dno=o("OpenAIGPTTokenizerFast"),Gno=o(" (OpenAI GPT model)"),Ono=l(),Og=a("li"),Aae=a("strong"),Vno=o("opt"),Xno=o(" \u2014 "),DP=a("a"),zno=o("GPT2Tokenizer"),Wno=o(" (OPT model)"),Qno=l(),_s=a("li"),yae=a("strong"),Hno=o("pegasus"),Uno=o(" \u2014 "),GP=a("a"),Jno=o("PegasusTokenizer"),Yno=o(" or "),OP=a("a"),Kno=o("PegasusTokenizerFast"),Zno=o(" (Pegasus model)"),eso=l(),Vg=a("li"),Lae=a("strong"),oso=o("perceiver"),rso=o(" \u2014 "),VP=a("a"),tso=o("PerceiverTokenizer"),aso=o(" (Perceiver model)"),nso=l(),Xg=a("li"),xae=a("strong"),sso=o("phobert"),lso=o(" \u2014 "),XP=a("a"),iso=o("PhobertTokenizer"),dso=o(" (PhoBERT model)"),cso=l(),zg=a("li"),$ae=a("strong"),fso=o("plbart"),mso=o(" \u2014 "),zP=a("a"),gso=o("PLBartTokenizer"),hso=o(" (PLBart model)"),pso=l(),Wg=a("li"),kae=a("strong"),uso=o("prophetnet"),_so=o(" \u2014 "),WP=a("a"),bso=o("ProphetNetTokenizer"),vso=o(" (ProphetNet model)"),Fso=l(),bs=a("li"),Sae=a("strong"),Tso=o("qdqbert"),Mso=o(" \u2014 "),QP=a("a"),Eso=o("BertTokenizer"),Cso=o(" or "),HP=a("a"),wso=o("BertTokenizerFast"),Aso=o(" (QDQBert model)"),yso=l(),Qg=a("li"),Rae=a("strong"),Lso=o("rag"),xso=o(" \u2014 "),UP=a("a"),$so=o("RagTokenizer"),kso=o(" (RAG model)"),Sso=l(),vs=a("li"),Pae=a("strong"),Rso=o("realm"),Pso=o(" \u2014 "),JP=a("a"),Bso=o("RealmTokenizer"),Iso=o(" or "),YP=a("a"),qso=o("RealmTokenizerFast"),Nso=o(" (Realm model)"),jso=l(),Fs=a("li"),Bae=a("strong"),Dso=o("reformer"),Gso=o(" \u2014 "),KP=a("a"),Oso=o("ReformerTokenizer"),Vso=o(" or "),ZP=a("a"),Xso=o("ReformerTokenizerFast"),zso=o(" (Reformer model)"),Wso=l(),Ts=a("li"),Iae=a("strong"),Qso=o("rembert"),Hso=o(" \u2014 "),eB=a("a"),Uso=o("RemBertTokenizer"),Jso=o(" or "),oB=a("a"),Yso=o("RemBertTokenizerFast"),Kso=o(" (RemBERT model)"),Zso=l(),Ms=a("li"),qae=a("strong"),elo=o("retribert"),olo=o(" \u2014 "),rB=a("a"),rlo=o("RetriBertTokenizer"),tlo=o(" or "),tB=a("a"),alo=o("RetriBertTokenizerFast"),nlo=o(" (RetriBERT model)"),slo=l(),Es=a("li"),Nae=a("strong"),llo=o("roberta"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("RobertaTokenizer"),clo=o(" or "),nB=a("a"),flo=o("RobertaTokenizerFast"),mlo=o(" (RoBERTa model)"),glo=l(),Cs=a("li"),jae=a("strong"),hlo=o("roformer"),plo=o(" \u2014 "),sB=a("a"),ulo=o("RoFormerTokenizer"),_lo=o(" or "),lB=a("a"),blo=o("RoFormerTokenizerFast"),vlo=o(" (RoFormer model)"),Flo=l(),Hg=a("li"),Dae=a("strong"),Tlo=o("speech_to_text"),Mlo=o(" \u2014 "),iB=a("a"),Elo=o("Speech2TextTokenizer"),Clo=o(" (Speech2Text model)"),wlo=l(),Ug=a("li"),Gae=a("strong"),Alo=o("speech_to_text_2"),ylo=o(" \u2014 "),dB=a("a"),Llo=o("Speech2Text2Tokenizer"),xlo=o(" (Speech2Text2 model)"),$lo=l(),ws=a("li"),Oae=a("strong"),klo=o("splinter"),Slo=o(" \u2014 "),cB=a("a"),Rlo=o("SplinterTokenizer"),Plo=o(" or "),fB=a("a"),Blo=o("SplinterTokenizerFast"),Ilo=o(" (Splinter model)"),qlo=l(),As=a("li"),Vae=a("strong"),Nlo=o("squeezebert"),jlo=o(" \u2014 "),mB=a("a"),Dlo=o("SqueezeBertTokenizer"),Glo=o(" or "),gB=a("a"),Olo=o("SqueezeBertTokenizerFast"),Vlo=o(" (SqueezeBERT model)"),Xlo=l(),ys=a("li"),Xae=a("strong"),zlo=o("t5"),Wlo=o(" \u2014 "),hB=a("a"),Qlo=o("T5Tokenizer"),Hlo=o(" or "),pB=a("a"),Ulo=o("T5TokenizerFast"),Jlo=o(" (T5 model)"),Ylo=l(),Jg=a("li"),zae=a("strong"),Klo=o("tapas"),Zlo=o(" \u2014 "),uB=a("a"),eio=o("TapasTokenizer"),oio=o(" (TAPAS model)"),rio=l(),Yg=a("li"),Wae=a("strong"),tio=o("tapex"),aio=o(" \u2014 "),_B=a("a"),nio=o("TapexTokenizer"),sio=o(" (TAPEX model)"),lio=l(),Kg=a("li"),Qae=a("strong"),iio=o("transfo-xl"),dio=o(" \u2014 "),bB=a("a"),cio=o("TransfoXLTokenizer"),fio=o(" (Transformer-XL model)"),mio=l(),Ls=a("li"),Hae=a("strong"),gio=o("visual_bert"),hio=o(" \u2014 "),vB=a("a"),pio=o("BertTokenizer"),uio=o(" or "),FB=a("a"),_io=o("BertTokenizerFast"),bio=o(" (VisualBert model)"),vio=l(),Zg=a("li"),Uae=a("strong"),Fio=o("wav2vec2"),Tio=o(" \u2014 "),TB=a("a"),Mio=o("Wav2Vec2CTCTokenizer"),Eio=o(" (Wav2Vec2 model)"),Cio=l(),eh=a("li"),Jae=a("strong"),wio=o("wav2vec2-conformer"),Aio=o(" \u2014 "),MB=a("a"),yio=o("Wav2Vec2CTCTokenizer"),Lio=o(" (Wav2Vec2-Conformer model)"),xio=l(),oh=a("li"),Yae=a("strong"),$io=o("wav2vec2_phoneme"),kio=o(" \u2014 "),EB=a("a"),Sio=o("Wav2Vec2PhonemeCTCTokenizer"),Rio=o(" (Wav2Vec2Phoneme model)"),Pio=l(),xs=a("li"),Kae=a("strong"),Bio=o("xglm"),Iio=o(" \u2014 "),CB=a("a"),qio=o("XGLMTokenizer"),Nio=o(" or "),wB=a("a"),jio=o("XGLMTokenizerFast"),Dio=o(" (XGLM model)"),Gio=l(),rh=a("li"),Zae=a("strong"),Oio=o("xlm"),Vio=o(" \u2014 "),AB=a("a"),Xio=o("XLMTokenizer"),zio=o(" (XLM model)"),Wio=l(),th=a("li"),ene=a("strong"),Qio=o("xlm-prophetnet"),Hio=o(" \u2014 "),yB=a("a"),Uio=o("XLMProphetNetTokenizer"),Jio=o(" (XLMProphetNet model)"),Yio=l(),$s=a("li"),one=a("strong"),Kio=o("xlm-roberta"),Zio=o(" \u2014 "),LB=a("a"),edo=o("XLMRobertaTokenizer"),odo=o(" or "),xB=a("a"),rdo=o("XLMRobertaTokenizerFast"),tdo=o(" (XLM-RoBERTa model)"),ado=l(),ks=a("li"),rne=a("strong"),ndo=o("xlm-roberta-xl"),sdo=o(" \u2014 "),$B=a("a"),ldo=o("RobertaTokenizer"),ido=o(" or "),kB=a("a"),ddo=o("RobertaTokenizerFast"),cdo=o(" (XLM-RoBERTa-XL model)"),fdo=l(),Ss=a("li"),tne=a("strong"),mdo=o("xlnet"),gdo=o(" \u2014 "),SB=a("a"),hdo=o("XLNetTokenizer"),pdo=o(" or "),RB=a("a"),udo=o("XLNetTokenizerFast"),_do=o(" (XLNet model)"),bdo=l(),Rs=a("li"),ane=a("strong"),vdo=o("yoso"),Fdo=o(" \u2014 "),PB=a("a"),Tdo=o("AlbertTokenizer"),Mdo=o(" or "),BB=a("a"),Edo=o("AlbertTokenizerFast"),Cdo=o(" (YOSO model)"),wdo=l(),F(ah.$$.fragment),Ado=l(),nh=a("div"),F(Dy.$$.fragment),ydo=l(),nne=a("p"),Ldo=o("Register a new tokenizer in this mapping."),lNe=l(),Mi=a("h2"),sh=a("a"),sne=a("span"),F(Gy.$$.fragment),xdo=l(),lne=a("span"),$do=o("AutoFeatureExtractor"),iNe=l(),Ao=a("div"),F(Oy.$$.fragment),kdo=l(),Vy=a("p"),Sdo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=a("a"),Rdo=o("AutoFeatureExtractor.from_pretrained()"),Pdo=o(" class method."),Bdo=l(),Xy=a("p"),Ido=o("This class cannot be instantiated directly using "),ine=a("code"),qdo=o("__init__()"),Ndo=o(" (throws an error)."),jdo=l(),He=a("div"),F(zy.$$.fragment),Ddo=l(),dne=a("p"),Gdo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Odo=l(),ya=a("p"),Vdo=o("The feature extractor class to instantiate is selected based on the "),cne=a("code"),Xdo=o("model_type"),zdo=o(` property of the config object
(either passed as an argument or loaded from `),fne=a("code"),Wdo=o("pretrained_model_name_or_path"),Qdo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mne=a("code"),Hdo=o("pretrained_model_name_or_path"),Udo=o(":"),Jdo=l(),Y=a("ul"),lh=a("li"),gne=a("strong"),Ydo=o("beit"),Kdo=o(" \u2014 "),qB=a("a"),Zdo=o("BeitFeatureExtractor"),eco=o(" (BEiT model)"),oco=l(),ih=a("li"),hne=a("strong"),rco=o("clip"),tco=o(" \u2014 "),NB=a("a"),aco=o("CLIPFeatureExtractor"),nco=o(" (CLIP model)"),sco=l(),dh=a("li"),pne=a("strong"),lco=o("convnext"),ico=o(" \u2014 "),jB=a("a"),dco=o("ConvNextFeatureExtractor"),cco=o(" (ConvNext model)"),fco=l(),ch=a("li"),une=a("strong"),mco=o("cvt"),gco=o(" \u2014 "),DB=a("a"),hco=o("ConvNextFeatureExtractor"),pco=o(" (CvT model)"),uco=l(),fh=a("li"),_ne=a("strong"),_co=o("data2vec-audio"),bco=o(" \u2014 "),GB=a("a"),vco=o("Wav2Vec2FeatureExtractor"),Fco=o(" (Data2VecAudio model)"),Tco=l(),mh=a("li"),bne=a("strong"),Mco=o("data2vec-vision"),Eco=o(" \u2014 "),OB=a("a"),Cco=o("BeitFeatureExtractor"),wco=o(" (Data2VecVision model)"),Aco=l(),gh=a("li"),vne=a("strong"),yco=o("deit"),Lco=o(" \u2014 "),VB=a("a"),xco=o("DeiTFeatureExtractor"),$co=o(" (DeiT model)"),kco=l(),hh=a("li"),Fne=a("strong"),Sco=o("detr"),Rco=o(" \u2014 "),XB=a("a"),Pco=o("DetrFeatureExtractor"),Bco=o(" (DETR model)"),Ico=l(),ph=a("li"),Tne=a("strong"),qco=o("dpt"),Nco=o(" \u2014 "),zB=a("a"),jco=o("DPTFeatureExtractor"),Dco=o(" (DPT model)"),Gco=l(),uh=a("li"),Mne=a("strong"),Oco=o("flava"),Vco=o(" \u2014 "),WB=a("a"),Xco=o("FlavaFeatureExtractor"),zco=o(" (Flava model)"),Wco=l(),_h=a("li"),Ene=a("strong"),Qco=o("glpn"),Hco=o(" \u2014 "),QB=a("a"),Uco=o("GLPNFeatureExtractor"),Jco=o(" (GLPN model)"),Yco=l(),bh=a("li"),Cne=a("strong"),Kco=o("hubert"),Zco=o(" \u2014 "),HB=a("a"),efo=o("Wav2Vec2FeatureExtractor"),ofo=o(" (Hubert model)"),rfo=l(),vh=a("li"),wne=a("strong"),tfo=o("imagegpt"),afo=o(" \u2014 "),UB=a("a"),nfo=o("ImageGPTFeatureExtractor"),sfo=o(" (ImageGPT model)"),lfo=l(),Fh=a("li"),Ane=a("strong"),ifo=o("layoutlmv2"),dfo=o(" \u2014 "),JB=a("a"),cfo=o("LayoutLMv2FeatureExtractor"),ffo=o(" (LayoutLMv2 model)"),mfo=l(),Th=a("li"),yne=a("strong"),gfo=o("layoutlmv3"),hfo=o(" \u2014 "),YB=a("a"),pfo=o("LayoutLMv3FeatureExtractor"),ufo=o(" (LayoutLMv3 model)"),_fo=l(),Mh=a("li"),Lne=a("strong"),bfo=o("maskformer"),vfo=o(" \u2014 "),KB=a("a"),Ffo=o("MaskFormerFeatureExtractor"),Tfo=o(" (MaskFormer model)"),Mfo=l(),Eh=a("li"),xne=a("strong"),Efo=o("perceiver"),Cfo=o(" \u2014 "),ZB=a("a"),wfo=o("PerceiverFeatureExtractor"),Afo=o(" (Perceiver model)"),yfo=l(),Ch=a("li"),$ne=a("strong"),Lfo=o("poolformer"),xfo=o(" \u2014 "),eI=a("a"),$fo=o("PoolFormerFeatureExtractor"),kfo=o(" (PoolFormer model)"),Sfo=l(),wh=a("li"),kne=a("strong"),Rfo=o("regnet"),Pfo=o(" \u2014 "),oI=a("a"),Bfo=o("ConvNextFeatureExtractor"),Ifo=o(" (RegNet model)"),qfo=l(),Ah=a("li"),Sne=a("strong"),Nfo=o("resnet"),jfo=o(" \u2014 "),rI=a("a"),Dfo=o("ConvNextFeatureExtractor"),Gfo=o(" (ResNet model)"),Ofo=l(),yh=a("li"),Rne=a("strong"),Vfo=o("segformer"),Xfo=o(" \u2014 "),tI=a("a"),zfo=o("SegformerFeatureExtractor"),Wfo=o(" (SegFormer model)"),Qfo=l(),Lh=a("li"),Pne=a("strong"),Hfo=o("speech_to_text"),Ufo=o(" \u2014 "),aI=a("a"),Jfo=o("Speech2TextFeatureExtractor"),Yfo=o(" (Speech2Text model)"),Kfo=l(),xh=a("li"),Bne=a("strong"),Zfo=o("swin"),emo=o(" \u2014 "),nI=a("a"),omo=o("ViTFeatureExtractor"),rmo=o(" (Swin model)"),tmo=l(),$h=a("li"),Ine=a("strong"),amo=o("van"),nmo=o(" \u2014 "),sI=a("a"),smo=o("ConvNextFeatureExtractor"),lmo=o(" (VAN model)"),imo=l(),kh=a("li"),qne=a("strong"),dmo=o("vit"),cmo=o(" \u2014 "),lI=a("a"),fmo=o("ViTFeatureExtractor"),mmo=o(" (ViT model)"),gmo=l(),Sh=a("li"),Nne=a("strong"),hmo=o("vit_mae"),pmo=o(" \u2014 "),iI=a("a"),umo=o("ViTFeatureExtractor"),_mo=o(" (ViTMAE model)"),bmo=l(),Rh=a("li"),jne=a("strong"),vmo=o("wav2vec2"),Fmo=o(" \u2014 "),dI=a("a"),Tmo=o("Wav2Vec2FeatureExtractor"),Mmo=o(" (Wav2Vec2 model)"),Emo=l(),Ph=a("li"),Dne=a("strong"),Cmo=o("wav2vec2-conformer"),wmo=o(" \u2014 "),cI=a("a"),Amo=o("Wav2Vec2FeatureExtractor"),ymo=o(" (Wav2Vec2-Conformer model)"),Lmo=l(),Bh=a("li"),Gne=a("strong"),xmo=o("yolos"),$mo=o(" \u2014 "),fI=a("a"),kmo=o("YolosFeatureExtractor"),Smo=o(" (YOLOS model)"),Rmo=l(),F(Ih.$$.fragment),Pmo=l(),F(qh.$$.fragment),Bmo=l(),Nh=a("div"),F(Wy.$$.fragment),Imo=l(),One=a("p"),qmo=o("Register a new feature extractor for this class."),dNe=l(),Ei=a("h2"),jh=a("a"),Vne=a("span"),F(Qy.$$.fragment),Nmo=l(),Xne=a("span"),jmo=o("AutoProcessor"),cNe=l(),yo=a("div"),F(Hy.$$.fragment),Dmo=l(),Uy=a("p"),Gmo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mI=a("a"),Omo=o("AutoProcessor.from_pretrained()"),Vmo=o(" class method."),Xmo=l(),Jy=a("p"),zmo=o("This class cannot be instantiated directly using "),zne=a("code"),Wmo=o("__init__()"),Qmo=o(" (throws an error)."),Hmo=l(),Ue=a("div"),F(Yy.$$.fragment),Umo=l(),Wne=a("p"),Jmo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ymo=l(),Ci=a("p"),Kmo=o("The processor class to instantiate is selected based on the "),Qne=a("code"),Zmo=o("model_type"),ego=o(` property of the config object (either
passed as an argument or loaded from `),Hne=a("code"),ogo=o("pretrained_model_name_or_path"),rgo=o(" if possible):"),tgo=l(),he=a("ul"),Dh=a("li"),Une=a("strong"),ago=o("clip"),ngo=o(" \u2014 "),gI=a("a"),sgo=o("CLIPProcessor"),lgo=o(" (CLIP model)"),igo=l(),Gh=a("li"),Jne=a("strong"),dgo=o("flava"),cgo=o(" \u2014 "),Yne=a("code"),fgo=o("FLAVAProcessor"),mgo=o(" (Flava model)"),ggo=l(),Oh=a("li"),Kne=a("strong"),hgo=o("layoutlmv2"),pgo=o(" \u2014 "),hI=a("a"),ugo=o("LayoutLMv2Processor"),_go=o(" (LayoutLMv2 model)"),bgo=l(),Vh=a("li"),Zne=a("strong"),vgo=o("layoutlmv3"),Fgo=o(" \u2014 "),pI=a("a"),Tgo=o("LayoutLMv3Processor"),Mgo=o(" (LayoutLMv3 model)"),Ego=l(),Xh=a("li"),ese=a("strong"),Cgo=o("layoutxlm"),wgo=o(" \u2014 "),uI=a("a"),Ago=o("LayoutXLMProcessor"),ygo=o(" (LayoutXLM model)"),Lgo=l(),zh=a("li"),ose=a("strong"),xgo=o("sew"),$go=o(" \u2014 "),_I=a("a"),kgo=o("Wav2Vec2Processor"),Sgo=o(" (SEW model)"),Rgo=l(),Wh=a("li"),rse=a("strong"),Pgo=o("sew-d"),Bgo=o(" \u2014 "),bI=a("a"),Igo=o("Wav2Vec2Processor"),qgo=o(" (SEW-D model)"),Ngo=l(),Qh=a("li"),tse=a("strong"),jgo=o("speech_to_text"),Dgo=o(" \u2014 "),vI=a("a"),Ggo=o("Speech2TextProcessor"),Ogo=o(" (Speech2Text model)"),Vgo=l(),Hh=a("li"),ase=a("strong"),Xgo=o("speech_to_text_2"),zgo=o(" \u2014 "),FI=a("a"),Wgo=o("Speech2Text2Processor"),Qgo=o(" (Speech2Text2 model)"),Hgo=l(),Uh=a("li"),nse=a("strong"),Ugo=o("trocr"),Jgo=o(" \u2014 "),TI=a("a"),Ygo=o("TrOCRProcessor"),Kgo=o(" (TrOCR model)"),Zgo=l(),Jh=a("li"),sse=a("strong"),eho=o("unispeech"),oho=o(" \u2014 "),MI=a("a"),rho=o("Wav2Vec2Processor"),tho=o(" (UniSpeech model)"),aho=l(),Yh=a("li"),lse=a("strong"),nho=o("unispeech-sat"),sho=o(" \u2014 "),EI=a("a"),lho=o("Wav2Vec2Processor"),iho=o(" (UniSpeechSat model)"),dho=l(),Kh=a("li"),ise=a("strong"),cho=o("vilt"),fho=o(" \u2014 "),CI=a("a"),mho=o("ViltProcessor"),gho=o(" (ViLT model)"),hho=l(),Zh=a("li"),dse=a("strong"),pho=o("vision-text-dual-encoder"),uho=o(" \u2014 "),wI=a("a"),_ho=o("VisionTextDualEncoderProcessor"),bho=o(" (VisionTextDualEncoder model)"),vho=l(),ep=a("li"),cse=a("strong"),Fho=o("wav2vec2"),Tho=o(" \u2014 "),AI=a("a"),Mho=o("Wav2Vec2Processor"),Eho=o(" (Wav2Vec2 model)"),Cho=l(),op=a("li"),fse=a("strong"),who=o("wav2vec2-conformer"),Aho=o(" \u2014 "),yI=a("a"),yho=o("Wav2Vec2Processor"),Lho=o(" (Wav2Vec2-Conformer model)"),xho=l(),rp=a("li"),mse=a("strong"),$ho=o("wavlm"),kho=o(" \u2014 "),LI=a("a"),Sho=o("Wav2Vec2Processor"),Rho=o(" (WavLM model)"),Pho=l(),F(tp.$$.fragment),Bho=l(),F(ap.$$.fragment),Iho=l(),np=a("div"),F(Ky.$$.fragment),qho=l(),gse=a("p"),Nho=o("Register a new processor for this class."),fNe=l(),wi=a("h2"),sp=a("a"),hse=a("span"),F(Zy.$$.fragment),jho=l(),pse=a("span"),Dho=o("AutoModel"),mNe=l(),Lo=a("div"),F(eL.$$.fragment),Gho=l(),Ai=a("p"),Oho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xI=a("a"),Vho=o("from_pretrained()"),Xho=o(" class method or the "),$I=a("a"),zho=o("from_config()"),Who=o(` class
method.`),Qho=l(),oL=a("p"),Hho=o("This class cannot be instantiated directly using "),use=a("code"),Uho=o("__init__()"),Jho=o(" (throws an error)."),Yho=l(),tt=a("div"),F(rL.$$.fragment),Kho=l(),_se=a("p"),Zho=o("Instantiates one of the base model classes of the library from a configuration."),epo=l(),yi=a("p"),opo=o(`Note:
Loading a model from its configuration file does `),bse=a("strong"),rpo=o("not"),tpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=a("a"),apo=o("from_pretrained()"),npo=o(" to load the model weights."),spo=l(),F(lp.$$.fragment),lpo=l(),Je=a("div"),F(tL.$$.fragment),ipo=l(),vse=a("p"),dpo=o("Instantiate one of the base model classes of the library from a pretrained model."),cpo=l(),La=a("p"),fpo=o("The model class to instantiate is selected based on the "),Fse=a("code"),mpo=o("model_type"),gpo=o(` property of the config object (either
passed as an argument or loaded from `),Tse=a("code"),hpo=o("pretrained_model_name_or_path"),ppo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=a("code"),upo=o("pretrained_model_name_or_path"),_po=o(":"),bpo=l(),x=a("ul"),ip=a("li"),Ese=a("strong"),vpo=o("albert"),Fpo=o(" \u2014 "),SI=a("a"),Tpo=o("AlbertModel"),Mpo=o(" (ALBERT model)"),Epo=l(),dp=a("li"),Cse=a("strong"),Cpo=o("bart"),wpo=o(" \u2014 "),RI=a("a"),Apo=o("BartModel"),ypo=o(" (BART model)"),Lpo=l(),cp=a("li"),wse=a("strong"),xpo=o("beit"),$po=o(" \u2014 "),PI=a("a"),kpo=o("BeitModel"),Spo=o(" (BEiT model)"),Rpo=l(),fp=a("li"),Ase=a("strong"),Ppo=o("bert"),Bpo=o(" \u2014 "),BI=a("a"),Ipo=o("BertModel"),qpo=o(" (BERT model)"),Npo=l(),mp=a("li"),yse=a("strong"),jpo=o("bert-generation"),Dpo=o(" \u2014 "),II=a("a"),Gpo=o("BertGenerationEncoder"),Opo=o(" (Bert Generation model)"),Vpo=l(),gp=a("li"),Lse=a("strong"),Xpo=o("big_bird"),zpo=o(" \u2014 "),qI=a("a"),Wpo=o("BigBirdModel"),Qpo=o(" (BigBird model)"),Hpo=l(),hp=a("li"),xse=a("strong"),Upo=o("bigbird_pegasus"),Jpo=o(" \u2014 "),NI=a("a"),Ypo=o("BigBirdPegasusModel"),Kpo=o(" (BigBirdPegasus model)"),Zpo=l(),pp=a("li"),$se=a("strong"),euo=o("blenderbot"),ouo=o(" \u2014 "),jI=a("a"),ruo=o("BlenderbotModel"),tuo=o(" (Blenderbot model)"),auo=l(),up=a("li"),kse=a("strong"),nuo=o("blenderbot-small"),suo=o(" \u2014 "),DI=a("a"),luo=o("BlenderbotSmallModel"),iuo=o(" (BlenderbotSmall model)"),duo=l(),_p=a("li"),Sse=a("strong"),cuo=o("camembert"),fuo=o(" \u2014 "),GI=a("a"),muo=o("CamembertModel"),guo=o(" (CamemBERT model)"),huo=l(),bp=a("li"),Rse=a("strong"),puo=o("canine"),uuo=o(" \u2014 "),OI=a("a"),_uo=o("CanineModel"),buo=o(" (Canine model)"),vuo=l(),vp=a("li"),Pse=a("strong"),Fuo=o("clip"),Tuo=o(" \u2014 "),VI=a("a"),Muo=o("CLIPModel"),Euo=o(" (CLIP model)"),Cuo=l(),Fp=a("li"),Bse=a("strong"),wuo=o("convbert"),Auo=o(" \u2014 "),XI=a("a"),yuo=o("ConvBertModel"),Luo=o(" (ConvBERT model)"),xuo=l(),Tp=a("li"),Ise=a("strong"),$uo=o("convnext"),kuo=o(" \u2014 "),zI=a("a"),Suo=o("ConvNextModel"),Ruo=o(" (ConvNext model)"),Puo=l(),Mp=a("li"),qse=a("strong"),Buo=o("ctrl"),Iuo=o(" \u2014 "),WI=a("a"),quo=o("CTRLModel"),Nuo=o(" (CTRL model)"),juo=l(),Ep=a("li"),Nse=a("strong"),Duo=o("cvt"),Guo=o(" \u2014 "),QI=a("a"),Ouo=o("CvtModel"),Vuo=o(" (CvT model)"),Xuo=l(),Cp=a("li"),jse=a("strong"),zuo=o("data2vec-audio"),Wuo=o(" \u2014 "),HI=a("a"),Quo=o("Data2VecAudioModel"),Huo=o(" (Data2VecAudio model)"),Uuo=l(),wp=a("li"),Dse=a("strong"),Juo=o("data2vec-text"),Yuo=o(" \u2014 "),UI=a("a"),Kuo=o("Data2VecTextModel"),Zuo=o(" (Data2VecText model)"),e_o=l(),Ap=a("li"),Gse=a("strong"),o_o=o("data2vec-vision"),r_o=o(" \u2014 "),JI=a("a"),t_o=o("Data2VecVisionModel"),a_o=o(" (Data2VecVision model)"),n_o=l(),yp=a("li"),Ose=a("strong"),s_o=o("deberta"),l_o=o(" \u2014 "),YI=a("a"),i_o=o("DebertaModel"),d_o=o(" (DeBERTa model)"),c_o=l(),Lp=a("li"),Vse=a("strong"),f_o=o("deberta-v2"),m_o=o(" \u2014 "),KI=a("a"),g_o=o("DebertaV2Model"),h_o=o(" (DeBERTa-v2 model)"),p_o=l(),xp=a("li"),Xse=a("strong"),u_o=o("decision_transformer"),__o=o(" \u2014 "),ZI=a("a"),b_o=o("DecisionTransformerModel"),v_o=o(" (Decision Transformer model)"),F_o=l(),$p=a("li"),zse=a("strong"),T_o=o("deit"),M_o=o(" \u2014 "),eq=a("a"),E_o=o("DeiTModel"),C_o=o(" (DeiT model)"),w_o=l(),kp=a("li"),Wse=a("strong"),A_o=o("detr"),y_o=o(" \u2014 "),oq=a("a"),L_o=o("DetrModel"),x_o=o(" (DETR model)"),$_o=l(),Sp=a("li"),Qse=a("strong"),k_o=o("distilbert"),S_o=o(" \u2014 "),rq=a("a"),R_o=o("DistilBertModel"),P_o=o(" (DistilBERT model)"),B_o=l(),Rp=a("li"),Hse=a("strong"),I_o=o("dpr"),q_o=o(" \u2014 "),tq=a("a"),N_o=o("DPRQuestionEncoder"),j_o=o(" (DPR model)"),D_o=l(),Pp=a("li"),Use=a("strong"),G_o=o("dpt"),O_o=o(" \u2014 "),aq=a("a"),V_o=o("DPTModel"),X_o=o(" (DPT model)"),z_o=l(),Bp=a("li"),Jse=a("strong"),W_o=o("electra"),Q_o=o(" \u2014 "),nq=a("a"),H_o=o("ElectraModel"),U_o=o(" (ELECTRA model)"),J_o=l(),Ip=a("li"),Yse=a("strong"),Y_o=o("flaubert"),K_o=o(" \u2014 "),sq=a("a"),Z_o=o("FlaubertModel"),e0o=o(" (FlauBERT model)"),o0o=l(),qp=a("li"),Kse=a("strong"),r0o=o("flava"),t0o=o(" \u2014 "),lq=a("a"),a0o=o("FlavaModel"),n0o=o(" (Flava model)"),s0o=l(),Np=a("li"),Zse=a("strong"),l0o=o("fnet"),i0o=o(" \u2014 "),iq=a("a"),d0o=o("FNetModel"),c0o=o(" (FNet model)"),f0o=l(),jp=a("li"),ele=a("strong"),m0o=o("fsmt"),g0o=o(" \u2014 "),dq=a("a"),h0o=o("FSMTModel"),p0o=o(" (FairSeq Machine-Translation model)"),u0o=l(),Ps=a("li"),ole=a("strong"),_0o=o("funnel"),b0o=o(" \u2014 "),cq=a("a"),v0o=o("FunnelModel"),F0o=o(" or "),fq=a("a"),T0o=o("FunnelBaseModel"),M0o=o(" (Funnel Transformer model)"),E0o=l(),Dp=a("li"),rle=a("strong"),C0o=o("glpn"),w0o=o(" \u2014 "),mq=a("a"),A0o=o("GLPNModel"),y0o=o(" (GLPN model)"),L0o=l(),Gp=a("li"),tle=a("strong"),x0o=o("gpt2"),$0o=o(" \u2014 "),gq=a("a"),k0o=o("GPT2Model"),S0o=o(" (OpenAI GPT-2 model)"),R0o=l(),Op=a("li"),ale=a("strong"),P0o=o("gpt_neo"),B0o=o(" \u2014 "),hq=a("a"),I0o=o("GPTNeoModel"),q0o=o(" (GPT Neo model)"),N0o=l(),Vp=a("li"),nle=a("strong"),j0o=o("gpt_neox"),D0o=o(" \u2014 "),pq=a("a"),G0o=o("GPTNeoXModel"),O0o=o(" (GPT NeoX model)"),V0o=l(),Xp=a("li"),sle=a("strong"),X0o=o("gptj"),z0o=o(" \u2014 "),uq=a("a"),W0o=o("GPTJModel"),Q0o=o(" (GPT-J model)"),H0o=l(),zp=a("li"),lle=a("strong"),U0o=o("hubert"),J0o=o(" \u2014 "),_q=a("a"),Y0o=o("HubertModel"),K0o=o(" (Hubert model)"),Z0o=l(),Wp=a("li"),ile=a("strong"),e1o=o("ibert"),o1o=o(" \u2014 "),bq=a("a"),r1o=o("IBertModel"),t1o=o(" (I-BERT model)"),a1o=l(),Qp=a("li"),dle=a("strong"),n1o=o("imagegpt"),s1o=o(" \u2014 "),vq=a("a"),l1o=o("ImageGPTModel"),i1o=o(" (ImageGPT model)"),d1o=l(),Hp=a("li"),cle=a("strong"),c1o=o("layoutlm"),f1o=o(" \u2014 "),Fq=a("a"),m1o=o("LayoutLMModel"),g1o=o(" (LayoutLM model)"),h1o=l(),Up=a("li"),fle=a("strong"),p1o=o("layoutlmv2"),u1o=o(" \u2014 "),Tq=a("a"),_1o=o("LayoutLMv2Model"),b1o=o(" (LayoutLMv2 model)"),v1o=l(),Jp=a("li"),mle=a("strong"),F1o=o("layoutlmv3"),T1o=o(" \u2014 "),Mq=a("a"),M1o=o("LayoutLMv3Model"),E1o=o(" (LayoutLMv3 model)"),C1o=l(),Yp=a("li"),gle=a("strong"),w1o=o("led"),A1o=o(" \u2014 "),Eq=a("a"),y1o=o("LEDModel"),L1o=o(" (LED model)"),x1o=l(),Kp=a("li"),hle=a("strong"),$1o=o("longformer"),k1o=o(" \u2014 "),Cq=a("a"),S1o=o("LongformerModel"),R1o=o(" (Longformer model)"),P1o=l(),Zp=a("li"),ple=a("strong"),B1o=o("luke"),I1o=o(" \u2014 "),wq=a("a"),q1o=o("LukeModel"),N1o=o(" (LUKE model)"),j1o=l(),eu=a("li"),ule=a("strong"),D1o=o("lxmert"),G1o=o(" \u2014 "),Aq=a("a"),O1o=o("LxmertModel"),V1o=o(" (LXMERT model)"),X1o=l(),ou=a("li"),_le=a("strong"),z1o=o("m2m_100"),W1o=o(" \u2014 "),yq=a("a"),Q1o=o("M2M100Model"),H1o=o(" (M2M100 model)"),U1o=l(),ru=a("li"),ble=a("strong"),J1o=o("marian"),Y1o=o(" \u2014 "),Lq=a("a"),K1o=o("MarianModel"),Z1o=o(" (Marian model)"),ebo=l(),tu=a("li"),vle=a("strong"),obo=o("maskformer"),rbo=o(" \u2014 "),xq=a("a"),tbo=o("MaskFormerModel"),abo=o(" (MaskFormer model)"),nbo=l(),au=a("li"),Fle=a("strong"),sbo=o("mbart"),lbo=o(" \u2014 "),$q=a("a"),ibo=o("MBartModel"),dbo=o(" (mBART model)"),cbo=l(),nu=a("li"),Tle=a("strong"),fbo=o("megatron-bert"),mbo=o(" \u2014 "),kq=a("a"),gbo=o("MegatronBertModel"),hbo=o(" (MegatronBert model)"),pbo=l(),su=a("li"),Mle=a("strong"),ubo=o("mobilebert"),_bo=o(" \u2014 "),Sq=a("a"),bbo=o("MobileBertModel"),vbo=o(" (MobileBERT model)"),Fbo=l(),lu=a("li"),Ele=a("strong"),Tbo=o("mpnet"),Mbo=o(" \u2014 "),Rq=a("a"),Ebo=o("MPNetModel"),Cbo=o(" (MPNet model)"),wbo=l(),iu=a("li"),Cle=a("strong"),Abo=o("mt5"),ybo=o(" \u2014 "),Pq=a("a"),Lbo=o("MT5Model"),xbo=o(" (mT5 model)"),$bo=l(),du=a("li"),wle=a("strong"),kbo=o("nystromformer"),Sbo=o(" \u2014 "),Bq=a("a"),Rbo=o("NystromformerModel"),Pbo=o(" (Nystromformer model)"),Bbo=l(),cu=a("li"),Ale=a("strong"),Ibo=o("openai-gpt"),qbo=o(" \u2014 "),Iq=a("a"),Nbo=o("OpenAIGPTModel"),jbo=o(" (OpenAI GPT model)"),Dbo=l(),fu=a("li"),yle=a("strong"),Gbo=o("opt"),Obo=o(" \u2014 "),qq=a("a"),Vbo=o("OPTModel"),Xbo=o(" (OPT model)"),zbo=l(),mu=a("li"),Lle=a("strong"),Wbo=o("pegasus"),Qbo=o(" \u2014 "),Nq=a("a"),Hbo=o("PegasusModel"),Ubo=o(" (Pegasus model)"),Jbo=l(),gu=a("li"),xle=a("strong"),Ybo=o("perceiver"),Kbo=o(" \u2014 "),jq=a("a"),Zbo=o("PerceiverModel"),e2o=o(" (Perceiver model)"),o2o=l(),hu=a("li"),$le=a("strong"),r2o=o("plbart"),t2o=o(" \u2014 "),Dq=a("a"),a2o=o("PLBartModel"),n2o=o(" (PLBart model)"),s2o=l(),pu=a("li"),kle=a("strong"),l2o=o("poolformer"),i2o=o(" \u2014 "),Gq=a("a"),d2o=o("PoolFormerModel"),c2o=o(" (PoolFormer model)"),f2o=l(),uu=a("li"),Sle=a("strong"),m2o=o("prophetnet"),g2o=o(" \u2014 "),Oq=a("a"),h2o=o("ProphetNetModel"),p2o=o(" (ProphetNet model)"),u2o=l(),_u=a("li"),Rle=a("strong"),_2o=o("qdqbert"),b2o=o(" \u2014 "),Vq=a("a"),v2o=o("QDQBertModel"),F2o=o(" (QDQBert model)"),T2o=l(),bu=a("li"),Ple=a("strong"),M2o=o("reformer"),E2o=o(" \u2014 "),Xq=a("a"),C2o=o("ReformerModel"),w2o=o(" (Reformer model)"),A2o=l(),vu=a("li"),Ble=a("strong"),y2o=o("regnet"),L2o=o(" \u2014 "),zq=a("a"),x2o=o("RegNetModel"),$2o=o(" (RegNet model)"),k2o=l(),Fu=a("li"),Ile=a("strong"),S2o=o("rembert"),R2o=o(" \u2014 "),Wq=a("a"),P2o=o("RemBertModel"),B2o=o(" (RemBERT model)"),I2o=l(),Tu=a("li"),qle=a("strong"),q2o=o("resnet"),N2o=o(" \u2014 "),Qq=a("a"),j2o=o("ResNetModel"),D2o=o(" (ResNet model)"),G2o=l(),Mu=a("li"),Nle=a("strong"),O2o=o("retribert"),V2o=o(" \u2014 "),Hq=a("a"),X2o=o("RetriBertModel"),z2o=o(" (RetriBERT model)"),W2o=l(),Eu=a("li"),jle=a("strong"),Q2o=o("roberta"),H2o=o(" \u2014 "),Uq=a("a"),U2o=o("RobertaModel"),J2o=o(" (RoBERTa model)"),Y2o=l(),Cu=a("li"),Dle=a("strong"),K2o=o("roformer"),Z2o=o(" \u2014 "),Jq=a("a"),e4o=o("RoFormerModel"),o4o=o(" (RoFormer model)"),r4o=l(),wu=a("li"),Gle=a("strong"),t4o=o("segformer"),a4o=o(" \u2014 "),Yq=a("a"),n4o=o("SegformerModel"),s4o=o(" (SegFormer model)"),l4o=l(),Au=a("li"),Ole=a("strong"),i4o=o("sew"),d4o=o(" \u2014 "),Kq=a("a"),c4o=o("SEWModel"),f4o=o(" (SEW model)"),m4o=l(),yu=a("li"),Vle=a("strong"),g4o=o("sew-d"),h4o=o(" \u2014 "),Zq=a("a"),p4o=o("SEWDModel"),u4o=o(" (SEW-D model)"),_4o=l(),Lu=a("li"),Xle=a("strong"),b4o=o("speech_to_text"),v4o=o(" \u2014 "),eN=a("a"),F4o=o("Speech2TextModel"),T4o=o(" (Speech2Text model)"),M4o=l(),xu=a("li"),zle=a("strong"),E4o=o("splinter"),C4o=o(" \u2014 "),oN=a("a"),w4o=o("SplinterModel"),A4o=o(" (Splinter model)"),y4o=l(),$u=a("li"),Wle=a("strong"),L4o=o("squeezebert"),x4o=o(" \u2014 "),rN=a("a"),$4o=o("SqueezeBertModel"),k4o=o(" (SqueezeBERT model)"),S4o=l(),ku=a("li"),Qle=a("strong"),R4o=o("swin"),P4o=o(" \u2014 "),tN=a("a"),B4o=o("SwinModel"),I4o=o(" (Swin model)"),q4o=l(),Su=a("li"),Hle=a("strong"),N4o=o("t5"),j4o=o(" \u2014 "),aN=a("a"),D4o=o("T5Model"),G4o=o(" (T5 model)"),O4o=l(),Ru=a("li"),Ule=a("strong"),V4o=o("tapas"),X4o=o(" \u2014 "),nN=a("a"),z4o=o("TapasModel"),W4o=o(" (TAPAS model)"),Q4o=l(),Pu=a("li"),Jle=a("strong"),H4o=o("trajectory_transformer"),U4o=o(" \u2014 "),sN=a("a"),J4o=o("TrajectoryTransformerModel"),Y4o=o(" (Trajectory Transformer model)"),K4o=l(),Bu=a("li"),Yle=a("strong"),Z4o=o("transfo-xl"),evo=o(" \u2014 "),lN=a("a"),ovo=o("TransfoXLModel"),rvo=o(" (Transformer-XL model)"),tvo=l(),Iu=a("li"),Kle=a("strong"),avo=o("unispeech"),nvo=o(" \u2014 "),iN=a("a"),svo=o("UniSpeechModel"),lvo=o(" (UniSpeech model)"),ivo=l(),qu=a("li"),Zle=a("strong"),dvo=o("unispeech-sat"),cvo=o(" \u2014 "),dN=a("a"),fvo=o("UniSpeechSatModel"),mvo=o(" (UniSpeechSat model)"),gvo=l(),Nu=a("li"),eie=a("strong"),hvo=o("van"),pvo=o(" \u2014 "),cN=a("a"),uvo=o("VanModel"),_vo=o(" (VAN model)"),bvo=l(),ju=a("li"),oie=a("strong"),vvo=o("vilt"),Fvo=o(" \u2014 "),fN=a("a"),Tvo=o("ViltModel"),Mvo=o(" (ViLT model)"),Evo=l(),Du=a("li"),rie=a("strong"),Cvo=o("vision-text-dual-encoder"),wvo=o(" \u2014 "),mN=a("a"),Avo=o("VisionTextDualEncoderModel"),yvo=o(" (VisionTextDualEncoder model)"),Lvo=l(),Gu=a("li"),tie=a("strong"),xvo=o("visual_bert"),$vo=o(" \u2014 "),gN=a("a"),kvo=o("VisualBertModel"),Svo=o(" (VisualBert model)"),Rvo=l(),Ou=a("li"),aie=a("strong"),Pvo=o("vit"),Bvo=o(" \u2014 "),hN=a("a"),Ivo=o("ViTModel"),qvo=o(" (ViT model)"),Nvo=l(),Vu=a("li"),nie=a("strong"),jvo=o("vit_mae"),Dvo=o(" \u2014 "),pN=a("a"),Gvo=o("ViTMAEModel"),Ovo=o(" (ViTMAE model)"),Vvo=l(),Xu=a("li"),sie=a("strong"),Xvo=o("wav2vec2"),zvo=o(" \u2014 "),uN=a("a"),Wvo=o("Wav2Vec2Model"),Qvo=o(" (Wav2Vec2 model)"),Hvo=l(),zu=a("li"),lie=a("strong"),Uvo=o("wav2vec2-conformer"),Jvo=o(" \u2014 "),_N=a("a"),Yvo=o("Wav2Vec2ConformerModel"),Kvo=o(" (Wav2Vec2-Conformer model)"),Zvo=l(),Wu=a("li"),iie=a("strong"),eFo=o("wavlm"),oFo=o(" \u2014 "),bN=a("a"),rFo=o("WavLMModel"),tFo=o(" (WavLM model)"),aFo=l(),Qu=a("li"),die=a("strong"),nFo=o("xglm"),sFo=o(" \u2014 "),vN=a("a"),lFo=o("XGLMModel"),iFo=o(" (XGLM model)"),dFo=l(),Hu=a("li"),cie=a("strong"),cFo=o("xlm"),fFo=o(" \u2014 "),FN=a("a"),mFo=o("XLMModel"),gFo=o(" (XLM model)"),hFo=l(),Uu=a("li"),fie=a("strong"),pFo=o("xlm-prophetnet"),uFo=o(" \u2014 "),TN=a("a"),_Fo=o("XLMProphetNetModel"),bFo=o(" (XLMProphetNet model)"),vFo=l(),Ju=a("li"),mie=a("strong"),FFo=o("xlm-roberta"),TFo=o(" \u2014 "),MN=a("a"),MFo=o("XLMRobertaModel"),EFo=o(" (XLM-RoBERTa model)"),CFo=l(),Yu=a("li"),gie=a("strong"),wFo=o("xlm-roberta-xl"),AFo=o(" \u2014 "),EN=a("a"),yFo=o("XLMRobertaXLModel"),LFo=o(" (XLM-RoBERTa-XL model)"),xFo=l(),Ku=a("li"),hie=a("strong"),$Fo=o("xlnet"),kFo=o(" \u2014 "),CN=a("a"),SFo=o("XLNetModel"),RFo=o(" (XLNet model)"),PFo=l(),Zu=a("li"),pie=a("strong"),BFo=o("yolos"),IFo=o(" \u2014 "),wN=a("a"),qFo=o("YolosModel"),NFo=o(" (YOLOS model)"),jFo=l(),e_=a("li"),uie=a("strong"),DFo=o("yoso"),GFo=o(" \u2014 "),AN=a("a"),OFo=o("YosoModel"),VFo=o(" (YOSO model)"),XFo=l(),o_=a("p"),zFo=o("The model is set in evaluation mode by default using "),_ie=a("code"),WFo=o("model.eval()"),QFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=a("code"),HFo=o("model.train()"),UFo=l(),F(r_.$$.fragment),gNe=l(),Li=a("h2"),t_=a("a"),vie=a("span"),F(aL.$$.fragment),JFo=l(),Fie=a("span"),YFo=o("AutoModelForPreTraining"),hNe=l(),xo=a("div"),F(nL.$$.fragment),KFo=l(),xi=a("p"),ZFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yN=a("a"),e6o=o("from_pretrained()"),o6o=o(" class method or the "),LN=a("a"),r6o=o("from_config()"),t6o=o(` class
method.`),a6o=l(),sL=a("p"),n6o=o("This class cannot be instantiated directly using "),Tie=a("code"),s6o=o("__init__()"),l6o=o(" (throws an error)."),i6o=l(),at=a("div"),F(lL.$$.fragment),d6o=l(),Mie=a("p"),c6o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),f6o=l(),$i=a("p"),m6o=o(`Note:
Loading a model from its configuration file does `),Eie=a("strong"),g6o=o("not"),h6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=a("a"),p6o=o("from_pretrained()"),u6o=o(" to load the model weights."),_6o=l(),F(a_.$$.fragment),b6o=l(),Ye=a("div"),F(iL.$$.fragment),v6o=l(),Cie=a("p"),F6o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T6o=l(),xa=a("p"),M6o=o("The model class to instantiate is selected based on the "),wie=a("code"),E6o=o("model_type"),C6o=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),w6o=o("pretrained_model_name_or_path"),A6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=a("code"),y6o=o("pretrained_model_name_or_path"),L6o=o(":"),x6o=l(),G=a("ul"),n_=a("li"),Lie=a("strong"),$6o=o("albert"),k6o=o(" \u2014 "),$N=a("a"),S6o=o("AlbertForPreTraining"),R6o=o(" (ALBERT model)"),P6o=l(),s_=a("li"),xie=a("strong"),B6o=o("bart"),I6o=o(" \u2014 "),kN=a("a"),q6o=o("BartForConditionalGeneration"),N6o=o(" (BART model)"),j6o=l(),l_=a("li"),$ie=a("strong"),D6o=o("bert"),G6o=o(" \u2014 "),SN=a("a"),O6o=o("BertForPreTraining"),V6o=o(" (BERT model)"),X6o=l(),i_=a("li"),kie=a("strong"),z6o=o("big_bird"),W6o=o(" \u2014 "),RN=a("a"),Q6o=o("BigBirdForPreTraining"),H6o=o(" (BigBird model)"),U6o=l(),d_=a("li"),Sie=a("strong"),J6o=o("camembert"),Y6o=o(" \u2014 "),PN=a("a"),K6o=o("CamembertForMaskedLM"),Z6o=o(" (CamemBERT model)"),eTo=l(),c_=a("li"),Rie=a("strong"),oTo=o("ctrl"),rTo=o(" \u2014 "),BN=a("a"),tTo=o("CTRLLMHeadModel"),aTo=o(" (CTRL model)"),nTo=l(),f_=a("li"),Pie=a("strong"),sTo=o("data2vec-text"),lTo=o(" \u2014 "),IN=a("a"),iTo=o("Data2VecTextForMaskedLM"),dTo=o(" (Data2VecText model)"),cTo=l(),m_=a("li"),Bie=a("strong"),fTo=o("deberta"),mTo=o(" \u2014 "),qN=a("a"),gTo=o("DebertaForMaskedLM"),hTo=o(" (DeBERTa model)"),pTo=l(),g_=a("li"),Iie=a("strong"),uTo=o("deberta-v2"),_To=o(" \u2014 "),NN=a("a"),bTo=o("DebertaV2ForMaskedLM"),vTo=o(" (DeBERTa-v2 model)"),FTo=l(),h_=a("li"),qie=a("strong"),TTo=o("distilbert"),MTo=o(" \u2014 "),jN=a("a"),ETo=o("DistilBertForMaskedLM"),CTo=o(" (DistilBERT model)"),wTo=l(),p_=a("li"),Nie=a("strong"),ATo=o("electra"),yTo=o(" \u2014 "),DN=a("a"),LTo=o("ElectraForPreTraining"),xTo=o(" (ELECTRA model)"),$To=l(),u_=a("li"),jie=a("strong"),kTo=o("flaubert"),STo=o(" \u2014 "),GN=a("a"),RTo=o("FlaubertWithLMHeadModel"),PTo=o(" (FlauBERT model)"),BTo=l(),__=a("li"),Die=a("strong"),ITo=o("flava"),qTo=o(" \u2014 "),ON=a("a"),NTo=o("FlavaForPreTraining"),jTo=o(" (Flava model)"),DTo=l(),b_=a("li"),Gie=a("strong"),GTo=o("fnet"),OTo=o(" \u2014 "),VN=a("a"),VTo=o("FNetForPreTraining"),XTo=o(" (FNet model)"),zTo=l(),v_=a("li"),Oie=a("strong"),WTo=o("fsmt"),QTo=o(" \u2014 "),XN=a("a"),HTo=o("FSMTForConditionalGeneration"),UTo=o(" (FairSeq Machine-Translation model)"),JTo=l(),F_=a("li"),Vie=a("strong"),YTo=o("funnel"),KTo=o(" \u2014 "),zN=a("a"),ZTo=o("FunnelForPreTraining"),eMo=o(" (Funnel Transformer model)"),oMo=l(),T_=a("li"),Xie=a("strong"),rMo=o("gpt2"),tMo=o(" \u2014 "),WN=a("a"),aMo=o("GPT2LMHeadModel"),nMo=o(" (OpenAI GPT-2 model)"),sMo=l(),M_=a("li"),zie=a("strong"),lMo=o("ibert"),iMo=o(" \u2014 "),QN=a("a"),dMo=o("IBertForMaskedLM"),cMo=o(" (I-BERT model)"),fMo=l(),E_=a("li"),Wie=a("strong"),mMo=o("layoutlm"),gMo=o(" \u2014 "),HN=a("a"),hMo=o("LayoutLMForMaskedLM"),pMo=o(" (LayoutLM model)"),uMo=l(),C_=a("li"),Qie=a("strong"),_Mo=o("longformer"),bMo=o(" \u2014 "),UN=a("a"),vMo=o("LongformerForMaskedLM"),FMo=o(" (Longformer model)"),TMo=l(),w_=a("li"),Hie=a("strong"),MMo=o("lxmert"),EMo=o(" \u2014 "),JN=a("a"),CMo=o("LxmertForPreTraining"),wMo=o(" (LXMERT model)"),AMo=l(),A_=a("li"),Uie=a("strong"),yMo=o("megatron-bert"),LMo=o(" \u2014 "),YN=a("a"),xMo=o("MegatronBertForPreTraining"),$Mo=o(" (MegatronBert model)"),kMo=l(),y_=a("li"),Jie=a("strong"),SMo=o("mobilebert"),RMo=o(" \u2014 "),KN=a("a"),PMo=o("MobileBertForPreTraining"),BMo=o(" (MobileBERT model)"),IMo=l(),L_=a("li"),Yie=a("strong"),qMo=o("mpnet"),NMo=o(" \u2014 "),ZN=a("a"),jMo=o("MPNetForMaskedLM"),DMo=o(" (MPNet model)"),GMo=l(),x_=a("li"),Kie=a("strong"),OMo=o("openai-gpt"),VMo=o(" \u2014 "),ej=a("a"),XMo=o("OpenAIGPTLMHeadModel"),zMo=o(" (OpenAI GPT model)"),WMo=l(),$_=a("li"),Zie=a("strong"),QMo=o("retribert"),HMo=o(" \u2014 "),oj=a("a"),UMo=o("RetriBertModel"),JMo=o(" (RetriBERT model)"),YMo=l(),k_=a("li"),ede=a("strong"),KMo=o("roberta"),ZMo=o(" \u2014 "),rj=a("a"),eEo=o("RobertaForMaskedLM"),oEo=o(" (RoBERTa model)"),rEo=l(),S_=a("li"),ode=a("strong"),tEo=o("splinter"),aEo=o(" \u2014 "),tj=a("a"),nEo=o("SplinterForPreTraining"),sEo=o(" (Splinter model)"),lEo=l(),R_=a("li"),rde=a("strong"),iEo=o("squeezebert"),dEo=o(" \u2014 "),aj=a("a"),cEo=o("SqueezeBertForMaskedLM"),fEo=o(" (SqueezeBERT model)"),mEo=l(),P_=a("li"),tde=a("strong"),gEo=o("t5"),hEo=o(" \u2014 "),nj=a("a"),pEo=o("T5ForConditionalGeneration"),uEo=o(" (T5 model)"),_Eo=l(),B_=a("li"),ade=a("strong"),bEo=o("tapas"),vEo=o(" \u2014 "),sj=a("a"),FEo=o("TapasForMaskedLM"),TEo=o(" (TAPAS model)"),MEo=l(),I_=a("li"),nde=a("strong"),EEo=o("transfo-xl"),CEo=o(" \u2014 "),lj=a("a"),wEo=o("TransfoXLLMHeadModel"),AEo=o(" (Transformer-XL model)"),yEo=l(),q_=a("li"),sde=a("strong"),LEo=o("unispeech"),xEo=o(" \u2014 "),ij=a("a"),$Eo=o("UniSpeechForPreTraining"),kEo=o(" (UniSpeech model)"),SEo=l(),N_=a("li"),lde=a("strong"),REo=o("unispeech-sat"),PEo=o(" \u2014 "),dj=a("a"),BEo=o("UniSpeechSatForPreTraining"),IEo=o(" (UniSpeechSat model)"),qEo=l(),j_=a("li"),ide=a("strong"),NEo=o("visual_bert"),jEo=o(" \u2014 "),cj=a("a"),DEo=o("VisualBertForPreTraining"),GEo=o(" (VisualBert model)"),OEo=l(),D_=a("li"),dde=a("strong"),VEo=o("vit_mae"),XEo=o(" \u2014 "),fj=a("a"),zEo=o("ViTMAEForPreTraining"),WEo=o(" (ViTMAE model)"),QEo=l(),G_=a("li"),cde=a("strong"),HEo=o("wav2vec2"),UEo=o(" \u2014 "),mj=a("a"),JEo=o("Wav2Vec2ForPreTraining"),YEo=o(" (Wav2Vec2 model)"),KEo=l(),O_=a("li"),fde=a("strong"),ZEo=o("wav2vec2-conformer"),eCo=o(" \u2014 "),gj=a("a"),oCo=o("Wav2Vec2ConformerForPreTraining"),rCo=o(" (Wav2Vec2-Conformer model)"),tCo=l(),V_=a("li"),mde=a("strong"),aCo=o("xlm"),nCo=o(" \u2014 "),hj=a("a"),sCo=o("XLMWithLMHeadModel"),lCo=o(" (XLM model)"),iCo=l(),X_=a("li"),gde=a("strong"),dCo=o("xlm-roberta"),cCo=o(" \u2014 "),pj=a("a"),fCo=o("XLMRobertaForMaskedLM"),mCo=o(" (XLM-RoBERTa model)"),gCo=l(),z_=a("li"),hde=a("strong"),hCo=o("xlm-roberta-xl"),pCo=o(" \u2014 "),uj=a("a"),uCo=o("XLMRobertaXLForMaskedLM"),_Co=o(" (XLM-RoBERTa-XL model)"),bCo=l(),W_=a("li"),pde=a("strong"),vCo=o("xlnet"),FCo=o(" \u2014 "),_j=a("a"),TCo=o("XLNetLMHeadModel"),MCo=o(" (XLNet model)"),ECo=l(),Q_=a("p"),CCo=o("The model is set in evaluation mode by default using "),ude=a("code"),wCo=o("model.eval()"),ACo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),yCo=o("model.train()"),LCo=l(),F(H_.$$.fragment),pNe=l(),ki=a("h2"),U_=a("a"),bde=a("span"),F(dL.$$.fragment),xCo=l(),vde=a("span"),$Co=o("AutoModelForCausalLM"),uNe=l(),$o=a("div"),F(cL.$$.fragment),kCo=l(),Si=a("p"),SCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bj=a("a"),RCo=o("from_pretrained()"),PCo=o(" class method or the "),vj=a("a"),BCo=o("from_config()"),ICo=o(` class
method.`),qCo=l(),fL=a("p"),NCo=o("This class cannot be instantiated directly using "),Fde=a("code"),jCo=o("__init__()"),DCo=o(" (throws an error)."),GCo=l(),nt=a("div"),F(mL.$$.fragment),OCo=l(),Tde=a("p"),VCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XCo=l(),Ri=a("p"),zCo=o(`Note:
Loading a model from its configuration file does `),Mde=a("strong"),WCo=o("not"),QCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=a("a"),HCo=o("from_pretrained()"),UCo=o(" to load the model weights."),JCo=l(),F(J_.$$.fragment),YCo=l(),Ke=a("div"),F(gL.$$.fragment),KCo=l(),Ede=a("p"),ZCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),e5o=l(),$a=a("p"),o5o=o("The model class to instantiate is selected based on the "),Cde=a("code"),r5o=o("model_type"),t5o=o(` property of the config object (either
passed as an argument or loaded from `),wde=a("code"),a5o=o("pretrained_model_name_or_path"),n5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=a("code"),s5o=o("pretrained_model_name_or_path"),l5o=o(":"),i5o=l(),z=a("ul"),Y_=a("li"),yde=a("strong"),d5o=o("bart"),c5o=o(" \u2014 "),Tj=a("a"),f5o=o("BartForCausalLM"),m5o=o(" (BART model)"),g5o=l(),K_=a("li"),Lde=a("strong"),h5o=o("bert"),p5o=o(" \u2014 "),Mj=a("a"),u5o=o("BertLMHeadModel"),_5o=o(" (BERT model)"),b5o=l(),Z_=a("li"),xde=a("strong"),v5o=o("bert-generation"),F5o=o(" \u2014 "),Ej=a("a"),T5o=o("BertGenerationDecoder"),M5o=o(" (Bert Generation model)"),E5o=l(),e0=a("li"),$de=a("strong"),C5o=o("big_bird"),w5o=o(" \u2014 "),Cj=a("a"),A5o=o("BigBirdForCausalLM"),y5o=o(" (BigBird model)"),L5o=l(),o0=a("li"),kde=a("strong"),x5o=o("bigbird_pegasus"),$5o=o(" \u2014 "),wj=a("a"),k5o=o("BigBirdPegasusForCausalLM"),S5o=o(" (BigBirdPegasus model)"),R5o=l(),r0=a("li"),Sde=a("strong"),P5o=o("blenderbot"),B5o=o(" \u2014 "),Aj=a("a"),I5o=o("BlenderbotForCausalLM"),q5o=o(" (Blenderbot model)"),N5o=l(),t0=a("li"),Rde=a("strong"),j5o=o("blenderbot-small"),D5o=o(" \u2014 "),yj=a("a"),G5o=o("BlenderbotSmallForCausalLM"),O5o=o(" (BlenderbotSmall model)"),V5o=l(),a0=a("li"),Pde=a("strong"),X5o=o("camembert"),z5o=o(" \u2014 "),Lj=a("a"),W5o=o("CamembertForCausalLM"),Q5o=o(" (CamemBERT model)"),H5o=l(),n0=a("li"),Bde=a("strong"),U5o=o("ctrl"),J5o=o(" \u2014 "),xj=a("a"),Y5o=o("CTRLLMHeadModel"),K5o=o(" (CTRL model)"),Z5o=l(),s0=a("li"),Ide=a("strong"),e3o=o("data2vec-text"),o3o=o(" \u2014 "),$j=a("a"),r3o=o("Data2VecTextForCausalLM"),t3o=o(" (Data2VecText model)"),a3o=l(),l0=a("li"),qde=a("strong"),n3o=o("electra"),s3o=o(" \u2014 "),kj=a("a"),l3o=o("ElectraForCausalLM"),i3o=o(" (ELECTRA model)"),d3o=l(),i0=a("li"),Nde=a("strong"),c3o=o("gpt2"),f3o=o(" \u2014 "),Sj=a("a"),m3o=o("GPT2LMHeadModel"),g3o=o(" (OpenAI GPT-2 model)"),h3o=l(),d0=a("li"),jde=a("strong"),p3o=o("gpt_neo"),u3o=o(" \u2014 "),Rj=a("a"),_3o=o("GPTNeoForCausalLM"),b3o=o(" (GPT Neo model)"),v3o=l(),c0=a("li"),Dde=a("strong"),F3o=o("gpt_neox"),T3o=o(" \u2014 "),Pj=a("a"),M3o=o("GPTNeoXForCausalLM"),E3o=o(" (GPT NeoX model)"),C3o=l(),f0=a("li"),Gde=a("strong"),w3o=o("gptj"),A3o=o(" \u2014 "),Bj=a("a"),y3o=o("GPTJForCausalLM"),L3o=o(" (GPT-J model)"),x3o=l(),m0=a("li"),Ode=a("strong"),$3o=o("marian"),k3o=o(" \u2014 "),Ij=a("a"),S3o=o("MarianForCausalLM"),R3o=o(" (Marian model)"),P3o=l(),g0=a("li"),Vde=a("strong"),B3o=o("mbart"),I3o=o(" \u2014 "),qj=a("a"),q3o=o("MBartForCausalLM"),N3o=o(" (mBART model)"),j3o=l(),h0=a("li"),Xde=a("strong"),D3o=o("megatron-bert"),G3o=o(" \u2014 "),Nj=a("a"),O3o=o("MegatronBertForCausalLM"),V3o=o(" (MegatronBert model)"),X3o=l(),p0=a("li"),zde=a("strong"),z3o=o("openai-gpt"),W3o=o(" \u2014 "),jj=a("a"),Q3o=o("OpenAIGPTLMHeadModel"),H3o=o(" (OpenAI GPT model)"),U3o=l(),u0=a("li"),Wde=a("strong"),J3o=o("opt"),Y3o=o(" \u2014 "),Dj=a("a"),K3o=o("OPTForCausalLM"),Z3o=o(" (OPT model)"),ewo=l(),_0=a("li"),Qde=a("strong"),owo=o("pegasus"),rwo=o(" \u2014 "),Gj=a("a"),two=o("PegasusForCausalLM"),awo=o(" (Pegasus model)"),nwo=l(),b0=a("li"),Hde=a("strong"),swo=o("plbart"),lwo=o(" \u2014 "),Oj=a("a"),iwo=o("PLBartForCausalLM"),dwo=o(" (PLBart model)"),cwo=l(),v0=a("li"),Ude=a("strong"),fwo=o("prophetnet"),mwo=o(" \u2014 "),Vj=a("a"),gwo=o("ProphetNetForCausalLM"),hwo=o(" (ProphetNet model)"),pwo=l(),F0=a("li"),Jde=a("strong"),uwo=o("qdqbert"),_wo=o(" \u2014 "),Xj=a("a"),bwo=o("QDQBertLMHeadModel"),vwo=o(" (QDQBert model)"),Fwo=l(),T0=a("li"),Yde=a("strong"),Two=o("reformer"),Mwo=o(" \u2014 "),zj=a("a"),Ewo=o("ReformerModelWithLMHead"),Cwo=o(" (Reformer model)"),wwo=l(),M0=a("li"),Kde=a("strong"),Awo=o("rembert"),ywo=o(" \u2014 "),Wj=a("a"),Lwo=o("RemBertForCausalLM"),xwo=o(" (RemBERT model)"),$wo=l(),E0=a("li"),Zde=a("strong"),kwo=o("roberta"),Swo=o(" \u2014 "),Qj=a("a"),Rwo=o("RobertaForCausalLM"),Pwo=o(" (RoBERTa model)"),Bwo=l(),C0=a("li"),ece=a("strong"),Iwo=o("roformer"),qwo=o(" \u2014 "),Hj=a("a"),Nwo=o("RoFormerForCausalLM"),jwo=o(" (RoFormer model)"),Dwo=l(),w0=a("li"),oce=a("strong"),Gwo=o("speech_to_text_2"),Owo=o(" \u2014 "),Uj=a("a"),Vwo=o("Speech2Text2ForCausalLM"),Xwo=o(" (Speech2Text2 model)"),zwo=l(),A0=a("li"),rce=a("strong"),Wwo=o("transfo-xl"),Qwo=o(" \u2014 "),Jj=a("a"),Hwo=o("TransfoXLLMHeadModel"),Uwo=o(" (Transformer-XL model)"),Jwo=l(),y0=a("li"),tce=a("strong"),Ywo=o("trocr"),Kwo=o(" \u2014 "),Yj=a("a"),Zwo=o("TrOCRForCausalLM"),eAo=o(" (TrOCR model)"),oAo=l(),L0=a("li"),ace=a("strong"),rAo=o("xglm"),tAo=o(" \u2014 "),Kj=a("a"),aAo=o("XGLMForCausalLM"),nAo=o(" (XGLM model)"),sAo=l(),x0=a("li"),nce=a("strong"),lAo=o("xlm"),iAo=o(" \u2014 "),Zj=a("a"),dAo=o("XLMWithLMHeadModel"),cAo=o(" (XLM model)"),fAo=l(),$0=a("li"),sce=a("strong"),mAo=o("xlm-prophetnet"),gAo=o(" \u2014 "),eD=a("a"),hAo=o("XLMProphetNetForCausalLM"),pAo=o(" (XLMProphetNet model)"),uAo=l(),k0=a("li"),lce=a("strong"),_Ao=o("xlm-roberta"),bAo=o(" \u2014 "),oD=a("a"),vAo=o("XLMRobertaForCausalLM"),FAo=o(" (XLM-RoBERTa model)"),TAo=l(),S0=a("li"),ice=a("strong"),MAo=o("xlm-roberta-xl"),EAo=o(" \u2014 "),rD=a("a"),CAo=o("XLMRobertaXLForCausalLM"),wAo=o(" (XLM-RoBERTa-XL model)"),AAo=l(),R0=a("li"),dce=a("strong"),yAo=o("xlnet"),LAo=o(" \u2014 "),tD=a("a"),xAo=o("XLNetLMHeadModel"),$Ao=o(" (XLNet model)"),kAo=l(),P0=a("p"),SAo=o("The model is set in evaluation mode by default using "),cce=a("code"),RAo=o("model.eval()"),PAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),BAo=o("model.train()"),IAo=l(),F(B0.$$.fragment),_Ne=l(),Pi=a("h2"),I0=a("a"),mce=a("span"),F(hL.$$.fragment),qAo=l(),gce=a("span"),NAo=o("AutoModelForMaskedLM"),bNe=l(),ko=a("div"),F(pL.$$.fragment),jAo=l(),Bi=a("p"),DAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aD=a("a"),GAo=o("from_pretrained()"),OAo=o(" class method or the "),nD=a("a"),VAo=o("from_config()"),XAo=o(` class
method.`),zAo=l(),uL=a("p"),WAo=o("This class cannot be instantiated directly using "),hce=a("code"),QAo=o("__init__()"),HAo=o(" (throws an error)."),UAo=l(),st=a("div"),F(_L.$$.fragment),JAo=l(),pce=a("p"),YAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KAo=l(),Ii=a("p"),ZAo=o(`Note:
Loading a model from its configuration file does `),uce=a("strong"),eyo=o("not"),oyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=a("a"),ryo=o("from_pretrained()"),tyo=o(" to load the model weights."),ayo=l(),F(q0.$$.fragment),nyo=l(),Ze=a("div"),F(bL.$$.fragment),syo=l(),_ce=a("p"),lyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iyo=l(),ka=a("p"),dyo=o("The model class to instantiate is selected based on the "),bce=a("code"),cyo=o("model_type"),fyo=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),myo=o("pretrained_model_name_or_path"),gyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=a("code"),hyo=o("pretrained_model_name_or_path"),pyo=o(":"),uyo=l(),Q=a("ul"),N0=a("li"),Tce=a("strong"),_yo=o("albert"),byo=o(" \u2014 "),lD=a("a"),vyo=o("AlbertForMaskedLM"),Fyo=o(" (ALBERT model)"),Tyo=l(),j0=a("li"),Mce=a("strong"),Myo=o("bart"),Eyo=o(" \u2014 "),iD=a("a"),Cyo=o("BartForConditionalGeneration"),wyo=o(" (BART model)"),Ayo=l(),D0=a("li"),Ece=a("strong"),yyo=o("bert"),Lyo=o(" \u2014 "),dD=a("a"),xyo=o("BertForMaskedLM"),$yo=o(" (BERT model)"),kyo=l(),G0=a("li"),Cce=a("strong"),Syo=o("big_bird"),Ryo=o(" \u2014 "),cD=a("a"),Pyo=o("BigBirdForMaskedLM"),Byo=o(" (BigBird model)"),Iyo=l(),O0=a("li"),wce=a("strong"),qyo=o("camembert"),Nyo=o(" \u2014 "),fD=a("a"),jyo=o("CamembertForMaskedLM"),Dyo=o(" (CamemBERT model)"),Gyo=l(),V0=a("li"),Ace=a("strong"),Oyo=o("convbert"),Vyo=o(" \u2014 "),mD=a("a"),Xyo=o("ConvBertForMaskedLM"),zyo=o(" (ConvBERT model)"),Wyo=l(),X0=a("li"),yce=a("strong"),Qyo=o("data2vec-text"),Hyo=o(" \u2014 "),gD=a("a"),Uyo=o("Data2VecTextForMaskedLM"),Jyo=o(" (Data2VecText model)"),Yyo=l(),z0=a("li"),Lce=a("strong"),Kyo=o("deberta"),Zyo=o(" \u2014 "),hD=a("a"),eLo=o("DebertaForMaskedLM"),oLo=o(" (DeBERTa model)"),rLo=l(),W0=a("li"),xce=a("strong"),tLo=o("deberta-v2"),aLo=o(" \u2014 "),pD=a("a"),nLo=o("DebertaV2ForMaskedLM"),sLo=o(" (DeBERTa-v2 model)"),lLo=l(),Q0=a("li"),$ce=a("strong"),iLo=o("distilbert"),dLo=o(" \u2014 "),uD=a("a"),cLo=o("DistilBertForMaskedLM"),fLo=o(" (DistilBERT model)"),mLo=l(),H0=a("li"),kce=a("strong"),gLo=o("electra"),hLo=o(" \u2014 "),_D=a("a"),pLo=o("ElectraForMaskedLM"),uLo=o(" (ELECTRA model)"),_Lo=l(),U0=a("li"),Sce=a("strong"),bLo=o("flaubert"),vLo=o(" \u2014 "),bD=a("a"),FLo=o("FlaubertWithLMHeadModel"),TLo=o(" (FlauBERT model)"),MLo=l(),J0=a("li"),Rce=a("strong"),ELo=o("fnet"),CLo=o(" \u2014 "),vD=a("a"),wLo=o("FNetForMaskedLM"),ALo=o(" (FNet model)"),yLo=l(),Y0=a("li"),Pce=a("strong"),LLo=o("funnel"),xLo=o(" \u2014 "),FD=a("a"),$Lo=o("FunnelForMaskedLM"),kLo=o(" (Funnel Transformer model)"),SLo=l(),K0=a("li"),Bce=a("strong"),RLo=o("ibert"),PLo=o(" \u2014 "),TD=a("a"),BLo=o("IBertForMaskedLM"),ILo=o(" (I-BERT model)"),qLo=l(),Z0=a("li"),Ice=a("strong"),NLo=o("layoutlm"),jLo=o(" \u2014 "),MD=a("a"),DLo=o("LayoutLMForMaskedLM"),GLo=o(" (LayoutLM model)"),OLo=l(),e1=a("li"),qce=a("strong"),VLo=o("longformer"),XLo=o(" \u2014 "),ED=a("a"),zLo=o("LongformerForMaskedLM"),WLo=o(" (Longformer model)"),QLo=l(),o1=a("li"),Nce=a("strong"),HLo=o("mbart"),ULo=o(" \u2014 "),CD=a("a"),JLo=o("MBartForConditionalGeneration"),YLo=o(" (mBART model)"),KLo=l(),r1=a("li"),jce=a("strong"),ZLo=o("megatron-bert"),e8o=o(" \u2014 "),wD=a("a"),o8o=o("MegatronBertForMaskedLM"),r8o=o(" (MegatronBert model)"),t8o=l(),t1=a("li"),Dce=a("strong"),a8o=o("mobilebert"),n8o=o(" \u2014 "),AD=a("a"),s8o=o("MobileBertForMaskedLM"),l8o=o(" (MobileBERT model)"),i8o=l(),a1=a("li"),Gce=a("strong"),d8o=o("mpnet"),c8o=o(" \u2014 "),yD=a("a"),f8o=o("MPNetForMaskedLM"),m8o=o(" (MPNet model)"),g8o=l(),n1=a("li"),Oce=a("strong"),h8o=o("nystromformer"),p8o=o(" \u2014 "),LD=a("a"),u8o=o("NystromformerForMaskedLM"),_8o=o(" (Nystromformer model)"),b8o=l(),s1=a("li"),Vce=a("strong"),v8o=o("perceiver"),F8o=o(" \u2014 "),xD=a("a"),T8o=o("PerceiverForMaskedLM"),M8o=o(" (Perceiver model)"),E8o=l(),l1=a("li"),Xce=a("strong"),C8o=o("qdqbert"),w8o=o(" \u2014 "),$D=a("a"),A8o=o("QDQBertForMaskedLM"),y8o=o(" (QDQBert model)"),L8o=l(),i1=a("li"),zce=a("strong"),x8o=o("reformer"),$8o=o(" \u2014 "),kD=a("a"),k8o=o("ReformerForMaskedLM"),S8o=o(" (Reformer model)"),R8o=l(),d1=a("li"),Wce=a("strong"),P8o=o("rembert"),B8o=o(" \u2014 "),SD=a("a"),I8o=o("RemBertForMaskedLM"),q8o=o(" (RemBERT model)"),N8o=l(),c1=a("li"),Qce=a("strong"),j8o=o("roberta"),D8o=o(" \u2014 "),RD=a("a"),G8o=o("RobertaForMaskedLM"),O8o=o(" (RoBERTa model)"),V8o=l(),f1=a("li"),Hce=a("strong"),X8o=o("roformer"),z8o=o(" \u2014 "),PD=a("a"),W8o=o("RoFormerForMaskedLM"),Q8o=o(" (RoFormer model)"),H8o=l(),m1=a("li"),Uce=a("strong"),U8o=o("squeezebert"),J8o=o(" \u2014 "),BD=a("a"),Y8o=o("SqueezeBertForMaskedLM"),K8o=o(" (SqueezeBERT model)"),Z8o=l(),g1=a("li"),Jce=a("strong"),e7o=o("tapas"),o7o=o(" \u2014 "),ID=a("a"),r7o=o("TapasForMaskedLM"),t7o=o(" (TAPAS model)"),a7o=l(),h1=a("li"),Yce=a("strong"),n7o=o("wav2vec2"),s7o=o(" \u2014 "),Kce=a("code"),l7o=o("Wav2Vec2ForMaskedLM"),i7o=o(" (Wav2Vec2 model)"),d7o=l(),p1=a("li"),Zce=a("strong"),c7o=o("xlm"),f7o=o(" \u2014 "),qD=a("a"),m7o=o("XLMWithLMHeadModel"),g7o=o(" (XLM model)"),h7o=l(),u1=a("li"),efe=a("strong"),p7o=o("xlm-roberta"),u7o=o(" \u2014 "),ND=a("a"),_7o=o("XLMRobertaForMaskedLM"),b7o=o(" (XLM-RoBERTa model)"),v7o=l(),_1=a("li"),ofe=a("strong"),F7o=o("xlm-roberta-xl"),T7o=o(" \u2014 "),jD=a("a"),M7o=o("XLMRobertaXLForMaskedLM"),E7o=o(" (XLM-RoBERTa-XL model)"),C7o=l(),b1=a("li"),rfe=a("strong"),w7o=o("yoso"),A7o=o(" \u2014 "),DD=a("a"),y7o=o("YosoForMaskedLM"),L7o=o(" (YOSO model)"),x7o=l(),v1=a("p"),$7o=o("The model is set in evaluation mode by default using "),tfe=a("code"),k7o=o("model.eval()"),S7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),R7o=o("model.train()"),P7o=l(),F(F1.$$.fragment),vNe=l(),qi=a("h2"),T1=a("a"),nfe=a("span"),F(vL.$$.fragment),B7o=l(),sfe=a("span"),I7o=o("AutoModelForSeq2SeqLM"),FNe=l(),So=a("div"),F(FL.$$.fragment),q7o=l(),Ni=a("p"),N7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GD=a("a"),j7o=o("from_pretrained()"),D7o=o(" class method or the "),OD=a("a"),G7o=o("from_config()"),O7o=o(` class
method.`),V7o=l(),TL=a("p"),X7o=o("This class cannot be instantiated directly using "),lfe=a("code"),z7o=o("__init__()"),W7o=o(" (throws an error)."),Q7o=l(),lt=a("div"),F(ML.$$.fragment),H7o=l(),ife=a("p"),U7o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),J7o=l(),ji=a("p"),Y7o=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),K7o=o("not"),Z7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),e9o=o("from_pretrained()"),o9o=o(" to load the model weights."),r9o=l(),F(M1.$$.fragment),t9o=l(),eo=a("div"),F(EL.$$.fragment),a9o=l(),cfe=a("p"),n9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s9o=l(),Sa=a("p"),l9o=o("The model class to instantiate is selected based on the "),ffe=a("code"),i9o=o("model_type"),d9o=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),c9o=o("pretrained_model_name_or_path"),f9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),m9o=o("pretrained_model_name_or_path"),g9o=o(":"),h9o=l(),ue=a("ul"),E1=a("li"),hfe=a("strong"),p9o=o("bart"),u9o=o(" \u2014 "),XD=a("a"),_9o=o("BartForConditionalGeneration"),b9o=o(" (BART model)"),v9o=l(),C1=a("li"),pfe=a("strong"),F9o=o("bigbird_pegasus"),T9o=o(" \u2014 "),zD=a("a"),M9o=o("BigBirdPegasusForConditionalGeneration"),E9o=o(" (BigBirdPegasus model)"),C9o=l(),w1=a("li"),ufe=a("strong"),w9o=o("blenderbot"),A9o=o(" \u2014 "),WD=a("a"),y9o=o("BlenderbotForConditionalGeneration"),L9o=o(" (Blenderbot model)"),x9o=l(),A1=a("li"),_fe=a("strong"),$9o=o("blenderbot-small"),k9o=o(" \u2014 "),QD=a("a"),S9o=o("BlenderbotSmallForConditionalGeneration"),R9o=o(" (BlenderbotSmall model)"),P9o=l(),y1=a("li"),bfe=a("strong"),B9o=o("encoder-decoder"),I9o=o(" \u2014 "),HD=a("a"),q9o=o("EncoderDecoderModel"),N9o=o(" (Encoder decoder model)"),j9o=l(),L1=a("li"),vfe=a("strong"),D9o=o("fsmt"),G9o=o(" \u2014 "),UD=a("a"),O9o=o("FSMTForConditionalGeneration"),V9o=o(" (FairSeq Machine-Translation model)"),X9o=l(),x1=a("li"),Ffe=a("strong"),z9o=o("led"),W9o=o(" \u2014 "),JD=a("a"),Q9o=o("LEDForConditionalGeneration"),H9o=o(" (LED model)"),U9o=l(),$1=a("li"),Tfe=a("strong"),J9o=o("m2m_100"),Y9o=o(" \u2014 "),YD=a("a"),K9o=o("M2M100ForConditionalGeneration"),Z9o=o(" (M2M100 model)"),exo=l(),k1=a("li"),Mfe=a("strong"),oxo=o("marian"),rxo=o(" \u2014 "),KD=a("a"),txo=o("MarianMTModel"),axo=o(" (Marian model)"),nxo=l(),S1=a("li"),Efe=a("strong"),sxo=o("mbart"),lxo=o(" \u2014 "),ZD=a("a"),ixo=o("MBartForConditionalGeneration"),dxo=o(" (mBART model)"),cxo=l(),R1=a("li"),Cfe=a("strong"),fxo=o("mt5"),mxo=o(" \u2014 "),eG=a("a"),gxo=o("MT5ForConditionalGeneration"),hxo=o(" (mT5 model)"),pxo=l(),P1=a("li"),wfe=a("strong"),uxo=o("pegasus"),_xo=o(" \u2014 "),oG=a("a"),bxo=o("PegasusForConditionalGeneration"),vxo=o(" (Pegasus model)"),Fxo=l(),B1=a("li"),Afe=a("strong"),Txo=o("plbart"),Mxo=o(" \u2014 "),rG=a("a"),Exo=o("PLBartForConditionalGeneration"),Cxo=o(" (PLBart model)"),wxo=l(),I1=a("li"),yfe=a("strong"),Axo=o("prophetnet"),yxo=o(" \u2014 "),tG=a("a"),Lxo=o("ProphetNetForConditionalGeneration"),xxo=o(" (ProphetNet model)"),$xo=l(),q1=a("li"),Lfe=a("strong"),kxo=o("t5"),Sxo=o(" \u2014 "),aG=a("a"),Rxo=o("T5ForConditionalGeneration"),Pxo=o(" (T5 model)"),Bxo=l(),N1=a("li"),xfe=a("strong"),Ixo=o("xlm-prophetnet"),qxo=o(" \u2014 "),nG=a("a"),Nxo=o("XLMProphetNetForConditionalGeneration"),jxo=o(" (XLMProphetNet model)"),Dxo=l(),j1=a("p"),Gxo=o("The model is set in evaluation mode by default using "),$fe=a("code"),Oxo=o("model.eval()"),Vxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=a("code"),Xxo=o("model.train()"),zxo=l(),F(D1.$$.fragment),TNe=l(),Di=a("h2"),G1=a("a"),Sfe=a("span"),F(CL.$$.fragment),Wxo=l(),Rfe=a("span"),Qxo=o("AutoModelForSequenceClassification"),MNe=l(),Ro=a("div"),F(wL.$$.fragment),Hxo=l(),Gi=a("p"),Uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sG=a("a"),Jxo=o("from_pretrained()"),Yxo=o(" class method or the "),lG=a("a"),Kxo=o("from_config()"),Zxo=o(` class
method.`),e$o=l(),AL=a("p"),o$o=o("This class cannot be instantiated directly using "),Pfe=a("code"),r$o=o("__init__()"),t$o=o(" (throws an error)."),a$o=l(),it=a("div"),F(yL.$$.fragment),n$o=l(),Bfe=a("p"),s$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l$o=l(),Oi=a("p"),i$o=o(`Note:
Loading a model from its configuration file does `),Ife=a("strong"),d$o=o("not"),c$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=a("a"),f$o=o("from_pretrained()"),m$o=o(" to load the model weights."),g$o=l(),F(O1.$$.fragment),h$o=l(),oo=a("div"),F(LL.$$.fragment),p$o=l(),qfe=a("p"),u$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_$o=l(),Ra=a("p"),b$o=o("The model class to instantiate is selected based on the "),Nfe=a("code"),v$o=o("model_type"),F$o=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),T$o=o("pretrained_model_name_or_path"),M$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),E$o=o("pretrained_model_name_or_path"),C$o=o(":"),w$o=l(),q=a("ul"),V1=a("li"),Gfe=a("strong"),A$o=o("albert"),y$o=o(" \u2014 "),dG=a("a"),L$o=o("AlbertForSequenceClassification"),x$o=o(" (ALBERT model)"),$$o=l(),X1=a("li"),Ofe=a("strong"),k$o=o("bart"),S$o=o(" \u2014 "),cG=a("a"),R$o=o("BartForSequenceClassification"),P$o=o(" (BART model)"),B$o=l(),z1=a("li"),Vfe=a("strong"),I$o=o("bert"),q$o=o(" \u2014 "),fG=a("a"),N$o=o("BertForSequenceClassification"),j$o=o(" (BERT model)"),D$o=l(),W1=a("li"),Xfe=a("strong"),G$o=o("big_bird"),O$o=o(" \u2014 "),mG=a("a"),V$o=o("BigBirdForSequenceClassification"),X$o=o(" (BigBird model)"),z$o=l(),Q1=a("li"),zfe=a("strong"),W$o=o("bigbird_pegasus"),Q$o=o(" \u2014 "),gG=a("a"),H$o=o("BigBirdPegasusForSequenceClassification"),U$o=o(" (BigBirdPegasus model)"),J$o=l(),H1=a("li"),Wfe=a("strong"),Y$o=o("camembert"),K$o=o(" \u2014 "),hG=a("a"),Z$o=o("CamembertForSequenceClassification"),eko=o(" (CamemBERT model)"),oko=l(),U1=a("li"),Qfe=a("strong"),rko=o("canine"),tko=o(" \u2014 "),pG=a("a"),ako=o("CanineForSequenceClassification"),nko=o(" (Canine model)"),sko=l(),J1=a("li"),Hfe=a("strong"),lko=o("convbert"),iko=o(" \u2014 "),uG=a("a"),dko=o("ConvBertForSequenceClassification"),cko=o(" (ConvBERT model)"),fko=l(),Y1=a("li"),Ufe=a("strong"),mko=o("ctrl"),gko=o(" \u2014 "),_G=a("a"),hko=o("CTRLForSequenceClassification"),pko=o(" (CTRL model)"),uko=l(),K1=a("li"),Jfe=a("strong"),_ko=o("data2vec-text"),bko=o(" \u2014 "),bG=a("a"),vko=o("Data2VecTextForSequenceClassification"),Fko=o(" (Data2VecText model)"),Tko=l(),Z1=a("li"),Yfe=a("strong"),Mko=o("deberta"),Eko=o(" \u2014 "),vG=a("a"),Cko=o("DebertaForSequenceClassification"),wko=o(" (DeBERTa model)"),Ako=l(),eb=a("li"),Kfe=a("strong"),yko=o("deberta-v2"),Lko=o(" \u2014 "),FG=a("a"),xko=o("DebertaV2ForSequenceClassification"),$ko=o(" (DeBERTa-v2 model)"),kko=l(),ob=a("li"),Zfe=a("strong"),Sko=o("distilbert"),Rko=o(" \u2014 "),TG=a("a"),Pko=o("DistilBertForSequenceClassification"),Bko=o(" (DistilBERT model)"),Iko=l(),rb=a("li"),eme=a("strong"),qko=o("electra"),Nko=o(" \u2014 "),MG=a("a"),jko=o("ElectraForSequenceClassification"),Dko=o(" (ELECTRA model)"),Gko=l(),tb=a("li"),ome=a("strong"),Oko=o("flaubert"),Vko=o(" \u2014 "),EG=a("a"),Xko=o("FlaubertForSequenceClassification"),zko=o(" (FlauBERT model)"),Wko=l(),ab=a("li"),rme=a("strong"),Qko=o("fnet"),Hko=o(" \u2014 "),CG=a("a"),Uko=o("FNetForSequenceClassification"),Jko=o(" (FNet model)"),Yko=l(),nb=a("li"),tme=a("strong"),Kko=o("funnel"),Zko=o(" \u2014 "),wG=a("a"),eSo=o("FunnelForSequenceClassification"),oSo=o(" (Funnel Transformer model)"),rSo=l(),sb=a("li"),ame=a("strong"),tSo=o("gpt2"),aSo=o(" \u2014 "),AG=a("a"),nSo=o("GPT2ForSequenceClassification"),sSo=o(" (OpenAI GPT-2 model)"),lSo=l(),lb=a("li"),nme=a("strong"),iSo=o("gpt_neo"),dSo=o(" \u2014 "),yG=a("a"),cSo=o("GPTNeoForSequenceClassification"),fSo=o(" (GPT Neo model)"),mSo=l(),ib=a("li"),sme=a("strong"),gSo=o("gptj"),hSo=o(" \u2014 "),LG=a("a"),pSo=o("GPTJForSequenceClassification"),uSo=o(" (GPT-J model)"),_So=l(),db=a("li"),lme=a("strong"),bSo=o("ibert"),vSo=o(" \u2014 "),xG=a("a"),FSo=o("IBertForSequenceClassification"),TSo=o(" (I-BERT model)"),MSo=l(),cb=a("li"),ime=a("strong"),ESo=o("layoutlm"),CSo=o(" \u2014 "),$G=a("a"),wSo=o("LayoutLMForSequenceClassification"),ASo=o(" (LayoutLM model)"),ySo=l(),fb=a("li"),dme=a("strong"),LSo=o("layoutlmv2"),xSo=o(" \u2014 "),kG=a("a"),$So=o("LayoutLMv2ForSequenceClassification"),kSo=o(" (LayoutLMv2 model)"),SSo=l(),mb=a("li"),cme=a("strong"),RSo=o("layoutlmv3"),PSo=o(" \u2014 "),SG=a("a"),BSo=o("LayoutLMv3ForSequenceClassification"),ISo=o(" (LayoutLMv3 model)"),qSo=l(),gb=a("li"),fme=a("strong"),NSo=o("led"),jSo=o(" \u2014 "),RG=a("a"),DSo=o("LEDForSequenceClassification"),GSo=o(" (LED model)"),OSo=l(),hb=a("li"),mme=a("strong"),VSo=o("longformer"),XSo=o(" \u2014 "),PG=a("a"),zSo=o("LongformerForSequenceClassification"),WSo=o(" (Longformer model)"),QSo=l(),pb=a("li"),gme=a("strong"),HSo=o("mbart"),USo=o(" \u2014 "),BG=a("a"),JSo=o("MBartForSequenceClassification"),YSo=o(" (mBART model)"),KSo=l(),ub=a("li"),hme=a("strong"),ZSo=o("megatron-bert"),eRo=o(" \u2014 "),IG=a("a"),oRo=o("MegatronBertForSequenceClassification"),rRo=o(" (MegatronBert model)"),tRo=l(),_b=a("li"),pme=a("strong"),aRo=o("mobilebert"),nRo=o(" \u2014 "),qG=a("a"),sRo=o("MobileBertForSequenceClassification"),lRo=o(" (MobileBERT model)"),iRo=l(),bb=a("li"),ume=a("strong"),dRo=o("mpnet"),cRo=o(" \u2014 "),NG=a("a"),fRo=o("MPNetForSequenceClassification"),mRo=o(" (MPNet model)"),gRo=l(),vb=a("li"),_me=a("strong"),hRo=o("nystromformer"),pRo=o(" \u2014 "),jG=a("a"),uRo=o("NystromformerForSequenceClassification"),_Ro=o(" (Nystromformer model)"),bRo=l(),Fb=a("li"),bme=a("strong"),vRo=o("openai-gpt"),FRo=o(" \u2014 "),DG=a("a"),TRo=o("OpenAIGPTForSequenceClassification"),MRo=o(" (OpenAI GPT model)"),ERo=l(),Tb=a("li"),vme=a("strong"),CRo=o("perceiver"),wRo=o(" \u2014 "),GG=a("a"),ARo=o("PerceiverForSequenceClassification"),yRo=o(" (Perceiver model)"),LRo=l(),Mb=a("li"),Fme=a("strong"),xRo=o("plbart"),$Ro=o(" \u2014 "),OG=a("a"),kRo=o("PLBartForSequenceClassification"),SRo=o(" (PLBart model)"),RRo=l(),Eb=a("li"),Tme=a("strong"),PRo=o("qdqbert"),BRo=o(" \u2014 "),VG=a("a"),IRo=o("QDQBertForSequenceClassification"),qRo=o(" (QDQBert model)"),NRo=l(),Cb=a("li"),Mme=a("strong"),jRo=o("reformer"),DRo=o(" \u2014 "),XG=a("a"),GRo=o("ReformerForSequenceClassification"),ORo=o(" (Reformer model)"),VRo=l(),wb=a("li"),Eme=a("strong"),XRo=o("rembert"),zRo=o(" \u2014 "),zG=a("a"),WRo=o("RemBertForSequenceClassification"),QRo=o(" (RemBERT model)"),HRo=l(),Ab=a("li"),Cme=a("strong"),URo=o("roberta"),JRo=o(" \u2014 "),WG=a("a"),YRo=o("RobertaForSequenceClassification"),KRo=o(" (RoBERTa model)"),ZRo=l(),yb=a("li"),wme=a("strong"),ePo=o("roformer"),oPo=o(" \u2014 "),QG=a("a"),rPo=o("RoFormerForSequenceClassification"),tPo=o(" (RoFormer model)"),aPo=l(),Lb=a("li"),Ame=a("strong"),nPo=o("squeezebert"),sPo=o(" \u2014 "),HG=a("a"),lPo=o("SqueezeBertForSequenceClassification"),iPo=o(" (SqueezeBERT model)"),dPo=l(),xb=a("li"),yme=a("strong"),cPo=o("tapas"),fPo=o(" \u2014 "),UG=a("a"),mPo=o("TapasForSequenceClassification"),gPo=o(" (TAPAS model)"),hPo=l(),$b=a("li"),Lme=a("strong"),pPo=o("transfo-xl"),uPo=o(" \u2014 "),JG=a("a"),_Po=o("TransfoXLForSequenceClassification"),bPo=o(" (Transformer-XL model)"),vPo=l(),kb=a("li"),xme=a("strong"),FPo=o("xlm"),TPo=o(" \u2014 "),YG=a("a"),MPo=o("XLMForSequenceClassification"),EPo=o(" (XLM model)"),CPo=l(),Sb=a("li"),$me=a("strong"),wPo=o("xlm-roberta"),APo=o(" \u2014 "),KG=a("a"),yPo=o("XLMRobertaForSequenceClassification"),LPo=o(" (XLM-RoBERTa model)"),xPo=l(),Rb=a("li"),kme=a("strong"),$Po=o("xlm-roberta-xl"),kPo=o(" \u2014 "),ZG=a("a"),SPo=o("XLMRobertaXLForSequenceClassification"),RPo=o(" (XLM-RoBERTa-XL model)"),PPo=l(),Pb=a("li"),Sme=a("strong"),BPo=o("xlnet"),IPo=o(" \u2014 "),eO=a("a"),qPo=o("XLNetForSequenceClassification"),NPo=o(" (XLNet model)"),jPo=l(),Bb=a("li"),Rme=a("strong"),DPo=o("yoso"),GPo=o(" \u2014 "),oO=a("a"),OPo=o("YosoForSequenceClassification"),VPo=o(" (YOSO model)"),XPo=l(),Ib=a("p"),zPo=o("The model is set in evaluation mode by default using "),Pme=a("code"),WPo=o("model.eval()"),QPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=a("code"),HPo=o("model.train()"),UPo=l(),F(qb.$$.fragment),ENe=l(),Vi=a("h2"),Nb=a("a"),Ime=a("span"),F(xL.$$.fragment),JPo=l(),qme=a("span"),YPo=o("AutoModelForMultipleChoice"),CNe=l(),Po=a("div"),F($L.$$.fragment),KPo=l(),Xi=a("p"),ZPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rO=a("a"),eBo=o("from_pretrained()"),oBo=o(" class method or the "),tO=a("a"),rBo=o("from_config()"),tBo=o(` class
method.`),aBo=l(),kL=a("p"),nBo=o("This class cannot be instantiated directly using "),Nme=a("code"),sBo=o("__init__()"),lBo=o(" (throws an error)."),iBo=l(),dt=a("div"),F(SL.$$.fragment),dBo=l(),jme=a("p"),cBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fBo=l(),zi=a("p"),mBo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),gBo=o("not"),hBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),pBo=o("from_pretrained()"),uBo=o(" to load the model weights."),_Bo=l(),F(jb.$$.fragment),bBo=l(),ro=a("div"),F(RL.$$.fragment),vBo=l(),Gme=a("p"),FBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TBo=l(),Pa=a("p"),MBo=o("The model class to instantiate is selected based on the "),Ome=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(":"),xBo=l(),K=a("ul"),Db=a("li"),zme=a("strong"),$Bo=o("albert"),kBo=o(" \u2014 "),nO=a("a"),SBo=o("AlbertForMultipleChoice"),RBo=o(" (ALBERT model)"),PBo=l(),Gb=a("li"),Wme=a("strong"),BBo=o("bert"),IBo=o(" \u2014 "),sO=a("a"),qBo=o("BertForMultipleChoice"),NBo=o(" (BERT model)"),jBo=l(),Ob=a("li"),Qme=a("strong"),DBo=o("big_bird"),GBo=o(" \u2014 "),lO=a("a"),OBo=o("BigBirdForMultipleChoice"),VBo=o(" (BigBird model)"),XBo=l(),Vb=a("li"),Hme=a("strong"),zBo=o("camembert"),WBo=o(" \u2014 "),iO=a("a"),QBo=o("CamembertForMultipleChoice"),HBo=o(" (CamemBERT model)"),UBo=l(),Xb=a("li"),Ume=a("strong"),JBo=o("canine"),YBo=o(" \u2014 "),dO=a("a"),KBo=o("CanineForMultipleChoice"),ZBo=o(" (Canine model)"),eIo=l(),zb=a("li"),Jme=a("strong"),oIo=o("convbert"),rIo=o(" \u2014 "),cO=a("a"),tIo=o("ConvBertForMultipleChoice"),aIo=o(" (ConvBERT model)"),nIo=l(),Wb=a("li"),Yme=a("strong"),sIo=o("data2vec-text"),lIo=o(" \u2014 "),fO=a("a"),iIo=o("Data2VecTextForMultipleChoice"),dIo=o(" (Data2VecText model)"),cIo=l(),Qb=a("li"),Kme=a("strong"),fIo=o("deberta-v2"),mIo=o(" \u2014 "),mO=a("a"),gIo=o("DebertaV2ForMultipleChoice"),hIo=o(" (DeBERTa-v2 model)"),pIo=l(),Hb=a("li"),Zme=a("strong"),uIo=o("distilbert"),_Io=o(" \u2014 "),gO=a("a"),bIo=o("DistilBertForMultipleChoice"),vIo=o(" (DistilBERT model)"),FIo=l(),Ub=a("li"),ege=a("strong"),TIo=o("electra"),MIo=o(" \u2014 "),hO=a("a"),EIo=o("ElectraForMultipleChoice"),CIo=o(" (ELECTRA model)"),wIo=l(),Jb=a("li"),oge=a("strong"),AIo=o("flaubert"),yIo=o(" \u2014 "),pO=a("a"),LIo=o("FlaubertForMultipleChoice"),xIo=o(" (FlauBERT model)"),$Io=l(),Yb=a("li"),rge=a("strong"),kIo=o("fnet"),SIo=o(" \u2014 "),uO=a("a"),RIo=o("FNetForMultipleChoice"),PIo=o(" (FNet model)"),BIo=l(),Kb=a("li"),tge=a("strong"),IIo=o("funnel"),qIo=o(" \u2014 "),_O=a("a"),NIo=o("FunnelForMultipleChoice"),jIo=o(" (Funnel Transformer model)"),DIo=l(),Zb=a("li"),age=a("strong"),GIo=o("ibert"),OIo=o(" \u2014 "),bO=a("a"),VIo=o("IBertForMultipleChoice"),XIo=o(" (I-BERT model)"),zIo=l(),e2=a("li"),nge=a("strong"),WIo=o("longformer"),QIo=o(" \u2014 "),vO=a("a"),HIo=o("LongformerForMultipleChoice"),UIo=o(" (Longformer model)"),JIo=l(),o2=a("li"),sge=a("strong"),YIo=o("megatron-bert"),KIo=o(" \u2014 "),FO=a("a"),ZIo=o("MegatronBertForMultipleChoice"),eqo=o(" (MegatronBert model)"),oqo=l(),r2=a("li"),lge=a("strong"),rqo=o("mobilebert"),tqo=o(" \u2014 "),TO=a("a"),aqo=o("MobileBertForMultipleChoice"),nqo=o(" (MobileBERT model)"),sqo=l(),t2=a("li"),ige=a("strong"),lqo=o("mpnet"),iqo=o(" \u2014 "),MO=a("a"),dqo=o("MPNetForMultipleChoice"),cqo=o(" (MPNet model)"),fqo=l(),a2=a("li"),dge=a("strong"),mqo=o("nystromformer"),gqo=o(" \u2014 "),EO=a("a"),hqo=o("NystromformerForMultipleChoice"),pqo=o(" (Nystromformer model)"),uqo=l(),n2=a("li"),cge=a("strong"),_qo=o("qdqbert"),bqo=o(" \u2014 "),CO=a("a"),vqo=o("QDQBertForMultipleChoice"),Fqo=o(" (QDQBert model)"),Tqo=l(),s2=a("li"),fge=a("strong"),Mqo=o("rembert"),Eqo=o(" \u2014 "),wO=a("a"),Cqo=o("RemBertForMultipleChoice"),wqo=o(" (RemBERT model)"),Aqo=l(),l2=a("li"),mge=a("strong"),yqo=o("roberta"),Lqo=o(" \u2014 "),AO=a("a"),xqo=o("RobertaForMultipleChoice"),$qo=o(" (RoBERTa model)"),kqo=l(),i2=a("li"),gge=a("strong"),Sqo=o("roformer"),Rqo=o(" \u2014 "),yO=a("a"),Pqo=o("RoFormerForMultipleChoice"),Bqo=o(" (RoFormer model)"),Iqo=l(),d2=a("li"),hge=a("strong"),qqo=o("squeezebert"),Nqo=o(" \u2014 "),LO=a("a"),jqo=o("SqueezeBertForMultipleChoice"),Dqo=o(" (SqueezeBERT model)"),Gqo=l(),c2=a("li"),pge=a("strong"),Oqo=o("xlm"),Vqo=o(" \u2014 "),xO=a("a"),Xqo=o("XLMForMultipleChoice"),zqo=o(" (XLM model)"),Wqo=l(),f2=a("li"),uge=a("strong"),Qqo=o("xlm-roberta"),Hqo=o(" \u2014 "),$O=a("a"),Uqo=o("XLMRobertaForMultipleChoice"),Jqo=o(" (XLM-RoBERTa model)"),Yqo=l(),m2=a("li"),_ge=a("strong"),Kqo=o("xlm-roberta-xl"),Zqo=o(" \u2014 "),kO=a("a"),eNo=o("XLMRobertaXLForMultipleChoice"),oNo=o(" (XLM-RoBERTa-XL model)"),rNo=l(),g2=a("li"),bge=a("strong"),tNo=o("xlnet"),aNo=o(" \u2014 "),SO=a("a"),nNo=o("XLNetForMultipleChoice"),sNo=o(" (XLNet model)"),lNo=l(),h2=a("li"),vge=a("strong"),iNo=o("yoso"),dNo=o(" \u2014 "),RO=a("a"),cNo=o("YosoForMultipleChoice"),fNo=o(" (YOSO model)"),mNo=l(),p2=a("p"),gNo=o("The model is set in evaluation mode by default using "),Fge=a("code"),hNo=o("model.eval()"),pNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),uNo=o("model.train()"),_No=l(),F(u2.$$.fragment),wNe=l(),Wi=a("h2"),_2=a("a"),Mge=a("span"),F(PL.$$.fragment),bNo=l(),Ege=a("span"),vNo=o("AutoModelForNextSentencePrediction"),ANe=l(),Bo=a("div"),F(BL.$$.fragment),FNo=l(),Qi=a("p"),TNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PO=a("a"),MNo=o("from_pretrained()"),ENo=o(" class method or the "),BO=a("a"),CNo=o("from_config()"),wNo=o(` class
method.`),ANo=l(),IL=a("p"),yNo=o("This class cannot be instantiated directly using "),Cge=a("code"),LNo=o("__init__()"),xNo=o(" (throws an error)."),$No=l(),ct=a("div"),F(qL.$$.fragment),kNo=l(),wge=a("p"),SNo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),RNo=l(),Hi=a("p"),PNo=o(`Note:
Loading a model from its configuration file does `),Age=a("strong"),BNo=o("not"),INo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),qNo=o("from_pretrained()"),NNo=o(" to load the model weights."),jNo=l(),F(b2.$$.fragment),DNo=l(),to=a("div"),F(NL.$$.fragment),GNo=l(),yge=a("p"),ONo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VNo=l(),Ba=a("p"),XNo=o("The model class to instantiate is selected based on the "),Lge=a("code"),zNo=o("model_type"),WNo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),QNo=o("pretrained_model_name_or_path"),HNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=a("code"),UNo=o("pretrained_model_name_or_path"),JNo=o(":"),YNo=l(),Yr=a("ul"),v2=a("li"),kge=a("strong"),KNo=o("bert"),ZNo=o(" \u2014 "),qO=a("a"),ejo=o("BertForNextSentencePrediction"),ojo=o(" (BERT model)"),rjo=l(),F2=a("li"),Sge=a("strong"),tjo=o("fnet"),ajo=o(" \u2014 "),NO=a("a"),njo=o("FNetForNextSentencePrediction"),sjo=o(" (FNet model)"),ljo=l(),T2=a("li"),Rge=a("strong"),ijo=o("megatron-bert"),djo=o(" \u2014 "),jO=a("a"),cjo=o("MegatronBertForNextSentencePrediction"),fjo=o(" (MegatronBert model)"),mjo=l(),M2=a("li"),Pge=a("strong"),gjo=o("mobilebert"),hjo=o(" \u2014 "),DO=a("a"),pjo=o("MobileBertForNextSentencePrediction"),ujo=o(" (MobileBERT model)"),_jo=l(),E2=a("li"),Bge=a("strong"),bjo=o("qdqbert"),vjo=o(" \u2014 "),GO=a("a"),Fjo=o("QDQBertForNextSentencePrediction"),Tjo=o(" (QDQBert model)"),Mjo=l(),C2=a("p"),Ejo=o("The model is set in evaluation mode by default using "),Ige=a("code"),Cjo=o("model.eval()"),wjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),Ajo=o("model.train()"),yjo=l(),F(w2.$$.fragment),yNe=l(),Ui=a("h2"),A2=a("a"),Nge=a("span"),F(jL.$$.fragment),Ljo=l(),jge=a("span"),xjo=o("AutoModelForTokenClassification"),LNe=l(),Io=a("div"),F(DL.$$.fragment),$jo=l(),Ji=a("p"),kjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OO=a("a"),Sjo=o("from_pretrained()"),Rjo=o(" class method or the "),VO=a("a"),Pjo=o("from_config()"),Bjo=o(` class
method.`),Ijo=l(),GL=a("p"),qjo=o("This class cannot be instantiated directly using "),Dge=a("code"),Njo=o("__init__()"),jjo=o(" (throws an error)."),Djo=l(),ft=a("div"),F(OL.$$.fragment),Gjo=l(),Gge=a("p"),Ojo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vjo=l(),Yi=a("p"),Xjo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),zjo=o("not"),Wjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=a("a"),Qjo=o("from_pretrained()"),Hjo=o(" to load the model weights."),Ujo=l(),F(y2.$$.fragment),Jjo=l(),ao=a("div"),F(VL.$$.fragment),Yjo=l(),Vge=a("p"),Kjo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zjo=l(),Ia=a("p"),eDo=o("The model class to instantiate is selected based on the "),Xge=a("code"),oDo=o("model_type"),rDo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),tDo=o("pretrained_model_name_or_path"),aDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),nDo=o("pretrained_model_name_or_path"),sDo=o(":"),lDo=l(),H=a("ul"),L2=a("li"),Qge=a("strong"),iDo=o("albert"),dDo=o(" \u2014 "),zO=a("a"),cDo=o("AlbertForTokenClassification"),fDo=o(" (ALBERT model)"),mDo=l(),x2=a("li"),Hge=a("strong"),gDo=o("bert"),hDo=o(" \u2014 "),WO=a("a"),pDo=o("BertForTokenClassification"),uDo=o(" (BERT model)"),_Do=l(),$2=a("li"),Uge=a("strong"),bDo=o("big_bird"),vDo=o(" \u2014 "),QO=a("a"),FDo=o("BigBirdForTokenClassification"),TDo=o(" (BigBird model)"),MDo=l(),k2=a("li"),Jge=a("strong"),EDo=o("camembert"),CDo=o(" \u2014 "),HO=a("a"),wDo=o("CamembertForTokenClassification"),ADo=o(" (CamemBERT model)"),yDo=l(),S2=a("li"),Yge=a("strong"),LDo=o("canine"),xDo=o(" \u2014 "),UO=a("a"),$Do=o("CanineForTokenClassification"),kDo=o(" (Canine model)"),SDo=l(),R2=a("li"),Kge=a("strong"),RDo=o("convbert"),PDo=o(" \u2014 "),JO=a("a"),BDo=o("ConvBertForTokenClassification"),IDo=o(" (ConvBERT model)"),qDo=l(),P2=a("li"),Zge=a("strong"),NDo=o("data2vec-text"),jDo=o(" \u2014 "),YO=a("a"),DDo=o("Data2VecTextForTokenClassification"),GDo=o(" (Data2VecText model)"),ODo=l(),B2=a("li"),ehe=a("strong"),VDo=o("deberta"),XDo=o(" \u2014 "),KO=a("a"),zDo=o("DebertaForTokenClassification"),WDo=o(" (DeBERTa model)"),QDo=l(),I2=a("li"),ohe=a("strong"),HDo=o("deberta-v2"),UDo=o(" \u2014 "),ZO=a("a"),JDo=o("DebertaV2ForTokenClassification"),YDo=o(" (DeBERTa-v2 model)"),KDo=l(),q2=a("li"),rhe=a("strong"),ZDo=o("distilbert"),eGo=o(" \u2014 "),eV=a("a"),oGo=o("DistilBertForTokenClassification"),rGo=o(" (DistilBERT model)"),tGo=l(),N2=a("li"),the=a("strong"),aGo=o("electra"),nGo=o(" \u2014 "),oV=a("a"),sGo=o("ElectraForTokenClassification"),lGo=o(" (ELECTRA model)"),iGo=l(),j2=a("li"),ahe=a("strong"),dGo=o("flaubert"),cGo=o(" \u2014 "),rV=a("a"),fGo=o("FlaubertForTokenClassification"),mGo=o(" (FlauBERT model)"),gGo=l(),D2=a("li"),nhe=a("strong"),hGo=o("fnet"),pGo=o(" \u2014 "),tV=a("a"),uGo=o("FNetForTokenClassification"),_Go=o(" (FNet model)"),bGo=l(),G2=a("li"),she=a("strong"),vGo=o("funnel"),FGo=o(" \u2014 "),aV=a("a"),TGo=o("FunnelForTokenClassification"),MGo=o(" (Funnel Transformer model)"),EGo=l(),O2=a("li"),lhe=a("strong"),CGo=o("gpt2"),wGo=o(" \u2014 "),nV=a("a"),AGo=o("GPT2ForTokenClassification"),yGo=o(" (OpenAI GPT-2 model)"),LGo=l(),V2=a("li"),ihe=a("strong"),xGo=o("ibert"),$Go=o(" \u2014 "),sV=a("a"),kGo=o("IBertForTokenClassification"),SGo=o(" (I-BERT model)"),RGo=l(),X2=a("li"),dhe=a("strong"),PGo=o("layoutlm"),BGo=o(" \u2014 "),lV=a("a"),IGo=o("LayoutLMForTokenClassification"),qGo=o(" (LayoutLM model)"),NGo=l(),z2=a("li"),che=a("strong"),jGo=o("layoutlmv2"),DGo=o(" \u2014 "),iV=a("a"),GGo=o("LayoutLMv2ForTokenClassification"),OGo=o(" (LayoutLMv2 model)"),VGo=l(),W2=a("li"),fhe=a("strong"),XGo=o("layoutlmv3"),zGo=o(" \u2014 "),dV=a("a"),WGo=o("LayoutLMv3ForTokenClassification"),QGo=o(" (LayoutLMv3 model)"),HGo=l(),Q2=a("li"),mhe=a("strong"),UGo=o("longformer"),JGo=o(" \u2014 "),cV=a("a"),YGo=o("LongformerForTokenClassification"),KGo=o(" (Longformer model)"),ZGo=l(),H2=a("li"),ghe=a("strong"),eOo=o("megatron-bert"),oOo=o(" \u2014 "),fV=a("a"),rOo=o("MegatronBertForTokenClassification"),tOo=o(" (MegatronBert model)"),aOo=l(),U2=a("li"),hhe=a("strong"),nOo=o("mobilebert"),sOo=o(" \u2014 "),mV=a("a"),lOo=o("MobileBertForTokenClassification"),iOo=o(" (MobileBERT model)"),dOo=l(),J2=a("li"),phe=a("strong"),cOo=o("mpnet"),fOo=o(" \u2014 "),gV=a("a"),mOo=o("MPNetForTokenClassification"),gOo=o(" (MPNet model)"),hOo=l(),Y2=a("li"),uhe=a("strong"),pOo=o("nystromformer"),uOo=o(" \u2014 "),hV=a("a"),_Oo=o("NystromformerForTokenClassification"),bOo=o(" (Nystromformer model)"),vOo=l(),K2=a("li"),_he=a("strong"),FOo=o("qdqbert"),TOo=o(" \u2014 "),pV=a("a"),MOo=o("QDQBertForTokenClassification"),EOo=o(" (QDQBert model)"),COo=l(),Z2=a("li"),bhe=a("strong"),wOo=o("rembert"),AOo=o(" \u2014 "),uV=a("a"),yOo=o("RemBertForTokenClassification"),LOo=o(" (RemBERT model)"),xOo=l(),e4=a("li"),vhe=a("strong"),$Oo=o("roberta"),kOo=o(" \u2014 "),_V=a("a"),SOo=o("RobertaForTokenClassification"),ROo=o(" (RoBERTa model)"),POo=l(),o4=a("li"),Fhe=a("strong"),BOo=o("roformer"),IOo=o(" \u2014 "),bV=a("a"),qOo=o("RoFormerForTokenClassification"),NOo=o(" (RoFormer model)"),jOo=l(),r4=a("li"),The=a("strong"),DOo=o("squeezebert"),GOo=o(" \u2014 "),vV=a("a"),OOo=o("SqueezeBertForTokenClassification"),VOo=o(" (SqueezeBERT model)"),XOo=l(),t4=a("li"),Mhe=a("strong"),zOo=o("xlm"),WOo=o(" \u2014 "),FV=a("a"),QOo=o("XLMForTokenClassification"),HOo=o(" (XLM model)"),UOo=l(),a4=a("li"),Ehe=a("strong"),JOo=o("xlm-roberta"),YOo=o(" \u2014 "),TV=a("a"),KOo=o("XLMRobertaForTokenClassification"),ZOo=o(" (XLM-RoBERTa model)"),eVo=l(),n4=a("li"),Che=a("strong"),oVo=o("xlm-roberta-xl"),rVo=o(" \u2014 "),MV=a("a"),tVo=o("XLMRobertaXLForTokenClassification"),aVo=o(" (XLM-RoBERTa-XL model)"),nVo=l(),s4=a("li"),whe=a("strong"),sVo=o("xlnet"),lVo=o(" \u2014 "),EV=a("a"),iVo=o("XLNetForTokenClassification"),dVo=o(" (XLNet model)"),cVo=l(),l4=a("li"),Ahe=a("strong"),fVo=o("yoso"),mVo=o(" \u2014 "),CV=a("a"),gVo=o("YosoForTokenClassification"),hVo=o(" (YOSO model)"),pVo=l(),i4=a("p"),uVo=o("The model is set in evaluation mode by default using "),yhe=a("code"),_Vo=o("model.eval()"),bVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),vVo=o("model.train()"),FVo=l(),F(d4.$$.fragment),xNe=l(),Ki=a("h2"),c4=a("a"),xhe=a("span"),F(XL.$$.fragment),TVo=l(),$he=a("span"),MVo=o("AutoModelForQuestionAnswering"),$Ne=l(),qo=a("div"),F(zL.$$.fragment),EVo=l(),Zi=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wV=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),AV=a("a"),yVo=o("from_config()"),LVo=o(` class
method.`),xVo=l(),WL=a("p"),$Vo=o("This class cannot be instantiated directly using "),khe=a("code"),kVo=o("__init__()"),SVo=o(" (throws an error)."),RVo=l(),mt=a("div"),F(QL.$$.fragment),PVo=l(),She=a("p"),BVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IVo=l(),ed=a("p"),qVo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),NVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),F(f4.$$.fragment),VVo=l(),no=a("div"),F(HL.$$.fragment),XVo=l(),Phe=a("p"),zVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WVo=l(),qa=a("p"),QVo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),HVo=o("model_type"),UVo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),JVo=o("pretrained_model_name_or_path"),YVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(":"),eXo=l(),V=a("ul"),m4=a("li"),Nhe=a("strong"),oXo=o("albert"),rXo=o(" \u2014 "),LV=a("a"),tXo=o("AlbertForQuestionAnswering"),aXo=o(" (ALBERT model)"),nXo=l(),g4=a("li"),jhe=a("strong"),sXo=o("bart"),lXo=o(" \u2014 "),xV=a("a"),iXo=o("BartForQuestionAnswering"),dXo=o(" (BART model)"),cXo=l(),h4=a("li"),Dhe=a("strong"),fXo=o("bert"),mXo=o(" \u2014 "),$V=a("a"),gXo=o("BertForQuestionAnswering"),hXo=o(" (BERT model)"),pXo=l(),p4=a("li"),Ghe=a("strong"),uXo=o("big_bird"),_Xo=o(" \u2014 "),kV=a("a"),bXo=o("BigBirdForQuestionAnswering"),vXo=o(" (BigBird model)"),FXo=l(),u4=a("li"),Ohe=a("strong"),TXo=o("bigbird_pegasus"),MXo=o(" \u2014 "),SV=a("a"),EXo=o("BigBirdPegasusForQuestionAnswering"),CXo=o(" (BigBirdPegasus model)"),wXo=l(),_4=a("li"),Vhe=a("strong"),AXo=o("camembert"),yXo=o(" \u2014 "),RV=a("a"),LXo=o("CamembertForQuestionAnswering"),xXo=o(" (CamemBERT model)"),$Xo=l(),b4=a("li"),Xhe=a("strong"),kXo=o("canine"),SXo=o(" \u2014 "),PV=a("a"),RXo=o("CanineForQuestionAnswering"),PXo=o(" (Canine model)"),BXo=l(),v4=a("li"),zhe=a("strong"),IXo=o("convbert"),qXo=o(" \u2014 "),BV=a("a"),NXo=o("ConvBertForQuestionAnswering"),jXo=o(" (ConvBERT model)"),DXo=l(),F4=a("li"),Whe=a("strong"),GXo=o("data2vec-text"),OXo=o(" \u2014 "),IV=a("a"),VXo=o("Data2VecTextForQuestionAnswering"),XXo=o(" (Data2VecText model)"),zXo=l(),T4=a("li"),Qhe=a("strong"),WXo=o("deberta"),QXo=o(" \u2014 "),qV=a("a"),HXo=o("DebertaForQuestionAnswering"),UXo=o(" (DeBERTa model)"),JXo=l(),M4=a("li"),Hhe=a("strong"),YXo=o("deberta-v2"),KXo=o(" \u2014 "),NV=a("a"),ZXo=o("DebertaV2ForQuestionAnswering"),ezo=o(" (DeBERTa-v2 model)"),ozo=l(),E4=a("li"),Uhe=a("strong"),rzo=o("distilbert"),tzo=o(" \u2014 "),jV=a("a"),azo=o("DistilBertForQuestionAnswering"),nzo=o(" (DistilBERT model)"),szo=l(),C4=a("li"),Jhe=a("strong"),lzo=o("electra"),izo=o(" \u2014 "),DV=a("a"),dzo=o("ElectraForQuestionAnswering"),czo=o(" (ELECTRA model)"),fzo=l(),w4=a("li"),Yhe=a("strong"),mzo=o("flaubert"),gzo=o(" \u2014 "),GV=a("a"),hzo=o("FlaubertForQuestionAnsweringSimple"),pzo=o(" (FlauBERT model)"),uzo=l(),A4=a("li"),Khe=a("strong"),_zo=o("fnet"),bzo=o(" \u2014 "),OV=a("a"),vzo=o("FNetForQuestionAnswering"),Fzo=o(" (FNet model)"),Tzo=l(),y4=a("li"),Zhe=a("strong"),Mzo=o("funnel"),Ezo=o(" \u2014 "),VV=a("a"),Czo=o("FunnelForQuestionAnswering"),wzo=o(" (Funnel Transformer model)"),Azo=l(),L4=a("li"),epe=a("strong"),yzo=o("gptj"),Lzo=o(" \u2014 "),XV=a("a"),xzo=o("GPTJForQuestionAnswering"),$zo=o(" (GPT-J model)"),kzo=l(),x4=a("li"),ope=a("strong"),Szo=o("ibert"),Rzo=o(" \u2014 "),zV=a("a"),Pzo=o("IBertForQuestionAnswering"),Bzo=o(" (I-BERT model)"),Izo=l(),$4=a("li"),rpe=a("strong"),qzo=o("layoutlmv2"),Nzo=o(" \u2014 "),WV=a("a"),jzo=o("LayoutLMv2ForQuestionAnswering"),Dzo=o(" (LayoutLMv2 model)"),Gzo=l(),k4=a("li"),tpe=a("strong"),Ozo=o("layoutlmv3"),Vzo=o(" \u2014 "),QV=a("a"),Xzo=o("LayoutLMv3ForQuestionAnswering"),zzo=o(" (LayoutLMv3 model)"),Wzo=l(),S4=a("li"),ape=a("strong"),Qzo=o("led"),Hzo=o(" \u2014 "),HV=a("a"),Uzo=o("LEDForQuestionAnswering"),Jzo=o(" (LED model)"),Yzo=l(),R4=a("li"),npe=a("strong"),Kzo=o("longformer"),Zzo=o(" \u2014 "),UV=a("a"),eWo=o("LongformerForQuestionAnswering"),oWo=o(" (Longformer model)"),rWo=l(),P4=a("li"),spe=a("strong"),tWo=o("lxmert"),aWo=o(" \u2014 "),JV=a("a"),nWo=o("LxmertForQuestionAnswering"),sWo=o(" (LXMERT model)"),lWo=l(),B4=a("li"),lpe=a("strong"),iWo=o("mbart"),dWo=o(" \u2014 "),YV=a("a"),cWo=o("MBartForQuestionAnswering"),fWo=o(" (mBART model)"),mWo=l(),I4=a("li"),ipe=a("strong"),gWo=o("megatron-bert"),hWo=o(" \u2014 "),KV=a("a"),pWo=o("MegatronBertForQuestionAnswering"),uWo=o(" (MegatronBert model)"),_Wo=l(),q4=a("li"),dpe=a("strong"),bWo=o("mobilebert"),vWo=o(" \u2014 "),ZV=a("a"),FWo=o("MobileBertForQuestionAnswering"),TWo=o(" (MobileBERT model)"),MWo=l(),N4=a("li"),cpe=a("strong"),EWo=o("mpnet"),CWo=o(" \u2014 "),eX=a("a"),wWo=o("MPNetForQuestionAnswering"),AWo=o(" (MPNet model)"),yWo=l(),j4=a("li"),fpe=a("strong"),LWo=o("nystromformer"),xWo=o(" \u2014 "),oX=a("a"),$Wo=o("NystromformerForQuestionAnswering"),kWo=o(" (Nystromformer model)"),SWo=l(),D4=a("li"),mpe=a("strong"),RWo=o("qdqbert"),PWo=o(" \u2014 "),rX=a("a"),BWo=o("QDQBertForQuestionAnswering"),IWo=o(" (QDQBert model)"),qWo=l(),G4=a("li"),gpe=a("strong"),NWo=o("reformer"),jWo=o(" \u2014 "),tX=a("a"),DWo=o("ReformerForQuestionAnswering"),GWo=o(" (Reformer model)"),OWo=l(),O4=a("li"),hpe=a("strong"),VWo=o("rembert"),XWo=o(" \u2014 "),aX=a("a"),zWo=o("RemBertForQuestionAnswering"),WWo=o(" (RemBERT model)"),QWo=l(),V4=a("li"),ppe=a("strong"),HWo=o("roberta"),UWo=o(" \u2014 "),nX=a("a"),JWo=o("RobertaForQuestionAnswering"),YWo=o(" (RoBERTa model)"),KWo=l(),X4=a("li"),upe=a("strong"),ZWo=o("roformer"),eQo=o(" \u2014 "),sX=a("a"),oQo=o("RoFormerForQuestionAnswering"),rQo=o(" (RoFormer model)"),tQo=l(),z4=a("li"),_pe=a("strong"),aQo=o("splinter"),nQo=o(" \u2014 "),lX=a("a"),sQo=o("SplinterForQuestionAnswering"),lQo=o(" (Splinter model)"),iQo=l(),W4=a("li"),bpe=a("strong"),dQo=o("squeezebert"),cQo=o(" \u2014 "),iX=a("a"),fQo=o("SqueezeBertForQuestionAnswering"),mQo=o(" (SqueezeBERT model)"),gQo=l(),Q4=a("li"),vpe=a("strong"),hQo=o("xlm"),pQo=o(" \u2014 "),dX=a("a"),uQo=o("XLMForQuestionAnsweringSimple"),_Qo=o(" (XLM model)"),bQo=l(),H4=a("li"),Fpe=a("strong"),vQo=o("xlm-roberta"),FQo=o(" \u2014 "),cX=a("a"),TQo=o("XLMRobertaForQuestionAnswering"),MQo=o(" (XLM-RoBERTa model)"),EQo=l(),U4=a("li"),Tpe=a("strong"),CQo=o("xlm-roberta-xl"),wQo=o(" \u2014 "),fX=a("a"),AQo=o("XLMRobertaXLForQuestionAnswering"),yQo=o(" (XLM-RoBERTa-XL model)"),LQo=l(),J4=a("li"),Mpe=a("strong"),xQo=o("xlnet"),$Qo=o(" \u2014 "),mX=a("a"),kQo=o("XLNetForQuestionAnsweringSimple"),SQo=o(" (XLNet model)"),RQo=l(),Y4=a("li"),Epe=a("strong"),PQo=o("yoso"),BQo=o(" \u2014 "),gX=a("a"),IQo=o("YosoForQuestionAnswering"),qQo=o(" (YOSO model)"),NQo=l(),K4=a("p"),jQo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),DQo=o("model.eval()"),GQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),OQo=o("model.train()"),VQo=l(),F(Z4.$$.fragment),kNe=l(),od=a("h2"),ev=a("a"),Ape=a("span"),F(UL.$$.fragment),XQo=l(),ype=a("span"),zQo=o("AutoModelForTableQuestionAnswering"),SNe=l(),No=a("div"),F(JL.$$.fragment),WQo=l(),rd=a("p"),QQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=a("a"),HQo=o("from_pretrained()"),UQo=o(" class method or the "),pX=a("a"),JQo=o("from_config()"),YQo=o(` class
method.`),KQo=l(),YL=a("p"),ZQo=o("This class cannot be instantiated directly using "),Lpe=a("code"),eHo=o("__init__()"),oHo=o(" (throws an error)."),rHo=l(),gt=a("div"),F(KL.$$.fragment),tHo=l(),xpe=a("p"),aHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nHo=l(),td=a("p"),sHo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),lHo=o("not"),iHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=a("a"),dHo=o("from_pretrained()"),cHo=o(" to load the model weights."),fHo=l(),F(ov.$$.fragment),mHo=l(),so=a("div"),F(ZL.$$.fragment),gHo=l(),kpe=a("p"),hHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),pHo=l(),Na=a("p"),uHo=o("The model class to instantiate is selected based on the "),Spe=a("code"),_Ho=o("model_type"),bHo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),vHo=o("pretrained_model_name_or_path"),FHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),THo=o("pretrained_model_name_or_path"),MHo=o(":"),EHo=l(),Bpe=a("ul"),rv=a("li"),Ipe=a("strong"),CHo=o("tapas"),wHo=o(" \u2014 "),_X=a("a"),AHo=o("TapasForQuestionAnswering"),yHo=o(" (TAPAS model)"),LHo=l(),tv=a("p"),xHo=o("The model is set in evaluation mode by default using "),qpe=a("code"),$Ho=o("model.eval()"),kHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),SHo=o("model.train()"),RHo=l(),F(av.$$.fragment),RNe=l(),ad=a("h2"),nv=a("a"),jpe=a("span"),F(e8.$$.fragment),PHo=l(),Dpe=a("span"),BHo=o("AutoModelForImageClassification"),PNe=l(),jo=a("div"),F(o8.$$.fragment),IHo=l(),nd=a("p"),qHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=a("a"),NHo=o("from_pretrained()"),jHo=o(" class method or the "),vX=a("a"),DHo=o("from_config()"),GHo=o(` class
method.`),OHo=l(),r8=a("p"),VHo=o("This class cannot be instantiated directly using "),Gpe=a("code"),XHo=o("__init__()"),zHo=o(" (throws an error)."),WHo=l(),ht=a("div"),F(t8.$$.fragment),QHo=l(),Ope=a("p"),HHo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UHo=l(),sd=a("p"),JHo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),YHo=o("not"),KHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),ZHo=o("from_pretrained()"),eUo=o(" to load the model weights."),oUo=l(),F(sv.$$.fragment),rUo=l(),lo=a("div"),F(a8.$$.fragment),tUo=l(),Xpe=a("p"),aUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nUo=l(),ja=a("p"),sUo=o("The model class to instantiate is selected based on the "),zpe=a("code"),lUo=o("model_type"),iUo=o(` property of the config object (either
passed as an argument or loaded from `),Wpe=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),fUo=o("pretrained_model_name_or_path"),mUo=o(":"),gUo=l(),Fe=a("ul"),lv=a("li"),Hpe=a("strong"),hUo=o("beit"),pUo=o(" \u2014 "),TX=a("a"),uUo=o("BeitForImageClassification"),_Uo=o(" (BEiT model)"),bUo=l(),iv=a("li"),Upe=a("strong"),vUo=o("convnext"),FUo=o(" \u2014 "),MX=a("a"),TUo=o("ConvNextForImageClassification"),MUo=o(" (ConvNext model)"),EUo=l(),dv=a("li"),Jpe=a("strong"),CUo=o("cvt"),wUo=o(" \u2014 "),EX=a("a"),AUo=o("CvtForImageClassification"),yUo=o(" (CvT model)"),LUo=l(),cv=a("li"),Ype=a("strong"),xUo=o("data2vec-vision"),$Uo=o(" \u2014 "),CX=a("a"),kUo=o("Data2VecVisionForImageClassification"),SUo=o(" (Data2VecVision model)"),RUo=l(),Bs=a("li"),Kpe=a("strong"),PUo=o("deit"),BUo=o(" \u2014 "),wX=a("a"),IUo=o("DeiTForImageClassification"),qUo=o(" or "),AX=a("a"),NUo=o("DeiTForImageClassificationWithTeacher"),jUo=o(" (DeiT model)"),DUo=l(),fv=a("li"),Zpe=a("strong"),GUo=o("imagegpt"),OUo=o(" \u2014 "),yX=a("a"),VUo=o("ImageGPTForImageClassification"),XUo=o(" (ImageGPT model)"),zUo=l(),pt=a("li"),eue=a("strong"),WUo=o("perceiver"),QUo=o(" \u2014 "),LX=a("a"),HUo=o("PerceiverForImageClassificationLearned"),UUo=o(" or "),xX=a("a"),JUo=o("PerceiverForImageClassificationFourier"),YUo=o(" or "),$X=a("a"),KUo=o("PerceiverForImageClassificationConvProcessing"),ZUo=o(" (Perceiver model)"),eJo=l(),mv=a("li"),oue=a("strong"),oJo=o("poolformer"),rJo=o(" \u2014 "),kX=a("a"),tJo=o("PoolFormerForImageClassification"),aJo=o(" (PoolFormer model)"),nJo=l(),gv=a("li"),rue=a("strong"),sJo=o("regnet"),lJo=o(" \u2014 "),SX=a("a"),iJo=o("RegNetForImageClassification"),dJo=o(" (RegNet model)"),cJo=l(),hv=a("li"),tue=a("strong"),fJo=o("resnet"),mJo=o(" \u2014 "),RX=a("a"),gJo=o("ResNetForImageClassification"),hJo=o(" (ResNet model)"),pJo=l(),pv=a("li"),aue=a("strong"),uJo=o("segformer"),_Jo=o(" \u2014 "),PX=a("a"),bJo=o("SegformerForImageClassification"),vJo=o(" (SegFormer model)"),FJo=l(),uv=a("li"),nue=a("strong"),TJo=o("swin"),MJo=o(" \u2014 "),BX=a("a"),EJo=o("SwinForImageClassification"),CJo=o(" (Swin model)"),wJo=l(),_v=a("li"),sue=a("strong"),AJo=o("van"),yJo=o(" \u2014 "),IX=a("a"),LJo=o("VanForImageClassification"),xJo=o(" (VAN model)"),$Jo=l(),bv=a("li"),lue=a("strong"),kJo=o("vit"),SJo=o(" \u2014 "),qX=a("a"),RJo=o("ViTForImageClassification"),PJo=o(" (ViT model)"),BJo=l(),vv=a("p"),IJo=o("The model is set in evaluation mode by default using "),iue=a("code"),qJo=o("model.eval()"),NJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=a("code"),jJo=o("model.train()"),DJo=l(),F(Fv.$$.fragment),BNe=l(),ld=a("h2"),Tv=a("a"),cue=a("span"),F(n8.$$.fragment),GJo=l(),fue=a("span"),OJo=o("AutoModelForVision2Seq"),INe=l(),Do=a("div"),F(s8.$$.fragment),VJo=l(),id=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NX=a("a"),zJo=o("from_pretrained()"),WJo=o(" class method or the "),jX=a("a"),QJo=o("from_config()"),HJo=o(` class
method.`),UJo=l(),l8=a("p"),JJo=o("This class cannot be instantiated directly using "),mue=a("code"),YJo=o("__init__()"),KJo=o(" (throws an error)."),ZJo=l(),ut=a("div"),F(i8.$$.fragment),eYo=l(),gue=a("p"),oYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rYo=l(),dd=a("p"),tYo=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),aYo=o("not"),nYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),sYo=o("from_pretrained()"),lYo=o(" to load the model weights."),iYo=l(),F(Mv.$$.fragment),dYo=l(),io=a("div"),F(d8.$$.fragment),cYo=l(),pue=a("p"),fYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mYo=l(),Da=a("p"),gYo=o("The model class to instantiate is selected based on the "),uue=a("code"),hYo=o("model_type"),pYo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),uYo=o("pretrained_model_name_or_path"),_Yo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=a("code"),bYo=o("pretrained_model_name_or_path"),vYo=o(":"),FYo=l(),vue=a("ul"),Ev=a("li"),Fue=a("strong"),TYo=o("vision-encoder-decoder"),MYo=o(" \u2014 "),GX=a("a"),EYo=o("VisionEncoderDecoderModel"),CYo=o(" (Vision Encoder decoder model)"),wYo=l(),Cv=a("p"),AYo=o("The model is set in evaluation mode by default using "),Tue=a("code"),yYo=o("model.eval()"),LYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=a("code"),xYo=o("model.train()"),$Yo=l(),F(wv.$$.fragment),qNe=l(),cd=a("h2"),Av=a("a"),Eue=a("span"),F(c8.$$.fragment),kYo=l(),Cue=a("span"),SYo=o("AutoModelForAudioClassification"),NNe=l(),Go=a("div"),F(f8.$$.fragment),RYo=l(),fd=a("p"),PYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OX=a("a"),BYo=o("from_pretrained()"),IYo=o(" class method or the "),VX=a("a"),qYo=o("from_config()"),NYo=o(` class
method.`),jYo=l(),m8=a("p"),DYo=o("This class cannot be instantiated directly using "),wue=a("code"),GYo=o("__init__()"),OYo=o(" (throws an error)."),VYo=l(),_t=a("div"),F(g8.$$.fragment),XYo=l(),Aue=a("p"),zYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),WYo=l(),md=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),HYo=o("not"),UYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),JYo=o("from_pretrained()"),YYo=o(" to load the model weights."),KYo=l(),F(yv.$$.fragment),ZYo=l(),co=a("div"),F(h8.$$.fragment),eKo=l(),Lue=a("p"),oKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rKo=l(),Ga=a("p"),tKo=o("The model class to instantiate is selected based on the "),xue=a("code"),aKo=o("model_type"),nKo=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),iKo=o("pretrained_model_name_or_path"),dKo=o(":"),cKo=l(),ke=a("ul"),Lv=a("li"),Sue=a("strong"),fKo=o("data2vec-audio"),mKo=o(" \u2014 "),zX=a("a"),gKo=o("Data2VecAudioForSequenceClassification"),hKo=o(" (Data2VecAudio model)"),pKo=l(),xv=a("li"),Rue=a("strong"),uKo=o("hubert"),_Ko=o(" \u2014 "),WX=a("a"),bKo=o("HubertForSequenceClassification"),vKo=o(" (Hubert model)"),FKo=l(),$v=a("li"),Pue=a("strong"),TKo=o("sew"),MKo=o(" \u2014 "),QX=a("a"),EKo=o("SEWForSequenceClassification"),CKo=o(" (SEW model)"),wKo=l(),kv=a("li"),Bue=a("strong"),AKo=o("sew-d"),yKo=o(" \u2014 "),HX=a("a"),LKo=o("SEWDForSequenceClassification"),xKo=o(" (SEW-D model)"),$Ko=l(),Sv=a("li"),Iue=a("strong"),kKo=o("unispeech"),SKo=o(" \u2014 "),UX=a("a"),RKo=o("UniSpeechForSequenceClassification"),PKo=o(" (UniSpeech model)"),BKo=l(),Rv=a("li"),que=a("strong"),IKo=o("unispeech-sat"),qKo=o(" \u2014 "),JX=a("a"),NKo=o("UniSpeechSatForSequenceClassification"),jKo=o(" (UniSpeechSat model)"),DKo=l(),Pv=a("li"),Nue=a("strong"),GKo=o("wav2vec2"),OKo=o(" \u2014 "),YX=a("a"),VKo=o("Wav2Vec2ForSequenceClassification"),XKo=o(" (Wav2Vec2 model)"),zKo=l(),Bv=a("li"),jue=a("strong"),WKo=o("wav2vec2-conformer"),QKo=o(" \u2014 "),KX=a("a"),HKo=o("Wav2Vec2ConformerForSequenceClassification"),UKo=o(" (Wav2Vec2-Conformer model)"),JKo=l(),Iv=a("li"),Due=a("strong"),YKo=o("wavlm"),KKo=o(" \u2014 "),ZX=a("a"),ZKo=o("WavLMForSequenceClassification"),eZo=o(" (WavLM model)"),oZo=l(),qv=a("p"),rZo=o("The model is set in evaluation mode by default using "),Gue=a("code"),tZo=o("model.eval()"),aZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),nZo=o("model.train()"),sZo=l(),F(Nv.$$.fragment),jNe=l(),gd=a("h2"),jv=a("a"),Vue=a("span"),F(p8.$$.fragment),lZo=l(),Xue=a("span"),iZo=o("AutoModelForAudioFrameClassification"),DNe=l(),Oo=a("div"),F(u8.$$.fragment),dZo=l(),hd=a("p"),cZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ez=a("a"),fZo=o("from_pretrained()"),mZo=o(" class method or the "),oz=a("a"),gZo=o("from_config()"),hZo=o(` class
method.`),pZo=l(),_8=a("p"),uZo=o("This class cannot be instantiated directly using "),zue=a("code"),_Zo=o("__init__()"),bZo=o(" (throws an error)."),vZo=l(),bt=a("div"),F(b8.$$.fragment),FZo=l(),Wue=a("p"),TZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),MZo=l(),pd=a("p"),EZo=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),CZo=o("not"),wZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),AZo=o("from_pretrained()"),yZo=o(" to load the model weights."),LZo=l(),F(Dv.$$.fragment),xZo=l(),fo=a("div"),F(v8.$$.fragment),$Zo=l(),Hue=a("p"),kZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),SZo=l(),Oa=a("p"),RZo=o("The model class to instantiate is selected based on the "),Uue=a("code"),PZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),IZo=o("pretrained_model_name_or_path"),qZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),NZo=o("pretrained_model_name_or_path"),jZo=o(":"),DZo=l(),Kr=a("ul"),Gv=a("li"),Kue=a("strong"),GZo=o("data2vec-audio"),OZo=o(" \u2014 "),tz=a("a"),VZo=o("Data2VecAudioForAudioFrameClassification"),XZo=o(" (Data2VecAudio model)"),zZo=l(),Ov=a("li"),Zue=a("strong"),WZo=o("unispeech-sat"),QZo=o(" \u2014 "),az=a("a"),HZo=o("UniSpeechSatForAudioFrameClassification"),UZo=o(" (UniSpeechSat model)"),JZo=l(),Vv=a("li"),e_e=a("strong"),YZo=o("wav2vec2"),KZo=o(" \u2014 "),nz=a("a"),ZZo=o("Wav2Vec2ForAudioFrameClassification"),eer=o(" (Wav2Vec2 model)"),oer=l(),Xv=a("li"),o_e=a("strong"),rer=o("wav2vec2-conformer"),ter=o(" \u2014 "),sz=a("a"),aer=o("Wav2Vec2ConformerForAudioFrameClassification"),ner=o(" (Wav2Vec2-Conformer model)"),ser=l(),zv=a("li"),r_e=a("strong"),ler=o("wavlm"),ier=o(" \u2014 "),lz=a("a"),der=o("WavLMForAudioFrameClassification"),cer=o(" (WavLM model)"),fer=l(),Wv=a("p"),mer=o("The model is set in evaluation mode by default using "),t_e=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),per=o("model.train()"),uer=l(),F(Qv.$$.fragment),GNe=l(),ud=a("h2"),Hv=a("a"),n_e=a("span"),F(F8.$$.fragment),_er=l(),s_e=a("span"),ber=o("AutoModelForCTC"),ONe=l(),Vo=a("div"),F(T8.$$.fragment),ver=l(),_d=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iz=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),dz=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),M8=a("p"),Aer=o("This class cannot be instantiated directly using "),l_e=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),vt=a("div"),F(E8.$$.fragment),$er=l(),i_e=a("p"),ker=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ser=l(),bd=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),Per=o("not"),Ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),Ier=o("from_pretrained()"),qer=o(" to load the model weights."),Ner=l(),F(Uv.$$.fragment),jer=l(),mo=a("div"),F(C8.$$.fragment),Der=l(),c_e=a("p"),Ger=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Oer=l(),Va=a("p"),Ver=o("The model class to instantiate is selected based on the "),f_e=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),Wer=o("pretrained_model_name_or_path"),Qer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Se=a("ul"),Jv=a("li"),h_e=a("strong"),Yer=o("data2vec-audio"),Ker=o(" \u2014 "),fz=a("a"),Zer=o("Data2VecAudioForCTC"),eor=o(" (Data2VecAudio model)"),oor=l(),Yv=a("li"),p_e=a("strong"),ror=o("hubert"),tor=o(" \u2014 "),mz=a("a"),aor=o("HubertForCTC"),nor=o(" (Hubert model)"),sor=l(),Kv=a("li"),u_e=a("strong"),lor=o("sew"),ior=o(" \u2014 "),gz=a("a"),dor=o("SEWForCTC"),cor=o(" (SEW model)"),mor=l(),Zv=a("li"),__e=a("strong"),gor=o("sew-d"),hor=o(" \u2014 "),hz=a("a"),por=o("SEWDForCTC"),uor=o(" (SEW-D model)"),_or=l(),eF=a("li"),b_e=a("strong"),bor=o("unispeech"),vor=o(" \u2014 "),pz=a("a"),For=o("UniSpeechForCTC"),Tor=o(" (UniSpeech model)"),Mor=l(),oF=a("li"),v_e=a("strong"),Eor=o("unispeech-sat"),Cor=o(" \u2014 "),uz=a("a"),wor=o("UniSpeechSatForCTC"),Aor=o(" (UniSpeechSat model)"),yor=l(),rF=a("li"),F_e=a("strong"),Lor=o("wav2vec2"),xor=o(" \u2014 "),_z=a("a"),$or=o("Wav2Vec2ForCTC"),kor=o(" (Wav2Vec2 model)"),Sor=l(),tF=a("li"),T_e=a("strong"),Ror=o("wav2vec2-conformer"),Por=o(" \u2014 "),bz=a("a"),Bor=o("Wav2Vec2ConformerForCTC"),Ior=o(" (Wav2Vec2-Conformer model)"),qor=l(),aF=a("li"),M_e=a("strong"),Nor=o("wavlm"),jor=o(" \u2014 "),vz=a("a"),Dor=o("WavLMForCTC"),Gor=o(" (WavLM model)"),Oor=l(),nF=a("p"),Vor=o("The model is set in evaluation mode by default using "),E_e=a("code"),Xor=o("model.eval()"),zor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),Wor=o("model.train()"),Qor=l(),F(sF.$$.fragment),VNe=l(),vd=a("h2"),lF=a("a"),w_e=a("span"),F(w8.$$.fragment),Hor=l(),A_e=a("span"),Uor=o("AutoModelForSpeechSeq2Seq"),XNe=l(),Xo=a("div"),F(A8.$$.fragment),Jor=l(),Fd=a("p"),Yor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fz=a("a"),Kor=o("from_pretrained()"),Zor=o(" class method or the "),Tz=a("a"),err=o("from_config()"),orr=o(` class
method.`),rrr=l(),y8=a("p"),trr=o("This class cannot be instantiated directly using "),y_e=a("code"),arr=o("__init__()"),nrr=o(" (throws an error)."),srr=l(),Ft=a("div"),F(L8.$$.fragment),lrr=l(),L_e=a("p"),irr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),drr=l(),Td=a("p"),crr=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),frr=o("not"),mrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),grr=o("from_pretrained()"),hrr=o(" to load the model weights."),prr=l(),F(iF.$$.fragment),urr=l(),go=a("div"),F(x8.$$.fragment),_rr=l(),$_e=a("p"),brr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vrr=l(),Xa=a("p"),Frr=o("The model class to instantiate is selected based on the "),k_e=a("code"),Trr=o("model_type"),Mrr=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),Err=o("pretrained_model_name_or_path"),Crr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),wrr=o("pretrained_model_name_or_path"),Arr=o(":"),yrr=l(),$8=a("ul"),dF=a("li"),P_e=a("strong"),Lrr=o("speech-encoder-decoder"),xrr=o(" \u2014 "),Ez=a("a"),$rr=o("SpeechEncoderDecoderModel"),krr=o(" (Speech Encoder decoder model)"),Srr=l(),cF=a("li"),B_e=a("strong"),Rrr=o("speech_to_text"),Prr=o(" \u2014 "),Cz=a("a"),Brr=o("Speech2TextForConditionalGeneration"),Irr=o(" (Speech2Text model)"),qrr=l(),fF=a("p"),Nrr=o("The model is set in evaluation mode by default using "),I_e=a("code"),jrr=o("model.eval()"),Drr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),Grr=o("model.train()"),Orr=l(),F(mF.$$.fragment),zNe=l(),Md=a("h2"),gF=a("a"),N_e=a("span"),F(k8.$$.fragment),Vrr=l(),j_e=a("span"),Xrr=o("AutoModelForAudioXVector"),WNe=l(),zo=a("div"),F(S8.$$.fragment),zrr=l(),Ed=a("p"),Wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wz=a("a"),Qrr=o("from_pretrained()"),Hrr=o(" class method or the "),Az=a("a"),Urr=o("from_config()"),Jrr=o(` class
method.`),Yrr=l(),R8=a("p"),Krr=o("This class cannot be instantiated directly using "),D_e=a("code"),Zrr=o("__init__()"),etr=o(" (throws an error)."),otr=l(),Tt=a("div"),F(P8.$$.fragment),rtr=l(),G_e=a("p"),ttr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),atr=l(),Cd=a("p"),ntr=o(`Note:
Loading a model from its configuration file does `),O_e=a("strong"),str=o("not"),ltr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),itr=o("from_pretrained()"),dtr=o(" to load the model weights."),ctr=l(),F(hF.$$.fragment),ftr=l(),ho=a("div"),F(B8.$$.fragment),mtr=l(),V_e=a("p"),gtr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),htr=l(),za=a("p"),ptr=o("The model class to instantiate is selected based on the "),X_e=a("code"),utr=o("model_type"),_tr=o(` property of the config object (either
passed as an argument or loaded from `),z_e=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),Ftr=o("pretrained_model_name_or_path"),Ttr=o(":"),Mtr=l(),Zr=a("ul"),pF=a("li"),Q_e=a("strong"),Etr=o("data2vec-audio"),Ctr=o(" \u2014 "),Lz=a("a"),wtr=o("Data2VecAudioForXVector"),Atr=o(" (Data2VecAudio model)"),ytr=l(),uF=a("li"),H_e=a("strong"),Ltr=o("unispeech-sat"),xtr=o(" \u2014 "),xz=a("a"),$tr=o("UniSpeechSatForXVector"),ktr=o(" (UniSpeechSat model)"),Str=l(),_F=a("li"),U_e=a("strong"),Rtr=o("wav2vec2"),Ptr=o(" \u2014 "),$z=a("a"),Btr=o("Wav2Vec2ForXVector"),Itr=o(" (Wav2Vec2 model)"),qtr=l(),bF=a("li"),J_e=a("strong"),Ntr=o("wav2vec2-conformer"),jtr=o(" \u2014 "),kz=a("a"),Dtr=o("Wav2Vec2ConformerForXVector"),Gtr=o(" (Wav2Vec2-Conformer model)"),Otr=l(),vF=a("li"),Y_e=a("strong"),Vtr=o("wavlm"),Xtr=o(" \u2014 "),Sz=a("a"),ztr=o("WavLMForXVector"),Wtr=o(" (WavLM model)"),Qtr=l(),FF=a("p"),Htr=o("The model is set in evaluation mode by default using "),K_e=a("code"),Utr=o("model.eval()"),Jtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=a("code"),Ytr=o("model.train()"),Ktr=l(),F(TF.$$.fragment),QNe=l(),wd=a("h2"),MF=a("a"),e0e=a("span"),F(I8.$$.fragment),Ztr=l(),o0e=a("span"),ear=o("AutoModelForMaskedImageModeling"),HNe=l(),Wo=a("div"),F(q8.$$.fragment),oar=l(),Ad=a("p"),rar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rz=a("a"),tar=o("from_pretrained()"),aar=o(" class method or the "),Pz=a("a"),nar=o("from_config()"),sar=o(` class
method.`),lar=l(),N8=a("p"),iar=o("This class cannot be instantiated directly using "),r0e=a("code"),dar=o("__init__()"),car=o(" (throws an error)."),far=l(),Mt=a("div"),F(j8.$$.fragment),mar=l(),t0e=a("p"),gar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),har=l(),yd=a("p"),par=o(`Note:
Loading a model from its configuration file does `),a0e=a("strong"),uar=o("not"),_ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),bar=o("from_pretrained()"),Far=o(" to load the model weights."),Tar=l(),F(EF.$$.fragment),Mar=l(),po=a("div"),F(D8.$$.fragment),Ear=l(),n0e=a("p"),Car=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),war=l(),Wa=a("p"),Aar=o("The model class to instantiate is selected based on the "),s0e=a("code"),yar=o("model_type"),Lar=o(` property of the config object (either
passed as an argument or loaded from `),l0e=a("code"),xar=o("pretrained_model_name_or_path"),$ar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=a("code"),kar=o("pretrained_model_name_or_path"),Sar=o(":"),Rar=l(),Ld=a("ul"),CF=a("li"),d0e=a("strong"),Par=o("deit"),Bar=o(" \u2014 "),Iz=a("a"),Iar=o("DeiTForMaskedImageModeling"),qar=o(" (DeiT model)"),Nar=l(),wF=a("li"),c0e=a("strong"),jar=o("swin"),Dar=o(" \u2014 "),qz=a("a"),Gar=o("SwinForMaskedImageModeling"),Oar=o(" (Swin model)"),Var=l(),AF=a("li"),f0e=a("strong"),Xar=o("vit"),zar=o(" \u2014 "),Nz=a("a"),War=o("ViTForMaskedImageModeling"),Qar=o(" (ViT model)"),Har=l(),yF=a("p"),Uar=o("The model is set in evaluation mode by default using "),m0e=a("code"),Jar=o("model.eval()"),Yar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g0e=a("code"),Kar=o("model.train()"),Zar=l(),F(LF.$$.fragment),UNe=l(),xd=a("h2"),xF=a("a"),h0e=a("span"),F(G8.$$.fragment),enr=l(),p0e=a("span"),onr=o("AutoModelForObjectDetection"),JNe=l(),Qo=a("div"),F(O8.$$.fragment),rnr=l(),$d=a("p"),tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jz=a("a"),anr=o("from_pretrained()"),nnr=o(" class method or the "),Dz=a("a"),snr=o("from_config()"),lnr=o(` class
method.`),inr=l(),V8=a("p"),dnr=o("This class cannot be instantiated directly using "),u0e=a("code"),cnr=o("__init__()"),fnr=o(" (throws an error)."),mnr=l(),Et=a("div"),F(X8.$$.fragment),gnr=l(),_0e=a("p"),hnr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),pnr=l(),kd=a("p"),unr=o(`Note:
Loading a model from its configuration file does `),b0e=a("strong"),_nr=o("not"),bnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),vnr=o("from_pretrained()"),Fnr=o(" to load the model weights."),Tnr=l(),F($F.$$.fragment),Mnr=l(),uo=a("div"),F(z8.$$.fragment),Enr=l(),v0e=a("p"),Cnr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wnr=l(),Qa=a("p"),Anr=o("The model class to instantiate is selected based on the "),F0e=a("code"),ynr=o("model_type"),Lnr=o(` property of the config object (either
passed as an argument or loaded from `),T0e=a("code"),xnr=o("pretrained_model_name_or_path"),$nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=a("code"),knr=o("pretrained_model_name_or_path"),Snr=o(":"),Rnr=l(),W8=a("ul"),kF=a("li"),E0e=a("strong"),Pnr=o("detr"),Bnr=o(" \u2014 "),Oz=a("a"),Inr=o("DetrForObjectDetection"),qnr=o(" (DETR model)"),Nnr=l(),SF=a("li"),C0e=a("strong"),jnr=o("yolos"),Dnr=o(" \u2014 "),Vz=a("a"),Gnr=o("YolosForObjectDetection"),Onr=o(" (YOLOS model)"),Vnr=l(),RF=a("p"),Xnr=o("The model is set in evaluation mode by default using "),w0e=a("code"),znr=o("model.eval()"),Wnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A0e=a("code"),Qnr=o("model.train()"),Hnr=l(),F(PF.$$.fragment),YNe=l(),Sd=a("h2"),BF=a("a"),y0e=a("span"),F(Q8.$$.fragment),Unr=l(),L0e=a("span"),Jnr=o("AutoModelForImageSegmentation"),KNe=l(),Ho=a("div"),F(H8.$$.fragment),Ynr=l(),Rd=a("p"),Knr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xz=a("a"),Znr=o("from_pretrained()"),esr=o(" class method or the "),zz=a("a"),osr=o("from_config()"),rsr=o(` class
method.`),tsr=l(),U8=a("p"),asr=o("This class cannot be instantiated directly using "),x0e=a("code"),nsr=o("__init__()"),ssr=o(" (throws an error)."),lsr=l(),Ct=a("div"),F(J8.$$.fragment),isr=l(),$0e=a("p"),dsr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),csr=l(),Pd=a("p"),fsr=o(`Note:
Loading a model from its configuration file does `),k0e=a("strong"),msr=o("not"),gsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=a("a"),hsr=o("from_pretrained()"),psr=o(" to load the model weights."),usr=l(),F(IF.$$.fragment),_sr=l(),_o=a("div"),F(Y8.$$.fragment),bsr=l(),S0e=a("p"),vsr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Fsr=l(),Ha=a("p"),Tsr=o("The model class to instantiate is selected based on the "),R0e=a("code"),Msr=o("model_type"),Esr=o(` property of the config object (either
passed as an argument or loaded from `),P0e=a("code"),Csr=o("pretrained_model_name_or_path"),wsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),Asr=o("pretrained_model_name_or_path"),ysr=o(":"),Lsr=l(),I0e=a("ul"),qF=a("li"),q0e=a("strong"),xsr=o("detr"),$sr=o(" \u2014 "),Qz=a("a"),ksr=o("DetrForSegmentation"),Ssr=o(" (DETR model)"),Rsr=l(),NF=a("p"),Psr=o("The model is set in evaluation mode by default using "),N0e=a("code"),Bsr=o("model.eval()"),Isr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j0e=a("code"),qsr=o("model.train()"),Nsr=l(),F(jF.$$.fragment),ZNe=l(),Bd=a("h2"),DF=a("a"),D0e=a("span"),F(K8.$$.fragment),jsr=l(),G0e=a("span"),Dsr=o("AutoModelForSemanticSegmentation"),eje=l(),Uo=a("div"),F(Z8.$$.fragment),Gsr=l(),Id=a("p"),Osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Hz=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" class method or the "),Uz=a("a"),zsr=o("from_config()"),Wsr=o(` class
method.`),Qsr=l(),e7=a("p"),Hsr=o("This class cannot be instantiated directly using "),O0e=a("code"),Usr=o("__init__()"),Jsr=o(" (throws an error)."),Ysr=l(),wt=a("div"),F(o7.$$.fragment),Ksr=l(),V0e=a("p"),Zsr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),elr=l(),qd=a("p"),olr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),rlr=o("not"),tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),alr=o("from_pretrained()"),nlr=o(" to load the model weights."),slr=l(),F(GF.$$.fragment),llr=l(),bo=a("div"),F(r7.$$.fragment),ilr=l(),z0e=a("p"),dlr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),clr=l(),Ua=a("p"),flr=o("The model class to instantiate is selected based on the "),W0e=a("code"),mlr=o("model_type"),glr=o(` property of the config object (either
passed as an argument or loaded from `),Q0e=a("code"),hlr=o("pretrained_model_name_or_path"),plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),ulr=o("pretrained_model_name_or_path"),_lr=o(":"),blr=l(),Ja=a("ul"),OF=a("li"),U0e=a("strong"),vlr=o("beit"),Flr=o(" \u2014 "),Yz=a("a"),Tlr=o("BeitForSemanticSegmentation"),Mlr=o(" (BEiT model)"),Elr=l(),VF=a("li"),J0e=a("strong"),Clr=o("data2vec-vision"),wlr=o(" \u2014 "),Kz=a("a"),Alr=o("Data2VecVisionForSemanticSegmentation"),ylr=o(" (Data2VecVision model)"),Llr=l(),XF=a("li"),Y0e=a("strong"),xlr=o("dpt"),$lr=o(" \u2014 "),Zz=a("a"),klr=o("DPTForSemanticSegmentation"),Slr=o(" (DPT model)"),Rlr=l(),zF=a("li"),K0e=a("strong"),Plr=o("segformer"),Blr=o(" \u2014 "),eW=a("a"),Ilr=o("SegformerForSemanticSegmentation"),qlr=o(" (SegFormer model)"),Nlr=l(),WF=a("p"),jlr=o("The model is set in evaluation mode by default using "),Z0e=a("code"),Dlr=o("model.eval()"),Glr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),Olr=o("model.train()"),Vlr=l(),F(QF.$$.fragment),oje=l(),Nd=a("h2"),HF=a("a"),o1e=a("span"),F(t7.$$.fragment),Xlr=l(),r1e=a("span"),zlr=o("AutoModelForInstanceSegmentation"),rje=l(),Jo=a("div"),F(a7.$$.fragment),Wlr=l(),jd=a("p"),Qlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oW=a("a"),Hlr=o("from_pretrained()"),Ulr=o(" class method or the "),rW=a("a"),Jlr=o("from_config()"),Ylr=o(` class
method.`),Klr=l(),n7=a("p"),Zlr=o("This class cannot be instantiated directly using "),t1e=a("code"),eir=o("__init__()"),oir=o(" (throws an error)."),rir=l(),At=a("div"),F(s7.$$.fragment),tir=l(),a1e=a("p"),air=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),nir=l(),Dd=a("p"),sir=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),lir=o("not"),iir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),dir=o("from_pretrained()"),cir=o(" to load the model weights."),fir=l(),F(UF.$$.fragment),mir=l(),vo=a("div"),F(l7.$$.fragment),gir=l(),s1e=a("p"),hir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),pir=l(),Ya=a("p"),uir=o("The model class to instantiate is selected based on the "),l1e=a("code"),_ir=o("model_type"),bir=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),vir=o("pretrained_model_name_or_path"),Fir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(":"),Eir=l(),c1e=a("ul"),JF=a("li"),f1e=a("strong"),Cir=o("maskformer"),wir=o(" \u2014 "),aW=a("a"),Air=o("MaskFormerForInstanceSegmentation"),yir=o(" (MaskFormer model)"),Lir=l(),YF=a("p"),xir=o("The model is set in evaluation mode by default using "),m1e=a("code"),$ir=o("model.eval()"),kir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=a("code"),Sir=o("model.train()"),Rir=l(),F(KF.$$.fragment),tje=l(),Gd=a("h2"),ZF=a("a"),h1e=a("span"),F(i7.$$.fragment),Pir=l(),p1e=a("span"),Bir=o("TFAutoModel"),aje=l(),Yo=a("div"),F(d7.$$.fragment),Iir=l(),Od=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=a("a"),Nir=o("from_pretrained()"),jir=o(" class method or the "),sW=a("a"),Dir=o("from_config()"),Gir=o(` class
method.`),Oir=l(),c7=a("p"),Vir=o("This class cannot be instantiated directly using "),u1e=a("code"),Xir=o("__init__()"),zir=o(" (throws an error)."),Wir=l(),yt=a("div"),F(f7.$$.fragment),Qir=l(),_1e=a("p"),Hir=o("Instantiates one of the base model classes of the library from a configuration."),Uir=l(),Vd=a("p"),Jir=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),Yir=o("not"),Kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Zir=o("from_pretrained()"),edr=o(" to load the model weights."),odr=l(),F(e6.$$.fragment),rdr=l(),wr=a("div"),F(m7.$$.fragment),tdr=l(),v1e=a("p"),adr=o("Instantiate one of the base model classes of the library from a pretrained model."),ndr=l(),Ka=a("p"),sdr=o("The model class to instantiate is selected based on the "),F1e=a("code"),ldr=o("model_type"),idr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(":"),gdr=l(),N=a("ul"),o6=a("li"),E1e=a("strong"),hdr=o("albert"),pdr=o(" \u2014 "),iW=a("a"),udr=o("TFAlbertModel"),_dr=o(" (ALBERT model)"),bdr=l(),r6=a("li"),C1e=a("strong"),vdr=o("bart"),Fdr=o(" \u2014 "),dW=a("a"),Tdr=o("TFBartModel"),Mdr=o(" (BART model)"),Edr=l(),t6=a("li"),w1e=a("strong"),Cdr=o("bert"),wdr=o(" \u2014 "),cW=a("a"),Adr=o("TFBertModel"),ydr=o(" (BERT model)"),Ldr=l(),a6=a("li"),A1e=a("strong"),xdr=o("blenderbot"),$dr=o(" \u2014 "),fW=a("a"),kdr=o("TFBlenderbotModel"),Sdr=o(" (Blenderbot model)"),Rdr=l(),n6=a("li"),y1e=a("strong"),Pdr=o("blenderbot-small"),Bdr=o(" \u2014 "),mW=a("a"),Idr=o("TFBlenderbotSmallModel"),qdr=o(" (BlenderbotSmall model)"),Ndr=l(),s6=a("li"),L1e=a("strong"),jdr=o("camembert"),Ddr=o(" \u2014 "),gW=a("a"),Gdr=o("TFCamembertModel"),Odr=o(" (CamemBERT model)"),Vdr=l(),l6=a("li"),x1e=a("strong"),Xdr=o("clip"),zdr=o(" \u2014 "),hW=a("a"),Wdr=o("TFCLIPModel"),Qdr=o(" (CLIP model)"),Hdr=l(),i6=a("li"),$1e=a("strong"),Udr=o("convbert"),Jdr=o(" \u2014 "),pW=a("a"),Ydr=o("TFConvBertModel"),Kdr=o(" (ConvBERT model)"),Zdr=l(),d6=a("li"),k1e=a("strong"),ecr=o("convnext"),ocr=o(" \u2014 "),uW=a("a"),rcr=o("TFConvNextModel"),tcr=o(" (ConvNext model)"),acr=l(),c6=a("li"),S1e=a("strong"),ncr=o("ctrl"),scr=o(" \u2014 "),_W=a("a"),lcr=o("TFCTRLModel"),icr=o(" (CTRL model)"),dcr=l(),f6=a("li"),R1e=a("strong"),ccr=o("data2vec-vision"),fcr=o(" \u2014 "),bW=a("a"),mcr=o("TFData2VecVisionModel"),gcr=o(" (Data2VecVision model)"),hcr=l(),m6=a("li"),P1e=a("strong"),pcr=o("deberta"),ucr=o(" \u2014 "),vW=a("a"),_cr=o("TFDebertaModel"),bcr=o(" (DeBERTa model)"),vcr=l(),g6=a("li"),B1e=a("strong"),Fcr=o("deberta-v2"),Tcr=o(" \u2014 "),FW=a("a"),Mcr=o("TFDebertaV2Model"),Ecr=o(" (DeBERTa-v2 model)"),Ccr=l(),h6=a("li"),I1e=a("strong"),wcr=o("distilbert"),Acr=o(" \u2014 "),TW=a("a"),ycr=o("TFDistilBertModel"),Lcr=o(" (DistilBERT model)"),xcr=l(),p6=a("li"),q1e=a("strong"),$cr=o("dpr"),kcr=o(" \u2014 "),MW=a("a"),Scr=o("TFDPRQuestionEncoder"),Rcr=o(" (DPR model)"),Pcr=l(),u6=a("li"),N1e=a("strong"),Bcr=o("electra"),Icr=o(" \u2014 "),EW=a("a"),qcr=o("TFElectraModel"),Ncr=o(" (ELECTRA model)"),jcr=l(),_6=a("li"),j1e=a("strong"),Dcr=o("flaubert"),Gcr=o(" \u2014 "),CW=a("a"),Ocr=o("TFFlaubertModel"),Vcr=o(" (FlauBERT model)"),Xcr=l(),Is=a("li"),D1e=a("strong"),zcr=o("funnel"),Wcr=o(" \u2014 "),wW=a("a"),Qcr=o("TFFunnelModel"),Hcr=o(" or "),AW=a("a"),Ucr=o("TFFunnelBaseModel"),Jcr=o(" (Funnel Transformer model)"),Ycr=l(),b6=a("li"),G1e=a("strong"),Kcr=o("gpt2"),Zcr=o(" \u2014 "),yW=a("a"),efr=o("TFGPT2Model"),ofr=o(" (OpenAI GPT-2 model)"),rfr=l(),v6=a("li"),O1e=a("strong"),tfr=o("gptj"),afr=o(" \u2014 "),LW=a("a"),nfr=o("TFGPTJModel"),sfr=o(" (GPT-J model)"),lfr=l(),F6=a("li"),V1e=a("strong"),ifr=o("hubert"),dfr=o(" \u2014 "),xW=a("a"),cfr=o("TFHubertModel"),ffr=o(" (Hubert model)"),mfr=l(),T6=a("li"),X1e=a("strong"),gfr=o("layoutlm"),hfr=o(" \u2014 "),$W=a("a"),pfr=o("TFLayoutLMModel"),ufr=o(" (LayoutLM model)"),_fr=l(),M6=a("li"),z1e=a("strong"),bfr=o("led"),vfr=o(" \u2014 "),kW=a("a"),Ffr=o("TFLEDModel"),Tfr=o(" (LED model)"),Mfr=l(),E6=a("li"),W1e=a("strong"),Efr=o("longformer"),Cfr=o(" \u2014 "),SW=a("a"),wfr=o("TFLongformerModel"),Afr=o(" (Longformer model)"),yfr=l(),C6=a("li"),Q1e=a("strong"),Lfr=o("lxmert"),xfr=o(" \u2014 "),RW=a("a"),$fr=o("TFLxmertModel"),kfr=o(" (LXMERT model)"),Sfr=l(),w6=a("li"),H1e=a("strong"),Rfr=o("marian"),Pfr=o(" \u2014 "),PW=a("a"),Bfr=o("TFMarianModel"),Ifr=o(" (Marian model)"),qfr=l(),A6=a("li"),U1e=a("strong"),Nfr=o("mbart"),jfr=o(" \u2014 "),BW=a("a"),Dfr=o("TFMBartModel"),Gfr=o(" (mBART model)"),Ofr=l(),y6=a("li"),J1e=a("strong"),Vfr=o("mobilebert"),Xfr=o(" \u2014 "),IW=a("a"),zfr=o("TFMobileBertModel"),Wfr=o(" (MobileBERT model)"),Qfr=l(),L6=a("li"),Y1e=a("strong"),Hfr=o("mpnet"),Ufr=o(" \u2014 "),qW=a("a"),Jfr=o("TFMPNetModel"),Yfr=o(" (MPNet model)"),Kfr=l(),x6=a("li"),K1e=a("strong"),Zfr=o("mt5"),emr=o(" \u2014 "),NW=a("a"),omr=o("TFMT5Model"),rmr=o(" (mT5 model)"),tmr=l(),$6=a("li"),Z1e=a("strong"),amr=o("openai-gpt"),nmr=o(" \u2014 "),jW=a("a"),smr=o("TFOpenAIGPTModel"),lmr=o(" (OpenAI GPT model)"),imr=l(),k6=a("li"),ebe=a("strong"),dmr=o("pegasus"),cmr=o(" \u2014 "),DW=a("a"),fmr=o("TFPegasusModel"),mmr=o(" (Pegasus model)"),gmr=l(),S6=a("li"),obe=a("strong"),hmr=o("rembert"),pmr=o(" \u2014 "),GW=a("a"),umr=o("TFRemBertModel"),_mr=o(" (RemBERT model)"),bmr=l(),R6=a("li"),rbe=a("strong"),vmr=o("roberta"),Fmr=o(" \u2014 "),OW=a("a"),Tmr=o("TFRobertaModel"),Mmr=o(" (RoBERTa model)"),Emr=l(),P6=a("li"),tbe=a("strong"),Cmr=o("roformer"),wmr=o(" \u2014 "),VW=a("a"),Amr=o("TFRoFormerModel"),ymr=o(" (RoFormer model)"),Lmr=l(),B6=a("li"),abe=a("strong"),xmr=o("speech_to_text"),$mr=o(" \u2014 "),XW=a("a"),kmr=o("TFSpeech2TextModel"),Smr=o(" (Speech2Text model)"),Rmr=l(),I6=a("li"),nbe=a("strong"),Pmr=o("swin"),Bmr=o(" \u2014 "),zW=a("a"),Imr=o("TFSwinModel"),qmr=o(" (Swin model)"),Nmr=l(),q6=a("li"),sbe=a("strong"),jmr=o("t5"),Dmr=o(" \u2014 "),WW=a("a"),Gmr=o("TFT5Model"),Omr=o(" (T5 model)"),Vmr=l(),N6=a("li"),lbe=a("strong"),Xmr=o("tapas"),zmr=o(" \u2014 "),QW=a("a"),Wmr=o("TFTapasModel"),Qmr=o(" (TAPAS model)"),Hmr=l(),j6=a("li"),ibe=a("strong"),Umr=o("transfo-xl"),Jmr=o(" \u2014 "),HW=a("a"),Ymr=o("TFTransfoXLModel"),Kmr=o(" (Transformer-XL model)"),Zmr=l(),D6=a("li"),dbe=a("strong"),egr=o("vit"),ogr=o(" \u2014 "),UW=a("a"),rgr=o("TFViTModel"),tgr=o(" (ViT model)"),agr=l(),G6=a("li"),cbe=a("strong"),ngr=o("vit_mae"),sgr=o(" \u2014 "),JW=a("a"),lgr=o("TFViTMAEModel"),igr=o(" (ViTMAE model)"),dgr=l(),O6=a("li"),fbe=a("strong"),cgr=o("wav2vec2"),fgr=o(" \u2014 "),YW=a("a"),mgr=o("TFWav2Vec2Model"),ggr=o(" (Wav2Vec2 model)"),hgr=l(),V6=a("li"),mbe=a("strong"),pgr=o("xlm"),ugr=o(" \u2014 "),KW=a("a"),_gr=o("TFXLMModel"),bgr=o(" (XLM model)"),vgr=l(),X6=a("li"),gbe=a("strong"),Fgr=o("xlm-roberta"),Tgr=o(" \u2014 "),ZW=a("a"),Mgr=o("TFXLMRobertaModel"),Egr=o(" (XLM-RoBERTa model)"),Cgr=l(),z6=a("li"),hbe=a("strong"),wgr=o("xlnet"),Agr=o(" \u2014 "),eQ=a("a"),ygr=o("TFXLNetModel"),Lgr=o(" (XLNet model)"),xgr=l(),F(W6.$$.fragment),nje=l(),Xd=a("h2"),Q6=a("a"),pbe=a("span"),F(g7.$$.fragment),$gr=l(),ube=a("span"),kgr=o("TFAutoModelForPreTraining"),sje=l(),Ko=a("div"),F(h7.$$.fragment),Sgr=l(),zd=a("p"),Rgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=a("a"),Pgr=o("from_pretrained()"),Bgr=o(" class method or the "),rQ=a("a"),Igr=o("from_config()"),qgr=o(` class
method.`),Ngr=l(),p7=a("p"),jgr=o("This class cannot be instantiated directly using "),_be=a("code"),Dgr=o("__init__()"),Ggr=o(" (throws an error)."),Ogr=l(),Lt=a("div"),F(u7.$$.fragment),Vgr=l(),bbe=a("p"),Xgr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),zgr=l(),Wd=a("p"),Wgr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),Qgr=o("not"),Hgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),Ugr=o("from_pretrained()"),Jgr=o(" to load the model weights."),Ygr=l(),F(H6.$$.fragment),Kgr=l(),Ar=a("div"),F(_7.$$.fragment),Zgr=l(),Fbe=a("p"),ehr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ohr=l(),Za=a("p"),rhr=o("The model class to instantiate is selected based on the "),Tbe=a("code"),thr=o("model_type"),ahr=o(` property of the config object (either
passed as an argument or loaded from `),Mbe=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=a("code"),lhr=o("pretrained_model_name_or_path"),ihr=o(":"),dhr=l(),se=a("ul"),U6=a("li"),Cbe=a("strong"),chr=o("albert"),fhr=o(" \u2014 "),aQ=a("a"),mhr=o("TFAlbertForPreTraining"),ghr=o(" (ALBERT model)"),hhr=l(),J6=a("li"),wbe=a("strong"),phr=o("bart"),uhr=o(" \u2014 "),nQ=a("a"),_hr=o("TFBartForConditionalGeneration"),bhr=o(" (BART model)"),vhr=l(),Y6=a("li"),Abe=a("strong"),Fhr=o("bert"),Thr=o(" \u2014 "),sQ=a("a"),Mhr=o("TFBertForPreTraining"),Ehr=o(" (BERT model)"),Chr=l(),K6=a("li"),ybe=a("strong"),whr=o("camembert"),Ahr=o(" \u2014 "),lQ=a("a"),yhr=o("TFCamembertForMaskedLM"),Lhr=o(" (CamemBERT model)"),xhr=l(),Z6=a("li"),Lbe=a("strong"),$hr=o("ctrl"),khr=o(" \u2014 "),iQ=a("a"),Shr=o("TFCTRLLMHeadModel"),Rhr=o(" (CTRL model)"),Phr=l(),eT=a("li"),xbe=a("strong"),Bhr=o("distilbert"),Ihr=o(" \u2014 "),dQ=a("a"),qhr=o("TFDistilBertForMaskedLM"),Nhr=o(" (DistilBERT model)"),jhr=l(),oT=a("li"),$be=a("strong"),Dhr=o("electra"),Ghr=o(" \u2014 "),cQ=a("a"),Ohr=o("TFElectraForPreTraining"),Vhr=o(" (ELECTRA model)"),Xhr=l(),rT=a("li"),kbe=a("strong"),zhr=o("flaubert"),Whr=o(" \u2014 "),fQ=a("a"),Qhr=o("TFFlaubertWithLMHeadModel"),Hhr=o(" (FlauBERT model)"),Uhr=l(),tT=a("li"),Sbe=a("strong"),Jhr=o("funnel"),Yhr=o(" \u2014 "),mQ=a("a"),Khr=o("TFFunnelForPreTraining"),Zhr=o(" (Funnel Transformer model)"),epr=l(),aT=a("li"),Rbe=a("strong"),opr=o("gpt2"),rpr=o(" \u2014 "),gQ=a("a"),tpr=o("TFGPT2LMHeadModel"),apr=o(" (OpenAI GPT-2 model)"),npr=l(),nT=a("li"),Pbe=a("strong"),spr=o("layoutlm"),lpr=o(" \u2014 "),hQ=a("a"),ipr=o("TFLayoutLMForMaskedLM"),dpr=o(" (LayoutLM model)"),cpr=l(),sT=a("li"),Bbe=a("strong"),fpr=o("lxmert"),mpr=o(" \u2014 "),pQ=a("a"),gpr=o("TFLxmertForPreTraining"),hpr=o(" (LXMERT model)"),ppr=l(),lT=a("li"),Ibe=a("strong"),upr=o("mobilebert"),_pr=o(" \u2014 "),uQ=a("a"),bpr=o("TFMobileBertForPreTraining"),vpr=o(" (MobileBERT model)"),Fpr=l(),iT=a("li"),qbe=a("strong"),Tpr=o("mpnet"),Mpr=o(" \u2014 "),_Q=a("a"),Epr=o("TFMPNetForMaskedLM"),Cpr=o(" (MPNet model)"),wpr=l(),dT=a("li"),Nbe=a("strong"),Apr=o("openai-gpt"),ypr=o(" \u2014 "),bQ=a("a"),Lpr=o("TFOpenAIGPTLMHeadModel"),xpr=o(" (OpenAI GPT model)"),$pr=l(),cT=a("li"),jbe=a("strong"),kpr=o("roberta"),Spr=o(" \u2014 "),vQ=a("a"),Rpr=o("TFRobertaForMaskedLM"),Ppr=o(" (RoBERTa model)"),Bpr=l(),fT=a("li"),Dbe=a("strong"),Ipr=o("t5"),qpr=o(" \u2014 "),FQ=a("a"),Npr=o("TFT5ForConditionalGeneration"),jpr=o(" (T5 model)"),Dpr=l(),mT=a("li"),Gbe=a("strong"),Gpr=o("tapas"),Opr=o(" \u2014 "),TQ=a("a"),Vpr=o("TFTapasForMaskedLM"),Xpr=o(" (TAPAS model)"),zpr=l(),gT=a("li"),Obe=a("strong"),Wpr=o("transfo-xl"),Qpr=o(" \u2014 "),MQ=a("a"),Hpr=o("TFTransfoXLLMHeadModel"),Upr=o(" (Transformer-XL model)"),Jpr=l(),hT=a("li"),Vbe=a("strong"),Ypr=o("vit_mae"),Kpr=o(" \u2014 "),EQ=a("a"),Zpr=o("TFViTMAEForPreTraining"),eur=o(" (ViTMAE model)"),our=l(),pT=a("li"),Xbe=a("strong"),rur=o("xlm"),tur=o(" \u2014 "),CQ=a("a"),aur=o("TFXLMWithLMHeadModel"),nur=o(" (XLM model)"),sur=l(),uT=a("li"),zbe=a("strong"),lur=o("xlm-roberta"),iur=o(" \u2014 "),wQ=a("a"),dur=o("TFXLMRobertaForMaskedLM"),cur=o(" (XLM-RoBERTa model)"),fur=l(),_T=a("li"),Wbe=a("strong"),mur=o("xlnet"),gur=o(" \u2014 "),AQ=a("a"),hur=o("TFXLNetLMHeadModel"),pur=o(" (XLNet model)"),uur=l(),F(bT.$$.fragment),lje=l(),Qd=a("h2"),vT=a("a"),Qbe=a("span"),F(b7.$$.fragment),_ur=l(),Hbe=a("span"),bur=o("TFAutoModelForCausalLM"),ije=l(),Zo=a("div"),F(v7.$$.fragment),vur=l(),Hd=a("p"),Fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=a("a"),Tur=o("from_pretrained()"),Mur=o(" class method or the "),LQ=a("a"),Eur=o("from_config()"),Cur=o(` class
method.`),wur=l(),F7=a("p"),Aur=o("This class cannot be instantiated directly using "),Ube=a("code"),yur=o("__init__()"),Lur=o(" (throws an error)."),xur=l(),xt=a("div"),F(T7.$$.fragment),$ur=l(),Jbe=a("p"),kur=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Sur=l(),Ud=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),Pur=o("not"),Bur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=a("a"),Iur=o("from_pretrained()"),qur=o(" to load the model weights."),Nur=l(),F(FT.$$.fragment),jur=l(),yr=a("div"),F(M7.$$.fragment),Dur=l(),Kbe=a("p"),Gur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Our=l(),en=a("p"),Vur=o("The model class to instantiate is selected based on the "),Zbe=a("code"),Xur=o("model_type"),zur=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),Wur=o("pretrained_model_name_or_path"),Qur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(":"),Jur=l(),Me=a("ul"),TT=a("li"),r2e=a("strong"),Yur=o("bert"),Kur=o(" \u2014 "),$Q=a("a"),Zur=o("TFBertLMHeadModel"),e_r=o(" (BERT model)"),o_r=l(),MT=a("li"),t2e=a("strong"),r_r=o("camembert"),t_r=o(" \u2014 "),kQ=a("a"),a_r=o("TFCamembertForCausalLM"),n_r=o(" (CamemBERT model)"),s_r=l(),ET=a("li"),a2e=a("strong"),l_r=o("ctrl"),i_r=o(" \u2014 "),SQ=a("a"),d_r=o("TFCTRLLMHeadModel"),c_r=o(" (CTRL model)"),f_r=l(),CT=a("li"),n2e=a("strong"),m_r=o("gpt2"),g_r=o(" \u2014 "),RQ=a("a"),h_r=o("TFGPT2LMHeadModel"),p_r=o(" (OpenAI GPT-2 model)"),u_r=l(),wT=a("li"),s2e=a("strong"),__r=o("gptj"),b_r=o(" \u2014 "),PQ=a("a"),v_r=o("TFGPTJForCausalLM"),F_r=o(" (GPT-J model)"),T_r=l(),AT=a("li"),l2e=a("strong"),M_r=o("openai-gpt"),E_r=o(" \u2014 "),BQ=a("a"),C_r=o("TFOpenAIGPTLMHeadModel"),w_r=o(" (OpenAI GPT model)"),A_r=l(),yT=a("li"),i2e=a("strong"),y_r=o("rembert"),L_r=o(" \u2014 "),IQ=a("a"),x_r=o("TFRemBertForCausalLM"),$_r=o(" (RemBERT model)"),k_r=l(),LT=a("li"),d2e=a("strong"),S_r=o("roberta"),R_r=o(" \u2014 "),qQ=a("a"),P_r=o("TFRobertaForCausalLM"),B_r=o(" (RoBERTa model)"),I_r=l(),xT=a("li"),c2e=a("strong"),q_r=o("roformer"),N_r=o(" \u2014 "),NQ=a("a"),j_r=o("TFRoFormerForCausalLM"),D_r=o(" (RoFormer model)"),G_r=l(),$T=a("li"),f2e=a("strong"),O_r=o("transfo-xl"),V_r=o(" \u2014 "),jQ=a("a"),X_r=o("TFTransfoXLLMHeadModel"),z_r=o(" (Transformer-XL model)"),W_r=l(),kT=a("li"),m2e=a("strong"),Q_r=o("xlm"),H_r=o(" \u2014 "),DQ=a("a"),U_r=o("TFXLMWithLMHeadModel"),J_r=o(" (XLM model)"),Y_r=l(),ST=a("li"),g2e=a("strong"),K_r=o("xlnet"),Z_r=o(" \u2014 "),GQ=a("a"),e0r=o("TFXLNetLMHeadModel"),o0r=o(" (XLNet model)"),r0r=l(),F(RT.$$.fragment),dje=l(),Jd=a("h2"),PT=a("a"),h2e=a("span"),F(E7.$$.fragment),t0r=l(),p2e=a("span"),a0r=o("TFAutoModelForImageClassification"),cje=l(),er=a("div"),F(C7.$$.fragment),n0r=l(),Yd=a("p"),s0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=a("a"),l0r=o("from_pretrained()"),i0r=o(" class method or the "),VQ=a("a"),d0r=o("from_config()"),c0r=o(` class
method.`),f0r=l(),w7=a("p"),m0r=o("This class cannot be instantiated directly using "),u2e=a("code"),g0r=o("__init__()"),h0r=o(" (throws an error)."),p0r=l(),$t=a("div"),F(A7.$$.fragment),u0r=l(),_2e=a("p"),_0r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b0r=l(),Kd=a("p"),v0r=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),F0r=o("not"),T0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),M0r=o("from_pretrained()"),E0r=o(" to load the model weights."),C0r=l(),F(BT.$$.fragment),w0r=l(),Lr=a("div"),F(y7.$$.fragment),A0r=l(),v2e=a("p"),y0r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),L0r=l(),on=a("p"),x0r=o("The model class to instantiate is selected based on the "),F2e=a("code"),$0r=o("model_type"),k0r=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),S0r=o("pretrained_model_name_or_path"),R0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),P0r=o("pretrained_model_name_or_path"),B0r=o(":"),I0r=l(),rn=a("ul"),IT=a("li"),E2e=a("strong"),q0r=o("convnext"),N0r=o(" \u2014 "),zQ=a("a"),j0r=o("TFConvNextForImageClassification"),D0r=o(" (ConvNext model)"),G0r=l(),qT=a("li"),C2e=a("strong"),O0r=o("data2vec-vision"),V0r=o(" \u2014 "),WQ=a("a"),X0r=o("TFData2VecVisionForImageClassification"),z0r=o(" (Data2VecVision model)"),W0r=l(),NT=a("li"),w2e=a("strong"),Q0r=o("swin"),H0r=o(" \u2014 "),QQ=a("a"),U0r=o("TFSwinForImageClassification"),J0r=o(" (Swin model)"),Y0r=l(),jT=a("li"),A2e=a("strong"),K0r=o("vit"),Z0r=o(" \u2014 "),HQ=a("a"),e1r=o("TFViTForImageClassification"),o1r=o(" (ViT model)"),r1r=l(),F(DT.$$.fragment),fje=l(),Zd=a("h2"),GT=a("a"),y2e=a("span"),F(L7.$$.fragment),t1r=l(),L2e=a("span"),a1r=o("TFAutoModelForMaskedLM"),mje=l(),or=a("div"),F(x7.$$.fragment),n1r=l(),ec=a("p"),s1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UQ=a("a"),l1r=o("from_pretrained()"),i1r=o(" class method or the "),JQ=a("a"),d1r=o("from_config()"),c1r=o(` class
method.`),f1r=l(),$7=a("p"),m1r=o("This class cannot be instantiated directly using "),x2e=a("code"),g1r=o("__init__()"),h1r=o(" (throws an error)."),p1r=l(),kt=a("div"),F(k7.$$.fragment),u1r=l(),$2e=a("p"),_1r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b1r=l(),oc=a("p"),v1r=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),F1r=o("not"),T1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=a("a"),M1r=o("from_pretrained()"),E1r=o(" to load the model weights."),C1r=l(),F(OT.$$.fragment),w1r=l(),xr=a("div"),F(S7.$$.fragment),A1r=l(),S2e=a("p"),y1r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L1r=l(),tn=a("p"),x1r=o("The model class to instantiate is selected based on the "),R2e=a("code"),$1r=o("model_type"),k1r=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),S1r=o("pretrained_model_name_or_path"),R1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),P1r=o("pretrained_model_name_or_path"),B1r=o(":"),I1r=l(),ie=a("ul"),VT=a("li"),I2e=a("strong"),q1r=o("albert"),N1r=o(" \u2014 "),KQ=a("a"),j1r=o("TFAlbertForMaskedLM"),D1r=o(" (ALBERT model)"),G1r=l(),XT=a("li"),q2e=a("strong"),O1r=o("bert"),V1r=o(" \u2014 "),ZQ=a("a"),X1r=o("TFBertForMaskedLM"),z1r=o(" (BERT model)"),W1r=l(),zT=a("li"),N2e=a("strong"),Q1r=o("camembert"),H1r=o(" \u2014 "),eH=a("a"),U1r=o("TFCamembertForMaskedLM"),J1r=o(" (CamemBERT model)"),Y1r=l(),WT=a("li"),j2e=a("strong"),K1r=o("convbert"),Z1r=o(" \u2014 "),oH=a("a"),ebr=o("TFConvBertForMaskedLM"),obr=o(" (ConvBERT model)"),rbr=l(),QT=a("li"),D2e=a("strong"),tbr=o("deberta"),abr=o(" \u2014 "),rH=a("a"),nbr=o("TFDebertaForMaskedLM"),sbr=o(" (DeBERTa model)"),lbr=l(),HT=a("li"),G2e=a("strong"),ibr=o("deberta-v2"),dbr=o(" \u2014 "),tH=a("a"),cbr=o("TFDebertaV2ForMaskedLM"),fbr=o(" (DeBERTa-v2 model)"),mbr=l(),UT=a("li"),O2e=a("strong"),gbr=o("distilbert"),hbr=o(" \u2014 "),aH=a("a"),pbr=o("TFDistilBertForMaskedLM"),ubr=o(" (DistilBERT model)"),_br=l(),JT=a("li"),V2e=a("strong"),bbr=o("electra"),vbr=o(" \u2014 "),nH=a("a"),Fbr=o("TFElectraForMaskedLM"),Tbr=o(" (ELECTRA model)"),Mbr=l(),YT=a("li"),X2e=a("strong"),Ebr=o("flaubert"),Cbr=o(" \u2014 "),sH=a("a"),wbr=o("TFFlaubertWithLMHeadModel"),Abr=o(" (FlauBERT model)"),ybr=l(),KT=a("li"),z2e=a("strong"),Lbr=o("funnel"),xbr=o(" \u2014 "),lH=a("a"),$br=o("TFFunnelForMaskedLM"),kbr=o(" (Funnel Transformer model)"),Sbr=l(),ZT=a("li"),W2e=a("strong"),Rbr=o("layoutlm"),Pbr=o(" \u2014 "),iH=a("a"),Bbr=o("TFLayoutLMForMaskedLM"),Ibr=o(" (LayoutLM model)"),qbr=l(),eM=a("li"),Q2e=a("strong"),Nbr=o("longformer"),jbr=o(" \u2014 "),dH=a("a"),Dbr=o("TFLongformerForMaskedLM"),Gbr=o(" (Longformer model)"),Obr=l(),oM=a("li"),H2e=a("strong"),Vbr=o("mobilebert"),Xbr=o(" \u2014 "),cH=a("a"),zbr=o("TFMobileBertForMaskedLM"),Wbr=o(" (MobileBERT model)"),Qbr=l(),rM=a("li"),U2e=a("strong"),Hbr=o("mpnet"),Ubr=o(" \u2014 "),fH=a("a"),Jbr=o("TFMPNetForMaskedLM"),Ybr=o(" (MPNet model)"),Kbr=l(),tM=a("li"),J2e=a("strong"),Zbr=o("rembert"),e2r=o(" \u2014 "),mH=a("a"),o2r=o("TFRemBertForMaskedLM"),r2r=o(" (RemBERT model)"),t2r=l(),aM=a("li"),Y2e=a("strong"),a2r=o("roberta"),n2r=o(" \u2014 "),gH=a("a"),s2r=o("TFRobertaForMaskedLM"),l2r=o(" (RoBERTa model)"),i2r=l(),nM=a("li"),K2e=a("strong"),d2r=o("roformer"),c2r=o(" \u2014 "),hH=a("a"),f2r=o("TFRoFormerForMaskedLM"),m2r=o(" (RoFormer model)"),g2r=l(),sM=a("li"),Z2e=a("strong"),h2r=o("tapas"),p2r=o(" \u2014 "),pH=a("a"),u2r=o("TFTapasForMaskedLM"),_2r=o(" (TAPAS model)"),b2r=l(),lM=a("li"),e4e=a("strong"),v2r=o("xlm"),F2r=o(" \u2014 "),uH=a("a"),T2r=o("TFXLMWithLMHeadModel"),M2r=o(" (XLM model)"),E2r=l(),iM=a("li"),o4e=a("strong"),C2r=o("xlm-roberta"),w2r=o(" \u2014 "),_H=a("a"),A2r=o("TFXLMRobertaForMaskedLM"),y2r=o(" (XLM-RoBERTa model)"),L2r=l(),F(dM.$$.fragment),gje=l(),rc=a("h2"),cM=a("a"),r4e=a("span"),F(R7.$$.fragment),x2r=l(),t4e=a("span"),$2r=o("TFAutoModelForSeq2SeqLM"),hje=l(),rr=a("div"),F(P7.$$.fragment),k2r=l(),tc=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bH=a("a"),R2r=o("from_pretrained()"),P2r=o(" class method or the "),vH=a("a"),B2r=o("from_config()"),I2r=o(` class
method.`),q2r=l(),B7=a("p"),N2r=o("This class cannot be instantiated directly using "),a4e=a("code"),j2r=o("__init__()"),D2r=o(" (throws an error)."),G2r=l(),St=a("div"),F(I7.$$.fragment),O2r=l(),n4e=a("p"),V2r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X2r=l(),ac=a("p"),z2r=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),W2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),H2r=o("from_pretrained()"),U2r=o(" to load the model weights."),J2r=l(),F(fM.$$.fragment),Y2r=l(),$r=a("div"),F(q7.$$.fragment),K2r=l(),l4e=a("p"),Z2r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),e4r=l(),an=a("p"),o4r=o("The model class to instantiate is selected based on the "),i4e=a("code"),r4r=o("model_type"),t4r=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),a4r=o("pretrained_model_name_or_path"),n4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(":"),i4r=l(),ye=a("ul"),mM=a("li"),f4e=a("strong"),d4r=o("bart"),c4r=o(" \u2014 "),TH=a("a"),f4r=o("TFBartForConditionalGeneration"),m4r=o(" (BART model)"),g4r=l(),gM=a("li"),m4e=a("strong"),h4r=o("blenderbot"),p4r=o(" \u2014 "),MH=a("a"),u4r=o("TFBlenderbotForConditionalGeneration"),_4r=o(" (Blenderbot model)"),b4r=l(),hM=a("li"),g4e=a("strong"),v4r=o("blenderbot-small"),F4r=o(" \u2014 "),EH=a("a"),T4r=o("TFBlenderbotSmallForConditionalGeneration"),M4r=o(" (BlenderbotSmall model)"),E4r=l(),pM=a("li"),h4e=a("strong"),C4r=o("encoder-decoder"),w4r=o(" \u2014 "),CH=a("a"),A4r=o("TFEncoderDecoderModel"),y4r=o(" (Encoder decoder model)"),L4r=l(),uM=a("li"),p4e=a("strong"),x4r=o("led"),$4r=o(" \u2014 "),wH=a("a"),k4r=o("TFLEDForConditionalGeneration"),S4r=o(" (LED model)"),R4r=l(),_M=a("li"),u4e=a("strong"),P4r=o("marian"),B4r=o(" \u2014 "),AH=a("a"),I4r=o("TFMarianMTModel"),q4r=o(" (Marian model)"),N4r=l(),bM=a("li"),_4e=a("strong"),j4r=o("mbart"),D4r=o(" \u2014 "),yH=a("a"),G4r=o("TFMBartForConditionalGeneration"),O4r=o(" (mBART model)"),V4r=l(),vM=a("li"),b4e=a("strong"),X4r=o("mt5"),z4r=o(" \u2014 "),LH=a("a"),W4r=o("TFMT5ForConditionalGeneration"),Q4r=o(" (mT5 model)"),H4r=l(),FM=a("li"),v4e=a("strong"),U4r=o("pegasus"),J4r=o(" \u2014 "),xH=a("a"),Y4r=o("TFPegasusForConditionalGeneration"),K4r=o(" (Pegasus model)"),Z4r=l(),TM=a("li"),F4e=a("strong"),evr=o("t5"),ovr=o(" \u2014 "),$H=a("a"),rvr=o("TFT5ForConditionalGeneration"),tvr=o(" (T5 model)"),avr=l(),F(MM.$$.fragment),pje=l(),nc=a("h2"),EM=a("a"),T4e=a("span"),F(N7.$$.fragment),nvr=l(),M4e=a("span"),svr=o("TFAutoModelForSequenceClassification"),uje=l(),tr=a("div"),F(j7.$$.fragment),lvr=l(),sc=a("p"),ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=a("a"),dvr=o("from_pretrained()"),cvr=o(" class method or the "),SH=a("a"),fvr=o("from_config()"),mvr=o(` class
method.`),gvr=l(),D7=a("p"),hvr=o("This class cannot be instantiated directly using "),E4e=a("code"),pvr=o("__init__()"),uvr=o(" (throws an error)."),_vr=l(),Rt=a("div"),F(G7.$$.fragment),bvr=l(),C4e=a("p"),vvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fvr=l(),lc=a("p"),Tvr=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),Mvr=o("not"),Evr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),Cvr=o("from_pretrained()"),wvr=o(" to load the model weights."),Avr=l(),F(CM.$$.fragment),yvr=l(),kr=a("div"),F(O7.$$.fragment),Lvr=l(),A4e=a("p"),xvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$vr=l(),nn=a("p"),kvr=o("The model class to instantiate is selected based on the "),y4e=a("code"),Svr=o("model_type"),Rvr=o(` property of the config object (either
passed as an argument or loaded from `),L4e=a("code"),Pvr=o("pretrained_model_name_or_path"),Bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),Ivr=o("pretrained_model_name_or_path"),qvr=o(":"),Nvr=l(),oe=a("ul"),wM=a("li"),$4e=a("strong"),jvr=o("albert"),Dvr=o(" \u2014 "),PH=a("a"),Gvr=o("TFAlbertForSequenceClassification"),Ovr=o(" (ALBERT model)"),Vvr=l(),AM=a("li"),k4e=a("strong"),Xvr=o("bert"),zvr=o(" \u2014 "),BH=a("a"),Wvr=o("TFBertForSequenceClassification"),Qvr=o(" (BERT model)"),Hvr=l(),yM=a("li"),S4e=a("strong"),Uvr=o("camembert"),Jvr=o(" \u2014 "),IH=a("a"),Yvr=o("TFCamembertForSequenceClassification"),Kvr=o(" (CamemBERT model)"),Zvr=l(),LM=a("li"),R4e=a("strong"),eFr=o("convbert"),oFr=o(" \u2014 "),qH=a("a"),rFr=o("TFConvBertForSequenceClassification"),tFr=o(" (ConvBERT model)"),aFr=l(),xM=a("li"),P4e=a("strong"),nFr=o("ctrl"),sFr=o(" \u2014 "),NH=a("a"),lFr=o("TFCTRLForSequenceClassification"),iFr=o(" (CTRL model)"),dFr=l(),$M=a("li"),B4e=a("strong"),cFr=o("deberta"),fFr=o(" \u2014 "),jH=a("a"),mFr=o("TFDebertaForSequenceClassification"),gFr=o(" (DeBERTa model)"),hFr=l(),kM=a("li"),I4e=a("strong"),pFr=o("deberta-v2"),uFr=o(" \u2014 "),DH=a("a"),_Fr=o("TFDebertaV2ForSequenceClassification"),bFr=o(" (DeBERTa-v2 model)"),vFr=l(),SM=a("li"),q4e=a("strong"),FFr=o("distilbert"),TFr=o(" \u2014 "),GH=a("a"),MFr=o("TFDistilBertForSequenceClassification"),EFr=o(" (DistilBERT model)"),CFr=l(),RM=a("li"),N4e=a("strong"),wFr=o("electra"),AFr=o(" \u2014 "),OH=a("a"),yFr=o("TFElectraForSequenceClassification"),LFr=o(" (ELECTRA model)"),xFr=l(),PM=a("li"),j4e=a("strong"),$Fr=o("flaubert"),kFr=o(" \u2014 "),VH=a("a"),SFr=o("TFFlaubertForSequenceClassification"),RFr=o(" (FlauBERT model)"),PFr=l(),BM=a("li"),D4e=a("strong"),BFr=o("funnel"),IFr=o(" \u2014 "),XH=a("a"),qFr=o("TFFunnelForSequenceClassification"),NFr=o(" (Funnel Transformer model)"),jFr=l(),IM=a("li"),G4e=a("strong"),DFr=o("gpt2"),GFr=o(" \u2014 "),zH=a("a"),OFr=o("TFGPT2ForSequenceClassification"),VFr=o(" (OpenAI GPT-2 model)"),XFr=l(),qM=a("li"),O4e=a("strong"),zFr=o("gptj"),WFr=o(" \u2014 "),WH=a("a"),QFr=o("TFGPTJForSequenceClassification"),HFr=o(" (GPT-J model)"),UFr=l(),NM=a("li"),V4e=a("strong"),JFr=o("layoutlm"),YFr=o(" \u2014 "),QH=a("a"),KFr=o("TFLayoutLMForSequenceClassification"),ZFr=o(" (LayoutLM model)"),e6r=l(),jM=a("li"),X4e=a("strong"),o6r=o("longformer"),r6r=o(" \u2014 "),HH=a("a"),t6r=o("TFLongformerForSequenceClassification"),a6r=o(" (Longformer model)"),n6r=l(),DM=a("li"),z4e=a("strong"),s6r=o("mobilebert"),l6r=o(" \u2014 "),UH=a("a"),i6r=o("TFMobileBertForSequenceClassification"),d6r=o(" (MobileBERT model)"),c6r=l(),GM=a("li"),W4e=a("strong"),f6r=o("mpnet"),m6r=o(" \u2014 "),JH=a("a"),g6r=o("TFMPNetForSequenceClassification"),h6r=o(" (MPNet model)"),p6r=l(),OM=a("li"),Q4e=a("strong"),u6r=o("openai-gpt"),_6r=o(" \u2014 "),YH=a("a"),b6r=o("TFOpenAIGPTForSequenceClassification"),v6r=o(" (OpenAI GPT model)"),F6r=l(),VM=a("li"),H4e=a("strong"),T6r=o("rembert"),M6r=o(" \u2014 "),KH=a("a"),E6r=o("TFRemBertForSequenceClassification"),C6r=o(" (RemBERT model)"),w6r=l(),XM=a("li"),U4e=a("strong"),A6r=o("roberta"),y6r=o(" \u2014 "),ZH=a("a"),L6r=o("TFRobertaForSequenceClassification"),x6r=o(" (RoBERTa model)"),$6r=l(),zM=a("li"),J4e=a("strong"),k6r=o("roformer"),S6r=o(" \u2014 "),eU=a("a"),R6r=o("TFRoFormerForSequenceClassification"),P6r=o(" (RoFormer model)"),B6r=l(),WM=a("li"),Y4e=a("strong"),I6r=o("tapas"),q6r=o(" \u2014 "),oU=a("a"),N6r=o("TFTapasForSequenceClassification"),j6r=o(" (TAPAS model)"),D6r=l(),QM=a("li"),K4e=a("strong"),G6r=o("transfo-xl"),O6r=o(" \u2014 "),rU=a("a"),V6r=o("TFTransfoXLForSequenceClassification"),X6r=o(" (Transformer-XL model)"),z6r=l(),HM=a("li"),Z4e=a("strong"),W6r=o("xlm"),Q6r=o(" \u2014 "),tU=a("a"),H6r=o("TFXLMForSequenceClassification"),U6r=o(" (XLM model)"),J6r=l(),UM=a("li"),eve=a("strong"),Y6r=o("xlm-roberta"),K6r=o(" \u2014 "),aU=a("a"),Z6r=o("TFXLMRobertaForSequenceClassification"),eTr=o(" (XLM-RoBERTa model)"),oTr=l(),JM=a("li"),ove=a("strong"),rTr=o("xlnet"),tTr=o(" \u2014 "),nU=a("a"),aTr=o("TFXLNetForSequenceClassification"),nTr=o(" (XLNet model)"),sTr=l(),F(YM.$$.fragment),_je=l(),ic=a("h2"),KM=a("a"),rve=a("span"),F(V7.$$.fragment),lTr=l(),tve=a("span"),iTr=o("TFAutoModelForMultipleChoice"),bje=l(),ar=a("div"),F(X7.$$.fragment),dTr=l(),dc=a("p"),cTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sU=a("a"),fTr=o("from_pretrained()"),mTr=o(" class method or the "),lU=a("a"),gTr=o("from_config()"),hTr=o(` class
method.`),pTr=l(),z7=a("p"),uTr=o("This class cannot be instantiated directly using "),ave=a("code"),_Tr=o("__init__()"),bTr=o(" (throws an error)."),vTr=l(),Pt=a("div"),F(W7.$$.fragment),FTr=l(),nve=a("p"),TTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MTr=l(),cc=a("p"),ETr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),CTr=o("not"),wTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),ATr=o("from_pretrained()"),yTr=o(" to load the model weights."),LTr=l(),F(ZM.$$.fragment),xTr=l(),Sr=a("div"),F(Q7.$$.fragment),$Tr=l(),lve=a("p"),kTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),STr=l(),sn=a("p"),RTr=o("The model class to instantiate is selected based on the "),ive=a("code"),PTr=o("model_type"),BTr=o(` property of the config object (either
passed as an argument or loaded from `),dve=a("code"),ITr=o("pretrained_model_name_or_path"),qTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=a("code"),NTr=o("pretrained_model_name_or_path"),jTr=o(":"),DTr=l(),pe=a("ul"),eE=a("li"),fve=a("strong"),GTr=o("albert"),OTr=o(" \u2014 "),dU=a("a"),VTr=o("TFAlbertForMultipleChoice"),XTr=o(" (ALBERT model)"),zTr=l(),oE=a("li"),mve=a("strong"),WTr=o("bert"),QTr=o(" \u2014 "),cU=a("a"),HTr=o("TFBertForMultipleChoice"),UTr=o(" (BERT model)"),JTr=l(),rE=a("li"),gve=a("strong"),YTr=o("camembert"),KTr=o(" \u2014 "),fU=a("a"),ZTr=o("TFCamembertForMultipleChoice"),eMr=o(" (CamemBERT model)"),oMr=l(),tE=a("li"),hve=a("strong"),rMr=o("convbert"),tMr=o(" \u2014 "),mU=a("a"),aMr=o("TFConvBertForMultipleChoice"),nMr=o(" (ConvBERT model)"),sMr=l(),aE=a("li"),pve=a("strong"),lMr=o("distilbert"),iMr=o(" \u2014 "),gU=a("a"),dMr=o("TFDistilBertForMultipleChoice"),cMr=o(" (DistilBERT model)"),fMr=l(),nE=a("li"),uve=a("strong"),mMr=o("electra"),gMr=o(" \u2014 "),hU=a("a"),hMr=o("TFElectraForMultipleChoice"),pMr=o(" (ELECTRA model)"),uMr=l(),sE=a("li"),_ve=a("strong"),_Mr=o("flaubert"),bMr=o(" \u2014 "),pU=a("a"),vMr=o("TFFlaubertForMultipleChoice"),FMr=o(" (FlauBERT model)"),TMr=l(),lE=a("li"),bve=a("strong"),MMr=o("funnel"),EMr=o(" \u2014 "),uU=a("a"),CMr=o("TFFunnelForMultipleChoice"),wMr=o(" (Funnel Transformer model)"),AMr=l(),iE=a("li"),vve=a("strong"),yMr=o("longformer"),LMr=o(" \u2014 "),_U=a("a"),xMr=o("TFLongformerForMultipleChoice"),$Mr=o(" (Longformer model)"),kMr=l(),dE=a("li"),Fve=a("strong"),SMr=o("mobilebert"),RMr=o(" \u2014 "),bU=a("a"),PMr=o("TFMobileBertForMultipleChoice"),BMr=o(" (MobileBERT model)"),IMr=l(),cE=a("li"),Tve=a("strong"),qMr=o("mpnet"),NMr=o(" \u2014 "),vU=a("a"),jMr=o("TFMPNetForMultipleChoice"),DMr=o(" (MPNet model)"),GMr=l(),fE=a("li"),Mve=a("strong"),OMr=o("rembert"),VMr=o(" \u2014 "),FU=a("a"),XMr=o("TFRemBertForMultipleChoice"),zMr=o(" (RemBERT model)"),WMr=l(),mE=a("li"),Eve=a("strong"),QMr=o("roberta"),HMr=o(" \u2014 "),TU=a("a"),UMr=o("TFRobertaForMultipleChoice"),JMr=o(" (RoBERTa model)"),YMr=l(),gE=a("li"),Cve=a("strong"),KMr=o("roformer"),ZMr=o(" \u2014 "),MU=a("a"),eEr=o("TFRoFormerForMultipleChoice"),oEr=o(" (RoFormer model)"),rEr=l(),hE=a("li"),wve=a("strong"),tEr=o("xlm"),aEr=o(" \u2014 "),EU=a("a"),nEr=o("TFXLMForMultipleChoice"),sEr=o(" (XLM model)"),lEr=l(),pE=a("li"),Ave=a("strong"),iEr=o("xlm-roberta"),dEr=o(" \u2014 "),CU=a("a"),cEr=o("TFXLMRobertaForMultipleChoice"),fEr=o(" (XLM-RoBERTa model)"),mEr=l(),uE=a("li"),yve=a("strong"),gEr=o("xlnet"),hEr=o(" \u2014 "),wU=a("a"),pEr=o("TFXLNetForMultipleChoice"),uEr=o(" (XLNet model)"),_Er=l(),F(_E.$$.fragment),vje=l(),fc=a("h2"),bE=a("a"),Lve=a("span"),F(H7.$$.fragment),bEr=l(),xve=a("span"),vEr=o("TFAutoModelForNextSentencePrediction"),Fje=l(),nr=a("div"),F(U7.$$.fragment),FEr=l(),mc=a("p"),TEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AU=a("a"),MEr=o("from_pretrained()"),EEr=o(" class method or the "),yU=a("a"),CEr=o("from_config()"),wEr=o(` class
method.`),AEr=l(),J7=a("p"),yEr=o("This class cannot be instantiated directly using "),$ve=a("code"),LEr=o("__init__()"),xEr=o(" (throws an error)."),$Er=l(),Bt=a("div"),F(Y7.$$.fragment),kEr=l(),kve=a("p"),SEr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),REr=l(),gc=a("p"),PEr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),BEr=o("not"),IEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),qEr=o("from_pretrained()"),NEr=o(" to load the model weights."),jEr=l(),F(vE.$$.fragment),DEr=l(),Rr=a("div"),F(K7.$$.fragment),GEr=l(),Rve=a("p"),OEr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VEr=l(),ln=a("p"),XEr=o("The model class to instantiate is selected based on the "),Pve=a("code"),zEr=o("model_type"),WEr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),QEr=o("pretrained_model_name_or_path"),HEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),UEr=o("pretrained_model_name_or_path"),JEr=o(":"),YEr=l(),Z7=a("ul"),FE=a("li"),qve=a("strong"),KEr=o("bert"),ZEr=o(" \u2014 "),xU=a("a"),eCr=o("TFBertForNextSentencePrediction"),oCr=o(" (BERT model)"),rCr=l(),TE=a("li"),Nve=a("strong"),tCr=o("mobilebert"),aCr=o(" \u2014 "),$U=a("a"),nCr=o("TFMobileBertForNextSentencePrediction"),sCr=o(" (MobileBERT model)"),lCr=l(),F(ME.$$.fragment),Tje=l(),hc=a("h2"),EE=a("a"),jve=a("span"),F(e9.$$.fragment),iCr=l(),Dve=a("span"),dCr=o("TFAutoModelForTableQuestionAnswering"),Mje=l(),sr=a("div"),F(o9.$$.fragment),cCr=l(),pc=a("p"),fCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kU=a("a"),mCr=o("from_pretrained()"),gCr=o(" class method or the "),SU=a("a"),hCr=o("from_config()"),pCr=o(` class
method.`),uCr=l(),r9=a("p"),_Cr=o("This class cannot be instantiated directly using "),Gve=a("code"),bCr=o("__init__()"),vCr=o(" (throws an error)."),FCr=l(),It=a("div"),F(t9.$$.fragment),TCr=l(),Ove=a("p"),MCr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ECr=l(),uc=a("p"),CCr=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),wCr=o("not"),ACr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),yCr=o("from_pretrained()"),LCr=o(" to load the model weights."),xCr=l(),F(CE.$$.fragment),$Cr=l(),Pr=a("div"),F(a9.$$.fragment),kCr=l(),Xve=a("p"),SCr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),RCr=l(),dn=a("p"),PCr=o("The model class to instantiate is selected based on the "),zve=a("code"),BCr=o("model_type"),ICr=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),qCr=o("pretrained_model_name_or_path"),NCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=a("code"),jCr=o("pretrained_model_name_or_path"),DCr=o(":"),GCr=l(),Hve=a("ul"),wE=a("li"),Uve=a("strong"),OCr=o("tapas"),VCr=o(" \u2014 "),PU=a("a"),XCr=o("TFTapasForQuestionAnswering"),zCr=o(" (TAPAS model)"),WCr=l(),F(AE.$$.fragment),Eje=l(),_c=a("h2"),yE=a("a"),Jve=a("span"),F(n9.$$.fragment),QCr=l(),Yve=a("span"),HCr=o("TFAutoModelForTokenClassification"),Cje=l(),lr=a("div"),F(s9.$$.fragment),UCr=l(),bc=a("p"),JCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BU=a("a"),YCr=o("from_pretrained()"),KCr=o(" class method or the "),IU=a("a"),ZCr=o("from_config()"),e5r=o(` class
method.`),o5r=l(),l9=a("p"),r5r=o("This class cannot be instantiated directly using "),Kve=a("code"),t5r=o("__init__()"),a5r=o(" (throws an error)."),n5r=l(),qt=a("div"),F(i9.$$.fragment),s5r=l(),Zve=a("p"),l5r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),i5r=l(),vc=a("p"),d5r=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),c5r=o("not"),f5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),m5r=o("from_pretrained()"),g5r=o(" to load the model weights."),h5r=l(),F(LE.$$.fragment),p5r=l(),Br=a("div"),F(d9.$$.fragment),u5r=l(),oFe=a("p"),_5r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b5r=l(),cn=a("p"),v5r=o("The model class to instantiate is selected based on the "),rFe=a("code"),F5r=o("model_type"),T5r=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),M5r=o("pretrained_model_name_or_path"),E5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),C5r=o("pretrained_model_name_or_path"),w5r=o(":"),A5r=l(),de=a("ul"),xE=a("li"),nFe=a("strong"),y5r=o("albert"),L5r=o(" \u2014 "),NU=a("a"),x5r=o("TFAlbertForTokenClassification"),$5r=o(" (ALBERT model)"),k5r=l(),$E=a("li"),sFe=a("strong"),S5r=o("bert"),R5r=o(" \u2014 "),jU=a("a"),P5r=o("TFBertForTokenClassification"),B5r=o(" (BERT model)"),I5r=l(),kE=a("li"),lFe=a("strong"),q5r=o("camembert"),N5r=o(" \u2014 "),DU=a("a"),j5r=o("TFCamembertForTokenClassification"),D5r=o(" (CamemBERT model)"),G5r=l(),SE=a("li"),iFe=a("strong"),O5r=o("convbert"),V5r=o(" \u2014 "),GU=a("a"),X5r=o("TFConvBertForTokenClassification"),z5r=o(" (ConvBERT model)"),W5r=l(),RE=a("li"),dFe=a("strong"),Q5r=o("deberta"),H5r=o(" \u2014 "),OU=a("a"),U5r=o("TFDebertaForTokenClassification"),J5r=o(" (DeBERTa model)"),Y5r=l(),PE=a("li"),cFe=a("strong"),K5r=o("deberta-v2"),Z5r=o(" \u2014 "),VU=a("a"),e3r=o("TFDebertaV2ForTokenClassification"),o3r=o(" (DeBERTa-v2 model)"),r3r=l(),BE=a("li"),fFe=a("strong"),t3r=o("distilbert"),a3r=o(" \u2014 "),XU=a("a"),n3r=o("TFDistilBertForTokenClassification"),s3r=o(" (DistilBERT model)"),l3r=l(),IE=a("li"),mFe=a("strong"),i3r=o("electra"),d3r=o(" \u2014 "),zU=a("a"),c3r=o("TFElectraForTokenClassification"),f3r=o(" (ELECTRA model)"),m3r=l(),qE=a("li"),gFe=a("strong"),g3r=o("flaubert"),h3r=o(" \u2014 "),WU=a("a"),p3r=o("TFFlaubertForTokenClassification"),u3r=o(" (FlauBERT model)"),_3r=l(),NE=a("li"),hFe=a("strong"),b3r=o("funnel"),v3r=o(" \u2014 "),QU=a("a"),F3r=o("TFFunnelForTokenClassification"),T3r=o(" (Funnel Transformer model)"),M3r=l(),jE=a("li"),pFe=a("strong"),E3r=o("layoutlm"),C3r=o(" \u2014 "),HU=a("a"),w3r=o("TFLayoutLMForTokenClassification"),A3r=o(" (LayoutLM model)"),y3r=l(),DE=a("li"),uFe=a("strong"),L3r=o("longformer"),x3r=o(" \u2014 "),UU=a("a"),$3r=o("TFLongformerForTokenClassification"),k3r=o(" (Longformer model)"),S3r=l(),GE=a("li"),_Fe=a("strong"),R3r=o("mobilebert"),P3r=o(" \u2014 "),JU=a("a"),B3r=o("TFMobileBertForTokenClassification"),I3r=o(" (MobileBERT model)"),q3r=l(),OE=a("li"),bFe=a("strong"),N3r=o("mpnet"),j3r=o(" \u2014 "),YU=a("a"),D3r=o("TFMPNetForTokenClassification"),G3r=o(" (MPNet model)"),O3r=l(),VE=a("li"),vFe=a("strong"),V3r=o("rembert"),X3r=o(" \u2014 "),KU=a("a"),z3r=o("TFRemBertForTokenClassification"),W3r=o(" (RemBERT model)"),Q3r=l(),XE=a("li"),FFe=a("strong"),H3r=o("roberta"),U3r=o(" \u2014 "),ZU=a("a"),J3r=o("TFRobertaForTokenClassification"),Y3r=o(" (RoBERTa model)"),K3r=l(),zE=a("li"),TFe=a("strong"),Z3r=o("roformer"),ewr=o(" \u2014 "),eJ=a("a"),owr=o("TFRoFormerForTokenClassification"),rwr=o(" (RoFormer model)"),twr=l(),WE=a("li"),MFe=a("strong"),awr=o("xlm"),nwr=o(" \u2014 "),oJ=a("a"),swr=o("TFXLMForTokenClassification"),lwr=o(" (XLM model)"),iwr=l(),QE=a("li"),EFe=a("strong"),dwr=o("xlm-roberta"),cwr=o(" \u2014 "),rJ=a("a"),fwr=o("TFXLMRobertaForTokenClassification"),mwr=o(" (XLM-RoBERTa model)"),gwr=l(),HE=a("li"),CFe=a("strong"),hwr=o("xlnet"),pwr=o(" \u2014 "),tJ=a("a"),uwr=o("TFXLNetForTokenClassification"),_wr=o(" (XLNet model)"),bwr=l(),F(UE.$$.fragment),wje=l(),Fc=a("h2"),JE=a("a"),wFe=a("span"),F(c9.$$.fragment),vwr=l(),AFe=a("span"),Fwr=o("TFAutoModelForQuestionAnswering"),Aje=l(),ir=a("div"),F(f9.$$.fragment),Twr=l(),Tc=a("p"),Mwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aJ=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" class method or the "),nJ=a("a"),wwr=o("from_config()"),Awr=o(` class
method.`),ywr=l(),m9=a("p"),Lwr=o("This class cannot be instantiated directly using "),yFe=a("code"),xwr=o("__init__()"),$wr=o(" (throws an error)."),kwr=l(),Nt=a("div"),F(g9.$$.fragment),Swr=l(),LFe=a("p"),Rwr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Pwr=l(),Mc=a("p"),Bwr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),Iwr=o("not"),qwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),Nwr=o("from_pretrained()"),jwr=o(" to load the model weights."),Dwr=l(),F(YE.$$.fragment),Gwr=l(),Ir=a("div"),F(h9.$$.fragment),Owr=l(),$Fe=a("p"),Vwr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xwr=l(),fn=a("p"),zwr=o("The model class to instantiate is selected based on the "),kFe=a("code"),Wwr=o("model_type"),Qwr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),Jwr=o("pretrained_model_name_or_path"),Ywr=o(":"),Kwr=l(),ce=a("ul"),KE=a("li"),PFe=a("strong"),Zwr=o("albert"),eAr=o(" \u2014 "),lJ=a("a"),oAr=o("TFAlbertForQuestionAnswering"),rAr=o(" (ALBERT model)"),tAr=l(),ZE=a("li"),BFe=a("strong"),aAr=o("bert"),nAr=o(" \u2014 "),iJ=a("a"),sAr=o("TFBertForQuestionAnswering"),lAr=o(" (BERT model)"),iAr=l(),eC=a("li"),IFe=a("strong"),dAr=o("camembert"),cAr=o(" \u2014 "),dJ=a("a"),fAr=o("TFCamembertForQuestionAnswering"),mAr=o(" (CamemBERT model)"),gAr=l(),oC=a("li"),qFe=a("strong"),hAr=o("convbert"),pAr=o(" \u2014 "),cJ=a("a"),uAr=o("TFConvBertForQuestionAnswering"),_Ar=o(" (ConvBERT model)"),bAr=l(),rC=a("li"),NFe=a("strong"),vAr=o("deberta"),FAr=o(" \u2014 "),fJ=a("a"),TAr=o("TFDebertaForQuestionAnswering"),MAr=o(" (DeBERTa model)"),EAr=l(),tC=a("li"),jFe=a("strong"),CAr=o("deberta-v2"),wAr=o(" \u2014 "),mJ=a("a"),AAr=o("TFDebertaV2ForQuestionAnswering"),yAr=o(" (DeBERTa-v2 model)"),LAr=l(),aC=a("li"),DFe=a("strong"),xAr=o("distilbert"),$Ar=o(" \u2014 "),gJ=a("a"),kAr=o("TFDistilBertForQuestionAnswering"),SAr=o(" (DistilBERT model)"),RAr=l(),nC=a("li"),GFe=a("strong"),PAr=o("electra"),BAr=o(" \u2014 "),hJ=a("a"),IAr=o("TFElectraForQuestionAnswering"),qAr=o(" (ELECTRA model)"),NAr=l(),sC=a("li"),OFe=a("strong"),jAr=o("flaubert"),DAr=o(" \u2014 "),pJ=a("a"),GAr=o("TFFlaubertForQuestionAnsweringSimple"),OAr=o(" (FlauBERT model)"),VAr=l(),lC=a("li"),VFe=a("strong"),XAr=o("funnel"),zAr=o(" \u2014 "),uJ=a("a"),WAr=o("TFFunnelForQuestionAnswering"),QAr=o(" (Funnel Transformer model)"),HAr=l(),iC=a("li"),XFe=a("strong"),UAr=o("gptj"),JAr=o(" \u2014 "),_J=a("a"),YAr=o("TFGPTJForQuestionAnswering"),KAr=o(" (GPT-J model)"),ZAr=l(),dC=a("li"),zFe=a("strong"),eyr=o("longformer"),oyr=o(" \u2014 "),bJ=a("a"),ryr=o("TFLongformerForQuestionAnswering"),tyr=o(" (Longformer model)"),ayr=l(),cC=a("li"),WFe=a("strong"),nyr=o("mobilebert"),syr=o(" \u2014 "),vJ=a("a"),lyr=o("TFMobileBertForQuestionAnswering"),iyr=o(" (MobileBERT model)"),dyr=l(),fC=a("li"),QFe=a("strong"),cyr=o("mpnet"),fyr=o(" \u2014 "),FJ=a("a"),myr=o("TFMPNetForQuestionAnswering"),gyr=o(" (MPNet model)"),hyr=l(),mC=a("li"),HFe=a("strong"),pyr=o("rembert"),uyr=o(" \u2014 "),TJ=a("a"),_yr=o("TFRemBertForQuestionAnswering"),byr=o(" (RemBERT model)"),vyr=l(),gC=a("li"),UFe=a("strong"),Fyr=o("roberta"),Tyr=o(" \u2014 "),MJ=a("a"),Myr=o("TFRobertaForQuestionAnswering"),Eyr=o(" (RoBERTa model)"),Cyr=l(),hC=a("li"),JFe=a("strong"),wyr=o("roformer"),Ayr=o(" \u2014 "),EJ=a("a"),yyr=o("TFRoFormerForQuestionAnswering"),Lyr=o(" (RoFormer model)"),xyr=l(),pC=a("li"),YFe=a("strong"),$yr=o("xlm"),kyr=o(" \u2014 "),CJ=a("a"),Syr=o("TFXLMForQuestionAnsweringSimple"),Ryr=o(" (XLM model)"),Pyr=l(),uC=a("li"),KFe=a("strong"),Byr=o("xlm-roberta"),Iyr=o(" \u2014 "),wJ=a("a"),qyr=o("TFXLMRobertaForQuestionAnswering"),Nyr=o(" (XLM-RoBERTa model)"),jyr=l(),_C=a("li"),ZFe=a("strong"),Dyr=o("xlnet"),Gyr=o(" \u2014 "),AJ=a("a"),Oyr=o("TFXLNetForQuestionAnsweringSimple"),Vyr=o(" (XLNet model)"),Xyr=l(),F(bC.$$.fragment),yje=l(),Ec=a("h2"),vC=a("a"),e6e=a("span"),F(p9.$$.fragment),zyr=l(),o6e=a("span"),Wyr=o("TFAutoModelForVision2Seq"),Lje=l(),dr=a("div"),F(u9.$$.fragment),Qyr=l(),Cc=a("p"),Hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yJ=a("a"),Uyr=o("from_pretrained()"),Jyr=o(" class method or the "),LJ=a("a"),Yyr=o("from_config()"),Kyr=o(` class
method.`),Zyr=l(),_9=a("p"),eLr=o("This class cannot be instantiated directly using "),r6e=a("code"),oLr=o("__init__()"),rLr=o(" (throws an error)."),tLr=l(),jt=a("div"),F(b9.$$.fragment),aLr=l(),t6e=a("p"),nLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sLr=l(),wc=a("p"),lLr=o(`Note:
Loading a model from its configuration file does `),a6e=a("strong"),iLr=o("not"),dLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=a("a"),cLr=o("from_pretrained()"),fLr=o(" to load the model weights."),mLr=l(),F(FC.$$.fragment),gLr=l(),qr=a("div"),F(v9.$$.fragment),hLr=l(),n6e=a("p"),pLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uLr=l(),mn=a("p"),_Lr=o("The model class to instantiate is selected based on the "),s6e=a("code"),bLr=o("model_type"),vLr=o(` property of the config object (either
passed as an argument or loaded from `),l6e=a("code"),FLr=o("pretrained_model_name_or_path"),TLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(":"),CLr=l(),d6e=a("ul"),TC=a("li"),c6e=a("strong"),wLr=o("vision-encoder-decoder"),ALr=o(" \u2014 "),$J=a("a"),yLr=o("TFVisionEncoderDecoderModel"),LLr=o(" (Vision Encoder decoder model)"),xLr=l(),F(MC.$$.fragment),xje=l(),Ac=a("h2"),EC=a("a"),f6e=a("span"),F(F9.$$.fragment),$Lr=l(),m6e=a("span"),kLr=o("TFAutoModelForSpeechSeq2Seq"),$je=l(),cr=a("div"),F(T9.$$.fragment),SLr=l(),yc=a("p"),RLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=a("a"),PLr=o("from_pretrained()"),BLr=o(" class method or the "),SJ=a("a"),ILr=o("from_config()"),qLr=o(` class
method.`),NLr=l(),M9=a("p"),jLr=o("This class cannot be instantiated directly using "),g6e=a("code"),DLr=o("__init__()"),GLr=o(" (throws an error)."),OLr=l(),Dt=a("div"),F(E9.$$.fragment),VLr=l(),h6e=a("p"),XLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zLr=l(),Lc=a("p"),WLr=o(`Note:
Loading a model from its configuration file does `),p6e=a("strong"),QLr=o("not"),HLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),ULr=o("from_pretrained()"),JLr=o(" to load the model weights."),YLr=l(),F(CC.$$.fragment),KLr=l(),Nr=a("div"),F(C9.$$.fragment),ZLr=l(),u6e=a("p"),e8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),o8r=l(),gn=a("p"),r8r=o("The model class to instantiate is selected based on the "),_6e=a("code"),t8r=o("model_type"),a8r=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),n8r=o("pretrained_model_name_or_path"),s8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=a("code"),l8r=o("pretrained_model_name_or_path"),i8r=o(":"),d8r=l(),F6e=a("ul"),wC=a("li"),T6e=a("strong"),c8r=o("speech_to_text"),f8r=o(" \u2014 "),PJ=a("a"),m8r=o("TFSpeech2TextForConditionalGeneration"),g8r=o(" (Speech2Text model)"),h8r=l(),F(AC.$$.fragment),kje=l(),xc=a("h2"),yC=a("a"),M6e=a("span"),F(w9.$$.fragment),p8r=l(),E6e=a("span"),u8r=o("FlaxAutoModel"),Sje=l(),fr=a("div"),F(A9.$$.fragment),_8r=l(),$c=a("p"),b8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BJ=a("a"),v8r=o("from_pretrained()"),F8r=o(" class method or the "),IJ=a("a"),T8r=o("from_config()"),M8r=o(` class
method.`),E8r=l(),y9=a("p"),C8r=o("This class cannot be instantiated directly using "),C6e=a("code"),w8r=o("__init__()"),A8r=o(" (throws an error)."),y8r=l(),Gt=a("div"),F(L9.$$.fragment),L8r=l(),w6e=a("p"),x8r=o("Instantiates one of the base model classes of the library from a configuration."),$8r=l(),kc=a("p"),k8r=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),S8r=o("not"),R8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),P8r=o("from_pretrained()"),B8r=o(" to load the model weights."),I8r=l(),F(LC.$$.fragment),q8r=l(),jr=a("div"),F(x9.$$.fragment),N8r=l(),y6e=a("p"),j8r=o("Instantiate one of the base model classes of the library from a pretrained model."),D8r=l(),hn=a("p"),G8r=o("The model class to instantiate is selected based on the "),L6e=a("code"),O8r=o("model_type"),V8r=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),X8r=o("pretrained_model_name_or_path"),z8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),W8r=o("pretrained_model_name_or_path"),Q8r=o(":"),H8r=l(),te=a("ul"),xC=a("li"),k6e=a("strong"),U8r=o("albert"),J8r=o(" \u2014 "),NJ=a("a"),Y8r=o("FlaxAlbertModel"),K8r=o(" (ALBERT model)"),Z8r=l(),$C=a("li"),S6e=a("strong"),e7r=o("bart"),o7r=o(" \u2014 "),jJ=a("a"),r7r=o("FlaxBartModel"),t7r=o(" (BART model)"),a7r=l(),kC=a("li"),R6e=a("strong"),n7r=o("beit"),s7r=o(" \u2014 "),DJ=a("a"),l7r=o("FlaxBeitModel"),i7r=o(" (BEiT model)"),d7r=l(),SC=a("li"),P6e=a("strong"),c7r=o("bert"),f7r=o(" \u2014 "),GJ=a("a"),m7r=o("FlaxBertModel"),g7r=o(" (BERT model)"),h7r=l(),RC=a("li"),B6e=a("strong"),p7r=o("big_bird"),u7r=o(" \u2014 "),OJ=a("a"),_7r=o("FlaxBigBirdModel"),b7r=o(" (BigBird model)"),v7r=l(),PC=a("li"),I6e=a("strong"),F7r=o("blenderbot"),T7r=o(" \u2014 "),VJ=a("a"),M7r=o("FlaxBlenderbotModel"),E7r=o(" (Blenderbot model)"),C7r=l(),BC=a("li"),q6e=a("strong"),w7r=o("blenderbot-small"),A7r=o(" \u2014 "),XJ=a("a"),y7r=o("FlaxBlenderbotSmallModel"),L7r=o(" (BlenderbotSmall model)"),x7r=l(),IC=a("li"),N6e=a("strong"),$7r=o("clip"),k7r=o(" \u2014 "),zJ=a("a"),S7r=o("FlaxCLIPModel"),R7r=o(" (CLIP model)"),P7r=l(),qC=a("li"),j6e=a("strong"),B7r=o("distilbert"),I7r=o(" \u2014 "),WJ=a("a"),q7r=o("FlaxDistilBertModel"),N7r=o(" (DistilBERT model)"),j7r=l(),NC=a("li"),D6e=a("strong"),D7r=o("electra"),G7r=o(" \u2014 "),QJ=a("a"),O7r=o("FlaxElectraModel"),V7r=o(" (ELECTRA model)"),X7r=l(),jC=a("li"),G6e=a("strong"),z7r=o("gpt2"),W7r=o(" \u2014 "),HJ=a("a"),Q7r=o("FlaxGPT2Model"),H7r=o(" (OpenAI GPT-2 model)"),U7r=l(),DC=a("li"),O6e=a("strong"),J7r=o("gpt_neo"),Y7r=o(" \u2014 "),UJ=a("a"),K7r=o("FlaxGPTNeoModel"),Z7r=o(" (GPT Neo model)"),e9r=l(),GC=a("li"),V6e=a("strong"),o9r=o("gptj"),r9r=o(" \u2014 "),JJ=a("a"),t9r=o("FlaxGPTJModel"),a9r=o(" (GPT-J model)"),n9r=l(),OC=a("li"),X6e=a("strong"),s9r=o("marian"),l9r=o(" \u2014 "),YJ=a("a"),i9r=o("FlaxMarianModel"),d9r=o(" (Marian model)"),c9r=l(),VC=a("li"),z6e=a("strong"),f9r=o("mbart"),m9r=o(" \u2014 "),KJ=a("a"),g9r=o("FlaxMBartModel"),h9r=o(" (mBART model)"),p9r=l(),XC=a("li"),W6e=a("strong"),u9r=o("mt5"),_9r=o(" \u2014 "),ZJ=a("a"),b9r=o("FlaxMT5Model"),v9r=o(" (mT5 model)"),F9r=l(),zC=a("li"),Q6e=a("strong"),T9r=o("pegasus"),M9r=o(" \u2014 "),eY=a("a"),E9r=o("FlaxPegasusModel"),C9r=o(" (Pegasus model)"),w9r=l(),WC=a("li"),H6e=a("strong"),A9r=o("roberta"),y9r=o(" \u2014 "),oY=a("a"),L9r=o("FlaxRobertaModel"),x9r=o(" (RoBERTa model)"),$9r=l(),QC=a("li"),U6e=a("strong"),k9r=o("roformer"),S9r=o(" \u2014 "),rY=a("a"),R9r=o("FlaxRoFormerModel"),P9r=o(" (RoFormer model)"),B9r=l(),HC=a("li"),J6e=a("strong"),I9r=o("t5"),q9r=o(" \u2014 "),tY=a("a"),N9r=o("FlaxT5Model"),j9r=o(" (T5 model)"),D9r=l(),UC=a("li"),Y6e=a("strong"),G9r=o("vision-text-dual-encoder"),O9r=o(" \u2014 "),aY=a("a"),V9r=o("FlaxVisionTextDualEncoderModel"),X9r=o(" (VisionTextDualEncoder model)"),z9r=l(),JC=a("li"),K6e=a("strong"),W9r=o("vit"),Q9r=o(" \u2014 "),nY=a("a"),H9r=o("FlaxViTModel"),U9r=o(" (ViT model)"),J9r=l(),YC=a("li"),Z6e=a("strong"),Y9r=o("wav2vec2"),K9r=o(" \u2014 "),sY=a("a"),Z9r=o("FlaxWav2Vec2Model"),exr=o(" (Wav2Vec2 model)"),oxr=l(),KC=a("li"),eTe=a("strong"),rxr=o("xglm"),txr=o(" \u2014 "),lY=a("a"),axr=o("FlaxXGLMModel"),nxr=o(" (XGLM model)"),sxr=l(),ZC=a("li"),oTe=a("strong"),lxr=o("xlm-roberta"),ixr=o(" \u2014 "),iY=a("a"),dxr=o("FlaxXLMRobertaModel"),cxr=o(" (XLM-RoBERTa model)"),fxr=l(),F(e5.$$.fragment),Rje=l(),Sc=a("h2"),o5=a("a"),rTe=a("span"),F($9.$$.fragment),mxr=l(),tTe=a("span"),gxr=o("FlaxAutoModelForCausalLM"),Pje=l(),mr=a("div"),F(k9.$$.fragment),hxr=l(),Rc=a("p"),pxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=a("a"),uxr=o("from_pretrained()"),_xr=o(" class method or the "),cY=a("a"),bxr=o("from_config()"),vxr=o(` class
method.`),Fxr=l(),S9=a("p"),Txr=o("This class cannot be instantiated directly using "),aTe=a("code"),Mxr=o("__init__()"),Exr=o(" (throws an error)."),Cxr=l(),Ot=a("div"),F(R9.$$.fragment),wxr=l(),nTe=a("p"),Axr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yxr=l(),Pc=a("p"),Lxr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),xxr=o("not"),$xr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),kxr=o("from_pretrained()"),Sxr=o(" to load the model weights."),Rxr=l(),F(r5.$$.fragment),Pxr=l(),Dr=a("div"),F(P9.$$.fragment),Bxr=l(),lTe=a("p"),Ixr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qxr=l(),pn=a("p"),Nxr=o("The model class to instantiate is selected based on the "),iTe=a("code"),jxr=o("model_type"),Dxr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),Gxr=o("pretrained_model_name_or_path"),Oxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(":"),zxr=l(),Re=a("ul"),t5=a("li"),fTe=a("strong"),Wxr=o("bart"),Qxr=o(" \u2014 "),mY=a("a"),Hxr=o("FlaxBartForCausalLM"),Uxr=o(" (BART model)"),Jxr=l(),a5=a("li"),mTe=a("strong"),Yxr=o("bert"),Kxr=o(" \u2014 "),gY=a("a"),Zxr=o("FlaxBertForCausalLM"),e$r=o(" (BERT model)"),o$r=l(),n5=a("li"),gTe=a("strong"),r$r=o("big_bird"),t$r=o(" \u2014 "),hY=a("a"),a$r=o("FlaxBigBirdForCausalLM"),n$r=o(" (BigBird model)"),s$r=l(),s5=a("li"),hTe=a("strong"),l$r=o("electra"),i$r=o(" \u2014 "),pY=a("a"),d$r=o("FlaxElectraForCausalLM"),c$r=o(" (ELECTRA model)"),f$r=l(),l5=a("li"),pTe=a("strong"),m$r=o("gpt2"),g$r=o(" \u2014 "),uY=a("a"),h$r=o("FlaxGPT2LMHeadModel"),p$r=o(" (OpenAI GPT-2 model)"),u$r=l(),i5=a("li"),uTe=a("strong"),_$r=o("gpt_neo"),b$r=o(" \u2014 "),_Y=a("a"),v$r=o("FlaxGPTNeoForCausalLM"),F$r=o(" (GPT Neo model)"),T$r=l(),d5=a("li"),_Te=a("strong"),M$r=o("gptj"),E$r=o(" \u2014 "),bY=a("a"),C$r=o("FlaxGPTJForCausalLM"),w$r=o(" (GPT-J model)"),A$r=l(),c5=a("li"),bTe=a("strong"),y$r=o("roberta"),L$r=o(" \u2014 "),vY=a("a"),x$r=o("FlaxRobertaForCausalLM"),$$r=o(" (RoBERTa model)"),k$r=l(),f5=a("li"),vTe=a("strong"),S$r=o("xglm"),R$r=o(" \u2014 "),FY=a("a"),P$r=o("FlaxXGLMForCausalLM"),B$r=o(" (XGLM model)"),I$r=l(),F(m5.$$.fragment),Bje=l(),Bc=a("h2"),g5=a("a"),FTe=a("span"),F(B9.$$.fragment),q$r=l(),TTe=a("span"),N$r=o("FlaxAutoModelForPreTraining"),Ije=l(),gr=a("div"),F(I9.$$.fragment),j$r=l(),Ic=a("p"),D$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TY=a("a"),G$r=o("from_pretrained()"),O$r=o(" class method or the "),MY=a("a"),V$r=o("from_config()"),X$r=o(` class
method.`),z$r=l(),q9=a("p"),W$r=o("This class cannot be instantiated directly using "),MTe=a("code"),Q$r=o("__init__()"),H$r=o(" (throws an error)."),U$r=l(),Vt=a("div"),F(N9.$$.fragment),J$r=l(),ETe=a("p"),Y$r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K$r=l(),qc=a("p"),Z$r=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),ekr=o("not"),okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),rkr=o("from_pretrained()"),tkr=o(" to load the model weights."),akr=l(),F(h5.$$.fragment),nkr=l(),Gr=a("div"),F(j9.$$.fragment),skr=l(),wTe=a("p"),lkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ikr=l(),un=a("p"),dkr=o("The model class to instantiate is selected based on the "),ATe=a("code"),ckr=o("model_type"),fkr=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),hkr=o("pretrained_model_name_or_path"),pkr=o(":"),ukr=l(),Ee=a("ul"),p5=a("li"),xTe=a("strong"),_kr=o("albert"),bkr=o(" \u2014 "),CY=a("a"),vkr=o("FlaxAlbertForPreTraining"),Fkr=o(" (ALBERT model)"),Tkr=l(),u5=a("li"),$Te=a("strong"),Mkr=o("bart"),Ekr=o(" \u2014 "),wY=a("a"),Ckr=o("FlaxBartForConditionalGeneration"),wkr=o(" (BART model)"),Akr=l(),_5=a("li"),kTe=a("strong"),ykr=o("bert"),Lkr=o(" \u2014 "),AY=a("a"),xkr=o("FlaxBertForPreTraining"),$kr=o(" (BERT model)"),kkr=l(),b5=a("li"),STe=a("strong"),Skr=o("big_bird"),Rkr=o(" \u2014 "),yY=a("a"),Pkr=o("FlaxBigBirdForPreTraining"),Bkr=o(" (BigBird model)"),Ikr=l(),v5=a("li"),RTe=a("strong"),qkr=o("electra"),Nkr=o(" \u2014 "),LY=a("a"),jkr=o("FlaxElectraForPreTraining"),Dkr=o(" (ELECTRA model)"),Gkr=l(),F5=a("li"),PTe=a("strong"),Okr=o("mbart"),Vkr=o(" \u2014 "),xY=a("a"),Xkr=o("FlaxMBartForConditionalGeneration"),zkr=o(" (mBART model)"),Wkr=l(),T5=a("li"),BTe=a("strong"),Qkr=o("mt5"),Hkr=o(" \u2014 "),$Y=a("a"),Ukr=o("FlaxMT5ForConditionalGeneration"),Jkr=o(" (mT5 model)"),Ykr=l(),M5=a("li"),ITe=a("strong"),Kkr=o("roberta"),Zkr=o(" \u2014 "),kY=a("a"),eSr=o("FlaxRobertaForMaskedLM"),oSr=o(" (RoBERTa model)"),rSr=l(),E5=a("li"),qTe=a("strong"),tSr=o("roformer"),aSr=o(" \u2014 "),SY=a("a"),nSr=o("FlaxRoFormerForMaskedLM"),sSr=o(" (RoFormer model)"),lSr=l(),C5=a("li"),NTe=a("strong"),iSr=o("t5"),dSr=o(" \u2014 "),RY=a("a"),cSr=o("FlaxT5ForConditionalGeneration"),fSr=o(" (T5 model)"),mSr=l(),w5=a("li"),jTe=a("strong"),gSr=o("wav2vec2"),hSr=o(" \u2014 "),PY=a("a"),pSr=o("FlaxWav2Vec2ForPreTraining"),uSr=o(" (Wav2Vec2 model)"),_Sr=l(),A5=a("li"),DTe=a("strong"),bSr=o("xlm-roberta"),vSr=o(" \u2014 "),BY=a("a"),FSr=o("FlaxXLMRobertaForMaskedLM"),TSr=o(" (XLM-RoBERTa model)"),MSr=l(),F(y5.$$.fragment),qje=l(),Nc=a("h2"),L5=a("a"),GTe=a("span"),F(D9.$$.fragment),ESr=l(),OTe=a("span"),CSr=o("FlaxAutoModelForMaskedLM"),Nje=l(),hr=a("div"),F(G9.$$.fragment),wSr=l(),jc=a("p"),ASr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IY=a("a"),ySr=o("from_pretrained()"),LSr=o(" class method or the "),qY=a("a"),xSr=o("from_config()"),$Sr=o(` class
method.`),kSr=l(),O9=a("p"),SSr=o("This class cannot be instantiated directly using "),VTe=a("code"),RSr=o("__init__()"),PSr=o(" (throws an error)."),BSr=l(),Xt=a("div"),F(V9.$$.fragment),ISr=l(),XTe=a("p"),qSr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),NSr=l(),Dc=a("p"),jSr=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),DSr=o("not"),GSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),OSr=o("from_pretrained()"),VSr=o(" to load the model weights."),XSr=l(),F(x5.$$.fragment),zSr=l(),Or=a("div"),F(X9.$$.fragment),WSr=l(),WTe=a("p"),QSr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HSr=l(),_n=a("p"),USr=o("The model class to instantiate is selected based on the "),QTe=a("code"),JSr=o("model_type"),YSr=o(` property of the config object (either
passed as an argument or loaded from `),HTe=a("code"),KSr=o("pretrained_model_name_or_path"),ZSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=a("code"),eRr=o("pretrained_model_name_or_path"),oRr=o(":"),rRr=l(),Le=a("ul"),$5=a("li"),JTe=a("strong"),tRr=o("albert"),aRr=o(" \u2014 "),jY=a("a"),nRr=o("FlaxAlbertForMaskedLM"),sRr=o(" (ALBERT model)"),lRr=l(),k5=a("li"),YTe=a("strong"),iRr=o("bart"),dRr=o(" \u2014 "),DY=a("a"),cRr=o("FlaxBartForConditionalGeneration"),fRr=o(" (BART model)"),mRr=l(),S5=a("li"),KTe=a("strong"),gRr=o("bert"),hRr=o(" \u2014 "),GY=a("a"),pRr=o("FlaxBertForMaskedLM"),uRr=o(" (BERT model)"),_Rr=l(),R5=a("li"),ZTe=a("strong"),bRr=o("big_bird"),vRr=o(" \u2014 "),OY=a("a"),FRr=o("FlaxBigBirdForMaskedLM"),TRr=o(" (BigBird model)"),MRr=l(),P5=a("li"),eMe=a("strong"),ERr=o("distilbert"),CRr=o(" \u2014 "),VY=a("a"),wRr=o("FlaxDistilBertForMaskedLM"),ARr=o(" (DistilBERT model)"),yRr=l(),B5=a("li"),oMe=a("strong"),LRr=o("electra"),xRr=o(" \u2014 "),XY=a("a"),$Rr=o("FlaxElectraForMaskedLM"),kRr=o(" (ELECTRA model)"),SRr=l(),I5=a("li"),rMe=a("strong"),RRr=o("mbart"),PRr=o(" \u2014 "),zY=a("a"),BRr=o("FlaxMBartForConditionalGeneration"),IRr=o(" (mBART model)"),qRr=l(),q5=a("li"),tMe=a("strong"),NRr=o("roberta"),jRr=o(" \u2014 "),WY=a("a"),DRr=o("FlaxRobertaForMaskedLM"),GRr=o(" (RoBERTa model)"),ORr=l(),N5=a("li"),aMe=a("strong"),VRr=o("roformer"),XRr=o(" \u2014 "),QY=a("a"),zRr=o("FlaxRoFormerForMaskedLM"),WRr=o(" (RoFormer model)"),QRr=l(),j5=a("li"),nMe=a("strong"),HRr=o("xlm-roberta"),URr=o(" \u2014 "),HY=a("a"),JRr=o("FlaxXLMRobertaForMaskedLM"),YRr=o(" (XLM-RoBERTa model)"),KRr=l(),F(D5.$$.fragment),jje=l(),Gc=a("h2"),G5=a("a"),sMe=a("span"),F(z9.$$.fragment),ZRr=l(),lMe=a("span"),ePr=o("FlaxAutoModelForSeq2SeqLM"),Dje=l(),pr=a("div"),F(W9.$$.fragment),oPr=l(),Oc=a("p"),rPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=a("a"),tPr=o("from_pretrained()"),aPr=o(" class method or the "),JY=a("a"),nPr=o("from_config()"),sPr=o(` class
method.`),lPr=l(),Q9=a("p"),iPr=o("This class cannot be instantiated directly using "),iMe=a("code"),dPr=o("__init__()"),cPr=o(" (throws an error)."),fPr=l(),zt=a("div"),F(H9.$$.fragment),mPr=l(),dMe=a("p"),gPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hPr=l(),Vc=a("p"),pPr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),uPr=o("not"),_Pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),bPr=o("from_pretrained()"),vPr=o(" to load the model weights."),FPr=l(),F(O5.$$.fragment),TPr=l(),Vr=a("div"),F(U9.$$.fragment),MPr=l(),fMe=a("p"),EPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CPr=l(),bn=a("p"),wPr=o("The model class to instantiate is selected based on the "),mMe=a("code"),APr=o("model_type"),yPr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),$Pr=o("pretrained_model_name_or_path"),kPr=o(":"),SPr=l(),Pe=a("ul"),V5=a("li"),pMe=a("strong"),RPr=o("bart"),PPr=o(" \u2014 "),KY=a("a"),BPr=o("FlaxBartForConditionalGeneration"),IPr=o(" (BART model)"),qPr=l(),X5=a("li"),uMe=a("strong"),NPr=o("blenderbot"),jPr=o(" \u2014 "),ZY=a("a"),DPr=o("FlaxBlenderbotForConditionalGeneration"),GPr=o(" (Blenderbot model)"),OPr=l(),z5=a("li"),_Me=a("strong"),VPr=o("blenderbot-small"),XPr=o(" \u2014 "),eK=a("a"),zPr=o("FlaxBlenderbotSmallForConditionalGeneration"),WPr=o(" (BlenderbotSmall model)"),QPr=l(),W5=a("li"),bMe=a("strong"),HPr=o("encoder-decoder"),UPr=o(" \u2014 "),oK=a("a"),JPr=o("FlaxEncoderDecoderModel"),YPr=o(" (Encoder decoder model)"),KPr=l(),Q5=a("li"),vMe=a("strong"),ZPr=o("marian"),eBr=o(" \u2014 "),rK=a("a"),oBr=o("FlaxMarianMTModel"),rBr=o(" (Marian model)"),tBr=l(),H5=a("li"),FMe=a("strong"),aBr=o("mbart"),nBr=o(" \u2014 "),tK=a("a"),sBr=o("FlaxMBartForConditionalGeneration"),lBr=o(" (mBART model)"),iBr=l(),U5=a("li"),TMe=a("strong"),dBr=o("mt5"),cBr=o(" \u2014 "),aK=a("a"),fBr=o("FlaxMT5ForConditionalGeneration"),mBr=o(" (mT5 model)"),gBr=l(),J5=a("li"),MMe=a("strong"),hBr=o("pegasus"),pBr=o(" \u2014 "),nK=a("a"),uBr=o("FlaxPegasusForConditionalGeneration"),_Br=o(" (Pegasus model)"),bBr=l(),Y5=a("li"),EMe=a("strong"),vBr=o("t5"),FBr=o(" \u2014 "),sK=a("a"),TBr=o("FlaxT5ForConditionalGeneration"),MBr=o(" (T5 model)"),EBr=l(),F(K5.$$.fragment),Gje=l(),Xc=a("h2"),Z5=a("a"),CMe=a("span"),F(J9.$$.fragment),CBr=l(),wMe=a("span"),wBr=o("FlaxAutoModelForSequenceClassification"),Oje=l(),ur=a("div"),F(Y9.$$.fragment),ABr=l(),zc=a("p"),yBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lK=a("a"),LBr=o("from_pretrained()"),xBr=o(" class method or the "),iK=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),K9=a("p"),RBr=o("This class cannot be instantiated directly using "),AMe=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Wt=a("div"),F(Z9.$$.fragment),qBr=l(),yMe=a("p"),NBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jBr=l(),Wc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F(e3.$$.fragment),WBr=l(),Xr=a("div"),F(ex.$$.fragment),QBr=l(),xMe=a("p"),HBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UBr=l(),vn=a("p"),JBr=o("The model class to instantiate is selected based on the "),$Me=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),xe=a("ul"),o3=a("li"),RMe=a("strong"),aIr=o("albert"),nIr=o(" \u2014 "),cK=a("a"),sIr=o("FlaxAlbertForSequenceClassification"),lIr=o(" (ALBERT model)"),iIr=l(),r3=a("li"),PMe=a("strong"),dIr=o("bart"),cIr=o(" \u2014 "),fK=a("a"),fIr=o("FlaxBartForSequenceClassification"),mIr=o(" (BART model)"),gIr=l(),t3=a("li"),BMe=a("strong"),hIr=o("bert"),pIr=o(" \u2014 "),mK=a("a"),uIr=o("FlaxBertForSequenceClassification"),_Ir=o(" (BERT model)"),bIr=l(),a3=a("li"),IMe=a("strong"),vIr=o("big_bird"),FIr=o(" \u2014 "),gK=a("a"),TIr=o("FlaxBigBirdForSequenceClassification"),MIr=o(" (BigBird model)"),EIr=l(),n3=a("li"),qMe=a("strong"),CIr=o("distilbert"),wIr=o(" \u2014 "),hK=a("a"),AIr=o("FlaxDistilBertForSequenceClassification"),yIr=o(" (DistilBERT model)"),LIr=l(),s3=a("li"),NMe=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),pK=a("a"),kIr=o("FlaxElectraForSequenceClassification"),SIr=o(" (ELECTRA model)"),RIr=l(),l3=a("li"),jMe=a("strong"),PIr=o("mbart"),BIr=o(" \u2014 "),uK=a("a"),IIr=o("FlaxMBartForSequenceClassification"),qIr=o(" (mBART model)"),NIr=l(),i3=a("li"),DMe=a("strong"),jIr=o("roberta"),DIr=o(" \u2014 "),_K=a("a"),GIr=o("FlaxRobertaForSequenceClassification"),OIr=o(" (RoBERTa model)"),VIr=l(),d3=a("li"),GMe=a("strong"),XIr=o("roformer"),zIr=o(" \u2014 "),bK=a("a"),WIr=o("FlaxRoFormerForSequenceClassification"),QIr=o(" (RoFormer model)"),HIr=l(),c3=a("li"),OMe=a("strong"),UIr=o("xlm-roberta"),JIr=o(" \u2014 "),vK=a("a"),YIr=o("FlaxXLMRobertaForSequenceClassification"),KIr=o(" (XLM-RoBERTa model)"),ZIr=l(),F(f3.$$.fragment),Vje=l(),Qc=a("h2"),m3=a("a"),VMe=a("span"),F(ox.$$.fragment),eqr=l(),XMe=a("span"),oqr=o("FlaxAutoModelForQuestionAnswering"),Xje=l(),_r=a("div"),F(rx.$$.fragment),rqr=l(),Hc=a("p"),tqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FK=a("a"),aqr=o("from_pretrained()"),nqr=o(" class method or the "),TK=a("a"),sqr=o("from_config()"),lqr=o(` class
method.`),iqr=l(),tx=a("p"),dqr=o("This class cannot be instantiated directly using "),zMe=a("code"),cqr=o("__init__()"),fqr=o(" (throws an error)."),mqr=l(),Qt=a("div"),F(ax.$$.fragment),gqr=l(),WMe=a("p"),hqr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pqr=l(),Uc=a("p"),uqr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),_qr=o("not"),bqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),vqr=o("from_pretrained()"),Fqr=o(" to load the model weights."),Tqr=l(),F(g3.$$.fragment),Mqr=l(),zr=a("div"),F(nx.$$.fragment),Eqr=l(),HMe=a("p"),Cqr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wqr=l(),Fn=a("p"),Aqr=o("The model class to instantiate is selected based on the "),UMe=a("code"),yqr=o("model_type"),Lqr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),kqr=o("pretrained_model_name_or_path"),Sqr=o(":"),Rqr=l(),$e=a("ul"),h3=a("li"),KMe=a("strong"),Pqr=o("albert"),Bqr=o(" \u2014 "),EK=a("a"),Iqr=o("FlaxAlbertForQuestionAnswering"),qqr=o(" (ALBERT model)"),Nqr=l(),p3=a("li"),ZMe=a("strong"),jqr=o("bart"),Dqr=o(" \u2014 "),CK=a("a"),Gqr=o("FlaxBartForQuestionAnswering"),Oqr=o(" (BART model)"),Vqr=l(),u3=a("li"),eEe=a("strong"),Xqr=o("bert"),zqr=o(" \u2014 "),wK=a("a"),Wqr=o("FlaxBertForQuestionAnswering"),Qqr=o(" (BERT model)"),Hqr=l(),_3=a("li"),oEe=a("strong"),Uqr=o("big_bird"),Jqr=o(" \u2014 "),AK=a("a"),Yqr=o("FlaxBigBirdForQuestionAnswering"),Kqr=o(" (BigBird model)"),Zqr=l(),b3=a("li"),rEe=a("strong"),eNr=o("distilbert"),oNr=o(" \u2014 "),yK=a("a"),rNr=o("FlaxDistilBertForQuestionAnswering"),tNr=o(" (DistilBERT model)"),aNr=l(),v3=a("li"),tEe=a("strong"),nNr=o("electra"),sNr=o(" \u2014 "),LK=a("a"),lNr=o("FlaxElectraForQuestionAnswering"),iNr=o(" (ELECTRA model)"),dNr=l(),F3=a("li"),aEe=a("strong"),cNr=o("mbart"),fNr=o(" \u2014 "),xK=a("a"),mNr=o("FlaxMBartForQuestionAnswering"),gNr=o(" (mBART model)"),hNr=l(),T3=a("li"),nEe=a("strong"),pNr=o("roberta"),uNr=o(" \u2014 "),$K=a("a"),_Nr=o("FlaxRobertaForQuestionAnswering"),bNr=o(" (RoBERTa model)"),vNr=l(),M3=a("li"),sEe=a("strong"),FNr=o("roformer"),TNr=o(" \u2014 "),kK=a("a"),MNr=o("FlaxRoFormerForQuestionAnswering"),ENr=o(" (RoFormer model)"),CNr=l(),E3=a("li"),lEe=a("strong"),wNr=o("xlm-roberta"),ANr=o(" \u2014 "),SK=a("a"),yNr=o("FlaxXLMRobertaForQuestionAnswering"),LNr=o(" (XLM-RoBERTa model)"),xNr=l(),F(C3.$$.fragment),zje=l(),Jc=a("h2"),w3=a("a"),iEe=a("span"),F(sx.$$.fragment),$Nr=l(),dEe=a("span"),kNr=o("FlaxAutoModelForTokenClassification"),Wje=l(),br=a("div"),F(lx.$$.fragment),SNr=l(),Yc=a("p"),RNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RK=a("a"),PNr=o("from_pretrained()"),BNr=o(" class method or the "),PK=a("a"),INr=o("from_config()"),qNr=o(` class
method.`),NNr=l(),ix=a("p"),jNr=o("This class cannot be instantiated directly using "),cEe=a("code"),DNr=o("__init__()"),GNr=o(" (throws an error)."),ONr=l(),Ht=a("div"),F(dx.$$.fragment),VNr=l(),fEe=a("p"),XNr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zNr=l(),Kc=a("p"),WNr=o(`Note:
Loading a model from its configuration file does `),mEe=a("strong"),QNr=o("not"),HNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),UNr=o("from_pretrained()"),JNr=o(" to load the model weights."),YNr=l(),F(A3.$$.fragment),KNr=l(),Wr=a("div"),F(cx.$$.fragment),ZNr=l(),gEe=a("p"),ejr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ojr=l(),Tn=a("p"),rjr=o("The model class to instantiate is selected based on the "),hEe=a("code"),tjr=o("model_type"),ajr=o(` property of the config object (either
passed as an argument or loaded from `),pEe=a("code"),njr=o("pretrained_model_name_or_path"),sjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=a("code"),ljr=o("pretrained_model_name_or_path"),ijr=o(":"),djr=l(),De=a("ul"),y3=a("li"),_Ee=a("strong"),cjr=o("albert"),fjr=o(" \u2014 "),IK=a("a"),mjr=o("FlaxAlbertForTokenClassification"),gjr=o(" (ALBERT model)"),hjr=l(),L3=a("li"),bEe=a("strong"),pjr=o("bert"),ujr=o(" \u2014 "),qK=a("a"),_jr=o("FlaxBertForTokenClassification"),bjr=o(" (BERT model)"),vjr=l(),x3=a("li"),vEe=a("strong"),Fjr=o("big_bird"),Tjr=o(" \u2014 "),NK=a("a"),Mjr=o("FlaxBigBirdForTokenClassification"),Ejr=o(" (BigBird model)"),Cjr=l(),$3=a("li"),FEe=a("strong"),wjr=o("distilbert"),Ajr=o(" \u2014 "),jK=a("a"),yjr=o("FlaxDistilBertForTokenClassification"),Ljr=o(" (DistilBERT model)"),xjr=l(),k3=a("li"),TEe=a("strong"),$jr=o("electra"),kjr=o(" \u2014 "),DK=a("a"),Sjr=o("FlaxElectraForTokenClassification"),Rjr=o(" (ELECTRA model)"),Pjr=l(),S3=a("li"),MEe=a("strong"),Bjr=o("roberta"),Ijr=o(" \u2014 "),GK=a("a"),qjr=o("FlaxRobertaForTokenClassification"),Njr=o(" (RoBERTa model)"),jjr=l(),R3=a("li"),EEe=a("strong"),Djr=o("roformer"),Gjr=o(" \u2014 "),OK=a("a"),Ojr=o("FlaxRoFormerForTokenClassification"),Vjr=o(" (RoFormer model)"),Xjr=l(),P3=a("li"),CEe=a("strong"),zjr=o("xlm-roberta"),Wjr=o(" \u2014 "),VK=a("a"),Qjr=o("FlaxXLMRobertaForTokenClassification"),Hjr=o(" (XLM-RoBERTa model)"),Ujr=l(),F(B3.$$.fragment),Qje=l(),Zc=a("h2"),I3=a("a"),wEe=a("span"),F(fx.$$.fragment),Jjr=l(),AEe=a("span"),Yjr=o("FlaxAutoModelForMultipleChoice"),Hje=l(),vr=a("div"),F(mx.$$.fragment),Kjr=l(),ef=a("p"),Zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=a("a"),eDr=o("from_pretrained()"),oDr=o(" class method or the "),zK=a("a"),rDr=o("from_config()"),tDr=o(` class
method.`),aDr=l(),gx=a("p"),nDr=o("This class cannot be instantiated directly using "),yEe=a("code"),sDr=o("__init__()"),lDr=o(" (throws an error)."),iDr=l(),Ut=a("div"),F(hx.$$.fragment),dDr=l(),LEe=a("p"),cDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fDr=l(),of=a("p"),mDr=o(`Note:
Loading a model from its configuration file does `),xEe=a("strong"),gDr=o("not"),hDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),pDr=o("from_pretrained()"),uDr=o(" to load the model weights."),_Dr=l(),F(q3.$$.fragment),bDr=l(),Qr=a("div"),F(px.$$.fragment),vDr=l(),$Ee=a("p"),FDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TDr=l(),Mn=a("p"),MDr=o("The model class to instantiate is selected based on the "),kEe=a("code"),EDr=o("model_type"),CDr=o(` property of the config object (either
passed as an argument or loaded from `),SEe=a("code"),wDr=o("pretrained_model_name_or_path"),ADr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=a("code"),yDr=o("pretrained_model_name_or_path"),LDr=o(":"),xDr=l(),Ge=a("ul"),N3=a("li"),PEe=a("strong"),$Dr=o("albert"),kDr=o(" \u2014 "),QK=a("a"),SDr=o("FlaxAlbertForMultipleChoice"),RDr=o(" (ALBERT model)"),PDr=l(),j3=a("li"),BEe=a("strong"),BDr=o("bert"),IDr=o(" \u2014 "),HK=a("a"),qDr=o("FlaxBertForMultipleChoice"),NDr=o(" (BERT model)"),jDr=l(),D3=a("li"),IEe=a("strong"),DDr=o("big_bird"),GDr=o(" \u2014 "),UK=a("a"),ODr=o("FlaxBigBirdForMultipleChoice"),VDr=o(" (BigBird model)"),XDr=l(),G3=a("li"),qEe=a("strong"),zDr=o("distilbert"),WDr=o(" \u2014 "),JK=a("a"),QDr=o("FlaxDistilBertForMultipleChoice"),HDr=o(" (DistilBERT model)"),UDr=l(),O3=a("li"),NEe=a("strong"),JDr=o("electra"),YDr=o(" \u2014 "),YK=a("a"),KDr=o("FlaxElectraForMultipleChoice"),ZDr=o(" (ELECTRA model)"),eGr=l(),V3=a("li"),jEe=a("strong"),oGr=o("roberta"),rGr=o(" \u2014 "),KK=a("a"),tGr=o("FlaxRobertaForMultipleChoice"),aGr=o(" (RoBERTa model)"),nGr=l(),X3=a("li"),DEe=a("strong"),sGr=o("roformer"),lGr=o(" \u2014 "),ZK=a("a"),iGr=o("FlaxRoFormerForMultipleChoice"),dGr=o(" (RoFormer model)"),cGr=l(),z3=a("li"),GEe=a("strong"),fGr=o("xlm-roberta"),mGr=o(" \u2014 "),eZ=a("a"),gGr=o("FlaxXLMRobertaForMultipleChoice"),hGr=o(" (XLM-RoBERTa model)"),pGr=l(),F(W3.$$.fragment),Uje=l(),rf=a("h2"),Q3=a("a"),OEe=a("span"),F(ux.$$.fragment),uGr=l(),VEe=a("span"),_Gr=o("FlaxAutoModelForNextSentencePrediction"),Jje=l(),Fr=a("div"),F(_x.$$.fragment),bGr=l(),tf=a("p"),vGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oZ=a("a"),FGr=o("from_pretrained()"),TGr=o(" class method or the "),rZ=a("a"),MGr=o("from_config()"),EGr=o(` class
method.`),CGr=l(),bx=a("p"),wGr=o("This class cannot be instantiated directly using "),XEe=a("code"),AGr=o("__init__()"),yGr=o(" (throws an error)."),LGr=l(),Jt=a("div"),F(vx.$$.fragment),xGr=l(),zEe=a("p"),$Gr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kGr=l(),af=a("p"),SGr=o(`Note:
Loading a model from its configuration file does `),WEe=a("strong"),RGr=o("not"),PGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),BGr=o("from_pretrained()"),IGr=o(" to load the model weights."),qGr=l(),F(H3.$$.fragment),NGr=l(),Hr=a("div"),F(Fx.$$.fragment),jGr=l(),QEe=a("p"),DGr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GGr=l(),En=a("p"),OGr=o("The model class to instantiate is selected based on the "),HEe=a("code"),VGr=o("model_type"),XGr=o(` property of the config object (either
passed as an argument or loaded from `),UEe=a("code"),zGr=o("pretrained_model_name_or_path"),WGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=a("code"),QGr=o("pretrained_model_name_or_path"),HGr=o(":"),UGr=l(),YEe=a("ul"),U3=a("li"),KEe=a("strong"),JGr=o("bert"),YGr=o(" \u2014 "),aZ=a("a"),KGr=o("FlaxBertForNextSentencePrediction"),ZGr=o(" (BERT model)"),eOr=l(),F(J3.$$.fragment),Yje=l(),nf=a("h2"),Y3=a("a"),ZEe=a("span"),F(Tx.$$.fragment),oOr=l(),eCe=a("span"),rOr=o("FlaxAutoModelForImageClassification"),Kje=l(),Tr=a("div"),F(Mx.$$.fragment),tOr=l(),sf=a("p"),aOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nZ=a("a"),nOr=o("from_pretrained()"),sOr=o(" class method or the "),sZ=a("a"),lOr=o("from_config()"),iOr=o(` class
method.`),dOr=l(),Ex=a("p"),cOr=o("This class cannot be instantiated directly using "),oCe=a("code"),fOr=o("__init__()"),mOr=o(" (throws an error)."),gOr=l(),Yt=a("div"),F(Cx.$$.fragment),hOr=l(),rCe=a("p"),pOr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uOr=l(),lf=a("p"),_Or=o(`Note:
Loading a model from its configuration file does `),tCe=a("strong"),bOr=o("not"),vOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),FOr=o("from_pretrained()"),TOr=o(" to load the model weights."),MOr=l(),F(K3.$$.fragment),EOr=l(),Ur=a("div"),F(wx.$$.fragment),COr=l(),aCe=a("p"),wOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AOr=l(),Cn=a("p"),yOr=o("The model class to instantiate is selected based on the "),nCe=a("code"),LOr=o("model_type"),xOr=o(` property of the config object (either
passed as an argument or loaded from `),sCe=a("code"),$Or=o("pretrained_model_name_or_path"),kOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=a("code"),SOr=o("pretrained_model_name_or_path"),ROr=o(":"),POr=l(),Ax=a("ul"),Z3=a("li"),iCe=a("strong"),BOr=o("beit"),IOr=o(" \u2014 "),iZ=a("a"),qOr=o("FlaxBeitForImageClassification"),NOr=o(" (BEiT model)"),jOr=l(),ew=a("li"),dCe=a("strong"),DOr=o("vit"),GOr=o(" \u2014 "),dZ=a("a"),OOr=o("FlaxViTForImageClassification"),VOr=o(" (ViT model)"),XOr=l(),F(ow.$$.fragment),Zje=l(),df=a("h2"),rw=a("a"),cCe=a("span"),F(yx.$$.fragment),zOr=l(),fCe=a("span"),WOr=o("FlaxAutoModelForVision2Seq"),eDe=l(),Mr=a("div"),F(Lx.$$.fragment),QOr=l(),cf=a("p"),HOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cZ=a("a"),UOr=o("from_pretrained()"),JOr=o(" class method or the "),fZ=a("a"),YOr=o("from_config()"),KOr=o(` class
method.`),ZOr=l(),xx=a("p"),eVr=o("This class cannot be instantiated directly using "),mCe=a("code"),oVr=o("__init__()"),rVr=o(" (throws an error)."),tVr=l(),Kt=a("div"),F($x.$$.fragment),aVr=l(),gCe=a("p"),nVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sVr=l(),ff=a("p"),lVr=o(`Note:
Loading a model from its configuration file does `),hCe=a("strong"),iVr=o("not"),dVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=a("a"),cVr=o("from_pretrained()"),fVr=o(" to load the model weights."),mVr=l(),F(tw.$$.fragment),gVr=l(),Jr=a("div"),F(kx.$$.fragment),hVr=l(),pCe=a("p"),pVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uVr=l(),wn=a("p"),_Vr=o("The model class to instantiate is selected based on the "),uCe=a("code"),bVr=o("model_type"),vVr=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),FVr=o("pretrained_model_name_or_path"),TVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),MVr=o("pretrained_model_name_or_path"),EVr=o(":"),CVr=l(),vCe=a("ul"),aw=a("li"),FCe=a("strong"),wVr=o("vision-encoder-decoder"),AVr=o(" \u2014 "),gZ=a("a"),yVr=o("FlaxVisionEncoderDecoderModel"),LVr=o(" (Vision Encoder decoder model)"),xVr=l(),F(nw.$$.fragment),this.h()},l(f){const _=d$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Sx=s(p);m=n(Sx,"A",{id:!0,class:!0,href:!0});var TCe=s(m);u=n(TCe,"SPAN",{});var MCe=s(u);T(d.$$.fragment,MCe),MCe.forEach(t),TCe.forEach(t),h=i(Sx),Mo=n(Sx,"SPAN",{});var ECe=s(Mo);fi=r(ECe,"Auto Classes"),ECe.forEach(t),Sx.forEach(t),pf=i(f),rt=n(f,"P",{});var Rx=s(rt);mi=r(Rx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),gi=n(Rx,"CODE",{});var CCe=s(gi);Ey=r(CCe,"from_pretrained()"),CCe.forEach(t),uf=r(Rx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Rx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);hi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var wCe=s(yn);Cy=r(wCe,"AutoConfig"),wCe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var ACe=s(xn);wy=r(ACe,"AutoModel"),ACe.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var yCe=s($n);Ay=r(yCe,"AutoTokenizer"),yCe.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_f=i(f),T(Ca.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Px=s(Ae);z$=r(Px,"will create a model that is an instance of "),_i=n(Px,"A",{href:!0});var LCe=s(_i);W$=r(LCe,"BertModel"),LCe.forEach(t),Q$=r(Px,"."),Px.forEach(t),Eo=i(f),wa=n(f,"P",{});var Bx=s(wa);H$=r(Bx,"There is one class of "),bf=n(Bx,"CODE",{});var xCe=s(bf);U$=r(xCe,"AutoModel"),xCe.forEach(t),dOe=r(Bx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Bx.forEach(t),Kqe=i(f),bi=n(f,"H2",{class:!0});var Ix=s(bi);vf=n(Ix,"A",{id:!0,class:!0,href:!0});var $Ce=s(vf);soe=n($Ce,"SPAN",{});var kCe=s(soe);T(yy.$$.fragment,kCe),kCe.forEach(t),$Ce.forEach(t),cOe=i(Ix),loe=n(Ix,"SPAN",{});var SCe=s(loe);fOe=r(SCe,"Extending the Auto Classes"),SCe.forEach(t),Ix.forEach(t),Zqe=i(f),kn=n(f,"P",{});var mf=s(kn);mOe=r(mf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),ioe=n(mf,"CODE",{});var RCe=s(ioe);gOe=r(RCe,"NewModel"),RCe.forEach(t),hOe=r(mf,", make sure you have a "),doe=n(mf,"CODE",{});var PCe=s(doe);pOe=r(PCe,"NewModelConfig"),PCe.forEach(t),uOe=r(mf,` then you can add those to the auto
classes like this:`),mf.forEach(t),eNe=i(f),T(Ly.$$.fragment,f),oNe=i(f),J$=n(f,"P",{});var BCe=s(J$);_Oe=r(BCe,"You will then be able to use the auto classes like you would usually do!"),BCe.forEach(t),rNe=i(f),T(Ff.$$.fragment,f),tNe=i(f),vi=n(f,"H2",{class:!0});var qx=s(vi);Tf=n(qx,"A",{id:!0,class:!0,href:!0});var ICe=s(Tf);coe=n(ICe,"SPAN",{});var qCe=s(coe);T(xy.$$.fragment,qCe),qCe.forEach(t),ICe.forEach(t),bOe=i(qx),foe=n(qx,"SPAN",{});var NCe=s(foe);vOe=r(NCe,"AutoConfig"),NCe.forEach(t),qx.forEach(t),aNe=i(f),Co=n(f,"DIV",{class:!0});var et=s(Co);T($y.$$.fragment,et),FOe=i(et),ky=n(et,"P",{});var Nx=s(ky);TOe=r(Nx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Y$=n(Nx,"A",{href:!0});var jCe=s(Y$);MOe=r(jCe,"from_pretrained()"),jCe.forEach(t),EOe=r(Nx," class method."),Nx.forEach(t),COe=i(et),Sy=n(et,"P",{});var jx=s(Sy);wOe=r(jx,"This class cannot be instantiated directly using "),moe=n(jx,"CODE",{});var DCe=s(moe);AOe=r(DCe,"__init__()"),DCe.forEach(t),yOe=r(jx," (throws an error)."),jx.forEach(t),LOe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(Ry.$$.fragment,ot),xOe=i(ot),goe=n(ot,"P",{});var GCe=s(goe);$Oe=r(GCe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),GCe.forEach(t),kOe=i(ot),Fi=n(ot,"P",{});var gf=s(Fi);SOe=r(gf,"The configuration class to instantiate is selected based on the "),hoe=n(gf,"CODE",{});var OCe=s(hoe);ROe=r(OCe,"model_type"),OCe.forEach(t),POe=r(gf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),poe=n(gf,"CODE",{});var VCe=s(poe);BOe=r(VCe,"pretrained_model_name_or_path"),VCe.forEach(t),IOe=r(gf,":"),gf.forEach(t),qOe=i(ot),A=n(ot,"UL",{});var y=s(A);Mf=n(y,"LI",{});var sw=s(Mf);uoe=n(sw,"STRONG",{});var XCe=s(uoe);NOe=r(XCe,"albert"),XCe.forEach(t),jOe=r(sw," \u2014 "),K$=n(sw,"A",{href:!0});var zCe=s(K$);DOe=r(zCe,"AlbertConfig"),zCe.forEach(t),GOe=r(sw," (ALBERT model)"),sw.forEach(t),OOe=i(y),Ef=n(y,"LI",{});var lw=s(Ef);_oe=n(lw,"STRONG",{});var WCe=s(_oe);VOe=r(WCe,"bart"),WCe.forEach(t),XOe=r(lw," \u2014 "),Z$=n(lw,"A",{href:!0});var QCe=s(Z$);zOe=r(QCe,"BartConfig"),QCe.forEach(t),WOe=r(lw," (BART model)"),lw.forEach(t),QOe=i(y),Cf=n(y,"LI",{});var iw=s(Cf);boe=n(iw,"STRONG",{});var HCe=s(boe);HOe=r(HCe,"beit"),HCe.forEach(t),UOe=r(iw," \u2014 "),ek=n(iw,"A",{href:!0});var UCe=s(ek);JOe=r(UCe,"BeitConfig"),UCe.forEach(t),YOe=r(iw," (BEiT model)"),iw.forEach(t),KOe=i(y),wf=n(y,"LI",{});var dw=s(wf);voe=n(dw,"STRONG",{});var JCe=s(voe);ZOe=r(JCe,"bert"),JCe.forEach(t),eVe=r(dw," \u2014 "),ok=n(dw,"A",{href:!0});var YCe=s(ok);oVe=r(YCe,"BertConfig"),YCe.forEach(t),rVe=r(dw," (BERT model)"),dw.forEach(t),tVe=i(y),Af=n(y,"LI",{});var cw=s(Af);Foe=n(cw,"STRONG",{});var KCe=s(Foe);aVe=r(KCe,"bert-generation"),KCe.forEach(t),nVe=r(cw," \u2014 "),rk=n(cw,"A",{href:!0});var ZCe=s(rk);sVe=r(ZCe,"BertGenerationConfig"),ZCe.forEach(t),lVe=r(cw," (Bert Generation model)"),cw.forEach(t),iVe=i(y),yf=n(y,"LI",{});var fw=s(yf);Toe=n(fw,"STRONG",{});var e5e=s(Toe);dVe=r(e5e,"big_bird"),e5e.forEach(t),cVe=r(fw," \u2014 "),tk=n(fw,"A",{href:!0});var o5e=s(tk);fVe=r(o5e,"BigBirdConfig"),o5e.forEach(t),mVe=r(fw," (BigBird model)"),fw.forEach(t),gVe=i(y),Lf=n(y,"LI",{});var mw=s(Lf);Moe=n(mw,"STRONG",{});var r5e=s(Moe);hVe=r(r5e,"bigbird_pegasus"),r5e.forEach(t),pVe=r(mw," \u2014 "),ak=n(mw,"A",{href:!0});var t5e=s(ak);uVe=r(t5e,"BigBirdPegasusConfig"),t5e.forEach(t),_Ve=r(mw," (BigBirdPegasus model)"),mw.forEach(t),bVe=i(y),xf=n(y,"LI",{});var gw=s(xf);Eoe=n(gw,"STRONG",{});var a5e=s(Eoe);vVe=r(a5e,"blenderbot"),a5e.forEach(t),FVe=r(gw," \u2014 "),nk=n(gw,"A",{href:!0});var n5e=s(nk);TVe=r(n5e,"BlenderbotConfig"),n5e.forEach(t),MVe=r(gw," (Blenderbot model)"),gw.forEach(t),EVe=i(y),$f=n(y,"LI",{});var hw=s($f);Coe=n(hw,"STRONG",{});var s5e=s(Coe);CVe=r(s5e,"blenderbot-small"),s5e.forEach(t),wVe=r(hw," \u2014 "),sk=n(hw,"A",{href:!0});var l5e=s(sk);AVe=r(l5e,"BlenderbotSmallConfig"),l5e.forEach(t),yVe=r(hw," (BlenderbotSmall model)"),hw.forEach(t),LVe=i(y),kf=n(y,"LI",{});var pw=s(kf);woe=n(pw,"STRONG",{});var i5e=s(woe);xVe=r(i5e,"camembert"),i5e.forEach(t),$Ve=r(pw," \u2014 "),lk=n(pw,"A",{href:!0});var d5e=s(lk);kVe=r(d5e,"CamembertConfig"),d5e.forEach(t),SVe=r(pw," (CamemBERT model)"),pw.forEach(t),RVe=i(y),Sf=n(y,"LI",{});var uw=s(Sf);Aoe=n(uw,"STRONG",{});var c5e=s(Aoe);PVe=r(c5e,"canine"),c5e.forEach(t),BVe=r(uw," \u2014 "),ik=n(uw,"A",{href:!0});var f5e=s(ik);IVe=r(f5e,"CanineConfig"),f5e.forEach(t),qVe=r(uw," (Canine model)"),uw.forEach(t),NVe=i(y),Rf=n(y,"LI",{});var _w=s(Rf);yoe=n(_w,"STRONG",{});var m5e=s(yoe);jVe=r(m5e,"clip"),m5e.forEach(t),DVe=r(_w," \u2014 "),dk=n(_w,"A",{href:!0});var g5e=s(dk);GVe=r(g5e,"CLIPConfig"),g5e.forEach(t),OVe=r(_w," (CLIP model)"),_w.forEach(t),VVe=i(y),Pf=n(y,"LI",{});var bw=s(Pf);Loe=n(bw,"STRONG",{});var h5e=s(Loe);XVe=r(h5e,"convbert"),h5e.forEach(t),zVe=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var p5e=s(ck);WVe=r(p5e,"ConvBertConfig"),p5e.forEach(t),QVe=r(bw," (ConvBERT model)"),bw.forEach(t),HVe=i(y),Bf=n(y,"LI",{});var vw=s(Bf);xoe=n(vw,"STRONG",{});var u5e=s(xoe);UVe=r(u5e,"convnext"),u5e.forEach(t),JVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var _5e=s(fk);YVe=r(_5e,"ConvNextConfig"),_5e.forEach(t),KVe=r(vw," (ConvNext model)"),vw.forEach(t),ZVe=i(y),If=n(y,"LI",{});var Fw=s(If);$oe=n(Fw,"STRONG",{});var b5e=s($oe);eXe=r(b5e,"ctrl"),b5e.forEach(t),oXe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var v5e=s(mk);rXe=r(v5e,"CTRLConfig"),v5e.forEach(t),tXe=r(Fw," (CTRL model)"),Fw.forEach(t),aXe=i(y),qf=n(y,"LI",{});var Tw=s(qf);koe=n(Tw,"STRONG",{});var F5e=s(koe);nXe=r(F5e,"cvt"),F5e.forEach(t),sXe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var T5e=s(gk);lXe=r(T5e,"CvtConfig"),T5e.forEach(t),iXe=r(Tw," (CvT model)"),Tw.forEach(t),dXe=i(y),Nf=n(y,"LI",{});var Mw=s(Nf);Soe=n(Mw,"STRONG",{});var M5e=s(Soe);cXe=r(M5e,"data2vec-audio"),M5e.forEach(t),fXe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var E5e=s(hk);mXe=r(E5e,"Data2VecAudioConfig"),E5e.forEach(t),gXe=r(Mw," (Data2VecAudio model)"),Mw.forEach(t),hXe=i(y),jf=n(y,"LI",{});var Ew=s(jf);Roe=n(Ew,"STRONG",{});var C5e=s(Roe);pXe=r(C5e,"data2vec-text"),C5e.forEach(t),uXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var w5e=s(pk);_Xe=r(w5e,"Data2VecTextConfig"),w5e.forEach(t),bXe=r(Ew," (Data2VecText model)"),Ew.forEach(t),vXe=i(y),Df=n(y,"LI",{});var Cw=s(Df);Poe=n(Cw,"STRONG",{});var A5e=s(Poe);FXe=r(A5e,"data2vec-vision"),A5e.forEach(t),TXe=r(Cw," \u2014 "),uk=n(Cw,"A",{href:!0});var y5e=s(uk);MXe=r(y5e,"Data2VecVisionConfig"),y5e.forEach(t),EXe=r(Cw," (Data2VecVision model)"),Cw.forEach(t),CXe=i(y),Gf=n(y,"LI",{});var ww=s(Gf);Boe=n(ww,"STRONG",{});var L5e=s(Boe);wXe=r(L5e,"deberta"),L5e.forEach(t),AXe=r(ww," \u2014 "),_k=n(ww,"A",{href:!0});var x5e=s(_k);yXe=r(x5e,"DebertaConfig"),x5e.forEach(t),LXe=r(ww," (DeBERTa model)"),ww.forEach(t),xXe=i(y),Of=n(y,"LI",{});var Aw=s(Of);Ioe=n(Aw,"STRONG",{});var $5e=s(Ioe);$Xe=r($5e,"deberta-v2"),$5e.forEach(t),kXe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var k5e=s(bk);SXe=r(k5e,"DebertaV2Config"),k5e.forEach(t),RXe=r(Aw," (DeBERTa-v2 model)"),Aw.forEach(t),PXe=i(y),Vf=n(y,"LI",{});var yw=s(Vf);qoe=n(yw,"STRONG",{});var S5e=s(qoe);BXe=r(S5e,"decision_transformer"),S5e.forEach(t),IXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var R5e=s(vk);qXe=r(R5e,"DecisionTransformerConfig"),R5e.forEach(t),NXe=r(yw," (Decision Transformer model)"),yw.forEach(t),jXe=i(y),Xf=n(y,"LI",{});var Lw=s(Xf);Noe=n(Lw,"STRONG",{});var P5e=s(Noe);DXe=r(P5e,"deit"),P5e.forEach(t),GXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var kVr=s(Fk);OXe=r(kVr,"DeiTConfig"),kVr.forEach(t),VXe=r(Lw," (DeiT model)"),Lw.forEach(t),XXe=i(y),zf=n(y,"LI",{});var B5e=s(zf);joe=n(B5e,"STRONG",{});var SVr=s(joe);zXe=r(SVr,"detr"),SVr.forEach(t),WXe=r(B5e," \u2014 "),Tk=n(B5e,"A",{href:!0});var RVr=s(Tk);QXe=r(RVr,"DetrConfig"),RVr.forEach(t),HXe=r(B5e," (DETR model)"),B5e.forEach(t),UXe=i(y),Wf=n(y,"LI",{});var I5e=s(Wf);Doe=n(I5e,"STRONG",{});var PVr=s(Doe);JXe=r(PVr,"distilbert"),PVr.forEach(t),YXe=r(I5e," \u2014 "),Mk=n(I5e,"A",{href:!0});var BVr=s(Mk);KXe=r(BVr,"DistilBertConfig"),BVr.forEach(t),ZXe=r(I5e," (DistilBERT model)"),I5e.forEach(t),eze=i(y),Qf=n(y,"LI",{});var q5e=s(Qf);Goe=n(q5e,"STRONG",{});var IVr=s(Goe);oze=r(IVr,"dpr"),IVr.forEach(t),rze=r(q5e," \u2014 "),Ek=n(q5e,"A",{href:!0});var qVr=s(Ek);tze=r(qVr,"DPRConfig"),qVr.forEach(t),aze=r(q5e," (DPR model)"),q5e.forEach(t),nze=i(y),Hf=n(y,"LI",{});var N5e=s(Hf);Ooe=n(N5e,"STRONG",{});var NVr=s(Ooe);sze=r(NVr,"dpt"),NVr.forEach(t),lze=r(N5e," \u2014 "),Ck=n(N5e,"A",{href:!0});var jVr=s(Ck);ize=r(jVr,"DPTConfig"),jVr.forEach(t),dze=r(N5e," (DPT model)"),N5e.forEach(t),cze=i(y),Uf=n(y,"LI",{});var j5e=s(Uf);Voe=n(j5e,"STRONG",{});var DVr=s(Voe);fze=r(DVr,"electra"),DVr.forEach(t),mze=r(j5e," \u2014 "),wk=n(j5e,"A",{href:!0});var GVr=s(wk);gze=r(GVr,"ElectraConfig"),GVr.forEach(t),hze=r(j5e," (ELECTRA model)"),j5e.forEach(t),pze=i(y),Jf=n(y,"LI",{});var D5e=s(Jf);Xoe=n(D5e,"STRONG",{});var OVr=s(Xoe);uze=r(OVr,"encoder-decoder"),OVr.forEach(t),_ze=r(D5e," \u2014 "),Ak=n(D5e,"A",{href:!0});var VVr=s(Ak);bze=r(VVr,"EncoderDecoderConfig"),VVr.forEach(t),vze=r(D5e," (Encoder decoder model)"),D5e.forEach(t),Fze=i(y),Yf=n(y,"LI",{});var G5e=s(Yf);zoe=n(G5e,"STRONG",{});var XVr=s(zoe);Tze=r(XVr,"flaubert"),XVr.forEach(t),Mze=r(G5e," \u2014 "),yk=n(G5e,"A",{href:!0});var zVr=s(yk);Eze=r(zVr,"FlaubertConfig"),zVr.forEach(t),Cze=r(G5e," (FlauBERT model)"),G5e.forEach(t),wze=i(y),Kf=n(y,"LI",{});var O5e=s(Kf);Woe=n(O5e,"STRONG",{});var WVr=s(Woe);Aze=r(WVr,"flava"),WVr.forEach(t),yze=r(O5e," \u2014 "),Lk=n(O5e,"A",{href:!0});var QVr=s(Lk);Lze=r(QVr,"FlavaConfig"),QVr.forEach(t),xze=r(O5e," (Flava model)"),O5e.forEach(t),$ze=i(y),Zf=n(y,"LI",{});var V5e=s(Zf);Qoe=n(V5e,"STRONG",{});var HVr=s(Qoe);kze=r(HVr,"fnet"),HVr.forEach(t),Sze=r(V5e," \u2014 "),xk=n(V5e,"A",{href:!0});var UVr=s(xk);Rze=r(UVr,"FNetConfig"),UVr.forEach(t),Pze=r(V5e," (FNet model)"),V5e.forEach(t),Bze=i(y),em=n(y,"LI",{});var X5e=s(em);Hoe=n(X5e,"STRONG",{});var JVr=s(Hoe);Ize=r(JVr,"fsmt"),JVr.forEach(t),qze=r(X5e," \u2014 "),$k=n(X5e,"A",{href:!0});var YVr=s($k);Nze=r(YVr,"FSMTConfig"),YVr.forEach(t),jze=r(X5e," (FairSeq Machine-Translation model)"),X5e.forEach(t),Dze=i(y),om=n(y,"LI",{});var z5e=s(om);Uoe=n(z5e,"STRONG",{});var KVr=s(Uoe);Gze=r(KVr,"funnel"),KVr.forEach(t),Oze=r(z5e," \u2014 "),kk=n(z5e,"A",{href:!0});var ZVr=s(kk);Vze=r(ZVr,"FunnelConfig"),ZVr.forEach(t),Xze=r(z5e," (Funnel Transformer model)"),z5e.forEach(t),zze=i(y),rm=n(y,"LI",{});var W5e=s(rm);Joe=n(W5e,"STRONG",{});var eXr=s(Joe);Wze=r(eXr,"glpn"),eXr.forEach(t),Qze=r(W5e," \u2014 "),Sk=n(W5e,"A",{href:!0});var oXr=s(Sk);Hze=r(oXr,"GLPNConfig"),oXr.forEach(t),Uze=r(W5e," (GLPN model)"),W5e.forEach(t),Jze=i(y),tm=n(y,"LI",{});var Q5e=s(tm);Yoe=n(Q5e,"STRONG",{});var rXr=s(Yoe);Yze=r(rXr,"gpt2"),rXr.forEach(t),Kze=r(Q5e," \u2014 "),Rk=n(Q5e,"A",{href:!0});var tXr=s(Rk);Zze=r(tXr,"GPT2Config"),tXr.forEach(t),eWe=r(Q5e," (OpenAI GPT-2 model)"),Q5e.forEach(t),oWe=i(y),am=n(y,"LI",{});var H5e=s(am);Koe=n(H5e,"STRONG",{});var aXr=s(Koe);rWe=r(aXr,"gpt_neo"),aXr.forEach(t),tWe=r(H5e," \u2014 "),Pk=n(H5e,"A",{href:!0});var nXr=s(Pk);aWe=r(nXr,"GPTNeoConfig"),nXr.forEach(t),nWe=r(H5e," (GPT Neo model)"),H5e.forEach(t),sWe=i(y),nm=n(y,"LI",{});var U5e=s(nm);Zoe=n(U5e,"STRONG",{});var sXr=s(Zoe);lWe=r(sXr,"gpt_neox"),sXr.forEach(t),iWe=r(U5e," \u2014 "),Bk=n(U5e,"A",{href:!0});var lXr=s(Bk);dWe=r(lXr,"GPTNeoXConfig"),lXr.forEach(t),cWe=r(U5e," (GPT NeoX model)"),U5e.forEach(t),fWe=i(y),sm=n(y,"LI",{});var J5e=s(sm);ere=n(J5e,"STRONG",{});var iXr=s(ere);mWe=r(iXr,"gptj"),iXr.forEach(t),gWe=r(J5e," \u2014 "),Ik=n(J5e,"A",{href:!0});var dXr=s(Ik);hWe=r(dXr,"GPTJConfig"),dXr.forEach(t),pWe=r(J5e," (GPT-J model)"),J5e.forEach(t),uWe=i(y),lm=n(y,"LI",{});var Y5e=s(lm);ore=n(Y5e,"STRONG",{});var cXr=s(ore);_We=r(cXr,"hubert"),cXr.forEach(t),bWe=r(Y5e," \u2014 "),qk=n(Y5e,"A",{href:!0});var fXr=s(qk);vWe=r(fXr,"HubertConfig"),fXr.forEach(t),FWe=r(Y5e," (Hubert model)"),Y5e.forEach(t),TWe=i(y),im=n(y,"LI",{});var K5e=s(im);rre=n(K5e,"STRONG",{});var mXr=s(rre);MWe=r(mXr,"ibert"),mXr.forEach(t),EWe=r(K5e," \u2014 "),Nk=n(K5e,"A",{href:!0});var gXr=s(Nk);CWe=r(gXr,"IBertConfig"),gXr.forEach(t),wWe=r(K5e," (I-BERT model)"),K5e.forEach(t),AWe=i(y),dm=n(y,"LI",{});var Z5e=s(dm);tre=n(Z5e,"STRONG",{});var hXr=s(tre);yWe=r(hXr,"imagegpt"),hXr.forEach(t),LWe=r(Z5e," \u2014 "),jk=n(Z5e,"A",{href:!0});var pXr=s(jk);xWe=r(pXr,"ImageGPTConfig"),pXr.forEach(t),$We=r(Z5e," (ImageGPT model)"),Z5e.forEach(t),kWe=i(y),cm=n(y,"LI",{});var e3e=s(cm);are=n(e3e,"STRONG",{});var uXr=s(are);SWe=r(uXr,"layoutlm"),uXr.forEach(t),RWe=r(e3e," \u2014 "),Dk=n(e3e,"A",{href:!0});var _Xr=s(Dk);PWe=r(_Xr,"LayoutLMConfig"),_Xr.forEach(t),BWe=r(e3e," (LayoutLM model)"),e3e.forEach(t),IWe=i(y),fm=n(y,"LI",{});var o3e=s(fm);nre=n(o3e,"STRONG",{});var bXr=s(nre);qWe=r(bXr,"layoutlmv2"),bXr.forEach(t),NWe=r(o3e," \u2014 "),Gk=n(o3e,"A",{href:!0});var vXr=s(Gk);jWe=r(vXr,"LayoutLMv2Config"),vXr.forEach(t),DWe=r(o3e," (LayoutLMv2 model)"),o3e.forEach(t),GWe=i(y),mm=n(y,"LI",{});var r3e=s(mm);sre=n(r3e,"STRONG",{});var FXr=s(sre);OWe=r(FXr,"layoutlmv3"),FXr.forEach(t),VWe=r(r3e," \u2014 "),Ok=n(r3e,"A",{href:!0});var TXr=s(Ok);XWe=r(TXr,"LayoutLMv3Config"),TXr.forEach(t),zWe=r(r3e," (LayoutLMv3 model)"),r3e.forEach(t),WWe=i(y),gm=n(y,"LI",{});var t3e=s(gm);lre=n(t3e,"STRONG",{});var MXr=s(lre);QWe=r(MXr,"led"),MXr.forEach(t),HWe=r(t3e," \u2014 "),Vk=n(t3e,"A",{href:!0});var EXr=s(Vk);UWe=r(EXr,"LEDConfig"),EXr.forEach(t),JWe=r(t3e," (LED model)"),t3e.forEach(t),YWe=i(y),hm=n(y,"LI",{});var a3e=s(hm);ire=n(a3e,"STRONG",{});var CXr=s(ire);KWe=r(CXr,"longformer"),CXr.forEach(t),ZWe=r(a3e," \u2014 "),Xk=n(a3e,"A",{href:!0});var wXr=s(Xk);eQe=r(wXr,"LongformerConfig"),wXr.forEach(t),oQe=r(a3e," (Longformer model)"),a3e.forEach(t),rQe=i(y),pm=n(y,"LI",{});var n3e=s(pm);dre=n(n3e,"STRONG",{});var AXr=s(dre);tQe=r(AXr,"luke"),AXr.forEach(t),aQe=r(n3e," \u2014 "),zk=n(n3e,"A",{href:!0});var yXr=s(zk);nQe=r(yXr,"LukeConfig"),yXr.forEach(t),sQe=r(n3e," (LUKE model)"),n3e.forEach(t),lQe=i(y),um=n(y,"LI",{});var s3e=s(um);cre=n(s3e,"STRONG",{});var LXr=s(cre);iQe=r(LXr,"lxmert"),LXr.forEach(t),dQe=r(s3e," \u2014 "),Wk=n(s3e,"A",{href:!0});var xXr=s(Wk);cQe=r(xXr,"LxmertConfig"),xXr.forEach(t),fQe=r(s3e," (LXMERT model)"),s3e.forEach(t),mQe=i(y),_m=n(y,"LI",{});var l3e=s(_m);fre=n(l3e,"STRONG",{});var $Xr=s(fre);gQe=r($Xr,"m2m_100"),$Xr.forEach(t),hQe=r(l3e," \u2014 "),Qk=n(l3e,"A",{href:!0});var kXr=s(Qk);pQe=r(kXr,"M2M100Config"),kXr.forEach(t),uQe=r(l3e," (M2M100 model)"),l3e.forEach(t),_Qe=i(y),bm=n(y,"LI",{});var i3e=s(bm);mre=n(i3e,"STRONG",{});var SXr=s(mre);bQe=r(SXr,"marian"),SXr.forEach(t),vQe=r(i3e," \u2014 "),Hk=n(i3e,"A",{href:!0});var RXr=s(Hk);FQe=r(RXr,"MarianConfig"),RXr.forEach(t),TQe=r(i3e," (Marian model)"),i3e.forEach(t),MQe=i(y),vm=n(y,"LI",{});var d3e=s(vm);gre=n(d3e,"STRONG",{});var PXr=s(gre);EQe=r(PXr,"maskformer"),PXr.forEach(t),CQe=r(d3e," \u2014 "),Uk=n(d3e,"A",{href:!0});var BXr=s(Uk);wQe=r(BXr,"MaskFormerConfig"),BXr.forEach(t),AQe=r(d3e," (MaskFormer model)"),d3e.forEach(t),yQe=i(y),Fm=n(y,"LI",{});var c3e=s(Fm);hre=n(c3e,"STRONG",{});var IXr=s(hre);LQe=r(IXr,"mbart"),IXr.forEach(t),xQe=r(c3e," \u2014 "),Jk=n(c3e,"A",{href:!0});var qXr=s(Jk);$Qe=r(qXr,"MBartConfig"),qXr.forEach(t),kQe=r(c3e," (mBART model)"),c3e.forEach(t),SQe=i(y),Tm=n(y,"LI",{});var f3e=s(Tm);pre=n(f3e,"STRONG",{});var NXr=s(pre);RQe=r(NXr,"megatron-bert"),NXr.forEach(t),PQe=r(f3e," \u2014 "),Yk=n(f3e,"A",{href:!0});var jXr=s(Yk);BQe=r(jXr,"MegatronBertConfig"),jXr.forEach(t),IQe=r(f3e," (MegatronBert model)"),f3e.forEach(t),qQe=i(y),Mm=n(y,"LI",{});var m3e=s(Mm);ure=n(m3e,"STRONG",{});var DXr=s(ure);NQe=r(DXr,"mobilebert"),DXr.forEach(t),jQe=r(m3e," \u2014 "),Kk=n(m3e,"A",{href:!0});var GXr=s(Kk);DQe=r(GXr,"MobileBertConfig"),GXr.forEach(t),GQe=r(m3e," (MobileBERT model)"),m3e.forEach(t),OQe=i(y),Em=n(y,"LI",{});var g3e=s(Em);_re=n(g3e,"STRONG",{});var OXr=s(_re);VQe=r(OXr,"mpnet"),OXr.forEach(t),XQe=r(g3e," \u2014 "),Zk=n(g3e,"A",{href:!0});var VXr=s(Zk);zQe=r(VXr,"MPNetConfig"),VXr.forEach(t),WQe=r(g3e," (MPNet model)"),g3e.forEach(t),QQe=i(y),Cm=n(y,"LI",{});var h3e=s(Cm);bre=n(h3e,"STRONG",{});var XXr=s(bre);HQe=r(XXr,"mt5"),XXr.forEach(t),UQe=r(h3e," \u2014 "),eS=n(h3e,"A",{href:!0});var zXr=s(eS);JQe=r(zXr,"MT5Config"),zXr.forEach(t),YQe=r(h3e," (mT5 model)"),h3e.forEach(t),KQe=i(y),wm=n(y,"LI",{});var p3e=s(wm);vre=n(p3e,"STRONG",{});var WXr=s(vre);ZQe=r(WXr,"nystromformer"),WXr.forEach(t),eHe=r(p3e," \u2014 "),oS=n(p3e,"A",{href:!0});var QXr=s(oS);oHe=r(QXr,"NystromformerConfig"),QXr.forEach(t),rHe=r(p3e," (Nystromformer model)"),p3e.forEach(t),tHe=i(y),Am=n(y,"LI",{});var u3e=s(Am);Fre=n(u3e,"STRONG",{});var HXr=s(Fre);aHe=r(HXr,"openai-gpt"),HXr.forEach(t),nHe=r(u3e," \u2014 "),rS=n(u3e,"A",{href:!0});var UXr=s(rS);sHe=r(UXr,"OpenAIGPTConfig"),UXr.forEach(t),lHe=r(u3e," (OpenAI GPT model)"),u3e.forEach(t),iHe=i(y),ym=n(y,"LI",{});var _3e=s(ym);Tre=n(_3e,"STRONG",{});var JXr=s(Tre);dHe=r(JXr,"opt"),JXr.forEach(t),cHe=r(_3e," \u2014 "),tS=n(_3e,"A",{href:!0});var YXr=s(tS);fHe=r(YXr,"OPTConfig"),YXr.forEach(t),mHe=r(_3e," (OPT model)"),_3e.forEach(t),gHe=i(y),Lm=n(y,"LI",{});var b3e=s(Lm);Mre=n(b3e,"STRONG",{});var KXr=s(Mre);hHe=r(KXr,"pegasus"),KXr.forEach(t),pHe=r(b3e," \u2014 "),aS=n(b3e,"A",{href:!0});var ZXr=s(aS);uHe=r(ZXr,"PegasusConfig"),ZXr.forEach(t),_He=r(b3e," (Pegasus model)"),b3e.forEach(t),bHe=i(y),xm=n(y,"LI",{});var v3e=s(xm);Ere=n(v3e,"STRONG",{});var ezr=s(Ere);vHe=r(ezr,"perceiver"),ezr.forEach(t),FHe=r(v3e," \u2014 "),nS=n(v3e,"A",{href:!0});var ozr=s(nS);THe=r(ozr,"PerceiverConfig"),ozr.forEach(t),MHe=r(v3e," (Perceiver model)"),v3e.forEach(t),EHe=i(y),$m=n(y,"LI",{});var F3e=s($m);Cre=n(F3e,"STRONG",{});var rzr=s(Cre);CHe=r(rzr,"plbart"),rzr.forEach(t),wHe=r(F3e," \u2014 "),sS=n(F3e,"A",{href:!0});var tzr=s(sS);AHe=r(tzr,"PLBartConfig"),tzr.forEach(t),yHe=r(F3e," (PLBart model)"),F3e.forEach(t),LHe=i(y),km=n(y,"LI",{});var T3e=s(km);wre=n(T3e,"STRONG",{});var azr=s(wre);xHe=r(azr,"poolformer"),azr.forEach(t),$He=r(T3e," \u2014 "),lS=n(T3e,"A",{href:!0});var nzr=s(lS);kHe=r(nzr,"PoolFormerConfig"),nzr.forEach(t),SHe=r(T3e," (PoolFormer model)"),T3e.forEach(t),RHe=i(y),Sm=n(y,"LI",{});var M3e=s(Sm);Are=n(M3e,"STRONG",{});var szr=s(Are);PHe=r(szr,"prophetnet"),szr.forEach(t),BHe=r(M3e," \u2014 "),iS=n(M3e,"A",{href:!0});var lzr=s(iS);IHe=r(lzr,"ProphetNetConfig"),lzr.forEach(t),qHe=r(M3e," (ProphetNet model)"),M3e.forEach(t),NHe=i(y),Rm=n(y,"LI",{});var E3e=s(Rm);yre=n(E3e,"STRONG",{});var izr=s(yre);jHe=r(izr,"qdqbert"),izr.forEach(t),DHe=r(E3e," \u2014 "),dS=n(E3e,"A",{href:!0});var dzr=s(dS);GHe=r(dzr,"QDQBertConfig"),dzr.forEach(t),OHe=r(E3e," (QDQBert model)"),E3e.forEach(t),VHe=i(y),Pm=n(y,"LI",{});var C3e=s(Pm);Lre=n(C3e,"STRONG",{});var czr=s(Lre);XHe=r(czr,"rag"),czr.forEach(t),zHe=r(C3e," \u2014 "),cS=n(C3e,"A",{href:!0});var fzr=s(cS);WHe=r(fzr,"RagConfig"),fzr.forEach(t),QHe=r(C3e," (RAG model)"),C3e.forEach(t),HHe=i(y),Bm=n(y,"LI",{});var w3e=s(Bm);xre=n(w3e,"STRONG",{});var mzr=s(xre);UHe=r(mzr,"realm"),mzr.forEach(t),JHe=r(w3e," \u2014 "),fS=n(w3e,"A",{href:!0});var gzr=s(fS);YHe=r(gzr,"RealmConfig"),gzr.forEach(t),KHe=r(w3e," (Realm model)"),w3e.forEach(t),ZHe=i(y),Im=n(y,"LI",{});var A3e=s(Im);$re=n(A3e,"STRONG",{});var hzr=s($re);eUe=r(hzr,"reformer"),hzr.forEach(t),oUe=r(A3e," \u2014 "),mS=n(A3e,"A",{href:!0});var pzr=s(mS);rUe=r(pzr,"ReformerConfig"),pzr.forEach(t),tUe=r(A3e," (Reformer model)"),A3e.forEach(t),aUe=i(y),qm=n(y,"LI",{});var y3e=s(qm);kre=n(y3e,"STRONG",{});var uzr=s(kre);nUe=r(uzr,"regnet"),uzr.forEach(t),sUe=r(y3e," \u2014 "),gS=n(y3e,"A",{href:!0});var _zr=s(gS);lUe=r(_zr,"RegNetConfig"),_zr.forEach(t),iUe=r(y3e," (RegNet model)"),y3e.forEach(t),dUe=i(y),Nm=n(y,"LI",{});var L3e=s(Nm);Sre=n(L3e,"STRONG",{});var bzr=s(Sre);cUe=r(bzr,"rembert"),bzr.forEach(t),fUe=r(L3e," \u2014 "),hS=n(L3e,"A",{href:!0});var vzr=s(hS);mUe=r(vzr,"RemBertConfig"),vzr.forEach(t),gUe=r(L3e," (RemBERT model)"),L3e.forEach(t),hUe=i(y),jm=n(y,"LI",{});var x3e=s(jm);Rre=n(x3e,"STRONG",{});var Fzr=s(Rre);pUe=r(Fzr,"resnet"),Fzr.forEach(t),uUe=r(x3e," \u2014 "),pS=n(x3e,"A",{href:!0});var Tzr=s(pS);_Ue=r(Tzr,"ResNetConfig"),Tzr.forEach(t),bUe=r(x3e," (ResNet model)"),x3e.forEach(t),vUe=i(y),Dm=n(y,"LI",{});var $3e=s(Dm);Pre=n($3e,"STRONG",{});var Mzr=s(Pre);FUe=r(Mzr,"retribert"),Mzr.forEach(t),TUe=r($3e," \u2014 "),uS=n($3e,"A",{href:!0});var Ezr=s(uS);MUe=r(Ezr,"RetriBertConfig"),Ezr.forEach(t),EUe=r($3e," (RetriBERT model)"),$3e.forEach(t),CUe=i(y),Gm=n(y,"LI",{});var k3e=s(Gm);Bre=n(k3e,"STRONG",{});var Czr=s(Bre);wUe=r(Czr,"roberta"),Czr.forEach(t),AUe=r(k3e," \u2014 "),_S=n(k3e,"A",{href:!0});var wzr=s(_S);yUe=r(wzr,"RobertaConfig"),wzr.forEach(t),LUe=r(k3e," (RoBERTa model)"),k3e.forEach(t),xUe=i(y),Om=n(y,"LI",{});var S3e=s(Om);Ire=n(S3e,"STRONG",{});var Azr=s(Ire);$Ue=r(Azr,"roformer"),Azr.forEach(t),kUe=r(S3e," \u2014 "),bS=n(S3e,"A",{href:!0});var yzr=s(bS);SUe=r(yzr,"RoFormerConfig"),yzr.forEach(t),RUe=r(S3e," (RoFormer model)"),S3e.forEach(t),PUe=i(y),Vm=n(y,"LI",{});var R3e=s(Vm);qre=n(R3e,"STRONG",{});var Lzr=s(qre);BUe=r(Lzr,"segformer"),Lzr.forEach(t),IUe=r(R3e," \u2014 "),vS=n(R3e,"A",{href:!0});var xzr=s(vS);qUe=r(xzr,"SegformerConfig"),xzr.forEach(t),NUe=r(R3e," (SegFormer model)"),R3e.forEach(t),jUe=i(y),Xm=n(y,"LI",{});var P3e=s(Xm);Nre=n(P3e,"STRONG",{});var $zr=s(Nre);DUe=r($zr,"sew"),$zr.forEach(t),GUe=r(P3e," \u2014 "),FS=n(P3e,"A",{href:!0});var kzr=s(FS);OUe=r(kzr,"SEWConfig"),kzr.forEach(t),VUe=r(P3e," (SEW model)"),P3e.forEach(t),XUe=i(y),zm=n(y,"LI",{});var B3e=s(zm);jre=n(B3e,"STRONG",{});var Szr=s(jre);zUe=r(Szr,"sew-d"),Szr.forEach(t),WUe=r(B3e," \u2014 "),TS=n(B3e,"A",{href:!0});var Rzr=s(TS);QUe=r(Rzr,"SEWDConfig"),Rzr.forEach(t),HUe=r(B3e," (SEW-D model)"),B3e.forEach(t),UUe=i(y),Wm=n(y,"LI",{});var I3e=s(Wm);Dre=n(I3e,"STRONG",{});var Pzr=s(Dre);JUe=r(Pzr,"speech-encoder-decoder"),Pzr.forEach(t),YUe=r(I3e," \u2014 "),MS=n(I3e,"A",{href:!0});var Bzr=s(MS);KUe=r(Bzr,"SpeechEncoderDecoderConfig"),Bzr.forEach(t),ZUe=r(I3e," (Speech Encoder decoder model)"),I3e.forEach(t),eJe=i(y),Qm=n(y,"LI",{});var q3e=s(Qm);Gre=n(q3e,"STRONG",{});var Izr=s(Gre);oJe=r(Izr,"speech_to_text"),Izr.forEach(t),rJe=r(q3e," \u2014 "),ES=n(q3e,"A",{href:!0});var qzr=s(ES);tJe=r(qzr,"Speech2TextConfig"),qzr.forEach(t),aJe=r(q3e," (Speech2Text model)"),q3e.forEach(t),nJe=i(y),Hm=n(y,"LI",{});var N3e=s(Hm);Ore=n(N3e,"STRONG",{});var Nzr=s(Ore);sJe=r(Nzr,"speech_to_text_2"),Nzr.forEach(t),lJe=r(N3e," \u2014 "),CS=n(N3e,"A",{href:!0});var jzr=s(CS);iJe=r(jzr,"Speech2Text2Config"),jzr.forEach(t),dJe=r(N3e," (Speech2Text2 model)"),N3e.forEach(t),cJe=i(y),Um=n(y,"LI",{});var j3e=s(Um);Vre=n(j3e,"STRONG",{});var Dzr=s(Vre);fJe=r(Dzr,"splinter"),Dzr.forEach(t),mJe=r(j3e," \u2014 "),wS=n(j3e,"A",{href:!0});var Gzr=s(wS);gJe=r(Gzr,"SplinterConfig"),Gzr.forEach(t),hJe=r(j3e," (Splinter model)"),j3e.forEach(t),pJe=i(y),Jm=n(y,"LI",{});var D3e=s(Jm);Xre=n(D3e,"STRONG",{});var Ozr=s(Xre);uJe=r(Ozr,"squeezebert"),Ozr.forEach(t),_Je=r(D3e," \u2014 "),AS=n(D3e,"A",{href:!0});var Vzr=s(AS);bJe=r(Vzr,"SqueezeBertConfig"),Vzr.forEach(t),vJe=r(D3e," (SqueezeBERT model)"),D3e.forEach(t),FJe=i(y),Ym=n(y,"LI",{});var G3e=s(Ym);zre=n(G3e,"STRONG",{});var Xzr=s(zre);TJe=r(Xzr,"swin"),Xzr.forEach(t),MJe=r(G3e," \u2014 "),yS=n(G3e,"A",{href:!0});var zzr=s(yS);EJe=r(zzr,"SwinConfig"),zzr.forEach(t),CJe=r(G3e," (Swin model)"),G3e.forEach(t),wJe=i(y),Km=n(y,"LI",{});var O3e=s(Km);Wre=n(O3e,"STRONG",{});var Wzr=s(Wre);AJe=r(Wzr,"t5"),Wzr.forEach(t),yJe=r(O3e," \u2014 "),LS=n(O3e,"A",{href:!0});var Qzr=s(LS);LJe=r(Qzr,"T5Config"),Qzr.forEach(t),xJe=r(O3e," (T5 model)"),O3e.forEach(t),$Je=i(y),Zm=n(y,"LI",{});var V3e=s(Zm);Qre=n(V3e,"STRONG",{});var Hzr=s(Qre);kJe=r(Hzr,"tapas"),Hzr.forEach(t),SJe=r(V3e," \u2014 "),xS=n(V3e,"A",{href:!0});var Uzr=s(xS);RJe=r(Uzr,"TapasConfig"),Uzr.forEach(t),PJe=r(V3e," (TAPAS model)"),V3e.forEach(t),BJe=i(y),eg=n(y,"LI",{});var X3e=s(eg);Hre=n(X3e,"STRONG",{});var Jzr=s(Hre);IJe=r(Jzr,"trajectory_transformer"),Jzr.forEach(t),qJe=r(X3e," \u2014 "),$S=n(X3e,"A",{href:!0});var Yzr=s($S);NJe=r(Yzr,"TrajectoryTransformerConfig"),Yzr.forEach(t),jJe=r(X3e," (Trajectory Transformer model)"),X3e.forEach(t),DJe=i(y),og=n(y,"LI",{});var z3e=s(og);Ure=n(z3e,"STRONG",{});var Kzr=s(Ure);GJe=r(Kzr,"transfo-xl"),Kzr.forEach(t),OJe=r(z3e," \u2014 "),kS=n(z3e,"A",{href:!0});var Zzr=s(kS);VJe=r(Zzr,"TransfoXLConfig"),Zzr.forEach(t),XJe=r(z3e," (Transformer-XL model)"),z3e.forEach(t),zJe=i(y),rg=n(y,"LI",{});var W3e=s(rg);Jre=n(W3e,"STRONG",{});var eWr=s(Jre);WJe=r(eWr,"trocr"),eWr.forEach(t),QJe=r(W3e," \u2014 "),SS=n(W3e,"A",{href:!0});var oWr=s(SS);HJe=r(oWr,"TrOCRConfig"),oWr.forEach(t),UJe=r(W3e," (TrOCR model)"),W3e.forEach(t),JJe=i(y),tg=n(y,"LI",{});var Q3e=s(tg);Yre=n(Q3e,"STRONG",{});var rWr=s(Yre);YJe=r(rWr,"unispeech"),rWr.forEach(t),KJe=r(Q3e," \u2014 "),RS=n(Q3e,"A",{href:!0});var tWr=s(RS);ZJe=r(tWr,"UniSpeechConfig"),tWr.forEach(t),eYe=r(Q3e," (UniSpeech model)"),Q3e.forEach(t),oYe=i(y),ag=n(y,"LI",{});var H3e=s(ag);Kre=n(H3e,"STRONG",{});var aWr=s(Kre);rYe=r(aWr,"unispeech-sat"),aWr.forEach(t),tYe=r(H3e," \u2014 "),PS=n(H3e,"A",{href:!0});var nWr=s(PS);aYe=r(nWr,"UniSpeechSatConfig"),nWr.forEach(t),nYe=r(H3e," (UniSpeechSat model)"),H3e.forEach(t),sYe=i(y),ng=n(y,"LI",{});var U3e=s(ng);Zre=n(U3e,"STRONG",{});var sWr=s(Zre);lYe=r(sWr,"van"),sWr.forEach(t),iYe=r(U3e," \u2014 "),BS=n(U3e,"A",{href:!0});var lWr=s(BS);dYe=r(lWr,"VanConfig"),lWr.forEach(t),cYe=r(U3e," (VAN model)"),U3e.forEach(t),fYe=i(y),sg=n(y,"LI",{});var J3e=s(sg);ete=n(J3e,"STRONG",{});var iWr=s(ete);mYe=r(iWr,"vilt"),iWr.forEach(t),gYe=r(J3e," \u2014 "),IS=n(J3e,"A",{href:!0});var dWr=s(IS);hYe=r(dWr,"ViltConfig"),dWr.forEach(t),pYe=r(J3e," (ViLT model)"),J3e.forEach(t),uYe=i(y),lg=n(y,"LI",{});var Y3e=s(lg);ote=n(Y3e,"STRONG",{});var cWr=s(ote);_Ye=r(cWr,"vision-encoder-decoder"),cWr.forEach(t),bYe=r(Y3e," \u2014 "),qS=n(Y3e,"A",{href:!0});var fWr=s(qS);vYe=r(fWr,"VisionEncoderDecoderConfig"),fWr.forEach(t),FYe=r(Y3e," (Vision Encoder decoder model)"),Y3e.forEach(t),TYe=i(y),ig=n(y,"LI",{});var K3e=s(ig);rte=n(K3e,"STRONG",{});var mWr=s(rte);MYe=r(mWr,"vision-text-dual-encoder"),mWr.forEach(t),EYe=r(K3e," \u2014 "),NS=n(K3e,"A",{href:!0});var gWr=s(NS);CYe=r(gWr,"VisionTextDualEncoderConfig"),gWr.forEach(t),wYe=r(K3e," (VisionTextDualEncoder model)"),K3e.forEach(t),AYe=i(y),dg=n(y,"LI",{});var Z3e=s(dg);tte=n(Z3e,"STRONG",{});var hWr=s(tte);yYe=r(hWr,"visual_bert"),hWr.forEach(t),LYe=r(Z3e," \u2014 "),jS=n(Z3e,"A",{href:!0});var pWr=s(jS);xYe=r(pWr,"VisualBertConfig"),pWr.forEach(t),$Ye=r(Z3e," (VisualBert model)"),Z3e.forEach(t),kYe=i(y),cg=n(y,"LI",{});var ewe=s(cg);ate=n(ewe,"STRONG",{});var uWr=s(ate);SYe=r(uWr,"vit"),uWr.forEach(t),RYe=r(ewe," \u2014 "),DS=n(ewe,"A",{href:!0});var _Wr=s(DS);PYe=r(_Wr,"ViTConfig"),_Wr.forEach(t),BYe=r(ewe," (ViT model)"),ewe.forEach(t),IYe=i(y),fg=n(y,"LI",{});var owe=s(fg);nte=n(owe,"STRONG",{});var bWr=s(nte);qYe=r(bWr,"vit_mae"),bWr.forEach(t),NYe=r(owe," \u2014 "),GS=n(owe,"A",{href:!0});var vWr=s(GS);jYe=r(vWr,"ViTMAEConfig"),vWr.forEach(t),DYe=r(owe," (ViTMAE model)"),owe.forEach(t),GYe=i(y),mg=n(y,"LI",{});var rwe=s(mg);ste=n(rwe,"STRONG",{});var FWr=s(ste);OYe=r(FWr,"wav2vec2"),FWr.forEach(t),VYe=r(rwe," \u2014 "),OS=n(rwe,"A",{href:!0});var TWr=s(OS);XYe=r(TWr,"Wav2Vec2Config"),TWr.forEach(t),zYe=r(rwe," (Wav2Vec2 model)"),rwe.forEach(t),WYe=i(y),gg=n(y,"LI",{});var twe=s(gg);lte=n(twe,"STRONG",{});var MWr=s(lte);QYe=r(MWr,"wav2vec2-conformer"),MWr.forEach(t),HYe=r(twe," \u2014 "),VS=n(twe,"A",{href:!0});var EWr=s(VS);UYe=r(EWr,"Wav2Vec2ConformerConfig"),EWr.forEach(t),JYe=r(twe," (Wav2Vec2-Conformer model)"),twe.forEach(t),YYe=i(y),hg=n(y,"LI",{});var awe=s(hg);ite=n(awe,"STRONG",{});var CWr=s(ite);KYe=r(CWr,"wavlm"),CWr.forEach(t),ZYe=r(awe," \u2014 "),XS=n(awe,"A",{href:!0});var wWr=s(XS);eKe=r(wWr,"WavLMConfig"),wWr.forEach(t),oKe=r(awe," (WavLM model)"),awe.forEach(t),rKe=i(y),pg=n(y,"LI",{});var nwe=s(pg);dte=n(nwe,"STRONG",{});var AWr=s(dte);tKe=r(AWr,"xglm"),AWr.forEach(t),aKe=r(nwe," \u2014 "),zS=n(nwe,"A",{href:!0});var yWr=s(zS);nKe=r(yWr,"XGLMConfig"),yWr.forEach(t),sKe=r(nwe," (XGLM model)"),nwe.forEach(t),lKe=i(y),ug=n(y,"LI",{});var swe=s(ug);cte=n(swe,"STRONG",{});var LWr=s(cte);iKe=r(LWr,"xlm"),LWr.forEach(t),dKe=r(swe," \u2014 "),WS=n(swe,"A",{href:!0});var xWr=s(WS);cKe=r(xWr,"XLMConfig"),xWr.forEach(t),fKe=r(swe," (XLM model)"),swe.forEach(t),mKe=i(y),_g=n(y,"LI",{});var lwe=s(_g);fte=n(lwe,"STRONG",{});var $Wr=s(fte);gKe=r($Wr,"xlm-prophetnet"),$Wr.forEach(t),hKe=r(lwe," \u2014 "),QS=n(lwe,"A",{href:!0});var kWr=s(QS);pKe=r(kWr,"XLMProphetNetConfig"),kWr.forEach(t),uKe=r(lwe," (XLMProphetNet model)"),lwe.forEach(t),_Ke=i(y),bg=n(y,"LI",{});var iwe=s(bg);mte=n(iwe,"STRONG",{});var SWr=s(mte);bKe=r(SWr,"xlm-roberta"),SWr.forEach(t),vKe=r(iwe," \u2014 "),HS=n(iwe,"A",{href:!0});var RWr=s(HS);FKe=r(RWr,"XLMRobertaConfig"),RWr.forEach(t),TKe=r(iwe," (XLM-RoBERTa model)"),iwe.forEach(t),MKe=i(y),vg=n(y,"LI",{});var dwe=s(vg);gte=n(dwe,"STRONG",{});var PWr=s(gte);EKe=r(PWr,"xlm-roberta-xl"),PWr.forEach(t),CKe=r(dwe," \u2014 "),US=n(dwe,"A",{href:!0});var BWr=s(US);wKe=r(BWr,"XLMRobertaXLConfig"),BWr.forEach(t),AKe=r(dwe," (XLM-RoBERTa-XL model)"),dwe.forEach(t),yKe=i(y),Fg=n(y,"LI",{});var cwe=s(Fg);hte=n(cwe,"STRONG",{});var IWr=s(hte);LKe=r(IWr,"xlnet"),IWr.forEach(t),xKe=r(cwe," \u2014 "),JS=n(cwe,"A",{href:!0});var qWr=s(JS);$Ke=r(qWr,"XLNetConfig"),qWr.forEach(t),kKe=r(cwe," (XLNet model)"),cwe.forEach(t),SKe=i(y),Tg=n(y,"LI",{});var fwe=s(Tg);pte=n(fwe,"STRONG",{});var NWr=s(pte);RKe=r(NWr,"yolos"),NWr.forEach(t),PKe=r(fwe," \u2014 "),YS=n(fwe,"A",{href:!0});var jWr=s(YS);BKe=r(jWr,"YolosConfig"),jWr.forEach(t),IKe=r(fwe," (YOLOS model)"),fwe.forEach(t),qKe=i(y),Mg=n(y,"LI",{});var mwe=s(Mg);ute=n(mwe,"STRONG",{});var DWr=s(ute);NKe=r(DWr,"yoso"),DWr.forEach(t),jKe=r(mwe," \u2014 "),KS=n(mwe,"A",{href:!0});var GWr=s(KS);DKe=r(GWr,"YosoConfig"),GWr.forEach(t),GKe=r(mwe," (YOSO model)"),mwe.forEach(t),y.forEach(t),OKe=i(ot),T(Eg.$$.fragment,ot),ot.forEach(t),VKe=i(et),Cg=n(et,"DIV",{class:!0});var rDe=s(Cg);T(Py.$$.fragment,rDe),XKe=i(rDe),_te=n(rDe,"P",{});var OWr=s(_te);zKe=r(OWr,"Register a new configuration for this class."),OWr.forEach(t),rDe.forEach(t),et.forEach(t),nNe=i(f),Ti=n(f,"H2",{class:!0});var tDe=s(Ti);wg=n(tDe,"A",{id:!0,class:!0,href:!0});var VWr=s(wg);bte=n(VWr,"SPAN",{});var XWr=s(bte);T(By.$$.fragment,XWr),XWr.forEach(t),VWr.forEach(t),WKe=i(tDe),vte=n(tDe,"SPAN",{});var zWr=s(vte);QKe=r(zWr,"AutoTokenizer"),zWr.forEach(t),tDe.forEach(t),sNe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(Iy.$$.fragment,qs),HKe=i(qs),qy=n(qs,"P",{});var aDe=s(qy);UKe=r(aDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ZS=n(aDe,"A",{href:!0});var WWr=s(ZS);JKe=r(WWr,"AutoTokenizer.from_pretrained()"),WWr.forEach(t),YKe=r(aDe," class method."),aDe.forEach(t),KKe=i(qs),Ny=n(qs,"P",{});var nDe=s(Ny);ZKe=r(nDe,"This class cannot be instantiated directly using "),Fte=n(nDe,"CODE",{});var QWr=s(Fte);eZe=r(QWr,"__init__()"),QWr.forEach(t),oZe=r(nDe," (throws an error)."),nDe.forEach(t),rZe=i(qs),Cr=n(qs,"DIV",{class:!0});var Ns=s(Cr);T(jy.$$.fragment,Ns),tZe=i(Ns),Tte=n(Ns,"P",{});var HWr=s(Tte);aZe=r(HWr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HWr.forEach(t),nZe=i(Ns),Aa=n(Ns,"P",{});var xw=s(Aa);sZe=r(xw,"The tokenizer class to instantiate is selected based on the "),Mte=n(xw,"CODE",{});var UWr=s(Mte);lZe=r(UWr,"model_type"),UWr.forEach(t),iZe=r(xw,` property of the config object (either
passed as an argument or loaded from `),Ete=n(xw,"CODE",{});var JWr=s(Ete);dZe=r(JWr,"pretrained_model_name_or_path"),JWr.forEach(t),cZe=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cte=n(xw,"CODE",{});var YWr=s(Cte);fZe=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),mZe=r(xw,":"),xw.forEach(t),gZe=i(Ns),k=n(Ns,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Dx=s(Sn);wte=n(Dx,"STRONG",{});var KWr=s(wte);hZe=r(KWr,"albert"),KWr.forEach(t),pZe=r(Dx," \u2014 "),eR=n(Dx,"A",{href:!0});var ZWr=s(eR);uZe=r(ZWr,"AlbertTokenizer"),ZWr.forEach(t),_Ze=r(Dx," or "),oR=n(Dx,"A",{href:!0});var eQr=s(oR);bZe=r(eQr,"AlbertTokenizerFast"),eQr.forEach(t),vZe=r(Dx," (ALBERT model)"),Dx.forEach(t),FZe=i(S),Rn=n(S,"LI",{});var Gx=s(Rn);Ate=n(Gx,"STRONG",{});var oQr=s(Ate);TZe=r(oQr,"bart"),oQr.forEach(t),MZe=r(Gx," \u2014 "),rR=n(Gx,"A",{href:!0});var rQr=s(rR);EZe=r(rQr,"BartTokenizer"),rQr.forEach(t),CZe=r(Gx," or "),tR=n(Gx,"A",{href:!0});var tQr=s(tR);wZe=r(tQr,"BartTokenizerFast"),tQr.forEach(t),AZe=r(Gx," (BART model)"),Gx.forEach(t),yZe=i(S),Pn=n(S,"LI",{});var Ox=s(Pn);yte=n(Ox,"STRONG",{});var aQr=s(yte);LZe=r(aQr,"barthez"),aQr.forEach(t),xZe=r(Ox," \u2014 "),aR=n(Ox,"A",{href:!0});var nQr=s(aR);$Ze=r(nQr,"BarthezTokenizer"),nQr.forEach(t),kZe=r(Ox," or "),nR=n(Ox,"A",{href:!0});var sQr=s(nR);SZe=r(sQr,"BarthezTokenizerFast"),sQr.forEach(t),RZe=r(Ox," (BARThez model)"),Ox.forEach(t),PZe=i(S),Ag=n(S,"LI",{});var gwe=s(Ag);Lte=n(gwe,"STRONG",{});var lQr=s(Lte);BZe=r(lQr,"bartpho"),lQr.forEach(t),IZe=r(gwe," \u2014 "),sR=n(gwe,"A",{href:!0});var iQr=s(sR);qZe=r(iQr,"BartphoTokenizer"),iQr.forEach(t),NZe=r(gwe," (BARTpho model)"),gwe.forEach(t),jZe=i(S),Bn=n(S,"LI",{});var Vx=s(Bn);xte=n(Vx,"STRONG",{});var dQr=s(xte);DZe=r(dQr,"bert"),dQr.forEach(t),GZe=r(Vx," \u2014 "),lR=n(Vx,"A",{href:!0});var cQr=s(lR);OZe=r(cQr,"BertTokenizer"),cQr.forEach(t),VZe=r(Vx," or "),iR=n(Vx,"A",{href:!0});var fQr=s(iR);XZe=r(fQr,"BertTokenizerFast"),fQr.forEach(t),zZe=r(Vx," (BERT model)"),Vx.forEach(t),WZe=i(S),yg=n(S,"LI",{});var hwe=s(yg);$te=n(hwe,"STRONG",{});var mQr=s($te);QZe=r(mQr,"bert-generation"),mQr.forEach(t),HZe=r(hwe," \u2014 "),dR=n(hwe,"A",{href:!0});var gQr=s(dR);UZe=r(gQr,"BertGenerationTokenizer"),gQr.forEach(t),JZe=r(hwe," (Bert Generation model)"),hwe.forEach(t),YZe=i(S),Lg=n(S,"LI",{});var pwe=s(Lg);kte=n(pwe,"STRONG",{});var hQr=s(kte);KZe=r(hQr,"bert-japanese"),hQr.forEach(t),ZZe=r(pwe," \u2014 "),cR=n(pwe,"A",{href:!0});var pQr=s(cR);eeo=r(pQr,"BertJapaneseTokenizer"),pQr.forEach(t),oeo=r(pwe," (BertJapanese model)"),pwe.forEach(t),reo=i(S),xg=n(S,"LI",{});var uwe=s(xg);Ste=n(uwe,"STRONG",{});var uQr=s(Ste);teo=r(uQr,"bertweet"),uQr.forEach(t),aeo=r(uwe," \u2014 "),fR=n(uwe,"A",{href:!0});var _Qr=s(fR);neo=r(_Qr,"BertweetTokenizer"),_Qr.forEach(t),seo=r(uwe," (Bertweet model)"),uwe.forEach(t),leo=i(S),In=n(S,"LI",{});var Xx=s(In);Rte=n(Xx,"STRONG",{});var bQr=s(Rte);ieo=r(bQr,"big_bird"),bQr.forEach(t),deo=r(Xx," \u2014 "),mR=n(Xx,"A",{href:!0});var vQr=s(mR);ceo=r(vQr,"BigBirdTokenizer"),vQr.forEach(t),feo=r(Xx," or "),gR=n(Xx,"A",{href:!0});var FQr=s(gR);meo=r(FQr,"BigBirdTokenizerFast"),FQr.forEach(t),geo=r(Xx," (BigBird model)"),Xx.forEach(t),heo=i(S),qn=n(S,"LI",{});var zx=s(qn);Pte=n(zx,"STRONG",{});var TQr=s(Pte);peo=r(TQr,"bigbird_pegasus"),TQr.forEach(t),ueo=r(zx," \u2014 "),hR=n(zx,"A",{href:!0});var MQr=s(hR);_eo=r(MQr,"PegasusTokenizer"),MQr.forEach(t),beo=r(zx," or "),pR=n(zx,"A",{href:!0});var EQr=s(pR);veo=r(EQr,"PegasusTokenizerFast"),EQr.forEach(t),Feo=r(zx," (BigBirdPegasus model)"),zx.forEach(t),Teo=i(S),Nn=n(S,"LI",{});var Wx=s(Nn);Bte=n(Wx,"STRONG",{});var CQr=s(Bte);Meo=r(CQr,"blenderbot"),CQr.forEach(t),Eeo=r(Wx," \u2014 "),uR=n(Wx,"A",{href:!0});var wQr=s(uR);Ceo=r(wQr,"BlenderbotTokenizer"),wQr.forEach(t),weo=r(Wx," or "),_R=n(Wx,"A",{href:!0});var AQr=s(_R);Aeo=r(AQr,"BlenderbotTokenizerFast"),AQr.forEach(t),yeo=r(Wx," (Blenderbot model)"),Wx.forEach(t),Leo=i(S),$g=n(S,"LI",{});var _we=s($g);Ite=n(_we,"STRONG",{});var yQr=s(Ite);xeo=r(yQr,"blenderbot-small"),yQr.forEach(t),$eo=r(_we," \u2014 "),bR=n(_we,"A",{href:!0});var LQr=s(bR);keo=r(LQr,"BlenderbotSmallTokenizer"),LQr.forEach(t),Seo=r(_we," (BlenderbotSmall model)"),_we.forEach(t),Reo=i(S),kg=n(S,"LI",{});var bwe=s(kg);qte=n(bwe,"STRONG",{});var xQr=s(qte);Peo=r(xQr,"byt5"),xQr.forEach(t),Beo=r(bwe," \u2014 "),vR=n(bwe,"A",{href:!0});var $Qr=s(vR);Ieo=r($Qr,"ByT5Tokenizer"),$Qr.forEach(t),qeo=r(bwe," (ByT5 model)"),bwe.forEach(t),Neo=i(S),jn=n(S,"LI",{});var Qx=s(jn);Nte=n(Qx,"STRONG",{});var kQr=s(Nte);jeo=r(kQr,"camembert"),kQr.forEach(t),Deo=r(Qx," \u2014 "),FR=n(Qx,"A",{href:!0});var SQr=s(FR);Geo=r(SQr,"CamembertTokenizer"),SQr.forEach(t),Oeo=r(Qx," or "),TR=n(Qx,"A",{href:!0});var RQr=s(TR);Veo=r(RQr,"CamembertTokenizerFast"),RQr.forEach(t),Xeo=r(Qx," (CamemBERT model)"),Qx.forEach(t),zeo=i(S),Sg=n(S,"LI",{});var vwe=s(Sg);jte=n(vwe,"STRONG",{});var PQr=s(jte);Weo=r(PQr,"canine"),PQr.forEach(t),Qeo=r(vwe," \u2014 "),MR=n(vwe,"A",{href:!0});var BQr=s(MR);Heo=r(BQr,"CanineTokenizer"),BQr.forEach(t),Ueo=r(vwe," (Canine model)"),vwe.forEach(t),Jeo=i(S),Dn=n(S,"LI",{});var Hx=s(Dn);Dte=n(Hx,"STRONG",{});var IQr=s(Dte);Yeo=r(IQr,"clip"),IQr.forEach(t),Keo=r(Hx," \u2014 "),ER=n(Hx,"A",{href:!0});var qQr=s(ER);Zeo=r(qQr,"CLIPTokenizer"),qQr.forEach(t),eoo=r(Hx," or "),CR=n(Hx,"A",{href:!0});var NQr=s(CR);ooo=r(NQr,"CLIPTokenizerFast"),NQr.forEach(t),roo=r(Hx," (CLIP model)"),Hx.forEach(t),too=i(S),Gn=n(S,"LI",{});var Ux=s(Gn);Gte=n(Ux,"STRONG",{});var jQr=s(Gte);aoo=r(jQr,"convbert"),jQr.forEach(t),noo=r(Ux," \u2014 "),wR=n(Ux,"A",{href:!0});var DQr=s(wR);soo=r(DQr,"ConvBertTokenizer"),DQr.forEach(t),loo=r(Ux," or "),AR=n(Ux,"A",{href:!0});var GQr=s(AR);ioo=r(GQr,"ConvBertTokenizerFast"),GQr.forEach(t),doo=r(Ux," (ConvBERT model)"),Ux.forEach(t),coo=i(S),On=n(S,"LI",{});var Jx=s(On);Ote=n(Jx,"STRONG",{});var OQr=s(Ote);foo=r(OQr,"cpm"),OQr.forEach(t),moo=r(Jx," \u2014 "),yR=n(Jx,"A",{href:!0});var VQr=s(yR);goo=r(VQr,"CpmTokenizer"),VQr.forEach(t),hoo=r(Jx," or "),LR=n(Jx,"A",{href:!0});var XQr=s(LR);poo=r(XQr,"CpmTokenizerFast"),XQr.forEach(t),uoo=r(Jx," (CPM model)"),Jx.forEach(t),_oo=i(S),Rg=n(S,"LI",{});var Fwe=s(Rg);Vte=n(Fwe,"STRONG",{});var zQr=s(Vte);boo=r(zQr,"ctrl"),zQr.forEach(t),voo=r(Fwe," \u2014 "),xR=n(Fwe,"A",{href:!0});var WQr=s(xR);Foo=r(WQr,"CTRLTokenizer"),WQr.forEach(t),Too=r(Fwe," (CTRL model)"),Fwe.forEach(t),Moo=i(S),Vn=n(S,"LI",{});var Yx=s(Vn);Xte=n(Yx,"STRONG",{});var QQr=s(Xte);Eoo=r(QQr,"data2vec-text"),QQr.forEach(t),Coo=r(Yx," \u2014 "),$R=n(Yx,"A",{href:!0});var HQr=s($R);woo=r(HQr,"RobertaTokenizer"),HQr.forEach(t),Aoo=r(Yx," or "),kR=n(Yx,"A",{href:!0});var UQr=s(kR);yoo=r(UQr,"RobertaTokenizerFast"),UQr.forEach(t),Loo=r(Yx," (Data2VecText model)"),Yx.forEach(t),xoo=i(S),Xn=n(S,"LI",{});var Kx=s(Xn);zte=n(Kx,"STRONG",{});var JQr=s(zte);$oo=r(JQr,"deberta"),JQr.forEach(t),koo=r(Kx," \u2014 "),SR=n(Kx,"A",{href:!0});var YQr=s(SR);Soo=r(YQr,"DebertaTokenizer"),YQr.forEach(t),Roo=r(Kx," or "),RR=n(Kx,"A",{href:!0});var KQr=s(RR);Poo=r(KQr,"DebertaTokenizerFast"),KQr.forEach(t),Boo=r(Kx," (DeBERTa model)"),Kx.forEach(t),Ioo=i(S),zn=n(S,"LI",{});var Zx=s(zn);Wte=n(Zx,"STRONG",{});var ZQr=s(Wte);qoo=r(ZQr,"deberta-v2"),ZQr.forEach(t),Noo=r(Zx," \u2014 "),PR=n(Zx,"A",{href:!0});var eHr=s(PR);joo=r(eHr,"DebertaV2Tokenizer"),eHr.forEach(t),Doo=r(Zx," or "),BR=n(Zx,"A",{href:!0});var oHr=s(BR);Goo=r(oHr,"DebertaV2TokenizerFast"),oHr.forEach(t),Ooo=r(Zx," (DeBERTa-v2 model)"),Zx.forEach(t),Voo=i(S),Wn=n(S,"LI",{});var e$=s(Wn);Qte=n(e$,"STRONG",{});var rHr=s(Qte);Xoo=r(rHr,"distilbert"),rHr.forEach(t),zoo=r(e$," \u2014 "),IR=n(e$,"A",{href:!0});var tHr=s(IR);Woo=r(tHr,"DistilBertTokenizer"),tHr.forEach(t),Qoo=r(e$," or "),qR=n(e$,"A",{href:!0});var aHr=s(qR);Hoo=r(aHr,"DistilBertTokenizerFast"),aHr.forEach(t),Uoo=r(e$," (DistilBERT model)"),e$.forEach(t),Joo=i(S),Qn=n(S,"LI",{});var o$=s(Qn);Hte=n(o$,"STRONG",{});var nHr=s(Hte);Yoo=r(nHr,"dpr"),nHr.forEach(t),Koo=r(o$," \u2014 "),NR=n(o$,"A",{href:!0});var sHr=s(NR);Zoo=r(sHr,"DPRQuestionEncoderTokenizer"),sHr.forEach(t),ero=r(o$," or "),jR=n(o$,"A",{href:!0});var lHr=s(jR);oro=r(lHr,"DPRQuestionEncoderTokenizerFast"),lHr.forEach(t),rro=r(o$," (DPR model)"),o$.forEach(t),tro=i(S),Hn=n(S,"LI",{});var r$=s(Hn);Ute=n(r$,"STRONG",{});var iHr=s(Ute);aro=r(iHr,"electra"),iHr.forEach(t),nro=r(r$," \u2014 "),DR=n(r$,"A",{href:!0});var dHr=s(DR);sro=r(dHr,"ElectraTokenizer"),dHr.forEach(t),lro=r(r$," or "),GR=n(r$,"A",{href:!0});var cHr=s(GR);iro=r(cHr,"ElectraTokenizerFast"),cHr.forEach(t),dro=r(r$," (ELECTRA model)"),r$.forEach(t),cro=i(S),Pg=n(S,"LI",{});var Twe=s(Pg);Jte=n(Twe,"STRONG",{});var fHr=s(Jte);fro=r(fHr,"flaubert"),fHr.forEach(t),mro=r(Twe," \u2014 "),OR=n(Twe,"A",{href:!0});var mHr=s(OR);gro=r(mHr,"FlaubertTokenizer"),mHr.forEach(t),hro=r(Twe," (FlauBERT model)"),Twe.forEach(t),pro=i(S),Un=n(S,"LI",{});var t$=s(Un);Yte=n(t$,"STRONG",{});var gHr=s(Yte);uro=r(gHr,"fnet"),gHr.forEach(t),_ro=r(t$," \u2014 "),VR=n(t$,"A",{href:!0});var hHr=s(VR);bro=r(hHr,"FNetTokenizer"),hHr.forEach(t),vro=r(t$," or "),XR=n(t$,"A",{href:!0});var pHr=s(XR);Fro=r(pHr,"FNetTokenizerFast"),pHr.forEach(t),Tro=r(t$," (FNet model)"),t$.forEach(t),Mro=i(S),Bg=n(S,"LI",{});var Mwe=s(Bg);Kte=n(Mwe,"STRONG",{});var uHr=s(Kte);Ero=r(uHr,"fsmt"),uHr.forEach(t),Cro=r(Mwe," \u2014 "),zR=n(Mwe,"A",{href:!0});var _Hr=s(zR);wro=r(_Hr,"FSMTTokenizer"),_Hr.forEach(t),Aro=r(Mwe," (FairSeq Machine-Translation model)"),Mwe.forEach(t),yro=i(S),Jn=n(S,"LI",{});var a$=s(Jn);Zte=n(a$,"STRONG",{});var bHr=s(Zte);Lro=r(bHr,"funnel"),bHr.forEach(t),xro=r(a$," \u2014 "),WR=n(a$,"A",{href:!0});var vHr=s(WR);$ro=r(vHr,"FunnelTokenizer"),vHr.forEach(t),kro=r(a$," or "),QR=n(a$,"A",{href:!0});var FHr=s(QR);Sro=r(FHr,"FunnelTokenizerFast"),FHr.forEach(t),Rro=r(a$," (Funnel Transformer model)"),a$.forEach(t),Pro=i(S),Yn=n(S,"LI",{});var n$=s(Yn);eae=n(n$,"STRONG",{});var THr=s(eae);Bro=r(THr,"gpt2"),THr.forEach(t),Iro=r(n$," \u2014 "),HR=n(n$,"A",{href:!0});var MHr=s(HR);qro=r(MHr,"GPT2Tokenizer"),MHr.forEach(t),Nro=r(n$," or "),UR=n(n$,"A",{href:!0});var EHr=s(UR);jro=r(EHr,"GPT2TokenizerFast"),EHr.forEach(t),Dro=r(n$," (OpenAI GPT-2 model)"),n$.forEach(t),Gro=i(S),Kn=n(S,"LI",{});var s$=s(Kn);oae=n(s$,"STRONG",{});var CHr=s(oae);Oro=r(CHr,"gpt_neo"),CHr.forEach(t),Vro=r(s$," \u2014 "),JR=n(s$,"A",{href:!0});var wHr=s(JR);Xro=r(wHr,"GPT2Tokenizer"),wHr.forEach(t),zro=r(s$," or "),YR=n(s$,"A",{href:!0});var AHr=s(YR);Wro=r(AHr,"GPT2TokenizerFast"),AHr.forEach(t),Qro=r(s$," (GPT Neo model)"),s$.forEach(t),Hro=i(S),Ig=n(S,"LI",{});var Ewe=s(Ig);rae=n(Ewe,"STRONG",{});var yHr=s(rae);Uro=r(yHr,"gpt_neox"),yHr.forEach(t),Jro=r(Ewe," \u2014 "),KR=n(Ewe,"A",{href:!0});var LHr=s(KR);Yro=r(LHr,"GPTNeoXTokenizerFast"),LHr.forEach(t),Kro=r(Ewe," (GPT NeoX model)"),Ewe.forEach(t),Zro=i(S),Zn=n(S,"LI",{});var l$=s(Zn);tae=n(l$,"STRONG",{});var xHr=s(tae);eto=r(xHr,"gptj"),xHr.forEach(t),oto=r(l$," \u2014 "),ZR=n(l$,"A",{href:!0});var $Hr=s(ZR);rto=r($Hr,"GPT2Tokenizer"),$Hr.forEach(t),tto=r(l$," or "),eP=n(l$,"A",{href:!0});var kHr=s(eP);ato=r(kHr,"GPT2TokenizerFast"),kHr.forEach(t),nto=r(l$," (GPT-J model)"),l$.forEach(t),sto=i(S),es=n(S,"LI",{});var i$=s(es);aae=n(i$,"STRONG",{});var SHr=s(aae);lto=r(SHr,"herbert"),SHr.forEach(t),ito=r(i$," \u2014 "),oP=n(i$,"A",{href:!0});var RHr=s(oP);dto=r(RHr,"HerbertTokenizer"),RHr.forEach(t),cto=r(i$," or "),rP=n(i$,"A",{href:!0});var PHr=s(rP);fto=r(PHr,"HerbertTokenizerFast"),PHr.forEach(t),mto=r(i$," (HerBERT model)"),i$.forEach(t),gto=i(S),qg=n(S,"LI",{});var Cwe=s(qg);nae=n(Cwe,"STRONG",{});var BHr=s(nae);hto=r(BHr,"hubert"),BHr.forEach(t),pto=r(Cwe," \u2014 "),tP=n(Cwe,"A",{href:!0});var IHr=s(tP);uto=r(IHr,"Wav2Vec2CTCTokenizer"),IHr.forEach(t),_to=r(Cwe," (Hubert model)"),Cwe.forEach(t),bto=i(S),os=n(S,"LI",{});var d$=s(os);sae=n(d$,"STRONG",{});var qHr=s(sae);vto=r(qHr,"ibert"),qHr.forEach(t),Fto=r(d$," \u2014 "),aP=n(d$,"A",{href:!0});var NHr=s(aP);Tto=r(NHr,"RobertaTokenizer"),NHr.forEach(t),Mto=r(d$," or "),nP=n(d$,"A",{href:!0});var jHr=s(nP);Eto=r(jHr,"RobertaTokenizerFast"),jHr.forEach(t),Cto=r(d$," (I-BERT model)"),d$.forEach(t),wto=i(S),rs=n(S,"LI",{});var c$=s(rs);lae=n(c$,"STRONG",{});var DHr=s(lae);Ato=r(DHr,"layoutlm"),DHr.forEach(t),yto=r(c$," \u2014 "),sP=n(c$,"A",{href:!0});var GHr=s(sP);Lto=r(GHr,"LayoutLMTokenizer"),GHr.forEach(t),xto=r(c$," or "),lP=n(c$,"A",{href:!0});var OHr=s(lP);$to=r(OHr,"LayoutLMTokenizerFast"),OHr.forEach(t),kto=r(c$," (LayoutLM model)"),c$.forEach(t),Sto=i(S),ts=n(S,"LI",{});var f$=s(ts);iae=n(f$,"STRONG",{});var VHr=s(iae);Rto=r(VHr,"layoutlmv2"),VHr.forEach(t),Pto=r(f$," \u2014 "),iP=n(f$,"A",{href:!0});var XHr=s(iP);Bto=r(XHr,"LayoutLMv2Tokenizer"),XHr.forEach(t),Ito=r(f$," or "),dP=n(f$,"A",{href:!0});var zHr=s(dP);qto=r(zHr,"LayoutLMv2TokenizerFast"),zHr.forEach(t),Nto=r(f$," (LayoutLMv2 model)"),f$.forEach(t),jto=i(S),as=n(S,"LI",{});var m$=s(as);dae=n(m$,"STRONG",{});var WHr=s(dae);Dto=r(WHr,"layoutlmv3"),WHr.forEach(t),Gto=r(m$," \u2014 "),cP=n(m$,"A",{href:!0});var QHr=s(cP);Oto=r(QHr,"LayoutLMv3Tokenizer"),QHr.forEach(t),Vto=r(m$," or "),fP=n(m$,"A",{href:!0});var HHr=s(fP);Xto=r(HHr,"LayoutLMv3TokenizerFast"),HHr.forEach(t),zto=r(m$," (LayoutLMv3 model)"),m$.forEach(t),Wto=i(S),ns=n(S,"LI",{});var g$=s(ns);cae=n(g$,"STRONG",{});var UHr=s(cae);Qto=r(UHr,"layoutxlm"),UHr.forEach(t),Hto=r(g$," \u2014 "),mP=n(g$,"A",{href:!0});var JHr=s(mP);Uto=r(JHr,"LayoutXLMTokenizer"),JHr.forEach(t),Jto=r(g$," or "),gP=n(g$,"A",{href:!0});var YHr=s(gP);Yto=r(YHr,"LayoutXLMTokenizerFast"),YHr.forEach(t),Kto=r(g$," (LayoutXLM model)"),g$.forEach(t),Zto=i(S),ss=n(S,"LI",{});var h$=s(ss);fae=n(h$,"STRONG",{});var KHr=s(fae);eao=r(KHr,"led"),KHr.forEach(t),oao=r(h$," \u2014 "),hP=n(h$,"A",{href:!0});var ZHr=s(hP);rao=r(ZHr,"LEDTokenizer"),ZHr.forEach(t),tao=r(h$," or "),pP=n(h$,"A",{href:!0});var eUr=s(pP);aao=r(eUr,"LEDTokenizerFast"),eUr.forEach(t),nao=r(h$," (LED model)"),h$.forEach(t),sao=i(S),ls=n(S,"LI",{});var p$=s(ls);mae=n(p$,"STRONG",{});var oUr=s(mae);lao=r(oUr,"longformer"),oUr.forEach(t),iao=r(p$," \u2014 "),uP=n(p$,"A",{href:!0});var rUr=s(uP);dao=r(rUr,"LongformerTokenizer"),rUr.forEach(t),cao=r(p$," or "),_P=n(p$,"A",{href:!0});var tUr=s(_P);fao=r(tUr,"LongformerTokenizerFast"),tUr.forEach(t),mao=r(p$," (Longformer model)"),p$.forEach(t),gao=i(S),Ng=n(S,"LI",{});var wwe=s(Ng);gae=n(wwe,"STRONG",{});var aUr=s(gae);hao=r(aUr,"luke"),aUr.forEach(t),pao=r(wwe," \u2014 "),bP=n(wwe,"A",{href:!0});var nUr=s(bP);uao=r(nUr,"LukeTokenizer"),nUr.forEach(t),_ao=r(wwe," (LUKE model)"),wwe.forEach(t),bao=i(S),is=n(S,"LI",{});var u$=s(is);hae=n(u$,"STRONG",{});var sUr=s(hae);vao=r(sUr,"lxmert"),sUr.forEach(t),Fao=r(u$," \u2014 "),vP=n(u$,"A",{href:!0});var lUr=s(vP);Tao=r(lUr,"LxmertTokenizer"),lUr.forEach(t),Mao=r(u$," or "),FP=n(u$,"A",{href:!0});var iUr=s(FP);Eao=r(iUr,"LxmertTokenizerFast"),iUr.forEach(t),Cao=r(u$," (LXMERT model)"),u$.forEach(t),wao=i(S),jg=n(S,"LI",{});var Awe=s(jg);pae=n(Awe,"STRONG",{});var dUr=s(pae);Aao=r(dUr,"m2m_100"),dUr.forEach(t),yao=r(Awe," \u2014 "),TP=n(Awe,"A",{href:!0});var cUr=s(TP);Lao=r(cUr,"M2M100Tokenizer"),cUr.forEach(t),xao=r(Awe," (M2M100 model)"),Awe.forEach(t),$ao=i(S),Dg=n(S,"LI",{});var ywe=s(Dg);uae=n(ywe,"STRONG",{});var fUr=s(uae);kao=r(fUr,"marian"),fUr.forEach(t),Sao=r(ywe," \u2014 "),MP=n(ywe,"A",{href:!0});var mUr=s(MP);Rao=r(mUr,"MarianTokenizer"),mUr.forEach(t),Pao=r(ywe," (Marian model)"),ywe.forEach(t),Bao=i(S),ds=n(S,"LI",{});var _$=s(ds);_ae=n(_$,"STRONG",{});var gUr=s(_ae);Iao=r(gUr,"mbart"),gUr.forEach(t),qao=r(_$," \u2014 "),EP=n(_$,"A",{href:!0});var hUr=s(EP);Nao=r(hUr,"MBartTokenizer"),hUr.forEach(t),jao=r(_$," or "),CP=n(_$,"A",{href:!0});var pUr=s(CP);Dao=r(pUr,"MBartTokenizerFast"),pUr.forEach(t),Gao=r(_$," (mBART model)"),_$.forEach(t),Oao=i(S),cs=n(S,"LI",{});var b$=s(cs);bae=n(b$,"STRONG",{});var uUr=s(bae);Vao=r(uUr,"mbart50"),uUr.forEach(t),Xao=r(b$," \u2014 "),wP=n(b$,"A",{href:!0});var _Ur=s(wP);zao=r(_Ur,"MBart50Tokenizer"),_Ur.forEach(t),Wao=r(b$," or "),AP=n(b$,"A",{href:!0});var bUr=s(AP);Qao=r(bUr,"MBart50TokenizerFast"),bUr.forEach(t),Hao=r(b$," (mBART-50 model)"),b$.forEach(t),Uao=i(S),fs=n(S,"LI",{});var v$=s(fs);vae=n(v$,"STRONG",{});var vUr=s(vae);Jao=r(vUr,"megatron-bert"),vUr.forEach(t),Yao=r(v$," \u2014 "),yP=n(v$,"A",{href:!0});var FUr=s(yP);Kao=r(FUr,"BertTokenizer"),FUr.forEach(t),Zao=r(v$," or "),LP=n(v$,"A",{href:!0});var TUr=s(LP);eno=r(TUr,"BertTokenizerFast"),TUr.forEach(t),ono=r(v$," (MegatronBert model)"),v$.forEach(t),rno=i(S),Gg=n(S,"LI",{});var Lwe=s(Gg);Fae=n(Lwe,"STRONG",{});var MUr=s(Fae);tno=r(MUr,"mluke"),MUr.forEach(t),ano=r(Lwe," \u2014 "),xP=n(Lwe,"A",{href:!0});var EUr=s(xP);nno=r(EUr,"MLukeTokenizer"),EUr.forEach(t),sno=r(Lwe," (mLUKE model)"),Lwe.forEach(t),lno=i(S),ms=n(S,"LI",{});var F$=s(ms);Tae=n(F$,"STRONG",{});var CUr=s(Tae);ino=r(CUr,"mobilebert"),CUr.forEach(t),dno=r(F$," \u2014 "),$P=n(F$,"A",{href:!0});var wUr=s($P);cno=r(wUr,"MobileBertTokenizer"),wUr.forEach(t),fno=r(F$," or "),kP=n(F$,"A",{href:!0});var AUr=s(kP);mno=r(AUr,"MobileBertTokenizerFast"),AUr.forEach(t),gno=r(F$," (MobileBERT model)"),F$.forEach(t),hno=i(S),gs=n(S,"LI",{});var T$=s(gs);Mae=n(T$,"STRONG",{});var yUr=s(Mae);pno=r(yUr,"mpnet"),yUr.forEach(t),uno=r(T$," \u2014 "),SP=n(T$,"A",{href:!0});var LUr=s(SP);_no=r(LUr,"MPNetTokenizer"),LUr.forEach(t),bno=r(T$," or "),RP=n(T$,"A",{href:!0});var xUr=s(RP);vno=r(xUr,"MPNetTokenizerFast"),xUr.forEach(t),Fno=r(T$," (MPNet model)"),T$.forEach(t),Tno=i(S),hs=n(S,"LI",{});var M$=s(hs);Eae=n(M$,"STRONG",{});var $Ur=s(Eae);Mno=r($Ur,"mt5"),$Ur.forEach(t),Eno=r(M$," \u2014 "),PP=n(M$,"A",{href:!0});var kUr=s(PP);Cno=r(kUr,"MT5Tokenizer"),kUr.forEach(t),wno=r(M$," or "),BP=n(M$,"A",{href:!0});var SUr=s(BP);Ano=r(SUr,"MT5TokenizerFast"),SUr.forEach(t),yno=r(M$," (mT5 model)"),M$.forEach(t),Lno=i(S),ps=n(S,"LI",{});var E$=s(ps);Cae=n(E$,"STRONG",{});var RUr=s(Cae);xno=r(RUr,"nystromformer"),RUr.forEach(t),$no=r(E$," \u2014 "),IP=n(E$,"A",{href:!0});var PUr=s(IP);kno=r(PUr,"AlbertTokenizer"),PUr.forEach(t),Sno=r(E$," or "),qP=n(E$,"A",{href:!0});var BUr=s(qP);Rno=r(BUr,"AlbertTokenizerFast"),BUr.forEach(t),Pno=r(E$," (Nystromformer model)"),E$.forEach(t),Bno=i(S),us=n(S,"LI",{});var C$=s(us);wae=n(C$,"STRONG",{});var IUr=s(wae);Ino=r(IUr,"openai-gpt"),IUr.forEach(t),qno=r(C$," \u2014 "),NP=n(C$,"A",{href:!0});var qUr=s(NP);Nno=r(qUr,"OpenAIGPTTokenizer"),qUr.forEach(t),jno=r(C$," or "),jP=n(C$,"A",{href:!0});var NUr=s(jP);Dno=r(NUr,"OpenAIGPTTokenizerFast"),NUr.forEach(t),Gno=r(C$," (OpenAI GPT model)"),C$.forEach(t),Ono=i(S),Og=n(S,"LI",{});var xwe=s(Og);Aae=n(xwe,"STRONG",{});var jUr=s(Aae);Vno=r(jUr,"opt"),jUr.forEach(t),Xno=r(xwe," \u2014 "),DP=n(xwe,"A",{href:!0});var DUr=s(DP);zno=r(DUr,"GPT2Tokenizer"),DUr.forEach(t),Wno=r(xwe," (OPT model)"),xwe.forEach(t),Qno=i(S),_s=n(S,"LI",{});var w$=s(_s);yae=n(w$,"STRONG",{});var GUr=s(yae);Hno=r(GUr,"pegasus"),GUr.forEach(t),Uno=r(w$," \u2014 "),GP=n(w$,"A",{href:!0});var OUr=s(GP);Jno=r(OUr,"PegasusTokenizer"),OUr.forEach(t),Yno=r(w$," or "),OP=n(w$,"A",{href:!0});var VUr=s(OP);Kno=r(VUr,"PegasusTokenizerFast"),VUr.forEach(t),Zno=r(w$," (Pegasus model)"),w$.forEach(t),eso=i(S),Vg=n(S,"LI",{});var $we=s(Vg);Lae=n($we,"STRONG",{});var XUr=s(Lae);oso=r(XUr,"perceiver"),XUr.forEach(t),rso=r($we," \u2014 "),VP=n($we,"A",{href:!0});var zUr=s(VP);tso=r(zUr,"PerceiverTokenizer"),zUr.forEach(t),aso=r($we," (Perceiver model)"),$we.forEach(t),nso=i(S),Xg=n(S,"LI",{});var kwe=s(Xg);xae=n(kwe,"STRONG",{});var WUr=s(xae);sso=r(WUr,"phobert"),WUr.forEach(t),lso=r(kwe," \u2014 "),XP=n(kwe,"A",{href:!0});var QUr=s(XP);iso=r(QUr,"PhobertTokenizer"),QUr.forEach(t),dso=r(kwe," (PhoBERT model)"),kwe.forEach(t),cso=i(S),zg=n(S,"LI",{});var Swe=s(zg);$ae=n(Swe,"STRONG",{});var HUr=s($ae);fso=r(HUr,"plbart"),HUr.forEach(t),mso=r(Swe," \u2014 "),zP=n(Swe,"A",{href:!0});var UUr=s(zP);gso=r(UUr,"PLBartTokenizer"),UUr.forEach(t),hso=r(Swe," (PLBart model)"),Swe.forEach(t),pso=i(S),Wg=n(S,"LI",{});var Rwe=s(Wg);kae=n(Rwe,"STRONG",{});var JUr=s(kae);uso=r(JUr,"prophetnet"),JUr.forEach(t),_so=r(Rwe," \u2014 "),WP=n(Rwe,"A",{href:!0});var YUr=s(WP);bso=r(YUr,"ProphetNetTokenizer"),YUr.forEach(t),vso=r(Rwe," (ProphetNet model)"),Rwe.forEach(t),Fso=i(S),bs=n(S,"LI",{});var A$=s(bs);Sae=n(A$,"STRONG",{});var KUr=s(Sae);Tso=r(KUr,"qdqbert"),KUr.forEach(t),Mso=r(A$," \u2014 "),QP=n(A$,"A",{href:!0});var ZUr=s(QP);Eso=r(ZUr,"BertTokenizer"),ZUr.forEach(t),Cso=r(A$," or "),HP=n(A$,"A",{href:!0});var eJr=s(HP);wso=r(eJr,"BertTokenizerFast"),eJr.forEach(t),Aso=r(A$," (QDQBert model)"),A$.forEach(t),yso=i(S),Qg=n(S,"LI",{});var Pwe=s(Qg);Rae=n(Pwe,"STRONG",{});var oJr=s(Rae);Lso=r(oJr,"rag"),oJr.forEach(t),xso=r(Pwe," \u2014 "),UP=n(Pwe,"A",{href:!0});var rJr=s(UP);$so=r(rJr,"RagTokenizer"),rJr.forEach(t),kso=r(Pwe," (RAG model)"),Pwe.forEach(t),Sso=i(S),vs=n(S,"LI",{});var y$=s(vs);Pae=n(y$,"STRONG",{});var tJr=s(Pae);Rso=r(tJr,"realm"),tJr.forEach(t),Pso=r(y$," \u2014 "),JP=n(y$,"A",{href:!0});var aJr=s(JP);Bso=r(aJr,"RealmTokenizer"),aJr.forEach(t),Iso=r(y$," or "),YP=n(y$,"A",{href:!0});var nJr=s(YP);qso=r(nJr,"RealmTokenizerFast"),nJr.forEach(t),Nso=r(y$," (Realm model)"),y$.forEach(t),jso=i(S),Fs=n(S,"LI",{});var L$=s(Fs);Bae=n(L$,"STRONG",{});var sJr=s(Bae);Dso=r(sJr,"reformer"),sJr.forEach(t),Gso=r(L$," \u2014 "),KP=n(L$,"A",{href:!0});var lJr=s(KP);Oso=r(lJr,"ReformerTokenizer"),lJr.forEach(t),Vso=r(L$," or "),ZP=n(L$,"A",{href:!0});var iJr=s(ZP);Xso=r(iJr,"ReformerTokenizerFast"),iJr.forEach(t),zso=r(L$," (Reformer model)"),L$.forEach(t),Wso=i(S),Ts=n(S,"LI",{});var x$=s(Ts);Iae=n(x$,"STRONG",{});var dJr=s(Iae);Qso=r(dJr,"rembert"),dJr.forEach(t),Hso=r(x$," \u2014 "),eB=n(x$,"A",{href:!0});var cJr=s(eB);Uso=r(cJr,"RemBertTokenizer"),cJr.forEach(t),Jso=r(x$," or "),oB=n(x$,"A",{href:!0});var fJr=s(oB);Yso=r(fJr,"RemBertTokenizerFast"),fJr.forEach(t),Kso=r(x$," (RemBERT model)"),x$.forEach(t),Zso=i(S),Ms=n(S,"LI",{});var $$=s(Ms);qae=n($$,"STRONG",{});var mJr=s(qae);elo=r(mJr,"retribert"),mJr.forEach(t),olo=r($$," \u2014 "),rB=n($$,"A",{href:!0});var gJr=s(rB);rlo=r(gJr,"RetriBertTokenizer"),gJr.forEach(t),tlo=r($$," or "),tB=n($$,"A",{href:!0});var hJr=s(tB);alo=r(hJr,"RetriBertTokenizerFast"),hJr.forEach(t),nlo=r($$," (RetriBERT model)"),$$.forEach(t),slo=i(S),Es=n(S,"LI",{});var k$=s(Es);Nae=n(k$,"STRONG",{});var pJr=s(Nae);llo=r(pJr,"roberta"),pJr.forEach(t),ilo=r(k$," \u2014 "),aB=n(k$,"A",{href:!0});var uJr=s(aB);dlo=r(uJr,"RobertaTokenizer"),uJr.forEach(t),clo=r(k$," or "),nB=n(k$,"A",{href:!0});var _Jr=s(nB);flo=r(_Jr,"RobertaTokenizerFast"),_Jr.forEach(t),mlo=r(k$," (RoBERTa model)"),k$.forEach(t),glo=i(S),Cs=n(S,"LI",{});var S$=s(Cs);jae=n(S$,"STRONG",{});var bJr=s(jae);hlo=r(bJr,"roformer"),bJr.forEach(t),plo=r(S$," \u2014 "),sB=n(S$,"A",{href:!0});var vJr=s(sB);ulo=r(vJr,"RoFormerTokenizer"),vJr.forEach(t),_lo=r(S$," or "),lB=n(S$,"A",{href:!0});var FJr=s(lB);blo=r(FJr,"RoFormerTokenizerFast"),FJr.forEach(t),vlo=r(S$," (RoFormer model)"),S$.forEach(t),Flo=i(S),Hg=n(S,"LI",{});var Bwe=s(Hg);Dae=n(Bwe,"STRONG",{});var TJr=s(Dae);Tlo=r(TJr,"speech_to_text"),TJr.forEach(t),Mlo=r(Bwe," \u2014 "),iB=n(Bwe,"A",{href:!0});var MJr=s(iB);Elo=r(MJr,"Speech2TextTokenizer"),MJr.forEach(t),Clo=r(Bwe," (Speech2Text model)"),Bwe.forEach(t),wlo=i(S),Ug=n(S,"LI",{});var Iwe=s(Ug);Gae=n(Iwe,"STRONG",{});var EJr=s(Gae);Alo=r(EJr,"speech_to_text_2"),EJr.forEach(t),ylo=r(Iwe," \u2014 "),dB=n(Iwe,"A",{href:!0});var CJr=s(dB);Llo=r(CJr,"Speech2Text2Tokenizer"),CJr.forEach(t),xlo=r(Iwe," (Speech2Text2 model)"),Iwe.forEach(t),$lo=i(S),ws=n(S,"LI",{});var R$=s(ws);Oae=n(R$,"STRONG",{});var wJr=s(Oae);klo=r(wJr,"splinter"),wJr.forEach(t),Slo=r(R$," \u2014 "),cB=n(R$,"A",{href:!0});var AJr=s(cB);Rlo=r(AJr,"SplinterTokenizer"),AJr.forEach(t),Plo=r(R$," or "),fB=n(R$,"A",{href:!0});var yJr=s(fB);Blo=r(yJr,"SplinterTokenizerFast"),yJr.forEach(t),Ilo=r(R$," (Splinter model)"),R$.forEach(t),qlo=i(S),As=n(S,"LI",{});var P$=s(As);Vae=n(P$,"STRONG",{});var LJr=s(Vae);Nlo=r(LJr,"squeezebert"),LJr.forEach(t),jlo=r(P$," \u2014 "),mB=n(P$,"A",{href:!0});var xJr=s(mB);Dlo=r(xJr,"SqueezeBertTokenizer"),xJr.forEach(t),Glo=r(P$," or "),gB=n(P$,"A",{href:!0});var $Jr=s(gB);Olo=r($Jr,"SqueezeBertTokenizerFast"),$Jr.forEach(t),Vlo=r(P$," (SqueezeBERT model)"),P$.forEach(t),Xlo=i(S),ys=n(S,"LI",{});var B$=s(ys);Xae=n(B$,"STRONG",{});var kJr=s(Xae);zlo=r(kJr,"t5"),kJr.forEach(t),Wlo=r(B$," \u2014 "),hB=n(B$,"A",{href:!0});var SJr=s(hB);Qlo=r(SJr,"T5Tokenizer"),SJr.forEach(t),Hlo=r(B$," or "),pB=n(B$,"A",{href:!0});var RJr=s(pB);Ulo=r(RJr,"T5TokenizerFast"),RJr.forEach(t),Jlo=r(B$," (T5 model)"),B$.forEach(t),Ylo=i(S),Jg=n(S,"LI",{});var qwe=s(Jg);zae=n(qwe,"STRONG",{});var PJr=s(zae);Klo=r(PJr,"tapas"),PJr.forEach(t),Zlo=r(qwe," \u2014 "),uB=n(qwe,"A",{href:!0});var BJr=s(uB);eio=r(BJr,"TapasTokenizer"),BJr.forEach(t),oio=r(qwe," (TAPAS model)"),qwe.forEach(t),rio=i(S),Yg=n(S,"LI",{});var Nwe=s(Yg);Wae=n(Nwe,"STRONG",{});var IJr=s(Wae);tio=r(IJr,"tapex"),IJr.forEach(t),aio=r(Nwe," \u2014 "),_B=n(Nwe,"A",{href:!0});var qJr=s(_B);nio=r(qJr,"TapexTokenizer"),qJr.forEach(t),sio=r(Nwe," (TAPEX model)"),Nwe.forEach(t),lio=i(S),Kg=n(S,"LI",{});var jwe=s(Kg);Qae=n(jwe,"STRONG",{});var NJr=s(Qae);iio=r(NJr,"transfo-xl"),NJr.forEach(t),dio=r(jwe," \u2014 "),bB=n(jwe,"A",{href:!0});var jJr=s(bB);cio=r(jJr,"TransfoXLTokenizer"),jJr.forEach(t),fio=r(jwe," (Transformer-XL model)"),jwe.forEach(t),mio=i(S),Ls=n(S,"LI",{});var I$=s(Ls);Hae=n(I$,"STRONG",{});var DJr=s(Hae);gio=r(DJr,"visual_bert"),DJr.forEach(t),hio=r(I$," \u2014 "),vB=n(I$,"A",{href:!0});var GJr=s(vB);pio=r(GJr,"BertTokenizer"),GJr.forEach(t),uio=r(I$," or "),FB=n(I$,"A",{href:!0});var OJr=s(FB);_io=r(OJr,"BertTokenizerFast"),OJr.forEach(t),bio=r(I$," (VisualBert model)"),I$.forEach(t),vio=i(S),Zg=n(S,"LI",{});var Dwe=s(Zg);Uae=n(Dwe,"STRONG",{});var VJr=s(Uae);Fio=r(VJr,"wav2vec2"),VJr.forEach(t),Tio=r(Dwe," \u2014 "),TB=n(Dwe,"A",{href:!0});var XJr=s(TB);Mio=r(XJr,"Wav2Vec2CTCTokenizer"),XJr.forEach(t),Eio=r(Dwe," (Wav2Vec2 model)"),Dwe.forEach(t),Cio=i(S),eh=n(S,"LI",{});var Gwe=s(eh);Jae=n(Gwe,"STRONG",{});var zJr=s(Jae);wio=r(zJr,"wav2vec2-conformer"),zJr.forEach(t),Aio=r(Gwe," \u2014 "),MB=n(Gwe,"A",{href:!0});var WJr=s(MB);yio=r(WJr,"Wav2Vec2CTCTokenizer"),WJr.forEach(t),Lio=r(Gwe," (Wav2Vec2-Conformer model)"),Gwe.forEach(t),xio=i(S),oh=n(S,"LI",{});var Owe=s(oh);Yae=n(Owe,"STRONG",{});var QJr=s(Yae);$io=r(QJr,"wav2vec2_phoneme"),QJr.forEach(t),kio=r(Owe," \u2014 "),EB=n(Owe,"A",{href:!0});var HJr=s(EB);Sio=r(HJr,"Wav2Vec2PhonemeCTCTokenizer"),HJr.forEach(t),Rio=r(Owe," (Wav2Vec2Phoneme model)"),Owe.forEach(t),Pio=i(S),xs=n(S,"LI",{});var q$=s(xs);Kae=n(q$,"STRONG",{});var UJr=s(Kae);Bio=r(UJr,"xglm"),UJr.forEach(t),Iio=r(q$," \u2014 "),CB=n(q$,"A",{href:!0});var JJr=s(CB);qio=r(JJr,"XGLMTokenizer"),JJr.forEach(t),Nio=r(q$," or "),wB=n(q$,"A",{href:!0});var YJr=s(wB);jio=r(YJr,"XGLMTokenizerFast"),YJr.forEach(t),Dio=r(q$," (XGLM model)"),q$.forEach(t),Gio=i(S),rh=n(S,"LI",{});var Vwe=s(rh);Zae=n(Vwe,"STRONG",{});var KJr=s(Zae);Oio=r(KJr,"xlm"),KJr.forEach(t),Vio=r(Vwe," \u2014 "),AB=n(Vwe,"A",{href:!0});var ZJr=s(AB);Xio=r(ZJr,"XLMTokenizer"),ZJr.forEach(t),zio=r(Vwe," (XLM model)"),Vwe.forEach(t),Wio=i(S),th=n(S,"LI",{});var Xwe=s(th);ene=n(Xwe,"STRONG",{});var eYr=s(ene);Qio=r(eYr,"xlm-prophetnet"),eYr.forEach(t),Hio=r(Xwe," \u2014 "),yB=n(Xwe,"A",{href:!0});var oYr=s(yB);Uio=r(oYr,"XLMProphetNetTokenizer"),oYr.forEach(t),Jio=r(Xwe," (XLMProphetNet model)"),Xwe.forEach(t),Yio=i(S),$s=n(S,"LI",{});var N$=s($s);one=n(N$,"STRONG",{});var rYr=s(one);Kio=r(rYr,"xlm-roberta"),rYr.forEach(t),Zio=r(N$," \u2014 "),LB=n(N$,"A",{href:!0});var tYr=s(LB);edo=r(tYr,"XLMRobertaTokenizer"),tYr.forEach(t),odo=r(N$," or "),xB=n(N$,"A",{href:!0});var aYr=s(xB);rdo=r(aYr,"XLMRobertaTokenizerFast"),aYr.forEach(t),tdo=r(N$," (XLM-RoBERTa model)"),N$.forEach(t),ado=i(S),ks=n(S,"LI",{});var j$=s(ks);rne=n(j$,"STRONG",{});var nYr=s(rne);ndo=r(nYr,"xlm-roberta-xl"),nYr.forEach(t),sdo=r(j$," \u2014 "),$B=n(j$,"A",{href:!0});var sYr=s($B);ldo=r(sYr,"RobertaTokenizer"),sYr.forEach(t),ido=r(j$," or "),kB=n(j$,"A",{href:!0});var lYr=s(kB);ddo=r(lYr,"RobertaTokenizerFast"),lYr.forEach(t),cdo=r(j$," (XLM-RoBERTa-XL model)"),j$.forEach(t),fdo=i(S),Ss=n(S,"LI",{});var D$=s(Ss);tne=n(D$,"STRONG",{});var iYr=s(tne);mdo=r(iYr,"xlnet"),iYr.forEach(t),gdo=r(D$," \u2014 "),SB=n(D$,"A",{href:!0});var dYr=s(SB);hdo=r(dYr,"XLNetTokenizer"),dYr.forEach(t),pdo=r(D$," or "),RB=n(D$,"A",{href:!0});var cYr=s(RB);udo=r(cYr,"XLNetTokenizerFast"),cYr.forEach(t),_do=r(D$," (XLNet model)"),D$.forEach(t),bdo=i(S),Rs=n(S,"LI",{});var G$=s(Rs);ane=n(G$,"STRONG",{});var fYr=s(ane);vdo=r(fYr,"yoso"),fYr.forEach(t),Fdo=r(G$," \u2014 "),PB=n(G$,"A",{href:!0});var mYr=s(PB);Tdo=r(mYr,"AlbertTokenizer"),mYr.forEach(t),Mdo=r(G$," or "),BB=n(G$,"A",{href:!0});var gYr=s(BB);Edo=r(gYr,"AlbertTokenizerFast"),gYr.forEach(t),Cdo=r(G$," (YOSO model)"),G$.forEach(t),S.forEach(t),wdo=i(Ns),T(ah.$$.fragment,Ns),Ns.forEach(t),Ado=i(qs),nh=n(qs,"DIV",{class:!0});var sDe=s(nh);T(Dy.$$.fragment,sDe),ydo=i(sDe),nne=n(sDe,"P",{});var hYr=s(nne);Ldo=r(hYr,"Register a new tokenizer in this mapping."),hYr.forEach(t),sDe.forEach(t),qs.forEach(t),lNe=i(f),Mi=n(f,"H2",{class:!0});var lDe=s(Mi);sh=n(lDe,"A",{id:!0,class:!0,href:!0});var pYr=s(sh);sne=n(pYr,"SPAN",{});var uYr=s(sne);T(Gy.$$.fragment,uYr),uYr.forEach(t),pYr.forEach(t),xdo=i(lDe),lne=n(lDe,"SPAN",{});var _Yr=s(lne);$do=r(_Yr,"AutoFeatureExtractor"),_Yr.forEach(t),lDe.forEach(t),iNe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(Oy.$$.fragment,js),kdo=i(js),Vy=n(js,"P",{});var iDe=s(Vy);Sdo=r(iDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IB=n(iDe,"A",{href:!0});var bYr=s(IB);Rdo=r(bYr,"AutoFeatureExtractor.from_pretrained()"),bYr.forEach(t),Pdo=r(iDe," class method."),iDe.forEach(t),Bdo=i(js),Xy=n(js,"P",{});var dDe=s(Xy);Ido=r(dDe,"This class cannot be instantiated directly using "),ine=n(dDe,"CODE",{});var vYr=s(ine);qdo=r(vYr,"__init__()"),vYr.forEach(t),Ndo=r(dDe," (throws an error)."),dDe.forEach(t),jdo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(zy.$$.fragment,Zt),Ddo=i(Zt),dne=n(Zt,"P",{});var FYr=s(dne);Gdo=r(FYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),FYr.forEach(t),Odo=i(Zt),ya=n(Zt,"P",{});var $w=s(ya);Vdo=r($w,"The feature extractor class to instantiate is selected based on the "),cne=n($w,"CODE",{});var TYr=s(cne);Xdo=r(TYr,"model_type"),TYr.forEach(t),zdo=r($w,` property of the config object
(either passed as an argument or loaded from `),fne=n($w,"CODE",{});var MYr=s(fne);Wdo=r(MYr,"pretrained_model_name_or_path"),MYr.forEach(t),Qdo=r($w,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),mne=n($w,"CODE",{});var EYr=s(mne);Hdo=r(EYr,"pretrained_model_name_or_path"),EYr.forEach(t),Udo=r($w,":"),$w.forEach(t),Jdo=i(Zt),Y=n(Zt,"UL",{});var Z=s(Y);lh=n(Z,"LI",{});var zwe=s(lh);gne=n(zwe,"STRONG",{});var CYr=s(gne);Ydo=r(CYr,"beit"),CYr.forEach(t),Kdo=r(zwe," \u2014 "),qB=n(zwe,"A",{href:!0});var wYr=s(qB);Zdo=r(wYr,"BeitFeatureExtractor"),wYr.forEach(t),eco=r(zwe," (BEiT model)"),zwe.forEach(t),oco=i(Z),ih=n(Z,"LI",{});var Wwe=s(ih);hne=n(Wwe,"STRONG",{});var AYr=s(hne);rco=r(AYr,"clip"),AYr.forEach(t),tco=r(Wwe," \u2014 "),NB=n(Wwe,"A",{href:!0});var yYr=s(NB);aco=r(yYr,"CLIPFeatureExtractor"),yYr.forEach(t),nco=r(Wwe," (CLIP model)"),Wwe.forEach(t),sco=i(Z),dh=n(Z,"LI",{});var Qwe=s(dh);pne=n(Qwe,"STRONG",{});var LYr=s(pne);lco=r(LYr,"convnext"),LYr.forEach(t),ico=r(Qwe," \u2014 "),jB=n(Qwe,"A",{href:!0});var xYr=s(jB);dco=r(xYr,"ConvNextFeatureExtractor"),xYr.forEach(t),cco=r(Qwe," (ConvNext model)"),Qwe.forEach(t),fco=i(Z),ch=n(Z,"LI",{});var Hwe=s(ch);une=n(Hwe,"STRONG",{});var $Yr=s(une);mco=r($Yr,"cvt"),$Yr.forEach(t),gco=r(Hwe," \u2014 "),DB=n(Hwe,"A",{href:!0});var kYr=s(DB);hco=r(kYr,"ConvNextFeatureExtractor"),kYr.forEach(t),pco=r(Hwe," (CvT model)"),Hwe.forEach(t),uco=i(Z),fh=n(Z,"LI",{});var Uwe=s(fh);_ne=n(Uwe,"STRONG",{});var SYr=s(_ne);_co=r(SYr,"data2vec-audio"),SYr.forEach(t),bco=r(Uwe," \u2014 "),GB=n(Uwe,"A",{href:!0});var RYr=s(GB);vco=r(RYr,"Wav2Vec2FeatureExtractor"),RYr.forEach(t),Fco=r(Uwe," (Data2VecAudio model)"),Uwe.forEach(t),Tco=i(Z),mh=n(Z,"LI",{});var Jwe=s(mh);bne=n(Jwe,"STRONG",{});var PYr=s(bne);Mco=r(PYr,"data2vec-vision"),PYr.forEach(t),Eco=r(Jwe," \u2014 "),OB=n(Jwe,"A",{href:!0});var BYr=s(OB);Cco=r(BYr,"BeitFeatureExtractor"),BYr.forEach(t),wco=r(Jwe," (Data2VecVision model)"),Jwe.forEach(t),Aco=i(Z),gh=n(Z,"LI",{});var Ywe=s(gh);vne=n(Ywe,"STRONG",{});var IYr=s(vne);yco=r(IYr,"deit"),IYr.forEach(t),Lco=r(Ywe," \u2014 "),VB=n(Ywe,"A",{href:!0});var qYr=s(VB);xco=r(qYr,"DeiTFeatureExtractor"),qYr.forEach(t),$co=r(Ywe," (DeiT model)"),Ywe.forEach(t),kco=i(Z),hh=n(Z,"LI",{});var Kwe=s(hh);Fne=n(Kwe,"STRONG",{});var NYr=s(Fne);Sco=r(NYr,"detr"),NYr.forEach(t),Rco=r(Kwe," \u2014 "),XB=n(Kwe,"A",{href:!0});var jYr=s(XB);Pco=r(jYr,"DetrFeatureExtractor"),jYr.forEach(t),Bco=r(Kwe," (DETR model)"),Kwe.forEach(t),Ico=i(Z),ph=n(Z,"LI",{});var Zwe=s(ph);Tne=n(Zwe,"STRONG",{});var DYr=s(Tne);qco=r(DYr,"dpt"),DYr.forEach(t),Nco=r(Zwe," \u2014 "),zB=n(Zwe,"A",{href:!0});var GYr=s(zB);jco=r(GYr,"DPTFeatureExtractor"),GYr.forEach(t),Dco=r(Zwe," (DPT model)"),Zwe.forEach(t),Gco=i(Z),uh=n(Z,"LI",{});var eAe=s(uh);Mne=n(eAe,"STRONG",{});var OYr=s(Mne);Oco=r(OYr,"flava"),OYr.forEach(t),Vco=r(eAe," \u2014 "),WB=n(eAe,"A",{href:!0});var VYr=s(WB);Xco=r(VYr,"FlavaFeatureExtractor"),VYr.forEach(t),zco=r(eAe," (Flava model)"),eAe.forEach(t),Wco=i(Z),_h=n(Z,"LI",{});var oAe=s(_h);Ene=n(oAe,"STRONG",{});var XYr=s(Ene);Qco=r(XYr,"glpn"),XYr.forEach(t),Hco=r(oAe," \u2014 "),QB=n(oAe,"A",{href:!0});var zYr=s(QB);Uco=r(zYr,"GLPNFeatureExtractor"),zYr.forEach(t),Jco=r(oAe," (GLPN model)"),oAe.forEach(t),Yco=i(Z),bh=n(Z,"LI",{});var rAe=s(bh);Cne=n(rAe,"STRONG",{});var WYr=s(Cne);Kco=r(WYr,"hubert"),WYr.forEach(t),Zco=r(rAe," \u2014 "),HB=n(rAe,"A",{href:!0});var QYr=s(HB);efo=r(QYr,"Wav2Vec2FeatureExtractor"),QYr.forEach(t),ofo=r(rAe," (Hubert model)"),rAe.forEach(t),rfo=i(Z),vh=n(Z,"LI",{});var tAe=s(vh);wne=n(tAe,"STRONG",{});var HYr=s(wne);tfo=r(HYr,"imagegpt"),HYr.forEach(t),afo=r(tAe," \u2014 "),UB=n(tAe,"A",{href:!0});var UYr=s(UB);nfo=r(UYr,"ImageGPTFeatureExtractor"),UYr.forEach(t),sfo=r(tAe," (ImageGPT model)"),tAe.forEach(t),lfo=i(Z),Fh=n(Z,"LI",{});var aAe=s(Fh);Ane=n(aAe,"STRONG",{});var JYr=s(Ane);ifo=r(JYr,"layoutlmv2"),JYr.forEach(t),dfo=r(aAe," \u2014 "),JB=n(aAe,"A",{href:!0});var YYr=s(JB);cfo=r(YYr,"LayoutLMv2FeatureExtractor"),YYr.forEach(t),ffo=r(aAe," (LayoutLMv2 model)"),aAe.forEach(t),mfo=i(Z),Th=n(Z,"LI",{});var nAe=s(Th);yne=n(nAe,"STRONG",{});var KYr=s(yne);gfo=r(KYr,"layoutlmv3"),KYr.forEach(t),hfo=r(nAe," \u2014 "),YB=n(nAe,"A",{href:!0});var ZYr=s(YB);pfo=r(ZYr,"LayoutLMv3FeatureExtractor"),ZYr.forEach(t),ufo=r(nAe," (LayoutLMv3 model)"),nAe.forEach(t),_fo=i(Z),Mh=n(Z,"LI",{});var sAe=s(Mh);Lne=n(sAe,"STRONG",{});var eKr=s(Lne);bfo=r(eKr,"maskformer"),eKr.forEach(t),vfo=r(sAe," \u2014 "),KB=n(sAe,"A",{href:!0});var oKr=s(KB);Ffo=r(oKr,"MaskFormerFeatureExtractor"),oKr.forEach(t),Tfo=r(sAe," (MaskFormer model)"),sAe.forEach(t),Mfo=i(Z),Eh=n(Z,"LI",{});var lAe=s(Eh);xne=n(lAe,"STRONG",{});var rKr=s(xne);Efo=r(rKr,"perceiver"),rKr.forEach(t),Cfo=r(lAe," \u2014 "),ZB=n(lAe,"A",{href:!0});var tKr=s(ZB);wfo=r(tKr,"PerceiverFeatureExtractor"),tKr.forEach(t),Afo=r(lAe," (Perceiver model)"),lAe.forEach(t),yfo=i(Z),Ch=n(Z,"LI",{});var iAe=s(Ch);$ne=n(iAe,"STRONG",{});var aKr=s($ne);Lfo=r(aKr,"poolformer"),aKr.forEach(t),xfo=r(iAe," \u2014 "),eI=n(iAe,"A",{href:!0});var nKr=s(eI);$fo=r(nKr,"PoolFormerFeatureExtractor"),nKr.forEach(t),kfo=r(iAe," (PoolFormer model)"),iAe.forEach(t),Sfo=i(Z),wh=n(Z,"LI",{});var dAe=s(wh);kne=n(dAe,"STRONG",{});var sKr=s(kne);Rfo=r(sKr,"regnet"),sKr.forEach(t),Pfo=r(dAe," \u2014 "),oI=n(dAe,"A",{href:!0});var lKr=s(oI);Bfo=r(lKr,"ConvNextFeatureExtractor"),lKr.forEach(t),Ifo=r(dAe," (RegNet model)"),dAe.forEach(t),qfo=i(Z),Ah=n(Z,"LI",{});var cAe=s(Ah);Sne=n(cAe,"STRONG",{});var iKr=s(Sne);Nfo=r(iKr,"resnet"),iKr.forEach(t),jfo=r(cAe," \u2014 "),rI=n(cAe,"A",{href:!0});var dKr=s(rI);Dfo=r(dKr,"ConvNextFeatureExtractor"),dKr.forEach(t),Gfo=r(cAe," (ResNet model)"),cAe.forEach(t),Ofo=i(Z),yh=n(Z,"LI",{});var fAe=s(yh);Rne=n(fAe,"STRONG",{});var cKr=s(Rne);Vfo=r(cKr,"segformer"),cKr.forEach(t),Xfo=r(fAe," \u2014 "),tI=n(fAe,"A",{href:!0});var fKr=s(tI);zfo=r(fKr,"SegformerFeatureExtractor"),fKr.forEach(t),Wfo=r(fAe," (SegFormer model)"),fAe.forEach(t),Qfo=i(Z),Lh=n(Z,"LI",{});var mAe=s(Lh);Pne=n(mAe,"STRONG",{});var mKr=s(Pne);Hfo=r(mKr,"speech_to_text"),mKr.forEach(t),Ufo=r(mAe," \u2014 "),aI=n(mAe,"A",{href:!0});var gKr=s(aI);Jfo=r(gKr,"Speech2TextFeatureExtractor"),gKr.forEach(t),Yfo=r(mAe," (Speech2Text model)"),mAe.forEach(t),Kfo=i(Z),xh=n(Z,"LI",{});var gAe=s(xh);Bne=n(gAe,"STRONG",{});var hKr=s(Bne);Zfo=r(hKr,"swin"),hKr.forEach(t),emo=r(gAe," \u2014 "),nI=n(gAe,"A",{href:!0});var pKr=s(nI);omo=r(pKr,"ViTFeatureExtractor"),pKr.forEach(t),rmo=r(gAe," (Swin model)"),gAe.forEach(t),tmo=i(Z),$h=n(Z,"LI",{});var hAe=s($h);Ine=n(hAe,"STRONG",{});var uKr=s(Ine);amo=r(uKr,"van"),uKr.forEach(t),nmo=r(hAe," \u2014 "),sI=n(hAe,"A",{href:!0});var _Kr=s(sI);smo=r(_Kr,"ConvNextFeatureExtractor"),_Kr.forEach(t),lmo=r(hAe," (VAN model)"),hAe.forEach(t),imo=i(Z),kh=n(Z,"LI",{});var pAe=s(kh);qne=n(pAe,"STRONG",{});var bKr=s(qne);dmo=r(bKr,"vit"),bKr.forEach(t),cmo=r(pAe," \u2014 "),lI=n(pAe,"A",{href:!0});var vKr=s(lI);fmo=r(vKr,"ViTFeatureExtractor"),vKr.forEach(t),mmo=r(pAe," (ViT model)"),pAe.forEach(t),gmo=i(Z),Sh=n(Z,"LI",{});var uAe=s(Sh);Nne=n(uAe,"STRONG",{});var FKr=s(Nne);hmo=r(FKr,"vit_mae"),FKr.forEach(t),pmo=r(uAe," \u2014 "),iI=n(uAe,"A",{href:!0});var TKr=s(iI);umo=r(TKr,"ViTFeatureExtractor"),TKr.forEach(t),_mo=r(uAe," (ViTMAE model)"),uAe.forEach(t),bmo=i(Z),Rh=n(Z,"LI",{});var _Ae=s(Rh);jne=n(_Ae,"STRONG",{});var MKr=s(jne);vmo=r(MKr,"wav2vec2"),MKr.forEach(t),Fmo=r(_Ae," \u2014 "),dI=n(_Ae,"A",{href:!0});var EKr=s(dI);Tmo=r(EKr,"Wav2Vec2FeatureExtractor"),EKr.forEach(t),Mmo=r(_Ae," (Wav2Vec2 model)"),_Ae.forEach(t),Emo=i(Z),Ph=n(Z,"LI",{});var bAe=s(Ph);Dne=n(bAe,"STRONG",{});var CKr=s(Dne);Cmo=r(CKr,"wav2vec2-conformer"),CKr.forEach(t),wmo=r(bAe," \u2014 "),cI=n(bAe,"A",{href:!0});var wKr=s(cI);Amo=r(wKr,"Wav2Vec2FeatureExtractor"),wKr.forEach(t),ymo=r(bAe," (Wav2Vec2-Conformer model)"),bAe.forEach(t),Lmo=i(Z),Bh=n(Z,"LI",{});var vAe=s(Bh);Gne=n(vAe,"STRONG",{});var AKr=s(Gne);xmo=r(AKr,"yolos"),AKr.forEach(t),$mo=r(vAe," \u2014 "),fI=n(vAe,"A",{href:!0});var yKr=s(fI);kmo=r(yKr,"YolosFeatureExtractor"),yKr.forEach(t),Smo=r(vAe," (YOLOS model)"),vAe.forEach(t),Z.forEach(t),Rmo=i(Zt),T(Ih.$$.fragment,Zt),Pmo=i(Zt),T(qh.$$.fragment,Zt),Zt.forEach(t),Bmo=i(js),Nh=n(js,"DIV",{class:!0});var cDe=s(Nh);T(Wy.$$.fragment,cDe),Imo=i(cDe),One=n(cDe,"P",{});var LKr=s(One);qmo=r(LKr,"Register a new feature extractor for this class."),LKr.forEach(t),cDe.forEach(t),js.forEach(t),dNe=i(f),Ei=n(f,"H2",{class:!0});var fDe=s(Ei);jh=n(fDe,"A",{id:!0,class:!0,href:!0});var xKr=s(jh);Vne=n(xKr,"SPAN",{});var $Kr=s(Vne);T(Qy.$$.fragment,$Kr),$Kr.forEach(t),xKr.forEach(t),Nmo=i(fDe),Xne=n(fDe,"SPAN",{});var kKr=s(Xne);jmo=r(kKr,"AutoProcessor"),kKr.forEach(t),fDe.forEach(t),cNe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(Hy.$$.fragment,Ds),Dmo=i(Ds),Uy=n(Ds,"P",{});var mDe=s(Uy);Gmo=r(mDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mI=n(mDe,"A",{href:!0});var SKr=s(mI);Omo=r(SKr,"AutoProcessor.from_pretrained()"),SKr.forEach(t),Vmo=r(mDe," class method."),mDe.forEach(t),Xmo=i(Ds),Jy=n(Ds,"P",{});var gDe=s(Jy);zmo=r(gDe,"This class cannot be instantiated directly using "),zne=n(gDe,"CODE",{});var RKr=s(zne);Wmo=r(RKr,"__init__()"),RKr.forEach(t),Qmo=r(gDe," (throws an error)."),gDe.forEach(t),Hmo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(Yy.$$.fragment,ea),Umo=i(ea),Wne=n(ea,"P",{});var PKr=s(Wne);Jmo=r(PKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PKr.forEach(t),Ymo=i(ea),Ci=n(ea,"P",{});var hZ=s(Ci);Kmo=r(hZ,"The processor class to instantiate is selected based on the "),Qne=n(hZ,"CODE",{});var BKr=s(Qne);Zmo=r(BKr,"model_type"),BKr.forEach(t),ego=r(hZ,` property of the config object (either
passed as an argument or loaded from `),Hne=n(hZ,"CODE",{});var IKr=s(Hne);ogo=r(IKr,"pretrained_model_name_or_path"),IKr.forEach(t),rgo=r(hZ," if possible):"),hZ.forEach(t),tgo=i(ea),he=n(ea,"UL",{});var _e=s(he);Dh=n(_e,"LI",{});var FAe=s(Dh);Une=n(FAe,"STRONG",{});var qKr=s(Une);ago=r(qKr,"clip"),qKr.forEach(t),ngo=r(FAe," \u2014 "),gI=n(FAe,"A",{href:!0});var NKr=s(gI);sgo=r(NKr,"CLIPProcessor"),NKr.forEach(t),lgo=r(FAe," (CLIP model)"),FAe.forEach(t),igo=i(_e),Gh=n(_e,"LI",{});var TAe=s(Gh);Jne=n(TAe,"STRONG",{});var jKr=s(Jne);dgo=r(jKr,"flava"),jKr.forEach(t),cgo=r(TAe," \u2014 "),Yne=n(TAe,"CODE",{});var DKr=s(Yne);fgo=r(DKr,"FLAVAProcessor"),DKr.forEach(t),mgo=r(TAe," (Flava model)"),TAe.forEach(t),ggo=i(_e),Oh=n(_e,"LI",{});var MAe=s(Oh);Kne=n(MAe,"STRONG",{});var GKr=s(Kne);hgo=r(GKr,"layoutlmv2"),GKr.forEach(t),pgo=r(MAe," \u2014 "),hI=n(MAe,"A",{href:!0});var OKr=s(hI);ugo=r(OKr,"LayoutLMv2Processor"),OKr.forEach(t),_go=r(MAe," (LayoutLMv2 model)"),MAe.forEach(t),bgo=i(_e),Vh=n(_e,"LI",{});var EAe=s(Vh);Zne=n(EAe,"STRONG",{});var VKr=s(Zne);vgo=r(VKr,"layoutlmv3"),VKr.forEach(t),Fgo=r(EAe," \u2014 "),pI=n(EAe,"A",{href:!0});var XKr=s(pI);Tgo=r(XKr,"LayoutLMv3Processor"),XKr.forEach(t),Mgo=r(EAe," (LayoutLMv3 model)"),EAe.forEach(t),Ego=i(_e),Xh=n(_e,"LI",{});var CAe=s(Xh);ese=n(CAe,"STRONG",{});var zKr=s(ese);Cgo=r(zKr,"layoutxlm"),zKr.forEach(t),wgo=r(CAe," \u2014 "),uI=n(CAe,"A",{href:!0});var WKr=s(uI);Ago=r(WKr,"LayoutXLMProcessor"),WKr.forEach(t),ygo=r(CAe," (LayoutXLM model)"),CAe.forEach(t),Lgo=i(_e),zh=n(_e,"LI",{});var wAe=s(zh);ose=n(wAe,"STRONG",{});var QKr=s(ose);xgo=r(QKr,"sew"),QKr.forEach(t),$go=r(wAe," \u2014 "),_I=n(wAe,"A",{href:!0});var HKr=s(_I);kgo=r(HKr,"Wav2Vec2Processor"),HKr.forEach(t),Sgo=r(wAe," (SEW model)"),wAe.forEach(t),Rgo=i(_e),Wh=n(_e,"LI",{});var AAe=s(Wh);rse=n(AAe,"STRONG",{});var UKr=s(rse);Pgo=r(UKr,"sew-d"),UKr.forEach(t),Bgo=r(AAe," \u2014 "),bI=n(AAe,"A",{href:!0});var JKr=s(bI);Igo=r(JKr,"Wav2Vec2Processor"),JKr.forEach(t),qgo=r(AAe," (SEW-D model)"),AAe.forEach(t),Ngo=i(_e),Qh=n(_e,"LI",{});var yAe=s(Qh);tse=n(yAe,"STRONG",{});var YKr=s(tse);jgo=r(YKr,"speech_to_text"),YKr.forEach(t),Dgo=r(yAe," \u2014 "),vI=n(yAe,"A",{href:!0});var KKr=s(vI);Ggo=r(KKr,"Speech2TextProcessor"),KKr.forEach(t),Ogo=r(yAe," (Speech2Text model)"),yAe.forEach(t),Vgo=i(_e),Hh=n(_e,"LI",{});var LAe=s(Hh);ase=n(LAe,"STRONG",{});var ZKr=s(ase);Xgo=r(ZKr,"speech_to_text_2"),ZKr.forEach(t),zgo=r(LAe," \u2014 "),FI=n(LAe,"A",{href:!0});var eZr=s(FI);Wgo=r(eZr,"Speech2Text2Processor"),eZr.forEach(t),Qgo=r(LAe," (Speech2Text2 model)"),LAe.forEach(t),Hgo=i(_e),Uh=n(_e,"LI",{});var xAe=s(Uh);nse=n(xAe,"STRONG",{});var oZr=s(nse);Ugo=r(oZr,"trocr"),oZr.forEach(t),Jgo=r(xAe," \u2014 "),TI=n(xAe,"A",{href:!0});var rZr=s(TI);Ygo=r(rZr,"TrOCRProcessor"),rZr.forEach(t),Kgo=r(xAe," (TrOCR model)"),xAe.forEach(t),Zgo=i(_e),Jh=n(_e,"LI",{});var $Ae=s(Jh);sse=n($Ae,"STRONG",{});var tZr=s(sse);eho=r(tZr,"unispeech"),tZr.forEach(t),oho=r($Ae," \u2014 "),MI=n($Ae,"A",{href:!0});var aZr=s(MI);rho=r(aZr,"Wav2Vec2Processor"),aZr.forEach(t),tho=r($Ae," (UniSpeech model)"),$Ae.forEach(t),aho=i(_e),Yh=n(_e,"LI",{});var kAe=s(Yh);lse=n(kAe,"STRONG",{});var nZr=s(lse);nho=r(nZr,"unispeech-sat"),nZr.forEach(t),sho=r(kAe," \u2014 "),EI=n(kAe,"A",{href:!0});var sZr=s(EI);lho=r(sZr,"Wav2Vec2Processor"),sZr.forEach(t),iho=r(kAe," (UniSpeechSat model)"),kAe.forEach(t),dho=i(_e),Kh=n(_e,"LI",{});var SAe=s(Kh);ise=n(SAe,"STRONG",{});var lZr=s(ise);cho=r(lZr,"vilt"),lZr.forEach(t),fho=r(SAe," \u2014 "),CI=n(SAe,"A",{href:!0});var iZr=s(CI);mho=r(iZr,"ViltProcessor"),iZr.forEach(t),gho=r(SAe," (ViLT model)"),SAe.forEach(t),hho=i(_e),Zh=n(_e,"LI",{});var RAe=s(Zh);dse=n(RAe,"STRONG",{});var dZr=s(dse);pho=r(dZr,"vision-text-dual-encoder"),dZr.forEach(t),uho=r(RAe," \u2014 "),wI=n(RAe,"A",{href:!0});var cZr=s(wI);_ho=r(cZr,"VisionTextDualEncoderProcessor"),cZr.forEach(t),bho=r(RAe," (VisionTextDualEncoder model)"),RAe.forEach(t),vho=i(_e),ep=n(_e,"LI",{});var PAe=s(ep);cse=n(PAe,"STRONG",{});var fZr=s(cse);Fho=r(fZr,"wav2vec2"),fZr.forEach(t),Tho=r(PAe," \u2014 "),AI=n(PAe,"A",{href:!0});var mZr=s(AI);Mho=r(mZr,"Wav2Vec2Processor"),mZr.forEach(t),Eho=r(PAe," (Wav2Vec2 model)"),PAe.forEach(t),Cho=i(_e),op=n(_e,"LI",{});var BAe=s(op);fse=n(BAe,"STRONG",{});var gZr=s(fse);who=r(gZr,"wav2vec2-conformer"),gZr.forEach(t),Aho=r(BAe," \u2014 "),yI=n(BAe,"A",{href:!0});var hZr=s(yI);yho=r(hZr,"Wav2Vec2Processor"),hZr.forEach(t),Lho=r(BAe," (Wav2Vec2-Conformer model)"),BAe.forEach(t),xho=i(_e),rp=n(_e,"LI",{});var IAe=s(rp);mse=n(IAe,"STRONG",{});var pZr=s(mse);$ho=r(pZr,"wavlm"),pZr.forEach(t),kho=r(IAe," \u2014 "),LI=n(IAe,"A",{href:!0});var uZr=s(LI);Sho=r(uZr,"Wav2Vec2Processor"),uZr.forEach(t),Rho=r(IAe," (WavLM model)"),IAe.forEach(t),_e.forEach(t),Pho=i(ea),T(tp.$$.fragment,ea),Bho=i(ea),T(ap.$$.fragment,ea),ea.forEach(t),Iho=i(Ds),np=n(Ds,"DIV",{class:!0});var hDe=s(np);T(Ky.$$.fragment,hDe),qho=i(hDe),gse=n(hDe,"P",{});var _Zr=s(gse);Nho=r(_Zr,"Register a new processor for this class."),_Zr.forEach(t),hDe.forEach(t),Ds.forEach(t),fNe=i(f),wi=n(f,"H2",{class:!0});var pDe=s(wi);sp=n(pDe,"A",{id:!0,class:!0,href:!0});var bZr=s(sp);hse=n(bZr,"SPAN",{});var vZr=s(hse);T(Zy.$$.fragment,vZr),vZr.forEach(t),bZr.forEach(t),jho=i(pDe),pse=n(pDe,"SPAN",{});var FZr=s(pse);Dho=r(FZr,"AutoModel"),FZr.forEach(t),pDe.forEach(t),mNe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(eL.$$.fragment,Gs),Gho=i(Gs),Ai=n(Gs,"P",{});var pZ=s(Ai);Oho=r(pZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),xI=n(pZ,"A",{href:!0});var TZr=s(xI);Vho=r(TZr,"from_pretrained()"),TZr.forEach(t),Xho=r(pZ," class method or the "),$I=n(pZ,"A",{href:!0});var MZr=s($I);zho=r(MZr,"from_config()"),MZr.forEach(t),Who=r(pZ,` class
method.`),pZ.forEach(t),Qho=i(Gs),oL=n(Gs,"P",{});var uDe=s(oL);Hho=r(uDe,"This class cannot be instantiated directly using "),use=n(uDe,"CODE",{});var EZr=s(use);Uho=r(EZr,"__init__()"),EZr.forEach(t),Jho=r(uDe," (throws an error)."),uDe.forEach(t),Yho=i(Gs),tt=n(Gs,"DIV",{class:!0});var kw=s(tt);T(rL.$$.fragment,kw),Kho=i(kw),_se=n(kw,"P",{});var CZr=s(_se);Zho=r(CZr,"Instantiates one of the base model classes of the library from a configuration."),CZr.forEach(t),epo=i(kw),yi=n(kw,"P",{});var uZ=s(yi);opo=r(uZ,`Note:
Loading a model from its configuration file does `),bse=n(uZ,"STRONG",{});var wZr=s(bse);rpo=r(wZr,"not"),wZr.forEach(t),tpo=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=n(uZ,"A",{href:!0});var AZr=s(kI);apo=r(AZr,"from_pretrained()"),AZr.forEach(t),npo=r(uZ," to load the model weights."),uZ.forEach(t),spo=i(kw),T(lp.$$.fragment,kw),kw.forEach(t),lpo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(tL.$$.fragment,oa),ipo=i(oa),vse=n(oa,"P",{});var yZr=s(vse);dpo=r(yZr,"Instantiate one of the base model classes of the library from a pretrained model."),yZr.forEach(t),cpo=i(oa),La=n(oa,"P",{});var Sw=s(La);fpo=r(Sw,"The model class to instantiate is selected based on the "),Fse=n(Sw,"CODE",{});var LZr=s(Fse);mpo=r(LZr,"model_type"),LZr.forEach(t),gpo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),Tse=n(Sw,"CODE",{});var xZr=s(Tse);hpo=r(xZr,"pretrained_model_name_or_path"),xZr.forEach(t),ppo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mse=n(Sw,"CODE",{});var $Zr=s(Mse);upo=r($Zr,"pretrained_model_name_or_path"),$Zr.forEach(t),_po=r(Sw,":"),Sw.forEach(t),bpo=i(oa),x=n(oa,"UL",{});var $=s(x);ip=n($,"LI",{});var qAe=s(ip);Ese=n(qAe,"STRONG",{});var kZr=s(Ese);vpo=r(kZr,"albert"),kZr.forEach(t),Fpo=r(qAe," \u2014 "),SI=n(qAe,"A",{href:!0});var SZr=s(SI);Tpo=r(SZr,"AlbertModel"),SZr.forEach(t),Mpo=r(qAe," (ALBERT model)"),qAe.forEach(t),Epo=i($),dp=n($,"LI",{});var NAe=s(dp);Cse=n(NAe,"STRONG",{});var RZr=s(Cse);Cpo=r(RZr,"bart"),RZr.forEach(t),wpo=r(NAe," \u2014 "),RI=n(NAe,"A",{href:!0});var PZr=s(RI);Apo=r(PZr,"BartModel"),PZr.forEach(t),ypo=r(NAe," (BART model)"),NAe.forEach(t),Lpo=i($),cp=n($,"LI",{});var jAe=s(cp);wse=n(jAe,"STRONG",{});var BZr=s(wse);xpo=r(BZr,"beit"),BZr.forEach(t),$po=r(jAe," \u2014 "),PI=n(jAe,"A",{href:!0});var IZr=s(PI);kpo=r(IZr,"BeitModel"),IZr.forEach(t),Spo=r(jAe," (BEiT model)"),jAe.forEach(t),Rpo=i($),fp=n($,"LI",{});var DAe=s(fp);Ase=n(DAe,"STRONG",{});var qZr=s(Ase);Ppo=r(qZr,"bert"),qZr.forEach(t),Bpo=r(DAe," \u2014 "),BI=n(DAe,"A",{href:!0});var NZr=s(BI);Ipo=r(NZr,"BertModel"),NZr.forEach(t),qpo=r(DAe," (BERT model)"),DAe.forEach(t),Npo=i($),mp=n($,"LI",{});var GAe=s(mp);yse=n(GAe,"STRONG",{});var jZr=s(yse);jpo=r(jZr,"bert-generation"),jZr.forEach(t),Dpo=r(GAe," \u2014 "),II=n(GAe,"A",{href:!0});var DZr=s(II);Gpo=r(DZr,"BertGenerationEncoder"),DZr.forEach(t),Opo=r(GAe," (Bert Generation model)"),GAe.forEach(t),Vpo=i($),gp=n($,"LI",{});var OAe=s(gp);Lse=n(OAe,"STRONG",{});var GZr=s(Lse);Xpo=r(GZr,"big_bird"),GZr.forEach(t),zpo=r(OAe," \u2014 "),qI=n(OAe,"A",{href:!0});var OZr=s(qI);Wpo=r(OZr,"BigBirdModel"),OZr.forEach(t),Qpo=r(OAe," (BigBird model)"),OAe.forEach(t),Hpo=i($),hp=n($,"LI",{});var VAe=s(hp);xse=n(VAe,"STRONG",{});var VZr=s(xse);Upo=r(VZr,"bigbird_pegasus"),VZr.forEach(t),Jpo=r(VAe," \u2014 "),NI=n(VAe,"A",{href:!0});var XZr=s(NI);Ypo=r(XZr,"BigBirdPegasusModel"),XZr.forEach(t),Kpo=r(VAe," (BigBirdPegasus model)"),VAe.forEach(t),Zpo=i($),pp=n($,"LI",{});var XAe=s(pp);$se=n(XAe,"STRONG",{});var zZr=s($se);euo=r(zZr,"blenderbot"),zZr.forEach(t),ouo=r(XAe," \u2014 "),jI=n(XAe,"A",{href:!0});var WZr=s(jI);ruo=r(WZr,"BlenderbotModel"),WZr.forEach(t),tuo=r(XAe," (Blenderbot model)"),XAe.forEach(t),auo=i($),up=n($,"LI",{});var zAe=s(up);kse=n(zAe,"STRONG",{});var QZr=s(kse);nuo=r(QZr,"blenderbot-small"),QZr.forEach(t),suo=r(zAe," \u2014 "),DI=n(zAe,"A",{href:!0});var HZr=s(DI);luo=r(HZr,"BlenderbotSmallModel"),HZr.forEach(t),iuo=r(zAe," (BlenderbotSmall model)"),zAe.forEach(t),duo=i($),_p=n($,"LI",{});var WAe=s(_p);Sse=n(WAe,"STRONG",{});var UZr=s(Sse);cuo=r(UZr,"camembert"),UZr.forEach(t),fuo=r(WAe," \u2014 "),GI=n(WAe,"A",{href:!0});var JZr=s(GI);muo=r(JZr,"CamembertModel"),JZr.forEach(t),guo=r(WAe," (CamemBERT model)"),WAe.forEach(t),huo=i($),bp=n($,"LI",{});var QAe=s(bp);Rse=n(QAe,"STRONG",{});var YZr=s(Rse);puo=r(YZr,"canine"),YZr.forEach(t),uuo=r(QAe," \u2014 "),OI=n(QAe,"A",{href:!0});var KZr=s(OI);_uo=r(KZr,"CanineModel"),KZr.forEach(t),buo=r(QAe," (Canine model)"),QAe.forEach(t),vuo=i($),vp=n($,"LI",{});var HAe=s(vp);Pse=n(HAe,"STRONG",{});var ZZr=s(Pse);Fuo=r(ZZr,"clip"),ZZr.forEach(t),Tuo=r(HAe," \u2014 "),VI=n(HAe,"A",{href:!0});var eet=s(VI);Muo=r(eet,"CLIPModel"),eet.forEach(t),Euo=r(HAe," (CLIP model)"),HAe.forEach(t),Cuo=i($),Fp=n($,"LI",{});var UAe=s(Fp);Bse=n(UAe,"STRONG",{});var oet=s(Bse);wuo=r(oet,"convbert"),oet.forEach(t),Auo=r(UAe," \u2014 "),XI=n(UAe,"A",{href:!0});var ret=s(XI);yuo=r(ret,"ConvBertModel"),ret.forEach(t),Luo=r(UAe," (ConvBERT model)"),UAe.forEach(t),xuo=i($),Tp=n($,"LI",{});var JAe=s(Tp);Ise=n(JAe,"STRONG",{});var tet=s(Ise);$uo=r(tet,"convnext"),tet.forEach(t),kuo=r(JAe," \u2014 "),zI=n(JAe,"A",{href:!0});var aet=s(zI);Suo=r(aet,"ConvNextModel"),aet.forEach(t),Ruo=r(JAe," (ConvNext model)"),JAe.forEach(t),Puo=i($),Mp=n($,"LI",{});var YAe=s(Mp);qse=n(YAe,"STRONG",{});var net=s(qse);Buo=r(net,"ctrl"),net.forEach(t),Iuo=r(YAe," \u2014 "),WI=n(YAe,"A",{href:!0});var set=s(WI);quo=r(set,"CTRLModel"),set.forEach(t),Nuo=r(YAe," (CTRL model)"),YAe.forEach(t),juo=i($),Ep=n($,"LI",{});var KAe=s(Ep);Nse=n(KAe,"STRONG",{});var iet=s(Nse);Duo=r(iet,"cvt"),iet.forEach(t),Guo=r(KAe," \u2014 "),QI=n(KAe,"A",{href:!0});var det=s(QI);Ouo=r(det,"CvtModel"),det.forEach(t),Vuo=r(KAe," (CvT model)"),KAe.forEach(t),Xuo=i($),Cp=n($,"LI",{});var ZAe=s(Cp);jse=n(ZAe,"STRONG",{});var cet=s(jse);zuo=r(cet,"data2vec-audio"),cet.forEach(t),Wuo=r(ZAe," \u2014 "),HI=n(ZAe,"A",{href:!0});var fet=s(HI);Quo=r(fet,"Data2VecAudioModel"),fet.forEach(t),Huo=r(ZAe," (Data2VecAudio model)"),ZAe.forEach(t),Uuo=i($),wp=n($,"LI",{});var eye=s(wp);Dse=n(eye,"STRONG",{});var met=s(Dse);Juo=r(met,"data2vec-text"),met.forEach(t),Yuo=r(eye," \u2014 "),UI=n(eye,"A",{href:!0});var get=s(UI);Kuo=r(get,"Data2VecTextModel"),get.forEach(t),Zuo=r(eye," (Data2VecText model)"),eye.forEach(t),e_o=i($),Ap=n($,"LI",{});var oye=s(Ap);Gse=n(oye,"STRONG",{});var het=s(Gse);o_o=r(het,"data2vec-vision"),het.forEach(t),r_o=r(oye," \u2014 "),JI=n(oye,"A",{href:!0});var pet=s(JI);t_o=r(pet,"Data2VecVisionModel"),pet.forEach(t),a_o=r(oye," (Data2VecVision model)"),oye.forEach(t),n_o=i($),yp=n($,"LI",{});var rye=s(yp);Ose=n(rye,"STRONG",{});var uet=s(Ose);s_o=r(uet,"deberta"),uet.forEach(t),l_o=r(rye," \u2014 "),YI=n(rye,"A",{href:!0});var _et=s(YI);i_o=r(_et,"DebertaModel"),_et.forEach(t),d_o=r(rye," (DeBERTa model)"),rye.forEach(t),c_o=i($),Lp=n($,"LI",{});var tye=s(Lp);Vse=n(tye,"STRONG",{});var bet=s(Vse);f_o=r(bet,"deberta-v2"),bet.forEach(t),m_o=r(tye," \u2014 "),KI=n(tye,"A",{href:!0});var vet=s(KI);g_o=r(vet,"DebertaV2Model"),vet.forEach(t),h_o=r(tye," (DeBERTa-v2 model)"),tye.forEach(t),p_o=i($),xp=n($,"LI",{});var aye=s(xp);Xse=n(aye,"STRONG",{});var Fet=s(Xse);u_o=r(Fet,"decision_transformer"),Fet.forEach(t),__o=r(aye," \u2014 "),ZI=n(aye,"A",{href:!0});var Tet=s(ZI);b_o=r(Tet,"DecisionTransformerModel"),Tet.forEach(t),v_o=r(aye," (Decision Transformer model)"),aye.forEach(t),F_o=i($),$p=n($,"LI",{});var nye=s($p);zse=n(nye,"STRONG",{});var Met=s(zse);T_o=r(Met,"deit"),Met.forEach(t),M_o=r(nye," \u2014 "),eq=n(nye,"A",{href:!0});var Eet=s(eq);E_o=r(Eet,"DeiTModel"),Eet.forEach(t),C_o=r(nye," (DeiT model)"),nye.forEach(t),w_o=i($),kp=n($,"LI",{});var sye=s(kp);Wse=n(sye,"STRONG",{});var Cet=s(Wse);A_o=r(Cet,"detr"),Cet.forEach(t),y_o=r(sye," \u2014 "),oq=n(sye,"A",{href:!0});var wet=s(oq);L_o=r(wet,"DetrModel"),wet.forEach(t),x_o=r(sye," (DETR model)"),sye.forEach(t),$_o=i($),Sp=n($,"LI",{});var lye=s(Sp);Qse=n(lye,"STRONG",{});var Aet=s(Qse);k_o=r(Aet,"distilbert"),Aet.forEach(t),S_o=r(lye," \u2014 "),rq=n(lye,"A",{href:!0});var yet=s(rq);R_o=r(yet,"DistilBertModel"),yet.forEach(t),P_o=r(lye," (DistilBERT model)"),lye.forEach(t),B_o=i($),Rp=n($,"LI",{});var iye=s(Rp);Hse=n(iye,"STRONG",{});var Let=s(Hse);I_o=r(Let,"dpr"),Let.forEach(t),q_o=r(iye," \u2014 "),tq=n(iye,"A",{href:!0});var xet=s(tq);N_o=r(xet,"DPRQuestionEncoder"),xet.forEach(t),j_o=r(iye," (DPR model)"),iye.forEach(t),D_o=i($),Pp=n($,"LI",{});var dye=s(Pp);Use=n(dye,"STRONG",{});var $et=s(Use);G_o=r($et,"dpt"),$et.forEach(t),O_o=r(dye," \u2014 "),aq=n(dye,"A",{href:!0});var ket=s(aq);V_o=r(ket,"DPTModel"),ket.forEach(t),X_o=r(dye," (DPT model)"),dye.forEach(t),z_o=i($),Bp=n($,"LI",{});var cye=s(Bp);Jse=n(cye,"STRONG",{});var Set=s(Jse);W_o=r(Set,"electra"),Set.forEach(t),Q_o=r(cye," \u2014 "),nq=n(cye,"A",{href:!0});var Ret=s(nq);H_o=r(Ret,"ElectraModel"),Ret.forEach(t),U_o=r(cye," (ELECTRA model)"),cye.forEach(t),J_o=i($),Ip=n($,"LI",{});var fye=s(Ip);Yse=n(fye,"STRONG",{});var Pet=s(Yse);Y_o=r(Pet,"flaubert"),Pet.forEach(t),K_o=r(fye," \u2014 "),sq=n(fye,"A",{href:!0});var Bet=s(sq);Z_o=r(Bet,"FlaubertModel"),Bet.forEach(t),e0o=r(fye," (FlauBERT model)"),fye.forEach(t),o0o=i($),qp=n($,"LI",{});var mye=s(qp);Kse=n(mye,"STRONG",{});var Iet=s(Kse);r0o=r(Iet,"flava"),Iet.forEach(t),t0o=r(mye," \u2014 "),lq=n(mye,"A",{href:!0});var qet=s(lq);a0o=r(qet,"FlavaModel"),qet.forEach(t),n0o=r(mye," (Flava model)"),mye.forEach(t),s0o=i($),Np=n($,"LI",{});var gye=s(Np);Zse=n(gye,"STRONG",{});var Net=s(Zse);l0o=r(Net,"fnet"),Net.forEach(t),i0o=r(gye," \u2014 "),iq=n(gye,"A",{href:!0});var jet=s(iq);d0o=r(jet,"FNetModel"),jet.forEach(t),c0o=r(gye," (FNet model)"),gye.forEach(t),f0o=i($),jp=n($,"LI",{});var hye=s(jp);ele=n(hye,"STRONG",{});var Det=s(ele);m0o=r(Det,"fsmt"),Det.forEach(t),g0o=r(hye," \u2014 "),dq=n(hye,"A",{href:!0});var Get=s(dq);h0o=r(Get,"FSMTModel"),Get.forEach(t),p0o=r(hye," (FairSeq Machine-Translation model)"),hye.forEach(t),u0o=i($),Ps=n($,"LI",{});var O$=s(Ps);ole=n(O$,"STRONG",{});var Oet=s(ole);_0o=r(Oet,"funnel"),Oet.forEach(t),b0o=r(O$," \u2014 "),cq=n(O$,"A",{href:!0});var Vet=s(cq);v0o=r(Vet,"FunnelModel"),Vet.forEach(t),F0o=r(O$," or "),fq=n(O$,"A",{href:!0});var Xet=s(fq);T0o=r(Xet,"FunnelBaseModel"),Xet.forEach(t),M0o=r(O$," (Funnel Transformer model)"),O$.forEach(t),E0o=i($),Dp=n($,"LI",{});var pye=s(Dp);rle=n(pye,"STRONG",{});var zet=s(rle);C0o=r(zet,"glpn"),zet.forEach(t),w0o=r(pye," \u2014 "),mq=n(pye,"A",{href:!0});var Wet=s(mq);A0o=r(Wet,"GLPNModel"),Wet.forEach(t),y0o=r(pye," (GLPN model)"),pye.forEach(t),L0o=i($),Gp=n($,"LI",{});var uye=s(Gp);tle=n(uye,"STRONG",{});var Qet=s(tle);x0o=r(Qet,"gpt2"),Qet.forEach(t),$0o=r(uye," \u2014 "),gq=n(uye,"A",{href:!0});var Het=s(gq);k0o=r(Het,"GPT2Model"),Het.forEach(t),S0o=r(uye," (OpenAI GPT-2 model)"),uye.forEach(t),R0o=i($),Op=n($,"LI",{});var _ye=s(Op);ale=n(_ye,"STRONG",{});var Uet=s(ale);P0o=r(Uet,"gpt_neo"),Uet.forEach(t),B0o=r(_ye," \u2014 "),hq=n(_ye,"A",{href:!0});var Jet=s(hq);I0o=r(Jet,"GPTNeoModel"),Jet.forEach(t),q0o=r(_ye," (GPT Neo model)"),_ye.forEach(t),N0o=i($),Vp=n($,"LI",{});var bye=s(Vp);nle=n(bye,"STRONG",{});var Yet=s(nle);j0o=r(Yet,"gpt_neox"),Yet.forEach(t),D0o=r(bye," \u2014 "),pq=n(bye,"A",{href:!0});var Ket=s(pq);G0o=r(Ket,"GPTNeoXModel"),Ket.forEach(t),O0o=r(bye," (GPT NeoX model)"),bye.forEach(t),V0o=i($),Xp=n($,"LI",{});var vye=s(Xp);sle=n(vye,"STRONG",{});var Zet=s(sle);X0o=r(Zet,"gptj"),Zet.forEach(t),z0o=r(vye," \u2014 "),uq=n(vye,"A",{href:!0});var eot=s(uq);W0o=r(eot,"GPTJModel"),eot.forEach(t),Q0o=r(vye," (GPT-J model)"),vye.forEach(t),H0o=i($),zp=n($,"LI",{});var Fye=s(zp);lle=n(Fye,"STRONG",{});var oot=s(lle);U0o=r(oot,"hubert"),oot.forEach(t),J0o=r(Fye," \u2014 "),_q=n(Fye,"A",{href:!0});var rot=s(_q);Y0o=r(rot,"HubertModel"),rot.forEach(t),K0o=r(Fye," (Hubert model)"),Fye.forEach(t),Z0o=i($),Wp=n($,"LI",{});var Tye=s(Wp);ile=n(Tye,"STRONG",{});var tot=s(ile);e1o=r(tot,"ibert"),tot.forEach(t),o1o=r(Tye," \u2014 "),bq=n(Tye,"A",{href:!0});var aot=s(bq);r1o=r(aot,"IBertModel"),aot.forEach(t),t1o=r(Tye," (I-BERT model)"),Tye.forEach(t),a1o=i($),Qp=n($,"LI",{});var Mye=s(Qp);dle=n(Mye,"STRONG",{});var not=s(dle);n1o=r(not,"imagegpt"),not.forEach(t),s1o=r(Mye," \u2014 "),vq=n(Mye,"A",{href:!0});var sot=s(vq);l1o=r(sot,"ImageGPTModel"),sot.forEach(t),i1o=r(Mye," (ImageGPT model)"),Mye.forEach(t),d1o=i($),Hp=n($,"LI",{});var Eye=s(Hp);cle=n(Eye,"STRONG",{});var lot=s(cle);c1o=r(lot,"layoutlm"),lot.forEach(t),f1o=r(Eye," \u2014 "),Fq=n(Eye,"A",{href:!0});var iot=s(Fq);m1o=r(iot,"LayoutLMModel"),iot.forEach(t),g1o=r(Eye," (LayoutLM model)"),Eye.forEach(t),h1o=i($),Up=n($,"LI",{});var Cye=s(Up);fle=n(Cye,"STRONG",{});var dot=s(fle);p1o=r(dot,"layoutlmv2"),dot.forEach(t),u1o=r(Cye," \u2014 "),Tq=n(Cye,"A",{href:!0});var cot=s(Tq);_1o=r(cot,"LayoutLMv2Model"),cot.forEach(t),b1o=r(Cye," (LayoutLMv2 model)"),Cye.forEach(t),v1o=i($),Jp=n($,"LI",{});var wye=s(Jp);mle=n(wye,"STRONG",{});var fot=s(mle);F1o=r(fot,"layoutlmv3"),fot.forEach(t),T1o=r(wye," \u2014 "),Mq=n(wye,"A",{href:!0});var mot=s(Mq);M1o=r(mot,"LayoutLMv3Model"),mot.forEach(t),E1o=r(wye," (LayoutLMv3 model)"),wye.forEach(t),C1o=i($),Yp=n($,"LI",{});var Aye=s(Yp);gle=n(Aye,"STRONG",{});var got=s(gle);w1o=r(got,"led"),got.forEach(t),A1o=r(Aye," \u2014 "),Eq=n(Aye,"A",{href:!0});var hot=s(Eq);y1o=r(hot,"LEDModel"),hot.forEach(t),L1o=r(Aye," (LED model)"),Aye.forEach(t),x1o=i($),Kp=n($,"LI",{});var yye=s(Kp);hle=n(yye,"STRONG",{});var pot=s(hle);$1o=r(pot,"longformer"),pot.forEach(t),k1o=r(yye," \u2014 "),Cq=n(yye,"A",{href:!0});var uot=s(Cq);S1o=r(uot,"LongformerModel"),uot.forEach(t),R1o=r(yye," (Longformer model)"),yye.forEach(t),P1o=i($),Zp=n($,"LI",{});var Lye=s(Zp);ple=n(Lye,"STRONG",{});var _ot=s(ple);B1o=r(_ot,"luke"),_ot.forEach(t),I1o=r(Lye," \u2014 "),wq=n(Lye,"A",{href:!0});var bot=s(wq);q1o=r(bot,"LukeModel"),bot.forEach(t),N1o=r(Lye," (LUKE model)"),Lye.forEach(t),j1o=i($),eu=n($,"LI",{});var xye=s(eu);ule=n(xye,"STRONG",{});var vot=s(ule);D1o=r(vot,"lxmert"),vot.forEach(t),G1o=r(xye," \u2014 "),Aq=n(xye,"A",{href:!0});var Fot=s(Aq);O1o=r(Fot,"LxmertModel"),Fot.forEach(t),V1o=r(xye," (LXMERT model)"),xye.forEach(t),X1o=i($),ou=n($,"LI",{});var $ye=s(ou);_le=n($ye,"STRONG",{});var Tot=s(_le);z1o=r(Tot,"m2m_100"),Tot.forEach(t),W1o=r($ye," \u2014 "),yq=n($ye,"A",{href:!0});var Mot=s(yq);Q1o=r(Mot,"M2M100Model"),Mot.forEach(t),H1o=r($ye," (M2M100 model)"),$ye.forEach(t),U1o=i($),ru=n($,"LI",{});var kye=s(ru);ble=n(kye,"STRONG",{});var Eot=s(ble);J1o=r(Eot,"marian"),Eot.forEach(t),Y1o=r(kye," \u2014 "),Lq=n(kye,"A",{href:!0});var Cot=s(Lq);K1o=r(Cot,"MarianModel"),Cot.forEach(t),Z1o=r(kye," (Marian model)"),kye.forEach(t),ebo=i($),tu=n($,"LI",{});var Sye=s(tu);vle=n(Sye,"STRONG",{});var wot=s(vle);obo=r(wot,"maskformer"),wot.forEach(t),rbo=r(Sye," \u2014 "),xq=n(Sye,"A",{href:!0});var Aot=s(xq);tbo=r(Aot,"MaskFormerModel"),Aot.forEach(t),abo=r(Sye," (MaskFormer model)"),Sye.forEach(t),nbo=i($),au=n($,"LI",{});var Rye=s(au);Fle=n(Rye,"STRONG",{});var yot=s(Fle);sbo=r(yot,"mbart"),yot.forEach(t),lbo=r(Rye," \u2014 "),$q=n(Rye,"A",{href:!0});var Lot=s($q);ibo=r(Lot,"MBartModel"),Lot.forEach(t),dbo=r(Rye," (mBART model)"),Rye.forEach(t),cbo=i($),nu=n($,"LI",{});var Pye=s(nu);Tle=n(Pye,"STRONG",{});var xot=s(Tle);fbo=r(xot,"megatron-bert"),xot.forEach(t),mbo=r(Pye," \u2014 "),kq=n(Pye,"A",{href:!0});var $ot=s(kq);gbo=r($ot,"MegatronBertModel"),$ot.forEach(t),hbo=r(Pye," (MegatronBert model)"),Pye.forEach(t),pbo=i($),su=n($,"LI",{});var Bye=s(su);Mle=n(Bye,"STRONG",{});var kot=s(Mle);ubo=r(kot,"mobilebert"),kot.forEach(t),_bo=r(Bye," \u2014 "),Sq=n(Bye,"A",{href:!0});var Sot=s(Sq);bbo=r(Sot,"MobileBertModel"),Sot.forEach(t),vbo=r(Bye," (MobileBERT model)"),Bye.forEach(t),Fbo=i($),lu=n($,"LI",{});var Iye=s(lu);Ele=n(Iye,"STRONG",{});var Rot=s(Ele);Tbo=r(Rot,"mpnet"),Rot.forEach(t),Mbo=r(Iye," \u2014 "),Rq=n(Iye,"A",{href:!0});var Pot=s(Rq);Ebo=r(Pot,"MPNetModel"),Pot.forEach(t),Cbo=r(Iye," (MPNet model)"),Iye.forEach(t),wbo=i($),iu=n($,"LI",{});var qye=s(iu);Cle=n(qye,"STRONG",{});var Bot=s(Cle);Abo=r(Bot,"mt5"),Bot.forEach(t),ybo=r(qye," \u2014 "),Pq=n(qye,"A",{href:!0});var Iot=s(Pq);Lbo=r(Iot,"MT5Model"),Iot.forEach(t),xbo=r(qye," (mT5 model)"),qye.forEach(t),$bo=i($),du=n($,"LI",{});var Nye=s(du);wle=n(Nye,"STRONG",{});var qot=s(wle);kbo=r(qot,"nystromformer"),qot.forEach(t),Sbo=r(Nye," \u2014 "),Bq=n(Nye,"A",{href:!0});var Not=s(Bq);Rbo=r(Not,"NystromformerModel"),Not.forEach(t),Pbo=r(Nye," (Nystromformer model)"),Nye.forEach(t),Bbo=i($),cu=n($,"LI",{});var jye=s(cu);Ale=n(jye,"STRONG",{});var jot=s(Ale);Ibo=r(jot,"openai-gpt"),jot.forEach(t),qbo=r(jye," \u2014 "),Iq=n(jye,"A",{href:!0});var Dot=s(Iq);Nbo=r(Dot,"OpenAIGPTModel"),Dot.forEach(t),jbo=r(jye," (OpenAI GPT model)"),jye.forEach(t),Dbo=i($),fu=n($,"LI",{});var Dye=s(fu);yle=n(Dye,"STRONG",{});var Got=s(yle);Gbo=r(Got,"opt"),Got.forEach(t),Obo=r(Dye," \u2014 "),qq=n(Dye,"A",{href:!0});var Oot=s(qq);Vbo=r(Oot,"OPTModel"),Oot.forEach(t),Xbo=r(Dye," (OPT model)"),Dye.forEach(t),zbo=i($),mu=n($,"LI",{});var Gye=s(mu);Lle=n(Gye,"STRONG",{});var Vot=s(Lle);Wbo=r(Vot,"pegasus"),Vot.forEach(t),Qbo=r(Gye," \u2014 "),Nq=n(Gye,"A",{href:!0});var Xot=s(Nq);Hbo=r(Xot,"PegasusModel"),Xot.forEach(t),Ubo=r(Gye," (Pegasus model)"),Gye.forEach(t),Jbo=i($),gu=n($,"LI",{});var Oye=s(gu);xle=n(Oye,"STRONG",{});var zot=s(xle);Ybo=r(zot,"perceiver"),zot.forEach(t),Kbo=r(Oye," \u2014 "),jq=n(Oye,"A",{href:!0});var Wot=s(jq);Zbo=r(Wot,"PerceiverModel"),Wot.forEach(t),e2o=r(Oye," (Perceiver model)"),Oye.forEach(t),o2o=i($),hu=n($,"LI",{});var Vye=s(hu);$le=n(Vye,"STRONG",{});var Qot=s($le);r2o=r(Qot,"plbart"),Qot.forEach(t),t2o=r(Vye," \u2014 "),Dq=n(Vye,"A",{href:!0});var Hot=s(Dq);a2o=r(Hot,"PLBartModel"),Hot.forEach(t),n2o=r(Vye," (PLBart model)"),Vye.forEach(t),s2o=i($),pu=n($,"LI",{});var Xye=s(pu);kle=n(Xye,"STRONG",{});var Uot=s(kle);l2o=r(Uot,"poolformer"),Uot.forEach(t),i2o=r(Xye," \u2014 "),Gq=n(Xye,"A",{href:!0});var Jot=s(Gq);d2o=r(Jot,"PoolFormerModel"),Jot.forEach(t),c2o=r(Xye," (PoolFormer model)"),Xye.forEach(t),f2o=i($),uu=n($,"LI",{});var zye=s(uu);Sle=n(zye,"STRONG",{});var Yot=s(Sle);m2o=r(Yot,"prophetnet"),Yot.forEach(t),g2o=r(zye," \u2014 "),Oq=n(zye,"A",{href:!0});var Kot=s(Oq);h2o=r(Kot,"ProphetNetModel"),Kot.forEach(t),p2o=r(zye," (ProphetNet model)"),zye.forEach(t),u2o=i($),_u=n($,"LI",{});var Wye=s(_u);Rle=n(Wye,"STRONG",{});var Zot=s(Rle);_2o=r(Zot,"qdqbert"),Zot.forEach(t),b2o=r(Wye," \u2014 "),Vq=n(Wye,"A",{href:!0});var ert=s(Vq);v2o=r(ert,"QDQBertModel"),ert.forEach(t),F2o=r(Wye," (QDQBert model)"),Wye.forEach(t),T2o=i($),bu=n($,"LI",{});var Qye=s(bu);Ple=n(Qye,"STRONG",{});var ort=s(Ple);M2o=r(ort,"reformer"),ort.forEach(t),E2o=r(Qye," \u2014 "),Xq=n(Qye,"A",{href:!0});var rrt=s(Xq);C2o=r(rrt,"ReformerModel"),rrt.forEach(t),w2o=r(Qye," (Reformer model)"),Qye.forEach(t),A2o=i($),vu=n($,"LI",{});var Hye=s(vu);Ble=n(Hye,"STRONG",{});var trt=s(Ble);y2o=r(trt,"regnet"),trt.forEach(t),L2o=r(Hye," \u2014 "),zq=n(Hye,"A",{href:!0});var art=s(zq);x2o=r(art,"RegNetModel"),art.forEach(t),$2o=r(Hye," (RegNet model)"),Hye.forEach(t),k2o=i($),Fu=n($,"LI",{});var Uye=s(Fu);Ile=n(Uye,"STRONG",{});var nrt=s(Ile);S2o=r(nrt,"rembert"),nrt.forEach(t),R2o=r(Uye," \u2014 "),Wq=n(Uye,"A",{href:!0});var srt=s(Wq);P2o=r(srt,"RemBertModel"),srt.forEach(t),B2o=r(Uye," (RemBERT model)"),Uye.forEach(t),I2o=i($),Tu=n($,"LI",{});var Jye=s(Tu);qle=n(Jye,"STRONG",{});var lrt=s(qle);q2o=r(lrt,"resnet"),lrt.forEach(t),N2o=r(Jye," \u2014 "),Qq=n(Jye,"A",{href:!0});var irt=s(Qq);j2o=r(irt,"ResNetModel"),irt.forEach(t),D2o=r(Jye," (ResNet model)"),Jye.forEach(t),G2o=i($),Mu=n($,"LI",{});var Yye=s(Mu);Nle=n(Yye,"STRONG",{});var drt=s(Nle);O2o=r(drt,"retribert"),drt.forEach(t),V2o=r(Yye," \u2014 "),Hq=n(Yye,"A",{href:!0});var crt=s(Hq);X2o=r(crt,"RetriBertModel"),crt.forEach(t),z2o=r(Yye," (RetriBERT model)"),Yye.forEach(t),W2o=i($),Eu=n($,"LI",{});var Kye=s(Eu);jle=n(Kye,"STRONG",{});var frt=s(jle);Q2o=r(frt,"roberta"),frt.forEach(t),H2o=r(Kye," \u2014 "),Uq=n(Kye,"A",{href:!0});var mrt=s(Uq);U2o=r(mrt,"RobertaModel"),mrt.forEach(t),J2o=r(Kye," (RoBERTa model)"),Kye.forEach(t),Y2o=i($),Cu=n($,"LI",{});var Zye=s(Cu);Dle=n(Zye,"STRONG",{});var grt=s(Dle);K2o=r(grt,"roformer"),grt.forEach(t),Z2o=r(Zye," \u2014 "),Jq=n(Zye,"A",{href:!0});var hrt=s(Jq);e4o=r(hrt,"RoFormerModel"),hrt.forEach(t),o4o=r(Zye," (RoFormer model)"),Zye.forEach(t),r4o=i($),wu=n($,"LI",{});var eLe=s(wu);Gle=n(eLe,"STRONG",{});var prt=s(Gle);t4o=r(prt,"segformer"),prt.forEach(t),a4o=r(eLe," \u2014 "),Yq=n(eLe,"A",{href:!0});var urt=s(Yq);n4o=r(urt,"SegformerModel"),urt.forEach(t),s4o=r(eLe," (SegFormer model)"),eLe.forEach(t),l4o=i($),Au=n($,"LI",{});var oLe=s(Au);Ole=n(oLe,"STRONG",{});var _rt=s(Ole);i4o=r(_rt,"sew"),_rt.forEach(t),d4o=r(oLe," \u2014 "),Kq=n(oLe,"A",{href:!0});var brt=s(Kq);c4o=r(brt,"SEWModel"),brt.forEach(t),f4o=r(oLe," (SEW model)"),oLe.forEach(t),m4o=i($),yu=n($,"LI",{});var rLe=s(yu);Vle=n(rLe,"STRONG",{});var vrt=s(Vle);g4o=r(vrt,"sew-d"),vrt.forEach(t),h4o=r(rLe," \u2014 "),Zq=n(rLe,"A",{href:!0});var Frt=s(Zq);p4o=r(Frt,"SEWDModel"),Frt.forEach(t),u4o=r(rLe," (SEW-D model)"),rLe.forEach(t),_4o=i($),Lu=n($,"LI",{});var tLe=s(Lu);Xle=n(tLe,"STRONG",{});var Trt=s(Xle);b4o=r(Trt,"speech_to_text"),Trt.forEach(t),v4o=r(tLe," \u2014 "),eN=n(tLe,"A",{href:!0});var Mrt=s(eN);F4o=r(Mrt,"Speech2TextModel"),Mrt.forEach(t),T4o=r(tLe," (Speech2Text model)"),tLe.forEach(t),M4o=i($),xu=n($,"LI",{});var aLe=s(xu);zle=n(aLe,"STRONG",{});var Ert=s(zle);E4o=r(Ert,"splinter"),Ert.forEach(t),C4o=r(aLe," \u2014 "),oN=n(aLe,"A",{href:!0});var Crt=s(oN);w4o=r(Crt,"SplinterModel"),Crt.forEach(t),A4o=r(aLe," (Splinter model)"),aLe.forEach(t),y4o=i($),$u=n($,"LI",{});var nLe=s($u);Wle=n(nLe,"STRONG",{});var wrt=s(Wle);L4o=r(wrt,"squeezebert"),wrt.forEach(t),x4o=r(nLe," \u2014 "),rN=n(nLe,"A",{href:!0});var Art=s(rN);$4o=r(Art,"SqueezeBertModel"),Art.forEach(t),k4o=r(nLe," (SqueezeBERT model)"),nLe.forEach(t),S4o=i($),ku=n($,"LI",{});var sLe=s(ku);Qle=n(sLe,"STRONG",{});var yrt=s(Qle);R4o=r(yrt,"swin"),yrt.forEach(t),P4o=r(sLe," \u2014 "),tN=n(sLe,"A",{href:!0});var Lrt=s(tN);B4o=r(Lrt,"SwinModel"),Lrt.forEach(t),I4o=r(sLe," (Swin model)"),sLe.forEach(t),q4o=i($),Su=n($,"LI",{});var lLe=s(Su);Hle=n(lLe,"STRONG",{});var xrt=s(Hle);N4o=r(xrt,"t5"),xrt.forEach(t),j4o=r(lLe," \u2014 "),aN=n(lLe,"A",{href:!0});var $rt=s(aN);D4o=r($rt,"T5Model"),$rt.forEach(t),G4o=r(lLe," (T5 model)"),lLe.forEach(t),O4o=i($),Ru=n($,"LI",{});var iLe=s(Ru);Ule=n(iLe,"STRONG",{});var krt=s(Ule);V4o=r(krt,"tapas"),krt.forEach(t),X4o=r(iLe," \u2014 "),nN=n(iLe,"A",{href:!0});var Srt=s(nN);z4o=r(Srt,"TapasModel"),Srt.forEach(t),W4o=r(iLe," (TAPAS model)"),iLe.forEach(t),Q4o=i($),Pu=n($,"LI",{});var dLe=s(Pu);Jle=n(dLe,"STRONG",{});var Rrt=s(Jle);H4o=r(Rrt,"trajectory_transformer"),Rrt.forEach(t),U4o=r(dLe," \u2014 "),sN=n(dLe,"A",{href:!0});var Prt=s(sN);J4o=r(Prt,"TrajectoryTransformerModel"),Prt.forEach(t),Y4o=r(dLe," (Trajectory Transformer model)"),dLe.forEach(t),K4o=i($),Bu=n($,"LI",{});var cLe=s(Bu);Yle=n(cLe,"STRONG",{});var Brt=s(Yle);Z4o=r(Brt,"transfo-xl"),Brt.forEach(t),evo=r(cLe," \u2014 "),lN=n(cLe,"A",{href:!0});var Irt=s(lN);ovo=r(Irt,"TransfoXLModel"),Irt.forEach(t),rvo=r(cLe," (Transformer-XL model)"),cLe.forEach(t),tvo=i($),Iu=n($,"LI",{});var fLe=s(Iu);Kle=n(fLe,"STRONG",{});var qrt=s(Kle);avo=r(qrt,"unispeech"),qrt.forEach(t),nvo=r(fLe," \u2014 "),iN=n(fLe,"A",{href:!0});var Nrt=s(iN);svo=r(Nrt,"UniSpeechModel"),Nrt.forEach(t),lvo=r(fLe," (UniSpeech model)"),fLe.forEach(t),ivo=i($),qu=n($,"LI",{});var mLe=s(qu);Zle=n(mLe,"STRONG",{});var jrt=s(Zle);dvo=r(jrt,"unispeech-sat"),jrt.forEach(t),cvo=r(mLe," \u2014 "),dN=n(mLe,"A",{href:!0});var Drt=s(dN);fvo=r(Drt,"UniSpeechSatModel"),Drt.forEach(t),mvo=r(mLe," (UniSpeechSat model)"),mLe.forEach(t),gvo=i($),Nu=n($,"LI",{});var gLe=s(Nu);eie=n(gLe,"STRONG",{});var Grt=s(eie);hvo=r(Grt,"van"),Grt.forEach(t),pvo=r(gLe," \u2014 "),cN=n(gLe,"A",{href:!0});var Ort=s(cN);uvo=r(Ort,"VanModel"),Ort.forEach(t),_vo=r(gLe," (VAN model)"),gLe.forEach(t),bvo=i($),ju=n($,"LI",{});var hLe=s(ju);oie=n(hLe,"STRONG",{});var Vrt=s(oie);vvo=r(Vrt,"vilt"),Vrt.forEach(t),Fvo=r(hLe," \u2014 "),fN=n(hLe,"A",{href:!0});var Xrt=s(fN);Tvo=r(Xrt,"ViltModel"),Xrt.forEach(t),Mvo=r(hLe," (ViLT model)"),hLe.forEach(t),Evo=i($),Du=n($,"LI",{});var pLe=s(Du);rie=n(pLe,"STRONG",{});var zrt=s(rie);Cvo=r(zrt,"vision-text-dual-encoder"),zrt.forEach(t),wvo=r(pLe," \u2014 "),mN=n(pLe,"A",{href:!0});var Wrt=s(mN);Avo=r(Wrt,"VisionTextDualEncoderModel"),Wrt.forEach(t),yvo=r(pLe," (VisionTextDualEncoder model)"),pLe.forEach(t),Lvo=i($),Gu=n($,"LI",{});var uLe=s(Gu);tie=n(uLe,"STRONG",{});var Qrt=s(tie);xvo=r(Qrt,"visual_bert"),Qrt.forEach(t),$vo=r(uLe," \u2014 "),gN=n(uLe,"A",{href:!0});var Hrt=s(gN);kvo=r(Hrt,"VisualBertModel"),Hrt.forEach(t),Svo=r(uLe," (VisualBert model)"),uLe.forEach(t),Rvo=i($),Ou=n($,"LI",{});var _Le=s(Ou);aie=n(_Le,"STRONG",{});var Urt=s(aie);Pvo=r(Urt,"vit"),Urt.forEach(t),Bvo=r(_Le," \u2014 "),hN=n(_Le,"A",{href:!0});var Jrt=s(hN);Ivo=r(Jrt,"ViTModel"),Jrt.forEach(t),qvo=r(_Le," (ViT model)"),_Le.forEach(t),Nvo=i($),Vu=n($,"LI",{});var bLe=s(Vu);nie=n(bLe,"STRONG",{});var Yrt=s(nie);jvo=r(Yrt,"vit_mae"),Yrt.forEach(t),Dvo=r(bLe," \u2014 "),pN=n(bLe,"A",{href:!0});var Krt=s(pN);Gvo=r(Krt,"ViTMAEModel"),Krt.forEach(t),Ovo=r(bLe," (ViTMAE model)"),bLe.forEach(t),Vvo=i($),Xu=n($,"LI",{});var vLe=s(Xu);sie=n(vLe,"STRONG",{});var Zrt=s(sie);Xvo=r(Zrt,"wav2vec2"),Zrt.forEach(t),zvo=r(vLe," \u2014 "),uN=n(vLe,"A",{href:!0});var ett=s(uN);Wvo=r(ett,"Wav2Vec2Model"),ett.forEach(t),Qvo=r(vLe," (Wav2Vec2 model)"),vLe.forEach(t),Hvo=i($),zu=n($,"LI",{});var FLe=s(zu);lie=n(FLe,"STRONG",{});var ott=s(lie);Uvo=r(ott,"wav2vec2-conformer"),ott.forEach(t),Jvo=r(FLe," \u2014 "),_N=n(FLe,"A",{href:!0});var rtt=s(_N);Yvo=r(rtt,"Wav2Vec2ConformerModel"),rtt.forEach(t),Kvo=r(FLe," (Wav2Vec2-Conformer model)"),FLe.forEach(t),Zvo=i($),Wu=n($,"LI",{});var TLe=s(Wu);iie=n(TLe,"STRONG",{});var ttt=s(iie);eFo=r(ttt,"wavlm"),ttt.forEach(t),oFo=r(TLe," \u2014 "),bN=n(TLe,"A",{href:!0});var att=s(bN);rFo=r(att,"WavLMModel"),att.forEach(t),tFo=r(TLe," (WavLM model)"),TLe.forEach(t),aFo=i($),Qu=n($,"LI",{});var MLe=s(Qu);die=n(MLe,"STRONG",{});var ntt=s(die);nFo=r(ntt,"xglm"),ntt.forEach(t),sFo=r(MLe," \u2014 "),vN=n(MLe,"A",{href:!0});var stt=s(vN);lFo=r(stt,"XGLMModel"),stt.forEach(t),iFo=r(MLe," (XGLM model)"),MLe.forEach(t),dFo=i($),Hu=n($,"LI",{});var ELe=s(Hu);cie=n(ELe,"STRONG",{});var ltt=s(cie);cFo=r(ltt,"xlm"),ltt.forEach(t),fFo=r(ELe," \u2014 "),FN=n(ELe,"A",{href:!0});var itt=s(FN);mFo=r(itt,"XLMModel"),itt.forEach(t),gFo=r(ELe," (XLM model)"),ELe.forEach(t),hFo=i($),Uu=n($,"LI",{});var CLe=s(Uu);fie=n(CLe,"STRONG",{});var dtt=s(fie);pFo=r(dtt,"xlm-prophetnet"),dtt.forEach(t),uFo=r(CLe," \u2014 "),TN=n(CLe,"A",{href:!0});var ctt=s(TN);_Fo=r(ctt,"XLMProphetNetModel"),ctt.forEach(t),bFo=r(CLe," (XLMProphetNet model)"),CLe.forEach(t),vFo=i($),Ju=n($,"LI",{});var wLe=s(Ju);mie=n(wLe,"STRONG",{});var ftt=s(mie);FFo=r(ftt,"xlm-roberta"),ftt.forEach(t),TFo=r(wLe," \u2014 "),MN=n(wLe,"A",{href:!0});var mtt=s(MN);MFo=r(mtt,"XLMRobertaModel"),mtt.forEach(t),EFo=r(wLe," (XLM-RoBERTa model)"),wLe.forEach(t),CFo=i($),Yu=n($,"LI",{});var ALe=s(Yu);gie=n(ALe,"STRONG",{});var gtt=s(gie);wFo=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),AFo=r(ALe," \u2014 "),EN=n(ALe,"A",{href:!0});var htt=s(EN);yFo=r(htt,"XLMRobertaXLModel"),htt.forEach(t),LFo=r(ALe," (XLM-RoBERTa-XL model)"),ALe.forEach(t),xFo=i($),Ku=n($,"LI",{});var yLe=s(Ku);hie=n(yLe,"STRONG",{});var ptt=s(hie);$Fo=r(ptt,"xlnet"),ptt.forEach(t),kFo=r(yLe," \u2014 "),CN=n(yLe,"A",{href:!0});var utt=s(CN);SFo=r(utt,"XLNetModel"),utt.forEach(t),RFo=r(yLe," (XLNet model)"),yLe.forEach(t),PFo=i($),Zu=n($,"LI",{});var LLe=s(Zu);pie=n(LLe,"STRONG",{});var _tt=s(pie);BFo=r(_tt,"yolos"),_tt.forEach(t),IFo=r(LLe," \u2014 "),wN=n(LLe,"A",{href:!0});var btt=s(wN);qFo=r(btt,"YolosModel"),btt.forEach(t),NFo=r(LLe," (YOLOS model)"),LLe.forEach(t),jFo=i($),e_=n($,"LI",{});var xLe=s(e_);uie=n(xLe,"STRONG",{});var vtt=s(uie);DFo=r(vtt,"yoso"),vtt.forEach(t),GFo=r(xLe," \u2014 "),AN=n(xLe,"A",{href:!0});var Ftt=s(AN);OFo=r(Ftt,"YosoModel"),Ftt.forEach(t),VFo=r(xLe," (YOSO model)"),xLe.forEach(t),$.forEach(t),XFo=i(oa),o_=n(oa,"P",{});var $Le=s(o_);zFo=r($Le,"The model is set in evaluation mode by default using "),_ie=n($Le,"CODE",{});var Ttt=s(_ie);WFo=r(Ttt,"model.eval()"),Ttt.forEach(t),QFo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bie=n($Le,"CODE",{});var Mtt=s(bie);HFo=r(Mtt,"model.train()"),Mtt.forEach(t),$Le.forEach(t),UFo=i(oa),T(r_.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),gNe=i(f),Li=n(f,"H2",{class:!0});var _De=s(Li);t_=n(_De,"A",{id:!0,class:!0,href:!0});var Ett=s(t_);vie=n(Ett,"SPAN",{});var Ctt=s(vie);T(aL.$$.fragment,Ctt),Ctt.forEach(t),Ett.forEach(t),JFo=i(_De),Fie=n(_De,"SPAN",{});var wtt=s(Fie);YFo=r(wtt,"AutoModelForPreTraining"),wtt.forEach(t),_De.forEach(t),hNe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(nL.$$.fragment,Os),KFo=i(Os),xi=n(Os,"P",{});var _Z=s(xi);ZFo=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),yN=n(_Z,"A",{href:!0});var Att=s(yN);e6o=r(Att,"from_pretrained()"),Att.forEach(t),o6o=r(_Z," class method or the "),LN=n(_Z,"A",{href:!0});var ytt=s(LN);r6o=r(ytt,"from_config()"),ytt.forEach(t),t6o=r(_Z,` class
method.`),_Z.forEach(t),a6o=i(Os),sL=n(Os,"P",{});var bDe=s(sL);n6o=r(bDe,"This class cannot be instantiated directly using "),Tie=n(bDe,"CODE",{});var Ltt=s(Tie);s6o=r(Ltt,"__init__()"),Ltt.forEach(t),l6o=r(bDe," (throws an error)."),bDe.forEach(t),i6o=i(Os),at=n(Os,"DIV",{class:!0});var Rw=s(at);T(lL.$$.fragment,Rw),d6o=i(Rw),Mie=n(Rw,"P",{});var xtt=s(Mie);c6o=r(xtt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xtt.forEach(t),f6o=i(Rw),$i=n(Rw,"P",{});var bZ=s($i);m6o=r(bZ,`Note:
Loading a model from its configuration file does `),Eie=n(bZ,"STRONG",{});var $tt=s(Eie);g6o=r($tt,"not"),$tt.forEach(t),h6o=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=n(bZ,"A",{href:!0});var ktt=s(xN);p6o=r(ktt,"from_pretrained()"),ktt.forEach(t),u6o=r(bZ," to load the model weights."),bZ.forEach(t),_6o=i(Rw),T(a_.$$.fragment,Rw),Rw.forEach(t),b6o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(iL.$$.fragment,ra),v6o=i(ra),Cie=n(ra,"P",{});var Stt=s(Cie);F6o=r(Stt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Stt.forEach(t),T6o=i(ra),xa=n(ra,"P",{});var Pw=s(xa);M6o=r(Pw,"The model class to instantiate is selected based on the "),wie=n(Pw,"CODE",{});var Rtt=s(wie);E6o=r(Rtt,"model_type"),Rtt.forEach(t),C6o=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Aie=n(Pw,"CODE",{});var Ptt=s(Aie);w6o=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),A6o=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yie=n(Pw,"CODE",{});var Btt=s(yie);y6o=r(Btt,"pretrained_model_name_or_path"),Btt.forEach(t),L6o=r(Pw,":"),Pw.forEach(t),x6o=i(ra),G=n(ra,"UL",{});var O=s(G);n_=n(O,"LI",{});var kLe=s(n_);Lie=n(kLe,"STRONG",{});var Itt=s(Lie);$6o=r(Itt,"albert"),Itt.forEach(t),k6o=r(kLe," \u2014 "),$N=n(kLe,"A",{href:!0});var qtt=s($N);S6o=r(qtt,"AlbertForPreTraining"),qtt.forEach(t),R6o=r(kLe," (ALBERT model)"),kLe.forEach(t),P6o=i(O),s_=n(O,"LI",{});var SLe=s(s_);xie=n(SLe,"STRONG",{});var Ntt=s(xie);B6o=r(Ntt,"bart"),Ntt.forEach(t),I6o=r(SLe," \u2014 "),kN=n(SLe,"A",{href:!0});var jtt=s(kN);q6o=r(jtt,"BartForConditionalGeneration"),jtt.forEach(t),N6o=r(SLe," (BART model)"),SLe.forEach(t),j6o=i(O),l_=n(O,"LI",{});var RLe=s(l_);$ie=n(RLe,"STRONG",{});var Dtt=s($ie);D6o=r(Dtt,"bert"),Dtt.forEach(t),G6o=r(RLe," \u2014 "),SN=n(RLe,"A",{href:!0});var Gtt=s(SN);O6o=r(Gtt,"BertForPreTraining"),Gtt.forEach(t),V6o=r(RLe," (BERT model)"),RLe.forEach(t),X6o=i(O),i_=n(O,"LI",{});var PLe=s(i_);kie=n(PLe,"STRONG",{});var Ott=s(kie);z6o=r(Ott,"big_bird"),Ott.forEach(t),W6o=r(PLe," \u2014 "),RN=n(PLe,"A",{href:!0});var Vtt=s(RN);Q6o=r(Vtt,"BigBirdForPreTraining"),Vtt.forEach(t),H6o=r(PLe," (BigBird model)"),PLe.forEach(t),U6o=i(O),d_=n(O,"LI",{});var BLe=s(d_);Sie=n(BLe,"STRONG",{});var Xtt=s(Sie);J6o=r(Xtt,"camembert"),Xtt.forEach(t),Y6o=r(BLe," \u2014 "),PN=n(BLe,"A",{href:!0});var ztt=s(PN);K6o=r(ztt,"CamembertForMaskedLM"),ztt.forEach(t),Z6o=r(BLe," (CamemBERT model)"),BLe.forEach(t),eTo=i(O),c_=n(O,"LI",{});var ILe=s(c_);Rie=n(ILe,"STRONG",{});var Wtt=s(Rie);oTo=r(Wtt,"ctrl"),Wtt.forEach(t),rTo=r(ILe," \u2014 "),BN=n(ILe,"A",{href:!0});var Qtt=s(BN);tTo=r(Qtt,"CTRLLMHeadModel"),Qtt.forEach(t),aTo=r(ILe," (CTRL model)"),ILe.forEach(t),nTo=i(O),f_=n(O,"LI",{});var qLe=s(f_);Pie=n(qLe,"STRONG",{});var Htt=s(Pie);sTo=r(Htt,"data2vec-text"),Htt.forEach(t),lTo=r(qLe," \u2014 "),IN=n(qLe,"A",{href:!0});var Utt=s(IN);iTo=r(Utt,"Data2VecTextForMaskedLM"),Utt.forEach(t),dTo=r(qLe," (Data2VecText model)"),qLe.forEach(t),cTo=i(O),m_=n(O,"LI",{});var NLe=s(m_);Bie=n(NLe,"STRONG",{});var Jtt=s(Bie);fTo=r(Jtt,"deberta"),Jtt.forEach(t),mTo=r(NLe," \u2014 "),qN=n(NLe,"A",{href:!0});var Ytt=s(qN);gTo=r(Ytt,"DebertaForMaskedLM"),Ytt.forEach(t),hTo=r(NLe," (DeBERTa model)"),NLe.forEach(t),pTo=i(O),g_=n(O,"LI",{});var jLe=s(g_);Iie=n(jLe,"STRONG",{});var Ktt=s(Iie);uTo=r(Ktt,"deberta-v2"),Ktt.forEach(t),_To=r(jLe," \u2014 "),NN=n(jLe,"A",{href:!0});var Ztt=s(NN);bTo=r(Ztt,"DebertaV2ForMaskedLM"),Ztt.forEach(t),vTo=r(jLe," (DeBERTa-v2 model)"),jLe.forEach(t),FTo=i(O),h_=n(O,"LI",{});var DLe=s(h_);qie=n(DLe,"STRONG",{});var eat=s(qie);TTo=r(eat,"distilbert"),eat.forEach(t),MTo=r(DLe," \u2014 "),jN=n(DLe,"A",{href:!0});var oat=s(jN);ETo=r(oat,"DistilBertForMaskedLM"),oat.forEach(t),CTo=r(DLe," (DistilBERT model)"),DLe.forEach(t),wTo=i(O),p_=n(O,"LI",{});var GLe=s(p_);Nie=n(GLe,"STRONG",{});var rat=s(Nie);ATo=r(rat,"electra"),rat.forEach(t),yTo=r(GLe," \u2014 "),DN=n(GLe,"A",{href:!0});var tat=s(DN);LTo=r(tat,"ElectraForPreTraining"),tat.forEach(t),xTo=r(GLe," (ELECTRA model)"),GLe.forEach(t),$To=i(O),u_=n(O,"LI",{});var OLe=s(u_);jie=n(OLe,"STRONG",{});var aat=s(jie);kTo=r(aat,"flaubert"),aat.forEach(t),STo=r(OLe," \u2014 "),GN=n(OLe,"A",{href:!0});var nat=s(GN);RTo=r(nat,"FlaubertWithLMHeadModel"),nat.forEach(t),PTo=r(OLe," (FlauBERT model)"),OLe.forEach(t),BTo=i(O),__=n(O,"LI",{});var VLe=s(__);Die=n(VLe,"STRONG",{});var sat=s(Die);ITo=r(sat,"flava"),sat.forEach(t),qTo=r(VLe," \u2014 "),ON=n(VLe,"A",{href:!0});var lat=s(ON);NTo=r(lat,"FlavaForPreTraining"),lat.forEach(t),jTo=r(VLe," (Flava model)"),VLe.forEach(t),DTo=i(O),b_=n(O,"LI",{});var XLe=s(b_);Gie=n(XLe,"STRONG",{});var iat=s(Gie);GTo=r(iat,"fnet"),iat.forEach(t),OTo=r(XLe," \u2014 "),VN=n(XLe,"A",{href:!0});var dat=s(VN);VTo=r(dat,"FNetForPreTraining"),dat.forEach(t),XTo=r(XLe," (FNet model)"),XLe.forEach(t),zTo=i(O),v_=n(O,"LI",{});var zLe=s(v_);Oie=n(zLe,"STRONG",{});var cat=s(Oie);WTo=r(cat,"fsmt"),cat.forEach(t),QTo=r(zLe," \u2014 "),XN=n(zLe,"A",{href:!0});var fat=s(XN);HTo=r(fat,"FSMTForConditionalGeneration"),fat.forEach(t),UTo=r(zLe," (FairSeq Machine-Translation model)"),zLe.forEach(t),JTo=i(O),F_=n(O,"LI",{});var WLe=s(F_);Vie=n(WLe,"STRONG",{});var mat=s(Vie);YTo=r(mat,"funnel"),mat.forEach(t),KTo=r(WLe," \u2014 "),zN=n(WLe,"A",{href:!0});var gat=s(zN);ZTo=r(gat,"FunnelForPreTraining"),gat.forEach(t),eMo=r(WLe," (Funnel Transformer model)"),WLe.forEach(t),oMo=i(O),T_=n(O,"LI",{});var QLe=s(T_);Xie=n(QLe,"STRONG",{});var hat=s(Xie);rMo=r(hat,"gpt2"),hat.forEach(t),tMo=r(QLe," \u2014 "),WN=n(QLe,"A",{href:!0});var pat=s(WN);aMo=r(pat,"GPT2LMHeadModel"),pat.forEach(t),nMo=r(QLe," (OpenAI GPT-2 model)"),QLe.forEach(t),sMo=i(O),M_=n(O,"LI",{});var HLe=s(M_);zie=n(HLe,"STRONG",{});var uat=s(zie);lMo=r(uat,"ibert"),uat.forEach(t),iMo=r(HLe," \u2014 "),QN=n(HLe,"A",{href:!0});var _at=s(QN);dMo=r(_at,"IBertForMaskedLM"),_at.forEach(t),cMo=r(HLe," (I-BERT model)"),HLe.forEach(t),fMo=i(O),E_=n(O,"LI",{});var ULe=s(E_);Wie=n(ULe,"STRONG",{});var bat=s(Wie);mMo=r(bat,"layoutlm"),bat.forEach(t),gMo=r(ULe," \u2014 "),HN=n(ULe,"A",{href:!0});var vat=s(HN);hMo=r(vat,"LayoutLMForMaskedLM"),vat.forEach(t),pMo=r(ULe," (LayoutLM model)"),ULe.forEach(t),uMo=i(O),C_=n(O,"LI",{});var JLe=s(C_);Qie=n(JLe,"STRONG",{});var Fat=s(Qie);_Mo=r(Fat,"longformer"),Fat.forEach(t),bMo=r(JLe," \u2014 "),UN=n(JLe,"A",{href:!0});var Tat=s(UN);vMo=r(Tat,"LongformerForMaskedLM"),Tat.forEach(t),FMo=r(JLe," (Longformer model)"),JLe.forEach(t),TMo=i(O),w_=n(O,"LI",{});var YLe=s(w_);Hie=n(YLe,"STRONG",{});var Mat=s(Hie);MMo=r(Mat,"lxmert"),Mat.forEach(t),EMo=r(YLe," \u2014 "),JN=n(YLe,"A",{href:!0});var Eat=s(JN);CMo=r(Eat,"LxmertForPreTraining"),Eat.forEach(t),wMo=r(YLe," (LXMERT model)"),YLe.forEach(t),AMo=i(O),A_=n(O,"LI",{});var KLe=s(A_);Uie=n(KLe,"STRONG",{});var Cat=s(Uie);yMo=r(Cat,"megatron-bert"),Cat.forEach(t),LMo=r(KLe," \u2014 "),YN=n(KLe,"A",{href:!0});var wat=s(YN);xMo=r(wat,"MegatronBertForPreTraining"),wat.forEach(t),$Mo=r(KLe," (MegatronBert model)"),KLe.forEach(t),kMo=i(O),y_=n(O,"LI",{});var ZLe=s(y_);Jie=n(ZLe,"STRONG",{});var Aat=s(Jie);SMo=r(Aat,"mobilebert"),Aat.forEach(t),RMo=r(ZLe," \u2014 "),KN=n(ZLe,"A",{href:!0});var yat=s(KN);PMo=r(yat,"MobileBertForPreTraining"),yat.forEach(t),BMo=r(ZLe," (MobileBERT model)"),ZLe.forEach(t),IMo=i(O),L_=n(O,"LI",{});var e8e=s(L_);Yie=n(e8e,"STRONG",{});var Lat=s(Yie);qMo=r(Lat,"mpnet"),Lat.forEach(t),NMo=r(e8e," \u2014 "),ZN=n(e8e,"A",{href:!0});var xat=s(ZN);jMo=r(xat,"MPNetForMaskedLM"),xat.forEach(t),DMo=r(e8e," (MPNet model)"),e8e.forEach(t),GMo=i(O),x_=n(O,"LI",{});var o8e=s(x_);Kie=n(o8e,"STRONG",{});var $at=s(Kie);OMo=r($at,"openai-gpt"),$at.forEach(t),VMo=r(o8e," \u2014 "),ej=n(o8e,"A",{href:!0});var kat=s(ej);XMo=r(kat,"OpenAIGPTLMHeadModel"),kat.forEach(t),zMo=r(o8e," (OpenAI GPT model)"),o8e.forEach(t),WMo=i(O),$_=n(O,"LI",{});var r8e=s($_);Zie=n(r8e,"STRONG",{});var Sat=s(Zie);QMo=r(Sat,"retribert"),Sat.forEach(t),HMo=r(r8e," \u2014 "),oj=n(r8e,"A",{href:!0});var Rat=s(oj);UMo=r(Rat,"RetriBertModel"),Rat.forEach(t),JMo=r(r8e," (RetriBERT model)"),r8e.forEach(t),YMo=i(O),k_=n(O,"LI",{});var t8e=s(k_);ede=n(t8e,"STRONG",{});var Pat=s(ede);KMo=r(Pat,"roberta"),Pat.forEach(t),ZMo=r(t8e," \u2014 "),rj=n(t8e,"A",{href:!0});var Bat=s(rj);eEo=r(Bat,"RobertaForMaskedLM"),Bat.forEach(t),oEo=r(t8e," (RoBERTa model)"),t8e.forEach(t),rEo=i(O),S_=n(O,"LI",{});var a8e=s(S_);ode=n(a8e,"STRONG",{});var Iat=s(ode);tEo=r(Iat,"splinter"),Iat.forEach(t),aEo=r(a8e," \u2014 "),tj=n(a8e,"A",{href:!0});var qat=s(tj);nEo=r(qat,"SplinterForPreTraining"),qat.forEach(t),sEo=r(a8e," (Splinter model)"),a8e.forEach(t),lEo=i(O),R_=n(O,"LI",{});var n8e=s(R_);rde=n(n8e,"STRONG",{});var Nat=s(rde);iEo=r(Nat,"squeezebert"),Nat.forEach(t),dEo=r(n8e," \u2014 "),aj=n(n8e,"A",{href:!0});var jat=s(aj);cEo=r(jat,"SqueezeBertForMaskedLM"),jat.forEach(t),fEo=r(n8e," (SqueezeBERT model)"),n8e.forEach(t),mEo=i(O),P_=n(O,"LI",{});var s8e=s(P_);tde=n(s8e,"STRONG",{});var Dat=s(tde);gEo=r(Dat,"t5"),Dat.forEach(t),hEo=r(s8e," \u2014 "),nj=n(s8e,"A",{href:!0});var Gat=s(nj);pEo=r(Gat,"T5ForConditionalGeneration"),Gat.forEach(t),uEo=r(s8e," (T5 model)"),s8e.forEach(t),_Eo=i(O),B_=n(O,"LI",{});var l8e=s(B_);ade=n(l8e,"STRONG",{});var Oat=s(ade);bEo=r(Oat,"tapas"),Oat.forEach(t),vEo=r(l8e," \u2014 "),sj=n(l8e,"A",{href:!0});var Vat=s(sj);FEo=r(Vat,"TapasForMaskedLM"),Vat.forEach(t),TEo=r(l8e," (TAPAS model)"),l8e.forEach(t),MEo=i(O),I_=n(O,"LI",{});var i8e=s(I_);nde=n(i8e,"STRONG",{});var Xat=s(nde);EEo=r(Xat,"transfo-xl"),Xat.forEach(t),CEo=r(i8e," \u2014 "),lj=n(i8e,"A",{href:!0});var zat=s(lj);wEo=r(zat,"TransfoXLLMHeadModel"),zat.forEach(t),AEo=r(i8e," (Transformer-XL model)"),i8e.forEach(t),yEo=i(O),q_=n(O,"LI",{});var d8e=s(q_);sde=n(d8e,"STRONG",{});var Wat=s(sde);LEo=r(Wat,"unispeech"),Wat.forEach(t),xEo=r(d8e," \u2014 "),ij=n(d8e,"A",{href:!0});var Qat=s(ij);$Eo=r(Qat,"UniSpeechForPreTraining"),Qat.forEach(t),kEo=r(d8e," (UniSpeech model)"),d8e.forEach(t),SEo=i(O),N_=n(O,"LI",{});var c8e=s(N_);lde=n(c8e,"STRONG",{});var Hat=s(lde);REo=r(Hat,"unispeech-sat"),Hat.forEach(t),PEo=r(c8e," \u2014 "),dj=n(c8e,"A",{href:!0});var Uat=s(dj);BEo=r(Uat,"UniSpeechSatForPreTraining"),Uat.forEach(t),IEo=r(c8e," (UniSpeechSat model)"),c8e.forEach(t),qEo=i(O),j_=n(O,"LI",{});var f8e=s(j_);ide=n(f8e,"STRONG",{});var Jat=s(ide);NEo=r(Jat,"visual_bert"),Jat.forEach(t),jEo=r(f8e," \u2014 "),cj=n(f8e,"A",{href:!0});var Yat=s(cj);DEo=r(Yat,"VisualBertForPreTraining"),Yat.forEach(t),GEo=r(f8e," (VisualBert model)"),f8e.forEach(t),OEo=i(O),D_=n(O,"LI",{});var m8e=s(D_);dde=n(m8e,"STRONG",{});var Kat=s(dde);VEo=r(Kat,"vit_mae"),Kat.forEach(t),XEo=r(m8e," \u2014 "),fj=n(m8e,"A",{href:!0});var Zat=s(fj);zEo=r(Zat,"ViTMAEForPreTraining"),Zat.forEach(t),WEo=r(m8e," (ViTMAE model)"),m8e.forEach(t),QEo=i(O),G_=n(O,"LI",{});var g8e=s(G_);cde=n(g8e,"STRONG",{});var ent=s(cde);HEo=r(ent,"wav2vec2"),ent.forEach(t),UEo=r(g8e," \u2014 "),mj=n(g8e,"A",{href:!0});var ont=s(mj);JEo=r(ont,"Wav2Vec2ForPreTraining"),ont.forEach(t),YEo=r(g8e," (Wav2Vec2 model)"),g8e.forEach(t),KEo=i(O),O_=n(O,"LI",{});var h8e=s(O_);fde=n(h8e,"STRONG",{});var rnt=s(fde);ZEo=r(rnt,"wav2vec2-conformer"),rnt.forEach(t),eCo=r(h8e," \u2014 "),gj=n(h8e,"A",{href:!0});var tnt=s(gj);oCo=r(tnt,"Wav2Vec2ConformerForPreTraining"),tnt.forEach(t),rCo=r(h8e," (Wav2Vec2-Conformer model)"),h8e.forEach(t),tCo=i(O),V_=n(O,"LI",{});var p8e=s(V_);mde=n(p8e,"STRONG",{});var ant=s(mde);aCo=r(ant,"xlm"),ant.forEach(t),nCo=r(p8e," \u2014 "),hj=n(p8e,"A",{href:!0});var nnt=s(hj);sCo=r(nnt,"XLMWithLMHeadModel"),nnt.forEach(t),lCo=r(p8e," (XLM model)"),p8e.forEach(t),iCo=i(O),X_=n(O,"LI",{});var u8e=s(X_);gde=n(u8e,"STRONG",{});var snt=s(gde);dCo=r(snt,"xlm-roberta"),snt.forEach(t),cCo=r(u8e," \u2014 "),pj=n(u8e,"A",{href:!0});var lnt=s(pj);fCo=r(lnt,"XLMRobertaForMaskedLM"),lnt.forEach(t),mCo=r(u8e," (XLM-RoBERTa model)"),u8e.forEach(t),gCo=i(O),z_=n(O,"LI",{});var _8e=s(z_);hde=n(_8e,"STRONG",{});var int=s(hde);hCo=r(int,"xlm-roberta-xl"),int.forEach(t),pCo=r(_8e," \u2014 "),uj=n(_8e,"A",{href:!0});var dnt=s(uj);uCo=r(dnt,"XLMRobertaXLForMaskedLM"),dnt.forEach(t),_Co=r(_8e," (XLM-RoBERTa-XL model)"),_8e.forEach(t),bCo=i(O),W_=n(O,"LI",{});var b8e=s(W_);pde=n(b8e,"STRONG",{});var cnt=s(pde);vCo=r(cnt,"xlnet"),cnt.forEach(t),FCo=r(b8e," \u2014 "),_j=n(b8e,"A",{href:!0});var fnt=s(_j);TCo=r(fnt,"XLNetLMHeadModel"),fnt.forEach(t),MCo=r(b8e," (XLNet model)"),b8e.forEach(t),O.forEach(t),ECo=i(ra),Q_=n(ra,"P",{});var v8e=s(Q_);CCo=r(v8e,"The model is set in evaluation mode by default using "),ude=n(v8e,"CODE",{});var mnt=s(ude);wCo=r(mnt,"model.eval()"),mnt.forEach(t),ACo=r(v8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(v8e,"CODE",{});var gnt=s(_de);yCo=r(gnt,"model.train()"),gnt.forEach(t),v8e.forEach(t),LCo=i(ra),T(H_.$$.fragment,ra),ra.forEach(t),Os.forEach(t),pNe=i(f),ki=n(f,"H2",{class:!0});var vDe=s(ki);U_=n(vDe,"A",{id:!0,class:!0,href:!0});var hnt=s(U_);bde=n(hnt,"SPAN",{});var pnt=s(bde);T(dL.$$.fragment,pnt),pnt.forEach(t),hnt.forEach(t),xCo=i(vDe),vde=n(vDe,"SPAN",{});var unt=s(vde);$Co=r(unt,"AutoModelForCausalLM"),unt.forEach(t),vDe.forEach(t),uNe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(cL.$$.fragment,Vs),kCo=i(Vs),Si=n(Vs,"P",{});var vZ=s(Si);SCo=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bj=n(vZ,"A",{href:!0});var _nt=s(bj);RCo=r(_nt,"from_pretrained()"),_nt.forEach(t),PCo=r(vZ," class method or the "),vj=n(vZ,"A",{href:!0});var bnt=s(vj);BCo=r(bnt,"from_config()"),bnt.forEach(t),ICo=r(vZ,` class
method.`),vZ.forEach(t),qCo=i(Vs),fL=n(Vs,"P",{});var FDe=s(fL);NCo=r(FDe,"This class cannot be instantiated directly using "),Fde=n(FDe,"CODE",{});var vnt=s(Fde);jCo=r(vnt,"__init__()"),vnt.forEach(t),DCo=r(FDe," (throws an error)."),FDe.forEach(t),GCo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Bw=s(nt);T(mL.$$.fragment,Bw),OCo=i(Bw),Tde=n(Bw,"P",{});var Fnt=s(Tde);VCo=r(Fnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fnt.forEach(t),XCo=i(Bw),Ri=n(Bw,"P",{});var FZ=s(Ri);zCo=r(FZ,`Note:
Loading a model from its configuration file does `),Mde=n(FZ,"STRONG",{});var Tnt=s(Mde);WCo=r(Tnt,"not"),Tnt.forEach(t),QCo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=n(FZ,"A",{href:!0});var Mnt=s(Fj);HCo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),UCo=r(FZ," to load the model weights."),FZ.forEach(t),JCo=i(Bw),T(J_.$$.fragment,Bw),Bw.forEach(t),YCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(gL.$$.fragment,ta),KCo=i(ta),Ede=n(ta,"P",{});var Ent=s(Ede);ZCo=r(Ent,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ent.forEach(t),e5o=i(ta),$a=n(ta,"P",{});var Iw=s($a);o5o=r(Iw,"The model class to instantiate is selected based on the "),Cde=n(Iw,"CODE",{});var Cnt=s(Cde);r5o=r(Cnt,"model_type"),Cnt.forEach(t),t5o=r(Iw,` property of the config object (either
passed as an argument or loaded from `),wde=n(Iw,"CODE",{});var wnt=s(wde);a5o=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),n5o=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=n(Iw,"CODE",{});var Ant=s(Ade);s5o=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),l5o=r(Iw,":"),Iw.forEach(t),i5o=i(ta),z=n(ta,"UL",{});var W=s(z);Y_=n(W,"LI",{});var F8e=s(Y_);yde=n(F8e,"STRONG",{});var ynt=s(yde);d5o=r(ynt,"bart"),ynt.forEach(t),c5o=r(F8e," \u2014 "),Tj=n(F8e,"A",{href:!0});var Lnt=s(Tj);f5o=r(Lnt,"BartForCausalLM"),Lnt.forEach(t),m5o=r(F8e," (BART model)"),F8e.forEach(t),g5o=i(W),K_=n(W,"LI",{});var T8e=s(K_);Lde=n(T8e,"STRONG",{});var xnt=s(Lde);h5o=r(xnt,"bert"),xnt.forEach(t),p5o=r(T8e," \u2014 "),Mj=n(T8e,"A",{href:!0});var $nt=s(Mj);u5o=r($nt,"BertLMHeadModel"),$nt.forEach(t),_5o=r(T8e," (BERT model)"),T8e.forEach(t),b5o=i(W),Z_=n(W,"LI",{});var M8e=s(Z_);xde=n(M8e,"STRONG",{});var knt=s(xde);v5o=r(knt,"bert-generation"),knt.forEach(t),F5o=r(M8e," \u2014 "),Ej=n(M8e,"A",{href:!0});var Snt=s(Ej);T5o=r(Snt,"BertGenerationDecoder"),Snt.forEach(t),M5o=r(M8e," (Bert Generation model)"),M8e.forEach(t),E5o=i(W),e0=n(W,"LI",{});var E8e=s(e0);$de=n(E8e,"STRONG",{});var Rnt=s($de);C5o=r(Rnt,"big_bird"),Rnt.forEach(t),w5o=r(E8e," \u2014 "),Cj=n(E8e,"A",{href:!0});var Pnt=s(Cj);A5o=r(Pnt,"BigBirdForCausalLM"),Pnt.forEach(t),y5o=r(E8e," (BigBird model)"),E8e.forEach(t),L5o=i(W),o0=n(W,"LI",{});var C8e=s(o0);kde=n(C8e,"STRONG",{});var Bnt=s(kde);x5o=r(Bnt,"bigbird_pegasus"),Bnt.forEach(t),$5o=r(C8e," \u2014 "),wj=n(C8e,"A",{href:!0});var Int=s(wj);k5o=r(Int,"BigBirdPegasusForCausalLM"),Int.forEach(t),S5o=r(C8e," (BigBirdPegasus model)"),C8e.forEach(t),R5o=i(W),r0=n(W,"LI",{});var w8e=s(r0);Sde=n(w8e,"STRONG",{});var qnt=s(Sde);P5o=r(qnt,"blenderbot"),qnt.forEach(t),B5o=r(w8e," \u2014 "),Aj=n(w8e,"A",{href:!0});var Nnt=s(Aj);I5o=r(Nnt,"BlenderbotForCausalLM"),Nnt.forEach(t),q5o=r(w8e," (Blenderbot model)"),w8e.forEach(t),N5o=i(W),t0=n(W,"LI",{});var A8e=s(t0);Rde=n(A8e,"STRONG",{});var jnt=s(Rde);j5o=r(jnt,"blenderbot-small"),jnt.forEach(t),D5o=r(A8e," \u2014 "),yj=n(A8e,"A",{href:!0});var Dnt=s(yj);G5o=r(Dnt,"BlenderbotSmallForCausalLM"),Dnt.forEach(t),O5o=r(A8e," (BlenderbotSmall model)"),A8e.forEach(t),V5o=i(W),a0=n(W,"LI",{});var y8e=s(a0);Pde=n(y8e,"STRONG",{});var Gnt=s(Pde);X5o=r(Gnt,"camembert"),Gnt.forEach(t),z5o=r(y8e," \u2014 "),Lj=n(y8e,"A",{href:!0});var Ont=s(Lj);W5o=r(Ont,"CamembertForCausalLM"),Ont.forEach(t),Q5o=r(y8e," (CamemBERT model)"),y8e.forEach(t),H5o=i(W),n0=n(W,"LI",{});var L8e=s(n0);Bde=n(L8e,"STRONG",{});var Vnt=s(Bde);U5o=r(Vnt,"ctrl"),Vnt.forEach(t),J5o=r(L8e," \u2014 "),xj=n(L8e,"A",{href:!0});var Xnt=s(xj);Y5o=r(Xnt,"CTRLLMHeadModel"),Xnt.forEach(t),K5o=r(L8e," (CTRL model)"),L8e.forEach(t),Z5o=i(W),s0=n(W,"LI",{});var x8e=s(s0);Ide=n(x8e,"STRONG",{});var znt=s(Ide);e3o=r(znt,"data2vec-text"),znt.forEach(t),o3o=r(x8e," \u2014 "),$j=n(x8e,"A",{href:!0});var Wnt=s($j);r3o=r(Wnt,"Data2VecTextForCausalLM"),Wnt.forEach(t),t3o=r(x8e," (Data2VecText model)"),x8e.forEach(t),a3o=i(W),l0=n(W,"LI",{});var $8e=s(l0);qde=n($8e,"STRONG",{});var Qnt=s(qde);n3o=r(Qnt,"electra"),Qnt.forEach(t),s3o=r($8e," \u2014 "),kj=n($8e,"A",{href:!0});var Hnt=s(kj);l3o=r(Hnt,"ElectraForCausalLM"),Hnt.forEach(t),i3o=r($8e," (ELECTRA model)"),$8e.forEach(t),d3o=i(W),i0=n(W,"LI",{});var k8e=s(i0);Nde=n(k8e,"STRONG",{});var Unt=s(Nde);c3o=r(Unt,"gpt2"),Unt.forEach(t),f3o=r(k8e," \u2014 "),Sj=n(k8e,"A",{href:!0});var Jnt=s(Sj);m3o=r(Jnt,"GPT2LMHeadModel"),Jnt.forEach(t),g3o=r(k8e," (OpenAI GPT-2 model)"),k8e.forEach(t),h3o=i(W),d0=n(W,"LI",{});var S8e=s(d0);jde=n(S8e,"STRONG",{});var Ynt=s(jde);p3o=r(Ynt,"gpt_neo"),Ynt.forEach(t),u3o=r(S8e," \u2014 "),Rj=n(S8e,"A",{href:!0});var Knt=s(Rj);_3o=r(Knt,"GPTNeoForCausalLM"),Knt.forEach(t),b3o=r(S8e," (GPT Neo model)"),S8e.forEach(t),v3o=i(W),c0=n(W,"LI",{});var R8e=s(c0);Dde=n(R8e,"STRONG",{});var Znt=s(Dde);F3o=r(Znt,"gpt_neox"),Znt.forEach(t),T3o=r(R8e," \u2014 "),Pj=n(R8e,"A",{href:!0});var est=s(Pj);M3o=r(est,"GPTNeoXForCausalLM"),est.forEach(t),E3o=r(R8e," (GPT NeoX model)"),R8e.forEach(t),C3o=i(W),f0=n(W,"LI",{});var P8e=s(f0);Gde=n(P8e,"STRONG",{});var ost=s(Gde);w3o=r(ost,"gptj"),ost.forEach(t),A3o=r(P8e," \u2014 "),Bj=n(P8e,"A",{href:!0});var rst=s(Bj);y3o=r(rst,"GPTJForCausalLM"),rst.forEach(t),L3o=r(P8e," (GPT-J model)"),P8e.forEach(t),x3o=i(W),m0=n(W,"LI",{});var B8e=s(m0);Ode=n(B8e,"STRONG",{});var tst=s(Ode);$3o=r(tst,"marian"),tst.forEach(t),k3o=r(B8e," \u2014 "),Ij=n(B8e,"A",{href:!0});var ast=s(Ij);S3o=r(ast,"MarianForCausalLM"),ast.forEach(t),R3o=r(B8e," (Marian model)"),B8e.forEach(t),P3o=i(W),g0=n(W,"LI",{});var I8e=s(g0);Vde=n(I8e,"STRONG",{});var nst=s(Vde);B3o=r(nst,"mbart"),nst.forEach(t),I3o=r(I8e," \u2014 "),qj=n(I8e,"A",{href:!0});var sst=s(qj);q3o=r(sst,"MBartForCausalLM"),sst.forEach(t),N3o=r(I8e," (mBART model)"),I8e.forEach(t),j3o=i(W),h0=n(W,"LI",{});var q8e=s(h0);Xde=n(q8e,"STRONG",{});var lst=s(Xde);D3o=r(lst,"megatron-bert"),lst.forEach(t),G3o=r(q8e," \u2014 "),Nj=n(q8e,"A",{href:!0});var ist=s(Nj);O3o=r(ist,"MegatronBertForCausalLM"),ist.forEach(t),V3o=r(q8e," (MegatronBert model)"),q8e.forEach(t),X3o=i(W),p0=n(W,"LI",{});var N8e=s(p0);zde=n(N8e,"STRONG",{});var dst=s(zde);z3o=r(dst,"openai-gpt"),dst.forEach(t),W3o=r(N8e," \u2014 "),jj=n(N8e,"A",{href:!0});var cst=s(jj);Q3o=r(cst,"OpenAIGPTLMHeadModel"),cst.forEach(t),H3o=r(N8e," (OpenAI GPT model)"),N8e.forEach(t),U3o=i(W),u0=n(W,"LI",{});var j8e=s(u0);Wde=n(j8e,"STRONG",{});var fst=s(Wde);J3o=r(fst,"opt"),fst.forEach(t),Y3o=r(j8e," \u2014 "),Dj=n(j8e,"A",{href:!0});var mst=s(Dj);K3o=r(mst,"OPTForCausalLM"),mst.forEach(t),Z3o=r(j8e," (OPT model)"),j8e.forEach(t),ewo=i(W),_0=n(W,"LI",{});var D8e=s(_0);Qde=n(D8e,"STRONG",{});var gst=s(Qde);owo=r(gst,"pegasus"),gst.forEach(t),rwo=r(D8e," \u2014 "),Gj=n(D8e,"A",{href:!0});var hst=s(Gj);two=r(hst,"PegasusForCausalLM"),hst.forEach(t),awo=r(D8e," (Pegasus model)"),D8e.forEach(t),nwo=i(W),b0=n(W,"LI",{});var G8e=s(b0);Hde=n(G8e,"STRONG",{});var pst=s(Hde);swo=r(pst,"plbart"),pst.forEach(t),lwo=r(G8e," \u2014 "),Oj=n(G8e,"A",{href:!0});var ust=s(Oj);iwo=r(ust,"PLBartForCausalLM"),ust.forEach(t),dwo=r(G8e," (PLBart model)"),G8e.forEach(t),cwo=i(W),v0=n(W,"LI",{});var O8e=s(v0);Ude=n(O8e,"STRONG",{});var _st=s(Ude);fwo=r(_st,"prophetnet"),_st.forEach(t),mwo=r(O8e," \u2014 "),Vj=n(O8e,"A",{href:!0});var bst=s(Vj);gwo=r(bst,"ProphetNetForCausalLM"),bst.forEach(t),hwo=r(O8e," (ProphetNet model)"),O8e.forEach(t),pwo=i(W),F0=n(W,"LI",{});var V8e=s(F0);Jde=n(V8e,"STRONG",{});var vst=s(Jde);uwo=r(vst,"qdqbert"),vst.forEach(t),_wo=r(V8e," \u2014 "),Xj=n(V8e,"A",{href:!0});var Fst=s(Xj);bwo=r(Fst,"QDQBertLMHeadModel"),Fst.forEach(t),vwo=r(V8e," (QDQBert model)"),V8e.forEach(t),Fwo=i(W),T0=n(W,"LI",{});var X8e=s(T0);Yde=n(X8e,"STRONG",{});var Tst=s(Yde);Two=r(Tst,"reformer"),Tst.forEach(t),Mwo=r(X8e," \u2014 "),zj=n(X8e,"A",{href:!0});var Mst=s(zj);Ewo=r(Mst,"ReformerModelWithLMHead"),Mst.forEach(t),Cwo=r(X8e," (Reformer model)"),X8e.forEach(t),wwo=i(W),M0=n(W,"LI",{});var z8e=s(M0);Kde=n(z8e,"STRONG",{});var Est=s(Kde);Awo=r(Est,"rembert"),Est.forEach(t),ywo=r(z8e," \u2014 "),Wj=n(z8e,"A",{href:!0});var Cst=s(Wj);Lwo=r(Cst,"RemBertForCausalLM"),Cst.forEach(t),xwo=r(z8e," (RemBERT model)"),z8e.forEach(t),$wo=i(W),E0=n(W,"LI",{});var W8e=s(E0);Zde=n(W8e,"STRONG",{});var wst=s(Zde);kwo=r(wst,"roberta"),wst.forEach(t),Swo=r(W8e," \u2014 "),Qj=n(W8e,"A",{href:!0});var Ast=s(Qj);Rwo=r(Ast,"RobertaForCausalLM"),Ast.forEach(t),Pwo=r(W8e," (RoBERTa model)"),W8e.forEach(t),Bwo=i(W),C0=n(W,"LI",{});var Q8e=s(C0);ece=n(Q8e,"STRONG",{});var yst=s(ece);Iwo=r(yst,"roformer"),yst.forEach(t),qwo=r(Q8e," \u2014 "),Hj=n(Q8e,"A",{href:!0});var Lst=s(Hj);Nwo=r(Lst,"RoFormerForCausalLM"),Lst.forEach(t),jwo=r(Q8e," (RoFormer model)"),Q8e.forEach(t),Dwo=i(W),w0=n(W,"LI",{});var H8e=s(w0);oce=n(H8e,"STRONG",{});var xst=s(oce);Gwo=r(xst,"speech_to_text_2"),xst.forEach(t),Owo=r(H8e," \u2014 "),Uj=n(H8e,"A",{href:!0});var $st=s(Uj);Vwo=r($st,"Speech2Text2ForCausalLM"),$st.forEach(t),Xwo=r(H8e," (Speech2Text2 model)"),H8e.forEach(t),zwo=i(W),A0=n(W,"LI",{});var U8e=s(A0);rce=n(U8e,"STRONG",{});var kst=s(rce);Wwo=r(kst,"transfo-xl"),kst.forEach(t),Qwo=r(U8e," \u2014 "),Jj=n(U8e,"A",{href:!0});var Sst=s(Jj);Hwo=r(Sst,"TransfoXLLMHeadModel"),Sst.forEach(t),Uwo=r(U8e," (Transformer-XL model)"),U8e.forEach(t),Jwo=i(W),y0=n(W,"LI",{});var J8e=s(y0);tce=n(J8e,"STRONG",{});var Rst=s(tce);Ywo=r(Rst,"trocr"),Rst.forEach(t),Kwo=r(J8e," \u2014 "),Yj=n(J8e,"A",{href:!0});var Pst=s(Yj);Zwo=r(Pst,"TrOCRForCausalLM"),Pst.forEach(t),eAo=r(J8e," (TrOCR model)"),J8e.forEach(t),oAo=i(W),L0=n(W,"LI",{});var Y8e=s(L0);ace=n(Y8e,"STRONG",{});var Bst=s(ace);rAo=r(Bst,"xglm"),Bst.forEach(t),tAo=r(Y8e," \u2014 "),Kj=n(Y8e,"A",{href:!0});var Ist=s(Kj);aAo=r(Ist,"XGLMForCausalLM"),Ist.forEach(t),nAo=r(Y8e," (XGLM model)"),Y8e.forEach(t),sAo=i(W),x0=n(W,"LI",{});var K8e=s(x0);nce=n(K8e,"STRONG",{});var qst=s(nce);lAo=r(qst,"xlm"),qst.forEach(t),iAo=r(K8e," \u2014 "),Zj=n(K8e,"A",{href:!0});var Nst=s(Zj);dAo=r(Nst,"XLMWithLMHeadModel"),Nst.forEach(t),cAo=r(K8e," (XLM model)"),K8e.forEach(t),fAo=i(W),$0=n(W,"LI",{});var Z8e=s($0);sce=n(Z8e,"STRONG",{});var jst=s(sce);mAo=r(jst,"xlm-prophetnet"),jst.forEach(t),gAo=r(Z8e," \u2014 "),eD=n(Z8e,"A",{href:!0});var Dst=s(eD);hAo=r(Dst,"XLMProphetNetForCausalLM"),Dst.forEach(t),pAo=r(Z8e," (XLMProphetNet model)"),Z8e.forEach(t),uAo=i(W),k0=n(W,"LI",{});var e7e=s(k0);lce=n(e7e,"STRONG",{});var Gst=s(lce);_Ao=r(Gst,"xlm-roberta"),Gst.forEach(t),bAo=r(e7e," \u2014 "),oD=n(e7e,"A",{href:!0});var Ost=s(oD);vAo=r(Ost,"XLMRobertaForCausalLM"),Ost.forEach(t),FAo=r(e7e," (XLM-RoBERTa model)"),e7e.forEach(t),TAo=i(W),S0=n(W,"LI",{});var o7e=s(S0);ice=n(o7e,"STRONG",{});var Vst=s(ice);MAo=r(Vst,"xlm-roberta-xl"),Vst.forEach(t),EAo=r(o7e," \u2014 "),rD=n(o7e,"A",{href:!0});var Xst=s(rD);CAo=r(Xst,"XLMRobertaXLForCausalLM"),Xst.forEach(t),wAo=r(o7e," (XLM-RoBERTa-XL model)"),o7e.forEach(t),AAo=i(W),R0=n(W,"LI",{});var r7e=s(R0);dce=n(r7e,"STRONG",{});var zst=s(dce);yAo=r(zst,"xlnet"),zst.forEach(t),LAo=r(r7e," \u2014 "),tD=n(r7e,"A",{href:!0});var Wst=s(tD);xAo=r(Wst,"XLNetLMHeadModel"),Wst.forEach(t),$Ao=r(r7e," (XLNet model)"),r7e.forEach(t),W.forEach(t),kAo=i(ta),P0=n(ta,"P",{});var t7e=s(P0);SAo=r(t7e,"The model is set in evaluation mode by default using "),cce=n(t7e,"CODE",{});var Qst=s(cce);RAo=r(Qst,"model.eval()"),Qst.forEach(t),PAo=r(t7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(t7e,"CODE",{});var Hst=s(fce);BAo=r(Hst,"model.train()"),Hst.forEach(t),t7e.forEach(t),IAo=i(ta),T(B0.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),_Ne=i(f),Pi=n(f,"H2",{class:!0});var TDe=s(Pi);I0=n(TDe,"A",{id:!0,class:!0,href:!0});var Ust=s(I0);mce=n(Ust,"SPAN",{});var Jst=s(mce);T(hL.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),qAo=i(TDe),gce=n(TDe,"SPAN",{});var Yst=s(gce);NAo=r(Yst,"AutoModelForMaskedLM"),Yst.forEach(t),TDe.forEach(t),bNe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(pL.$$.fragment,Xs),jAo=i(Xs),Bi=n(Xs,"P",{});var TZ=s(Bi);DAo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aD=n(TZ,"A",{href:!0});var Kst=s(aD);GAo=r(Kst,"from_pretrained()"),Kst.forEach(t),OAo=r(TZ," class method or the "),nD=n(TZ,"A",{href:!0});var Zst=s(nD);VAo=r(Zst,"from_config()"),Zst.forEach(t),XAo=r(TZ,` class
method.`),TZ.forEach(t),zAo=i(Xs),uL=n(Xs,"P",{});var MDe=s(uL);WAo=r(MDe,"This class cannot be instantiated directly using "),hce=n(MDe,"CODE",{});var elt=s(hce);QAo=r(elt,"__init__()"),elt.forEach(t),HAo=r(MDe," (throws an error)."),MDe.forEach(t),UAo=i(Xs),st=n(Xs,"DIV",{class:!0});var qw=s(st);T(_L.$$.fragment,qw),JAo=i(qw),pce=n(qw,"P",{});var olt=s(pce);YAo=r(olt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),olt.forEach(t),KAo=i(qw),Ii=n(qw,"P",{});var MZ=s(Ii);ZAo=r(MZ,`Note:
Loading a model from its configuration file does `),uce=n(MZ,"STRONG",{});var rlt=s(uce);eyo=r(rlt,"not"),rlt.forEach(t),oyo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=n(MZ,"A",{href:!0});var tlt=s(sD);ryo=r(tlt,"from_pretrained()"),tlt.forEach(t),tyo=r(MZ," to load the model weights."),MZ.forEach(t),ayo=i(qw),T(q0.$$.fragment,qw),qw.forEach(t),nyo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(bL.$$.fragment,aa),syo=i(aa),_ce=n(aa,"P",{});var alt=s(_ce);lyo=r(alt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),alt.forEach(t),iyo=i(aa),ka=n(aa,"P",{});var Nw=s(ka);dyo=r(Nw,"The model class to instantiate is selected based on the "),bce=n(Nw,"CODE",{});var nlt=s(bce);cyo=r(nlt,"model_type"),nlt.forEach(t),fyo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),vce=n(Nw,"CODE",{});var slt=s(vce);myo=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),gyo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=n(Nw,"CODE",{});var llt=s(Fce);hyo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),pyo=r(Nw,":"),Nw.forEach(t),uyo=i(aa),Q=n(aa,"UL",{});var U=s(Q);N0=n(U,"LI",{});var a7e=s(N0);Tce=n(a7e,"STRONG",{});var ilt=s(Tce);_yo=r(ilt,"albert"),ilt.forEach(t),byo=r(a7e," \u2014 "),lD=n(a7e,"A",{href:!0});var dlt=s(lD);vyo=r(dlt,"AlbertForMaskedLM"),dlt.forEach(t),Fyo=r(a7e," (ALBERT model)"),a7e.forEach(t),Tyo=i(U),j0=n(U,"LI",{});var n7e=s(j0);Mce=n(n7e,"STRONG",{});var clt=s(Mce);Myo=r(clt,"bart"),clt.forEach(t),Eyo=r(n7e," \u2014 "),iD=n(n7e,"A",{href:!0});var flt=s(iD);Cyo=r(flt,"BartForConditionalGeneration"),flt.forEach(t),wyo=r(n7e," (BART model)"),n7e.forEach(t),Ayo=i(U),D0=n(U,"LI",{});var s7e=s(D0);Ece=n(s7e,"STRONG",{});var mlt=s(Ece);yyo=r(mlt,"bert"),mlt.forEach(t),Lyo=r(s7e," \u2014 "),dD=n(s7e,"A",{href:!0});var glt=s(dD);xyo=r(glt,"BertForMaskedLM"),glt.forEach(t),$yo=r(s7e," (BERT model)"),s7e.forEach(t),kyo=i(U),G0=n(U,"LI",{});var l7e=s(G0);Cce=n(l7e,"STRONG",{});var hlt=s(Cce);Syo=r(hlt,"big_bird"),hlt.forEach(t),Ryo=r(l7e," \u2014 "),cD=n(l7e,"A",{href:!0});var plt=s(cD);Pyo=r(plt,"BigBirdForMaskedLM"),plt.forEach(t),Byo=r(l7e," (BigBird model)"),l7e.forEach(t),Iyo=i(U),O0=n(U,"LI",{});var i7e=s(O0);wce=n(i7e,"STRONG",{});var ult=s(wce);qyo=r(ult,"camembert"),ult.forEach(t),Nyo=r(i7e," \u2014 "),fD=n(i7e,"A",{href:!0});var _lt=s(fD);jyo=r(_lt,"CamembertForMaskedLM"),_lt.forEach(t),Dyo=r(i7e," (CamemBERT model)"),i7e.forEach(t),Gyo=i(U),V0=n(U,"LI",{});var d7e=s(V0);Ace=n(d7e,"STRONG",{});var blt=s(Ace);Oyo=r(blt,"convbert"),blt.forEach(t),Vyo=r(d7e," \u2014 "),mD=n(d7e,"A",{href:!0});var vlt=s(mD);Xyo=r(vlt,"ConvBertForMaskedLM"),vlt.forEach(t),zyo=r(d7e," (ConvBERT model)"),d7e.forEach(t),Wyo=i(U),X0=n(U,"LI",{});var c7e=s(X0);yce=n(c7e,"STRONG",{});var Flt=s(yce);Qyo=r(Flt,"data2vec-text"),Flt.forEach(t),Hyo=r(c7e," \u2014 "),gD=n(c7e,"A",{href:!0});var Tlt=s(gD);Uyo=r(Tlt,"Data2VecTextForMaskedLM"),Tlt.forEach(t),Jyo=r(c7e," (Data2VecText model)"),c7e.forEach(t),Yyo=i(U),z0=n(U,"LI",{});var f7e=s(z0);Lce=n(f7e,"STRONG",{});var Mlt=s(Lce);Kyo=r(Mlt,"deberta"),Mlt.forEach(t),Zyo=r(f7e," \u2014 "),hD=n(f7e,"A",{href:!0});var Elt=s(hD);eLo=r(Elt,"DebertaForMaskedLM"),Elt.forEach(t),oLo=r(f7e," (DeBERTa model)"),f7e.forEach(t),rLo=i(U),W0=n(U,"LI",{});var m7e=s(W0);xce=n(m7e,"STRONG",{});var Clt=s(xce);tLo=r(Clt,"deberta-v2"),Clt.forEach(t),aLo=r(m7e," \u2014 "),pD=n(m7e,"A",{href:!0});var wlt=s(pD);nLo=r(wlt,"DebertaV2ForMaskedLM"),wlt.forEach(t),sLo=r(m7e," (DeBERTa-v2 model)"),m7e.forEach(t),lLo=i(U),Q0=n(U,"LI",{});var g7e=s(Q0);$ce=n(g7e,"STRONG",{});var Alt=s($ce);iLo=r(Alt,"distilbert"),Alt.forEach(t),dLo=r(g7e," \u2014 "),uD=n(g7e,"A",{href:!0});var ylt=s(uD);cLo=r(ylt,"DistilBertForMaskedLM"),ylt.forEach(t),fLo=r(g7e," (DistilBERT model)"),g7e.forEach(t),mLo=i(U),H0=n(U,"LI",{});var h7e=s(H0);kce=n(h7e,"STRONG",{});var Llt=s(kce);gLo=r(Llt,"electra"),Llt.forEach(t),hLo=r(h7e," \u2014 "),_D=n(h7e,"A",{href:!0});var xlt=s(_D);pLo=r(xlt,"ElectraForMaskedLM"),xlt.forEach(t),uLo=r(h7e," (ELECTRA model)"),h7e.forEach(t),_Lo=i(U),U0=n(U,"LI",{});var p7e=s(U0);Sce=n(p7e,"STRONG",{});var $lt=s(Sce);bLo=r($lt,"flaubert"),$lt.forEach(t),vLo=r(p7e," \u2014 "),bD=n(p7e,"A",{href:!0});var klt=s(bD);FLo=r(klt,"FlaubertWithLMHeadModel"),klt.forEach(t),TLo=r(p7e," (FlauBERT model)"),p7e.forEach(t),MLo=i(U),J0=n(U,"LI",{});var u7e=s(J0);Rce=n(u7e,"STRONG",{});var Slt=s(Rce);ELo=r(Slt,"fnet"),Slt.forEach(t),CLo=r(u7e," \u2014 "),vD=n(u7e,"A",{href:!0});var Rlt=s(vD);wLo=r(Rlt,"FNetForMaskedLM"),Rlt.forEach(t),ALo=r(u7e," (FNet model)"),u7e.forEach(t),yLo=i(U),Y0=n(U,"LI",{});var _7e=s(Y0);Pce=n(_7e,"STRONG",{});var Plt=s(Pce);LLo=r(Plt,"funnel"),Plt.forEach(t),xLo=r(_7e," \u2014 "),FD=n(_7e,"A",{href:!0});var Blt=s(FD);$Lo=r(Blt,"FunnelForMaskedLM"),Blt.forEach(t),kLo=r(_7e," (Funnel Transformer model)"),_7e.forEach(t),SLo=i(U),K0=n(U,"LI",{});var b7e=s(K0);Bce=n(b7e,"STRONG",{});var Ilt=s(Bce);RLo=r(Ilt,"ibert"),Ilt.forEach(t),PLo=r(b7e," \u2014 "),TD=n(b7e,"A",{href:!0});var qlt=s(TD);BLo=r(qlt,"IBertForMaskedLM"),qlt.forEach(t),ILo=r(b7e," (I-BERT model)"),b7e.forEach(t),qLo=i(U),Z0=n(U,"LI",{});var v7e=s(Z0);Ice=n(v7e,"STRONG",{});var Nlt=s(Ice);NLo=r(Nlt,"layoutlm"),Nlt.forEach(t),jLo=r(v7e," \u2014 "),MD=n(v7e,"A",{href:!0});var jlt=s(MD);DLo=r(jlt,"LayoutLMForMaskedLM"),jlt.forEach(t),GLo=r(v7e," (LayoutLM model)"),v7e.forEach(t),OLo=i(U),e1=n(U,"LI",{});var F7e=s(e1);qce=n(F7e,"STRONG",{});var Dlt=s(qce);VLo=r(Dlt,"longformer"),Dlt.forEach(t),XLo=r(F7e," \u2014 "),ED=n(F7e,"A",{href:!0});var Glt=s(ED);zLo=r(Glt,"LongformerForMaskedLM"),Glt.forEach(t),WLo=r(F7e," (Longformer model)"),F7e.forEach(t),QLo=i(U),o1=n(U,"LI",{});var T7e=s(o1);Nce=n(T7e,"STRONG",{});var Olt=s(Nce);HLo=r(Olt,"mbart"),Olt.forEach(t),ULo=r(T7e," \u2014 "),CD=n(T7e,"A",{href:!0});var Vlt=s(CD);JLo=r(Vlt,"MBartForConditionalGeneration"),Vlt.forEach(t),YLo=r(T7e," (mBART model)"),T7e.forEach(t),KLo=i(U),r1=n(U,"LI",{});var M7e=s(r1);jce=n(M7e,"STRONG",{});var Xlt=s(jce);ZLo=r(Xlt,"megatron-bert"),Xlt.forEach(t),e8o=r(M7e," \u2014 "),wD=n(M7e,"A",{href:!0});var zlt=s(wD);o8o=r(zlt,"MegatronBertForMaskedLM"),zlt.forEach(t),r8o=r(M7e," (MegatronBert model)"),M7e.forEach(t),t8o=i(U),t1=n(U,"LI",{});var E7e=s(t1);Dce=n(E7e,"STRONG",{});var Wlt=s(Dce);a8o=r(Wlt,"mobilebert"),Wlt.forEach(t),n8o=r(E7e," \u2014 "),AD=n(E7e,"A",{href:!0});var Qlt=s(AD);s8o=r(Qlt,"MobileBertForMaskedLM"),Qlt.forEach(t),l8o=r(E7e," (MobileBERT model)"),E7e.forEach(t),i8o=i(U),a1=n(U,"LI",{});var C7e=s(a1);Gce=n(C7e,"STRONG",{});var Hlt=s(Gce);d8o=r(Hlt,"mpnet"),Hlt.forEach(t),c8o=r(C7e," \u2014 "),yD=n(C7e,"A",{href:!0});var Ult=s(yD);f8o=r(Ult,"MPNetForMaskedLM"),Ult.forEach(t),m8o=r(C7e," (MPNet model)"),C7e.forEach(t),g8o=i(U),n1=n(U,"LI",{});var w7e=s(n1);Oce=n(w7e,"STRONG",{});var Jlt=s(Oce);h8o=r(Jlt,"nystromformer"),Jlt.forEach(t),p8o=r(w7e," \u2014 "),LD=n(w7e,"A",{href:!0});var Ylt=s(LD);u8o=r(Ylt,"NystromformerForMaskedLM"),Ylt.forEach(t),_8o=r(w7e," (Nystromformer model)"),w7e.forEach(t),b8o=i(U),s1=n(U,"LI",{});var A7e=s(s1);Vce=n(A7e,"STRONG",{});var Klt=s(Vce);v8o=r(Klt,"perceiver"),Klt.forEach(t),F8o=r(A7e," \u2014 "),xD=n(A7e,"A",{href:!0});var Zlt=s(xD);T8o=r(Zlt,"PerceiverForMaskedLM"),Zlt.forEach(t),M8o=r(A7e," (Perceiver model)"),A7e.forEach(t),E8o=i(U),l1=n(U,"LI",{});var y7e=s(l1);Xce=n(y7e,"STRONG",{});var eit=s(Xce);C8o=r(eit,"qdqbert"),eit.forEach(t),w8o=r(y7e," \u2014 "),$D=n(y7e,"A",{href:!0});var oit=s($D);A8o=r(oit,"QDQBertForMaskedLM"),oit.forEach(t),y8o=r(y7e," (QDQBert model)"),y7e.forEach(t),L8o=i(U),i1=n(U,"LI",{});var L7e=s(i1);zce=n(L7e,"STRONG",{});var rit=s(zce);x8o=r(rit,"reformer"),rit.forEach(t),$8o=r(L7e," \u2014 "),kD=n(L7e,"A",{href:!0});var tit=s(kD);k8o=r(tit,"ReformerForMaskedLM"),tit.forEach(t),S8o=r(L7e," (Reformer model)"),L7e.forEach(t),R8o=i(U),d1=n(U,"LI",{});var x7e=s(d1);Wce=n(x7e,"STRONG",{});var ait=s(Wce);P8o=r(ait,"rembert"),ait.forEach(t),B8o=r(x7e," \u2014 "),SD=n(x7e,"A",{href:!0});var nit=s(SD);I8o=r(nit,"RemBertForMaskedLM"),nit.forEach(t),q8o=r(x7e," (RemBERT model)"),x7e.forEach(t),N8o=i(U),c1=n(U,"LI",{});var $7e=s(c1);Qce=n($7e,"STRONG",{});var sit=s(Qce);j8o=r(sit,"roberta"),sit.forEach(t),D8o=r($7e," \u2014 "),RD=n($7e,"A",{href:!0});var lit=s(RD);G8o=r(lit,"RobertaForMaskedLM"),lit.forEach(t),O8o=r($7e," (RoBERTa model)"),$7e.forEach(t),V8o=i(U),f1=n(U,"LI",{});var k7e=s(f1);Hce=n(k7e,"STRONG",{});var iit=s(Hce);X8o=r(iit,"roformer"),iit.forEach(t),z8o=r(k7e," \u2014 "),PD=n(k7e,"A",{href:!0});var dit=s(PD);W8o=r(dit,"RoFormerForMaskedLM"),dit.forEach(t),Q8o=r(k7e," (RoFormer model)"),k7e.forEach(t),H8o=i(U),m1=n(U,"LI",{});var S7e=s(m1);Uce=n(S7e,"STRONG",{});var cit=s(Uce);U8o=r(cit,"squeezebert"),cit.forEach(t),J8o=r(S7e," \u2014 "),BD=n(S7e,"A",{href:!0});var fit=s(BD);Y8o=r(fit,"SqueezeBertForMaskedLM"),fit.forEach(t),K8o=r(S7e," (SqueezeBERT model)"),S7e.forEach(t),Z8o=i(U),g1=n(U,"LI",{});var R7e=s(g1);Jce=n(R7e,"STRONG",{});var mit=s(Jce);e7o=r(mit,"tapas"),mit.forEach(t),o7o=r(R7e," \u2014 "),ID=n(R7e,"A",{href:!0});var git=s(ID);r7o=r(git,"TapasForMaskedLM"),git.forEach(t),t7o=r(R7e," (TAPAS model)"),R7e.forEach(t),a7o=i(U),h1=n(U,"LI",{});var P7e=s(h1);Yce=n(P7e,"STRONG",{});var hit=s(Yce);n7o=r(hit,"wav2vec2"),hit.forEach(t),s7o=r(P7e," \u2014 "),Kce=n(P7e,"CODE",{});var pit=s(Kce);l7o=r(pit,"Wav2Vec2ForMaskedLM"),pit.forEach(t),i7o=r(P7e," (Wav2Vec2 model)"),P7e.forEach(t),d7o=i(U),p1=n(U,"LI",{});var B7e=s(p1);Zce=n(B7e,"STRONG",{});var uit=s(Zce);c7o=r(uit,"xlm"),uit.forEach(t),f7o=r(B7e," \u2014 "),qD=n(B7e,"A",{href:!0});var _it=s(qD);m7o=r(_it,"XLMWithLMHeadModel"),_it.forEach(t),g7o=r(B7e," (XLM model)"),B7e.forEach(t),h7o=i(U),u1=n(U,"LI",{});var I7e=s(u1);efe=n(I7e,"STRONG",{});var bit=s(efe);p7o=r(bit,"xlm-roberta"),bit.forEach(t),u7o=r(I7e," \u2014 "),ND=n(I7e,"A",{href:!0});var vit=s(ND);_7o=r(vit,"XLMRobertaForMaskedLM"),vit.forEach(t),b7o=r(I7e," (XLM-RoBERTa model)"),I7e.forEach(t),v7o=i(U),_1=n(U,"LI",{});var q7e=s(_1);ofe=n(q7e,"STRONG",{});var Fit=s(ofe);F7o=r(Fit,"xlm-roberta-xl"),Fit.forEach(t),T7o=r(q7e," \u2014 "),jD=n(q7e,"A",{href:!0});var Tit=s(jD);M7o=r(Tit,"XLMRobertaXLForMaskedLM"),Tit.forEach(t),E7o=r(q7e," (XLM-RoBERTa-XL model)"),q7e.forEach(t),C7o=i(U),b1=n(U,"LI",{});var N7e=s(b1);rfe=n(N7e,"STRONG",{});var Mit=s(rfe);w7o=r(Mit,"yoso"),Mit.forEach(t),A7o=r(N7e," \u2014 "),DD=n(N7e,"A",{href:!0});var Eit=s(DD);y7o=r(Eit,"YosoForMaskedLM"),Eit.forEach(t),L7o=r(N7e," (YOSO model)"),N7e.forEach(t),U.forEach(t),x7o=i(aa),v1=n(aa,"P",{});var j7e=s(v1);$7o=r(j7e,"The model is set in evaluation mode by default using "),tfe=n(j7e,"CODE",{});var Cit=s(tfe);k7o=r(Cit,"model.eval()"),Cit.forEach(t),S7o=r(j7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(j7e,"CODE",{});var wit=s(afe);R7o=r(wit,"model.train()"),wit.forEach(t),j7e.forEach(t),P7o=i(aa),T(F1.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),vNe=i(f),qi=n(f,"H2",{class:!0});var EDe=s(qi);T1=n(EDe,"A",{id:!0,class:!0,href:!0});var Ait=s(T1);nfe=n(Ait,"SPAN",{});var yit=s(nfe);T(vL.$$.fragment,yit),yit.forEach(t),Ait.forEach(t),B7o=i(EDe),sfe=n(EDe,"SPAN",{});var Lit=s(sfe);I7o=r(Lit,"AutoModelForSeq2SeqLM"),Lit.forEach(t),EDe.forEach(t),FNe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(FL.$$.fragment,zs),q7o=i(zs),Ni=n(zs,"P",{});var EZ=s(Ni);N7o=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GD=n(EZ,"A",{href:!0});var xit=s(GD);j7o=r(xit,"from_pretrained()"),xit.forEach(t),D7o=r(EZ," class method or the "),OD=n(EZ,"A",{href:!0});var $it=s(OD);G7o=r($it,"from_config()"),$it.forEach(t),O7o=r(EZ,` class
method.`),EZ.forEach(t),V7o=i(zs),TL=n(zs,"P",{});var CDe=s(TL);X7o=r(CDe,"This class cannot be instantiated directly using "),lfe=n(CDe,"CODE",{});var kit=s(lfe);z7o=r(kit,"__init__()"),kit.forEach(t),W7o=r(CDe," (throws an error)."),CDe.forEach(t),Q7o=i(zs),lt=n(zs,"DIV",{class:!0});var jw=s(lt);T(ML.$$.fragment,jw),H7o=i(jw),ife=n(jw,"P",{});var Sit=s(ife);U7o=r(Sit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sit.forEach(t),J7o=i(jw),ji=n(jw,"P",{});var CZ=s(ji);Y7o=r(CZ,`Note:
Loading a model from its configuration file does `),dfe=n(CZ,"STRONG",{});var Rit=s(dfe);K7o=r(Rit,"not"),Rit.forEach(t),Z7o=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(CZ,"A",{href:!0});var Pit=s(VD);e9o=r(Pit,"from_pretrained()"),Pit.forEach(t),o9o=r(CZ," to load the model weights."),CZ.forEach(t),r9o=i(jw),T(M1.$$.fragment,jw),jw.forEach(t),t9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(EL.$$.fragment,na),a9o=i(na),cfe=n(na,"P",{});var Bit=s(cfe);n9o=r(Bit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bit.forEach(t),s9o=i(na),Sa=n(na,"P",{});var Dw=s(Sa);l9o=r(Dw,"The model class to instantiate is selected based on the "),ffe=n(Dw,"CODE",{});var Iit=s(ffe);i9o=r(Iit,"model_type"),Iit.forEach(t),d9o=r(Dw,` property of the config object (either
passed as an argument or loaded from `),mfe=n(Dw,"CODE",{});var qit=s(mfe);c9o=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),f9o=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(Dw,"CODE",{});var Nit=s(gfe);m9o=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),g9o=r(Dw,":"),Dw.forEach(t),h9o=i(na),ue=n(na,"UL",{});var ve=s(ue);E1=n(ve,"LI",{});var D7e=s(E1);hfe=n(D7e,"STRONG",{});var jit=s(hfe);p9o=r(jit,"bart"),jit.forEach(t),u9o=r(D7e," \u2014 "),XD=n(D7e,"A",{href:!0});var Dit=s(XD);_9o=r(Dit,"BartForConditionalGeneration"),Dit.forEach(t),b9o=r(D7e," (BART model)"),D7e.forEach(t),v9o=i(ve),C1=n(ve,"LI",{});var G7e=s(C1);pfe=n(G7e,"STRONG",{});var Git=s(pfe);F9o=r(Git,"bigbird_pegasus"),Git.forEach(t),T9o=r(G7e," \u2014 "),zD=n(G7e,"A",{href:!0});var Oit=s(zD);M9o=r(Oit,"BigBirdPegasusForConditionalGeneration"),Oit.forEach(t),E9o=r(G7e," (BigBirdPegasus model)"),G7e.forEach(t),C9o=i(ve),w1=n(ve,"LI",{});var O7e=s(w1);ufe=n(O7e,"STRONG",{});var Vit=s(ufe);w9o=r(Vit,"blenderbot"),Vit.forEach(t),A9o=r(O7e," \u2014 "),WD=n(O7e,"A",{href:!0});var Xit=s(WD);y9o=r(Xit,"BlenderbotForConditionalGeneration"),Xit.forEach(t),L9o=r(O7e," (Blenderbot model)"),O7e.forEach(t),x9o=i(ve),A1=n(ve,"LI",{});var V7e=s(A1);_fe=n(V7e,"STRONG",{});var zit=s(_fe);$9o=r(zit,"blenderbot-small"),zit.forEach(t),k9o=r(V7e," \u2014 "),QD=n(V7e,"A",{href:!0});var Wit=s(QD);S9o=r(Wit,"BlenderbotSmallForConditionalGeneration"),Wit.forEach(t),R9o=r(V7e," (BlenderbotSmall model)"),V7e.forEach(t),P9o=i(ve),y1=n(ve,"LI",{});var X7e=s(y1);bfe=n(X7e,"STRONG",{});var Qit=s(bfe);B9o=r(Qit,"encoder-decoder"),Qit.forEach(t),I9o=r(X7e," \u2014 "),HD=n(X7e,"A",{href:!0});var Hit=s(HD);q9o=r(Hit,"EncoderDecoderModel"),Hit.forEach(t),N9o=r(X7e," (Encoder decoder model)"),X7e.forEach(t),j9o=i(ve),L1=n(ve,"LI",{});var z7e=s(L1);vfe=n(z7e,"STRONG",{});var Uit=s(vfe);D9o=r(Uit,"fsmt"),Uit.forEach(t),G9o=r(z7e," \u2014 "),UD=n(z7e,"A",{href:!0});var Jit=s(UD);O9o=r(Jit,"FSMTForConditionalGeneration"),Jit.forEach(t),V9o=r(z7e," (FairSeq Machine-Translation model)"),z7e.forEach(t),X9o=i(ve),x1=n(ve,"LI",{});var W7e=s(x1);Ffe=n(W7e,"STRONG",{});var Yit=s(Ffe);z9o=r(Yit,"led"),Yit.forEach(t),W9o=r(W7e," \u2014 "),JD=n(W7e,"A",{href:!0});var Kit=s(JD);Q9o=r(Kit,"LEDForConditionalGeneration"),Kit.forEach(t),H9o=r(W7e," (LED model)"),W7e.forEach(t),U9o=i(ve),$1=n(ve,"LI",{});var Q7e=s($1);Tfe=n(Q7e,"STRONG",{});var Zit=s(Tfe);J9o=r(Zit,"m2m_100"),Zit.forEach(t),Y9o=r(Q7e," \u2014 "),YD=n(Q7e,"A",{href:!0});var edt=s(YD);K9o=r(edt,"M2M100ForConditionalGeneration"),edt.forEach(t),Z9o=r(Q7e," (M2M100 model)"),Q7e.forEach(t),exo=i(ve),k1=n(ve,"LI",{});var H7e=s(k1);Mfe=n(H7e,"STRONG",{});var odt=s(Mfe);oxo=r(odt,"marian"),odt.forEach(t),rxo=r(H7e," \u2014 "),KD=n(H7e,"A",{href:!0});var rdt=s(KD);txo=r(rdt,"MarianMTModel"),rdt.forEach(t),axo=r(H7e," (Marian model)"),H7e.forEach(t),nxo=i(ve),S1=n(ve,"LI",{});var U7e=s(S1);Efe=n(U7e,"STRONG",{});var tdt=s(Efe);sxo=r(tdt,"mbart"),tdt.forEach(t),lxo=r(U7e," \u2014 "),ZD=n(U7e,"A",{href:!0});var adt=s(ZD);ixo=r(adt,"MBartForConditionalGeneration"),adt.forEach(t),dxo=r(U7e," (mBART model)"),U7e.forEach(t),cxo=i(ve),R1=n(ve,"LI",{});var J7e=s(R1);Cfe=n(J7e,"STRONG",{});var ndt=s(Cfe);fxo=r(ndt,"mt5"),ndt.forEach(t),mxo=r(J7e," \u2014 "),eG=n(J7e,"A",{href:!0});var sdt=s(eG);gxo=r(sdt,"MT5ForConditionalGeneration"),sdt.forEach(t),hxo=r(J7e," (mT5 model)"),J7e.forEach(t),pxo=i(ve),P1=n(ve,"LI",{});var Y7e=s(P1);wfe=n(Y7e,"STRONG",{});var ldt=s(wfe);uxo=r(ldt,"pegasus"),ldt.forEach(t),_xo=r(Y7e," \u2014 "),oG=n(Y7e,"A",{href:!0});var idt=s(oG);bxo=r(idt,"PegasusForConditionalGeneration"),idt.forEach(t),vxo=r(Y7e," (Pegasus model)"),Y7e.forEach(t),Fxo=i(ve),B1=n(ve,"LI",{});var K7e=s(B1);Afe=n(K7e,"STRONG",{});var ddt=s(Afe);Txo=r(ddt,"plbart"),ddt.forEach(t),Mxo=r(K7e," \u2014 "),rG=n(K7e,"A",{href:!0});var cdt=s(rG);Exo=r(cdt,"PLBartForConditionalGeneration"),cdt.forEach(t),Cxo=r(K7e," (PLBart model)"),K7e.forEach(t),wxo=i(ve),I1=n(ve,"LI",{});var Z7e=s(I1);yfe=n(Z7e,"STRONG",{});var fdt=s(yfe);Axo=r(fdt,"prophetnet"),fdt.forEach(t),yxo=r(Z7e," \u2014 "),tG=n(Z7e,"A",{href:!0});var mdt=s(tG);Lxo=r(mdt,"ProphetNetForConditionalGeneration"),mdt.forEach(t),xxo=r(Z7e," (ProphetNet model)"),Z7e.forEach(t),$xo=i(ve),q1=n(ve,"LI",{});var e9e=s(q1);Lfe=n(e9e,"STRONG",{});var gdt=s(Lfe);kxo=r(gdt,"t5"),gdt.forEach(t),Sxo=r(e9e," \u2014 "),aG=n(e9e,"A",{href:!0});var hdt=s(aG);Rxo=r(hdt,"T5ForConditionalGeneration"),hdt.forEach(t),Pxo=r(e9e," (T5 model)"),e9e.forEach(t),Bxo=i(ve),N1=n(ve,"LI",{});var o9e=s(N1);xfe=n(o9e,"STRONG",{});var pdt=s(xfe);Ixo=r(pdt,"xlm-prophetnet"),pdt.forEach(t),qxo=r(o9e," \u2014 "),nG=n(o9e,"A",{href:!0});var udt=s(nG);Nxo=r(udt,"XLMProphetNetForConditionalGeneration"),udt.forEach(t),jxo=r(o9e," (XLMProphetNet model)"),o9e.forEach(t),ve.forEach(t),Dxo=i(na),j1=n(na,"P",{});var r9e=s(j1);Gxo=r(r9e,"The model is set in evaluation mode by default using "),$fe=n(r9e,"CODE",{});var _dt=s($fe);Oxo=r(_dt,"model.eval()"),_dt.forEach(t),Vxo=r(r9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=n(r9e,"CODE",{});var bdt=s(kfe);Xxo=r(bdt,"model.train()"),bdt.forEach(t),r9e.forEach(t),zxo=i(na),T(D1.$$.fragment,na),na.forEach(t),zs.forEach(t),TNe=i(f),Di=n(f,"H2",{class:!0});var wDe=s(Di);G1=n(wDe,"A",{id:!0,class:!0,href:!0});var vdt=s(G1);Sfe=n(vdt,"SPAN",{});var Fdt=s(Sfe);T(CL.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),Wxo=i(wDe),Rfe=n(wDe,"SPAN",{});var Tdt=s(Rfe);Qxo=r(Tdt,"AutoModelForSequenceClassification"),Tdt.forEach(t),wDe.forEach(t),MNe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(wL.$$.fragment,Ws),Hxo=i(Ws),Gi=n(Ws,"P",{});var wZ=s(Gi);Uxo=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sG=n(wZ,"A",{href:!0});var Mdt=s(sG);Jxo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),Yxo=r(wZ," class method or the "),lG=n(wZ,"A",{href:!0});var Edt=s(lG);Kxo=r(Edt,"from_config()"),Edt.forEach(t),Zxo=r(wZ,` class
method.`),wZ.forEach(t),e$o=i(Ws),AL=n(Ws,"P",{});var ADe=s(AL);o$o=r(ADe,"This class cannot be instantiated directly using "),Pfe=n(ADe,"CODE",{});var Cdt=s(Pfe);r$o=r(Cdt,"__init__()"),Cdt.forEach(t),t$o=r(ADe," (throws an error)."),ADe.forEach(t),a$o=i(Ws),it=n(Ws,"DIV",{class:!0});var Gw=s(it);T(yL.$$.fragment,Gw),n$o=i(Gw),Bfe=n(Gw,"P",{});var wdt=s(Bfe);s$o=r(wdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wdt.forEach(t),l$o=i(Gw),Oi=n(Gw,"P",{});var AZ=s(Oi);i$o=r(AZ,`Note:
Loading a model from its configuration file does `),Ife=n(AZ,"STRONG",{});var Adt=s(Ife);d$o=r(Adt,"not"),Adt.forEach(t),c$o=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iG=n(AZ,"A",{href:!0});var ydt=s(iG);f$o=r(ydt,"from_pretrained()"),ydt.forEach(t),m$o=r(AZ," to load the model weights."),AZ.forEach(t),g$o=i(Gw),T(O1.$$.fragment,Gw),Gw.forEach(t),h$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(LL.$$.fragment,sa),p$o=i(sa),qfe=n(sa,"P",{});var Ldt=s(qfe);u$o=r(Ldt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ldt.forEach(t),_$o=i(sa),Ra=n(sa,"P",{});var Ow=s(Ra);b$o=r(Ow,"The model class to instantiate is selected based on the "),Nfe=n(Ow,"CODE",{});var xdt=s(Nfe);v$o=r(xdt,"model_type"),xdt.forEach(t),F$o=r(Ow,` property of the config object (either
passed as an argument or loaded from `),jfe=n(Ow,"CODE",{});var $dt=s(jfe);T$o=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),M$o=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(Ow,"CODE",{});var kdt=s(Dfe);E$o=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),C$o=r(Ow,":"),Ow.forEach(t),w$o=i(sa),q=n(sa,"UL",{});var j=s(q);V1=n(j,"LI",{});var t9e=s(V1);Gfe=n(t9e,"STRONG",{});var Sdt=s(Gfe);A$o=r(Sdt,"albert"),Sdt.forEach(t),y$o=r(t9e," \u2014 "),dG=n(t9e,"A",{href:!0});var Rdt=s(dG);L$o=r(Rdt,"AlbertForSequenceClassification"),Rdt.forEach(t),x$o=r(t9e," (ALBERT model)"),t9e.forEach(t),$$o=i(j),X1=n(j,"LI",{});var a9e=s(X1);Ofe=n(a9e,"STRONG",{});var Pdt=s(Ofe);k$o=r(Pdt,"bart"),Pdt.forEach(t),S$o=r(a9e," \u2014 "),cG=n(a9e,"A",{href:!0});var Bdt=s(cG);R$o=r(Bdt,"BartForSequenceClassification"),Bdt.forEach(t),P$o=r(a9e," (BART model)"),a9e.forEach(t),B$o=i(j),z1=n(j,"LI",{});var n9e=s(z1);Vfe=n(n9e,"STRONG",{});var Idt=s(Vfe);I$o=r(Idt,"bert"),Idt.forEach(t),q$o=r(n9e," \u2014 "),fG=n(n9e,"A",{href:!0});var qdt=s(fG);N$o=r(qdt,"BertForSequenceClassification"),qdt.forEach(t),j$o=r(n9e," (BERT model)"),n9e.forEach(t),D$o=i(j),W1=n(j,"LI",{});var s9e=s(W1);Xfe=n(s9e,"STRONG",{});var Ndt=s(Xfe);G$o=r(Ndt,"big_bird"),Ndt.forEach(t),O$o=r(s9e," \u2014 "),mG=n(s9e,"A",{href:!0});var jdt=s(mG);V$o=r(jdt,"BigBirdForSequenceClassification"),jdt.forEach(t),X$o=r(s9e," (BigBird model)"),s9e.forEach(t),z$o=i(j),Q1=n(j,"LI",{});var l9e=s(Q1);zfe=n(l9e,"STRONG",{});var Ddt=s(zfe);W$o=r(Ddt,"bigbird_pegasus"),Ddt.forEach(t),Q$o=r(l9e," \u2014 "),gG=n(l9e,"A",{href:!0});var Gdt=s(gG);H$o=r(Gdt,"BigBirdPegasusForSequenceClassification"),Gdt.forEach(t),U$o=r(l9e," (BigBirdPegasus model)"),l9e.forEach(t),J$o=i(j),H1=n(j,"LI",{});var i9e=s(H1);Wfe=n(i9e,"STRONG",{});var Odt=s(Wfe);Y$o=r(Odt,"camembert"),Odt.forEach(t),K$o=r(i9e," \u2014 "),hG=n(i9e,"A",{href:!0});var Vdt=s(hG);Z$o=r(Vdt,"CamembertForSequenceClassification"),Vdt.forEach(t),eko=r(i9e," (CamemBERT model)"),i9e.forEach(t),oko=i(j),U1=n(j,"LI",{});var d9e=s(U1);Qfe=n(d9e,"STRONG",{});var Xdt=s(Qfe);rko=r(Xdt,"canine"),Xdt.forEach(t),tko=r(d9e," \u2014 "),pG=n(d9e,"A",{href:!0});var zdt=s(pG);ako=r(zdt,"CanineForSequenceClassification"),zdt.forEach(t),nko=r(d9e," (Canine model)"),d9e.forEach(t),sko=i(j),J1=n(j,"LI",{});var c9e=s(J1);Hfe=n(c9e,"STRONG",{});var Wdt=s(Hfe);lko=r(Wdt,"convbert"),Wdt.forEach(t),iko=r(c9e," \u2014 "),uG=n(c9e,"A",{href:!0});var Qdt=s(uG);dko=r(Qdt,"ConvBertForSequenceClassification"),Qdt.forEach(t),cko=r(c9e," (ConvBERT model)"),c9e.forEach(t),fko=i(j),Y1=n(j,"LI",{});var f9e=s(Y1);Ufe=n(f9e,"STRONG",{});var Hdt=s(Ufe);mko=r(Hdt,"ctrl"),Hdt.forEach(t),gko=r(f9e," \u2014 "),_G=n(f9e,"A",{href:!0});var Udt=s(_G);hko=r(Udt,"CTRLForSequenceClassification"),Udt.forEach(t),pko=r(f9e," (CTRL model)"),f9e.forEach(t),uko=i(j),K1=n(j,"LI",{});var m9e=s(K1);Jfe=n(m9e,"STRONG",{});var Jdt=s(Jfe);_ko=r(Jdt,"data2vec-text"),Jdt.forEach(t),bko=r(m9e," \u2014 "),bG=n(m9e,"A",{href:!0});var Ydt=s(bG);vko=r(Ydt,"Data2VecTextForSequenceClassification"),Ydt.forEach(t),Fko=r(m9e," (Data2VecText model)"),m9e.forEach(t),Tko=i(j),Z1=n(j,"LI",{});var g9e=s(Z1);Yfe=n(g9e,"STRONG",{});var Kdt=s(Yfe);Mko=r(Kdt,"deberta"),Kdt.forEach(t),Eko=r(g9e," \u2014 "),vG=n(g9e,"A",{href:!0});var Zdt=s(vG);Cko=r(Zdt,"DebertaForSequenceClassification"),Zdt.forEach(t),wko=r(g9e," (DeBERTa model)"),g9e.forEach(t),Ako=i(j),eb=n(j,"LI",{});var h9e=s(eb);Kfe=n(h9e,"STRONG",{});var ect=s(Kfe);yko=r(ect,"deberta-v2"),ect.forEach(t),Lko=r(h9e," \u2014 "),FG=n(h9e,"A",{href:!0});var oct=s(FG);xko=r(oct,"DebertaV2ForSequenceClassification"),oct.forEach(t),$ko=r(h9e," (DeBERTa-v2 model)"),h9e.forEach(t),kko=i(j),ob=n(j,"LI",{});var p9e=s(ob);Zfe=n(p9e,"STRONG",{});var rct=s(Zfe);Sko=r(rct,"distilbert"),rct.forEach(t),Rko=r(p9e," \u2014 "),TG=n(p9e,"A",{href:!0});var tct=s(TG);Pko=r(tct,"DistilBertForSequenceClassification"),tct.forEach(t),Bko=r(p9e," (DistilBERT model)"),p9e.forEach(t),Iko=i(j),rb=n(j,"LI",{});var u9e=s(rb);eme=n(u9e,"STRONG",{});var act=s(eme);qko=r(act,"electra"),act.forEach(t),Nko=r(u9e," \u2014 "),MG=n(u9e,"A",{href:!0});var nct=s(MG);jko=r(nct,"ElectraForSequenceClassification"),nct.forEach(t),Dko=r(u9e," (ELECTRA model)"),u9e.forEach(t),Gko=i(j),tb=n(j,"LI",{});var _9e=s(tb);ome=n(_9e,"STRONG",{});var sct=s(ome);Oko=r(sct,"flaubert"),sct.forEach(t),Vko=r(_9e," \u2014 "),EG=n(_9e,"A",{href:!0});var lct=s(EG);Xko=r(lct,"FlaubertForSequenceClassification"),lct.forEach(t),zko=r(_9e," (FlauBERT model)"),_9e.forEach(t),Wko=i(j),ab=n(j,"LI",{});var b9e=s(ab);rme=n(b9e,"STRONG",{});var ict=s(rme);Qko=r(ict,"fnet"),ict.forEach(t),Hko=r(b9e," \u2014 "),CG=n(b9e,"A",{href:!0});var dct=s(CG);Uko=r(dct,"FNetForSequenceClassification"),dct.forEach(t),Jko=r(b9e," (FNet model)"),b9e.forEach(t),Yko=i(j),nb=n(j,"LI",{});var v9e=s(nb);tme=n(v9e,"STRONG",{});var cct=s(tme);Kko=r(cct,"funnel"),cct.forEach(t),Zko=r(v9e," \u2014 "),wG=n(v9e,"A",{href:!0});var fct=s(wG);eSo=r(fct,"FunnelForSequenceClassification"),fct.forEach(t),oSo=r(v9e," (Funnel Transformer model)"),v9e.forEach(t),rSo=i(j),sb=n(j,"LI",{});var F9e=s(sb);ame=n(F9e,"STRONG",{});var mct=s(ame);tSo=r(mct,"gpt2"),mct.forEach(t),aSo=r(F9e," \u2014 "),AG=n(F9e,"A",{href:!0});var gct=s(AG);nSo=r(gct,"GPT2ForSequenceClassification"),gct.forEach(t),sSo=r(F9e," (OpenAI GPT-2 model)"),F9e.forEach(t),lSo=i(j),lb=n(j,"LI",{});var T9e=s(lb);nme=n(T9e,"STRONG",{});var hct=s(nme);iSo=r(hct,"gpt_neo"),hct.forEach(t),dSo=r(T9e," \u2014 "),yG=n(T9e,"A",{href:!0});var pct=s(yG);cSo=r(pct,"GPTNeoForSequenceClassification"),pct.forEach(t),fSo=r(T9e," (GPT Neo model)"),T9e.forEach(t),mSo=i(j),ib=n(j,"LI",{});var M9e=s(ib);sme=n(M9e,"STRONG",{});var uct=s(sme);gSo=r(uct,"gptj"),uct.forEach(t),hSo=r(M9e," \u2014 "),LG=n(M9e,"A",{href:!0});var _ct=s(LG);pSo=r(_ct,"GPTJForSequenceClassification"),_ct.forEach(t),uSo=r(M9e," (GPT-J model)"),M9e.forEach(t),_So=i(j),db=n(j,"LI",{});var E9e=s(db);lme=n(E9e,"STRONG",{});var bct=s(lme);bSo=r(bct,"ibert"),bct.forEach(t),vSo=r(E9e," \u2014 "),xG=n(E9e,"A",{href:!0});var vct=s(xG);FSo=r(vct,"IBertForSequenceClassification"),vct.forEach(t),TSo=r(E9e," (I-BERT model)"),E9e.forEach(t),MSo=i(j),cb=n(j,"LI",{});var C9e=s(cb);ime=n(C9e,"STRONG",{});var Fct=s(ime);ESo=r(Fct,"layoutlm"),Fct.forEach(t),CSo=r(C9e," \u2014 "),$G=n(C9e,"A",{href:!0});var Tct=s($G);wSo=r(Tct,"LayoutLMForSequenceClassification"),Tct.forEach(t),ASo=r(C9e," (LayoutLM model)"),C9e.forEach(t),ySo=i(j),fb=n(j,"LI",{});var w9e=s(fb);dme=n(w9e,"STRONG",{});var Mct=s(dme);LSo=r(Mct,"layoutlmv2"),Mct.forEach(t),xSo=r(w9e," \u2014 "),kG=n(w9e,"A",{href:!0});var Ect=s(kG);$So=r(Ect,"LayoutLMv2ForSequenceClassification"),Ect.forEach(t),kSo=r(w9e," (LayoutLMv2 model)"),w9e.forEach(t),SSo=i(j),mb=n(j,"LI",{});var A9e=s(mb);cme=n(A9e,"STRONG",{});var Cct=s(cme);RSo=r(Cct,"layoutlmv3"),Cct.forEach(t),PSo=r(A9e," \u2014 "),SG=n(A9e,"A",{href:!0});var wct=s(SG);BSo=r(wct,"LayoutLMv3ForSequenceClassification"),wct.forEach(t),ISo=r(A9e," (LayoutLMv3 model)"),A9e.forEach(t),qSo=i(j),gb=n(j,"LI",{});var y9e=s(gb);fme=n(y9e,"STRONG",{});var Act=s(fme);NSo=r(Act,"led"),Act.forEach(t),jSo=r(y9e," \u2014 "),RG=n(y9e,"A",{href:!0});var yct=s(RG);DSo=r(yct,"LEDForSequenceClassification"),yct.forEach(t),GSo=r(y9e," (LED model)"),y9e.forEach(t),OSo=i(j),hb=n(j,"LI",{});var L9e=s(hb);mme=n(L9e,"STRONG",{});var Lct=s(mme);VSo=r(Lct,"longformer"),Lct.forEach(t),XSo=r(L9e," \u2014 "),PG=n(L9e,"A",{href:!0});var xct=s(PG);zSo=r(xct,"LongformerForSequenceClassification"),xct.forEach(t),WSo=r(L9e," (Longformer model)"),L9e.forEach(t),QSo=i(j),pb=n(j,"LI",{});var x9e=s(pb);gme=n(x9e,"STRONG",{});var $ct=s(gme);HSo=r($ct,"mbart"),$ct.forEach(t),USo=r(x9e," \u2014 "),BG=n(x9e,"A",{href:!0});var kct=s(BG);JSo=r(kct,"MBartForSequenceClassification"),kct.forEach(t),YSo=r(x9e," (mBART model)"),x9e.forEach(t),KSo=i(j),ub=n(j,"LI",{});var $9e=s(ub);hme=n($9e,"STRONG",{});var Sct=s(hme);ZSo=r(Sct,"megatron-bert"),Sct.forEach(t),eRo=r($9e," \u2014 "),IG=n($9e,"A",{href:!0});var Rct=s(IG);oRo=r(Rct,"MegatronBertForSequenceClassification"),Rct.forEach(t),rRo=r($9e," (MegatronBert model)"),$9e.forEach(t),tRo=i(j),_b=n(j,"LI",{});var k9e=s(_b);pme=n(k9e,"STRONG",{});var Pct=s(pme);aRo=r(Pct,"mobilebert"),Pct.forEach(t),nRo=r(k9e," \u2014 "),qG=n(k9e,"A",{href:!0});var Bct=s(qG);sRo=r(Bct,"MobileBertForSequenceClassification"),Bct.forEach(t),lRo=r(k9e," (MobileBERT model)"),k9e.forEach(t),iRo=i(j),bb=n(j,"LI",{});var S9e=s(bb);ume=n(S9e,"STRONG",{});var Ict=s(ume);dRo=r(Ict,"mpnet"),Ict.forEach(t),cRo=r(S9e," \u2014 "),NG=n(S9e,"A",{href:!0});var qct=s(NG);fRo=r(qct,"MPNetForSequenceClassification"),qct.forEach(t),mRo=r(S9e," (MPNet model)"),S9e.forEach(t),gRo=i(j),vb=n(j,"LI",{});var R9e=s(vb);_me=n(R9e,"STRONG",{});var Nct=s(_me);hRo=r(Nct,"nystromformer"),Nct.forEach(t),pRo=r(R9e," \u2014 "),jG=n(R9e,"A",{href:!0});var jct=s(jG);uRo=r(jct,"NystromformerForSequenceClassification"),jct.forEach(t),_Ro=r(R9e," (Nystromformer model)"),R9e.forEach(t),bRo=i(j),Fb=n(j,"LI",{});var P9e=s(Fb);bme=n(P9e,"STRONG",{});var Dct=s(bme);vRo=r(Dct,"openai-gpt"),Dct.forEach(t),FRo=r(P9e," \u2014 "),DG=n(P9e,"A",{href:!0});var Gct=s(DG);TRo=r(Gct,"OpenAIGPTForSequenceClassification"),Gct.forEach(t),MRo=r(P9e," (OpenAI GPT model)"),P9e.forEach(t),ERo=i(j),Tb=n(j,"LI",{});var B9e=s(Tb);vme=n(B9e,"STRONG",{});var Oct=s(vme);CRo=r(Oct,"perceiver"),Oct.forEach(t),wRo=r(B9e," \u2014 "),GG=n(B9e,"A",{href:!0});var Vct=s(GG);ARo=r(Vct,"PerceiverForSequenceClassification"),Vct.forEach(t),yRo=r(B9e," (Perceiver model)"),B9e.forEach(t),LRo=i(j),Mb=n(j,"LI",{});var I9e=s(Mb);Fme=n(I9e,"STRONG",{});var Xct=s(Fme);xRo=r(Xct,"plbart"),Xct.forEach(t),$Ro=r(I9e," \u2014 "),OG=n(I9e,"A",{href:!0});var zct=s(OG);kRo=r(zct,"PLBartForSequenceClassification"),zct.forEach(t),SRo=r(I9e," (PLBart model)"),I9e.forEach(t),RRo=i(j),Eb=n(j,"LI",{});var q9e=s(Eb);Tme=n(q9e,"STRONG",{});var Wct=s(Tme);PRo=r(Wct,"qdqbert"),Wct.forEach(t),BRo=r(q9e," \u2014 "),VG=n(q9e,"A",{href:!0});var Qct=s(VG);IRo=r(Qct,"QDQBertForSequenceClassification"),Qct.forEach(t),qRo=r(q9e," (QDQBert model)"),q9e.forEach(t),NRo=i(j),Cb=n(j,"LI",{});var N9e=s(Cb);Mme=n(N9e,"STRONG",{});var Hct=s(Mme);jRo=r(Hct,"reformer"),Hct.forEach(t),DRo=r(N9e," \u2014 "),XG=n(N9e,"A",{href:!0});var Uct=s(XG);GRo=r(Uct,"ReformerForSequenceClassification"),Uct.forEach(t),ORo=r(N9e," (Reformer model)"),N9e.forEach(t),VRo=i(j),wb=n(j,"LI",{});var j9e=s(wb);Eme=n(j9e,"STRONG",{});var Jct=s(Eme);XRo=r(Jct,"rembert"),Jct.forEach(t),zRo=r(j9e," \u2014 "),zG=n(j9e,"A",{href:!0});var Yct=s(zG);WRo=r(Yct,"RemBertForSequenceClassification"),Yct.forEach(t),QRo=r(j9e," (RemBERT model)"),j9e.forEach(t),HRo=i(j),Ab=n(j,"LI",{});var D9e=s(Ab);Cme=n(D9e,"STRONG",{});var Kct=s(Cme);URo=r(Kct,"roberta"),Kct.forEach(t),JRo=r(D9e," \u2014 "),WG=n(D9e,"A",{href:!0});var Zct=s(WG);YRo=r(Zct,"RobertaForSequenceClassification"),Zct.forEach(t),KRo=r(D9e," (RoBERTa model)"),D9e.forEach(t),ZRo=i(j),yb=n(j,"LI",{});var G9e=s(yb);wme=n(G9e,"STRONG",{});var eft=s(wme);ePo=r(eft,"roformer"),eft.forEach(t),oPo=r(G9e," \u2014 "),QG=n(G9e,"A",{href:!0});var oft=s(QG);rPo=r(oft,"RoFormerForSequenceClassification"),oft.forEach(t),tPo=r(G9e," (RoFormer model)"),G9e.forEach(t),aPo=i(j),Lb=n(j,"LI",{});var O9e=s(Lb);Ame=n(O9e,"STRONG",{});var rft=s(Ame);nPo=r(rft,"squeezebert"),rft.forEach(t),sPo=r(O9e," \u2014 "),HG=n(O9e,"A",{href:!0});var tft=s(HG);lPo=r(tft,"SqueezeBertForSequenceClassification"),tft.forEach(t),iPo=r(O9e," (SqueezeBERT model)"),O9e.forEach(t),dPo=i(j),xb=n(j,"LI",{});var V9e=s(xb);yme=n(V9e,"STRONG",{});var aft=s(yme);cPo=r(aft,"tapas"),aft.forEach(t),fPo=r(V9e," \u2014 "),UG=n(V9e,"A",{href:!0});var nft=s(UG);mPo=r(nft,"TapasForSequenceClassification"),nft.forEach(t),gPo=r(V9e," (TAPAS model)"),V9e.forEach(t),hPo=i(j),$b=n(j,"LI",{});var X9e=s($b);Lme=n(X9e,"STRONG",{});var sft=s(Lme);pPo=r(sft,"transfo-xl"),sft.forEach(t),uPo=r(X9e," \u2014 "),JG=n(X9e,"A",{href:!0});var lft=s(JG);_Po=r(lft,"TransfoXLForSequenceClassification"),lft.forEach(t),bPo=r(X9e," (Transformer-XL model)"),X9e.forEach(t),vPo=i(j),kb=n(j,"LI",{});var z9e=s(kb);xme=n(z9e,"STRONG",{});var ift=s(xme);FPo=r(ift,"xlm"),ift.forEach(t),TPo=r(z9e," \u2014 "),YG=n(z9e,"A",{href:!0});var dft=s(YG);MPo=r(dft,"XLMForSequenceClassification"),dft.forEach(t),EPo=r(z9e," (XLM model)"),z9e.forEach(t),CPo=i(j),Sb=n(j,"LI",{});var W9e=s(Sb);$me=n(W9e,"STRONG",{});var cft=s($me);wPo=r(cft,"xlm-roberta"),cft.forEach(t),APo=r(W9e," \u2014 "),KG=n(W9e,"A",{href:!0});var fft=s(KG);yPo=r(fft,"XLMRobertaForSequenceClassification"),fft.forEach(t),LPo=r(W9e," (XLM-RoBERTa model)"),W9e.forEach(t),xPo=i(j),Rb=n(j,"LI",{});var Q9e=s(Rb);kme=n(Q9e,"STRONG",{});var mft=s(kme);$Po=r(mft,"xlm-roberta-xl"),mft.forEach(t),kPo=r(Q9e," \u2014 "),ZG=n(Q9e,"A",{href:!0});var gft=s(ZG);SPo=r(gft,"XLMRobertaXLForSequenceClassification"),gft.forEach(t),RPo=r(Q9e," (XLM-RoBERTa-XL model)"),Q9e.forEach(t),PPo=i(j),Pb=n(j,"LI",{});var H9e=s(Pb);Sme=n(H9e,"STRONG",{});var hft=s(Sme);BPo=r(hft,"xlnet"),hft.forEach(t),IPo=r(H9e," \u2014 "),eO=n(H9e,"A",{href:!0});var pft=s(eO);qPo=r(pft,"XLNetForSequenceClassification"),pft.forEach(t),NPo=r(H9e," (XLNet model)"),H9e.forEach(t),jPo=i(j),Bb=n(j,"LI",{});var U9e=s(Bb);Rme=n(U9e,"STRONG",{});var uft=s(Rme);DPo=r(uft,"yoso"),uft.forEach(t),GPo=r(U9e," \u2014 "),oO=n(U9e,"A",{href:!0});var _ft=s(oO);OPo=r(_ft,"YosoForSequenceClassification"),_ft.forEach(t),VPo=r(U9e," (YOSO model)"),U9e.forEach(t),j.forEach(t),XPo=i(sa),Ib=n(sa,"P",{});var J9e=s(Ib);zPo=r(J9e,"The model is set in evaluation mode by default using "),Pme=n(J9e,"CODE",{});var bft=s(Pme);WPo=r(bft,"model.eval()"),bft.forEach(t),QPo=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=n(J9e,"CODE",{});var vft=s(Bme);HPo=r(vft,"model.train()"),vft.forEach(t),J9e.forEach(t),UPo=i(sa),T(qb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),ENe=i(f),Vi=n(f,"H2",{class:!0});var yDe=s(Vi);Nb=n(yDe,"A",{id:!0,class:!0,href:!0});var Fft=s(Nb);Ime=n(Fft,"SPAN",{});var Tft=s(Ime);T(xL.$$.fragment,Tft),Tft.forEach(t),Fft.forEach(t),JPo=i(yDe),qme=n(yDe,"SPAN",{});var Mft=s(qme);YPo=r(Mft,"AutoModelForMultipleChoice"),Mft.forEach(t),yDe.forEach(t),CNe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T($L.$$.fragment,Qs),KPo=i(Qs),Xi=n(Qs,"P",{});var yZ=s(Xi);ZPo=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rO=n(yZ,"A",{href:!0});var Eft=s(rO);eBo=r(Eft,"from_pretrained()"),Eft.forEach(t),oBo=r(yZ," class method or the "),tO=n(yZ,"A",{href:!0});var Cft=s(tO);rBo=r(Cft,"from_config()"),Cft.forEach(t),tBo=r(yZ,` class
method.`),yZ.forEach(t),aBo=i(Qs),kL=n(Qs,"P",{});var LDe=s(kL);nBo=r(LDe,"This class cannot be instantiated directly using "),Nme=n(LDe,"CODE",{});var wft=s(Nme);sBo=r(wft,"__init__()"),wft.forEach(t),lBo=r(LDe," (throws an error)."),LDe.forEach(t),iBo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Vw=s(dt);T(SL.$$.fragment,Vw),dBo=i(Vw),jme=n(Vw,"P",{});var Aft=s(jme);cBo=r(Aft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Aft.forEach(t),fBo=i(Vw),zi=n(Vw,"P",{});var LZ=s(zi);mBo=r(LZ,`Note:
Loading a model from its configuration file does `),Dme=n(LZ,"STRONG",{});var yft=s(Dme);gBo=r(yft,"not"),yft.forEach(t),hBo=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(LZ,"A",{href:!0});var Lft=s(aO);pBo=r(Lft,"from_pretrained()"),Lft.forEach(t),uBo=r(LZ," to load the model weights."),LZ.forEach(t),_Bo=i(Vw),T(jb.$$.fragment,Vw),Vw.forEach(t),bBo=i(Qs),ro=n(Qs,"DIV",{class:!0});var la=s(ro);T(RL.$$.fragment,la),vBo=i(la),Gme=n(la,"P",{});var xft=s(Gme);FBo=r(xft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xft.forEach(t),TBo=i(la),Pa=n(la,"P",{});var Xw=s(Pa);MBo=r(Xw,"The model class to instantiate is selected based on the "),Ome=n(Xw,"CODE",{});var $ft=s(Ome);EBo=r($ft,"model_type"),$ft.forEach(t),CBo=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Vme=n(Xw,"CODE",{});var kft=s(Vme);wBo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),ABo=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(Xw,"CODE",{});var Sft=s(Xme);yBo=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),LBo=r(Xw,":"),Xw.forEach(t),xBo=i(la),K=n(la,"UL",{});var ee=s(K);Db=n(ee,"LI",{});var Y9e=s(Db);zme=n(Y9e,"STRONG",{});var Rft=s(zme);$Bo=r(Rft,"albert"),Rft.forEach(t),kBo=r(Y9e," \u2014 "),nO=n(Y9e,"A",{href:!0});var Pft=s(nO);SBo=r(Pft,"AlbertForMultipleChoice"),Pft.forEach(t),RBo=r(Y9e," (ALBERT model)"),Y9e.forEach(t),PBo=i(ee),Gb=n(ee,"LI",{});var K9e=s(Gb);Wme=n(K9e,"STRONG",{});var Bft=s(Wme);BBo=r(Bft,"bert"),Bft.forEach(t),IBo=r(K9e," \u2014 "),sO=n(K9e,"A",{href:!0});var Ift=s(sO);qBo=r(Ift,"BertForMultipleChoice"),Ift.forEach(t),NBo=r(K9e," (BERT model)"),K9e.forEach(t),jBo=i(ee),Ob=n(ee,"LI",{});var Z9e=s(Ob);Qme=n(Z9e,"STRONG",{});var qft=s(Qme);DBo=r(qft,"big_bird"),qft.forEach(t),GBo=r(Z9e," \u2014 "),lO=n(Z9e,"A",{href:!0});var Nft=s(lO);OBo=r(Nft,"BigBirdForMultipleChoice"),Nft.forEach(t),VBo=r(Z9e," (BigBird model)"),Z9e.forEach(t),XBo=i(ee),Vb=n(ee,"LI",{});var exe=s(Vb);Hme=n(exe,"STRONG",{});var jft=s(Hme);zBo=r(jft,"camembert"),jft.forEach(t),WBo=r(exe," \u2014 "),iO=n(exe,"A",{href:!0});var Dft=s(iO);QBo=r(Dft,"CamembertForMultipleChoice"),Dft.forEach(t),HBo=r(exe," (CamemBERT model)"),exe.forEach(t),UBo=i(ee),Xb=n(ee,"LI",{});var oxe=s(Xb);Ume=n(oxe,"STRONG",{});var Gft=s(Ume);JBo=r(Gft,"canine"),Gft.forEach(t),YBo=r(oxe," \u2014 "),dO=n(oxe,"A",{href:!0});var Oft=s(dO);KBo=r(Oft,"CanineForMultipleChoice"),Oft.forEach(t),ZBo=r(oxe," (Canine model)"),oxe.forEach(t),eIo=i(ee),zb=n(ee,"LI",{});var rxe=s(zb);Jme=n(rxe,"STRONG",{});var Vft=s(Jme);oIo=r(Vft,"convbert"),Vft.forEach(t),rIo=r(rxe," \u2014 "),cO=n(rxe,"A",{href:!0});var Xft=s(cO);tIo=r(Xft,"ConvBertForMultipleChoice"),Xft.forEach(t),aIo=r(rxe," (ConvBERT model)"),rxe.forEach(t),nIo=i(ee),Wb=n(ee,"LI",{});var txe=s(Wb);Yme=n(txe,"STRONG",{});var zft=s(Yme);sIo=r(zft,"data2vec-text"),zft.forEach(t),lIo=r(txe," \u2014 "),fO=n(txe,"A",{href:!0});var Wft=s(fO);iIo=r(Wft,"Data2VecTextForMultipleChoice"),Wft.forEach(t),dIo=r(txe," (Data2VecText model)"),txe.forEach(t),cIo=i(ee),Qb=n(ee,"LI",{});var axe=s(Qb);Kme=n(axe,"STRONG",{});var Qft=s(Kme);fIo=r(Qft,"deberta-v2"),Qft.forEach(t),mIo=r(axe," \u2014 "),mO=n(axe,"A",{href:!0});var Hft=s(mO);gIo=r(Hft,"DebertaV2ForMultipleChoice"),Hft.forEach(t),hIo=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),pIo=i(ee),Hb=n(ee,"LI",{});var nxe=s(Hb);Zme=n(nxe,"STRONG",{});var Uft=s(Zme);uIo=r(Uft,"distilbert"),Uft.forEach(t),_Io=r(nxe," \u2014 "),gO=n(nxe,"A",{href:!0});var Jft=s(gO);bIo=r(Jft,"DistilBertForMultipleChoice"),Jft.forEach(t),vIo=r(nxe," (DistilBERT model)"),nxe.forEach(t),FIo=i(ee),Ub=n(ee,"LI",{});var sxe=s(Ub);ege=n(sxe,"STRONG",{});var Yft=s(ege);TIo=r(Yft,"electra"),Yft.forEach(t),MIo=r(sxe," \u2014 "),hO=n(sxe,"A",{href:!0});var Kft=s(hO);EIo=r(Kft,"ElectraForMultipleChoice"),Kft.forEach(t),CIo=r(sxe," (ELECTRA model)"),sxe.forEach(t),wIo=i(ee),Jb=n(ee,"LI",{});var lxe=s(Jb);oge=n(lxe,"STRONG",{});var Zft=s(oge);AIo=r(Zft,"flaubert"),Zft.forEach(t),yIo=r(lxe," \u2014 "),pO=n(lxe,"A",{href:!0});var emt=s(pO);LIo=r(emt,"FlaubertForMultipleChoice"),emt.forEach(t),xIo=r(lxe," (FlauBERT model)"),lxe.forEach(t),$Io=i(ee),Yb=n(ee,"LI",{});var ixe=s(Yb);rge=n(ixe,"STRONG",{});var omt=s(rge);kIo=r(omt,"fnet"),omt.forEach(t),SIo=r(ixe," \u2014 "),uO=n(ixe,"A",{href:!0});var rmt=s(uO);RIo=r(rmt,"FNetForMultipleChoice"),rmt.forEach(t),PIo=r(ixe," (FNet model)"),ixe.forEach(t),BIo=i(ee),Kb=n(ee,"LI",{});var dxe=s(Kb);tge=n(dxe,"STRONG",{});var tmt=s(tge);IIo=r(tmt,"funnel"),tmt.forEach(t),qIo=r(dxe," \u2014 "),_O=n(dxe,"A",{href:!0});var amt=s(_O);NIo=r(amt,"FunnelForMultipleChoice"),amt.forEach(t),jIo=r(dxe," (Funnel Transformer model)"),dxe.forEach(t),DIo=i(ee),Zb=n(ee,"LI",{});var cxe=s(Zb);age=n(cxe,"STRONG",{});var nmt=s(age);GIo=r(nmt,"ibert"),nmt.forEach(t),OIo=r(cxe," \u2014 "),bO=n(cxe,"A",{href:!0});var smt=s(bO);VIo=r(smt,"IBertForMultipleChoice"),smt.forEach(t),XIo=r(cxe," (I-BERT model)"),cxe.forEach(t),zIo=i(ee),e2=n(ee,"LI",{});var fxe=s(e2);nge=n(fxe,"STRONG",{});var lmt=s(nge);WIo=r(lmt,"longformer"),lmt.forEach(t),QIo=r(fxe," \u2014 "),vO=n(fxe,"A",{href:!0});var imt=s(vO);HIo=r(imt,"LongformerForMultipleChoice"),imt.forEach(t),UIo=r(fxe," (Longformer model)"),fxe.forEach(t),JIo=i(ee),o2=n(ee,"LI",{});var mxe=s(o2);sge=n(mxe,"STRONG",{});var dmt=s(sge);YIo=r(dmt,"megatron-bert"),dmt.forEach(t),KIo=r(mxe," \u2014 "),FO=n(mxe,"A",{href:!0});var cmt=s(FO);ZIo=r(cmt,"MegatronBertForMultipleChoice"),cmt.forEach(t),eqo=r(mxe," (MegatronBert model)"),mxe.forEach(t),oqo=i(ee),r2=n(ee,"LI",{});var gxe=s(r2);lge=n(gxe,"STRONG",{});var fmt=s(lge);rqo=r(fmt,"mobilebert"),fmt.forEach(t),tqo=r(gxe," \u2014 "),TO=n(gxe,"A",{href:!0});var mmt=s(TO);aqo=r(mmt,"MobileBertForMultipleChoice"),mmt.forEach(t),nqo=r(gxe," (MobileBERT model)"),gxe.forEach(t),sqo=i(ee),t2=n(ee,"LI",{});var hxe=s(t2);ige=n(hxe,"STRONG",{});var gmt=s(ige);lqo=r(gmt,"mpnet"),gmt.forEach(t),iqo=r(hxe," \u2014 "),MO=n(hxe,"A",{href:!0});var hmt=s(MO);dqo=r(hmt,"MPNetForMultipleChoice"),hmt.forEach(t),cqo=r(hxe," (MPNet model)"),hxe.forEach(t),fqo=i(ee),a2=n(ee,"LI",{});var pxe=s(a2);dge=n(pxe,"STRONG",{});var pmt=s(dge);mqo=r(pmt,"nystromformer"),pmt.forEach(t),gqo=r(pxe," \u2014 "),EO=n(pxe,"A",{href:!0});var umt=s(EO);hqo=r(umt,"NystromformerForMultipleChoice"),umt.forEach(t),pqo=r(pxe," (Nystromformer model)"),pxe.forEach(t),uqo=i(ee),n2=n(ee,"LI",{});var uxe=s(n2);cge=n(uxe,"STRONG",{});var _mt=s(cge);_qo=r(_mt,"qdqbert"),_mt.forEach(t),bqo=r(uxe," \u2014 "),CO=n(uxe,"A",{href:!0});var bmt=s(CO);vqo=r(bmt,"QDQBertForMultipleChoice"),bmt.forEach(t),Fqo=r(uxe," (QDQBert model)"),uxe.forEach(t),Tqo=i(ee),s2=n(ee,"LI",{});var _xe=s(s2);fge=n(_xe,"STRONG",{});var vmt=s(fge);Mqo=r(vmt,"rembert"),vmt.forEach(t),Eqo=r(_xe," \u2014 "),wO=n(_xe,"A",{href:!0});var Fmt=s(wO);Cqo=r(Fmt,"RemBertForMultipleChoice"),Fmt.forEach(t),wqo=r(_xe," (RemBERT model)"),_xe.forEach(t),Aqo=i(ee),l2=n(ee,"LI",{});var bxe=s(l2);mge=n(bxe,"STRONG",{});var Tmt=s(mge);yqo=r(Tmt,"roberta"),Tmt.forEach(t),Lqo=r(bxe," \u2014 "),AO=n(bxe,"A",{href:!0});var Mmt=s(AO);xqo=r(Mmt,"RobertaForMultipleChoice"),Mmt.forEach(t),$qo=r(bxe," (RoBERTa model)"),bxe.forEach(t),kqo=i(ee),i2=n(ee,"LI",{});var vxe=s(i2);gge=n(vxe,"STRONG",{});var Emt=s(gge);Sqo=r(Emt,"roformer"),Emt.forEach(t),Rqo=r(vxe," \u2014 "),yO=n(vxe,"A",{href:!0});var Cmt=s(yO);Pqo=r(Cmt,"RoFormerForMultipleChoice"),Cmt.forEach(t),Bqo=r(vxe," (RoFormer model)"),vxe.forEach(t),Iqo=i(ee),d2=n(ee,"LI",{});var Fxe=s(d2);hge=n(Fxe,"STRONG",{});var wmt=s(hge);qqo=r(wmt,"squeezebert"),wmt.forEach(t),Nqo=r(Fxe," \u2014 "),LO=n(Fxe,"A",{href:!0});var Amt=s(LO);jqo=r(Amt,"SqueezeBertForMultipleChoice"),Amt.forEach(t),Dqo=r(Fxe," (SqueezeBERT model)"),Fxe.forEach(t),Gqo=i(ee),c2=n(ee,"LI",{});var Txe=s(c2);pge=n(Txe,"STRONG",{});var ymt=s(pge);Oqo=r(ymt,"xlm"),ymt.forEach(t),Vqo=r(Txe," \u2014 "),xO=n(Txe,"A",{href:!0});var Lmt=s(xO);Xqo=r(Lmt,"XLMForMultipleChoice"),Lmt.forEach(t),zqo=r(Txe," (XLM model)"),Txe.forEach(t),Wqo=i(ee),f2=n(ee,"LI",{});var Mxe=s(f2);uge=n(Mxe,"STRONG",{});var xmt=s(uge);Qqo=r(xmt,"xlm-roberta"),xmt.forEach(t),Hqo=r(Mxe," \u2014 "),$O=n(Mxe,"A",{href:!0});var $mt=s($O);Uqo=r($mt,"XLMRobertaForMultipleChoice"),$mt.forEach(t),Jqo=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),Yqo=i(ee),m2=n(ee,"LI",{});var Exe=s(m2);_ge=n(Exe,"STRONG",{});var kmt=s(_ge);Kqo=r(kmt,"xlm-roberta-xl"),kmt.forEach(t),Zqo=r(Exe," \u2014 "),kO=n(Exe,"A",{href:!0});var Smt=s(kO);eNo=r(Smt,"XLMRobertaXLForMultipleChoice"),Smt.forEach(t),oNo=r(Exe," (XLM-RoBERTa-XL model)"),Exe.forEach(t),rNo=i(ee),g2=n(ee,"LI",{});var Cxe=s(g2);bge=n(Cxe,"STRONG",{});var Rmt=s(bge);tNo=r(Rmt,"xlnet"),Rmt.forEach(t),aNo=r(Cxe," \u2014 "),SO=n(Cxe,"A",{href:!0});var Pmt=s(SO);nNo=r(Pmt,"XLNetForMultipleChoice"),Pmt.forEach(t),sNo=r(Cxe," (XLNet model)"),Cxe.forEach(t),lNo=i(ee),h2=n(ee,"LI",{});var wxe=s(h2);vge=n(wxe,"STRONG",{});var Bmt=s(vge);iNo=r(Bmt,"yoso"),Bmt.forEach(t),dNo=r(wxe," \u2014 "),RO=n(wxe,"A",{href:!0});var Imt=s(RO);cNo=r(Imt,"YosoForMultipleChoice"),Imt.forEach(t),fNo=r(wxe," (YOSO model)"),wxe.forEach(t),ee.forEach(t),mNo=i(la),p2=n(la,"P",{});var Axe=s(p2);gNo=r(Axe,"The model is set in evaluation mode by default using "),Fge=n(Axe,"CODE",{});var qmt=s(Fge);hNo=r(qmt,"model.eval()"),qmt.forEach(t),pNo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(Axe,"CODE",{});var Nmt=s(Tge);uNo=r(Nmt,"model.train()"),Nmt.forEach(t),Axe.forEach(t),_No=i(la),T(u2.$$.fragment,la),la.forEach(t),Qs.forEach(t),wNe=i(f),Wi=n(f,"H2",{class:!0});var xDe=s(Wi);_2=n(xDe,"A",{id:!0,class:!0,href:!0});var jmt=s(_2);Mge=n(jmt,"SPAN",{});var Dmt=s(Mge);T(PL.$$.fragment,Dmt),Dmt.forEach(t),jmt.forEach(t),bNo=i(xDe),Ege=n(xDe,"SPAN",{});var Gmt=s(Ege);vNo=r(Gmt,"AutoModelForNextSentencePrediction"),Gmt.forEach(t),xDe.forEach(t),ANe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(BL.$$.fragment,Hs),FNo=i(Hs),Qi=n(Hs,"P",{});var xZ=s(Qi);TNo=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PO=n(xZ,"A",{href:!0});var Omt=s(PO);MNo=r(Omt,"from_pretrained()"),Omt.forEach(t),ENo=r(xZ," class method or the "),BO=n(xZ,"A",{href:!0});var Vmt=s(BO);CNo=r(Vmt,"from_config()"),Vmt.forEach(t),wNo=r(xZ,` class
method.`),xZ.forEach(t),ANo=i(Hs),IL=n(Hs,"P",{});var $De=s(IL);yNo=r($De,"This class cannot be instantiated directly using "),Cge=n($De,"CODE",{});var Xmt=s(Cge);LNo=r(Xmt,"__init__()"),Xmt.forEach(t),xNo=r($De," (throws an error)."),$De.forEach(t),$No=i(Hs),ct=n(Hs,"DIV",{class:!0});var zw=s(ct);T(qL.$$.fragment,zw),kNo=i(zw),wge=n(zw,"P",{});var zmt=s(wge);SNo=r(zmt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zmt.forEach(t),RNo=i(zw),Hi=n(zw,"P",{});var $Z=s(Hi);PNo=r($Z,`Note:
Loading a model from its configuration file does `),Age=n($Z,"STRONG",{});var Wmt=s(Age);BNo=r(Wmt,"not"),Wmt.forEach(t),INo=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n($Z,"A",{href:!0});var Qmt=s(IO);qNo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),NNo=r($Z," to load the model weights."),$Z.forEach(t),jNo=i(zw),T(b2.$$.fragment,zw),zw.forEach(t),DNo=i(Hs),to=n(Hs,"DIV",{class:!0});var ia=s(to);T(NL.$$.fragment,ia),GNo=i(ia),yge=n(ia,"P",{});var Hmt=s(yge);ONo=r(Hmt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hmt.forEach(t),VNo=i(ia),Ba=n(ia,"P",{});var Ww=s(Ba);XNo=r(Ww,"The model class to instantiate is selected based on the "),Lge=n(Ww,"CODE",{});var Umt=s(Lge);zNo=r(Umt,"model_type"),Umt.forEach(t),WNo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),xge=n(Ww,"CODE",{});var Jmt=s(xge);QNo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),HNo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=n(Ww,"CODE",{});var Ymt=s($ge);UNo=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),JNo=r(Ww,":"),Ww.forEach(t),YNo=i(ia),Yr=n(ia,"UL",{});var Us=s(Yr);v2=n(Us,"LI",{});var yxe=s(v2);kge=n(yxe,"STRONG",{});var Kmt=s(kge);KNo=r(Kmt,"bert"),Kmt.forEach(t),ZNo=r(yxe," \u2014 "),qO=n(yxe,"A",{href:!0});var Zmt=s(qO);ejo=r(Zmt,"BertForNextSentencePrediction"),Zmt.forEach(t),ojo=r(yxe," (BERT model)"),yxe.forEach(t),rjo=i(Us),F2=n(Us,"LI",{});var Lxe=s(F2);Sge=n(Lxe,"STRONG",{});var egt=s(Sge);tjo=r(egt,"fnet"),egt.forEach(t),ajo=r(Lxe," \u2014 "),NO=n(Lxe,"A",{href:!0});var ogt=s(NO);njo=r(ogt,"FNetForNextSentencePrediction"),ogt.forEach(t),sjo=r(Lxe," (FNet model)"),Lxe.forEach(t),ljo=i(Us),T2=n(Us,"LI",{});var xxe=s(T2);Rge=n(xxe,"STRONG",{});var rgt=s(Rge);ijo=r(rgt,"megatron-bert"),rgt.forEach(t),djo=r(xxe," \u2014 "),jO=n(xxe,"A",{href:!0});var tgt=s(jO);cjo=r(tgt,"MegatronBertForNextSentencePrediction"),tgt.forEach(t),fjo=r(xxe," (MegatronBert model)"),xxe.forEach(t),mjo=i(Us),M2=n(Us,"LI",{});var $xe=s(M2);Pge=n($xe,"STRONG",{});var agt=s(Pge);gjo=r(agt,"mobilebert"),agt.forEach(t),hjo=r($xe," \u2014 "),DO=n($xe,"A",{href:!0});var ngt=s(DO);pjo=r(ngt,"MobileBertForNextSentencePrediction"),ngt.forEach(t),ujo=r($xe," (MobileBERT model)"),$xe.forEach(t),_jo=i(Us),E2=n(Us,"LI",{});var kxe=s(E2);Bge=n(kxe,"STRONG",{});var sgt=s(Bge);bjo=r(sgt,"qdqbert"),sgt.forEach(t),vjo=r(kxe," \u2014 "),GO=n(kxe,"A",{href:!0});var lgt=s(GO);Fjo=r(lgt,"QDQBertForNextSentencePrediction"),lgt.forEach(t),Tjo=r(kxe," (QDQBert model)"),kxe.forEach(t),Us.forEach(t),Mjo=i(ia),C2=n(ia,"P",{});var Sxe=s(C2);Ejo=r(Sxe,"The model is set in evaluation mode by default using "),Ige=n(Sxe,"CODE",{});var igt=s(Ige);Cjo=r(igt,"model.eval()"),igt.forEach(t),wjo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(Sxe,"CODE",{});var dgt=s(qge);Ajo=r(dgt,"model.train()"),dgt.forEach(t),Sxe.forEach(t),yjo=i(ia),T(w2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),yNe=i(f),Ui=n(f,"H2",{class:!0});var kDe=s(Ui);A2=n(kDe,"A",{id:!0,class:!0,href:!0});var cgt=s(A2);Nge=n(cgt,"SPAN",{});var fgt=s(Nge);T(jL.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),Ljo=i(kDe),jge=n(kDe,"SPAN",{});var mgt=s(jge);xjo=r(mgt,"AutoModelForTokenClassification"),mgt.forEach(t),kDe.forEach(t),LNe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(DL.$$.fragment,Js),$jo=i(Js),Ji=n(Js,"P",{});var kZ=s(Ji);kjo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OO=n(kZ,"A",{href:!0});var ggt=s(OO);Sjo=r(ggt,"from_pretrained()"),ggt.forEach(t),Rjo=r(kZ," class method or the "),VO=n(kZ,"A",{href:!0});var hgt=s(VO);Pjo=r(hgt,"from_config()"),hgt.forEach(t),Bjo=r(kZ,` class
method.`),kZ.forEach(t),Ijo=i(Js),GL=n(Js,"P",{});var SDe=s(GL);qjo=r(SDe,"This class cannot be instantiated directly using "),Dge=n(SDe,"CODE",{});var pgt=s(Dge);Njo=r(pgt,"__init__()"),pgt.forEach(t),jjo=r(SDe," (throws an error)."),SDe.forEach(t),Djo=i(Js),ft=n(Js,"DIV",{class:!0});var Qw=s(ft);T(OL.$$.fragment,Qw),Gjo=i(Qw),Gge=n(Qw,"P",{});var ugt=s(Gge);Ojo=r(ugt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ugt.forEach(t),Vjo=i(Qw),Yi=n(Qw,"P",{});var SZ=s(Yi);Xjo=r(SZ,`Note:
Loading a model from its configuration file does `),Oge=n(SZ,"STRONG",{});var _gt=s(Oge);zjo=r(_gt,"not"),_gt.forEach(t),Wjo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XO=n(SZ,"A",{href:!0});var bgt=s(XO);Qjo=r(bgt,"from_pretrained()"),bgt.forEach(t),Hjo=r(SZ," to load the model weights."),SZ.forEach(t),Ujo=i(Qw),T(y2.$$.fragment,Qw),Qw.forEach(t),Jjo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(VL.$$.fragment,da),Yjo=i(da),Vge=n(da,"P",{});var vgt=s(Vge);Kjo=r(vgt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vgt.forEach(t),Zjo=i(da),Ia=n(da,"P",{});var Hw=s(Ia);eDo=r(Hw,"The model class to instantiate is selected based on the "),Xge=n(Hw,"CODE",{});var Fgt=s(Xge);oDo=r(Fgt,"model_type"),Fgt.forEach(t),rDo=r(Hw,` property of the config object (either
passed as an argument or loaded from `),zge=n(Hw,"CODE",{});var Tgt=s(zge);tDo=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),aDo=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(Hw,"CODE",{});var Mgt=s(Wge);nDo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),sDo=r(Hw,":"),Hw.forEach(t),lDo=i(da),H=n(da,"UL",{});var J=s(H);L2=n(J,"LI",{});var Rxe=s(L2);Qge=n(Rxe,"STRONG",{});var Egt=s(Qge);iDo=r(Egt,"albert"),Egt.forEach(t),dDo=r(Rxe," \u2014 "),zO=n(Rxe,"A",{href:!0});var Cgt=s(zO);cDo=r(Cgt,"AlbertForTokenClassification"),Cgt.forEach(t),fDo=r(Rxe," (ALBERT model)"),Rxe.forEach(t),mDo=i(J),x2=n(J,"LI",{});var Pxe=s(x2);Hge=n(Pxe,"STRONG",{});var wgt=s(Hge);gDo=r(wgt,"bert"),wgt.forEach(t),hDo=r(Pxe," \u2014 "),WO=n(Pxe,"A",{href:!0});var Agt=s(WO);pDo=r(Agt,"BertForTokenClassification"),Agt.forEach(t),uDo=r(Pxe," (BERT model)"),Pxe.forEach(t),_Do=i(J),$2=n(J,"LI",{});var Bxe=s($2);Uge=n(Bxe,"STRONG",{});var ygt=s(Uge);bDo=r(ygt,"big_bird"),ygt.forEach(t),vDo=r(Bxe," \u2014 "),QO=n(Bxe,"A",{href:!0});var Lgt=s(QO);FDo=r(Lgt,"BigBirdForTokenClassification"),Lgt.forEach(t),TDo=r(Bxe," (BigBird model)"),Bxe.forEach(t),MDo=i(J),k2=n(J,"LI",{});var Ixe=s(k2);Jge=n(Ixe,"STRONG",{});var xgt=s(Jge);EDo=r(xgt,"camembert"),xgt.forEach(t),CDo=r(Ixe," \u2014 "),HO=n(Ixe,"A",{href:!0});var $gt=s(HO);wDo=r($gt,"CamembertForTokenClassification"),$gt.forEach(t),ADo=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),yDo=i(J),S2=n(J,"LI",{});var qxe=s(S2);Yge=n(qxe,"STRONG",{});var kgt=s(Yge);LDo=r(kgt,"canine"),kgt.forEach(t),xDo=r(qxe," \u2014 "),UO=n(qxe,"A",{href:!0});var Sgt=s(UO);$Do=r(Sgt,"CanineForTokenClassification"),Sgt.forEach(t),kDo=r(qxe," (Canine model)"),qxe.forEach(t),SDo=i(J),R2=n(J,"LI",{});var Nxe=s(R2);Kge=n(Nxe,"STRONG",{});var Rgt=s(Kge);RDo=r(Rgt,"convbert"),Rgt.forEach(t),PDo=r(Nxe," \u2014 "),JO=n(Nxe,"A",{href:!0});var Pgt=s(JO);BDo=r(Pgt,"ConvBertForTokenClassification"),Pgt.forEach(t),IDo=r(Nxe," (ConvBERT model)"),Nxe.forEach(t),qDo=i(J),P2=n(J,"LI",{});var jxe=s(P2);Zge=n(jxe,"STRONG",{});var Bgt=s(Zge);NDo=r(Bgt,"data2vec-text"),Bgt.forEach(t),jDo=r(jxe," \u2014 "),YO=n(jxe,"A",{href:!0});var Igt=s(YO);DDo=r(Igt,"Data2VecTextForTokenClassification"),Igt.forEach(t),GDo=r(jxe," (Data2VecText model)"),jxe.forEach(t),ODo=i(J),B2=n(J,"LI",{});var Dxe=s(B2);ehe=n(Dxe,"STRONG",{});var qgt=s(ehe);VDo=r(qgt,"deberta"),qgt.forEach(t),XDo=r(Dxe," \u2014 "),KO=n(Dxe,"A",{href:!0});var Ngt=s(KO);zDo=r(Ngt,"DebertaForTokenClassification"),Ngt.forEach(t),WDo=r(Dxe," (DeBERTa model)"),Dxe.forEach(t),QDo=i(J),I2=n(J,"LI",{});var Gxe=s(I2);ohe=n(Gxe,"STRONG",{});var jgt=s(ohe);HDo=r(jgt,"deberta-v2"),jgt.forEach(t),UDo=r(Gxe," \u2014 "),ZO=n(Gxe,"A",{href:!0});var Dgt=s(ZO);JDo=r(Dgt,"DebertaV2ForTokenClassification"),Dgt.forEach(t),YDo=r(Gxe," (DeBERTa-v2 model)"),Gxe.forEach(t),KDo=i(J),q2=n(J,"LI",{});var Oxe=s(q2);rhe=n(Oxe,"STRONG",{});var Ggt=s(rhe);ZDo=r(Ggt,"distilbert"),Ggt.forEach(t),eGo=r(Oxe," \u2014 "),eV=n(Oxe,"A",{href:!0});var Ogt=s(eV);oGo=r(Ogt,"DistilBertForTokenClassification"),Ogt.forEach(t),rGo=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),tGo=i(J),N2=n(J,"LI",{});var Vxe=s(N2);the=n(Vxe,"STRONG",{});var Vgt=s(the);aGo=r(Vgt,"electra"),Vgt.forEach(t),nGo=r(Vxe," \u2014 "),oV=n(Vxe,"A",{href:!0});var Xgt=s(oV);sGo=r(Xgt,"ElectraForTokenClassification"),Xgt.forEach(t),lGo=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),iGo=i(J),j2=n(J,"LI",{});var Xxe=s(j2);ahe=n(Xxe,"STRONG",{});var zgt=s(ahe);dGo=r(zgt,"flaubert"),zgt.forEach(t),cGo=r(Xxe," \u2014 "),rV=n(Xxe,"A",{href:!0});var Wgt=s(rV);fGo=r(Wgt,"FlaubertForTokenClassification"),Wgt.forEach(t),mGo=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),gGo=i(J),D2=n(J,"LI",{});var zxe=s(D2);nhe=n(zxe,"STRONG",{});var Qgt=s(nhe);hGo=r(Qgt,"fnet"),Qgt.forEach(t),pGo=r(zxe," \u2014 "),tV=n(zxe,"A",{href:!0});var Hgt=s(tV);uGo=r(Hgt,"FNetForTokenClassification"),Hgt.forEach(t),_Go=r(zxe," (FNet model)"),zxe.forEach(t),bGo=i(J),G2=n(J,"LI",{});var Wxe=s(G2);she=n(Wxe,"STRONG",{});var Ugt=s(she);vGo=r(Ugt,"funnel"),Ugt.forEach(t),FGo=r(Wxe," \u2014 "),aV=n(Wxe,"A",{href:!0});var Jgt=s(aV);TGo=r(Jgt,"FunnelForTokenClassification"),Jgt.forEach(t),MGo=r(Wxe," (Funnel Transformer model)"),Wxe.forEach(t),EGo=i(J),O2=n(J,"LI",{});var Qxe=s(O2);lhe=n(Qxe,"STRONG",{});var Ygt=s(lhe);CGo=r(Ygt,"gpt2"),Ygt.forEach(t),wGo=r(Qxe," \u2014 "),nV=n(Qxe,"A",{href:!0});var Kgt=s(nV);AGo=r(Kgt,"GPT2ForTokenClassification"),Kgt.forEach(t),yGo=r(Qxe," (OpenAI GPT-2 model)"),Qxe.forEach(t),LGo=i(J),V2=n(J,"LI",{});var Hxe=s(V2);ihe=n(Hxe,"STRONG",{});var Zgt=s(ihe);xGo=r(Zgt,"ibert"),Zgt.forEach(t),$Go=r(Hxe," \u2014 "),sV=n(Hxe,"A",{href:!0});var eht=s(sV);kGo=r(eht,"IBertForTokenClassification"),eht.forEach(t),SGo=r(Hxe," (I-BERT model)"),Hxe.forEach(t),RGo=i(J),X2=n(J,"LI",{});var Uxe=s(X2);dhe=n(Uxe,"STRONG",{});var oht=s(dhe);PGo=r(oht,"layoutlm"),oht.forEach(t),BGo=r(Uxe," \u2014 "),lV=n(Uxe,"A",{href:!0});var rht=s(lV);IGo=r(rht,"LayoutLMForTokenClassification"),rht.forEach(t),qGo=r(Uxe," (LayoutLM model)"),Uxe.forEach(t),NGo=i(J),z2=n(J,"LI",{});var Jxe=s(z2);che=n(Jxe,"STRONG",{});var tht=s(che);jGo=r(tht,"layoutlmv2"),tht.forEach(t),DGo=r(Jxe," \u2014 "),iV=n(Jxe,"A",{href:!0});var aht=s(iV);GGo=r(aht,"LayoutLMv2ForTokenClassification"),aht.forEach(t),OGo=r(Jxe," (LayoutLMv2 model)"),Jxe.forEach(t),VGo=i(J),W2=n(J,"LI",{});var Yxe=s(W2);fhe=n(Yxe,"STRONG",{});var nht=s(fhe);XGo=r(nht,"layoutlmv3"),nht.forEach(t),zGo=r(Yxe," \u2014 "),dV=n(Yxe,"A",{href:!0});var sht=s(dV);WGo=r(sht,"LayoutLMv3ForTokenClassification"),sht.forEach(t),QGo=r(Yxe," (LayoutLMv3 model)"),Yxe.forEach(t),HGo=i(J),Q2=n(J,"LI",{});var Kxe=s(Q2);mhe=n(Kxe,"STRONG",{});var lht=s(mhe);UGo=r(lht,"longformer"),lht.forEach(t),JGo=r(Kxe," \u2014 "),cV=n(Kxe,"A",{href:!0});var iht=s(cV);YGo=r(iht,"LongformerForTokenClassification"),iht.forEach(t),KGo=r(Kxe," (Longformer model)"),Kxe.forEach(t),ZGo=i(J),H2=n(J,"LI",{});var Zxe=s(H2);ghe=n(Zxe,"STRONG",{});var dht=s(ghe);eOo=r(dht,"megatron-bert"),dht.forEach(t),oOo=r(Zxe," \u2014 "),fV=n(Zxe,"A",{href:!0});var cht=s(fV);rOo=r(cht,"MegatronBertForTokenClassification"),cht.forEach(t),tOo=r(Zxe," (MegatronBert model)"),Zxe.forEach(t),aOo=i(J),U2=n(J,"LI",{});var e$e=s(U2);hhe=n(e$e,"STRONG",{});var fht=s(hhe);nOo=r(fht,"mobilebert"),fht.forEach(t),sOo=r(e$e," \u2014 "),mV=n(e$e,"A",{href:!0});var mht=s(mV);lOo=r(mht,"MobileBertForTokenClassification"),mht.forEach(t),iOo=r(e$e," (MobileBERT model)"),e$e.forEach(t),dOo=i(J),J2=n(J,"LI",{});var o$e=s(J2);phe=n(o$e,"STRONG",{});var ght=s(phe);cOo=r(ght,"mpnet"),ght.forEach(t),fOo=r(o$e," \u2014 "),gV=n(o$e,"A",{href:!0});var hht=s(gV);mOo=r(hht,"MPNetForTokenClassification"),hht.forEach(t),gOo=r(o$e," (MPNet model)"),o$e.forEach(t),hOo=i(J),Y2=n(J,"LI",{});var r$e=s(Y2);uhe=n(r$e,"STRONG",{});var pht=s(uhe);pOo=r(pht,"nystromformer"),pht.forEach(t),uOo=r(r$e," \u2014 "),hV=n(r$e,"A",{href:!0});var uht=s(hV);_Oo=r(uht,"NystromformerForTokenClassification"),uht.forEach(t),bOo=r(r$e," (Nystromformer model)"),r$e.forEach(t),vOo=i(J),K2=n(J,"LI",{});var t$e=s(K2);_he=n(t$e,"STRONG",{});var _ht=s(_he);FOo=r(_ht,"qdqbert"),_ht.forEach(t),TOo=r(t$e," \u2014 "),pV=n(t$e,"A",{href:!0});var bht=s(pV);MOo=r(bht,"QDQBertForTokenClassification"),bht.forEach(t),EOo=r(t$e," (QDQBert model)"),t$e.forEach(t),COo=i(J),Z2=n(J,"LI",{});var a$e=s(Z2);bhe=n(a$e,"STRONG",{});var vht=s(bhe);wOo=r(vht,"rembert"),vht.forEach(t),AOo=r(a$e," \u2014 "),uV=n(a$e,"A",{href:!0});var Fht=s(uV);yOo=r(Fht,"RemBertForTokenClassification"),Fht.forEach(t),LOo=r(a$e," (RemBERT model)"),a$e.forEach(t),xOo=i(J),e4=n(J,"LI",{});var n$e=s(e4);vhe=n(n$e,"STRONG",{});var Tht=s(vhe);$Oo=r(Tht,"roberta"),Tht.forEach(t),kOo=r(n$e," \u2014 "),_V=n(n$e,"A",{href:!0});var Mht=s(_V);SOo=r(Mht,"RobertaForTokenClassification"),Mht.forEach(t),ROo=r(n$e," (RoBERTa model)"),n$e.forEach(t),POo=i(J),o4=n(J,"LI",{});var s$e=s(o4);Fhe=n(s$e,"STRONG",{});var Eht=s(Fhe);BOo=r(Eht,"roformer"),Eht.forEach(t),IOo=r(s$e," \u2014 "),bV=n(s$e,"A",{href:!0});var Cht=s(bV);qOo=r(Cht,"RoFormerForTokenClassification"),Cht.forEach(t),NOo=r(s$e," (RoFormer model)"),s$e.forEach(t),jOo=i(J),r4=n(J,"LI",{});var l$e=s(r4);The=n(l$e,"STRONG",{});var wht=s(The);DOo=r(wht,"squeezebert"),wht.forEach(t),GOo=r(l$e," \u2014 "),vV=n(l$e,"A",{href:!0});var Aht=s(vV);OOo=r(Aht,"SqueezeBertForTokenClassification"),Aht.forEach(t),VOo=r(l$e," (SqueezeBERT model)"),l$e.forEach(t),XOo=i(J),t4=n(J,"LI",{});var i$e=s(t4);Mhe=n(i$e,"STRONG",{});var yht=s(Mhe);zOo=r(yht,"xlm"),yht.forEach(t),WOo=r(i$e," \u2014 "),FV=n(i$e,"A",{href:!0});var Lht=s(FV);QOo=r(Lht,"XLMForTokenClassification"),Lht.forEach(t),HOo=r(i$e," (XLM model)"),i$e.forEach(t),UOo=i(J),a4=n(J,"LI",{});var d$e=s(a4);Ehe=n(d$e,"STRONG",{});var xht=s(Ehe);JOo=r(xht,"xlm-roberta"),xht.forEach(t),YOo=r(d$e," \u2014 "),TV=n(d$e,"A",{href:!0});var $ht=s(TV);KOo=r($ht,"XLMRobertaForTokenClassification"),$ht.forEach(t),ZOo=r(d$e," (XLM-RoBERTa model)"),d$e.forEach(t),eVo=i(J),n4=n(J,"LI",{});var c$e=s(n4);Che=n(c$e,"STRONG",{});var kht=s(Che);oVo=r(kht,"xlm-roberta-xl"),kht.forEach(t),rVo=r(c$e," \u2014 "),MV=n(c$e,"A",{href:!0});var Sht=s(MV);tVo=r(Sht,"XLMRobertaXLForTokenClassification"),Sht.forEach(t),aVo=r(c$e," (XLM-RoBERTa-XL model)"),c$e.forEach(t),nVo=i(J),s4=n(J,"LI",{});var f$e=s(s4);whe=n(f$e,"STRONG",{});var Rht=s(whe);sVo=r(Rht,"xlnet"),Rht.forEach(t),lVo=r(f$e," \u2014 "),EV=n(f$e,"A",{href:!0});var Pht=s(EV);iVo=r(Pht,"XLNetForTokenClassification"),Pht.forEach(t),dVo=r(f$e," (XLNet model)"),f$e.forEach(t),cVo=i(J),l4=n(J,"LI",{});var m$e=s(l4);Ahe=n(m$e,"STRONG",{});var Bht=s(Ahe);fVo=r(Bht,"yoso"),Bht.forEach(t),mVo=r(m$e," \u2014 "),CV=n(m$e,"A",{href:!0});var Iht=s(CV);gVo=r(Iht,"YosoForTokenClassification"),Iht.forEach(t),hVo=r(m$e," (YOSO model)"),m$e.forEach(t),J.forEach(t),pVo=i(da),i4=n(da,"P",{});var g$e=s(i4);uVo=r(g$e,"The model is set in evaluation mode by default using "),yhe=n(g$e,"CODE",{});var qht=s(yhe);_Vo=r(qht,"model.eval()"),qht.forEach(t),bVo=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(g$e,"CODE",{});var Nht=s(Lhe);vVo=r(Nht,"model.train()"),Nht.forEach(t),g$e.forEach(t),FVo=i(da),T(d4.$$.fragment,da),da.forEach(t),Js.forEach(t),xNe=i(f),Ki=n(f,"H2",{class:!0});var RDe=s(Ki);c4=n(RDe,"A",{id:!0,class:!0,href:!0});var jht=s(c4);xhe=n(jht,"SPAN",{});var Dht=s(xhe);T(XL.$$.fragment,Dht),Dht.forEach(t),jht.forEach(t),TVo=i(RDe),$he=n(RDe,"SPAN",{});var Ght=s($he);MVo=r(Ght,"AutoModelForQuestionAnswering"),Ght.forEach(t),RDe.forEach(t),$Ne=i(f),qo=n(f,"DIV",{class:!0});var Ys=s(qo);T(zL.$$.fragment,Ys),EVo=i(Ys),Zi=n(Ys,"P",{});var RZ=s(Zi);CVo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wV=n(RZ,"A",{href:!0});var Oht=s(wV);wVo=r(Oht,"from_pretrained()"),Oht.forEach(t),AVo=r(RZ," class method or the "),AV=n(RZ,"A",{href:!0});var Vht=s(AV);yVo=r(Vht,"from_config()"),Vht.forEach(t),LVo=r(RZ,` class
method.`),RZ.forEach(t),xVo=i(Ys),WL=n(Ys,"P",{});var PDe=s(WL);$Vo=r(PDe,"This class cannot be instantiated directly using "),khe=n(PDe,"CODE",{});var Xht=s(khe);kVo=r(Xht,"__init__()"),Xht.forEach(t),SVo=r(PDe," (throws an error)."),PDe.forEach(t),RVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var Uw=s(mt);T(QL.$$.fragment,Uw),PVo=i(Uw),She=n(Uw,"P",{});var zht=s(She);BVo=r(zht,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zht.forEach(t),IVo=i(Uw),ed=n(Uw,"P",{});var PZ=s(ed);qVo=r(PZ,`Note:
Loading a model from its configuration file does `),Rhe=n(PZ,"STRONG",{});var Wht=s(Rhe);NVo=r(Wht,"not"),Wht.forEach(t),jVo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(PZ,"A",{href:!0});var Qht=s(yV);DVo=r(Qht,"from_pretrained()"),Qht.forEach(t),GVo=r(PZ," to load the model weights."),PZ.forEach(t),OVo=i(Uw),T(f4.$$.fragment,Uw),Uw.forEach(t),VVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(HL.$$.fragment,ca),XVo=i(ca),Phe=n(ca,"P",{});var Hht=s(Phe);zVo=r(Hht,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hht.forEach(t),WVo=i(ca),qa=n(ca,"P",{});var Jw=s(qa);QVo=r(Jw,"The model class to instantiate is selected based on the "),Bhe=n(Jw,"CODE",{});var Uht=s(Bhe);HVo=r(Uht,"model_type"),Uht.forEach(t),UVo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(Jw,"CODE",{});var Jht=s(Ihe);JVo=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),YVo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(Jw,"CODE",{});var Yht=s(qhe);KVo=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),ZVo=r(Jw,":"),Jw.forEach(t),eXo=i(ca),V=n(ca,"UL",{});var X=s(V);m4=n(X,"LI",{});var h$e=s(m4);Nhe=n(h$e,"STRONG",{});var Kht=s(Nhe);oXo=r(Kht,"albert"),Kht.forEach(t),rXo=r(h$e," \u2014 "),LV=n(h$e,"A",{href:!0});var Zht=s(LV);tXo=r(Zht,"AlbertForQuestionAnswering"),Zht.forEach(t),aXo=r(h$e," (ALBERT model)"),h$e.forEach(t),nXo=i(X),g4=n(X,"LI",{});var p$e=s(g4);jhe=n(p$e,"STRONG",{});var ept=s(jhe);sXo=r(ept,"bart"),ept.forEach(t),lXo=r(p$e," \u2014 "),xV=n(p$e,"A",{href:!0});var opt=s(xV);iXo=r(opt,"BartForQuestionAnswering"),opt.forEach(t),dXo=r(p$e," (BART model)"),p$e.forEach(t),cXo=i(X),h4=n(X,"LI",{});var u$e=s(h4);Dhe=n(u$e,"STRONG",{});var rpt=s(Dhe);fXo=r(rpt,"bert"),rpt.forEach(t),mXo=r(u$e," \u2014 "),$V=n(u$e,"A",{href:!0});var tpt=s($V);gXo=r(tpt,"BertForQuestionAnswering"),tpt.forEach(t),hXo=r(u$e," (BERT model)"),u$e.forEach(t),pXo=i(X),p4=n(X,"LI",{});var _$e=s(p4);Ghe=n(_$e,"STRONG",{});var apt=s(Ghe);uXo=r(apt,"big_bird"),apt.forEach(t),_Xo=r(_$e," \u2014 "),kV=n(_$e,"A",{href:!0});var npt=s(kV);bXo=r(npt,"BigBirdForQuestionAnswering"),npt.forEach(t),vXo=r(_$e," (BigBird model)"),_$e.forEach(t),FXo=i(X),u4=n(X,"LI",{});var b$e=s(u4);Ohe=n(b$e,"STRONG",{});var spt=s(Ohe);TXo=r(spt,"bigbird_pegasus"),spt.forEach(t),MXo=r(b$e," \u2014 "),SV=n(b$e,"A",{href:!0});var lpt=s(SV);EXo=r(lpt,"BigBirdPegasusForQuestionAnswering"),lpt.forEach(t),CXo=r(b$e," (BigBirdPegasus model)"),b$e.forEach(t),wXo=i(X),_4=n(X,"LI",{});var v$e=s(_4);Vhe=n(v$e,"STRONG",{});var ipt=s(Vhe);AXo=r(ipt,"camembert"),ipt.forEach(t),yXo=r(v$e," \u2014 "),RV=n(v$e,"A",{href:!0});var dpt=s(RV);LXo=r(dpt,"CamembertForQuestionAnswering"),dpt.forEach(t),xXo=r(v$e," (CamemBERT model)"),v$e.forEach(t),$Xo=i(X),b4=n(X,"LI",{});var F$e=s(b4);Xhe=n(F$e,"STRONG",{});var cpt=s(Xhe);kXo=r(cpt,"canine"),cpt.forEach(t),SXo=r(F$e," \u2014 "),PV=n(F$e,"A",{href:!0});var fpt=s(PV);RXo=r(fpt,"CanineForQuestionAnswering"),fpt.forEach(t),PXo=r(F$e," (Canine model)"),F$e.forEach(t),BXo=i(X),v4=n(X,"LI",{});var T$e=s(v4);zhe=n(T$e,"STRONG",{});var mpt=s(zhe);IXo=r(mpt,"convbert"),mpt.forEach(t),qXo=r(T$e," \u2014 "),BV=n(T$e,"A",{href:!0});var gpt=s(BV);NXo=r(gpt,"ConvBertForQuestionAnswering"),gpt.forEach(t),jXo=r(T$e," (ConvBERT model)"),T$e.forEach(t),DXo=i(X),F4=n(X,"LI",{});var M$e=s(F4);Whe=n(M$e,"STRONG",{});var hpt=s(Whe);GXo=r(hpt,"data2vec-text"),hpt.forEach(t),OXo=r(M$e," \u2014 "),IV=n(M$e,"A",{href:!0});var ppt=s(IV);VXo=r(ppt,"Data2VecTextForQuestionAnswering"),ppt.forEach(t),XXo=r(M$e," (Data2VecText model)"),M$e.forEach(t),zXo=i(X),T4=n(X,"LI",{});var E$e=s(T4);Qhe=n(E$e,"STRONG",{});var upt=s(Qhe);WXo=r(upt,"deberta"),upt.forEach(t),QXo=r(E$e," \u2014 "),qV=n(E$e,"A",{href:!0});var _pt=s(qV);HXo=r(_pt,"DebertaForQuestionAnswering"),_pt.forEach(t),UXo=r(E$e," (DeBERTa model)"),E$e.forEach(t),JXo=i(X),M4=n(X,"LI",{});var C$e=s(M4);Hhe=n(C$e,"STRONG",{});var bpt=s(Hhe);YXo=r(bpt,"deberta-v2"),bpt.forEach(t),KXo=r(C$e," \u2014 "),NV=n(C$e,"A",{href:!0});var vpt=s(NV);ZXo=r(vpt,"DebertaV2ForQuestionAnswering"),vpt.forEach(t),ezo=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),ozo=i(X),E4=n(X,"LI",{});var w$e=s(E4);Uhe=n(w$e,"STRONG",{});var Fpt=s(Uhe);rzo=r(Fpt,"distilbert"),Fpt.forEach(t),tzo=r(w$e," \u2014 "),jV=n(w$e,"A",{href:!0});var Tpt=s(jV);azo=r(Tpt,"DistilBertForQuestionAnswering"),Tpt.forEach(t),nzo=r(w$e," (DistilBERT model)"),w$e.forEach(t),szo=i(X),C4=n(X,"LI",{});var A$e=s(C4);Jhe=n(A$e,"STRONG",{});var Mpt=s(Jhe);lzo=r(Mpt,"electra"),Mpt.forEach(t),izo=r(A$e," \u2014 "),DV=n(A$e,"A",{href:!0});var Ept=s(DV);dzo=r(Ept,"ElectraForQuestionAnswering"),Ept.forEach(t),czo=r(A$e," (ELECTRA model)"),A$e.forEach(t),fzo=i(X),w4=n(X,"LI",{});var y$e=s(w4);Yhe=n(y$e,"STRONG",{});var Cpt=s(Yhe);mzo=r(Cpt,"flaubert"),Cpt.forEach(t),gzo=r(y$e," \u2014 "),GV=n(y$e,"A",{href:!0});var wpt=s(GV);hzo=r(wpt,"FlaubertForQuestionAnsweringSimple"),wpt.forEach(t),pzo=r(y$e," (FlauBERT model)"),y$e.forEach(t),uzo=i(X),A4=n(X,"LI",{});var L$e=s(A4);Khe=n(L$e,"STRONG",{});var Apt=s(Khe);_zo=r(Apt,"fnet"),Apt.forEach(t),bzo=r(L$e," \u2014 "),OV=n(L$e,"A",{href:!0});var ypt=s(OV);vzo=r(ypt,"FNetForQuestionAnswering"),ypt.forEach(t),Fzo=r(L$e," (FNet model)"),L$e.forEach(t),Tzo=i(X),y4=n(X,"LI",{});var x$e=s(y4);Zhe=n(x$e,"STRONG",{});var Lpt=s(Zhe);Mzo=r(Lpt,"funnel"),Lpt.forEach(t),Ezo=r(x$e," \u2014 "),VV=n(x$e,"A",{href:!0});var xpt=s(VV);Czo=r(xpt,"FunnelForQuestionAnswering"),xpt.forEach(t),wzo=r(x$e," (Funnel Transformer model)"),x$e.forEach(t),Azo=i(X),L4=n(X,"LI",{});var $$e=s(L4);epe=n($$e,"STRONG",{});var $pt=s(epe);yzo=r($pt,"gptj"),$pt.forEach(t),Lzo=r($$e," \u2014 "),XV=n($$e,"A",{href:!0});var kpt=s(XV);xzo=r(kpt,"GPTJForQuestionAnswering"),kpt.forEach(t),$zo=r($$e," (GPT-J model)"),$$e.forEach(t),kzo=i(X),x4=n(X,"LI",{});var k$e=s(x4);ope=n(k$e,"STRONG",{});var Spt=s(ope);Szo=r(Spt,"ibert"),Spt.forEach(t),Rzo=r(k$e," \u2014 "),zV=n(k$e,"A",{href:!0});var Rpt=s(zV);Pzo=r(Rpt,"IBertForQuestionAnswering"),Rpt.forEach(t),Bzo=r(k$e," (I-BERT model)"),k$e.forEach(t),Izo=i(X),$4=n(X,"LI",{});var S$e=s($4);rpe=n(S$e,"STRONG",{});var Ppt=s(rpe);qzo=r(Ppt,"layoutlmv2"),Ppt.forEach(t),Nzo=r(S$e," \u2014 "),WV=n(S$e,"A",{href:!0});var Bpt=s(WV);jzo=r(Bpt,"LayoutLMv2ForQuestionAnswering"),Bpt.forEach(t),Dzo=r(S$e," (LayoutLMv2 model)"),S$e.forEach(t),Gzo=i(X),k4=n(X,"LI",{});var R$e=s(k4);tpe=n(R$e,"STRONG",{});var Ipt=s(tpe);Ozo=r(Ipt,"layoutlmv3"),Ipt.forEach(t),Vzo=r(R$e," \u2014 "),QV=n(R$e,"A",{href:!0});var qpt=s(QV);Xzo=r(qpt,"LayoutLMv3ForQuestionAnswering"),qpt.forEach(t),zzo=r(R$e," (LayoutLMv3 model)"),R$e.forEach(t),Wzo=i(X),S4=n(X,"LI",{});var P$e=s(S4);ape=n(P$e,"STRONG",{});var Npt=s(ape);Qzo=r(Npt,"led"),Npt.forEach(t),Hzo=r(P$e," \u2014 "),HV=n(P$e,"A",{href:!0});var jpt=s(HV);Uzo=r(jpt,"LEDForQuestionAnswering"),jpt.forEach(t),Jzo=r(P$e," (LED model)"),P$e.forEach(t),Yzo=i(X),R4=n(X,"LI",{});var B$e=s(R4);npe=n(B$e,"STRONG",{});var Dpt=s(npe);Kzo=r(Dpt,"longformer"),Dpt.forEach(t),Zzo=r(B$e," \u2014 "),UV=n(B$e,"A",{href:!0});var Gpt=s(UV);eWo=r(Gpt,"LongformerForQuestionAnswering"),Gpt.forEach(t),oWo=r(B$e," (Longformer model)"),B$e.forEach(t),rWo=i(X),P4=n(X,"LI",{});var I$e=s(P4);spe=n(I$e,"STRONG",{});var Opt=s(spe);tWo=r(Opt,"lxmert"),Opt.forEach(t),aWo=r(I$e," \u2014 "),JV=n(I$e,"A",{href:!0});var Vpt=s(JV);nWo=r(Vpt,"LxmertForQuestionAnswering"),Vpt.forEach(t),sWo=r(I$e," (LXMERT model)"),I$e.forEach(t),lWo=i(X),B4=n(X,"LI",{});var q$e=s(B4);lpe=n(q$e,"STRONG",{});var Xpt=s(lpe);iWo=r(Xpt,"mbart"),Xpt.forEach(t),dWo=r(q$e," \u2014 "),YV=n(q$e,"A",{href:!0});var zpt=s(YV);cWo=r(zpt,"MBartForQuestionAnswering"),zpt.forEach(t),fWo=r(q$e," (mBART model)"),q$e.forEach(t),mWo=i(X),I4=n(X,"LI",{});var N$e=s(I4);ipe=n(N$e,"STRONG",{});var Wpt=s(ipe);gWo=r(Wpt,"megatron-bert"),Wpt.forEach(t),hWo=r(N$e," \u2014 "),KV=n(N$e,"A",{href:!0});var Qpt=s(KV);pWo=r(Qpt,"MegatronBertForQuestionAnswering"),Qpt.forEach(t),uWo=r(N$e," (MegatronBert model)"),N$e.forEach(t),_Wo=i(X),q4=n(X,"LI",{});var j$e=s(q4);dpe=n(j$e,"STRONG",{});var Hpt=s(dpe);bWo=r(Hpt,"mobilebert"),Hpt.forEach(t),vWo=r(j$e," \u2014 "),ZV=n(j$e,"A",{href:!0});var Upt=s(ZV);FWo=r(Upt,"MobileBertForQuestionAnswering"),Upt.forEach(t),TWo=r(j$e," (MobileBERT model)"),j$e.forEach(t),MWo=i(X),N4=n(X,"LI",{});var D$e=s(N4);cpe=n(D$e,"STRONG",{});var Jpt=s(cpe);EWo=r(Jpt,"mpnet"),Jpt.forEach(t),CWo=r(D$e," \u2014 "),eX=n(D$e,"A",{href:!0});var Ypt=s(eX);wWo=r(Ypt,"MPNetForQuestionAnswering"),Ypt.forEach(t),AWo=r(D$e," (MPNet model)"),D$e.forEach(t),yWo=i(X),j4=n(X,"LI",{});var G$e=s(j4);fpe=n(G$e,"STRONG",{});var Kpt=s(fpe);LWo=r(Kpt,"nystromformer"),Kpt.forEach(t),xWo=r(G$e," \u2014 "),oX=n(G$e,"A",{href:!0});var Zpt=s(oX);$Wo=r(Zpt,"NystromformerForQuestionAnswering"),Zpt.forEach(t),kWo=r(G$e," (Nystromformer model)"),G$e.forEach(t),SWo=i(X),D4=n(X,"LI",{});var O$e=s(D4);mpe=n(O$e,"STRONG",{});var eut=s(mpe);RWo=r(eut,"qdqbert"),eut.forEach(t),PWo=r(O$e," \u2014 "),rX=n(O$e,"A",{href:!0});var out=s(rX);BWo=r(out,"QDQBertForQuestionAnswering"),out.forEach(t),IWo=r(O$e," (QDQBert model)"),O$e.forEach(t),qWo=i(X),G4=n(X,"LI",{});var V$e=s(G4);gpe=n(V$e,"STRONG",{});var rut=s(gpe);NWo=r(rut,"reformer"),rut.forEach(t),jWo=r(V$e," \u2014 "),tX=n(V$e,"A",{href:!0});var tut=s(tX);DWo=r(tut,"ReformerForQuestionAnswering"),tut.forEach(t),GWo=r(V$e," (Reformer model)"),V$e.forEach(t),OWo=i(X),O4=n(X,"LI",{});var X$e=s(O4);hpe=n(X$e,"STRONG",{});var aut=s(hpe);VWo=r(aut,"rembert"),aut.forEach(t),XWo=r(X$e," \u2014 "),aX=n(X$e,"A",{href:!0});var nut=s(aX);zWo=r(nut,"RemBertForQuestionAnswering"),nut.forEach(t),WWo=r(X$e," (RemBERT model)"),X$e.forEach(t),QWo=i(X),V4=n(X,"LI",{});var z$e=s(V4);ppe=n(z$e,"STRONG",{});var sut=s(ppe);HWo=r(sut,"roberta"),sut.forEach(t),UWo=r(z$e," \u2014 "),nX=n(z$e,"A",{href:!0});var lut=s(nX);JWo=r(lut,"RobertaForQuestionAnswering"),lut.forEach(t),YWo=r(z$e," (RoBERTa model)"),z$e.forEach(t),KWo=i(X),X4=n(X,"LI",{});var W$e=s(X4);upe=n(W$e,"STRONG",{});var iut=s(upe);ZWo=r(iut,"roformer"),iut.forEach(t),eQo=r(W$e," \u2014 "),sX=n(W$e,"A",{href:!0});var dut=s(sX);oQo=r(dut,"RoFormerForQuestionAnswering"),dut.forEach(t),rQo=r(W$e," (RoFormer model)"),W$e.forEach(t),tQo=i(X),z4=n(X,"LI",{});var Q$e=s(z4);_pe=n(Q$e,"STRONG",{});var cut=s(_pe);aQo=r(cut,"splinter"),cut.forEach(t),nQo=r(Q$e," \u2014 "),lX=n(Q$e,"A",{href:!0});var fut=s(lX);sQo=r(fut,"SplinterForQuestionAnswering"),fut.forEach(t),lQo=r(Q$e," (Splinter model)"),Q$e.forEach(t),iQo=i(X),W4=n(X,"LI",{});var H$e=s(W4);bpe=n(H$e,"STRONG",{});var mut=s(bpe);dQo=r(mut,"squeezebert"),mut.forEach(t),cQo=r(H$e," \u2014 "),iX=n(H$e,"A",{href:!0});var gut=s(iX);fQo=r(gut,"SqueezeBertForQuestionAnswering"),gut.forEach(t),mQo=r(H$e," (SqueezeBERT model)"),H$e.forEach(t),gQo=i(X),Q4=n(X,"LI",{});var U$e=s(Q4);vpe=n(U$e,"STRONG",{});var hut=s(vpe);hQo=r(hut,"xlm"),hut.forEach(t),pQo=r(U$e," \u2014 "),dX=n(U$e,"A",{href:!0});var put=s(dX);uQo=r(put,"XLMForQuestionAnsweringSimple"),put.forEach(t),_Qo=r(U$e," (XLM model)"),U$e.forEach(t),bQo=i(X),H4=n(X,"LI",{});var J$e=s(H4);Fpe=n(J$e,"STRONG",{});var uut=s(Fpe);vQo=r(uut,"xlm-roberta"),uut.forEach(t),FQo=r(J$e," \u2014 "),cX=n(J$e,"A",{href:!0});var _ut=s(cX);TQo=r(_ut,"XLMRobertaForQuestionAnswering"),_ut.forEach(t),MQo=r(J$e," (XLM-RoBERTa model)"),J$e.forEach(t),EQo=i(X),U4=n(X,"LI",{});var Y$e=s(U4);Tpe=n(Y$e,"STRONG",{});var but=s(Tpe);CQo=r(but,"xlm-roberta-xl"),but.forEach(t),wQo=r(Y$e," \u2014 "),fX=n(Y$e,"A",{href:!0});var vut=s(fX);AQo=r(vut,"XLMRobertaXLForQuestionAnswering"),vut.forEach(t),yQo=r(Y$e," (XLM-RoBERTa-XL model)"),Y$e.forEach(t),LQo=i(X),J4=n(X,"LI",{});var K$e=s(J4);Mpe=n(K$e,"STRONG",{});var Fut=s(Mpe);xQo=r(Fut,"xlnet"),Fut.forEach(t),$Qo=r(K$e," \u2014 "),mX=n(K$e,"A",{href:!0});var Tut=s(mX);kQo=r(Tut,"XLNetForQuestionAnsweringSimple"),Tut.forEach(t),SQo=r(K$e," (XLNet model)"),K$e.forEach(t),RQo=i(X),Y4=n(X,"LI",{});var Z$e=s(Y4);Epe=n(Z$e,"STRONG",{});var Mut=s(Epe);PQo=r(Mut,"yoso"),Mut.forEach(t),BQo=r(Z$e," \u2014 "),gX=n(Z$e,"A",{href:!0});var Eut=s(gX);IQo=r(Eut,"YosoForQuestionAnswering"),Eut.forEach(t),qQo=r(Z$e," (YOSO model)"),Z$e.forEach(t),X.forEach(t),NQo=i(ca),K4=n(ca,"P",{});var eke=s(K4);jQo=r(eke,"The model is set in evaluation mode by default using "),Cpe=n(eke,"CODE",{});var Cut=s(Cpe);DQo=r(Cut,"model.eval()"),Cut.forEach(t),GQo=r(eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(eke,"CODE",{});var wut=s(wpe);OQo=r(wut,"model.train()"),wut.forEach(t),eke.forEach(t),VQo=i(ca),T(Z4.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),kNe=i(f),od=n(f,"H2",{class:!0});var BDe=s(od);ev=n(BDe,"A",{id:!0,class:!0,href:!0});var Aut=s(ev);Ape=n(Aut,"SPAN",{});var yut=s(Ape);T(UL.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),XQo=i(BDe),ype=n(BDe,"SPAN",{});var Lut=s(ype);zQo=r(Lut,"AutoModelForTableQuestionAnswering"),Lut.forEach(t),BDe.forEach(t),SNe=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(JL.$$.fragment,Ks),WQo=i(Ks),rd=n(Ks,"P",{});var BZ=s(rd);QQo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hX=n(BZ,"A",{href:!0});var xut=s(hX);HQo=r(xut,"from_pretrained()"),xut.forEach(t),UQo=r(BZ," class method or the "),pX=n(BZ,"A",{href:!0});var $ut=s(pX);JQo=r($ut,"from_config()"),$ut.forEach(t),YQo=r(BZ,` class
method.`),BZ.forEach(t),KQo=i(Ks),YL=n(Ks,"P",{});var IDe=s(YL);ZQo=r(IDe,"This class cannot be instantiated directly using "),Lpe=n(IDe,"CODE",{});var kut=s(Lpe);eHo=r(kut,"__init__()"),kut.forEach(t),oHo=r(IDe," (throws an error)."),IDe.forEach(t),rHo=i(Ks),gt=n(Ks,"DIV",{class:!0});var Yw=s(gt);T(KL.$$.fragment,Yw),tHo=i(Yw),xpe=n(Yw,"P",{});var Sut=s(xpe);aHo=r(Sut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Sut.forEach(t),nHo=i(Yw),td=n(Yw,"P",{});var IZ=s(td);sHo=r(IZ,`Note:
Loading a model from its configuration file does `),$pe=n(IZ,"STRONG",{});var Rut=s($pe);lHo=r(Rut,"not"),Rut.forEach(t),iHo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uX=n(IZ,"A",{href:!0});var Put=s(uX);dHo=r(Put,"from_pretrained()"),Put.forEach(t),cHo=r(IZ," to load the model weights."),IZ.forEach(t),fHo=i(Yw),T(ov.$$.fragment,Yw),Yw.forEach(t),mHo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(ZL.$$.fragment,fa),gHo=i(fa),kpe=n(fa,"P",{});var But=s(kpe);hHo=r(But,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),But.forEach(t),pHo=i(fa),Na=n(fa,"P",{});var Kw=s(Na);uHo=r(Kw,"The model class to instantiate is selected based on the "),Spe=n(Kw,"CODE",{});var Iut=s(Spe);_Ho=r(Iut,"model_type"),Iut.forEach(t),bHo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(Kw,"CODE",{});var qut=s(Rpe);vHo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),FHo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(Kw,"CODE",{});var Nut=s(Ppe);THo=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),MHo=r(Kw,":"),Kw.forEach(t),EHo=i(fa),Bpe=n(fa,"UL",{});var jut=s(Bpe);rv=n(jut,"LI",{});var oke=s(rv);Ipe=n(oke,"STRONG",{});var Dut=s(Ipe);CHo=r(Dut,"tapas"),Dut.forEach(t),wHo=r(oke," \u2014 "),_X=n(oke,"A",{href:!0});var Gut=s(_X);AHo=r(Gut,"TapasForQuestionAnswering"),Gut.forEach(t),yHo=r(oke," (TAPAS model)"),oke.forEach(t),jut.forEach(t),LHo=i(fa),tv=n(fa,"P",{});var rke=s(tv);xHo=r(rke,"The model is set in evaluation mode by default using "),qpe=n(rke,"CODE",{});var Out=s(qpe);$Ho=r(Out,"model.eval()"),Out.forEach(t),kHo=r(rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(rke,"CODE",{});var Vut=s(Npe);SHo=r(Vut,"model.train()"),Vut.forEach(t),rke.forEach(t),RHo=i(fa),T(av.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),RNe=i(f),ad=n(f,"H2",{class:!0});var qDe=s(ad);nv=n(qDe,"A",{id:!0,class:!0,href:!0});var Xut=s(nv);jpe=n(Xut,"SPAN",{});var zut=s(jpe);T(e8.$$.fragment,zut),zut.forEach(t),Xut.forEach(t),PHo=i(qDe),Dpe=n(qDe,"SPAN",{});var Wut=s(Dpe);BHo=r(Wut,"AutoModelForImageClassification"),Wut.forEach(t),qDe.forEach(t),PNe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(o8.$$.fragment,Zs),IHo=i(Zs),nd=n(Zs,"P",{});var qZ=s(nd);qHo=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bX=n(qZ,"A",{href:!0});var Qut=s(bX);NHo=r(Qut,"from_pretrained()"),Qut.forEach(t),jHo=r(qZ," class method or the "),vX=n(qZ,"A",{href:!0});var Hut=s(vX);DHo=r(Hut,"from_config()"),Hut.forEach(t),GHo=r(qZ,` class
method.`),qZ.forEach(t),OHo=i(Zs),r8=n(Zs,"P",{});var NDe=s(r8);VHo=r(NDe,"This class cannot be instantiated directly using "),Gpe=n(NDe,"CODE",{});var Uut=s(Gpe);XHo=r(Uut,"__init__()"),Uut.forEach(t),zHo=r(NDe," (throws an error)."),NDe.forEach(t),WHo=i(Zs),ht=n(Zs,"DIV",{class:!0});var Zw=s(ht);T(t8.$$.fragment,Zw),QHo=i(Zw),Ope=n(Zw,"P",{});var Jut=s(Ope);HHo=r(Jut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jut.forEach(t),UHo=i(Zw),sd=n(Zw,"P",{});var NZ=s(sd);JHo=r(NZ,`Note:
Loading a model from its configuration file does `),Vpe=n(NZ,"STRONG",{});var Yut=s(Vpe);YHo=r(Yut,"not"),Yut.forEach(t),KHo=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(NZ,"A",{href:!0});var Kut=s(FX);ZHo=r(Kut,"from_pretrained()"),Kut.forEach(t),eUo=r(NZ," to load the model weights."),NZ.forEach(t),oUo=i(Zw),T(sv.$$.fragment,Zw),Zw.forEach(t),rUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(a8.$$.fragment,ma),tUo=i(ma),Xpe=n(ma,"P",{});var Zut=s(Xpe);aUo=r(Zut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zut.forEach(t),nUo=i(ma),ja=n(ma,"P",{});var eA=s(ja);sUo=r(eA,"The model class to instantiate is selected based on the "),zpe=n(eA,"CODE",{});var e_t=s(zpe);lUo=r(e_t,"model_type"),e_t.forEach(t),iUo=r(eA,` property of the config object (either
passed as an argument or loaded from `),Wpe=n(eA,"CODE",{});var o_t=s(Wpe);dUo=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),cUo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(eA,"CODE",{});var r_t=s(Qpe);fUo=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),mUo=r(eA,":"),eA.forEach(t),gUo=i(ma),Fe=n(ma,"UL",{});var Te=s(Fe);lv=n(Te,"LI",{});var tke=s(lv);Hpe=n(tke,"STRONG",{});var t_t=s(Hpe);hUo=r(t_t,"beit"),t_t.forEach(t),pUo=r(tke," \u2014 "),TX=n(tke,"A",{href:!0});var a_t=s(TX);uUo=r(a_t,"BeitForImageClassification"),a_t.forEach(t),_Uo=r(tke," (BEiT model)"),tke.forEach(t),bUo=i(Te),iv=n(Te,"LI",{});var ake=s(iv);Upe=n(ake,"STRONG",{});var n_t=s(Upe);vUo=r(n_t,"convnext"),n_t.forEach(t),FUo=r(ake," \u2014 "),MX=n(ake,"A",{href:!0});var s_t=s(MX);TUo=r(s_t,"ConvNextForImageClassification"),s_t.forEach(t),MUo=r(ake," (ConvNext model)"),ake.forEach(t),EUo=i(Te),dv=n(Te,"LI",{});var nke=s(dv);Jpe=n(nke,"STRONG",{});var l_t=s(Jpe);CUo=r(l_t,"cvt"),l_t.forEach(t),wUo=r(nke," \u2014 "),EX=n(nke,"A",{href:!0});var i_t=s(EX);AUo=r(i_t,"CvtForImageClassification"),i_t.forEach(t),yUo=r(nke," (CvT model)"),nke.forEach(t),LUo=i(Te),cv=n(Te,"LI",{});var ske=s(cv);Ype=n(ske,"STRONG",{});var d_t=s(Ype);xUo=r(d_t,"data2vec-vision"),d_t.forEach(t),$Uo=r(ske," \u2014 "),CX=n(ske,"A",{href:!0});var c_t=s(CX);kUo=r(c_t,"Data2VecVisionForImageClassification"),c_t.forEach(t),SUo=r(ske," (Data2VecVision model)"),ske.forEach(t),RUo=i(Te),Bs=n(Te,"LI",{});var V$=s(Bs);Kpe=n(V$,"STRONG",{});var f_t=s(Kpe);PUo=r(f_t,"deit"),f_t.forEach(t),BUo=r(V$," \u2014 "),wX=n(V$,"A",{href:!0});var m_t=s(wX);IUo=r(m_t,"DeiTForImageClassification"),m_t.forEach(t),qUo=r(V$," or "),AX=n(V$,"A",{href:!0});var g_t=s(AX);NUo=r(g_t,"DeiTForImageClassificationWithTeacher"),g_t.forEach(t),jUo=r(V$," (DeiT model)"),V$.forEach(t),DUo=i(Te),fv=n(Te,"LI",{});var lke=s(fv);Zpe=n(lke,"STRONG",{});var h_t=s(Zpe);GUo=r(h_t,"imagegpt"),h_t.forEach(t),OUo=r(lke," \u2014 "),yX=n(lke,"A",{href:!0});var p_t=s(yX);VUo=r(p_t,"ImageGPTForImageClassification"),p_t.forEach(t),XUo=r(lke," (ImageGPT model)"),lke.forEach(t),zUo=i(Te),pt=n(Te,"LI",{});var hf=s(pt);eue=n(hf,"STRONG",{});var u_t=s(eue);WUo=r(u_t,"perceiver"),u_t.forEach(t),QUo=r(hf," \u2014 "),LX=n(hf,"A",{href:!0});var __t=s(LX);HUo=r(__t,"PerceiverForImageClassificationLearned"),__t.forEach(t),UUo=r(hf," or "),xX=n(hf,"A",{href:!0});var b_t=s(xX);JUo=r(b_t,"PerceiverForImageClassificationFourier"),b_t.forEach(t),YUo=r(hf," or "),$X=n(hf,"A",{href:!0});var v_t=s($X);KUo=r(v_t,"PerceiverForImageClassificationConvProcessing"),v_t.forEach(t),ZUo=r(hf," (Perceiver model)"),hf.forEach(t),eJo=i(Te),mv=n(Te,"LI",{});var ike=s(mv);oue=n(ike,"STRONG",{});var F_t=s(oue);oJo=r(F_t,"poolformer"),F_t.forEach(t),rJo=r(ike," \u2014 "),kX=n(ike,"A",{href:!0});var T_t=s(kX);tJo=r(T_t,"PoolFormerForImageClassification"),T_t.forEach(t),aJo=r(ike," (PoolFormer model)"),ike.forEach(t),nJo=i(Te),gv=n(Te,"LI",{});var dke=s(gv);rue=n(dke,"STRONG",{});var M_t=s(rue);sJo=r(M_t,"regnet"),M_t.forEach(t),lJo=r(dke," \u2014 "),SX=n(dke,"A",{href:!0});var E_t=s(SX);iJo=r(E_t,"RegNetForImageClassification"),E_t.forEach(t),dJo=r(dke," (RegNet model)"),dke.forEach(t),cJo=i(Te),hv=n(Te,"LI",{});var cke=s(hv);tue=n(cke,"STRONG",{});var C_t=s(tue);fJo=r(C_t,"resnet"),C_t.forEach(t),mJo=r(cke," \u2014 "),RX=n(cke,"A",{href:!0});var w_t=s(RX);gJo=r(w_t,"ResNetForImageClassification"),w_t.forEach(t),hJo=r(cke," (ResNet model)"),cke.forEach(t),pJo=i(Te),pv=n(Te,"LI",{});var fke=s(pv);aue=n(fke,"STRONG",{});var A_t=s(aue);uJo=r(A_t,"segformer"),A_t.forEach(t),_Jo=r(fke," \u2014 "),PX=n(fke,"A",{href:!0});var y_t=s(PX);bJo=r(y_t,"SegformerForImageClassification"),y_t.forEach(t),vJo=r(fke," (SegFormer model)"),fke.forEach(t),FJo=i(Te),uv=n(Te,"LI",{});var mke=s(uv);nue=n(mke,"STRONG",{});var L_t=s(nue);TJo=r(L_t,"swin"),L_t.forEach(t),MJo=r(mke," \u2014 "),BX=n(mke,"A",{href:!0});var x_t=s(BX);EJo=r(x_t,"SwinForImageClassification"),x_t.forEach(t),CJo=r(mke," (Swin model)"),mke.forEach(t),wJo=i(Te),_v=n(Te,"LI",{});var gke=s(_v);sue=n(gke,"STRONG",{});var $_t=s(sue);AJo=r($_t,"van"),$_t.forEach(t),yJo=r(gke," \u2014 "),IX=n(gke,"A",{href:!0});var k_t=s(IX);LJo=r(k_t,"VanForImageClassification"),k_t.forEach(t),xJo=r(gke," (VAN model)"),gke.forEach(t),$Jo=i(Te),bv=n(Te,"LI",{});var hke=s(bv);lue=n(hke,"STRONG",{});var S_t=s(lue);kJo=r(S_t,"vit"),S_t.forEach(t),SJo=r(hke," \u2014 "),qX=n(hke,"A",{href:!0});var R_t=s(qX);RJo=r(R_t,"ViTForImageClassification"),R_t.forEach(t),PJo=r(hke," (ViT model)"),hke.forEach(t),Te.forEach(t),BJo=i(ma),vv=n(ma,"P",{});var pke=s(vv);IJo=r(pke,"The model is set in evaluation mode by default using "),iue=n(pke,"CODE",{});var P_t=s(iue);qJo=r(P_t,"model.eval()"),P_t.forEach(t),NJo=r(pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=n(pke,"CODE",{});var B_t=s(due);jJo=r(B_t,"model.train()"),B_t.forEach(t),pke.forEach(t),DJo=i(ma),T(Fv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),BNe=i(f),ld=n(f,"H2",{class:!0});var jDe=s(ld);Tv=n(jDe,"A",{id:!0,class:!0,href:!0});var I_t=s(Tv);cue=n(I_t,"SPAN",{});var q_t=s(cue);T(n8.$$.fragment,q_t),q_t.forEach(t),I_t.forEach(t),GJo=i(jDe),fue=n(jDe,"SPAN",{});var N_t=s(fue);OJo=r(N_t,"AutoModelForVision2Seq"),N_t.forEach(t),jDe.forEach(t),INe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(s8.$$.fragment,el),VJo=i(el),id=n(el,"P",{});var jZ=s(id);XJo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NX=n(jZ,"A",{href:!0});var j_t=s(NX);zJo=r(j_t,"from_pretrained()"),j_t.forEach(t),WJo=r(jZ," class method or the "),jX=n(jZ,"A",{href:!0});var D_t=s(jX);QJo=r(D_t,"from_config()"),D_t.forEach(t),HJo=r(jZ,` class
method.`),jZ.forEach(t),UJo=i(el),l8=n(el,"P",{});var DDe=s(l8);JJo=r(DDe,"This class cannot be instantiated directly using "),mue=n(DDe,"CODE",{});var G_t=s(mue);YJo=r(G_t,"__init__()"),G_t.forEach(t),KJo=r(DDe," (throws an error)."),DDe.forEach(t),ZJo=i(el),ut=n(el,"DIV",{class:!0});var oA=s(ut);T(i8.$$.fragment,oA),eYo=i(oA),gue=n(oA,"P",{});var O_t=s(gue);oYo=r(O_t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),O_t.forEach(t),rYo=i(oA),dd=n(oA,"P",{});var DZ=s(dd);tYo=r(DZ,`Note:
Loading a model from its configuration file does `),hue=n(DZ,"STRONG",{});var V_t=s(hue);aYo=r(V_t,"not"),V_t.forEach(t),nYo=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(DZ,"A",{href:!0});var X_t=s(DX);sYo=r(X_t,"from_pretrained()"),X_t.forEach(t),lYo=r(DZ," to load the model weights."),DZ.forEach(t),iYo=i(oA),T(Mv.$$.fragment,oA),oA.forEach(t),dYo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(d8.$$.fragment,ga),cYo=i(ga),pue=n(ga,"P",{});var z_t=s(pue);fYo=r(z_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),z_t.forEach(t),mYo=i(ga),Da=n(ga,"P",{});var rA=s(Da);gYo=r(rA,"The model class to instantiate is selected based on the "),uue=n(rA,"CODE",{});var W_t=s(uue);hYo=r(W_t,"model_type"),W_t.forEach(t),pYo=r(rA,` property of the config object (either
passed as an argument or loaded from `),_ue=n(rA,"CODE",{});var Q_t=s(_ue);uYo=r(Q_t,"pretrained_model_name_or_path"),Q_t.forEach(t),_Yo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=n(rA,"CODE",{});var H_t=s(bue);bYo=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),vYo=r(rA,":"),rA.forEach(t),FYo=i(ga),vue=n(ga,"UL",{});var U_t=s(vue);Ev=n(U_t,"LI",{});var uke=s(Ev);Fue=n(uke,"STRONG",{});var J_t=s(Fue);TYo=r(J_t,"vision-encoder-decoder"),J_t.forEach(t),MYo=r(uke," \u2014 "),GX=n(uke,"A",{href:!0});var Y_t=s(GX);EYo=r(Y_t,"VisionEncoderDecoderModel"),Y_t.forEach(t),CYo=r(uke," (Vision Encoder decoder model)"),uke.forEach(t),U_t.forEach(t),wYo=i(ga),Cv=n(ga,"P",{});var _ke=s(Cv);AYo=r(_ke,"The model is set in evaluation mode by default using "),Tue=n(_ke,"CODE",{});var K_t=s(Tue);yYo=r(K_t,"model.eval()"),K_t.forEach(t),LYo=r(_ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mue=n(_ke,"CODE",{});var Z_t=s(Mue);xYo=r(Z_t,"model.train()"),Z_t.forEach(t),_ke.forEach(t),$Yo=i(ga),T(wv.$$.fragment,ga),ga.forEach(t),el.forEach(t),qNe=i(f),cd=n(f,"H2",{class:!0});var GDe=s(cd);Av=n(GDe,"A",{id:!0,class:!0,href:!0});var e0t=s(Av);Eue=n(e0t,"SPAN",{});var o0t=s(Eue);T(c8.$$.fragment,o0t),o0t.forEach(t),e0t.forEach(t),kYo=i(GDe),Cue=n(GDe,"SPAN",{});var r0t=s(Cue);SYo=r(r0t,"AutoModelForAudioClassification"),r0t.forEach(t),GDe.forEach(t),NNe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(f8.$$.fragment,ol),RYo=i(ol),fd=n(ol,"P",{});var GZ=s(fd);PYo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),OX=n(GZ,"A",{href:!0});var t0t=s(OX);BYo=r(t0t,"from_pretrained()"),t0t.forEach(t),IYo=r(GZ," class method or the "),VX=n(GZ,"A",{href:!0});var a0t=s(VX);qYo=r(a0t,"from_config()"),a0t.forEach(t),NYo=r(GZ,` class
method.`),GZ.forEach(t),jYo=i(ol),m8=n(ol,"P",{});var ODe=s(m8);DYo=r(ODe,"This class cannot be instantiated directly using "),wue=n(ODe,"CODE",{});var n0t=s(wue);GYo=r(n0t,"__init__()"),n0t.forEach(t),OYo=r(ODe," (throws an error)."),ODe.forEach(t),VYo=i(ol),_t=n(ol,"DIV",{class:!0});var tA=s(_t);T(g8.$$.fragment,tA),XYo=i(tA),Aue=n(tA,"P",{});var s0t=s(Aue);zYo=r(s0t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),s0t.forEach(t),WYo=i(tA),md=n(tA,"P",{});var OZ=s(md);QYo=r(OZ,`Note:
Loading a model from its configuration file does `),yue=n(OZ,"STRONG",{});var l0t=s(yue);HYo=r(l0t,"not"),l0t.forEach(t),UYo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(OZ,"A",{href:!0});var i0t=s(XX);JYo=r(i0t,"from_pretrained()"),i0t.forEach(t),YYo=r(OZ," to load the model weights."),OZ.forEach(t),KYo=i(tA),T(yv.$$.fragment,tA),tA.forEach(t),ZYo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(h8.$$.fragment,ha),eKo=i(ha),Lue=n(ha,"P",{});var d0t=s(Lue);oKo=r(d0t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),d0t.forEach(t),rKo=i(ha),Ga=n(ha,"P",{});var aA=s(Ga);tKo=r(aA,"The model class to instantiate is selected based on the "),xue=n(aA,"CODE",{});var c0t=s(xue);aKo=r(c0t,"model_type"),c0t.forEach(t),nKo=r(aA,` property of the config object (either
passed as an argument or loaded from `),$ue=n(aA,"CODE",{});var f0t=s($ue);sKo=r(f0t,"pretrained_model_name_or_path"),f0t.forEach(t),lKo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(aA,"CODE",{});var m0t=s(kue);iKo=r(m0t,"pretrained_model_name_or_path"),m0t.forEach(t),dKo=r(aA,":"),aA.forEach(t),cKo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);Lv=n(Oe,"LI",{});var bke=s(Lv);Sue=n(bke,"STRONG",{});var g0t=s(Sue);fKo=r(g0t,"data2vec-audio"),g0t.forEach(t),mKo=r(bke," \u2014 "),zX=n(bke,"A",{href:!0});var h0t=s(zX);gKo=r(h0t,"Data2VecAudioForSequenceClassification"),h0t.forEach(t),hKo=r(bke," (Data2VecAudio model)"),bke.forEach(t),pKo=i(Oe),xv=n(Oe,"LI",{});var vke=s(xv);Rue=n(vke,"STRONG",{});var p0t=s(Rue);uKo=r(p0t,"hubert"),p0t.forEach(t),_Ko=r(vke," \u2014 "),WX=n(vke,"A",{href:!0});var u0t=s(WX);bKo=r(u0t,"HubertForSequenceClassification"),u0t.forEach(t),vKo=r(vke," (Hubert model)"),vke.forEach(t),FKo=i(Oe),$v=n(Oe,"LI",{});var Fke=s($v);Pue=n(Fke,"STRONG",{});var _0t=s(Pue);TKo=r(_0t,"sew"),_0t.forEach(t),MKo=r(Fke," \u2014 "),QX=n(Fke,"A",{href:!0});var b0t=s(QX);EKo=r(b0t,"SEWForSequenceClassification"),b0t.forEach(t),CKo=r(Fke," (SEW model)"),Fke.forEach(t),wKo=i(Oe),kv=n(Oe,"LI",{});var Tke=s(kv);Bue=n(Tke,"STRONG",{});var v0t=s(Bue);AKo=r(v0t,"sew-d"),v0t.forEach(t),yKo=r(Tke," \u2014 "),HX=n(Tke,"A",{href:!0});var F0t=s(HX);LKo=r(F0t,"SEWDForSequenceClassification"),F0t.forEach(t),xKo=r(Tke," (SEW-D model)"),Tke.forEach(t),$Ko=i(Oe),Sv=n(Oe,"LI",{});var Mke=s(Sv);Iue=n(Mke,"STRONG",{});var T0t=s(Iue);kKo=r(T0t,"unispeech"),T0t.forEach(t),SKo=r(Mke," \u2014 "),UX=n(Mke,"A",{href:!0});var M0t=s(UX);RKo=r(M0t,"UniSpeechForSequenceClassification"),M0t.forEach(t),PKo=r(Mke," (UniSpeech model)"),Mke.forEach(t),BKo=i(Oe),Rv=n(Oe,"LI",{});var Eke=s(Rv);que=n(Eke,"STRONG",{});var E0t=s(que);IKo=r(E0t,"unispeech-sat"),E0t.forEach(t),qKo=r(Eke," \u2014 "),JX=n(Eke,"A",{href:!0});var C0t=s(JX);NKo=r(C0t,"UniSpeechSatForSequenceClassification"),C0t.forEach(t),jKo=r(Eke," (UniSpeechSat model)"),Eke.forEach(t),DKo=i(Oe),Pv=n(Oe,"LI",{});var Cke=s(Pv);Nue=n(Cke,"STRONG",{});var w0t=s(Nue);GKo=r(w0t,"wav2vec2"),w0t.forEach(t),OKo=r(Cke," \u2014 "),YX=n(Cke,"A",{href:!0});var A0t=s(YX);VKo=r(A0t,"Wav2Vec2ForSequenceClassification"),A0t.forEach(t),XKo=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),zKo=i(Oe),Bv=n(Oe,"LI",{});var wke=s(Bv);jue=n(wke,"STRONG",{});var y0t=s(jue);WKo=r(y0t,"wav2vec2-conformer"),y0t.forEach(t),QKo=r(wke," \u2014 "),KX=n(wke,"A",{href:!0});var L0t=s(KX);HKo=r(L0t,"Wav2Vec2ConformerForSequenceClassification"),L0t.forEach(t),UKo=r(wke," (Wav2Vec2-Conformer model)"),wke.forEach(t),JKo=i(Oe),Iv=n(Oe,"LI",{});var Ake=s(Iv);Due=n(Ake,"STRONG",{});var x0t=s(Due);YKo=r(x0t,"wavlm"),x0t.forEach(t),KKo=r(Ake," \u2014 "),ZX=n(Ake,"A",{href:!0});var $0t=s(ZX);ZKo=r($0t,"WavLMForSequenceClassification"),$0t.forEach(t),eZo=r(Ake," (WavLM model)"),Ake.forEach(t),Oe.forEach(t),oZo=i(ha),qv=n(ha,"P",{});var yke=s(qv);rZo=r(yke,"The model is set in evaluation mode by default using "),Gue=n(yke,"CODE",{});var k0t=s(Gue);tZo=r(k0t,"model.eval()"),k0t.forEach(t),aZo=r(yke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(yke,"CODE",{});var S0t=s(Oue);nZo=r(S0t,"model.train()"),S0t.forEach(t),yke.forEach(t),sZo=i(ha),T(Nv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),jNe=i(f),gd=n(f,"H2",{class:!0});var VDe=s(gd);jv=n(VDe,"A",{id:!0,class:!0,href:!0});var R0t=s(jv);Vue=n(R0t,"SPAN",{});var P0t=s(Vue);T(p8.$$.fragment,P0t),P0t.forEach(t),R0t.forEach(t),lZo=i(VDe),Xue=n(VDe,"SPAN",{});var B0t=s(Xue);iZo=r(B0t,"AutoModelForAudioFrameClassification"),B0t.forEach(t),VDe.forEach(t),DNe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(u8.$$.fragment,rl),dZo=i(rl),hd=n(rl,"P",{});var VZ=s(hd);cZo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ez=n(VZ,"A",{href:!0});var I0t=s(ez);fZo=r(I0t,"from_pretrained()"),I0t.forEach(t),mZo=r(VZ," class method or the "),oz=n(VZ,"A",{href:!0});var q0t=s(oz);gZo=r(q0t,"from_config()"),q0t.forEach(t),hZo=r(VZ,` class
method.`),VZ.forEach(t),pZo=i(rl),_8=n(rl,"P",{});var XDe=s(_8);uZo=r(XDe,"This class cannot be instantiated directly using "),zue=n(XDe,"CODE",{});var N0t=s(zue);_Zo=r(N0t,"__init__()"),N0t.forEach(t),bZo=r(XDe," (throws an error)."),XDe.forEach(t),vZo=i(rl),bt=n(rl,"DIV",{class:!0});var nA=s(bt);T(b8.$$.fragment,nA),FZo=i(nA),Wue=n(nA,"P",{});var j0t=s(Wue);TZo=r(j0t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),j0t.forEach(t),MZo=i(nA),pd=n(nA,"P",{});var XZ=s(pd);EZo=r(XZ,`Note:
Loading a model from its configuration file does `),Que=n(XZ,"STRONG",{});var D0t=s(Que);CZo=r(D0t,"not"),D0t.forEach(t),wZo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(XZ,"A",{href:!0});var G0t=s(rz);AZo=r(G0t,"from_pretrained()"),G0t.forEach(t),yZo=r(XZ," to load the model weights."),XZ.forEach(t),LZo=i(nA),T(Dv.$$.fragment,nA),nA.forEach(t),xZo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(v8.$$.fragment,pa),$Zo=i(pa),Hue=n(pa,"P",{});var O0t=s(Hue);kZo=r(O0t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),O0t.forEach(t),SZo=i(pa),Oa=n(pa,"P",{});var sA=s(Oa);RZo=r(sA,"The model class to instantiate is selected based on the "),Uue=n(sA,"CODE",{});var V0t=s(Uue);PZo=r(V0t,"model_type"),V0t.forEach(t),BZo=r(sA,` property of the config object (either
passed as an argument or loaded from `),Jue=n(sA,"CODE",{});var X0t=s(Jue);IZo=r(X0t,"pretrained_model_name_or_path"),X0t.forEach(t),qZo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(sA,"CODE",{});var z0t=s(Yue);NZo=r(z0t,"pretrained_model_name_or_path"),z0t.forEach(t),jZo=r(sA,":"),sA.forEach(t),DZo=i(pa),Kr=n(pa,"UL",{});var tl=s(Kr);Gv=n(tl,"LI",{});var Lke=s(Gv);Kue=n(Lke,"STRONG",{});var W0t=s(Kue);GZo=r(W0t,"data2vec-audio"),W0t.forEach(t),OZo=r(Lke," \u2014 "),tz=n(Lke,"A",{href:!0});var Q0t=s(tz);VZo=r(Q0t,"Data2VecAudioForAudioFrameClassification"),Q0t.forEach(t),XZo=r(Lke," (Data2VecAudio model)"),Lke.forEach(t),zZo=i(tl),Ov=n(tl,"LI",{});var xke=s(Ov);Zue=n(xke,"STRONG",{});var H0t=s(Zue);WZo=r(H0t,"unispeech-sat"),H0t.forEach(t),QZo=r(xke," \u2014 "),az=n(xke,"A",{href:!0});var U0t=s(az);HZo=r(U0t,"UniSpeechSatForAudioFrameClassification"),U0t.forEach(t),UZo=r(xke," (UniSpeechSat model)"),xke.forEach(t),JZo=i(tl),Vv=n(tl,"LI",{});var $ke=s(Vv);e_e=n($ke,"STRONG",{});var J0t=s(e_e);YZo=r(J0t,"wav2vec2"),J0t.forEach(t),KZo=r($ke," \u2014 "),nz=n($ke,"A",{href:!0});var Y0t=s(nz);ZZo=r(Y0t,"Wav2Vec2ForAudioFrameClassification"),Y0t.forEach(t),eer=r($ke," (Wav2Vec2 model)"),$ke.forEach(t),oer=i(tl),Xv=n(tl,"LI",{});var kke=s(Xv);o_e=n(kke,"STRONG",{});var K0t=s(o_e);rer=r(K0t,"wav2vec2-conformer"),K0t.forEach(t),ter=r(kke," \u2014 "),sz=n(kke,"A",{href:!0});var Z0t=s(sz);aer=r(Z0t,"Wav2Vec2ConformerForAudioFrameClassification"),Z0t.forEach(t),ner=r(kke," (Wav2Vec2-Conformer model)"),kke.forEach(t),ser=i(tl),zv=n(tl,"LI",{});var Ske=s(zv);r_e=n(Ske,"STRONG",{});var e1t=s(r_e);ler=r(e1t,"wavlm"),e1t.forEach(t),ier=r(Ske," \u2014 "),lz=n(Ske,"A",{href:!0});var o1t=s(lz);der=r(o1t,"WavLMForAudioFrameClassification"),o1t.forEach(t),cer=r(Ske," (WavLM model)"),Ske.forEach(t),tl.forEach(t),fer=i(pa),Wv=n(pa,"P",{});var Rke=s(Wv);mer=r(Rke,"The model is set in evaluation mode by default using "),t_e=n(Rke,"CODE",{});var r1t=s(t_e);ger=r(r1t,"model.eval()"),r1t.forEach(t),her=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(Rke,"CODE",{});var t1t=s(a_e);per=r(t1t,"model.train()"),t1t.forEach(t),Rke.forEach(t),uer=i(pa),T(Qv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),GNe=i(f),ud=n(f,"H2",{class:!0});var zDe=s(ud);Hv=n(zDe,"A",{id:!0,class:!0,href:!0});var a1t=s(Hv);n_e=n(a1t,"SPAN",{});var n1t=s(n_e);T(F8.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),_er=i(zDe),s_e=n(zDe,"SPAN",{});var s1t=s(s_e);ber=r(s1t,"AutoModelForCTC"),s1t.forEach(t),zDe.forEach(t),ONe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(T8.$$.fragment,al),ver=i(al),_d=n(al,"P",{});var zZ=s(_d);Fer=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iz=n(zZ,"A",{href:!0});var l1t=s(iz);Ter=r(l1t,"from_pretrained()"),l1t.forEach(t),Mer=r(zZ," class method or the "),dz=n(zZ,"A",{href:!0});var i1t=s(dz);Eer=r(i1t,"from_config()"),i1t.forEach(t),Cer=r(zZ,` class
method.`),zZ.forEach(t),wer=i(al),M8=n(al,"P",{});var WDe=s(M8);Aer=r(WDe,"This class cannot be instantiated directly using "),l_e=n(WDe,"CODE",{});var d1t=s(l_e);yer=r(d1t,"__init__()"),d1t.forEach(t),Ler=r(WDe," (throws an error)."),WDe.forEach(t),xer=i(al),vt=n(al,"DIV",{class:!0});var lA=s(vt);T(E8.$$.fragment,lA),$er=i(lA),i_e=n(lA,"P",{});var c1t=s(i_e);ker=r(c1t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),c1t.forEach(t),Ser=i(lA),bd=n(lA,"P",{});var WZ=s(bd);Rer=r(WZ,`Note:
Loading a model from its configuration file does `),d_e=n(WZ,"STRONG",{});var f1t=s(d_e);Per=r(f1t,"not"),f1t.forEach(t),Ber=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(WZ,"A",{href:!0});var m1t=s(cz);Ier=r(m1t,"from_pretrained()"),m1t.forEach(t),qer=r(WZ," to load the model weights."),WZ.forEach(t),Ner=i(lA),T(Uv.$$.fragment,lA),lA.forEach(t),jer=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(C8.$$.fragment,ua),Der=i(ua),c_e=n(ua,"P",{});var g1t=s(c_e);Ger=r(g1t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),g1t.forEach(t),Oer=i(ua),Va=n(ua,"P",{});var iA=s(Va);Ver=r(iA,"The model class to instantiate is selected based on the "),f_e=n(iA,"CODE",{});var h1t=s(f_e);Xer=r(h1t,"model_type"),h1t.forEach(t),zer=r(iA,` property of the config object (either
passed as an argument or loaded from `),m_e=n(iA,"CODE",{});var p1t=s(m_e);Wer=r(p1t,"pretrained_model_name_or_path"),p1t.forEach(t),Qer=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(iA,"CODE",{});var u1t=s(g_e);Her=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),Uer=r(iA,":"),iA.forEach(t),Jer=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);Jv=n(Ve,"LI",{});var Pke=s(Jv);h_e=n(Pke,"STRONG",{});var _1t=s(h_e);Yer=r(_1t,"data2vec-audio"),_1t.forEach(t),Ker=r(Pke," \u2014 "),fz=n(Pke,"A",{href:!0});var b1t=s(fz);Zer=r(b1t,"Data2VecAudioForCTC"),b1t.forEach(t),eor=r(Pke," (Data2VecAudio model)"),Pke.forEach(t),oor=i(Ve),Yv=n(Ve,"LI",{});var Bke=s(Yv);p_e=n(Bke,"STRONG",{});var v1t=s(p_e);ror=r(v1t,"hubert"),v1t.forEach(t),tor=r(Bke," \u2014 "),mz=n(Bke,"A",{href:!0});var F1t=s(mz);aor=r(F1t,"HubertForCTC"),F1t.forEach(t),nor=r(Bke," (Hubert model)"),Bke.forEach(t),sor=i(Ve),Kv=n(Ve,"LI",{});var Ike=s(Kv);u_e=n(Ike,"STRONG",{});var T1t=s(u_e);lor=r(T1t,"sew"),T1t.forEach(t),ior=r(Ike," \u2014 "),gz=n(Ike,"A",{href:!0});var M1t=s(gz);dor=r(M1t,"SEWForCTC"),M1t.forEach(t),cor=r(Ike," (SEW model)"),Ike.forEach(t),mor=i(Ve),Zv=n(Ve,"LI",{});var qke=s(Zv);__e=n(qke,"STRONG",{});var E1t=s(__e);gor=r(E1t,"sew-d"),E1t.forEach(t),hor=r(qke," \u2014 "),hz=n(qke,"A",{href:!0});var C1t=s(hz);por=r(C1t,"SEWDForCTC"),C1t.forEach(t),uor=r(qke," (SEW-D model)"),qke.forEach(t),_or=i(Ve),eF=n(Ve,"LI",{});var Nke=s(eF);b_e=n(Nke,"STRONG",{});var w1t=s(b_e);bor=r(w1t,"unispeech"),w1t.forEach(t),vor=r(Nke," \u2014 "),pz=n(Nke,"A",{href:!0});var A1t=s(pz);For=r(A1t,"UniSpeechForCTC"),A1t.forEach(t),Tor=r(Nke," (UniSpeech model)"),Nke.forEach(t),Mor=i(Ve),oF=n(Ve,"LI",{});var jke=s(oF);v_e=n(jke,"STRONG",{});var y1t=s(v_e);Eor=r(y1t,"unispeech-sat"),y1t.forEach(t),Cor=r(jke," \u2014 "),uz=n(jke,"A",{href:!0});var L1t=s(uz);wor=r(L1t,"UniSpeechSatForCTC"),L1t.forEach(t),Aor=r(jke," (UniSpeechSat model)"),jke.forEach(t),yor=i(Ve),rF=n(Ve,"LI",{});var Dke=s(rF);F_e=n(Dke,"STRONG",{});var x1t=s(F_e);Lor=r(x1t,"wav2vec2"),x1t.forEach(t),xor=r(Dke," \u2014 "),_z=n(Dke,"A",{href:!0});var $1t=s(_z);$or=r($1t,"Wav2Vec2ForCTC"),$1t.forEach(t),kor=r(Dke," (Wav2Vec2 model)"),Dke.forEach(t),Sor=i(Ve),tF=n(Ve,"LI",{});var Gke=s(tF);T_e=n(Gke,"STRONG",{});var k1t=s(T_e);Ror=r(k1t,"wav2vec2-conformer"),k1t.forEach(t),Por=r(Gke," \u2014 "),bz=n(Gke,"A",{href:!0});var S1t=s(bz);Bor=r(S1t,"Wav2Vec2ConformerForCTC"),S1t.forEach(t),Ior=r(Gke," (Wav2Vec2-Conformer model)"),Gke.forEach(t),qor=i(Ve),aF=n(Ve,"LI",{});var Oke=s(aF);M_e=n(Oke,"STRONG",{});var R1t=s(M_e);Nor=r(R1t,"wavlm"),R1t.forEach(t),jor=r(Oke," \u2014 "),vz=n(Oke,"A",{href:!0});var P1t=s(vz);Dor=r(P1t,"WavLMForCTC"),P1t.forEach(t),Gor=r(Oke," (WavLM model)"),Oke.forEach(t),Ve.forEach(t),Oor=i(ua),nF=n(ua,"P",{});var Vke=s(nF);Vor=r(Vke,"The model is set in evaluation mode by default using "),E_e=n(Vke,"CODE",{});var B1t=s(E_e);Xor=r(B1t,"model.eval()"),B1t.forEach(t),zor=r(Vke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(Vke,"CODE",{});var I1t=s(C_e);Wor=r(I1t,"model.train()"),I1t.forEach(t),Vke.forEach(t),Qor=i(ua),T(sF.$$.fragment,ua),ua.forEach(t),al.forEach(t),VNe=i(f),vd=n(f,"H2",{class:!0});var QDe=s(vd);lF=n(QDe,"A",{id:!0,class:!0,href:!0});var q1t=s(lF);w_e=n(q1t,"SPAN",{});var N1t=s(w_e);T(w8.$$.fragment,N1t),N1t.forEach(t),q1t.forEach(t),Hor=i(QDe),A_e=n(QDe,"SPAN",{});var j1t=s(A_e);Uor=r(j1t,"AutoModelForSpeechSeq2Seq"),j1t.forEach(t),QDe.forEach(t),XNe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(A8.$$.fragment,nl),Jor=i(nl),Fd=n(nl,"P",{});var QZ=s(Fd);Yor=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Fz=n(QZ,"A",{href:!0});var D1t=s(Fz);Kor=r(D1t,"from_pretrained()"),D1t.forEach(t),Zor=r(QZ," class method or the "),Tz=n(QZ,"A",{href:!0});var G1t=s(Tz);err=r(G1t,"from_config()"),G1t.forEach(t),orr=r(QZ,` class
method.`),QZ.forEach(t),rrr=i(nl),y8=n(nl,"P",{});var HDe=s(y8);trr=r(HDe,"This class cannot be instantiated directly using "),y_e=n(HDe,"CODE",{});var O1t=s(y_e);arr=r(O1t,"__init__()"),O1t.forEach(t),nrr=r(HDe," (throws an error)."),HDe.forEach(t),srr=i(nl),Ft=n(nl,"DIV",{class:!0});var dA=s(Ft);T(L8.$$.fragment,dA),lrr=i(dA),L_e=n(dA,"P",{});var V1t=s(L_e);irr=r(V1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),V1t.forEach(t),drr=i(dA),Td=n(dA,"P",{});var HZ=s(Td);crr=r(HZ,`Note:
Loading a model from its configuration file does `),x_e=n(HZ,"STRONG",{});var X1t=s(x_e);frr=r(X1t,"not"),X1t.forEach(t),mrr=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(HZ,"A",{href:!0});var z1t=s(Mz);grr=r(z1t,"from_pretrained()"),z1t.forEach(t),hrr=r(HZ," to load the model weights."),HZ.forEach(t),prr=i(dA),T(iF.$$.fragment,dA),dA.forEach(t),urr=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(x8.$$.fragment,_a),_rr=i(_a),$_e=n(_a,"P",{});var W1t=s($_e);brr=r(W1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),W1t.forEach(t),vrr=i(_a),Xa=n(_a,"P",{});var cA=s(Xa);Frr=r(cA,"The model class to instantiate is selected based on the "),k_e=n(cA,"CODE",{});var Q1t=s(k_e);Trr=r(Q1t,"model_type"),Q1t.forEach(t),Mrr=r(cA,` property of the config object (either
passed as an argument or loaded from `),S_e=n(cA,"CODE",{});var H1t=s(S_e);Err=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),Crr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(cA,"CODE",{});var U1t=s(R_e);wrr=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),Arr=r(cA,":"),cA.forEach(t),yrr=i(_a),$8=n(_a,"UL",{});var UDe=s($8);dF=n(UDe,"LI",{});var Xke=s(dF);P_e=n(Xke,"STRONG",{});var J1t=s(P_e);Lrr=r(J1t,"speech-encoder-decoder"),J1t.forEach(t),xrr=r(Xke," \u2014 "),Ez=n(Xke,"A",{href:!0});var Y1t=s(Ez);$rr=r(Y1t,"SpeechEncoderDecoderModel"),Y1t.forEach(t),krr=r(Xke," (Speech Encoder decoder model)"),Xke.forEach(t),Srr=i(UDe),cF=n(UDe,"LI",{});var zke=s(cF);B_e=n(zke,"STRONG",{});var K1t=s(B_e);Rrr=r(K1t,"speech_to_text"),K1t.forEach(t),Prr=r(zke," \u2014 "),Cz=n(zke,"A",{href:!0});var Z1t=s(Cz);Brr=r(Z1t,"Speech2TextForConditionalGeneration"),Z1t.forEach(t),Irr=r(zke," (Speech2Text model)"),zke.forEach(t),UDe.forEach(t),qrr=i(_a),fF=n(_a,"P",{});var Wke=s(fF);Nrr=r(Wke,"The model is set in evaluation mode by default using "),I_e=n(Wke,"CODE",{});var ebt=s(I_e);jrr=r(ebt,"model.eval()"),ebt.forEach(t),Drr=r(Wke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(Wke,"CODE",{});var obt=s(q_e);Grr=r(obt,"model.train()"),obt.forEach(t),Wke.forEach(t),Orr=i(_a),T(mF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),zNe=i(f),Md=n(f,"H2",{class:!0});var JDe=s(Md);gF=n(JDe,"A",{id:!0,class:!0,href:!0});var rbt=s(gF);N_e=n(rbt,"SPAN",{});var tbt=s(N_e);T(k8.$$.fragment,tbt),tbt.forEach(t),rbt.forEach(t),Vrr=i(JDe),j_e=n(JDe,"SPAN",{});var abt=s(j_e);Xrr=r(abt,"AutoModelForAudioXVector"),abt.forEach(t),JDe.forEach(t),WNe=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(S8.$$.fragment,sl),zrr=i(sl),Ed=n(sl,"P",{});var UZ=s(Ed);Wrr=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wz=n(UZ,"A",{href:!0});var nbt=s(wz);Qrr=r(nbt,"from_pretrained()"),nbt.forEach(t),Hrr=r(UZ," class method or the "),Az=n(UZ,"A",{href:!0});var sbt=s(Az);Urr=r(sbt,"from_config()"),sbt.forEach(t),Jrr=r(UZ,` class
method.`),UZ.forEach(t),Yrr=i(sl),R8=n(sl,"P",{});var YDe=s(R8);Krr=r(YDe,"This class cannot be instantiated directly using "),D_e=n(YDe,"CODE",{});var lbt=s(D_e);Zrr=r(lbt,"__init__()"),lbt.forEach(t),etr=r(YDe," (throws an error)."),YDe.forEach(t),otr=i(sl),Tt=n(sl,"DIV",{class:!0});var fA=s(Tt);T(P8.$$.fragment,fA),rtr=i(fA),G_e=n(fA,"P",{});var ibt=s(G_e);ttr=r(ibt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ibt.forEach(t),atr=i(fA),Cd=n(fA,"P",{});var JZ=s(Cd);ntr=r(JZ,`Note:
Loading a model from its configuration file does `),O_e=n(JZ,"STRONG",{});var dbt=s(O_e);str=r(dbt,"not"),dbt.forEach(t),ltr=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(JZ,"A",{href:!0});var cbt=s(yz);itr=r(cbt,"from_pretrained()"),cbt.forEach(t),dtr=r(JZ," to load the model weights."),JZ.forEach(t),ctr=i(fA),T(hF.$$.fragment,fA),fA.forEach(t),ftr=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(B8.$$.fragment,ba),mtr=i(ba),V_e=n(ba,"P",{});var fbt=s(V_e);gtr=r(fbt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fbt.forEach(t),htr=i(ba),za=n(ba,"P",{});var mA=s(za);ptr=r(mA,"The model class to instantiate is selected based on the "),X_e=n(mA,"CODE",{});var mbt=s(X_e);utr=r(mbt,"model_type"),mbt.forEach(t),_tr=r(mA,` property of the config object (either
passed as an argument or loaded from `),z_e=n(mA,"CODE",{});var gbt=s(z_e);btr=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),vtr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(mA,"CODE",{});var hbt=s(W_e);Ftr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),Ttr=r(mA,":"),mA.forEach(t),Mtr=i(ba),Zr=n(ba,"UL",{});var ll=s(Zr);pF=n(ll,"LI",{});var Qke=s(pF);Q_e=n(Qke,"STRONG",{});var pbt=s(Q_e);Etr=r(pbt,"data2vec-audio"),pbt.forEach(t),Ctr=r(Qke," \u2014 "),Lz=n(Qke,"A",{href:!0});var ubt=s(Lz);wtr=r(ubt,"Data2VecAudioForXVector"),ubt.forEach(t),Atr=r(Qke," (Data2VecAudio model)"),Qke.forEach(t),ytr=i(ll),uF=n(ll,"LI",{});var Hke=s(uF);H_e=n(Hke,"STRONG",{});var _bt=s(H_e);Ltr=r(_bt,"unispeech-sat"),_bt.forEach(t),xtr=r(Hke," \u2014 "),xz=n(Hke,"A",{href:!0});var bbt=s(xz);$tr=r(bbt,"UniSpeechSatForXVector"),bbt.forEach(t),ktr=r(Hke," (UniSpeechSat model)"),Hke.forEach(t),Str=i(ll),_F=n(ll,"LI",{});var Uke=s(_F);U_e=n(Uke,"STRONG",{});var vbt=s(U_e);Rtr=r(vbt,"wav2vec2"),vbt.forEach(t),Ptr=r(Uke," \u2014 "),$z=n(Uke,"A",{href:!0});var Fbt=s($z);Btr=r(Fbt,"Wav2Vec2ForXVector"),Fbt.forEach(t),Itr=r(Uke," (Wav2Vec2 model)"),Uke.forEach(t),qtr=i(ll),bF=n(ll,"LI",{});var Jke=s(bF);J_e=n(Jke,"STRONG",{});var Tbt=s(J_e);Ntr=r(Tbt,"wav2vec2-conformer"),Tbt.forEach(t),jtr=r(Jke," \u2014 "),kz=n(Jke,"A",{href:!0});var Mbt=s(kz);Dtr=r(Mbt,"Wav2Vec2ConformerForXVector"),Mbt.forEach(t),Gtr=r(Jke," (Wav2Vec2-Conformer model)"),Jke.forEach(t),Otr=i(ll),vF=n(ll,"LI",{});var Yke=s(vF);Y_e=n(Yke,"STRONG",{});var Ebt=s(Y_e);Vtr=r(Ebt,"wavlm"),Ebt.forEach(t),Xtr=r(Yke," \u2014 "),Sz=n(Yke,"A",{href:!0});var Cbt=s(Sz);ztr=r(Cbt,"WavLMForXVector"),Cbt.forEach(t),Wtr=r(Yke," (WavLM model)"),Yke.forEach(t),ll.forEach(t),Qtr=i(ba),FF=n(ba,"P",{});var Kke=s(FF);Htr=r(Kke,"The model is set in evaluation mode by default using "),K_e=n(Kke,"CODE",{});var wbt=s(K_e);Utr=r(wbt,"model.eval()"),wbt.forEach(t),Jtr=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z_e=n(Kke,"CODE",{});var Abt=s(Z_e);Ytr=r(Abt,"model.train()"),Abt.forEach(t),Kke.forEach(t),Ktr=i(ba),T(TF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),QNe=i(f),wd=n(f,"H2",{class:!0});var KDe=s(wd);MF=n(KDe,"A",{id:!0,class:!0,href:!0});var ybt=s(MF);e0e=n(ybt,"SPAN",{});var Lbt=s(e0e);T(I8.$$.fragment,Lbt),Lbt.forEach(t),ybt.forEach(t),Ztr=i(KDe),o0e=n(KDe,"SPAN",{});var xbt=s(o0e);ear=r(xbt,"AutoModelForMaskedImageModeling"),xbt.forEach(t),KDe.forEach(t),HNe=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(q8.$$.fragment,il),oar=i(il),Ad=n(il,"P",{});var YZ=s(Ad);rar=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Rz=n(YZ,"A",{href:!0});var $bt=s(Rz);tar=r($bt,"from_pretrained()"),$bt.forEach(t),aar=r(YZ," class method or the "),Pz=n(YZ,"A",{href:!0});var kbt=s(Pz);nar=r(kbt,"from_config()"),kbt.forEach(t),sar=r(YZ,` class
method.`),YZ.forEach(t),lar=i(il),N8=n(il,"P",{});var ZDe=s(N8);iar=r(ZDe,"This class cannot be instantiated directly using "),r0e=n(ZDe,"CODE",{});var Sbt=s(r0e);dar=r(Sbt,"__init__()"),Sbt.forEach(t),car=r(ZDe," (throws an error)."),ZDe.forEach(t),far=i(il),Mt=n(il,"DIV",{class:!0});var gA=s(Mt);T(j8.$$.fragment,gA),mar=i(gA),t0e=n(gA,"P",{});var Rbt=s(t0e);gar=r(Rbt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rbt.forEach(t),har=i(gA),yd=n(gA,"P",{});var KZ=s(yd);par=r(KZ,`Note:
Loading a model from its configuration file does `),a0e=n(KZ,"STRONG",{});var Pbt=s(a0e);uar=r(Pbt,"not"),Pbt.forEach(t),_ar=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(KZ,"A",{href:!0});var Bbt=s(Bz);bar=r(Bbt,"from_pretrained()"),Bbt.forEach(t),Far=r(KZ," to load the model weights."),KZ.forEach(t),Tar=i(gA),T(EF.$$.fragment,gA),gA.forEach(t),Mar=i(il),po=n(il,"DIV",{class:!0});var va=s(po);T(D8.$$.fragment,va),Ear=i(va),n0e=n(va,"P",{});var Ibt=s(n0e);Car=r(Ibt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Ibt.forEach(t),war=i(va),Wa=n(va,"P",{});var hA=s(Wa);Aar=r(hA,"The model class to instantiate is selected based on the "),s0e=n(hA,"CODE",{});var qbt=s(s0e);yar=r(qbt,"model_type"),qbt.forEach(t),Lar=r(hA,` property of the config object (either
passed as an argument or loaded from `),l0e=n(hA,"CODE",{});var Nbt=s(l0e);xar=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),$ar=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i0e=n(hA,"CODE",{});var jbt=s(i0e);kar=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),Sar=r(hA,":"),hA.forEach(t),Rar=i(va),Ld=n(va,"UL",{});var ZZ=s(Ld);CF=n(ZZ,"LI",{});var Zke=s(CF);d0e=n(Zke,"STRONG",{});var Dbt=s(d0e);Par=r(Dbt,"deit"),Dbt.forEach(t),Bar=r(Zke," \u2014 "),Iz=n(Zke,"A",{href:!0});var Gbt=s(Iz);Iar=r(Gbt,"DeiTForMaskedImageModeling"),Gbt.forEach(t),qar=r(Zke," (DeiT model)"),Zke.forEach(t),Nar=i(ZZ),wF=n(ZZ,"LI",{});var eSe=s(wF);c0e=n(eSe,"STRONG",{});var Obt=s(c0e);jar=r(Obt,"swin"),Obt.forEach(t),Dar=r(eSe," \u2014 "),qz=n(eSe,"A",{href:!0});var Vbt=s(qz);Gar=r(Vbt,"SwinForMaskedImageModeling"),Vbt.forEach(t),Oar=r(eSe," (Swin model)"),eSe.forEach(t),Var=i(ZZ),AF=n(ZZ,"LI",{});var oSe=s(AF);f0e=n(oSe,"STRONG",{});var Xbt=s(f0e);Xar=r(Xbt,"vit"),Xbt.forEach(t),zar=r(oSe," \u2014 "),Nz=n(oSe,"A",{href:!0});var zbt=s(Nz);War=r(zbt,"ViTForMaskedImageModeling"),zbt.forEach(t),Qar=r(oSe," (ViT model)"),oSe.forEach(t),ZZ.forEach(t),Har=i(va),yF=n(va,"P",{});var rSe=s(yF);Uar=r(rSe,"The model is set in evaluation mode by default using "),m0e=n(rSe,"CODE",{});var Wbt=s(m0e);Jar=r(Wbt,"model.eval()"),Wbt.forEach(t),Yar=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g0e=n(rSe,"CODE",{});var Qbt=s(g0e);Kar=r(Qbt,"model.train()"),Qbt.forEach(t),rSe.forEach(t),Zar=i(va),T(LF.$$.fragment,va),va.forEach(t),il.forEach(t),UNe=i(f),xd=n(f,"H2",{class:!0});var eGe=s(xd);xF=n(eGe,"A",{id:!0,class:!0,href:!0});var Hbt=s(xF);h0e=n(Hbt,"SPAN",{});var Ubt=s(h0e);T(G8.$$.fragment,Ubt),Ubt.forEach(t),Hbt.forEach(t),enr=i(eGe),p0e=n(eGe,"SPAN",{});var Jbt=s(p0e);onr=r(Jbt,"AutoModelForObjectDetection"),Jbt.forEach(t),eGe.forEach(t),JNe=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(O8.$$.fragment,dl),rnr=i(dl),$d=n(dl,"P",{});var eee=s($d);tnr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jz=n(eee,"A",{href:!0});var Ybt=s(jz);anr=r(Ybt,"from_pretrained()"),Ybt.forEach(t),nnr=r(eee," class method or the "),Dz=n(eee,"A",{href:!0});var Kbt=s(Dz);snr=r(Kbt,"from_config()"),Kbt.forEach(t),lnr=r(eee,` class
method.`),eee.forEach(t),inr=i(dl),V8=n(dl,"P",{});var oGe=s(V8);dnr=r(oGe,"This class cannot be instantiated directly using "),u0e=n(oGe,"CODE",{});var Zbt=s(u0e);cnr=r(Zbt,"__init__()"),Zbt.forEach(t),fnr=r(oGe," (throws an error)."),oGe.forEach(t),mnr=i(dl),Et=n(dl,"DIV",{class:!0});var pA=s(Et);T(X8.$$.fragment,pA),gnr=i(pA),_0e=n(pA,"P",{});var e2t=s(_0e);hnr=r(e2t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),e2t.forEach(t),pnr=i(pA),kd=n(pA,"P",{});var oee=s(kd);unr=r(oee,`Note:
Loading a model from its configuration file does `),b0e=n(oee,"STRONG",{});var o2t=s(b0e);_nr=r(o2t,"not"),o2t.forEach(t),bnr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(oee,"A",{href:!0});var r2t=s(Gz);vnr=r(r2t,"from_pretrained()"),r2t.forEach(t),Fnr=r(oee," to load the model weights."),oee.forEach(t),Tnr=i(pA),T($F.$$.fragment,pA),pA.forEach(t),Mnr=i(dl),uo=n(dl,"DIV",{class:!0});var Fa=s(uo);T(z8.$$.fragment,Fa),Enr=i(Fa),v0e=n(Fa,"P",{});var t2t=s(v0e);Cnr=r(t2t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),t2t.forEach(t),wnr=i(Fa),Qa=n(Fa,"P",{});var uA=s(Qa);Anr=r(uA,"The model class to instantiate is selected based on the "),F0e=n(uA,"CODE",{});var a2t=s(F0e);ynr=r(a2t,"model_type"),a2t.forEach(t),Lnr=r(uA,` property of the config object (either
passed as an argument or loaded from `),T0e=n(uA,"CODE",{});var n2t=s(T0e);xnr=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),$nr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=n(uA,"CODE",{});var s2t=s(M0e);knr=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),Snr=r(uA,":"),uA.forEach(t),Rnr=i(Fa),W8=n(Fa,"UL",{});var rGe=s(W8);kF=n(rGe,"LI",{});var tSe=s(kF);E0e=n(tSe,"STRONG",{});var l2t=s(E0e);Pnr=r(l2t,"detr"),l2t.forEach(t),Bnr=r(tSe," \u2014 "),Oz=n(tSe,"A",{href:!0});var i2t=s(Oz);Inr=r(i2t,"DetrForObjectDetection"),i2t.forEach(t),qnr=r(tSe," (DETR model)"),tSe.forEach(t),Nnr=i(rGe),SF=n(rGe,"LI",{});var aSe=s(SF);C0e=n(aSe,"STRONG",{});var d2t=s(C0e);jnr=r(d2t,"yolos"),d2t.forEach(t),Dnr=r(aSe," \u2014 "),Vz=n(aSe,"A",{href:!0});var c2t=s(Vz);Gnr=r(c2t,"YolosForObjectDetection"),c2t.forEach(t),Onr=r(aSe," (YOLOS model)"),aSe.forEach(t),rGe.forEach(t),Vnr=i(Fa),RF=n(Fa,"P",{});var nSe=s(RF);Xnr=r(nSe,"The model is set in evaluation mode by default using "),w0e=n(nSe,"CODE",{});var f2t=s(w0e);znr=r(f2t,"model.eval()"),f2t.forEach(t),Wnr=r(nSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A0e=n(nSe,"CODE",{});var m2t=s(A0e);Qnr=r(m2t,"model.train()"),m2t.forEach(t),nSe.forEach(t),Hnr=i(Fa),T(PF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),YNe=i(f),Sd=n(f,"H2",{class:!0});var tGe=s(Sd);BF=n(tGe,"A",{id:!0,class:!0,href:!0});var g2t=s(BF);y0e=n(g2t,"SPAN",{});var h2t=s(y0e);T(Q8.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),Unr=i(tGe),L0e=n(tGe,"SPAN",{});var p2t=s(L0e);Jnr=r(p2t,"AutoModelForImageSegmentation"),p2t.forEach(t),tGe.forEach(t),KNe=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(H8.$$.fragment,cl),Ynr=i(cl),Rd=n(cl,"P",{});var ree=s(Rd);Knr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Xz=n(ree,"A",{href:!0});var u2t=s(Xz);Znr=r(u2t,"from_pretrained()"),u2t.forEach(t),esr=r(ree," class method or the "),zz=n(ree,"A",{href:!0});var _2t=s(zz);osr=r(_2t,"from_config()"),_2t.forEach(t),rsr=r(ree,` class
method.`),ree.forEach(t),tsr=i(cl),U8=n(cl,"P",{});var aGe=s(U8);asr=r(aGe,"This class cannot be instantiated directly using "),x0e=n(aGe,"CODE",{});var b2t=s(x0e);nsr=r(b2t,"__init__()"),b2t.forEach(t),ssr=r(aGe," (throws an error)."),aGe.forEach(t),lsr=i(cl),Ct=n(cl,"DIV",{class:!0});var _A=s(Ct);T(J8.$$.fragment,_A),isr=i(_A),$0e=n(_A,"P",{});var v2t=s($0e);dsr=r(v2t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),v2t.forEach(t),csr=i(_A),Pd=n(_A,"P",{});var tee=s(Pd);fsr=r(tee,`Note:
Loading a model from its configuration file does `),k0e=n(tee,"STRONG",{});var F2t=s(k0e);msr=r(F2t,"not"),F2t.forEach(t),gsr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wz=n(tee,"A",{href:!0});var T2t=s(Wz);hsr=r(T2t,"from_pretrained()"),T2t.forEach(t),psr=r(tee," to load the model weights."),tee.forEach(t),usr=i(_A),T(IF.$$.fragment,_A),_A.forEach(t),_sr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(Y8.$$.fragment,Ta),bsr=i(Ta),S0e=n(Ta,"P",{});var M2t=s(S0e);vsr=r(M2t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),M2t.forEach(t),Fsr=i(Ta),Ha=n(Ta,"P",{});var bA=s(Ha);Tsr=r(bA,"The model class to instantiate is selected based on the "),R0e=n(bA,"CODE",{});var E2t=s(R0e);Msr=r(E2t,"model_type"),E2t.forEach(t),Esr=r(bA,` property of the config object (either
passed as an argument or loaded from `),P0e=n(bA,"CODE",{});var C2t=s(P0e);Csr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),wsr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(bA,"CODE",{});var w2t=s(B0e);Asr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),ysr=r(bA,":"),bA.forEach(t),Lsr=i(Ta),I0e=n(Ta,"UL",{});var A2t=s(I0e);qF=n(A2t,"LI",{});var sSe=s(qF);q0e=n(sSe,"STRONG",{});var y2t=s(q0e);xsr=r(y2t,"detr"),y2t.forEach(t),$sr=r(sSe," \u2014 "),Qz=n(sSe,"A",{href:!0});var L2t=s(Qz);ksr=r(L2t,"DetrForSegmentation"),L2t.forEach(t),Ssr=r(sSe," (DETR model)"),sSe.forEach(t),A2t.forEach(t),Rsr=i(Ta),NF=n(Ta,"P",{});var lSe=s(NF);Psr=r(lSe,"The model is set in evaluation mode by default using "),N0e=n(lSe,"CODE",{});var x2t=s(N0e);Bsr=r(x2t,"model.eval()"),x2t.forEach(t),Isr=r(lSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j0e=n(lSe,"CODE",{});var $2t=s(j0e);qsr=r($2t,"model.train()"),$2t.forEach(t),lSe.forEach(t),Nsr=i(Ta),T(jF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),ZNe=i(f),Bd=n(f,"H2",{class:!0});var nGe=s(Bd);DF=n(nGe,"A",{id:!0,class:!0,href:!0});var k2t=s(DF);D0e=n(k2t,"SPAN",{});var S2t=s(D0e);T(K8.$$.fragment,S2t),S2t.forEach(t),k2t.forEach(t),jsr=i(nGe),G0e=n(nGe,"SPAN",{});var R2t=s(G0e);Dsr=r(R2t,"AutoModelForSemanticSegmentation"),R2t.forEach(t),nGe.forEach(t),eje=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(Z8.$$.fragment,fl),Gsr=i(fl),Id=n(fl,"P",{});var aee=s(Id);Osr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Hz=n(aee,"A",{href:!0});var P2t=s(Hz);Vsr=r(P2t,"from_pretrained()"),P2t.forEach(t),Xsr=r(aee," class method or the "),Uz=n(aee,"A",{href:!0});var B2t=s(Uz);zsr=r(B2t,"from_config()"),B2t.forEach(t),Wsr=r(aee,` class
method.`),aee.forEach(t),Qsr=i(fl),e7=n(fl,"P",{});var sGe=s(e7);Hsr=r(sGe,"This class cannot be instantiated directly using "),O0e=n(sGe,"CODE",{});var I2t=s(O0e);Usr=r(I2t,"__init__()"),I2t.forEach(t),Jsr=r(sGe," (throws an error)."),sGe.forEach(t),Ysr=i(fl),wt=n(fl,"DIV",{class:!0});var vA=s(wt);T(o7.$$.fragment,vA),Ksr=i(vA),V0e=n(vA,"P",{});var q2t=s(V0e);Zsr=r(q2t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),q2t.forEach(t),elr=i(vA),qd=n(vA,"P",{});var nee=s(qd);olr=r(nee,`Note:
Loading a model from its configuration file does `),X0e=n(nee,"STRONG",{});var N2t=s(X0e);rlr=r(N2t,"not"),N2t.forEach(t),tlr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(nee,"A",{href:!0});var j2t=s(Jz);alr=r(j2t,"from_pretrained()"),j2t.forEach(t),nlr=r(nee," to load the model weights."),nee.forEach(t),slr=i(vA),T(GF.$$.fragment,vA),vA.forEach(t),llr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(r7.$$.fragment,Ma),ilr=i(Ma),z0e=n(Ma,"P",{});var D2t=s(z0e);dlr=r(D2t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),D2t.forEach(t),clr=i(Ma),Ua=n(Ma,"P",{});var FA=s(Ua);flr=r(FA,"The model class to instantiate is selected based on the "),W0e=n(FA,"CODE",{});var G2t=s(W0e);mlr=r(G2t,"model_type"),G2t.forEach(t),glr=r(FA,` property of the config object (either
passed as an argument or loaded from `),Q0e=n(FA,"CODE",{});var O2t=s(Q0e);hlr=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),plr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(FA,"CODE",{});var V2t=s(H0e);ulr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),_lr=r(FA,":"),FA.forEach(t),blr=i(Ma),Ja=n(Ma,"UL",{});var TA=s(Ja);OF=n(TA,"LI",{});var iSe=s(OF);U0e=n(iSe,"STRONG",{});var X2t=s(U0e);vlr=r(X2t,"beit"),X2t.forEach(t),Flr=r(iSe," \u2014 "),Yz=n(iSe,"A",{href:!0});var z2t=s(Yz);Tlr=r(z2t,"BeitForSemanticSegmentation"),z2t.forEach(t),Mlr=r(iSe," (BEiT model)"),iSe.forEach(t),Elr=i(TA),VF=n(TA,"LI",{});var dSe=s(VF);J0e=n(dSe,"STRONG",{});var W2t=s(J0e);Clr=r(W2t,"data2vec-vision"),W2t.forEach(t),wlr=r(dSe," \u2014 "),Kz=n(dSe,"A",{href:!0});var Q2t=s(Kz);Alr=r(Q2t,"Data2VecVisionForSemanticSegmentation"),Q2t.forEach(t),ylr=r(dSe," (Data2VecVision model)"),dSe.forEach(t),Llr=i(TA),XF=n(TA,"LI",{});var cSe=s(XF);Y0e=n(cSe,"STRONG",{});var H2t=s(Y0e);xlr=r(H2t,"dpt"),H2t.forEach(t),$lr=r(cSe," \u2014 "),Zz=n(cSe,"A",{href:!0});var U2t=s(Zz);klr=r(U2t,"DPTForSemanticSegmentation"),U2t.forEach(t),Slr=r(cSe," (DPT model)"),cSe.forEach(t),Rlr=i(TA),zF=n(TA,"LI",{});var fSe=s(zF);K0e=n(fSe,"STRONG",{});var J2t=s(K0e);Plr=r(J2t,"segformer"),J2t.forEach(t),Blr=r(fSe," \u2014 "),eW=n(fSe,"A",{href:!0});var Y2t=s(eW);Ilr=r(Y2t,"SegformerForSemanticSegmentation"),Y2t.forEach(t),qlr=r(fSe," (SegFormer model)"),fSe.forEach(t),TA.forEach(t),Nlr=i(Ma),WF=n(Ma,"P",{});var mSe=s(WF);jlr=r(mSe,"The model is set in evaluation mode by default using "),Z0e=n(mSe,"CODE",{});var K2t=s(Z0e);Dlr=r(K2t,"model.eval()"),K2t.forEach(t),Glr=r(mSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(mSe,"CODE",{});var Z2t=s(e1e);Olr=r(Z2t,"model.train()"),Z2t.forEach(t),mSe.forEach(t),Vlr=i(Ma),T(QF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),oje=i(f),Nd=n(f,"H2",{class:!0});var lGe=s(Nd);HF=n(lGe,"A",{id:!0,class:!0,href:!0});var e4t=s(HF);o1e=n(e4t,"SPAN",{});var o4t=s(o1e);T(t7.$$.fragment,o4t),o4t.forEach(t),e4t.forEach(t),Xlr=i(lGe),r1e=n(lGe,"SPAN",{});var r4t=s(r1e);zlr=r(r4t,"AutoModelForInstanceSegmentation"),r4t.forEach(t),lGe.forEach(t),rje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(a7.$$.fragment,ml),Wlr=i(ml),jd=n(ml,"P",{});var see=s(jd);Qlr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),oW=n(see,"A",{href:!0});var t4t=s(oW);Hlr=r(t4t,"from_pretrained()"),t4t.forEach(t),Ulr=r(see," class method or the "),rW=n(see,"A",{href:!0});var a4t=s(rW);Jlr=r(a4t,"from_config()"),a4t.forEach(t),Ylr=r(see,` class
method.`),see.forEach(t),Klr=i(ml),n7=n(ml,"P",{});var iGe=s(n7);Zlr=r(iGe,"This class cannot be instantiated directly using "),t1e=n(iGe,"CODE",{});var n4t=s(t1e);eir=r(n4t,"__init__()"),n4t.forEach(t),oir=r(iGe," (throws an error)."),iGe.forEach(t),rir=i(ml),At=n(ml,"DIV",{class:!0});var MA=s(At);T(s7.$$.fragment,MA),tir=i(MA),a1e=n(MA,"P",{});var s4t=s(a1e);air=r(s4t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),s4t.forEach(t),nir=i(MA),Dd=n(MA,"P",{});var lee=s(Dd);sir=r(lee,`Note:
Loading a model from its configuration file does `),n1e=n(lee,"STRONG",{});var l4t=s(n1e);lir=r(l4t,"not"),l4t.forEach(t),iir=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(lee,"A",{href:!0});var i4t=s(tW);dir=r(i4t,"from_pretrained()"),i4t.forEach(t),cir=r(lee," to load the model weights."),lee.forEach(t),fir=i(MA),T(UF.$$.fragment,MA),MA.forEach(t),mir=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(l7.$$.fragment,Ea),gir=i(Ea),s1e=n(Ea,"P",{});var d4t=s(s1e);hir=r(d4t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),d4t.forEach(t),pir=i(Ea),Ya=n(Ea,"P",{});var EA=s(Ya);uir=r(EA,"The model class to instantiate is selected based on the "),l1e=n(EA,"CODE",{});var c4t=s(l1e);_ir=r(c4t,"model_type"),c4t.forEach(t),bir=r(EA,` property of the config object (either
passed as an argument or loaded from `),i1e=n(EA,"CODE",{});var f4t=s(i1e);vir=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),Fir=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(EA,"CODE",{});var m4t=s(d1e);Tir=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),Mir=r(EA,":"),EA.forEach(t),Eir=i(Ea),c1e=n(Ea,"UL",{});var g4t=s(c1e);JF=n(g4t,"LI",{});var gSe=s(JF);f1e=n(gSe,"STRONG",{});var h4t=s(f1e);Cir=r(h4t,"maskformer"),h4t.forEach(t),wir=r(gSe," \u2014 "),aW=n(gSe,"A",{href:!0});var p4t=s(aW);Air=r(p4t,"MaskFormerForInstanceSegmentation"),p4t.forEach(t),yir=r(gSe," (MaskFormer model)"),gSe.forEach(t),g4t.forEach(t),Lir=i(Ea),YF=n(Ea,"P",{});var hSe=s(YF);xir=r(hSe,"The model is set in evaluation mode by default using "),m1e=n(hSe,"CODE",{});var u4t=s(m1e);$ir=r(u4t,"model.eval()"),u4t.forEach(t),kir=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=n(hSe,"CODE",{});var _4t=s(g1e);Sir=r(_4t,"model.train()"),_4t.forEach(t),hSe.forEach(t),Rir=i(Ea),T(KF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),tje=i(f),Gd=n(f,"H2",{class:!0});var dGe=s(Gd);ZF=n(dGe,"A",{id:!0,class:!0,href:!0});var b4t=s(ZF);h1e=n(b4t,"SPAN",{});var v4t=s(h1e);T(i7.$$.fragment,v4t),v4t.forEach(t),b4t.forEach(t),Pir=i(dGe),p1e=n(dGe,"SPAN",{});var F4t=s(p1e);Bir=r(F4t,"TFAutoModel"),F4t.forEach(t),dGe.forEach(t),aje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(d7.$$.fragment,gl),Iir=i(gl),Od=n(gl,"P",{});var iee=s(Od);qir=r(iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=n(iee,"A",{href:!0});var T4t=s(nW);Nir=r(T4t,"from_pretrained()"),T4t.forEach(t),jir=r(iee," class method or the "),sW=n(iee,"A",{href:!0});var M4t=s(sW);Dir=r(M4t,"from_config()"),M4t.forEach(t),Gir=r(iee,` class
method.`),iee.forEach(t),Oir=i(gl),c7=n(gl,"P",{});var cGe=s(c7);Vir=r(cGe,"This class cannot be instantiated directly using "),u1e=n(cGe,"CODE",{});var E4t=s(u1e);Xir=r(E4t,"__init__()"),E4t.forEach(t),zir=r(cGe," (throws an error)."),cGe.forEach(t),Wir=i(gl),yt=n(gl,"DIV",{class:!0});var CA=s(yt);T(f7.$$.fragment,CA),Qir=i(CA),_1e=n(CA,"P",{});var C4t=s(_1e);Hir=r(C4t,"Instantiates one of the base model classes of the library from a configuration."),C4t.forEach(t),Uir=i(CA),Vd=n(CA,"P",{});var dee=s(Vd);Jir=r(dee,`Note:
Loading a model from its configuration file does `),b1e=n(dee,"STRONG",{});var w4t=s(b1e);Yir=r(w4t,"not"),w4t.forEach(t),Kir=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(dee,"A",{href:!0});var A4t=s(lW);Zir=r(A4t,"from_pretrained()"),A4t.forEach(t),edr=r(dee," to load the model weights."),dee.forEach(t),odr=i(CA),T(e6.$$.fragment,CA),CA.forEach(t),rdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(m7.$$.fragment,hl),tdr=i(hl),v1e=n(hl,"P",{});var y4t=s(v1e);adr=r(y4t,"Instantiate one of the base model classes of the library from a pretrained model."),y4t.forEach(t),ndr=i(hl),Ka=n(hl,"P",{});var wA=s(Ka);sdr=r(wA,"The model class to instantiate is selected based on the "),F1e=n(wA,"CODE",{});var L4t=s(F1e);ldr=r(L4t,"model_type"),L4t.forEach(t),idr=r(wA,` property of the config object (either
passed as an argument or loaded from `),T1e=n(wA,"CODE",{});var x4t=s(T1e);ddr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),cdr=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(wA,"CODE",{});var $4t=s(M1e);fdr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),mdr=r(wA,":"),wA.forEach(t),gdr=i(hl),N=n(hl,"UL",{});var D=s(N);o6=n(D,"LI",{});var pSe=s(o6);E1e=n(pSe,"STRONG",{});var k4t=s(E1e);hdr=r(k4t,"albert"),k4t.forEach(t),pdr=r(pSe," \u2014 "),iW=n(pSe,"A",{href:!0});var S4t=s(iW);udr=r(S4t,"TFAlbertModel"),S4t.forEach(t),_dr=r(pSe," (ALBERT model)"),pSe.forEach(t),bdr=i(D),r6=n(D,"LI",{});var uSe=s(r6);C1e=n(uSe,"STRONG",{});var R4t=s(C1e);vdr=r(R4t,"bart"),R4t.forEach(t),Fdr=r(uSe," \u2014 "),dW=n(uSe,"A",{href:!0});var P4t=s(dW);Tdr=r(P4t,"TFBartModel"),P4t.forEach(t),Mdr=r(uSe," (BART model)"),uSe.forEach(t),Edr=i(D),t6=n(D,"LI",{});var _Se=s(t6);w1e=n(_Se,"STRONG",{});var B4t=s(w1e);Cdr=r(B4t,"bert"),B4t.forEach(t),wdr=r(_Se," \u2014 "),cW=n(_Se,"A",{href:!0});var I4t=s(cW);Adr=r(I4t,"TFBertModel"),I4t.forEach(t),ydr=r(_Se," (BERT model)"),_Se.forEach(t),Ldr=i(D),a6=n(D,"LI",{});var bSe=s(a6);A1e=n(bSe,"STRONG",{});var q4t=s(A1e);xdr=r(q4t,"blenderbot"),q4t.forEach(t),$dr=r(bSe," \u2014 "),fW=n(bSe,"A",{href:!0});var N4t=s(fW);kdr=r(N4t,"TFBlenderbotModel"),N4t.forEach(t),Sdr=r(bSe," (Blenderbot model)"),bSe.forEach(t),Rdr=i(D),n6=n(D,"LI",{});var vSe=s(n6);y1e=n(vSe,"STRONG",{});var j4t=s(y1e);Pdr=r(j4t,"blenderbot-small"),j4t.forEach(t),Bdr=r(vSe," \u2014 "),mW=n(vSe,"A",{href:!0});var D4t=s(mW);Idr=r(D4t,"TFBlenderbotSmallModel"),D4t.forEach(t),qdr=r(vSe," (BlenderbotSmall model)"),vSe.forEach(t),Ndr=i(D),s6=n(D,"LI",{});var FSe=s(s6);L1e=n(FSe,"STRONG",{});var G4t=s(L1e);jdr=r(G4t,"camembert"),G4t.forEach(t),Ddr=r(FSe," \u2014 "),gW=n(FSe,"A",{href:!0});var O4t=s(gW);Gdr=r(O4t,"TFCamembertModel"),O4t.forEach(t),Odr=r(FSe," (CamemBERT model)"),FSe.forEach(t),Vdr=i(D),l6=n(D,"LI",{});var TSe=s(l6);x1e=n(TSe,"STRONG",{});var V4t=s(x1e);Xdr=r(V4t,"clip"),V4t.forEach(t),zdr=r(TSe," \u2014 "),hW=n(TSe,"A",{href:!0});var X4t=s(hW);Wdr=r(X4t,"TFCLIPModel"),X4t.forEach(t),Qdr=r(TSe," (CLIP model)"),TSe.forEach(t),Hdr=i(D),i6=n(D,"LI",{});var MSe=s(i6);$1e=n(MSe,"STRONG",{});var z4t=s($1e);Udr=r(z4t,"convbert"),z4t.forEach(t),Jdr=r(MSe," \u2014 "),pW=n(MSe,"A",{href:!0});var W4t=s(pW);Ydr=r(W4t,"TFConvBertModel"),W4t.forEach(t),Kdr=r(MSe," (ConvBERT model)"),MSe.forEach(t),Zdr=i(D),d6=n(D,"LI",{});var ESe=s(d6);k1e=n(ESe,"STRONG",{});var Q4t=s(k1e);ecr=r(Q4t,"convnext"),Q4t.forEach(t),ocr=r(ESe," \u2014 "),uW=n(ESe,"A",{href:!0});var H4t=s(uW);rcr=r(H4t,"TFConvNextModel"),H4t.forEach(t),tcr=r(ESe," (ConvNext model)"),ESe.forEach(t),acr=i(D),c6=n(D,"LI",{});var CSe=s(c6);S1e=n(CSe,"STRONG",{});var U4t=s(S1e);ncr=r(U4t,"ctrl"),U4t.forEach(t),scr=r(CSe," \u2014 "),_W=n(CSe,"A",{href:!0});var J4t=s(_W);lcr=r(J4t,"TFCTRLModel"),J4t.forEach(t),icr=r(CSe," (CTRL model)"),CSe.forEach(t),dcr=i(D),f6=n(D,"LI",{});var wSe=s(f6);R1e=n(wSe,"STRONG",{});var Y4t=s(R1e);ccr=r(Y4t,"data2vec-vision"),Y4t.forEach(t),fcr=r(wSe," \u2014 "),bW=n(wSe,"A",{href:!0});var K4t=s(bW);mcr=r(K4t,"TFData2VecVisionModel"),K4t.forEach(t),gcr=r(wSe," (Data2VecVision model)"),wSe.forEach(t),hcr=i(D),m6=n(D,"LI",{});var ASe=s(m6);P1e=n(ASe,"STRONG",{});var Z4t=s(P1e);pcr=r(Z4t,"deberta"),Z4t.forEach(t),ucr=r(ASe," \u2014 "),vW=n(ASe,"A",{href:!0});var evt=s(vW);_cr=r(evt,"TFDebertaModel"),evt.forEach(t),bcr=r(ASe," (DeBERTa model)"),ASe.forEach(t),vcr=i(D),g6=n(D,"LI",{});var ySe=s(g6);B1e=n(ySe,"STRONG",{});var ovt=s(B1e);Fcr=r(ovt,"deberta-v2"),ovt.forEach(t),Tcr=r(ySe," \u2014 "),FW=n(ySe,"A",{href:!0});var rvt=s(FW);Mcr=r(rvt,"TFDebertaV2Model"),rvt.forEach(t),Ecr=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),Ccr=i(D),h6=n(D,"LI",{});var LSe=s(h6);I1e=n(LSe,"STRONG",{});var tvt=s(I1e);wcr=r(tvt,"distilbert"),tvt.forEach(t),Acr=r(LSe," \u2014 "),TW=n(LSe,"A",{href:!0});var avt=s(TW);ycr=r(avt,"TFDistilBertModel"),avt.forEach(t),Lcr=r(LSe," (DistilBERT model)"),LSe.forEach(t),xcr=i(D),p6=n(D,"LI",{});var xSe=s(p6);q1e=n(xSe,"STRONG",{});var nvt=s(q1e);$cr=r(nvt,"dpr"),nvt.forEach(t),kcr=r(xSe," \u2014 "),MW=n(xSe,"A",{href:!0});var svt=s(MW);Scr=r(svt,"TFDPRQuestionEncoder"),svt.forEach(t),Rcr=r(xSe," (DPR model)"),xSe.forEach(t),Pcr=i(D),u6=n(D,"LI",{});var $Se=s(u6);N1e=n($Se,"STRONG",{});var lvt=s(N1e);Bcr=r(lvt,"electra"),lvt.forEach(t),Icr=r($Se," \u2014 "),EW=n($Se,"A",{href:!0});var ivt=s(EW);qcr=r(ivt,"TFElectraModel"),ivt.forEach(t),Ncr=r($Se," (ELECTRA model)"),$Se.forEach(t),jcr=i(D),_6=n(D,"LI",{});var kSe=s(_6);j1e=n(kSe,"STRONG",{});var dvt=s(j1e);Dcr=r(dvt,"flaubert"),dvt.forEach(t),Gcr=r(kSe," \u2014 "),CW=n(kSe,"A",{href:!0});var cvt=s(CW);Ocr=r(cvt,"TFFlaubertModel"),cvt.forEach(t),Vcr=r(kSe," (FlauBERT model)"),kSe.forEach(t),Xcr=i(D),Is=n(D,"LI",{});var X$=s(Is);D1e=n(X$,"STRONG",{});var fvt=s(D1e);zcr=r(fvt,"funnel"),fvt.forEach(t),Wcr=r(X$," \u2014 "),wW=n(X$,"A",{href:!0});var mvt=s(wW);Qcr=r(mvt,"TFFunnelModel"),mvt.forEach(t),Hcr=r(X$," or "),AW=n(X$,"A",{href:!0});var gvt=s(AW);Ucr=r(gvt,"TFFunnelBaseModel"),gvt.forEach(t),Jcr=r(X$," (Funnel Transformer model)"),X$.forEach(t),Ycr=i(D),b6=n(D,"LI",{});var SSe=s(b6);G1e=n(SSe,"STRONG",{});var hvt=s(G1e);Kcr=r(hvt,"gpt2"),hvt.forEach(t),Zcr=r(SSe," \u2014 "),yW=n(SSe,"A",{href:!0});var pvt=s(yW);efr=r(pvt,"TFGPT2Model"),pvt.forEach(t),ofr=r(SSe," (OpenAI GPT-2 model)"),SSe.forEach(t),rfr=i(D),v6=n(D,"LI",{});var RSe=s(v6);O1e=n(RSe,"STRONG",{});var uvt=s(O1e);tfr=r(uvt,"gptj"),uvt.forEach(t),afr=r(RSe," \u2014 "),LW=n(RSe,"A",{href:!0});var _vt=s(LW);nfr=r(_vt,"TFGPTJModel"),_vt.forEach(t),sfr=r(RSe," (GPT-J model)"),RSe.forEach(t),lfr=i(D),F6=n(D,"LI",{});var PSe=s(F6);V1e=n(PSe,"STRONG",{});var bvt=s(V1e);ifr=r(bvt,"hubert"),bvt.forEach(t),dfr=r(PSe," \u2014 "),xW=n(PSe,"A",{href:!0});var vvt=s(xW);cfr=r(vvt,"TFHubertModel"),vvt.forEach(t),ffr=r(PSe," (Hubert model)"),PSe.forEach(t),mfr=i(D),T6=n(D,"LI",{});var BSe=s(T6);X1e=n(BSe,"STRONG",{});var Fvt=s(X1e);gfr=r(Fvt,"layoutlm"),Fvt.forEach(t),hfr=r(BSe," \u2014 "),$W=n(BSe,"A",{href:!0});var Tvt=s($W);pfr=r(Tvt,"TFLayoutLMModel"),Tvt.forEach(t),ufr=r(BSe," (LayoutLM model)"),BSe.forEach(t),_fr=i(D),M6=n(D,"LI",{});var ISe=s(M6);z1e=n(ISe,"STRONG",{});var Mvt=s(z1e);bfr=r(Mvt,"led"),Mvt.forEach(t),vfr=r(ISe," \u2014 "),kW=n(ISe,"A",{href:!0});var Evt=s(kW);Ffr=r(Evt,"TFLEDModel"),Evt.forEach(t),Tfr=r(ISe," (LED model)"),ISe.forEach(t),Mfr=i(D),E6=n(D,"LI",{});var qSe=s(E6);W1e=n(qSe,"STRONG",{});var Cvt=s(W1e);Efr=r(Cvt,"longformer"),Cvt.forEach(t),Cfr=r(qSe," \u2014 "),SW=n(qSe,"A",{href:!0});var wvt=s(SW);wfr=r(wvt,"TFLongformerModel"),wvt.forEach(t),Afr=r(qSe," (Longformer model)"),qSe.forEach(t),yfr=i(D),C6=n(D,"LI",{});var NSe=s(C6);Q1e=n(NSe,"STRONG",{});var Avt=s(Q1e);Lfr=r(Avt,"lxmert"),Avt.forEach(t),xfr=r(NSe," \u2014 "),RW=n(NSe,"A",{href:!0});var yvt=s(RW);$fr=r(yvt,"TFLxmertModel"),yvt.forEach(t),kfr=r(NSe," (LXMERT model)"),NSe.forEach(t),Sfr=i(D),w6=n(D,"LI",{});var jSe=s(w6);H1e=n(jSe,"STRONG",{});var Lvt=s(H1e);Rfr=r(Lvt,"marian"),Lvt.forEach(t),Pfr=r(jSe," \u2014 "),PW=n(jSe,"A",{href:!0});var xvt=s(PW);Bfr=r(xvt,"TFMarianModel"),xvt.forEach(t),Ifr=r(jSe," (Marian model)"),jSe.forEach(t),qfr=i(D),A6=n(D,"LI",{});var DSe=s(A6);U1e=n(DSe,"STRONG",{});var $vt=s(U1e);Nfr=r($vt,"mbart"),$vt.forEach(t),jfr=r(DSe," \u2014 "),BW=n(DSe,"A",{href:!0});var kvt=s(BW);Dfr=r(kvt,"TFMBartModel"),kvt.forEach(t),Gfr=r(DSe," (mBART model)"),DSe.forEach(t),Ofr=i(D),y6=n(D,"LI",{});var GSe=s(y6);J1e=n(GSe,"STRONG",{});var Svt=s(J1e);Vfr=r(Svt,"mobilebert"),Svt.forEach(t),Xfr=r(GSe," \u2014 "),IW=n(GSe,"A",{href:!0});var Rvt=s(IW);zfr=r(Rvt,"TFMobileBertModel"),Rvt.forEach(t),Wfr=r(GSe," (MobileBERT model)"),GSe.forEach(t),Qfr=i(D),L6=n(D,"LI",{});var OSe=s(L6);Y1e=n(OSe,"STRONG",{});var Pvt=s(Y1e);Hfr=r(Pvt,"mpnet"),Pvt.forEach(t),Ufr=r(OSe," \u2014 "),qW=n(OSe,"A",{href:!0});var Bvt=s(qW);Jfr=r(Bvt,"TFMPNetModel"),Bvt.forEach(t),Yfr=r(OSe," (MPNet model)"),OSe.forEach(t),Kfr=i(D),x6=n(D,"LI",{});var VSe=s(x6);K1e=n(VSe,"STRONG",{});var Ivt=s(K1e);Zfr=r(Ivt,"mt5"),Ivt.forEach(t),emr=r(VSe," \u2014 "),NW=n(VSe,"A",{href:!0});var qvt=s(NW);omr=r(qvt,"TFMT5Model"),qvt.forEach(t),rmr=r(VSe," (mT5 model)"),VSe.forEach(t),tmr=i(D),$6=n(D,"LI",{});var XSe=s($6);Z1e=n(XSe,"STRONG",{});var Nvt=s(Z1e);amr=r(Nvt,"openai-gpt"),Nvt.forEach(t),nmr=r(XSe," \u2014 "),jW=n(XSe,"A",{href:!0});var jvt=s(jW);smr=r(jvt,"TFOpenAIGPTModel"),jvt.forEach(t),lmr=r(XSe," (OpenAI GPT model)"),XSe.forEach(t),imr=i(D),k6=n(D,"LI",{});var zSe=s(k6);ebe=n(zSe,"STRONG",{});var Dvt=s(ebe);dmr=r(Dvt,"pegasus"),Dvt.forEach(t),cmr=r(zSe," \u2014 "),DW=n(zSe,"A",{href:!0});var Gvt=s(DW);fmr=r(Gvt,"TFPegasusModel"),Gvt.forEach(t),mmr=r(zSe," (Pegasus model)"),zSe.forEach(t),gmr=i(D),S6=n(D,"LI",{});var WSe=s(S6);obe=n(WSe,"STRONG",{});var Ovt=s(obe);hmr=r(Ovt,"rembert"),Ovt.forEach(t),pmr=r(WSe," \u2014 "),GW=n(WSe,"A",{href:!0});var Vvt=s(GW);umr=r(Vvt,"TFRemBertModel"),Vvt.forEach(t),_mr=r(WSe," (RemBERT model)"),WSe.forEach(t),bmr=i(D),R6=n(D,"LI",{});var QSe=s(R6);rbe=n(QSe,"STRONG",{});var Xvt=s(rbe);vmr=r(Xvt,"roberta"),Xvt.forEach(t),Fmr=r(QSe," \u2014 "),OW=n(QSe,"A",{href:!0});var zvt=s(OW);Tmr=r(zvt,"TFRobertaModel"),zvt.forEach(t),Mmr=r(QSe," (RoBERTa model)"),QSe.forEach(t),Emr=i(D),P6=n(D,"LI",{});var HSe=s(P6);tbe=n(HSe,"STRONG",{});var Wvt=s(tbe);Cmr=r(Wvt,"roformer"),Wvt.forEach(t),wmr=r(HSe," \u2014 "),VW=n(HSe,"A",{href:!0});var Qvt=s(VW);Amr=r(Qvt,"TFRoFormerModel"),Qvt.forEach(t),ymr=r(HSe," (RoFormer model)"),HSe.forEach(t),Lmr=i(D),B6=n(D,"LI",{});var USe=s(B6);abe=n(USe,"STRONG",{});var Hvt=s(abe);xmr=r(Hvt,"speech_to_text"),Hvt.forEach(t),$mr=r(USe," \u2014 "),XW=n(USe,"A",{href:!0});var Uvt=s(XW);kmr=r(Uvt,"TFSpeech2TextModel"),Uvt.forEach(t),Smr=r(USe," (Speech2Text model)"),USe.forEach(t),Rmr=i(D),I6=n(D,"LI",{});var JSe=s(I6);nbe=n(JSe,"STRONG",{});var Jvt=s(nbe);Pmr=r(Jvt,"swin"),Jvt.forEach(t),Bmr=r(JSe," \u2014 "),zW=n(JSe,"A",{href:!0});var Yvt=s(zW);Imr=r(Yvt,"TFSwinModel"),Yvt.forEach(t),qmr=r(JSe," (Swin model)"),JSe.forEach(t),Nmr=i(D),q6=n(D,"LI",{});var YSe=s(q6);sbe=n(YSe,"STRONG",{});var Kvt=s(sbe);jmr=r(Kvt,"t5"),Kvt.forEach(t),Dmr=r(YSe," \u2014 "),WW=n(YSe,"A",{href:!0});var Zvt=s(WW);Gmr=r(Zvt,"TFT5Model"),Zvt.forEach(t),Omr=r(YSe," (T5 model)"),YSe.forEach(t),Vmr=i(D),N6=n(D,"LI",{});var KSe=s(N6);lbe=n(KSe,"STRONG",{});var eFt=s(lbe);Xmr=r(eFt,"tapas"),eFt.forEach(t),zmr=r(KSe," \u2014 "),QW=n(KSe,"A",{href:!0});var oFt=s(QW);Wmr=r(oFt,"TFTapasModel"),oFt.forEach(t),Qmr=r(KSe," (TAPAS model)"),KSe.forEach(t),Hmr=i(D),j6=n(D,"LI",{});var ZSe=s(j6);ibe=n(ZSe,"STRONG",{});var rFt=s(ibe);Umr=r(rFt,"transfo-xl"),rFt.forEach(t),Jmr=r(ZSe," \u2014 "),HW=n(ZSe,"A",{href:!0});var tFt=s(HW);Ymr=r(tFt,"TFTransfoXLModel"),tFt.forEach(t),Kmr=r(ZSe," (Transformer-XL model)"),ZSe.forEach(t),Zmr=i(D),D6=n(D,"LI",{});var eRe=s(D6);dbe=n(eRe,"STRONG",{});var aFt=s(dbe);egr=r(aFt,"vit"),aFt.forEach(t),ogr=r(eRe," \u2014 "),UW=n(eRe,"A",{href:!0});var nFt=s(UW);rgr=r(nFt,"TFViTModel"),nFt.forEach(t),tgr=r(eRe," (ViT model)"),eRe.forEach(t),agr=i(D),G6=n(D,"LI",{});var oRe=s(G6);cbe=n(oRe,"STRONG",{});var sFt=s(cbe);ngr=r(sFt,"vit_mae"),sFt.forEach(t),sgr=r(oRe," \u2014 "),JW=n(oRe,"A",{href:!0});var lFt=s(JW);lgr=r(lFt,"TFViTMAEModel"),lFt.forEach(t),igr=r(oRe," (ViTMAE model)"),oRe.forEach(t),dgr=i(D),O6=n(D,"LI",{});var rRe=s(O6);fbe=n(rRe,"STRONG",{});var iFt=s(fbe);cgr=r(iFt,"wav2vec2"),iFt.forEach(t),fgr=r(rRe," \u2014 "),YW=n(rRe,"A",{href:!0});var dFt=s(YW);mgr=r(dFt,"TFWav2Vec2Model"),dFt.forEach(t),ggr=r(rRe," (Wav2Vec2 model)"),rRe.forEach(t),hgr=i(D),V6=n(D,"LI",{});var tRe=s(V6);mbe=n(tRe,"STRONG",{});var cFt=s(mbe);pgr=r(cFt,"xlm"),cFt.forEach(t),ugr=r(tRe," \u2014 "),KW=n(tRe,"A",{href:!0});var fFt=s(KW);_gr=r(fFt,"TFXLMModel"),fFt.forEach(t),bgr=r(tRe," (XLM model)"),tRe.forEach(t),vgr=i(D),X6=n(D,"LI",{});var aRe=s(X6);gbe=n(aRe,"STRONG",{});var mFt=s(gbe);Fgr=r(mFt,"xlm-roberta"),mFt.forEach(t),Tgr=r(aRe," \u2014 "),ZW=n(aRe,"A",{href:!0});var gFt=s(ZW);Mgr=r(gFt,"TFXLMRobertaModel"),gFt.forEach(t),Egr=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),Cgr=i(D),z6=n(D,"LI",{});var nRe=s(z6);hbe=n(nRe,"STRONG",{});var hFt=s(hbe);wgr=r(hFt,"xlnet"),hFt.forEach(t),Agr=r(nRe," \u2014 "),eQ=n(nRe,"A",{href:!0});var pFt=s(eQ);ygr=r(pFt,"TFXLNetModel"),pFt.forEach(t),Lgr=r(nRe," (XLNet model)"),nRe.forEach(t),D.forEach(t),xgr=i(hl),T(W6.$$.fragment,hl),hl.forEach(t),gl.forEach(t),nje=i(f),Xd=n(f,"H2",{class:!0});var fGe=s(Xd);Q6=n(fGe,"A",{id:!0,class:!0,href:!0});var uFt=s(Q6);pbe=n(uFt,"SPAN",{});var _Ft=s(pbe);T(g7.$$.fragment,_Ft),_Ft.forEach(t),uFt.forEach(t),$gr=i(fGe),ube=n(fGe,"SPAN",{});var bFt=s(ube);kgr=r(bFt,"TFAutoModelForPreTraining"),bFt.forEach(t),fGe.forEach(t),sje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(h7.$$.fragment,pl),Sgr=i(pl),zd=n(pl,"P",{});var cee=s(zd);Rgr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oQ=n(cee,"A",{href:!0});var vFt=s(oQ);Pgr=r(vFt,"from_pretrained()"),vFt.forEach(t),Bgr=r(cee," class method or the "),rQ=n(cee,"A",{href:!0});var FFt=s(rQ);Igr=r(FFt,"from_config()"),FFt.forEach(t),qgr=r(cee,` class
method.`),cee.forEach(t),Ngr=i(pl),p7=n(pl,"P",{});var mGe=s(p7);jgr=r(mGe,"This class cannot be instantiated directly using "),_be=n(mGe,"CODE",{});var TFt=s(_be);Dgr=r(TFt,"__init__()"),TFt.forEach(t),Ggr=r(mGe," (throws an error)."),mGe.forEach(t),Ogr=i(pl),Lt=n(pl,"DIV",{class:!0});var AA=s(Lt);T(u7.$$.fragment,AA),Vgr=i(AA),bbe=n(AA,"P",{});var MFt=s(bbe);Xgr=r(MFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),MFt.forEach(t),zgr=i(AA),Wd=n(AA,"P",{});var fee=s(Wd);Wgr=r(fee,`Note:
Loading a model from its configuration file does `),vbe=n(fee,"STRONG",{});var EFt=s(vbe);Qgr=r(EFt,"not"),EFt.forEach(t),Hgr=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(fee,"A",{href:!0});var CFt=s(tQ);Ugr=r(CFt,"from_pretrained()"),CFt.forEach(t),Jgr=r(fee," to load the model weights."),fee.forEach(t),Ygr=i(AA),T(H6.$$.fragment,AA),AA.forEach(t),Kgr=i(pl),Ar=n(pl,"DIV",{class:!0});var ul=s(Ar);T(_7.$$.fragment,ul),Zgr=i(ul),Fbe=n(ul,"P",{});var wFt=s(Fbe);ehr=r(wFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wFt.forEach(t),ohr=i(ul),Za=n(ul,"P",{});var yA=s(Za);rhr=r(yA,"The model class to instantiate is selected based on the "),Tbe=n(yA,"CODE",{});var AFt=s(Tbe);thr=r(AFt,"model_type"),AFt.forEach(t),ahr=r(yA,` property of the config object (either
passed as an argument or loaded from `),Mbe=n(yA,"CODE",{});var yFt=s(Mbe);nhr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),shr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ebe=n(yA,"CODE",{});var LFt=s(Ebe);lhr=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),ihr=r(yA,":"),yA.forEach(t),dhr=i(ul),se=n(ul,"UL",{});var le=s(se);U6=n(le,"LI",{});var sRe=s(U6);Cbe=n(sRe,"STRONG",{});var xFt=s(Cbe);chr=r(xFt,"albert"),xFt.forEach(t),fhr=r(sRe," \u2014 "),aQ=n(sRe,"A",{href:!0});var $Ft=s(aQ);mhr=r($Ft,"TFAlbertForPreTraining"),$Ft.forEach(t),ghr=r(sRe," (ALBERT model)"),sRe.forEach(t),hhr=i(le),J6=n(le,"LI",{});var lRe=s(J6);wbe=n(lRe,"STRONG",{});var kFt=s(wbe);phr=r(kFt,"bart"),kFt.forEach(t),uhr=r(lRe," \u2014 "),nQ=n(lRe,"A",{href:!0});var SFt=s(nQ);_hr=r(SFt,"TFBartForConditionalGeneration"),SFt.forEach(t),bhr=r(lRe," (BART model)"),lRe.forEach(t),vhr=i(le),Y6=n(le,"LI",{});var iRe=s(Y6);Abe=n(iRe,"STRONG",{});var RFt=s(Abe);Fhr=r(RFt,"bert"),RFt.forEach(t),Thr=r(iRe," \u2014 "),sQ=n(iRe,"A",{href:!0});var PFt=s(sQ);Mhr=r(PFt,"TFBertForPreTraining"),PFt.forEach(t),Ehr=r(iRe," (BERT model)"),iRe.forEach(t),Chr=i(le),K6=n(le,"LI",{});var dRe=s(K6);ybe=n(dRe,"STRONG",{});var BFt=s(ybe);whr=r(BFt,"camembert"),BFt.forEach(t),Ahr=r(dRe," \u2014 "),lQ=n(dRe,"A",{href:!0});var IFt=s(lQ);yhr=r(IFt,"TFCamembertForMaskedLM"),IFt.forEach(t),Lhr=r(dRe," (CamemBERT model)"),dRe.forEach(t),xhr=i(le),Z6=n(le,"LI",{});var cRe=s(Z6);Lbe=n(cRe,"STRONG",{});var qFt=s(Lbe);$hr=r(qFt,"ctrl"),qFt.forEach(t),khr=r(cRe," \u2014 "),iQ=n(cRe,"A",{href:!0});var NFt=s(iQ);Shr=r(NFt,"TFCTRLLMHeadModel"),NFt.forEach(t),Rhr=r(cRe," (CTRL model)"),cRe.forEach(t),Phr=i(le),eT=n(le,"LI",{});var fRe=s(eT);xbe=n(fRe,"STRONG",{});var jFt=s(xbe);Bhr=r(jFt,"distilbert"),jFt.forEach(t),Ihr=r(fRe," \u2014 "),dQ=n(fRe,"A",{href:!0});var DFt=s(dQ);qhr=r(DFt,"TFDistilBertForMaskedLM"),DFt.forEach(t),Nhr=r(fRe," (DistilBERT model)"),fRe.forEach(t),jhr=i(le),oT=n(le,"LI",{});var mRe=s(oT);$be=n(mRe,"STRONG",{});var GFt=s($be);Dhr=r(GFt,"electra"),GFt.forEach(t),Ghr=r(mRe," \u2014 "),cQ=n(mRe,"A",{href:!0});var OFt=s(cQ);Ohr=r(OFt,"TFElectraForPreTraining"),OFt.forEach(t),Vhr=r(mRe," (ELECTRA model)"),mRe.forEach(t),Xhr=i(le),rT=n(le,"LI",{});var gRe=s(rT);kbe=n(gRe,"STRONG",{});var VFt=s(kbe);zhr=r(VFt,"flaubert"),VFt.forEach(t),Whr=r(gRe," \u2014 "),fQ=n(gRe,"A",{href:!0});var XFt=s(fQ);Qhr=r(XFt,"TFFlaubertWithLMHeadModel"),XFt.forEach(t),Hhr=r(gRe," (FlauBERT model)"),gRe.forEach(t),Uhr=i(le),tT=n(le,"LI",{});var hRe=s(tT);Sbe=n(hRe,"STRONG",{});var zFt=s(Sbe);Jhr=r(zFt,"funnel"),zFt.forEach(t),Yhr=r(hRe," \u2014 "),mQ=n(hRe,"A",{href:!0});var WFt=s(mQ);Khr=r(WFt,"TFFunnelForPreTraining"),WFt.forEach(t),Zhr=r(hRe," (Funnel Transformer model)"),hRe.forEach(t),epr=i(le),aT=n(le,"LI",{});var pRe=s(aT);Rbe=n(pRe,"STRONG",{});var QFt=s(Rbe);opr=r(QFt,"gpt2"),QFt.forEach(t),rpr=r(pRe," \u2014 "),gQ=n(pRe,"A",{href:!0});var HFt=s(gQ);tpr=r(HFt,"TFGPT2LMHeadModel"),HFt.forEach(t),apr=r(pRe," (OpenAI GPT-2 model)"),pRe.forEach(t),npr=i(le),nT=n(le,"LI",{});var uRe=s(nT);Pbe=n(uRe,"STRONG",{});var UFt=s(Pbe);spr=r(UFt,"layoutlm"),UFt.forEach(t),lpr=r(uRe," \u2014 "),hQ=n(uRe,"A",{href:!0});var JFt=s(hQ);ipr=r(JFt,"TFLayoutLMForMaskedLM"),JFt.forEach(t),dpr=r(uRe," (LayoutLM model)"),uRe.forEach(t),cpr=i(le),sT=n(le,"LI",{});var _Re=s(sT);Bbe=n(_Re,"STRONG",{});var YFt=s(Bbe);fpr=r(YFt,"lxmert"),YFt.forEach(t),mpr=r(_Re," \u2014 "),pQ=n(_Re,"A",{href:!0});var KFt=s(pQ);gpr=r(KFt,"TFLxmertForPreTraining"),KFt.forEach(t),hpr=r(_Re," (LXMERT model)"),_Re.forEach(t),ppr=i(le),lT=n(le,"LI",{});var bRe=s(lT);Ibe=n(bRe,"STRONG",{});var ZFt=s(Ibe);upr=r(ZFt,"mobilebert"),ZFt.forEach(t),_pr=r(bRe," \u2014 "),uQ=n(bRe,"A",{href:!0});var e6t=s(uQ);bpr=r(e6t,"TFMobileBertForPreTraining"),e6t.forEach(t),vpr=r(bRe," (MobileBERT model)"),bRe.forEach(t),Fpr=i(le),iT=n(le,"LI",{});var vRe=s(iT);qbe=n(vRe,"STRONG",{});var o6t=s(qbe);Tpr=r(o6t,"mpnet"),o6t.forEach(t),Mpr=r(vRe," \u2014 "),_Q=n(vRe,"A",{href:!0});var r6t=s(_Q);Epr=r(r6t,"TFMPNetForMaskedLM"),r6t.forEach(t),Cpr=r(vRe," (MPNet model)"),vRe.forEach(t),wpr=i(le),dT=n(le,"LI",{});var FRe=s(dT);Nbe=n(FRe,"STRONG",{});var t6t=s(Nbe);Apr=r(t6t,"openai-gpt"),t6t.forEach(t),ypr=r(FRe," \u2014 "),bQ=n(FRe,"A",{href:!0});var a6t=s(bQ);Lpr=r(a6t,"TFOpenAIGPTLMHeadModel"),a6t.forEach(t),xpr=r(FRe," (OpenAI GPT model)"),FRe.forEach(t),$pr=i(le),cT=n(le,"LI",{});var TRe=s(cT);jbe=n(TRe,"STRONG",{});var n6t=s(jbe);kpr=r(n6t,"roberta"),n6t.forEach(t),Spr=r(TRe," \u2014 "),vQ=n(TRe,"A",{href:!0});var s6t=s(vQ);Rpr=r(s6t,"TFRobertaForMaskedLM"),s6t.forEach(t),Ppr=r(TRe," (RoBERTa model)"),TRe.forEach(t),Bpr=i(le),fT=n(le,"LI",{});var MRe=s(fT);Dbe=n(MRe,"STRONG",{});var l6t=s(Dbe);Ipr=r(l6t,"t5"),l6t.forEach(t),qpr=r(MRe," \u2014 "),FQ=n(MRe,"A",{href:!0});var i6t=s(FQ);Npr=r(i6t,"TFT5ForConditionalGeneration"),i6t.forEach(t),jpr=r(MRe," (T5 model)"),MRe.forEach(t),Dpr=i(le),mT=n(le,"LI",{});var ERe=s(mT);Gbe=n(ERe,"STRONG",{});var d6t=s(Gbe);Gpr=r(d6t,"tapas"),d6t.forEach(t),Opr=r(ERe," \u2014 "),TQ=n(ERe,"A",{href:!0});var c6t=s(TQ);Vpr=r(c6t,"TFTapasForMaskedLM"),c6t.forEach(t),Xpr=r(ERe," (TAPAS model)"),ERe.forEach(t),zpr=i(le),gT=n(le,"LI",{});var CRe=s(gT);Obe=n(CRe,"STRONG",{});var f6t=s(Obe);Wpr=r(f6t,"transfo-xl"),f6t.forEach(t),Qpr=r(CRe," \u2014 "),MQ=n(CRe,"A",{href:!0});var m6t=s(MQ);Hpr=r(m6t,"TFTransfoXLLMHeadModel"),m6t.forEach(t),Upr=r(CRe," (Transformer-XL model)"),CRe.forEach(t),Jpr=i(le),hT=n(le,"LI",{});var wRe=s(hT);Vbe=n(wRe,"STRONG",{});var g6t=s(Vbe);Ypr=r(g6t,"vit_mae"),g6t.forEach(t),Kpr=r(wRe," \u2014 "),EQ=n(wRe,"A",{href:!0});var h6t=s(EQ);Zpr=r(h6t,"TFViTMAEForPreTraining"),h6t.forEach(t),eur=r(wRe," (ViTMAE model)"),wRe.forEach(t),our=i(le),pT=n(le,"LI",{});var ARe=s(pT);Xbe=n(ARe,"STRONG",{});var p6t=s(Xbe);rur=r(p6t,"xlm"),p6t.forEach(t),tur=r(ARe," \u2014 "),CQ=n(ARe,"A",{href:!0});var u6t=s(CQ);aur=r(u6t,"TFXLMWithLMHeadModel"),u6t.forEach(t),nur=r(ARe," (XLM model)"),ARe.forEach(t),sur=i(le),uT=n(le,"LI",{});var yRe=s(uT);zbe=n(yRe,"STRONG",{});var _6t=s(zbe);lur=r(_6t,"xlm-roberta"),_6t.forEach(t),iur=r(yRe," \u2014 "),wQ=n(yRe,"A",{href:!0});var b6t=s(wQ);dur=r(b6t,"TFXLMRobertaForMaskedLM"),b6t.forEach(t),cur=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),fur=i(le),_T=n(le,"LI",{});var LRe=s(_T);Wbe=n(LRe,"STRONG",{});var v6t=s(Wbe);mur=r(v6t,"xlnet"),v6t.forEach(t),gur=r(LRe," \u2014 "),AQ=n(LRe,"A",{href:!0});var F6t=s(AQ);hur=r(F6t,"TFXLNetLMHeadModel"),F6t.forEach(t),pur=r(LRe," (XLNet model)"),LRe.forEach(t),le.forEach(t),uur=i(ul),T(bT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),lje=i(f),Qd=n(f,"H2",{class:!0});var gGe=s(Qd);vT=n(gGe,"A",{id:!0,class:!0,href:!0});var T6t=s(vT);Qbe=n(T6t,"SPAN",{});var M6t=s(Qbe);T(b7.$$.fragment,M6t),M6t.forEach(t),T6t.forEach(t),_ur=i(gGe),Hbe=n(gGe,"SPAN",{});var E6t=s(Hbe);bur=r(E6t,"TFAutoModelForCausalLM"),E6t.forEach(t),gGe.forEach(t),ije=i(f),Zo=n(f,"DIV",{class:!0});var _l=s(Zo);T(v7.$$.fragment,_l),vur=i(_l),Hd=n(_l,"P",{});var mee=s(Hd);Fur=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),yQ=n(mee,"A",{href:!0});var C6t=s(yQ);Tur=r(C6t,"from_pretrained()"),C6t.forEach(t),Mur=r(mee," class method or the "),LQ=n(mee,"A",{href:!0});var w6t=s(LQ);Eur=r(w6t,"from_config()"),w6t.forEach(t),Cur=r(mee,` class
method.`),mee.forEach(t),wur=i(_l),F7=n(_l,"P",{});var hGe=s(F7);Aur=r(hGe,"This class cannot be instantiated directly using "),Ube=n(hGe,"CODE",{});var A6t=s(Ube);yur=r(A6t,"__init__()"),A6t.forEach(t),Lur=r(hGe," (throws an error)."),hGe.forEach(t),xur=i(_l),xt=n(_l,"DIV",{class:!0});var LA=s(xt);T(T7.$$.fragment,LA),$ur=i(LA),Jbe=n(LA,"P",{});var y6t=s(Jbe);kur=r(y6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y6t.forEach(t),Sur=i(LA),Ud=n(LA,"P",{});var gee=s(Ud);Rur=r(gee,`Note:
Loading a model from its configuration file does `),Ybe=n(gee,"STRONG",{});var L6t=s(Ybe);Pur=r(L6t,"not"),L6t.forEach(t),Bur=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xQ=n(gee,"A",{href:!0});var x6t=s(xQ);Iur=r(x6t,"from_pretrained()"),x6t.forEach(t),qur=r(gee," to load the model weights."),gee.forEach(t),Nur=i(LA),T(FT.$$.fragment,LA),LA.forEach(t),jur=i(_l),yr=n(_l,"DIV",{class:!0});var bl=s(yr);T(M7.$$.fragment,bl),Dur=i(bl),Kbe=n(bl,"P",{});var $6t=s(Kbe);Gur=r($6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$6t.forEach(t),Our=i(bl),en=n(bl,"P",{});var xA=s(en);Vur=r(xA,"The model class to instantiate is selected based on the "),Zbe=n(xA,"CODE",{});var k6t=s(Zbe);Xur=r(k6t,"model_type"),k6t.forEach(t),zur=r(xA,` property of the config object (either
passed as an argument or loaded from `),e2e=n(xA,"CODE",{});var S6t=s(e2e);Wur=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),Qur=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(xA,"CODE",{});var R6t=s(o2e);Hur=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),Uur=r(xA,":"),xA.forEach(t),Jur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);TT=n(Ce,"LI",{});var xRe=s(TT);r2e=n(xRe,"STRONG",{});var P6t=s(r2e);Yur=r(P6t,"bert"),P6t.forEach(t),Kur=r(xRe," \u2014 "),$Q=n(xRe,"A",{href:!0});var B6t=s($Q);Zur=r(B6t,"TFBertLMHeadModel"),B6t.forEach(t),e_r=r(xRe," (BERT model)"),xRe.forEach(t),o_r=i(Ce),MT=n(Ce,"LI",{});var $Re=s(MT);t2e=n($Re,"STRONG",{});var I6t=s(t2e);r_r=r(I6t,"camembert"),I6t.forEach(t),t_r=r($Re," \u2014 "),kQ=n($Re,"A",{href:!0});var q6t=s(kQ);a_r=r(q6t,"TFCamembertForCausalLM"),q6t.forEach(t),n_r=r($Re," (CamemBERT model)"),$Re.forEach(t),s_r=i(Ce),ET=n(Ce,"LI",{});var kRe=s(ET);a2e=n(kRe,"STRONG",{});var N6t=s(a2e);l_r=r(N6t,"ctrl"),N6t.forEach(t),i_r=r(kRe," \u2014 "),SQ=n(kRe,"A",{href:!0});var j6t=s(SQ);d_r=r(j6t,"TFCTRLLMHeadModel"),j6t.forEach(t),c_r=r(kRe," (CTRL model)"),kRe.forEach(t),f_r=i(Ce),CT=n(Ce,"LI",{});var SRe=s(CT);n2e=n(SRe,"STRONG",{});var D6t=s(n2e);m_r=r(D6t,"gpt2"),D6t.forEach(t),g_r=r(SRe," \u2014 "),RQ=n(SRe,"A",{href:!0});var G6t=s(RQ);h_r=r(G6t,"TFGPT2LMHeadModel"),G6t.forEach(t),p_r=r(SRe," (OpenAI GPT-2 model)"),SRe.forEach(t),u_r=i(Ce),wT=n(Ce,"LI",{});var RRe=s(wT);s2e=n(RRe,"STRONG",{});var O6t=s(s2e);__r=r(O6t,"gptj"),O6t.forEach(t),b_r=r(RRe," \u2014 "),PQ=n(RRe,"A",{href:!0});var V6t=s(PQ);v_r=r(V6t,"TFGPTJForCausalLM"),V6t.forEach(t),F_r=r(RRe," (GPT-J model)"),RRe.forEach(t),T_r=i(Ce),AT=n(Ce,"LI",{});var PRe=s(AT);l2e=n(PRe,"STRONG",{});var X6t=s(l2e);M_r=r(X6t,"openai-gpt"),X6t.forEach(t),E_r=r(PRe," \u2014 "),BQ=n(PRe,"A",{href:!0});var z6t=s(BQ);C_r=r(z6t,"TFOpenAIGPTLMHeadModel"),z6t.forEach(t),w_r=r(PRe," (OpenAI GPT model)"),PRe.forEach(t),A_r=i(Ce),yT=n(Ce,"LI",{});var BRe=s(yT);i2e=n(BRe,"STRONG",{});var W6t=s(i2e);y_r=r(W6t,"rembert"),W6t.forEach(t),L_r=r(BRe," \u2014 "),IQ=n(BRe,"A",{href:!0});var Q6t=s(IQ);x_r=r(Q6t,"TFRemBertForCausalLM"),Q6t.forEach(t),$_r=r(BRe," (RemBERT model)"),BRe.forEach(t),k_r=i(Ce),LT=n(Ce,"LI",{});var IRe=s(LT);d2e=n(IRe,"STRONG",{});var H6t=s(d2e);S_r=r(H6t,"roberta"),H6t.forEach(t),R_r=r(IRe," \u2014 "),qQ=n(IRe,"A",{href:!0});var U6t=s(qQ);P_r=r(U6t,"TFRobertaForCausalLM"),U6t.forEach(t),B_r=r(IRe," (RoBERTa model)"),IRe.forEach(t),I_r=i(Ce),xT=n(Ce,"LI",{});var qRe=s(xT);c2e=n(qRe,"STRONG",{});var J6t=s(c2e);q_r=r(J6t,"roformer"),J6t.forEach(t),N_r=r(qRe," \u2014 "),NQ=n(qRe,"A",{href:!0});var Y6t=s(NQ);j_r=r(Y6t,"TFRoFormerForCausalLM"),Y6t.forEach(t),D_r=r(qRe," (RoFormer model)"),qRe.forEach(t),G_r=i(Ce),$T=n(Ce,"LI",{});var NRe=s($T);f2e=n(NRe,"STRONG",{});var K6t=s(f2e);O_r=r(K6t,"transfo-xl"),K6t.forEach(t),V_r=r(NRe," \u2014 "),jQ=n(NRe,"A",{href:!0});var Z6t=s(jQ);X_r=r(Z6t,"TFTransfoXLLMHeadModel"),Z6t.forEach(t),z_r=r(NRe," (Transformer-XL model)"),NRe.forEach(t),W_r=i(Ce),kT=n(Ce,"LI",{});var jRe=s(kT);m2e=n(jRe,"STRONG",{});var eTt=s(m2e);Q_r=r(eTt,"xlm"),eTt.forEach(t),H_r=r(jRe," \u2014 "),DQ=n(jRe,"A",{href:!0});var oTt=s(DQ);U_r=r(oTt,"TFXLMWithLMHeadModel"),oTt.forEach(t),J_r=r(jRe," (XLM model)"),jRe.forEach(t),Y_r=i(Ce),ST=n(Ce,"LI",{});var DRe=s(ST);g2e=n(DRe,"STRONG",{});var rTt=s(g2e);K_r=r(rTt,"xlnet"),rTt.forEach(t),Z_r=r(DRe," \u2014 "),GQ=n(DRe,"A",{href:!0});var tTt=s(GQ);e0r=r(tTt,"TFXLNetLMHeadModel"),tTt.forEach(t),o0r=r(DRe," (XLNet model)"),DRe.forEach(t),Ce.forEach(t),r0r=i(bl),T(RT.$$.fragment,bl),bl.forEach(t),_l.forEach(t),dje=i(f),Jd=n(f,"H2",{class:!0});var pGe=s(Jd);PT=n(pGe,"A",{id:!0,class:!0,href:!0});var aTt=s(PT);h2e=n(aTt,"SPAN",{});var nTt=s(h2e);T(E7.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),t0r=i(pGe),p2e=n(pGe,"SPAN",{});var sTt=s(p2e);a0r=r(sTt,"TFAutoModelForImageClassification"),sTt.forEach(t),pGe.forEach(t),cje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(C7.$$.fragment,vl),n0r=i(vl),Yd=n(vl,"P",{});var hee=s(Yd);s0r=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OQ=n(hee,"A",{href:!0});var lTt=s(OQ);l0r=r(lTt,"from_pretrained()"),lTt.forEach(t),i0r=r(hee," class method or the "),VQ=n(hee,"A",{href:!0});var iTt=s(VQ);d0r=r(iTt,"from_config()"),iTt.forEach(t),c0r=r(hee,` class
method.`),hee.forEach(t),f0r=i(vl),w7=n(vl,"P",{});var uGe=s(w7);m0r=r(uGe,"This class cannot be instantiated directly using "),u2e=n(uGe,"CODE",{});var dTt=s(u2e);g0r=r(dTt,"__init__()"),dTt.forEach(t),h0r=r(uGe," (throws an error)."),uGe.forEach(t),p0r=i(vl),$t=n(vl,"DIV",{class:!0});var $A=s($t);T(A7.$$.fragment,$A),u0r=i($A),_2e=n($A,"P",{});var cTt=s(_2e);_0r=r(cTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cTt.forEach(t),b0r=i($A),Kd=n($A,"P",{});var pee=s(Kd);v0r=r(pee,`Note:
Loading a model from its configuration file does `),b2e=n(pee,"STRONG",{});var fTt=s(b2e);F0r=r(fTt,"not"),fTt.forEach(t),T0r=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(pee,"A",{href:!0});var mTt=s(XQ);M0r=r(mTt,"from_pretrained()"),mTt.forEach(t),E0r=r(pee," to load the model weights."),pee.forEach(t),C0r=i($A),T(BT.$$.fragment,$A),$A.forEach(t),w0r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(y7.$$.fragment,Fl),A0r=i(Fl),v2e=n(Fl,"P",{});var gTt=s(v2e);y0r=r(gTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gTt.forEach(t),L0r=i(Fl),on=n(Fl,"P",{});var kA=s(on);x0r=r(kA,"The model class to instantiate is selected based on the "),F2e=n(kA,"CODE",{});var hTt=s(F2e);$0r=r(hTt,"model_type"),hTt.forEach(t),k0r=r(kA,` property of the config object (either
passed as an argument or loaded from `),T2e=n(kA,"CODE",{});var pTt=s(T2e);S0r=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),R0r=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(kA,"CODE",{});var uTt=s(M2e);P0r=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),B0r=r(kA,":"),kA.forEach(t),I0r=i(Fl),rn=n(Fl,"UL",{});var SA=s(rn);IT=n(SA,"LI",{});var GRe=s(IT);E2e=n(GRe,"STRONG",{});var _Tt=s(E2e);q0r=r(_Tt,"convnext"),_Tt.forEach(t),N0r=r(GRe," \u2014 "),zQ=n(GRe,"A",{href:!0});var bTt=s(zQ);j0r=r(bTt,"TFConvNextForImageClassification"),bTt.forEach(t),D0r=r(GRe," (ConvNext model)"),GRe.forEach(t),G0r=i(SA),qT=n(SA,"LI",{});var ORe=s(qT);C2e=n(ORe,"STRONG",{});var vTt=s(C2e);O0r=r(vTt,"data2vec-vision"),vTt.forEach(t),V0r=r(ORe," \u2014 "),WQ=n(ORe,"A",{href:!0});var FTt=s(WQ);X0r=r(FTt,"TFData2VecVisionForImageClassification"),FTt.forEach(t),z0r=r(ORe," (Data2VecVision model)"),ORe.forEach(t),W0r=i(SA),NT=n(SA,"LI",{});var VRe=s(NT);w2e=n(VRe,"STRONG",{});var TTt=s(w2e);Q0r=r(TTt,"swin"),TTt.forEach(t),H0r=r(VRe," \u2014 "),QQ=n(VRe,"A",{href:!0});var MTt=s(QQ);U0r=r(MTt,"TFSwinForImageClassification"),MTt.forEach(t),J0r=r(VRe," (Swin model)"),VRe.forEach(t),Y0r=i(SA),jT=n(SA,"LI",{});var XRe=s(jT);A2e=n(XRe,"STRONG",{});var ETt=s(A2e);K0r=r(ETt,"vit"),ETt.forEach(t),Z0r=r(XRe," \u2014 "),HQ=n(XRe,"A",{href:!0});var CTt=s(HQ);e1r=r(CTt,"TFViTForImageClassification"),CTt.forEach(t),o1r=r(XRe," (ViT model)"),XRe.forEach(t),SA.forEach(t),r1r=i(Fl),T(DT.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),fje=i(f),Zd=n(f,"H2",{class:!0});var _Ge=s(Zd);GT=n(_Ge,"A",{id:!0,class:!0,href:!0});var wTt=s(GT);y2e=n(wTt,"SPAN",{});var ATt=s(y2e);T(L7.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),t1r=i(_Ge),L2e=n(_Ge,"SPAN",{});var yTt=s(L2e);a1r=r(yTt,"TFAutoModelForMaskedLM"),yTt.forEach(t),_Ge.forEach(t),mje=i(f),or=n(f,"DIV",{class:!0});var Tl=s(or);T(x7.$$.fragment,Tl),n1r=i(Tl),ec=n(Tl,"P",{});var uee=s(ec);s1r=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UQ=n(uee,"A",{href:!0});var LTt=s(UQ);l1r=r(LTt,"from_pretrained()"),LTt.forEach(t),i1r=r(uee," class method or the "),JQ=n(uee,"A",{href:!0});var xTt=s(JQ);d1r=r(xTt,"from_config()"),xTt.forEach(t),c1r=r(uee,` class
method.`),uee.forEach(t),f1r=i(Tl),$7=n(Tl,"P",{});var bGe=s($7);m1r=r(bGe,"This class cannot be instantiated directly using "),x2e=n(bGe,"CODE",{});var $Tt=s(x2e);g1r=r($Tt,"__init__()"),$Tt.forEach(t),h1r=r(bGe," (throws an error)."),bGe.forEach(t),p1r=i(Tl),kt=n(Tl,"DIV",{class:!0});var RA=s(kt);T(k7.$$.fragment,RA),u1r=i(RA),$2e=n(RA,"P",{});var kTt=s($2e);_1r=r(kTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kTt.forEach(t),b1r=i(RA),oc=n(RA,"P",{});var _ee=s(oc);v1r=r(_ee,`Note:
Loading a model from its configuration file does `),k2e=n(_ee,"STRONG",{});var STt=s(k2e);F1r=r(STt,"not"),STt.forEach(t),T1r=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YQ=n(_ee,"A",{href:!0});var RTt=s(YQ);M1r=r(RTt,"from_pretrained()"),RTt.forEach(t),E1r=r(_ee," to load the model weights."),_ee.forEach(t),C1r=i(RA),T(OT.$$.fragment,RA),RA.forEach(t),w1r=i(Tl),xr=n(Tl,"DIV",{class:!0});var Ml=s(xr);T(S7.$$.fragment,Ml),A1r=i(Ml),S2e=n(Ml,"P",{});var PTt=s(S2e);y1r=r(PTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PTt.forEach(t),L1r=i(Ml),tn=n(Ml,"P",{});var PA=s(tn);x1r=r(PA,"The model class to instantiate is selected based on the "),R2e=n(PA,"CODE",{});var BTt=s(R2e);$1r=r(BTt,"model_type"),BTt.forEach(t),k1r=r(PA,` property of the config object (either
passed as an argument or loaded from `),P2e=n(PA,"CODE",{});var ITt=s(P2e);S1r=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),R1r=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(PA,"CODE",{});var qTt=s(B2e);P1r=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),B1r=r(PA,":"),PA.forEach(t),I1r=i(Ml),ie=n(Ml,"UL",{});var fe=s(ie);VT=n(fe,"LI",{});var zRe=s(VT);I2e=n(zRe,"STRONG",{});var NTt=s(I2e);q1r=r(NTt,"albert"),NTt.forEach(t),N1r=r(zRe," \u2014 "),KQ=n(zRe,"A",{href:!0});var jTt=s(KQ);j1r=r(jTt,"TFAlbertForMaskedLM"),jTt.forEach(t),D1r=r(zRe," (ALBERT model)"),zRe.forEach(t),G1r=i(fe),XT=n(fe,"LI",{});var WRe=s(XT);q2e=n(WRe,"STRONG",{});var DTt=s(q2e);O1r=r(DTt,"bert"),DTt.forEach(t),V1r=r(WRe," \u2014 "),ZQ=n(WRe,"A",{href:!0});var GTt=s(ZQ);X1r=r(GTt,"TFBertForMaskedLM"),GTt.forEach(t),z1r=r(WRe," (BERT model)"),WRe.forEach(t),W1r=i(fe),zT=n(fe,"LI",{});var QRe=s(zT);N2e=n(QRe,"STRONG",{});var OTt=s(N2e);Q1r=r(OTt,"camembert"),OTt.forEach(t),H1r=r(QRe," \u2014 "),eH=n(QRe,"A",{href:!0});var VTt=s(eH);U1r=r(VTt,"TFCamembertForMaskedLM"),VTt.forEach(t),J1r=r(QRe," (CamemBERT model)"),QRe.forEach(t),Y1r=i(fe),WT=n(fe,"LI",{});var HRe=s(WT);j2e=n(HRe,"STRONG",{});var XTt=s(j2e);K1r=r(XTt,"convbert"),XTt.forEach(t),Z1r=r(HRe," \u2014 "),oH=n(HRe,"A",{href:!0});var zTt=s(oH);ebr=r(zTt,"TFConvBertForMaskedLM"),zTt.forEach(t),obr=r(HRe," (ConvBERT model)"),HRe.forEach(t),rbr=i(fe),QT=n(fe,"LI",{});var URe=s(QT);D2e=n(URe,"STRONG",{});var WTt=s(D2e);tbr=r(WTt,"deberta"),WTt.forEach(t),abr=r(URe," \u2014 "),rH=n(URe,"A",{href:!0});var QTt=s(rH);nbr=r(QTt,"TFDebertaForMaskedLM"),QTt.forEach(t),sbr=r(URe," (DeBERTa model)"),URe.forEach(t),lbr=i(fe),HT=n(fe,"LI",{});var JRe=s(HT);G2e=n(JRe,"STRONG",{});var HTt=s(G2e);ibr=r(HTt,"deberta-v2"),HTt.forEach(t),dbr=r(JRe," \u2014 "),tH=n(JRe,"A",{href:!0});var UTt=s(tH);cbr=r(UTt,"TFDebertaV2ForMaskedLM"),UTt.forEach(t),fbr=r(JRe," (DeBERTa-v2 model)"),JRe.forEach(t),mbr=i(fe),UT=n(fe,"LI",{});var YRe=s(UT);O2e=n(YRe,"STRONG",{});var JTt=s(O2e);gbr=r(JTt,"distilbert"),JTt.forEach(t),hbr=r(YRe," \u2014 "),aH=n(YRe,"A",{href:!0});var YTt=s(aH);pbr=r(YTt,"TFDistilBertForMaskedLM"),YTt.forEach(t),ubr=r(YRe," (DistilBERT model)"),YRe.forEach(t),_br=i(fe),JT=n(fe,"LI",{});var KRe=s(JT);V2e=n(KRe,"STRONG",{});var KTt=s(V2e);bbr=r(KTt,"electra"),KTt.forEach(t),vbr=r(KRe," \u2014 "),nH=n(KRe,"A",{href:!0});var ZTt=s(nH);Fbr=r(ZTt,"TFElectraForMaskedLM"),ZTt.forEach(t),Tbr=r(KRe," (ELECTRA model)"),KRe.forEach(t),Mbr=i(fe),YT=n(fe,"LI",{});var ZRe=s(YT);X2e=n(ZRe,"STRONG",{});var eMt=s(X2e);Ebr=r(eMt,"flaubert"),eMt.forEach(t),Cbr=r(ZRe," \u2014 "),sH=n(ZRe,"A",{href:!0});var oMt=s(sH);wbr=r(oMt,"TFFlaubertWithLMHeadModel"),oMt.forEach(t),Abr=r(ZRe," (FlauBERT model)"),ZRe.forEach(t),ybr=i(fe),KT=n(fe,"LI",{});var ePe=s(KT);z2e=n(ePe,"STRONG",{});var rMt=s(z2e);Lbr=r(rMt,"funnel"),rMt.forEach(t),xbr=r(ePe," \u2014 "),lH=n(ePe,"A",{href:!0});var tMt=s(lH);$br=r(tMt,"TFFunnelForMaskedLM"),tMt.forEach(t),kbr=r(ePe," (Funnel Transformer model)"),ePe.forEach(t),Sbr=i(fe),ZT=n(fe,"LI",{});var oPe=s(ZT);W2e=n(oPe,"STRONG",{});var aMt=s(W2e);Rbr=r(aMt,"layoutlm"),aMt.forEach(t),Pbr=r(oPe," \u2014 "),iH=n(oPe,"A",{href:!0});var nMt=s(iH);Bbr=r(nMt,"TFLayoutLMForMaskedLM"),nMt.forEach(t),Ibr=r(oPe," (LayoutLM model)"),oPe.forEach(t),qbr=i(fe),eM=n(fe,"LI",{});var rPe=s(eM);Q2e=n(rPe,"STRONG",{});var sMt=s(Q2e);Nbr=r(sMt,"longformer"),sMt.forEach(t),jbr=r(rPe," \u2014 "),dH=n(rPe,"A",{href:!0});var lMt=s(dH);Dbr=r(lMt,"TFLongformerForMaskedLM"),lMt.forEach(t),Gbr=r(rPe," (Longformer model)"),rPe.forEach(t),Obr=i(fe),oM=n(fe,"LI",{});var tPe=s(oM);H2e=n(tPe,"STRONG",{});var iMt=s(H2e);Vbr=r(iMt,"mobilebert"),iMt.forEach(t),Xbr=r(tPe," \u2014 "),cH=n(tPe,"A",{href:!0});var dMt=s(cH);zbr=r(dMt,"TFMobileBertForMaskedLM"),dMt.forEach(t),Wbr=r(tPe," (MobileBERT model)"),tPe.forEach(t),Qbr=i(fe),rM=n(fe,"LI",{});var aPe=s(rM);U2e=n(aPe,"STRONG",{});var cMt=s(U2e);Hbr=r(cMt,"mpnet"),cMt.forEach(t),Ubr=r(aPe," \u2014 "),fH=n(aPe,"A",{href:!0});var fMt=s(fH);Jbr=r(fMt,"TFMPNetForMaskedLM"),fMt.forEach(t),Ybr=r(aPe," (MPNet model)"),aPe.forEach(t),Kbr=i(fe),tM=n(fe,"LI",{});var nPe=s(tM);J2e=n(nPe,"STRONG",{});var mMt=s(J2e);Zbr=r(mMt,"rembert"),mMt.forEach(t),e2r=r(nPe," \u2014 "),mH=n(nPe,"A",{href:!0});var gMt=s(mH);o2r=r(gMt,"TFRemBertForMaskedLM"),gMt.forEach(t),r2r=r(nPe," (RemBERT model)"),nPe.forEach(t),t2r=i(fe),aM=n(fe,"LI",{});var sPe=s(aM);Y2e=n(sPe,"STRONG",{});var hMt=s(Y2e);a2r=r(hMt,"roberta"),hMt.forEach(t),n2r=r(sPe," \u2014 "),gH=n(sPe,"A",{href:!0});var pMt=s(gH);s2r=r(pMt,"TFRobertaForMaskedLM"),pMt.forEach(t),l2r=r(sPe," (RoBERTa model)"),sPe.forEach(t),i2r=i(fe),nM=n(fe,"LI",{});var lPe=s(nM);K2e=n(lPe,"STRONG",{});var uMt=s(K2e);d2r=r(uMt,"roformer"),uMt.forEach(t),c2r=r(lPe," \u2014 "),hH=n(lPe,"A",{href:!0});var _Mt=s(hH);f2r=r(_Mt,"TFRoFormerForMaskedLM"),_Mt.forEach(t),m2r=r(lPe," (RoFormer model)"),lPe.forEach(t),g2r=i(fe),sM=n(fe,"LI",{});var iPe=s(sM);Z2e=n(iPe,"STRONG",{});var bMt=s(Z2e);h2r=r(bMt,"tapas"),bMt.forEach(t),p2r=r(iPe," \u2014 "),pH=n(iPe,"A",{href:!0});var vMt=s(pH);u2r=r(vMt,"TFTapasForMaskedLM"),vMt.forEach(t),_2r=r(iPe," (TAPAS model)"),iPe.forEach(t),b2r=i(fe),lM=n(fe,"LI",{});var dPe=s(lM);e4e=n(dPe,"STRONG",{});var FMt=s(e4e);v2r=r(FMt,"xlm"),FMt.forEach(t),F2r=r(dPe," \u2014 "),uH=n(dPe,"A",{href:!0});var TMt=s(uH);T2r=r(TMt,"TFXLMWithLMHeadModel"),TMt.forEach(t),M2r=r(dPe," (XLM model)"),dPe.forEach(t),E2r=i(fe),iM=n(fe,"LI",{});var cPe=s(iM);o4e=n(cPe,"STRONG",{});var MMt=s(o4e);C2r=r(MMt,"xlm-roberta"),MMt.forEach(t),w2r=r(cPe," \u2014 "),_H=n(cPe,"A",{href:!0});var EMt=s(_H);A2r=r(EMt,"TFXLMRobertaForMaskedLM"),EMt.forEach(t),y2r=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),fe.forEach(t),L2r=i(Ml),T(dM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),gje=i(f),rc=n(f,"H2",{class:!0});var vGe=s(rc);cM=n(vGe,"A",{id:!0,class:!0,href:!0});var CMt=s(cM);r4e=n(CMt,"SPAN",{});var wMt=s(r4e);T(R7.$$.fragment,wMt),wMt.forEach(t),CMt.forEach(t),x2r=i(vGe),t4e=n(vGe,"SPAN",{});var AMt=s(t4e);$2r=r(AMt,"TFAutoModelForSeq2SeqLM"),AMt.forEach(t),vGe.forEach(t),hje=i(f),rr=n(f,"DIV",{class:!0});var El=s(rr);T(P7.$$.fragment,El),k2r=i(El),tc=n(El,"P",{});var bee=s(tc);S2r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bH=n(bee,"A",{href:!0});var yMt=s(bH);R2r=r(yMt,"from_pretrained()"),yMt.forEach(t),P2r=r(bee," class method or the "),vH=n(bee,"A",{href:!0});var LMt=s(vH);B2r=r(LMt,"from_config()"),LMt.forEach(t),I2r=r(bee,` class
method.`),bee.forEach(t),q2r=i(El),B7=n(El,"P",{});var FGe=s(B7);N2r=r(FGe,"This class cannot be instantiated directly using "),a4e=n(FGe,"CODE",{});var xMt=s(a4e);j2r=r(xMt,"__init__()"),xMt.forEach(t),D2r=r(FGe," (throws an error)."),FGe.forEach(t),G2r=i(El),St=n(El,"DIV",{class:!0});var BA=s(St);T(I7.$$.fragment,BA),O2r=i(BA),n4e=n(BA,"P",{});var $Mt=s(n4e);V2r=r($Mt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$Mt.forEach(t),X2r=i(BA),ac=n(BA,"P",{});var vee=s(ac);z2r=r(vee,`Note:
Loading a model from its configuration file does `),s4e=n(vee,"STRONG",{});var kMt=s(s4e);W2r=r(kMt,"not"),kMt.forEach(t),Q2r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(vee,"A",{href:!0});var SMt=s(FH);H2r=r(SMt,"from_pretrained()"),SMt.forEach(t),U2r=r(vee," to load the model weights."),vee.forEach(t),J2r=i(BA),T(fM.$$.fragment,BA),BA.forEach(t),Y2r=i(El),$r=n(El,"DIV",{class:!0});var Cl=s($r);T(q7.$$.fragment,Cl),K2r=i(Cl),l4e=n(Cl,"P",{});var RMt=s(l4e);Z2r=r(RMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RMt.forEach(t),e4r=i(Cl),an=n(Cl,"P",{});var IA=s(an);o4r=r(IA,"The model class to instantiate is selected based on the "),i4e=n(IA,"CODE",{});var PMt=s(i4e);r4r=r(PMt,"model_type"),PMt.forEach(t),t4r=r(IA,` property of the config object (either
passed as an argument or loaded from `),d4e=n(IA,"CODE",{});var BMt=s(d4e);a4r=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),n4r=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(IA,"CODE",{});var IMt=s(c4e);s4r=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),l4r=r(IA,":"),IA.forEach(t),i4r=i(Cl),ye=n(Cl,"UL",{});var Be=s(ye);mM=n(Be,"LI",{});var fPe=s(mM);f4e=n(fPe,"STRONG",{});var qMt=s(f4e);d4r=r(qMt,"bart"),qMt.forEach(t),c4r=r(fPe," \u2014 "),TH=n(fPe,"A",{href:!0});var NMt=s(TH);f4r=r(NMt,"TFBartForConditionalGeneration"),NMt.forEach(t),m4r=r(fPe," (BART model)"),fPe.forEach(t),g4r=i(Be),gM=n(Be,"LI",{});var mPe=s(gM);m4e=n(mPe,"STRONG",{});var jMt=s(m4e);h4r=r(jMt,"blenderbot"),jMt.forEach(t),p4r=r(mPe," \u2014 "),MH=n(mPe,"A",{href:!0});var DMt=s(MH);u4r=r(DMt,"TFBlenderbotForConditionalGeneration"),DMt.forEach(t),_4r=r(mPe," (Blenderbot model)"),mPe.forEach(t),b4r=i(Be),hM=n(Be,"LI",{});var gPe=s(hM);g4e=n(gPe,"STRONG",{});var GMt=s(g4e);v4r=r(GMt,"blenderbot-small"),GMt.forEach(t),F4r=r(gPe," \u2014 "),EH=n(gPe,"A",{href:!0});var OMt=s(EH);T4r=r(OMt,"TFBlenderbotSmallForConditionalGeneration"),OMt.forEach(t),M4r=r(gPe," (BlenderbotSmall model)"),gPe.forEach(t),E4r=i(Be),pM=n(Be,"LI",{});var hPe=s(pM);h4e=n(hPe,"STRONG",{});var VMt=s(h4e);C4r=r(VMt,"encoder-decoder"),VMt.forEach(t),w4r=r(hPe," \u2014 "),CH=n(hPe,"A",{href:!0});var XMt=s(CH);A4r=r(XMt,"TFEncoderDecoderModel"),XMt.forEach(t),y4r=r(hPe," (Encoder decoder model)"),hPe.forEach(t),L4r=i(Be),uM=n(Be,"LI",{});var pPe=s(uM);p4e=n(pPe,"STRONG",{});var zMt=s(p4e);x4r=r(zMt,"led"),zMt.forEach(t),$4r=r(pPe," \u2014 "),wH=n(pPe,"A",{href:!0});var WMt=s(wH);k4r=r(WMt,"TFLEDForConditionalGeneration"),WMt.forEach(t),S4r=r(pPe," (LED model)"),pPe.forEach(t),R4r=i(Be),_M=n(Be,"LI",{});var uPe=s(_M);u4e=n(uPe,"STRONG",{});var QMt=s(u4e);P4r=r(QMt,"marian"),QMt.forEach(t),B4r=r(uPe," \u2014 "),AH=n(uPe,"A",{href:!0});var HMt=s(AH);I4r=r(HMt,"TFMarianMTModel"),HMt.forEach(t),q4r=r(uPe," (Marian model)"),uPe.forEach(t),N4r=i(Be),bM=n(Be,"LI",{});var _Pe=s(bM);_4e=n(_Pe,"STRONG",{});var UMt=s(_4e);j4r=r(UMt,"mbart"),UMt.forEach(t),D4r=r(_Pe," \u2014 "),yH=n(_Pe,"A",{href:!0});var JMt=s(yH);G4r=r(JMt,"TFMBartForConditionalGeneration"),JMt.forEach(t),O4r=r(_Pe," (mBART model)"),_Pe.forEach(t),V4r=i(Be),vM=n(Be,"LI",{});var bPe=s(vM);b4e=n(bPe,"STRONG",{});var YMt=s(b4e);X4r=r(YMt,"mt5"),YMt.forEach(t),z4r=r(bPe," \u2014 "),LH=n(bPe,"A",{href:!0});var KMt=s(LH);W4r=r(KMt,"TFMT5ForConditionalGeneration"),KMt.forEach(t),Q4r=r(bPe," (mT5 model)"),bPe.forEach(t),H4r=i(Be),FM=n(Be,"LI",{});var vPe=s(FM);v4e=n(vPe,"STRONG",{});var ZMt=s(v4e);U4r=r(ZMt,"pegasus"),ZMt.forEach(t),J4r=r(vPe," \u2014 "),xH=n(vPe,"A",{href:!0});var eEt=s(xH);Y4r=r(eEt,"TFPegasusForConditionalGeneration"),eEt.forEach(t),K4r=r(vPe," (Pegasus model)"),vPe.forEach(t),Z4r=i(Be),TM=n(Be,"LI",{});var FPe=s(TM);F4e=n(FPe,"STRONG",{});var oEt=s(F4e);evr=r(oEt,"t5"),oEt.forEach(t),ovr=r(FPe," \u2014 "),$H=n(FPe,"A",{href:!0});var rEt=s($H);rvr=r(rEt,"TFT5ForConditionalGeneration"),rEt.forEach(t),tvr=r(FPe," (T5 model)"),FPe.forEach(t),Be.forEach(t),avr=i(Cl),T(MM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),pje=i(f),nc=n(f,"H2",{class:!0});var TGe=s(nc);EM=n(TGe,"A",{id:!0,class:!0,href:!0});var tEt=s(EM);T4e=n(tEt,"SPAN",{});var aEt=s(T4e);T(N7.$$.fragment,aEt),aEt.forEach(t),tEt.forEach(t),nvr=i(TGe),M4e=n(TGe,"SPAN",{});var nEt=s(M4e);svr=r(nEt,"TFAutoModelForSequenceClassification"),nEt.forEach(t),TGe.forEach(t),uje=i(f),tr=n(f,"DIV",{class:!0});var wl=s(tr);T(j7.$$.fragment,wl),lvr=i(wl),sc=n(wl,"P",{});var Fee=s(sc);ivr=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=n(Fee,"A",{href:!0});var sEt=s(kH);dvr=r(sEt,"from_pretrained()"),sEt.forEach(t),cvr=r(Fee," class method or the "),SH=n(Fee,"A",{href:!0});var lEt=s(SH);fvr=r(lEt,"from_config()"),lEt.forEach(t),mvr=r(Fee,` class
method.`),Fee.forEach(t),gvr=i(wl),D7=n(wl,"P",{});var MGe=s(D7);hvr=r(MGe,"This class cannot be instantiated directly using "),E4e=n(MGe,"CODE",{});var iEt=s(E4e);pvr=r(iEt,"__init__()"),iEt.forEach(t),uvr=r(MGe," (throws an error)."),MGe.forEach(t),_vr=i(wl),Rt=n(wl,"DIV",{class:!0});var qA=s(Rt);T(G7.$$.fragment,qA),bvr=i(qA),C4e=n(qA,"P",{});var dEt=s(C4e);vvr=r(dEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dEt.forEach(t),Fvr=i(qA),lc=n(qA,"P",{});var Tee=s(lc);Tvr=r(Tee,`Note:
Loading a model from its configuration file does `),w4e=n(Tee,"STRONG",{});var cEt=s(w4e);Mvr=r(cEt,"not"),cEt.forEach(t),Evr=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(Tee,"A",{href:!0});var fEt=s(RH);Cvr=r(fEt,"from_pretrained()"),fEt.forEach(t),wvr=r(Tee," to load the model weights."),Tee.forEach(t),Avr=i(qA),T(CM.$$.fragment,qA),qA.forEach(t),yvr=i(wl),kr=n(wl,"DIV",{class:!0});var Al=s(kr);T(O7.$$.fragment,Al),Lvr=i(Al),A4e=n(Al,"P",{});var mEt=s(A4e);xvr=r(mEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mEt.forEach(t),$vr=i(Al),nn=n(Al,"P",{});var NA=s(nn);kvr=r(NA,"The model class to instantiate is selected based on the "),y4e=n(NA,"CODE",{});var gEt=s(y4e);Svr=r(gEt,"model_type"),gEt.forEach(t),Rvr=r(NA,` property of the config object (either
passed as an argument or loaded from `),L4e=n(NA,"CODE",{});var hEt=s(L4e);Pvr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),Bvr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(NA,"CODE",{});var pEt=s(x4e);Ivr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),qvr=r(NA,":"),NA.forEach(t),Nvr=i(Al),oe=n(Al,"UL",{});var ae=s(oe);wM=n(ae,"LI",{});var TPe=s(wM);$4e=n(TPe,"STRONG",{});var uEt=s($4e);jvr=r(uEt,"albert"),uEt.forEach(t),Dvr=r(TPe," \u2014 "),PH=n(TPe,"A",{href:!0});var _Et=s(PH);Gvr=r(_Et,"TFAlbertForSequenceClassification"),_Et.forEach(t),Ovr=r(TPe," (ALBERT model)"),TPe.forEach(t),Vvr=i(ae),AM=n(ae,"LI",{});var MPe=s(AM);k4e=n(MPe,"STRONG",{});var bEt=s(k4e);Xvr=r(bEt,"bert"),bEt.forEach(t),zvr=r(MPe," \u2014 "),BH=n(MPe,"A",{href:!0});var vEt=s(BH);Wvr=r(vEt,"TFBertForSequenceClassification"),vEt.forEach(t),Qvr=r(MPe," (BERT model)"),MPe.forEach(t),Hvr=i(ae),yM=n(ae,"LI",{});var EPe=s(yM);S4e=n(EPe,"STRONG",{});var FEt=s(S4e);Uvr=r(FEt,"camembert"),FEt.forEach(t),Jvr=r(EPe," \u2014 "),IH=n(EPe,"A",{href:!0});var TEt=s(IH);Yvr=r(TEt,"TFCamembertForSequenceClassification"),TEt.forEach(t),Kvr=r(EPe," (CamemBERT model)"),EPe.forEach(t),Zvr=i(ae),LM=n(ae,"LI",{});var CPe=s(LM);R4e=n(CPe,"STRONG",{});var MEt=s(R4e);eFr=r(MEt,"convbert"),MEt.forEach(t),oFr=r(CPe," \u2014 "),qH=n(CPe,"A",{href:!0});var EEt=s(qH);rFr=r(EEt,"TFConvBertForSequenceClassification"),EEt.forEach(t),tFr=r(CPe," (ConvBERT model)"),CPe.forEach(t),aFr=i(ae),xM=n(ae,"LI",{});var wPe=s(xM);P4e=n(wPe,"STRONG",{});var CEt=s(P4e);nFr=r(CEt,"ctrl"),CEt.forEach(t),sFr=r(wPe," \u2014 "),NH=n(wPe,"A",{href:!0});var wEt=s(NH);lFr=r(wEt,"TFCTRLForSequenceClassification"),wEt.forEach(t),iFr=r(wPe," (CTRL model)"),wPe.forEach(t),dFr=i(ae),$M=n(ae,"LI",{});var APe=s($M);B4e=n(APe,"STRONG",{});var AEt=s(B4e);cFr=r(AEt,"deberta"),AEt.forEach(t),fFr=r(APe," \u2014 "),jH=n(APe,"A",{href:!0});var yEt=s(jH);mFr=r(yEt,"TFDebertaForSequenceClassification"),yEt.forEach(t),gFr=r(APe," (DeBERTa model)"),APe.forEach(t),hFr=i(ae),kM=n(ae,"LI",{});var yPe=s(kM);I4e=n(yPe,"STRONG",{});var LEt=s(I4e);pFr=r(LEt,"deberta-v2"),LEt.forEach(t),uFr=r(yPe," \u2014 "),DH=n(yPe,"A",{href:!0});var xEt=s(DH);_Fr=r(xEt,"TFDebertaV2ForSequenceClassification"),xEt.forEach(t),bFr=r(yPe," (DeBERTa-v2 model)"),yPe.forEach(t),vFr=i(ae),SM=n(ae,"LI",{});var LPe=s(SM);q4e=n(LPe,"STRONG",{});var $Et=s(q4e);FFr=r($Et,"distilbert"),$Et.forEach(t),TFr=r(LPe," \u2014 "),GH=n(LPe,"A",{href:!0});var kEt=s(GH);MFr=r(kEt,"TFDistilBertForSequenceClassification"),kEt.forEach(t),EFr=r(LPe," (DistilBERT model)"),LPe.forEach(t),CFr=i(ae),RM=n(ae,"LI",{});var xPe=s(RM);N4e=n(xPe,"STRONG",{});var SEt=s(N4e);wFr=r(SEt,"electra"),SEt.forEach(t),AFr=r(xPe," \u2014 "),OH=n(xPe,"A",{href:!0});var REt=s(OH);yFr=r(REt,"TFElectraForSequenceClassification"),REt.forEach(t),LFr=r(xPe," (ELECTRA model)"),xPe.forEach(t),xFr=i(ae),PM=n(ae,"LI",{});var $Pe=s(PM);j4e=n($Pe,"STRONG",{});var PEt=s(j4e);$Fr=r(PEt,"flaubert"),PEt.forEach(t),kFr=r($Pe," \u2014 "),VH=n($Pe,"A",{href:!0});var BEt=s(VH);SFr=r(BEt,"TFFlaubertForSequenceClassification"),BEt.forEach(t),RFr=r($Pe," (FlauBERT model)"),$Pe.forEach(t),PFr=i(ae),BM=n(ae,"LI",{});var kPe=s(BM);D4e=n(kPe,"STRONG",{});var IEt=s(D4e);BFr=r(IEt,"funnel"),IEt.forEach(t),IFr=r(kPe," \u2014 "),XH=n(kPe,"A",{href:!0});var qEt=s(XH);qFr=r(qEt,"TFFunnelForSequenceClassification"),qEt.forEach(t),NFr=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),jFr=i(ae),IM=n(ae,"LI",{});var SPe=s(IM);G4e=n(SPe,"STRONG",{});var NEt=s(G4e);DFr=r(NEt,"gpt2"),NEt.forEach(t),GFr=r(SPe," \u2014 "),zH=n(SPe,"A",{href:!0});var jEt=s(zH);OFr=r(jEt,"TFGPT2ForSequenceClassification"),jEt.forEach(t),VFr=r(SPe," (OpenAI GPT-2 model)"),SPe.forEach(t),XFr=i(ae),qM=n(ae,"LI",{});var RPe=s(qM);O4e=n(RPe,"STRONG",{});var DEt=s(O4e);zFr=r(DEt,"gptj"),DEt.forEach(t),WFr=r(RPe," \u2014 "),WH=n(RPe,"A",{href:!0});var GEt=s(WH);QFr=r(GEt,"TFGPTJForSequenceClassification"),GEt.forEach(t),HFr=r(RPe," (GPT-J model)"),RPe.forEach(t),UFr=i(ae),NM=n(ae,"LI",{});var PPe=s(NM);V4e=n(PPe,"STRONG",{});var OEt=s(V4e);JFr=r(OEt,"layoutlm"),OEt.forEach(t),YFr=r(PPe," \u2014 "),QH=n(PPe,"A",{href:!0});var VEt=s(QH);KFr=r(VEt,"TFLayoutLMForSequenceClassification"),VEt.forEach(t),ZFr=r(PPe," (LayoutLM model)"),PPe.forEach(t),e6r=i(ae),jM=n(ae,"LI",{});var BPe=s(jM);X4e=n(BPe,"STRONG",{});var XEt=s(X4e);o6r=r(XEt,"longformer"),XEt.forEach(t),r6r=r(BPe," \u2014 "),HH=n(BPe,"A",{href:!0});var zEt=s(HH);t6r=r(zEt,"TFLongformerForSequenceClassification"),zEt.forEach(t),a6r=r(BPe," (Longformer model)"),BPe.forEach(t),n6r=i(ae),DM=n(ae,"LI",{});var IPe=s(DM);z4e=n(IPe,"STRONG",{});var WEt=s(z4e);s6r=r(WEt,"mobilebert"),WEt.forEach(t),l6r=r(IPe," \u2014 "),UH=n(IPe,"A",{href:!0});var QEt=s(UH);i6r=r(QEt,"TFMobileBertForSequenceClassification"),QEt.forEach(t),d6r=r(IPe," (MobileBERT model)"),IPe.forEach(t),c6r=i(ae),GM=n(ae,"LI",{});var qPe=s(GM);W4e=n(qPe,"STRONG",{});var HEt=s(W4e);f6r=r(HEt,"mpnet"),HEt.forEach(t),m6r=r(qPe," \u2014 "),JH=n(qPe,"A",{href:!0});var UEt=s(JH);g6r=r(UEt,"TFMPNetForSequenceClassification"),UEt.forEach(t),h6r=r(qPe," (MPNet model)"),qPe.forEach(t),p6r=i(ae),OM=n(ae,"LI",{});var NPe=s(OM);Q4e=n(NPe,"STRONG",{});var JEt=s(Q4e);u6r=r(JEt,"openai-gpt"),JEt.forEach(t),_6r=r(NPe," \u2014 "),YH=n(NPe,"A",{href:!0});var YEt=s(YH);b6r=r(YEt,"TFOpenAIGPTForSequenceClassification"),YEt.forEach(t),v6r=r(NPe," (OpenAI GPT model)"),NPe.forEach(t),F6r=i(ae),VM=n(ae,"LI",{});var jPe=s(VM);H4e=n(jPe,"STRONG",{});var KEt=s(H4e);T6r=r(KEt,"rembert"),KEt.forEach(t),M6r=r(jPe," \u2014 "),KH=n(jPe,"A",{href:!0});var ZEt=s(KH);E6r=r(ZEt,"TFRemBertForSequenceClassification"),ZEt.forEach(t),C6r=r(jPe," (RemBERT model)"),jPe.forEach(t),w6r=i(ae),XM=n(ae,"LI",{});var DPe=s(XM);U4e=n(DPe,"STRONG",{});var eCt=s(U4e);A6r=r(eCt,"roberta"),eCt.forEach(t),y6r=r(DPe," \u2014 "),ZH=n(DPe,"A",{href:!0});var oCt=s(ZH);L6r=r(oCt,"TFRobertaForSequenceClassification"),oCt.forEach(t),x6r=r(DPe," (RoBERTa model)"),DPe.forEach(t),$6r=i(ae),zM=n(ae,"LI",{});var GPe=s(zM);J4e=n(GPe,"STRONG",{});var rCt=s(J4e);k6r=r(rCt,"roformer"),rCt.forEach(t),S6r=r(GPe," \u2014 "),eU=n(GPe,"A",{href:!0});var tCt=s(eU);R6r=r(tCt,"TFRoFormerForSequenceClassification"),tCt.forEach(t),P6r=r(GPe," (RoFormer model)"),GPe.forEach(t),B6r=i(ae),WM=n(ae,"LI",{});var OPe=s(WM);Y4e=n(OPe,"STRONG",{});var aCt=s(Y4e);I6r=r(aCt,"tapas"),aCt.forEach(t),q6r=r(OPe," \u2014 "),oU=n(OPe,"A",{href:!0});var nCt=s(oU);N6r=r(nCt,"TFTapasForSequenceClassification"),nCt.forEach(t),j6r=r(OPe," (TAPAS model)"),OPe.forEach(t),D6r=i(ae),QM=n(ae,"LI",{});var VPe=s(QM);K4e=n(VPe,"STRONG",{});var sCt=s(K4e);G6r=r(sCt,"transfo-xl"),sCt.forEach(t),O6r=r(VPe," \u2014 "),rU=n(VPe,"A",{href:!0});var lCt=s(rU);V6r=r(lCt,"TFTransfoXLForSequenceClassification"),lCt.forEach(t),X6r=r(VPe," (Transformer-XL model)"),VPe.forEach(t),z6r=i(ae),HM=n(ae,"LI",{});var XPe=s(HM);Z4e=n(XPe,"STRONG",{});var iCt=s(Z4e);W6r=r(iCt,"xlm"),iCt.forEach(t),Q6r=r(XPe," \u2014 "),tU=n(XPe,"A",{href:!0});var dCt=s(tU);H6r=r(dCt,"TFXLMForSequenceClassification"),dCt.forEach(t),U6r=r(XPe," (XLM model)"),XPe.forEach(t),J6r=i(ae),UM=n(ae,"LI",{});var zPe=s(UM);eve=n(zPe,"STRONG",{});var cCt=s(eve);Y6r=r(cCt,"xlm-roberta"),cCt.forEach(t),K6r=r(zPe," \u2014 "),aU=n(zPe,"A",{href:!0});var fCt=s(aU);Z6r=r(fCt,"TFXLMRobertaForSequenceClassification"),fCt.forEach(t),eTr=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),oTr=i(ae),JM=n(ae,"LI",{});var WPe=s(JM);ove=n(WPe,"STRONG",{});var mCt=s(ove);rTr=r(mCt,"xlnet"),mCt.forEach(t),tTr=r(WPe," \u2014 "),nU=n(WPe,"A",{href:!0});var gCt=s(nU);aTr=r(gCt,"TFXLNetForSequenceClassification"),gCt.forEach(t),nTr=r(WPe," (XLNet model)"),WPe.forEach(t),ae.forEach(t),sTr=i(Al),T(YM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),_je=i(f),ic=n(f,"H2",{class:!0});var EGe=s(ic);KM=n(EGe,"A",{id:!0,class:!0,href:!0});var hCt=s(KM);rve=n(hCt,"SPAN",{});var pCt=s(rve);T(V7.$$.fragment,pCt),pCt.forEach(t),hCt.forEach(t),lTr=i(EGe),tve=n(EGe,"SPAN",{});var uCt=s(tve);iTr=r(uCt,"TFAutoModelForMultipleChoice"),uCt.forEach(t),EGe.forEach(t),bje=i(f),ar=n(f,"DIV",{class:!0});var yl=s(ar);T(X7.$$.fragment,yl),dTr=i(yl),dc=n(yl,"P",{});var Mee=s(dc);cTr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sU=n(Mee,"A",{href:!0});var _Ct=s(sU);fTr=r(_Ct,"from_pretrained()"),_Ct.forEach(t),mTr=r(Mee," class method or the "),lU=n(Mee,"A",{href:!0});var bCt=s(lU);gTr=r(bCt,"from_config()"),bCt.forEach(t),hTr=r(Mee,` class
method.`),Mee.forEach(t),pTr=i(yl),z7=n(yl,"P",{});var CGe=s(z7);uTr=r(CGe,"This class cannot be instantiated directly using "),ave=n(CGe,"CODE",{});var vCt=s(ave);_Tr=r(vCt,"__init__()"),vCt.forEach(t),bTr=r(CGe," (throws an error)."),CGe.forEach(t),vTr=i(yl),Pt=n(yl,"DIV",{class:!0});var jA=s(Pt);T(W7.$$.fragment,jA),FTr=i(jA),nve=n(jA,"P",{});var FCt=s(nve);TTr=r(FCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),FCt.forEach(t),MTr=i(jA),cc=n(jA,"P",{});var Eee=s(cc);ETr=r(Eee,`Note:
Loading a model from its configuration file does `),sve=n(Eee,"STRONG",{});var TCt=s(sve);CTr=r(TCt,"not"),TCt.forEach(t),wTr=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(Eee,"A",{href:!0});var MCt=s(iU);ATr=r(MCt,"from_pretrained()"),MCt.forEach(t),yTr=r(Eee," to load the model weights."),Eee.forEach(t),LTr=i(jA),T(ZM.$$.fragment,jA),jA.forEach(t),xTr=i(yl),Sr=n(yl,"DIV",{class:!0});var Ll=s(Sr);T(Q7.$$.fragment,Ll),$Tr=i(Ll),lve=n(Ll,"P",{});var ECt=s(lve);kTr=r(ECt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ECt.forEach(t),STr=i(Ll),sn=n(Ll,"P",{});var DA=s(sn);RTr=r(DA,"The model class to instantiate is selected based on the "),ive=n(DA,"CODE",{});var CCt=s(ive);PTr=r(CCt,"model_type"),CCt.forEach(t),BTr=r(DA,` property of the config object (either
passed as an argument or loaded from `),dve=n(DA,"CODE",{});var wCt=s(dve);ITr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),qTr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cve=n(DA,"CODE",{});var ACt=s(cve);NTr=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),jTr=r(DA,":"),DA.forEach(t),DTr=i(Ll),pe=n(Ll,"UL",{});var be=s(pe);eE=n(be,"LI",{});var QPe=s(eE);fve=n(QPe,"STRONG",{});var yCt=s(fve);GTr=r(yCt,"albert"),yCt.forEach(t),OTr=r(QPe," \u2014 "),dU=n(QPe,"A",{href:!0});var LCt=s(dU);VTr=r(LCt,"TFAlbertForMultipleChoice"),LCt.forEach(t),XTr=r(QPe," (ALBERT model)"),QPe.forEach(t),zTr=i(be),oE=n(be,"LI",{});var HPe=s(oE);mve=n(HPe,"STRONG",{});var xCt=s(mve);WTr=r(xCt,"bert"),xCt.forEach(t),QTr=r(HPe," \u2014 "),cU=n(HPe,"A",{href:!0});var $Ct=s(cU);HTr=r($Ct,"TFBertForMultipleChoice"),$Ct.forEach(t),UTr=r(HPe," (BERT model)"),HPe.forEach(t),JTr=i(be),rE=n(be,"LI",{});var UPe=s(rE);gve=n(UPe,"STRONG",{});var kCt=s(gve);YTr=r(kCt,"camembert"),kCt.forEach(t),KTr=r(UPe," \u2014 "),fU=n(UPe,"A",{href:!0});var SCt=s(fU);ZTr=r(SCt,"TFCamembertForMultipleChoice"),SCt.forEach(t),eMr=r(UPe," (CamemBERT model)"),UPe.forEach(t),oMr=i(be),tE=n(be,"LI",{});var JPe=s(tE);hve=n(JPe,"STRONG",{});var RCt=s(hve);rMr=r(RCt,"convbert"),RCt.forEach(t),tMr=r(JPe," \u2014 "),mU=n(JPe,"A",{href:!0});var PCt=s(mU);aMr=r(PCt,"TFConvBertForMultipleChoice"),PCt.forEach(t),nMr=r(JPe," (ConvBERT model)"),JPe.forEach(t),sMr=i(be),aE=n(be,"LI",{});var YPe=s(aE);pve=n(YPe,"STRONG",{});var BCt=s(pve);lMr=r(BCt,"distilbert"),BCt.forEach(t),iMr=r(YPe," \u2014 "),gU=n(YPe,"A",{href:!0});var ICt=s(gU);dMr=r(ICt,"TFDistilBertForMultipleChoice"),ICt.forEach(t),cMr=r(YPe," (DistilBERT model)"),YPe.forEach(t),fMr=i(be),nE=n(be,"LI",{});var KPe=s(nE);uve=n(KPe,"STRONG",{});var qCt=s(uve);mMr=r(qCt,"electra"),qCt.forEach(t),gMr=r(KPe," \u2014 "),hU=n(KPe,"A",{href:!0});var NCt=s(hU);hMr=r(NCt,"TFElectraForMultipleChoice"),NCt.forEach(t),pMr=r(KPe," (ELECTRA model)"),KPe.forEach(t),uMr=i(be),sE=n(be,"LI",{});var ZPe=s(sE);_ve=n(ZPe,"STRONG",{});var jCt=s(_ve);_Mr=r(jCt,"flaubert"),jCt.forEach(t),bMr=r(ZPe," \u2014 "),pU=n(ZPe,"A",{href:!0});var DCt=s(pU);vMr=r(DCt,"TFFlaubertForMultipleChoice"),DCt.forEach(t),FMr=r(ZPe," (FlauBERT model)"),ZPe.forEach(t),TMr=i(be),lE=n(be,"LI",{});var eBe=s(lE);bve=n(eBe,"STRONG",{});var GCt=s(bve);MMr=r(GCt,"funnel"),GCt.forEach(t),EMr=r(eBe," \u2014 "),uU=n(eBe,"A",{href:!0});var OCt=s(uU);CMr=r(OCt,"TFFunnelForMultipleChoice"),OCt.forEach(t),wMr=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),AMr=i(be),iE=n(be,"LI",{});var oBe=s(iE);vve=n(oBe,"STRONG",{});var VCt=s(vve);yMr=r(VCt,"longformer"),VCt.forEach(t),LMr=r(oBe," \u2014 "),_U=n(oBe,"A",{href:!0});var XCt=s(_U);xMr=r(XCt,"TFLongformerForMultipleChoice"),XCt.forEach(t),$Mr=r(oBe," (Longformer model)"),oBe.forEach(t),kMr=i(be),dE=n(be,"LI",{});var rBe=s(dE);Fve=n(rBe,"STRONG",{});var zCt=s(Fve);SMr=r(zCt,"mobilebert"),zCt.forEach(t),RMr=r(rBe," \u2014 "),bU=n(rBe,"A",{href:!0});var WCt=s(bU);PMr=r(WCt,"TFMobileBertForMultipleChoice"),WCt.forEach(t),BMr=r(rBe," (MobileBERT model)"),rBe.forEach(t),IMr=i(be),cE=n(be,"LI",{});var tBe=s(cE);Tve=n(tBe,"STRONG",{});var QCt=s(Tve);qMr=r(QCt,"mpnet"),QCt.forEach(t),NMr=r(tBe," \u2014 "),vU=n(tBe,"A",{href:!0});var HCt=s(vU);jMr=r(HCt,"TFMPNetForMultipleChoice"),HCt.forEach(t),DMr=r(tBe," (MPNet model)"),tBe.forEach(t),GMr=i(be),fE=n(be,"LI",{});var aBe=s(fE);Mve=n(aBe,"STRONG",{});var UCt=s(Mve);OMr=r(UCt,"rembert"),UCt.forEach(t),VMr=r(aBe," \u2014 "),FU=n(aBe,"A",{href:!0});var JCt=s(FU);XMr=r(JCt,"TFRemBertForMultipleChoice"),JCt.forEach(t),zMr=r(aBe," (RemBERT model)"),aBe.forEach(t),WMr=i(be),mE=n(be,"LI",{});var nBe=s(mE);Eve=n(nBe,"STRONG",{});var YCt=s(Eve);QMr=r(YCt,"roberta"),YCt.forEach(t),HMr=r(nBe," \u2014 "),TU=n(nBe,"A",{href:!0});var KCt=s(TU);UMr=r(KCt,"TFRobertaForMultipleChoice"),KCt.forEach(t),JMr=r(nBe," (RoBERTa model)"),nBe.forEach(t),YMr=i(be),gE=n(be,"LI",{});var sBe=s(gE);Cve=n(sBe,"STRONG",{});var ZCt=s(Cve);KMr=r(ZCt,"roformer"),ZCt.forEach(t),ZMr=r(sBe," \u2014 "),MU=n(sBe,"A",{href:!0});var e5t=s(MU);eEr=r(e5t,"TFRoFormerForMultipleChoice"),e5t.forEach(t),oEr=r(sBe," (RoFormer model)"),sBe.forEach(t),rEr=i(be),hE=n(be,"LI",{});var lBe=s(hE);wve=n(lBe,"STRONG",{});var o5t=s(wve);tEr=r(o5t,"xlm"),o5t.forEach(t),aEr=r(lBe," \u2014 "),EU=n(lBe,"A",{href:!0});var r5t=s(EU);nEr=r(r5t,"TFXLMForMultipleChoice"),r5t.forEach(t),sEr=r(lBe," (XLM model)"),lBe.forEach(t),lEr=i(be),pE=n(be,"LI",{});var iBe=s(pE);Ave=n(iBe,"STRONG",{});var t5t=s(Ave);iEr=r(t5t,"xlm-roberta"),t5t.forEach(t),dEr=r(iBe," \u2014 "),CU=n(iBe,"A",{href:!0});var a5t=s(CU);cEr=r(a5t,"TFXLMRobertaForMultipleChoice"),a5t.forEach(t),fEr=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),mEr=i(be),uE=n(be,"LI",{});var dBe=s(uE);yve=n(dBe,"STRONG",{});var n5t=s(yve);gEr=r(n5t,"xlnet"),n5t.forEach(t),hEr=r(dBe," \u2014 "),wU=n(dBe,"A",{href:!0});var s5t=s(wU);pEr=r(s5t,"TFXLNetForMultipleChoice"),s5t.forEach(t),uEr=r(dBe," (XLNet model)"),dBe.forEach(t),be.forEach(t),_Er=i(Ll),T(_E.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),vje=i(f),fc=n(f,"H2",{class:!0});var wGe=s(fc);bE=n(wGe,"A",{id:!0,class:!0,href:!0});var l5t=s(bE);Lve=n(l5t,"SPAN",{});var i5t=s(Lve);T(H7.$$.fragment,i5t),i5t.forEach(t),l5t.forEach(t),bEr=i(wGe),xve=n(wGe,"SPAN",{});var d5t=s(xve);vEr=r(d5t,"TFAutoModelForNextSentencePrediction"),d5t.forEach(t),wGe.forEach(t),Fje=i(f),nr=n(f,"DIV",{class:!0});var xl=s(nr);T(U7.$$.fragment,xl),FEr=i(xl),mc=n(xl,"P",{});var Cee=s(mc);TEr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AU=n(Cee,"A",{href:!0});var c5t=s(AU);MEr=r(c5t,"from_pretrained()"),c5t.forEach(t),EEr=r(Cee," class method or the "),yU=n(Cee,"A",{href:!0});var f5t=s(yU);CEr=r(f5t,"from_config()"),f5t.forEach(t),wEr=r(Cee,` class
method.`),Cee.forEach(t),AEr=i(xl),J7=n(xl,"P",{});var AGe=s(J7);yEr=r(AGe,"This class cannot be instantiated directly using "),$ve=n(AGe,"CODE",{});var m5t=s($ve);LEr=r(m5t,"__init__()"),m5t.forEach(t),xEr=r(AGe," (throws an error)."),AGe.forEach(t),$Er=i(xl),Bt=n(xl,"DIV",{class:!0});var GA=s(Bt);T(Y7.$$.fragment,GA),kEr=i(GA),kve=n(GA,"P",{});var g5t=s(kve);SEr=r(g5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),g5t.forEach(t),REr=i(GA),gc=n(GA,"P",{});var wee=s(gc);PEr=r(wee,`Note:
Loading a model from its configuration file does `),Sve=n(wee,"STRONG",{});var h5t=s(Sve);BEr=r(h5t,"not"),h5t.forEach(t),IEr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(wee,"A",{href:!0});var p5t=s(LU);qEr=r(p5t,"from_pretrained()"),p5t.forEach(t),NEr=r(wee," to load the model weights."),wee.forEach(t),jEr=i(GA),T(vE.$$.fragment,GA),GA.forEach(t),DEr=i(xl),Rr=n(xl,"DIV",{class:!0});var $l=s(Rr);T(K7.$$.fragment,$l),GEr=i($l),Rve=n($l,"P",{});var u5t=s(Rve);OEr=r(u5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u5t.forEach(t),VEr=i($l),ln=n($l,"P",{});var OA=s(ln);XEr=r(OA,"The model class to instantiate is selected based on the "),Pve=n(OA,"CODE",{});var _5t=s(Pve);zEr=r(_5t,"model_type"),_5t.forEach(t),WEr=r(OA,` property of the config object (either
passed as an argument or loaded from `),Bve=n(OA,"CODE",{});var b5t=s(Bve);QEr=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),HEr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(OA,"CODE",{});var v5t=s(Ive);UEr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),JEr=r(OA,":"),OA.forEach(t),YEr=i($l),Z7=n($l,"UL",{});var yGe=s(Z7);FE=n(yGe,"LI",{});var cBe=s(FE);qve=n(cBe,"STRONG",{});var F5t=s(qve);KEr=r(F5t,"bert"),F5t.forEach(t),ZEr=r(cBe," \u2014 "),xU=n(cBe,"A",{href:!0});var T5t=s(xU);eCr=r(T5t,"TFBertForNextSentencePrediction"),T5t.forEach(t),oCr=r(cBe," (BERT model)"),cBe.forEach(t),rCr=i(yGe),TE=n(yGe,"LI",{});var fBe=s(TE);Nve=n(fBe,"STRONG",{});var M5t=s(Nve);tCr=r(M5t,"mobilebert"),M5t.forEach(t),aCr=r(fBe," \u2014 "),$U=n(fBe,"A",{href:!0});var E5t=s($U);nCr=r(E5t,"TFMobileBertForNextSentencePrediction"),E5t.forEach(t),sCr=r(fBe," (MobileBERT model)"),fBe.forEach(t),yGe.forEach(t),lCr=i($l),T(ME.$$.fragment,$l),$l.forEach(t),xl.forEach(t),Tje=i(f),hc=n(f,"H2",{class:!0});var LGe=s(hc);EE=n(LGe,"A",{id:!0,class:!0,href:!0});var C5t=s(EE);jve=n(C5t,"SPAN",{});var w5t=s(jve);T(e9.$$.fragment,w5t),w5t.forEach(t),C5t.forEach(t),iCr=i(LGe),Dve=n(LGe,"SPAN",{});var A5t=s(Dve);dCr=r(A5t,"TFAutoModelForTableQuestionAnswering"),A5t.forEach(t),LGe.forEach(t),Mje=i(f),sr=n(f,"DIV",{class:!0});var kl=s(sr);T(o9.$$.fragment,kl),cCr=i(kl),pc=n(kl,"P",{});var Aee=s(pc);fCr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),kU=n(Aee,"A",{href:!0});var y5t=s(kU);mCr=r(y5t,"from_pretrained()"),y5t.forEach(t),gCr=r(Aee," class method or the "),SU=n(Aee,"A",{href:!0});var L5t=s(SU);hCr=r(L5t,"from_config()"),L5t.forEach(t),pCr=r(Aee,` class
method.`),Aee.forEach(t),uCr=i(kl),r9=n(kl,"P",{});var xGe=s(r9);_Cr=r(xGe,"This class cannot be instantiated directly using "),Gve=n(xGe,"CODE",{});var x5t=s(Gve);bCr=r(x5t,"__init__()"),x5t.forEach(t),vCr=r(xGe," (throws an error)."),xGe.forEach(t),FCr=i(kl),It=n(kl,"DIV",{class:!0});var VA=s(It);T(t9.$$.fragment,VA),TCr=i(VA),Ove=n(VA,"P",{});var $5t=s(Ove);MCr=r($5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$5t.forEach(t),ECr=i(VA),uc=n(VA,"P",{});var yee=s(uc);CCr=r(yee,`Note:
Loading a model from its configuration file does `),Vve=n(yee,"STRONG",{});var k5t=s(Vve);wCr=r(k5t,"not"),k5t.forEach(t),ACr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(yee,"A",{href:!0});var S5t=s(RU);yCr=r(S5t,"from_pretrained()"),S5t.forEach(t),LCr=r(yee," to load the model weights."),yee.forEach(t),xCr=i(VA),T(CE.$$.fragment,VA),VA.forEach(t),$Cr=i(kl),Pr=n(kl,"DIV",{class:!0});var Sl=s(Pr);T(a9.$$.fragment,Sl),kCr=i(Sl),Xve=n(Sl,"P",{});var R5t=s(Xve);SCr=r(R5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R5t.forEach(t),RCr=i(Sl),dn=n(Sl,"P",{});var XA=s(dn);PCr=r(XA,"The model class to instantiate is selected based on the "),zve=n(XA,"CODE",{});var P5t=s(zve);BCr=r(P5t,"model_type"),P5t.forEach(t),ICr=r(XA,` property of the config object (either
passed as an argument or loaded from `),Wve=n(XA,"CODE",{});var B5t=s(Wve);qCr=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),NCr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qve=n(XA,"CODE",{});var I5t=s(Qve);jCr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),DCr=r(XA,":"),XA.forEach(t),GCr=i(Sl),Hve=n(Sl,"UL",{});var q5t=s(Hve);wE=n(q5t,"LI",{});var mBe=s(wE);Uve=n(mBe,"STRONG",{});var N5t=s(Uve);OCr=r(N5t,"tapas"),N5t.forEach(t),VCr=r(mBe," \u2014 "),PU=n(mBe,"A",{href:!0});var j5t=s(PU);XCr=r(j5t,"TFTapasForQuestionAnswering"),j5t.forEach(t),zCr=r(mBe," (TAPAS model)"),mBe.forEach(t),q5t.forEach(t),WCr=i(Sl),T(AE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Eje=i(f),_c=n(f,"H2",{class:!0});var $Ge=s(_c);yE=n($Ge,"A",{id:!0,class:!0,href:!0});var D5t=s(yE);Jve=n(D5t,"SPAN",{});var G5t=s(Jve);T(n9.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),QCr=i($Ge),Yve=n($Ge,"SPAN",{});var O5t=s(Yve);HCr=r(O5t,"TFAutoModelForTokenClassification"),O5t.forEach(t),$Ge.forEach(t),Cje=i(f),lr=n(f,"DIV",{class:!0});var Rl=s(lr);T(s9.$$.fragment,Rl),UCr=i(Rl),bc=n(Rl,"P",{});var Lee=s(bc);JCr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BU=n(Lee,"A",{href:!0});var V5t=s(BU);YCr=r(V5t,"from_pretrained()"),V5t.forEach(t),KCr=r(Lee," class method or the "),IU=n(Lee,"A",{href:!0});var X5t=s(IU);ZCr=r(X5t,"from_config()"),X5t.forEach(t),e5r=r(Lee,` class
method.`),Lee.forEach(t),o5r=i(Rl),l9=n(Rl,"P",{});var kGe=s(l9);r5r=r(kGe,"This class cannot be instantiated directly using "),Kve=n(kGe,"CODE",{});var z5t=s(Kve);t5r=r(z5t,"__init__()"),z5t.forEach(t),a5r=r(kGe," (throws an error)."),kGe.forEach(t),n5r=i(Rl),qt=n(Rl,"DIV",{class:!0});var zA=s(qt);T(i9.$$.fragment,zA),s5r=i(zA),Zve=n(zA,"P",{});var W5t=s(Zve);l5r=r(W5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W5t.forEach(t),i5r=i(zA),vc=n(zA,"P",{});var xee=s(vc);d5r=r(xee,`Note:
Loading a model from its configuration file does `),eFe=n(xee,"STRONG",{});var Q5t=s(eFe);c5r=r(Q5t,"not"),Q5t.forEach(t),f5r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(xee,"A",{href:!0});var H5t=s(qU);m5r=r(H5t,"from_pretrained()"),H5t.forEach(t),g5r=r(xee," to load the model weights."),xee.forEach(t),h5r=i(zA),T(LE.$$.fragment,zA),zA.forEach(t),p5r=i(Rl),Br=n(Rl,"DIV",{class:!0});var Pl=s(Br);T(d9.$$.fragment,Pl),u5r=i(Pl),oFe=n(Pl,"P",{});var U5t=s(oFe);_5r=r(U5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U5t.forEach(t),b5r=i(Pl),cn=n(Pl,"P",{});var WA=s(cn);v5r=r(WA,"The model class to instantiate is selected based on the "),rFe=n(WA,"CODE",{});var J5t=s(rFe);F5r=r(J5t,"model_type"),J5t.forEach(t),T5r=r(WA,` property of the config object (either
passed as an argument or loaded from `),tFe=n(WA,"CODE",{});var Y5t=s(tFe);M5r=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),E5r=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(WA,"CODE",{});var K5t=s(aFe);C5r=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),w5r=r(WA,":"),WA.forEach(t),A5r=i(Pl),de=n(Pl,"UL",{});var me=s(de);xE=n(me,"LI",{});var gBe=s(xE);nFe=n(gBe,"STRONG",{});var Z5t=s(nFe);y5r=r(Z5t,"albert"),Z5t.forEach(t),L5r=r(gBe," \u2014 "),NU=n(gBe,"A",{href:!0});var e3t=s(NU);x5r=r(e3t,"TFAlbertForTokenClassification"),e3t.forEach(t),$5r=r(gBe," (ALBERT model)"),gBe.forEach(t),k5r=i(me),$E=n(me,"LI",{});var hBe=s($E);sFe=n(hBe,"STRONG",{});var o3t=s(sFe);S5r=r(o3t,"bert"),o3t.forEach(t),R5r=r(hBe," \u2014 "),jU=n(hBe,"A",{href:!0});var r3t=s(jU);P5r=r(r3t,"TFBertForTokenClassification"),r3t.forEach(t),B5r=r(hBe," (BERT model)"),hBe.forEach(t),I5r=i(me),kE=n(me,"LI",{});var pBe=s(kE);lFe=n(pBe,"STRONG",{});var t3t=s(lFe);q5r=r(t3t,"camembert"),t3t.forEach(t),N5r=r(pBe," \u2014 "),DU=n(pBe,"A",{href:!0});var a3t=s(DU);j5r=r(a3t,"TFCamembertForTokenClassification"),a3t.forEach(t),D5r=r(pBe," (CamemBERT model)"),pBe.forEach(t),G5r=i(me),SE=n(me,"LI",{});var uBe=s(SE);iFe=n(uBe,"STRONG",{});var n3t=s(iFe);O5r=r(n3t,"convbert"),n3t.forEach(t),V5r=r(uBe," \u2014 "),GU=n(uBe,"A",{href:!0});var s3t=s(GU);X5r=r(s3t,"TFConvBertForTokenClassification"),s3t.forEach(t),z5r=r(uBe," (ConvBERT model)"),uBe.forEach(t),W5r=i(me),RE=n(me,"LI",{});var _Be=s(RE);dFe=n(_Be,"STRONG",{});var l3t=s(dFe);Q5r=r(l3t,"deberta"),l3t.forEach(t),H5r=r(_Be," \u2014 "),OU=n(_Be,"A",{href:!0});var i3t=s(OU);U5r=r(i3t,"TFDebertaForTokenClassification"),i3t.forEach(t),J5r=r(_Be," (DeBERTa model)"),_Be.forEach(t),Y5r=i(me),PE=n(me,"LI",{});var bBe=s(PE);cFe=n(bBe,"STRONG",{});var d3t=s(cFe);K5r=r(d3t,"deberta-v2"),d3t.forEach(t),Z5r=r(bBe," \u2014 "),VU=n(bBe,"A",{href:!0});var c3t=s(VU);e3r=r(c3t,"TFDebertaV2ForTokenClassification"),c3t.forEach(t),o3r=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),r3r=i(me),BE=n(me,"LI",{});var vBe=s(BE);fFe=n(vBe,"STRONG",{});var f3t=s(fFe);t3r=r(f3t,"distilbert"),f3t.forEach(t),a3r=r(vBe," \u2014 "),XU=n(vBe,"A",{href:!0});var m3t=s(XU);n3r=r(m3t,"TFDistilBertForTokenClassification"),m3t.forEach(t),s3r=r(vBe," (DistilBERT model)"),vBe.forEach(t),l3r=i(me),IE=n(me,"LI",{});var FBe=s(IE);mFe=n(FBe,"STRONG",{});var g3t=s(mFe);i3r=r(g3t,"electra"),g3t.forEach(t),d3r=r(FBe," \u2014 "),zU=n(FBe,"A",{href:!0});var h3t=s(zU);c3r=r(h3t,"TFElectraForTokenClassification"),h3t.forEach(t),f3r=r(FBe," (ELECTRA model)"),FBe.forEach(t),m3r=i(me),qE=n(me,"LI",{});var TBe=s(qE);gFe=n(TBe,"STRONG",{});var p3t=s(gFe);g3r=r(p3t,"flaubert"),p3t.forEach(t),h3r=r(TBe," \u2014 "),WU=n(TBe,"A",{href:!0});var u3t=s(WU);p3r=r(u3t,"TFFlaubertForTokenClassification"),u3t.forEach(t),u3r=r(TBe," (FlauBERT model)"),TBe.forEach(t),_3r=i(me),NE=n(me,"LI",{});var MBe=s(NE);hFe=n(MBe,"STRONG",{});var _3t=s(hFe);b3r=r(_3t,"funnel"),_3t.forEach(t),v3r=r(MBe," \u2014 "),QU=n(MBe,"A",{href:!0});var b3t=s(QU);F3r=r(b3t,"TFFunnelForTokenClassification"),b3t.forEach(t),T3r=r(MBe," (Funnel Transformer model)"),MBe.forEach(t),M3r=i(me),jE=n(me,"LI",{});var EBe=s(jE);pFe=n(EBe,"STRONG",{});var v3t=s(pFe);E3r=r(v3t,"layoutlm"),v3t.forEach(t),C3r=r(EBe," \u2014 "),HU=n(EBe,"A",{href:!0});var F3t=s(HU);w3r=r(F3t,"TFLayoutLMForTokenClassification"),F3t.forEach(t),A3r=r(EBe," (LayoutLM model)"),EBe.forEach(t),y3r=i(me),DE=n(me,"LI",{});var CBe=s(DE);uFe=n(CBe,"STRONG",{});var T3t=s(uFe);L3r=r(T3t,"longformer"),T3t.forEach(t),x3r=r(CBe," \u2014 "),UU=n(CBe,"A",{href:!0});var M3t=s(UU);$3r=r(M3t,"TFLongformerForTokenClassification"),M3t.forEach(t),k3r=r(CBe," (Longformer model)"),CBe.forEach(t),S3r=i(me),GE=n(me,"LI",{});var wBe=s(GE);_Fe=n(wBe,"STRONG",{});var E3t=s(_Fe);R3r=r(E3t,"mobilebert"),E3t.forEach(t),P3r=r(wBe," \u2014 "),JU=n(wBe,"A",{href:!0});var C3t=s(JU);B3r=r(C3t,"TFMobileBertForTokenClassification"),C3t.forEach(t),I3r=r(wBe," (MobileBERT model)"),wBe.forEach(t),q3r=i(me),OE=n(me,"LI",{});var ABe=s(OE);bFe=n(ABe,"STRONG",{});var w3t=s(bFe);N3r=r(w3t,"mpnet"),w3t.forEach(t),j3r=r(ABe," \u2014 "),YU=n(ABe,"A",{href:!0});var A3t=s(YU);D3r=r(A3t,"TFMPNetForTokenClassification"),A3t.forEach(t),G3r=r(ABe," (MPNet model)"),ABe.forEach(t),O3r=i(me),VE=n(me,"LI",{});var yBe=s(VE);vFe=n(yBe,"STRONG",{});var y3t=s(vFe);V3r=r(y3t,"rembert"),y3t.forEach(t),X3r=r(yBe," \u2014 "),KU=n(yBe,"A",{href:!0});var L3t=s(KU);z3r=r(L3t,"TFRemBertForTokenClassification"),L3t.forEach(t),W3r=r(yBe," (RemBERT model)"),yBe.forEach(t),Q3r=i(me),XE=n(me,"LI",{});var LBe=s(XE);FFe=n(LBe,"STRONG",{});var x3t=s(FFe);H3r=r(x3t,"roberta"),x3t.forEach(t),U3r=r(LBe," \u2014 "),ZU=n(LBe,"A",{href:!0});var $3t=s(ZU);J3r=r($3t,"TFRobertaForTokenClassification"),$3t.forEach(t),Y3r=r(LBe," (RoBERTa model)"),LBe.forEach(t),K3r=i(me),zE=n(me,"LI",{});var xBe=s(zE);TFe=n(xBe,"STRONG",{});var k3t=s(TFe);Z3r=r(k3t,"roformer"),k3t.forEach(t),ewr=r(xBe," \u2014 "),eJ=n(xBe,"A",{href:!0});var S3t=s(eJ);owr=r(S3t,"TFRoFormerForTokenClassification"),S3t.forEach(t),rwr=r(xBe," (RoFormer model)"),xBe.forEach(t),twr=i(me),WE=n(me,"LI",{});var $Be=s(WE);MFe=n($Be,"STRONG",{});var R3t=s(MFe);awr=r(R3t,"xlm"),R3t.forEach(t),nwr=r($Be," \u2014 "),oJ=n($Be,"A",{href:!0});var P3t=s(oJ);swr=r(P3t,"TFXLMForTokenClassification"),P3t.forEach(t),lwr=r($Be," (XLM model)"),$Be.forEach(t),iwr=i(me),QE=n(me,"LI",{});var kBe=s(QE);EFe=n(kBe,"STRONG",{});var B3t=s(EFe);dwr=r(B3t,"xlm-roberta"),B3t.forEach(t),cwr=r(kBe," \u2014 "),rJ=n(kBe,"A",{href:!0});var I3t=s(rJ);fwr=r(I3t,"TFXLMRobertaForTokenClassification"),I3t.forEach(t),mwr=r(kBe," (XLM-RoBERTa model)"),kBe.forEach(t),gwr=i(me),HE=n(me,"LI",{});var SBe=s(HE);CFe=n(SBe,"STRONG",{});var q3t=s(CFe);hwr=r(q3t,"xlnet"),q3t.forEach(t),pwr=r(SBe," \u2014 "),tJ=n(SBe,"A",{href:!0});var N3t=s(tJ);uwr=r(N3t,"TFXLNetForTokenClassification"),N3t.forEach(t),_wr=r(SBe," (XLNet model)"),SBe.forEach(t),me.forEach(t),bwr=i(Pl),T(UE.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),wje=i(f),Fc=n(f,"H2",{class:!0});var SGe=s(Fc);JE=n(SGe,"A",{id:!0,class:!0,href:!0});var j3t=s(JE);wFe=n(j3t,"SPAN",{});var D3t=s(wFe);T(c9.$$.fragment,D3t),D3t.forEach(t),j3t.forEach(t),vwr=i(SGe),AFe=n(SGe,"SPAN",{});var G3t=s(AFe);Fwr=r(G3t,"TFAutoModelForQuestionAnswering"),G3t.forEach(t),SGe.forEach(t),Aje=i(f),ir=n(f,"DIV",{class:!0});var Bl=s(ir);T(f9.$$.fragment,Bl),Twr=i(Bl),Tc=n(Bl,"P",{});var $ee=s(Tc);Mwr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aJ=n($ee,"A",{href:!0});var O3t=s(aJ);Ewr=r(O3t,"from_pretrained()"),O3t.forEach(t),Cwr=r($ee," class method or the "),nJ=n($ee,"A",{href:!0});var V3t=s(nJ);wwr=r(V3t,"from_config()"),V3t.forEach(t),Awr=r($ee,` class
method.`),$ee.forEach(t),ywr=i(Bl),m9=n(Bl,"P",{});var RGe=s(m9);Lwr=r(RGe,"This class cannot be instantiated directly using "),yFe=n(RGe,"CODE",{});var X3t=s(yFe);xwr=r(X3t,"__init__()"),X3t.forEach(t),$wr=r(RGe," (throws an error)."),RGe.forEach(t),kwr=i(Bl),Nt=n(Bl,"DIV",{class:!0});var QA=s(Nt);T(g9.$$.fragment,QA),Swr=i(QA),LFe=n(QA,"P",{});var z3t=s(LFe);Rwr=r(z3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z3t.forEach(t),Pwr=i(QA),Mc=n(QA,"P",{});var kee=s(Mc);Bwr=r(kee,`Note:
Loading a model from its configuration file does `),xFe=n(kee,"STRONG",{});var W3t=s(xFe);Iwr=r(W3t,"not"),W3t.forEach(t),qwr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(kee,"A",{href:!0});var Q3t=s(sJ);Nwr=r(Q3t,"from_pretrained()"),Q3t.forEach(t),jwr=r(kee," to load the model weights."),kee.forEach(t),Dwr=i(QA),T(YE.$$.fragment,QA),QA.forEach(t),Gwr=i(Bl),Ir=n(Bl,"DIV",{class:!0});var Il=s(Ir);T(h9.$$.fragment,Il),Owr=i(Il),$Fe=n(Il,"P",{});var H3t=s($Fe);Vwr=r(H3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),H3t.forEach(t),Xwr=i(Il),fn=n(Il,"P",{});var HA=s(fn);zwr=r(HA,"The model class to instantiate is selected based on the "),kFe=n(HA,"CODE",{});var U3t=s(kFe);Wwr=r(U3t,"model_type"),U3t.forEach(t),Qwr=r(HA,` property of the config object (either
passed as an argument or loaded from `),SFe=n(HA,"CODE",{});var J3t=s(SFe);Hwr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),Uwr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(HA,"CODE",{});var Y3t=s(RFe);Jwr=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),Ywr=r(HA,":"),HA.forEach(t),Kwr=i(Il),ce=n(Il,"UL",{});var ge=s(ce);KE=n(ge,"LI",{});var RBe=s(KE);PFe=n(RBe,"STRONG",{});var K3t=s(PFe);Zwr=r(K3t,"albert"),K3t.forEach(t),eAr=r(RBe," \u2014 "),lJ=n(RBe,"A",{href:!0});var Z3t=s(lJ);oAr=r(Z3t,"TFAlbertForQuestionAnswering"),Z3t.forEach(t),rAr=r(RBe," (ALBERT model)"),RBe.forEach(t),tAr=i(ge),ZE=n(ge,"LI",{});var PBe=s(ZE);BFe=n(PBe,"STRONG",{});var ewt=s(BFe);aAr=r(ewt,"bert"),ewt.forEach(t),nAr=r(PBe," \u2014 "),iJ=n(PBe,"A",{href:!0});var owt=s(iJ);sAr=r(owt,"TFBertForQuestionAnswering"),owt.forEach(t),lAr=r(PBe," (BERT model)"),PBe.forEach(t),iAr=i(ge),eC=n(ge,"LI",{});var BBe=s(eC);IFe=n(BBe,"STRONG",{});var rwt=s(IFe);dAr=r(rwt,"camembert"),rwt.forEach(t),cAr=r(BBe," \u2014 "),dJ=n(BBe,"A",{href:!0});var twt=s(dJ);fAr=r(twt,"TFCamembertForQuestionAnswering"),twt.forEach(t),mAr=r(BBe," (CamemBERT model)"),BBe.forEach(t),gAr=i(ge),oC=n(ge,"LI",{});var IBe=s(oC);qFe=n(IBe,"STRONG",{});var awt=s(qFe);hAr=r(awt,"convbert"),awt.forEach(t),pAr=r(IBe," \u2014 "),cJ=n(IBe,"A",{href:!0});var nwt=s(cJ);uAr=r(nwt,"TFConvBertForQuestionAnswering"),nwt.forEach(t),_Ar=r(IBe," (ConvBERT model)"),IBe.forEach(t),bAr=i(ge),rC=n(ge,"LI",{});var qBe=s(rC);NFe=n(qBe,"STRONG",{});var swt=s(NFe);vAr=r(swt,"deberta"),swt.forEach(t),FAr=r(qBe," \u2014 "),fJ=n(qBe,"A",{href:!0});var lwt=s(fJ);TAr=r(lwt,"TFDebertaForQuestionAnswering"),lwt.forEach(t),MAr=r(qBe," (DeBERTa model)"),qBe.forEach(t),EAr=i(ge),tC=n(ge,"LI",{});var NBe=s(tC);jFe=n(NBe,"STRONG",{});var iwt=s(jFe);CAr=r(iwt,"deberta-v2"),iwt.forEach(t),wAr=r(NBe," \u2014 "),mJ=n(NBe,"A",{href:!0});var dwt=s(mJ);AAr=r(dwt,"TFDebertaV2ForQuestionAnswering"),dwt.forEach(t),yAr=r(NBe," (DeBERTa-v2 model)"),NBe.forEach(t),LAr=i(ge),aC=n(ge,"LI",{});var jBe=s(aC);DFe=n(jBe,"STRONG",{});var cwt=s(DFe);xAr=r(cwt,"distilbert"),cwt.forEach(t),$Ar=r(jBe," \u2014 "),gJ=n(jBe,"A",{href:!0});var fwt=s(gJ);kAr=r(fwt,"TFDistilBertForQuestionAnswering"),fwt.forEach(t),SAr=r(jBe," (DistilBERT model)"),jBe.forEach(t),RAr=i(ge),nC=n(ge,"LI",{});var DBe=s(nC);GFe=n(DBe,"STRONG",{});var mwt=s(GFe);PAr=r(mwt,"electra"),mwt.forEach(t),BAr=r(DBe," \u2014 "),hJ=n(DBe,"A",{href:!0});var gwt=s(hJ);IAr=r(gwt,"TFElectraForQuestionAnswering"),gwt.forEach(t),qAr=r(DBe," (ELECTRA model)"),DBe.forEach(t),NAr=i(ge),sC=n(ge,"LI",{});var GBe=s(sC);OFe=n(GBe,"STRONG",{});var hwt=s(OFe);jAr=r(hwt,"flaubert"),hwt.forEach(t),DAr=r(GBe," \u2014 "),pJ=n(GBe,"A",{href:!0});var pwt=s(pJ);GAr=r(pwt,"TFFlaubertForQuestionAnsweringSimple"),pwt.forEach(t),OAr=r(GBe," (FlauBERT model)"),GBe.forEach(t),VAr=i(ge),lC=n(ge,"LI",{});var OBe=s(lC);VFe=n(OBe,"STRONG",{});var uwt=s(VFe);XAr=r(uwt,"funnel"),uwt.forEach(t),zAr=r(OBe," \u2014 "),uJ=n(OBe,"A",{href:!0});var _wt=s(uJ);WAr=r(_wt,"TFFunnelForQuestionAnswering"),_wt.forEach(t),QAr=r(OBe," (Funnel Transformer model)"),OBe.forEach(t),HAr=i(ge),iC=n(ge,"LI",{});var VBe=s(iC);XFe=n(VBe,"STRONG",{});var bwt=s(XFe);UAr=r(bwt,"gptj"),bwt.forEach(t),JAr=r(VBe," \u2014 "),_J=n(VBe,"A",{href:!0});var vwt=s(_J);YAr=r(vwt,"TFGPTJForQuestionAnswering"),vwt.forEach(t),KAr=r(VBe," (GPT-J model)"),VBe.forEach(t),ZAr=i(ge),dC=n(ge,"LI",{});var XBe=s(dC);zFe=n(XBe,"STRONG",{});var Fwt=s(zFe);eyr=r(Fwt,"longformer"),Fwt.forEach(t),oyr=r(XBe," \u2014 "),bJ=n(XBe,"A",{href:!0});var Twt=s(bJ);ryr=r(Twt,"TFLongformerForQuestionAnswering"),Twt.forEach(t),tyr=r(XBe," (Longformer model)"),XBe.forEach(t),ayr=i(ge),cC=n(ge,"LI",{});var zBe=s(cC);WFe=n(zBe,"STRONG",{});var Mwt=s(WFe);nyr=r(Mwt,"mobilebert"),Mwt.forEach(t),syr=r(zBe," \u2014 "),vJ=n(zBe,"A",{href:!0});var Ewt=s(vJ);lyr=r(Ewt,"TFMobileBertForQuestionAnswering"),Ewt.forEach(t),iyr=r(zBe," (MobileBERT model)"),zBe.forEach(t),dyr=i(ge),fC=n(ge,"LI",{});var WBe=s(fC);QFe=n(WBe,"STRONG",{});var Cwt=s(QFe);cyr=r(Cwt,"mpnet"),Cwt.forEach(t),fyr=r(WBe," \u2014 "),FJ=n(WBe,"A",{href:!0});var wwt=s(FJ);myr=r(wwt,"TFMPNetForQuestionAnswering"),wwt.forEach(t),gyr=r(WBe," (MPNet model)"),WBe.forEach(t),hyr=i(ge),mC=n(ge,"LI",{});var QBe=s(mC);HFe=n(QBe,"STRONG",{});var Awt=s(HFe);pyr=r(Awt,"rembert"),Awt.forEach(t),uyr=r(QBe," \u2014 "),TJ=n(QBe,"A",{href:!0});var ywt=s(TJ);_yr=r(ywt,"TFRemBertForQuestionAnswering"),ywt.forEach(t),byr=r(QBe," (RemBERT model)"),QBe.forEach(t),vyr=i(ge),gC=n(ge,"LI",{});var HBe=s(gC);UFe=n(HBe,"STRONG",{});var Lwt=s(UFe);Fyr=r(Lwt,"roberta"),Lwt.forEach(t),Tyr=r(HBe," \u2014 "),MJ=n(HBe,"A",{href:!0});var xwt=s(MJ);Myr=r(xwt,"TFRobertaForQuestionAnswering"),xwt.forEach(t),Eyr=r(HBe," (RoBERTa model)"),HBe.forEach(t),Cyr=i(ge),hC=n(ge,"LI",{});var UBe=s(hC);JFe=n(UBe,"STRONG",{});var $wt=s(JFe);wyr=r($wt,"roformer"),$wt.forEach(t),Ayr=r(UBe," \u2014 "),EJ=n(UBe,"A",{href:!0});var kwt=s(EJ);yyr=r(kwt,"TFRoFormerForQuestionAnswering"),kwt.forEach(t),Lyr=r(UBe," (RoFormer model)"),UBe.forEach(t),xyr=i(ge),pC=n(ge,"LI",{});var JBe=s(pC);YFe=n(JBe,"STRONG",{});var Swt=s(YFe);$yr=r(Swt,"xlm"),Swt.forEach(t),kyr=r(JBe," \u2014 "),CJ=n(JBe,"A",{href:!0});var Rwt=s(CJ);Syr=r(Rwt,"TFXLMForQuestionAnsweringSimple"),Rwt.forEach(t),Ryr=r(JBe," (XLM model)"),JBe.forEach(t),Pyr=i(ge),uC=n(ge,"LI",{});var YBe=s(uC);KFe=n(YBe,"STRONG",{});var Pwt=s(KFe);Byr=r(Pwt,"xlm-roberta"),Pwt.forEach(t),Iyr=r(YBe," \u2014 "),wJ=n(YBe,"A",{href:!0});var Bwt=s(wJ);qyr=r(Bwt,"TFXLMRobertaForQuestionAnswering"),Bwt.forEach(t),Nyr=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),jyr=i(ge),_C=n(ge,"LI",{});var KBe=s(_C);ZFe=n(KBe,"STRONG",{});var Iwt=s(ZFe);Dyr=r(Iwt,"xlnet"),Iwt.forEach(t),Gyr=r(KBe," \u2014 "),AJ=n(KBe,"A",{href:!0});var qwt=s(AJ);Oyr=r(qwt,"TFXLNetForQuestionAnsweringSimple"),qwt.forEach(t),Vyr=r(KBe," (XLNet model)"),KBe.forEach(t),ge.forEach(t),Xyr=i(Il),T(bC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),yje=i(f),Ec=n(f,"H2",{class:!0});var PGe=s(Ec);vC=n(PGe,"A",{id:!0,class:!0,href:!0});var Nwt=s(vC);e6e=n(Nwt,"SPAN",{});var jwt=s(e6e);T(p9.$$.fragment,jwt),jwt.forEach(t),Nwt.forEach(t),zyr=i(PGe),o6e=n(PGe,"SPAN",{});var Dwt=s(o6e);Wyr=r(Dwt,"TFAutoModelForVision2Seq"),Dwt.forEach(t),PGe.forEach(t),Lje=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(u9.$$.fragment,ql),Qyr=i(ql),Cc=n(ql,"P",{});var See=s(Cc);Hyr=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yJ=n(See,"A",{href:!0});var Gwt=s(yJ);Uyr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),Jyr=r(See," class method or the "),LJ=n(See,"A",{href:!0});var Owt=s(LJ);Yyr=r(Owt,"from_config()"),Owt.forEach(t),Kyr=r(See,` class
method.`),See.forEach(t),Zyr=i(ql),_9=n(ql,"P",{});var BGe=s(_9);eLr=r(BGe,"This class cannot be instantiated directly using "),r6e=n(BGe,"CODE",{});var Vwt=s(r6e);oLr=r(Vwt,"__init__()"),Vwt.forEach(t),rLr=r(BGe," (throws an error)."),BGe.forEach(t),tLr=i(ql),jt=n(ql,"DIV",{class:!0});var UA=s(jt);T(b9.$$.fragment,UA),aLr=i(UA),t6e=n(UA,"P",{});var Xwt=s(t6e);nLr=r(Xwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xwt.forEach(t),sLr=i(UA),wc=n(UA,"P",{});var Ree=s(wc);lLr=r(Ree,`Note:
Loading a model from its configuration file does `),a6e=n(Ree,"STRONG",{});var zwt=s(a6e);iLr=r(zwt,"not"),zwt.forEach(t),dLr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),xJ=n(Ree,"A",{href:!0});var Wwt=s(xJ);cLr=r(Wwt,"from_pretrained()"),Wwt.forEach(t),fLr=r(Ree," to load the model weights."),Ree.forEach(t),mLr=i(UA),T(FC.$$.fragment,UA),UA.forEach(t),gLr=i(ql),qr=n(ql,"DIV",{class:!0});var Nl=s(qr);T(v9.$$.fragment,Nl),hLr=i(Nl),n6e=n(Nl,"P",{});var Qwt=s(n6e);pLr=r(Qwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qwt.forEach(t),uLr=i(Nl),mn=n(Nl,"P",{});var JA=s(mn);_Lr=r(JA,"The model class to instantiate is selected based on the "),s6e=n(JA,"CODE",{});var Hwt=s(s6e);bLr=r(Hwt,"model_type"),Hwt.forEach(t),vLr=r(JA,` property of the config object (either
passed as an argument or loaded from `),l6e=n(JA,"CODE",{});var Uwt=s(l6e);FLr=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),TLr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=n(JA,"CODE",{});var Jwt=s(i6e);MLr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),ELr=r(JA,":"),JA.forEach(t),CLr=i(Nl),d6e=n(Nl,"UL",{});var Ywt=s(d6e);TC=n(Ywt,"LI",{});var ZBe=s(TC);c6e=n(ZBe,"STRONG",{});var Kwt=s(c6e);wLr=r(Kwt,"vision-encoder-decoder"),Kwt.forEach(t),ALr=r(ZBe," \u2014 "),$J=n(ZBe,"A",{href:!0});var Zwt=s($J);yLr=r(Zwt,"TFVisionEncoderDecoderModel"),Zwt.forEach(t),LLr=r(ZBe," (Vision Encoder decoder model)"),ZBe.forEach(t),Ywt.forEach(t),xLr=i(Nl),T(MC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),xje=i(f),Ac=n(f,"H2",{class:!0});var IGe=s(Ac);EC=n(IGe,"A",{id:!0,class:!0,href:!0});var eAt=s(EC);f6e=n(eAt,"SPAN",{});var oAt=s(f6e);T(F9.$$.fragment,oAt),oAt.forEach(t),eAt.forEach(t),$Lr=i(IGe),m6e=n(IGe,"SPAN",{});var rAt=s(m6e);kLr=r(rAt,"TFAutoModelForSpeechSeq2Seq"),rAt.forEach(t),IGe.forEach(t),$je=i(f),cr=n(f,"DIV",{class:!0});var jl=s(cr);T(T9.$$.fragment,jl),SLr=i(jl),yc=n(jl,"P",{});var Pee=s(yc);RLr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kJ=n(Pee,"A",{href:!0});var tAt=s(kJ);PLr=r(tAt,"from_pretrained()"),tAt.forEach(t),BLr=r(Pee," class method or the "),SJ=n(Pee,"A",{href:!0});var aAt=s(SJ);ILr=r(aAt,"from_config()"),aAt.forEach(t),qLr=r(Pee,` class
method.`),Pee.forEach(t),NLr=i(jl),M9=n(jl,"P",{});var qGe=s(M9);jLr=r(qGe,"This class cannot be instantiated directly using "),g6e=n(qGe,"CODE",{});var nAt=s(g6e);DLr=r(nAt,"__init__()"),nAt.forEach(t),GLr=r(qGe," (throws an error)."),qGe.forEach(t),OLr=i(jl),Dt=n(jl,"DIV",{class:!0});var YA=s(Dt);T(E9.$$.fragment,YA),VLr=i(YA),h6e=n(YA,"P",{});var sAt=s(h6e);XLr=r(sAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sAt.forEach(t),zLr=i(YA),Lc=n(YA,"P",{});var Bee=s(Lc);WLr=r(Bee,`Note:
Loading a model from its configuration file does `),p6e=n(Bee,"STRONG",{});var lAt=s(p6e);QLr=r(lAt,"not"),lAt.forEach(t),HLr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Bee,"A",{href:!0});var iAt=s(RJ);ULr=r(iAt,"from_pretrained()"),iAt.forEach(t),JLr=r(Bee," to load the model weights."),Bee.forEach(t),YLr=i(YA),T(CC.$$.fragment,YA),YA.forEach(t),KLr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T(C9.$$.fragment,Dl),ZLr=i(Dl),u6e=n(Dl,"P",{});var dAt=s(u6e);e8r=r(dAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dAt.forEach(t),o8r=i(Dl),gn=n(Dl,"P",{});var KA=s(gn);r8r=r(KA,"The model class to instantiate is selected based on the "),_6e=n(KA,"CODE",{});var cAt=s(_6e);t8r=r(cAt,"model_type"),cAt.forEach(t),a8r=r(KA,` property of the config object (either
passed as an argument or loaded from `),b6e=n(KA,"CODE",{});var fAt=s(b6e);n8r=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),s8r=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v6e=n(KA,"CODE",{});var mAt=s(v6e);l8r=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),i8r=r(KA,":"),KA.forEach(t),d8r=i(Dl),F6e=n(Dl,"UL",{});var gAt=s(F6e);wC=n(gAt,"LI",{});var eIe=s(wC);T6e=n(eIe,"STRONG",{});var hAt=s(T6e);c8r=r(hAt,"speech_to_text"),hAt.forEach(t),f8r=r(eIe," \u2014 "),PJ=n(eIe,"A",{href:!0});var pAt=s(PJ);m8r=r(pAt,"TFSpeech2TextForConditionalGeneration"),pAt.forEach(t),g8r=r(eIe," (Speech2Text model)"),eIe.forEach(t),gAt.forEach(t),h8r=i(Dl),T(AC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),kje=i(f),xc=n(f,"H2",{class:!0});var NGe=s(xc);yC=n(NGe,"A",{id:!0,class:!0,href:!0});var uAt=s(yC);M6e=n(uAt,"SPAN",{});var _At=s(M6e);T(w9.$$.fragment,_At),_At.forEach(t),uAt.forEach(t),p8r=i(NGe),E6e=n(NGe,"SPAN",{});var bAt=s(E6e);u8r=r(bAt,"FlaxAutoModel"),bAt.forEach(t),NGe.forEach(t),Sje=i(f),fr=n(f,"DIV",{class:!0});var Gl=s(fr);T(A9.$$.fragment,Gl),_8r=i(Gl),$c=n(Gl,"P",{});var Iee=s($c);b8r=r(Iee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),BJ=n(Iee,"A",{href:!0});var vAt=s(BJ);v8r=r(vAt,"from_pretrained()"),vAt.forEach(t),F8r=r(Iee," class method or the "),IJ=n(Iee,"A",{href:!0});var FAt=s(IJ);T8r=r(FAt,"from_config()"),FAt.forEach(t),M8r=r(Iee,` class
method.`),Iee.forEach(t),E8r=i(Gl),y9=n(Gl,"P",{});var jGe=s(y9);C8r=r(jGe,"This class cannot be instantiated directly using "),C6e=n(jGe,"CODE",{});var TAt=s(C6e);w8r=r(TAt,"__init__()"),TAt.forEach(t),A8r=r(jGe," (throws an error)."),jGe.forEach(t),y8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var ZA=s(Gt);T(L9.$$.fragment,ZA),L8r=i(ZA),w6e=n(ZA,"P",{});var MAt=s(w6e);x8r=r(MAt,"Instantiates one of the base model classes of the library from a configuration."),MAt.forEach(t),$8r=i(ZA),kc=n(ZA,"P",{});var qee=s(kc);k8r=r(qee,`Note:
Loading a model from its configuration file does `),A6e=n(qee,"STRONG",{});var EAt=s(A6e);S8r=r(EAt,"not"),EAt.forEach(t),R8r=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(qee,"A",{href:!0});var CAt=s(qJ);P8r=r(CAt,"from_pretrained()"),CAt.forEach(t),B8r=r(qee," to load the model weights."),qee.forEach(t),I8r=i(ZA),T(LC.$$.fragment,ZA),ZA.forEach(t),q8r=i(Gl),jr=n(Gl,"DIV",{class:!0});var Ol=s(jr);T(x9.$$.fragment,Ol),N8r=i(Ol),y6e=n(Ol,"P",{});var wAt=s(y6e);j8r=r(wAt,"Instantiate one of the base model classes of the library from a pretrained model."),wAt.forEach(t),D8r=i(Ol),hn=n(Ol,"P",{});var ey=s(hn);G8r=r(ey,"The model class to instantiate is selected based on the "),L6e=n(ey,"CODE",{});var AAt=s(L6e);O8r=r(AAt,"model_type"),AAt.forEach(t),V8r=r(ey,` property of the config object (either
passed as an argument or loaded from `),x6e=n(ey,"CODE",{});var yAt=s(x6e);X8r=r(yAt,"pretrained_model_name_or_path"),yAt.forEach(t),z8r=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(ey,"CODE",{});var LAt=s($6e);W8r=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),Q8r=r(ey,":"),ey.forEach(t),H8r=i(Ol),te=n(Ol,"UL",{});var ne=s(te);xC=n(ne,"LI",{});var oIe=s(xC);k6e=n(oIe,"STRONG",{});var xAt=s(k6e);U8r=r(xAt,"albert"),xAt.forEach(t),J8r=r(oIe," \u2014 "),NJ=n(oIe,"A",{href:!0});var $At=s(NJ);Y8r=r($At,"FlaxAlbertModel"),$At.forEach(t),K8r=r(oIe," (ALBERT model)"),oIe.forEach(t),Z8r=i(ne),$C=n(ne,"LI",{});var rIe=s($C);S6e=n(rIe,"STRONG",{});var kAt=s(S6e);e7r=r(kAt,"bart"),kAt.forEach(t),o7r=r(rIe," \u2014 "),jJ=n(rIe,"A",{href:!0});var SAt=s(jJ);r7r=r(SAt,"FlaxBartModel"),SAt.forEach(t),t7r=r(rIe," (BART model)"),rIe.forEach(t),a7r=i(ne),kC=n(ne,"LI",{});var tIe=s(kC);R6e=n(tIe,"STRONG",{});var RAt=s(R6e);n7r=r(RAt,"beit"),RAt.forEach(t),s7r=r(tIe," \u2014 "),DJ=n(tIe,"A",{href:!0});var PAt=s(DJ);l7r=r(PAt,"FlaxBeitModel"),PAt.forEach(t),i7r=r(tIe," (BEiT model)"),tIe.forEach(t),d7r=i(ne),SC=n(ne,"LI",{});var aIe=s(SC);P6e=n(aIe,"STRONG",{});var BAt=s(P6e);c7r=r(BAt,"bert"),BAt.forEach(t),f7r=r(aIe," \u2014 "),GJ=n(aIe,"A",{href:!0});var IAt=s(GJ);m7r=r(IAt,"FlaxBertModel"),IAt.forEach(t),g7r=r(aIe," (BERT model)"),aIe.forEach(t),h7r=i(ne),RC=n(ne,"LI",{});var nIe=s(RC);B6e=n(nIe,"STRONG",{});var qAt=s(B6e);p7r=r(qAt,"big_bird"),qAt.forEach(t),u7r=r(nIe," \u2014 "),OJ=n(nIe,"A",{href:!0});var NAt=s(OJ);_7r=r(NAt,"FlaxBigBirdModel"),NAt.forEach(t),b7r=r(nIe," (BigBird model)"),nIe.forEach(t),v7r=i(ne),PC=n(ne,"LI",{});var sIe=s(PC);I6e=n(sIe,"STRONG",{});var jAt=s(I6e);F7r=r(jAt,"blenderbot"),jAt.forEach(t),T7r=r(sIe," \u2014 "),VJ=n(sIe,"A",{href:!0});var DAt=s(VJ);M7r=r(DAt,"FlaxBlenderbotModel"),DAt.forEach(t),E7r=r(sIe," (Blenderbot model)"),sIe.forEach(t),C7r=i(ne),BC=n(ne,"LI",{});var lIe=s(BC);q6e=n(lIe,"STRONG",{});var GAt=s(q6e);w7r=r(GAt,"blenderbot-small"),GAt.forEach(t),A7r=r(lIe," \u2014 "),XJ=n(lIe,"A",{href:!0});var OAt=s(XJ);y7r=r(OAt,"FlaxBlenderbotSmallModel"),OAt.forEach(t),L7r=r(lIe," (BlenderbotSmall model)"),lIe.forEach(t),x7r=i(ne),IC=n(ne,"LI",{});var iIe=s(IC);N6e=n(iIe,"STRONG",{});var VAt=s(N6e);$7r=r(VAt,"clip"),VAt.forEach(t),k7r=r(iIe," \u2014 "),zJ=n(iIe,"A",{href:!0});var XAt=s(zJ);S7r=r(XAt,"FlaxCLIPModel"),XAt.forEach(t),R7r=r(iIe," (CLIP model)"),iIe.forEach(t),P7r=i(ne),qC=n(ne,"LI",{});var dIe=s(qC);j6e=n(dIe,"STRONG",{});var zAt=s(j6e);B7r=r(zAt,"distilbert"),zAt.forEach(t),I7r=r(dIe," \u2014 "),WJ=n(dIe,"A",{href:!0});var WAt=s(WJ);q7r=r(WAt,"FlaxDistilBertModel"),WAt.forEach(t),N7r=r(dIe," (DistilBERT model)"),dIe.forEach(t),j7r=i(ne),NC=n(ne,"LI",{});var cIe=s(NC);D6e=n(cIe,"STRONG",{});var QAt=s(D6e);D7r=r(QAt,"electra"),QAt.forEach(t),G7r=r(cIe," \u2014 "),QJ=n(cIe,"A",{href:!0});var HAt=s(QJ);O7r=r(HAt,"FlaxElectraModel"),HAt.forEach(t),V7r=r(cIe," (ELECTRA model)"),cIe.forEach(t),X7r=i(ne),jC=n(ne,"LI",{});var fIe=s(jC);G6e=n(fIe,"STRONG",{});var UAt=s(G6e);z7r=r(UAt,"gpt2"),UAt.forEach(t),W7r=r(fIe," \u2014 "),HJ=n(fIe,"A",{href:!0});var JAt=s(HJ);Q7r=r(JAt,"FlaxGPT2Model"),JAt.forEach(t),H7r=r(fIe," (OpenAI GPT-2 model)"),fIe.forEach(t),U7r=i(ne),DC=n(ne,"LI",{});var mIe=s(DC);O6e=n(mIe,"STRONG",{});var YAt=s(O6e);J7r=r(YAt,"gpt_neo"),YAt.forEach(t),Y7r=r(mIe," \u2014 "),UJ=n(mIe,"A",{href:!0});var KAt=s(UJ);K7r=r(KAt,"FlaxGPTNeoModel"),KAt.forEach(t),Z7r=r(mIe," (GPT Neo model)"),mIe.forEach(t),e9r=i(ne),GC=n(ne,"LI",{});var gIe=s(GC);V6e=n(gIe,"STRONG",{});var ZAt=s(V6e);o9r=r(ZAt,"gptj"),ZAt.forEach(t),r9r=r(gIe," \u2014 "),JJ=n(gIe,"A",{href:!0});var eyt=s(JJ);t9r=r(eyt,"FlaxGPTJModel"),eyt.forEach(t),a9r=r(gIe," (GPT-J model)"),gIe.forEach(t),n9r=i(ne),OC=n(ne,"LI",{});var hIe=s(OC);X6e=n(hIe,"STRONG",{});var oyt=s(X6e);s9r=r(oyt,"marian"),oyt.forEach(t),l9r=r(hIe," \u2014 "),YJ=n(hIe,"A",{href:!0});var ryt=s(YJ);i9r=r(ryt,"FlaxMarianModel"),ryt.forEach(t),d9r=r(hIe," (Marian model)"),hIe.forEach(t),c9r=i(ne),VC=n(ne,"LI",{});var pIe=s(VC);z6e=n(pIe,"STRONG",{});var tyt=s(z6e);f9r=r(tyt,"mbart"),tyt.forEach(t),m9r=r(pIe," \u2014 "),KJ=n(pIe,"A",{href:!0});var ayt=s(KJ);g9r=r(ayt,"FlaxMBartModel"),ayt.forEach(t),h9r=r(pIe," (mBART model)"),pIe.forEach(t),p9r=i(ne),XC=n(ne,"LI",{});var uIe=s(XC);W6e=n(uIe,"STRONG",{});var nyt=s(W6e);u9r=r(nyt,"mt5"),nyt.forEach(t),_9r=r(uIe," \u2014 "),ZJ=n(uIe,"A",{href:!0});var syt=s(ZJ);b9r=r(syt,"FlaxMT5Model"),syt.forEach(t),v9r=r(uIe," (mT5 model)"),uIe.forEach(t),F9r=i(ne),zC=n(ne,"LI",{});var _Ie=s(zC);Q6e=n(_Ie,"STRONG",{});var lyt=s(Q6e);T9r=r(lyt,"pegasus"),lyt.forEach(t),M9r=r(_Ie," \u2014 "),eY=n(_Ie,"A",{href:!0});var iyt=s(eY);E9r=r(iyt,"FlaxPegasusModel"),iyt.forEach(t),C9r=r(_Ie," (Pegasus model)"),_Ie.forEach(t),w9r=i(ne),WC=n(ne,"LI",{});var bIe=s(WC);H6e=n(bIe,"STRONG",{});var dyt=s(H6e);A9r=r(dyt,"roberta"),dyt.forEach(t),y9r=r(bIe," \u2014 "),oY=n(bIe,"A",{href:!0});var cyt=s(oY);L9r=r(cyt,"FlaxRobertaModel"),cyt.forEach(t),x9r=r(bIe," (RoBERTa model)"),bIe.forEach(t),$9r=i(ne),QC=n(ne,"LI",{});var vIe=s(QC);U6e=n(vIe,"STRONG",{});var fyt=s(U6e);k9r=r(fyt,"roformer"),fyt.forEach(t),S9r=r(vIe," \u2014 "),rY=n(vIe,"A",{href:!0});var myt=s(rY);R9r=r(myt,"FlaxRoFormerModel"),myt.forEach(t),P9r=r(vIe," (RoFormer model)"),vIe.forEach(t),B9r=i(ne),HC=n(ne,"LI",{});var FIe=s(HC);J6e=n(FIe,"STRONG",{});var gyt=s(J6e);I9r=r(gyt,"t5"),gyt.forEach(t),q9r=r(FIe," \u2014 "),tY=n(FIe,"A",{href:!0});var hyt=s(tY);N9r=r(hyt,"FlaxT5Model"),hyt.forEach(t),j9r=r(FIe," (T5 model)"),FIe.forEach(t),D9r=i(ne),UC=n(ne,"LI",{});var TIe=s(UC);Y6e=n(TIe,"STRONG",{});var pyt=s(Y6e);G9r=r(pyt,"vision-text-dual-encoder"),pyt.forEach(t),O9r=r(TIe," \u2014 "),aY=n(TIe,"A",{href:!0});var uyt=s(aY);V9r=r(uyt,"FlaxVisionTextDualEncoderModel"),uyt.forEach(t),X9r=r(TIe," (VisionTextDualEncoder model)"),TIe.forEach(t),z9r=i(ne),JC=n(ne,"LI",{});var MIe=s(JC);K6e=n(MIe,"STRONG",{});var _yt=s(K6e);W9r=r(_yt,"vit"),_yt.forEach(t),Q9r=r(MIe," \u2014 "),nY=n(MIe,"A",{href:!0});var byt=s(nY);H9r=r(byt,"FlaxViTModel"),byt.forEach(t),U9r=r(MIe," (ViT model)"),MIe.forEach(t),J9r=i(ne),YC=n(ne,"LI",{});var EIe=s(YC);Z6e=n(EIe,"STRONG",{});var vyt=s(Z6e);Y9r=r(vyt,"wav2vec2"),vyt.forEach(t),K9r=r(EIe," \u2014 "),sY=n(EIe,"A",{href:!0});var Fyt=s(sY);Z9r=r(Fyt,"FlaxWav2Vec2Model"),Fyt.forEach(t),exr=r(EIe," (Wav2Vec2 model)"),EIe.forEach(t),oxr=i(ne),KC=n(ne,"LI",{});var CIe=s(KC);eTe=n(CIe,"STRONG",{});var Tyt=s(eTe);rxr=r(Tyt,"xglm"),Tyt.forEach(t),txr=r(CIe," \u2014 "),lY=n(CIe,"A",{href:!0});var Myt=s(lY);axr=r(Myt,"FlaxXGLMModel"),Myt.forEach(t),nxr=r(CIe," (XGLM model)"),CIe.forEach(t),sxr=i(ne),ZC=n(ne,"LI",{});var wIe=s(ZC);oTe=n(wIe,"STRONG",{});var Eyt=s(oTe);lxr=r(Eyt,"xlm-roberta"),Eyt.forEach(t),ixr=r(wIe," \u2014 "),iY=n(wIe,"A",{href:!0});var Cyt=s(iY);dxr=r(Cyt,"FlaxXLMRobertaModel"),Cyt.forEach(t),cxr=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),ne.forEach(t),fxr=i(Ol),T(e5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),Rje=i(f),Sc=n(f,"H2",{class:!0});var DGe=s(Sc);o5=n(DGe,"A",{id:!0,class:!0,href:!0});var wyt=s(o5);rTe=n(wyt,"SPAN",{});var Ayt=s(rTe);T($9.$$.fragment,Ayt),Ayt.forEach(t),wyt.forEach(t),mxr=i(DGe),tTe=n(DGe,"SPAN",{});var yyt=s(tTe);gxr=r(yyt,"FlaxAutoModelForCausalLM"),yyt.forEach(t),DGe.forEach(t),Pje=i(f),mr=n(f,"DIV",{class:!0});var Vl=s(mr);T(k9.$$.fragment,Vl),hxr=i(Vl),Rc=n(Vl,"P",{});var Nee=s(Rc);pxr=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dY=n(Nee,"A",{href:!0});var Lyt=s(dY);uxr=r(Lyt,"from_pretrained()"),Lyt.forEach(t),_xr=r(Nee," class method or the "),cY=n(Nee,"A",{href:!0});var xyt=s(cY);bxr=r(xyt,"from_config()"),xyt.forEach(t),vxr=r(Nee,` class
method.`),Nee.forEach(t),Fxr=i(Vl),S9=n(Vl,"P",{});var GGe=s(S9);Txr=r(GGe,"This class cannot be instantiated directly using "),aTe=n(GGe,"CODE",{});var $yt=s(aTe);Mxr=r($yt,"__init__()"),$yt.forEach(t),Exr=r(GGe," (throws an error)."),GGe.forEach(t),Cxr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var oy=s(Ot);T(R9.$$.fragment,oy),wxr=i(oy),nTe=n(oy,"P",{});var kyt=s(nTe);Axr=r(kyt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kyt.forEach(t),yxr=i(oy),Pc=n(oy,"P",{});var jee=s(Pc);Lxr=r(jee,`Note:
Loading a model from its configuration file does `),sTe=n(jee,"STRONG",{});var Syt=s(sTe);xxr=r(Syt,"not"),Syt.forEach(t),$xr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(jee,"A",{href:!0});var Ryt=s(fY);kxr=r(Ryt,"from_pretrained()"),Ryt.forEach(t),Sxr=r(jee," to load the model weights."),jee.forEach(t),Rxr=i(oy),T(r5.$$.fragment,oy),oy.forEach(t),Pxr=i(Vl),Dr=n(Vl,"DIV",{class:!0});var Xl=s(Dr);T(P9.$$.fragment,Xl),Bxr=i(Xl),lTe=n(Xl,"P",{});var Pyt=s(lTe);Ixr=r(Pyt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pyt.forEach(t),qxr=i(Xl),pn=n(Xl,"P",{});var ry=s(pn);Nxr=r(ry,"The model class to instantiate is selected based on the "),iTe=n(ry,"CODE",{});var Byt=s(iTe);jxr=r(Byt,"model_type"),Byt.forEach(t),Dxr=r(ry,` property of the config object (either
passed as an argument or loaded from `),dTe=n(ry,"CODE",{});var Iyt=s(dTe);Gxr=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),Oxr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(ry,"CODE",{});var qyt=s(cTe);Vxr=r(qyt,"pretrained_model_name_or_path"),qyt.forEach(t),Xxr=r(ry,":"),ry.forEach(t),zxr=i(Xl),Re=n(Xl,"UL",{});var Xe=s(Re);t5=n(Xe,"LI",{});var AIe=s(t5);fTe=n(AIe,"STRONG",{});var Nyt=s(fTe);Wxr=r(Nyt,"bart"),Nyt.forEach(t),Qxr=r(AIe," \u2014 "),mY=n(AIe,"A",{href:!0});var jyt=s(mY);Hxr=r(jyt,"FlaxBartForCausalLM"),jyt.forEach(t),Uxr=r(AIe," (BART model)"),AIe.forEach(t),Jxr=i(Xe),a5=n(Xe,"LI",{});var yIe=s(a5);mTe=n(yIe,"STRONG",{});var Dyt=s(mTe);Yxr=r(Dyt,"bert"),Dyt.forEach(t),Kxr=r(yIe," \u2014 "),gY=n(yIe,"A",{href:!0});var Gyt=s(gY);Zxr=r(Gyt,"FlaxBertForCausalLM"),Gyt.forEach(t),e$r=r(yIe," (BERT model)"),yIe.forEach(t),o$r=i(Xe),n5=n(Xe,"LI",{});var LIe=s(n5);gTe=n(LIe,"STRONG",{});var Oyt=s(gTe);r$r=r(Oyt,"big_bird"),Oyt.forEach(t),t$r=r(LIe," \u2014 "),hY=n(LIe,"A",{href:!0});var Vyt=s(hY);a$r=r(Vyt,"FlaxBigBirdForCausalLM"),Vyt.forEach(t),n$r=r(LIe," (BigBird model)"),LIe.forEach(t),s$r=i(Xe),s5=n(Xe,"LI",{});var xIe=s(s5);hTe=n(xIe,"STRONG",{});var Xyt=s(hTe);l$r=r(Xyt,"electra"),Xyt.forEach(t),i$r=r(xIe," \u2014 "),pY=n(xIe,"A",{href:!0});var zyt=s(pY);d$r=r(zyt,"FlaxElectraForCausalLM"),zyt.forEach(t),c$r=r(xIe," (ELECTRA model)"),xIe.forEach(t),f$r=i(Xe),l5=n(Xe,"LI",{});var $Ie=s(l5);pTe=n($Ie,"STRONG",{});var Wyt=s(pTe);m$r=r(Wyt,"gpt2"),Wyt.forEach(t),g$r=r($Ie," \u2014 "),uY=n($Ie,"A",{href:!0});var Qyt=s(uY);h$r=r(Qyt,"FlaxGPT2LMHeadModel"),Qyt.forEach(t),p$r=r($Ie," (OpenAI GPT-2 model)"),$Ie.forEach(t),u$r=i(Xe),i5=n(Xe,"LI",{});var kIe=s(i5);uTe=n(kIe,"STRONG",{});var Hyt=s(uTe);_$r=r(Hyt,"gpt_neo"),Hyt.forEach(t),b$r=r(kIe," \u2014 "),_Y=n(kIe,"A",{href:!0});var Uyt=s(_Y);v$r=r(Uyt,"FlaxGPTNeoForCausalLM"),Uyt.forEach(t),F$r=r(kIe," (GPT Neo model)"),kIe.forEach(t),T$r=i(Xe),d5=n(Xe,"LI",{});var SIe=s(d5);_Te=n(SIe,"STRONG",{});var Jyt=s(_Te);M$r=r(Jyt,"gptj"),Jyt.forEach(t),E$r=r(SIe," \u2014 "),bY=n(SIe,"A",{href:!0});var Yyt=s(bY);C$r=r(Yyt,"FlaxGPTJForCausalLM"),Yyt.forEach(t),w$r=r(SIe," (GPT-J model)"),SIe.forEach(t),A$r=i(Xe),c5=n(Xe,"LI",{});var RIe=s(c5);bTe=n(RIe,"STRONG",{});var Kyt=s(bTe);y$r=r(Kyt,"roberta"),Kyt.forEach(t),L$r=r(RIe," \u2014 "),vY=n(RIe,"A",{href:!0});var Zyt=s(vY);x$r=r(Zyt,"FlaxRobertaForCausalLM"),Zyt.forEach(t),$$r=r(RIe," (RoBERTa model)"),RIe.forEach(t),k$r=i(Xe),f5=n(Xe,"LI",{});var PIe=s(f5);vTe=n(PIe,"STRONG",{});var eLt=s(vTe);S$r=r(eLt,"xglm"),eLt.forEach(t),R$r=r(PIe," \u2014 "),FY=n(PIe,"A",{href:!0});var oLt=s(FY);P$r=r(oLt,"FlaxXGLMForCausalLM"),oLt.forEach(t),B$r=r(PIe," (XGLM model)"),PIe.forEach(t),Xe.forEach(t),I$r=i(Xl),T(m5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),Bje=i(f),Bc=n(f,"H2",{class:!0});var OGe=s(Bc);g5=n(OGe,"A",{id:!0,class:!0,href:!0});var rLt=s(g5);FTe=n(rLt,"SPAN",{});var tLt=s(FTe);T(B9.$$.fragment,tLt),tLt.forEach(t),rLt.forEach(t),q$r=i(OGe),TTe=n(OGe,"SPAN",{});var aLt=s(TTe);N$r=r(aLt,"FlaxAutoModelForPreTraining"),aLt.forEach(t),OGe.forEach(t),Ije=i(f),gr=n(f,"DIV",{class:!0});var zl=s(gr);T(I9.$$.fragment,zl),j$r=i(zl),Ic=n(zl,"P",{});var Dee=s(Ic);D$r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TY=n(Dee,"A",{href:!0});var nLt=s(TY);G$r=r(nLt,"from_pretrained()"),nLt.forEach(t),O$r=r(Dee," class method or the "),MY=n(Dee,"A",{href:!0});var sLt=s(MY);V$r=r(sLt,"from_config()"),sLt.forEach(t),X$r=r(Dee,` class
method.`),Dee.forEach(t),z$r=i(zl),q9=n(zl,"P",{});var VGe=s(q9);W$r=r(VGe,"This class cannot be instantiated directly using "),MTe=n(VGe,"CODE",{});var lLt=s(MTe);Q$r=r(lLt,"__init__()"),lLt.forEach(t),H$r=r(VGe," (throws an error)."),VGe.forEach(t),U$r=i(zl),Vt=n(zl,"DIV",{class:!0});var ty=s(Vt);T(N9.$$.fragment,ty),J$r=i(ty),ETe=n(ty,"P",{});var iLt=s(ETe);Y$r=r(iLt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iLt.forEach(t),K$r=i(ty),qc=n(ty,"P",{});var Gee=s(qc);Z$r=r(Gee,`Note:
Loading a model from its configuration file does `),CTe=n(Gee,"STRONG",{});var dLt=s(CTe);ekr=r(dLt,"not"),dLt.forEach(t),okr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Gee,"A",{href:!0});var cLt=s(EY);rkr=r(cLt,"from_pretrained()"),cLt.forEach(t),tkr=r(Gee," to load the model weights."),Gee.forEach(t),akr=i(ty),T(h5.$$.fragment,ty),ty.forEach(t),nkr=i(zl),Gr=n(zl,"DIV",{class:!0});var Wl=s(Gr);T(j9.$$.fragment,Wl),skr=i(Wl),wTe=n(Wl,"P",{});var fLt=s(wTe);lkr=r(fLt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fLt.forEach(t),ikr=i(Wl),un=n(Wl,"P",{});var ay=s(un);dkr=r(ay,"The model class to instantiate is selected based on the "),ATe=n(ay,"CODE",{});var mLt=s(ATe);ckr=r(mLt,"model_type"),mLt.forEach(t),fkr=r(ay,` property of the config object (either
passed as an argument or loaded from `),yTe=n(ay,"CODE",{});var gLt=s(yTe);mkr=r(gLt,"pretrained_model_name_or_path"),gLt.forEach(t),gkr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(ay,"CODE",{});var hLt=s(LTe);hkr=r(hLt,"pretrained_model_name_or_path"),hLt.forEach(t),pkr=r(ay,":"),ay.forEach(t),ukr=i(Wl),Ee=n(Wl,"UL",{});var we=s(Ee);p5=n(we,"LI",{});var BIe=s(p5);xTe=n(BIe,"STRONG",{});var pLt=s(xTe);_kr=r(pLt,"albert"),pLt.forEach(t),bkr=r(BIe," \u2014 "),CY=n(BIe,"A",{href:!0});var uLt=s(CY);vkr=r(uLt,"FlaxAlbertForPreTraining"),uLt.forEach(t),Fkr=r(BIe," (ALBERT model)"),BIe.forEach(t),Tkr=i(we),u5=n(we,"LI",{});var IIe=s(u5);$Te=n(IIe,"STRONG",{});var _Lt=s($Te);Mkr=r(_Lt,"bart"),_Lt.forEach(t),Ekr=r(IIe," \u2014 "),wY=n(IIe,"A",{href:!0});var bLt=s(wY);Ckr=r(bLt,"FlaxBartForConditionalGeneration"),bLt.forEach(t),wkr=r(IIe," (BART model)"),IIe.forEach(t),Akr=i(we),_5=n(we,"LI",{});var qIe=s(_5);kTe=n(qIe,"STRONG",{});var vLt=s(kTe);ykr=r(vLt,"bert"),vLt.forEach(t),Lkr=r(qIe," \u2014 "),AY=n(qIe,"A",{href:!0});var FLt=s(AY);xkr=r(FLt,"FlaxBertForPreTraining"),FLt.forEach(t),$kr=r(qIe," (BERT model)"),qIe.forEach(t),kkr=i(we),b5=n(we,"LI",{});var NIe=s(b5);STe=n(NIe,"STRONG",{});var TLt=s(STe);Skr=r(TLt,"big_bird"),TLt.forEach(t),Rkr=r(NIe," \u2014 "),yY=n(NIe,"A",{href:!0});var MLt=s(yY);Pkr=r(MLt,"FlaxBigBirdForPreTraining"),MLt.forEach(t),Bkr=r(NIe," (BigBird model)"),NIe.forEach(t),Ikr=i(we),v5=n(we,"LI",{});var jIe=s(v5);RTe=n(jIe,"STRONG",{});var ELt=s(RTe);qkr=r(ELt,"electra"),ELt.forEach(t),Nkr=r(jIe," \u2014 "),LY=n(jIe,"A",{href:!0});var CLt=s(LY);jkr=r(CLt,"FlaxElectraForPreTraining"),CLt.forEach(t),Dkr=r(jIe," (ELECTRA model)"),jIe.forEach(t),Gkr=i(we),F5=n(we,"LI",{});var DIe=s(F5);PTe=n(DIe,"STRONG",{});var wLt=s(PTe);Okr=r(wLt,"mbart"),wLt.forEach(t),Vkr=r(DIe," \u2014 "),xY=n(DIe,"A",{href:!0});var ALt=s(xY);Xkr=r(ALt,"FlaxMBartForConditionalGeneration"),ALt.forEach(t),zkr=r(DIe," (mBART model)"),DIe.forEach(t),Wkr=i(we),T5=n(we,"LI",{});var GIe=s(T5);BTe=n(GIe,"STRONG",{});var yLt=s(BTe);Qkr=r(yLt,"mt5"),yLt.forEach(t),Hkr=r(GIe," \u2014 "),$Y=n(GIe,"A",{href:!0});var LLt=s($Y);Ukr=r(LLt,"FlaxMT5ForConditionalGeneration"),LLt.forEach(t),Jkr=r(GIe," (mT5 model)"),GIe.forEach(t),Ykr=i(we),M5=n(we,"LI",{});var OIe=s(M5);ITe=n(OIe,"STRONG",{});var xLt=s(ITe);Kkr=r(xLt,"roberta"),xLt.forEach(t),Zkr=r(OIe," \u2014 "),kY=n(OIe,"A",{href:!0});var $Lt=s(kY);eSr=r($Lt,"FlaxRobertaForMaskedLM"),$Lt.forEach(t),oSr=r(OIe," (RoBERTa model)"),OIe.forEach(t),rSr=i(we),E5=n(we,"LI",{});var VIe=s(E5);qTe=n(VIe,"STRONG",{});var kLt=s(qTe);tSr=r(kLt,"roformer"),kLt.forEach(t),aSr=r(VIe," \u2014 "),SY=n(VIe,"A",{href:!0});var SLt=s(SY);nSr=r(SLt,"FlaxRoFormerForMaskedLM"),SLt.forEach(t),sSr=r(VIe," (RoFormer model)"),VIe.forEach(t),lSr=i(we),C5=n(we,"LI",{});var XIe=s(C5);NTe=n(XIe,"STRONG",{});var RLt=s(NTe);iSr=r(RLt,"t5"),RLt.forEach(t),dSr=r(XIe," \u2014 "),RY=n(XIe,"A",{href:!0});var PLt=s(RY);cSr=r(PLt,"FlaxT5ForConditionalGeneration"),PLt.forEach(t),fSr=r(XIe," (T5 model)"),XIe.forEach(t),mSr=i(we),w5=n(we,"LI",{});var zIe=s(w5);jTe=n(zIe,"STRONG",{});var BLt=s(jTe);gSr=r(BLt,"wav2vec2"),BLt.forEach(t),hSr=r(zIe," \u2014 "),PY=n(zIe,"A",{href:!0});var ILt=s(PY);pSr=r(ILt,"FlaxWav2Vec2ForPreTraining"),ILt.forEach(t),uSr=r(zIe," (Wav2Vec2 model)"),zIe.forEach(t),_Sr=i(we),A5=n(we,"LI",{});var WIe=s(A5);DTe=n(WIe,"STRONG",{});var qLt=s(DTe);bSr=r(qLt,"xlm-roberta"),qLt.forEach(t),vSr=r(WIe," \u2014 "),BY=n(WIe,"A",{href:!0});var NLt=s(BY);FSr=r(NLt,"FlaxXLMRobertaForMaskedLM"),NLt.forEach(t),TSr=r(WIe," (XLM-RoBERTa model)"),WIe.forEach(t),we.forEach(t),MSr=i(Wl),T(y5.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),qje=i(f),Nc=n(f,"H2",{class:!0});var XGe=s(Nc);L5=n(XGe,"A",{id:!0,class:!0,href:!0});var jLt=s(L5);GTe=n(jLt,"SPAN",{});var DLt=s(GTe);T(D9.$$.fragment,DLt),DLt.forEach(t),jLt.forEach(t),ESr=i(XGe),OTe=n(XGe,"SPAN",{});var GLt=s(OTe);CSr=r(GLt,"FlaxAutoModelForMaskedLM"),GLt.forEach(t),XGe.forEach(t),Nje=i(f),hr=n(f,"DIV",{class:!0});var Ql=s(hr);T(G9.$$.fragment,Ql),wSr=i(Ql),jc=n(Ql,"P",{});var Oee=s(jc);ASr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IY=n(Oee,"A",{href:!0});var OLt=s(IY);ySr=r(OLt,"from_pretrained()"),OLt.forEach(t),LSr=r(Oee," class method or the "),qY=n(Oee,"A",{href:!0});var VLt=s(qY);xSr=r(VLt,"from_config()"),VLt.forEach(t),$Sr=r(Oee,` class
method.`),Oee.forEach(t),kSr=i(Ql),O9=n(Ql,"P",{});var zGe=s(O9);SSr=r(zGe,"This class cannot be instantiated directly using "),VTe=n(zGe,"CODE",{});var XLt=s(VTe);RSr=r(XLt,"__init__()"),XLt.forEach(t),PSr=r(zGe," (throws an error)."),zGe.forEach(t),BSr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var ny=s(Xt);T(V9.$$.fragment,ny),ISr=i(ny),XTe=n(ny,"P",{});var zLt=s(XTe);qSr=r(zLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zLt.forEach(t),NSr=i(ny),Dc=n(ny,"P",{});var Vee=s(Dc);jSr=r(Vee,`Note:
Loading a model from its configuration file does `),zTe=n(Vee,"STRONG",{});var WLt=s(zTe);DSr=r(WLt,"not"),WLt.forEach(t),GSr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(Vee,"A",{href:!0});var QLt=s(NY);OSr=r(QLt,"from_pretrained()"),QLt.forEach(t),VSr=r(Vee," to load the model weights."),Vee.forEach(t),XSr=i(ny),T(x5.$$.fragment,ny),ny.forEach(t),zSr=i(Ql),Or=n(Ql,"DIV",{class:!0});var Hl=s(Or);T(X9.$$.fragment,Hl),WSr=i(Hl),WTe=n(Hl,"P",{});var HLt=s(WTe);QSr=r(HLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HLt.forEach(t),HSr=i(Hl),_n=n(Hl,"P",{});var sy=s(_n);USr=r(sy,"The model class to instantiate is selected based on the "),QTe=n(sy,"CODE",{});var ULt=s(QTe);JSr=r(ULt,"model_type"),ULt.forEach(t),YSr=r(sy,` property of the config object (either
passed as an argument or loaded from `),HTe=n(sy,"CODE",{});var JLt=s(HTe);KSr=r(JLt,"pretrained_model_name_or_path"),JLt.forEach(t),ZSr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UTe=n(sy,"CODE",{});var YLt=s(UTe);eRr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),oRr=r(sy,":"),sy.forEach(t),rRr=i(Hl),Le=n(Hl,"UL",{});var Ie=s(Le);$5=n(Ie,"LI",{});var QIe=s($5);JTe=n(QIe,"STRONG",{});var KLt=s(JTe);tRr=r(KLt,"albert"),KLt.forEach(t),aRr=r(QIe," \u2014 "),jY=n(QIe,"A",{href:!0});var ZLt=s(jY);nRr=r(ZLt,"FlaxAlbertForMaskedLM"),ZLt.forEach(t),sRr=r(QIe," (ALBERT model)"),QIe.forEach(t),lRr=i(Ie),k5=n(Ie,"LI",{});var HIe=s(k5);YTe=n(HIe,"STRONG",{});var e8t=s(YTe);iRr=r(e8t,"bart"),e8t.forEach(t),dRr=r(HIe," \u2014 "),DY=n(HIe,"A",{href:!0});var o8t=s(DY);cRr=r(o8t,"FlaxBartForConditionalGeneration"),o8t.forEach(t),fRr=r(HIe," (BART model)"),HIe.forEach(t),mRr=i(Ie),S5=n(Ie,"LI",{});var UIe=s(S5);KTe=n(UIe,"STRONG",{});var r8t=s(KTe);gRr=r(r8t,"bert"),r8t.forEach(t),hRr=r(UIe," \u2014 "),GY=n(UIe,"A",{href:!0});var t8t=s(GY);pRr=r(t8t,"FlaxBertForMaskedLM"),t8t.forEach(t),uRr=r(UIe," (BERT model)"),UIe.forEach(t),_Rr=i(Ie),R5=n(Ie,"LI",{});var JIe=s(R5);ZTe=n(JIe,"STRONG",{});var a8t=s(ZTe);bRr=r(a8t,"big_bird"),a8t.forEach(t),vRr=r(JIe," \u2014 "),OY=n(JIe,"A",{href:!0});var n8t=s(OY);FRr=r(n8t,"FlaxBigBirdForMaskedLM"),n8t.forEach(t),TRr=r(JIe," (BigBird model)"),JIe.forEach(t),MRr=i(Ie),P5=n(Ie,"LI",{});var YIe=s(P5);eMe=n(YIe,"STRONG",{});var s8t=s(eMe);ERr=r(s8t,"distilbert"),s8t.forEach(t),CRr=r(YIe," \u2014 "),VY=n(YIe,"A",{href:!0});var l8t=s(VY);wRr=r(l8t,"FlaxDistilBertForMaskedLM"),l8t.forEach(t),ARr=r(YIe," (DistilBERT model)"),YIe.forEach(t),yRr=i(Ie),B5=n(Ie,"LI",{});var KIe=s(B5);oMe=n(KIe,"STRONG",{});var i8t=s(oMe);LRr=r(i8t,"electra"),i8t.forEach(t),xRr=r(KIe," \u2014 "),XY=n(KIe,"A",{href:!0});var d8t=s(XY);$Rr=r(d8t,"FlaxElectraForMaskedLM"),d8t.forEach(t),kRr=r(KIe," (ELECTRA model)"),KIe.forEach(t),SRr=i(Ie),I5=n(Ie,"LI",{});var ZIe=s(I5);rMe=n(ZIe,"STRONG",{});var c8t=s(rMe);RRr=r(c8t,"mbart"),c8t.forEach(t),PRr=r(ZIe," \u2014 "),zY=n(ZIe,"A",{href:!0});var f8t=s(zY);BRr=r(f8t,"FlaxMBartForConditionalGeneration"),f8t.forEach(t),IRr=r(ZIe," (mBART model)"),ZIe.forEach(t),qRr=i(Ie),q5=n(Ie,"LI",{});var eqe=s(q5);tMe=n(eqe,"STRONG",{});var m8t=s(tMe);NRr=r(m8t,"roberta"),m8t.forEach(t),jRr=r(eqe," \u2014 "),WY=n(eqe,"A",{href:!0});var g8t=s(WY);DRr=r(g8t,"FlaxRobertaForMaskedLM"),g8t.forEach(t),GRr=r(eqe," (RoBERTa model)"),eqe.forEach(t),ORr=i(Ie),N5=n(Ie,"LI",{});var oqe=s(N5);aMe=n(oqe,"STRONG",{});var h8t=s(aMe);VRr=r(h8t,"roformer"),h8t.forEach(t),XRr=r(oqe," \u2014 "),QY=n(oqe,"A",{href:!0});var p8t=s(QY);zRr=r(p8t,"FlaxRoFormerForMaskedLM"),p8t.forEach(t),WRr=r(oqe," (RoFormer model)"),oqe.forEach(t),QRr=i(Ie),j5=n(Ie,"LI",{});var rqe=s(j5);nMe=n(rqe,"STRONG",{});var u8t=s(nMe);HRr=r(u8t,"xlm-roberta"),u8t.forEach(t),URr=r(rqe," \u2014 "),HY=n(rqe,"A",{href:!0});var _8t=s(HY);JRr=r(_8t,"FlaxXLMRobertaForMaskedLM"),_8t.forEach(t),YRr=r(rqe," (XLM-RoBERTa model)"),rqe.forEach(t),Ie.forEach(t),KRr=i(Hl),T(D5.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),jje=i(f),Gc=n(f,"H2",{class:!0});var WGe=s(Gc);G5=n(WGe,"A",{id:!0,class:!0,href:!0});var b8t=s(G5);sMe=n(b8t,"SPAN",{});var v8t=s(sMe);T(z9.$$.fragment,v8t),v8t.forEach(t),b8t.forEach(t),ZRr=i(WGe),lMe=n(WGe,"SPAN",{});var F8t=s(lMe);ePr=r(F8t,"FlaxAutoModelForSeq2SeqLM"),F8t.forEach(t),WGe.forEach(t),Dje=i(f),pr=n(f,"DIV",{class:!0});var Ul=s(pr);T(W9.$$.fragment,Ul),oPr=i(Ul),Oc=n(Ul,"P",{});var Xee=s(Oc);rPr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UY=n(Xee,"A",{href:!0});var T8t=s(UY);tPr=r(T8t,"from_pretrained()"),T8t.forEach(t),aPr=r(Xee," class method or the "),JY=n(Xee,"A",{href:!0});var M8t=s(JY);nPr=r(M8t,"from_config()"),M8t.forEach(t),sPr=r(Xee,` class
method.`),Xee.forEach(t),lPr=i(Ul),Q9=n(Ul,"P",{});var QGe=s(Q9);iPr=r(QGe,"This class cannot be instantiated directly using "),iMe=n(QGe,"CODE",{});var E8t=s(iMe);dPr=r(E8t,"__init__()"),E8t.forEach(t),cPr=r(QGe," (throws an error)."),QGe.forEach(t),fPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var ly=s(zt);T(H9.$$.fragment,ly),mPr=i(ly),dMe=n(ly,"P",{});var C8t=s(dMe);gPr=r(C8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C8t.forEach(t),hPr=i(ly),Vc=n(ly,"P",{});var zee=s(Vc);pPr=r(zee,`Note:
Loading a model from its configuration file does `),cMe=n(zee,"STRONG",{});var w8t=s(cMe);uPr=r(w8t,"not"),w8t.forEach(t),_Pr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(zee,"A",{href:!0});var A8t=s(YY);bPr=r(A8t,"from_pretrained()"),A8t.forEach(t),vPr=r(zee," to load the model weights."),zee.forEach(t),FPr=i(ly),T(O5.$$.fragment,ly),ly.forEach(t),TPr=i(Ul),Vr=n(Ul,"DIV",{class:!0});var Jl=s(Vr);T(U9.$$.fragment,Jl),MPr=i(Jl),fMe=n(Jl,"P",{});var y8t=s(fMe);EPr=r(y8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),y8t.forEach(t),CPr=i(Jl),bn=n(Jl,"P",{});var iy=s(bn);wPr=r(iy,"The model class to instantiate is selected based on the "),mMe=n(iy,"CODE",{});var L8t=s(mMe);APr=r(L8t,"model_type"),L8t.forEach(t),yPr=r(iy,` property of the config object (either
passed as an argument or loaded from `),gMe=n(iy,"CODE",{});var x8t=s(gMe);LPr=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),xPr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(iy,"CODE",{});var $8t=s(hMe);$Pr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),kPr=r(iy,":"),iy.forEach(t),SPr=i(Jl),Pe=n(Jl,"UL",{});var ze=s(Pe);V5=n(ze,"LI",{});var tqe=s(V5);pMe=n(tqe,"STRONG",{});var k8t=s(pMe);RPr=r(k8t,"bart"),k8t.forEach(t),PPr=r(tqe," \u2014 "),KY=n(tqe,"A",{href:!0});var S8t=s(KY);BPr=r(S8t,"FlaxBartForConditionalGeneration"),S8t.forEach(t),IPr=r(tqe," (BART model)"),tqe.forEach(t),qPr=i(ze),X5=n(ze,"LI",{});var aqe=s(X5);uMe=n(aqe,"STRONG",{});var R8t=s(uMe);NPr=r(R8t,"blenderbot"),R8t.forEach(t),jPr=r(aqe," \u2014 "),ZY=n(aqe,"A",{href:!0});var P8t=s(ZY);DPr=r(P8t,"FlaxBlenderbotForConditionalGeneration"),P8t.forEach(t),GPr=r(aqe," (Blenderbot model)"),aqe.forEach(t),OPr=i(ze),z5=n(ze,"LI",{});var nqe=s(z5);_Me=n(nqe,"STRONG",{});var B8t=s(_Me);VPr=r(B8t,"blenderbot-small"),B8t.forEach(t),XPr=r(nqe," \u2014 "),eK=n(nqe,"A",{href:!0});var I8t=s(eK);zPr=r(I8t,"FlaxBlenderbotSmallForConditionalGeneration"),I8t.forEach(t),WPr=r(nqe," (BlenderbotSmall model)"),nqe.forEach(t),QPr=i(ze),W5=n(ze,"LI",{});var sqe=s(W5);bMe=n(sqe,"STRONG",{});var q8t=s(bMe);HPr=r(q8t,"encoder-decoder"),q8t.forEach(t),UPr=r(sqe," \u2014 "),oK=n(sqe,"A",{href:!0});var N8t=s(oK);JPr=r(N8t,"FlaxEncoderDecoderModel"),N8t.forEach(t),YPr=r(sqe," (Encoder decoder model)"),sqe.forEach(t),KPr=i(ze),Q5=n(ze,"LI",{});var lqe=s(Q5);vMe=n(lqe,"STRONG",{});var j8t=s(vMe);ZPr=r(j8t,"marian"),j8t.forEach(t),eBr=r(lqe," \u2014 "),rK=n(lqe,"A",{href:!0});var D8t=s(rK);oBr=r(D8t,"FlaxMarianMTModel"),D8t.forEach(t),rBr=r(lqe," (Marian model)"),lqe.forEach(t),tBr=i(ze),H5=n(ze,"LI",{});var iqe=s(H5);FMe=n(iqe,"STRONG",{});var G8t=s(FMe);aBr=r(G8t,"mbart"),G8t.forEach(t),nBr=r(iqe," \u2014 "),tK=n(iqe,"A",{href:!0});var O8t=s(tK);sBr=r(O8t,"FlaxMBartForConditionalGeneration"),O8t.forEach(t),lBr=r(iqe," (mBART model)"),iqe.forEach(t),iBr=i(ze),U5=n(ze,"LI",{});var dqe=s(U5);TMe=n(dqe,"STRONG",{});var V8t=s(TMe);dBr=r(V8t,"mt5"),V8t.forEach(t),cBr=r(dqe," \u2014 "),aK=n(dqe,"A",{href:!0});var X8t=s(aK);fBr=r(X8t,"FlaxMT5ForConditionalGeneration"),X8t.forEach(t),mBr=r(dqe," (mT5 model)"),dqe.forEach(t),gBr=i(ze),J5=n(ze,"LI",{});var cqe=s(J5);MMe=n(cqe,"STRONG",{});var z8t=s(MMe);hBr=r(z8t,"pegasus"),z8t.forEach(t),pBr=r(cqe," \u2014 "),nK=n(cqe,"A",{href:!0});var W8t=s(nK);uBr=r(W8t,"FlaxPegasusForConditionalGeneration"),W8t.forEach(t),_Br=r(cqe," (Pegasus model)"),cqe.forEach(t),bBr=i(ze),Y5=n(ze,"LI",{});var fqe=s(Y5);EMe=n(fqe,"STRONG",{});var Q8t=s(EMe);vBr=r(Q8t,"t5"),Q8t.forEach(t),FBr=r(fqe," \u2014 "),sK=n(fqe,"A",{href:!0});var H8t=s(sK);TBr=r(H8t,"FlaxT5ForConditionalGeneration"),H8t.forEach(t),MBr=r(fqe," (T5 model)"),fqe.forEach(t),ze.forEach(t),EBr=i(Jl),T(K5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),Gje=i(f),Xc=n(f,"H2",{class:!0});var HGe=s(Xc);Z5=n(HGe,"A",{id:!0,class:!0,href:!0});var U8t=s(Z5);CMe=n(U8t,"SPAN",{});var J8t=s(CMe);T(J9.$$.fragment,J8t),J8t.forEach(t),U8t.forEach(t),CBr=i(HGe),wMe=n(HGe,"SPAN",{});var Y8t=s(wMe);wBr=r(Y8t,"FlaxAutoModelForSequenceClassification"),Y8t.forEach(t),HGe.forEach(t),Oje=i(f),ur=n(f,"DIV",{class:!0});var Yl=s(ur);T(Y9.$$.fragment,Yl),ABr=i(Yl),zc=n(Yl,"P",{});var Wee=s(zc);yBr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lK=n(Wee,"A",{href:!0});var K8t=s(lK);LBr=r(K8t,"from_pretrained()"),K8t.forEach(t),xBr=r(Wee," class method or the "),iK=n(Wee,"A",{href:!0});var Z8t=s(iK);$Br=r(Z8t,"from_config()"),Z8t.forEach(t),kBr=r(Wee,` class
method.`),Wee.forEach(t),SBr=i(Yl),K9=n(Yl,"P",{});var UGe=s(K9);RBr=r(UGe,"This class cannot be instantiated directly using "),AMe=n(UGe,"CODE",{});var e7t=s(AMe);PBr=r(e7t,"__init__()"),e7t.forEach(t),BBr=r(UGe," (throws an error)."),UGe.forEach(t),IBr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var dy=s(Wt);T(Z9.$$.fragment,dy),qBr=i(dy),yMe=n(dy,"P",{});var o7t=s(yMe);NBr=r(o7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o7t.forEach(t),jBr=i(dy),Wc=n(dy,"P",{});var Qee=s(Wc);DBr=r(Qee,`Note:
Loading a model from its configuration file does `),LMe=n(Qee,"STRONG",{});var r7t=s(LMe);GBr=r(r7t,"not"),r7t.forEach(t),OBr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(Qee,"A",{href:!0});var t7t=s(dK);VBr=r(t7t,"from_pretrained()"),t7t.forEach(t),XBr=r(Qee," to load the model weights."),Qee.forEach(t),zBr=i(dy),T(e3.$$.fragment,dy),dy.forEach(t),WBr=i(Yl),Xr=n(Yl,"DIV",{class:!0});var Kl=s(Xr);T(ex.$$.fragment,Kl),QBr=i(Kl),xMe=n(Kl,"P",{});var a7t=s(xMe);HBr=r(a7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a7t.forEach(t),UBr=i(Kl),vn=n(Kl,"P",{});var cy=s(vn);JBr=r(cy,"The model class to instantiate is selected based on the "),$Me=n(cy,"CODE",{});var n7t=s($Me);YBr=r(n7t,"model_type"),n7t.forEach(t),KBr=r(cy,` property of the config object (either
passed as an argument or loaded from `),kMe=n(cy,"CODE",{});var s7t=s(kMe);ZBr=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),eIr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(cy,"CODE",{});var l7t=s(SMe);oIr=r(l7t,"pretrained_model_name_or_path"),l7t.forEach(t),rIr=r(cy,":"),cy.forEach(t),tIr=i(Kl),xe=n(Kl,"UL",{});var qe=s(xe);o3=n(qe,"LI",{});var mqe=s(o3);RMe=n(mqe,"STRONG",{});var i7t=s(RMe);aIr=r(i7t,"albert"),i7t.forEach(t),nIr=r(mqe," \u2014 "),cK=n(mqe,"A",{href:!0});var d7t=s(cK);sIr=r(d7t,"FlaxAlbertForSequenceClassification"),d7t.forEach(t),lIr=r(mqe," (ALBERT model)"),mqe.forEach(t),iIr=i(qe),r3=n(qe,"LI",{});var gqe=s(r3);PMe=n(gqe,"STRONG",{});var c7t=s(PMe);dIr=r(c7t,"bart"),c7t.forEach(t),cIr=r(gqe," \u2014 "),fK=n(gqe,"A",{href:!0});var f7t=s(fK);fIr=r(f7t,"FlaxBartForSequenceClassification"),f7t.forEach(t),mIr=r(gqe," (BART model)"),gqe.forEach(t),gIr=i(qe),t3=n(qe,"LI",{});var hqe=s(t3);BMe=n(hqe,"STRONG",{});var m7t=s(BMe);hIr=r(m7t,"bert"),m7t.forEach(t),pIr=r(hqe," \u2014 "),mK=n(hqe,"A",{href:!0});var g7t=s(mK);uIr=r(g7t,"FlaxBertForSequenceClassification"),g7t.forEach(t),_Ir=r(hqe," (BERT model)"),hqe.forEach(t),bIr=i(qe),a3=n(qe,"LI",{});var pqe=s(a3);IMe=n(pqe,"STRONG",{});var h7t=s(IMe);vIr=r(h7t,"big_bird"),h7t.forEach(t),FIr=r(pqe," \u2014 "),gK=n(pqe,"A",{href:!0});var p7t=s(gK);TIr=r(p7t,"FlaxBigBirdForSequenceClassification"),p7t.forEach(t),MIr=r(pqe," (BigBird model)"),pqe.forEach(t),EIr=i(qe),n3=n(qe,"LI",{});var uqe=s(n3);qMe=n(uqe,"STRONG",{});var u7t=s(qMe);CIr=r(u7t,"distilbert"),u7t.forEach(t),wIr=r(uqe," \u2014 "),hK=n(uqe,"A",{href:!0});var _7t=s(hK);AIr=r(_7t,"FlaxDistilBertForSequenceClassification"),_7t.forEach(t),yIr=r(uqe," (DistilBERT model)"),uqe.forEach(t),LIr=i(qe),s3=n(qe,"LI",{});var _qe=s(s3);NMe=n(_qe,"STRONG",{});var b7t=s(NMe);xIr=r(b7t,"electra"),b7t.forEach(t),$Ir=r(_qe," \u2014 "),pK=n(_qe,"A",{href:!0});var v7t=s(pK);kIr=r(v7t,"FlaxElectraForSequenceClassification"),v7t.forEach(t),SIr=r(_qe," (ELECTRA model)"),_qe.forEach(t),RIr=i(qe),l3=n(qe,"LI",{});var bqe=s(l3);jMe=n(bqe,"STRONG",{});var F7t=s(jMe);PIr=r(F7t,"mbart"),F7t.forEach(t),BIr=r(bqe," \u2014 "),uK=n(bqe,"A",{href:!0});var T7t=s(uK);IIr=r(T7t,"FlaxMBartForSequenceClassification"),T7t.forEach(t),qIr=r(bqe," (mBART model)"),bqe.forEach(t),NIr=i(qe),i3=n(qe,"LI",{});var vqe=s(i3);DMe=n(vqe,"STRONG",{});var M7t=s(DMe);jIr=r(M7t,"roberta"),M7t.forEach(t),DIr=r(vqe," \u2014 "),_K=n(vqe,"A",{href:!0});var E7t=s(_K);GIr=r(E7t,"FlaxRobertaForSequenceClassification"),E7t.forEach(t),OIr=r(vqe," (RoBERTa model)"),vqe.forEach(t),VIr=i(qe),d3=n(qe,"LI",{});var Fqe=s(d3);GMe=n(Fqe,"STRONG",{});var C7t=s(GMe);XIr=r(C7t,"roformer"),C7t.forEach(t),zIr=r(Fqe," \u2014 "),bK=n(Fqe,"A",{href:!0});var w7t=s(bK);WIr=r(w7t,"FlaxRoFormerForSequenceClassification"),w7t.forEach(t),QIr=r(Fqe," (RoFormer model)"),Fqe.forEach(t),HIr=i(qe),c3=n(qe,"LI",{});var Tqe=s(c3);OMe=n(Tqe,"STRONG",{});var A7t=s(OMe);UIr=r(A7t,"xlm-roberta"),A7t.forEach(t),JIr=r(Tqe," \u2014 "),vK=n(Tqe,"A",{href:!0});var y7t=s(vK);YIr=r(y7t,"FlaxXLMRobertaForSequenceClassification"),y7t.forEach(t),KIr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),qe.forEach(t),ZIr=i(Kl),T(f3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),Vje=i(f),Qc=n(f,"H2",{class:!0});var JGe=s(Qc);m3=n(JGe,"A",{id:!0,class:!0,href:!0});var L7t=s(m3);VMe=n(L7t,"SPAN",{});var x7t=s(VMe);T(ox.$$.fragment,x7t),x7t.forEach(t),L7t.forEach(t),eqr=i(JGe),XMe=n(JGe,"SPAN",{});var $7t=s(XMe);oqr=r($7t,"FlaxAutoModelForQuestionAnswering"),$7t.forEach(t),JGe.forEach(t),Xje=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(rx.$$.fragment,Zl),rqr=i(Zl),Hc=n(Zl,"P",{});var Hee=s(Hc);tqr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),FK=n(Hee,"A",{href:!0});var k7t=s(FK);aqr=r(k7t,"from_pretrained()"),k7t.forEach(t),nqr=r(Hee," class method or the "),TK=n(Hee,"A",{href:!0});var S7t=s(TK);sqr=r(S7t,"from_config()"),S7t.forEach(t),lqr=r(Hee,` class
method.`),Hee.forEach(t),iqr=i(Zl),tx=n(Zl,"P",{});var YGe=s(tx);dqr=r(YGe,"This class cannot be instantiated directly using "),zMe=n(YGe,"CODE",{});var R7t=s(zMe);cqr=r(R7t,"__init__()"),R7t.forEach(t),fqr=r(YGe," (throws an error)."),YGe.forEach(t),mqr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var fy=s(Qt);T(ax.$$.fragment,fy),gqr=i(fy),WMe=n(fy,"P",{});var P7t=s(WMe);hqr=r(P7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P7t.forEach(t),pqr=i(fy),Uc=n(fy,"P",{});var Uee=s(Uc);uqr=r(Uee,`Note:
Loading a model from its configuration file does `),QMe=n(Uee,"STRONG",{});var B7t=s(QMe);_qr=r(B7t,"not"),B7t.forEach(t),bqr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(Uee,"A",{href:!0});var I7t=s(MK);vqr=r(I7t,"from_pretrained()"),I7t.forEach(t),Fqr=r(Uee," to load the model weights."),Uee.forEach(t),Tqr=i(fy),T(g3.$$.fragment,fy),fy.forEach(t),Mqr=i(Zl),zr=n(Zl,"DIV",{class:!0});var ei=s(zr);T(nx.$$.fragment,ei),Eqr=i(ei),HMe=n(ei,"P",{});var q7t=s(HMe);Cqr=r(q7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q7t.forEach(t),wqr=i(ei),Fn=n(ei,"P",{});var my=s(Fn);Aqr=r(my,"The model class to instantiate is selected based on the "),UMe=n(my,"CODE",{});var N7t=s(UMe);yqr=r(N7t,"model_type"),N7t.forEach(t),Lqr=r(my,` property of the config object (either
passed as an argument or loaded from `),JMe=n(my,"CODE",{});var j7t=s(JMe);xqr=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),$qr=r(my,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(my,"CODE",{});var D7t=s(YMe);kqr=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),Sqr=r(my,":"),my.forEach(t),Rqr=i(ei),$e=n(ei,"UL",{});var Ne=s($e);h3=n(Ne,"LI",{});var Mqe=s(h3);KMe=n(Mqe,"STRONG",{});var G7t=s(KMe);Pqr=r(G7t,"albert"),G7t.forEach(t),Bqr=r(Mqe," \u2014 "),EK=n(Mqe,"A",{href:!0});var O7t=s(EK);Iqr=r(O7t,"FlaxAlbertForQuestionAnswering"),O7t.forEach(t),qqr=r(Mqe," (ALBERT model)"),Mqe.forEach(t),Nqr=i(Ne),p3=n(Ne,"LI",{});var Eqe=s(p3);ZMe=n(Eqe,"STRONG",{});var V7t=s(ZMe);jqr=r(V7t,"bart"),V7t.forEach(t),Dqr=r(Eqe," \u2014 "),CK=n(Eqe,"A",{href:!0});var X7t=s(CK);Gqr=r(X7t,"FlaxBartForQuestionAnswering"),X7t.forEach(t),Oqr=r(Eqe," (BART model)"),Eqe.forEach(t),Vqr=i(Ne),u3=n(Ne,"LI",{});var Cqe=s(u3);eEe=n(Cqe,"STRONG",{});var z7t=s(eEe);Xqr=r(z7t,"bert"),z7t.forEach(t),zqr=r(Cqe," \u2014 "),wK=n(Cqe,"A",{href:!0});var W7t=s(wK);Wqr=r(W7t,"FlaxBertForQuestionAnswering"),W7t.forEach(t),Qqr=r(Cqe," (BERT model)"),Cqe.forEach(t),Hqr=i(Ne),_3=n(Ne,"LI",{});var wqe=s(_3);oEe=n(wqe,"STRONG",{});var Q7t=s(oEe);Uqr=r(Q7t,"big_bird"),Q7t.forEach(t),Jqr=r(wqe," \u2014 "),AK=n(wqe,"A",{href:!0});var H7t=s(AK);Yqr=r(H7t,"FlaxBigBirdForQuestionAnswering"),H7t.forEach(t),Kqr=r(wqe," (BigBird model)"),wqe.forEach(t),Zqr=i(Ne),b3=n(Ne,"LI",{});var Aqe=s(b3);rEe=n(Aqe,"STRONG",{});var U7t=s(rEe);eNr=r(U7t,"distilbert"),U7t.forEach(t),oNr=r(Aqe," \u2014 "),yK=n(Aqe,"A",{href:!0});var J7t=s(yK);rNr=r(J7t,"FlaxDistilBertForQuestionAnswering"),J7t.forEach(t),tNr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),aNr=i(Ne),v3=n(Ne,"LI",{});var yqe=s(v3);tEe=n(yqe,"STRONG",{});var Y7t=s(tEe);nNr=r(Y7t,"electra"),Y7t.forEach(t),sNr=r(yqe," \u2014 "),LK=n(yqe,"A",{href:!0});var K7t=s(LK);lNr=r(K7t,"FlaxElectraForQuestionAnswering"),K7t.forEach(t),iNr=r(yqe," (ELECTRA model)"),yqe.forEach(t),dNr=i(Ne),F3=n(Ne,"LI",{});var Lqe=s(F3);aEe=n(Lqe,"STRONG",{});var Z7t=s(aEe);cNr=r(Z7t,"mbart"),Z7t.forEach(t),fNr=r(Lqe," \u2014 "),xK=n(Lqe,"A",{href:!0});var e9t=s(xK);mNr=r(e9t,"FlaxMBartForQuestionAnswering"),e9t.forEach(t),gNr=r(Lqe," (mBART model)"),Lqe.forEach(t),hNr=i(Ne),T3=n(Ne,"LI",{});var xqe=s(T3);nEe=n(xqe,"STRONG",{});var o9t=s(nEe);pNr=r(o9t,"roberta"),o9t.forEach(t),uNr=r(xqe," \u2014 "),$K=n(xqe,"A",{href:!0});var r9t=s($K);_Nr=r(r9t,"FlaxRobertaForQuestionAnswering"),r9t.forEach(t),bNr=r(xqe," (RoBERTa model)"),xqe.forEach(t),vNr=i(Ne),M3=n(Ne,"LI",{});var $qe=s(M3);sEe=n($qe,"STRONG",{});var t9t=s(sEe);FNr=r(t9t,"roformer"),t9t.forEach(t),TNr=r($qe," \u2014 "),kK=n($qe,"A",{href:!0});var a9t=s(kK);MNr=r(a9t,"FlaxRoFormerForQuestionAnswering"),a9t.forEach(t),ENr=r($qe," (RoFormer model)"),$qe.forEach(t),CNr=i(Ne),E3=n(Ne,"LI",{});var kqe=s(E3);lEe=n(kqe,"STRONG",{});var n9t=s(lEe);wNr=r(n9t,"xlm-roberta"),n9t.forEach(t),ANr=r(kqe," \u2014 "),SK=n(kqe,"A",{href:!0});var s9t=s(SK);yNr=r(s9t,"FlaxXLMRobertaForQuestionAnswering"),s9t.forEach(t),LNr=r(kqe," (XLM-RoBERTa model)"),kqe.forEach(t),Ne.forEach(t),xNr=i(ei),T(C3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),zje=i(f),Jc=n(f,"H2",{class:!0});var KGe=s(Jc);w3=n(KGe,"A",{id:!0,class:!0,href:!0});var l9t=s(w3);iEe=n(l9t,"SPAN",{});var i9t=s(iEe);T(sx.$$.fragment,i9t),i9t.forEach(t),l9t.forEach(t),$Nr=i(KGe),dEe=n(KGe,"SPAN",{});var d9t=s(dEe);kNr=r(d9t,"FlaxAutoModelForTokenClassification"),d9t.forEach(t),KGe.forEach(t),Wje=i(f),br=n(f,"DIV",{class:!0});var oi=s(br);T(lx.$$.fragment,oi),SNr=i(oi),Yc=n(oi,"P",{});var Jee=s(Yc);RNr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RK=n(Jee,"A",{href:!0});var c9t=s(RK);PNr=r(c9t,"from_pretrained()"),c9t.forEach(t),BNr=r(Jee," class method or the "),PK=n(Jee,"A",{href:!0});var f9t=s(PK);INr=r(f9t,"from_config()"),f9t.forEach(t),qNr=r(Jee,` class
method.`),Jee.forEach(t),NNr=i(oi),ix=n(oi,"P",{});var ZGe=s(ix);jNr=r(ZGe,"This class cannot be instantiated directly using "),cEe=n(ZGe,"CODE",{});var m9t=s(cEe);DNr=r(m9t,"__init__()"),m9t.forEach(t),GNr=r(ZGe," (throws an error)."),ZGe.forEach(t),ONr=i(oi),Ht=n(oi,"DIV",{class:!0});var gy=s(Ht);T(dx.$$.fragment,gy),VNr=i(gy),fEe=n(gy,"P",{});var g9t=s(fEe);XNr=r(g9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g9t.forEach(t),zNr=i(gy),Kc=n(gy,"P",{});var Yee=s(Kc);WNr=r(Yee,`Note:
Loading a model from its configuration file does `),mEe=n(Yee,"STRONG",{});var h9t=s(mEe);QNr=r(h9t,"not"),h9t.forEach(t),HNr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(Yee,"A",{href:!0});var p9t=s(BK);UNr=r(p9t,"from_pretrained()"),p9t.forEach(t),JNr=r(Yee," to load the model weights."),Yee.forEach(t),YNr=i(gy),T(A3.$$.fragment,gy),gy.forEach(t),KNr=i(oi),Wr=n(oi,"DIV",{class:!0});var ri=s(Wr);T(cx.$$.fragment,ri),ZNr=i(ri),gEe=n(ri,"P",{});var u9t=s(gEe);ejr=r(u9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u9t.forEach(t),ojr=i(ri),Tn=n(ri,"P",{});var hy=s(Tn);rjr=r(hy,"The model class to instantiate is selected based on the "),hEe=n(hy,"CODE",{});var _9t=s(hEe);tjr=r(_9t,"model_type"),_9t.forEach(t),ajr=r(hy,` property of the config object (either
passed as an argument or loaded from `),pEe=n(hy,"CODE",{});var b9t=s(pEe);njr=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),sjr=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uEe=n(hy,"CODE",{});var v9t=s(uEe);ljr=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),ijr=r(hy,":"),hy.forEach(t),djr=i(ri),De=n(ri,"UL",{});var Fo=s(De);y3=n(Fo,"LI",{});var Sqe=s(y3);_Ee=n(Sqe,"STRONG",{});var F9t=s(_Ee);cjr=r(F9t,"albert"),F9t.forEach(t),fjr=r(Sqe," \u2014 "),IK=n(Sqe,"A",{href:!0});var T9t=s(IK);mjr=r(T9t,"FlaxAlbertForTokenClassification"),T9t.forEach(t),gjr=r(Sqe," (ALBERT model)"),Sqe.forEach(t),hjr=i(Fo),L3=n(Fo,"LI",{});var Rqe=s(L3);bEe=n(Rqe,"STRONG",{});var M9t=s(bEe);pjr=r(M9t,"bert"),M9t.forEach(t),ujr=r(Rqe," \u2014 "),qK=n(Rqe,"A",{href:!0});var E9t=s(qK);_jr=r(E9t,"FlaxBertForTokenClassification"),E9t.forEach(t),bjr=r(Rqe," (BERT model)"),Rqe.forEach(t),vjr=i(Fo),x3=n(Fo,"LI",{});var Pqe=s(x3);vEe=n(Pqe,"STRONG",{});var C9t=s(vEe);Fjr=r(C9t,"big_bird"),C9t.forEach(t),Tjr=r(Pqe," \u2014 "),NK=n(Pqe,"A",{href:!0});var w9t=s(NK);Mjr=r(w9t,"FlaxBigBirdForTokenClassification"),w9t.forEach(t),Ejr=r(Pqe," (BigBird model)"),Pqe.forEach(t),Cjr=i(Fo),$3=n(Fo,"LI",{});var Bqe=s($3);FEe=n(Bqe,"STRONG",{});var A9t=s(FEe);wjr=r(A9t,"distilbert"),A9t.forEach(t),Ajr=r(Bqe," \u2014 "),jK=n(Bqe,"A",{href:!0});var y9t=s(jK);yjr=r(y9t,"FlaxDistilBertForTokenClassification"),y9t.forEach(t),Ljr=r(Bqe," (DistilBERT model)"),Bqe.forEach(t),xjr=i(Fo),k3=n(Fo,"LI",{});var Iqe=s(k3);TEe=n(Iqe,"STRONG",{});var L9t=s(TEe);$jr=r(L9t,"electra"),L9t.forEach(t),kjr=r(Iqe," \u2014 "),DK=n(Iqe,"A",{href:!0});var x9t=s(DK);Sjr=r(x9t,"FlaxElectraForTokenClassification"),x9t.forEach(t),Rjr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),Pjr=i(Fo),S3=n(Fo,"LI",{});var qqe=s(S3);MEe=n(qqe,"STRONG",{});var $9t=s(MEe);Bjr=r($9t,"roberta"),$9t.forEach(t),Ijr=r(qqe," \u2014 "),GK=n(qqe,"A",{href:!0});var k9t=s(GK);qjr=r(k9t,"FlaxRobertaForTokenClassification"),k9t.forEach(t),Njr=r(qqe," (RoBERTa model)"),qqe.forEach(t),jjr=i(Fo),R3=n(Fo,"LI",{});var Nqe=s(R3);EEe=n(Nqe,"STRONG",{});var S9t=s(EEe);Djr=r(S9t,"roformer"),S9t.forEach(t),Gjr=r(Nqe," \u2014 "),OK=n(Nqe,"A",{href:!0});var R9t=s(OK);Ojr=r(R9t,"FlaxRoFormerForTokenClassification"),R9t.forEach(t),Vjr=r(Nqe," (RoFormer model)"),Nqe.forEach(t),Xjr=i(Fo),P3=n(Fo,"LI",{});var jqe=s(P3);CEe=n(jqe,"STRONG",{});var P9t=s(CEe);zjr=r(P9t,"xlm-roberta"),P9t.forEach(t),Wjr=r(jqe," \u2014 "),VK=n(jqe,"A",{href:!0});var B9t=s(VK);Qjr=r(B9t,"FlaxXLMRobertaForTokenClassification"),B9t.forEach(t),Hjr=r(jqe," (XLM-RoBERTa model)"),jqe.forEach(t),Fo.forEach(t),Ujr=i(ri),T(B3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Qje=i(f),Zc=n(f,"H2",{class:!0});var eOe=s(Zc);I3=n(eOe,"A",{id:!0,class:!0,href:!0});var I9t=s(I3);wEe=n(I9t,"SPAN",{});var q9t=s(wEe);T(fx.$$.fragment,q9t),q9t.forEach(t),I9t.forEach(t),Jjr=i(eOe),AEe=n(eOe,"SPAN",{});var N9t=s(AEe);Yjr=r(N9t,"FlaxAutoModelForMultipleChoice"),N9t.forEach(t),eOe.forEach(t),Hje=i(f),vr=n(f,"DIV",{class:!0});var ti=s(vr);T(mx.$$.fragment,ti),Kjr=i(ti),ef=n(ti,"P",{});var Kee=s(ef);Zjr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=n(Kee,"A",{href:!0});var j9t=s(XK);eDr=r(j9t,"from_pretrained()"),j9t.forEach(t),oDr=r(Kee," class method or the "),zK=n(Kee,"A",{href:!0});var D9t=s(zK);rDr=r(D9t,"from_config()"),D9t.forEach(t),tDr=r(Kee,` class
method.`),Kee.forEach(t),aDr=i(ti),gx=n(ti,"P",{});var oOe=s(gx);nDr=r(oOe,"This class cannot be instantiated directly using "),yEe=n(oOe,"CODE",{});var G9t=s(yEe);sDr=r(G9t,"__init__()"),G9t.forEach(t),lDr=r(oOe," (throws an error)."),oOe.forEach(t),iDr=i(ti),Ut=n(ti,"DIV",{class:!0});var py=s(Ut);T(hx.$$.fragment,py),dDr=i(py),LEe=n(py,"P",{});var O9t=s(LEe);cDr=r(O9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O9t.forEach(t),fDr=i(py),of=n(py,"P",{});var Zee=s(of);mDr=r(Zee,`Note:
Loading a model from its configuration file does `),xEe=n(Zee,"STRONG",{});var V9t=s(xEe);gDr=r(V9t,"not"),V9t.forEach(t),hDr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(Zee,"A",{href:!0});var X9t=s(WK);pDr=r(X9t,"from_pretrained()"),X9t.forEach(t),uDr=r(Zee," to load the model weights."),Zee.forEach(t),_Dr=i(py),T(q3.$$.fragment,py),py.forEach(t),bDr=i(ti),Qr=n(ti,"DIV",{class:!0});var ai=s(Qr);T(px.$$.fragment,ai),vDr=i(ai),$Ee=n(ai,"P",{});var z9t=s($Ee);FDr=r(z9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z9t.forEach(t),TDr=i(ai),Mn=n(ai,"P",{});var uy=s(Mn);MDr=r(uy,"The model class to instantiate is selected based on the "),kEe=n(uy,"CODE",{});var W9t=s(kEe);EDr=r(W9t,"model_type"),W9t.forEach(t),CDr=r(uy,` property of the config object (either
passed as an argument or loaded from `),SEe=n(uy,"CODE",{});var Q9t=s(SEe);wDr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),ADr=r(uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),REe=n(uy,"CODE",{});var H9t=s(REe);yDr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),LDr=r(uy,":"),uy.forEach(t),xDr=i(ai),Ge=n(ai,"UL",{});var To=s(Ge);N3=n(To,"LI",{});var Dqe=s(N3);PEe=n(Dqe,"STRONG",{});var U9t=s(PEe);$Dr=r(U9t,"albert"),U9t.forEach(t),kDr=r(Dqe," \u2014 "),QK=n(Dqe,"A",{href:!0});var J9t=s(QK);SDr=r(J9t,"FlaxAlbertForMultipleChoice"),J9t.forEach(t),RDr=r(Dqe," (ALBERT model)"),Dqe.forEach(t),PDr=i(To),j3=n(To,"LI",{});var Gqe=s(j3);BEe=n(Gqe,"STRONG",{});var Y9t=s(BEe);BDr=r(Y9t,"bert"),Y9t.forEach(t),IDr=r(Gqe," \u2014 "),HK=n(Gqe,"A",{href:!0});var K9t=s(HK);qDr=r(K9t,"FlaxBertForMultipleChoice"),K9t.forEach(t),NDr=r(Gqe," (BERT model)"),Gqe.forEach(t),jDr=i(To),D3=n(To,"LI",{});var Oqe=s(D3);IEe=n(Oqe,"STRONG",{});var Z9t=s(IEe);DDr=r(Z9t,"big_bird"),Z9t.forEach(t),GDr=r(Oqe," \u2014 "),UK=n(Oqe,"A",{href:!0});var ext=s(UK);ODr=r(ext,"FlaxBigBirdForMultipleChoice"),ext.forEach(t),VDr=r(Oqe," (BigBird model)"),Oqe.forEach(t),XDr=i(To),G3=n(To,"LI",{});var Vqe=s(G3);qEe=n(Vqe,"STRONG",{});var oxt=s(qEe);zDr=r(oxt,"distilbert"),oxt.forEach(t),WDr=r(Vqe," \u2014 "),JK=n(Vqe,"A",{href:!0});var rxt=s(JK);QDr=r(rxt,"FlaxDistilBertForMultipleChoice"),rxt.forEach(t),HDr=r(Vqe," (DistilBERT model)"),Vqe.forEach(t),UDr=i(To),O3=n(To,"LI",{});var Xqe=s(O3);NEe=n(Xqe,"STRONG",{});var txt=s(NEe);JDr=r(txt,"electra"),txt.forEach(t),YDr=r(Xqe," \u2014 "),YK=n(Xqe,"A",{href:!0});var axt=s(YK);KDr=r(axt,"FlaxElectraForMultipleChoice"),axt.forEach(t),ZDr=r(Xqe," (ELECTRA model)"),Xqe.forEach(t),eGr=i(To),V3=n(To,"LI",{});var zqe=s(V3);jEe=n(zqe,"STRONG",{});var nxt=s(jEe);oGr=r(nxt,"roberta"),nxt.forEach(t),rGr=r(zqe," \u2014 "),KK=n(zqe,"A",{href:!0});var sxt=s(KK);tGr=r(sxt,"FlaxRobertaForMultipleChoice"),sxt.forEach(t),aGr=r(zqe," (RoBERTa model)"),zqe.forEach(t),nGr=i(To),X3=n(To,"LI",{});var Wqe=s(X3);DEe=n(Wqe,"STRONG",{});var lxt=s(DEe);sGr=r(lxt,"roformer"),lxt.forEach(t),lGr=r(Wqe," \u2014 "),ZK=n(Wqe,"A",{href:!0});var ixt=s(ZK);iGr=r(ixt,"FlaxRoFormerForMultipleChoice"),ixt.forEach(t),dGr=r(Wqe," (RoFormer model)"),Wqe.forEach(t),cGr=i(To),z3=n(To,"LI",{});var Qqe=s(z3);GEe=n(Qqe,"STRONG",{});var dxt=s(GEe);fGr=r(dxt,"xlm-roberta"),dxt.forEach(t),mGr=r(Qqe," \u2014 "),eZ=n(Qqe,"A",{href:!0});var cxt=s(eZ);gGr=r(cxt,"FlaxXLMRobertaForMultipleChoice"),cxt.forEach(t),hGr=r(Qqe," (XLM-RoBERTa model)"),Qqe.forEach(t),To.forEach(t),pGr=i(ai),T(W3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Uje=i(f),rf=n(f,"H2",{class:!0});var rOe=s(rf);Q3=n(rOe,"A",{id:!0,class:!0,href:!0});var fxt=s(Q3);OEe=n(fxt,"SPAN",{});var mxt=s(OEe);T(ux.$$.fragment,mxt),mxt.forEach(t),fxt.forEach(t),uGr=i(rOe),VEe=n(rOe,"SPAN",{});var gxt=s(VEe);_Gr=r(gxt,"FlaxAutoModelForNextSentencePrediction"),gxt.forEach(t),rOe.forEach(t),Jje=i(f),Fr=n(f,"DIV",{class:!0});var ni=s(Fr);T(_x.$$.fragment,ni),bGr=i(ni),tf=n(ni,"P",{});var eoe=s(tf);vGr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oZ=n(eoe,"A",{href:!0});var hxt=s(oZ);FGr=r(hxt,"from_pretrained()"),hxt.forEach(t),TGr=r(eoe," class method or the "),rZ=n(eoe,"A",{href:!0});var pxt=s(rZ);MGr=r(pxt,"from_config()"),pxt.forEach(t),EGr=r(eoe,` class
method.`),eoe.forEach(t),CGr=i(ni),bx=n(ni,"P",{});var tOe=s(bx);wGr=r(tOe,"This class cannot be instantiated directly using "),XEe=n(tOe,"CODE",{});var uxt=s(XEe);AGr=r(uxt,"__init__()"),uxt.forEach(t),yGr=r(tOe," (throws an error)."),tOe.forEach(t),LGr=i(ni),Jt=n(ni,"DIV",{class:!0});var _y=s(Jt);T(vx.$$.fragment,_y),xGr=i(_y),zEe=n(_y,"P",{});var _xt=s(zEe);$Gr=r(_xt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_xt.forEach(t),kGr=i(_y),af=n(_y,"P",{});var ooe=s(af);SGr=r(ooe,`Note:
Loading a model from its configuration file does `),WEe=n(ooe,"STRONG",{});var bxt=s(WEe);RGr=r(bxt,"not"),bxt.forEach(t),PGr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(ooe,"A",{href:!0});var vxt=s(tZ);BGr=r(vxt,"from_pretrained()"),vxt.forEach(t),IGr=r(ooe," to load the model weights."),ooe.forEach(t),qGr=i(_y),T(H3.$$.fragment,_y),_y.forEach(t),NGr=i(ni),Hr=n(ni,"DIV",{class:!0});var si=s(Hr);T(Fx.$$.fragment,si),jGr=i(si),QEe=n(si,"P",{});var Fxt=s(QEe);DGr=r(Fxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fxt.forEach(t),GGr=i(si),En=n(si,"P",{});var by=s(En);OGr=r(by,"The model class to instantiate is selected based on the "),HEe=n(by,"CODE",{});var Txt=s(HEe);VGr=r(Txt,"model_type"),Txt.forEach(t),XGr=r(by,` property of the config object (either
passed as an argument or loaded from `),UEe=n(by,"CODE",{});var Mxt=s(UEe);zGr=r(Mxt,"pretrained_model_name_or_path"),Mxt.forEach(t),WGr=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JEe=n(by,"CODE",{});var Ext=s(JEe);QGr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),HGr=r(by,":"),by.forEach(t),UGr=i(si),YEe=n(si,"UL",{});var Cxt=s(YEe);U3=n(Cxt,"LI",{});var Hqe=s(U3);KEe=n(Hqe,"STRONG",{});var wxt=s(KEe);JGr=r(wxt,"bert"),wxt.forEach(t),YGr=r(Hqe," \u2014 "),aZ=n(Hqe,"A",{href:!0});var Axt=s(aZ);KGr=r(Axt,"FlaxBertForNextSentencePrediction"),Axt.forEach(t),ZGr=r(Hqe," (BERT model)"),Hqe.forEach(t),Cxt.forEach(t),eOr=i(si),T(J3.$$.fragment,si),si.forEach(t),ni.forEach(t),Yje=i(f),nf=n(f,"H2",{class:!0});var aOe=s(nf);Y3=n(aOe,"A",{id:!0,class:!0,href:!0});var yxt=s(Y3);ZEe=n(yxt,"SPAN",{});var Lxt=s(ZEe);T(Tx.$$.fragment,Lxt),Lxt.forEach(t),yxt.forEach(t),oOr=i(aOe),eCe=n(aOe,"SPAN",{});var xxt=s(eCe);rOr=r(xxt,"FlaxAutoModelForImageClassification"),xxt.forEach(t),aOe.forEach(t),Kje=i(f),Tr=n(f,"DIV",{class:!0});var li=s(Tr);T(Mx.$$.fragment,li),tOr=i(li),sf=n(li,"P",{});var roe=s(sf);aOr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nZ=n(roe,"A",{href:!0});var $xt=s(nZ);nOr=r($xt,"from_pretrained()"),$xt.forEach(t),sOr=r(roe," class method or the "),sZ=n(roe,"A",{href:!0});var kxt=s(sZ);lOr=r(kxt,"from_config()"),kxt.forEach(t),iOr=r(roe,` class
method.`),roe.forEach(t),dOr=i(li),Ex=n(li,"P",{});var nOe=s(Ex);cOr=r(nOe,"This class cannot be instantiated directly using "),oCe=n(nOe,"CODE",{});var Sxt=s(oCe);fOr=r(Sxt,"__init__()"),Sxt.forEach(t),mOr=r(nOe," (throws an error)."),nOe.forEach(t),gOr=i(li),Yt=n(li,"DIV",{class:!0});var vy=s(Yt);T(Cx.$$.fragment,vy),hOr=i(vy),rCe=n(vy,"P",{});var Rxt=s(rCe);pOr=r(Rxt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rxt.forEach(t),uOr=i(vy),lf=n(vy,"P",{});var toe=s(lf);_Or=r(toe,`Note:
Loading a model from its configuration file does `),tCe=n(toe,"STRONG",{});var Pxt=s(tCe);bOr=r(Pxt,"not"),Pxt.forEach(t),vOr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(toe,"A",{href:!0});var Bxt=s(lZ);FOr=r(Bxt,"from_pretrained()"),Bxt.forEach(t),TOr=r(toe," to load the model weights."),toe.forEach(t),MOr=i(vy),T(K3.$$.fragment,vy),vy.forEach(t),EOr=i(li),Ur=n(li,"DIV",{class:!0});var ii=s(Ur);T(wx.$$.fragment,ii),COr=i(ii),aCe=n(ii,"P",{});var Ixt=s(aCe);wOr=r(Ixt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ixt.forEach(t),AOr=i(ii),Cn=n(ii,"P",{});var Fy=s(Cn);yOr=r(Fy,"The model class to instantiate is selected based on the "),nCe=n(Fy,"CODE",{});var qxt=s(nCe);LOr=r(qxt,"model_type"),qxt.forEach(t),xOr=r(Fy,` property of the config object (either
passed as an argument or loaded from `),sCe=n(Fy,"CODE",{});var Nxt=s(sCe);$Or=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),kOr=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lCe=n(Fy,"CODE",{});var jxt=s(lCe);SOr=r(jxt,"pretrained_model_name_or_path"),jxt.forEach(t),ROr=r(Fy,":"),Fy.forEach(t),POr=i(ii),Ax=n(ii,"UL",{});var sOe=s(Ax);Z3=n(sOe,"LI",{});var Uqe=s(Z3);iCe=n(Uqe,"STRONG",{});var Dxt=s(iCe);BOr=r(Dxt,"beit"),Dxt.forEach(t),IOr=r(Uqe," \u2014 "),iZ=n(Uqe,"A",{href:!0});var Gxt=s(iZ);qOr=r(Gxt,"FlaxBeitForImageClassification"),Gxt.forEach(t),NOr=r(Uqe," (BEiT model)"),Uqe.forEach(t),jOr=i(sOe),ew=n(sOe,"LI",{});var Jqe=s(ew);dCe=n(Jqe,"STRONG",{});var Oxt=s(dCe);DOr=r(Oxt,"vit"),Oxt.forEach(t),GOr=r(Jqe," \u2014 "),dZ=n(Jqe,"A",{href:!0});var Vxt=s(dZ);OOr=r(Vxt,"FlaxViTForImageClassification"),Vxt.forEach(t),VOr=r(Jqe," (ViT model)"),Jqe.forEach(t),sOe.forEach(t),XOr=i(ii),T(ow.$$.fragment,ii),ii.forEach(t),li.forEach(t),Zje=i(f),df=n(f,"H2",{class:!0});var lOe=s(df);rw=n(lOe,"A",{id:!0,class:!0,href:!0});var Xxt=s(rw);cCe=n(Xxt,"SPAN",{});var zxt=s(cCe);T(yx.$$.fragment,zxt),zxt.forEach(t),Xxt.forEach(t),zOr=i(lOe),fCe=n(lOe,"SPAN",{});var Wxt=s(fCe);WOr=r(Wxt,"FlaxAutoModelForVision2Seq"),Wxt.forEach(t),lOe.forEach(t),eDe=i(f),Mr=n(f,"DIV",{class:!0});var di=s(Mr);T(Lx.$$.fragment,di),QOr=i(di),cf=n(di,"P",{});var aoe=s(cf);HOr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cZ=n(aoe,"A",{href:!0});var Qxt=s(cZ);UOr=r(Qxt,"from_pretrained()"),Qxt.forEach(t),JOr=r(aoe," class method or the "),fZ=n(aoe,"A",{href:!0});var Hxt=s(fZ);YOr=r(Hxt,"from_config()"),Hxt.forEach(t),KOr=r(aoe,` class
method.`),aoe.forEach(t),ZOr=i(di),xx=n(di,"P",{});var iOe=s(xx);eVr=r(iOe,"This class cannot be instantiated directly using "),mCe=n(iOe,"CODE",{});var Uxt=s(mCe);oVr=r(Uxt,"__init__()"),Uxt.forEach(t),rVr=r(iOe," (throws an error)."),iOe.forEach(t),tVr=i(di),Kt=n(di,"DIV",{class:!0});var Ty=s(Kt);T($x.$$.fragment,Ty),aVr=i(Ty),gCe=n(Ty,"P",{});var Jxt=s(gCe);nVr=r(Jxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Jxt.forEach(t),sVr=i(Ty),ff=n(Ty,"P",{});var noe=s(ff);lVr=r(noe,`Note:
Loading a model from its configuration file does `),hCe=n(noe,"STRONG",{});var Yxt=s(hCe);iVr=r(Yxt,"not"),Yxt.forEach(t),dVr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mZ=n(noe,"A",{href:!0});var Kxt=s(mZ);cVr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),fVr=r(noe," to load the model weights."),noe.forEach(t),mVr=i(Ty),T(tw.$$.fragment,Ty),Ty.forEach(t),gVr=i(di),Jr=n(di,"DIV",{class:!0});var ci=s(Jr);T(kx.$$.fragment,ci),hVr=i(ci),pCe=n(ci,"P",{});var Zxt=s(pCe);pVr=r(Zxt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Zxt.forEach(t),uVr=i(ci),wn=n(ci,"P",{});var My=s(wn);_Vr=r(My,"The model class to instantiate is selected based on the "),uCe=n(My,"CODE",{});var e$t=s(uCe);bVr=r(e$t,"model_type"),e$t.forEach(t),vVr=r(My,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(My,"CODE",{});var o$t=s(_Ce);FVr=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),TVr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(My,"CODE",{});var r$t=s(bCe);MVr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),EVr=r(My,":"),My.forEach(t),CVr=i(ci),vCe=n(ci,"UL",{});var t$t=s(vCe);aw=n(t$t,"LI",{});var Yqe=s(aw);FCe=n(Yqe,"STRONG",{});var a$t=s(FCe);wVr=r(a$t,"vision-encoder-decoder"),a$t.forEach(t),AVr=r(Yqe," \u2014 "),gZ=n(Yqe,"A",{href:!0});var n$t=s(gZ);yVr=r(n$t,"FlaxVisionEncoderDecoderModel"),n$t.forEach(t),LVr=r(Yqe," (Vision Encoder decoder model)"),Yqe.forEach(t),t$t.forEach(t),xVr=i(ci),T(nw.$$.fragment,ci),ci.forEach(t),di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.AutoTokenizer"),c(_i,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertModel"),c(vf,"id","extending-the-auto-classes"),c(vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vf,"href","#extending-the-auto-classes"),c(bi,"class","relative group"),c(Tf,"id","transformers.AutoConfig"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#transformers.AutoConfig"),c(vi,"class","relative group"),c(Y$,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(K$,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertConfig"),c(Z$,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartConfig"),c(ek,"href","/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitConfig"),c(ok,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertConfig"),c(rk,"href","/docs/transformers/pr_16004/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(tk,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdConfig"),c(ak,"href","/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(nk,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(sk,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(lk,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertConfig"),c(ik,"href","/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineConfig"),c(dk,"href","/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPConfig"),c(ck,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertConfig"),c(fk,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextConfig"),c(mk,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLConfig"),c(gk,"href","/docs/transformers/pr_16004/en/model_doc/cvt#transformers.CvtConfig"),c(hk,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(pk,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(uk,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(_k,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaConfig"),c(bk,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(vk,"href","/docs/transformers/pr_16004/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Fk,"href","/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTConfig"),c(Tk,"href","/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrConfig"),c(Mk,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Ek,"href","/docs/transformers/pr_16004/en/model_doc/dpr#transformers.DPRConfig"),c(Ck,"href","/docs/transformers/pr_16004/en/model_doc/dpt#transformers.DPTConfig"),c(wk,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraConfig"),c(Ak,"href","/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(yk,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Lk,"href","/docs/transformers/pr_16004/en/model_doc/flava#transformers.FlavaConfig"),c(xk,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetConfig"),c($k,"href","/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTConfig"),c(kk,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelConfig"),c(Sk,"href","/docs/transformers/pr_16004/en/model_doc/glpn#transformers.GLPNConfig"),c(Rk,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Config"),c(Pk,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Bk,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Ik,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJConfig"),c(qk,"href","/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertConfig"),c(Nk,"href","/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertConfig"),c(jk,"href","/docs/transformers/pr_16004/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Dk,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Gk,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Ok,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(Vk,"href","/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDConfig"),c(Xk,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerConfig"),c(zk,"href","/docs/transformers/pr_16004/en/model_doc/luke#transformers.LukeConfig"),c(Wk,"href","/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertConfig"),c(Qk,"href","/docs/transformers/pr_16004/en/model_doc/m2m_100#transformers.M2M100Config"),c(Hk,"href","/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianConfig"),c(Uk,"href","/docs/transformers/pr_16004/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Jk,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartConfig"),c(Yk,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Kk,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Zk,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetConfig"),c(eS,"href","/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Config"),c(oS,"href","/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(rS,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(tS,"href","/docs/transformers/pr_16004/en/model_doc/opt#transformers.OPTConfig"),c(aS,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusConfig"),c(nS,"href","/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverConfig"),c(sS,"href","/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartConfig"),c(lS,"href","/docs/transformers/pr_16004/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(iS,"href","/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(dS,"href","/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(cS,"href","/docs/transformers/pr_16004/en/model_doc/rag#transformers.RagConfig"),c(fS,"href","/docs/transformers/pr_16004/en/model_doc/realm#transformers.RealmConfig"),c(mS,"href","/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerConfig"),c(gS,"href","/docs/transformers/pr_16004/en/model_doc/regnet#transformers.RegNetConfig"),c(hS,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertConfig"),c(pS,"href","/docs/transformers/pr_16004/en/model_doc/resnet#transformers.ResNetConfig"),c(uS,"href","/docs/transformers/pr_16004/en/model_doc/retribert#transformers.RetriBertConfig"),c(_S,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaConfig"),c(bS,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerConfig"),c(vS,"href","/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerConfig"),c(FS,"href","/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWConfig"),c(TS,"href","/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDConfig"),c(MS,"href","/docs/transformers/pr_16004/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(ES,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(CS,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(wS,"href","/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterConfig"),c(AS,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(yS,"href","/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinConfig"),c(LS,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Config"),c(xS,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasConfig"),c($S,"href","/docs/transformers/pr_16004/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(kS,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(SS,"href","/docs/transformers/pr_16004/en/model_doc/trocr#transformers.TrOCRConfig"),c(RS,"href","/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(PS,"href","/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(BS,"href","/docs/transformers/pr_16004/en/model_doc/van#transformers.VanConfig"),c(IS,"href","/docs/transformers/pr_16004/en/model_doc/vilt#transformers.ViltConfig"),c(qS,"href","/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(NS,"href","/docs/transformers/pr_16004/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(jS,"href","/docs/transformers/pr_16004/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(DS,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTConfig"),c(GS,"href","/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(OS,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(VS,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(XS,"href","/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMConfig"),c(zS,"href","/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMConfig"),c(WS,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMConfig"),c(QS,"href","/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(HS,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(US,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(JS,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetConfig"),c(YS,"href","/docs/transformers/pr_16004/en/model_doc/yolos#transformers.YolosConfig"),c(KS,"href","/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"id","transformers.AutoTokenizer"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoTokenizer"),c(Ti,"class","relative group"),c(ZS,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(eR,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertTokenizer"),c(oR,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(rR,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartTokenizer"),c(tR,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartTokenizerFast"),c(aR,"href","/docs/transformers/pr_16004/en/model_doc/barthez#transformers.BarthezTokenizer"),c(nR,"href","/docs/transformers/pr_16004/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(sR,"href","/docs/transformers/pr_16004/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(lR,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertTokenizer"),c(iR,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertTokenizerFast"),c(dR,"href","/docs/transformers/pr_16004/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(cR,"href","/docs/transformers/pr_16004/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(fR,"href","/docs/transformers/pr_16004/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(mR,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(gR,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(hR,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(pR,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(uR,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(_R,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(bR,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(vR,"href","/docs/transformers/pr_16004/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(FR,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertTokenizer"),c(TR,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(MR,"href","/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineTokenizer"),c(ER,"href","/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPTokenizer"),c(CR,"href","/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(wR,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(AR,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(yR,"href","/docs/transformers/pr_16004/en/model_doc/cpm#transformers.CpmTokenizer"),c(LR,"href","/docs/transformers/pr_16004/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(xR,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLTokenizer"),c($R,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kR,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SR,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaTokenizer"),c(RR,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(PR,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(BR,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(IR,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(qR,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(NR,"href","/docs/transformers/pr_16004/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(jR,"href","/docs/transformers/pr_16004/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(DR,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraTokenizer"),c(GR,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(OR,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(VR,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetTokenizer"),c(XR,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(zR,"href","/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(WR,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QR,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(HR,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(UR,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(JR,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KR,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eP,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oP,"href","/docs/transformers/pr_16004/en/model_doc/herbert#transformers.HerbertTokenizer"),c(rP,"href","/docs/transformers/pr_16004/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(tP,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(aP,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nP,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sP,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(lP,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(iP,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(dP,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(cP,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(fP,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(mP,"href","/docs/transformers/pr_16004/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(gP,"href","/docs/transformers/pr_16004/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(hP,"href","/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDTokenizer"),c(pP,"href","/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDTokenizerFast"),c(uP,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerTokenizer"),c(_P,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(bP,"href","/docs/transformers/pr_16004/en/model_doc/luke#transformers.LukeTokenizer"),c(vP,"href","/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(FP,"href","/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(TP,"href","/docs/transformers/pr_16004/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(MP,"href","/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianTokenizer"),c(EP,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartTokenizer"),c(CP,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(wP,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(AP,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(yP,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertTokenizer"),c(LP,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertTokenizerFast"),c(xP,"href","/docs/transformers/pr_16004/en/model_doc/mluke#transformers.MLukeTokenizer"),c($P,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(kP,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(RP,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(PP,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Tokenizer"),c(BP,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5TokenizerFast"),c(IP,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertTokenizer"),c(qP,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(NP,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(jP,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(DP,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GP,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(OP,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(VP,"href","/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(XP,"href","/docs/transformers/pr_16004/en/model_doc/phobert#transformers.PhobertTokenizer"),c(zP,"href","/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartTokenizer"),c(WP,"href","/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(QP,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertTokenizer"),c(HP,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertTokenizerFast"),c(UP,"href","/docs/transformers/pr_16004/en/model_doc/rag#transformers.RagTokenizer"),c(JP,"href","/docs/transformers/pr_16004/en/model_doc/realm#transformers.RealmTokenizer"),c(YP,"href","/docs/transformers/pr_16004/en/model_doc/realm#transformers.RealmTokenizerFast"),c(KP,"href","/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerTokenizer"),c(ZP,"href","/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(eB,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertTokenizer"),c(oB,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(rB,"href","/docs/transformers/pr_16004/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(tB,"href","/docs/transformers/pr_16004/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nB,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sB,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(lB,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(iB,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(dB,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(cB,"href","/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterTokenizer"),c(fB,"href","/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(mB,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(gB,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(hB,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Tokenizer"),c(pB,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5TokenizerFast"),c(uB,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasTokenizer"),c(_B,"href","/docs/transformers/pr_16004/en/model_doc/tapex#transformers.TapexTokenizer"),c(bB,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(vB,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertTokenizer"),c(FB,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertTokenizerFast"),c(TB,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(MB,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(EB,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(CB,"href","/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMTokenizer"),c(wB,"href","/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(AB,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMTokenizer"),c(yB,"href","/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(LB,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(xB,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c($B,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kB,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(RB,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(PB,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertTokenizer"),c(BB,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"id","transformers.AutoFeatureExtractor"),c(sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sh,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(IB,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(qB,"href","/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(jB,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OB,"href","/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(zB,"href","/docs/transformers/pr_16004/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16004/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(QB,"href","/docs/transformers/pr_16004/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(HB,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/pr_16004/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(KB,"href","/docs/transformers/pr_16004/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(eI,"href","/docs/transformers/pr_16004/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(oI,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rI,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tI,"href","/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(aI,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nI,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sI,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lI,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dI,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cI,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fI,"href","/docs/transformers/pr_16004/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"id","transformers.AutoProcessor"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(mI,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(gI,"href","/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPProcessor"),c(hI,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(pI,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(uI,"href","/docs/transformers/pr_16004/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(_I,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bI,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vI,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(FI,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(TI,"href","/docs/transformers/pr_16004/en/model_doc/trocr#transformers.TrOCRProcessor"),c(MI,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EI,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CI,"href","/docs/transformers/pr_16004/en/model_doc/vilt#transformers.ViltProcessor"),c(wI,"href","/docs/transformers/pr_16004/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(AI,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yI,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LI,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoModel"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(xI,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($I,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kI,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SI,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertModel"),c(RI,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartModel"),c(PI,"href","/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitModel"),c(BI,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertModel"),c(II,"href","/docs/transformers/pr_16004/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(qI,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdModel"),c(NI,"href","/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(jI,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(DI,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(GI,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertModel"),c(OI,"href","/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineModel"),c(VI,"href","/docs/transformers/pr_16004/en/model_doc/clip#transformers.CLIPModel"),c(XI,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertModel"),c(zI,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextModel"),c(WI,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLModel"),c(QI,"href","/docs/transformers/pr_16004/en/model_doc/cvt#transformers.CvtModel"),c(HI,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(UI,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(JI,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(YI,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaModel"),c(KI,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(ZI,"href","/docs/transformers/pr_16004/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(eq,"href","/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTModel"),c(oq,"href","/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrModel"),c(rq,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertModel"),c(tq,"href","/docs/transformers/pr_16004/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(aq,"href","/docs/transformers/pr_16004/en/model_doc/dpt#transformers.DPTModel"),c(nq,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraModel"),c(sq,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertModel"),c(lq,"href","/docs/transformers/pr_16004/en/model_doc/flava#transformers.FlavaModel"),c(iq,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetModel"),c(dq,"href","/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTModel"),c(cq,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelModel"),c(fq,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelBaseModel"),c(mq,"href","/docs/transformers/pr_16004/en/model_doc/glpn#transformers.GLPNModel"),c(gq,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2Model"),c(hq,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(pq,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(uq,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJModel"),c(_q,"href","/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertModel"),c(bq,"href","/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertModel"),c(vq,"href","/docs/transformers/pr_16004/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Fq,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Tq,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Mq,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Eq,"href","/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDModel"),c(Cq,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerModel"),c(wq,"href","/docs/transformers/pr_16004/en/model_doc/luke#transformers.LukeModel"),c(Aq,"href","/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertModel"),c(yq,"href","/docs/transformers/pr_16004/en/model_doc/m2m_100#transformers.M2M100Model"),c(Lq,"href","/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianModel"),c(xq,"href","/docs/transformers/pr_16004/en/model_doc/maskformer#transformers.MaskFormerModel"),c($q,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartModel"),c(kq,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Sq,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Rq,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetModel"),c(Pq,"href","/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5Model"),c(Bq,"href","/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Iq,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(qq,"href","/docs/transformers/pr_16004/en/model_doc/opt#transformers.OPTModel"),c(Nq,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusModel"),c(jq,"href","/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverModel"),c(Dq,"href","/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartModel"),c(Gq,"href","/docs/transformers/pr_16004/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Oq,"href","/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Vq,"href","/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Xq,"href","/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerModel"),c(zq,"href","/docs/transformers/pr_16004/en/model_doc/regnet#transformers.RegNetModel"),c(Wq,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertModel"),c(Qq,"href","/docs/transformers/pr_16004/en/model_doc/resnet#transformers.ResNetModel"),c(Hq,"href","/docs/transformers/pr_16004/en/model_doc/retribert#transformers.RetriBertModel"),c(Uq,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaModel"),c(Jq,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerModel"),c(Yq,"href","/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerModel"),c(Kq,"href","/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWModel"),c(Zq,"href","/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDModel"),c(eN,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(oN,"href","/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterModel"),c(rN,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(tN,"href","/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinModel"),c(aN,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5Model"),c(nN,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasModel"),c(sN,"href","/docs/transformers/pr_16004/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(lN,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(iN,"href","/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechModel"),c(dN,"href","/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(cN,"href","/docs/transformers/pr_16004/en/model_doc/van#transformers.VanModel"),c(fN,"href","/docs/transformers/pr_16004/en/model_doc/vilt#transformers.ViltModel"),c(mN,"href","/docs/transformers/pr_16004/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(gN,"href","/docs/transformers/pr_16004/en/model_doc/visual_bert#transformers.VisualBertModel"),c(hN,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTModel"),c(pN,"href","/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(uN,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(_N,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(bN,"href","/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMModel"),c(vN,"href","/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMModel"),c(FN,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMModel"),c(TN,"href","/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(MN,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(EN,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(CN,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetModel"),c(wN,"href","/docs/transformers/pr_16004/en/model_doc/yolos#transformers.YolosModel"),c(AN,"href","/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t_,"id","transformers.AutoModelForPreTraining"),c(t_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t_,"href","#transformers.AutoModelForPreTraining"),c(Li,"class","relative group"),c(yN,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LN,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xN,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($N,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kN,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SN,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForPreTraining"),c(RN,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(PN,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(BN,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(IN,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qN,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(NN,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jN,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(DN,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForPreTraining"),c(GN,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ON,"href","/docs/transformers/pr_16004/en/model_doc/flava#transformers.FlavaForPreTraining"),c(VN,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForPreTraining"),c(XN,"href","/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(zN,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(WN,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(QN,"href","/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(UN,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(JN,"href","/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(YN,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(KN,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(ZN,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ej,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oj,"href","/docs/transformers/pr_16004/en/model_doc/retribert#transformers.RetriBertModel"),c(rj,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tj,"href","/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(aj,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nj,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(lj,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ij,"href","/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(dj,"href","/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(cj,"href","/docs/transformers/pr_16004/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(fj,"href","/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(mj,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(gj,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(hj,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pj,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uj,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_j,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForCausalLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForCausalLM"),c(ki,"class","relative group"),c(bj,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vj,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fj,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tj,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForCausalLM"),c(Mj,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertLMHeadModel"),c(Ej,"href","/docs/transformers/pr_16004/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Cj,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(wj,"href","/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Aj,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(yj,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Lj,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(xj,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c($j,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(kj,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Sj,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Rj,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Pj,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Bj,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Ij,"href","/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianForCausalLM"),c(qj,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Nj,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(jj,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Dj,"href","/docs/transformers/pr_16004/en/model_doc/opt#transformers.OPTForCausalLM"),c(Gj,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Oj,"href","/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Vj,"href","/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Xj,"href","/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(zj,"href","/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Wj,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Qj,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Hj,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Uj,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Jj,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Yj,"href","/docs/transformers/pr_16004/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Kj,"href","/docs/transformers/pr_16004/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Zj,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eD,"href","/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(oD,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(rD,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(tD,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.AutoModelForMaskedLM"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.AutoModelForMaskedLM"),c(Pi,"class","relative group"),c(aD,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nD,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sD,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lD,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(iD,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForMaskedLM"),c(cD,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(fD,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mD,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(gD,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hD,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pD,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uD,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_D,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(bD,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vD,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(FD,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(TD,"href","/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ED,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CD,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(wD,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(AD,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(yD,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LD,"href","/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xD,"href","/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($D,"href","/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kD,"href","/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(SD,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PD,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(BD,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ID,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qD,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ND,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jD,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DD,"href","/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T1,"id","transformers.AutoModelForSeq2SeqLM"),c(T1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(GD,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zD,"href","/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(WD,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(UD,"href","/docs/transformers/pr_16004/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YD,"href","/docs/transformers/pr_16004/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_16004/en/model_doc/marian#transformers.MarianMTModel"),c(ZD,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_16004/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oG,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_16004/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_16004/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForSequenceClassification"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForSequenceClassification"),c(Di,"class","relative group"),c(sG,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lG,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iG,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dG,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cG,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fG,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gG,"href","/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hG,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(pG,"href","/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uG,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_G,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bG,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(vG,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(FG,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(TG,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(MG,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(EG,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wG,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(AG,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yG,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LG,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xG,"href","/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($G,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kG,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SG,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(RG,"href","/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDForSequenceClassification"),c(PG,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(BG,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(IG,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(NG,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(jG,"href","/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(DG,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(GG,"href","/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(OG,"href","/docs/transformers/pr_16004/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(VG,"href","/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(XG,"href","/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(zG,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QG,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(HG,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(UG,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(JG,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(YG,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(KG,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(eO,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oO,"href","/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nb,"id","transformers.AutoModelForMultipleChoice"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForMultipleChoice"),c(Vi,"class","relative group"),c(rO,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tO,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aO,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nO,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sO,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lO,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iO,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cO,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(mO,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(gO,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(hO,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(pO,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(uO,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(_O,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(bO,"href","/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(vO,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(FO,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(EO,"href","/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(CO,"href","/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(AO,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(yO,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(LO,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(xO,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c($O,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(kO,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(SO,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(RO,"href","/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForNextSentencePrediction"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Wi,"class","relative group"),c(PO,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(NO,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(jO,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(DO,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(GO,"href","/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForTokenClassification"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForTokenClassification"),c(Ui,"class","relative group"),c(OO,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VO,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XO,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zO,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(WO,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForTokenClassification"),c(QO,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(HO,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(UO,"href","/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineForTokenClassification"),c(JO,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(YO,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(KO,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(ZO,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(eV,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(oV,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(rV,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(tV,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(aV,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(nV,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(sV,"href","/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(lV,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(iV,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(dV,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(cV,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(fV,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(mV,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(gV,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(hV,"href","/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(pV,"href","/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(uV,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(_V,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(bV,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(vV,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(FV,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(TV,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(MV,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(EV,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(CV,"href","/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c4,"id","transformers.AutoModelForQuestionAnswering"),c(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c4,"href","#transformers.AutoModelForQuestionAnswering"),c(Ki,"class","relative group"),c(wV,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(xV,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.BartForQuestionAnswering"),c($V,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_16004/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_16004/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(OV,"href","/docs/transformers/pr_16004/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(XV,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_16004/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_16004/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_16004/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_16004/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_16004/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_16004/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_16004/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_16004/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_16004/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cX,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gX,"href","/docs/transformers/pr_16004/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForTableQuestionAnswering"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForTableQuestionAnswering"),c(od,"class","relative group"),c(hX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForImageClassification"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForImageClassification"),c(ad,"class","relative group"),c(bX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitForImageClassification"),c(MX,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EX,"href","/docs/transformers/pr_16004/en/model_doc/cvt#transformers.CvtForImageClassification"),c(CX,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(wX,"href","/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTForImageClassification"),c(AX,"href","/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(yX,"href","/docs/transformers/pr_16004/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(LX,"href","/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(xX,"href","/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c($X,"href","/docs/transformers/pr_16004/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(kX,"href","/docs/transformers/pr_16004/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(SX,"href","/docs/transformers/pr_16004/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(RX,"href","/docs/transformers/pr_16004/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(PX,"href","/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BX,"href","/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinForImageClassification"),c(IX,"href","/docs/transformers/pr_16004/en/model_doc/van#transformers.VanForImageClassification"),c(qX,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForVision2Seq"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForVision2Seq"),c(ld,"class","relative group"),c(NX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Av,"id","transformers.AutoModelForAudioClassification"),c(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Av,"href","#transformers.AutoModelForAudioClassification"),c(cd,"class","relative group"),c(OX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(WX,"href","/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QX,"href","/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(HX,"href","/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(UX,"href","/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(JX,"href","/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(YX,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(KX,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jv,"id","transformers.AutoModelForAudioFrameClassification"),c(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jv,"href","#transformers.AutoModelForAudioFrameClassification"),c(gd,"class","relative group"),c(ez,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(az,"href","/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(nz,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(sz,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(lz,"href","/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForCTC"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(iz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fz,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(mz,"href","/docs/transformers/pr_16004/en/model_doc/hubert#transformers.HubertForCTC"),c(gz,"href","/docs/transformers/pr_16004/en/model_doc/sew#transformers.SEWForCTC"),c(hz,"href","/docs/transformers/pr_16004/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pz,"href","/docs/transformers/pr_16004/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(uz,"href","/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(_z,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bz,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(vz,"href","/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(vd,"class","relative group"),c(Fz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_16004/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Cz,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForAudioXVector"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForAudioXVector"),c(Md,"class","relative group"),c(wz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(xz,"href","/docs/transformers/pr_16004/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c($z,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(kz,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Sz,"href","/docs/transformers/pr_16004/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MF,"id","transformers.AutoModelForMaskedImageModeling"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.AutoModelForMaskedImageModeling"),c(wd,"class","relative group"),c(Rz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/pr_16004/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(qz,"href","/docs/transformers/pr_16004/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Nz,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForObjectDetection"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForObjectDetection"),c(xd,"class","relative group"),c(jz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Vz,"href","/docs/transformers/pr_16004/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForImageSegmentation"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForImageSegmentation"),c(Sd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qz,"href","/docs/transformers/pr_16004/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForSemanticSegmentation"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Bd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_16004/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(Kz,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(Zz,"href","/docs/transformers/pr_16004/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(eW,"href","/docs/transformers/pr_16004/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForInstanceSegmentation"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Nd,"class","relative group"),c(oW,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_16004/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.TFAutoModel"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.TFAutoModel"),c(Gd,"class","relative group"),c(nW,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertModel"),c(dW,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.TFBartModel"),c(cW,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertModel"),c(fW,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(mW,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(gW,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertModel"),c(hW,"href","/docs/transformers/pr_16004/en/model_doc/clip#transformers.TFCLIPModel"),c(pW,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertModel"),c(uW,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.TFConvNextModel"),c(_W,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.TFCTRLModel"),c(bW,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(vW,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaModel"),c(FW,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(TW,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(MW,"href","/docs/transformers/pr_16004/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(EW,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraModel"),c(CW,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(wW,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelModel"),c(AW,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yW,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.TFGPT2Model"),c(LW,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.TFGPTJModel"),c(xW,"href","/docs/transformers/pr_16004/en/model_doc/hubert#transformers.TFHubertModel"),c($W,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(kW,"href","/docs/transformers/pr_16004/en/model_doc/led#transformers.TFLEDModel"),c(SW,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerModel"),c(RW,"href","/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.TFLxmertModel"),c(PW,"href","/docs/transformers/pr_16004/en/model_doc/marian#transformers.TFMarianModel"),c(BW,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.TFMBartModel"),c(IW,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qW,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetModel"),c(NW,"href","/docs/transformers/pr_16004/en/model_doc/mt5#transformers.TFMT5Model"),c(jW,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(DW,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.TFPegasusModel"),c(GW,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertModel"),c(OW,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaModel"),c(VW,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerModel"),c(XW,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(zW,"href","/docs/transformers/pr_16004/en/model_doc/swin#transformers.TFSwinModel"),c(WW,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.TFT5Model"),c(QW,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasModel"),c(HW,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(UW,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.TFViTModel"),c(JW,"href","/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(YW,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(KW,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMModel"),c(ZW,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(eQ,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q6,"id","transformers.TFAutoModelForPreTraining"),c(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q6,"href","#transformers.TFAutoModelForPreTraining"),c(Xd,"class","relative group"),c(oQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aQ,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(nQ,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(sQ,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForPreTraining"),c(lQ,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(dQ,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(fQ,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mQ,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(gQ,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hQ,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(pQ,"href","/docs/transformers/pr_16004/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(uQ,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(_Q,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(vQ,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(FQ,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(MQ,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(EQ,"href","/docs/transformers/pr_16004/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(CQ,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wQ,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(AQ,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.TFAutoModelForCausalLM"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.TFAutoModelForCausalLM"),c(Qd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Q,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(kQ,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(SQ,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(RQ,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PQ,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(BQ,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IQ,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(qQ,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(NQ,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(jQ,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DQ,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GQ,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.TFAutoModelForImageClassification"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModelForImageClassification"),c(Jd,"class","relative group"),c(OQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zQ,"href","/docs/transformers/pr_16004/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(WQ,"href","/docs/transformers/pr_16004/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(QQ,"href","/docs/transformers/pr_16004/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(HQ,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.TFAutoModelForMaskedLM"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.TFAutoModelForMaskedLM"),c(Zd,"class","relative group"),c(UQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YQ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KQ,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(eH,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(oH,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(rH,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(tH,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(aH,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(nH,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(sH,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(lH,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(iH,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dH,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(cH,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(fH,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(mH,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(gH,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hH,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(pH,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(uH,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_H,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(rc,"class","relative group"),c(bH,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MH,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(EH,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(CH,"href","/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(wH,"href","/docs/transformers/pr_16004/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_16004/en/model_doc/marian#transformers.TFMarianMTModel"),c(yH,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_16004/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(xH,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c($H,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForSequenceClassification"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForSequenceClassification"),c(nc,"class","relative group"),c(kH,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(BH,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(IH,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(qH,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(NH,"href","/docs/transformers/pr_16004/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(jH,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(DH,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(GH,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(OH,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(VH,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(XH,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(zH,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(WH,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(QH,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(HH,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(UH,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(JH,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(YH,"href","/docs/transformers/pr_16004/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(KH,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(eU,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(oU,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(rU,"href","/docs/transformers/pr_16004/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(tU,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(aU,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(nU,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForMultipleChoice"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ic,"class","relative group"),c(sU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(cU,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(fU,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(mU,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(gU,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(hU,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(pU,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(_U,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(bU,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(vU,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(FU,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(TU,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(MU,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(EU,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(CU,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(wU,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForNextSentencePrediction"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(AU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c($U,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(hc,"class","relative group"),c(kU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/pr_16004/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForTokenClassification"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForTokenClassification"),c(_c,"class","relative group"),c(BU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(jU,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(DU,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(GU,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(OU,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(VU,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(XU,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(zU,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(WU,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(QU,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(HU,"href","/docs/transformers/pr_16004/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(UU,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(JU,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(YU,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(KU,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(ZU,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(eJ,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(oJ,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(rJ,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(tJ,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForQuestionAnswering"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Fc,"class","relative group"),c(aJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_16004/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16004/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_16004/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_16004/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_16004/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(uJ,"href","/docs/transformers/pr_16004/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_16004/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_16004/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_16004/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_16004/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_16004/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(wJ,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_16004/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.TFAutoModelForVision2Seq"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.TFAutoModelForVision2Seq"),c(Ec,"class","relative group"),c(yJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($J,"href","/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ac,"class","relative group"),c(kJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_16004/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModel"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModel"),c(xc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertModel"),c(jJ,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartModel"),c(DJ,"href","/docs/transformers/pr_16004/en/model_doc/beit#transformers.FlaxBeitModel"),c(GJ,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertModel"),c(OJ,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(VJ,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(XJ,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(zJ,"href","/docs/transformers/pr_16004/en/model_doc/clip#transformers.FlaxCLIPModel"),c(WJ,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(QJ,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraModel"),c(HJ,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(UJ,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(JJ,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(YJ,"href","/docs/transformers/pr_16004/en/model_doc/marian#transformers.FlaxMarianModel"),c(KJ,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartModel"),c(ZJ,"href","/docs/transformers/pr_16004/en/model_doc/mt5#transformers.FlaxMT5Model"),c(eY,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(oY,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(rY,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(tY,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.FlaxT5Model"),c(aY,"href","/docs/transformers/pr_16004/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(nY,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.FlaxViTModel"),c(sY,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(lY,"href","/docs/transformers/pr_16004/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(iY,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o5,"id","transformers.FlaxAutoModelForCausalLM"),c(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Sc,"class","relative group"),c(dY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(gY,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(hY,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(pY,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(uY,"href","/docs/transformers/pr_16004/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(_Y,"href","/docs/transformers/pr_16004/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(bY,"href","/docs/transformers/pr_16004/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(vY,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(FY,"href","/docs/transformers/pr_16004/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForPreTraining"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Bc,"class","relative group"),c(TY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(wY,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(AY,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(yY,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(LY,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(xY,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_16004/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(SY,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(RY,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_16004/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(BY,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForMaskedLM"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Nc,"class","relative group"),c(IY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(DY,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GY,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(OY,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(VY,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(XY,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(zY,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WY,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(QY,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(HY,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(UY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZY,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_16004/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_16004/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(rK,"href","/docs/transformers/pr_16004/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(tK,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_16004/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_16004/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(sK,"href","/docs/transformers/pr_16004/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(lK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cK,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(fK,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(mK,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(gK,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(hK,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(uK,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(_K,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(bK,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(vK,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Qc,"class","relative group"),c(FK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(CK,"href","/docs/transformers/pr_16004/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(wK,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(AK,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(yK,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_16004/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c($K,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForTokenClassification"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Jc,"class","relative group"),c(RK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(qK,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(NK,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(jK,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(DK,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(GK,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(OK,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(VK,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Zc,"class","relative group"),c(XK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/pr_16004/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(HK,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(UK,"href","/docs/transformers/pr_16004/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(JK,"href","/docs/transformers/pr_16004/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(YK,"href","/docs/transformers/pr_16004/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(KK,"href","/docs/transformers/pr_16004/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_16004/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_16004/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(rf,"class","relative group"),c(oZ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_16004/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForImageClassification"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForImageClassification"),c(nf,"class","relative group"),c(nZ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_16004/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(dZ,"href","/docs/transformers/pr_16004/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForVision2Seq"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(df,"class","relative group"),c(cZ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fZ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mZ,"href","/docs/transformers/pr_16004/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gZ,"href","/docs/transformers/pr_16004/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,fi),b(f,pf,_),b(f,rt,_),e(rt,mi),e(rt,gi),e(gi,Ey),e(rt,uf),b(f,je,_),b(f,We,_),e(We,hi),e(We,yn),e(yn,Cy),e(We,Ln),e(We,xn),e(xn,wy),e(We,pi),e(We,$n),e($n,Ay),e(We,ui),b(f,_f,_),M(Ca,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,z$),e(Ae,_i),e(_i,W$),e(Ae,Q$),b(f,Eo,_),b(f,wa,_),e(wa,H$),e(wa,bf),e(bf,U$),e(wa,dOe),b(f,Kqe,_),b(f,bi,_),e(bi,vf),e(vf,soe),M(yy,soe,null),e(bi,cOe),e(bi,loe),e(loe,fOe),b(f,Zqe,_),b(f,kn,_),e(kn,mOe),e(kn,ioe),e(ioe,gOe),e(kn,hOe),e(kn,doe),e(doe,pOe),e(kn,uOe),b(f,eNe,_),M(Ly,f,_),b(f,oNe,_),b(f,J$,_),e(J$,_Oe),b(f,rNe,_),M(Ff,f,_),b(f,tNe,_),b(f,vi,_),e(vi,Tf),e(Tf,coe),M(xy,coe,null),e(vi,bOe),e(vi,foe),e(foe,vOe),b(f,aNe,_),b(f,Co,_),M($y,Co,null),e(Co,FOe),e(Co,ky),e(ky,TOe),e(ky,Y$),e(Y$,MOe),e(ky,EOe),e(Co,COe),e(Co,Sy),e(Sy,wOe),e(Sy,moe),e(moe,AOe),e(Sy,yOe),e(Co,LOe),e(Co,Er),M(Ry,Er,null),e(Er,xOe),e(Er,goe),e(goe,$Oe),e(Er,kOe),e(Er,Fi),e(Fi,SOe),e(Fi,hoe),e(hoe,ROe),e(Fi,POe),e(Fi,poe),e(poe,BOe),e(Fi,IOe),e(Er,qOe),e(Er,A),e(A,Mf),e(Mf,uoe),e(uoe,NOe),e(Mf,jOe),e(Mf,K$),e(K$,DOe),e(Mf,GOe),e(A,OOe),e(A,Ef),e(Ef,_oe),e(_oe,VOe),e(Ef,XOe),e(Ef,Z$),e(Z$,zOe),e(Ef,WOe),e(A,QOe),e(A,Cf),e(Cf,boe),e(boe,HOe),e(Cf,UOe),e(Cf,ek),e(ek,JOe),e(Cf,YOe),e(A,KOe),e(A,wf),e(wf,voe),e(voe,ZOe),e(wf,eVe),e(wf,ok),e(ok,oVe),e(wf,rVe),e(A,tVe),e(A,Af),e(Af,Foe),e(Foe,aVe),e(Af,nVe),e(Af,rk),e(rk,sVe),e(Af,lVe),e(A,iVe),e(A,yf),e(yf,Toe),e(Toe,dVe),e(yf,cVe),e(yf,tk),e(tk,fVe),e(yf,mVe),e(A,gVe),e(A,Lf),e(Lf,Moe),e(Moe,hVe),e(Lf,pVe),e(Lf,ak),e(ak,uVe),e(Lf,_Ve),e(A,bVe),e(A,xf),e(xf,Eoe),e(Eoe,vVe),e(xf,FVe),e(xf,nk),e(nk,TVe),e(xf,MVe),e(A,EVe),e(A,$f),e($f,Coe),e(Coe,CVe),e($f,wVe),e($f,sk),e(sk,AVe),e($f,yVe),e(A,LVe),e(A,kf),e(kf,woe),e(woe,xVe),e(kf,$Ve),e(kf,lk),e(lk,kVe),e(kf,SVe),e(A,RVe),e(A,Sf),e(Sf,Aoe),e(Aoe,PVe),e(Sf,BVe),e(Sf,ik),e(ik,IVe),e(Sf,qVe),e(A,NVe),e(A,Rf),e(Rf,yoe),e(yoe,jVe),e(Rf,DVe),e(Rf,dk),e(dk,GVe),e(Rf,OVe),e(A,VVe),e(A,Pf),e(Pf,Loe),e(Loe,XVe),e(Pf,zVe),e(Pf,ck),e(ck,WVe),e(Pf,QVe),e(A,HVe),e(A,Bf),e(Bf,xoe),e(xoe,UVe),e(Bf,JVe),e(Bf,fk),e(fk,YVe),e(Bf,KVe),e(A,ZVe),e(A,If),e(If,$oe),e($oe,eXe),e(If,oXe),e(If,mk),e(mk,rXe),e(If,tXe),e(A,aXe),e(A,qf),e(qf,koe),e(koe,nXe),e(qf,sXe),e(qf,gk),e(gk,lXe),e(qf,iXe),e(A,dXe),e(A,Nf),e(Nf,Soe),e(Soe,cXe),e(Nf,fXe),e(Nf,hk),e(hk,mXe),e(Nf,gXe),e(A,hXe),e(A,jf),e(jf,Roe),e(Roe,pXe),e(jf,uXe),e(jf,pk),e(pk,_Xe),e(jf,bXe),e(A,vXe),e(A,Df),e(Df,Poe),e(Poe,FXe),e(Df,TXe),e(Df,uk),e(uk,MXe),e(Df,EXe),e(A,CXe),e(A,Gf),e(Gf,Boe),e(Boe,wXe),e(Gf,AXe),e(Gf,_k),e(_k,yXe),e(Gf,LXe),e(A,xXe),e(A,Of),e(Of,Ioe),e(Ioe,$Xe),e(Of,kXe),e(Of,bk),e(bk,SXe),e(Of,RXe),e(A,PXe),e(A,Vf),e(Vf,qoe),e(qoe,BXe),e(Vf,IXe),e(Vf,vk),e(vk,qXe),e(Vf,NXe),e(A,jXe),e(A,Xf),e(Xf,Noe),e(Noe,DXe),e(Xf,GXe),e(Xf,Fk),e(Fk,OXe),e(Xf,VXe),e(A,XXe),e(A,zf),e(zf,joe),e(joe,zXe),e(zf,WXe),e(zf,Tk),e(Tk,QXe),e(zf,HXe),e(A,UXe),e(A,Wf),e(Wf,Doe),e(Doe,JXe),e(Wf,YXe),e(Wf,Mk),e(Mk,KXe),e(Wf,ZXe),e(A,eze),e(A,Qf),e(Qf,Goe),e(Goe,oze),e(Qf,rze),e(Qf,Ek),e(Ek,tze),e(Qf,aze),e(A,nze),e(A,Hf),e(Hf,Ooe),e(Ooe,sze),e(Hf,lze),e(Hf,Ck),e(Ck,ize),e(Hf,dze),e(A,cze),e(A,Uf),e(Uf,Voe),e(Voe,fze),e(Uf,mze),e(Uf,wk),e(wk,gze),e(Uf,hze),e(A,pze),e(A,Jf),e(Jf,Xoe),e(Xoe,uze),e(Jf,_ze),e(Jf,Ak),e(Ak,bze),e(Jf,vze),e(A,Fze),e(A,Yf),e(Yf,zoe),e(zoe,Tze),e(Yf,Mze),e(Yf,yk),e(yk,Eze),e(Yf,Cze),e(A,wze),e(A,Kf),e(Kf,Woe),e(Woe,Aze),e(Kf,yze),e(Kf,Lk),e(Lk,Lze),e(Kf,xze),e(A,$ze),e(A,Zf),e(Zf,Qoe),e(Qoe,kze),e(Zf,Sze),e(Zf,xk),e(xk,Rze),e(Zf,Pze),e(A,Bze),e(A,em),e(em,Hoe),e(Hoe,Ize),e(em,qze),e(em,$k),e($k,Nze),e(em,jze),e(A,Dze),e(A,om),e(om,Uoe),e(Uoe,Gze),e(om,Oze),e(om,kk),e(kk,Vze),e(om,Xze),e(A,zze),e(A,rm),e(rm,Joe),e(Joe,Wze),e(rm,Qze),e(rm,Sk),e(Sk,Hze),e(rm,Uze),e(A,Jze),e(A,tm),e(tm,Yoe),e(Yoe,Yze),e(tm,Kze),e(tm,Rk),e(Rk,Zze),e(tm,eWe),e(A,oWe),e(A,am),e(am,Koe),e(Koe,rWe),e(am,tWe),e(am,Pk),e(Pk,aWe),e(am,nWe),e(A,sWe),e(A,nm),e(nm,Zoe),e(Zoe,lWe),e(nm,iWe),e(nm,Bk),e(Bk,dWe),e(nm,cWe),e(A,fWe),e(A,sm),e(sm,ere),e(ere,mWe),e(sm,gWe),e(sm,Ik),e(Ik,hWe),e(sm,pWe),e(A,uWe),e(A,lm),e(lm,ore),e(ore,_We),e(lm,bWe),e(lm,qk),e(qk,vWe),e(lm,FWe),e(A,TWe),e(A,im),e(im,rre),e(rre,MWe),e(im,EWe),e(im,Nk),e(Nk,CWe),e(im,wWe),e(A,AWe),e(A,dm),e(dm,tre),e(tre,yWe),e(dm,LWe),e(dm,jk),e(jk,xWe),e(dm,$We),e(A,kWe),e(A,cm),e(cm,are),e(are,SWe),e(cm,RWe),e(cm,Dk),e(Dk,PWe),e(cm,BWe),e(A,IWe),e(A,fm),e(fm,nre),e(nre,qWe),e(fm,NWe),e(fm,Gk),e(Gk,jWe),e(fm,DWe),e(A,GWe),e(A,mm),e(mm,sre),e(sre,OWe),e(mm,VWe),e(mm,Ok),e(Ok,XWe),e(mm,zWe),e(A,WWe),e(A,gm),e(gm,lre),e(lre,QWe),e(gm,HWe),e(gm,Vk),e(Vk,UWe),e(gm,JWe),e(A,YWe),e(A,hm),e(hm,ire),e(ire,KWe),e(hm,ZWe),e(hm,Xk),e(Xk,eQe),e(hm,oQe),e(A,rQe),e(A,pm),e(pm,dre),e(dre,tQe),e(pm,aQe),e(pm,zk),e(zk,nQe),e(pm,sQe),e(A,lQe),e(A,um),e(um,cre),e(cre,iQe),e(um,dQe),e(um,Wk),e(Wk,cQe),e(um,fQe),e(A,mQe),e(A,_m),e(_m,fre),e(fre,gQe),e(_m,hQe),e(_m,Qk),e(Qk,pQe),e(_m,uQe),e(A,_Qe),e(A,bm),e(bm,mre),e(mre,bQe),e(bm,vQe),e(bm,Hk),e(Hk,FQe),e(bm,TQe),e(A,MQe),e(A,vm),e(vm,gre),e(gre,EQe),e(vm,CQe),e(vm,Uk),e(Uk,wQe),e(vm,AQe),e(A,yQe),e(A,Fm),e(Fm,hre),e(hre,LQe),e(Fm,xQe),e(Fm,Jk),e(Jk,$Qe),e(Fm,kQe),e(A,SQe),e(A,Tm),e(Tm,pre),e(pre,RQe),e(Tm,PQe),e(Tm,Yk),e(Yk,BQe),e(Tm,IQe),e(A,qQe),e(A,Mm),e(Mm,ure),e(ure,NQe),e(Mm,jQe),e(Mm,Kk),e(Kk,DQe),e(Mm,GQe),e(A,OQe),e(A,Em),e(Em,_re),e(_re,VQe),e(Em,XQe),e(Em,Zk),e(Zk,zQe),e(Em,WQe),e(A,QQe),e(A,Cm),e(Cm,bre),e(bre,HQe),e(Cm,UQe),e(Cm,eS),e(eS,JQe),e(Cm,YQe),e(A,KQe),e(A,wm),e(wm,vre),e(vre,ZQe),e(wm,eHe),e(wm,oS),e(oS,oHe),e(wm,rHe),e(A,tHe),e(A,Am),e(Am,Fre),e(Fre,aHe),e(Am,nHe),e(Am,rS),e(rS,sHe),e(Am,lHe),e(A,iHe),e(A,ym),e(ym,Tre),e(Tre,dHe),e(ym,cHe),e(ym,tS),e(tS,fHe),e(ym,mHe),e(A,gHe),e(A,Lm),e(Lm,Mre),e(Mre,hHe),e(Lm,pHe),e(Lm,aS),e(aS,uHe),e(Lm,_He),e(A,bHe),e(A,xm),e(xm,Ere),e(Ere,vHe),e(xm,FHe),e(xm,nS),e(nS,THe),e(xm,MHe),e(A,EHe),e(A,$m),e($m,Cre),e(Cre,CHe),e($m,wHe),e($m,sS),e(sS,AHe),e($m,yHe),e(A,LHe),e(A,km),e(km,wre),e(wre,xHe),e(km,$He),e(km,lS),e(lS,kHe),e(km,SHe),e(A,RHe),e(A,Sm),e(Sm,Are),e(Are,PHe),e(Sm,BHe),e(Sm,iS),e(iS,IHe),e(Sm,qHe),e(A,NHe),e(A,Rm),e(Rm,yre),e(yre,jHe),e(Rm,DHe),e(Rm,dS),e(dS,GHe),e(Rm,OHe),e(A,VHe),e(A,Pm),e(Pm,Lre),e(Lre,XHe),e(Pm,zHe),e(Pm,cS),e(cS,WHe),e(Pm,QHe),e(A,HHe),e(A,Bm),e(Bm,xre),e(xre,UHe),e(Bm,JHe),e(Bm,fS),e(fS,YHe),e(Bm,KHe),e(A,ZHe),e(A,Im),e(Im,$re),e($re,eUe),e(Im,oUe),e(Im,mS),e(mS,rUe),e(Im,tUe),e(A,aUe),e(A,qm),e(qm,kre),e(kre,nUe),e(qm,sUe),e(qm,gS),e(gS,lUe),e(qm,iUe),e(A,dUe),e(A,Nm),e(Nm,Sre),e(Sre,cUe),e(Nm,fUe),e(Nm,hS),e(hS,mUe),e(Nm,gUe),e(A,hUe),e(A,jm),e(jm,Rre),e(Rre,pUe),e(jm,uUe),e(jm,pS),e(pS,_Ue),e(jm,bUe),e(A,vUe),e(A,Dm),e(Dm,Pre),e(Pre,FUe),e(Dm,TUe),e(Dm,uS),e(uS,MUe),e(Dm,EUe),e(A,CUe),e(A,Gm),e(Gm,Bre),e(Bre,wUe),e(Gm,AUe),e(Gm,_S),e(_S,yUe),e(Gm,LUe),e(A,xUe),e(A,Om),e(Om,Ire),e(Ire,$Ue),e(Om,kUe),e(Om,bS),e(bS,SUe),e(Om,RUe),e(A,PUe),e(A,Vm),e(Vm,qre),e(qre,BUe),e(Vm,IUe),e(Vm,vS),e(vS,qUe),e(Vm,NUe),e(A,jUe),e(A,Xm),e(Xm,Nre),e(Nre,DUe),e(Xm,GUe),e(Xm,FS),e(FS,OUe),e(Xm,VUe),e(A,XUe),e(A,zm),e(zm,jre),e(jre,zUe),e(zm,WUe),e(zm,TS),e(TS,QUe),e(zm,HUe),e(A,UUe),e(A,Wm),e(Wm,Dre),e(Dre,JUe),e(Wm,YUe),e(Wm,MS),e(MS,KUe),e(Wm,ZUe),e(A,eJe),e(A,Qm),e(Qm,Gre),e(Gre,oJe),e(Qm,rJe),e(Qm,ES),e(ES,tJe),e(Qm,aJe),e(A,nJe),e(A,Hm),e(Hm,Ore),e(Ore,sJe),e(Hm,lJe),e(Hm,CS),e(CS,iJe),e(Hm,dJe),e(A,cJe),e(A,Um),e(Um,Vre),e(Vre,fJe),e(Um,mJe),e(Um,wS),e(wS,gJe),e(Um,hJe),e(A,pJe),e(A,Jm),e(Jm,Xre),e(Xre,uJe),e(Jm,_Je),e(Jm,AS),e(AS,bJe),e(Jm,vJe),e(A,FJe),e(A,Ym),e(Ym,zre),e(zre,TJe),e(Ym,MJe),e(Ym,yS),e(yS,EJe),e(Ym,CJe),e(A,wJe),e(A,Km),e(Km,Wre),e(Wre,AJe),e(Km,yJe),e(Km,LS),e(LS,LJe),e(Km,xJe),e(A,$Je),e(A,Zm),e(Zm,Qre),e(Qre,kJe),e(Zm,SJe),e(Zm,xS),e(xS,RJe),e(Zm,PJe),e(A,BJe),e(A,eg),e(eg,Hre),e(Hre,IJe),e(eg,qJe),e(eg,$S),e($S,NJe),e(eg,jJe),e(A,DJe),e(A,og),e(og,Ure),e(Ure,GJe),e(og,OJe),e(og,kS),e(kS,VJe),e(og,XJe),e(A,zJe),e(A,rg),e(rg,Jre),e(Jre,WJe),e(rg,QJe),e(rg,SS),e(SS,HJe),e(rg,UJe),e(A,JJe),e(A,tg),e(tg,Yre),e(Yre,YJe),e(tg,KJe),e(tg,RS),e(RS,ZJe),e(tg,eYe),e(A,oYe),e(A,ag),e(ag,Kre),e(Kre,rYe),e(ag,tYe),e(ag,PS),e(PS,aYe),e(ag,nYe),e(A,sYe),e(A,ng),e(ng,Zre),e(Zre,lYe),e(ng,iYe),e(ng,BS),e(BS,dYe),e(ng,cYe),e(A,fYe),e(A,sg),e(sg,ete),e(ete,mYe),e(sg,gYe),e(sg,IS),e(IS,hYe),e(sg,pYe),e(A,uYe),e(A,lg),e(lg,ote),e(ote,_Ye),e(lg,bYe),e(lg,qS),e(qS,vYe),e(lg,FYe),e(A,TYe),e(A,ig),e(ig,rte),e(rte,MYe),e(ig,EYe),e(ig,NS),e(NS,CYe),e(ig,wYe),e(A,AYe),e(A,dg),e(dg,tte),e(tte,yYe),e(dg,LYe),e(dg,jS),e(jS,xYe),e(dg,$Ye),e(A,kYe),e(A,cg),e(cg,ate),e(ate,SYe),e(cg,RYe),e(cg,DS),e(DS,PYe),e(cg,BYe),e(A,IYe),e(A,fg),e(fg,nte),e(nte,qYe),e(fg,NYe),e(fg,GS),e(GS,jYe),e(fg,DYe),e(A,GYe),e(A,mg),e(mg,ste),e(ste,OYe),e(mg,VYe),e(mg,OS),e(OS,XYe),e(mg,zYe),e(A,WYe),e(A,gg),e(gg,lte),e(lte,QYe),e(gg,HYe),e(gg,VS),e(VS,UYe),e(gg,JYe),e(A,YYe),e(A,hg),e(hg,ite),e(ite,KYe),e(hg,ZYe),e(hg,XS),e(XS,eKe),e(hg,oKe),e(A,rKe),e(A,pg),e(pg,dte),e(dte,tKe),e(pg,aKe),e(pg,zS),e(zS,nKe),e(pg,sKe),e(A,lKe),e(A,ug),e(ug,cte),e(cte,iKe),e(ug,dKe),e(ug,WS),e(WS,cKe),e(ug,fKe),e(A,mKe),e(A,_g),e(_g,fte),e(fte,gKe),e(_g,hKe),e(_g,QS),e(QS,pKe),e(_g,uKe),e(A,_Ke),e(A,bg),e(bg,mte),e(mte,bKe),e(bg,vKe),e(bg,HS),e(HS,FKe),e(bg,TKe),e(A,MKe),e(A,vg),e(vg,gte),e(gte,EKe),e(vg,CKe),e(vg,US),e(US,wKe),e(vg,AKe),e(A,yKe),e(A,Fg),e(Fg,hte),e(hte,LKe),e(Fg,xKe),e(Fg,JS),e(JS,$Ke),e(Fg,kKe),e(A,SKe),e(A,Tg),e(Tg,pte),e(pte,RKe),e(Tg,PKe),e(Tg,YS),e(YS,BKe),e(Tg,IKe),e(A,qKe),e(A,Mg),e(Mg,ute),e(ute,NKe),e(Mg,jKe),e(Mg,KS),e(KS,DKe),e(Mg,GKe),e(Er,OKe),M(Eg,Er,null),e(Co,VKe),e(Co,Cg),M(Py,Cg,null),e(Cg,XKe),e(Cg,_te),e(_te,zKe),b(f,nNe,_),b(f,Ti,_),e(Ti,wg),e(wg,bte),M(By,bte,null),e(Ti,WKe),e(Ti,vte),e(vte,QKe),b(f,sNe,_),b(f,wo,_),M(Iy,wo,null),e(wo,HKe),e(wo,qy),e(qy,UKe),e(qy,ZS),e(ZS,JKe),e(qy,YKe),e(wo,KKe),e(wo,Ny),e(Ny,ZKe),e(Ny,Fte),e(Fte,eZe),e(Ny,oZe),e(wo,rZe),e(wo,Cr),M(jy,Cr,null),e(Cr,tZe),e(Cr,Tte),e(Tte,aZe),e(Cr,nZe),e(Cr,Aa),e(Aa,sZe),e(Aa,Mte),e(Mte,lZe),e(Aa,iZe),e(Aa,Ete),e(Ete,dZe),e(Aa,cZe),e(Aa,Cte),e(Cte,fZe),e(Aa,mZe),e(Cr,gZe),e(Cr,k),e(k,Sn),e(Sn,wte),e(wte,hZe),e(Sn,pZe),e(Sn,eR),e(eR,uZe),e(Sn,_Ze),e(Sn,oR),e(oR,bZe),e(Sn,vZe),e(k,FZe),e(k,Rn),e(Rn,Ate),e(Ate,TZe),e(Rn,MZe),e(Rn,rR),e(rR,EZe),e(Rn,CZe),e(Rn,tR),e(tR,wZe),e(Rn,AZe),e(k,yZe),e(k,Pn),e(Pn,yte),e(yte,LZe),e(Pn,xZe),e(Pn,aR),e(aR,$Ze),e(Pn,kZe),e(Pn,nR),e(nR,SZe),e(Pn,RZe),e(k,PZe),e(k,Ag),e(Ag,Lte),e(Lte,BZe),e(Ag,IZe),e(Ag,sR),e(sR,qZe),e(Ag,NZe),e(k,jZe),e(k,Bn),e(Bn,xte),e(xte,DZe),e(Bn,GZe),e(Bn,lR),e(lR,OZe),e(Bn,VZe),e(Bn,iR),e(iR,XZe),e(Bn,zZe),e(k,WZe),e(k,yg),e(yg,$te),e($te,QZe),e(yg,HZe),e(yg,dR),e(dR,UZe),e(yg,JZe),e(k,YZe),e(k,Lg),e(Lg,kte),e(kte,KZe),e(Lg,ZZe),e(Lg,cR),e(cR,eeo),e(Lg,oeo),e(k,reo),e(k,xg),e(xg,Ste),e(Ste,teo),e(xg,aeo),e(xg,fR),e(fR,neo),e(xg,seo),e(k,leo),e(k,In),e(In,Rte),e(Rte,ieo),e(In,deo),e(In,mR),e(mR,ceo),e(In,feo),e(In,gR),e(gR,meo),e(In,geo),e(k,heo),e(k,qn),e(qn,Pte),e(Pte,peo),e(qn,ueo),e(qn,hR),e(hR,_eo),e(qn,beo),e(qn,pR),e(pR,veo),e(qn,Feo),e(k,Teo),e(k,Nn),e(Nn,Bte),e(Bte,Meo),e(Nn,Eeo),e(Nn,uR),e(uR,Ceo),e(Nn,weo),e(Nn,_R),e(_R,Aeo),e(Nn,yeo),e(k,Leo),e(k,$g),e($g,Ite),e(Ite,xeo),e($g,$eo),e($g,bR),e(bR,keo),e($g,Seo),e(k,Reo),e(k,kg),e(kg,qte),e(qte,Peo),e(kg,Beo),e(kg,vR),e(vR,Ieo),e(kg,qeo),e(k,Neo),e(k,jn),e(jn,Nte),e(Nte,jeo),e(jn,Deo),e(jn,FR),e(FR,Geo),e(jn,Oeo),e(jn,TR),e(TR,Veo),e(jn,Xeo),e(k,zeo),e(k,Sg),e(Sg,jte),e(jte,Weo),e(Sg,Qeo),e(Sg,MR),e(MR,Heo),e(Sg,Ueo),e(k,Jeo),e(k,Dn),e(Dn,Dte),e(Dte,Yeo),e(Dn,Keo),e(Dn,ER),e(ER,Zeo),e(Dn,eoo),e(Dn,CR),e(CR,ooo),e(Dn,roo),e(k,too),e(k,Gn),e(Gn,Gte),e(Gte,aoo),e(Gn,noo),e(Gn,wR),e(wR,soo),e(Gn,loo),e(Gn,AR),e(AR,ioo),e(Gn,doo),e(k,coo),e(k,On),e(On,Ote),e(Ote,foo),e(On,moo),e(On,yR),e(yR,goo),e(On,hoo),e(On,LR),e(LR,poo),e(On,uoo),e(k,_oo),e(k,Rg),e(Rg,Vte),e(Vte,boo),e(Rg,voo),e(Rg,xR),e(xR,Foo),e(Rg,Too),e(k,Moo),e(k,Vn),e(Vn,Xte),e(Xte,Eoo),e(Vn,Coo),e(Vn,$R),e($R,woo),e(Vn,Aoo),e(Vn,kR),e(kR,yoo),e(Vn,Loo),e(k,xoo),e(k,Xn),e(Xn,zte),e(zte,$oo),e(Xn,koo),e(Xn,SR),e(SR,Soo),e(Xn,Roo),e(Xn,RR),e(RR,Poo),e(Xn,Boo),e(k,Ioo),e(k,zn),e(zn,Wte),e(Wte,qoo),e(zn,Noo),e(zn,PR),e(PR,joo),e(zn,Doo),e(zn,BR),e(BR,Goo),e(zn,Ooo),e(k,Voo),e(k,Wn),e(Wn,Qte),e(Qte,Xoo),e(Wn,zoo),e(Wn,IR),e(IR,Woo),e(Wn,Qoo),e(Wn,qR),e(qR,Hoo),e(Wn,Uoo),e(k,Joo),e(k,Qn),e(Qn,Hte),e(Hte,Yoo),e(Qn,Koo),e(Qn,NR),e(NR,Zoo),e(Qn,ero),e(Qn,jR),e(jR,oro),e(Qn,rro),e(k,tro),e(k,Hn),e(Hn,Ute),e(Ute,aro),e(Hn,nro),e(Hn,DR),e(DR,sro),e(Hn,lro),e(Hn,GR),e(GR,iro),e(Hn,dro),e(k,cro),e(k,Pg),e(Pg,Jte),e(Jte,fro),e(Pg,mro),e(Pg,OR),e(OR,gro),e(Pg,hro),e(k,pro),e(k,Un),e(Un,Yte),e(Yte,uro),e(Un,_ro),e(Un,VR),e(VR,bro),e(Un,vro),e(Un,XR),e(XR,Fro),e(Un,Tro),e(k,Mro),e(k,Bg),e(Bg,Kte),e(Kte,Ero),e(Bg,Cro),e(Bg,zR),e(zR,wro),e(Bg,Aro),e(k,yro),e(k,Jn),e(Jn,Zte),e(Zte,Lro),e(Jn,xro),e(Jn,WR),e(WR,$ro),e(Jn,kro),e(Jn,QR),e(QR,Sro),e(Jn,Rro),e(k,Pro),e(k,Yn),e(Yn,eae),e(eae,Bro),e(Yn,Iro),e(Yn,HR),e(HR,qro),e(Yn,Nro),e(Yn,UR),e(UR,jro),e(Yn,Dro),e(k,Gro),e(k,Kn),e(Kn,oae),e(oae,Oro),e(Kn,Vro),e(Kn,JR),e(JR,Xro),e(Kn,zro),e(Kn,YR),e(YR,Wro),e(Kn,Qro),e(k,Hro),e(k,Ig),e(Ig,rae),e(rae,Uro),e(Ig,Jro),e(Ig,KR),e(KR,Yro),e(Ig,Kro),e(k,Zro),e(k,Zn),e(Zn,tae),e(tae,eto),e(Zn,oto),e(Zn,ZR),e(ZR,rto),e(Zn,tto),e(Zn,eP),e(eP,ato),e(Zn,nto),e(k,sto),e(k,es),e(es,aae),e(aae,lto),e(es,ito),e(es,oP),e(oP,dto),e(es,cto),e(es,rP),e(rP,fto),e(es,mto),e(k,gto),e(k,qg),e(qg,nae),e(nae,hto),e(qg,pto),e(qg,tP),e(tP,uto),e(qg,_to),e(k,bto),e(k,os),e(os,sae),e(sae,vto),e(os,Fto),e(os,aP),e(aP,Tto),e(os,Mto),e(os,nP),e(nP,Eto),e(os,Cto),e(k,wto),e(k,rs),e(rs,lae),e(lae,Ato),e(rs,yto),e(rs,sP),e(sP,Lto),e(rs,xto),e(rs,lP),e(lP,$to),e(rs,kto),e(k,Sto),e(k,ts),e(ts,iae),e(iae,Rto),e(ts,Pto),e(ts,iP),e(iP,Bto),e(ts,Ito),e(ts,dP),e(dP,qto),e(ts,Nto),e(k,jto),e(k,as),e(as,dae),e(dae,Dto),e(as,Gto),e(as,cP),e(cP,Oto),e(as,Vto),e(as,fP),e(fP,Xto),e(as,zto),e(k,Wto),e(k,ns),e(ns,cae),e(cae,Qto),e(ns,Hto),e(ns,mP),e(mP,Uto),e(ns,Jto),e(ns,gP),e(gP,Yto),e(ns,Kto),e(k,Zto),e(k,ss),e(ss,fae),e(fae,eao),e(ss,oao),e(ss,hP),e(hP,rao),e(ss,tao),e(ss,pP),e(pP,aao),e(ss,nao),e(k,sao),e(k,ls),e(ls,mae),e(mae,lao),e(ls,iao),e(ls,uP),e(uP,dao),e(ls,cao),e(ls,_P),e(_P,fao),e(ls,mao),e(k,gao),e(k,Ng),e(Ng,gae),e(gae,hao),e(Ng,pao),e(Ng,bP),e(bP,uao),e(Ng,_ao),e(k,bao),e(k,is),e(is,hae),e(hae,vao),e(is,Fao),e(is,vP),e(vP,Tao),e(is,Mao),e(is,FP),e(FP,Eao),e(is,Cao),e(k,wao),e(k,jg),e(jg,pae),e(pae,Aao),e(jg,yao),e(jg,TP),e(TP,Lao),e(jg,xao),e(k,$ao),e(k,Dg),e(Dg,uae),e(uae,kao),e(Dg,Sao),e(Dg,MP),e(MP,Rao),e(Dg,Pao),e(k,Bao),e(k,ds),e(ds,_ae),e(_ae,Iao),e(ds,qao),e(ds,EP),e(EP,Nao),e(ds,jao),e(ds,CP),e(CP,Dao),e(ds,Gao),e(k,Oao),e(k,cs),e(cs,bae),e(bae,Vao),e(cs,Xao),e(cs,wP),e(wP,zao),e(cs,Wao),e(cs,AP),e(AP,Qao),e(cs,Hao),e(k,Uao),e(k,fs),e(fs,vae),e(vae,Jao),e(fs,Yao),e(fs,yP),e(yP,Kao),e(fs,Zao),e(fs,LP),e(LP,eno),e(fs,ono),e(k,rno),e(k,Gg),e(Gg,Fae),e(Fae,tno),e(Gg,ano),e(Gg,xP),e(xP,nno),e(Gg,sno),e(k,lno),e(k,ms),e(ms,Tae),e(Tae,ino),e(ms,dno),e(ms,$P),e($P,cno),e(ms,fno),e(ms,kP),e(kP,mno),e(ms,gno),e(k,hno),e(k,gs),e(gs,Mae),e(Mae,pno),e(gs,uno),e(gs,SP),e(SP,_no),e(gs,bno),e(gs,RP),e(RP,vno),e(gs,Fno),e(k,Tno),e(k,hs),e(hs,Eae),e(Eae,Mno),e(hs,Eno),e(hs,PP),e(PP,Cno),e(hs,wno),e(hs,BP),e(BP,Ano),e(hs,yno),e(k,Lno),e(k,ps),e(ps,Cae),e(Cae,xno),e(ps,$no),e(ps,IP),e(IP,kno),e(ps,Sno),e(ps,qP),e(qP,Rno),e(ps,Pno),e(k,Bno),e(k,us),e(us,wae),e(wae,Ino),e(us,qno),e(us,NP),e(NP,Nno),e(us,jno),e(us,jP),e(jP,Dno),e(us,Gno),e(k,Ono),e(k,Og),e(Og,Aae),e(Aae,Vno),e(Og,Xno),e(Og,DP),e(DP,zno),e(Og,Wno),e(k,Qno),e(k,_s),e(_s,yae),e(yae,Hno),e(_s,Uno),e(_s,GP),e(GP,Jno),e(_s,Yno),e(_s,OP),e(OP,Kno),e(_s,Zno),e(k,eso),e(k,Vg),e(Vg,Lae),e(Lae,oso),e(Vg,rso),e(Vg,VP),e(VP,tso),e(Vg,aso),e(k,nso),e(k,Xg),e(Xg,xae),e(xae,sso),e(Xg,lso),e(Xg,XP),e(XP,iso),e(Xg,dso),e(k,cso),e(k,zg),e(zg,$ae),e($ae,fso),e(zg,mso),e(zg,zP),e(zP,gso),e(zg,hso),e(k,pso),e(k,Wg),e(Wg,kae),e(kae,uso),e(Wg,_so),e(Wg,WP),e(WP,bso),e(Wg,vso),e(k,Fso),e(k,bs),e(bs,Sae),e(Sae,Tso),e(bs,Mso),e(bs,QP),e(QP,Eso),e(bs,Cso),e(bs,HP),e(HP,wso),e(bs,Aso),e(k,yso),e(k,Qg),e(Qg,Rae),e(Rae,Lso),e(Qg,xso),e(Qg,UP),e(UP,$so),e(Qg,kso),e(k,Sso),e(k,vs),e(vs,Pae),e(Pae,Rso),e(vs,Pso),e(vs,JP),e(JP,Bso),e(vs,Iso),e(vs,YP),e(YP,qso),e(vs,Nso),e(k,jso),e(k,Fs),e(Fs,Bae),e(Bae,Dso),e(Fs,Gso),e(Fs,KP),e(KP,Oso),e(Fs,Vso),e(Fs,ZP),e(ZP,Xso),e(Fs,zso),e(k,Wso),e(k,Ts),e(Ts,Iae),e(Iae,Qso),e(Ts,Hso),e(Ts,eB),e(eB,Uso),e(Ts,Jso),e(Ts,oB),e(oB,Yso),e(Ts,Kso),e(k,Zso),e(k,Ms),e(Ms,qae),e(qae,elo),e(Ms,olo),e(Ms,rB),e(rB,rlo),e(Ms,tlo),e(Ms,tB),e(tB,alo),e(Ms,nlo),e(k,slo),e(k,Es),e(Es,Nae),e(Nae,llo),e(Es,ilo),e(Es,aB),e(aB,dlo),e(Es,clo),e(Es,nB),e(nB,flo),e(Es,mlo),e(k,glo),e(k,Cs),e(Cs,jae),e(jae,hlo),e(Cs,plo),e(Cs,sB),e(sB,ulo),e(Cs,_lo),e(Cs,lB),e(lB,blo),e(Cs,vlo),e(k,Flo),e(k,Hg),e(Hg,Dae),e(Dae,Tlo),e(Hg,Mlo),e(Hg,iB),e(iB,Elo),e(Hg,Clo),e(k,wlo),e(k,Ug),e(Ug,Gae),e(Gae,Alo),e(Ug,ylo),e(Ug,dB),e(dB,Llo),e(Ug,xlo),e(k,$lo),e(k,ws),e(ws,Oae),e(Oae,klo),e(ws,Slo),e(ws,cB),e(cB,Rlo),e(ws,Plo),e(ws,fB),e(fB,Blo),e(ws,Ilo),e(k,qlo),e(k,As),e(As,Vae),e(Vae,Nlo),e(As,jlo),e(As,mB),e(mB,Dlo),e(As,Glo),e(As,gB),e(gB,Olo),e(As,Vlo),e(k,Xlo),e(k,ys),e(ys,Xae),e(Xae,zlo),e(ys,Wlo),e(ys,hB),e(hB,Qlo),e(ys,Hlo),e(ys,pB),e(pB,Ulo),e(ys,Jlo),e(k,Ylo),e(k,Jg),e(Jg,zae),e(zae,Klo),e(Jg,Zlo),e(Jg,uB),e(uB,eio),e(Jg,oio),e(k,rio),e(k,Yg),e(Yg,Wae),e(Wae,tio),e(Yg,aio),e(Yg,_B),e(_B,nio),e(Yg,sio),e(k,lio),e(k,Kg),e(Kg,Qae),e(Qae,iio),e(Kg,dio),e(Kg,bB),e(bB,cio),e(Kg,fio),e(k,mio),e(k,Ls),e(Ls,Hae),e(Hae,gio),e(Ls,hio),e(Ls,vB),e(vB,pio),e(Ls,uio),e(Ls,FB),e(FB,_io),e(Ls,bio),e(k,vio),e(k,Zg),e(Zg,Uae),e(Uae,Fio),e(Zg,Tio),e(Zg,TB),e(TB,Mio),e(Zg,Eio),e(k,Cio),e(k,eh),e(eh,Jae),e(Jae,wio),e(eh,Aio),e(eh,MB),e(MB,yio),e(eh,Lio),e(k,xio),e(k,oh),e(oh,Yae),e(Yae,$io),e(oh,kio),e(oh,EB),e(EB,Sio),e(oh,Rio),e(k,Pio),e(k,xs),e(xs,Kae),e(Kae,Bio),e(xs,Iio),e(xs,CB),e(CB,qio),e(xs,Nio),e(xs,wB),e(wB,jio),e(xs,Dio),e(k,Gio),e(k,rh),e(rh,Zae),e(Zae,Oio),e(rh,Vio),e(rh,AB),e(AB,Xio),e(rh,zio),e(k,Wio),e(k,th),e(th,ene),e(ene,Qio),e(th,Hio),e(th,yB),e(yB,Uio),e(th,Jio),e(k,Yio),e(k,$s),e($s,one),e(one,Kio),e($s,Zio),e($s,LB),e(LB,edo),e($s,odo),e($s,xB),e(xB,rdo),e($s,tdo),e(k,ado),e(k,ks),e(ks,rne),e(rne,ndo),e(ks,sdo),e(ks,$B),e($B,ldo),e(ks,ido),e(ks,kB),e(kB,ddo),e(ks,cdo),e(k,fdo),e(k,Ss),e(Ss,tne),e(tne,mdo),e(Ss,gdo),e(Ss,SB),e(SB,hdo),e(Ss,pdo),e(Ss,RB),e(RB,udo),e(Ss,_do),e(k,bdo),e(k,Rs),e(Rs,ane),e(ane,vdo),e(Rs,Fdo),e(Rs,PB),e(PB,Tdo),e(Rs,Mdo),e(Rs,BB),e(BB,Edo),e(Rs,Cdo),e(Cr,wdo),M(ah,Cr,null),e(wo,Ado),e(wo,nh),M(Dy,nh,null),e(nh,ydo),e(nh,nne),e(nne,Ldo),b(f,lNe,_),b(f,Mi,_),e(Mi,sh),e(sh,sne),M(Gy,sne,null),e(Mi,xdo),e(Mi,lne),e(lne,$do),b(f,iNe,_),b(f,Ao,_),M(Oy,Ao,null),e(Ao,kdo),e(Ao,Vy),e(Vy,Sdo),e(Vy,IB),e(IB,Rdo),e(Vy,Pdo),e(Ao,Bdo),e(Ao,Xy),e(Xy,Ido),e(Xy,ine),e(ine,qdo),e(Xy,Ndo),e(Ao,jdo),e(Ao,He),M(zy,He,null),e(He,Ddo),e(He,dne),e(dne,Gdo),e(He,Odo),e(He,ya),e(ya,Vdo),e(ya,cne),e(cne,Xdo),e(ya,zdo),e(ya,fne),e(fne,Wdo),e(ya,Qdo),e(ya,mne),e(mne,Hdo),e(ya,Udo),e(He,Jdo),e(He,Y),e(Y,lh),e(lh,gne),e(gne,Ydo),e(lh,Kdo),e(lh,qB),e(qB,Zdo),e(lh,eco),e(Y,oco),e(Y,ih),e(ih,hne),e(hne,rco),e(ih,tco),e(ih,NB),e(NB,aco),e(ih,nco),e(Y,sco),e(Y,dh),e(dh,pne),e(pne,lco),e(dh,ico),e(dh,jB),e(jB,dco),e(dh,cco),e(Y,fco),e(Y,ch),e(ch,une),e(une,mco),e(ch,gco),e(ch,DB),e(DB,hco),e(ch,pco),e(Y,uco),e(Y,fh),e(fh,_ne),e(_ne,_co),e(fh,bco),e(fh,GB),e(GB,vco),e(fh,Fco),e(Y,Tco),e(Y,mh),e(mh,bne),e(bne,Mco),e(mh,Eco),e(mh,OB),e(OB,Cco),e(mh,wco),e(Y,Aco),e(Y,gh),e(gh,vne),e(vne,yco),e(gh,Lco),e(gh,VB),e(VB,xco),e(gh,$co),e(Y,kco),e(Y,hh),e(hh,Fne),e(Fne,Sco),e(hh,Rco),e(hh,XB),e(XB,Pco),e(hh,Bco),e(Y,Ico),e(Y,ph),e(ph,Tne),e(Tne,qco),e(ph,Nco),e(ph,zB),e(zB,jco),e(ph,Dco),e(Y,Gco),e(Y,uh),e(uh,Mne),e(Mne,Oco),e(uh,Vco),e(uh,WB),e(WB,Xco),e(uh,zco),e(Y,Wco),e(Y,_h),e(_h,Ene),e(Ene,Qco),e(_h,Hco),e(_h,QB),e(QB,Uco),e(_h,Jco),e(Y,Yco),e(Y,bh),e(bh,Cne),e(Cne,Kco),e(bh,Zco),e(bh,HB),e(HB,efo),e(bh,ofo),e(Y,rfo),e(Y,vh),e(vh,wne),e(wne,tfo),e(vh,afo),e(vh,UB),e(UB,nfo),e(vh,sfo),e(Y,lfo),e(Y,Fh),e(Fh,Ane),e(Ane,ifo),e(Fh,dfo),e(Fh,JB),e(JB,cfo),e(Fh,ffo),e(Y,mfo),e(Y,Th),e(Th,yne),e(yne,gfo),e(Th,hfo),e(Th,YB),e(YB,pfo),e(Th,ufo),e(Y,_fo),e(Y,Mh),e(Mh,Lne),e(Lne,bfo),e(Mh,vfo),e(Mh,KB),e(KB,Ffo),e(Mh,Tfo),e(Y,Mfo),e(Y,Eh),e(Eh,xne),e(xne,Efo),e(Eh,Cfo),e(Eh,ZB),e(ZB,wfo),e(Eh,Afo),e(Y,yfo),e(Y,Ch),e(Ch,$ne),e($ne,Lfo),e(Ch,xfo),e(Ch,eI),e(eI,$fo),e(Ch,kfo),e(Y,Sfo),e(Y,wh),e(wh,kne),e(kne,Rfo),e(wh,Pfo),e(wh,oI),e(oI,Bfo),e(wh,Ifo),e(Y,qfo),e(Y,Ah),e(Ah,Sne),e(Sne,Nfo),e(Ah,jfo),e(Ah,rI),e(rI,Dfo),e(Ah,Gfo),e(Y,Ofo),e(Y,yh),e(yh,Rne),e(Rne,Vfo),e(yh,Xfo),e(yh,tI),e(tI,zfo),e(yh,Wfo),e(Y,Qfo),e(Y,Lh),e(Lh,Pne),e(Pne,Hfo),e(Lh,Ufo),e(Lh,aI),e(aI,Jfo),e(Lh,Yfo),e(Y,Kfo),e(Y,xh),e(xh,Bne),e(Bne,Zfo),e(xh,emo),e(xh,nI),e(nI,omo),e(xh,rmo),e(Y,tmo),e(Y,$h),e($h,Ine),e(Ine,amo),e($h,nmo),e($h,sI),e(sI,smo),e($h,lmo),e(Y,imo),e(Y,kh),e(kh,qne),e(qne,dmo),e(kh,cmo),e(kh,lI),e(lI,fmo),e(kh,mmo),e(Y,gmo),e(Y,Sh),e(Sh,Nne),e(Nne,hmo),e(Sh,pmo),e(Sh,iI),e(iI,umo),e(Sh,_mo),e(Y,bmo),e(Y,Rh),e(Rh,jne),e(jne,vmo),e(Rh,Fmo),e(Rh,dI),e(dI,Tmo),e(Rh,Mmo),e(Y,Emo),e(Y,Ph),e(Ph,Dne),e(Dne,Cmo),e(Ph,wmo),e(Ph,cI),e(cI,Amo),e(Ph,ymo),e(Y,Lmo),e(Y,Bh),e(Bh,Gne),e(Gne,xmo),e(Bh,$mo),e(Bh,fI),e(fI,kmo),e(Bh,Smo),e(He,Rmo),M(Ih,He,null),e(He,Pmo),M(qh,He,null),e(Ao,Bmo),e(Ao,Nh),M(Wy,Nh,null),e(Nh,Imo),e(Nh,One),e(One,qmo),b(f,dNe,_),b(f,Ei,_),e(Ei,jh),e(jh,Vne),M(Qy,Vne,null),e(Ei,Nmo),e(Ei,Xne),e(Xne,jmo),b(f,cNe,_),b(f,yo,_),M(Hy,yo,null),e(yo,Dmo),e(yo,Uy),e(Uy,Gmo),e(Uy,mI),e(mI,Omo),e(Uy,Vmo),e(yo,Xmo),e(yo,Jy),e(Jy,zmo),e(Jy,zne),e(zne,Wmo),e(Jy,Qmo),e(yo,Hmo),e(yo,Ue),M(Yy,Ue,null),e(Ue,Umo),e(Ue,Wne),e(Wne,Jmo),e(Ue,Ymo),e(Ue,Ci),e(Ci,Kmo),e(Ci,Qne),e(Qne,Zmo),e(Ci,ego),e(Ci,Hne),e(Hne,ogo),e(Ci,rgo),e(Ue,tgo),e(Ue,he),e(he,Dh),e(Dh,Une),e(Une,ago),e(Dh,ngo),e(Dh,gI),e(gI,sgo),e(Dh,lgo),e(he,igo),e(he,Gh),e(Gh,Jne),e(Jne,dgo),e(Gh,cgo),e(Gh,Yne),e(Yne,fgo),e(Gh,mgo),e(he,ggo),e(he,Oh),e(Oh,Kne),e(Kne,hgo),e(Oh,pgo),e(Oh,hI),e(hI,ugo),e(Oh,_go),e(he,bgo),e(he,Vh),e(Vh,Zne),e(Zne,vgo),e(Vh,Fgo),e(Vh,pI),e(pI,Tgo),e(Vh,Mgo),e(he,Ego),e(he,Xh),e(Xh,ese),e(ese,Cgo),e(Xh,wgo),e(Xh,uI),e(uI,Ago),e(Xh,ygo),e(he,Lgo),e(he,zh),e(zh,ose),e(ose,xgo),e(zh,$go),e(zh,_I),e(_I,kgo),e(zh,Sgo),e(he,Rgo),e(he,Wh),e(Wh,rse),e(rse,Pgo),e(Wh,Bgo),e(Wh,bI),e(bI,Igo),e(Wh,qgo),e(he,Ngo),e(he,Qh),e(Qh,tse),e(tse,jgo),e(Qh,Dgo),e(Qh,vI),e(vI,Ggo),e(Qh,Ogo),e(he,Vgo),e(he,Hh),e(Hh,ase),e(ase,Xgo),e(Hh,zgo),e(Hh,FI),e(FI,Wgo),e(Hh,Qgo),e(he,Hgo),e(he,Uh),e(Uh,nse),e(nse,Ugo),e(Uh,Jgo),e(Uh,TI),e(TI,Ygo),e(Uh,Kgo),e(he,Zgo),e(he,Jh),e(Jh,sse),e(sse,eho),e(Jh,oho),e(Jh,MI),e(MI,rho),e(Jh,tho),e(he,aho),e(he,Yh),e(Yh,lse),e(lse,nho),e(Yh,sho),e(Yh,EI),e(EI,lho),e(Yh,iho),e(he,dho),e(he,Kh),e(Kh,ise),e(ise,cho),e(Kh,fho),e(Kh,CI),e(CI,mho),e(Kh,gho),e(he,hho),e(he,Zh),e(Zh,dse),e(dse,pho),e(Zh,uho),e(Zh,wI),e(wI,_ho),e(Zh,bho),e(he,vho),e(he,ep),e(ep,cse),e(cse,Fho),e(ep,Tho),e(ep,AI),e(AI,Mho),e(ep,Eho),e(he,Cho),e(he,op),e(op,fse),e(fse,who),e(op,Aho),e(op,yI),e(yI,yho),e(op,Lho),e(he,xho),e(he,rp),e(rp,mse),e(mse,$ho),e(rp,kho),e(rp,LI),e(LI,Sho),e(rp,Rho),e(Ue,Pho),M(tp,Ue,null),e(Ue,Bho),M(ap,Ue,null),e(yo,Iho),e(yo,np),M(Ky,np,null),e(np,qho),e(np,gse),e(gse,Nho),b(f,fNe,_),b(f,wi,_),e(wi,sp),e(sp,hse),M(Zy,hse,null),e(wi,jho),e(wi,pse),e(pse,Dho),b(f,mNe,_),b(f,Lo,_),M(eL,Lo,null),e(Lo,Gho),e(Lo,Ai),e(Ai,Oho),e(Ai,xI),e(xI,Vho),e(Ai,Xho),e(Ai,$I),e($I,zho),e(Ai,Who),e(Lo,Qho),e(Lo,oL),e(oL,Hho),e(oL,use),e(use,Uho),e(oL,Jho),e(Lo,Yho),e(Lo,tt),M(rL,tt,null),e(tt,Kho),e(tt,_se),e(_se,Zho),e(tt,epo),e(tt,yi),e(yi,opo),e(yi,bse),e(bse,rpo),e(yi,tpo),e(yi,kI),e(kI,apo),e(yi,npo),e(tt,spo),M(lp,tt,null),e(Lo,lpo),e(Lo,Je),M(tL,Je,null),e(Je,ipo),e(Je,vse),e(vse,dpo),e(Je,cpo),e(Je,La),e(La,fpo),e(La,Fse),e(Fse,mpo),e(La,gpo),e(La,Tse),e(Tse,hpo),e(La,ppo),e(La,Mse),e(Mse,upo),e(La,_po),e(Je,bpo),e(Je,x),e(x,ip),e(ip,Ese),e(Ese,vpo),e(ip,Fpo),e(ip,SI),e(SI,Tpo),e(ip,Mpo),e(x,Epo),e(x,dp),e(dp,Cse),e(Cse,Cpo),e(dp,wpo),e(dp,RI),e(RI,Apo),e(dp,ypo),e(x,Lpo),e(x,cp),e(cp,wse),e(wse,xpo),e(cp,$po),e(cp,PI),e(PI,kpo),e(cp,Spo),e(x,Rpo),e(x,fp),e(fp,Ase),e(Ase,Ppo),e(fp,Bpo),e(fp,BI),e(BI,Ipo),e(fp,qpo),e(x,Npo),e(x,mp),e(mp,yse),e(yse,jpo),e(mp,Dpo),e(mp,II),e(II,Gpo),e(mp,Opo),e(x,Vpo),e(x,gp),e(gp,Lse),e(Lse,Xpo),e(gp,zpo),e(gp,qI),e(qI,Wpo),e(gp,Qpo),e(x,Hpo),e(x,hp),e(hp,xse),e(xse,Upo),e(hp,Jpo),e(hp,NI),e(NI,Ypo),e(hp,Kpo),e(x,Zpo),e(x,pp),e(pp,$se),e($se,euo),e(pp,ouo),e(pp,jI),e(jI,ruo),e(pp,tuo),e(x,auo),e(x,up),e(up,kse),e(kse,nuo),e(up,suo),e(up,DI),e(DI,luo),e(up,iuo),e(x,duo),e(x,_p),e(_p,Sse),e(Sse,cuo),e(_p,fuo),e(_p,GI),e(GI,muo),e(_p,guo),e(x,huo),e(x,bp),e(bp,Rse),e(Rse,puo),e(bp,uuo),e(bp,OI),e(OI,_uo),e(bp,buo),e(x,vuo),e(x,vp),e(vp,Pse),e(Pse,Fuo),e(vp,Tuo),e(vp,VI),e(VI,Muo),e(vp,Euo),e(x,Cuo),e(x,Fp),e(Fp,Bse),e(Bse,wuo),e(Fp,Auo),e(Fp,XI),e(XI,yuo),e(Fp,Luo),e(x,xuo),e(x,Tp),e(Tp,Ise),e(Ise,$uo),e(Tp,kuo),e(Tp,zI),e(zI,Suo),e(Tp,Ruo),e(x,Puo),e(x,Mp),e(Mp,qse),e(qse,Buo),e(Mp,Iuo),e(Mp,WI),e(WI,quo),e(Mp,Nuo),e(x,juo),e(x,Ep),e(Ep,Nse),e(Nse,Duo),e(Ep,Guo),e(Ep,QI),e(QI,Ouo),e(Ep,Vuo),e(x,Xuo),e(x,Cp),e(Cp,jse),e(jse,zuo),e(Cp,Wuo),e(Cp,HI),e(HI,Quo),e(Cp,Huo),e(x,Uuo),e(x,wp),e(wp,Dse),e(Dse,Juo),e(wp,Yuo),e(wp,UI),e(UI,Kuo),e(wp,Zuo),e(x,e_o),e(x,Ap),e(Ap,Gse),e(Gse,o_o),e(Ap,r_o),e(Ap,JI),e(JI,t_o),e(Ap,a_o),e(x,n_o),e(x,yp),e(yp,Ose),e(Ose,s_o),e(yp,l_o),e(yp,YI),e(YI,i_o),e(yp,d_o),e(x,c_o),e(x,Lp),e(Lp,Vse),e(Vse,f_o),e(Lp,m_o),e(Lp,KI),e(KI,g_o),e(Lp,h_o),e(x,p_o),e(x,xp),e(xp,Xse),e(Xse,u_o),e(xp,__o),e(xp,ZI),e(ZI,b_o),e(xp,v_o),e(x,F_o),e(x,$p),e($p,zse),e(zse,T_o),e($p,M_o),e($p,eq),e(eq,E_o),e($p,C_o),e(x,w_o),e(x,kp),e(kp,Wse),e(Wse,A_o),e(kp,y_o),e(kp,oq),e(oq,L_o),e(kp,x_o),e(x,$_o),e(x,Sp),e(Sp,Qse),e(Qse,k_o),e(Sp,S_o),e(Sp,rq),e(rq,R_o),e(Sp,P_o),e(x,B_o),e(x,Rp),e(Rp,Hse),e(Hse,I_o),e(Rp,q_o),e(Rp,tq),e(tq,N_o),e(Rp,j_o),e(x,D_o),e(x,Pp),e(Pp,Use),e(Use,G_o),e(Pp,O_o),e(Pp,aq),e(aq,V_o),e(Pp,X_o),e(x,z_o),e(x,Bp),e(Bp,Jse),e(Jse,W_o),e(Bp,Q_o),e(Bp,nq),e(nq,H_o),e(Bp,U_o),e(x,J_o),e(x,Ip),e(Ip,Yse),e(Yse,Y_o),e(Ip,K_o),e(Ip,sq),e(sq,Z_o),e(Ip,e0o),e(x,o0o),e(x,qp),e(qp,Kse),e(Kse,r0o),e(qp,t0o),e(qp,lq),e(lq,a0o),e(qp,n0o),e(x,s0o),e(x,Np),e(Np,Zse),e(Zse,l0o),e(Np,i0o),e(Np,iq),e(iq,d0o),e(Np,c0o),e(x,f0o),e(x,jp),e(jp,ele),e(ele,m0o),e(jp,g0o),e(jp,dq),e(dq,h0o),e(jp,p0o),e(x,u0o),e(x,Ps),e(Ps,ole),e(ole,_0o),e(Ps,b0o),e(Ps,cq),e(cq,v0o),e(Ps,F0o),e(Ps,fq),e(fq,T0o),e(Ps,M0o),e(x,E0o),e(x,Dp),e(Dp,rle),e(rle,C0o),e(Dp,w0o),e(Dp,mq),e(mq,A0o),e(Dp,y0o),e(x,L0o),e(x,Gp),e(Gp,tle),e(tle,x0o),e(Gp,$0o),e(Gp,gq),e(gq,k0o),e(Gp,S0o),e(x,R0o),e(x,Op),e(Op,ale),e(ale,P0o),e(Op,B0o),e(Op,hq),e(hq,I0o),e(Op,q0o),e(x,N0o),e(x,Vp),e(Vp,nle),e(nle,j0o),e(Vp,D0o),e(Vp,pq),e(pq,G0o),e(Vp,O0o),e(x,V0o),e(x,Xp),e(Xp,sle),e(sle,X0o),e(Xp,z0o),e(Xp,uq),e(uq,W0o),e(Xp,Q0o),e(x,H0o),e(x,zp),e(zp,lle),e(lle,U0o),e(zp,J0o),e(zp,_q),e(_q,Y0o),e(zp,K0o),e(x,Z0o),e(x,Wp),e(Wp,ile),e(ile,e1o),e(Wp,o1o),e(Wp,bq),e(bq,r1o),e(Wp,t1o),e(x,a1o),e(x,Qp),e(Qp,dle),e(dle,n1o),e(Qp,s1o),e(Qp,vq),e(vq,l1o),e(Qp,i1o),e(x,d1o),e(x,Hp),e(Hp,cle),e(cle,c1o),e(Hp,f1o),e(Hp,Fq),e(Fq,m1o),e(Hp,g1o),e(x,h1o),e(x,Up),e(Up,fle),e(fle,p1o),e(Up,u1o),e(Up,Tq),e(Tq,_1o),e(Up,b1o),e(x,v1o),e(x,Jp),e(Jp,mle),e(mle,F1o),e(Jp,T1o),e(Jp,Mq),e(Mq,M1o),e(Jp,E1o),e(x,C1o),e(x,Yp),e(Yp,gle),e(gle,w1o),e(Yp,A1o),e(Yp,Eq),e(Eq,y1o),e(Yp,L1o),e(x,x1o),e(x,Kp),e(Kp,hle),e(hle,$1o),e(Kp,k1o),e(Kp,Cq),e(Cq,S1o),e(Kp,R1o),e(x,P1o),e(x,Zp),e(Zp,ple),e(ple,B1o),e(Zp,I1o),e(Zp,wq),e(wq,q1o),e(Zp,N1o),e(x,j1o),e(x,eu),e(eu,ule),e(ule,D1o),e(eu,G1o),e(eu,Aq),e(Aq,O1o),e(eu,V1o),e(x,X1o),e(x,ou),e(ou,_le),e(_le,z1o),e(ou,W1o),e(ou,yq),e(yq,Q1o),e(ou,H1o),e(x,U1o),e(x,ru),e(ru,ble),e(ble,J1o),e(ru,Y1o),e(ru,Lq),e(Lq,K1o),e(ru,Z1o),e(x,ebo),e(x,tu),e(tu,vle),e(vle,obo),e(tu,rbo),e(tu,xq),e(xq,tbo),e(tu,abo),e(x,nbo),e(x,au),e(au,Fle),e(Fle,sbo),e(au,lbo),e(au,$q),e($q,ibo),e(au,dbo),e(x,cbo),e(x,nu),e(nu,Tle),e(Tle,fbo),e(nu,mbo),e(nu,kq),e(kq,gbo),e(nu,hbo),e(x,pbo),e(x,su),e(su,Mle),e(Mle,ubo),e(su,_bo),e(su,Sq),e(Sq,bbo),e(su,vbo),e(x,Fbo),e(x,lu),e(lu,Ele),e(Ele,Tbo),e(lu,Mbo),e(lu,Rq),e(Rq,Ebo),e(lu,Cbo),e(x,wbo),e(x,iu),e(iu,Cle),e(Cle,Abo),e(iu,ybo),e(iu,Pq),e(Pq,Lbo),e(iu,xbo),e(x,$bo),e(x,du),e(du,wle),e(wle,kbo),e(du,Sbo),e(du,Bq),e(Bq,Rbo),e(du,Pbo),e(x,Bbo),e(x,cu),e(cu,Ale),e(Ale,Ibo),e(cu,qbo),e(cu,Iq),e(Iq,Nbo),e(cu,jbo),e(x,Dbo),e(x,fu),e(fu,yle),e(yle,Gbo),e(fu,Obo),e(fu,qq),e(qq,Vbo),e(fu,Xbo),e(x,zbo),e(x,mu),e(mu,Lle),e(Lle,Wbo),e(mu,Qbo),e(mu,Nq),e(Nq,Hbo),e(mu,Ubo),e(x,Jbo),e(x,gu),e(gu,xle),e(xle,Ybo),e(gu,Kbo),e(gu,jq),e(jq,Zbo),e(gu,e2o),e(x,o2o),e(x,hu),e(hu,$le),e($le,r2o),e(hu,t2o),e(hu,Dq),e(Dq,a2o),e(hu,n2o),e(x,s2o),e(x,pu),e(pu,kle),e(kle,l2o),e(pu,i2o),e(pu,Gq),e(Gq,d2o),e(pu,c2o),e(x,f2o),e(x,uu),e(uu,Sle),e(Sle,m2o),e(uu,g2o),e(uu,Oq),e(Oq,h2o),e(uu,p2o),e(x,u2o),e(x,_u),e(_u,Rle),e(Rle,_2o),e(_u,b2o),e(_u,Vq),e(Vq,v2o),e(_u,F2o),e(x,T2o),e(x,bu),e(bu,Ple),e(Ple,M2o),e(bu,E2o),e(bu,Xq),e(Xq,C2o),e(bu,w2o),e(x,A2o),e(x,vu),e(vu,Ble),e(Ble,y2o),e(vu,L2o),e(vu,zq),e(zq,x2o),e(vu,$2o),e(x,k2o),e(x,Fu),e(Fu,Ile),e(Ile,S2o),e(Fu,R2o),e(Fu,Wq),e(Wq,P2o),e(Fu,B2o),e(x,I2o),e(x,Tu),e(Tu,qle),e(qle,q2o),e(Tu,N2o),e(Tu,Qq),e(Qq,j2o),e(Tu,D2o),e(x,G2o),e(x,Mu),e(Mu,Nle),e(Nle,O2o),e(Mu,V2o),e(Mu,Hq),e(Hq,X2o),e(Mu,z2o),e(x,W2o),e(x,Eu),e(Eu,jle),e(jle,Q2o),e(Eu,H2o),e(Eu,Uq),e(Uq,U2o),e(Eu,J2o),e(x,Y2o),e(x,Cu),e(Cu,Dle),e(Dle,K2o),e(Cu,Z2o),e(Cu,Jq),e(Jq,e4o),e(Cu,o4o),e(x,r4o),e(x,wu),e(wu,Gle),e(Gle,t4o),e(wu,a4o),e(wu,Yq),e(Yq,n4o),e(wu,s4o),e(x,l4o),e(x,Au),e(Au,Ole),e(Ole,i4o),e(Au,d4o),e(Au,Kq),e(Kq,c4o),e(Au,f4o),e(x,m4o),e(x,yu),e(yu,Vle),e(Vle,g4o),e(yu,h4o),e(yu,Zq),e(Zq,p4o),e(yu,u4o),e(x,_4o),e(x,Lu),e(Lu,Xle),e(Xle,b4o),e(Lu,v4o),e(Lu,eN),e(eN,F4o),e(Lu,T4o),e(x,M4o),e(x,xu),e(xu,zle),e(zle,E4o),e(xu,C4o),e(xu,oN),e(oN,w4o),e(xu,A4o),e(x,y4o),e(x,$u),e($u,Wle),e(Wle,L4o),e($u,x4o),e($u,rN),e(rN,$4o),e($u,k4o),e(x,S4o),e(x,ku),e(ku,Qle),e(Qle,R4o),e(ku,P4o),e(ku,tN),e(tN,B4o),e(ku,I4o),e(x,q4o),e(x,Su),e(Su,Hle),e(Hle,N4o),e(Su,j4o),e(Su,aN),e(aN,D4o),e(Su,G4o),e(x,O4o),e(x,Ru),e(Ru,Ule),e(Ule,V4o),e(Ru,X4o),e(Ru,nN),e(nN,z4o),e(Ru,W4o),e(x,Q4o),e(x,Pu),e(Pu,Jle),e(Jle,H4o),e(Pu,U4o),e(Pu,sN),e(sN,J4o),e(Pu,Y4o),e(x,K4o),e(x,Bu),e(Bu,Yle),e(Yle,Z4o),e(Bu,evo),e(Bu,lN),e(lN,ovo),e(Bu,rvo),e(x,tvo),e(x,Iu),e(Iu,Kle),e(Kle,avo),e(Iu,nvo),e(Iu,iN),e(iN,svo),e(Iu,lvo),e(x,ivo),e(x,qu),e(qu,Zle),e(Zle,dvo),e(qu,cvo),e(qu,dN),e(dN,fvo),e(qu,mvo),e(x,gvo),e(x,Nu),e(Nu,eie),e(eie,hvo),e(Nu,pvo),e(Nu,cN),e(cN,uvo),e(Nu,_vo),e(x,bvo),e(x,ju),e(ju,oie),e(oie,vvo),e(ju,Fvo),e(ju,fN),e(fN,Tvo),e(ju,Mvo),e(x,Evo),e(x,Du),e(Du,rie),e(rie,Cvo),e(Du,wvo),e(Du,mN),e(mN,Avo),e(Du,yvo),e(x,Lvo),e(x,Gu),e(Gu,tie),e(tie,xvo),e(Gu,$vo),e(Gu,gN),e(gN,kvo),e(Gu,Svo),e(x,Rvo),e(x,Ou),e(Ou,aie),e(aie,Pvo),e(Ou,Bvo),e(Ou,hN),e(hN,Ivo),e(Ou,qvo),e(x,Nvo),e(x,Vu),e(Vu,nie),e(nie,jvo),e(Vu,Dvo),e(Vu,pN),e(pN,Gvo),e(Vu,Ovo),e(x,Vvo),e(x,Xu),e(Xu,sie),e(sie,Xvo),e(Xu,zvo),e(Xu,uN),e(uN,Wvo),e(Xu,Qvo),e(x,Hvo),e(x,zu),e(zu,lie),e(lie,Uvo),e(zu,Jvo),e(zu,_N),e(_N,Yvo),e(zu,Kvo),e(x,Zvo),e(x,Wu),e(Wu,iie),e(iie,eFo),e(Wu,oFo),e(Wu,bN),e(bN,rFo),e(Wu,tFo),e(x,aFo),e(x,Qu),e(Qu,die),e(die,nFo),e(Qu,sFo),e(Qu,vN),e(vN,lFo),e(Qu,iFo),e(x,dFo),e(x,Hu),e(Hu,cie),e(cie,cFo),e(Hu,fFo),e(Hu,FN),e(FN,mFo),e(Hu,gFo),e(x,hFo),e(x,Uu),e(Uu,fie),e(fie,pFo),e(Uu,uFo),e(Uu,TN),e(TN,_Fo),e(Uu,bFo),e(x,vFo),e(x,Ju),e(Ju,mie),e(mie,FFo),e(Ju,TFo),e(Ju,MN),e(MN,MFo),e(Ju,EFo),e(x,CFo),e(x,Yu),e(Yu,gie),e(gie,wFo),e(Yu,AFo),e(Yu,EN),e(EN,yFo),e(Yu,LFo),e(x,xFo),e(x,Ku),e(Ku,hie),e(hie,$Fo),e(Ku,kFo),e(Ku,CN),e(CN,SFo),e(Ku,RFo),e(x,PFo),e(x,Zu),e(Zu,pie),e(pie,BFo),e(Zu,IFo),e(Zu,wN),e(wN,qFo),e(Zu,NFo),e(x,jFo),e(x,e_),e(e_,uie),e(uie,DFo),e(e_,GFo),e(e_,AN),e(AN,OFo),e(e_,VFo),e(Je,XFo),e(Je,o_),e(o_,zFo),e(o_,_ie),e(_ie,WFo),e(o_,QFo),e(o_,bie),e(bie,HFo),e(Je,UFo),M(r_,Je,null),b(f,gNe,_),b(f,Li,_),e(Li,t_),e(t_,vie),M(aL,vie,null),e(Li,JFo),e(Li,Fie),e(Fie,YFo),b(f,hNe,_),b(f,xo,_),M(nL,xo,null),e(xo,KFo),e(xo,xi),e(xi,ZFo),e(xi,yN),e(yN,e6o),e(xi,o6o),e(xi,LN),e(LN,r6o),e(xi,t6o),e(xo,a6o),e(xo,sL),e(sL,n6o),e(sL,Tie),e(Tie,s6o),e(sL,l6o),e(xo,i6o),e(xo,at),M(lL,at,null),e(at,d6o),e(at,Mie),e(Mie,c6o),e(at,f6o),e(at,$i),e($i,m6o),e($i,Eie),e(Eie,g6o),e($i,h6o),e($i,xN),e(xN,p6o),e($i,u6o),e(at,_6o),M(a_,at,null),e(xo,b6o),e(xo,Ye),M(iL,Ye,null),e(Ye,v6o),e(Ye,Cie),e(Cie,F6o),e(Ye,T6o),e(Ye,xa),e(xa,M6o),e(xa,wie),e(wie,E6o),e(xa,C6o),e(xa,Aie),e(Aie,w6o),e(xa,A6o),e(xa,yie),e(yie,y6o),e(xa,L6o),e(Ye,x6o),e(Ye,G),e(G,n_),e(n_,Lie),e(Lie,$6o),e(n_,k6o),e(n_,$N),e($N,S6o),e(n_,R6o),e(G,P6o),e(G,s_),e(s_,xie),e(xie,B6o),e(s_,I6o),e(s_,kN),e(kN,q6o),e(s_,N6o),e(G,j6o),e(G,l_),e(l_,$ie),e($ie,D6o),e(l_,G6o),e(l_,SN),e(SN,O6o),e(l_,V6o),e(G,X6o),e(G,i_),e(i_,kie),e(kie,z6o),e(i_,W6o),e(i_,RN),e(RN,Q6o),e(i_,H6o),e(G,U6o),e(G,d_),e(d_,Sie),e(Sie,J6o),e(d_,Y6o),e(d_,PN),e(PN,K6o),e(d_,Z6o),e(G,eTo),e(G,c_),e(c_,Rie),e(Rie,oTo),e(c_,rTo),e(c_,BN),e(BN,tTo),e(c_,aTo),e(G,nTo),e(G,f_),e(f_,Pie),e(Pie,sTo),e(f_,lTo),e(f_,IN),e(IN,iTo),e(f_,dTo),e(G,cTo),e(G,m_),e(m_,Bie),e(Bie,fTo),e(m_,mTo),e(m_,qN),e(qN,gTo),e(m_,hTo),e(G,pTo),e(G,g_),e(g_,Iie),e(Iie,uTo),e(g_,_To),e(g_,NN),e(NN,bTo),e(g_,vTo),e(G,FTo),e(G,h_),e(h_,qie),e(qie,TTo),e(h_,MTo),e(h_,jN),e(jN,ETo),e(h_,CTo),e(G,wTo),e(G,p_),e(p_,Nie),e(Nie,ATo),e(p_,yTo),e(p_,DN),e(DN,LTo),e(p_,xTo),e(G,$To),e(G,u_),e(u_,jie),e(jie,kTo),e(u_,STo),e(u_,GN),e(GN,RTo),e(u_,PTo),e(G,BTo),e(G,__),e(__,Die),e(Die,ITo),e(__,qTo),e(__,ON),e(ON,NTo),e(__,jTo),e(G,DTo),e(G,b_),e(b_,Gie),e(Gie,GTo),e(b_,OTo),e(b_,VN),e(VN,VTo),e(b_,XTo),e(G,zTo),e(G,v_),e(v_,Oie),e(Oie,WTo),e(v_,QTo),e(v_,XN),e(XN,HTo),e(v_,UTo),e(G,JTo),e(G,F_),e(F_,Vie),e(Vie,YTo),e(F_,KTo),e(F_,zN),e(zN,ZTo),e(F_,eMo),e(G,oMo),e(G,T_),e(T_,Xie),e(Xie,rMo),e(T_,tMo),e(T_,WN),e(WN,aMo),e(T_,nMo),e(G,sMo),e(G,M_),e(M_,zie),e(zie,lMo),e(M_,iMo),e(M_,QN),e(QN,dMo),e(M_,cMo),e(G,fMo),e(G,E_),e(E_,Wie),e(Wie,mMo),e(E_,gMo),e(E_,HN),e(HN,hMo),e(E_,pMo),e(G,uMo),e(G,C_),e(C_,Qie),e(Qie,_Mo),e(C_,bMo),e(C_,UN),e(UN,vMo),e(C_,FMo),e(G,TMo),e(G,w_),e(w_,Hie),e(Hie,MMo),e(w_,EMo),e(w_,JN),e(JN,CMo),e(w_,wMo),e(G,AMo),e(G,A_),e(A_,Uie),e(Uie,yMo),e(A_,LMo),e(A_,YN),e(YN,xMo),e(A_,$Mo),e(G,kMo),e(G,y_),e(y_,Jie),e(Jie,SMo),e(y_,RMo),e(y_,KN),e(KN,PMo),e(y_,BMo),e(G,IMo),e(G,L_),e(L_,Yie),e(Yie,qMo),e(L_,NMo),e(L_,ZN),e(ZN,jMo),e(L_,DMo),e(G,GMo),e(G,x_),e(x_,Kie),e(Kie,OMo),e(x_,VMo),e(x_,ej),e(ej,XMo),e(x_,zMo),e(G,WMo),e(G,$_),e($_,Zie),e(Zie,QMo),e($_,HMo),e($_,oj),e(oj,UMo),e($_,JMo),e(G,YMo),e(G,k_),e(k_,ede),e(ede,KMo),e(k_,ZMo),e(k_,rj),e(rj,eEo),e(k_,oEo),e(G,rEo),e(G,S_),e(S_,ode),e(ode,tEo),e(S_,aEo),e(S_,tj),e(tj,nEo),e(S_,sEo),e(G,lEo),e(G,R_),e(R_,rde),e(rde,iEo),e(R_,dEo),e(R_,aj),e(aj,cEo),e(R_,fEo),e(G,mEo),e(G,P_),e(P_,tde),e(tde,gEo),e(P_,hEo),e(P_,nj),e(nj,pEo),e(P_,uEo),e(G,_Eo),e(G,B_),e(B_,ade),e(ade,bEo),e(B_,vEo),e(B_,sj),e(sj,FEo),e(B_,TEo),e(G,MEo),e(G,I_),e(I_,nde),e(nde,EEo),e(I_,CEo),e(I_,lj),e(lj,wEo),e(I_,AEo),e(G,yEo),e(G,q_),e(q_,sde),e(sde,LEo),e(q_,xEo),e(q_,ij),e(ij,$Eo),e(q_,kEo),e(G,SEo),e(G,N_),e(N_,lde),e(lde,REo),e(N_,PEo),e(N_,dj),e(dj,BEo),e(N_,IEo),e(G,qEo),e(G,j_),e(j_,ide),e(ide,NEo),e(j_,jEo),e(j_,cj),e(cj,DEo),e(j_,GEo),e(G,OEo),e(G,D_),e(D_,dde),e(dde,VEo),e(D_,XEo),e(D_,fj),e(fj,zEo),e(D_,WEo),e(G,QEo),e(G,G_),e(G_,cde),e(cde,HEo),e(G_,UEo),e(G_,mj),e(mj,JEo),e(G_,YEo),e(G,KEo),e(G,O_),e(O_,fde),e(fde,ZEo),e(O_,eCo),e(O_,gj),e(gj,oCo),e(O_,rCo),e(G,tCo),e(G,V_),e(V_,mde),e(mde,aCo),e(V_,nCo),e(V_,hj),e(hj,sCo),e(V_,lCo),e(G,iCo),e(G,X_),e(X_,gde),e(gde,dCo),e(X_,cCo),e(X_,pj),e(pj,fCo),e(X_,mCo),e(G,gCo),e(G,z_),e(z_,hde),e(hde,hCo),e(z_,pCo),e(z_,uj),e(uj,uCo),e(z_,_Co),e(G,bCo),e(G,W_),e(W_,pde),e(pde,vCo),e(W_,FCo),e(W_,_j),e(_j,TCo),e(W_,MCo),e(Ye,ECo),e(Ye,Q_),e(Q_,CCo),e(Q_,ude),e(ude,wCo),e(Q_,ACo),e(Q_,_de),e(_de,yCo),e(Ye,LCo),M(H_,Ye,null),b(f,pNe,_),b(f,ki,_),e(ki,U_),e(U_,bde),M(dL,bde,null),e(ki,xCo),e(ki,vde),e(vde,$Co),b(f,uNe,_),b(f,$o,_),M(cL,$o,null),e($o,kCo),e($o,Si),e(Si,SCo),e(Si,bj),e(bj,RCo),e(Si,PCo),e(Si,vj),e(vj,BCo),e(Si,ICo),e($o,qCo),e($o,fL),e(fL,NCo),e(fL,Fde),e(Fde,jCo),e(fL,DCo),e($o,GCo),e($o,nt),M(mL,nt,null),e(nt,OCo),e(nt,Tde),e(Tde,VCo),e(nt,XCo),e(nt,Ri),e(Ri,zCo),e(Ri,Mde),e(Mde,WCo),e(Ri,QCo),e(Ri,Fj),e(Fj,HCo),e(Ri,UCo),e(nt,JCo),M(J_,nt,null),e($o,YCo),e($o,Ke),M(gL,Ke,null),e(Ke,KCo),e(Ke,Ede),e(Ede,ZCo),e(Ke,e5o),e(Ke,$a),e($a,o5o),e($a,Cde),e(Cde,r5o),e($a,t5o),e($a,wde),e(wde,a5o),e($a,n5o),e($a,Ade),e(Ade,s5o),e($a,l5o),e(Ke,i5o),e(Ke,z),e(z,Y_),e(Y_,yde),e(yde,d5o),e(Y_,c5o),e(Y_,Tj),e(Tj,f5o),e(Y_,m5o),e(z,g5o),e(z,K_),e(K_,Lde),e(Lde,h5o),e(K_,p5o),e(K_,Mj),e(Mj,u5o),e(K_,_5o),e(z,b5o),e(z,Z_),e(Z_,xde),e(xde,v5o),e(Z_,F5o),e(Z_,Ej),e(Ej,T5o),e(Z_,M5o),e(z,E5o),e(z,e0),e(e0,$de),e($de,C5o),e(e0,w5o),e(e0,Cj),e(Cj,A5o),e(e0,y5o),e(z,L5o),e(z,o0),e(o0,kde),e(kde,x5o),e(o0,$5o),e(o0,wj),e(wj,k5o),e(o0,S5o),e(z,R5o),e(z,r0),e(r0,Sde),e(Sde,P5o),e(r0,B5o),e(r0,Aj),e(Aj,I5o),e(r0,q5o),e(z,N5o),e(z,t0),e(t0,Rde),e(Rde,j5o),e(t0,D5o),e(t0,yj),e(yj,G5o),e(t0,O5o),e(z,V5o),e(z,a0),e(a0,Pde),e(Pde,X5o),e(a0,z5o),e(a0,Lj),e(Lj,W5o),e(a0,Q5o),e(z,H5o),e(z,n0),e(n0,Bde),e(Bde,U5o),e(n0,J5o),e(n0,xj),e(xj,Y5o),e(n0,K5o),e(z,Z5o),e(z,s0),e(s0,Ide),e(Ide,e3o),e(s0,o3o),e(s0,$j),e($j,r3o),e(s0,t3o),e(z,a3o),e(z,l0),e(l0,qde),e(qde,n3o),e(l0,s3o),e(l0,kj),e(kj,l3o),e(l0,i3o),e(z,d3o),e(z,i0),e(i0,Nde),e(Nde,c3o),e(i0,f3o),e(i0,Sj),e(Sj,m3o),e(i0,g3o),e(z,h3o),e(z,d0),e(d0,jde),e(jde,p3o),e(d0,u3o),e(d0,Rj),e(Rj,_3o),e(d0,b3o),e(z,v3o),e(z,c0),e(c0,Dde),e(Dde,F3o),e(c0,T3o),e(c0,Pj),e(Pj,M3o),e(c0,E3o),e(z,C3o),e(z,f0),e(f0,Gde),e(Gde,w3o),e(f0,A3o),e(f0,Bj),e(Bj,y3o),e(f0,L3o),e(z,x3o),e(z,m0),e(m0,Ode),e(Ode,$3o),e(m0,k3o),e(m0,Ij),e(Ij,S3o),e(m0,R3o),e(z,P3o),e(z,g0),e(g0,Vde),e(Vde,B3o),e(g0,I3o),e(g0,qj),e(qj,q3o),e(g0,N3o),e(z,j3o),e(z,h0),e(h0,Xde),e(Xde,D3o),e(h0,G3o),e(h0,Nj),e(Nj,O3o),e(h0,V3o),e(z,X3o),e(z,p0),e(p0,zde),e(zde,z3o),e(p0,W3o),e(p0,jj),e(jj,Q3o),e(p0,H3o),e(z,U3o),e(z,u0),e(u0,Wde),e(Wde,J3o),e(u0,Y3o),e(u0,Dj),e(Dj,K3o),e(u0,Z3o),e(z,ewo),e(z,_0),e(_0,Qde),e(Qde,owo),e(_0,rwo),e(_0,Gj),e(Gj,two),e(_0,awo),e(z,nwo),e(z,b0),e(b0,Hde),e(Hde,swo),e(b0,lwo),e(b0,Oj),e(Oj,iwo),e(b0,dwo),e(z,cwo),e(z,v0),e(v0,Ude),e(Ude,fwo),e(v0,mwo),e(v0,Vj),e(Vj,gwo),e(v0,hwo),e(z,pwo),e(z,F0),e(F0,Jde),e(Jde,uwo),e(F0,_wo),e(F0,Xj),e(Xj,bwo),e(F0,vwo),e(z,Fwo),e(z,T0),e(T0,Yde),e(Yde,Two),e(T0,Mwo),e(T0,zj),e(zj,Ewo),e(T0,Cwo),e(z,wwo),e(z,M0),e(M0,Kde),e(Kde,Awo),e(M0,ywo),e(M0,Wj),e(Wj,Lwo),e(M0,xwo),e(z,$wo),e(z,E0),e(E0,Zde),e(Zde,kwo),e(E0,Swo),e(E0,Qj),e(Qj,Rwo),e(E0,Pwo),e(z,Bwo),e(z,C0),e(C0,ece),e(ece,Iwo),e(C0,qwo),e(C0,Hj),e(Hj,Nwo),e(C0,jwo),e(z,Dwo),e(z,w0),e(w0,oce),e(oce,Gwo),e(w0,Owo),e(w0,Uj),e(Uj,Vwo),e(w0,Xwo),e(z,zwo),e(z,A0),e(A0,rce),e(rce,Wwo),e(A0,Qwo),e(A0,Jj),e(Jj,Hwo),e(A0,Uwo),e(z,Jwo),e(z,y0),e(y0,tce),e(tce,Ywo),e(y0,Kwo),e(y0,Yj),e(Yj,Zwo),e(y0,eAo),e(z,oAo),e(z,L0),e(L0,ace),e(ace,rAo),e(L0,tAo),e(L0,Kj),e(Kj,aAo),e(L0,nAo),e(z,sAo),e(z,x0),e(x0,nce),e(nce,lAo),e(x0,iAo),e(x0,Zj),e(Zj,dAo),e(x0,cAo),e(z,fAo),e(z,$0),e($0,sce),e(sce,mAo),e($0,gAo),e($0,eD),e(eD,hAo),e($0,pAo),e(z,uAo),e(z,k0),e(k0,lce),e(lce,_Ao),e(k0,bAo),e(k0,oD),e(oD,vAo),e(k0,FAo),e(z,TAo),e(z,S0),e(S0,ice),e(ice,MAo),e(S0,EAo),e(S0,rD),e(rD,CAo),e(S0,wAo),e(z,AAo),e(z,R0),e(R0,dce),e(dce,yAo),e(R0,LAo),e(R0,tD),e(tD,xAo),e(R0,$Ao),e(Ke,kAo),e(Ke,P0),e(P0,SAo),e(P0,cce),e(cce,RAo),e(P0,PAo),e(P0,fce),e(fce,BAo),e(Ke,IAo),M(B0,Ke,null),b(f,_Ne,_),b(f,Pi,_),e(Pi,I0),e(I0,mce),M(hL,mce,null),e(Pi,qAo),e(Pi,gce),e(gce,NAo),b(f,bNe,_),b(f,ko,_),M(pL,ko,null),e(ko,jAo),e(ko,Bi),e(Bi,DAo),e(Bi,aD),e(aD,GAo),e(Bi,OAo),e(Bi,nD),e(nD,VAo),e(Bi,XAo),e(ko,zAo),e(ko,uL),e(uL,WAo),e(uL,hce),e(hce,QAo),e(uL,HAo),e(ko,UAo),e(ko,st),M(_L,st,null),e(st,JAo),e(st,pce),e(pce,YAo),e(st,KAo),e(st,Ii),e(Ii,ZAo),e(Ii,uce),e(uce,eyo),e(Ii,oyo),e(Ii,sD),e(sD,ryo),e(Ii,tyo),e(st,ayo),M(q0,st,null),e(ko,nyo),e(ko,Ze),M(bL,Ze,null),e(Ze,syo),e(Ze,_ce),e(_ce,lyo),e(Ze,iyo),e(Ze,ka),e(ka,dyo),e(ka,bce),e(bce,cyo),e(ka,fyo),e(ka,vce),e(vce,myo),e(ka,gyo),e(ka,Fce),e(Fce,hyo),e(ka,pyo),e(Ze,uyo),e(Ze,Q),e(Q,N0),e(N0,Tce),e(Tce,_yo),e(N0,byo),e(N0,lD),e(lD,vyo),e(N0,Fyo),e(Q,Tyo),e(Q,j0),e(j0,Mce),e(Mce,Myo),e(j0,Eyo),e(j0,iD),e(iD,Cyo),e(j0,wyo),e(Q,Ayo),e(Q,D0),e(D0,Ece),e(Ece,yyo),e(D0,Lyo),e(D0,dD),e(dD,xyo),e(D0,$yo),e(Q,kyo),e(Q,G0),e(G0,Cce),e(Cce,Syo),e(G0,Ryo),e(G0,cD),e(cD,Pyo),e(G0,Byo),e(Q,Iyo),e(Q,O0),e(O0,wce),e(wce,qyo),e(O0,Nyo),e(O0,fD),e(fD,jyo),e(O0,Dyo),e(Q,Gyo),e(Q,V0),e(V0,Ace),e(Ace,Oyo),e(V0,Vyo),e(V0,mD),e(mD,Xyo),e(V0,zyo),e(Q,Wyo),e(Q,X0),e(X0,yce),e(yce,Qyo),e(X0,Hyo),e(X0,gD),e(gD,Uyo),e(X0,Jyo),e(Q,Yyo),e(Q,z0),e(z0,Lce),e(Lce,Kyo),e(z0,Zyo),e(z0,hD),e(hD,eLo),e(z0,oLo),e(Q,rLo),e(Q,W0),e(W0,xce),e(xce,tLo),e(W0,aLo),e(W0,pD),e(pD,nLo),e(W0,sLo),e(Q,lLo),e(Q,Q0),e(Q0,$ce),e($ce,iLo),e(Q0,dLo),e(Q0,uD),e(uD,cLo),e(Q0,fLo),e(Q,mLo),e(Q,H0),e(H0,kce),e(kce,gLo),e(H0,hLo),e(H0,_D),e(_D,pLo),e(H0,uLo),e(Q,_Lo),e(Q,U0),e(U0,Sce),e(Sce,bLo),e(U0,vLo),e(U0,bD),e(bD,FLo),e(U0,TLo),e(Q,MLo),e(Q,J0),e(J0,Rce),e(Rce,ELo),e(J0,CLo),e(J0,vD),e(vD,wLo),e(J0,ALo),e(Q,yLo),e(Q,Y0),e(Y0,Pce),e(Pce,LLo),e(Y0,xLo),e(Y0,FD),e(FD,$Lo),e(Y0,kLo),e(Q,SLo),e(Q,K0),e(K0,Bce),e(Bce,RLo),e(K0,PLo),e(K0,TD),e(TD,BLo),e(K0,ILo),e(Q,qLo),e(Q,Z0),e(Z0,Ice),e(Ice,NLo),e(Z0,jLo),e(Z0,MD),e(MD,DLo),e(Z0,GLo),e(Q,OLo),e(Q,e1),e(e1,qce),e(qce,VLo),e(e1,XLo),e(e1,ED),e(ED,zLo),e(e1,WLo),e(Q,QLo),e(Q,o1),e(o1,Nce),e(Nce,HLo),e(o1,ULo),e(o1,CD),e(CD,JLo),e(o1,YLo),e(Q,KLo),e(Q,r1),e(r1,jce),e(jce,ZLo),e(r1,e8o),e(r1,wD),e(wD,o8o),e(r1,r8o),e(Q,t8o),e(Q,t1),e(t1,Dce),e(Dce,a8o),e(t1,n8o),e(t1,AD),e(AD,s8o),e(t1,l8o),e(Q,i8o),e(Q,a1),e(a1,Gce),e(Gce,d8o),e(a1,c8o),e(a1,yD),e(yD,f8o),e(a1,m8o),e(Q,g8o),e(Q,n1),e(n1,Oce),e(Oce,h8o),e(n1,p8o),e(n1,LD),e(LD,u8o),e(n1,_8o),e(Q,b8o),e(Q,s1),e(s1,Vce),e(Vce,v8o),e(s1,F8o),e(s1,xD),e(xD,T8o),e(s1,M8o),e(Q,E8o),e(Q,l1),e(l1,Xce),e(Xce,C8o),e(l1,w8o),e(l1,$D),e($D,A8o),e(l1,y8o),e(Q,L8o),e(Q,i1),e(i1,zce),e(zce,x8o),e(i1,$8o),e(i1,kD),e(kD,k8o),e(i1,S8o),e(Q,R8o),e(Q,d1),e(d1,Wce),e(Wce,P8o),e(d1,B8o),e(d1,SD),e(SD,I8o),e(d1,q8o),e(Q,N8o),e(Q,c1),e(c1,Qce),e(Qce,j8o),e(c1,D8o),e(c1,RD),e(RD,G8o),e(c1,O8o),e(Q,V8o),e(Q,f1),e(f1,Hce),e(Hce,X8o),e(f1,z8o),e(f1,PD),e(PD,W8o),e(f1,Q8o),e(Q,H8o),e(Q,m1),e(m1,Uce),e(Uce,U8o),e(m1,J8o),e(m1,BD),e(BD,Y8o),e(m1,K8o),e(Q,Z8o),e(Q,g1),e(g1,Jce),e(Jce,e7o),e(g1,o7o),e(g1,ID),e(ID,r7o),e(g1,t7o),e(Q,a7o),e(Q,h1),e(h1,Yce),e(Yce,n7o),e(h1,s7o),e(h1,Kce),e(Kce,l7o),e(h1,i7o),e(Q,d7o),e(Q,p1),e(p1,Zce),e(Zce,c7o),e(p1,f7o),e(p1,qD),e(qD,m7o),e(p1,g7o),e(Q,h7o),e(Q,u1),e(u1,efe),e(efe,p7o),e(u1,u7o),e(u1,ND),e(ND,_7o),e(u1,b7o),e(Q,v7o),e(Q,_1),e(_1,ofe),e(ofe,F7o),e(_1,T7o),e(_1,jD),e(jD,M7o),e(_1,E7o),e(Q,C7o),e(Q,b1),e(b1,rfe),e(rfe,w7o),e(b1,A7o),e(b1,DD),e(DD,y7o),e(b1,L7o),e(Ze,x7o),e(Ze,v1),e(v1,$7o),e(v1,tfe),e(tfe,k7o),e(v1,S7o),e(v1,afe),e(afe,R7o),e(Ze,P7o),M(F1,Ze,null),b(f,vNe,_),b(f,qi,_),e(qi,T1),e(T1,nfe),M(vL,nfe,null),e(qi,B7o),e(qi,sfe),e(sfe,I7o),b(f,FNe,_),b(f,So,_),M(FL,So,null),e(So,q7o),e(So,Ni),e(Ni,N7o),e(Ni,GD),e(GD,j7o),e(Ni,D7o),e(Ni,OD),e(OD,G7o),e(Ni,O7o),e(So,V7o),e(So,TL),e(TL,X7o),e(TL,lfe),e(lfe,z7o),e(TL,W7o),e(So,Q7o),e(So,lt),M(ML,lt,null),e(lt,H7o),e(lt,ife),e(ife,U7o),e(lt,J7o),e(lt,ji),e(ji,Y7o),e(ji,dfe),e(dfe,K7o),e(ji,Z7o),e(ji,VD),e(VD,e9o),e(ji,o9o),e(lt,r9o),M(M1,lt,null),e(So,t9o),e(So,eo),M(EL,eo,null),e(eo,a9o),e(eo,cfe),e(cfe,n9o),e(eo,s9o),e(eo,Sa),e(Sa,l9o),e(Sa,ffe),e(ffe,i9o),e(Sa,d9o),e(Sa,mfe),e(mfe,c9o),e(Sa,f9o),e(Sa,gfe),e(gfe,m9o),e(Sa,g9o),e(eo,h9o),e(eo,ue),e(ue,E1),e(E1,hfe),e(hfe,p9o),e(E1,u9o),e(E1,XD),e(XD,_9o),e(E1,b9o),e(ue,v9o),e(ue,C1),e(C1,pfe),e(pfe,F9o),e(C1,T9o),e(C1,zD),e(zD,M9o),e(C1,E9o),e(ue,C9o),e(ue,w1),e(w1,ufe),e(ufe,w9o),e(w1,A9o),e(w1,WD),e(WD,y9o),e(w1,L9o),e(ue,x9o),e(ue,A1),e(A1,_fe),e(_fe,$9o),e(A1,k9o),e(A1,QD),e(QD,S9o),e(A1,R9o),e(ue,P9o),e(ue,y1),e(y1,bfe),e(bfe,B9o),e(y1,I9o),e(y1,HD),e(HD,q9o),e(y1,N9o),e(ue,j9o),e(ue,L1),e(L1,vfe),e(vfe,D9o),e(L1,G9o),e(L1,UD),e(UD,O9o),e(L1,V9o),e(ue,X9o),e(ue,x1),e(x1,Ffe),e(Ffe,z9o),e(x1,W9o),e(x1,JD),e(JD,Q9o),e(x1,H9o),e(ue,U9o),e(ue,$1),e($1,Tfe),e(Tfe,J9o),e($1,Y9o),e($1,YD),e(YD,K9o),e($1,Z9o),e(ue,exo),e(ue,k1),e(k1,Mfe),e(Mfe,oxo),e(k1,rxo),e(k1,KD),e(KD,txo),e(k1,axo),e(ue,nxo),e(ue,S1),e(S1,Efe),e(Efe,sxo),e(S1,lxo),e(S1,ZD),e(ZD,ixo),e(S1,dxo),e(ue,cxo),e(ue,R1),e(R1,Cfe),e(Cfe,fxo),e(R1,mxo),e(R1,eG),e(eG,gxo),e(R1,hxo),e(ue,pxo),e(ue,P1),e(P1,wfe),e(wfe,uxo),e(P1,_xo),e(P1,oG),e(oG,bxo),e(P1,vxo),e(ue,Fxo),e(ue,B1),e(B1,Afe),e(Afe,Txo),e(B1,Mxo),e(B1,rG),e(rG,Exo),e(B1,Cxo),e(ue,wxo),e(ue,I1),e(I1,yfe),e(yfe,Axo),e(I1,yxo),e(I1,tG),e(tG,Lxo),e(I1,xxo),e(ue,$xo),e(ue,q1),e(q1,Lfe),e(Lfe,kxo),e(q1,Sxo),e(q1,aG),e(aG,Rxo),e(q1,Pxo),e(ue,Bxo),e(ue,N1),e(N1,xfe),e(xfe,Ixo),e(N1,qxo),e(N1,nG),e(nG,Nxo),e(N1,jxo),e(eo,Dxo),e(eo,j1),e(j1,Gxo),e(j1,$fe),e($fe,Oxo),e(j1,Vxo),e(j1,kfe),e(kfe,Xxo),e(eo,zxo),M(D1,eo,null),b(f,TNe,_),b(f,Di,_),e(Di,G1),e(G1,Sfe),M(CL,Sfe,null),e(Di,Wxo),e(Di,Rfe),e(Rfe,Qxo),b(f,MNe,_),b(f,Ro,_),M(wL,Ro,null),e(Ro,Hxo),e(Ro,Gi),e(Gi,Uxo),e(Gi,sG),e(sG,Jxo),e(Gi,Yxo),e(Gi,lG),e(lG,Kxo),e(Gi,Zxo),e(Ro,e$o),e(Ro,AL),e(AL,o$o),e(AL,Pfe),e(Pfe,r$o),e(AL,t$o),e(Ro,a$o),e(Ro,it),M(yL,it,null),e(it,n$o),e(it,Bfe),e(Bfe,s$o),e(it,l$o),e(it,Oi),e(Oi,i$o),e(Oi,Ife),e(Ife,d$o),e(Oi,c$o),e(Oi,iG),e(iG,f$o),e(Oi,m$o),e(it,g$o),M(O1,it,null),e(Ro,h$o),e(Ro,oo),M(LL,oo,null),e(oo,p$o),e(oo,qfe),e(qfe,u$o),e(oo,_$o),e(oo,Ra),e(Ra,b$o),e(Ra,Nfe),e(Nfe,v$o),e(Ra,F$o),e(Ra,jfe),e(jfe,T$o),e(Ra,M$o),e(Ra,Dfe),e(Dfe,E$o),e(Ra,C$o),e(oo,w$o),e(oo,q),e(q,V1),e(V1,Gfe),e(Gfe,A$o),e(V1,y$o),e(V1,dG),e(dG,L$o),e(V1,x$o),e(q,$$o),e(q,X1),e(X1,Ofe),e(Ofe,k$o),e(X1,S$o),e(X1,cG),e(cG,R$o),e(X1,P$o),e(q,B$o),e(q,z1),e(z1,Vfe),e(Vfe,I$o),e(z1,q$o),e(z1,fG),e(fG,N$o),e(z1,j$o),e(q,D$o),e(q,W1),e(W1,Xfe),e(Xfe,G$o),e(W1,O$o),e(W1,mG),e(mG,V$o),e(W1,X$o),e(q,z$o),e(q,Q1),e(Q1,zfe),e(zfe,W$o),e(Q1,Q$o),e(Q1,gG),e(gG,H$o),e(Q1,U$o),e(q,J$o),e(q,H1),e(H1,Wfe),e(Wfe,Y$o),e(H1,K$o),e(H1,hG),e(hG,Z$o),e(H1,eko),e(q,oko),e(q,U1),e(U1,Qfe),e(Qfe,rko),e(U1,tko),e(U1,pG),e(pG,ako),e(U1,nko),e(q,sko),e(q,J1),e(J1,Hfe),e(Hfe,lko),e(J1,iko),e(J1,uG),e(uG,dko),e(J1,cko),e(q,fko),e(q,Y1),e(Y1,Ufe),e(Ufe,mko),e(Y1,gko),e(Y1,_G),e(_G,hko),e(Y1,pko),e(q,uko),e(q,K1),e(K1,Jfe),e(Jfe,_ko),e(K1,bko),e(K1,bG),e(bG,vko),e(K1,Fko),e(q,Tko),e(q,Z1),e(Z1,Yfe),e(Yfe,Mko),e(Z1,Eko),e(Z1,vG),e(vG,Cko),e(Z1,wko),e(q,Ako),e(q,eb),e(eb,Kfe),e(Kfe,yko),e(eb,Lko),e(eb,FG),e(FG,xko),e(eb,$ko),e(q,kko),e(q,ob),e(ob,Zfe),e(Zfe,Sko),e(ob,Rko),e(ob,TG),e(TG,Pko),e(ob,Bko),e(q,Iko),e(q,rb),e(rb,eme),e(eme,qko),e(rb,Nko),e(rb,MG),e(MG,jko),e(rb,Dko),e(q,Gko),e(q,tb),e(tb,ome),e(ome,Oko),e(tb,Vko),e(tb,EG),e(EG,Xko),e(tb,zko),e(q,Wko),e(q,ab),e(ab,rme),e(rme,Qko),e(ab,Hko),e(ab,CG),e(CG,Uko),e(ab,Jko),e(q,Yko),e(q,nb),e(nb,tme),e(tme,Kko),e(nb,Zko),e(nb,wG),e(wG,eSo),e(nb,oSo),e(q,rSo),e(q,sb),e(sb,ame),e(ame,tSo),e(sb,aSo),e(sb,AG),e(AG,nSo),e(sb,sSo),e(q,lSo),e(q,lb),e(lb,nme),e(nme,iSo),e(lb,dSo),e(lb,yG),e(yG,cSo),e(lb,fSo),e(q,mSo),e(q,ib),e(ib,sme),e(sme,gSo),e(ib,hSo),e(ib,LG),e(LG,pSo),e(ib,uSo),e(q,_So),e(q,db),e(db,lme),e(lme,bSo),e(db,vSo),e(db,xG),e(xG,FSo),e(db,TSo),e(q,MSo),e(q,cb),e(cb,ime),e(ime,ESo),e(cb,CSo),e(cb,$G),e($G,wSo),e(cb,ASo),e(q,ySo),e(q,fb),e(fb,dme),e(dme,LSo),e(fb,xSo),e(fb,kG),e(kG,$So),e(fb,kSo),e(q,SSo),e(q,mb),e(mb,cme),e(cme,RSo),e(mb,PSo),e(mb,SG),e(SG,BSo),e(mb,ISo),e(q,qSo),e(q,gb),e(gb,fme),e(fme,NSo),e(gb,jSo),e(gb,RG),e(RG,DSo),e(gb,GSo),e(q,OSo),e(q,hb),e(hb,mme),e(mme,VSo),e(hb,XSo),e(hb,PG),e(PG,zSo),e(hb,WSo),e(q,QSo),e(q,pb),e(pb,gme),e(gme,HSo),e(pb,USo),e(pb,BG),e(BG,JSo),e(pb,YSo),e(q,KSo),e(q,ub),e(ub,hme),e(hme,ZSo),e(ub,eRo),e(ub,IG),e(IG,oRo),e(ub,rRo),e(q,tRo),e(q,_b),e(_b,pme),e(pme,aRo),e(_b,nRo),e(_b,qG),e(qG,sRo),e(_b,lRo),e(q,iRo),e(q,bb),e(bb,ume),e(ume,dRo),e(bb,cRo),e(bb,NG),e(NG,fRo),e(bb,mRo),e(q,gRo),e(q,vb),e(vb,_me),e(_me,hRo),e(vb,pRo),e(vb,jG),e(jG,uRo),e(vb,_Ro),e(q,bRo),e(q,Fb),e(Fb,bme),e(bme,vRo),e(Fb,FRo),e(Fb,DG),e(DG,TRo),e(Fb,MRo),e(q,ERo),e(q,Tb),e(Tb,vme),e(vme,CRo),e(Tb,wRo),e(Tb,GG),e(GG,ARo),e(Tb,yRo),e(q,LRo),e(q,Mb),e(Mb,Fme),e(Fme,xRo),e(Mb,$Ro),e(Mb,OG),e(OG,kRo),e(Mb,SRo),e(q,RRo),e(q,Eb),e(Eb,Tme),e(Tme,PRo),e(Eb,BRo),e(Eb,VG),e(VG,IRo),e(Eb,qRo),e(q,NRo),e(q,Cb),e(Cb,Mme),e(Mme,jRo),e(Cb,DRo),e(Cb,XG),e(XG,GRo),e(Cb,ORo),e(q,VRo),e(q,wb),e(wb,Eme),e(Eme,XRo),e(wb,zRo),e(wb,zG),e(zG,WRo),e(wb,QRo),e(q,HRo),e(q,Ab),e(Ab,Cme),e(Cme,URo),e(Ab,JRo),e(Ab,WG),e(WG,YRo),e(Ab,KRo),e(q,ZRo),e(q,yb),e(yb,wme),e(wme,ePo),e(yb,oPo),e(yb,QG),e(QG,rPo),e(yb,tPo),e(q,aPo),e(q,Lb),e(Lb,Ame),e(Ame,nPo),e(Lb,sPo),e(Lb,HG),e(HG,lPo),e(Lb,iPo),e(q,dPo),e(q,xb),e(xb,yme),e(yme,cPo),e(xb,fPo),e(xb,UG),e(UG,mPo),e(xb,gPo),e(q,hPo),e(q,$b),e($b,Lme),e(Lme,pPo),e($b,uPo),e($b,JG),e(JG,_Po),e($b,bPo),e(q,vPo),e(q,kb),e(kb,xme),e(xme,FPo),e(kb,TPo),e(kb,YG),e(YG,MPo),e(kb,EPo),e(q,CPo),e(q,Sb),e(Sb,$me),e($me,wPo),e(Sb,APo),e(Sb,KG),e(KG,yPo),e(Sb,LPo),e(q,xPo),e(q,Rb),e(Rb,kme),e(kme,$Po),e(Rb,kPo),e(Rb,ZG),e(ZG,SPo),e(Rb,RPo),e(q,PPo),e(q,Pb),e(Pb,Sme),e(Sme,BPo),e(Pb,IPo),e(Pb,eO),e(eO,qPo),e(Pb,NPo),e(q,jPo),e(q,Bb),e(Bb,Rme),e(Rme,DPo),e(Bb,GPo),e(Bb,oO),e(oO,OPo),e(Bb,VPo),e(oo,XPo),e(oo,Ib),e(Ib,zPo),e(Ib,Pme),e(Pme,WPo),e(Ib,QPo),e(Ib,Bme),e(Bme,HPo),e(oo,UPo),M(qb,oo,null),b(f,ENe,_),b(f,Vi,_),e(Vi,Nb),e(Nb,Ime),M(xL,Ime,null),e(Vi,JPo),e(Vi,qme),e(qme,YPo),b(f,CNe,_),b(f,Po,_),M($L,Po,null),e(Po,KPo),e(Po,Xi),e(Xi,ZPo),e(Xi,rO),e(rO,eBo),e(Xi,oBo),e(Xi,tO),e(tO,rBo),e(Xi,tBo),e(Po,aBo),e(Po,kL),e(kL,nBo),e(kL,Nme),e(Nme,sBo),e(kL,lBo),e(Po,iBo),e(Po,dt),M(SL,dt,null),e(dt,dBo),e(dt,jme),e(jme,cBo),e(dt,fBo),e(dt,zi),e(zi,mBo),e(zi,Dme),e(Dme,gBo),e(zi,hBo),e(zi,aO),e(aO,pBo),e(zi,uBo),e(dt,_Bo),M(jb,dt,null),e(Po,bBo),e(Po,ro),M(RL,ro,null),e(ro,vBo),e(ro,Gme),e(Gme,FBo),e(ro,TBo),e(ro,Pa),e(Pa,MBo),e(Pa,Ome),e(Ome,EBo),e(Pa,CBo),e(Pa,Vme),e(Vme,wBo),e(Pa,ABo),e(Pa,Xme),e(Xme,yBo),e(Pa,LBo),e(ro,xBo),e(ro,K),e(K,Db),e(Db,zme),e(zme,$Bo),e(Db,kBo),e(Db,nO),e(nO,SBo),e(Db,RBo),e(K,PBo),e(K,Gb),e(Gb,Wme),e(Wme,BBo),e(Gb,IBo),e(Gb,sO),e(sO,qBo),e(Gb,NBo),e(K,jBo),e(K,Ob),e(Ob,Qme),e(Qme,DBo),e(Ob,GBo),e(Ob,lO),e(lO,OBo),e(Ob,VBo),e(K,XBo),e(K,Vb),e(Vb,Hme),e(Hme,zBo),e(Vb,WBo),e(Vb,iO),e(iO,QBo),e(Vb,HBo),e(K,UBo),e(K,Xb),e(Xb,Ume),e(Ume,JBo),e(Xb,YBo),e(Xb,dO),e(dO,KBo),e(Xb,ZBo),e(K,eIo),e(K,zb),e(zb,Jme),e(Jme,oIo),e(zb,rIo),e(zb,cO),e(cO,tIo),e(zb,aIo),e(K,nIo),e(K,Wb),e(Wb,Yme),e(Yme,sIo),e(Wb,lIo),e(Wb,fO),e(fO,iIo),e(Wb,dIo),e(K,cIo),e(K,Qb),e(Qb,Kme),e(Kme,fIo),e(Qb,mIo),e(Qb,mO),e(mO,gIo),e(Qb,hIo),e(K,pIo),e(K,Hb),e(Hb,Zme),e(Zme,uIo),e(Hb,_Io),e(Hb,gO),e(gO,bIo),e(Hb,vIo),e(K,FIo),e(K,Ub),e(Ub,ege),e(ege,TIo),e(Ub,MIo),e(Ub,hO),e(hO,EIo),e(Ub,CIo),e(K,wIo),e(K,Jb),e(Jb,oge),e(oge,AIo),e(Jb,yIo),e(Jb,pO),e(pO,LIo),e(Jb,xIo),e(K,$Io),e(K,Yb),e(Yb,rge),e(rge,kIo),e(Yb,SIo),e(Yb,uO),e(uO,RIo),e(Yb,PIo),e(K,BIo),e(K,Kb),e(Kb,tge),e(tge,IIo),e(Kb,qIo),e(Kb,_O),e(_O,NIo),e(Kb,jIo),e(K,DIo),e(K,Zb),e(Zb,age),e(age,GIo),e(Zb,OIo),e(Zb,bO),e(bO,VIo),e(Zb,XIo),e(K,zIo),e(K,e2),e(e2,nge),e(nge,WIo),e(e2,QIo),e(e2,vO),e(vO,HIo),e(e2,UIo),e(K,JIo),e(K,o2),e(o2,sge),e(sge,YIo),e(o2,KIo),e(o2,FO),e(FO,ZIo),e(o2,eqo),e(K,oqo),e(K,r2),e(r2,lge),e(lge,rqo),e(r2,tqo),e(r2,TO),e(TO,aqo),e(r2,nqo),e(K,sqo),e(K,t2),e(t2,ige),e(ige,lqo),e(t2,iqo),e(t2,MO),e(MO,dqo),e(t2,cqo),e(K,fqo),e(K,a2),e(a2,dge),e(dge,mqo),e(a2,gqo),e(a2,EO),e(EO,hqo),e(a2,pqo),e(K,uqo),e(K,n2),e(n2,cge),e(cge,_qo),e(n2,bqo),e(n2,CO),e(CO,vqo),e(n2,Fqo),e(K,Tqo),e(K,s2),e(s2,fge),e(fge,Mqo),e(s2,Eqo),e(s2,wO),e(wO,Cqo),e(s2,wqo),e(K,Aqo),e(K,l2),e(l2,mge),e(mge,yqo),e(l2,Lqo),e(l2,AO),e(AO,xqo),e(l2,$qo),e(K,kqo),e(K,i2),e(i2,gge),e(gge,Sqo),e(i2,Rqo),e(i2,yO),e(yO,Pqo),e(i2,Bqo),e(K,Iqo),e(K,d2),e(d2,hge),e(hge,qqo),e(d2,Nqo),e(d2,LO),e(LO,jqo),e(d2,Dqo),e(K,Gqo),e(K,c2),e(c2,pge),e(pge,Oqo),e(c2,Vqo),e(c2,xO),e(xO,Xqo),e(c2,zqo),e(K,Wqo),e(K,f2),e(f2,uge),e(uge,Qqo),e(f2,Hqo),e(f2,$O),e($O,Uqo),e(f2,Jqo),e(K,Yqo),e(K,m2),e(m2,_ge),e(_ge,Kqo),e(m2,Zqo),e(m2,kO),e(kO,eNo),e(m2,oNo),e(K,rNo),e(K,g2),e(g2,bge),e(bge,tNo),e(g2,aNo),e(g2,SO),e(SO,nNo),e(g2,sNo),e(K,lNo),e(K,h2),e(h2,vge),e(vge,iNo),e(h2,dNo),e(h2,RO),e(RO,cNo),e(h2,fNo),e(ro,mNo),e(ro,p2),e(p2,gNo),e(p2,Fge),e(Fge,hNo),e(p2,pNo),e(p2,Tge),e(Tge,uNo),e(ro,_No),M(u2,ro,null),b(f,wNe,_),b(f,Wi,_),e(Wi,_2),e(_2,Mge),M(PL,Mge,null),e(Wi,bNo),e(Wi,Ege),e(Ege,vNo),b(f,ANe,_),b(f,Bo,_),M(BL,Bo,null),e(Bo,FNo),e(Bo,Qi),e(Qi,TNo),e(Qi,PO),e(PO,MNo),e(Qi,ENo),e(Qi,BO),e(BO,CNo),e(Qi,wNo),e(Bo,ANo),e(Bo,IL),e(IL,yNo),e(IL,Cge),e(Cge,LNo),e(IL,xNo),e(Bo,$No),e(Bo,ct),M(qL,ct,null),e(ct,kNo),e(ct,wge),e(wge,SNo),e(ct,RNo),e(ct,Hi),e(Hi,PNo),e(Hi,Age),e(Age,BNo),e(Hi,INo),e(Hi,IO),e(IO,qNo),e(Hi,NNo),e(ct,jNo),M(b2,ct,null),e(Bo,DNo),e(Bo,to),M(NL,to,null),e(to,GNo),e(to,yge),e(yge,ONo),e(to,VNo),e(to,Ba),e(Ba,XNo),e(Ba,Lge),e(Lge,zNo),e(Ba,WNo),e(Ba,xge),e(xge,QNo),e(Ba,HNo),e(Ba,$ge),e($ge,UNo),e(Ba,JNo),e(to,YNo),e(to,Yr),e(Yr,v2),e(v2,kge),e(kge,KNo),e(v2,ZNo),e(v2,qO),e(qO,ejo),e(v2,ojo),e(Yr,rjo),e(Yr,F2),e(F2,Sge),e(Sge,tjo),e(F2,ajo),e(F2,NO),e(NO,njo),e(F2,sjo),e(Yr,ljo),e(Yr,T2),e(T2,Rge),e(Rge,ijo),e(T2,djo),e(T2,jO),e(jO,cjo),e(T2,fjo),e(Yr,mjo),e(Yr,M2),e(M2,Pge),e(Pge,gjo),e(M2,hjo),e(M2,DO),e(DO,pjo),e(M2,ujo),e(Yr,_jo),e(Yr,E2),e(E2,Bge),e(Bge,bjo),e(E2,vjo),e(E2,GO),e(GO,Fjo),e(E2,Tjo),e(to,Mjo),e(to,C2),e(C2,Ejo),e(C2,Ige),e(Ige,Cjo),e(C2,wjo),e(C2,qge),e(qge,Ajo),e(to,yjo),M(w2,to,null),b(f,yNe,_),b(f,Ui,_),e(Ui,A2),e(A2,Nge),M(jL,Nge,null),e(Ui,Ljo),e(Ui,jge),e(jge,xjo),b(f,LNe,_),b(f,Io,_),M(DL,Io,null),e(Io,$jo),e(Io,Ji),e(Ji,kjo),e(Ji,OO),e(OO,Sjo),e(Ji,Rjo),e(Ji,VO),e(VO,Pjo),e(Ji,Bjo),e(Io,Ijo),e(Io,GL),e(GL,qjo),e(GL,Dge),e(Dge,Njo),e(GL,jjo),e(Io,Djo),e(Io,ft),M(OL,ft,null),e(ft,Gjo),e(ft,Gge),e(Gge,Ojo),e(ft,Vjo),e(ft,Yi),e(Yi,Xjo),e(Yi,Oge),e(Oge,zjo),e(Yi,Wjo),e(Yi,XO),e(XO,Qjo),e(Yi,Hjo),e(ft,Ujo),M(y2,ft,null),e(Io,Jjo),e(Io,ao),M(VL,ao,null),e(ao,Yjo),e(ao,Vge),e(Vge,Kjo),e(ao,Zjo),e(ao,Ia),e(Ia,eDo),e(Ia,Xge),e(Xge,oDo),e(Ia,rDo),e(Ia,zge),e(zge,tDo),e(Ia,aDo),e(Ia,Wge),e(Wge,nDo),e(Ia,sDo),e(ao,lDo),e(ao,H),e(H,L2),e(L2,Qge),e(Qge,iDo),e(L2,dDo),e(L2,zO),e(zO,cDo),e(L2,fDo),e(H,mDo),e(H,x2),e(x2,Hge),e(Hge,gDo),e(x2,hDo),e(x2,WO),e(WO,pDo),e(x2,uDo),e(H,_Do),e(H,$2),e($2,Uge),e(Uge,bDo),e($2,vDo),e($2,QO),e(QO,FDo),e($2,TDo),e(H,MDo),e(H,k2),e(k2,Jge),e(Jge,EDo),e(k2,CDo),e(k2,HO),e(HO,wDo),e(k2,ADo),e(H,yDo),e(H,S2),e(S2,Yge),e(Yge,LDo),e(S2,xDo),e(S2,UO),e(UO,$Do),e(S2,kDo),e(H,SDo),e(H,R2),e(R2,Kge),e(Kge,RDo),e(R2,PDo),e(R2,JO),e(JO,BDo),e(R2,IDo),e(H,qDo),e(H,P2),e(P2,Zge),e(Zge,NDo),e(P2,jDo),e(P2,YO),e(YO,DDo),e(P2,GDo),e(H,ODo),e(H,B2),e(B2,ehe),e(ehe,VDo),e(B2,XDo),e(B2,KO),e(KO,zDo),e(B2,WDo),e(H,QDo),e(H,I2),e(I2,ohe),e(ohe,HDo),e(I2,UDo),e(I2,ZO),e(ZO,JDo),e(I2,YDo),e(H,KDo),e(H,q2),e(q2,rhe),e(rhe,ZDo),e(q2,eGo),e(q2,eV),e(eV,oGo),e(q2,rGo),e(H,tGo),e(H,N2),e(N2,the),e(the,aGo),e(N2,nGo),e(N2,oV),e(oV,sGo),e(N2,lGo),e(H,iGo),e(H,j2),e(j2,ahe),e(ahe,dGo),e(j2,cGo),e(j2,rV),e(rV,fGo),e(j2,mGo),e(H,gGo),e(H,D2),e(D2,nhe),e(nhe,hGo),e(D2,pGo),e(D2,tV),e(tV,uGo),e(D2,_Go),e(H,bGo),e(H,G2),e(G2,she),e(she,vGo),e(G2,FGo),e(G2,aV),e(aV,TGo),e(G2,MGo),e(H,EGo),e(H,O2),e(O2,lhe),e(lhe,CGo),e(O2,wGo),e(O2,nV),e(nV,AGo),e(O2,yGo),e(H,LGo),e(H,V2),e(V2,ihe),e(ihe,xGo),e(V2,$Go),e(V2,sV),e(sV,kGo),e(V2,SGo),e(H,RGo),e(H,X2),e(X2,dhe),e(dhe,PGo),e(X2,BGo),e(X2,lV),e(lV,IGo),e(X2,qGo),e(H,NGo),e(H,z2),e(z2,che),e(che,jGo),e(z2,DGo),e(z2,iV),e(iV,GGo),e(z2,OGo),e(H,VGo),e(H,W2),e(W2,fhe),e(fhe,XGo),e(W2,zGo),e(W2,dV),e(dV,WGo),e(W2,QGo),e(H,HGo),e(H,Q2),e(Q2,mhe),e(mhe,UGo),e(Q2,JGo),e(Q2,cV),e(cV,YGo),e(Q2,KGo),e(H,ZGo),e(H,H2),e(H2,ghe),e(ghe,eOo),e(H2,oOo),e(H2,fV),e(fV,rOo),e(H2,tOo),e(H,aOo),e(H,U2),e(U2,hhe),e(hhe,nOo),e(U2,sOo),e(U2,mV),e(mV,lOo),e(U2,iOo),e(H,dOo),e(H,J2),e(J2,phe),e(phe,cOo),e(J2,fOo),e(J2,gV),e(gV,mOo),e(J2,gOo),e(H,hOo),e(H,Y2),e(Y2,uhe),e(uhe,pOo),e(Y2,uOo),e(Y2,hV),e(hV,_Oo),e(Y2,bOo),e(H,vOo),e(H,K2),e(K2,_he),e(_he,FOo),e(K2,TOo),e(K2,pV),e(pV,MOo),e(K2,EOo),e(H,COo),e(H,Z2),e(Z2,bhe),e(bhe,wOo),e(Z2,AOo),e(Z2,uV),e(uV,yOo),e(Z2,LOo),e(H,xOo),e(H,e4),e(e4,vhe),e(vhe,$Oo),e(e4,kOo),e(e4,_V),e(_V,SOo),e(e4,ROo),e(H,POo),e(H,o4),e(o4,Fhe),e(Fhe,BOo),e(o4,IOo),e(o4,bV),e(bV,qOo),e(o4,NOo),e(H,jOo),e(H,r4),e(r4,The),e(The,DOo),e(r4,GOo),e(r4,vV),e(vV,OOo),e(r4,VOo),e(H,XOo),e(H,t4),e(t4,Mhe),e(Mhe,zOo),e(t4,WOo),e(t4,FV),e(FV,QOo),e(t4,HOo),e(H,UOo),e(H,a4),e(a4,Ehe),e(Ehe,JOo),e(a4,YOo),e(a4,TV),e(TV,KOo),e(a4,ZOo),e(H,eVo),e(H,n4),e(n4,Che),e(Che,oVo),e(n4,rVo),e(n4,MV),e(MV,tVo),e(n4,aVo),e(H,nVo),e(H,s4),e(s4,whe),e(whe,sVo),e(s4,lVo),e(s4,EV),e(EV,iVo),e(s4,dVo),e(H,cVo),e(H,l4),e(l4,Ahe),e(Ahe,fVo),e(l4,mVo),e(l4,CV),e(CV,gVo),e(l4,hVo),e(ao,pVo),e(ao,i4),e(i4,uVo),e(i4,yhe),e(yhe,_Vo),e(i4,bVo),e(i4,Lhe),e(Lhe,vVo),e(ao,FVo),M(d4,ao,null),b(f,xNe,_),b(f,Ki,_),e(Ki,c4),e(c4,xhe),M(XL,xhe,null),e(Ki,TVo),e(Ki,$he),e($he,MVo),b(f,$Ne,_),b(f,qo,_),M(zL,qo,null),e(qo,EVo),e(qo,Zi),e(Zi,CVo),e(Zi,wV),e(wV,wVo),e(Zi,AVo),e(Zi,AV),e(AV,yVo),e(Zi,LVo),e(qo,xVo),e(qo,WL),e(WL,$Vo),e(WL,khe),e(khe,kVo),e(WL,SVo),e(qo,RVo),e(qo,mt),M(QL,mt,null),e(mt,PVo),e(mt,She),e(She,BVo),e(mt,IVo),e(mt,ed),e(ed,qVo),e(ed,Rhe),e(Rhe,NVo),e(ed,jVo),e(ed,yV),e(yV,DVo),e(ed,GVo),e(mt,OVo),M(f4,mt,null),e(qo,VVo),e(qo,no),M(HL,no,null),e(no,XVo),e(no,Phe),e(Phe,zVo),e(no,WVo),e(no,qa),e(qa,QVo),e(qa,Bhe),e(Bhe,HVo),e(qa,UVo),e(qa,Ihe),e(Ihe,JVo),e(qa,YVo),e(qa,qhe),e(qhe,KVo),e(qa,ZVo),e(no,eXo),e(no,V),e(V,m4),e(m4,Nhe),e(Nhe,oXo),e(m4,rXo),e(m4,LV),e(LV,tXo),e(m4,aXo),e(V,nXo),e(V,g4),e(g4,jhe),e(jhe,sXo),e(g4,lXo),e(g4,xV),e(xV,iXo),e(g4,dXo),e(V,cXo),e(V,h4),e(h4,Dhe),e(Dhe,fXo),e(h4,mXo),e(h4,$V),e($V,gXo),e(h4,hXo),e(V,pXo),e(V,p4),e(p4,Ghe),e(Ghe,uXo),e(p4,_Xo),e(p4,kV),e(kV,bXo),e(p4,vXo),e(V,FXo),e(V,u4),e(u4,Ohe),e(Ohe,TXo),e(u4,MXo),e(u4,SV),e(SV,EXo),e(u4,CXo),e(V,wXo),e(V,_4),e(_4,Vhe),e(Vhe,AXo),e(_4,yXo),e(_4,RV),e(RV,LXo),e(_4,xXo),e(V,$Xo),e(V,b4),e(b4,Xhe),e(Xhe,kXo),e(b4,SXo),e(b4,PV),e(PV,RXo),e(b4,PXo),e(V,BXo),e(V,v4),e(v4,zhe),e(zhe,IXo),e(v4,qXo),e(v4,BV),e(BV,NXo),e(v4,jXo),e(V,DXo),e(V,F4),e(F4,Whe),e(Whe,GXo),e(F4,OXo),e(F4,IV),e(IV,VXo),e(F4,XXo),e(V,zXo),e(V,T4),e(T4,Qhe),e(Qhe,WXo),e(T4,QXo),e(T4,qV),e(qV,HXo),e(T4,UXo),e(V,JXo),e(V,M4),e(M4,Hhe),e(Hhe,YXo),e(M4,KXo),e(M4,NV),e(NV,ZXo),e(M4,ezo),e(V,ozo),e(V,E4),e(E4,Uhe),e(Uhe,rzo),e(E4,tzo),e(E4,jV),e(jV,azo),e(E4,nzo),e(V,szo),e(V,C4),e(C4,Jhe),e(Jhe,lzo),e(C4,izo),e(C4,DV),e(DV,dzo),e(C4,czo),e(V,fzo),e(V,w4),e(w4,Yhe),e(Yhe,mzo),e(w4,gzo),e(w4,GV),e(GV,hzo),e(w4,pzo),e(V,uzo),e(V,A4),e(A4,Khe),e(Khe,_zo),e(A4,bzo),e(A4,OV),e(OV,vzo),e(A4,Fzo),e(V,Tzo),e(V,y4),e(y4,Zhe),e(Zhe,Mzo),e(y4,Ezo),e(y4,VV),e(VV,Czo),e(y4,wzo),e(V,Azo),e(V,L4),e(L4,epe),e(epe,yzo),e(L4,Lzo),e(L4,XV),e(XV,xzo),e(L4,$zo),e(V,kzo),e(V,x4),e(x4,ope),e(ope,Szo),e(x4,Rzo),e(x4,zV),e(zV,Pzo),e(x4,Bzo),e(V,Izo),e(V,$4),e($4,rpe),e(rpe,qzo),e($4,Nzo),e($4,WV),e(WV,jzo),e($4,Dzo),e(V,Gzo),e(V,k4),e(k4,tpe),e(tpe,Ozo),e(k4,Vzo),e(k4,QV),e(QV,Xzo),e(k4,zzo),e(V,Wzo),e(V,S4),e(S4,ape),e(ape,Qzo),e(S4,Hzo),e(S4,HV),e(HV,Uzo),e(S4,Jzo),e(V,Yzo),e(V,R4),e(R4,npe),e(npe,Kzo),e(R4,Zzo),e(R4,UV),e(UV,eWo),e(R4,oWo),e(V,rWo),e(V,P4),e(P4,spe),e(spe,tWo),e(P4,aWo),e(P4,JV),e(JV,nWo),e(P4,sWo),e(V,lWo),e(V,B4),e(B4,lpe),e(lpe,iWo),e(B4,dWo),e(B4,YV),e(YV,cWo),e(B4,fWo),e(V,mWo),e(V,I4),e(I4,ipe),e(ipe,gWo),e(I4,hWo),e(I4,KV),e(KV,pWo),e(I4,uWo),e(V,_Wo),e(V,q4),e(q4,dpe),e(dpe,bWo),e(q4,vWo),e(q4,ZV),e(ZV,FWo),e(q4,TWo),e(V,MWo),e(V,N4),e(N4,cpe),e(cpe,EWo),e(N4,CWo),e(N4,eX),e(eX,wWo),e(N4,AWo),e(V,yWo),e(V,j4),e(j4,fpe),e(fpe,LWo),e(j4,xWo),e(j4,oX),e(oX,$Wo),e(j4,kWo),e(V,SWo),e(V,D4),e(D4,mpe),e(mpe,RWo),e(D4,PWo),e(D4,rX),e(rX,BWo),e(D4,IWo),e(V,qWo),e(V,G4),e(G4,gpe),e(gpe,NWo),e(G4,jWo),e(G4,tX),e(tX,DWo),e(G4,GWo),e(V,OWo),e(V,O4),e(O4,hpe),e(hpe,VWo),e(O4,XWo),e(O4,aX),e(aX,zWo),e(O4,WWo),e(V,QWo),e(V,V4),e(V4,ppe),e(ppe,HWo),e(V4,UWo),e(V4,nX),e(nX,JWo),e(V4,YWo),e(V,KWo),e(V,X4),e(X4,upe),e(upe,ZWo),e(X4,eQo),e(X4,sX),e(sX,oQo),e(X4,rQo),e(V,tQo),e(V,z4),e(z4,_pe),e(_pe,aQo),e(z4,nQo),e(z4,lX),e(lX,sQo),e(z4,lQo),e(V,iQo),e(V,W4),e(W4,bpe),e(bpe,dQo),e(W4,cQo),e(W4,iX),e(iX,fQo),e(W4,mQo),e(V,gQo),e(V,Q4),e(Q4,vpe),e(vpe,hQo),e(Q4,pQo),e(Q4,dX),e(dX,uQo),e(Q4,_Qo),e(V,bQo),e(V,H4),e(H4,Fpe),e(Fpe,vQo),e(H4,FQo),e(H4,cX),e(cX,TQo),e(H4,MQo),e(V,EQo),e(V,U4),e(U4,Tpe),e(Tpe,CQo),e(U4,wQo),e(U4,fX),e(fX,AQo),e(U4,yQo),e(V,LQo),e(V,J4),e(J4,Mpe),e(Mpe,xQo),e(J4,$Qo),e(J4,mX),e(mX,kQo),e(J4,SQo),e(V,RQo),e(V,Y4),e(Y4,Epe),e(Epe,PQo),e(Y4,BQo),e(Y4,gX),e(gX,IQo),e(Y4,qQo),e(no,NQo),e(no,K4),e(K4,jQo),e(K4,Cpe),e(Cpe,DQo),e(K4,GQo),e(K4,wpe),e(wpe,OQo),e(no,VQo),M(Z4,no,null),b(f,kNe,_),b(f,od,_),e(od,ev),e(ev,Ape),M(UL,Ape,null),e(od,XQo),e(od,ype),e(ype,zQo),b(f,SNe,_),b(f,No,_),M(JL,No,null),e(No,WQo),e(No,rd),e(rd,QQo),e(rd,hX),e(hX,HQo),e(rd,UQo),e(rd,pX),e(pX,JQo),e(rd,YQo),e(No,KQo),e(No,YL),e(YL,ZQo),e(YL,Lpe),e(Lpe,eHo),e(YL,oHo),e(No,rHo),e(No,gt),M(KL,gt,null),e(gt,tHo),e(gt,xpe),e(xpe,aHo),e(gt,nHo),e(gt,td),e(td,sHo),e(td,$pe),e($pe,lHo),e(td,iHo),e(td,uX),e(uX,dHo),e(td,cHo),e(gt,fHo),M(ov,gt,null),e(No,mHo),e(No,so),M(ZL,so,null),e(so,gHo),e(so,kpe),e(kpe,hHo),e(so,pHo),e(so,Na),e(Na,uHo),e(Na,Spe),e(Spe,_Ho),e(Na,bHo),e(Na,Rpe),e(Rpe,vHo),e(Na,FHo),e(Na,Ppe),e(Ppe,THo),e(Na,MHo),e(so,EHo),e(so,Bpe),e(Bpe,rv),e(rv,Ipe),e(Ipe,CHo),e(rv,wHo),e(rv,_X),e(_X,AHo),e(rv,yHo),e(so,LHo),e(so,tv),e(tv,xHo),e(tv,qpe),e(qpe,$Ho),e(tv,kHo),e(tv,Npe),e(Npe,SHo),e(so,RHo),M(av,so,null),b(f,RNe,_),b(f,ad,_),e(ad,nv),e(nv,jpe),M(e8,jpe,null),e(ad,PHo),e(ad,Dpe),e(Dpe,BHo),b(f,PNe,_),b(f,jo,_),M(o8,jo,null),e(jo,IHo),e(jo,nd),e(nd,qHo),e(nd,bX),e(bX,NHo),e(nd,jHo),e(nd,vX),e(vX,DHo),e(nd,GHo),e(jo,OHo),e(jo,r8),e(r8,VHo),e(r8,Gpe),e(Gpe,XHo),e(r8,zHo),e(jo,WHo),e(jo,ht),M(t8,ht,null),e(ht,QHo),e(ht,Ope),e(Ope,HHo),e(ht,UHo),e(ht,sd),e(sd,JHo),e(sd,Vpe),e(Vpe,YHo),e(sd,KHo),e(sd,FX),e(FX,ZHo),e(sd,eUo),e(ht,oUo),M(sv,ht,null),e(jo,rUo),e(jo,lo),M(a8,lo,null),e(lo,tUo),e(lo,Xpe),e(Xpe,aUo),e(lo,nUo),e(lo,ja),e(ja,sUo),e(ja,zpe),e(zpe,lUo),e(ja,iUo),e(ja,Wpe),e(Wpe,dUo),e(ja,cUo),e(ja,Qpe),e(Qpe,fUo),e(ja,mUo),e(lo,gUo),e(lo,Fe),e(Fe,lv),e(lv,Hpe),e(Hpe,hUo),e(lv,pUo),e(lv,TX),e(TX,uUo),e(lv,_Uo),e(Fe,bUo),e(Fe,iv),e(iv,Upe),e(Upe,vUo),e(iv,FUo),e(iv,MX),e(MX,TUo),e(iv,MUo),e(Fe,EUo),e(Fe,dv),e(dv,Jpe),e(Jpe,CUo),e(dv,wUo),e(dv,EX),e(EX,AUo),e(dv,yUo),e(Fe,LUo),e(Fe,cv),e(cv,Ype),e(Ype,xUo),e(cv,$Uo),e(cv,CX),e(CX,kUo),e(cv,SUo),e(Fe,RUo),e(Fe,Bs),e(Bs,Kpe),e(Kpe,PUo),e(Bs,BUo),e(Bs,wX),e(wX,IUo),e(Bs,qUo),e(Bs,AX),e(AX,NUo),e(Bs,jUo),e(Fe,DUo),e(Fe,fv),e(fv,Zpe),e(Zpe,GUo),e(fv,OUo),e(fv,yX),e(yX,VUo),e(fv,XUo),e(Fe,zUo),e(Fe,pt),e(pt,eue),e(eue,WUo),e(pt,QUo),e(pt,LX),e(LX,HUo),e(pt,UUo),e(pt,xX),e(xX,JUo),e(pt,YUo),e(pt,$X),e($X,KUo),e(pt,ZUo),e(Fe,eJo),e(Fe,mv),e(mv,oue),e(oue,oJo),e(mv,rJo),e(mv,kX),e(kX,tJo),e(mv,aJo),e(Fe,nJo),e(Fe,gv),e(gv,rue),e(rue,sJo),e(gv,lJo),e(gv,SX),e(SX,iJo),e(gv,dJo),e(Fe,cJo),e(Fe,hv),e(hv,tue),e(tue,fJo),e(hv,mJo),e(hv,RX),e(RX,gJo),e(hv,hJo),e(Fe,pJo),e(Fe,pv),e(pv,aue),e(aue,uJo),e(pv,_Jo),e(pv,PX),e(PX,bJo),e(pv,vJo),e(Fe,FJo),e(Fe,uv),e(uv,nue),e(nue,TJo),e(uv,MJo),e(uv,BX),e(BX,EJo),e(uv,CJo),e(Fe,wJo),e(Fe,_v),e(_v,sue),e(sue,AJo),e(_v,yJo),e(_v,IX),e(IX,LJo),e(_v,xJo),e(Fe,$Jo),e(Fe,bv),e(bv,lue),e(lue,kJo),e(bv,SJo),e(bv,qX),e(qX,RJo),e(bv,PJo),e(lo,BJo),e(lo,vv),e(vv,IJo),e(vv,iue),e(iue,qJo),e(vv,NJo),e(vv,due),e(due,jJo),e(lo,DJo),M(Fv,lo,null),b(f,BNe,_),b(f,ld,_),e(ld,Tv),e(Tv,cue),M(n8,cue,null),e(ld,GJo),e(ld,fue),e(fue,OJo),b(f,INe,_),b(f,Do,_),M(s8,Do,null),e(Do,VJo),e(Do,id),e(id,XJo),e(id,NX),e(NX,zJo),e(id,WJo),e(id,jX),e(jX,QJo),e(id,HJo),e(Do,UJo),e(Do,l8),e(l8,JJo),e(l8,mue),e(mue,YJo),e(l8,KJo),e(Do,ZJo),e(Do,ut),M(i8,ut,null),e(ut,eYo),e(ut,gue),e(gue,oYo),e(ut,rYo),e(ut,dd),e(dd,tYo),e(dd,hue),e(hue,aYo),e(dd,nYo),e(dd,DX),e(DX,sYo),e(dd,lYo),e(ut,iYo),M(Mv,ut,null),e(Do,dYo),e(Do,io),M(d8,io,null),e(io,cYo),e(io,pue),e(pue,fYo),e(io,mYo),e(io,Da),e(Da,gYo),e(Da,uue),e(uue,hYo),e(Da,pYo),e(Da,_ue),e(_ue,uYo),e(Da,_Yo),e(Da,bue),e(bue,bYo),e(Da,vYo),e(io,FYo),e(io,vue),e(vue,Ev),e(Ev,Fue),e(Fue,TYo),e(Ev,MYo),e(Ev,GX),e(GX,EYo),e(Ev,CYo),e(io,wYo),e(io,Cv),e(Cv,AYo),e(Cv,Tue),e(Tue,yYo),e(Cv,LYo),e(Cv,Mue),e(Mue,xYo),e(io,$Yo),M(wv,io,null),b(f,qNe,_),b(f,cd,_),e(cd,Av),e(Av,Eue),M(c8,Eue,null),e(cd,kYo),e(cd,Cue),e(Cue,SYo),b(f,NNe,_),b(f,Go,_),M(f8,Go,null),e(Go,RYo),e(Go,fd),e(fd,PYo),e(fd,OX),e(OX,BYo),e(fd,IYo),e(fd,VX),e(VX,qYo),e(fd,NYo),e(Go,jYo),e(Go,m8),e(m8,DYo),e(m8,wue),e(wue,GYo),e(m8,OYo),e(Go,VYo),e(Go,_t),M(g8,_t,null),e(_t,XYo),e(_t,Aue),e(Aue,zYo),e(_t,WYo),e(_t,md),e(md,QYo),e(md,yue),e(yue,HYo),e(md,UYo),e(md,XX),e(XX,JYo),e(md,YYo),e(_t,KYo),M(yv,_t,null),e(Go,ZYo),e(Go,co),M(h8,co,null),e(co,eKo),e(co,Lue),e(Lue,oKo),e(co,rKo),e(co,Ga),e(Ga,tKo),e(Ga,xue),e(xue,aKo),e(Ga,nKo),e(Ga,$ue),e($ue,sKo),e(Ga,lKo),e(Ga,kue),e(kue,iKo),e(Ga,dKo),e(co,cKo),e(co,ke),e(ke,Lv),e(Lv,Sue),e(Sue,fKo),e(Lv,mKo),e(Lv,zX),e(zX,gKo),e(Lv,hKo),e(ke,pKo),e(ke,xv),e(xv,Rue),e(Rue,uKo),e(xv,_Ko),e(xv,WX),e(WX,bKo),e(xv,vKo),e(ke,FKo),e(ke,$v),e($v,Pue),e(Pue,TKo),e($v,MKo),e($v,QX),e(QX,EKo),e($v,CKo),e(ke,wKo),e(ke,kv),e(kv,Bue),e(Bue,AKo),e(kv,yKo),e(kv,HX),e(HX,LKo),e(kv,xKo),e(ke,$Ko),e(ke,Sv),e(Sv,Iue),e(Iue,kKo),e(Sv,SKo),e(Sv,UX),e(UX,RKo),e(Sv,PKo),e(ke,BKo),e(ke,Rv),e(Rv,que),e(que,IKo),e(Rv,qKo),e(Rv,JX),e(JX,NKo),e(Rv,jKo),e(ke,DKo),e(ke,Pv),e(Pv,Nue),e(Nue,GKo),e(Pv,OKo),e(Pv,YX),e(YX,VKo),e(Pv,XKo),e(ke,zKo),e(ke,Bv),e(Bv,jue),e(jue,WKo),e(Bv,QKo),e(Bv,KX),e(KX,HKo),e(Bv,UKo),e(ke,JKo),e(ke,Iv),e(Iv,Due),e(Due,YKo),e(Iv,KKo),e(Iv,ZX),e(ZX,ZKo),e(Iv,eZo),e(co,oZo),e(co,qv),e(qv,rZo),e(qv,Gue),e(Gue,tZo),e(qv,aZo),e(qv,Oue),e(Oue,nZo),e(co,sZo),M(Nv,co,null),b(f,jNe,_),b(f,gd,_),e(gd,jv),e(jv,Vue),M(p8,Vue,null),e(gd,lZo),e(gd,Xue),e(Xue,iZo),b(f,DNe,_),b(f,Oo,_),M(u8,Oo,null),e(Oo,dZo),e(Oo,hd),e(hd,cZo),e(hd,ez),e(ez,fZo),e(hd,mZo),e(hd,oz),e(oz,gZo),e(hd,hZo),e(Oo,pZo),e(Oo,_8),e(_8,uZo),e(_8,zue),e(zue,_Zo),e(_8,bZo),e(Oo,vZo),e(Oo,bt),M(b8,bt,null),e(bt,FZo),e(bt,Wue),e(Wue,TZo),e(bt,MZo),e(bt,pd),e(pd,EZo),e(pd,Que),e(Que,CZo),e(pd,wZo),e(pd,rz),e(rz,AZo),e(pd,yZo),e(bt,LZo),M(Dv,bt,null),e(Oo,xZo),e(Oo,fo),M(v8,fo,null),e(fo,$Zo),e(fo,Hue),e(Hue,kZo),e(fo,SZo),e(fo,Oa),e(Oa,RZo),e(Oa,Uue),e(Uue,PZo),e(Oa,BZo),e(Oa,Jue),e(Jue,IZo),e(Oa,qZo),e(Oa,Yue),e(Yue,NZo),e(Oa,jZo),e(fo,DZo),e(fo,Kr),e(Kr,Gv),e(Gv,Kue),e(Kue,GZo),e(Gv,OZo),e(Gv,tz),e(tz,VZo),e(Gv,XZo),e(Kr,zZo),e(Kr,Ov),e(Ov,Zue),e(Zue,WZo),e(Ov,QZo),e(Ov,az),e(az,HZo),e(Ov,UZo),e(Kr,JZo),e(Kr,Vv),e(Vv,e_e),e(e_e,YZo),e(Vv,KZo),e(Vv,nz),e(nz,ZZo),e(Vv,eer),e(Kr,oer),e(Kr,Xv),e(Xv,o_e),e(o_e,rer),e(Xv,ter),e(Xv,sz),e(sz,aer),e(Xv,ner),e(Kr,ser),e(Kr,zv),e(zv,r_e),e(r_e,ler),e(zv,ier),e(zv,lz),e(lz,der),e(zv,cer),e(fo,fer),e(fo,Wv),e(Wv,mer),e(Wv,t_e),e(t_e,ger),e(Wv,her),e(Wv,a_e),e(a_e,per),e(fo,uer),M(Qv,fo,null),b(f,GNe,_),b(f,ud,_),e(ud,Hv),e(Hv,n_e),M(F8,n_e,null),e(ud,_er),e(ud,s_e),e(s_e,ber),b(f,ONe,_),b(f,Vo,_),M(T8,Vo,null),e(Vo,ver),e(Vo,_d),e(_d,Fer),e(_d,iz),e(iz,Ter),e(_d,Mer),e(_d,dz),e(dz,Eer),e(_d,Cer),e(Vo,wer),e(Vo,M8),e(M8,Aer),e(M8,l_e),e(l_e,yer),e(M8,Ler),e(Vo,xer),e(Vo,vt),M(E8,vt,null),e(vt,$er),e(vt,i_e),e(i_e,ker),e(vt,Ser),e(vt,bd),e(bd,Rer),e(bd,d_e),e(d_e,Per),e(bd,Ber),e(bd,cz),e(cz,Ier),e(bd,qer),e(vt,Ner),M(Uv,vt,null),e(Vo,jer),e(Vo,mo),M(C8,mo,null),e(mo,Der),e(mo,c_e),e(c_e,Ger),e(mo,Oer),e(mo,Va),e(Va,Ver),e(Va,f_e),e(f_e,Xer),e(Va,zer),e(Va,m_e),e(m_e,Wer),e(Va,Qer),e(Va,g_e),e(g_e,Her),e(Va,Uer),e(mo,Jer),e(mo,Se),e(Se,Jv),e(Jv,h_e),e(h_e,Yer),e(Jv,Ker),e(Jv,fz),e(fz,Zer),e(Jv,eor),e(Se,oor),e(Se,Yv),e(Yv,p_e),e(p_e,ror),e(Yv,tor),e(Yv,mz),e(mz,aor),e(Yv,nor),e(Se,sor),e(Se,Kv),e(Kv,u_e),e(u_e,lor),e(Kv,ior),e(Kv,gz),e(gz,dor),e(Kv,cor),e(Se,mor),e(Se,Zv),e(Zv,__e),e(__e,gor),e(Zv,hor),e(Zv,hz),e(hz,por),e(Zv,uor),e(Se,_or),e(Se,eF),e(eF,b_e),e(b_e,bor),e(eF,vor),e(eF,pz),e(pz,For),e(eF,Tor),e(Se,Mor),e(Se,oF),e(oF,v_e),e(v_e,Eor),e(oF,Cor),e(oF,uz),e(uz,wor),e(oF,Aor),e(Se,yor),e(Se,rF),e(rF,F_e),e(F_e,Lor),e(rF,xor),e(rF,_z),e(_z,$or),e(rF,kor),e(Se,Sor),e(Se,tF),e(tF,T_e),e(T_e,Ror),e(tF,Por),e(tF,bz),e(bz,Bor),e(tF,Ior),e(Se,qor),e(Se,aF),e(aF,M_e),e(M_e,Nor),e(aF,jor),e(aF,vz),e(vz,Dor),e(aF,Gor),e(mo,Oor),e(mo,nF),e(nF,Vor),e(nF,E_e),e(E_e,Xor),e(nF,zor),e(nF,C_e),e(C_e,Wor),e(mo,Qor),M(sF,mo,null),b(f,VNe,_),b(f,vd,_),e(vd,lF),e(lF,w_e),M(w8,w_e,null),e(vd,Hor),e(vd,A_e),e(A_e,Uor),b(f,XNe,_),b(f,Xo,_),M(A8,Xo,null),e(Xo,Jor),e(Xo,Fd),e(Fd,Yor),e(Fd,Fz),e(Fz,Kor),e(Fd,Zor),e(Fd,Tz),e(Tz,err),e(Fd,orr),e(Xo,rrr),e(Xo,y8),e(y8,trr),e(y8,y_e),e(y_e,arr),e(y8,nrr),e(Xo,srr),e(Xo,Ft),M(L8,Ft,null),e(Ft,lrr),e(Ft,L_e),e(L_e,irr),e(Ft,drr),e(Ft,Td),e(Td,crr),e(Td,x_e),e(x_e,frr),e(Td,mrr),e(Td,Mz),e(Mz,grr),e(Td,hrr),e(Ft,prr),M(iF,Ft,null),e(Xo,urr),e(Xo,go),M(x8,go,null),e(go,_rr),e(go,$_e),e($_e,brr),e(go,vrr),e(go,Xa),e(Xa,Frr),e(Xa,k_e),e(k_e,Trr),e(Xa,Mrr),e(Xa,S_e),e(S_e,Err),e(Xa,Crr),e(Xa,R_e),e(R_e,wrr),e(Xa,Arr),e(go,yrr),e(go,$8),e($8,dF),e(dF,P_e),e(P_e,Lrr),e(dF,xrr),e(dF,Ez),e(Ez,$rr),e(dF,krr),e($8,Srr),e($8,cF),e(cF,B_e),e(B_e,Rrr),e(cF,Prr),e(cF,Cz),e(Cz,Brr),e(cF,Irr),e(go,qrr),e(go,fF),e(fF,Nrr),e(fF,I_e),e(I_e,jrr),e(fF,Drr),e(fF,q_e),e(q_e,Grr),e(go,Orr),M(mF,go,null),b(f,zNe,_),b(f,Md,_),e(Md,gF),e(gF,N_e),M(k8,N_e,null),e(Md,Vrr),e(Md,j_e),e(j_e,Xrr),b(f,WNe,_),b(f,zo,_),M(S8,zo,null),e(zo,zrr),e(zo,Ed),e(Ed,Wrr),e(Ed,wz),e(wz,Qrr),e(Ed,Hrr),e(Ed,Az),e(Az,Urr),e(Ed,Jrr),e(zo,Yrr),e(zo,R8),e(R8,Krr),e(R8,D_e),e(D_e,Zrr),e(R8,etr),e(zo,otr),e(zo,Tt),M(P8,Tt,null),e(Tt,rtr),e(Tt,G_e),e(G_e,ttr),e(Tt,atr),e(Tt,Cd),e(Cd,ntr),e(Cd,O_e),e(O_e,str),e(Cd,ltr),e(Cd,yz),e(yz,itr),e(Cd,dtr),e(Tt,ctr),M(hF,Tt,null),e(zo,ftr),e(zo,ho),M(B8,ho,null),e(ho,mtr),e(ho,V_e),e(V_e,gtr),e(ho,htr),e(ho,za),e(za,ptr),e(za,X_e),e(X_e,utr),e(za,_tr),e(za,z_e),e(z_e,btr),e(za,vtr),e(za,W_e),e(W_e,Ftr),e(za,Ttr),e(ho,Mtr),e(ho,Zr),e(Zr,pF),e(pF,Q_e),e(Q_e,Etr),e(pF,Ctr),e(pF,Lz),e(Lz,wtr),e(pF,Atr),e(Zr,ytr),e(Zr,uF),e(uF,H_e),e(H_e,Ltr),e(uF,xtr),e(uF,xz),e(xz,$tr),e(uF,ktr),e(Zr,Str),e(Zr,_F),e(_F,U_e),e(U_e,Rtr),e(_F,Ptr),e(_F,$z),e($z,Btr),e(_F,Itr),e(Zr,qtr),e(Zr,bF),e(bF,J_e),e(J_e,Ntr),e(bF,jtr),e(bF,kz),e(kz,Dtr),e(bF,Gtr),e(Zr,Otr),e(Zr,vF),e(vF,Y_e),e(Y_e,Vtr),e(vF,Xtr),e(vF,Sz),e(Sz,ztr),e(vF,Wtr),e(ho,Qtr),e(ho,FF),e(FF,Htr),e(FF,K_e),e(K_e,Utr),e(FF,Jtr),e(FF,Z_e),e(Z_e,Ytr),e(ho,Ktr),M(TF,ho,null),b(f,QNe,_),b(f,wd,_),e(wd,MF),e(MF,e0e),M(I8,e0e,null),e(wd,Ztr),e(wd,o0e),e(o0e,ear),b(f,HNe,_),b(f,Wo,_),M(q8,Wo,null),e(Wo,oar),e(Wo,Ad),e(Ad,rar),e(Ad,Rz),e(Rz,tar),e(Ad,aar),e(Ad,Pz),e(Pz,nar),e(Ad,sar),e(Wo,lar),e(Wo,N8),e(N8,iar),e(N8,r0e),e(r0e,dar),e(N8,car),e(Wo,far),e(Wo,Mt),M(j8,Mt,null),e(Mt,mar),e(Mt,t0e),e(t0e,gar),e(Mt,har),e(Mt,yd),e(yd,par),e(yd,a0e),e(a0e,uar),e(yd,_ar),e(yd,Bz),e(Bz,bar),e(yd,Far),e(Mt,Tar),M(EF,Mt,null),e(Wo,Mar),e(Wo,po),M(D8,po,null),e(po,Ear),e(po,n0e),e(n0e,Car),e(po,war),e(po,Wa),e(Wa,Aar),e(Wa,s0e),e(s0e,yar),e(Wa,Lar),e(Wa,l0e),e(l0e,xar),e(Wa,$ar),e(Wa,i0e),e(i0e,kar),e(Wa,Sar),e(po,Rar),e(po,Ld),e(Ld,CF),e(CF,d0e),e(d0e,Par),e(CF,Bar),e(CF,Iz),e(Iz,Iar),e(CF,qar),e(Ld,Nar),e(Ld,wF),e(wF,c0e),e(c0e,jar),e(wF,Dar),e(wF,qz),e(qz,Gar),e(wF,Oar),e(Ld,Var),e(Ld,AF),e(AF,f0e),e(f0e,Xar),e(AF,zar),e(AF,Nz),e(Nz,War),e(AF,Qar),e(po,Har),e(po,yF),e(yF,Uar),e(yF,m0e),e(m0e,Jar),e(yF,Yar),e(yF,g0e),e(g0e,Kar),e(po,Zar),M(LF,po,null),b(f,UNe,_),b(f,xd,_),e(xd,xF),e(xF,h0e),M(G8,h0e,null),e(xd,enr),e(xd,p0e),e(p0e,onr),b(f,JNe,_),b(f,Qo,_),M(O8,Qo,null),e(Qo,rnr),e(Qo,$d),e($d,tnr),e($d,jz),e(jz,anr),e($d,nnr),e($d,Dz),e(Dz,snr),e($d,lnr),e(Qo,inr),e(Qo,V8),e(V8,dnr),e(V8,u0e),e(u0e,cnr),e(V8,fnr),e(Qo,mnr),e(Qo,Et),M(X8,Et,null),e(Et,gnr),e(Et,_0e),e(_0e,hnr),e(Et,pnr),e(Et,kd),e(kd,unr),e(kd,b0e),e(b0e,_nr),e(kd,bnr),e(kd,Gz),e(Gz,vnr),e(kd,Fnr),e(Et,Tnr),M($F,Et,null),e(Qo,Mnr),e(Qo,uo),M(z8,uo,null),e(uo,Enr),e(uo,v0e),e(v0e,Cnr),e(uo,wnr),e(uo,Qa),e(Qa,Anr),e(Qa,F0e),e(F0e,ynr),e(Qa,Lnr),e(Qa,T0e),e(T0e,xnr),e(Qa,$nr),e(Qa,M0e),e(M0e,knr),e(Qa,Snr),e(uo,Rnr),e(uo,W8),e(W8,kF),e(kF,E0e),e(E0e,Pnr),e(kF,Bnr),e(kF,Oz),e(Oz,Inr),e(kF,qnr),e(W8,Nnr),e(W8,SF),e(SF,C0e),e(C0e,jnr),e(SF,Dnr),e(SF,Vz),e(Vz,Gnr),e(SF,Onr),e(uo,Vnr),e(uo,RF),e(RF,Xnr),e(RF,w0e),e(w0e,znr),e(RF,Wnr),e(RF,A0e),e(A0e,Qnr),e(uo,Hnr),M(PF,uo,null),b(f,YNe,_),b(f,Sd,_),e(Sd,BF),e(BF,y0e),M(Q8,y0e,null),e(Sd,Unr),e(Sd,L0e),e(L0e,Jnr),b(f,KNe,_),b(f,Ho,_),M(H8,Ho,null),e(Ho,Ynr),e(Ho,Rd),e(Rd,Knr),e(Rd,Xz),e(Xz,Znr),e(Rd,esr),e(Rd,zz),e(zz,osr),e(Rd,rsr),e(Ho,tsr),e(Ho,U8),e(U8,asr),e(U8,x0e),e(x0e,nsr),e(U8,ssr),e(Ho,lsr),e(Ho,Ct),M(J8,Ct,null),e(Ct,isr),e(Ct,$0e),e($0e,dsr),e(Ct,csr),e(Ct,Pd),e(Pd,fsr),e(Pd,k0e),e(k0e,msr),e(Pd,gsr),e(Pd,Wz),e(Wz,hsr),e(Pd,psr),e(Ct,usr),M(IF,Ct,null),e(Ho,_sr),e(Ho,_o),M(Y8,_o,null),e(_o,bsr),e(_o,S0e),e(S0e,vsr),e(_o,Fsr),e(_o,Ha),e(Ha,Tsr),e(Ha,R0e),e(R0e,Msr),e(Ha,Esr),e(Ha,P0e),e(P0e,Csr),e(Ha,wsr),e(Ha,B0e),e(B0e,Asr),e(Ha,ysr),e(_o,Lsr),e(_o,I0e),e(I0e,qF),e(qF,q0e),e(q0e,xsr),e(qF,$sr),e(qF,Qz),e(Qz,ksr),e(qF,Ssr),e(_o,Rsr),e(_o,NF),e(NF,Psr),e(NF,N0e),e(N0e,Bsr),e(NF,Isr),e(NF,j0e),e(j0e,qsr),e(_o,Nsr),M(jF,_o,null),b(f,ZNe,_),b(f,Bd,_),e(Bd,DF),e(DF,D0e),M(K8,D0e,null),e(Bd,jsr),e(Bd,G0e),e(G0e,Dsr),b(f,eje,_),b(f,Uo,_),M(Z8,Uo,null),e(Uo,Gsr),e(Uo,Id),e(Id,Osr),e(Id,Hz),e(Hz,Vsr),e(Id,Xsr),e(Id,Uz),e(Uz,zsr),e(Id,Wsr),e(Uo,Qsr),e(Uo,e7),e(e7,Hsr),e(e7,O0e),e(O0e,Usr),e(e7,Jsr),e(Uo,Ysr),e(Uo,wt),M(o7,wt,null),e(wt,Ksr),e(wt,V0e),e(V0e,Zsr),e(wt,elr),e(wt,qd),e(qd,olr),e(qd,X0e),e(X0e,rlr),e(qd,tlr),e(qd,Jz),e(Jz,alr),e(qd,nlr),e(wt,slr),M(GF,wt,null),e(Uo,llr),e(Uo,bo),M(r7,bo,null),e(bo,ilr),e(bo,z0e),e(z0e,dlr),e(bo,clr),e(bo,Ua),e(Ua,flr),e(Ua,W0e),e(W0e,mlr),e(Ua,glr),e(Ua,Q0e),e(Q0e,hlr),e(Ua,plr),e(Ua,H0e),e(H0e,ulr),e(Ua,_lr),e(bo,blr),e(bo,Ja),e(Ja,OF),e(OF,U0e),e(U0e,vlr),e(OF,Flr),e(OF,Yz),e(Yz,Tlr),e(OF,Mlr),e(Ja,Elr),e(Ja,VF),e(VF,J0e),e(J0e,Clr),e(VF,wlr),e(VF,Kz),e(Kz,Alr),e(VF,ylr),e(Ja,Llr),e(Ja,XF),e(XF,Y0e),e(Y0e,xlr),e(XF,$lr),e(XF,Zz),e(Zz,klr),e(XF,Slr),e(Ja,Rlr),e(Ja,zF),e(zF,K0e),e(K0e,Plr),e(zF,Blr),e(zF,eW),e(eW,Ilr),e(zF,qlr),e(bo,Nlr),e(bo,WF),e(WF,jlr),e(WF,Z0e),e(Z0e,Dlr),e(WF,Glr),e(WF,e1e),e(e1e,Olr),e(bo,Vlr),M(QF,bo,null),b(f,oje,_),b(f,Nd,_),e(Nd,HF),e(HF,o1e),M(t7,o1e,null),e(Nd,Xlr),e(Nd,r1e),e(r1e,zlr),b(f,rje,_),b(f,Jo,_),M(a7,Jo,null),e(Jo,Wlr),e(Jo,jd),e(jd,Qlr),e(jd,oW),e(oW,Hlr),e(jd,Ulr),e(jd,rW),e(rW,Jlr),e(jd,Ylr),e(Jo,Klr),e(Jo,n7),e(n7,Zlr),e(n7,t1e),e(t1e,eir),e(n7,oir),e(Jo,rir),e(Jo,At),M(s7,At,null),e(At,tir),e(At,a1e),e(a1e,air),e(At,nir),e(At,Dd),e(Dd,sir),e(Dd,n1e),e(n1e,lir),e(Dd,iir),e(Dd,tW),e(tW,dir),e(Dd,cir),e(At,fir),M(UF,At,null),e(Jo,mir),e(Jo,vo),M(l7,vo,null),e(vo,gir),e(vo,s1e),e(s1e,hir),e(vo,pir),e(vo,Ya),e(Ya,uir),e(Ya,l1e),e(l1e,_ir),e(Ya,bir),e(Ya,i1e),e(i1e,vir),e(Ya,Fir),e(Ya,d1e),e(d1e,Tir),e(Ya,Mir),e(vo,Eir),e(vo,c1e),e(c1e,JF),e(JF,f1e),e(f1e,Cir),e(JF,wir),e(JF,aW),e(aW,Air),e(JF,yir),e(vo,Lir),e(vo,YF),e(YF,xir),e(YF,m1e),e(m1e,$ir),e(YF,kir),e(YF,g1e),e(g1e,Sir),e(vo,Rir),M(KF,vo,null),b(f,tje,_),b(f,Gd,_),e(Gd,ZF),e(ZF,h1e),M(i7,h1e,null),e(Gd,Pir),e(Gd,p1e),e(p1e,Bir),b(f,aje,_),b(f,Yo,_),M(d7,Yo,null),e(Yo,Iir),e(Yo,Od),e(Od,qir),e(Od,nW),e(nW,Nir),e(Od,jir),e(Od,sW),e(sW,Dir),e(Od,Gir),e(Yo,Oir),e(Yo,c7),e(c7,Vir),e(c7,u1e),e(u1e,Xir),e(c7,zir),e(Yo,Wir),e(Yo,yt),M(f7,yt,null),e(yt,Qir),e(yt,_1e),e(_1e,Hir),e(yt,Uir),e(yt,Vd),e(Vd,Jir),e(Vd,b1e),e(b1e,Yir),e(Vd,Kir),e(Vd,lW),e(lW,Zir),e(Vd,edr),e(yt,odr),M(e6,yt,null),e(Yo,rdr),e(Yo,wr),M(m7,wr,null),e(wr,tdr),e(wr,v1e),e(v1e,adr),e(wr,ndr),e(wr,Ka),e(Ka,sdr),e(Ka,F1e),e(F1e,ldr),e(Ka,idr),e(Ka,T1e),e(T1e,ddr),e(Ka,cdr),e(Ka,M1e),e(M1e,fdr),e(Ka,mdr),e(wr,gdr),e(wr,N),e(N,o6),e(o6,E1e),e(E1e,hdr),e(o6,pdr),e(o6,iW),e(iW,udr),e(o6,_dr),e(N,bdr),e(N,r6),e(r6,C1e),e(C1e,vdr),e(r6,Fdr),e(r6,dW),e(dW,Tdr),e(r6,Mdr),e(N,Edr),e(N,t6),e(t6,w1e),e(w1e,Cdr),e(t6,wdr),e(t6,cW),e(cW,Adr),e(t6,ydr),e(N,Ldr),e(N,a6),e(a6,A1e),e(A1e,xdr),e(a6,$dr),e(a6,fW),e(fW,kdr),e(a6,Sdr),e(N,Rdr),e(N,n6),e(n6,y1e),e(y1e,Pdr),e(n6,Bdr),e(n6,mW),e(mW,Idr),e(n6,qdr),e(N,Ndr),e(N,s6),e(s6,L1e),e(L1e,jdr),e(s6,Ddr),e(s6,gW),e(gW,Gdr),e(s6,Odr),e(N,Vdr),e(N,l6),e(l6,x1e),e(x1e,Xdr),e(l6,zdr),e(l6,hW),e(hW,Wdr),e(l6,Qdr),e(N,Hdr),e(N,i6),e(i6,$1e),e($1e,Udr),e(i6,Jdr),e(i6,pW),e(pW,Ydr),e(i6,Kdr),e(N,Zdr),e(N,d6),e(d6,k1e),e(k1e,ecr),e(d6,ocr),e(d6,uW),e(uW,rcr),e(d6,tcr),e(N,acr),e(N,c6),e(c6,S1e),e(S1e,ncr),e(c6,scr),e(c6,_W),e(_W,lcr),e(c6,icr),e(N,dcr),e(N,f6),e(f6,R1e),e(R1e,ccr),e(f6,fcr),e(f6,bW),e(bW,mcr),e(f6,gcr),e(N,hcr),e(N,m6),e(m6,P1e),e(P1e,pcr),e(m6,ucr),e(m6,vW),e(vW,_cr),e(m6,bcr),e(N,vcr),e(N,g6),e(g6,B1e),e(B1e,Fcr),e(g6,Tcr),e(g6,FW),e(FW,Mcr),e(g6,Ecr),e(N,Ccr),e(N,h6),e(h6,I1e),e(I1e,wcr),e(h6,Acr),e(h6,TW),e(TW,ycr),e(h6,Lcr),e(N,xcr),e(N,p6),e(p6,q1e),e(q1e,$cr),e(p6,kcr),e(p6,MW),e(MW,Scr),e(p6,Rcr),e(N,Pcr),e(N,u6),e(u6,N1e),e(N1e,Bcr),e(u6,Icr),e(u6,EW),e(EW,qcr),e(u6,Ncr),e(N,jcr),e(N,_6),e(_6,j1e),e(j1e,Dcr),e(_6,Gcr),e(_6,CW),e(CW,Ocr),e(_6,Vcr),e(N,Xcr),e(N,Is),e(Is,D1e),e(D1e,zcr),e(Is,Wcr),e(Is,wW),e(wW,Qcr),e(Is,Hcr),e(Is,AW),e(AW,Ucr),e(Is,Jcr),e(N,Ycr),e(N,b6),e(b6,G1e),e(G1e,Kcr),e(b6,Zcr),e(b6,yW),e(yW,efr),e(b6,ofr),e(N,rfr),e(N,v6),e(v6,O1e),e(O1e,tfr),e(v6,afr),e(v6,LW),e(LW,nfr),e(v6,sfr),e(N,lfr),e(N,F6),e(F6,V1e),e(V1e,ifr),e(F6,dfr),e(F6,xW),e(xW,cfr),e(F6,ffr),e(N,mfr),e(N,T6),e(T6,X1e),e(X1e,gfr),e(T6,hfr),e(T6,$W),e($W,pfr),e(T6,ufr),e(N,_fr),e(N,M6),e(M6,z1e),e(z1e,bfr),e(M6,vfr),e(M6,kW),e(kW,Ffr),e(M6,Tfr),e(N,Mfr),e(N,E6),e(E6,W1e),e(W1e,Efr),e(E6,Cfr),e(E6,SW),e(SW,wfr),e(E6,Afr),e(N,yfr),e(N,C6),e(C6,Q1e),e(Q1e,Lfr),e(C6,xfr),e(C6,RW),e(RW,$fr),e(C6,kfr),e(N,Sfr),e(N,w6),e(w6,H1e),e(H1e,Rfr),e(w6,Pfr),e(w6,PW),e(PW,Bfr),e(w6,Ifr),e(N,qfr),e(N,A6),e(A6,U1e),e(U1e,Nfr),e(A6,jfr),e(A6,BW),e(BW,Dfr),e(A6,Gfr),e(N,Ofr),e(N,y6),e(y6,J1e),e(J1e,Vfr),e(y6,Xfr),e(y6,IW),e(IW,zfr),e(y6,Wfr),e(N,Qfr),e(N,L6),e(L6,Y1e),e(Y1e,Hfr),e(L6,Ufr),e(L6,qW),e(qW,Jfr),e(L6,Yfr),e(N,Kfr),e(N,x6),e(x6,K1e),e(K1e,Zfr),e(x6,emr),e(x6,NW),e(NW,omr),e(x6,rmr),e(N,tmr),e(N,$6),e($6,Z1e),e(Z1e,amr),e($6,nmr),e($6,jW),e(jW,smr),e($6,lmr),e(N,imr),e(N,k6),e(k6,ebe),e(ebe,dmr),e(k6,cmr),e(k6,DW),e(DW,fmr),e(k6,mmr),e(N,gmr),e(N,S6),e(S6,obe),e(obe,hmr),e(S6,pmr),e(S6,GW),e(GW,umr),e(S6,_mr),e(N,bmr),e(N,R6),e(R6,rbe),e(rbe,vmr),e(R6,Fmr),e(R6,OW),e(OW,Tmr),e(R6,Mmr),e(N,Emr),e(N,P6),e(P6,tbe),e(tbe,Cmr),e(P6,wmr),e(P6,VW),e(VW,Amr),e(P6,ymr),e(N,Lmr),e(N,B6),e(B6,abe),e(abe,xmr),e(B6,$mr),e(B6,XW),e(XW,kmr),e(B6,Smr),e(N,Rmr),e(N,I6),e(I6,nbe),e(nbe,Pmr),e(I6,Bmr),e(I6,zW),e(zW,Imr),e(I6,qmr),e(N,Nmr),e(N,q6),e(q6,sbe),e(sbe,jmr),e(q6,Dmr),e(q6,WW),e(WW,Gmr),e(q6,Omr),e(N,Vmr),e(N,N6),e(N6,lbe),e(lbe,Xmr),e(N6,zmr),e(N6,QW),e(QW,Wmr),e(N6,Qmr),e(N,Hmr),e(N,j6),e(j6,ibe),e(ibe,Umr),e(j6,Jmr),e(j6,HW),e(HW,Ymr),e(j6,Kmr),e(N,Zmr),e(N,D6),e(D6,dbe),e(dbe,egr),e(D6,ogr),e(D6,UW),e(UW,rgr),e(D6,tgr),e(N,agr),e(N,G6),e(G6,cbe),e(cbe,ngr),e(G6,sgr),e(G6,JW),e(JW,lgr),e(G6,igr),e(N,dgr),e(N,O6),e(O6,fbe),e(fbe,cgr),e(O6,fgr),e(O6,YW),e(YW,mgr),e(O6,ggr),e(N,hgr),e(N,V6),e(V6,mbe),e(mbe,pgr),e(V6,ugr),e(V6,KW),e(KW,_gr),e(V6,bgr),e(N,vgr),e(N,X6),e(X6,gbe),e(gbe,Fgr),e(X6,Tgr),e(X6,ZW),e(ZW,Mgr),e(X6,Egr),e(N,Cgr),e(N,z6),e(z6,hbe),e(hbe,wgr),e(z6,Agr),e(z6,eQ),e(eQ,ygr),e(z6,Lgr),e(wr,xgr),M(W6,wr,null),b(f,nje,_),b(f,Xd,_),e(Xd,Q6),e(Q6,pbe),M(g7,pbe,null),e(Xd,$gr),e(Xd,ube),e(ube,kgr),b(f,sje,_),b(f,Ko,_),M(h7,Ko,null),e(Ko,Sgr),e(Ko,zd),e(zd,Rgr),e(zd,oQ),e(oQ,Pgr),e(zd,Bgr),e(zd,rQ),e(rQ,Igr),e(zd,qgr),e(Ko,Ngr),e(Ko,p7),e(p7,jgr),e(p7,_be),e(_be,Dgr),e(p7,Ggr),e(Ko,Ogr),e(Ko,Lt),M(u7,Lt,null),e(Lt,Vgr),e(Lt,bbe),e(bbe,Xgr),e(Lt,zgr),e(Lt,Wd),e(Wd,Wgr),e(Wd,vbe),e(vbe,Qgr),e(Wd,Hgr),e(Wd,tQ),e(tQ,Ugr),e(Wd,Jgr),e(Lt,Ygr),M(H6,Lt,null),e(Ko,Kgr),e(Ko,Ar),M(_7,Ar,null),e(Ar,Zgr),e(Ar,Fbe),e(Fbe,ehr),e(Ar,ohr),e(Ar,Za),e(Za,rhr),e(Za,Tbe),e(Tbe,thr),e(Za,ahr),e(Za,Mbe),e(Mbe,nhr),e(Za,shr),e(Za,Ebe),e(Ebe,lhr),e(Za,ihr),e(Ar,dhr),e(Ar,se),e(se,U6),e(U6,Cbe),e(Cbe,chr),e(U6,fhr),e(U6,aQ),e(aQ,mhr),e(U6,ghr),e(se,hhr),e(se,J6),e(J6,wbe),e(wbe,phr),e(J6,uhr),e(J6,nQ),e(nQ,_hr),e(J6,bhr),e(se,vhr),e(se,Y6),e(Y6,Abe),e(Abe,Fhr),e(Y6,Thr),e(Y6,sQ),e(sQ,Mhr),e(Y6,Ehr),e(se,Chr),e(se,K6),e(K6,ybe),e(ybe,whr),e(K6,Ahr),e(K6,lQ),e(lQ,yhr),e(K6,Lhr),e(se,xhr),e(se,Z6),e(Z6,Lbe),e(Lbe,$hr),e(Z6,khr),e(Z6,iQ),e(iQ,Shr),e(Z6,Rhr),e(se,Phr),e(se,eT),e(eT,xbe),e(xbe,Bhr),e(eT,Ihr),e(eT,dQ),e(dQ,qhr),e(eT,Nhr),e(se,jhr),e(se,oT),e(oT,$be),e($be,Dhr),e(oT,Ghr),e(oT,cQ),e(cQ,Ohr),e(oT,Vhr),e(se,Xhr),e(se,rT),e(rT,kbe),e(kbe,zhr),e(rT,Whr),e(rT,fQ),e(fQ,Qhr),e(rT,Hhr),e(se,Uhr),e(se,tT),e(tT,Sbe),e(Sbe,Jhr),e(tT,Yhr),e(tT,mQ),e(mQ,Khr),e(tT,Zhr),e(se,epr),e(se,aT),e(aT,Rbe),e(Rbe,opr),e(aT,rpr),e(aT,gQ),e(gQ,tpr),e(aT,apr),e(se,npr),e(se,nT),e(nT,Pbe),e(Pbe,spr),e(nT,lpr),e(nT,hQ),e(hQ,ipr),e(nT,dpr),e(se,cpr),e(se,sT),e(sT,Bbe),e(Bbe,fpr),e(sT,mpr),e(sT,pQ),e(pQ,gpr),e(sT,hpr),e(se,ppr),e(se,lT),e(lT,Ibe),e(Ibe,upr),e(lT,_pr),e(lT,uQ),e(uQ,bpr),e(lT,vpr),e(se,Fpr),e(se,iT),e(iT,qbe),e(qbe,Tpr),e(iT,Mpr),e(iT,_Q),e(_Q,Epr),e(iT,Cpr),e(se,wpr),e(se,dT),e(dT,Nbe),e(Nbe,Apr),e(dT,ypr),e(dT,bQ),e(bQ,Lpr),e(dT,xpr),e(se,$pr),e(se,cT),e(cT,jbe),e(jbe,kpr),e(cT,Spr),e(cT,vQ),e(vQ,Rpr),e(cT,Ppr),e(se,Bpr),e(se,fT),e(fT,Dbe),e(Dbe,Ipr),e(fT,qpr),e(fT,FQ),e(FQ,Npr),e(fT,jpr),e(se,Dpr),e(se,mT),e(mT,Gbe),e(Gbe,Gpr),e(mT,Opr),e(mT,TQ),e(TQ,Vpr),e(mT,Xpr),e(se,zpr),e(se,gT),e(gT,Obe),e(Obe,Wpr),e(gT,Qpr),e(gT,MQ),e(MQ,Hpr),e(gT,Upr),e(se,Jpr),e(se,hT),e(hT,Vbe),e(Vbe,Ypr),e(hT,Kpr),e(hT,EQ),e(EQ,Zpr),e(hT,eur),e(se,our),e(se,pT),e(pT,Xbe),e(Xbe,rur),e(pT,tur),e(pT,CQ),e(CQ,aur),e(pT,nur),e(se,sur),e(se,uT),e(uT,zbe),e(zbe,lur),e(uT,iur),e(uT,wQ),e(wQ,dur),e(uT,cur),e(se,fur),e(se,_T),e(_T,Wbe),e(Wbe,mur),e(_T,gur),e(_T,AQ),e(AQ,hur),e(_T,pur),e(Ar,uur),M(bT,Ar,null),b(f,lje,_),b(f,Qd,_),e(Qd,vT),e(vT,Qbe),M(b7,Qbe,null),e(Qd,_ur),e(Qd,Hbe),e(Hbe,bur),b(f,ije,_),b(f,Zo,_),M(v7,Zo,null),e(Zo,vur),e(Zo,Hd),e(Hd,Fur),e(Hd,yQ),e(yQ,Tur),e(Hd,Mur),e(Hd,LQ),e(LQ,Eur),e(Hd,Cur),e(Zo,wur),e(Zo,F7),e(F7,Aur),e(F7,Ube),e(Ube,yur),e(F7,Lur),e(Zo,xur),e(Zo,xt),M(T7,xt,null),e(xt,$ur),e(xt,Jbe),e(Jbe,kur),e(xt,Sur),e(xt,Ud),e(Ud,Rur),e(Ud,Ybe),e(Ybe,Pur),e(Ud,Bur),e(Ud,xQ),e(xQ,Iur),e(Ud,qur),e(xt,Nur),M(FT,xt,null),e(Zo,jur),e(Zo,yr),M(M7,yr,null),e(yr,Dur),e(yr,Kbe),e(Kbe,Gur),e(yr,Our),e(yr,en),e(en,Vur),e(en,Zbe),e(Zbe,Xur),e(en,zur),e(en,e2e),e(e2e,Wur),e(en,Qur),e(en,o2e),e(o2e,Hur),e(en,Uur),e(yr,Jur),e(yr,Me),e(Me,TT),e(TT,r2e),e(r2e,Yur),e(TT,Kur),e(TT,$Q),e($Q,Zur),e(TT,e_r),e(Me,o_r),e(Me,MT),e(MT,t2e),e(t2e,r_r),e(MT,t_r),e(MT,kQ),e(kQ,a_r),e(MT,n_r),e(Me,s_r),e(Me,ET),e(ET,a2e),e(a2e,l_r),e(ET,i_r),e(ET,SQ),e(SQ,d_r),e(ET,c_r),e(Me,f_r),e(Me,CT),e(CT,n2e),e(n2e,m_r),e(CT,g_r),e(CT,RQ),e(RQ,h_r),e(CT,p_r),e(Me,u_r),e(Me,wT),e(wT,s2e),e(s2e,__r),e(wT,b_r),e(wT,PQ),e(PQ,v_r),e(wT,F_r),e(Me,T_r),e(Me,AT),e(AT,l2e),e(l2e,M_r),e(AT,E_r),e(AT,BQ),e(BQ,C_r),e(AT,w_r),e(Me,A_r),e(Me,yT),e(yT,i2e),e(i2e,y_r),e(yT,L_r),e(yT,IQ),e(IQ,x_r),e(yT,$_r),e(Me,k_r),e(Me,LT),e(LT,d2e),e(d2e,S_r),e(LT,R_r),e(LT,qQ),e(qQ,P_r),e(LT,B_r),e(Me,I_r),e(Me,xT),e(xT,c2e),e(c2e,q_r),e(xT,N_r),e(xT,NQ),e(NQ,j_r),e(xT,D_r),e(Me,G_r),e(Me,$T),e($T,f2e),e(f2e,O_r),e($T,V_r),e($T,jQ),e(jQ,X_r),e($T,z_r),e(Me,W_r),e(Me,kT),e(kT,m2e),e(m2e,Q_r),e(kT,H_r),e(kT,DQ),e(DQ,U_r),e(kT,J_r),e(Me,Y_r),e(Me,ST),e(ST,g2e),e(g2e,K_r),e(ST,Z_r),e(ST,GQ),e(GQ,e0r),e(ST,o0r),e(yr,r0r),M(RT,yr,null),b(f,dje,_),b(f,Jd,_),e(Jd,PT),e(PT,h2e),M(E7,h2e,null),e(Jd,t0r),e(Jd,p2e),e(p2e,a0r),b(f,cje,_),b(f,er,_),M(C7,er,null),e(er,n0r),e(er,Yd),e(Yd,s0r),e(Yd,OQ),e(OQ,l0r),e(Yd,i0r),e(Yd,VQ),e(VQ,d0r),e(Yd,c0r),e(er,f0r),e(er,w7),e(w7,m0r),e(w7,u2e),e(u2e,g0r),e(w7,h0r),e(er,p0r),e(er,$t),M(A7,$t,null),e($t,u0r),e($t,_2e),e(_2e,_0r),e($t,b0r),e($t,Kd),e(Kd,v0r),e(Kd,b2e),e(b2e,F0r),e(Kd,T0r),e(Kd,XQ),e(XQ,M0r),e(Kd,E0r),e($t,C0r),M(BT,$t,null),e(er,w0r),e(er,Lr),M(y7,Lr,null),e(Lr,A0r),e(Lr,v2e),e(v2e,y0r),e(Lr,L0r),e(Lr,on),e(on,x0r),e(on,F2e),e(F2e,$0r),e(on,k0r),e(on,T2e),e(T2e,S0r),e(on,R0r),e(on,M2e),e(M2e,P0r),e(on,B0r),e(Lr,I0r),e(Lr,rn),e(rn,IT),e(IT,E2e),e(E2e,q0r),e(IT,N0r),e(IT,zQ),e(zQ,j0r),e(IT,D0r),e(rn,G0r),e(rn,qT),e(qT,C2e),e(C2e,O0r),e(qT,V0r),e(qT,WQ),e(WQ,X0r),e(qT,z0r),e(rn,W0r),e(rn,NT),e(NT,w2e),e(w2e,Q0r),e(NT,H0r),e(NT,QQ),e(QQ,U0r),e(NT,J0r),e(rn,Y0r),e(rn,jT),e(jT,A2e),e(A2e,K0r),e(jT,Z0r),e(jT,HQ),e(HQ,e1r),e(jT,o1r),e(Lr,r1r),M(DT,Lr,null),b(f,fje,_),b(f,Zd,_),e(Zd,GT),e(GT,y2e),M(L7,y2e,null),e(Zd,t1r),e(Zd,L2e),e(L2e,a1r),b(f,mje,_),b(f,or,_),M(x7,or,null),e(or,n1r),e(or,ec),e(ec,s1r),e(ec,UQ),e(UQ,l1r),e(ec,i1r),e(ec,JQ),e(JQ,d1r),e(ec,c1r),e(or,f1r),e(or,$7),e($7,m1r),e($7,x2e),e(x2e,g1r),e($7,h1r),e(or,p1r),e(or,kt),M(k7,kt,null),e(kt,u1r),e(kt,$2e),e($2e,_1r),e(kt,b1r),e(kt,oc),e(oc,v1r),e(oc,k2e),e(k2e,F1r),e(oc,T1r),e(oc,YQ),e(YQ,M1r),e(oc,E1r),e(kt,C1r),M(OT,kt,null),e(or,w1r),e(or,xr),M(S7,xr,null),e(xr,A1r),e(xr,S2e),e(S2e,y1r),e(xr,L1r),e(xr,tn),e(tn,x1r),e(tn,R2e),e(R2e,$1r),e(tn,k1r),e(tn,P2e),e(P2e,S1r),e(tn,R1r),e(tn,B2e),e(B2e,P1r),e(tn,B1r),e(xr,I1r),e(xr,ie),e(ie,VT),e(VT,I2e),e(I2e,q1r),e(VT,N1r),e(VT,KQ),e(KQ,j1r),e(VT,D1r),e(ie,G1r),e(ie,XT),e(XT,q2e),e(q2e,O1r),e(XT,V1r),e(XT,ZQ),e(ZQ,X1r),e(XT,z1r),e(ie,W1r),e(ie,zT),e(zT,N2e),e(N2e,Q1r),e(zT,H1r),e(zT,eH),e(eH,U1r),e(zT,J1r),e(ie,Y1r),e(ie,WT),e(WT,j2e),e(j2e,K1r),e(WT,Z1r),e(WT,oH),e(oH,ebr),e(WT,obr),e(ie,rbr),e(ie,QT),e(QT,D2e),e(D2e,tbr),e(QT,abr),e(QT,rH),e(rH,nbr),e(QT,sbr),e(ie,lbr),e(ie,HT),e(HT,G2e),e(G2e,ibr),e(HT,dbr),e(HT,tH),e(tH,cbr),e(HT,fbr),e(ie,mbr),e(ie,UT),e(UT,O2e),e(O2e,gbr),e(UT,hbr),e(UT,aH),e(aH,pbr),e(UT,ubr),e(ie,_br),e(ie,JT),e(JT,V2e),e(V2e,bbr),e(JT,vbr),e(JT,nH),e(nH,Fbr),e(JT,Tbr),e(ie,Mbr),e(ie,YT),e(YT,X2e),e(X2e,Ebr),e(YT,Cbr),e(YT,sH),e(sH,wbr),e(YT,Abr),e(ie,ybr),e(ie,KT),e(KT,z2e),e(z2e,Lbr),e(KT,xbr),e(KT,lH),e(lH,$br),e(KT,kbr),e(ie,Sbr),e(ie,ZT),e(ZT,W2e),e(W2e,Rbr),e(ZT,Pbr),e(ZT,iH),e(iH,Bbr),e(ZT,Ibr),e(ie,qbr),e(ie,eM),e(eM,Q2e),e(Q2e,Nbr),e(eM,jbr),e(eM,dH),e(dH,Dbr),e(eM,Gbr),e(ie,Obr),e(ie,oM),e(oM,H2e),e(H2e,Vbr),e(oM,Xbr),e(oM,cH),e(cH,zbr),e(oM,Wbr),e(ie,Qbr),e(ie,rM),e(rM,U2e),e(U2e,Hbr),e(rM,Ubr),e(rM,fH),e(fH,Jbr),e(rM,Ybr),e(ie,Kbr),e(ie,tM),e(tM,J2e),e(J2e,Zbr),e(tM,e2r),e(tM,mH),e(mH,o2r),e(tM,r2r),e(ie,t2r),e(ie,aM),e(aM,Y2e),e(Y2e,a2r),e(aM,n2r),e(aM,gH),e(gH,s2r),e(aM,l2r),e(ie,i2r),e(ie,nM),e(nM,K2e),e(K2e,d2r),e(nM,c2r),e(nM,hH),e(hH,f2r),e(nM,m2r),e(ie,g2r),e(ie,sM),e(sM,Z2e),e(Z2e,h2r),e(sM,p2r),e(sM,pH),e(pH,u2r),e(sM,_2r),e(ie,b2r),e(ie,lM),e(lM,e4e),e(e4e,v2r),e(lM,F2r),e(lM,uH),e(uH,T2r),e(lM,M2r),e(ie,E2r),e(ie,iM),e(iM,o4e),e(o4e,C2r),e(iM,w2r),e(iM,_H),e(_H,A2r),e(iM,y2r),e(xr,L2r),M(dM,xr,null),b(f,gje,_),b(f,rc,_),e(rc,cM),e(cM,r4e),M(R7,r4e,null),e(rc,x2r),e(rc,t4e),e(t4e,$2r),b(f,hje,_),b(f,rr,_),M(P7,rr,null),e(rr,k2r),e(rr,tc),e(tc,S2r),e(tc,bH),e(bH,R2r),e(tc,P2r),e(tc,vH),e(vH,B2r),e(tc,I2r),e(rr,q2r),e(rr,B7),e(B7,N2r),e(B7,a4e),e(a4e,j2r),e(B7,D2r),e(rr,G2r),e(rr,St),M(I7,St,null),e(St,O2r),e(St,n4e),e(n4e,V2r),e(St,X2r),e(St,ac),e(ac,z2r),e(ac,s4e),e(s4e,W2r),e(ac,Q2r),e(ac,FH),e(FH,H2r),e(ac,U2r),e(St,J2r),M(fM,St,null),e(rr,Y2r),e(rr,$r),M(q7,$r,null),e($r,K2r),e($r,l4e),e(l4e,Z2r),e($r,e4r),e($r,an),e(an,o4r),e(an,i4e),e(i4e,r4r),e(an,t4r),e(an,d4e),e(d4e,a4r),e(an,n4r),e(an,c4e),e(c4e,s4r),e(an,l4r),e($r,i4r),e($r,ye),e(ye,mM),e(mM,f4e),e(f4e,d4r),e(mM,c4r),e(mM,TH),e(TH,f4r),e(mM,m4r),e(ye,g4r),e(ye,gM),e(gM,m4e),e(m4e,h4r),e(gM,p4r),e(gM,MH),e(MH,u4r),e(gM,_4r),e(ye,b4r),e(ye,hM),e(hM,g4e),e(g4e,v4r),e(hM,F4r),e(hM,EH),e(EH,T4r),e(hM,M4r),e(ye,E4r),e(ye,pM),e(pM,h4e),e(h4e,C4r),e(pM,w4r),e(pM,CH),e(CH,A4r),e(pM,y4r),e(ye,L4r),e(ye,uM),e(uM,p4e),e(p4e,x4r),e(uM,$4r),e(uM,wH),e(wH,k4r),e(uM,S4r),e(ye,R4r),e(ye,_M),e(_M,u4e),e(u4e,P4r),e(_M,B4r),e(_M,AH),e(AH,I4r),e(_M,q4r),e(ye,N4r),e(ye,bM),e(bM,_4e),e(_4e,j4r),e(bM,D4r),e(bM,yH),e(yH,G4r),e(bM,O4r),e(ye,V4r),e(ye,vM),e(vM,b4e),e(b4e,X4r),e(vM,z4r),e(vM,LH),e(LH,W4r),e(vM,Q4r),e(ye,H4r),e(ye,FM),e(FM,v4e),e(v4e,U4r),e(FM,J4r),e(FM,xH),e(xH,Y4r),e(FM,K4r),e(ye,Z4r),e(ye,TM),e(TM,F4e),e(F4e,evr),e(TM,ovr),e(TM,$H),e($H,rvr),e(TM,tvr),e($r,avr),M(MM,$r,null),b(f,pje,_),b(f,nc,_),e(nc,EM),e(EM,T4e),M(N7,T4e,null),e(nc,nvr),e(nc,M4e),e(M4e,svr),b(f,uje,_),b(f,tr,_),M(j7,tr,null),e(tr,lvr),e(tr,sc),e(sc,ivr),e(sc,kH),e(kH,dvr),e(sc,cvr),e(sc,SH),e(SH,fvr),e(sc,mvr),e(tr,gvr),e(tr,D7),e(D7,hvr),e(D7,E4e),e(E4e,pvr),e(D7,uvr),e(tr,_vr),e(tr,Rt),M(G7,Rt,null),e(Rt,bvr),e(Rt,C4e),e(C4e,vvr),e(Rt,Fvr),e(Rt,lc),e(lc,Tvr),e(lc,w4e),e(w4e,Mvr),e(lc,Evr),e(lc,RH),e(RH,Cvr),e(lc,wvr),e(Rt,Avr),M(CM,Rt,null),e(tr,yvr),e(tr,kr),M(O7,kr,null),e(kr,Lvr),e(kr,A4e),e(A4e,xvr),e(kr,$vr),e(kr,nn),e(nn,kvr),e(nn,y4e),e(y4e,Svr),e(nn,Rvr),e(nn,L4e),e(L4e,Pvr),e(nn,Bvr),e(nn,x4e),e(x4e,Ivr),e(nn,qvr),e(kr,Nvr),e(kr,oe),e(oe,wM),e(wM,$4e),e($4e,jvr),e(wM,Dvr),e(wM,PH),e(PH,Gvr),e(wM,Ovr),e(oe,Vvr),e(oe,AM),e(AM,k4e),e(k4e,Xvr),e(AM,zvr),e(AM,BH),e(BH,Wvr),e(AM,Qvr),e(oe,Hvr),e(oe,yM),e(yM,S4e),e(S4e,Uvr),e(yM,Jvr),e(yM,IH),e(IH,Yvr),e(yM,Kvr),e(oe,Zvr),e(oe,LM),e(LM,R4e),e(R4e,eFr),e(LM,oFr),e(LM,qH),e(qH,rFr),e(LM,tFr),e(oe,aFr),e(oe,xM),e(xM,P4e),e(P4e,nFr),e(xM,sFr),e(xM,NH),e(NH,lFr),e(xM,iFr),e(oe,dFr),e(oe,$M),e($M,B4e),e(B4e,cFr),e($M,fFr),e($M,jH),e(jH,mFr),e($M,gFr),e(oe,hFr),e(oe,kM),e(kM,I4e),e(I4e,pFr),e(kM,uFr),e(kM,DH),e(DH,_Fr),e(kM,bFr),e(oe,vFr),e(oe,SM),e(SM,q4e),e(q4e,FFr),e(SM,TFr),e(SM,GH),e(GH,MFr),e(SM,EFr),e(oe,CFr),e(oe,RM),e(RM,N4e),e(N4e,wFr),e(RM,AFr),e(RM,OH),e(OH,yFr),e(RM,LFr),e(oe,xFr),e(oe,PM),e(PM,j4e),e(j4e,$Fr),e(PM,kFr),e(PM,VH),e(VH,SFr),e(PM,RFr),e(oe,PFr),e(oe,BM),e(BM,D4e),e(D4e,BFr),e(BM,IFr),e(BM,XH),e(XH,qFr),e(BM,NFr),e(oe,jFr),e(oe,IM),e(IM,G4e),e(G4e,DFr),e(IM,GFr),e(IM,zH),e(zH,OFr),e(IM,VFr),e(oe,XFr),e(oe,qM),e(qM,O4e),e(O4e,zFr),e(qM,WFr),e(qM,WH),e(WH,QFr),e(qM,HFr),e(oe,UFr),e(oe,NM),e(NM,V4e),e(V4e,JFr),e(NM,YFr),e(NM,QH),e(QH,KFr),e(NM,ZFr),e(oe,e6r),e(oe,jM),e(jM,X4e),e(X4e,o6r),e(jM,r6r),e(jM,HH),e(HH,t6r),e(jM,a6r),e(oe,n6r),e(oe,DM),e(DM,z4e),e(z4e,s6r),e(DM,l6r),e(DM,UH),e(UH,i6r),e(DM,d6r),e(oe,c6r),e(oe,GM),e(GM,W4e),e(W4e,f6r),e(GM,m6r),e(GM,JH),e(JH,g6r),e(GM,h6r),e(oe,p6r),e(oe,OM),e(OM,Q4e),e(Q4e,u6r),e(OM,_6r),e(OM,YH),e(YH,b6r),e(OM,v6r),e(oe,F6r),e(oe,VM),e(VM,H4e),e(H4e,T6r),e(VM,M6r),e(VM,KH),e(KH,E6r),e(VM,C6r),e(oe,w6r),e(oe,XM),e(XM,U4e),e(U4e,A6r),e(XM,y6r),e(XM,ZH),e(ZH,L6r),e(XM,x6r),e(oe,$6r),e(oe,zM),e(zM,J4e),e(J4e,k6r),e(zM,S6r),e(zM,eU),e(eU,R6r),e(zM,P6r),e(oe,B6r),e(oe,WM),e(WM,Y4e),e(Y4e,I6r),e(WM,q6r),e(WM,oU),e(oU,N6r),e(WM,j6r),e(oe,D6r),e(oe,QM),e(QM,K4e),e(K4e,G6r),e(QM,O6r),e(QM,rU),e(rU,V6r),e(QM,X6r),e(oe,z6r),e(oe,HM),e(HM,Z4e),e(Z4e,W6r),e(HM,Q6r),e(HM,tU),e(tU,H6r),e(HM,U6r),e(oe,J6r),e(oe,UM),e(UM,eve),e(eve,Y6r),e(UM,K6r),e(UM,aU),e(aU,Z6r),e(UM,eTr),e(oe,oTr),e(oe,JM),e(JM,ove),e(ove,rTr),e(JM,tTr),e(JM,nU),e(nU,aTr),e(JM,nTr),e(kr,sTr),M(YM,kr,null),b(f,_je,_),b(f,ic,_),e(ic,KM),e(KM,rve),M(V7,rve,null),e(ic,lTr),e(ic,tve),e(tve,iTr),b(f,bje,_),b(f,ar,_),M(X7,ar,null),e(ar,dTr),e(ar,dc),e(dc,cTr),e(dc,sU),e(sU,fTr),e(dc,mTr),e(dc,lU),e(lU,gTr),e(dc,hTr),e(ar,pTr),e(ar,z7),e(z7,uTr),e(z7,ave),e(ave,_Tr),e(z7,bTr),e(ar,vTr),e(ar,Pt),M(W7,Pt,null),e(Pt,FTr),e(Pt,nve),e(nve,TTr),e(Pt,MTr),e(Pt,cc),e(cc,ETr),e(cc,sve),e(sve,CTr),e(cc,wTr),e(cc,iU),e(iU,ATr),e(cc,yTr),e(Pt,LTr),M(ZM,Pt,null),e(ar,xTr),e(ar,Sr),M(Q7,Sr,null),e(Sr,$Tr),e(Sr,lve),e(lve,kTr),e(Sr,STr),e(Sr,sn),e(sn,RTr),e(sn,ive),e(ive,PTr),e(sn,BTr),e(sn,dve),e(dve,ITr),e(sn,qTr),e(sn,cve),e(cve,NTr),e(sn,jTr),e(Sr,DTr),e(Sr,pe),e(pe,eE),e(eE,fve),e(fve,GTr),e(eE,OTr),e(eE,dU),e(dU,VTr),e(eE,XTr),e(pe,zTr),e(pe,oE),e(oE,mve),e(mve,WTr),e(oE,QTr),e(oE,cU),e(cU,HTr),e(oE,UTr),e(pe,JTr),e(pe,rE),e(rE,gve),e(gve,YTr),e(rE,KTr),e(rE,fU),e(fU,ZTr),e(rE,eMr),e(pe,oMr),e(pe,tE),e(tE,hve),e(hve,rMr),e(tE,tMr),e(tE,mU),e(mU,aMr),e(tE,nMr),e(pe,sMr),e(pe,aE),e(aE,pve),e(pve,lMr),e(aE,iMr),e(aE,gU),e(gU,dMr),e(aE,cMr),e(pe,fMr),e(pe,nE),e(nE,uve),e(uve,mMr),e(nE,gMr),e(nE,hU),e(hU,hMr),e(nE,pMr),e(pe,uMr),e(pe,sE),e(sE,_ve),e(_ve,_Mr),e(sE,bMr),e(sE,pU),e(pU,vMr),e(sE,FMr),e(pe,TMr),e(pe,lE),e(lE,bve),e(bve,MMr),e(lE,EMr),e(lE,uU),e(uU,CMr),e(lE,wMr),e(pe,AMr),e(pe,iE),e(iE,vve),e(vve,yMr),e(iE,LMr),e(iE,_U),e(_U,xMr),e(iE,$Mr),e(pe,kMr),e(pe,dE),e(dE,Fve),e(Fve,SMr),e(dE,RMr),e(dE,bU),e(bU,PMr),e(dE,BMr),e(pe,IMr),e(pe,cE),e(cE,Tve),e(Tve,qMr),e(cE,NMr),e(cE,vU),e(vU,jMr),e(cE,DMr),e(pe,GMr),e(pe,fE),e(fE,Mve),e(Mve,OMr),e(fE,VMr),e(fE,FU),e(FU,XMr),e(fE,zMr),e(pe,WMr),e(pe,mE),e(mE,Eve),e(Eve,QMr),e(mE,HMr),e(mE,TU),e(TU,UMr),e(mE,JMr),e(pe,YMr),e(pe,gE),e(gE,Cve),e(Cve,KMr),e(gE,ZMr),e(gE,MU),e(MU,eEr),e(gE,oEr),e(pe,rEr),e(pe,hE),e(hE,wve),e(wve,tEr),e(hE,aEr),e(hE,EU),e(EU,nEr),e(hE,sEr),e(pe,lEr),e(pe,pE),e(pE,Ave),e(Ave,iEr),e(pE,dEr),e(pE,CU),e(CU,cEr),e(pE,fEr),e(pe,mEr),e(pe,uE),e(uE,yve),e(yve,gEr),e(uE,hEr),e(uE,wU),e(wU,pEr),e(uE,uEr),e(Sr,_Er),M(_E,Sr,null),b(f,vje,_),b(f,fc,_),e(fc,bE),e(bE,Lve),M(H7,Lve,null),e(fc,bEr),e(fc,xve),e(xve,vEr),b(f,Fje,_),b(f,nr,_),M(U7,nr,null),e(nr,FEr),e(nr,mc),e(mc,TEr),e(mc,AU),e(AU,MEr),e(mc,EEr),e(mc,yU),e(yU,CEr),e(mc,wEr),e(nr,AEr),e(nr,J7),e(J7,yEr),e(J7,$ve),e($ve,LEr),e(J7,xEr),e(nr,$Er),e(nr,Bt),M(Y7,Bt,null),e(Bt,kEr),e(Bt,kve),e(kve,SEr),e(Bt,REr),e(Bt,gc),e(gc,PEr),e(gc,Sve),e(Sve,BEr),e(gc,IEr),e(gc,LU),e(LU,qEr),e(gc,NEr),e(Bt,jEr),M(vE,Bt,null),e(nr,DEr),e(nr,Rr),M(K7,Rr,null),e(Rr,GEr),e(Rr,Rve),e(Rve,OEr),e(Rr,VEr),e(Rr,ln),e(ln,XEr),e(ln,Pve),e(Pve,zEr),e(ln,WEr),e(ln,Bve),e(Bve,QEr),e(ln,HEr),e(ln,Ive),e(Ive,UEr),e(ln,JEr),e(Rr,YEr),e(Rr,Z7),e(Z7,FE),e(FE,qve),e(qve,KEr),e(FE,ZEr),e(FE,xU),e(xU,eCr),e(FE,oCr),e(Z7,rCr),e(Z7,TE),e(TE,Nve),e(Nve,tCr),e(TE,aCr),e(TE,$U),e($U,nCr),e(TE,sCr),e(Rr,lCr),M(ME,Rr,null),b(f,Tje,_),b(f,hc,_),e(hc,EE),e(EE,jve),M(e9,jve,null),e(hc,iCr),e(hc,Dve),e(Dve,dCr),b(f,Mje,_),b(f,sr,_),M(o9,sr,null),e(sr,cCr),e(sr,pc),e(pc,fCr),e(pc,kU),e(kU,mCr),e(pc,gCr),e(pc,SU),e(SU,hCr),e(pc,pCr),e(sr,uCr),e(sr,r9),e(r9,_Cr),e(r9,Gve),e(Gve,bCr),e(r9,vCr),e(sr,FCr),e(sr,It),M(t9,It,null),e(It,TCr),e(It,Ove),e(Ove,MCr),e(It,ECr),e(It,uc),e(uc,CCr),e(uc,Vve),e(Vve,wCr),e(uc,ACr),e(uc,RU),e(RU,yCr),e(uc,LCr),e(It,xCr),M(CE,It,null),e(sr,$Cr),e(sr,Pr),M(a9,Pr,null),e(Pr,kCr),e(Pr,Xve),e(Xve,SCr),e(Pr,RCr),e(Pr,dn),e(dn,PCr),e(dn,zve),e(zve,BCr),e(dn,ICr),e(dn,Wve),e(Wve,qCr),e(dn,NCr),e(dn,Qve),e(Qve,jCr),e(dn,DCr),e(Pr,GCr),e(Pr,Hve),e(Hve,wE),e(wE,Uve),e(Uve,OCr),e(wE,VCr),e(wE,PU),e(PU,XCr),e(wE,zCr),e(Pr,WCr),M(AE,Pr,null),b(f,Eje,_),b(f,_c,_),e(_c,yE),e(yE,Jve),M(n9,Jve,null),e(_c,QCr),e(_c,Yve),e(Yve,HCr),b(f,Cje,_),b(f,lr,_),M(s9,lr,null),e(lr,UCr),e(lr,bc),e(bc,JCr),e(bc,BU),e(BU,YCr),e(bc,KCr),e(bc,IU),e(IU,ZCr),e(bc,e5r),e(lr,o5r),e(lr,l9),e(l9,r5r),e(l9,Kve),e(Kve,t5r),e(l9,a5r),e(lr,n5r),e(lr,qt),M(i9,qt,null),e(qt,s5r),e(qt,Zve),e(Zve,l5r),e(qt,i5r),e(qt,vc),e(vc,d5r),e(vc,eFe),e(eFe,c5r),e(vc,f5r),e(vc,qU),e(qU,m5r),e(vc,g5r),e(qt,h5r),M(LE,qt,null),e(lr,p5r),e(lr,Br),M(d9,Br,null),e(Br,u5r),e(Br,oFe),e(oFe,_5r),e(Br,b5r),e(Br,cn),e(cn,v5r),e(cn,rFe),e(rFe,F5r),e(cn,T5r),e(cn,tFe),e(tFe,M5r),e(cn,E5r),e(cn,aFe),e(aFe,C5r),e(cn,w5r),e(Br,A5r),e(Br,de),e(de,xE),e(xE,nFe),e(nFe,y5r),e(xE,L5r),e(xE,NU),e(NU,x5r),e(xE,$5r),e(de,k5r),e(de,$E),e($E,sFe),e(sFe,S5r),e($E,R5r),e($E,jU),e(jU,P5r),e($E,B5r),e(de,I5r),e(de,kE),e(kE,lFe),e(lFe,q5r),e(kE,N5r),e(kE,DU),e(DU,j5r),e(kE,D5r),e(de,G5r),e(de,SE),e(SE,iFe),e(iFe,O5r),e(SE,V5r),e(SE,GU),e(GU,X5r),e(SE,z5r),e(de,W5r),e(de,RE),e(RE,dFe),e(dFe,Q5r),e(RE,H5r),e(RE,OU),e(OU,U5r),e(RE,J5r),e(de,Y5r),e(de,PE),e(PE,cFe),e(cFe,K5r),e(PE,Z5r),e(PE,VU),e(VU,e3r),e(PE,o3r),e(de,r3r),e(de,BE),e(BE,fFe),e(fFe,t3r),e(BE,a3r),e(BE,XU),e(XU,n3r),e(BE,s3r),e(de,l3r),e(de,IE),e(IE,mFe),e(mFe,i3r),e(IE,d3r),e(IE,zU),e(zU,c3r),e(IE,f3r),e(de,m3r),e(de,qE),e(qE,gFe),e(gFe,g3r),e(qE,h3r),e(qE,WU),e(WU,p3r),e(qE,u3r),e(de,_3r),e(de,NE),e(NE,hFe),e(hFe,b3r),e(NE,v3r),e(NE,QU),e(QU,F3r),e(NE,T3r),e(de,M3r),e(de,jE),e(jE,pFe),e(pFe,E3r),e(jE,C3r),e(jE,HU),e(HU,w3r),e(jE,A3r),e(de,y3r),e(de,DE),e(DE,uFe),e(uFe,L3r),e(DE,x3r),e(DE,UU),e(UU,$3r),e(DE,k3r),e(de,S3r),e(de,GE),e(GE,_Fe),e(_Fe,R3r),e(GE,P3r),e(GE,JU),e(JU,B3r),e(GE,I3r),e(de,q3r),e(de,OE),e(OE,bFe),e(bFe,N3r),e(OE,j3r),e(OE,YU),e(YU,D3r),e(OE,G3r),e(de,O3r),e(de,VE),e(VE,vFe),e(vFe,V3r),e(VE,X3r),e(VE,KU),e(KU,z3r),e(VE,W3r),e(de,Q3r),e(de,XE),e(XE,FFe),e(FFe,H3r),e(XE,U3r),e(XE,ZU),e(ZU,J3r),e(XE,Y3r),e(de,K3r),e(de,zE),e(zE,TFe),e(TFe,Z3r),e(zE,ewr),e(zE,eJ),e(eJ,owr),e(zE,rwr),e(de,twr),e(de,WE),e(WE,MFe),e(MFe,awr),e(WE,nwr),e(WE,oJ),e(oJ,swr),e(WE,lwr),e(de,iwr),e(de,QE),e(QE,EFe),e(EFe,dwr),e(QE,cwr),e(QE,rJ),e(rJ,fwr),e(QE,mwr),e(de,gwr),e(de,HE),e(HE,CFe),e(CFe,hwr),e(HE,pwr),e(HE,tJ),e(tJ,uwr),e(HE,_wr),e(Br,bwr),M(UE,Br,null),b(f,wje,_),b(f,Fc,_),e(Fc,JE),e(JE,wFe),M(c9,wFe,null),e(Fc,vwr),e(Fc,AFe),e(AFe,Fwr),b(f,Aje,_),b(f,ir,_),M(f9,ir,null),e(ir,Twr),e(ir,Tc),e(Tc,Mwr),e(Tc,aJ),e(aJ,Ewr),e(Tc,Cwr),e(Tc,nJ),e(nJ,wwr),e(Tc,Awr),e(ir,ywr),e(ir,m9),e(m9,Lwr),e(m9,yFe),e(yFe,xwr),e(m9,$wr),e(ir,kwr),e(ir,Nt),M(g9,Nt,null),e(Nt,Swr),e(Nt,LFe),e(LFe,Rwr),e(Nt,Pwr),e(Nt,Mc),e(Mc,Bwr),e(Mc,xFe),e(xFe,Iwr),e(Mc,qwr),e(Mc,sJ),e(sJ,Nwr),e(Mc,jwr),e(Nt,Dwr),M(YE,Nt,null),e(ir,Gwr),e(ir,Ir),M(h9,Ir,null),e(Ir,Owr),e(Ir,$Fe),e($Fe,Vwr),e(Ir,Xwr),e(Ir,fn),e(fn,zwr),e(fn,kFe),e(kFe,Wwr),e(fn,Qwr),e(fn,SFe),e(SFe,Hwr),e(fn,Uwr),e(fn,RFe),e(RFe,Jwr),e(fn,Ywr),e(Ir,Kwr),e(Ir,ce),e(ce,KE),e(KE,PFe),e(PFe,Zwr),e(KE,eAr),e(KE,lJ),e(lJ,oAr),e(KE,rAr),e(ce,tAr),e(ce,ZE),e(ZE,BFe),e(BFe,aAr),e(ZE,nAr),e(ZE,iJ),e(iJ,sAr),e(ZE,lAr),e(ce,iAr),e(ce,eC),e(eC,IFe),e(IFe,dAr),e(eC,cAr),e(eC,dJ),e(dJ,fAr),e(eC,mAr),e(ce,gAr),e(ce,oC),e(oC,qFe),e(qFe,hAr),e(oC,pAr),e(oC,cJ),e(cJ,uAr),e(oC,_Ar),e(ce,bAr),e(ce,rC),e(rC,NFe),e(NFe,vAr),e(rC,FAr),e(rC,fJ),e(fJ,TAr),e(rC,MAr),e(ce,EAr),e(ce,tC),e(tC,jFe),e(jFe,CAr),e(tC,wAr),e(tC,mJ),e(mJ,AAr),e(tC,yAr),e(ce,LAr),e(ce,aC),e(aC,DFe),e(DFe,xAr),e(aC,$Ar),e(aC,gJ),e(gJ,kAr),e(aC,SAr),e(ce,RAr),e(ce,nC),e(nC,GFe),e(GFe,PAr),e(nC,BAr),e(nC,hJ),e(hJ,IAr),e(nC,qAr),e(ce,NAr),e(ce,sC),e(sC,OFe),e(OFe,jAr),e(sC,DAr),e(sC,pJ),e(pJ,GAr),e(sC,OAr),e(ce,VAr),e(ce,lC),e(lC,VFe),e(VFe,XAr),e(lC,zAr),e(lC,uJ),e(uJ,WAr),e(lC,QAr),e(ce,HAr),e(ce,iC),e(iC,XFe),e(XFe,UAr),e(iC,JAr),e(iC,_J),e(_J,YAr),e(iC,KAr),e(ce,ZAr),e(ce,dC),e(dC,zFe),e(zFe,eyr),e(dC,oyr),e(dC,bJ),e(bJ,ryr),e(dC,tyr),e(ce,ayr),e(ce,cC),e(cC,WFe),e(WFe,nyr),e(cC,syr),e(cC,vJ),e(vJ,lyr),e(cC,iyr),e(ce,dyr),e(ce,fC),e(fC,QFe),e(QFe,cyr),e(fC,fyr),e(fC,FJ),e(FJ,myr),e(fC,gyr),e(ce,hyr),e(ce,mC),e(mC,HFe),e(HFe,pyr),e(mC,uyr),e(mC,TJ),e(TJ,_yr),e(mC,byr),e(ce,vyr),e(ce,gC),e(gC,UFe),e(UFe,Fyr),e(gC,Tyr),e(gC,MJ),e(MJ,Myr),e(gC,Eyr),e(ce,Cyr),e(ce,hC),e(hC,JFe),e(JFe,wyr),e(hC,Ayr),e(hC,EJ),e(EJ,yyr),e(hC,Lyr),e(ce,xyr),e(ce,pC),e(pC,YFe),e(YFe,$yr),e(pC,kyr),e(pC,CJ),e(CJ,Syr),e(pC,Ryr),e(ce,Pyr),e(ce,uC),e(uC,KFe),e(KFe,Byr),e(uC,Iyr),e(uC,wJ),e(wJ,qyr),e(uC,Nyr),e(ce,jyr),e(ce,_C),e(_C,ZFe),e(ZFe,Dyr),e(_C,Gyr),e(_C,AJ),e(AJ,Oyr),e(_C,Vyr),e(Ir,Xyr),M(bC,Ir,null),b(f,yje,_),b(f,Ec,_),e(Ec,vC),e(vC,e6e),M(p9,e6e,null),e(Ec,zyr),e(Ec,o6e),e(o6e,Wyr),b(f,Lje,_),b(f,dr,_),M(u9,dr,null),e(dr,Qyr),e(dr,Cc),e(Cc,Hyr),e(Cc,yJ),e(yJ,Uyr),e(Cc,Jyr),e(Cc,LJ),e(LJ,Yyr),e(Cc,Kyr),e(dr,Zyr),e(dr,_9),e(_9,eLr),e(_9,r6e),e(r6e,oLr),e(_9,rLr),e(dr,tLr),e(dr,jt),M(b9,jt,null),e(jt,aLr),e(jt,t6e),e(t6e,nLr),e(jt,sLr),e(jt,wc),e(wc,lLr),e(wc,a6e),e(a6e,iLr),e(wc,dLr),e(wc,xJ),e(xJ,cLr),e(wc,fLr),e(jt,mLr),M(FC,jt,null),e(dr,gLr),e(dr,qr),M(v9,qr,null),e(qr,hLr),e(qr,n6e),e(n6e,pLr),e(qr,uLr),e(qr,mn),e(mn,_Lr),e(mn,s6e),e(s6e,bLr),e(mn,vLr),e(mn,l6e),e(l6e,FLr),e(mn,TLr),e(mn,i6e),e(i6e,MLr),e(mn,ELr),e(qr,CLr),e(qr,d6e),e(d6e,TC),e(TC,c6e),e(c6e,wLr),e(TC,ALr),e(TC,$J),e($J,yLr),e(TC,LLr),e(qr,xLr),M(MC,qr,null),b(f,xje,_),b(f,Ac,_),e(Ac,EC),e(EC,f6e),M(F9,f6e,null),e(Ac,$Lr),e(Ac,m6e),e(m6e,kLr),b(f,$je,_),b(f,cr,_),M(T9,cr,null),e(cr,SLr),e(cr,yc),e(yc,RLr),e(yc,kJ),e(kJ,PLr),e(yc,BLr),e(yc,SJ),e(SJ,ILr),e(yc,qLr),e(cr,NLr),e(cr,M9),e(M9,jLr),e(M9,g6e),e(g6e,DLr),e(M9,GLr),e(cr,OLr),e(cr,Dt),M(E9,Dt,null),e(Dt,VLr),e(Dt,h6e),e(h6e,XLr),e(Dt,zLr),e(Dt,Lc),e(Lc,WLr),e(Lc,p6e),e(p6e,QLr),e(Lc,HLr),e(Lc,RJ),e(RJ,ULr),e(Lc,JLr),e(Dt,YLr),M(CC,Dt,null),e(cr,KLr),e(cr,Nr),M(C9,Nr,null),e(Nr,ZLr),e(Nr,u6e),e(u6e,e8r),e(Nr,o8r),e(Nr,gn),e(gn,r8r),e(gn,_6e),e(_6e,t8r),e(gn,a8r),e(gn,b6e),e(b6e,n8r),e(gn,s8r),e(gn,v6e),e(v6e,l8r),e(gn,i8r),e(Nr,d8r),e(Nr,F6e),e(F6e,wC),e(wC,T6e),e(T6e,c8r),e(wC,f8r),e(wC,PJ),e(PJ,m8r),e(wC,g8r),e(Nr,h8r),M(AC,Nr,null),b(f,kje,_),b(f,xc,_),e(xc,yC),e(yC,M6e),M(w9,M6e,null),e(xc,p8r),e(xc,E6e),e(E6e,u8r),b(f,Sje,_),b(f,fr,_),M(A9,fr,null),e(fr,_8r),e(fr,$c),e($c,b8r),e($c,BJ),e(BJ,v8r),e($c,F8r),e($c,IJ),e(IJ,T8r),e($c,M8r),e(fr,E8r),e(fr,y9),e(y9,C8r),e(y9,C6e),e(C6e,w8r),e(y9,A8r),e(fr,y8r),e(fr,Gt),M(L9,Gt,null),e(Gt,L8r),e(Gt,w6e),e(w6e,x8r),e(Gt,$8r),e(Gt,kc),e(kc,k8r),e(kc,A6e),e(A6e,S8r),e(kc,R8r),e(kc,qJ),e(qJ,P8r),e(kc,B8r),e(Gt,I8r),M(LC,Gt,null),e(fr,q8r),e(fr,jr),M(x9,jr,null),e(jr,N8r),e(jr,y6e),e(y6e,j8r),e(jr,D8r),e(jr,hn),e(hn,G8r),e(hn,L6e),e(L6e,O8r),e(hn,V8r),e(hn,x6e),e(x6e,X8r),e(hn,z8r),e(hn,$6e),e($6e,W8r),e(hn,Q8r),e(jr,H8r),e(jr,te),e(te,xC),e(xC,k6e),e(k6e,U8r),e(xC,J8r),e(xC,NJ),e(NJ,Y8r),e(xC,K8r),e(te,Z8r),e(te,$C),e($C,S6e),e(S6e,e7r),e($C,o7r),e($C,jJ),e(jJ,r7r),e($C,t7r),e(te,a7r),e(te,kC),e(kC,R6e),e(R6e,n7r),e(kC,s7r),e(kC,DJ),e(DJ,l7r),e(kC,i7r),e(te,d7r),e(te,SC),e(SC,P6e),e(P6e,c7r),e(SC,f7r),e(SC,GJ),e(GJ,m7r),e(SC,g7r),e(te,h7r),e(te,RC),e(RC,B6e),e(B6e,p7r),e(RC,u7r),e(RC,OJ),e(OJ,_7r),e(RC,b7r),e(te,v7r),e(te,PC),e(PC,I6e),e(I6e,F7r),e(PC,T7r),e(PC,VJ),e(VJ,M7r),e(PC,E7r),e(te,C7r),e(te,BC),e(BC,q6e),e(q6e,w7r),e(BC,A7r),e(BC,XJ),e(XJ,y7r),e(BC,L7r),e(te,x7r),e(te,IC),e(IC,N6e),e(N6e,$7r),e(IC,k7r),e(IC,zJ),e(zJ,S7r),e(IC,R7r),e(te,P7r),e(te,qC),e(qC,j6e),e(j6e,B7r),e(qC,I7r),e(qC,WJ),e(WJ,q7r),e(qC,N7r),e(te,j7r),e(te,NC),e(NC,D6e),e(D6e,D7r),e(NC,G7r),e(NC,QJ),e(QJ,O7r),e(NC,V7r),e(te,X7r),e(te,jC),e(jC,G6e),e(G6e,z7r),e(jC,W7r),e(jC,HJ),e(HJ,Q7r),e(jC,H7r),e(te,U7r),e(te,DC),e(DC,O6e),e(O6e,J7r),e(DC,Y7r),e(DC,UJ),e(UJ,K7r),e(DC,Z7r),e(te,e9r),e(te,GC),e(GC,V6e),e(V6e,o9r),e(GC,r9r),e(GC,JJ),e(JJ,t9r),e(GC,a9r),e(te,n9r),e(te,OC),e(OC,X6e),e(X6e,s9r),e(OC,l9r),e(OC,YJ),e(YJ,i9r),e(OC,d9r),e(te,c9r),e(te,VC),e(VC,z6e),e(z6e,f9r),e(VC,m9r),e(VC,KJ),e(KJ,g9r),e(VC,h9r),e(te,p9r),e(te,XC),e(XC,W6e),e(W6e,u9r),e(XC,_9r),e(XC,ZJ),e(ZJ,b9r),e(XC,v9r),e(te,F9r),e(te,zC),e(zC,Q6e),e(Q6e,T9r),e(zC,M9r),e(zC,eY),e(eY,E9r),e(zC,C9r),e(te,w9r),e(te,WC),e(WC,H6e),e(H6e,A9r),e(WC,y9r),e(WC,oY),e(oY,L9r),e(WC,x9r),e(te,$9r),e(te,QC),e(QC,U6e),e(U6e,k9r),e(QC,S9r),e(QC,rY),e(rY,R9r),e(QC,P9r),e(te,B9r),e(te,HC),e(HC,J6e),e(J6e,I9r),e(HC,q9r),e(HC,tY),e(tY,N9r),e(HC,j9r),e(te,D9r),e(te,UC),e(UC,Y6e),e(Y6e,G9r),e(UC,O9r),e(UC,aY),e(aY,V9r),e(UC,X9r),e(te,z9r),e(te,JC),e(JC,K6e),e(K6e,W9r),e(JC,Q9r),e(JC,nY),e(nY,H9r),e(JC,U9r),e(te,J9r),e(te,YC),e(YC,Z6e),e(Z6e,Y9r),e(YC,K9r),e(YC,sY),e(sY,Z9r),e(YC,exr),e(te,oxr),e(te,KC),e(KC,eTe),e(eTe,rxr),e(KC,txr),e(KC,lY),e(lY,axr),e(KC,nxr),e(te,sxr),e(te,ZC),e(ZC,oTe),e(oTe,lxr),e(ZC,ixr),e(ZC,iY),e(iY,dxr),e(ZC,cxr),e(jr,fxr),M(e5,jr,null),b(f,Rje,_),b(f,Sc,_),e(Sc,o5),e(o5,rTe),M($9,rTe,null),e(Sc,mxr),e(Sc,tTe),e(tTe,gxr),b(f,Pje,_),b(f,mr,_),M(k9,mr,null),e(mr,hxr),e(mr,Rc),e(Rc,pxr),e(Rc,dY),e(dY,uxr),e(Rc,_xr),e(Rc,cY),e(cY,bxr),e(Rc,vxr),e(mr,Fxr),e(mr,S9),e(S9,Txr),e(S9,aTe),e(aTe,Mxr),e(S9,Exr),e(mr,Cxr),e(mr,Ot),M(R9,Ot,null),e(Ot,wxr),e(Ot,nTe),e(nTe,Axr),e(Ot,yxr),e(Ot,Pc),e(Pc,Lxr),e(Pc,sTe),e(sTe,xxr),e(Pc,$xr),e(Pc,fY),e(fY,kxr),e(Pc,Sxr),e(Ot,Rxr),M(r5,Ot,null),e(mr,Pxr),e(mr,Dr),M(P9,Dr,null),e(Dr,Bxr),e(Dr,lTe),e(lTe,Ixr),e(Dr,qxr),e(Dr,pn),e(pn,Nxr),e(pn,iTe),e(iTe,jxr),e(pn,Dxr),e(pn,dTe),e(dTe,Gxr),e(pn,Oxr),e(pn,cTe),e(cTe,Vxr),e(pn,Xxr),e(Dr,zxr),e(Dr,Re),e(Re,t5),e(t5,fTe),e(fTe,Wxr),e(t5,Qxr),e(t5,mY),e(mY,Hxr),e(t5,Uxr),e(Re,Jxr),e(Re,a5),e(a5,mTe),e(mTe,Yxr),e(a5,Kxr),e(a5,gY),e(gY,Zxr),e(a5,e$r),e(Re,o$r),e(Re,n5),e(n5,gTe),e(gTe,r$r),e(n5,t$r),e(n5,hY),e(hY,a$r),e(n5,n$r),e(Re,s$r),e(Re,s5),e(s5,hTe),e(hTe,l$r),e(s5,i$r),e(s5,pY),e(pY,d$r),e(s5,c$r),e(Re,f$r),e(Re,l5),e(l5,pTe),e(pTe,m$r),e(l5,g$r),e(l5,uY),e(uY,h$r),e(l5,p$r),e(Re,u$r),e(Re,i5),e(i5,uTe),e(uTe,_$r),e(i5,b$r),e(i5,_Y),e(_Y,v$r),e(i5,F$r),e(Re,T$r),e(Re,d5),e(d5,_Te),e(_Te,M$r),e(d5,E$r),e(d5,bY),e(bY,C$r),e(d5,w$r),e(Re,A$r),e(Re,c5),e(c5,bTe),e(bTe,y$r),e(c5,L$r),e(c5,vY),e(vY,x$r),e(c5,$$r),e(Re,k$r),e(Re,f5),e(f5,vTe),e(vTe,S$r),e(f5,R$r),e(f5,FY),e(FY,P$r),e(f5,B$r),e(Dr,I$r),M(m5,Dr,null),b(f,Bje,_),b(f,Bc,_),e(Bc,g5),e(g5,FTe),M(B9,FTe,null),e(Bc,q$r),e(Bc,TTe),e(TTe,N$r),b(f,Ije,_),b(f,gr,_),M(I9,gr,null),e(gr,j$r),e(gr,Ic),e(Ic,D$r),e(Ic,TY),e(TY,G$r),e(Ic,O$r),e(Ic,MY),e(MY,V$r),e(Ic,X$r),e(gr,z$r),e(gr,q9),e(q9,W$r),e(q9,MTe),e(MTe,Q$r),e(q9,H$r),e(gr,U$r),e(gr,Vt),M(N9,Vt,null),e(Vt,J$r),e(Vt,ETe),e(ETe,Y$r),e(Vt,K$r),e(Vt,qc),e(qc,Z$r),e(qc,CTe),e(CTe,ekr),e(qc,okr),e(qc,EY),e(EY,rkr),e(qc,tkr),e(Vt,akr),M(h5,Vt,null),e(gr,nkr),e(gr,Gr),M(j9,Gr,null),e(Gr,skr),e(Gr,wTe),e(wTe,lkr),e(Gr,ikr),e(Gr,un),e(un,dkr),e(un,ATe),e(ATe,ckr),e(un,fkr),e(un,yTe),e(yTe,mkr),e(un,gkr),e(un,LTe),e(LTe,hkr),e(un,pkr),e(Gr,ukr),e(Gr,Ee),e(Ee,p5),e(p5,xTe),e(xTe,_kr),e(p5,bkr),e(p5,CY),e(CY,vkr),e(p5,Fkr),e(Ee,Tkr),e(Ee,u5),e(u5,$Te),e($Te,Mkr),e(u5,Ekr),e(u5,wY),e(wY,Ckr),e(u5,wkr),e(Ee,Akr),e(Ee,_5),e(_5,kTe),e(kTe,ykr),e(_5,Lkr),e(_5,AY),e(AY,xkr),e(_5,$kr),e(Ee,kkr),e(Ee,b5),e(b5,STe),e(STe,Skr),e(b5,Rkr),e(b5,yY),e(yY,Pkr),e(b5,Bkr),e(Ee,Ikr),e(Ee,v5),e(v5,RTe),e(RTe,qkr),e(v5,Nkr),e(v5,LY),e(LY,jkr),e(v5,Dkr),e(Ee,Gkr),e(Ee,F5),e(F5,PTe),e(PTe,Okr),e(F5,Vkr),e(F5,xY),e(xY,Xkr),e(F5,zkr),e(Ee,Wkr),e(Ee,T5),e(T5,BTe),e(BTe,Qkr),e(T5,Hkr),e(T5,$Y),e($Y,Ukr),e(T5,Jkr),e(Ee,Ykr),e(Ee,M5),e(M5,ITe),e(ITe,Kkr),e(M5,Zkr),e(M5,kY),e(kY,eSr),e(M5,oSr),e(Ee,rSr),e(Ee,E5),e(E5,qTe),e(qTe,tSr),e(E5,aSr),e(E5,SY),e(SY,nSr),e(E5,sSr),e(Ee,lSr),e(Ee,C5),e(C5,NTe),e(NTe,iSr),e(C5,dSr),e(C5,RY),e(RY,cSr),e(C5,fSr),e(Ee,mSr),e(Ee,w5),e(w5,jTe),e(jTe,gSr),e(w5,hSr),e(w5,PY),e(PY,pSr),e(w5,uSr),e(Ee,_Sr),e(Ee,A5),e(A5,DTe),e(DTe,bSr),e(A5,vSr),e(A5,BY),e(BY,FSr),e(A5,TSr),e(Gr,MSr),M(y5,Gr,null),b(f,qje,_),b(f,Nc,_),e(Nc,L5),e(L5,GTe),M(D9,GTe,null),e(Nc,ESr),e(Nc,OTe),e(OTe,CSr),b(f,Nje,_),b(f,hr,_),M(G9,hr,null),e(hr,wSr),e(hr,jc),e(jc,ASr),e(jc,IY),e(IY,ySr),e(jc,LSr),e(jc,qY),e(qY,xSr),e(jc,$Sr),e(hr,kSr),e(hr,O9),e(O9,SSr),e(O9,VTe),e(VTe,RSr),e(O9,PSr),e(hr,BSr),e(hr,Xt),M(V9,Xt,null),e(Xt,ISr),e(Xt,XTe),e(XTe,qSr),e(Xt,NSr),e(Xt,Dc),e(Dc,jSr),e(Dc,zTe),e(zTe,DSr),e(Dc,GSr),e(Dc,NY),e(NY,OSr),e(Dc,VSr),e(Xt,XSr),M(x5,Xt,null),e(hr,zSr),e(hr,Or),M(X9,Or,null),e(Or,WSr),e(Or,WTe),e(WTe,QSr),e(Or,HSr),e(Or,_n),e(_n,USr),e(_n,QTe),e(QTe,JSr),e(_n,YSr),e(_n,HTe),e(HTe,KSr),e(_n,ZSr),e(_n,UTe),e(UTe,eRr),e(_n,oRr),e(Or,rRr),e(Or,Le),e(Le,$5),e($5,JTe),e(JTe,tRr),e($5,aRr),e($5,jY),e(jY,nRr),e($5,sRr),e(Le,lRr),e(Le,k5),e(k5,YTe),e(YTe,iRr),e(k5,dRr),e(k5,DY),e(DY,cRr),e(k5,fRr),e(Le,mRr),e(Le,S5),e(S5,KTe),e(KTe,gRr),e(S5,hRr),e(S5,GY),e(GY,pRr),e(S5,uRr),e(Le,_Rr),e(Le,R5),e(R5,ZTe),e(ZTe,bRr),e(R5,vRr),e(R5,OY),e(OY,FRr),e(R5,TRr),e(Le,MRr),e(Le,P5),e(P5,eMe),e(eMe,ERr),e(P5,CRr),e(P5,VY),e(VY,wRr),e(P5,ARr),e(Le,yRr),e(Le,B5),e(B5,oMe),e(oMe,LRr),e(B5,xRr),e(B5,XY),e(XY,$Rr),e(B5,kRr),e(Le,SRr),e(Le,I5),e(I5,rMe),e(rMe,RRr),e(I5,PRr),e(I5,zY),e(zY,BRr),e(I5,IRr),e(Le,qRr),e(Le,q5),e(q5,tMe),e(tMe,NRr),e(q5,jRr),e(q5,WY),e(WY,DRr),e(q5,GRr),e(Le,ORr),e(Le,N5),e(N5,aMe),e(aMe,VRr),e(N5,XRr),e(N5,QY),e(QY,zRr),e(N5,WRr),e(Le,QRr),e(Le,j5),e(j5,nMe),e(nMe,HRr),e(j5,URr),e(j5,HY),e(HY,JRr),e(j5,YRr),e(Or,KRr),M(D5,Or,null),b(f,jje,_),b(f,Gc,_),e(Gc,G5),e(G5,sMe),M(z9,sMe,null),e(Gc,ZRr),e(Gc,lMe),e(lMe,ePr),b(f,Dje,_),b(f,pr,_),M(W9,pr,null),e(pr,oPr),e(pr,Oc),e(Oc,rPr),e(Oc,UY),e(UY,tPr),e(Oc,aPr),e(Oc,JY),e(JY,nPr),e(Oc,sPr),e(pr,lPr),e(pr,Q9),e(Q9,iPr),e(Q9,iMe),e(iMe,dPr),e(Q9,cPr),e(pr,fPr),e(pr,zt),M(H9,zt,null),e(zt,mPr),e(zt,dMe),e(dMe,gPr),e(zt,hPr),e(zt,Vc),e(Vc,pPr),e(Vc,cMe),e(cMe,uPr),e(Vc,_Pr),e(Vc,YY),e(YY,bPr),e(Vc,vPr),e(zt,FPr),M(O5,zt,null),e(pr,TPr),e(pr,Vr),M(U9,Vr,null),e(Vr,MPr),e(Vr,fMe),e(fMe,EPr),e(Vr,CPr),e(Vr,bn),e(bn,wPr),e(bn,mMe),e(mMe,APr),e(bn,yPr),e(bn,gMe),e(gMe,LPr),e(bn,xPr),e(bn,hMe),e(hMe,$Pr),e(bn,kPr),e(Vr,SPr),e(Vr,Pe),e(Pe,V5),e(V5,pMe),e(pMe,RPr),e(V5,PPr),e(V5,KY),e(KY,BPr),e(V5,IPr),e(Pe,qPr),e(Pe,X5),e(X5,uMe),e(uMe,NPr),e(X5,jPr),e(X5,ZY),e(ZY,DPr),e(X5,GPr),e(Pe,OPr),e(Pe,z5),e(z5,_Me),e(_Me,VPr),e(z5,XPr),e(z5,eK),e(eK,zPr),e(z5,WPr),e(Pe,QPr),e(Pe,W5),e(W5,bMe),e(bMe,HPr),e(W5,UPr),e(W5,oK),e(oK,JPr),e(W5,YPr),e(Pe,KPr),e(Pe,Q5),e(Q5,vMe),e(vMe,ZPr),e(Q5,eBr),e(Q5,rK),e(rK,oBr),e(Q5,rBr),e(Pe,tBr),e(Pe,H5),e(H5,FMe),e(FMe,aBr),e(H5,nBr),e(H5,tK),e(tK,sBr),e(H5,lBr),e(Pe,iBr),e(Pe,U5),e(U5,TMe),e(TMe,dBr),e(U5,cBr),e(U5,aK),e(aK,fBr),e(U5,mBr),e(Pe,gBr),e(Pe,J5),e(J5,MMe),e(MMe,hBr),e(J5,pBr),e(J5,nK),e(nK,uBr),e(J5,_Br),e(Pe,bBr),e(Pe,Y5),e(Y5,EMe),e(EMe,vBr),e(Y5,FBr),e(Y5,sK),e(sK,TBr),e(Y5,MBr),e(Vr,EBr),M(K5,Vr,null),b(f,Gje,_),b(f,Xc,_),e(Xc,Z5),e(Z5,CMe),M(J9,CMe,null),e(Xc,CBr),e(Xc,wMe),e(wMe,wBr),b(f,Oje,_),b(f,ur,_),M(Y9,ur,null),e(ur,ABr),e(ur,zc),e(zc,yBr),e(zc,lK),e(lK,LBr),e(zc,xBr),e(zc,iK),e(iK,$Br),e(zc,kBr),e(ur,SBr),e(ur,K9),e(K9,RBr),e(K9,AMe),e(AMe,PBr),e(K9,BBr),e(ur,IBr),e(ur,Wt),M(Z9,Wt,null),e(Wt,qBr),e(Wt,yMe),e(yMe,NBr),e(Wt,jBr),e(Wt,Wc),e(Wc,DBr),e(Wc,LMe),e(LMe,GBr),e(Wc,OBr),e(Wc,dK),e(dK,VBr),e(Wc,XBr),e(Wt,zBr),M(e3,Wt,null),e(ur,WBr),e(ur,Xr),M(ex,Xr,null),e(Xr,QBr),e(Xr,xMe),e(xMe,HBr),e(Xr,UBr),e(Xr,vn),e(vn,JBr),e(vn,$Me),e($Me,YBr),e(vn,KBr),e(vn,kMe),e(kMe,ZBr),e(vn,eIr),e(vn,SMe),e(SMe,oIr),e(vn,rIr),e(Xr,tIr),e(Xr,xe),e(xe,o3),e(o3,RMe),e(RMe,aIr),e(o3,nIr),e(o3,cK),e(cK,sIr),e(o3,lIr),e(xe,iIr),e(xe,r3),e(r3,PMe),e(PMe,dIr),e(r3,cIr),e(r3,fK),e(fK,fIr),e(r3,mIr),e(xe,gIr),e(xe,t3),e(t3,BMe),e(BMe,hIr),e(t3,pIr),e(t3,mK),e(mK,uIr),e(t3,_Ir),e(xe,bIr),e(xe,a3),e(a3,IMe),e(IMe,vIr),e(a3,FIr),e(a3,gK),e(gK,TIr),e(a3,MIr),e(xe,EIr),e(xe,n3),e(n3,qMe),e(qMe,CIr),e(n3,wIr),e(n3,hK),e(hK,AIr),e(n3,yIr),e(xe,LIr),e(xe,s3),e(s3,NMe),e(NMe,xIr),e(s3,$Ir),e(s3,pK),e(pK,kIr),e(s3,SIr),e(xe,RIr),e(xe,l3),e(l3,jMe),e(jMe,PIr),e(l3,BIr),e(l3,uK),e(uK,IIr),e(l3,qIr),e(xe,NIr),e(xe,i3),e(i3,DMe),e(DMe,jIr),e(i3,DIr),e(i3,_K),e(_K,GIr),e(i3,OIr),e(xe,VIr),e(xe,d3),e(d3,GMe),e(GMe,XIr),e(d3,zIr),e(d3,bK),e(bK,WIr),e(d3,QIr),e(xe,HIr),e(xe,c3),e(c3,OMe),e(OMe,UIr),e(c3,JIr),e(c3,vK),e(vK,YIr),e(c3,KIr),e(Xr,ZIr),M(f3,Xr,null),b(f,Vje,_),b(f,Qc,_),e(Qc,m3),e(m3,VMe),M(ox,VMe,null),e(Qc,eqr),e(Qc,XMe),e(XMe,oqr),b(f,Xje,_),b(f,_r,_),M(rx,_r,null),e(_r,rqr),e(_r,Hc),e(Hc,tqr),e(Hc,FK),e(FK,aqr),e(Hc,nqr),e(Hc,TK),e(TK,sqr),e(Hc,lqr),e(_r,iqr),e(_r,tx),e(tx,dqr),e(tx,zMe),e(zMe,cqr),e(tx,fqr),e(_r,mqr),e(_r,Qt),M(ax,Qt,null),e(Qt,gqr),e(Qt,WMe),e(WMe,hqr),e(Qt,pqr),e(Qt,Uc),e(Uc,uqr),e(Uc,QMe),e(QMe,_qr),e(Uc,bqr),e(Uc,MK),e(MK,vqr),e(Uc,Fqr),e(Qt,Tqr),M(g3,Qt,null),e(_r,Mqr),e(_r,zr),M(nx,zr,null),e(zr,Eqr),e(zr,HMe),e(HMe,Cqr),e(zr,wqr),e(zr,Fn),e(Fn,Aqr),e(Fn,UMe),e(UMe,yqr),e(Fn,Lqr),e(Fn,JMe),e(JMe,xqr),e(Fn,$qr),e(Fn,YMe),e(YMe,kqr),e(Fn,Sqr),e(zr,Rqr),e(zr,$e),e($e,h3),e(h3,KMe),e(KMe,Pqr),e(h3,Bqr),e(h3,EK),e(EK,Iqr),e(h3,qqr),e($e,Nqr),e($e,p3),e(p3,ZMe),e(ZMe,jqr),e(p3,Dqr),e(p3,CK),e(CK,Gqr),e(p3,Oqr),e($e,Vqr),e($e,u3),e(u3,eEe),e(eEe,Xqr),e(u3,zqr),e(u3,wK),e(wK,Wqr),e(u3,Qqr),e($e,Hqr),e($e,_3),e(_3,oEe),e(oEe,Uqr),e(_3,Jqr),e(_3,AK),e(AK,Yqr),e(_3,Kqr),e($e,Zqr),e($e,b3),e(b3,rEe),e(rEe,eNr),e(b3,oNr),e(b3,yK),e(yK,rNr),e(b3,tNr),e($e,aNr),e($e,v3),e(v3,tEe),e(tEe,nNr),e(v3,sNr),e(v3,LK),e(LK,lNr),e(v3,iNr),e($e,dNr),e($e,F3),e(F3,aEe),e(aEe,cNr),e(F3,fNr),e(F3,xK),e(xK,mNr),e(F3,gNr),e($e,hNr),e($e,T3),e(T3,nEe),e(nEe,pNr),e(T3,uNr),e(T3,$K),e($K,_Nr),e(T3,bNr),e($e,vNr),e($e,M3),e(M3,sEe),e(sEe,FNr),e(M3,TNr),e(M3,kK),e(kK,MNr),e(M3,ENr),e($e,CNr),e($e,E3),e(E3,lEe),e(lEe,wNr),e(E3,ANr),e(E3,SK),e(SK,yNr),e(E3,LNr),e(zr,xNr),M(C3,zr,null),b(f,zje,_),b(f,Jc,_),e(Jc,w3),e(w3,iEe),M(sx,iEe,null),e(Jc,$Nr),e(Jc,dEe),e(dEe,kNr),b(f,Wje,_),b(f,br,_),M(lx,br,null),e(br,SNr),e(br,Yc),e(Yc,RNr),e(Yc,RK),e(RK,PNr),e(Yc,BNr),e(Yc,PK),e(PK,INr),e(Yc,qNr),e(br,NNr),e(br,ix),e(ix,jNr),e(ix,cEe),e(cEe,DNr),e(ix,GNr),e(br,ONr),e(br,Ht),M(dx,Ht,null),e(Ht,VNr),e(Ht,fEe),e(fEe,XNr),e(Ht,zNr),e(Ht,Kc),e(Kc,WNr),e(Kc,mEe),e(mEe,QNr),e(Kc,HNr),e(Kc,BK),e(BK,UNr),e(Kc,JNr),e(Ht,YNr),M(A3,Ht,null),e(br,KNr),e(br,Wr),M(cx,Wr,null),e(Wr,ZNr),e(Wr,gEe),e(gEe,ejr),e(Wr,ojr),e(Wr,Tn),e(Tn,rjr),e(Tn,hEe),e(hEe,tjr),e(Tn,ajr),e(Tn,pEe),e(pEe,njr),e(Tn,sjr),e(Tn,uEe),e(uEe,ljr),e(Tn,ijr),e(Wr,djr),e(Wr,De),e(De,y3),e(y3,_Ee),e(_Ee,cjr),e(y3,fjr),e(y3,IK),e(IK,mjr),e(y3,gjr),e(De,hjr),e(De,L3),e(L3,bEe),e(bEe,pjr),e(L3,ujr),e(L3,qK),e(qK,_jr),e(L3,bjr),e(De,vjr),e(De,x3),e(x3,vEe),e(vEe,Fjr),e(x3,Tjr),e(x3,NK),e(NK,Mjr),e(x3,Ejr),e(De,Cjr),e(De,$3),e($3,FEe),e(FEe,wjr),e($3,Ajr),e($3,jK),e(jK,yjr),e($3,Ljr),e(De,xjr),e(De,k3),e(k3,TEe),e(TEe,$jr),e(k3,kjr),e(k3,DK),e(DK,Sjr),e(k3,Rjr),e(De,Pjr),e(De,S3),e(S3,MEe),e(MEe,Bjr),e(S3,Ijr),e(S3,GK),e(GK,qjr),e(S3,Njr),e(De,jjr),e(De,R3),e(R3,EEe),e(EEe,Djr),e(R3,Gjr),e(R3,OK),e(OK,Ojr),e(R3,Vjr),e(De,Xjr),e(De,P3),e(P3,CEe),e(CEe,zjr),e(P3,Wjr),e(P3,VK),e(VK,Qjr),e(P3,Hjr),e(Wr,Ujr),M(B3,Wr,null),b(f,Qje,_),b(f,Zc,_),e(Zc,I3),e(I3,wEe),M(fx,wEe,null),e(Zc,Jjr),e(Zc,AEe),e(AEe,Yjr),b(f,Hje,_),b(f,vr,_),M(mx,vr,null),e(vr,Kjr),e(vr,ef),e(ef,Zjr),e(ef,XK),e(XK,eDr),e(ef,oDr),e(ef,zK),e(zK,rDr),e(ef,tDr),e(vr,aDr),e(vr,gx),e(gx,nDr),e(gx,yEe),e(yEe,sDr),e(gx,lDr),e(vr,iDr),e(vr,Ut),M(hx,Ut,null),e(Ut,dDr),e(Ut,LEe),e(LEe,cDr),e(Ut,fDr),e(Ut,of),e(of,mDr),e(of,xEe),e(xEe,gDr),e(of,hDr),e(of,WK),e(WK,pDr),e(of,uDr),e(Ut,_Dr),M(q3,Ut,null),e(vr,bDr),e(vr,Qr),M(px,Qr,null),e(Qr,vDr),e(Qr,$Ee),e($Ee,FDr),e(Qr,TDr),e(Qr,Mn),e(Mn,MDr),e(Mn,kEe),e(kEe,EDr),e(Mn,CDr),e(Mn,SEe),e(SEe,wDr),e(Mn,ADr),e(Mn,REe),e(REe,yDr),e(Mn,LDr),e(Qr,xDr),e(Qr,Ge),e(Ge,N3),e(N3,PEe),e(PEe,$Dr),e(N3,kDr),e(N3,QK),e(QK,SDr),e(N3,RDr),e(Ge,PDr),e(Ge,j3),e(j3,BEe),e(BEe,BDr),e(j3,IDr),e(j3,HK),e(HK,qDr),e(j3,NDr),e(Ge,jDr),e(Ge,D3),e(D3,IEe),e(IEe,DDr),e(D3,GDr),e(D3,UK),e(UK,ODr),e(D3,VDr),e(Ge,XDr),e(Ge,G3),e(G3,qEe),e(qEe,zDr),e(G3,WDr),e(G3,JK),e(JK,QDr),e(G3,HDr),e(Ge,UDr),e(Ge,O3),e(O3,NEe),e(NEe,JDr),e(O3,YDr),e(O3,YK),e(YK,KDr),e(O3,ZDr),e(Ge,eGr),e(Ge,V3),e(V3,jEe),e(jEe,oGr),e(V3,rGr),e(V3,KK),e(KK,tGr),e(V3,aGr),e(Ge,nGr),e(Ge,X3),e(X3,DEe),e(DEe,sGr),e(X3,lGr),e(X3,ZK),e(ZK,iGr),e(X3,dGr),e(Ge,cGr),e(Ge,z3),e(z3,GEe),e(GEe,fGr),e(z3,mGr),e(z3,eZ),e(eZ,gGr),e(z3,hGr),e(Qr,pGr),M(W3,Qr,null),b(f,Uje,_),b(f,rf,_),e(rf,Q3),e(Q3,OEe),M(ux,OEe,null),e(rf,uGr),e(rf,VEe),e(VEe,_Gr),b(f,Jje,_),b(f,Fr,_),M(_x,Fr,null),e(Fr,bGr),e(Fr,tf),e(tf,vGr),e(tf,oZ),e(oZ,FGr),e(tf,TGr),e(tf,rZ),e(rZ,MGr),e(tf,EGr),e(Fr,CGr),e(Fr,bx),e(bx,wGr),e(bx,XEe),e(XEe,AGr),e(bx,yGr),e(Fr,LGr),e(Fr,Jt),M(vx,Jt,null),e(Jt,xGr),e(Jt,zEe),e(zEe,$Gr),e(Jt,kGr),e(Jt,af),e(af,SGr),e(af,WEe),e(WEe,RGr),e(af,PGr),e(af,tZ),e(tZ,BGr),e(af,IGr),e(Jt,qGr),M(H3,Jt,null),e(Fr,NGr),e(Fr,Hr),M(Fx,Hr,null),e(Hr,jGr),e(Hr,QEe),e(QEe,DGr),e(Hr,GGr),e(Hr,En),e(En,OGr),e(En,HEe),e(HEe,VGr),e(En,XGr),e(En,UEe),e(UEe,zGr),e(En,WGr),e(En,JEe),e(JEe,QGr),e(En,HGr),e(Hr,UGr),e(Hr,YEe),e(YEe,U3),e(U3,KEe),e(KEe,JGr),e(U3,YGr),e(U3,aZ),e(aZ,KGr),e(U3,ZGr),e(Hr,eOr),M(J3,Hr,null),b(f,Yje,_),b(f,nf,_),e(nf,Y3),e(Y3,ZEe),M(Tx,ZEe,null),e(nf,oOr),e(nf,eCe),e(eCe,rOr),b(f,Kje,_),b(f,Tr,_),M(Mx,Tr,null),e(Tr,tOr),e(Tr,sf),e(sf,aOr),e(sf,nZ),e(nZ,nOr),e(sf,sOr),e(sf,sZ),e(sZ,lOr),e(sf,iOr),e(Tr,dOr),e(Tr,Ex),e(Ex,cOr),e(Ex,oCe),e(oCe,fOr),e(Ex,mOr),e(Tr,gOr),e(Tr,Yt),M(Cx,Yt,null),e(Yt,hOr),e(Yt,rCe),e(rCe,pOr),e(Yt,uOr),e(Yt,lf),e(lf,_Or),e(lf,tCe),e(tCe,bOr),e(lf,vOr),e(lf,lZ),e(lZ,FOr),e(lf,TOr),e(Yt,MOr),M(K3,Yt,null),e(Tr,EOr),e(Tr,Ur),M(wx,Ur,null),e(Ur,COr),e(Ur,aCe),e(aCe,wOr),e(Ur,AOr),e(Ur,Cn),e(Cn,yOr),e(Cn,nCe),e(nCe,LOr),e(Cn,xOr),e(Cn,sCe),e(sCe,$Or),e(Cn,kOr),e(Cn,lCe),e(lCe,SOr),e(Cn,ROr),e(Ur,POr),e(Ur,Ax),e(Ax,Z3),e(Z3,iCe),e(iCe,BOr),e(Z3,IOr),e(Z3,iZ),e(iZ,qOr),e(Z3,NOr),e(Ax,jOr),e(Ax,ew),e(ew,dCe),e(dCe,DOr),e(ew,GOr),e(ew,dZ),e(dZ,OOr),e(ew,VOr),e(Ur,XOr),M(ow,Ur,null),b(f,Zje,_),b(f,df,_),e(df,rw),e(rw,cCe),M(yx,cCe,null),e(df,zOr),e(df,fCe),e(fCe,WOr),b(f,eDe,_),b(f,Mr,_),M(Lx,Mr,null),e(Mr,QOr),e(Mr,cf),e(cf,HOr),e(cf,cZ),e(cZ,UOr),e(cf,JOr),e(cf,fZ),e(fZ,YOr),e(cf,KOr),e(Mr,ZOr),e(Mr,xx),e(xx,eVr),e(xx,mCe),e(mCe,oVr),e(xx,rVr),e(Mr,tVr),e(Mr,Kt),M($x,Kt,null),e(Kt,aVr),e(Kt,gCe),e(gCe,nVr),e(Kt,sVr),e(Kt,ff),e(ff,lVr),e(ff,hCe),e(hCe,iVr),e(ff,dVr),e(ff,mZ),e(mZ,cVr),e(ff,fVr),e(Kt,mVr),M(tw,Kt,null),e(Mr,gVr),e(Mr,Jr),M(kx,Jr,null),e(Jr,hVr),e(Jr,pCe),e(pCe,pVr),e(Jr,uVr),e(Jr,wn),e(wn,_Vr),e(wn,uCe),e(uCe,bVr),e(wn,vVr),e(wn,_Ce),e(_Ce,FVr),e(wn,TVr),e(wn,bCe),e(bCe,MVr),e(wn,EVr),e(Jr,CVr),e(Jr,vCe),e(vCe,aw),e(aw,FCe),e(FCe,wVr),e(aw,AVr),e(aw,gZ),e(gZ,yVr),e(aw,LVr),e(Jr,xVr),M(nw,Jr,null),oDe=!0},p(f,[_]){const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),Ff.$set(Sx);const TCe={};_&2&&(TCe.$$scope={dirty:_,ctx:f}),Eg.$set(TCe);const MCe={};_&2&&(MCe.$$scope={dirty:_,ctx:f}),ah.$set(MCe);const ECe={};_&2&&(ECe.$$scope={dirty:_,ctx:f}),Ih.$set(ECe);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),qh.$set(Rx);const CCe={};_&2&&(CCe.$$scope={dirty:_,ctx:f}),tp.$set(CCe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),ap.$set(An);const wCe={};_&2&&(wCe.$$scope={dirty:_,ctx:f}),lp.$set(wCe);const ACe={};_&2&&(ACe.$$scope={dirty:_,ctx:f}),r_.$set(ACe);const yCe={};_&2&&(yCe.$$scope={dirty:_,ctx:f}),a_.$set(yCe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),H_.$set(Px);const LCe={};_&2&&(LCe.$$scope={dirty:_,ctx:f}),J_.$set(LCe);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),B0.$set(Bx);const xCe={};_&2&&(xCe.$$scope={dirty:_,ctx:f}),q0.$set(xCe);const Ix={};_&2&&(Ix.$$scope={dirty:_,ctx:f}),F1.$set(Ix);const $Ce={};_&2&&($Ce.$$scope={dirty:_,ctx:f}),M1.$set($Ce);const kCe={};_&2&&(kCe.$$scope={dirty:_,ctx:f}),D1.$set(kCe);const SCe={};_&2&&(SCe.$$scope={dirty:_,ctx:f}),O1.$set(SCe);const mf={};_&2&&(mf.$$scope={dirty:_,ctx:f}),qb.$set(mf);const RCe={};_&2&&(RCe.$$scope={dirty:_,ctx:f}),jb.$set(RCe);const PCe={};_&2&&(PCe.$$scope={dirty:_,ctx:f}),u2.$set(PCe);const BCe={};_&2&&(BCe.$$scope={dirty:_,ctx:f}),b2.$set(BCe);const qx={};_&2&&(qx.$$scope={dirty:_,ctx:f}),w2.$set(qx);const ICe={};_&2&&(ICe.$$scope={dirty:_,ctx:f}),y2.$set(ICe);const qCe={};_&2&&(qCe.$$scope={dirty:_,ctx:f}),d4.$set(qCe);const NCe={};_&2&&(NCe.$$scope={dirty:_,ctx:f}),f4.$set(NCe);const et={};_&2&&(et.$$scope={dirty:_,ctx:f}),Z4.$set(et);const Nx={};_&2&&(Nx.$$scope={dirty:_,ctx:f}),ov.$set(Nx);const jCe={};_&2&&(jCe.$$scope={dirty:_,ctx:f}),av.$set(jCe);const jx={};_&2&&(jx.$$scope={dirty:_,ctx:f}),sv.$set(jx);const DCe={};_&2&&(DCe.$$scope={dirty:_,ctx:f}),Fv.$set(DCe);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:f}),Mv.$set(ot);const GCe={};_&2&&(GCe.$$scope={dirty:_,ctx:f}),wv.$set(GCe);const gf={};_&2&&(gf.$$scope={dirty:_,ctx:f}),yv.$set(gf);const OCe={};_&2&&(OCe.$$scope={dirty:_,ctx:f}),Nv.$set(OCe);const VCe={};_&2&&(VCe.$$scope={dirty:_,ctx:f}),Dv.$set(VCe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),Qv.$set(y);const sw={};_&2&&(sw.$$scope={dirty:_,ctx:f}),Uv.$set(sw);const XCe={};_&2&&(XCe.$$scope={dirty:_,ctx:f}),sF.$set(XCe);const zCe={};_&2&&(zCe.$$scope={dirty:_,ctx:f}),iF.$set(zCe);const lw={};_&2&&(lw.$$scope={dirty:_,ctx:f}),mF.$set(lw);const WCe={};_&2&&(WCe.$$scope={dirty:_,ctx:f}),hF.$set(WCe);const QCe={};_&2&&(QCe.$$scope={dirty:_,ctx:f}),TF.$set(QCe);const iw={};_&2&&(iw.$$scope={dirty:_,ctx:f}),EF.$set(iw);const HCe={};_&2&&(HCe.$$scope={dirty:_,ctx:f}),LF.$set(HCe);const UCe={};_&2&&(UCe.$$scope={dirty:_,ctx:f}),$F.$set(UCe);const dw={};_&2&&(dw.$$scope={dirty:_,ctx:f}),PF.$set(dw);const JCe={};_&2&&(JCe.$$scope={dirty:_,ctx:f}),IF.$set(JCe);const YCe={};_&2&&(YCe.$$scope={dirty:_,ctx:f}),jF.$set(YCe);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),GF.$set(cw);const KCe={};_&2&&(KCe.$$scope={dirty:_,ctx:f}),QF.$set(KCe);const ZCe={};_&2&&(ZCe.$$scope={dirty:_,ctx:f}),UF.$set(ZCe);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),KF.$set(fw);const e5e={};_&2&&(e5e.$$scope={dirty:_,ctx:f}),e6.$set(e5e);const o5e={};_&2&&(o5e.$$scope={dirty:_,ctx:f}),W6.$set(o5e);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),H6.$set(mw);const r5e={};_&2&&(r5e.$$scope={dirty:_,ctx:f}),bT.$set(r5e);const t5e={};_&2&&(t5e.$$scope={dirty:_,ctx:f}),FT.$set(t5e);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),RT.$set(gw);const a5e={};_&2&&(a5e.$$scope={dirty:_,ctx:f}),BT.$set(a5e);const n5e={};_&2&&(n5e.$$scope={dirty:_,ctx:f}),DT.$set(n5e);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),OT.$set(hw);const s5e={};_&2&&(s5e.$$scope={dirty:_,ctx:f}),dM.$set(s5e);const l5e={};_&2&&(l5e.$$scope={dirty:_,ctx:f}),fM.$set(l5e);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),MM.$set(pw);const i5e={};_&2&&(i5e.$$scope={dirty:_,ctx:f}),CM.$set(i5e);const d5e={};_&2&&(d5e.$$scope={dirty:_,ctx:f}),YM.$set(d5e);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),ZM.$set(uw);const c5e={};_&2&&(c5e.$$scope={dirty:_,ctx:f}),_E.$set(c5e);const f5e={};_&2&&(f5e.$$scope={dirty:_,ctx:f}),vE.$set(f5e);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),ME.$set(_w);const m5e={};_&2&&(m5e.$$scope={dirty:_,ctx:f}),CE.$set(m5e);const g5e={};_&2&&(g5e.$$scope={dirty:_,ctx:f}),AE.$set(g5e);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),LE.$set(bw);const h5e={};_&2&&(h5e.$$scope={dirty:_,ctx:f}),UE.$set(h5e);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:f}),YE.$set(p5e);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),bC.$set(vw);const u5e={};_&2&&(u5e.$$scope={dirty:_,ctx:f}),FC.$set(u5e);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:f}),MC.$set(_5e);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),CC.$set(Fw);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:f}),AC.$set(b5e);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:f}),LC.$set(v5e);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),e5.$set(Tw);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:f}),r5.$set(F5e);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:f}),m5.$set(T5e);const Mw={};_&2&&(Mw.$$scope={dirty:_,ctx:f}),h5.$set(Mw);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:f}),y5.$set(M5e);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:f}),x5.$set(E5e);const Ew={};_&2&&(Ew.$$scope={dirty:_,ctx:f}),D5.$set(Ew);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:f}),O5.$set(C5e);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:f}),K5.$set(w5e);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),e3.$set(Cw);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:f}),f3.$set(A5e);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:f}),g3.$set(y5e);const ww={};_&2&&(ww.$$scope={dirty:_,ctx:f}),C3.$set(ww);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:f}),A3.$set(L5e);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:f}),B3.$set(x5e);const Aw={};_&2&&(Aw.$$scope={dirty:_,ctx:f}),q3.$set(Aw);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:f}),W3.$set($5e);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:f}),H3.$set(k5e);const yw={};_&2&&(yw.$$scope={dirty:_,ctx:f}),J3.$set(yw);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:f}),K3.$set(S5e);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:f}),ow.$set(R5e);const Lw={};_&2&&(Lw.$$scope={dirty:_,ctx:f}),tw.$set(Lw);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:f}),nw.$set(P5e)},i(f){oDe||(E(d.$$.fragment,f),E(Ca.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E(Ff.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Ry.$$.fragment,f),E(Eg.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(jy.$$.fragment,f),E(ah.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(zy.$$.fragment,f),E(Ih.$$.fragment,f),E(qh.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Yy.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(lp.$$.fragment,f),E(tL.$$.fragment,f),E(r_.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(a_.$$.fragment,f),E(iL.$$.fragment,f),E(H_.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(J_.$$.fragment,f),E(gL.$$.fragment,f),E(B0.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(q0.$$.fragment,f),E(bL.$$.fragment,f),E(F1.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(M1.$$.fragment,f),E(EL.$$.fragment,f),E(D1.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(O1.$$.fragment,f),E(LL.$$.fragment,f),E(qb.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(jb.$$.fragment,f),E(RL.$$.fragment,f),E(u2.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(qL.$$.fragment,f),E(b2.$$.fragment,f),E(NL.$$.fragment,f),E(w2.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(y2.$$.fragment,f),E(VL.$$.fragment,f),E(d4.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(f4.$$.fragment,f),E(HL.$$.fragment,f),E(Z4.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(ov.$$.fragment,f),E(ZL.$$.fragment,f),E(av.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(sv.$$.fragment,f),E(a8.$$.fragment,f),E(Fv.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(Mv.$$.fragment,f),E(d8.$$.fragment,f),E(wv.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(yv.$$.fragment,f),E(h8.$$.fragment,f),E(Nv.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(Dv.$$.fragment,f),E(v8.$$.fragment,f),E(Qv.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(Uv.$$.fragment,f),E(C8.$$.fragment,f),E(sF.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(iF.$$.fragment,f),E(x8.$$.fragment,f),E(mF.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(hF.$$.fragment,f),E(B8.$$.fragment,f),E(TF.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(EF.$$.fragment,f),E(D8.$$.fragment,f),E(LF.$$.fragment,f),E(G8.$$.fragment,f),E(O8.$$.fragment,f),E(X8.$$.fragment,f),E($F.$$.fragment,f),E(z8.$$.fragment,f),E(PF.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(IF.$$.fragment,f),E(Y8.$$.fragment,f),E(jF.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o7.$$.fragment,f),E(GF.$$.fragment,f),E(r7.$$.fragment,f),E(QF.$$.fragment,f),E(t7.$$.fragment,f),E(a7.$$.fragment,f),E(s7.$$.fragment,f),E(UF.$$.fragment,f),E(l7.$$.fragment,f),E(KF.$$.fragment,f),E(i7.$$.fragment,f),E(d7.$$.fragment,f),E(f7.$$.fragment,f),E(e6.$$.fragment,f),E(m7.$$.fragment,f),E(W6.$$.fragment,f),E(g7.$$.fragment,f),E(h7.$$.fragment,f),E(u7.$$.fragment,f),E(H6.$$.fragment,f),E(_7.$$.fragment,f),E(bT.$$.fragment,f),E(b7.$$.fragment,f),E(v7.$$.fragment,f),E(T7.$$.fragment,f),E(FT.$$.fragment,f),E(M7.$$.fragment,f),E(RT.$$.fragment,f),E(E7.$$.fragment,f),E(C7.$$.fragment,f),E(A7.$$.fragment,f),E(BT.$$.fragment,f),E(y7.$$.fragment,f),E(DT.$$.fragment,f),E(L7.$$.fragment,f),E(x7.$$.fragment,f),E(k7.$$.fragment,f),E(OT.$$.fragment,f),E(S7.$$.fragment,f),E(dM.$$.fragment,f),E(R7.$$.fragment,f),E(P7.$$.fragment,f),E(I7.$$.fragment,f),E(fM.$$.fragment,f),E(q7.$$.fragment,f),E(MM.$$.fragment,f),E(N7.$$.fragment,f),E(j7.$$.fragment,f),E(G7.$$.fragment,f),E(CM.$$.fragment,f),E(O7.$$.fragment,f),E(YM.$$.fragment,f),E(V7.$$.fragment,f),E(X7.$$.fragment,f),E(W7.$$.fragment,f),E(ZM.$$.fragment,f),E(Q7.$$.fragment,f),E(_E.$$.fragment,f),E(H7.$$.fragment,f),E(U7.$$.fragment,f),E(Y7.$$.fragment,f),E(vE.$$.fragment,f),E(K7.$$.fragment,f),E(ME.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(CE.$$.fragment,f),E(a9.$$.fragment,f),E(AE.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(LE.$$.fragment,f),E(d9.$$.fragment,f),E(UE.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(YE.$$.fragment,f),E(h9.$$.fragment,f),E(bC.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(FC.$$.fragment,f),E(v9.$$.fragment,f),E(MC.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(CC.$$.fragment,f),E(C9.$$.fragment,f),E(AC.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(L9.$$.fragment,f),E(LC.$$.fragment,f),E(x9.$$.fragment,f),E(e5.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(r5.$$.fragment,f),E(P9.$$.fragment,f),E(m5.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(h5.$$.fragment,f),E(j9.$$.fragment,f),E(y5.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(x5.$$.fragment,f),E(X9.$$.fragment,f),E(D5.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(O5.$$.fragment,f),E(U9.$$.fragment,f),E(K5.$$.fragment,f),E(J9.$$.fragment,f),E(Y9.$$.fragment,f),E(Z9.$$.fragment,f),E(e3.$$.fragment,f),E(ex.$$.fragment,f),E(f3.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(g3.$$.fragment,f),E(nx.$$.fragment,f),E(C3.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(A3.$$.fragment,f),E(cx.$$.fragment,f),E(B3.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(q3.$$.fragment,f),E(px.$$.fragment,f),E(W3.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(H3.$$.fragment,f),E(Fx.$$.fragment,f),E(J3.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(K3.$$.fragment,f),E(wx.$$.fragment,f),E(ow.$$.fragment,f),E(yx.$$.fragment,f),E(Lx.$$.fragment,f),E($x.$$.fragment,f),E(tw.$$.fragment,f),E(kx.$$.fragment,f),E(nw.$$.fragment,f),oDe=!0)},o(f){C(d.$$.fragment,f),C(Ca.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C(Ff.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Ry.$$.fragment,f),C(Eg.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(jy.$$.fragment,f),C(ah.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(zy.$$.fragment,f),C(Ih.$$.fragment,f),C(qh.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Yy.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(lp.$$.fragment,f),C(tL.$$.fragment,f),C(r_.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(a_.$$.fragment,f),C(iL.$$.fragment,f),C(H_.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(J_.$$.fragment,f),C(gL.$$.fragment,f),C(B0.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(q0.$$.fragment,f),C(bL.$$.fragment,f),C(F1.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(M1.$$.fragment,f),C(EL.$$.fragment,f),C(D1.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(O1.$$.fragment,f),C(LL.$$.fragment,f),C(qb.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(jb.$$.fragment,f),C(RL.$$.fragment,f),C(u2.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(qL.$$.fragment,f),C(b2.$$.fragment,f),C(NL.$$.fragment,f),C(w2.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(y2.$$.fragment,f),C(VL.$$.fragment,f),C(d4.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(f4.$$.fragment,f),C(HL.$$.fragment,f),C(Z4.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(ov.$$.fragment,f),C(ZL.$$.fragment,f),C(av.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(sv.$$.fragment,f),C(a8.$$.fragment,f),C(Fv.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(Mv.$$.fragment,f),C(d8.$$.fragment,f),C(wv.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(yv.$$.fragment,f),C(h8.$$.fragment,f),C(Nv.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(Dv.$$.fragment,f),C(v8.$$.fragment,f),C(Qv.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(Uv.$$.fragment,f),C(C8.$$.fragment,f),C(sF.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(iF.$$.fragment,f),C(x8.$$.fragment,f),C(mF.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(hF.$$.fragment,f),C(B8.$$.fragment,f),C(TF.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(EF.$$.fragment,f),C(D8.$$.fragment,f),C(LF.$$.fragment,f),C(G8.$$.fragment,f),C(O8.$$.fragment,f),C(X8.$$.fragment,f),C($F.$$.fragment,f),C(z8.$$.fragment,f),C(PF.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(IF.$$.fragment,f),C(Y8.$$.fragment,f),C(jF.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o7.$$.fragment,f),C(GF.$$.fragment,f),C(r7.$$.fragment,f),C(QF.$$.fragment,f),C(t7.$$.fragment,f),C(a7.$$.fragment,f),C(s7.$$.fragment,f),C(UF.$$.fragment,f),C(l7.$$.fragment,f),C(KF.$$.fragment,f),C(i7.$$.fragment,f),C(d7.$$.fragment,f),C(f7.$$.fragment,f),C(e6.$$.fragment,f),C(m7.$$.fragment,f),C(W6.$$.fragment,f),C(g7.$$.fragment,f),C(h7.$$.fragment,f),C(u7.$$.fragment,f),C(H6.$$.fragment,f),C(_7.$$.fragment,f),C(bT.$$.fragment,f),C(b7.$$.fragment,f),C(v7.$$.fragment,f),C(T7.$$.fragment,f),C(FT.$$.fragment,f),C(M7.$$.fragment,f),C(RT.$$.fragment,f),C(E7.$$.fragment,f),C(C7.$$.fragment,f),C(A7.$$.fragment,f),C(BT.$$.fragment,f),C(y7.$$.fragment,f),C(DT.$$.fragment,f),C(L7.$$.fragment,f),C(x7.$$.fragment,f),C(k7.$$.fragment,f),C(OT.$$.fragment,f),C(S7.$$.fragment,f),C(dM.$$.fragment,f),C(R7.$$.fragment,f),C(P7.$$.fragment,f),C(I7.$$.fragment,f),C(fM.$$.fragment,f),C(q7.$$.fragment,f),C(MM.$$.fragment,f),C(N7.$$.fragment,f),C(j7.$$.fragment,f),C(G7.$$.fragment,f),C(CM.$$.fragment,f),C(O7.$$.fragment,f),C(YM.$$.fragment,f),C(V7.$$.fragment,f),C(X7.$$.fragment,f),C(W7.$$.fragment,f),C(ZM.$$.fragment,f),C(Q7.$$.fragment,f),C(_E.$$.fragment,f),C(H7.$$.fragment,f),C(U7.$$.fragment,f),C(Y7.$$.fragment,f),C(vE.$$.fragment,f),C(K7.$$.fragment,f),C(ME.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(CE.$$.fragment,f),C(a9.$$.fragment,f),C(AE.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(LE.$$.fragment,f),C(d9.$$.fragment,f),C(UE.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(YE.$$.fragment,f),C(h9.$$.fragment,f),C(bC.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(FC.$$.fragment,f),C(v9.$$.fragment,f),C(MC.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(CC.$$.fragment,f),C(C9.$$.fragment,f),C(AC.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(L9.$$.fragment,f),C(LC.$$.fragment,f),C(x9.$$.fragment,f),C(e5.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(r5.$$.fragment,f),C(P9.$$.fragment,f),C(m5.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(h5.$$.fragment,f),C(j9.$$.fragment,f),C(y5.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(x5.$$.fragment,f),C(X9.$$.fragment,f),C(D5.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(O5.$$.fragment,f),C(U9.$$.fragment,f),C(K5.$$.fragment,f),C(J9.$$.fragment,f),C(Y9.$$.fragment,f),C(Z9.$$.fragment,f),C(e3.$$.fragment,f),C(ex.$$.fragment,f),C(f3.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(g3.$$.fragment,f),C(nx.$$.fragment,f),C(C3.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(A3.$$.fragment,f),C(cx.$$.fragment,f),C(B3.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(q3.$$.fragment,f),C(px.$$.fragment,f),C(W3.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(H3.$$.fragment,f),C(Fx.$$.fragment,f),C(J3.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(K3.$$.fragment,f),C(wx.$$.fragment,f),C(ow.$$.fragment,f),C(yx.$$.fragment,f),C(Lx.$$.fragment,f),C($x.$$.fragment,f),C(tw.$$.fragment,f),C(kx.$$.fragment,f),C(nw.$$.fragment,f),oDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(pf),f&&t(rt),f&&t(je),f&&t(We),f&&t(_f),w(Ca,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(wa),f&&t(Kqe),f&&t(bi),w(yy),f&&t(Zqe),f&&t(kn),f&&t(eNe),w(Ly,f),f&&t(oNe),f&&t(J$),f&&t(rNe),w(Ff,f),f&&t(tNe),f&&t(vi),w(xy),f&&t(aNe),f&&t(Co),w($y),w(Ry),w(Eg),w(Py),f&&t(nNe),f&&t(Ti),w(By),f&&t(sNe),f&&t(wo),w(Iy),w(jy),w(ah),w(Dy),f&&t(lNe),f&&t(Mi),w(Gy),f&&t(iNe),f&&t(Ao),w(Oy),w(zy),w(Ih),w(qh),w(Wy),f&&t(dNe),f&&t(Ei),w(Qy),f&&t(cNe),f&&t(yo),w(Hy),w(Yy),w(tp),w(ap),w(Ky),f&&t(fNe),f&&t(wi),w(Zy),f&&t(mNe),f&&t(Lo),w(eL),w(rL),w(lp),w(tL),w(r_),f&&t(gNe),f&&t(Li),w(aL),f&&t(hNe),f&&t(xo),w(nL),w(lL),w(a_),w(iL),w(H_),f&&t(pNe),f&&t(ki),w(dL),f&&t(uNe),f&&t($o),w(cL),w(mL),w(J_),w(gL),w(B0),f&&t(_Ne),f&&t(Pi),w(hL),f&&t(bNe),f&&t(ko),w(pL),w(_L),w(q0),w(bL),w(F1),f&&t(vNe),f&&t(qi),w(vL),f&&t(FNe),f&&t(So),w(FL),w(ML),w(M1),w(EL),w(D1),f&&t(TNe),f&&t(Di),w(CL),f&&t(MNe),f&&t(Ro),w(wL),w(yL),w(O1),w(LL),w(qb),f&&t(ENe),f&&t(Vi),w(xL),f&&t(CNe),f&&t(Po),w($L),w(SL),w(jb),w(RL),w(u2),f&&t(wNe),f&&t(Wi),w(PL),f&&t(ANe),f&&t(Bo),w(BL),w(qL),w(b2),w(NL),w(w2),f&&t(yNe),f&&t(Ui),w(jL),f&&t(LNe),f&&t(Io),w(DL),w(OL),w(y2),w(VL),w(d4),f&&t(xNe),f&&t(Ki),w(XL),f&&t($Ne),f&&t(qo),w(zL),w(QL),w(f4),w(HL),w(Z4),f&&t(kNe),f&&t(od),w(UL),f&&t(SNe),f&&t(No),w(JL),w(KL),w(ov),w(ZL),w(av),f&&t(RNe),f&&t(ad),w(e8),f&&t(PNe),f&&t(jo),w(o8),w(t8),w(sv),w(a8),w(Fv),f&&t(BNe),f&&t(ld),w(n8),f&&t(INe),f&&t(Do),w(s8),w(i8),w(Mv),w(d8),w(wv),f&&t(qNe),f&&t(cd),w(c8),f&&t(NNe),f&&t(Go),w(f8),w(g8),w(yv),w(h8),w(Nv),f&&t(jNe),f&&t(gd),w(p8),f&&t(DNe),f&&t(Oo),w(u8),w(b8),w(Dv),w(v8),w(Qv),f&&t(GNe),f&&t(ud),w(F8),f&&t(ONe),f&&t(Vo),w(T8),w(E8),w(Uv),w(C8),w(sF),f&&t(VNe),f&&t(vd),w(w8),f&&t(XNe),f&&t(Xo),w(A8),w(L8),w(iF),w(x8),w(mF),f&&t(zNe),f&&t(Md),w(k8),f&&t(WNe),f&&t(zo),w(S8),w(P8),w(hF),w(B8),w(TF),f&&t(QNe),f&&t(wd),w(I8),f&&t(HNe),f&&t(Wo),w(q8),w(j8),w(EF),w(D8),w(LF),f&&t(UNe),f&&t(xd),w(G8),f&&t(JNe),f&&t(Qo),w(O8),w(X8),w($F),w(z8),w(PF),f&&t(YNe),f&&t(Sd),w(Q8),f&&t(KNe),f&&t(Ho),w(H8),w(J8),w(IF),w(Y8),w(jF),f&&t(ZNe),f&&t(Bd),w(K8),f&&t(eje),f&&t(Uo),w(Z8),w(o7),w(GF),w(r7),w(QF),f&&t(oje),f&&t(Nd),w(t7),f&&t(rje),f&&t(Jo),w(a7),w(s7),w(UF),w(l7),w(KF),f&&t(tje),f&&t(Gd),w(i7),f&&t(aje),f&&t(Yo),w(d7),w(f7),w(e6),w(m7),w(W6),f&&t(nje),f&&t(Xd),w(g7),f&&t(sje),f&&t(Ko),w(h7),w(u7),w(H6),w(_7),w(bT),f&&t(lje),f&&t(Qd),w(b7),f&&t(ije),f&&t(Zo),w(v7),w(T7),w(FT),w(M7),w(RT),f&&t(dje),f&&t(Jd),w(E7),f&&t(cje),f&&t(er),w(C7),w(A7),w(BT),w(y7),w(DT),f&&t(fje),f&&t(Zd),w(L7),f&&t(mje),f&&t(or),w(x7),w(k7),w(OT),w(S7),w(dM),f&&t(gje),f&&t(rc),w(R7),f&&t(hje),f&&t(rr),w(P7),w(I7),w(fM),w(q7),w(MM),f&&t(pje),f&&t(nc),w(N7),f&&t(uje),f&&t(tr),w(j7),w(G7),w(CM),w(O7),w(YM),f&&t(_je),f&&t(ic),w(V7),f&&t(bje),f&&t(ar),w(X7),w(W7),w(ZM),w(Q7),w(_E),f&&t(vje),f&&t(fc),w(H7),f&&t(Fje),f&&t(nr),w(U7),w(Y7),w(vE),w(K7),w(ME),f&&t(Tje),f&&t(hc),w(e9),f&&t(Mje),f&&t(sr),w(o9),w(t9),w(CE),w(a9),w(AE),f&&t(Eje),f&&t(_c),w(n9),f&&t(Cje),f&&t(lr),w(s9),w(i9),w(LE),w(d9),w(UE),f&&t(wje),f&&t(Fc),w(c9),f&&t(Aje),f&&t(ir),w(f9),w(g9),w(YE),w(h9),w(bC),f&&t(yje),f&&t(Ec),w(p9),f&&t(Lje),f&&t(dr),w(u9),w(b9),w(FC),w(v9),w(MC),f&&t(xje),f&&t(Ac),w(F9),f&&t($je),f&&t(cr),w(T9),w(E9),w(CC),w(C9),w(AC),f&&t(kje),f&&t(xc),w(w9),f&&t(Sje),f&&t(fr),w(A9),w(L9),w(LC),w(x9),w(e5),f&&t(Rje),f&&t(Sc),w($9),f&&t(Pje),f&&t(mr),w(k9),w(R9),w(r5),w(P9),w(m5),f&&t(Bje),f&&t(Bc),w(B9),f&&t(Ije),f&&t(gr),w(I9),w(N9),w(h5),w(j9),w(y5),f&&t(qje),f&&t(Nc),w(D9),f&&t(Nje),f&&t(hr),w(G9),w(V9),w(x5),w(X9),w(D5),f&&t(jje),f&&t(Gc),w(z9),f&&t(Dje),f&&t(pr),w(W9),w(H9),w(O5),w(U9),w(K5),f&&t(Gje),f&&t(Xc),w(J9),f&&t(Oje),f&&t(ur),w(Y9),w(Z9),w(e3),w(ex),w(f3),f&&t(Vje),f&&t(Qc),w(ox),f&&t(Xje),f&&t(_r),w(rx),w(ax),w(g3),w(nx),w(C3),f&&t(zje),f&&t(Jc),w(sx),f&&t(Wje),f&&t(br),w(lx),w(dx),w(A3),w(cx),w(B3),f&&t(Qje),f&&t(Zc),w(fx),f&&t(Hje),f&&t(vr),w(mx),w(hx),w(q3),w(px),w(W3),f&&t(Uje),f&&t(rf),w(ux),f&&t(Jje),f&&t(Fr),w(_x),w(vx),w(H3),w(Fx),w(J3),f&&t(Yje),f&&t(nf),w(Tx),f&&t(Kje),f&&t(Tr),w(Mx),w(Cx),w(K3),w(wx),w(ow),f&&t(Zje),f&&t(df),w(yx),f&&t(eDe),f&&t(Mr),w(Lx),w($x),w(tw),w(kx),w(nw)}}}const dSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cSt(L){return c$t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _St extends s$t{constructor(g){super();l$t(this,g,cSt,iSt,i$t,{})}}export{_St as default,dSt as metadata};
