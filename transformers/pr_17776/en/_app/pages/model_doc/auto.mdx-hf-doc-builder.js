import{S as aDt,i as nDt,s as sDt,e as a,k as l,w as F,t as o,M as lDt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as iDt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as DYr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function dDt(x){let g,v,p,m,_,d,h,Eo,Fi,Lf,at,Ti,Mi,CL,yf,Oe,Qe,Ei,Rn,wL,Pn,Bn,AL,Ci,In,LL,wi,xf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),Lf=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),CL=o(")."),yf=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ei=a("code"),Rn=o("NewModel"),wL=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),AL=o(`, make sure its
`),Ci=a("code"),In=o("config_class"),LL=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),xf=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var eS=s(p);m=r(eS,"NewModelConfig"),eS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var oS=s(Fi);Lf=r(oS,"model_type"),oS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var rS=s(Ti);Mi=r(rS,'"new-model"'),rS.forEach(t),CL=r(Ae,")."),Ae.forEach(t),yf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var $a=s(Ei);Rn=r($a,"NewModel"),$a.forEach(t),wL=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var tS=s(Pn);Bn=r(tS,"PreTrainedModel"),tS.forEach(t),AL=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var $f=s(Ci);In=r($f,"config_class"),$f.forEach(t),LL=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var aS=s(wi);xf=r(aS,"NewModelConfig"),aS.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,Lf),e(g,at),e(g,Ti),e(Ti,Mi),e(g,CL),b(We,yf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,Ei),e(Ei,Rn),e(Oe,wL),e(Oe,Pn),e(Pn,Bn),e(Oe,AL),e(Oe,Ci),e(Ci,In),e(Oe,LL),e(Oe,wi),e(wi,xf),e(Oe,xa)},d(We){We&&t(g),We&&t(yf),We&&t(Oe)}}}function cDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function gDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(x){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function pDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ADt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Dt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ODt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KDt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Gt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KGt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lOt(x){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iOt(x){let g,v,p,m,_,d,h,Eo,Fi,Lf,at,Ti,Mi,CL,yf,Oe,Qe,Ei,Rn,wL,Pn,Bn,AL,Ci,In,LL,wi,xf,xa,We,Ae,eS,Ai,oS,rS,Co,$a,tS,$f,aS,Uze,PGe,Li,kf,ite,yL,Jze,dte,Yze,BGe,Nn,Zze,cte,Kze,eQe,fte,oQe,rQe,IGe,xL,NGe,nS,tQe,qGe,Sf,jGe,yi,Rf,mte,$L,aQe,gte,nQe,DGe,wo,kL,sQe,SL,lQe,sS,iQe,dQe,cQe,RL,fQe,hte,mQe,gQe,hQe,Ar,PL,pQe,pte,_Qe,uQe,xi,bQe,_te,vQe,FQe,ute,TQe,MQe,EQe,A,Pf,bte,CQe,wQe,lS,AQe,LQe,yQe,Bf,vte,xQe,$Qe,iS,kQe,SQe,RQe,If,Fte,PQe,BQe,dS,IQe,NQe,qQe,Nf,Tte,jQe,DQe,cS,GQe,OQe,VQe,qf,Mte,XQe,zQe,fS,QQe,WQe,HQe,jf,Ete,UQe,JQe,mS,YQe,ZQe,KQe,Df,Cte,eWe,oWe,gS,rWe,tWe,aWe,Gf,wte,nWe,sWe,hS,lWe,iWe,dWe,Of,Ate,cWe,fWe,pS,mWe,gWe,hWe,Vf,Lte,pWe,_We,_S,uWe,bWe,vWe,Xf,yte,FWe,TWe,uS,MWe,EWe,CWe,zf,xte,wWe,AWe,bS,LWe,yWe,xWe,Qf,$te,$We,kWe,vS,SWe,RWe,PWe,Wf,kte,BWe,IWe,FS,NWe,qWe,jWe,Hf,Ste,DWe,GWe,TS,OWe,VWe,XWe,Uf,Rte,zWe,QWe,MS,WWe,HWe,UWe,Jf,Pte,JWe,YWe,ES,ZWe,KWe,eHe,Yf,Bte,oHe,rHe,CS,tHe,aHe,nHe,Zf,Ite,sHe,lHe,wS,iHe,dHe,cHe,Kf,Nte,fHe,mHe,AS,gHe,hHe,pHe,em,qte,_He,uHe,LS,bHe,vHe,FHe,om,jte,THe,MHe,yS,EHe,CHe,wHe,rm,Dte,AHe,LHe,xS,yHe,xHe,$He,tm,Gte,kHe,SHe,$S,RHe,PHe,BHe,am,Ote,IHe,NHe,kS,qHe,jHe,DHe,nm,Vte,GHe,OHe,SS,VHe,XHe,zHe,sm,Xte,QHe,WHe,RS,HHe,UHe,JHe,lm,zte,YHe,ZHe,PS,KHe,eUe,oUe,im,Qte,rUe,tUe,BS,aUe,nUe,sUe,dm,Wte,lUe,iUe,IS,dUe,cUe,fUe,cm,Hte,mUe,gUe,NS,hUe,pUe,_Ue,fm,Ute,uUe,bUe,qS,vUe,FUe,TUe,mm,Jte,MUe,EUe,jS,CUe,wUe,AUe,gm,Yte,LUe,yUe,DS,xUe,$Ue,kUe,hm,Zte,SUe,RUe,GS,PUe,BUe,IUe,pm,Kte,NUe,qUe,OS,jUe,DUe,GUe,_m,eae,OUe,VUe,VS,XUe,zUe,QUe,um,oae,WUe,HUe,XS,UUe,JUe,YUe,bm,rae,ZUe,KUe,zS,eJe,oJe,rJe,vm,tae,tJe,aJe,QS,nJe,sJe,lJe,Fm,aae,iJe,dJe,WS,cJe,fJe,mJe,Tm,nae,gJe,hJe,HS,pJe,_Je,uJe,Mm,sae,bJe,vJe,US,FJe,TJe,MJe,Em,lae,EJe,CJe,JS,wJe,AJe,LJe,Cm,iae,yJe,xJe,YS,$Je,kJe,SJe,wm,dae,RJe,PJe,ZS,BJe,IJe,NJe,Am,cae,qJe,jJe,KS,DJe,GJe,OJe,Lm,fae,VJe,XJe,eR,zJe,QJe,WJe,ym,mae,HJe,UJe,oR,JJe,YJe,ZJe,xm,gae,KJe,eYe,rR,oYe,rYe,tYe,$m,hae,aYe,nYe,tR,sYe,lYe,iYe,km,pae,dYe,cYe,aR,fYe,mYe,gYe,Sm,_ae,hYe,pYe,nR,_Ye,uYe,bYe,Rm,uae,vYe,FYe,sR,TYe,MYe,EYe,Pm,bae,CYe,wYe,lR,AYe,LYe,yYe,Bm,vae,xYe,$Ye,iR,kYe,SYe,RYe,Im,Fae,PYe,BYe,dR,IYe,NYe,qYe,Nm,Tae,jYe,DYe,cR,GYe,OYe,VYe,qm,Mae,XYe,zYe,fR,QYe,WYe,HYe,jm,Eae,UYe,JYe,mR,YYe,ZYe,KYe,Dm,Cae,eZe,oZe,gR,rZe,tZe,aZe,Gm,wae,nZe,sZe,hR,lZe,iZe,dZe,Om,Aae,cZe,fZe,pR,mZe,gZe,hZe,Vm,Lae,pZe,_Ze,_R,uZe,bZe,vZe,Xm,yae,FZe,TZe,uR,MZe,EZe,CZe,zm,xae,wZe,AZe,bR,LZe,yZe,xZe,Qm,$ae,$Ze,kZe,vR,SZe,RZe,PZe,Wm,kae,BZe,IZe,FR,NZe,qZe,jZe,Hm,Sae,DZe,GZe,TR,OZe,VZe,XZe,Um,Rae,zZe,QZe,MR,WZe,HZe,UZe,Jm,Pae,JZe,YZe,ER,ZZe,KZe,eKe,Ym,Bae,oKe,rKe,CR,tKe,aKe,nKe,Zm,Iae,sKe,lKe,wR,iKe,dKe,cKe,Km,Nae,fKe,mKe,AR,gKe,hKe,pKe,eg,qae,_Ke,uKe,LR,bKe,vKe,FKe,og,jae,TKe,MKe,yR,EKe,CKe,wKe,rg,Dae,AKe,LKe,xR,yKe,xKe,$Ke,tg,Gae,kKe,SKe,$R,RKe,PKe,BKe,ag,Oae,IKe,NKe,kR,qKe,jKe,DKe,ng,Vae,GKe,OKe,SR,VKe,XKe,zKe,sg,Xae,QKe,WKe,RR,HKe,UKe,JKe,lg,zae,YKe,ZKe,PR,KKe,eeo,oeo,ig,Qae,reo,teo,BR,aeo,neo,seo,dg,Wae,leo,ieo,IR,deo,ceo,feo,cg,Hae,meo,geo,NR,heo,peo,_eo,fg,Uae,ueo,beo,qR,veo,Feo,Teo,mg,Jae,Meo,Eeo,jR,Ceo,weo,Aeo,gg,Yae,Leo,yeo,DR,xeo,$eo,keo,hg,Zae,Seo,Reo,GR,Peo,Beo,Ieo,pg,Kae,Neo,qeo,OR,jeo,Deo,Geo,_g,ene,Oeo,Veo,VR,Xeo,zeo,Qeo,ug,one,Weo,Heo,XR,Ueo,Jeo,Yeo,bg,rne,Zeo,Keo,zR,eoo,ooo,roo,vg,tne,too,aoo,QR,noo,soo,loo,Fg,ane,ioo,doo,WR,coo,foo,moo,Tg,nne,goo,hoo,HR,poo,_oo,uoo,Mg,sne,boo,voo,UR,Foo,Too,Moo,Eg,lne,Eoo,Coo,JR,woo,Aoo,Loo,Cg,ine,yoo,xoo,YR,$oo,koo,Soo,wg,dne,Roo,Poo,ZR,Boo,Ioo,Noo,Ag,cne,qoo,joo,KR,Doo,Goo,Ooo,Lg,fne,Voo,Xoo,eP,zoo,Qoo,Woo,yg,mne,Hoo,Uoo,oP,Joo,Yoo,Zoo,xg,gne,Koo,ero,rP,oro,rro,tro,$g,hne,aro,nro,tP,sro,lro,iro,kg,pne,dro,cro,aP,fro,mro,gro,Sg,_ne,hro,pro,nP,_ro,uro,bro,Rg,une,vro,Fro,sP,Tro,Mro,Ero,Pg,bne,Cro,wro,lP,Aro,Lro,yro,Bg,vne,xro,$ro,iP,kro,Sro,Rro,Ig,Fne,Pro,Bro,dP,Iro,Nro,qro,Ng,Tne,jro,Dro,cP,Gro,Oro,Vro,qg,Mne,Xro,zro,fP,Qro,Wro,Hro,jg,Ene,Uro,Jro,mP,Yro,Zro,Kro,Dg,eto,Gg,BL,oto,Cne,rto,GGe,$i,Og,wne,IL,tto,Ane,ato,OGe,Ao,NL,nto,qL,sto,gP,lto,ito,dto,jL,cto,Lne,fto,mto,gto,Lr,DL,hto,yne,pto,_to,ka,uto,xne,bto,vto,$ne,Fto,Tto,kne,Mto,Eto,Cto,k,qn,Sne,wto,Ato,hP,Lto,yto,pP,xto,$to,kto,jn,Rne,Sto,Rto,_P,Pto,Bto,uP,Ito,Nto,qto,Dn,Pne,jto,Dto,bP,Gto,Oto,vP,Vto,Xto,zto,Vg,Bne,Qto,Wto,FP,Hto,Uto,Jto,Gn,Ine,Yto,Zto,TP,Kto,eao,MP,oao,rao,tao,Xg,Nne,aao,nao,EP,sao,lao,iao,zg,qne,dao,cao,CP,fao,mao,gao,Qg,jne,hao,pao,wP,_ao,uao,bao,On,Dne,vao,Fao,AP,Tao,Mao,LP,Eao,Cao,wao,Vn,Gne,Aao,Lao,yP,yao,xao,xP,$ao,kao,Sao,Xn,One,Rao,Pao,$P,Bao,Iao,kP,Nao,qao,jao,Wg,Vne,Dao,Gao,SP,Oao,Vao,Xao,Hg,Xne,zao,Qao,RP,Wao,Hao,Uao,Ug,zne,Jao,Yao,PP,Zao,Kao,eno,zn,Qne,ono,rno,BP,tno,ano,IP,nno,sno,lno,Jg,Wne,ino,dno,NP,cno,fno,mno,Qn,Hne,gno,hno,qP,pno,_no,jP,uno,bno,vno,Wn,Une,Fno,Tno,DP,Mno,Eno,GP,Cno,wno,Ano,Hn,Jne,Lno,yno,OP,xno,$no,VP,kno,Sno,Rno,Yg,Yne,Pno,Bno,XP,Ino,Nno,qno,Un,Zne,jno,Dno,zP,Gno,Ono,QP,Vno,Xno,zno,Jn,Kne,Qno,Wno,WP,Hno,Uno,HP,Jno,Yno,Zno,Yn,ese,Kno,eso,UP,oso,rso,JP,tso,aso,nso,Zn,ose,sso,lso,YP,iso,dso,ZP,cso,fso,mso,Kn,rse,gso,hso,KP,pso,_so,eB,uso,bso,vso,es,tse,Fso,Tso,oB,Mso,Eso,rB,Cso,wso,Aso,Zg,ase,Lso,yso,tB,xso,$so,kso,os,nse,Sso,Rso,aB,Pso,Bso,nB,Iso,Nso,qso,Kg,sse,jso,Dso,sB,Gso,Oso,Vso,rs,lse,Xso,zso,lB,Qso,Wso,iB,Hso,Uso,Jso,ts,ise,Yso,Zso,dB,Kso,elo,cB,olo,rlo,tlo,as,dse,alo,nlo,fB,slo,llo,mB,ilo,dlo,clo,eh,cse,flo,mlo,gB,glo,hlo,plo,ns,fse,_lo,ulo,hB,blo,vlo,pB,Flo,Tlo,Mlo,ss,mse,Elo,Clo,_B,wlo,Alo,uB,Llo,ylo,xlo,oh,gse,$lo,klo,bB,Slo,Rlo,Plo,ls,hse,Blo,Ilo,vB,Nlo,qlo,FB,jlo,Dlo,Glo,is,pse,Olo,Vlo,TB,Xlo,zlo,MB,Qlo,Wlo,Hlo,ds,_se,Ulo,Jlo,EB,Ylo,Zlo,CB,Klo,eio,oio,cs,use,rio,tio,wB,aio,nio,AB,sio,lio,iio,fs,bse,dio,cio,LB,fio,mio,yB,gio,hio,pio,ms,vse,_io,uio,xB,bio,vio,$B,Fio,Tio,Mio,gs,Fse,Eio,Cio,kB,wio,Aio,SB,Lio,yio,xio,hs,Tse,$io,kio,RB,Sio,Rio,PB,Pio,Bio,Iio,rh,Mse,Nio,qio,BB,jio,Dio,Gio,ps,Ese,Oio,Vio,IB,Xio,zio,NB,Qio,Wio,Hio,th,Cse,Uio,Jio,qB,Yio,Zio,Kio,ah,wse,edo,odo,jB,rdo,tdo,ado,_s,Ase,ndo,sdo,DB,ldo,ido,GB,ddo,cdo,fdo,us,Lse,mdo,gdo,OB,hdo,pdo,VB,_do,udo,bdo,bs,yse,vdo,Fdo,XB,Tdo,Mdo,zB,Edo,Cdo,wdo,nh,xse,Ado,Ldo,QB,ydo,xdo,$do,vs,$se,kdo,Sdo,WB,Rdo,Pdo,HB,Bdo,Ido,Ndo,Fs,kse,qdo,jdo,UB,Ddo,Gdo,JB,Odo,Vdo,Xdo,Ts,Sse,zdo,Qdo,YB,Wdo,Hdo,ZB,Udo,Jdo,Ydo,Ms,Rse,Zdo,Kdo,KB,eco,oco,eI,rco,tco,aco,Es,Pse,nco,sco,oI,lco,ico,rI,dco,cco,fco,sh,Bse,mco,gco,tI,hco,pco,_co,Cs,Ise,uco,bco,aI,vco,Fco,nI,Tco,Mco,Eco,lh,Nse,Cco,wco,sI,Aco,Lco,yco,ih,qse,xco,$co,lI,kco,Sco,Rco,dh,jse,Pco,Bco,iI,Ico,Nco,qco,ch,Dse,jco,Dco,dI,Gco,Oco,Vco,ws,Gse,Xco,zco,cI,Qco,Wco,fI,Hco,Uco,Jco,fh,Ose,Yco,Zco,mI,Kco,efo,ofo,As,Vse,rfo,tfo,gI,afo,nfo,hI,sfo,lfo,ifo,Ls,Xse,dfo,cfo,pI,ffo,mfo,_I,gfo,hfo,pfo,ys,zse,_fo,ufo,uI,bfo,vfo,bI,Ffo,Tfo,Mfo,xs,Qse,Efo,Cfo,vI,wfo,Afo,FI,Lfo,yfo,xfo,$s,Wse,$fo,kfo,TI,Sfo,Rfo,MI,Pfo,Bfo,Ifo,ks,Hse,Nfo,qfo,EI,jfo,Dfo,CI,Gfo,Ofo,Vfo,mh,Use,Xfo,zfo,wI,Qfo,Wfo,Hfo,gh,Jse,Ufo,Jfo,AI,Yfo,Zfo,Kfo,Ss,Yse,emo,omo,LI,rmo,tmo,yI,amo,nmo,smo,Rs,Zse,lmo,imo,xI,dmo,cmo,$I,fmo,mmo,gmo,Ps,Kse,hmo,pmo,kI,_mo,umo,SI,bmo,vmo,Fmo,hh,ele,Tmo,Mmo,RI,Emo,Cmo,wmo,ph,ole,Amo,Lmo,PI,ymo,xmo,$mo,_h,rle,kmo,Smo,BI,Rmo,Pmo,Bmo,Bs,tle,Imo,Nmo,II,qmo,jmo,NI,Dmo,Gmo,Omo,Is,ale,Vmo,Xmo,qI,zmo,Qmo,jI,Wmo,Hmo,Umo,uh,nle,Jmo,Ymo,DI,Zmo,Kmo,ego,bh,sle,ogo,rgo,GI,tgo,ago,ngo,vh,lle,sgo,lgo,OI,igo,dgo,cgo,Ns,ile,fgo,mgo,VI,ggo,hgo,XI,pgo,_go,ugo,Fh,dle,bgo,vgo,zI,Fgo,Tgo,Mgo,Th,cle,Ego,Cgo,QI,wgo,Ago,Lgo,qs,fle,ygo,xgo,WI,$go,kgo,HI,Sgo,Rgo,Pgo,js,mle,Bgo,Igo,UI,Ngo,qgo,JI,jgo,Dgo,Ggo,Ds,gle,Ogo,Vgo,YI,Xgo,zgo,ZI,Qgo,Wgo,Hgo,Gs,hle,Ugo,Jgo,KI,Ygo,Zgo,eN,Kgo,eho,oho,Mh,rho,Eh,GL,tho,ple,aho,VGe,ki,Ch,_le,OL,nho,ule,sho,XGe,Lo,VL,lho,XL,iho,oN,dho,cho,fho,zL,mho,ble,gho,hho,pho,He,QL,_ho,vle,uho,bho,Sa,vho,Fle,Fho,Tho,Tle,Mho,Eho,Mle,Cho,who,Aho,Y,wh,Ele,Lho,yho,rN,xho,$ho,kho,Ah,Cle,Sho,Rho,tN,Pho,Bho,Iho,Lh,wle,Nho,qho,aN,jho,Dho,Gho,yh,Ale,Oho,Vho,nN,Xho,zho,Qho,xh,Lle,Who,Hho,sN,Uho,Jho,Yho,$h,yle,Zho,Kho,lN,epo,opo,rpo,kh,xle,tpo,apo,iN,npo,spo,lpo,Sh,$le,ipo,dpo,dN,cpo,fpo,mpo,Rh,kle,gpo,hpo,cN,ppo,_po,upo,Ph,Sle,bpo,vpo,fN,Fpo,Tpo,Mpo,Bh,Rle,Epo,Cpo,mN,wpo,Apo,Lpo,Ih,Ple,ypo,xpo,gN,$po,kpo,Spo,Nh,Ble,Rpo,Ppo,hN,Bpo,Ipo,Npo,qh,Ile,qpo,jpo,pN,Dpo,Gpo,Opo,jh,Nle,Vpo,Xpo,_N,zpo,Qpo,Wpo,Dh,qle,Hpo,Upo,uN,Jpo,Ypo,Zpo,Gh,jle,Kpo,e_o,bN,o_o,r_o,t_o,Oh,Dle,a_o,n_o,vN,s_o,l_o,i_o,Vh,Gle,d_o,c_o,FN,f_o,m_o,g_o,Xh,Ole,h_o,p_o,TN,__o,u_o,b_o,zh,Vle,v_o,F_o,MN,T_o,M_o,E_o,Qh,Xle,C_o,w_o,EN,A_o,L_o,y_o,Wh,zle,x_o,$_o,CN,k_o,S_o,R_o,Hh,Qle,P_o,B_o,wN,I_o,N_o,q_o,Uh,Wle,j_o,D_o,AN,G_o,O_o,V_o,Jh,Hle,X_o,z_o,LN,Q_o,W_o,H_o,Yh,Ule,U_o,J_o,yN,Y_o,Z_o,K_o,Zh,Jle,euo,ouo,xN,ruo,tuo,auo,Kh,Yle,nuo,suo,$N,luo,iuo,duo,ep,Zle,cuo,fuo,kN,muo,guo,huo,op,Kle,puo,_uo,SN,uuo,buo,vuo,rp,eie,Fuo,Tuo,RN,Muo,Euo,Cuo,tp,wuo,ap,Auo,np,WL,Luo,oie,yuo,zGe,Si,sp,rie,HL,xuo,tie,$uo,QGe,yo,UL,kuo,JL,Suo,PN,Ruo,Puo,Buo,YL,Iuo,aie,Nuo,quo,juo,Ue,ZL,Duo,nie,Guo,Ouo,Ri,Vuo,sie,Xuo,zuo,lie,Quo,Wuo,Huo,he,lp,iie,Uuo,Juo,BN,Yuo,Zuo,Kuo,ip,die,e7o,o7o,cie,r7o,t7o,a7o,dp,fie,n7o,s7o,IN,l7o,i7o,d7o,cp,mie,c7o,f7o,NN,m7o,g7o,h7o,fp,gie,p7o,_7o,qN,u7o,b7o,v7o,mp,hie,F7o,T7o,jN,M7o,E7o,C7o,gp,pie,w7o,A7o,DN,L7o,y7o,x7o,hp,_ie,$7o,k7o,GN,S7o,R7o,P7o,pp,uie,B7o,I7o,ON,N7o,q7o,j7o,_p,bie,D7o,G7o,VN,O7o,V7o,X7o,up,vie,z7o,Q7o,XN,W7o,H7o,U7o,bp,Fie,J7o,Y7o,zN,Z7o,K7o,e1o,vp,Tie,o1o,r1o,QN,t1o,a1o,n1o,Fp,Mie,s1o,l1o,WN,i1o,d1o,c1o,Tp,Eie,f1o,m1o,HN,g1o,h1o,p1o,Mp,Cie,_1o,u1o,UN,b1o,v1o,F1o,Ep,wie,T1o,M1o,JN,E1o,C1o,w1o,Cp,A1o,wp,L1o,Ap,KL,y1o,Aie,x1o,WGe,Pi,Lp,Lie,ey,$1o,yie,k1o,HGe,xo,oy,S1o,Bi,R1o,YN,P1o,B1o,ZN,I1o,N1o,q1o,ry,j1o,xie,D1o,G1o,O1o,nt,ty,V1o,$ie,X1o,z1o,Ii,Q1o,kie,W1o,H1o,KN,U1o,J1o,Y1o,yp,Z1o,Je,ay,K1o,Sie,e2o,o2o,Ra,r2o,Rie,t2o,a2o,Pie,n2o,s2o,Bie,l2o,i2o,d2o,y,xp,Iie,c2o,f2o,eq,m2o,g2o,h2o,$p,Nie,p2o,_2o,oq,u2o,b2o,v2o,kp,qie,F2o,T2o,rq,M2o,E2o,C2o,Sp,jie,w2o,A2o,tq,L2o,y2o,x2o,Rp,Die,$2o,k2o,aq,S2o,R2o,P2o,Pp,Gie,B2o,I2o,nq,N2o,q2o,j2o,Bp,Oie,D2o,G2o,sq,O2o,V2o,X2o,Ip,Vie,z2o,Q2o,lq,W2o,H2o,U2o,Np,Xie,J2o,Y2o,iq,Z2o,K2o,ebo,qp,zie,obo,rbo,dq,tbo,abo,nbo,jp,Qie,sbo,lbo,cq,ibo,dbo,cbo,Dp,Wie,fbo,mbo,fq,gbo,hbo,pbo,Gp,Hie,_bo,ubo,mq,bbo,vbo,Fbo,Op,Uie,Tbo,Mbo,gq,Ebo,Cbo,wbo,Vp,Jie,Abo,Lbo,hq,ybo,xbo,$bo,Xp,Yie,kbo,Sbo,pq,Rbo,Pbo,Bbo,zp,Zie,Ibo,Nbo,_q,qbo,jbo,Dbo,Qp,Kie,Gbo,Obo,uq,Vbo,Xbo,zbo,Wp,ede,Qbo,Wbo,bq,Hbo,Ubo,Jbo,Hp,ode,Ybo,Zbo,vq,Kbo,evo,ovo,Up,rde,rvo,tvo,Fq,avo,nvo,svo,Jp,tde,lvo,ivo,Tq,dvo,cvo,fvo,Yp,ade,mvo,gvo,Mq,hvo,pvo,_vo,Zp,nde,uvo,bvo,Eq,vvo,Fvo,Tvo,Kp,sde,Mvo,Evo,Cq,Cvo,wvo,Avo,e_,lde,Lvo,yvo,wq,xvo,$vo,kvo,o_,ide,Svo,Rvo,Aq,Pvo,Bvo,Ivo,r_,dde,Nvo,qvo,Lq,jvo,Dvo,Gvo,t_,cde,Ovo,Vvo,yq,Xvo,zvo,Qvo,a_,fde,Wvo,Hvo,xq,Uvo,Jvo,Yvo,n_,mde,Zvo,Kvo,$q,eFo,oFo,rFo,s_,gde,tFo,aFo,kq,nFo,sFo,lFo,l_,hde,iFo,dFo,Sq,cFo,fFo,mFo,Os,pde,gFo,hFo,Rq,pFo,_Fo,Pq,uFo,bFo,vFo,i_,_de,FFo,TFo,Bq,MFo,EFo,CFo,d_,ude,wFo,AFo,Iq,LFo,yFo,xFo,c_,bde,$Fo,kFo,Nq,SFo,RFo,PFo,f_,vde,BFo,IFo,qq,NFo,qFo,jFo,m_,Fde,DFo,GFo,jq,OFo,VFo,XFo,g_,Tde,zFo,QFo,Dq,WFo,HFo,UFo,h_,Mde,JFo,YFo,Gq,ZFo,KFo,e6o,p_,Ede,o6o,r6o,Oq,t6o,a6o,n6o,__,Cde,s6o,l6o,Vq,i6o,d6o,c6o,u_,wde,f6o,m6o,Xq,g6o,h6o,p6o,b_,Ade,_6o,u6o,zq,b6o,v6o,F6o,v_,Lde,T6o,M6o,Qq,E6o,C6o,w6o,F_,yde,A6o,L6o,Wq,y6o,x6o,$6o,T_,xde,k6o,S6o,Hq,R6o,P6o,B6o,M_,$de,I6o,N6o,Uq,q6o,j6o,D6o,E_,kde,G6o,O6o,Jq,V6o,X6o,z6o,C_,Sde,Q6o,W6o,Yq,H6o,U6o,J6o,w_,Rde,Y6o,Z6o,Zq,K6o,eTo,oTo,A_,Pde,rTo,tTo,Kq,aTo,nTo,sTo,L_,Bde,lTo,iTo,ej,dTo,cTo,fTo,y_,Ide,mTo,gTo,oj,hTo,pTo,_To,x_,Nde,uTo,bTo,rj,vTo,FTo,TTo,$_,qde,MTo,ETo,tj,CTo,wTo,ATo,k_,jde,LTo,yTo,aj,xTo,$To,kTo,S_,Dde,STo,RTo,nj,PTo,BTo,ITo,R_,Gde,NTo,qTo,sj,jTo,DTo,GTo,P_,Ode,OTo,VTo,lj,XTo,zTo,QTo,B_,Vde,WTo,HTo,ij,UTo,JTo,YTo,I_,Xde,ZTo,KTo,dj,eMo,oMo,rMo,N_,zde,tMo,aMo,cj,nMo,sMo,lMo,q_,Qde,iMo,dMo,fj,cMo,fMo,mMo,j_,Wde,gMo,hMo,mj,pMo,_Mo,uMo,D_,Hde,bMo,vMo,gj,FMo,TMo,MMo,G_,Ude,EMo,CMo,hj,wMo,AMo,LMo,O_,Jde,yMo,xMo,pj,$Mo,kMo,SMo,V_,Yde,RMo,PMo,_j,BMo,IMo,NMo,X_,Zde,qMo,jMo,uj,DMo,GMo,OMo,z_,Kde,VMo,XMo,bj,zMo,QMo,WMo,Q_,ece,HMo,UMo,vj,JMo,YMo,ZMo,W_,oce,KMo,eEo,Fj,oEo,rEo,tEo,H_,rce,aEo,nEo,Tj,sEo,lEo,iEo,U_,tce,dEo,cEo,Mj,fEo,mEo,gEo,J_,ace,hEo,pEo,Ej,_Eo,uEo,bEo,Y_,nce,vEo,FEo,Cj,TEo,MEo,EEo,Z_,sce,CEo,wEo,wj,AEo,LEo,yEo,K_,lce,xEo,$Eo,Aj,kEo,SEo,REo,eu,ice,PEo,BEo,Lj,IEo,NEo,qEo,ou,dce,jEo,DEo,yj,GEo,OEo,VEo,ru,cce,XEo,zEo,xj,QEo,WEo,HEo,tu,fce,UEo,JEo,$j,YEo,ZEo,KEo,au,mce,e4o,o4o,kj,r4o,t4o,a4o,nu,gce,n4o,s4o,Sj,l4o,i4o,d4o,su,hce,c4o,f4o,Rj,m4o,g4o,h4o,lu,pce,p4o,_4o,Pj,u4o,b4o,v4o,iu,_ce,F4o,T4o,Bj,M4o,E4o,C4o,du,uce,w4o,A4o,Ij,L4o,y4o,x4o,cu,bce,$4o,k4o,Nj,S4o,R4o,P4o,fu,vce,B4o,I4o,qj,N4o,q4o,j4o,mu,Fce,D4o,G4o,jj,O4o,V4o,X4o,gu,Tce,z4o,Q4o,Dj,W4o,H4o,U4o,hu,Mce,J4o,Y4o,Gj,Z4o,K4o,eCo,pu,Ece,oCo,rCo,Oj,tCo,aCo,nCo,_u,Cce,sCo,lCo,Vj,iCo,dCo,cCo,uu,wce,fCo,mCo,Xj,gCo,hCo,pCo,bu,Ace,_Co,uCo,zj,bCo,vCo,FCo,vu,Lce,TCo,MCo,Qj,ECo,CCo,wCo,Fu,yce,ACo,LCo,Wj,yCo,xCo,$Co,Tu,xce,kCo,SCo,Hj,RCo,PCo,BCo,Mu,$ce,ICo,NCo,Uj,qCo,jCo,DCo,Eu,kce,GCo,OCo,Jj,VCo,XCo,zCo,Cu,Sce,QCo,WCo,Yj,HCo,UCo,JCo,wu,Rce,YCo,ZCo,Zj,KCo,e5o,o5o,Au,Pce,r5o,t5o,Kj,a5o,n5o,s5o,Lu,l5o,Bce,i5o,d5o,Ice,c5o,f5o,yu,UGe,Ni,xu,Nce,ny,m5o,qce,g5o,JGe,$o,sy,h5o,qi,p5o,eD,_5o,u5o,oD,b5o,v5o,F5o,ly,T5o,jce,M5o,E5o,C5o,st,iy,w5o,Dce,A5o,L5o,ji,y5o,Gce,x5o,$5o,rD,k5o,S5o,R5o,$u,P5o,Ye,dy,B5o,Oce,I5o,N5o,Pa,q5o,Vce,j5o,D5o,Xce,G5o,O5o,zce,V5o,X5o,z5o,G,ku,Qce,Q5o,W5o,tD,H5o,U5o,J5o,Su,Wce,Y5o,Z5o,aD,K5o,e3o,o3o,Ru,Hce,r3o,t3o,nD,a3o,n3o,s3o,Pu,Uce,l3o,i3o,sD,d3o,c3o,f3o,Bu,Jce,m3o,g3o,lD,h3o,p3o,_3o,Iu,Yce,u3o,b3o,iD,v3o,F3o,T3o,Nu,Zce,M3o,E3o,dD,C3o,w3o,A3o,qu,Kce,L3o,y3o,cD,x3o,$3o,k3o,ju,efe,S3o,R3o,fD,P3o,B3o,I3o,Du,ofe,N3o,q3o,mD,j3o,D3o,G3o,Gu,rfe,O3o,V3o,gD,X3o,z3o,Q3o,Ou,tfe,W3o,H3o,hD,U3o,J3o,Y3o,Vu,afe,Z3o,K3o,pD,e0o,o0o,r0o,Xu,nfe,t0o,a0o,_D,n0o,s0o,l0o,zu,sfe,i0o,d0o,uD,c0o,f0o,m0o,Qu,lfe,g0o,h0o,bD,p0o,_0o,u0o,Wu,ife,b0o,v0o,vD,F0o,T0o,M0o,Hu,dfe,E0o,C0o,FD,w0o,A0o,L0o,Uu,cfe,y0o,x0o,TD,$0o,k0o,S0o,Ju,ffe,R0o,P0o,MD,B0o,I0o,N0o,Yu,mfe,q0o,j0o,ED,D0o,G0o,O0o,Zu,gfe,V0o,X0o,CD,z0o,Q0o,W0o,Ku,hfe,H0o,U0o,wD,J0o,Y0o,Z0o,e7,pfe,K0o,ewo,AD,owo,rwo,two,o7,_fe,awo,nwo,LD,swo,lwo,iwo,r7,ufe,dwo,cwo,yD,fwo,mwo,gwo,t7,bfe,hwo,pwo,xD,_wo,uwo,bwo,a7,vfe,vwo,Fwo,$D,Two,Mwo,Ewo,n7,Ffe,Cwo,wwo,kD,Awo,Lwo,ywo,s7,Tfe,xwo,$wo,SD,kwo,Swo,Rwo,l7,Mfe,Pwo,Bwo,RD,Iwo,Nwo,qwo,i7,Efe,jwo,Dwo,PD,Gwo,Owo,Vwo,d7,Cfe,Xwo,zwo,BD,Qwo,Wwo,Hwo,c7,wfe,Uwo,Jwo,ID,Ywo,Zwo,Kwo,f7,Afe,eAo,oAo,ND,rAo,tAo,aAo,m7,Lfe,nAo,sAo,qD,lAo,iAo,dAo,g7,yfe,cAo,fAo,jD,mAo,gAo,hAo,h7,xfe,pAo,_Ao,DD,uAo,bAo,vAo,p7,$fe,FAo,TAo,GD,MAo,EAo,CAo,_7,kfe,wAo,AAo,OD,LAo,yAo,xAo,u7,Sfe,$Ao,kAo,VD,SAo,RAo,PAo,b7,Rfe,BAo,IAo,XD,NAo,qAo,jAo,v7,Pfe,DAo,GAo,zD,OAo,VAo,XAo,F7,Bfe,zAo,QAo,QD,WAo,HAo,UAo,T7,JAo,Ife,YAo,ZAo,Nfe,KAo,eLo,M7,YGe,Di,E7,qfe,cy,oLo,jfe,rLo,ZGe,ko,fy,tLo,Gi,aLo,WD,nLo,sLo,HD,lLo,iLo,dLo,my,cLo,Dfe,fLo,mLo,gLo,lt,gy,hLo,Gfe,pLo,_Lo,Oi,uLo,Ofe,bLo,vLo,UD,FLo,TLo,MLo,C7,ELo,Ze,hy,CLo,Vfe,wLo,ALo,Ba,LLo,Xfe,yLo,xLo,zfe,$Lo,kLo,Qfe,SLo,RLo,PLo,z,w7,Wfe,BLo,ILo,JD,NLo,qLo,jLo,A7,Hfe,DLo,GLo,YD,OLo,VLo,XLo,L7,Ufe,zLo,QLo,ZD,WLo,HLo,ULo,y7,Jfe,JLo,YLo,KD,ZLo,KLo,eyo,x7,Yfe,oyo,ryo,eG,tyo,ayo,nyo,$7,Zfe,syo,lyo,oG,iyo,dyo,cyo,k7,Kfe,fyo,myo,rG,gyo,hyo,pyo,S7,eme,_yo,uyo,tG,byo,vyo,Fyo,R7,ome,Tyo,Myo,aG,Eyo,Cyo,wyo,P7,rme,Ayo,Lyo,nG,yyo,xyo,$yo,B7,tme,kyo,Syo,sG,Ryo,Pyo,Byo,I7,ame,Iyo,Nyo,lG,qyo,jyo,Dyo,N7,nme,Gyo,Oyo,iG,Vyo,Xyo,zyo,q7,sme,Qyo,Wyo,dG,Hyo,Uyo,Jyo,j7,lme,Yyo,Zyo,cG,Kyo,e8o,o8o,D7,ime,r8o,t8o,fG,a8o,n8o,s8o,G7,dme,l8o,i8o,mG,d8o,c8o,f8o,O7,cme,m8o,g8o,gG,h8o,p8o,_8o,V7,fme,u8o,b8o,hG,v8o,F8o,T8o,X7,mme,M8o,E8o,pG,C8o,w8o,A8o,z7,gme,L8o,y8o,_G,x8o,$8o,k8o,Q7,hme,S8o,R8o,uG,P8o,B8o,I8o,W7,pme,N8o,q8o,bG,j8o,D8o,G8o,H7,_me,O8o,V8o,vG,X8o,z8o,Q8o,U7,ume,W8o,H8o,FG,U8o,J8o,Y8o,J7,bme,Z8o,K8o,TG,e9o,o9o,r9o,Y7,vme,t9o,a9o,MG,n9o,s9o,l9o,Z7,Fme,i9o,d9o,EG,c9o,f9o,m9o,K7,Tme,g9o,h9o,CG,p9o,_9o,u9o,e1,Mme,b9o,v9o,wG,F9o,T9o,M9o,o1,Eme,E9o,C9o,AG,w9o,A9o,L9o,r1,Cme,y9o,x9o,LG,$9o,k9o,S9o,t1,wme,R9o,P9o,yG,B9o,I9o,N9o,a1,Ame,q9o,j9o,xG,D9o,G9o,O9o,n1,Lme,V9o,X9o,$G,z9o,Q9o,W9o,s1,yme,H9o,U9o,kG,J9o,Y9o,Z9o,l1,xme,K9o,exo,SG,oxo,rxo,txo,i1,$me,axo,nxo,RG,sxo,lxo,ixo,d1,dxo,kme,cxo,fxo,Sme,mxo,gxo,c1,KGe,Vi,f1,Rme,py,hxo,Pme,pxo,eOe,So,_y,_xo,Xi,uxo,PG,bxo,vxo,BG,Fxo,Txo,Mxo,uy,Exo,Bme,Cxo,wxo,Axo,it,by,Lxo,Ime,yxo,xxo,zi,$xo,Nme,kxo,Sxo,IG,Rxo,Pxo,Bxo,m1,Ixo,Ke,vy,Nxo,qme,qxo,jxo,Ia,Dxo,jme,Gxo,Oxo,Dme,Vxo,Xxo,Gme,zxo,Qxo,Wxo,Q,g1,Ome,Hxo,Uxo,NG,Jxo,Yxo,Zxo,h1,Vme,Kxo,e$o,qG,o$o,r$o,t$o,p1,Xme,a$o,n$o,jG,s$o,l$o,i$o,_1,zme,d$o,c$o,DG,f$o,m$o,g$o,u1,Qme,h$o,p$o,GG,_$o,u$o,b$o,b1,Wme,v$o,F$o,OG,T$o,M$o,E$o,v1,Hme,C$o,w$o,VG,A$o,L$o,y$o,F1,Ume,x$o,$$o,XG,k$o,S$o,R$o,T1,Jme,P$o,B$o,zG,I$o,N$o,q$o,M1,Yme,j$o,D$o,QG,G$o,O$o,V$o,E1,Zme,X$o,z$o,WG,Q$o,W$o,H$o,C1,Kme,U$o,J$o,HG,Y$o,Z$o,K$o,w1,ege,eko,oko,UG,rko,tko,ako,A1,oge,nko,sko,JG,lko,iko,dko,L1,rge,cko,fko,YG,mko,gko,hko,y1,tge,pko,_ko,ZG,uko,bko,vko,x1,age,Fko,Tko,KG,Mko,Eko,Cko,$1,nge,wko,Ako,eO,Lko,yko,xko,k1,sge,$ko,kko,oO,Sko,Rko,Pko,S1,lge,Bko,Iko,rO,Nko,qko,jko,R1,ige,Dko,Gko,tO,Oko,Vko,Xko,P1,dge,zko,Qko,aO,Wko,Hko,Uko,B1,cge,Jko,Yko,nO,Zko,Kko,eSo,I1,fge,oSo,rSo,sO,tSo,aSo,nSo,N1,mge,sSo,lSo,lO,iSo,dSo,cSo,q1,gge,fSo,mSo,iO,gSo,hSo,pSo,j1,hge,_So,uSo,dO,bSo,vSo,FSo,D1,pge,TSo,MSo,cO,ESo,CSo,wSo,G1,_ge,ASo,LSo,fO,ySo,xSo,$So,O1,uge,kSo,SSo,mO,RSo,PSo,BSo,V1,bge,ISo,NSo,gO,qSo,jSo,DSo,X1,vge,GSo,OSo,hO,VSo,XSo,zSo,z1,Fge,QSo,WSo,Tge,HSo,USo,JSo,Q1,Mge,YSo,ZSo,pO,KSo,eRo,oRo,W1,Ege,rRo,tRo,_O,aRo,nRo,sRo,H1,Cge,lRo,iRo,uO,dRo,cRo,fRo,U1,wge,mRo,gRo,bO,hRo,pRo,_Ro,J1,uRo,Age,bRo,vRo,Lge,FRo,TRo,Y1,oOe,Qi,Z1,yge,Fy,MRo,xge,ERo,rOe,Ro,Ty,CRo,Wi,wRo,vO,ARo,LRo,FO,yRo,xRo,$Ro,My,kRo,$ge,SRo,RRo,PRo,dt,Ey,BRo,kge,IRo,NRo,Hi,qRo,Sge,jRo,DRo,TO,GRo,ORo,VRo,K1,XRo,eo,Cy,zRo,Rge,QRo,WRo,Na,HRo,Pge,URo,JRo,Bge,YRo,ZRo,Ige,KRo,ePo,oPo,pe,e2,Nge,rPo,tPo,MO,aPo,nPo,sPo,o2,qge,lPo,iPo,EO,dPo,cPo,fPo,r2,jge,mPo,gPo,CO,hPo,pPo,_Po,t2,Dge,uPo,bPo,wO,vPo,FPo,TPo,a2,Gge,MPo,EPo,AO,CPo,wPo,APo,n2,Oge,LPo,yPo,LO,xPo,$Po,kPo,s2,Vge,SPo,RPo,yO,PPo,BPo,IPo,l2,Xge,NPo,qPo,xO,jPo,DPo,GPo,i2,zge,OPo,VPo,$O,XPo,zPo,QPo,d2,Qge,WPo,HPo,kO,UPo,JPo,YPo,c2,Wge,ZPo,KPo,SO,eBo,oBo,rBo,f2,Hge,tBo,aBo,RO,nBo,sBo,lBo,m2,Uge,iBo,dBo,PO,cBo,fBo,mBo,g2,Jge,gBo,hBo,BO,pBo,_Bo,uBo,h2,Yge,bBo,vBo,IO,FBo,TBo,MBo,p2,Zge,EBo,CBo,NO,wBo,ABo,LBo,_2,Kge,yBo,xBo,qO,$Bo,kBo,SBo,u2,RBo,ehe,PBo,BBo,ohe,IBo,NBo,b2,tOe,Ui,v2,rhe,wy,qBo,the,jBo,aOe,Po,Ay,DBo,Ji,GBo,jO,OBo,VBo,DO,XBo,zBo,QBo,Ly,WBo,ahe,HBo,UBo,JBo,ct,yy,YBo,nhe,ZBo,KBo,Yi,eIo,she,oIo,rIo,GO,tIo,aIo,nIo,F2,sIo,oo,xy,lIo,lhe,iIo,dIo,qa,cIo,ihe,fIo,mIo,dhe,gIo,hIo,che,pIo,_Io,uIo,N,T2,fhe,bIo,vIo,OO,FIo,TIo,MIo,M2,mhe,EIo,CIo,VO,wIo,AIo,LIo,E2,ghe,yIo,xIo,XO,$Io,kIo,SIo,C2,hhe,RIo,PIo,zO,BIo,IIo,NIo,w2,phe,qIo,jIo,QO,DIo,GIo,OIo,A2,_he,VIo,XIo,WO,zIo,QIo,WIo,L2,uhe,HIo,UIo,HO,JIo,YIo,ZIo,y2,bhe,KIo,eNo,UO,oNo,rNo,tNo,x2,vhe,aNo,nNo,JO,sNo,lNo,iNo,$2,Fhe,dNo,cNo,YO,fNo,mNo,gNo,k2,The,hNo,pNo,ZO,_No,uNo,bNo,S2,Mhe,vNo,FNo,KO,TNo,MNo,ENo,R2,Ehe,CNo,wNo,eV,ANo,LNo,yNo,P2,Che,xNo,$No,oV,kNo,SNo,RNo,B2,whe,PNo,BNo,rV,INo,NNo,qNo,I2,Ahe,jNo,DNo,tV,GNo,ONo,VNo,N2,Lhe,XNo,zNo,aV,QNo,WNo,HNo,q2,yhe,UNo,JNo,nV,YNo,ZNo,KNo,j2,xhe,eqo,oqo,sV,rqo,tqo,aqo,D2,$he,nqo,sqo,lV,lqo,iqo,dqo,G2,khe,cqo,fqo,iV,mqo,gqo,hqo,O2,She,pqo,_qo,dV,uqo,bqo,vqo,V2,Rhe,Fqo,Tqo,cV,Mqo,Eqo,Cqo,X2,Phe,wqo,Aqo,fV,Lqo,yqo,xqo,z2,Bhe,$qo,kqo,mV,Sqo,Rqo,Pqo,Q2,Ihe,Bqo,Iqo,gV,Nqo,qqo,jqo,W2,Nhe,Dqo,Gqo,hV,Oqo,Vqo,Xqo,H2,qhe,zqo,Qqo,pV,Wqo,Hqo,Uqo,U2,jhe,Jqo,Yqo,_V,Zqo,Kqo,ejo,J2,Dhe,ojo,rjo,uV,tjo,ajo,njo,Y2,Ghe,sjo,ljo,bV,ijo,djo,cjo,Z2,Ohe,fjo,mjo,vV,gjo,hjo,pjo,K2,Vhe,_jo,ujo,FV,bjo,vjo,Fjo,eb,Xhe,Tjo,Mjo,TV,Ejo,Cjo,wjo,ob,zhe,Ajo,Ljo,MV,yjo,xjo,$jo,rb,Qhe,kjo,Sjo,EV,Rjo,Pjo,Bjo,tb,Whe,Ijo,Njo,CV,qjo,jjo,Djo,ab,Hhe,Gjo,Ojo,wV,Vjo,Xjo,zjo,nb,Uhe,Qjo,Wjo,AV,Hjo,Ujo,Jjo,sb,Jhe,Yjo,Zjo,LV,Kjo,eDo,oDo,lb,Yhe,rDo,tDo,yV,aDo,nDo,sDo,ib,Zhe,lDo,iDo,xV,dDo,cDo,fDo,db,Khe,mDo,gDo,$V,hDo,pDo,_Do,cb,epe,uDo,bDo,kV,vDo,FDo,TDo,fb,ope,MDo,EDo,SV,CDo,wDo,ADo,mb,rpe,LDo,yDo,RV,xDo,$Do,kDo,gb,tpe,SDo,RDo,PV,PDo,BDo,IDo,hb,ape,NDo,qDo,BV,jDo,DDo,GDo,pb,npe,ODo,VDo,IV,XDo,zDo,QDo,_b,WDo,spe,HDo,UDo,lpe,JDo,YDo,ub,nOe,Zi,bb,ipe,$y,ZDo,dpe,KDo,sOe,Bo,ky,eGo,Ki,oGo,NV,rGo,tGo,qV,aGo,nGo,sGo,Sy,lGo,cpe,iGo,dGo,cGo,ft,Ry,fGo,fpe,mGo,gGo,ed,hGo,mpe,pGo,_Go,jV,uGo,bGo,vGo,vb,FGo,ro,Py,TGo,gpe,MGo,EGo,ja,CGo,hpe,wGo,AGo,ppe,LGo,yGo,_pe,xGo,$Go,kGo,K,Fb,upe,SGo,RGo,DV,PGo,BGo,IGo,Tb,bpe,NGo,qGo,GV,jGo,DGo,GGo,Mb,vpe,OGo,VGo,OV,XGo,zGo,QGo,Eb,Fpe,WGo,HGo,VV,UGo,JGo,YGo,Cb,Tpe,ZGo,KGo,XV,eOo,oOo,rOo,wb,Mpe,tOo,aOo,zV,nOo,sOo,lOo,Ab,Epe,iOo,dOo,QV,cOo,fOo,mOo,Lb,Cpe,gOo,hOo,WV,pOo,_Oo,uOo,yb,wpe,bOo,vOo,HV,FOo,TOo,MOo,xb,Ape,EOo,COo,UV,wOo,AOo,LOo,$b,Lpe,yOo,xOo,JV,$Oo,kOo,SOo,kb,ype,ROo,POo,YV,BOo,IOo,NOo,Sb,xpe,qOo,jOo,ZV,DOo,GOo,OOo,Rb,$pe,VOo,XOo,KV,zOo,QOo,WOo,Pb,kpe,HOo,UOo,eX,JOo,YOo,ZOo,Bb,Spe,KOo,eVo,oX,oVo,rVo,tVo,Ib,Rpe,aVo,nVo,rX,sVo,lVo,iVo,Nb,Ppe,dVo,cVo,tX,fVo,mVo,gVo,qb,Bpe,hVo,pVo,aX,_Vo,uVo,bVo,jb,Ipe,vVo,FVo,nX,TVo,MVo,EVo,Db,Npe,CVo,wVo,sX,AVo,LVo,yVo,Gb,qpe,xVo,$Vo,lX,kVo,SVo,RVo,Ob,jpe,PVo,BVo,iX,IVo,NVo,qVo,Vb,Dpe,jVo,DVo,dX,GVo,OVo,VVo,Xb,Gpe,XVo,zVo,cX,QVo,WVo,HVo,zb,Ope,UVo,JVo,fX,YVo,ZVo,KVo,Qb,Vpe,eXo,oXo,mX,rXo,tXo,aXo,Wb,Xpe,nXo,sXo,gX,lXo,iXo,dXo,Hb,zpe,cXo,fXo,hX,mXo,gXo,hXo,Ub,Qpe,pXo,_Xo,pX,uXo,bXo,vXo,Jb,FXo,Wpe,TXo,MXo,Hpe,EXo,CXo,Yb,lOe,od,Zb,Upe,By,wXo,Jpe,AXo,iOe,Io,Iy,LXo,rd,yXo,_X,xXo,$Xo,uX,kXo,SXo,RXo,Ny,PXo,Ype,BXo,IXo,NXo,mt,qy,qXo,Zpe,jXo,DXo,td,GXo,Kpe,OXo,VXo,bX,XXo,zXo,QXo,Kb,WXo,to,jy,HXo,e_e,UXo,JXo,Da,YXo,o_e,ZXo,KXo,r_e,ezo,ozo,t_e,rzo,tzo,azo,No,ev,a_e,nzo,szo,vX,lzo,izo,dzo,ov,n_e,czo,fzo,FX,mzo,gzo,hzo,rv,s_e,pzo,_zo,TX,uzo,bzo,vzo,tv,l_e,Fzo,Tzo,MX,Mzo,Ezo,Czo,av,i_e,wzo,Azo,EX,Lzo,yzo,xzo,nv,d_e,$zo,kzo,CX,Szo,Rzo,Pzo,sv,Bzo,c_e,Izo,Nzo,f_e,qzo,jzo,lv,dOe,ad,iv,m_e,Dy,Dzo,g_e,Gzo,cOe,qo,Gy,Ozo,nd,Vzo,wX,Xzo,zzo,AX,Qzo,Wzo,Hzo,Oy,Uzo,h_e,Jzo,Yzo,Zzo,gt,Vy,Kzo,p_e,eQo,oQo,sd,rQo,__e,tQo,aQo,LX,nQo,sQo,lQo,dv,iQo,ao,Xy,dQo,u_e,cQo,fQo,Ga,mQo,b_e,gQo,hQo,v_e,pQo,_Qo,F_e,uQo,bQo,vQo,H,cv,T_e,FQo,TQo,yX,MQo,EQo,CQo,fv,M_e,wQo,AQo,xX,LQo,yQo,xQo,mv,E_e,$Qo,kQo,$X,SQo,RQo,PQo,gv,C_e,BQo,IQo,kX,NQo,qQo,jQo,hv,w_e,DQo,GQo,SX,OQo,VQo,XQo,pv,A_e,zQo,QQo,RX,WQo,HQo,UQo,_v,L_e,JQo,YQo,PX,ZQo,KQo,eWo,uv,y_e,oWo,rWo,BX,tWo,aWo,nWo,bv,x_e,sWo,lWo,IX,iWo,dWo,cWo,vv,$_e,fWo,mWo,NX,gWo,hWo,pWo,Fv,k_e,_Wo,uWo,qX,bWo,vWo,FWo,Tv,S_e,TWo,MWo,jX,EWo,CWo,wWo,Mv,R_e,AWo,LWo,DX,yWo,xWo,$Wo,Ev,P_e,kWo,SWo,GX,RWo,PWo,BWo,Cv,B_e,IWo,NWo,OX,qWo,jWo,DWo,wv,I_e,GWo,OWo,VX,VWo,XWo,zWo,Av,N_e,QWo,WWo,XX,HWo,UWo,JWo,Lv,q_e,YWo,ZWo,zX,KWo,eHo,oHo,yv,j_e,rHo,tHo,QX,aHo,nHo,sHo,xv,D_e,lHo,iHo,WX,dHo,cHo,fHo,$v,G_e,mHo,gHo,HX,hHo,pHo,_Ho,kv,O_e,uHo,bHo,UX,vHo,FHo,THo,Sv,V_e,MHo,EHo,JX,CHo,wHo,AHo,Rv,X_e,LHo,yHo,YX,xHo,$Ho,kHo,Pv,z_e,SHo,RHo,ZX,PHo,BHo,IHo,Bv,Q_e,NHo,qHo,KX,jHo,DHo,GHo,Iv,W_e,OHo,VHo,ez,XHo,zHo,QHo,Nv,H_e,WHo,HHo,oz,UHo,JHo,YHo,qv,U_e,ZHo,KHo,rz,eUo,oUo,rUo,jv,J_e,tUo,aUo,tz,nUo,sUo,lUo,Dv,Y_e,iUo,dUo,az,cUo,fUo,mUo,Gv,Z_e,gUo,hUo,nz,pUo,_Uo,uUo,Ov,K_e,bUo,vUo,sz,FUo,TUo,MUo,Vv,eue,EUo,CUo,lz,wUo,AUo,LUo,Xv,oue,yUo,xUo,iz,$Uo,kUo,SUo,zv,rue,RUo,PUo,dz,BUo,IUo,NUo,Qv,qUo,tue,jUo,DUo,aue,GUo,OUo,Wv,fOe,ld,Hv,nue,zy,VUo,sue,XUo,mOe,jo,Qy,zUo,id,QUo,cz,WUo,HUo,fz,UUo,JUo,YUo,Wy,ZUo,lue,KUo,eJo,oJo,ht,Hy,rJo,iue,tJo,aJo,dd,nJo,due,sJo,lJo,mz,iJo,dJo,cJo,Uv,fJo,no,Uy,mJo,cue,gJo,hJo,Oa,pJo,fue,_Jo,uJo,mue,bJo,vJo,gue,FJo,TJo,MJo,V,Jv,hue,EJo,CJo,gz,wJo,AJo,LJo,Yv,pue,yJo,xJo,hz,$Jo,kJo,SJo,Zv,_ue,RJo,PJo,pz,BJo,IJo,NJo,Kv,uue,qJo,jJo,_z,DJo,GJo,OJo,eF,bue,VJo,XJo,uz,zJo,QJo,WJo,oF,vue,HJo,UJo,bz,JJo,YJo,ZJo,rF,Fue,KJo,eYo,vz,oYo,rYo,tYo,tF,Tue,aYo,nYo,Fz,sYo,lYo,iYo,aF,Mue,dYo,cYo,Tz,fYo,mYo,gYo,nF,Eue,hYo,pYo,Mz,_Yo,uYo,bYo,sF,Cue,vYo,FYo,Ez,TYo,MYo,EYo,lF,wue,CYo,wYo,Cz,AYo,LYo,yYo,iF,Aue,xYo,$Yo,wz,kYo,SYo,RYo,dF,Lue,PYo,BYo,Az,IYo,NYo,qYo,cF,yue,jYo,DYo,Lz,GYo,OYo,VYo,fF,xue,XYo,zYo,yz,QYo,WYo,HYo,mF,$ue,UYo,JYo,xz,YYo,ZYo,KYo,gF,kue,eZo,oZo,$z,rZo,tZo,aZo,hF,Sue,nZo,sZo,kz,lZo,iZo,dZo,pF,Rue,cZo,fZo,Sz,mZo,gZo,hZo,_F,Pue,pZo,_Zo,Rz,uZo,bZo,vZo,uF,Bue,FZo,TZo,Pz,MZo,EZo,CZo,bF,Iue,wZo,AZo,Bz,LZo,yZo,xZo,vF,Nue,$Zo,kZo,Iz,SZo,RZo,PZo,FF,que,BZo,IZo,Nz,NZo,qZo,jZo,TF,jue,DZo,GZo,qz,OZo,VZo,XZo,MF,Due,zZo,QZo,jz,WZo,HZo,UZo,EF,Gue,JZo,YZo,Dz,ZZo,KZo,eKo,CF,Oue,oKo,rKo,Gz,tKo,aKo,nKo,wF,Vue,sKo,lKo,Oz,iKo,dKo,cKo,AF,Xue,fKo,mKo,Vz,gKo,hKo,pKo,LF,zue,_Ko,uKo,Xz,bKo,vKo,FKo,yF,Que,TKo,MKo,zz,EKo,CKo,wKo,xF,Wue,AKo,LKo,Qz,yKo,xKo,$Ko,$F,Hue,kKo,SKo,Wz,RKo,PKo,BKo,kF,Uue,IKo,NKo,Hz,qKo,jKo,DKo,SF,Jue,GKo,OKo,Uz,VKo,XKo,zKo,RF,Yue,QKo,WKo,Jz,HKo,UKo,JKo,PF,Zue,YKo,ZKo,Yz,KKo,eer,oer,BF,Kue,rer,ter,Zz,aer,ner,ser,IF,e7e,ler,ier,Kz,der,cer,fer,NF,mer,o7e,ger,her,r7e,per,_er,qF,gOe,cd,jF,t7e,Jy,uer,a7e,ber,hOe,Do,Yy,ver,fd,Fer,eQ,Ter,Mer,oQ,Eer,Cer,wer,Zy,Aer,n7e,Ler,yer,xer,pt,Ky,$er,s7e,ker,Ser,md,Rer,l7e,Per,Ber,rQ,Ier,Ner,qer,DF,jer,so,e8,Der,i7e,Ger,Oer,Va,Ver,d7e,Xer,zer,c7e,Qer,Wer,f7e,Her,Uer,Jer,m7e,GF,g7e,Yer,Zer,tQ,Ker,eor,oor,OF,ror,h7e,tor,aor,p7e,nor,sor,VF,pOe,gd,XF,_7e,o8,lor,u7e,ior,_Oe,Go,r8,dor,hd,cor,aQ,mor,gor,nQ,hor,por,_or,t8,uor,b7e,bor,vor,For,_t,a8,Tor,v7e,Mor,Eor,pd,Cor,F7e,wor,Aor,sQ,Lor,yor,xor,zF,$or,lo,n8,kor,T7e,Sor,Ror,Xa,Por,M7e,Bor,Ior,E7e,Nor,qor,C7e,jor,Dor,Gor,Fe,QF,w7e,Oor,Vor,lQ,Xor,zor,Qor,WF,A7e,Wor,Hor,iQ,Uor,Jor,Yor,HF,L7e,Zor,Kor,dQ,err,orr,rrr,UF,y7e,trr,arr,cQ,nrr,srr,lrr,Vs,x7e,irr,drr,fQ,crr,frr,mQ,mrr,grr,hrr,JF,$7e,prr,_rr,gQ,urr,brr,vrr,Xs,k7e,Frr,Trr,hQ,Mrr,Err,pQ,Crr,wrr,Arr,ut,S7e,Lrr,yrr,_Q,xrr,$rr,uQ,krr,Srr,bQ,Rrr,Prr,Brr,YF,R7e,Irr,Nrr,vQ,qrr,jrr,Drr,ZF,P7e,Grr,Orr,FQ,Vrr,Xrr,zrr,KF,B7e,Qrr,Wrr,TQ,Hrr,Urr,Jrr,e6,I7e,Yrr,Zrr,MQ,Krr,etr,otr,o6,N7e,rtr,ttr,EQ,atr,ntr,str,r6,q7e,ltr,itr,CQ,dtr,ctr,ftr,t6,j7e,mtr,gtr,wQ,htr,ptr,_tr,a6,utr,D7e,btr,vtr,G7e,Ftr,Ttr,n6,uOe,_d,s6,O7e,s8,Mtr,V7e,Etr,bOe,Oo,l8,Ctr,ud,wtr,AQ,Atr,Ltr,LQ,ytr,xtr,$tr,i8,ktr,X7e,Str,Rtr,Ptr,bt,d8,Btr,z7e,Itr,Ntr,bd,qtr,Q7e,jtr,Dtr,yQ,Gtr,Otr,Vtr,l6,Xtr,io,c8,ztr,W7e,Qtr,Wtr,za,Htr,H7e,Utr,Jtr,U7e,Ytr,Ztr,J7e,Ktr,ear,oar,Y7e,i6,Z7e,rar,tar,xQ,aar,nar,sar,d6,lar,K7e,iar,dar,e1e,car,far,c6,vOe,vd,f6,o1e,f8,mar,r1e,gar,FOe,Vo,m8,har,Fd,par,$Q,_ar,uar,kQ,bar,Far,Tar,g8,Mar,t1e,Ear,Car,war,vt,h8,Aar,a1e,Lar,yar,Td,xar,n1e,$ar,kar,SQ,Sar,Rar,Par,m6,Bar,co,p8,Iar,s1e,Nar,qar,Qa,jar,l1e,Dar,Gar,i1e,Oar,Var,d1e,Xar,zar,Qar,c1e,g6,f1e,War,Har,RQ,Uar,Jar,Yar,h6,Zar,m1e,Kar,enr,g1e,onr,rnr,p6,TOe,Md,_6,h1e,_8,tnr,p1e,anr,MOe,Xo,u8,nnr,Ed,snr,PQ,lnr,inr,BQ,dnr,cnr,fnr,b8,mnr,_1e,gnr,hnr,pnr,Ft,v8,_nr,u1e,unr,bnr,Cd,vnr,b1e,Fnr,Tnr,IQ,Mnr,Enr,Cnr,u6,wnr,fo,F8,Anr,v1e,Lnr,ynr,Wa,xnr,F1e,$nr,knr,T1e,Snr,Rnr,M1e,Pnr,Bnr,Inr,Pe,b6,E1e,Nnr,qnr,NQ,jnr,Dnr,Gnr,v6,C1e,Onr,Vnr,qQ,Xnr,znr,Qnr,F6,w1e,Wnr,Hnr,jQ,Unr,Jnr,Ynr,T6,A1e,Znr,Knr,DQ,esr,osr,rsr,M6,L1e,tsr,asr,GQ,nsr,ssr,lsr,E6,y1e,isr,dsr,OQ,csr,fsr,msr,C6,x1e,gsr,hsr,VQ,psr,_sr,usr,w6,$1e,bsr,vsr,XQ,Fsr,Tsr,Msr,A6,k1e,Esr,Csr,zQ,wsr,Asr,Lsr,L6,ysr,S1e,xsr,$sr,R1e,ksr,Ssr,y6,EOe,wd,x6,P1e,T8,Rsr,B1e,Psr,COe,zo,M8,Bsr,Ad,Isr,QQ,Nsr,qsr,WQ,jsr,Dsr,Gsr,E8,Osr,I1e,Vsr,Xsr,zsr,Tt,C8,Qsr,N1e,Wsr,Hsr,Ld,Usr,q1e,Jsr,Ysr,HQ,Zsr,Ksr,elr,$6,olr,mo,w8,rlr,j1e,tlr,alr,Ha,nlr,D1e,slr,llr,G1e,ilr,dlr,O1e,clr,flr,mlr,et,k6,V1e,glr,hlr,UQ,plr,_lr,ulr,S6,X1e,blr,vlr,JQ,Flr,Tlr,Mlr,R6,z1e,Elr,Clr,YQ,wlr,Alr,Llr,P6,Q1e,ylr,xlr,ZQ,$lr,klr,Slr,B6,W1e,Rlr,Plr,KQ,Blr,Ilr,Nlr,I6,qlr,H1e,jlr,Dlr,U1e,Glr,Olr,N6,wOe,yd,q6,J1e,A8,Vlr,Y1e,Xlr,AOe,Qo,L8,zlr,xd,Qlr,eW,Wlr,Hlr,oW,Ulr,Jlr,Ylr,y8,Zlr,Z1e,Klr,eir,oir,Mt,x8,rir,K1e,tir,air,$d,nir,e2e,sir,lir,rW,iir,dir,cir,j6,fir,go,$8,mir,o2e,gir,hir,Ua,pir,r2e,_ir,uir,t2e,bir,vir,a2e,Fir,Tir,Mir,Le,D6,n2e,Eir,Cir,tW,wir,Air,Lir,G6,s2e,yir,xir,aW,$ir,kir,Sir,O6,l2e,Rir,Pir,nW,Bir,Iir,Nir,V6,i2e,qir,jir,sW,Dir,Gir,Oir,X6,d2e,Vir,Xir,lW,zir,Qir,Wir,z6,c2e,Hir,Uir,iW,Jir,Yir,Zir,Q6,f2e,Kir,edr,dW,odr,rdr,tdr,W6,m2e,adr,ndr,cW,sdr,ldr,idr,H6,g2e,ddr,cdr,fW,fdr,mdr,gdr,U6,h2e,hdr,pdr,mW,_dr,udr,bdr,J6,vdr,p2e,Fdr,Tdr,_2e,Mdr,Edr,Y6,LOe,kd,Z6,u2e,k8,Cdr,b2e,wdr,yOe,Wo,S8,Adr,Sd,Ldr,gW,ydr,xdr,hW,$dr,kdr,Sdr,R8,Rdr,v2e,Pdr,Bdr,Idr,Et,P8,Ndr,F2e,qdr,jdr,Rd,Ddr,T2e,Gdr,Odr,pW,Vdr,Xdr,zdr,K6,Qdr,ho,B8,Wdr,M2e,Hdr,Udr,Ja,Jdr,E2e,Ydr,Zdr,C2e,Kdr,ecr,w2e,ocr,rcr,tcr,I8,eT,A2e,acr,ncr,_W,scr,lcr,icr,oT,L2e,dcr,ccr,uW,fcr,mcr,gcr,rT,hcr,y2e,pcr,_cr,x2e,ucr,bcr,tT,xOe,Pd,aT,$2e,N8,vcr,k2e,Fcr,$Oe,Ho,q8,Tcr,Bd,Mcr,bW,Ecr,Ccr,vW,wcr,Acr,Lcr,j8,ycr,S2e,xcr,$cr,kcr,Ct,D8,Scr,R2e,Rcr,Pcr,Id,Bcr,P2e,Icr,Ncr,FW,qcr,jcr,Dcr,nT,Gcr,po,G8,Ocr,B2e,Vcr,Xcr,Ya,zcr,I2e,Qcr,Wcr,N2e,Hcr,Ucr,q2e,Jcr,Ycr,Zcr,ot,sT,j2e,Kcr,efr,TW,ofr,rfr,tfr,lT,D2e,afr,nfr,MW,sfr,lfr,ifr,iT,G2e,dfr,cfr,EW,ffr,mfr,gfr,dT,O2e,hfr,pfr,CW,_fr,ufr,bfr,cT,V2e,vfr,Ffr,wW,Tfr,Mfr,Efr,fT,Cfr,X2e,wfr,Afr,z2e,Lfr,yfr,mT,kOe,Nd,gT,Q2e,O8,xfr,W2e,$fr,SOe,Uo,V8,kfr,qd,Sfr,AW,Rfr,Pfr,LW,Bfr,Ifr,Nfr,X8,qfr,H2e,jfr,Dfr,Gfr,wt,z8,Ofr,U2e,Vfr,Xfr,jd,zfr,J2e,Qfr,Wfr,yW,Hfr,Ufr,Jfr,hT,Yfr,_o,Q8,Zfr,Y2e,Kfr,emr,Za,omr,Z2e,rmr,tmr,K2e,amr,nmr,ebe,smr,lmr,imr,Dd,pT,obe,dmr,cmr,xW,fmr,mmr,gmr,_T,rbe,hmr,pmr,$W,_mr,umr,bmr,uT,tbe,vmr,Fmr,kW,Tmr,Mmr,Emr,bT,Cmr,abe,wmr,Amr,nbe,Lmr,ymr,vT,ROe,Gd,FT,sbe,W8,xmr,lbe,$mr,POe,Jo,H8,kmr,Od,Smr,SW,Rmr,Pmr,RW,Bmr,Imr,Nmr,U8,qmr,ibe,jmr,Dmr,Gmr,At,J8,Omr,dbe,Vmr,Xmr,Vd,zmr,cbe,Qmr,Wmr,PW,Hmr,Umr,Jmr,TT,Ymr,uo,Y8,Zmr,fbe,Kmr,egr,Ka,ogr,mbe,rgr,tgr,gbe,agr,ngr,hbe,sgr,lgr,igr,Z8,MT,pbe,dgr,cgr,BW,fgr,mgr,ggr,ET,_be,hgr,pgr,IW,_gr,ugr,bgr,CT,vgr,ube,Fgr,Tgr,bbe,Mgr,Egr,wT,BOe,Xd,AT,vbe,K8,Cgr,Fbe,wgr,IOe,Yo,e9,Agr,zd,Lgr,NW,ygr,xgr,qW,$gr,kgr,Sgr,o9,Rgr,Tbe,Pgr,Bgr,Igr,Lt,r9,Ngr,Mbe,qgr,jgr,Qd,Dgr,Ebe,Ggr,Ogr,jW,Vgr,Xgr,zgr,LT,Qgr,bo,t9,Wgr,Cbe,Hgr,Ugr,en,Jgr,wbe,Ygr,Zgr,Abe,Kgr,ehr,Lbe,ohr,rhr,thr,ybe,yT,xbe,ahr,nhr,DW,shr,lhr,ihr,xT,dhr,$be,chr,fhr,kbe,mhr,ghr,$T,NOe,Wd,kT,Sbe,a9,hhr,Rbe,phr,qOe,Zo,n9,_hr,Hd,uhr,GW,bhr,vhr,OW,Fhr,Thr,Mhr,s9,Ehr,Pbe,Chr,whr,Ahr,yt,l9,Lhr,Bbe,yhr,xhr,Ud,$hr,Ibe,khr,Shr,VW,Rhr,Phr,Bhr,ST,Ihr,vo,i9,Nhr,Nbe,qhr,jhr,on,Dhr,qbe,Ghr,Ohr,jbe,Vhr,Xhr,Dbe,zhr,Qhr,Whr,rn,RT,Gbe,Hhr,Uhr,XW,Jhr,Yhr,Zhr,PT,Obe,Khr,epr,zW,opr,rpr,tpr,BT,Vbe,apr,npr,QW,spr,lpr,ipr,IT,Xbe,dpr,cpr,WW,fpr,mpr,gpr,NT,hpr,zbe,ppr,_pr,Qbe,upr,bpr,qT,jOe,Jd,jT,Wbe,d9,vpr,Hbe,Fpr,DOe,Ko,c9,Tpr,Yd,Mpr,HW,Epr,Cpr,UW,wpr,Apr,Lpr,f9,ypr,Ube,xpr,$pr,kpr,xt,m9,Spr,Jbe,Rpr,Ppr,Zd,Bpr,Ybe,Ipr,Npr,JW,qpr,jpr,Dpr,DT,Gpr,Fo,g9,Opr,Zbe,Vpr,Xpr,tn,zpr,Kbe,Qpr,Wpr,eve,Hpr,Upr,ove,Jpr,Ypr,Zpr,rve,GT,tve,Kpr,e_r,YW,o_r,r_r,t_r,OT,a_r,ave,n_r,s_r,nve,l_r,i_r,VT,GOe,Kd,XT,sve,h9,d_r,lve,c_r,OOe,er,p9,f_r,ec,m_r,ZW,g_r,h_r,KW,p_r,__r,u_r,_9,b_r,ive,v_r,F_r,T_r,$t,u9,M_r,dve,E_r,C_r,oc,w_r,cve,A_r,L_r,eH,y_r,x_r,$_r,zT,k_r,yr,b9,S_r,fve,R_r,P_r,an,B_r,mve,I_r,N_r,gve,q_r,j_r,hve,D_r,G_r,O_r,j,QT,pve,V_r,X_r,oH,z_r,Q_r,W_r,WT,_ve,H_r,U_r,rH,J_r,Y_r,Z_r,HT,uve,K_r,eur,tH,our,rur,tur,UT,bve,aur,nur,aH,sur,lur,iur,JT,vve,dur,cur,nH,fur,mur,gur,YT,Fve,hur,pur,sH,_ur,uur,bur,ZT,Tve,vur,Fur,lH,Tur,Mur,Eur,KT,Mve,Cur,wur,iH,Aur,Lur,yur,eM,Eve,xur,$ur,dH,kur,Sur,Rur,oM,Cve,Pur,Bur,cH,Iur,Nur,qur,rM,wve,jur,Dur,fH,Gur,Our,Vur,tM,Ave,Xur,zur,mH,Qur,Wur,Hur,aM,Lve,Uur,Jur,gH,Yur,Zur,Kur,nM,yve,e7r,o7r,hH,r7r,t7r,a7r,sM,xve,n7r,s7r,pH,l7r,i7r,d7r,lM,$ve,c7r,f7r,_H,m7r,g7r,h7r,iM,kve,p7r,_7r,uH,u7r,b7r,v7r,zs,Sve,F7r,T7r,bH,M7r,E7r,vH,C7r,w7r,A7r,dM,Rve,L7r,y7r,FH,x7r,$7r,k7r,cM,Pve,S7r,R7r,TH,P7r,B7r,I7r,fM,Bve,N7r,q7r,MH,j7r,D7r,G7r,mM,Ive,O7r,V7r,EH,X7r,z7r,Q7r,gM,Nve,W7r,H7r,CH,U7r,J7r,Y7r,hM,qve,Z7r,K7r,wH,e1r,o1r,r1r,pM,jve,t1r,a1r,AH,n1r,s1r,l1r,_M,Dve,i1r,d1r,LH,c1r,f1r,m1r,uM,Gve,g1r,h1r,yH,p1r,_1r,u1r,bM,Ove,b1r,v1r,xH,F1r,T1r,M1r,vM,Vve,E1r,C1r,$H,w1r,A1r,L1r,FM,Xve,y1r,x1r,kH,$1r,k1r,S1r,TM,zve,R1r,P1r,SH,B1r,I1r,N1r,MM,Qve,q1r,j1r,RH,D1r,G1r,O1r,EM,Wve,V1r,X1r,PH,z1r,Q1r,W1r,CM,Hve,H1r,U1r,BH,J1r,Y1r,Z1r,wM,Uve,K1r,e2r,IH,o2r,r2r,t2r,AM,Jve,a2r,n2r,NH,s2r,l2r,i2r,LM,Yve,d2r,c2r,qH,f2r,m2r,g2r,yM,Zve,h2r,p2r,jH,_2r,u2r,b2r,xM,Kve,v2r,F2r,DH,T2r,M2r,E2r,$M,eFe,C2r,w2r,GH,A2r,L2r,y2r,kM,oFe,x2r,$2r,OH,k2r,S2r,R2r,SM,rFe,P2r,B2r,VH,I2r,N2r,q2r,RM,tFe,j2r,D2r,XH,G2r,O2r,V2r,PM,aFe,X2r,z2r,zH,Q2r,W2r,H2r,BM,nFe,U2r,J2r,QH,Y2r,Z2r,K2r,IM,sFe,ebr,obr,WH,rbr,tbr,abr,NM,lFe,nbr,sbr,HH,lbr,ibr,dbr,qM,VOe,rc,jM,iFe,v9,cbr,dFe,fbr,XOe,or,F9,mbr,tc,gbr,UH,hbr,pbr,JH,_br,ubr,bbr,T9,vbr,cFe,Fbr,Tbr,Mbr,kt,M9,Ebr,fFe,Cbr,wbr,ac,Abr,mFe,Lbr,ybr,YH,xbr,$br,kbr,DM,Sbr,xr,E9,Rbr,gFe,Pbr,Bbr,nn,Ibr,hFe,Nbr,qbr,pFe,jbr,Dbr,_Fe,Gbr,Obr,Vbr,se,GM,uFe,Xbr,zbr,ZH,Qbr,Wbr,Hbr,OM,bFe,Ubr,Jbr,KH,Ybr,Zbr,Kbr,VM,vFe,evr,ovr,eU,rvr,tvr,avr,XM,FFe,nvr,svr,oU,lvr,ivr,dvr,zM,TFe,cvr,fvr,rU,mvr,gvr,hvr,QM,MFe,pvr,_vr,tU,uvr,bvr,vvr,WM,EFe,Fvr,Tvr,aU,Mvr,Evr,Cvr,HM,CFe,wvr,Avr,nU,Lvr,yvr,xvr,UM,wFe,$vr,kvr,sU,Svr,Rvr,Pvr,JM,AFe,Bvr,Ivr,lU,Nvr,qvr,jvr,YM,LFe,Dvr,Gvr,iU,Ovr,Vvr,Xvr,ZM,yFe,zvr,Qvr,dU,Wvr,Hvr,Uvr,KM,xFe,Jvr,Yvr,cU,Zvr,Kvr,eFr,eE,$Fe,oFr,rFr,fU,tFr,aFr,nFr,oE,kFe,sFr,lFr,mU,iFr,dFr,cFr,rE,SFe,fFr,mFr,gU,gFr,hFr,pFr,tE,RFe,_Fr,uFr,hU,bFr,vFr,FFr,aE,PFe,TFr,MFr,pU,EFr,CFr,wFr,nE,BFe,AFr,LFr,_U,yFr,xFr,$Fr,sE,IFe,kFr,SFr,uU,RFr,PFr,BFr,lE,NFe,IFr,NFr,bU,qFr,jFr,DFr,iE,qFe,GFr,OFr,vU,VFr,XFr,zFr,dE,jFe,QFr,WFr,FU,HFr,UFr,JFr,cE,zOe,nc,fE,DFe,C9,YFr,GFe,ZFr,QOe,rr,w9,KFr,sc,e6r,TU,o6r,r6r,MU,t6r,a6r,n6r,A9,s6r,OFe,l6r,i6r,d6r,St,L9,c6r,VFe,f6r,m6r,lc,g6r,XFe,h6r,p6r,EU,_6r,u6r,b6r,mE,v6r,$r,y9,F6r,zFe,T6r,M6r,sn,E6r,QFe,C6r,w6r,WFe,A6r,L6r,HFe,y6r,x6r,$6r,Me,gE,UFe,k6r,S6r,CU,R6r,P6r,B6r,hE,JFe,I6r,N6r,wU,q6r,j6r,D6r,pE,YFe,G6r,O6r,AU,V6r,X6r,z6r,_E,ZFe,Q6r,W6r,LU,H6r,U6r,J6r,uE,KFe,Y6r,Z6r,yU,K6r,eTr,oTr,bE,e6e,rTr,tTr,xU,aTr,nTr,sTr,vE,o6e,lTr,iTr,$U,dTr,cTr,fTr,FE,r6e,mTr,gTr,kU,hTr,pTr,_Tr,TE,t6e,uTr,bTr,SU,vTr,FTr,TTr,ME,a6e,MTr,ETr,RU,CTr,wTr,ATr,EE,n6e,LTr,yTr,PU,xTr,$Tr,kTr,CE,s6e,STr,RTr,BU,PTr,BTr,ITr,wE,l6e,NTr,qTr,IU,jTr,DTr,GTr,AE,WOe,ic,LE,i6e,x9,OTr,d6e,VTr,HOe,tr,$9,XTr,dc,zTr,NU,QTr,WTr,qU,HTr,UTr,JTr,k9,YTr,c6e,ZTr,KTr,eMr,Rt,S9,oMr,f6e,rMr,tMr,cc,aMr,m6e,nMr,sMr,jU,lMr,iMr,dMr,yE,cMr,kr,R9,fMr,g6e,mMr,gMr,ln,hMr,h6e,pMr,_Mr,p6e,uMr,bMr,_6e,vMr,FMr,TMr,dn,xE,u6e,MMr,EMr,DU,CMr,wMr,AMr,$E,b6e,LMr,yMr,GU,xMr,$Mr,kMr,kE,v6e,SMr,RMr,OU,PMr,BMr,IMr,SE,F6e,NMr,qMr,VU,jMr,DMr,GMr,RE,UOe,fc,PE,T6e,P9,OMr,M6e,VMr,JOe,ar,B9,XMr,mc,zMr,XU,QMr,WMr,zU,HMr,UMr,JMr,I9,YMr,E6e,ZMr,KMr,eEr,Pt,N9,oEr,C6e,rEr,tEr,gc,aEr,w6e,nEr,sEr,QU,lEr,iEr,dEr,BE,cEr,Sr,q9,fEr,A6e,mEr,gEr,cn,hEr,L6e,pEr,_Er,y6e,uEr,bEr,x6e,vEr,FEr,TEr,ie,IE,$6e,MEr,EEr,WU,CEr,wEr,AEr,NE,k6e,LEr,yEr,HU,xEr,$Er,kEr,qE,S6e,SEr,REr,UU,PEr,BEr,IEr,jE,R6e,NEr,qEr,JU,jEr,DEr,GEr,DE,P6e,OEr,VEr,YU,XEr,zEr,QEr,GE,B6e,WEr,HEr,ZU,UEr,JEr,YEr,OE,I6e,ZEr,KEr,KU,e4r,o4r,r4r,VE,N6e,t4r,a4r,eJ,n4r,s4r,l4r,XE,q6e,i4r,d4r,oJ,c4r,f4r,m4r,zE,j6e,g4r,h4r,rJ,p4r,_4r,u4r,QE,D6e,b4r,v4r,tJ,F4r,T4r,M4r,WE,G6e,E4r,C4r,aJ,w4r,A4r,L4r,HE,O6e,y4r,x4r,nJ,$4r,k4r,S4r,UE,V6e,R4r,P4r,sJ,B4r,I4r,N4r,JE,X6e,q4r,j4r,lJ,D4r,G4r,O4r,YE,z6e,V4r,X4r,iJ,z4r,Q4r,W4r,ZE,Q6e,H4r,U4r,dJ,J4r,Y4r,Z4r,KE,W6e,K4r,eCr,cJ,oCr,rCr,tCr,e4,H6e,aCr,nCr,fJ,sCr,lCr,iCr,o4,U6e,dCr,cCr,mJ,fCr,mCr,gCr,r4,YOe,hc,t4,J6e,j9,hCr,Y6e,pCr,ZOe,nr,D9,_Cr,pc,uCr,gJ,bCr,vCr,hJ,FCr,TCr,MCr,G9,ECr,Z6e,CCr,wCr,ACr,Bt,O9,LCr,K6e,yCr,xCr,_c,$Cr,eTe,kCr,SCr,pJ,RCr,PCr,BCr,a4,ICr,Rr,V9,NCr,oTe,qCr,jCr,fn,DCr,rTe,GCr,OCr,tTe,VCr,XCr,aTe,zCr,QCr,WCr,ye,n4,nTe,HCr,UCr,_J,JCr,YCr,ZCr,s4,sTe,KCr,e5r,uJ,o5r,r5r,t5r,l4,lTe,a5r,n5r,bJ,s5r,l5r,i5r,i4,iTe,d5r,c5r,vJ,f5r,m5r,g5r,d4,dTe,h5r,p5r,FJ,_5r,u5r,b5r,c4,cTe,v5r,F5r,TJ,T5r,M5r,E5r,f4,fTe,C5r,w5r,MJ,A5r,L5r,y5r,m4,mTe,x5r,$5r,EJ,k5r,S5r,R5r,g4,gTe,P5r,B5r,CJ,I5r,N5r,q5r,h4,hTe,j5r,D5r,wJ,G5r,O5r,V5r,p4,KOe,uc,_4,pTe,X9,X5r,_Te,z5r,eVe,sr,z9,Q5r,bc,W5r,AJ,H5r,U5r,LJ,J5r,Y5r,Z5r,Q9,K5r,uTe,e3r,o3r,r3r,It,W9,t3r,bTe,a3r,n3r,vc,s3r,vTe,l3r,i3r,yJ,d3r,c3r,f3r,u4,m3r,Pr,H9,g3r,FTe,h3r,p3r,mn,_3r,TTe,u3r,b3r,MTe,v3r,F3r,ETe,T3r,M3r,E3r,te,b4,CTe,C3r,w3r,xJ,A3r,L3r,y3r,v4,wTe,x3r,$3r,$J,k3r,S3r,R3r,F4,ATe,P3r,B3r,kJ,I3r,N3r,q3r,T4,LTe,j3r,D3r,SJ,G3r,O3r,V3r,M4,yTe,X3r,z3r,RJ,Q3r,W3r,H3r,E4,xTe,U3r,J3r,PJ,Y3r,Z3r,K3r,C4,$Te,e0r,o0r,BJ,r0r,t0r,a0r,w4,kTe,n0r,s0r,IJ,l0r,i0r,d0r,A4,STe,c0r,f0r,NJ,m0r,g0r,h0r,L4,RTe,p0r,_0r,qJ,u0r,b0r,v0r,y4,PTe,F0r,T0r,jJ,M0r,E0r,C0r,x4,BTe,w0r,A0r,DJ,L0r,y0r,x0r,$4,ITe,$0r,k0r,GJ,S0r,R0r,P0r,k4,NTe,B0r,I0r,OJ,N0r,q0r,j0r,S4,qTe,D0r,G0r,VJ,O0r,V0r,X0r,R4,jTe,z0r,Q0r,XJ,W0r,H0r,U0r,P4,DTe,J0r,Y0r,zJ,Z0r,K0r,ewr,B4,GTe,owr,rwr,QJ,twr,awr,nwr,I4,OTe,swr,lwr,WJ,iwr,dwr,cwr,N4,VTe,fwr,mwr,HJ,gwr,hwr,pwr,q4,XTe,_wr,uwr,UJ,bwr,vwr,Fwr,j4,zTe,Twr,Mwr,JJ,Ewr,Cwr,wwr,D4,QTe,Awr,Lwr,YJ,ywr,xwr,$wr,G4,WTe,kwr,Swr,ZJ,Rwr,Pwr,Bwr,O4,HTe,Iwr,Nwr,KJ,qwr,jwr,Dwr,V4,UTe,Gwr,Owr,eY,Vwr,Xwr,zwr,X4,oVe,Fc,z4,JTe,U9,Qwr,YTe,Wwr,rVe,lr,J9,Hwr,Tc,Uwr,oY,Jwr,Ywr,rY,Zwr,Kwr,eAr,Y9,oAr,ZTe,rAr,tAr,aAr,Nt,Z9,nAr,KTe,sAr,lAr,Mc,iAr,eMe,dAr,cAr,tY,fAr,mAr,gAr,Q4,hAr,Br,K9,pAr,oMe,_Ar,uAr,gn,bAr,rMe,vAr,FAr,tMe,TAr,MAr,aMe,EAr,CAr,wAr,_e,W4,nMe,AAr,LAr,aY,yAr,xAr,$Ar,H4,sMe,kAr,SAr,nY,RAr,PAr,BAr,U4,lMe,IAr,NAr,sY,qAr,jAr,DAr,J4,iMe,GAr,OAr,lY,VAr,XAr,zAr,Y4,dMe,QAr,WAr,iY,HAr,UAr,JAr,Z4,cMe,YAr,ZAr,dY,KAr,eLr,oLr,K4,fMe,rLr,tLr,cY,aLr,nLr,sLr,eC,mMe,lLr,iLr,fY,dLr,cLr,fLr,oC,gMe,mLr,gLr,mY,hLr,pLr,_Lr,rC,hMe,uLr,bLr,gY,vLr,FLr,TLr,tC,pMe,MLr,ELr,hY,CLr,wLr,ALr,aC,_Me,LLr,yLr,pY,xLr,$Lr,kLr,nC,uMe,SLr,RLr,_Y,PLr,BLr,ILr,sC,bMe,NLr,qLr,uY,jLr,DLr,GLr,lC,vMe,OLr,VLr,bY,XLr,zLr,QLr,iC,FMe,WLr,HLr,vY,ULr,JLr,YLr,dC,TMe,ZLr,KLr,FY,eyr,oyr,ryr,cC,tVe,Ec,fC,MMe,ex,tyr,EMe,ayr,aVe,ir,ox,nyr,Cc,syr,TY,lyr,iyr,MY,dyr,cyr,fyr,rx,myr,CMe,gyr,hyr,pyr,qt,tx,_yr,wMe,uyr,byr,wc,vyr,AMe,Fyr,Tyr,EY,Myr,Eyr,Cyr,mC,wyr,Ir,ax,Ayr,LMe,Lyr,yyr,hn,xyr,yMe,$yr,kyr,xMe,Syr,Ryr,$Me,Pyr,Byr,Iyr,nx,gC,kMe,Nyr,qyr,CY,jyr,Dyr,Gyr,hC,SMe,Oyr,Vyr,wY,Xyr,zyr,Qyr,pC,nVe,Ac,_C,RMe,sx,Wyr,PMe,Hyr,sVe,dr,lx,Uyr,Lc,Jyr,AY,Yyr,Zyr,LY,Kyr,e8r,o8r,ix,r8r,BMe,t8r,a8r,n8r,jt,dx,s8r,IMe,l8r,i8r,yc,d8r,NMe,c8r,f8r,yY,m8r,g8r,h8r,uC,p8r,Nr,cx,_8r,qMe,u8r,b8r,pn,v8r,jMe,F8r,T8r,DMe,M8r,E8r,GMe,C8r,w8r,A8r,OMe,bC,VMe,L8r,y8r,xY,x8r,$8r,k8r,vC,lVe,xc,FC,XMe,fx,S8r,zMe,R8r,iVe,cr,mx,P8r,$c,B8r,$Y,I8r,N8r,kY,q8r,j8r,D8r,gx,G8r,QMe,O8r,V8r,X8r,Dt,hx,z8r,WMe,Q8r,W8r,kc,H8r,HMe,U8r,J8r,SY,Y8r,Z8r,K8r,TC,e9r,qr,px,o9r,UMe,r9r,t9r,_n,a9r,JMe,n9r,s9r,YMe,l9r,i9r,ZMe,d9r,c9r,f9r,de,MC,KMe,m9r,g9r,RY,h9r,p9r,_9r,EC,eEe,u9r,b9r,PY,v9r,F9r,T9r,CC,oEe,M9r,E9r,BY,C9r,w9r,A9r,wC,rEe,L9r,y9r,IY,x9r,$9r,k9r,AC,tEe,S9r,R9r,NY,P9r,B9r,I9r,LC,aEe,N9r,q9r,qY,j9r,D9r,G9r,yC,nEe,O9r,V9r,jY,X9r,z9r,Q9r,xC,sEe,W9r,H9r,DY,U9r,J9r,Y9r,$C,lEe,Z9r,K9r,GY,exr,oxr,rxr,kC,iEe,txr,axr,OY,nxr,sxr,lxr,SC,dEe,ixr,dxr,VY,cxr,fxr,mxr,RC,cEe,gxr,hxr,XY,pxr,_xr,uxr,PC,fEe,bxr,vxr,zY,Fxr,Txr,Mxr,BC,mEe,Exr,Cxr,QY,wxr,Axr,Lxr,IC,gEe,yxr,xxr,WY,$xr,kxr,Sxr,NC,hEe,Rxr,Pxr,HY,Bxr,Ixr,Nxr,qC,pEe,qxr,jxr,UY,Dxr,Gxr,Oxr,jC,_Ee,Vxr,Xxr,JY,zxr,Qxr,Wxr,DC,uEe,Hxr,Uxr,YY,Jxr,Yxr,Zxr,GC,bEe,Kxr,e$r,ZY,o$r,r$r,t$r,OC,dVe,Sc,VC,vEe,_x,a$r,FEe,n$r,cVe,fr,ux,s$r,Rc,l$r,KY,i$r,d$r,eZ,c$r,f$r,m$r,bx,g$r,TEe,h$r,p$r,_$r,Gt,vx,u$r,MEe,b$r,v$r,Pc,F$r,EEe,T$r,M$r,oZ,E$r,C$r,w$r,XC,A$r,jr,Fx,L$r,CEe,y$r,x$r,un,$$r,wEe,k$r,S$r,AEe,R$r,P$r,LEe,B$r,I$r,N$r,ce,zC,yEe,q$r,j$r,rZ,D$r,G$r,O$r,QC,xEe,V$r,X$r,tZ,z$r,Q$r,W$r,WC,$Ee,H$r,U$r,aZ,J$r,Y$r,Z$r,HC,kEe,K$r,ekr,nZ,okr,rkr,tkr,UC,SEe,akr,nkr,sZ,skr,lkr,ikr,JC,REe,dkr,ckr,lZ,fkr,mkr,gkr,YC,PEe,hkr,pkr,iZ,_kr,ukr,bkr,ZC,BEe,vkr,Fkr,dZ,Tkr,Mkr,Ekr,KC,IEe,Ckr,wkr,cZ,Akr,Lkr,ykr,e5,NEe,xkr,$kr,fZ,kkr,Skr,Rkr,o5,qEe,Pkr,Bkr,mZ,Ikr,Nkr,qkr,r5,jEe,jkr,Dkr,gZ,Gkr,Okr,Vkr,t5,DEe,Xkr,zkr,hZ,Qkr,Wkr,Hkr,a5,GEe,Ukr,Jkr,pZ,Ykr,Zkr,Kkr,n5,OEe,eSr,oSr,_Z,rSr,tSr,aSr,s5,VEe,nSr,sSr,uZ,lSr,iSr,dSr,l5,XEe,cSr,fSr,bZ,mSr,gSr,hSr,i5,zEe,pSr,_Sr,vZ,uSr,bSr,vSr,d5,QEe,FSr,TSr,FZ,MSr,ESr,CSr,c5,WEe,wSr,ASr,TZ,LSr,ySr,xSr,f5,fVe,Bc,m5,HEe,Tx,$Sr,UEe,kSr,mVe,mr,Mx,SSr,Ic,RSr,MZ,PSr,BSr,EZ,ISr,NSr,qSr,Ex,jSr,JEe,DSr,GSr,OSr,Ot,Cx,VSr,YEe,XSr,zSr,Nc,QSr,ZEe,WSr,HSr,CZ,USr,JSr,YSr,g5,ZSr,Dr,wx,KSr,KEe,eRr,oRr,bn,rRr,e4e,tRr,aRr,o4e,nRr,sRr,r4e,lRr,iRr,dRr,t4e,h5,a4e,cRr,fRr,wZ,mRr,gRr,hRr,p5,gVe,qc,_5,n4e,Ax,pRr,s4e,_Rr,hVe,gr,Lx,uRr,jc,bRr,AZ,vRr,FRr,LZ,TRr,MRr,ERr,yx,CRr,l4e,wRr,ARr,LRr,Vt,xx,yRr,i4e,xRr,$Rr,Dc,kRr,d4e,SRr,RRr,yZ,PRr,BRr,IRr,u5,NRr,Gr,$x,qRr,c4e,jRr,DRr,vn,GRr,f4e,ORr,VRr,m4e,XRr,zRr,g4e,QRr,WRr,HRr,h4e,b5,p4e,URr,JRr,xZ,YRr,ZRr,KRr,v5,pVe,Gc,F5,_4e,kx,ePr,u4e,oPr,_Ve,hr,Sx,rPr,Oc,tPr,$Z,aPr,nPr,kZ,sPr,lPr,iPr,Rx,dPr,b4e,cPr,fPr,mPr,Xt,Px,gPr,v4e,hPr,pPr,Vc,_Pr,F4e,uPr,bPr,SZ,vPr,FPr,TPr,T5,MPr,Or,Bx,EPr,T4e,CPr,wPr,Fn,APr,M4e,LPr,yPr,E4e,xPr,$Pr,C4e,kPr,SPr,RPr,oe,M5,w4e,PPr,BPr,RZ,IPr,NPr,qPr,E5,A4e,jPr,DPr,PZ,GPr,OPr,VPr,C5,L4e,XPr,zPr,BZ,QPr,WPr,HPr,w5,y4e,UPr,JPr,IZ,YPr,ZPr,KPr,A5,x4e,eBr,oBr,NZ,rBr,tBr,aBr,L5,$4e,nBr,sBr,qZ,lBr,iBr,dBr,y5,k4e,cBr,fBr,jZ,mBr,gBr,hBr,x5,S4e,pBr,_Br,DZ,uBr,bBr,vBr,$5,R4e,FBr,TBr,GZ,MBr,EBr,CBr,k5,P4e,wBr,ABr,OZ,LBr,yBr,xBr,S5,B4e,$Br,kBr,VZ,SBr,RBr,PBr,R5,I4e,BBr,IBr,XZ,NBr,qBr,jBr,P5,N4e,DBr,GBr,zZ,OBr,VBr,XBr,B5,q4e,zBr,QBr,QZ,WBr,HBr,UBr,I5,j4e,JBr,YBr,WZ,ZBr,KBr,eIr,N5,D4e,oIr,rIr,HZ,tIr,aIr,nIr,q5,G4e,sIr,lIr,UZ,iIr,dIr,cIr,j5,O4e,fIr,mIr,JZ,gIr,hIr,pIr,D5,V4e,_Ir,uIr,YZ,bIr,vIr,FIr,G5,X4e,TIr,MIr,ZZ,EIr,CIr,wIr,O5,z4e,AIr,LIr,KZ,yIr,xIr,$Ir,V5,Q4e,kIr,SIr,eK,RIr,PIr,BIr,X5,W4e,IIr,NIr,oK,qIr,jIr,DIr,z5,H4e,GIr,OIr,rK,VIr,XIr,zIr,Q5,U4e,QIr,WIr,tK,HIr,UIr,JIr,W5,J4e,YIr,ZIr,aK,KIr,eNr,oNr,H5,Y4e,rNr,tNr,nK,aNr,nNr,sNr,U5,uVe,Xc,J5,Z4e,Ix,lNr,K4e,iNr,bVe,pr,Nx,dNr,zc,cNr,sK,fNr,mNr,lK,gNr,hNr,pNr,qx,_Nr,eCe,uNr,bNr,vNr,zt,jx,FNr,oCe,TNr,MNr,Qc,ENr,rCe,CNr,wNr,iK,ANr,LNr,yNr,Y5,xNr,Vr,Dx,$Nr,tCe,kNr,SNr,Tn,RNr,aCe,PNr,BNr,nCe,INr,NNr,sCe,qNr,jNr,DNr,xe,Z5,lCe,GNr,ONr,dK,VNr,XNr,zNr,K5,iCe,QNr,WNr,cK,HNr,UNr,JNr,e3,dCe,YNr,ZNr,fK,KNr,eqr,oqr,o3,cCe,rqr,tqr,mK,aqr,nqr,sqr,r3,fCe,lqr,iqr,gK,dqr,cqr,fqr,t3,mCe,mqr,gqr,hK,hqr,pqr,_qr,a3,gCe,uqr,bqr,pK,vqr,Fqr,Tqr,n3,hCe,Mqr,Eqr,_K,Cqr,wqr,Aqr,s3,pCe,Lqr,yqr,uK,xqr,$qr,kqr,l3,_Ce,Sqr,Rqr,bK,Pqr,Bqr,Iqr,i3,vVe,Wc,d3,uCe,Gx,Nqr,bCe,qqr,FVe,_r,Ox,jqr,Hc,Dqr,vK,Gqr,Oqr,FK,Vqr,Xqr,zqr,Vx,Qqr,vCe,Wqr,Hqr,Uqr,Qt,Xx,Jqr,FCe,Yqr,Zqr,Uc,Kqr,TCe,ejr,ojr,TK,rjr,tjr,ajr,c3,njr,Xr,zx,sjr,MCe,ljr,ijr,Mn,djr,ECe,cjr,fjr,CCe,mjr,gjr,wCe,hjr,pjr,_jr,Ee,f3,ACe,ujr,bjr,MK,vjr,Fjr,Tjr,m3,LCe,Mjr,Ejr,EK,Cjr,wjr,Ajr,g3,yCe,Ljr,yjr,CK,xjr,$jr,kjr,h3,xCe,Sjr,Rjr,wK,Pjr,Bjr,Ijr,p3,$Ce,Njr,qjr,AK,jjr,Djr,Gjr,_3,kCe,Ojr,Vjr,LK,Xjr,zjr,Qjr,u3,SCe,Wjr,Hjr,yK,Ujr,Jjr,Yjr,b3,RCe,Zjr,Kjr,xK,eDr,oDr,rDr,v3,PCe,tDr,aDr,$K,nDr,sDr,lDr,F3,BCe,iDr,dDr,kK,cDr,fDr,mDr,T3,ICe,gDr,hDr,SK,pDr,_Dr,uDr,M3,NCe,bDr,vDr,RK,FDr,TDr,MDr,E3,qCe,EDr,CDr,PK,wDr,ADr,LDr,C3,TVe,Jc,w3,jCe,Qx,yDr,DCe,xDr,MVe,ur,Wx,$Dr,Yc,kDr,BK,SDr,RDr,IK,PDr,BDr,IDr,Hx,NDr,GCe,qDr,jDr,DDr,Wt,Ux,GDr,OCe,ODr,VDr,Zc,XDr,VCe,zDr,QDr,NK,WDr,HDr,UDr,A3,JDr,zr,Jx,YDr,XCe,ZDr,KDr,En,eGr,zCe,oGr,rGr,QCe,tGr,aGr,WCe,nGr,sGr,lGr,$e,L3,HCe,iGr,dGr,qK,cGr,fGr,mGr,y3,UCe,gGr,hGr,jK,pGr,_Gr,uGr,x3,JCe,bGr,vGr,DK,FGr,TGr,MGr,$3,YCe,EGr,CGr,GK,wGr,AGr,LGr,k3,ZCe,yGr,xGr,OK,$Gr,kGr,SGr,S3,KCe,RGr,PGr,VK,BGr,IGr,NGr,R3,e5e,qGr,jGr,XK,DGr,GGr,OGr,P3,o5e,VGr,XGr,zK,zGr,QGr,WGr,B3,r5e,HGr,UGr,QK,JGr,YGr,ZGr,I3,t5e,KGr,eOr,WK,oOr,rOr,tOr,N3,EVe,Kc,q3,a5e,Yx,aOr,n5e,nOr,CVe,br,Zx,sOr,ef,lOr,HK,iOr,dOr,UK,cOr,fOr,mOr,Kx,gOr,s5e,hOr,pOr,_Or,Ht,e$,uOr,l5e,bOr,vOr,of,FOr,i5e,TOr,MOr,JK,EOr,COr,wOr,j3,AOr,Qr,o$,LOr,d5e,yOr,xOr,Cn,$Or,c5e,kOr,SOr,f5e,ROr,POr,m5e,BOr,IOr,NOr,ke,D3,g5e,qOr,jOr,YK,DOr,GOr,OOr,G3,h5e,VOr,XOr,ZK,zOr,QOr,WOr,O3,p5e,HOr,UOr,KK,JOr,YOr,ZOr,V3,_5e,KOr,eVr,eee,oVr,rVr,tVr,X3,u5e,aVr,nVr,oee,sVr,lVr,iVr,z3,b5e,dVr,cVr,ree,fVr,mVr,gVr,Q3,v5e,hVr,pVr,tee,_Vr,uVr,bVr,W3,F5e,vVr,FVr,aee,TVr,MVr,EVr,H3,T5e,CVr,wVr,nee,AVr,LVr,yVr,U3,M5e,xVr,$Vr,see,kVr,SVr,RVr,J3,wVe,rf,Y3,E5e,r$,PVr,C5e,BVr,AVe,vr,t$,IVr,tf,NVr,lee,qVr,jVr,iee,DVr,GVr,OVr,a$,VVr,w5e,XVr,zVr,QVr,Ut,n$,WVr,A5e,HVr,UVr,af,JVr,L5e,YVr,ZVr,dee,KVr,eXr,oXr,Z3,rXr,Wr,s$,tXr,y5e,aXr,nXr,wn,sXr,x5e,lXr,iXr,$5e,dXr,cXr,k5e,fXr,mXr,gXr,Se,K3,S5e,hXr,pXr,cee,_Xr,uXr,bXr,e0,R5e,vXr,FXr,fee,TXr,MXr,EXr,o0,P5e,CXr,wXr,mee,AXr,LXr,yXr,r0,B5e,xXr,$Xr,gee,kXr,SXr,RXr,t0,I5e,PXr,BXr,hee,IXr,NXr,qXr,a0,N5e,jXr,DXr,pee,GXr,OXr,VXr,n0,q5e,XXr,zXr,_ee,QXr,WXr,HXr,s0,j5e,UXr,JXr,uee,YXr,ZXr,KXr,l0,D5e,ezr,ozr,bee,rzr,tzr,azr,i0,G5e,nzr,szr,vee,lzr,izr,dzr,d0,LVe,nf,c0,O5e,l$,czr,V5e,fzr,yVe,Fr,i$,mzr,sf,gzr,Fee,hzr,pzr,Tee,_zr,uzr,bzr,d$,vzr,X5e,Fzr,Tzr,Mzr,Jt,c$,Ezr,z5e,Czr,wzr,lf,Azr,Q5e,Lzr,yzr,Mee,xzr,$zr,kzr,f0,Szr,Hr,f$,Rzr,W5e,Pzr,Bzr,An,Izr,H5e,Nzr,qzr,U5e,jzr,Dzr,J5e,Gzr,Ozr,Vzr,Re,m0,Y5e,Xzr,zzr,Eee,Qzr,Wzr,Hzr,g0,Z5e,Uzr,Jzr,Cee,Yzr,Zzr,Kzr,h0,K5e,eQr,oQr,wee,rQr,tQr,aQr,p0,e3e,nQr,sQr,Aee,lQr,iQr,dQr,_0,o3e,cQr,fQr,Lee,mQr,gQr,hQr,u0,r3e,pQr,_Qr,yee,uQr,bQr,vQr,b0,t3e,FQr,TQr,xee,MQr,EQr,CQr,v0,a3e,wQr,AQr,$ee,LQr,yQr,xQr,F0,n3e,$Qr,kQr,kee,SQr,RQr,PQr,T0,s3e,BQr,IQr,See,NQr,qQr,jQr,M0,xVe,df,E0,l3e,m$,DQr,i3e,GQr,$Ve,Tr,g$,OQr,cf,VQr,Ree,XQr,zQr,Pee,QQr,WQr,HQr,h$,UQr,d3e,JQr,YQr,ZQr,Yt,p$,KQr,c3e,eWr,oWr,ff,rWr,f3e,tWr,aWr,Bee,nWr,sWr,lWr,C0,iWr,Ur,_$,dWr,m3e,cWr,fWr,Ln,mWr,g3e,gWr,hWr,h3e,pWr,_Wr,p3e,uWr,bWr,vWr,Ve,w0,_3e,FWr,TWr,Iee,MWr,EWr,CWr,A0,u3e,wWr,AWr,Nee,LWr,yWr,xWr,L0,b3e,$Wr,kWr,qee,SWr,RWr,PWr,y0,v3e,BWr,IWr,jee,NWr,qWr,jWr,x0,F3e,DWr,GWr,Dee,OWr,VWr,XWr,$0,T3e,zWr,QWr,Gee,WWr,HWr,UWr,k0,M3e,JWr,YWr,Oee,ZWr,KWr,eHr,S0,E3e,oHr,rHr,Vee,tHr,aHr,nHr,R0,kVe,mf,P0,C3e,u$,sHr,w3e,lHr,SVe,Mr,b$,iHr,gf,dHr,Xee,cHr,fHr,zee,mHr,gHr,hHr,v$,pHr,A3e,_Hr,uHr,bHr,Zt,F$,vHr,L3e,FHr,THr,hf,MHr,y3e,EHr,CHr,Qee,wHr,AHr,LHr,B0,yHr,Jr,T$,xHr,x3e,$Hr,kHr,yn,SHr,$3e,RHr,PHr,k3e,BHr,IHr,S3e,NHr,qHr,jHr,Xe,I0,R3e,DHr,GHr,Wee,OHr,VHr,XHr,N0,P3e,zHr,QHr,Hee,WHr,HHr,UHr,q0,B3e,JHr,YHr,Uee,ZHr,KHr,eUr,j0,I3e,oUr,rUr,Jee,tUr,aUr,nUr,D0,N3e,sUr,lUr,Yee,iUr,dUr,cUr,G0,q3e,fUr,mUr,Zee,gUr,hUr,pUr,O0,j3e,_Ur,uUr,Kee,bUr,vUr,FUr,V0,D3e,TUr,MUr,eoe,EUr,CUr,wUr,X0,RVe,pf,z0,G3e,M$,AUr,O3e,LUr,PVe,Er,E$,yUr,_f,xUr,ooe,$Ur,kUr,roe,SUr,RUr,PUr,C$,BUr,V3e,IUr,NUr,qUr,Kt,w$,jUr,X3e,DUr,GUr,uf,OUr,z3e,VUr,XUr,toe,zUr,QUr,WUr,Q0,HUr,Yr,A$,UUr,Q3e,JUr,YUr,xn,ZUr,W3e,KUr,eJr,H3e,oJr,rJr,U3e,tJr,aJr,nJr,J3e,W0,Y3e,sJr,lJr,aoe,iJr,dJr,cJr,H0,BVe,bf,U0,Z3e,L$,fJr,K3e,mJr,IVe,Cr,y$,gJr,vf,hJr,noe,pJr,_Jr,soe,uJr,bJr,vJr,x$,FJr,e0e,TJr,MJr,EJr,ea,$$,CJr,o0e,wJr,AJr,Ff,LJr,r0e,yJr,xJr,loe,$Jr,kJr,SJr,J0,RJr,Zr,k$,PJr,t0e,BJr,IJr,$n,NJr,a0e,qJr,jJr,n0e,DJr,GJr,s0e,OJr,VJr,XJr,S$,Y0,l0e,zJr,QJr,ioe,WJr,HJr,UJr,Z0,i0e,JJr,YJr,doe,ZJr,KJr,eYr,K0,NVe,Tf,ew,d0e,R$,oYr,c0e,rYr,qVe,wr,P$,tYr,Mf,aYr,coe,nYr,sYr,foe,lYr,iYr,dYr,B$,cYr,f0e,fYr,mYr,gYr,oa,I$,hYr,m0e,pYr,_Yr,Ef,uYr,g0e,bYr,vYr,moe,FYr,TYr,MYr,ow,EYr,Kr,N$,CYr,h0e,wYr,AYr,kn,LYr,p0e,yYr,xYr,_0e,$Yr,kYr,u0e,SYr,RYr,PYr,b0e,rw,v0e,BYr,IYr,goe,NYr,qYr,jYr,tw,jVe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yL=new re({}),xL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Sf=new DYr({props:{warning:!0,$$slots:{default:[dDt]},$$scope:{ctx:x}}}),$L=new re({}),kL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/configuration_auto.py#L597"}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/configuration_auto.py#L620"}}),Dg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[cDt]},$$scope:{ctx:x}}}),BL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/configuration_auto.py#L743"}}),IL=new re({}),NL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/tokenization_auto.py#L399"}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17776/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/tokenization_auto.py#L413"}}),Mh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[fDt]},$$scope:{ctx:x}}}),GL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/tokenization_auto.py#L612"}}),OL=new re({}),VL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17776/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),tp=new DYr({props:{$$slots:{default:[mDt]},$$scope:{ctx:x}}}),ap=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[gDt]},$$scope:{ctx:x}}}),WL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/processing_auto.py#L88"}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/processing_auto.py#L102"}}),Cp=new DYr({props:{$$slots:{default:[hDt]},$$scope:{ctx:x}}}),wp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[pDt]},$$scope:{ctx:x}}}),KL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/processing_auto.py#L255"}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L767"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaConfig">NeZhaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaModel">NeZhaModel</a> (NeZha model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),yp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[_Dt]},$$scope:{ctx:x}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),yu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:x}}}),ny=new re({}),sy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L774"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaConfig">NeZhaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForPreTraining">NeZhaForPreTraining</a> (NeZha model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),$u=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[bDt]},$$scope:{ctx:x}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),M7=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[vDt]},$$scope:{ctx:x}}}),cy=new re({}),fy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L789"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),C7=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[FDt]},$$scope:{ctx:x}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),c1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[TDt]},$$scope:{ctx:x}}}),py=new re({}),_y=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L796"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaConfig">NeZhaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForMaskedLM">NeZhaForMaskedLM</a> (NeZha model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),m1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[MDt]},$$scope:{ctx:x}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),Y1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[EDt]},$$scope:{ctx:x}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L803"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CDt]},$$scope:{ctx:x}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),b2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wDt]},$$scope:{ctx:x}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L812"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaConfig">NeZhaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForSequenceClassification">NeZhaForSequenceClassification</a> (NeZha model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),F2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[ADt]},$$scope:{ctx:x}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),ub=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LDt]},$$scope:{ctx:x}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L857"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaConfig">NeZhaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForMultipleChoice">NeZhaForMultipleChoice</a> (NeZha model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),vb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[yDt]},$$scope:{ctx:x}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),Yb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xDt]},$$scope:{ctx:x}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L864"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaConfig">NeZhaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForNextSentencePrediction">NeZhaForNextSentencePrediction</a> (NeZha model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$Dt]},$$scope:{ctx:x}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),lv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kDt]},$$scope:{ctx:x}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L850"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaConfig">NeZhaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForTokenClassification">NeZhaForTokenClassification</a> (NeZha model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),dv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[SDt]},$$scope:{ctx:x}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[RDt]},$$scope:{ctx:x}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L821"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaConfig">NeZhaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForQuestionAnswering">NeZhaForQuestionAnswering</a> (NeZha model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PDt]},$$scope:{ctx:x}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BDt]},$$scope:{ctx:x}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L828"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[IDt]},$$scope:{ctx:x}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[NDt]},$$scope:{ctx:x}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L873"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[qDt]},$$scope:{ctx:x}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jDt]},$$scope:{ctx:x}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L912"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[DDt]},$$scope:{ctx:x}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[GDt]},$$scope:{ctx:x}}}),f8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L839"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[ODt]},$$scope:{ctx:x}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),p6=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[VDt]},$$scope:{ctx:x}}}),_8=new re({}),u8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L919"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),u6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[XDt]},$$scope:{ctx:x}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),y6=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[zDt]},$$scope:{ctx:x}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L942"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),$6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[QDt]},$$scope:{ctx:x}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[WDt]},$$scope:{ctx:x}}}),A8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L926"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[HDt]},$$scope:{ctx:x}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),Y6=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[UDt]},$$scope:{ctx:x}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L933"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JDt]},$$scope:{ctx:x}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YDt]},$$scope:{ctx:x}}}),N8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L951"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ZDt]},$$scope:{ctx:x}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),mT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[KDt]},$$scope:{ctx:x}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L958"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[eGt]},$$scope:{ctx:x}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[oGt]},$$scope:{ctx:x}}}),W8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L905"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rGt]},$$scope:{ctx:x}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),wT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tGt]},$$scope:{ctx:x}}}),K8=new re({}),e9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L880"}}),r9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),LT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[aGt]},$$scope:{ctx:x}}}),t9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nGt]},$$scope:{ctx:x}}}),a9=new re({}),n9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L887"}}),l9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[sGt]},$$scope:{ctx:x}}}),i9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lGt]},$$scope:{ctx:x}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_auto.py#L896"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[iGt]},$$scope:{ctx:x}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dGt]},$$scope:{ctx:x}}}),h9=new re({}),p9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[cGt]},$$scope:{ctx:x}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fGt]},$$scope:{ctx:x}}}),v9=new re({}),F9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),M9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[mGt]},$$scope:{ctx:x}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),cE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gGt]},$$scope:{ctx:x}}}),C9=new re({}),w9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hGt]},$$scope:{ctx:x}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pGt]},$$scope:{ctx:x}}}),x9=new re({}),$9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[_Gt]},$$scope:{ctx:x}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uGt]},$$scope:{ctx:x}}}),P9=new re({}),B9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bGt]},$$scope:{ctx:x}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vGt]},$$scope:{ctx:x}}}),j9=new re({}),D9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),O9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FGt]},$$scope:{ctx:x}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TGt]},$$scope:{ctx:x}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[MGt]},$$scope:{ctx:x}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[EGt]},$$scope:{ctx:x}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[CGt]},$$scope:{ctx:x}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wGt]},$$scope:{ctx:x}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[AGt]},$$scope:{ctx:x}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LGt]},$$scope:{ctx:x}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[yGt]},$$scope:{ctx:x}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xGt]},$$scope:{ctx:x}}}),fx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$Gt]},$$scope:{ctx:x}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kGt]},$$scope:{ctx:x}}}),_x=new re({}),ux=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SGt]},$$scope:{ctx:x}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RGt]},$$scope:{ctx:x}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[PGt]},$$scope:{ctx:x}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BGt]},$$scope:{ctx:x}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[IGt]},$$scope:{ctx:x}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NGt]},$$scope:{ctx:x}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),T5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[qGt]},$$scope:{ctx:x}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jGt]},$$scope:{ctx:x}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[DGt]},$$scope:{ctx:x}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GGt]},$$scope:{ctx:x}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[OGt]},$$scope:{ctx:x}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[VGt]},$$scope:{ctx:x}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[XGt]},$$scope:{ctx:x}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),N3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zGt]},$$scope:{ctx:x}}}),Yx=new re({}),Zx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QGt]},$$scope:{ctx:x}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WGt]},$$scope:{ctx:x}}}),r$=new re({}),t$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),n$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),Z3=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HGt]},$$scope:{ctx:x}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UGt]},$$scope:{ctx:x}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),f0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[JGt]},$$scope:{ctx:x}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[YGt]},$$scope:{ctx:x}}}),m$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),p$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ZGt]},$$scope:{ctx:x}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[KGt]},$$scope:{ctx:x}}}),u$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eOt]},$$scope:{ctx:x}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oOt]},$$scope:{ctx:x}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rOt]},$$scope:{ctx:x}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tOt]},$$scope:{ctx:x}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aOt]},$$scope:{ctx:x}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nOt]},$$scope:{ctx:x}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sOt]},$$scope:{ctx:x}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17776/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17776/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17776/src/transformers/models/auto/auto_factory.py#L417"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lOt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),Lf=l(),at=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),CL=o("from_pretrained()"),yf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ei=o("Instantiating one of "),Rn=a("a"),wL=o("AutoConfig"),Pn=o(", "),Bn=a("a"),AL=o("AutoModel"),Ci=o(`, and
`),In=a("a"),LL=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),xf=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),eS=o("will create a model that is an instance of "),Ai=a("a"),oS=o("BertModel"),rS=o("."),Co=l(),$a=a("p"),tS=o("There is one class of "),$f=a("code"),aS=o("AutoModel"),Uze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),PGe=l(),Li=a("h2"),kf=a("a"),ite=a("span"),F(yL.$$.fragment),Jze=l(),dte=a("span"),Yze=o("Extending the Auto Classes"),BGe=l(),Nn=a("p"),Zze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),cte=a("code"),Kze=o("NewModel"),eQe=o(", make sure you have a "),fte=a("code"),oQe=o("NewModelConfig"),rQe=o(` then you can add those to the auto
classes like this:`),IGe=l(),F(xL.$$.fragment),NGe=l(),nS=a("p"),tQe=o("You will then be able to use the auto classes like you would usually do!"),qGe=l(),F(Sf.$$.fragment),jGe=l(),yi=a("h2"),Rf=a("a"),mte=a("span"),F($L.$$.fragment),aQe=l(),gte=a("span"),nQe=o("AutoConfig"),DGe=l(),wo=a("div"),F(kL.$$.fragment),sQe=l(),SL=a("p"),lQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sS=a("a"),iQe=o("from_pretrained()"),dQe=o(" class method."),cQe=l(),RL=a("p"),fQe=o("This class cannot be instantiated directly using "),hte=a("code"),mQe=o("__init__()"),gQe=o(" (throws an error)."),hQe=l(),Ar=a("div"),F(PL.$$.fragment),pQe=l(),pte=a("p"),_Qe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),uQe=l(),xi=a("p"),bQe=o("The configuration class to instantiate is selected based on the "),_te=a("code"),vQe=o("model_type"),FQe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ute=a("code"),TQe=o("pretrained_model_name_or_path"),MQe=o(":"),EQe=l(),A=a("ul"),Pf=a("li"),bte=a("strong"),CQe=o("albert"),wQe=o(" \u2014 "),lS=a("a"),AQe=o("AlbertConfig"),LQe=o(" (ALBERT model)"),yQe=l(),Bf=a("li"),vte=a("strong"),xQe=o("bart"),$Qe=o(" \u2014 "),iS=a("a"),kQe=o("BartConfig"),SQe=o(" (BART model)"),RQe=l(),If=a("li"),Fte=a("strong"),PQe=o("beit"),BQe=o(" \u2014 "),dS=a("a"),IQe=o("BeitConfig"),NQe=o(" (BEiT model)"),qQe=l(),Nf=a("li"),Tte=a("strong"),jQe=o("bert"),DQe=o(" \u2014 "),cS=a("a"),GQe=o("BertConfig"),OQe=o(" (BERT model)"),VQe=l(),qf=a("li"),Mte=a("strong"),XQe=o("bert-generation"),zQe=o(" \u2014 "),fS=a("a"),QQe=o("BertGenerationConfig"),WQe=o(" (Bert Generation model)"),HQe=l(),jf=a("li"),Ete=a("strong"),UQe=o("big_bird"),JQe=o(" \u2014 "),mS=a("a"),YQe=o("BigBirdConfig"),ZQe=o(" (BigBird model)"),KQe=l(),Df=a("li"),Cte=a("strong"),eWe=o("bigbird_pegasus"),oWe=o(" \u2014 "),gS=a("a"),rWe=o("BigBirdPegasusConfig"),tWe=o(" (BigBird-Pegasus model)"),aWe=l(),Gf=a("li"),wte=a("strong"),nWe=o("blenderbot"),sWe=o(" \u2014 "),hS=a("a"),lWe=o("BlenderbotConfig"),iWe=o(" (Blenderbot model)"),dWe=l(),Of=a("li"),Ate=a("strong"),cWe=o("blenderbot-small"),fWe=o(" \u2014 "),pS=a("a"),mWe=o("BlenderbotSmallConfig"),gWe=o(" (BlenderbotSmall model)"),hWe=l(),Vf=a("li"),Lte=a("strong"),pWe=o("bloom"),_We=o(" \u2014 "),_S=a("a"),uWe=o("BloomConfig"),bWe=o(" (BLOOM model)"),vWe=l(),Xf=a("li"),yte=a("strong"),FWe=o("camembert"),TWe=o(" \u2014 "),uS=a("a"),MWe=o("CamembertConfig"),EWe=o(" (CamemBERT model)"),CWe=l(),zf=a("li"),xte=a("strong"),wWe=o("canine"),AWe=o(" \u2014 "),bS=a("a"),LWe=o("CanineConfig"),yWe=o(" (CANINE model)"),xWe=l(),Qf=a("li"),$te=a("strong"),$We=o("clip"),kWe=o(" \u2014 "),vS=a("a"),SWe=o("CLIPConfig"),RWe=o(" (CLIP model)"),PWe=l(),Wf=a("li"),kte=a("strong"),BWe=o("convbert"),IWe=o(" \u2014 "),FS=a("a"),NWe=o("ConvBertConfig"),qWe=o(" (ConvBERT model)"),jWe=l(),Hf=a("li"),Ste=a("strong"),DWe=o("convnext"),GWe=o(" \u2014 "),TS=a("a"),OWe=o("ConvNextConfig"),VWe=o(" (ConvNeXT model)"),XWe=l(),Uf=a("li"),Rte=a("strong"),zWe=o("ctrl"),QWe=o(" \u2014 "),MS=a("a"),WWe=o("CTRLConfig"),HWe=o(" (CTRL model)"),UWe=l(),Jf=a("li"),Pte=a("strong"),JWe=o("cvt"),YWe=o(" \u2014 "),ES=a("a"),ZWe=o("CvtConfig"),KWe=o(" (CvT model)"),eHe=l(),Yf=a("li"),Bte=a("strong"),oHe=o("data2vec-audio"),rHe=o(" \u2014 "),CS=a("a"),tHe=o("Data2VecAudioConfig"),aHe=o(" (Data2VecAudio model)"),nHe=l(),Zf=a("li"),Ite=a("strong"),sHe=o("data2vec-text"),lHe=o(" \u2014 "),wS=a("a"),iHe=o("Data2VecTextConfig"),dHe=o(" (Data2VecText model)"),cHe=l(),Kf=a("li"),Nte=a("strong"),fHe=o("data2vec-vision"),mHe=o(" \u2014 "),AS=a("a"),gHe=o("Data2VecVisionConfig"),hHe=o(" (Data2VecVision model)"),pHe=l(),em=a("li"),qte=a("strong"),_He=o("deberta"),uHe=o(" \u2014 "),LS=a("a"),bHe=o("DebertaConfig"),vHe=o(" (DeBERTa model)"),FHe=l(),om=a("li"),jte=a("strong"),THe=o("deberta-v2"),MHe=o(" \u2014 "),yS=a("a"),EHe=o("DebertaV2Config"),CHe=o(" (DeBERTa-v2 model)"),wHe=l(),rm=a("li"),Dte=a("strong"),AHe=o("decision_transformer"),LHe=o(" \u2014 "),xS=a("a"),yHe=o("DecisionTransformerConfig"),xHe=o(" (Decision Transformer model)"),$He=l(),tm=a("li"),Gte=a("strong"),kHe=o("deit"),SHe=o(" \u2014 "),$S=a("a"),RHe=o("DeiTConfig"),PHe=o(" (DeiT model)"),BHe=l(),am=a("li"),Ote=a("strong"),IHe=o("detr"),NHe=o(" \u2014 "),kS=a("a"),qHe=o("DetrConfig"),jHe=o(" (DETR model)"),DHe=l(),nm=a("li"),Vte=a("strong"),GHe=o("distilbert"),OHe=o(" \u2014 "),SS=a("a"),VHe=o("DistilBertConfig"),XHe=o(" (DistilBERT model)"),zHe=l(),sm=a("li"),Xte=a("strong"),QHe=o("dpr"),WHe=o(" \u2014 "),RS=a("a"),HHe=o("DPRConfig"),UHe=o(" (DPR model)"),JHe=l(),lm=a("li"),zte=a("strong"),YHe=o("dpt"),ZHe=o(" \u2014 "),PS=a("a"),KHe=o("DPTConfig"),eUe=o(" (DPT model)"),oUe=l(),im=a("li"),Qte=a("strong"),rUe=o("electra"),tUe=o(" \u2014 "),BS=a("a"),aUe=o("ElectraConfig"),nUe=o(" (ELECTRA model)"),sUe=l(),dm=a("li"),Wte=a("strong"),lUe=o("encoder-decoder"),iUe=o(" \u2014 "),IS=a("a"),dUe=o("EncoderDecoderConfig"),cUe=o(" (Encoder decoder model)"),fUe=l(),cm=a("li"),Hte=a("strong"),mUe=o("flaubert"),gUe=o(" \u2014 "),NS=a("a"),hUe=o("FlaubertConfig"),pUe=o(" (FlauBERT model)"),_Ue=l(),fm=a("li"),Ute=a("strong"),uUe=o("flava"),bUe=o(" \u2014 "),qS=a("a"),vUe=o("FlavaConfig"),FUe=o(" (FLAVA model)"),TUe=l(),mm=a("li"),Jte=a("strong"),MUe=o("fnet"),EUe=o(" \u2014 "),jS=a("a"),CUe=o("FNetConfig"),wUe=o(" (FNet model)"),AUe=l(),gm=a("li"),Yte=a("strong"),LUe=o("fsmt"),yUe=o(" \u2014 "),DS=a("a"),xUe=o("FSMTConfig"),$Ue=o(" (FairSeq Machine-Translation model)"),kUe=l(),hm=a("li"),Zte=a("strong"),SUe=o("funnel"),RUe=o(" \u2014 "),GS=a("a"),PUe=o("FunnelConfig"),BUe=o(" (Funnel Transformer model)"),IUe=l(),pm=a("li"),Kte=a("strong"),NUe=o("glpn"),qUe=o(" \u2014 "),OS=a("a"),jUe=o("GLPNConfig"),DUe=o(" (GLPN model)"),GUe=l(),_m=a("li"),eae=a("strong"),OUe=o("gpt2"),VUe=o(" \u2014 "),VS=a("a"),XUe=o("GPT2Config"),zUe=o(" (OpenAI GPT-2 model)"),QUe=l(),um=a("li"),oae=a("strong"),WUe=o("gpt_neo"),HUe=o(" \u2014 "),XS=a("a"),UUe=o("GPTNeoConfig"),JUe=o(" (GPT Neo model)"),YUe=l(),bm=a("li"),rae=a("strong"),ZUe=o("gpt_neox"),KUe=o(" \u2014 "),zS=a("a"),eJe=o("GPTNeoXConfig"),oJe=o(" (GPT NeoX model)"),rJe=l(),vm=a("li"),tae=a("strong"),tJe=o("gptj"),aJe=o(" \u2014 "),QS=a("a"),nJe=o("GPTJConfig"),sJe=o(" (GPT-J model)"),lJe=l(),Fm=a("li"),aae=a("strong"),iJe=o("hubert"),dJe=o(" \u2014 "),WS=a("a"),cJe=o("HubertConfig"),fJe=o(" (Hubert model)"),mJe=l(),Tm=a("li"),nae=a("strong"),gJe=o("ibert"),hJe=o(" \u2014 "),HS=a("a"),pJe=o("IBertConfig"),_Je=o(" (I-BERT model)"),uJe=l(),Mm=a("li"),sae=a("strong"),bJe=o("imagegpt"),vJe=o(" \u2014 "),US=a("a"),FJe=o("ImageGPTConfig"),TJe=o(" (ImageGPT model)"),MJe=l(),Em=a("li"),lae=a("strong"),EJe=o("layoutlm"),CJe=o(" \u2014 "),JS=a("a"),wJe=o("LayoutLMConfig"),AJe=o(" (LayoutLM model)"),LJe=l(),Cm=a("li"),iae=a("strong"),yJe=o("layoutlmv2"),xJe=o(" \u2014 "),YS=a("a"),$Je=o("LayoutLMv2Config"),kJe=o(" (LayoutLMv2 model)"),SJe=l(),wm=a("li"),dae=a("strong"),RJe=o("layoutlmv3"),PJe=o(" \u2014 "),ZS=a("a"),BJe=o("LayoutLMv3Config"),IJe=o(" (LayoutLMv3 model)"),NJe=l(),Am=a("li"),cae=a("strong"),qJe=o("led"),jJe=o(" \u2014 "),KS=a("a"),DJe=o("LEDConfig"),GJe=o(" (LED model)"),OJe=l(),Lm=a("li"),fae=a("strong"),VJe=o("levit"),XJe=o(" \u2014 "),eR=a("a"),zJe=o("LevitConfig"),QJe=o(" (LeViT model)"),WJe=l(),ym=a("li"),mae=a("strong"),HJe=o("longformer"),UJe=o(" \u2014 "),oR=a("a"),JJe=o("LongformerConfig"),YJe=o(" (Longformer model)"),ZJe=l(),xm=a("li"),gae=a("strong"),KJe=o("longt5"),eYe=o(" \u2014 "),rR=a("a"),oYe=o("LongT5Config"),rYe=o(" (LongT5 model)"),tYe=l(),$m=a("li"),hae=a("strong"),aYe=o("luke"),nYe=o(" \u2014 "),tR=a("a"),sYe=o("LukeConfig"),lYe=o(" (LUKE model)"),iYe=l(),km=a("li"),pae=a("strong"),dYe=o("lxmert"),cYe=o(" \u2014 "),aR=a("a"),fYe=o("LxmertConfig"),mYe=o(" (LXMERT model)"),gYe=l(),Sm=a("li"),_ae=a("strong"),hYe=o("m2m_100"),pYe=o(" \u2014 "),nR=a("a"),_Ye=o("M2M100Config"),uYe=o(" (M2M100 model)"),bYe=l(),Rm=a("li"),uae=a("strong"),vYe=o("marian"),FYe=o(" \u2014 "),sR=a("a"),TYe=o("MarianConfig"),MYe=o(" (Marian model)"),EYe=l(),Pm=a("li"),bae=a("strong"),CYe=o("maskformer"),wYe=o(" \u2014 "),lR=a("a"),AYe=o("MaskFormerConfig"),LYe=o(" (MaskFormer model)"),yYe=l(),Bm=a("li"),vae=a("strong"),xYe=o("mbart"),$Ye=o(" \u2014 "),iR=a("a"),kYe=o("MBartConfig"),SYe=o(" (mBART model)"),RYe=l(),Im=a("li"),Fae=a("strong"),PYe=o("mctct"),BYe=o(" \u2014 "),dR=a("a"),IYe=o("MCTCTConfig"),NYe=o(" (M-CTC-T model)"),qYe=l(),Nm=a("li"),Tae=a("strong"),jYe=o("megatron-bert"),DYe=o(" \u2014 "),cR=a("a"),GYe=o("MegatronBertConfig"),OYe=o(" (Megatron-BERT model)"),VYe=l(),qm=a("li"),Mae=a("strong"),XYe=o("mobilebert"),zYe=o(" \u2014 "),fR=a("a"),QYe=o("MobileBertConfig"),WYe=o(" (MobileBERT model)"),HYe=l(),jm=a("li"),Eae=a("strong"),UYe=o("mpnet"),JYe=o(" \u2014 "),mR=a("a"),YYe=o("MPNetConfig"),ZYe=o(" (MPNet model)"),KYe=l(),Dm=a("li"),Cae=a("strong"),eZe=o("mt5"),oZe=o(" \u2014 "),gR=a("a"),rZe=o("MT5Config"),tZe=o(" (MT5 model)"),aZe=l(),Gm=a("li"),wae=a("strong"),nZe=o("nezha"),sZe=o(" \u2014 "),hR=a("a"),lZe=o("NeZhaConfig"),iZe=o(" (NeZha model)"),dZe=l(),Om=a("li"),Aae=a("strong"),cZe=o("nystromformer"),fZe=o(" \u2014 "),pR=a("a"),mZe=o("NystromformerConfig"),gZe=o(" (Nystr\xF6mformer model)"),hZe=l(),Vm=a("li"),Lae=a("strong"),pZe=o("openai-gpt"),_Ze=o(" \u2014 "),_R=a("a"),uZe=o("OpenAIGPTConfig"),bZe=o(" (OpenAI GPT model)"),vZe=l(),Xm=a("li"),yae=a("strong"),FZe=o("opt"),TZe=o(" \u2014 "),uR=a("a"),MZe=o("OPTConfig"),EZe=o(" (OPT model)"),CZe=l(),zm=a("li"),xae=a("strong"),wZe=o("pegasus"),AZe=o(" \u2014 "),bR=a("a"),LZe=o("PegasusConfig"),yZe=o(" (Pegasus model)"),xZe=l(),Qm=a("li"),$ae=a("strong"),$Ze=o("perceiver"),kZe=o(" \u2014 "),vR=a("a"),SZe=o("PerceiverConfig"),RZe=o(" (Perceiver model)"),PZe=l(),Wm=a("li"),kae=a("strong"),BZe=o("plbart"),IZe=o(" \u2014 "),FR=a("a"),NZe=o("PLBartConfig"),qZe=o(" (PLBart model)"),jZe=l(),Hm=a("li"),Sae=a("strong"),DZe=o("poolformer"),GZe=o(" \u2014 "),TR=a("a"),OZe=o("PoolFormerConfig"),VZe=o(" (PoolFormer model)"),XZe=l(),Um=a("li"),Rae=a("strong"),zZe=o("prophetnet"),QZe=o(" \u2014 "),MR=a("a"),WZe=o("ProphetNetConfig"),HZe=o(" (ProphetNet model)"),UZe=l(),Jm=a("li"),Pae=a("strong"),JZe=o("qdqbert"),YZe=o(" \u2014 "),ER=a("a"),ZZe=o("QDQBertConfig"),KZe=o(" (QDQBert model)"),eKe=l(),Ym=a("li"),Bae=a("strong"),oKe=o("rag"),rKe=o(" \u2014 "),CR=a("a"),tKe=o("RagConfig"),aKe=o(" (RAG model)"),nKe=l(),Zm=a("li"),Iae=a("strong"),sKe=o("realm"),lKe=o(" \u2014 "),wR=a("a"),iKe=o("RealmConfig"),dKe=o(" (REALM model)"),cKe=l(),Km=a("li"),Nae=a("strong"),fKe=o("reformer"),mKe=o(" \u2014 "),AR=a("a"),gKe=o("ReformerConfig"),hKe=o(" (Reformer model)"),pKe=l(),eg=a("li"),qae=a("strong"),_Ke=o("regnet"),uKe=o(" \u2014 "),LR=a("a"),bKe=o("RegNetConfig"),vKe=o(" (RegNet model)"),FKe=l(),og=a("li"),jae=a("strong"),TKe=o("rembert"),MKe=o(" \u2014 "),yR=a("a"),EKe=o("RemBertConfig"),CKe=o(" (RemBERT model)"),wKe=l(),rg=a("li"),Dae=a("strong"),AKe=o("resnet"),LKe=o(" \u2014 "),xR=a("a"),yKe=o("ResNetConfig"),xKe=o(" (ResNet model)"),$Ke=l(),tg=a("li"),Gae=a("strong"),kKe=o("retribert"),SKe=o(" \u2014 "),$R=a("a"),RKe=o("RetriBertConfig"),PKe=o(" (RetriBERT model)"),BKe=l(),ag=a("li"),Oae=a("strong"),IKe=o("roberta"),NKe=o(" \u2014 "),kR=a("a"),qKe=o("RobertaConfig"),jKe=o(" (RoBERTa model)"),DKe=l(),ng=a("li"),Vae=a("strong"),GKe=o("roformer"),OKe=o(" \u2014 "),SR=a("a"),VKe=o("RoFormerConfig"),XKe=o(" (RoFormer model)"),zKe=l(),sg=a("li"),Xae=a("strong"),QKe=o("segformer"),WKe=o(" \u2014 "),RR=a("a"),HKe=o("SegformerConfig"),UKe=o(" (SegFormer model)"),JKe=l(),lg=a("li"),zae=a("strong"),YKe=o("sew"),ZKe=o(" \u2014 "),PR=a("a"),KKe=o("SEWConfig"),eeo=o(" (SEW model)"),oeo=l(),ig=a("li"),Qae=a("strong"),reo=o("sew-d"),teo=o(" \u2014 "),BR=a("a"),aeo=o("SEWDConfig"),neo=o(" (SEW-D model)"),seo=l(),dg=a("li"),Wae=a("strong"),leo=o("speech-encoder-decoder"),ieo=o(" \u2014 "),IR=a("a"),deo=o("SpeechEncoderDecoderConfig"),ceo=o(" (Speech Encoder decoder model)"),feo=l(),cg=a("li"),Hae=a("strong"),meo=o("speech_to_text"),geo=o(" \u2014 "),NR=a("a"),heo=o("Speech2TextConfig"),peo=o(" (Speech2Text model)"),_eo=l(),fg=a("li"),Uae=a("strong"),ueo=o("speech_to_text_2"),beo=o(" \u2014 "),qR=a("a"),veo=o("Speech2Text2Config"),Feo=o(" (Speech2Text2 model)"),Teo=l(),mg=a("li"),Jae=a("strong"),Meo=o("splinter"),Eeo=o(" \u2014 "),jR=a("a"),Ceo=o("SplinterConfig"),weo=o(" (Splinter model)"),Aeo=l(),gg=a("li"),Yae=a("strong"),Leo=o("squeezebert"),yeo=o(" \u2014 "),DR=a("a"),xeo=o("SqueezeBertConfig"),$eo=o(" (SqueezeBERT model)"),keo=l(),hg=a("li"),Zae=a("strong"),Seo=o("swin"),Reo=o(" \u2014 "),GR=a("a"),Peo=o("SwinConfig"),Beo=o(" (Swin Transformer model)"),Ieo=l(),pg=a("li"),Kae=a("strong"),Neo=o("t5"),qeo=o(" \u2014 "),OR=a("a"),jeo=o("T5Config"),Deo=o(" (T5 model)"),Geo=l(),_g=a("li"),ene=a("strong"),Oeo=o("tapas"),Veo=o(" \u2014 "),VR=a("a"),Xeo=o("TapasConfig"),zeo=o(" (TAPAS model)"),Qeo=l(),ug=a("li"),one=a("strong"),Weo=o("trajectory_transformer"),Heo=o(" \u2014 "),XR=a("a"),Ueo=o("TrajectoryTransformerConfig"),Jeo=o(" (Trajectory Transformer model)"),Yeo=l(),bg=a("li"),rne=a("strong"),Zeo=o("transfo-xl"),Keo=o(" \u2014 "),zR=a("a"),eoo=o("TransfoXLConfig"),ooo=o(" (Transformer-XL model)"),roo=l(),vg=a("li"),tne=a("strong"),too=o("trocr"),aoo=o(" \u2014 "),QR=a("a"),noo=o("TrOCRConfig"),soo=o(" (TrOCR model)"),loo=l(),Fg=a("li"),ane=a("strong"),ioo=o("unispeech"),doo=o(" \u2014 "),WR=a("a"),coo=o("UniSpeechConfig"),foo=o(" (UniSpeech model)"),moo=l(),Tg=a("li"),nne=a("strong"),goo=o("unispeech-sat"),hoo=o(" \u2014 "),HR=a("a"),poo=o("UniSpeechSatConfig"),_oo=o(" (UniSpeechSat model)"),uoo=l(),Mg=a("li"),sne=a("strong"),boo=o("van"),voo=o(" \u2014 "),UR=a("a"),Foo=o("VanConfig"),Too=o(" (VAN model)"),Moo=l(),Eg=a("li"),lne=a("strong"),Eoo=o("vilt"),Coo=o(" \u2014 "),JR=a("a"),woo=o("ViltConfig"),Aoo=o(" (ViLT model)"),Loo=l(),Cg=a("li"),ine=a("strong"),yoo=o("vision-encoder-decoder"),xoo=o(" \u2014 "),YR=a("a"),$oo=o("VisionEncoderDecoderConfig"),koo=o(" (Vision Encoder decoder model)"),Soo=l(),wg=a("li"),dne=a("strong"),Roo=o("vision-text-dual-encoder"),Poo=o(" \u2014 "),ZR=a("a"),Boo=o("VisionTextDualEncoderConfig"),Ioo=o(" (VisionTextDualEncoder model)"),Noo=l(),Ag=a("li"),cne=a("strong"),qoo=o("visual_bert"),joo=o(" \u2014 "),KR=a("a"),Doo=o("VisualBertConfig"),Goo=o(" (VisualBERT model)"),Ooo=l(),Lg=a("li"),fne=a("strong"),Voo=o("vit"),Xoo=o(" \u2014 "),eP=a("a"),zoo=o("ViTConfig"),Qoo=o(" (ViT model)"),Woo=l(),yg=a("li"),mne=a("strong"),Hoo=o("vit_mae"),Uoo=o(" \u2014 "),oP=a("a"),Joo=o("ViTMAEConfig"),Yoo=o(" (ViTMAE model)"),Zoo=l(),xg=a("li"),gne=a("strong"),Koo=o("wav2vec2"),ero=o(" \u2014 "),rP=a("a"),oro=o("Wav2Vec2Config"),rro=o(" (Wav2Vec2 model)"),tro=l(),$g=a("li"),hne=a("strong"),aro=o("wav2vec2-conformer"),nro=o(" \u2014 "),tP=a("a"),sro=o("Wav2Vec2ConformerConfig"),lro=o(" (Wav2Vec2-Conformer model)"),iro=l(),kg=a("li"),pne=a("strong"),dro=o("wavlm"),cro=o(" \u2014 "),aP=a("a"),fro=o("WavLMConfig"),mro=o(" (WavLM model)"),gro=l(),Sg=a("li"),_ne=a("strong"),hro=o("xglm"),pro=o(" \u2014 "),nP=a("a"),_ro=o("XGLMConfig"),uro=o(" (XGLM model)"),bro=l(),Rg=a("li"),une=a("strong"),vro=o("xlm"),Fro=o(" \u2014 "),sP=a("a"),Tro=o("XLMConfig"),Mro=o(" (XLM model)"),Ero=l(),Pg=a("li"),bne=a("strong"),Cro=o("xlm-prophetnet"),wro=o(" \u2014 "),lP=a("a"),Aro=o("XLMProphetNetConfig"),Lro=o(" (XLM-ProphetNet model)"),yro=l(),Bg=a("li"),vne=a("strong"),xro=o("xlm-roberta"),$ro=o(" \u2014 "),iP=a("a"),kro=o("XLMRobertaConfig"),Sro=o(" (XLM-RoBERTa model)"),Rro=l(),Ig=a("li"),Fne=a("strong"),Pro=o("xlm-roberta-xl"),Bro=o(" \u2014 "),dP=a("a"),Iro=o("XLMRobertaXLConfig"),Nro=o(" (XLM-RoBERTa-XL model)"),qro=l(),Ng=a("li"),Tne=a("strong"),jro=o("xlnet"),Dro=o(" \u2014 "),cP=a("a"),Gro=o("XLNetConfig"),Oro=o(" (XLNet model)"),Vro=l(),qg=a("li"),Mne=a("strong"),Xro=o("yolos"),zro=o(" \u2014 "),fP=a("a"),Qro=o("YolosConfig"),Wro=o(" (YOLOS model)"),Hro=l(),jg=a("li"),Ene=a("strong"),Uro=o("yoso"),Jro=o(" \u2014 "),mP=a("a"),Yro=o("YosoConfig"),Zro=o(" (YOSO model)"),Kro=l(),F(Dg.$$.fragment),eto=l(),Gg=a("div"),F(BL.$$.fragment),oto=l(),Cne=a("p"),rto=o("Register a new configuration for this class."),GGe=l(),$i=a("h2"),Og=a("a"),wne=a("span"),F(IL.$$.fragment),tto=l(),Ane=a("span"),ato=o("AutoTokenizer"),OGe=l(),Ao=a("div"),F(NL.$$.fragment),nto=l(),qL=a("p"),sto=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),gP=a("a"),lto=o("AutoTokenizer.from_pretrained()"),ito=o(" class method."),dto=l(),jL=a("p"),cto=o("This class cannot be instantiated directly using "),Lne=a("code"),fto=o("__init__()"),mto=o(" (throws an error)."),gto=l(),Lr=a("div"),F(DL.$$.fragment),hto=l(),yne=a("p"),pto=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_to=l(),ka=a("p"),uto=o("The tokenizer class to instantiate is selected based on the "),xne=a("code"),bto=o("model_type"),vto=o(` property of the config object (either
passed as an argument or loaded from `),$ne=a("code"),Fto=o("pretrained_model_name_or_path"),Tto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=a("code"),Mto=o("pretrained_model_name_or_path"),Eto=o(":"),Cto=l(),k=a("ul"),qn=a("li"),Sne=a("strong"),wto=o("albert"),Ato=o(" \u2014 "),hP=a("a"),Lto=o("AlbertTokenizer"),yto=o(" or "),pP=a("a"),xto=o("AlbertTokenizerFast"),$to=o(" (ALBERT model)"),kto=l(),jn=a("li"),Rne=a("strong"),Sto=o("bart"),Rto=o(" \u2014 "),_P=a("a"),Pto=o("BartTokenizer"),Bto=o(" or "),uP=a("a"),Ito=o("BartTokenizerFast"),Nto=o(" (BART model)"),qto=l(),Dn=a("li"),Pne=a("strong"),jto=o("barthez"),Dto=o(" \u2014 "),bP=a("a"),Gto=o("BarthezTokenizer"),Oto=o(" or "),vP=a("a"),Vto=o("BarthezTokenizerFast"),Xto=o(" (BARThez model)"),zto=l(),Vg=a("li"),Bne=a("strong"),Qto=o("bartpho"),Wto=o(" \u2014 "),FP=a("a"),Hto=o("BartphoTokenizer"),Uto=o(" (BARTpho model)"),Jto=l(),Gn=a("li"),Ine=a("strong"),Yto=o("bert"),Zto=o(" \u2014 "),TP=a("a"),Kto=o("BertTokenizer"),eao=o(" or "),MP=a("a"),oao=o("BertTokenizerFast"),rao=o(" (BERT model)"),tao=l(),Xg=a("li"),Nne=a("strong"),aao=o("bert-generation"),nao=o(" \u2014 "),EP=a("a"),sao=o("BertGenerationTokenizer"),lao=o(" (Bert Generation model)"),iao=l(),zg=a("li"),qne=a("strong"),dao=o("bert-japanese"),cao=o(" \u2014 "),CP=a("a"),fao=o("BertJapaneseTokenizer"),mao=o(" (BertJapanese model)"),gao=l(),Qg=a("li"),jne=a("strong"),hao=o("bertweet"),pao=o(" \u2014 "),wP=a("a"),_ao=o("BertweetTokenizer"),uao=o(" (BERTweet model)"),bao=l(),On=a("li"),Dne=a("strong"),vao=o("big_bird"),Fao=o(" \u2014 "),AP=a("a"),Tao=o("BigBirdTokenizer"),Mao=o(" or "),LP=a("a"),Eao=o("BigBirdTokenizerFast"),Cao=o(" (BigBird model)"),wao=l(),Vn=a("li"),Gne=a("strong"),Aao=o("bigbird_pegasus"),Lao=o(" \u2014 "),yP=a("a"),yao=o("PegasusTokenizer"),xao=o(" or "),xP=a("a"),$ao=o("PegasusTokenizerFast"),kao=o(" (BigBird-Pegasus model)"),Sao=l(),Xn=a("li"),One=a("strong"),Rao=o("blenderbot"),Pao=o(" \u2014 "),$P=a("a"),Bao=o("BlenderbotTokenizer"),Iao=o(" or "),kP=a("a"),Nao=o("BlenderbotTokenizerFast"),qao=o(" (Blenderbot model)"),jao=l(),Wg=a("li"),Vne=a("strong"),Dao=o("blenderbot-small"),Gao=o(" \u2014 "),SP=a("a"),Oao=o("BlenderbotSmallTokenizer"),Vao=o(" (BlenderbotSmall model)"),Xao=l(),Hg=a("li"),Xne=a("strong"),zao=o("bloom"),Qao=o(" \u2014 "),RP=a("a"),Wao=o("BloomTokenizerFast"),Hao=o(" (BLOOM model)"),Uao=l(),Ug=a("li"),zne=a("strong"),Jao=o("byt5"),Yao=o(" \u2014 "),PP=a("a"),Zao=o("ByT5Tokenizer"),Kao=o(" (ByT5 model)"),eno=l(),zn=a("li"),Qne=a("strong"),ono=o("camembert"),rno=o(" \u2014 "),BP=a("a"),tno=o("CamembertTokenizer"),ano=o(" or "),IP=a("a"),nno=o("CamembertTokenizerFast"),sno=o(" (CamemBERT model)"),lno=l(),Jg=a("li"),Wne=a("strong"),ino=o("canine"),dno=o(" \u2014 "),NP=a("a"),cno=o("CanineTokenizer"),fno=o(" (CANINE model)"),mno=l(),Qn=a("li"),Hne=a("strong"),gno=o("clip"),hno=o(" \u2014 "),qP=a("a"),pno=o("CLIPTokenizer"),_no=o(" or "),jP=a("a"),uno=o("CLIPTokenizerFast"),bno=o(" (CLIP model)"),vno=l(),Wn=a("li"),Une=a("strong"),Fno=o("convbert"),Tno=o(" \u2014 "),DP=a("a"),Mno=o("ConvBertTokenizer"),Eno=o(" or "),GP=a("a"),Cno=o("ConvBertTokenizerFast"),wno=o(" (ConvBERT model)"),Ano=l(),Hn=a("li"),Jne=a("strong"),Lno=o("cpm"),yno=o(" \u2014 "),OP=a("a"),xno=o("CpmTokenizer"),$no=o(" or "),VP=a("a"),kno=o("CpmTokenizerFast"),Sno=o(" (CPM model)"),Rno=l(),Yg=a("li"),Yne=a("strong"),Pno=o("ctrl"),Bno=o(" \u2014 "),XP=a("a"),Ino=o("CTRLTokenizer"),Nno=o(" (CTRL model)"),qno=l(),Un=a("li"),Zne=a("strong"),jno=o("data2vec-text"),Dno=o(" \u2014 "),zP=a("a"),Gno=o("RobertaTokenizer"),Ono=o(" or "),QP=a("a"),Vno=o("RobertaTokenizerFast"),Xno=o(" (Data2VecText model)"),zno=l(),Jn=a("li"),Kne=a("strong"),Qno=o("deberta"),Wno=o(" \u2014 "),WP=a("a"),Hno=o("DebertaTokenizer"),Uno=o(" or "),HP=a("a"),Jno=o("DebertaTokenizerFast"),Yno=o(" (DeBERTa model)"),Zno=l(),Yn=a("li"),ese=a("strong"),Kno=o("deberta-v2"),eso=o(" \u2014 "),UP=a("a"),oso=o("DebertaV2Tokenizer"),rso=o(" or "),JP=a("a"),tso=o("DebertaV2TokenizerFast"),aso=o(" (DeBERTa-v2 model)"),nso=l(),Zn=a("li"),ose=a("strong"),sso=o("distilbert"),lso=o(" \u2014 "),YP=a("a"),iso=o("DistilBertTokenizer"),dso=o(" or "),ZP=a("a"),cso=o("DistilBertTokenizerFast"),fso=o(" (DistilBERT model)"),mso=l(),Kn=a("li"),rse=a("strong"),gso=o("dpr"),hso=o(" \u2014 "),KP=a("a"),pso=o("DPRQuestionEncoderTokenizer"),_so=o(" or "),eB=a("a"),uso=o("DPRQuestionEncoderTokenizerFast"),bso=o(" (DPR model)"),vso=l(),es=a("li"),tse=a("strong"),Fso=o("electra"),Tso=o(" \u2014 "),oB=a("a"),Mso=o("ElectraTokenizer"),Eso=o(" or "),rB=a("a"),Cso=o("ElectraTokenizerFast"),wso=o(" (ELECTRA model)"),Aso=l(),Zg=a("li"),ase=a("strong"),Lso=o("flaubert"),yso=o(" \u2014 "),tB=a("a"),xso=o("FlaubertTokenizer"),$so=o(" (FlauBERT model)"),kso=l(),os=a("li"),nse=a("strong"),Sso=o("fnet"),Rso=o(" \u2014 "),aB=a("a"),Pso=o("FNetTokenizer"),Bso=o(" or "),nB=a("a"),Iso=o("FNetTokenizerFast"),Nso=o(" (FNet model)"),qso=l(),Kg=a("li"),sse=a("strong"),jso=o("fsmt"),Dso=o(" \u2014 "),sB=a("a"),Gso=o("FSMTTokenizer"),Oso=o(" (FairSeq Machine-Translation model)"),Vso=l(),rs=a("li"),lse=a("strong"),Xso=o("funnel"),zso=o(" \u2014 "),lB=a("a"),Qso=o("FunnelTokenizer"),Wso=o(" or "),iB=a("a"),Hso=o("FunnelTokenizerFast"),Uso=o(" (Funnel Transformer model)"),Jso=l(),ts=a("li"),ise=a("strong"),Yso=o("gpt2"),Zso=o(" \u2014 "),dB=a("a"),Kso=o("GPT2Tokenizer"),elo=o(" or "),cB=a("a"),olo=o("GPT2TokenizerFast"),rlo=o(" (OpenAI GPT-2 model)"),tlo=l(),as=a("li"),dse=a("strong"),alo=o("gpt_neo"),nlo=o(" \u2014 "),fB=a("a"),slo=o("GPT2Tokenizer"),llo=o(" or "),mB=a("a"),ilo=o("GPT2TokenizerFast"),dlo=o(" (GPT Neo model)"),clo=l(),eh=a("li"),cse=a("strong"),flo=o("gpt_neox"),mlo=o(" \u2014 "),gB=a("a"),glo=o("GPTNeoXTokenizerFast"),hlo=o(" (GPT NeoX model)"),plo=l(),ns=a("li"),fse=a("strong"),_lo=o("gptj"),ulo=o(" \u2014 "),hB=a("a"),blo=o("GPT2Tokenizer"),vlo=o(" or "),pB=a("a"),Flo=o("GPT2TokenizerFast"),Tlo=o(" (GPT-J model)"),Mlo=l(),ss=a("li"),mse=a("strong"),Elo=o("herbert"),Clo=o(" \u2014 "),_B=a("a"),wlo=o("HerbertTokenizer"),Alo=o(" or "),uB=a("a"),Llo=o("HerbertTokenizerFast"),ylo=o(" (HerBERT model)"),xlo=l(),oh=a("li"),gse=a("strong"),$lo=o("hubert"),klo=o(" \u2014 "),bB=a("a"),Slo=o("Wav2Vec2CTCTokenizer"),Rlo=o(" (Hubert model)"),Plo=l(),ls=a("li"),hse=a("strong"),Blo=o("ibert"),Ilo=o(" \u2014 "),vB=a("a"),Nlo=o("RobertaTokenizer"),qlo=o(" or "),FB=a("a"),jlo=o("RobertaTokenizerFast"),Dlo=o(" (I-BERT model)"),Glo=l(),is=a("li"),pse=a("strong"),Olo=o("layoutlm"),Vlo=o(" \u2014 "),TB=a("a"),Xlo=o("LayoutLMTokenizer"),zlo=o(" or "),MB=a("a"),Qlo=o("LayoutLMTokenizerFast"),Wlo=o(" (LayoutLM model)"),Hlo=l(),ds=a("li"),_se=a("strong"),Ulo=o("layoutlmv2"),Jlo=o(" \u2014 "),EB=a("a"),Ylo=o("LayoutLMv2Tokenizer"),Zlo=o(" or "),CB=a("a"),Klo=o("LayoutLMv2TokenizerFast"),eio=o(" (LayoutLMv2 model)"),oio=l(),cs=a("li"),use=a("strong"),rio=o("layoutlmv3"),tio=o(" \u2014 "),wB=a("a"),aio=o("LayoutLMv3Tokenizer"),nio=o(" or "),AB=a("a"),sio=o("LayoutLMv3TokenizerFast"),lio=o(" (LayoutLMv3 model)"),iio=l(),fs=a("li"),bse=a("strong"),dio=o("layoutxlm"),cio=o(" \u2014 "),LB=a("a"),fio=o("LayoutXLMTokenizer"),mio=o(" or "),yB=a("a"),gio=o("LayoutXLMTokenizerFast"),hio=o(" (LayoutXLM model)"),pio=l(),ms=a("li"),vse=a("strong"),_io=o("led"),uio=o(" \u2014 "),xB=a("a"),bio=o("LEDTokenizer"),vio=o(" or "),$B=a("a"),Fio=o("LEDTokenizerFast"),Tio=o(" (LED model)"),Mio=l(),gs=a("li"),Fse=a("strong"),Eio=o("longformer"),Cio=o(" \u2014 "),kB=a("a"),wio=o("LongformerTokenizer"),Aio=o(" or "),SB=a("a"),Lio=o("LongformerTokenizerFast"),yio=o(" (Longformer model)"),xio=l(),hs=a("li"),Tse=a("strong"),$io=o("longt5"),kio=o(" \u2014 "),RB=a("a"),Sio=o("T5Tokenizer"),Rio=o(" or "),PB=a("a"),Pio=o("T5TokenizerFast"),Bio=o(" (LongT5 model)"),Iio=l(),rh=a("li"),Mse=a("strong"),Nio=o("luke"),qio=o(" \u2014 "),BB=a("a"),jio=o("LukeTokenizer"),Dio=o(" (LUKE model)"),Gio=l(),ps=a("li"),Ese=a("strong"),Oio=o("lxmert"),Vio=o(" \u2014 "),IB=a("a"),Xio=o("LxmertTokenizer"),zio=o(" or "),NB=a("a"),Qio=o("LxmertTokenizerFast"),Wio=o(" (LXMERT model)"),Hio=l(),th=a("li"),Cse=a("strong"),Uio=o("m2m_100"),Jio=o(" \u2014 "),qB=a("a"),Yio=o("M2M100Tokenizer"),Zio=o(" (M2M100 model)"),Kio=l(),ah=a("li"),wse=a("strong"),edo=o("marian"),odo=o(" \u2014 "),jB=a("a"),rdo=o("MarianTokenizer"),tdo=o(" (Marian model)"),ado=l(),_s=a("li"),Ase=a("strong"),ndo=o("mbart"),sdo=o(" \u2014 "),DB=a("a"),ldo=o("MBartTokenizer"),ido=o(" or "),GB=a("a"),ddo=o("MBartTokenizerFast"),cdo=o(" (mBART model)"),fdo=l(),us=a("li"),Lse=a("strong"),mdo=o("mbart50"),gdo=o(" \u2014 "),OB=a("a"),hdo=o("MBart50Tokenizer"),pdo=o(" or "),VB=a("a"),_do=o("MBart50TokenizerFast"),udo=o(" (mBART-50 model)"),bdo=l(),bs=a("li"),yse=a("strong"),vdo=o("megatron-bert"),Fdo=o(" \u2014 "),XB=a("a"),Tdo=o("BertTokenizer"),Mdo=o(" or "),zB=a("a"),Edo=o("BertTokenizerFast"),Cdo=o(" (Megatron-BERT model)"),wdo=l(),nh=a("li"),xse=a("strong"),Ado=o("mluke"),Ldo=o(" \u2014 "),QB=a("a"),ydo=o("MLukeTokenizer"),xdo=o(" (mLUKE model)"),$do=l(),vs=a("li"),$se=a("strong"),kdo=o("mobilebert"),Sdo=o(" \u2014 "),WB=a("a"),Rdo=o("MobileBertTokenizer"),Pdo=o(" or "),HB=a("a"),Bdo=o("MobileBertTokenizerFast"),Ido=o(" (MobileBERT model)"),Ndo=l(),Fs=a("li"),kse=a("strong"),qdo=o("mpnet"),jdo=o(" \u2014 "),UB=a("a"),Ddo=o("MPNetTokenizer"),Gdo=o(" or "),JB=a("a"),Odo=o("MPNetTokenizerFast"),Vdo=o(" (MPNet model)"),Xdo=l(),Ts=a("li"),Sse=a("strong"),zdo=o("mt5"),Qdo=o(" \u2014 "),YB=a("a"),Wdo=o("MT5Tokenizer"),Hdo=o(" or "),ZB=a("a"),Udo=o("MT5TokenizerFast"),Jdo=o(" (MT5 model)"),Ydo=l(),Ms=a("li"),Rse=a("strong"),Zdo=o("nystromformer"),Kdo=o(" \u2014 "),KB=a("a"),eco=o("AlbertTokenizer"),oco=o(" or "),eI=a("a"),rco=o("AlbertTokenizerFast"),tco=o(" (Nystr\xF6mformer model)"),aco=l(),Es=a("li"),Pse=a("strong"),nco=o("openai-gpt"),sco=o(" \u2014 "),oI=a("a"),lco=o("OpenAIGPTTokenizer"),ico=o(" or "),rI=a("a"),dco=o("OpenAIGPTTokenizerFast"),cco=o(" (OpenAI GPT model)"),fco=l(),sh=a("li"),Bse=a("strong"),mco=o("opt"),gco=o(" \u2014 "),tI=a("a"),hco=o("GPT2Tokenizer"),pco=o(" (OPT model)"),_co=l(),Cs=a("li"),Ise=a("strong"),uco=o("pegasus"),bco=o(" \u2014 "),aI=a("a"),vco=o("PegasusTokenizer"),Fco=o(" or "),nI=a("a"),Tco=o("PegasusTokenizerFast"),Mco=o(" (Pegasus model)"),Eco=l(),lh=a("li"),Nse=a("strong"),Cco=o("perceiver"),wco=o(" \u2014 "),sI=a("a"),Aco=o("PerceiverTokenizer"),Lco=o(" (Perceiver model)"),yco=l(),ih=a("li"),qse=a("strong"),xco=o("phobert"),$co=o(" \u2014 "),lI=a("a"),kco=o("PhobertTokenizer"),Sco=o(" (PhoBERT model)"),Rco=l(),dh=a("li"),jse=a("strong"),Pco=o("plbart"),Bco=o(" \u2014 "),iI=a("a"),Ico=o("PLBartTokenizer"),Nco=o(" (PLBart model)"),qco=l(),ch=a("li"),Dse=a("strong"),jco=o("prophetnet"),Dco=o(" \u2014 "),dI=a("a"),Gco=o("ProphetNetTokenizer"),Oco=o(" (ProphetNet model)"),Vco=l(),ws=a("li"),Gse=a("strong"),Xco=o("qdqbert"),zco=o(" \u2014 "),cI=a("a"),Qco=o("BertTokenizer"),Wco=o(" or "),fI=a("a"),Hco=o("BertTokenizerFast"),Uco=o(" (QDQBert model)"),Jco=l(),fh=a("li"),Ose=a("strong"),Yco=o("rag"),Zco=o(" \u2014 "),mI=a("a"),Kco=o("RagTokenizer"),efo=o(" (RAG model)"),ofo=l(),As=a("li"),Vse=a("strong"),rfo=o("realm"),tfo=o(" \u2014 "),gI=a("a"),afo=o("RealmTokenizer"),nfo=o(" or "),hI=a("a"),sfo=o("RealmTokenizerFast"),lfo=o(" (REALM model)"),ifo=l(),Ls=a("li"),Xse=a("strong"),dfo=o("reformer"),cfo=o(" \u2014 "),pI=a("a"),ffo=o("ReformerTokenizer"),mfo=o(" or "),_I=a("a"),gfo=o("ReformerTokenizerFast"),hfo=o(" (Reformer model)"),pfo=l(),ys=a("li"),zse=a("strong"),_fo=o("rembert"),ufo=o(" \u2014 "),uI=a("a"),bfo=o("RemBertTokenizer"),vfo=o(" or "),bI=a("a"),Ffo=o("RemBertTokenizerFast"),Tfo=o(" (RemBERT model)"),Mfo=l(),xs=a("li"),Qse=a("strong"),Efo=o("retribert"),Cfo=o(" \u2014 "),vI=a("a"),wfo=o("RetriBertTokenizer"),Afo=o(" or "),FI=a("a"),Lfo=o("RetriBertTokenizerFast"),yfo=o(" (RetriBERT model)"),xfo=l(),$s=a("li"),Wse=a("strong"),$fo=o("roberta"),kfo=o(" \u2014 "),TI=a("a"),Sfo=o("RobertaTokenizer"),Rfo=o(" or "),MI=a("a"),Pfo=o("RobertaTokenizerFast"),Bfo=o(" (RoBERTa model)"),Ifo=l(),ks=a("li"),Hse=a("strong"),Nfo=o("roformer"),qfo=o(" \u2014 "),EI=a("a"),jfo=o("RoFormerTokenizer"),Dfo=o(" or "),CI=a("a"),Gfo=o("RoFormerTokenizerFast"),Ofo=o(" (RoFormer model)"),Vfo=l(),mh=a("li"),Use=a("strong"),Xfo=o("speech_to_text"),zfo=o(" \u2014 "),wI=a("a"),Qfo=o("Speech2TextTokenizer"),Wfo=o(" (Speech2Text model)"),Hfo=l(),gh=a("li"),Jse=a("strong"),Ufo=o("speech_to_text_2"),Jfo=o(" \u2014 "),AI=a("a"),Yfo=o("Speech2Text2Tokenizer"),Zfo=o(" (Speech2Text2 model)"),Kfo=l(),Ss=a("li"),Yse=a("strong"),emo=o("splinter"),omo=o(" \u2014 "),LI=a("a"),rmo=o("SplinterTokenizer"),tmo=o(" or "),yI=a("a"),amo=o("SplinterTokenizerFast"),nmo=o(" (Splinter model)"),smo=l(),Rs=a("li"),Zse=a("strong"),lmo=o("squeezebert"),imo=o(" \u2014 "),xI=a("a"),dmo=o("SqueezeBertTokenizer"),cmo=o(" or "),$I=a("a"),fmo=o("SqueezeBertTokenizerFast"),mmo=o(" (SqueezeBERT model)"),gmo=l(),Ps=a("li"),Kse=a("strong"),hmo=o("t5"),pmo=o(" \u2014 "),kI=a("a"),_mo=o("T5Tokenizer"),umo=o(" or "),SI=a("a"),bmo=o("T5TokenizerFast"),vmo=o(" (T5 model)"),Fmo=l(),hh=a("li"),ele=a("strong"),Tmo=o("tapas"),Mmo=o(" \u2014 "),RI=a("a"),Emo=o("TapasTokenizer"),Cmo=o(" (TAPAS model)"),wmo=l(),ph=a("li"),ole=a("strong"),Amo=o("tapex"),Lmo=o(" \u2014 "),PI=a("a"),ymo=o("TapexTokenizer"),xmo=o(" (TAPEX model)"),$mo=l(),_h=a("li"),rle=a("strong"),kmo=o("transfo-xl"),Smo=o(" \u2014 "),BI=a("a"),Rmo=o("TransfoXLTokenizer"),Pmo=o(" (Transformer-XL model)"),Bmo=l(),Bs=a("li"),tle=a("strong"),Imo=o("vilt"),Nmo=o(" \u2014 "),II=a("a"),qmo=o("BertTokenizer"),jmo=o(" or "),NI=a("a"),Dmo=o("BertTokenizerFast"),Gmo=o(" (ViLT model)"),Omo=l(),Is=a("li"),ale=a("strong"),Vmo=o("visual_bert"),Xmo=o(" \u2014 "),qI=a("a"),zmo=o("BertTokenizer"),Qmo=o(" or "),jI=a("a"),Wmo=o("BertTokenizerFast"),Hmo=o(" (VisualBERT model)"),Umo=l(),uh=a("li"),nle=a("strong"),Jmo=o("wav2vec2"),Ymo=o(" \u2014 "),DI=a("a"),Zmo=o("Wav2Vec2CTCTokenizer"),Kmo=o(" (Wav2Vec2 model)"),ego=l(),bh=a("li"),sle=a("strong"),ogo=o("wav2vec2-conformer"),rgo=o(" \u2014 "),GI=a("a"),tgo=o("Wav2Vec2CTCTokenizer"),ago=o(" (Wav2Vec2-Conformer model)"),ngo=l(),vh=a("li"),lle=a("strong"),sgo=o("wav2vec2_phoneme"),lgo=o(" \u2014 "),OI=a("a"),igo=o("Wav2Vec2PhonemeCTCTokenizer"),dgo=o(" (Wav2Vec2Phoneme model)"),cgo=l(),Ns=a("li"),ile=a("strong"),fgo=o("xglm"),mgo=o(" \u2014 "),VI=a("a"),ggo=o("XGLMTokenizer"),hgo=o(" or "),XI=a("a"),pgo=o("XGLMTokenizerFast"),_go=o(" (XGLM model)"),ugo=l(),Fh=a("li"),dle=a("strong"),bgo=o("xlm"),vgo=o(" \u2014 "),zI=a("a"),Fgo=o("XLMTokenizer"),Tgo=o(" (XLM model)"),Mgo=l(),Th=a("li"),cle=a("strong"),Ego=o("xlm-prophetnet"),Cgo=o(" \u2014 "),QI=a("a"),wgo=o("XLMProphetNetTokenizer"),Ago=o(" (XLM-ProphetNet model)"),Lgo=l(),qs=a("li"),fle=a("strong"),ygo=o("xlm-roberta"),xgo=o(" \u2014 "),WI=a("a"),$go=o("XLMRobertaTokenizer"),kgo=o(" or "),HI=a("a"),Sgo=o("XLMRobertaTokenizerFast"),Rgo=o(" (XLM-RoBERTa model)"),Pgo=l(),js=a("li"),mle=a("strong"),Bgo=o("xlm-roberta-xl"),Igo=o(" \u2014 "),UI=a("a"),Ngo=o("RobertaTokenizer"),qgo=o(" or "),JI=a("a"),jgo=o("RobertaTokenizerFast"),Dgo=o(" (XLM-RoBERTa-XL model)"),Ggo=l(),Ds=a("li"),gle=a("strong"),Ogo=o("xlnet"),Vgo=o(" \u2014 "),YI=a("a"),Xgo=o("XLNetTokenizer"),zgo=o(" or "),ZI=a("a"),Qgo=o("XLNetTokenizerFast"),Wgo=o(" (XLNet model)"),Hgo=l(),Gs=a("li"),hle=a("strong"),Ugo=o("yoso"),Jgo=o(" \u2014 "),KI=a("a"),Ygo=o("AlbertTokenizer"),Zgo=o(" or "),eN=a("a"),Kgo=o("AlbertTokenizerFast"),eho=o(" (YOSO model)"),oho=l(),F(Mh.$$.fragment),rho=l(),Eh=a("div"),F(GL.$$.fragment),tho=l(),ple=a("p"),aho=o("Register a new tokenizer in this mapping."),VGe=l(),ki=a("h2"),Ch=a("a"),_le=a("span"),F(OL.$$.fragment),nho=l(),ule=a("span"),sho=o("AutoFeatureExtractor"),XGe=l(),Lo=a("div"),F(VL.$$.fragment),lho=l(),XL=a("p"),iho=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oN=a("a"),dho=o("AutoFeatureExtractor.from_pretrained()"),cho=o(" class method."),fho=l(),zL=a("p"),mho=o("This class cannot be instantiated directly using "),ble=a("code"),gho=o("__init__()"),hho=o(" (throws an error)."),pho=l(),He=a("div"),F(QL.$$.fragment),_ho=l(),vle=a("p"),uho=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),bho=l(),Sa=a("p"),vho=o("The feature extractor class to instantiate is selected based on the "),Fle=a("code"),Fho=o("model_type"),Tho=o(` property of the config object
(either passed as an argument or loaded from `),Tle=a("code"),Mho=o("pretrained_model_name_or_path"),Eho=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mle=a("code"),Cho=o("pretrained_model_name_or_path"),who=o(":"),Aho=l(),Y=a("ul"),wh=a("li"),Ele=a("strong"),Lho=o("beit"),yho=o(" \u2014 "),rN=a("a"),xho=o("BeitFeatureExtractor"),$ho=o(" (BEiT model)"),kho=l(),Ah=a("li"),Cle=a("strong"),Sho=o("clip"),Rho=o(" \u2014 "),tN=a("a"),Pho=o("CLIPFeatureExtractor"),Bho=o(" (CLIP model)"),Iho=l(),Lh=a("li"),wle=a("strong"),Nho=o("convnext"),qho=o(" \u2014 "),aN=a("a"),jho=o("ConvNextFeatureExtractor"),Dho=o(" (ConvNeXT model)"),Gho=l(),yh=a("li"),Ale=a("strong"),Oho=o("cvt"),Vho=o(" \u2014 "),nN=a("a"),Xho=o("ConvNextFeatureExtractor"),zho=o(" (CvT model)"),Qho=l(),xh=a("li"),Lle=a("strong"),Who=o("data2vec-audio"),Hho=o(" \u2014 "),sN=a("a"),Uho=o("Wav2Vec2FeatureExtractor"),Jho=o(" (Data2VecAudio model)"),Yho=l(),$h=a("li"),yle=a("strong"),Zho=o("data2vec-vision"),Kho=o(" \u2014 "),lN=a("a"),epo=o("BeitFeatureExtractor"),opo=o(" (Data2VecVision model)"),rpo=l(),kh=a("li"),xle=a("strong"),tpo=o("deit"),apo=o(" \u2014 "),iN=a("a"),npo=o("DeiTFeatureExtractor"),spo=o(" (DeiT model)"),lpo=l(),Sh=a("li"),$le=a("strong"),ipo=o("detr"),dpo=o(" \u2014 "),dN=a("a"),cpo=o("DetrFeatureExtractor"),fpo=o(" (DETR model)"),mpo=l(),Rh=a("li"),kle=a("strong"),gpo=o("dpt"),hpo=o(" \u2014 "),cN=a("a"),ppo=o("DPTFeatureExtractor"),_po=o(" (DPT model)"),upo=l(),Ph=a("li"),Sle=a("strong"),bpo=o("flava"),vpo=o(" \u2014 "),fN=a("a"),Fpo=o("FlavaFeatureExtractor"),Tpo=o(" (FLAVA model)"),Mpo=l(),Bh=a("li"),Rle=a("strong"),Epo=o("glpn"),Cpo=o(" \u2014 "),mN=a("a"),wpo=o("GLPNFeatureExtractor"),Apo=o(" (GLPN model)"),Lpo=l(),Ih=a("li"),Ple=a("strong"),ypo=o("hubert"),xpo=o(" \u2014 "),gN=a("a"),$po=o("Wav2Vec2FeatureExtractor"),kpo=o(" (Hubert model)"),Spo=l(),Nh=a("li"),Ble=a("strong"),Rpo=o("imagegpt"),Ppo=o(" \u2014 "),hN=a("a"),Bpo=o("ImageGPTFeatureExtractor"),Ipo=o(" (ImageGPT model)"),Npo=l(),qh=a("li"),Ile=a("strong"),qpo=o("layoutlmv2"),jpo=o(" \u2014 "),pN=a("a"),Dpo=o("LayoutLMv2FeatureExtractor"),Gpo=o(" (LayoutLMv2 model)"),Opo=l(),jh=a("li"),Nle=a("strong"),Vpo=o("layoutlmv3"),Xpo=o(" \u2014 "),_N=a("a"),zpo=o("LayoutLMv3FeatureExtractor"),Qpo=o(" (LayoutLMv3 model)"),Wpo=l(),Dh=a("li"),qle=a("strong"),Hpo=o("levit"),Upo=o(" \u2014 "),uN=a("a"),Jpo=o("LevitFeatureExtractor"),Ypo=o(" (LeViT model)"),Zpo=l(),Gh=a("li"),jle=a("strong"),Kpo=o("maskformer"),e_o=o(" \u2014 "),bN=a("a"),o_o=o("MaskFormerFeatureExtractor"),r_o=o(" (MaskFormer model)"),t_o=l(),Oh=a("li"),Dle=a("strong"),a_o=o("mctct"),n_o=o(" \u2014 "),vN=a("a"),s_o=o("MCTCTFeatureExtractor"),l_o=o(" (M-CTC-T model)"),i_o=l(),Vh=a("li"),Gle=a("strong"),d_o=o("perceiver"),c_o=o(" \u2014 "),FN=a("a"),f_o=o("PerceiverFeatureExtractor"),m_o=o(" (Perceiver model)"),g_o=l(),Xh=a("li"),Ole=a("strong"),h_o=o("poolformer"),p_o=o(" \u2014 "),TN=a("a"),__o=o("PoolFormerFeatureExtractor"),u_o=o(" (PoolFormer model)"),b_o=l(),zh=a("li"),Vle=a("strong"),v_o=o("regnet"),F_o=o(" \u2014 "),MN=a("a"),T_o=o("ConvNextFeatureExtractor"),M_o=o(" (RegNet model)"),E_o=l(),Qh=a("li"),Xle=a("strong"),C_o=o("resnet"),w_o=o(" \u2014 "),EN=a("a"),A_o=o("ConvNextFeatureExtractor"),L_o=o(" (ResNet model)"),y_o=l(),Wh=a("li"),zle=a("strong"),x_o=o("segformer"),$_o=o(" \u2014 "),CN=a("a"),k_o=o("SegformerFeatureExtractor"),S_o=o(" (SegFormer model)"),R_o=l(),Hh=a("li"),Qle=a("strong"),P_o=o("speech_to_text"),B_o=o(" \u2014 "),wN=a("a"),I_o=o("Speech2TextFeatureExtractor"),N_o=o(" (Speech2Text model)"),q_o=l(),Uh=a("li"),Wle=a("strong"),j_o=o("swin"),D_o=o(" \u2014 "),AN=a("a"),G_o=o("ViTFeatureExtractor"),O_o=o(" (Swin Transformer model)"),V_o=l(),Jh=a("li"),Hle=a("strong"),X_o=o("van"),z_o=o(" \u2014 "),LN=a("a"),Q_o=o("ConvNextFeatureExtractor"),W_o=o(" (VAN model)"),H_o=l(),Yh=a("li"),Ule=a("strong"),U_o=o("vilt"),J_o=o(" \u2014 "),yN=a("a"),Y_o=o("ViltFeatureExtractor"),Z_o=o(" (ViLT model)"),K_o=l(),Zh=a("li"),Jle=a("strong"),euo=o("vit"),ouo=o(" \u2014 "),xN=a("a"),ruo=o("ViTFeatureExtractor"),tuo=o(" (ViT model)"),auo=l(),Kh=a("li"),Yle=a("strong"),nuo=o("vit_mae"),suo=o(" \u2014 "),$N=a("a"),luo=o("ViTFeatureExtractor"),iuo=o(" (ViTMAE model)"),duo=l(),ep=a("li"),Zle=a("strong"),cuo=o("wav2vec2"),fuo=o(" \u2014 "),kN=a("a"),muo=o("Wav2Vec2FeatureExtractor"),guo=o(" (Wav2Vec2 model)"),huo=l(),op=a("li"),Kle=a("strong"),puo=o("wav2vec2-conformer"),_uo=o(" \u2014 "),SN=a("a"),uuo=o("Wav2Vec2FeatureExtractor"),buo=o(" (Wav2Vec2-Conformer model)"),vuo=l(),rp=a("li"),eie=a("strong"),Fuo=o("yolos"),Tuo=o(" \u2014 "),RN=a("a"),Muo=o("YolosFeatureExtractor"),Euo=o(" (YOLOS model)"),Cuo=l(),F(tp.$$.fragment),wuo=l(),F(ap.$$.fragment),Auo=l(),np=a("div"),F(WL.$$.fragment),Luo=l(),oie=a("p"),yuo=o("Register a new feature extractor for this class."),zGe=l(),Si=a("h2"),sp=a("a"),rie=a("span"),F(HL.$$.fragment),xuo=l(),tie=a("span"),$uo=o("AutoProcessor"),QGe=l(),yo=a("div"),F(UL.$$.fragment),kuo=l(),JL=a("p"),Suo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),PN=a("a"),Ruo=o("AutoProcessor.from_pretrained()"),Puo=o(" class method."),Buo=l(),YL=a("p"),Iuo=o("This class cannot be instantiated directly using "),aie=a("code"),Nuo=o("__init__()"),quo=o(" (throws an error)."),juo=l(),Ue=a("div"),F(ZL.$$.fragment),Duo=l(),nie=a("p"),Guo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ouo=l(),Ri=a("p"),Vuo=o("The processor class to instantiate is selected based on the "),sie=a("code"),Xuo=o("model_type"),zuo=o(` property of the config object (either
passed as an argument or loaded from `),lie=a("code"),Quo=o("pretrained_model_name_or_path"),Wuo=o(" if possible):"),Huo=l(),he=a("ul"),lp=a("li"),iie=a("strong"),Uuo=o("clip"),Juo=o(" \u2014 "),BN=a("a"),Yuo=o("CLIPProcessor"),Zuo=o(" (CLIP model)"),Kuo=l(),ip=a("li"),die=a("strong"),e7o=o("flava"),o7o=o(" \u2014 "),cie=a("code"),r7o=o("FLAVAProcessor"),t7o=o(" (FLAVA model)"),a7o=l(),dp=a("li"),fie=a("strong"),n7o=o("layoutlmv2"),s7o=o(" \u2014 "),IN=a("a"),l7o=o("LayoutLMv2Processor"),i7o=o(" (LayoutLMv2 model)"),d7o=l(),cp=a("li"),mie=a("strong"),c7o=o("layoutlmv3"),f7o=o(" \u2014 "),NN=a("a"),m7o=o("LayoutLMv3Processor"),g7o=o(" (LayoutLMv3 model)"),h7o=l(),fp=a("li"),gie=a("strong"),p7o=o("layoutxlm"),_7o=o(" \u2014 "),qN=a("a"),u7o=o("LayoutXLMProcessor"),b7o=o(" (LayoutXLM model)"),v7o=l(),mp=a("li"),hie=a("strong"),F7o=o("sew"),T7o=o(" \u2014 "),jN=a("a"),M7o=o("Wav2Vec2Processor"),E7o=o(" (SEW model)"),C7o=l(),gp=a("li"),pie=a("strong"),w7o=o("sew-d"),A7o=o(" \u2014 "),DN=a("a"),L7o=o("Wav2Vec2Processor"),y7o=o(" (SEW-D model)"),x7o=l(),hp=a("li"),_ie=a("strong"),$7o=o("speech_to_text"),k7o=o(" \u2014 "),GN=a("a"),S7o=o("Speech2TextProcessor"),R7o=o(" (Speech2Text model)"),P7o=l(),pp=a("li"),uie=a("strong"),B7o=o("speech_to_text_2"),I7o=o(" \u2014 "),ON=a("a"),N7o=o("Speech2Text2Processor"),q7o=o(" (Speech2Text2 model)"),j7o=l(),_p=a("li"),bie=a("strong"),D7o=o("trocr"),G7o=o(" \u2014 "),VN=a("a"),O7o=o("TrOCRProcessor"),V7o=o(" (TrOCR model)"),X7o=l(),up=a("li"),vie=a("strong"),z7o=o("unispeech"),Q7o=o(" \u2014 "),XN=a("a"),W7o=o("Wav2Vec2Processor"),H7o=o(" (UniSpeech model)"),U7o=l(),bp=a("li"),Fie=a("strong"),J7o=o("unispeech-sat"),Y7o=o(" \u2014 "),zN=a("a"),Z7o=o("Wav2Vec2Processor"),K7o=o(" (UniSpeechSat model)"),e1o=l(),vp=a("li"),Tie=a("strong"),o1o=o("vilt"),r1o=o(" \u2014 "),QN=a("a"),t1o=o("ViltProcessor"),a1o=o(" (ViLT model)"),n1o=l(),Fp=a("li"),Mie=a("strong"),s1o=o("vision-text-dual-encoder"),l1o=o(" \u2014 "),WN=a("a"),i1o=o("VisionTextDualEncoderProcessor"),d1o=o(" (VisionTextDualEncoder model)"),c1o=l(),Tp=a("li"),Eie=a("strong"),f1o=o("wav2vec2"),m1o=o(" \u2014 "),HN=a("a"),g1o=o("Wav2Vec2Processor"),h1o=o(" (Wav2Vec2 model)"),p1o=l(),Mp=a("li"),Cie=a("strong"),_1o=o("wav2vec2-conformer"),u1o=o(" \u2014 "),UN=a("a"),b1o=o("Wav2Vec2Processor"),v1o=o(" (Wav2Vec2-Conformer model)"),F1o=l(),Ep=a("li"),wie=a("strong"),T1o=o("wavlm"),M1o=o(" \u2014 "),JN=a("a"),E1o=o("Wav2Vec2Processor"),C1o=o(" (WavLM model)"),w1o=l(),F(Cp.$$.fragment),A1o=l(),F(wp.$$.fragment),L1o=l(),Ap=a("div"),F(KL.$$.fragment),y1o=l(),Aie=a("p"),x1o=o("Register a new processor for this class."),WGe=l(),Pi=a("h2"),Lp=a("a"),Lie=a("span"),F(ey.$$.fragment),$1o=l(),yie=a("span"),k1o=o("AutoModel"),HGe=l(),xo=a("div"),F(oy.$$.fragment),S1o=l(),Bi=a("p"),R1o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YN=a("a"),P1o=o("from_pretrained()"),B1o=o(" class method or the "),ZN=a("a"),I1o=o("from_config()"),N1o=o(` class
method.`),q1o=l(),ry=a("p"),j1o=o("This class cannot be instantiated directly using "),xie=a("code"),D1o=o("__init__()"),G1o=o(" (throws an error)."),O1o=l(),nt=a("div"),F(ty.$$.fragment),V1o=l(),$ie=a("p"),X1o=o("Instantiates one of the base model classes of the library from a configuration."),z1o=l(),Ii=a("p"),Q1o=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),W1o=o("not"),H1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=a("a"),U1o=o("from_pretrained()"),J1o=o(" to load the model weights."),Y1o=l(),F(yp.$$.fragment),Z1o=l(),Je=a("div"),F(ay.$$.fragment),K1o=l(),Sie=a("p"),e2o=o("Instantiate one of the base model classes of the library from a pretrained model."),o2o=l(),Ra=a("p"),r2o=o("The model class to instantiate is selected based on the "),Rie=a("code"),t2o=o("model_type"),a2o=o(` property of the config object (either
passed as an argument or loaded from `),Pie=a("code"),n2o=o("pretrained_model_name_or_path"),s2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bie=a("code"),l2o=o("pretrained_model_name_or_path"),i2o=o(":"),d2o=l(),y=a("ul"),xp=a("li"),Iie=a("strong"),c2o=o("albert"),f2o=o(" \u2014 "),eq=a("a"),m2o=o("AlbertModel"),g2o=o(" (ALBERT model)"),h2o=l(),$p=a("li"),Nie=a("strong"),p2o=o("bart"),_2o=o(" \u2014 "),oq=a("a"),u2o=o("BartModel"),b2o=o(" (BART model)"),v2o=l(),kp=a("li"),qie=a("strong"),F2o=o("beit"),T2o=o(" \u2014 "),rq=a("a"),M2o=o("BeitModel"),E2o=o(" (BEiT model)"),C2o=l(),Sp=a("li"),jie=a("strong"),w2o=o("bert"),A2o=o(" \u2014 "),tq=a("a"),L2o=o("BertModel"),y2o=o(" (BERT model)"),x2o=l(),Rp=a("li"),Die=a("strong"),$2o=o("bert-generation"),k2o=o(" \u2014 "),aq=a("a"),S2o=o("BertGenerationEncoder"),R2o=o(" (Bert Generation model)"),P2o=l(),Pp=a("li"),Gie=a("strong"),B2o=o("big_bird"),I2o=o(" \u2014 "),nq=a("a"),N2o=o("BigBirdModel"),q2o=o(" (BigBird model)"),j2o=l(),Bp=a("li"),Oie=a("strong"),D2o=o("bigbird_pegasus"),G2o=o(" \u2014 "),sq=a("a"),O2o=o("BigBirdPegasusModel"),V2o=o(" (BigBird-Pegasus model)"),X2o=l(),Ip=a("li"),Vie=a("strong"),z2o=o("blenderbot"),Q2o=o(" \u2014 "),lq=a("a"),W2o=o("BlenderbotModel"),H2o=o(" (Blenderbot model)"),U2o=l(),Np=a("li"),Xie=a("strong"),J2o=o("blenderbot-small"),Y2o=o(" \u2014 "),iq=a("a"),Z2o=o("BlenderbotSmallModel"),K2o=o(" (BlenderbotSmall model)"),ebo=l(),qp=a("li"),zie=a("strong"),obo=o("bloom"),rbo=o(" \u2014 "),dq=a("a"),tbo=o("BloomModel"),abo=o(" (BLOOM model)"),nbo=l(),jp=a("li"),Qie=a("strong"),sbo=o("camembert"),lbo=o(" \u2014 "),cq=a("a"),ibo=o("CamembertModel"),dbo=o(" (CamemBERT model)"),cbo=l(),Dp=a("li"),Wie=a("strong"),fbo=o("canine"),mbo=o(" \u2014 "),fq=a("a"),gbo=o("CanineModel"),hbo=o(" (CANINE model)"),pbo=l(),Gp=a("li"),Hie=a("strong"),_bo=o("clip"),ubo=o(" \u2014 "),mq=a("a"),bbo=o("CLIPModel"),vbo=o(" (CLIP model)"),Fbo=l(),Op=a("li"),Uie=a("strong"),Tbo=o("convbert"),Mbo=o(" \u2014 "),gq=a("a"),Ebo=o("ConvBertModel"),Cbo=o(" (ConvBERT model)"),wbo=l(),Vp=a("li"),Jie=a("strong"),Abo=o("convnext"),Lbo=o(" \u2014 "),hq=a("a"),ybo=o("ConvNextModel"),xbo=o(" (ConvNeXT model)"),$bo=l(),Xp=a("li"),Yie=a("strong"),kbo=o("ctrl"),Sbo=o(" \u2014 "),pq=a("a"),Rbo=o("CTRLModel"),Pbo=o(" (CTRL model)"),Bbo=l(),zp=a("li"),Zie=a("strong"),Ibo=o("cvt"),Nbo=o(" \u2014 "),_q=a("a"),qbo=o("CvtModel"),jbo=o(" (CvT model)"),Dbo=l(),Qp=a("li"),Kie=a("strong"),Gbo=o("data2vec-audio"),Obo=o(" \u2014 "),uq=a("a"),Vbo=o("Data2VecAudioModel"),Xbo=o(" (Data2VecAudio model)"),zbo=l(),Wp=a("li"),ede=a("strong"),Qbo=o("data2vec-text"),Wbo=o(" \u2014 "),bq=a("a"),Hbo=o("Data2VecTextModel"),Ubo=o(" (Data2VecText model)"),Jbo=l(),Hp=a("li"),ode=a("strong"),Ybo=o("data2vec-vision"),Zbo=o(" \u2014 "),vq=a("a"),Kbo=o("Data2VecVisionModel"),evo=o(" (Data2VecVision model)"),ovo=l(),Up=a("li"),rde=a("strong"),rvo=o("deberta"),tvo=o(" \u2014 "),Fq=a("a"),avo=o("DebertaModel"),nvo=o(" (DeBERTa model)"),svo=l(),Jp=a("li"),tde=a("strong"),lvo=o("deberta-v2"),ivo=o(" \u2014 "),Tq=a("a"),dvo=o("DebertaV2Model"),cvo=o(" (DeBERTa-v2 model)"),fvo=l(),Yp=a("li"),ade=a("strong"),mvo=o("decision_transformer"),gvo=o(" \u2014 "),Mq=a("a"),hvo=o("DecisionTransformerModel"),pvo=o(" (Decision Transformer model)"),_vo=l(),Zp=a("li"),nde=a("strong"),uvo=o("deit"),bvo=o(" \u2014 "),Eq=a("a"),vvo=o("DeiTModel"),Fvo=o(" (DeiT model)"),Tvo=l(),Kp=a("li"),sde=a("strong"),Mvo=o("detr"),Evo=o(" \u2014 "),Cq=a("a"),Cvo=o("DetrModel"),wvo=o(" (DETR model)"),Avo=l(),e_=a("li"),lde=a("strong"),Lvo=o("distilbert"),yvo=o(" \u2014 "),wq=a("a"),xvo=o("DistilBertModel"),$vo=o(" (DistilBERT model)"),kvo=l(),o_=a("li"),ide=a("strong"),Svo=o("dpr"),Rvo=o(" \u2014 "),Aq=a("a"),Pvo=o("DPRQuestionEncoder"),Bvo=o(" (DPR model)"),Ivo=l(),r_=a("li"),dde=a("strong"),Nvo=o("dpt"),qvo=o(" \u2014 "),Lq=a("a"),jvo=o("DPTModel"),Dvo=o(" (DPT model)"),Gvo=l(),t_=a("li"),cde=a("strong"),Ovo=o("electra"),Vvo=o(" \u2014 "),yq=a("a"),Xvo=o("ElectraModel"),zvo=o(" (ELECTRA model)"),Qvo=l(),a_=a("li"),fde=a("strong"),Wvo=o("flaubert"),Hvo=o(" \u2014 "),xq=a("a"),Uvo=o("FlaubertModel"),Jvo=o(" (FlauBERT model)"),Yvo=l(),n_=a("li"),mde=a("strong"),Zvo=o("flava"),Kvo=o(" \u2014 "),$q=a("a"),eFo=o("FlavaModel"),oFo=o(" (FLAVA model)"),rFo=l(),s_=a("li"),gde=a("strong"),tFo=o("fnet"),aFo=o(" \u2014 "),kq=a("a"),nFo=o("FNetModel"),sFo=o(" (FNet model)"),lFo=l(),l_=a("li"),hde=a("strong"),iFo=o("fsmt"),dFo=o(" \u2014 "),Sq=a("a"),cFo=o("FSMTModel"),fFo=o(" (FairSeq Machine-Translation model)"),mFo=l(),Os=a("li"),pde=a("strong"),gFo=o("funnel"),hFo=o(" \u2014 "),Rq=a("a"),pFo=o("FunnelModel"),_Fo=o(" or "),Pq=a("a"),uFo=o("FunnelBaseModel"),bFo=o(" (Funnel Transformer model)"),vFo=l(),i_=a("li"),_de=a("strong"),FFo=o("glpn"),TFo=o(" \u2014 "),Bq=a("a"),MFo=o("GLPNModel"),EFo=o(" (GLPN model)"),CFo=l(),d_=a("li"),ude=a("strong"),wFo=o("gpt2"),AFo=o(" \u2014 "),Iq=a("a"),LFo=o("GPT2Model"),yFo=o(" (OpenAI GPT-2 model)"),xFo=l(),c_=a("li"),bde=a("strong"),$Fo=o("gpt_neo"),kFo=o(" \u2014 "),Nq=a("a"),SFo=o("GPTNeoModel"),RFo=o(" (GPT Neo model)"),PFo=l(),f_=a("li"),vde=a("strong"),BFo=o("gpt_neox"),IFo=o(" \u2014 "),qq=a("a"),NFo=o("GPTNeoXModel"),qFo=o(" (GPT NeoX model)"),jFo=l(),m_=a("li"),Fde=a("strong"),DFo=o("gptj"),GFo=o(" \u2014 "),jq=a("a"),OFo=o("GPTJModel"),VFo=o(" (GPT-J model)"),XFo=l(),g_=a("li"),Tde=a("strong"),zFo=o("hubert"),QFo=o(" \u2014 "),Dq=a("a"),WFo=o("HubertModel"),HFo=o(" (Hubert model)"),UFo=l(),h_=a("li"),Mde=a("strong"),JFo=o("ibert"),YFo=o(" \u2014 "),Gq=a("a"),ZFo=o("IBertModel"),KFo=o(" (I-BERT model)"),e6o=l(),p_=a("li"),Ede=a("strong"),o6o=o("imagegpt"),r6o=o(" \u2014 "),Oq=a("a"),t6o=o("ImageGPTModel"),a6o=o(" (ImageGPT model)"),n6o=l(),__=a("li"),Cde=a("strong"),s6o=o("layoutlm"),l6o=o(" \u2014 "),Vq=a("a"),i6o=o("LayoutLMModel"),d6o=o(" (LayoutLM model)"),c6o=l(),u_=a("li"),wde=a("strong"),f6o=o("layoutlmv2"),m6o=o(" \u2014 "),Xq=a("a"),g6o=o("LayoutLMv2Model"),h6o=o(" (LayoutLMv2 model)"),p6o=l(),b_=a("li"),Ade=a("strong"),_6o=o("layoutlmv3"),u6o=o(" \u2014 "),zq=a("a"),b6o=o("LayoutLMv3Model"),v6o=o(" (LayoutLMv3 model)"),F6o=l(),v_=a("li"),Lde=a("strong"),T6o=o("led"),M6o=o(" \u2014 "),Qq=a("a"),E6o=o("LEDModel"),C6o=o(" (LED model)"),w6o=l(),F_=a("li"),yde=a("strong"),A6o=o("levit"),L6o=o(" \u2014 "),Wq=a("a"),y6o=o("LevitModel"),x6o=o(" (LeViT model)"),$6o=l(),T_=a("li"),xde=a("strong"),k6o=o("longformer"),S6o=o(" \u2014 "),Hq=a("a"),R6o=o("LongformerModel"),P6o=o(" (Longformer model)"),B6o=l(),M_=a("li"),$de=a("strong"),I6o=o("longt5"),N6o=o(" \u2014 "),Uq=a("a"),q6o=o("LongT5Model"),j6o=o(" (LongT5 model)"),D6o=l(),E_=a("li"),kde=a("strong"),G6o=o("luke"),O6o=o(" \u2014 "),Jq=a("a"),V6o=o("LukeModel"),X6o=o(" (LUKE model)"),z6o=l(),C_=a("li"),Sde=a("strong"),Q6o=o("lxmert"),W6o=o(" \u2014 "),Yq=a("a"),H6o=o("LxmertModel"),U6o=o(" (LXMERT model)"),J6o=l(),w_=a("li"),Rde=a("strong"),Y6o=o("m2m_100"),Z6o=o(" \u2014 "),Zq=a("a"),K6o=o("M2M100Model"),eTo=o(" (M2M100 model)"),oTo=l(),A_=a("li"),Pde=a("strong"),rTo=o("marian"),tTo=o(" \u2014 "),Kq=a("a"),aTo=o("MarianModel"),nTo=o(" (Marian model)"),sTo=l(),L_=a("li"),Bde=a("strong"),lTo=o("maskformer"),iTo=o(" \u2014 "),ej=a("a"),dTo=o("MaskFormerModel"),cTo=o(" (MaskFormer model)"),fTo=l(),y_=a("li"),Ide=a("strong"),mTo=o("mbart"),gTo=o(" \u2014 "),oj=a("a"),hTo=o("MBartModel"),pTo=o(" (mBART model)"),_To=l(),x_=a("li"),Nde=a("strong"),uTo=o("mctct"),bTo=o(" \u2014 "),rj=a("a"),vTo=o("MCTCTModel"),FTo=o(" (M-CTC-T model)"),TTo=l(),$_=a("li"),qde=a("strong"),MTo=o("megatron-bert"),ETo=o(" \u2014 "),tj=a("a"),CTo=o("MegatronBertModel"),wTo=o(" (Megatron-BERT model)"),ATo=l(),k_=a("li"),jde=a("strong"),LTo=o("mobilebert"),yTo=o(" \u2014 "),aj=a("a"),xTo=o("MobileBertModel"),$To=o(" (MobileBERT model)"),kTo=l(),S_=a("li"),Dde=a("strong"),STo=o("mpnet"),RTo=o(" \u2014 "),nj=a("a"),PTo=o("MPNetModel"),BTo=o(" (MPNet model)"),ITo=l(),R_=a("li"),Gde=a("strong"),NTo=o("mt5"),qTo=o(" \u2014 "),sj=a("a"),jTo=o("MT5Model"),DTo=o(" (MT5 model)"),GTo=l(),P_=a("li"),Ode=a("strong"),OTo=o("nezha"),VTo=o(" \u2014 "),lj=a("a"),XTo=o("NeZhaModel"),zTo=o(" (NeZha model)"),QTo=l(),B_=a("li"),Vde=a("strong"),WTo=o("nystromformer"),HTo=o(" \u2014 "),ij=a("a"),UTo=o("NystromformerModel"),JTo=o(" (Nystr\xF6mformer model)"),YTo=l(),I_=a("li"),Xde=a("strong"),ZTo=o("openai-gpt"),KTo=o(" \u2014 "),dj=a("a"),eMo=o("OpenAIGPTModel"),oMo=o(" (OpenAI GPT model)"),rMo=l(),N_=a("li"),zde=a("strong"),tMo=o("opt"),aMo=o(" \u2014 "),cj=a("a"),nMo=o("OPTModel"),sMo=o(" (OPT model)"),lMo=l(),q_=a("li"),Qde=a("strong"),iMo=o("pegasus"),dMo=o(" \u2014 "),fj=a("a"),cMo=o("PegasusModel"),fMo=o(" (Pegasus model)"),mMo=l(),j_=a("li"),Wde=a("strong"),gMo=o("perceiver"),hMo=o(" \u2014 "),mj=a("a"),pMo=o("PerceiverModel"),_Mo=o(" (Perceiver model)"),uMo=l(),D_=a("li"),Hde=a("strong"),bMo=o("plbart"),vMo=o(" \u2014 "),gj=a("a"),FMo=o("PLBartModel"),TMo=o(" (PLBart model)"),MMo=l(),G_=a("li"),Ude=a("strong"),EMo=o("poolformer"),CMo=o(" \u2014 "),hj=a("a"),wMo=o("PoolFormerModel"),AMo=o(" (PoolFormer model)"),LMo=l(),O_=a("li"),Jde=a("strong"),yMo=o("prophetnet"),xMo=o(" \u2014 "),pj=a("a"),$Mo=o("ProphetNetModel"),kMo=o(" (ProphetNet model)"),SMo=l(),V_=a("li"),Yde=a("strong"),RMo=o("qdqbert"),PMo=o(" \u2014 "),_j=a("a"),BMo=o("QDQBertModel"),IMo=o(" (QDQBert model)"),NMo=l(),X_=a("li"),Zde=a("strong"),qMo=o("reformer"),jMo=o(" \u2014 "),uj=a("a"),DMo=o("ReformerModel"),GMo=o(" (Reformer model)"),OMo=l(),z_=a("li"),Kde=a("strong"),VMo=o("regnet"),XMo=o(" \u2014 "),bj=a("a"),zMo=o("RegNetModel"),QMo=o(" (RegNet model)"),WMo=l(),Q_=a("li"),ece=a("strong"),HMo=o("rembert"),UMo=o(" \u2014 "),vj=a("a"),JMo=o("RemBertModel"),YMo=o(" (RemBERT model)"),ZMo=l(),W_=a("li"),oce=a("strong"),KMo=o("resnet"),eEo=o(" \u2014 "),Fj=a("a"),oEo=o("ResNetModel"),rEo=o(" (ResNet model)"),tEo=l(),H_=a("li"),rce=a("strong"),aEo=o("retribert"),nEo=o(" \u2014 "),Tj=a("a"),sEo=o("RetriBertModel"),lEo=o(" (RetriBERT model)"),iEo=l(),U_=a("li"),tce=a("strong"),dEo=o("roberta"),cEo=o(" \u2014 "),Mj=a("a"),fEo=o("RobertaModel"),mEo=o(" (RoBERTa model)"),gEo=l(),J_=a("li"),ace=a("strong"),hEo=o("roformer"),pEo=o(" \u2014 "),Ej=a("a"),_Eo=o("RoFormerModel"),uEo=o(" (RoFormer model)"),bEo=l(),Y_=a("li"),nce=a("strong"),vEo=o("segformer"),FEo=o(" \u2014 "),Cj=a("a"),TEo=o("SegformerModel"),MEo=o(" (SegFormer model)"),EEo=l(),Z_=a("li"),sce=a("strong"),CEo=o("sew"),wEo=o(" \u2014 "),wj=a("a"),AEo=o("SEWModel"),LEo=o(" (SEW model)"),yEo=l(),K_=a("li"),lce=a("strong"),xEo=o("sew-d"),$Eo=o(" \u2014 "),Aj=a("a"),kEo=o("SEWDModel"),SEo=o(" (SEW-D model)"),REo=l(),eu=a("li"),ice=a("strong"),PEo=o("speech_to_text"),BEo=o(" \u2014 "),Lj=a("a"),IEo=o("Speech2TextModel"),NEo=o(" (Speech2Text model)"),qEo=l(),ou=a("li"),dce=a("strong"),jEo=o("splinter"),DEo=o(" \u2014 "),yj=a("a"),GEo=o("SplinterModel"),OEo=o(" (Splinter model)"),VEo=l(),ru=a("li"),cce=a("strong"),XEo=o("squeezebert"),zEo=o(" \u2014 "),xj=a("a"),QEo=o("SqueezeBertModel"),WEo=o(" (SqueezeBERT model)"),HEo=l(),tu=a("li"),fce=a("strong"),UEo=o("swin"),JEo=o(" \u2014 "),$j=a("a"),YEo=o("SwinModel"),ZEo=o(" (Swin Transformer model)"),KEo=l(),au=a("li"),mce=a("strong"),e4o=o("t5"),o4o=o(" \u2014 "),kj=a("a"),r4o=o("T5Model"),t4o=o(" (T5 model)"),a4o=l(),nu=a("li"),gce=a("strong"),n4o=o("tapas"),s4o=o(" \u2014 "),Sj=a("a"),l4o=o("TapasModel"),i4o=o(" (TAPAS model)"),d4o=l(),su=a("li"),hce=a("strong"),c4o=o("trajectory_transformer"),f4o=o(" \u2014 "),Rj=a("a"),m4o=o("TrajectoryTransformerModel"),g4o=o(" (Trajectory Transformer model)"),h4o=l(),lu=a("li"),pce=a("strong"),p4o=o("transfo-xl"),_4o=o(" \u2014 "),Pj=a("a"),u4o=o("TransfoXLModel"),b4o=o(" (Transformer-XL model)"),v4o=l(),iu=a("li"),_ce=a("strong"),F4o=o("unispeech"),T4o=o(" \u2014 "),Bj=a("a"),M4o=o("UniSpeechModel"),E4o=o(" (UniSpeech model)"),C4o=l(),du=a("li"),uce=a("strong"),w4o=o("unispeech-sat"),A4o=o(" \u2014 "),Ij=a("a"),L4o=o("UniSpeechSatModel"),y4o=o(" (UniSpeechSat model)"),x4o=l(),cu=a("li"),bce=a("strong"),$4o=o("van"),k4o=o(" \u2014 "),Nj=a("a"),S4o=o("VanModel"),R4o=o(" (VAN model)"),P4o=l(),fu=a("li"),vce=a("strong"),B4o=o("vilt"),I4o=o(" \u2014 "),qj=a("a"),N4o=o("ViltModel"),q4o=o(" (ViLT model)"),j4o=l(),mu=a("li"),Fce=a("strong"),D4o=o("vision-text-dual-encoder"),G4o=o(" \u2014 "),jj=a("a"),O4o=o("VisionTextDualEncoderModel"),V4o=o(" (VisionTextDualEncoder model)"),X4o=l(),gu=a("li"),Tce=a("strong"),z4o=o("visual_bert"),Q4o=o(" \u2014 "),Dj=a("a"),W4o=o("VisualBertModel"),H4o=o(" (VisualBERT model)"),U4o=l(),hu=a("li"),Mce=a("strong"),J4o=o("vit"),Y4o=o(" \u2014 "),Gj=a("a"),Z4o=o("ViTModel"),K4o=o(" (ViT model)"),eCo=l(),pu=a("li"),Ece=a("strong"),oCo=o("vit_mae"),rCo=o(" \u2014 "),Oj=a("a"),tCo=o("ViTMAEModel"),aCo=o(" (ViTMAE model)"),nCo=l(),_u=a("li"),Cce=a("strong"),sCo=o("wav2vec2"),lCo=o(" \u2014 "),Vj=a("a"),iCo=o("Wav2Vec2Model"),dCo=o(" (Wav2Vec2 model)"),cCo=l(),uu=a("li"),wce=a("strong"),fCo=o("wav2vec2-conformer"),mCo=o(" \u2014 "),Xj=a("a"),gCo=o("Wav2Vec2ConformerModel"),hCo=o(" (Wav2Vec2-Conformer model)"),pCo=l(),bu=a("li"),Ace=a("strong"),_Co=o("wavlm"),uCo=o(" \u2014 "),zj=a("a"),bCo=o("WavLMModel"),vCo=o(" (WavLM model)"),FCo=l(),vu=a("li"),Lce=a("strong"),TCo=o("xglm"),MCo=o(" \u2014 "),Qj=a("a"),ECo=o("XGLMModel"),CCo=o(" (XGLM model)"),wCo=l(),Fu=a("li"),yce=a("strong"),ACo=o("xlm"),LCo=o(" \u2014 "),Wj=a("a"),yCo=o("XLMModel"),xCo=o(" (XLM model)"),$Co=l(),Tu=a("li"),xce=a("strong"),kCo=o("xlm-prophetnet"),SCo=o(" \u2014 "),Hj=a("a"),RCo=o("XLMProphetNetModel"),PCo=o(" (XLM-ProphetNet model)"),BCo=l(),Mu=a("li"),$ce=a("strong"),ICo=o("xlm-roberta"),NCo=o(" \u2014 "),Uj=a("a"),qCo=o("XLMRobertaModel"),jCo=o(" (XLM-RoBERTa model)"),DCo=l(),Eu=a("li"),kce=a("strong"),GCo=o("xlm-roberta-xl"),OCo=o(" \u2014 "),Jj=a("a"),VCo=o("XLMRobertaXLModel"),XCo=o(" (XLM-RoBERTa-XL model)"),zCo=l(),Cu=a("li"),Sce=a("strong"),QCo=o("xlnet"),WCo=o(" \u2014 "),Yj=a("a"),HCo=o("XLNetModel"),UCo=o(" (XLNet model)"),JCo=l(),wu=a("li"),Rce=a("strong"),YCo=o("yolos"),ZCo=o(" \u2014 "),Zj=a("a"),KCo=o("YolosModel"),e5o=o(" (YOLOS model)"),o5o=l(),Au=a("li"),Pce=a("strong"),r5o=o("yoso"),t5o=o(" \u2014 "),Kj=a("a"),a5o=o("YosoModel"),n5o=o(" (YOSO model)"),s5o=l(),Lu=a("p"),l5o=o("The model is set in evaluation mode by default using "),Bce=a("code"),i5o=o("model.eval()"),d5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),c5o=o("model.train()"),f5o=l(),F(yu.$$.fragment),UGe=l(),Ni=a("h2"),xu=a("a"),Nce=a("span"),F(ny.$$.fragment),m5o=l(),qce=a("span"),g5o=o("AutoModelForPreTraining"),JGe=l(),$o=a("div"),F(sy.$$.fragment),h5o=l(),qi=a("p"),p5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eD=a("a"),_5o=o("from_pretrained()"),u5o=o(" class method or the "),oD=a("a"),b5o=o("from_config()"),v5o=o(` class
method.`),F5o=l(),ly=a("p"),T5o=o("This class cannot be instantiated directly using "),jce=a("code"),M5o=o("__init__()"),E5o=o(" (throws an error)."),C5o=l(),st=a("div"),F(iy.$$.fragment),w5o=l(),Dce=a("p"),A5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L5o=l(),ji=a("p"),y5o=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),x5o=o("not"),$5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),k5o=o("from_pretrained()"),S5o=o(" to load the model weights."),R5o=l(),F($u.$$.fragment),P5o=l(),Ye=a("div"),F(dy.$$.fragment),B5o=l(),Oce=a("p"),I5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N5o=l(),Pa=a("p"),q5o=o("The model class to instantiate is selected based on the "),Vce=a("code"),j5o=o("model_type"),D5o=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),G5o=o("pretrained_model_name_or_path"),O5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),V5o=o("pretrained_model_name_or_path"),X5o=o(":"),z5o=l(),G=a("ul"),ku=a("li"),Qce=a("strong"),Q5o=o("albert"),W5o=o(" \u2014 "),tD=a("a"),H5o=o("AlbertForPreTraining"),U5o=o(" (ALBERT model)"),J5o=l(),Su=a("li"),Wce=a("strong"),Y5o=o("bart"),Z5o=o(" \u2014 "),aD=a("a"),K5o=o("BartForConditionalGeneration"),e3o=o(" (BART model)"),o3o=l(),Ru=a("li"),Hce=a("strong"),r3o=o("bert"),t3o=o(" \u2014 "),nD=a("a"),a3o=o("BertForPreTraining"),n3o=o(" (BERT model)"),s3o=l(),Pu=a("li"),Uce=a("strong"),l3o=o("big_bird"),i3o=o(" \u2014 "),sD=a("a"),d3o=o("BigBirdForPreTraining"),c3o=o(" (BigBird model)"),f3o=l(),Bu=a("li"),Jce=a("strong"),m3o=o("bloom"),g3o=o(" \u2014 "),lD=a("a"),h3o=o("BloomForCausalLM"),p3o=o(" (BLOOM model)"),_3o=l(),Iu=a("li"),Yce=a("strong"),u3o=o("camembert"),b3o=o(" \u2014 "),iD=a("a"),v3o=o("CamembertForMaskedLM"),F3o=o(" (CamemBERT model)"),T3o=l(),Nu=a("li"),Zce=a("strong"),M3o=o("ctrl"),E3o=o(" \u2014 "),dD=a("a"),C3o=o("CTRLLMHeadModel"),w3o=o(" (CTRL model)"),A3o=l(),qu=a("li"),Kce=a("strong"),L3o=o("data2vec-text"),y3o=o(" \u2014 "),cD=a("a"),x3o=o("Data2VecTextForMaskedLM"),$3o=o(" (Data2VecText model)"),k3o=l(),ju=a("li"),efe=a("strong"),S3o=o("deberta"),R3o=o(" \u2014 "),fD=a("a"),P3o=o("DebertaForMaskedLM"),B3o=o(" (DeBERTa model)"),I3o=l(),Du=a("li"),ofe=a("strong"),N3o=o("deberta-v2"),q3o=o(" \u2014 "),mD=a("a"),j3o=o("DebertaV2ForMaskedLM"),D3o=o(" (DeBERTa-v2 model)"),G3o=l(),Gu=a("li"),rfe=a("strong"),O3o=o("distilbert"),V3o=o(" \u2014 "),gD=a("a"),X3o=o("DistilBertForMaskedLM"),z3o=o(" (DistilBERT model)"),Q3o=l(),Ou=a("li"),tfe=a("strong"),W3o=o("electra"),H3o=o(" \u2014 "),hD=a("a"),U3o=o("ElectraForPreTraining"),J3o=o(" (ELECTRA model)"),Y3o=l(),Vu=a("li"),afe=a("strong"),Z3o=o("flaubert"),K3o=o(" \u2014 "),pD=a("a"),e0o=o("FlaubertWithLMHeadModel"),o0o=o(" (FlauBERT model)"),r0o=l(),Xu=a("li"),nfe=a("strong"),t0o=o("flava"),a0o=o(" \u2014 "),_D=a("a"),n0o=o("FlavaForPreTraining"),s0o=o(" (FLAVA model)"),l0o=l(),zu=a("li"),sfe=a("strong"),i0o=o("fnet"),d0o=o(" \u2014 "),uD=a("a"),c0o=o("FNetForPreTraining"),f0o=o(" (FNet model)"),m0o=l(),Qu=a("li"),lfe=a("strong"),g0o=o("fsmt"),h0o=o(" \u2014 "),bD=a("a"),p0o=o("FSMTForConditionalGeneration"),_0o=o(" (FairSeq Machine-Translation model)"),u0o=l(),Wu=a("li"),ife=a("strong"),b0o=o("funnel"),v0o=o(" \u2014 "),vD=a("a"),F0o=o("FunnelForPreTraining"),T0o=o(" (Funnel Transformer model)"),M0o=l(),Hu=a("li"),dfe=a("strong"),E0o=o("gpt2"),C0o=o(" \u2014 "),FD=a("a"),w0o=o("GPT2LMHeadModel"),A0o=o(" (OpenAI GPT-2 model)"),L0o=l(),Uu=a("li"),cfe=a("strong"),y0o=o("ibert"),x0o=o(" \u2014 "),TD=a("a"),$0o=o("IBertForMaskedLM"),k0o=o(" (I-BERT model)"),S0o=l(),Ju=a("li"),ffe=a("strong"),R0o=o("layoutlm"),P0o=o(" \u2014 "),MD=a("a"),B0o=o("LayoutLMForMaskedLM"),I0o=o(" (LayoutLM model)"),N0o=l(),Yu=a("li"),mfe=a("strong"),q0o=o("longformer"),j0o=o(" \u2014 "),ED=a("a"),D0o=o("LongformerForMaskedLM"),G0o=o(" (Longformer model)"),O0o=l(),Zu=a("li"),gfe=a("strong"),V0o=o("lxmert"),X0o=o(" \u2014 "),CD=a("a"),z0o=o("LxmertForPreTraining"),Q0o=o(" (LXMERT model)"),W0o=l(),Ku=a("li"),hfe=a("strong"),H0o=o("megatron-bert"),U0o=o(" \u2014 "),wD=a("a"),J0o=o("MegatronBertForPreTraining"),Y0o=o(" (Megatron-BERT model)"),Z0o=l(),e7=a("li"),pfe=a("strong"),K0o=o("mobilebert"),ewo=o(" \u2014 "),AD=a("a"),owo=o("MobileBertForPreTraining"),rwo=o(" (MobileBERT model)"),two=l(),o7=a("li"),_fe=a("strong"),awo=o("mpnet"),nwo=o(" \u2014 "),LD=a("a"),swo=o("MPNetForMaskedLM"),lwo=o(" (MPNet model)"),iwo=l(),r7=a("li"),ufe=a("strong"),dwo=o("nezha"),cwo=o(" \u2014 "),yD=a("a"),fwo=o("NeZhaForPreTraining"),mwo=o(" (NeZha model)"),gwo=l(),t7=a("li"),bfe=a("strong"),hwo=o("openai-gpt"),pwo=o(" \u2014 "),xD=a("a"),_wo=o("OpenAIGPTLMHeadModel"),uwo=o(" (OpenAI GPT model)"),bwo=l(),a7=a("li"),vfe=a("strong"),vwo=o("retribert"),Fwo=o(" \u2014 "),$D=a("a"),Two=o("RetriBertModel"),Mwo=o(" (RetriBERT model)"),Ewo=l(),n7=a("li"),Ffe=a("strong"),Cwo=o("roberta"),wwo=o(" \u2014 "),kD=a("a"),Awo=o("RobertaForMaskedLM"),Lwo=o(" (RoBERTa model)"),ywo=l(),s7=a("li"),Tfe=a("strong"),xwo=o("splinter"),$wo=o(" \u2014 "),SD=a("a"),kwo=o("SplinterForPreTraining"),Swo=o(" (Splinter model)"),Rwo=l(),l7=a("li"),Mfe=a("strong"),Pwo=o("squeezebert"),Bwo=o(" \u2014 "),RD=a("a"),Iwo=o("SqueezeBertForMaskedLM"),Nwo=o(" (SqueezeBERT model)"),qwo=l(),i7=a("li"),Efe=a("strong"),jwo=o("t5"),Dwo=o(" \u2014 "),PD=a("a"),Gwo=o("T5ForConditionalGeneration"),Owo=o(" (T5 model)"),Vwo=l(),d7=a("li"),Cfe=a("strong"),Xwo=o("tapas"),zwo=o(" \u2014 "),BD=a("a"),Qwo=o("TapasForMaskedLM"),Wwo=o(" (TAPAS model)"),Hwo=l(),c7=a("li"),wfe=a("strong"),Uwo=o("transfo-xl"),Jwo=o(" \u2014 "),ID=a("a"),Ywo=o("TransfoXLLMHeadModel"),Zwo=o(" (Transformer-XL model)"),Kwo=l(),f7=a("li"),Afe=a("strong"),eAo=o("unispeech"),oAo=o(" \u2014 "),ND=a("a"),rAo=o("UniSpeechForPreTraining"),tAo=o(" (UniSpeech model)"),aAo=l(),m7=a("li"),Lfe=a("strong"),nAo=o("unispeech-sat"),sAo=o(" \u2014 "),qD=a("a"),lAo=o("UniSpeechSatForPreTraining"),iAo=o(" (UniSpeechSat model)"),dAo=l(),g7=a("li"),yfe=a("strong"),cAo=o("visual_bert"),fAo=o(" \u2014 "),jD=a("a"),mAo=o("VisualBertForPreTraining"),gAo=o(" (VisualBERT model)"),hAo=l(),h7=a("li"),xfe=a("strong"),pAo=o("vit_mae"),_Ao=o(" \u2014 "),DD=a("a"),uAo=o("ViTMAEForPreTraining"),bAo=o(" (ViTMAE model)"),vAo=l(),p7=a("li"),$fe=a("strong"),FAo=o("wav2vec2"),TAo=o(" \u2014 "),GD=a("a"),MAo=o("Wav2Vec2ForPreTraining"),EAo=o(" (Wav2Vec2 model)"),CAo=l(),_7=a("li"),kfe=a("strong"),wAo=o("wav2vec2-conformer"),AAo=o(" \u2014 "),OD=a("a"),LAo=o("Wav2Vec2ConformerForPreTraining"),yAo=o(" (Wav2Vec2-Conformer model)"),xAo=l(),u7=a("li"),Sfe=a("strong"),$Ao=o("xlm"),kAo=o(" \u2014 "),VD=a("a"),SAo=o("XLMWithLMHeadModel"),RAo=o(" (XLM model)"),PAo=l(),b7=a("li"),Rfe=a("strong"),BAo=o("xlm-roberta"),IAo=o(" \u2014 "),XD=a("a"),NAo=o("XLMRobertaForMaskedLM"),qAo=o(" (XLM-RoBERTa model)"),jAo=l(),v7=a("li"),Pfe=a("strong"),DAo=o("xlm-roberta-xl"),GAo=o(" \u2014 "),zD=a("a"),OAo=o("XLMRobertaXLForMaskedLM"),VAo=o(" (XLM-RoBERTa-XL model)"),XAo=l(),F7=a("li"),Bfe=a("strong"),zAo=o("xlnet"),QAo=o(" \u2014 "),QD=a("a"),WAo=o("XLNetLMHeadModel"),HAo=o(" (XLNet model)"),UAo=l(),T7=a("p"),JAo=o("The model is set in evaluation mode by default using "),Ife=a("code"),YAo=o("model.eval()"),ZAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=a("code"),KAo=o("model.train()"),eLo=l(),F(M7.$$.fragment),YGe=l(),Di=a("h2"),E7=a("a"),qfe=a("span"),F(cy.$$.fragment),oLo=l(),jfe=a("span"),rLo=o("AutoModelForCausalLM"),ZGe=l(),ko=a("div"),F(fy.$$.fragment),tLo=l(),Gi=a("p"),aLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WD=a("a"),nLo=o("from_pretrained()"),sLo=o(" class method or the "),HD=a("a"),lLo=o("from_config()"),iLo=o(` class
method.`),dLo=l(),my=a("p"),cLo=o("This class cannot be instantiated directly using "),Dfe=a("code"),fLo=o("__init__()"),mLo=o(" (throws an error)."),gLo=l(),lt=a("div"),F(gy.$$.fragment),hLo=l(),Gfe=a("p"),pLo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Lo=l(),Oi=a("p"),uLo=o(`Note:
Loading a model from its configuration file does `),Ofe=a("strong"),bLo=o("not"),vLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=a("a"),FLo=o("from_pretrained()"),TLo=o(" to load the model weights."),MLo=l(),F(C7.$$.fragment),ELo=l(),Ze=a("div"),F(hy.$$.fragment),CLo=l(),Vfe=a("p"),wLo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ALo=l(),Ba=a("p"),LLo=o("The model class to instantiate is selected based on the "),Xfe=a("code"),yLo=o("model_type"),xLo=o(` property of the config object (either
passed as an argument or loaded from `),zfe=a("code"),$Lo=o("pretrained_model_name_or_path"),kLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qfe=a("code"),SLo=o("pretrained_model_name_or_path"),RLo=o(":"),PLo=l(),z=a("ul"),w7=a("li"),Wfe=a("strong"),BLo=o("bart"),ILo=o(" \u2014 "),JD=a("a"),NLo=o("BartForCausalLM"),qLo=o(" (BART model)"),jLo=l(),A7=a("li"),Hfe=a("strong"),DLo=o("bert"),GLo=o(" \u2014 "),YD=a("a"),OLo=o("BertLMHeadModel"),VLo=o(" (BERT model)"),XLo=l(),L7=a("li"),Ufe=a("strong"),zLo=o("bert-generation"),QLo=o(" \u2014 "),ZD=a("a"),WLo=o("BertGenerationDecoder"),HLo=o(" (Bert Generation model)"),ULo=l(),y7=a("li"),Jfe=a("strong"),JLo=o("big_bird"),YLo=o(" \u2014 "),KD=a("a"),ZLo=o("BigBirdForCausalLM"),KLo=o(" (BigBird model)"),eyo=l(),x7=a("li"),Yfe=a("strong"),oyo=o("bigbird_pegasus"),ryo=o(" \u2014 "),eG=a("a"),tyo=o("BigBirdPegasusForCausalLM"),ayo=o(" (BigBird-Pegasus model)"),nyo=l(),$7=a("li"),Zfe=a("strong"),syo=o("blenderbot"),lyo=o(" \u2014 "),oG=a("a"),iyo=o("BlenderbotForCausalLM"),dyo=o(" (Blenderbot model)"),cyo=l(),k7=a("li"),Kfe=a("strong"),fyo=o("blenderbot-small"),myo=o(" \u2014 "),rG=a("a"),gyo=o("BlenderbotSmallForCausalLM"),hyo=o(" (BlenderbotSmall model)"),pyo=l(),S7=a("li"),eme=a("strong"),_yo=o("bloom"),uyo=o(" \u2014 "),tG=a("a"),byo=o("BloomForCausalLM"),vyo=o(" (BLOOM model)"),Fyo=l(),R7=a("li"),ome=a("strong"),Tyo=o("camembert"),Myo=o(" \u2014 "),aG=a("a"),Eyo=o("CamembertForCausalLM"),Cyo=o(" (CamemBERT model)"),wyo=l(),P7=a("li"),rme=a("strong"),Ayo=o("ctrl"),Lyo=o(" \u2014 "),nG=a("a"),yyo=o("CTRLLMHeadModel"),xyo=o(" (CTRL model)"),$yo=l(),B7=a("li"),tme=a("strong"),kyo=o("data2vec-text"),Syo=o(" \u2014 "),sG=a("a"),Ryo=o("Data2VecTextForCausalLM"),Pyo=o(" (Data2VecText model)"),Byo=l(),I7=a("li"),ame=a("strong"),Iyo=o("electra"),Nyo=o(" \u2014 "),lG=a("a"),qyo=o("ElectraForCausalLM"),jyo=o(" (ELECTRA model)"),Dyo=l(),N7=a("li"),nme=a("strong"),Gyo=o("gpt2"),Oyo=o(" \u2014 "),iG=a("a"),Vyo=o("GPT2LMHeadModel"),Xyo=o(" (OpenAI GPT-2 model)"),zyo=l(),q7=a("li"),sme=a("strong"),Qyo=o("gpt_neo"),Wyo=o(" \u2014 "),dG=a("a"),Hyo=o("GPTNeoForCausalLM"),Uyo=o(" (GPT Neo model)"),Jyo=l(),j7=a("li"),lme=a("strong"),Yyo=o("gpt_neox"),Zyo=o(" \u2014 "),cG=a("a"),Kyo=o("GPTNeoXForCausalLM"),e8o=o(" (GPT NeoX model)"),o8o=l(),D7=a("li"),ime=a("strong"),r8o=o("gptj"),t8o=o(" \u2014 "),fG=a("a"),a8o=o("GPTJForCausalLM"),n8o=o(" (GPT-J model)"),s8o=l(),G7=a("li"),dme=a("strong"),l8o=o("marian"),i8o=o(" \u2014 "),mG=a("a"),d8o=o("MarianForCausalLM"),c8o=o(" (Marian model)"),f8o=l(),O7=a("li"),cme=a("strong"),m8o=o("mbart"),g8o=o(" \u2014 "),gG=a("a"),h8o=o("MBartForCausalLM"),p8o=o(" (mBART model)"),_8o=l(),V7=a("li"),fme=a("strong"),u8o=o("megatron-bert"),b8o=o(" \u2014 "),hG=a("a"),v8o=o("MegatronBertForCausalLM"),F8o=o(" (Megatron-BERT model)"),T8o=l(),X7=a("li"),mme=a("strong"),M8o=o("openai-gpt"),E8o=o(" \u2014 "),pG=a("a"),C8o=o("OpenAIGPTLMHeadModel"),w8o=o(" (OpenAI GPT model)"),A8o=l(),z7=a("li"),gme=a("strong"),L8o=o("opt"),y8o=o(" \u2014 "),_G=a("a"),x8o=o("OPTForCausalLM"),$8o=o(" (OPT model)"),k8o=l(),Q7=a("li"),hme=a("strong"),S8o=o("pegasus"),R8o=o(" \u2014 "),uG=a("a"),P8o=o("PegasusForCausalLM"),B8o=o(" (Pegasus model)"),I8o=l(),W7=a("li"),pme=a("strong"),N8o=o("plbart"),q8o=o(" \u2014 "),bG=a("a"),j8o=o("PLBartForCausalLM"),D8o=o(" (PLBart model)"),G8o=l(),H7=a("li"),_me=a("strong"),O8o=o("prophetnet"),V8o=o(" \u2014 "),vG=a("a"),X8o=o("ProphetNetForCausalLM"),z8o=o(" (ProphetNet model)"),Q8o=l(),U7=a("li"),ume=a("strong"),W8o=o("qdqbert"),H8o=o(" \u2014 "),FG=a("a"),U8o=o("QDQBertLMHeadModel"),J8o=o(" (QDQBert model)"),Y8o=l(),J7=a("li"),bme=a("strong"),Z8o=o("reformer"),K8o=o(" \u2014 "),TG=a("a"),e9o=o("ReformerModelWithLMHead"),o9o=o(" (Reformer model)"),r9o=l(),Y7=a("li"),vme=a("strong"),t9o=o("rembert"),a9o=o(" \u2014 "),MG=a("a"),n9o=o("RemBertForCausalLM"),s9o=o(" (RemBERT model)"),l9o=l(),Z7=a("li"),Fme=a("strong"),i9o=o("roberta"),d9o=o(" \u2014 "),EG=a("a"),c9o=o("RobertaForCausalLM"),f9o=o(" (RoBERTa model)"),m9o=l(),K7=a("li"),Tme=a("strong"),g9o=o("roformer"),h9o=o(" \u2014 "),CG=a("a"),p9o=o("RoFormerForCausalLM"),_9o=o(" (RoFormer model)"),u9o=l(),e1=a("li"),Mme=a("strong"),b9o=o("speech_to_text_2"),v9o=o(" \u2014 "),wG=a("a"),F9o=o("Speech2Text2ForCausalLM"),T9o=o(" (Speech2Text2 model)"),M9o=l(),o1=a("li"),Eme=a("strong"),E9o=o("transfo-xl"),C9o=o(" \u2014 "),AG=a("a"),w9o=o("TransfoXLLMHeadModel"),A9o=o(" (Transformer-XL model)"),L9o=l(),r1=a("li"),Cme=a("strong"),y9o=o("trocr"),x9o=o(" \u2014 "),LG=a("a"),$9o=o("TrOCRForCausalLM"),k9o=o(" (TrOCR model)"),S9o=l(),t1=a("li"),wme=a("strong"),R9o=o("xglm"),P9o=o(" \u2014 "),yG=a("a"),B9o=o("XGLMForCausalLM"),I9o=o(" (XGLM model)"),N9o=l(),a1=a("li"),Ame=a("strong"),q9o=o("xlm"),j9o=o(" \u2014 "),xG=a("a"),D9o=o("XLMWithLMHeadModel"),G9o=o(" (XLM model)"),O9o=l(),n1=a("li"),Lme=a("strong"),V9o=o("xlm-prophetnet"),X9o=o(" \u2014 "),$G=a("a"),z9o=o("XLMProphetNetForCausalLM"),Q9o=o(" (XLM-ProphetNet model)"),W9o=l(),s1=a("li"),yme=a("strong"),H9o=o("xlm-roberta"),U9o=o(" \u2014 "),kG=a("a"),J9o=o("XLMRobertaForCausalLM"),Y9o=o(" (XLM-RoBERTa model)"),Z9o=l(),l1=a("li"),xme=a("strong"),K9o=o("xlm-roberta-xl"),exo=o(" \u2014 "),SG=a("a"),oxo=o("XLMRobertaXLForCausalLM"),rxo=o(" (XLM-RoBERTa-XL model)"),txo=l(),i1=a("li"),$me=a("strong"),axo=o("xlnet"),nxo=o(" \u2014 "),RG=a("a"),sxo=o("XLNetLMHeadModel"),lxo=o(" (XLNet model)"),ixo=l(),d1=a("p"),dxo=o("The model is set in evaluation mode by default using "),kme=a("code"),cxo=o("model.eval()"),fxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),mxo=o("model.train()"),gxo=l(),F(c1.$$.fragment),KGe=l(),Vi=a("h2"),f1=a("a"),Rme=a("span"),F(py.$$.fragment),hxo=l(),Pme=a("span"),pxo=o("AutoModelForMaskedLM"),eOe=l(),So=a("div"),F(_y.$$.fragment),_xo=l(),Xi=a("p"),uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PG=a("a"),bxo=o("from_pretrained()"),vxo=o(" class method or the "),BG=a("a"),Fxo=o("from_config()"),Txo=o(` class
method.`),Mxo=l(),uy=a("p"),Exo=o("This class cannot be instantiated directly using "),Bme=a("code"),Cxo=o("__init__()"),wxo=o(" (throws an error)."),Axo=l(),it=a("div"),F(by.$$.fragment),Lxo=l(),Ime=a("p"),yxo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xxo=l(),zi=a("p"),$xo=o(`Note:
Loading a model from its configuration file does `),Nme=a("strong"),kxo=o("not"),Sxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),Rxo=o("from_pretrained()"),Pxo=o(" to load the model weights."),Bxo=l(),F(m1.$$.fragment),Ixo=l(),Ke=a("div"),F(vy.$$.fragment),Nxo=l(),qme=a("p"),qxo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jxo=l(),Ia=a("p"),Dxo=o("The model class to instantiate is selected based on the "),jme=a("code"),Gxo=o("model_type"),Oxo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),Vxo=o("pretrained_model_name_or_path"),Xxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),zxo=o("pretrained_model_name_or_path"),Qxo=o(":"),Wxo=l(),Q=a("ul"),g1=a("li"),Ome=a("strong"),Hxo=o("albert"),Uxo=o(" \u2014 "),NG=a("a"),Jxo=o("AlbertForMaskedLM"),Yxo=o(" (ALBERT model)"),Zxo=l(),h1=a("li"),Vme=a("strong"),Kxo=o("bart"),e$o=o(" \u2014 "),qG=a("a"),o$o=o("BartForConditionalGeneration"),r$o=o(" (BART model)"),t$o=l(),p1=a("li"),Xme=a("strong"),a$o=o("bert"),n$o=o(" \u2014 "),jG=a("a"),s$o=o("BertForMaskedLM"),l$o=o(" (BERT model)"),i$o=l(),_1=a("li"),zme=a("strong"),d$o=o("big_bird"),c$o=o(" \u2014 "),DG=a("a"),f$o=o("BigBirdForMaskedLM"),m$o=o(" (BigBird model)"),g$o=l(),u1=a("li"),Qme=a("strong"),h$o=o("camembert"),p$o=o(" \u2014 "),GG=a("a"),_$o=o("CamembertForMaskedLM"),u$o=o(" (CamemBERT model)"),b$o=l(),b1=a("li"),Wme=a("strong"),v$o=o("convbert"),F$o=o(" \u2014 "),OG=a("a"),T$o=o("ConvBertForMaskedLM"),M$o=o(" (ConvBERT model)"),E$o=l(),v1=a("li"),Hme=a("strong"),C$o=o("data2vec-text"),w$o=o(" \u2014 "),VG=a("a"),A$o=o("Data2VecTextForMaskedLM"),L$o=o(" (Data2VecText model)"),y$o=l(),F1=a("li"),Ume=a("strong"),x$o=o("deberta"),$$o=o(" \u2014 "),XG=a("a"),k$o=o("DebertaForMaskedLM"),S$o=o(" (DeBERTa model)"),R$o=l(),T1=a("li"),Jme=a("strong"),P$o=o("deberta-v2"),B$o=o(" \u2014 "),zG=a("a"),I$o=o("DebertaV2ForMaskedLM"),N$o=o(" (DeBERTa-v2 model)"),q$o=l(),M1=a("li"),Yme=a("strong"),j$o=o("distilbert"),D$o=o(" \u2014 "),QG=a("a"),G$o=o("DistilBertForMaskedLM"),O$o=o(" (DistilBERT model)"),V$o=l(),E1=a("li"),Zme=a("strong"),X$o=o("electra"),z$o=o(" \u2014 "),WG=a("a"),Q$o=o("ElectraForMaskedLM"),W$o=o(" (ELECTRA model)"),H$o=l(),C1=a("li"),Kme=a("strong"),U$o=o("flaubert"),J$o=o(" \u2014 "),HG=a("a"),Y$o=o("FlaubertWithLMHeadModel"),Z$o=o(" (FlauBERT model)"),K$o=l(),w1=a("li"),ege=a("strong"),eko=o("fnet"),oko=o(" \u2014 "),UG=a("a"),rko=o("FNetForMaskedLM"),tko=o(" (FNet model)"),ako=l(),A1=a("li"),oge=a("strong"),nko=o("funnel"),sko=o(" \u2014 "),JG=a("a"),lko=o("FunnelForMaskedLM"),iko=o(" (Funnel Transformer model)"),dko=l(),L1=a("li"),rge=a("strong"),cko=o("ibert"),fko=o(" \u2014 "),YG=a("a"),mko=o("IBertForMaskedLM"),gko=o(" (I-BERT model)"),hko=l(),y1=a("li"),tge=a("strong"),pko=o("layoutlm"),_ko=o(" \u2014 "),ZG=a("a"),uko=o("LayoutLMForMaskedLM"),bko=o(" (LayoutLM model)"),vko=l(),x1=a("li"),age=a("strong"),Fko=o("longformer"),Tko=o(" \u2014 "),KG=a("a"),Mko=o("LongformerForMaskedLM"),Eko=o(" (Longformer model)"),Cko=l(),$1=a("li"),nge=a("strong"),wko=o("luke"),Ako=o(" \u2014 "),eO=a("a"),Lko=o("LukeForMaskedLM"),yko=o(" (LUKE model)"),xko=l(),k1=a("li"),sge=a("strong"),$ko=o("mbart"),kko=o(" \u2014 "),oO=a("a"),Sko=o("MBartForConditionalGeneration"),Rko=o(" (mBART model)"),Pko=l(),S1=a("li"),lge=a("strong"),Bko=o("megatron-bert"),Iko=o(" \u2014 "),rO=a("a"),Nko=o("MegatronBertForMaskedLM"),qko=o(" (Megatron-BERT model)"),jko=l(),R1=a("li"),ige=a("strong"),Dko=o("mobilebert"),Gko=o(" \u2014 "),tO=a("a"),Oko=o("MobileBertForMaskedLM"),Vko=o(" (MobileBERT model)"),Xko=l(),P1=a("li"),dge=a("strong"),zko=o("mpnet"),Qko=o(" \u2014 "),aO=a("a"),Wko=o("MPNetForMaskedLM"),Hko=o(" (MPNet model)"),Uko=l(),B1=a("li"),cge=a("strong"),Jko=o("nezha"),Yko=o(" \u2014 "),nO=a("a"),Zko=o("NeZhaForMaskedLM"),Kko=o(" (NeZha model)"),eSo=l(),I1=a("li"),fge=a("strong"),oSo=o("nystromformer"),rSo=o(" \u2014 "),sO=a("a"),tSo=o("NystromformerForMaskedLM"),aSo=o(" (Nystr\xF6mformer model)"),nSo=l(),N1=a("li"),mge=a("strong"),sSo=o("perceiver"),lSo=o(" \u2014 "),lO=a("a"),iSo=o("PerceiverForMaskedLM"),dSo=o(" (Perceiver model)"),cSo=l(),q1=a("li"),gge=a("strong"),fSo=o("qdqbert"),mSo=o(" \u2014 "),iO=a("a"),gSo=o("QDQBertForMaskedLM"),hSo=o(" (QDQBert model)"),pSo=l(),j1=a("li"),hge=a("strong"),_So=o("reformer"),uSo=o(" \u2014 "),dO=a("a"),bSo=o("ReformerForMaskedLM"),vSo=o(" (Reformer model)"),FSo=l(),D1=a("li"),pge=a("strong"),TSo=o("rembert"),MSo=o(" \u2014 "),cO=a("a"),ESo=o("RemBertForMaskedLM"),CSo=o(" (RemBERT model)"),wSo=l(),G1=a("li"),_ge=a("strong"),ASo=o("roberta"),LSo=o(" \u2014 "),fO=a("a"),ySo=o("RobertaForMaskedLM"),xSo=o(" (RoBERTa model)"),$So=l(),O1=a("li"),uge=a("strong"),kSo=o("roformer"),SSo=o(" \u2014 "),mO=a("a"),RSo=o("RoFormerForMaskedLM"),PSo=o(" (RoFormer model)"),BSo=l(),V1=a("li"),bge=a("strong"),ISo=o("squeezebert"),NSo=o(" \u2014 "),gO=a("a"),qSo=o("SqueezeBertForMaskedLM"),jSo=o(" (SqueezeBERT model)"),DSo=l(),X1=a("li"),vge=a("strong"),GSo=o("tapas"),OSo=o(" \u2014 "),hO=a("a"),VSo=o("TapasForMaskedLM"),XSo=o(" (TAPAS model)"),zSo=l(),z1=a("li"),Fge=a("strong"),QSo=o("wav2vec2"),WSo=o(" \u2014 "),Tge=a("code"),HSo=o("Wav2Vec2ForMaskedLM"),USo=o(" (Wav2Vec2 model)"),JSo=l(),Q1=a("li"),Mge=a("strong"),YSo=o("xlm"),ZSo=o(" \u2014 "),pO=a("a"),KSo=o("XLMWithLMHeadModel"),eRo=o(" (XLM model)"),oRo=l(),W1=a("li"),Ege=a("strong"),rRo=o("xlm-roberta"),tRo=o(" \u2014 "),_O=a("a"),aRo=o("XLMRobertaForMaskedLM"),nRo=o(" (XLM-RoBERTa model)"),sRo=l(),H1=a("li"),Cge=a("strong"),lRo=o("xlm-roberta-xl"),iRo=o(" \u2014 "),uO=a("a"),dRo=o("XLMRobertaXLForMaskedLM"),cRo=o(" (XLM-RoBERTa-XL model)"),fRo=l(),U1=a("li"),wge=a("strong"),mRo=o("yoso"),gRo=o(" \u2014 "),bO=a("a"),hRo=o("YosoForMaskedLM"),pRo=o(" (YOSO model)"),_Ro=l(),J1=a("p"),uRo=o("The model is set in evaluation mode by default using "),Age=a("code"),bRo=o("model.eval()"),vRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),FRo=o("model.train()"),TRo=l(),F(Y1.$$.fragment),oOe=l(),Qi=a("h2"),Z1=a("a"),yge=a("span"),F(Fy.$$.fragment),MRo=l(),xge=a("span"),ERo=o("AutoModelForSeq2SeqLM"),rOe=l(),Ro=a("div"),F(Ty.$$.fragment),CRo=l(),Wi=a("p"),wRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vO=a("a"),ARo=o("from_pretrained()"),LRo=o(" class method or the "),FO=a("a"),yRo=o("from_config()"),xRo=o(` class
method.`),$Ro=l(),My=a("p"),kRo=o("This class cannot be instantiated directly using "),$ge=a("code"),SRo=o("__init__()"),RRo=o(" (throws an error)."),PRo=l(),dt=a("div"),F(Ey.$$.fragment),BRo=l(),kge=a("p"),IRo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NRo=l(),Hi=a("p"),qRo=o(`Note:
Loading a model from its configuration file does `),Sge=a("strong"),jRo=o("not"),DRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),GRo=o("from_pretrained()"),ORo=o(" to load the model weights."),VRo=l(),F(K1.$$.fragment),XRo=l(),eo=a("div"),F(Cy.$$.fragment),zRo=l(),Rge=a("p"),QRo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WRo=l(),Na=a("p"),HRo=o("The model class to instantiate is selected based on the "),Pge=a("code"),URo=o("model_type"),JRo=o(` property of the config object (either
passed as an argument or loaded from `),Bge=a("code"),YRo=o("pretrained_model_name_or_path"),ZRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=a("code"),KRo=o("pretrained_model_name_or_path"),ePo=o(":"),oPo=l(),pe=a("ul"),e2=a("li"),Nge=a("strong"),rPo=o("bart"),tPo=o(" \u2014 "),MO=a("a"),aPo=o("BartForConditionalGeneration"),nPo=o(" (BART model)"),sPo=l(),o2=a("li"),qge=a("strong"),lPo=o("bigbird_pegasus"),iPo=o(" \u2014 "),EO=a("a"),dPo=o("BigBirdPegasusForConditionalGeneration"),cPo=o(" (BigBird-Pegasus model)"),fPo=l(),r2=a("li"),jge=a("strong"),mPo=o("blenderbot"),gPo=o(" \u2014 "),CO=a("a"),hPo=o("BlenderbotForConditionalGeneration"),pPo=o(" (Blenderbot model)"),_Po=l(),t2=a("li"),Dge=a("strong"),uPo=o("blenderbot-small"),bPo=o(" \u2014 "),wO=a("a"),vPo=o("BlenderbotSmallForConditionalGeneration"),FPo=o(" (BlenderbotSmall model)"),TPo=l(),a2=a("li"),Gge=a("strong"),MPo=o("encoder-decoder"),EPo=o(" \u2014 "),AO=a("a"),CPo=o("EncoderDecoderModel"),wPo=o(" (Encoder decoder model)"),APo=l(),n2=a("li"),Oge=a("strong"),LPo=o("fsmt"),yPo=o(" \u2014 "),LO=a("a"),xPo=o("FSMTForConditionalGeneration"),$Po=o(" (FairSeq Machine-Translation model)"),kPo=l(),s2=a("li"),Vge=a("strong"),SPo=o("led"),RPo=o(" \u2014 "),yO=a("a"),PPo=o("LEDForConditionalGeneration"),BPo=o(" (LED model)"),IPo=l(),l2=a("li"),Xge=a("strong"),NPo=o("longt5"),qPo=o(" \u2014 "),xO=a("a"),jPo=o("LongT5ForConditionalGeneration"),DPo=o(" (LongT5 model)"),GPo=l(),i2=a("li"),zge=a("strong"),OPo=o("m2m_100"),VPo=o(" \u2014 "),$O=a("a"),XPo=o("M2M100ForConditionalGeneration"),zPo=o(" (M2M100 model)"),QPo=l(),d2=a("li"),Qge=a("strong"),WPo=o("marian"),HPo=o(" \u2014 "),kO=a("a"),UPo=o("MarianMTModel"),JPo=o(" (Marian model)"),YPo=l(),c2=a("li"),Wge=a("strong"),ZPo=o("mbart"),KPo=o(" \u2014 "),SO=a("a"),eBo=o("MBartForConditionalGeneration"),oBo=o(" (mBART model)"),rBo=l(),f2=a("li"),Hge=a("strong"),tBo=o("mt5"),aBo=o(" \u2014 "),RO=a("a"),nBo=o("MT5ForConditionalGeneration"),sBo=o(" (MT5 model)"),lBo=l(),m2=a("li"),Uge=a("strong"),iBo=o("pegasus"),dBo=o(" \u2014 "),PO=a("a"),cBo=o("PegasusForConditionalGeneration"),fBo=o(" (Pegasus model)"),mBo=l(),g2=a("li"),Jge=a("strong"),gBo=o("plbart"),hBo=o(" \u2014 "),BO=a("a"),pBo=o("PLBartForConditionalGeneration"),_Bo=o(" (PLBart model)"),uBo=l(),h2=a("li"),Yge=a("strong"),bBo=o("prophetnet"),vBo=o(" \u2014 "),IO=a("a"),FBo=o("ProphetNetForConditionalGeneration"),TBo=o(" (ProphetNet model)"),MBo=l(),p2=a("li"),Zge=a("strong"),EBo=o("t5"),CBo=o(" \u2014 "),NO=a("a"),wBo=o("T5ForConditionalGeneration"),ABo=o(" (T5 model)"),LBo=l(),_2=a("li"),Kge=a("strong"),yBo=o("xlm-prophetnet"),xBo=o(" \u2014 "),qO=a("a"),$Bo=o("XLMProphetNetForConditionalGeneration"),kBo=o(" (XLM-ProphetNet model)"),SBo=l(),u2=a("p"),RBo=o("The model is set in evaluation mode by default using "),ehe=a("code"),PBo=o("model.eval()"),BBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),IBo=o("model.train()"),NBo=l(),F(b2.$$.fragment),tOe=l(),Ui=a("h2"),v2=a("a"),rhe=a("span"),F(wy.$$.fragment),qBo=l(),the=a("span"),jBo=o("AutoModelForSequenceClassification"),aOe=l(),Po=a("div"),F(Ay.$$.fragment),DBo=l(),Ji=a("p"),GBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jO=a("a"),OBo=o("from_pretrained()"),VBo=o(" class method or the "),DO=a("a"),XBo=o("from_config()"),zBo=o(` class
method.`),QBo=l(),Ly=a("p"),WBo=o("This class cannot be instantiated directly using "),ahe=a("code"),HBo=o("__init__()"),UBo=o(" (throws an error)."),JBo=l(),ct=a("div"),F(yy.$$.fragment),YBo=l(),nhe=a("p"),ZBo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KBo=l(),Yi=a("p"),eIo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),oIo=o("not"),rIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=a("a"),tIo=o("from_pretrained()"),aIo=o(" to load the model weights."),nIo=l(),F(F2.$$.fragment),sIo=l(),oo=a("div"),F(xy.$$.fragment),lIo=l(),lhe=a("p"),iIo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dIo=l(),qa=a("p"),cIo=o("The model class to instantiate is selected based on the "),ihe=a("code"),fIo=o("model_type"),mIo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),gIo=o("pretrained_model_name_or_path"),hIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),pIo=o("pretrained_model_name_or_path"),_Io=o(":"),uIo=l(),N=a("ul"),T2=a("li"),fhe=a("strong"),bIo=o("albert"),vIo=o(" \u2014 "),OO=a("a"),FIo=o("AlbertForSequenceClassification"),TIo=o(" (ALBERT model)"),MIo=l(),M2=a("li"),mhe=a("strong"),EIo=o("bart"),CIo=o(" \u2014 "),VO=a("a"),wIo=o("BartForSequenceClassification"),AIo=o(" (BART model)"),LIo=l(),E2=a("li"),ghe=a("strong"),yIo=o("bert"),xIo=o(" \u2014 "),XO=a("a"),$Io=o("BertForSequenceClassification"),kIo=o(" (BERT model)"),SIo=l(),C2=a("li"),hhe=a("strong"),RIo=o("big_bird"),PIo=o(" \u2014 "),zO=a("a"),BIo=o("BigBirdForSequenceClassification"),IIo=o(" (BigBird model)"),NIo=l(),w2=a("li"),phe=a("strong"),qIo=o("bigbird_pegasus"),jIo=o(" \u2014 "),QO=a("a"),DIo=o("BigBirdPegasusForSequenceClassification"),GIo=o(" (BigBird-Pegasus model)"),OIo=l(),A2=a("li"),_he=a("strong"),VIo=o("bloom"),XIo=o(" \u2014 "),WO=a("a"),zIo=o("BloomForSequenceClassification"),QIo=o(" (BLOOM model)"),WIo=l(),L2=a("li"),uhe=a("strong"),HIo=o("camembert"),UIo=o(" \u2014 "),HO=a("a"),JIo=o("CamembertForSequenceClassification"),YIo=o(" (CamemBERT model)"),ZIo=l(),y2=a("li"),bhe=a("strong"),KIo=o("canine"),eNo=o(" \u2014 "),UO=a("a"),oNo=o("CanineForSequenceClassification"),rNo=o(" (CANINE model)"),tNo=l(),x2=a("li"),vhe=a("strong"),aNo=o("convbert"),nNo=o(" \u2014 "),JO=a("a"),sNo=o("ConvBertForSequenceClassification"),lNo=o(" (ConvBERT model)"),iNo=l(),$2=a("li"),Fhe=a("strong"),dNo=o("ctrl"),cNo=o(" \u2014 "),YO=a("a"),fNo=o("CTRLForSequenceClassification"),mNo=o(" (CTRL model)"),gNo=l(),k2=a("li"),The=a("strong"),hNo=o("data2vec-text"),pNo=o(" \u2014 "),ZO=a("a"),_No=o("Data2VecTextForSequenceClassification"),uNo=o(" (Data2VecText model)"),bNo=l(),S2=a("li"),Mhe=a("strong"),vNo=o("deberta"),FNo=o(" \u2014 "),KO=a("a"),TNo=o("DebertaForSequenceClassification"),MNo=o(" (DeBERTa model)"),ENo=l(),R2=a("li"),Ehe=a("strong"),CNo=o("deberta-v2"),wNo=o(" \u2014 "),eV=a("a"),ANo=o("DebertaV2ForSequenceClassification"),LNo=o(" (DeBERTa-v2 model)"),yNo=l(),P2=a("li"),Che=a("strong"),xNo=o("distilbert"),$No=o(" \u2014 "),oV=a("a"),kNo=o("DistilBertForSequenceClassification"),SNo=o(" (DistilBERT model)"),RNo=l(),B2=a("li"),whe=a("strong"),PNo=o("electra"),BNo=o(" \u2014 "),rV=a("a"),INo=o("ElectraForSequenceClassification"),NNo=o(" (ELECTRA model)"),qNo=l(),I2=a("li"),Ahe=a("strong"),jNo=o("flaubert"),DNo=o(" \u2014 "),tV=a("a"),GNo=o("FlaubertForSequenceClassification"),ONo=o(" (FlauBERT model)"),VNo=l(),N2=a("li"),Lhe=a("strong"),XNo=o("fnet"),zNo=o(" \u2014 "),aV=a("a"),QNo=o("FNetForSequenceClassification"),WNo=o(" (FNet model)"),HNo=l(),q2=a("li"),yhe=a("strong"),UNo=o("funnel"),JNo=o(" \u2014 "),nV=a("a"),YNo=o("FunnelForSequenceClassification"),ZNo=o(" (Funnel Transformer model)"),KNo=l(),j2=a("li"),xhe=a("strong"),eqo=o("gpt2"),oqo=o(" \u2014 "),sV=a("a"),rqo=o("GPT2ForSequenceClassification"),tqo=o(" (OpenAI GPT-2 model)"),aqo=l(),D2=a("li"),$he=a("strong"),nqo=o("gpt_neo"),sqo=o(" \u2014 "),lV=a("a"),lqo=o("GPTNeoForSequenceClassification"),iqo=o(" (GPT Neo model)"),dqo=l(),G2=a("li"),khe=a("strong"),cqo=o("gptj"),fqo=o(" \u2014 "),iV=a("a"),mqo=o("GPTJForSequenceClassification"),gqo=o(" (GPT-J model)"),hqo=l(),O2=a("li"),She=a("strong"),pqo=o("ibert"),_qo=o(" \u2014 "),dV=a("a"),uqo=o("IBertForSequenceClassification"),bqo=o(" (I-BERT model)"),vqo=l(),V2=a("li"),Rhe=a("strong"),Fqo=o("layoutlm"),Tqo=o(" \u2014 "),cV=a("a"),Mqo=o("LayoutLMForSequenceClassification"),Eqo=o(" (LayoutLM model)"),Cqo=l(),X2=a("li"),Phe=a("strong"),wqo=o("layoutlmv2"),Aqo=o(" \u2014 "),fV=a("a"),Lqo=o("LayoutLMv2ForSequenceClassification"),yqo=o(" (LayoutLMv2 model)"),xqo=l(),z2=a("li"),Bhe=a("strong"),$qo=o("layoutlmv3"),kqo=o(" \u2014 "),mV=a("a"),Sqo=o("LayoutLMv3ForSequenceClassification"),Rqo=o(" (LayoutLMv3 model)"),Pqo=l(),Q2=a("li"),Ihe=a("strong"),Bqo=o("led"),Iqo=o(" \u2014 "),gV=a("a"),Nqo=o("LEDForSequenceClassification"),qqo=o(" (LED model)"),jqo=l(),W2=a("li"),Nhe=a("strong"),Dqo=o("longformer"),Gqo=o(" \u2014 "),hV=a("a"),Oqo=o("LongformerForSequenceClassification"),Vqo=o(" (Longformer model)"),Xqo=l(),H2=a("li"),qhe=a("strong"),zqo=o("mbart"),Qqo=o(" \u2014 "),pV=a("a"),Wqo=o("MBartForSequenceClassification"),Hqo=o(" (mBART model)"),Uqo=l(),U2=a("li"),jhe=a("strong"),Jqo=o("megatron-bert"),Yqo=o(" \u2014 "),_V=a("a"),Zqo=o("MegatronBertForSequenceClassification"),Kqo=o(" (Megatron-BERT model)"),ejo=l(),J2=a("li"),Dhe=a("strong"),ojo=o("mobilebert"),rjo=o(" \u2014 "),uV=a("a"),tjo=o("MobileBertForSequenceClassification"),ajo=o(" (MobileBERT model)"),njo=l(),Y2=a("li"),Ghe=a("strong"),sjo=o("mpnet"),ljo=o(" \u2014 "),bV=a("a"),ijo=o("MPNetForSequenceClassification"),djo=o(" (MPNet model)"),cjo=l(),Z2=a("li"),Ohe=a("strong"),fjo=o("nezha"),mjo=o(" \u2014 "),vV=a("a"),gjo=o("NeZhaForSequenceClassification"),hjo=o(" (NeZha model)"),pjo=l(),K2=a("li"),Vhe=a("strong"),_jo=o("nystromformer"),ujo=o(" \u2014 "),FV=a("a"),bjo=o("NystromformerForSequenceClassification"),vjo=o(" (Nystr\xF6mformer model)"),Fjo=l(),eb=a("li"),Xhe=a("strong"),Tjo=o("openai-gpt"),Mjo=o(" \u2014 "),TV=a("a"),Ejo=o("OpenAIGPTForSequenceClassification"),Cjo=o(" (OpenAI GPT model)"),wjo=l(),ob=a("li"),zhe=a("strong"),Ajo=o("perceiver"),Ljo=o(" \u2014 "),MV=a("a"),yjo=o("PerceiverForSequenceClassification"),xjo=o(" (Perceiver model)"),$jo=l(),rb=a("li"),Qhe=a("strong"),kjo=o("plbart"),Sjo=o(" \u2014 "),EV=a("a"),Rjo=o("PLBartForSequenceClassification"),Pjo=o(" (PLBart model)"),Bjo=l(),tb=a("li"),Whe=a("strong"),Ijo=o("qdqbert"),Njo=o(" \u2014 "),CV=a("a"),qjo=o("QDQBertForSequenceClassification"),jjo=o(" (QDQBert model)"),Djo=l(),ab=a("li"),Hhe=a("strong"),Gjo=o("reformer"),Ojo=o(" \u2014 "),wV=a("a"),Vjo=o("ReformerForSequenceClassification"),Xjo=o(" (Reformer model)"),zjo=l(),nb=a("li"),Uhe=a("strong"),Qjo=o("rembert"),Wjo=o(" \u2014 "),AV=a("a"),Hjo=o("RemBertForSequenceClassification"),Ujo=o(" (RemBERT model)"),Jjo=l(),sb=a("li"),Jhe=a("strong"),Yjo=o("roberta"),Zjo=o(" \u2014 "),LV=a("a"),Kjo=o("RobertaForSequenceClassification"),eDo=o(" (RoBERTa model)"),oDo=l(),lb=a("li"),Yhe=a("strong"),rDo=o("roformer"),tDo=o(" \u2014 "),yV=a("a"),aDo=o("RoFormerForSequenceClassification"),nDo=o(" (RoFormer model)"),sDo=l(),ib=a("li"),Zhe=a("strong"),lDo=o("squeezebert"),iDo=o(" \u2014 "),xV=a("a"),dDo=o("SqueezeBertForSequenceClassification"),cDo=o(" (SqueezeBERT model)"),fDo=l(),db=a("li"),Khe=a("strong"),mDo=o("tapas"),gDo=o(" \u2014 "),$V=a("a"),hDo=o("TapasForSequenceClassification"),pDo=o(" (TAPAS model)"),_Do=l(),cb=a("li"),epe=a("strong"),uDo=o("transfo-xl"),bDo=o(" \u2014 "),kV=a("a"),vDo=o("TransfoXLForSequenceClassification"),FDo=o(" (Transformer-XL model)"),TDo=l(),fb=a("li"),ope=a("strong"),MDo=o("xlm"),EDo=o(" \u2014 "),SV=a("a"),CDo=o("XLMForSequenceClassification"),wDo=o(" (XLM model)"),ADo=l(),mb=a("li"),rpe=a("strong"),LDo=o("xlm-roberta"),yDo=o(" \u2014 "),RV=a("a"),xDo=o("XLMRobertaForSequenceClassification"),$Do=o(" (XLM-RoBERTa model)"),kDo=l(),gb=a("li"),tpe=a("strong"),SDo=o("xlm-roberta-xl"),RDo=o(" \u2014 "),PV=a("a"),PDo=o("XLMRobertaXLForSequenceClassification"),BDo=o(" (XLM-RoBERTa-XL model)"),IDo=l(),hb=a("li"),ape=a("strong"),NDo=o("xlnet"),qDo=o(" \u2014 "),BV=a("a"),jDo=o("XLNetForSequenceClassification"),DDo=o(" (XLNet model)"),GDo=l(),pb=a("li"),npe=a("strong"),ODo=o("yoso"),VDo=o(" \u2014 "),IV=a("a"),XDo=o("YosoForSequenceClassification"),zDo=o(" (YOSO model)"),QDo=l(),_b=a("p"),WDo=o("The model is set in evaluation mode by default using "),spe=a("code"),HDo=o("model.eval()"),UDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),JDo=o("model.train()"),YDo=l(),F(ub.$$.fragment),nOe=l(),Zi=a("h2"),bb=a("a"),ipe=a("span"),F($y.$$.fragment),ZDo=l(),dpe=a("span"),KDo=o("AutoModelForMultipleChoice"),sOe=l(),Bo=a("div"),F(ky.$$.fragment),eGo=l(),Ki=a("p"),oGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NV=a("a"),rGo=o("from_pretrained()"),tGo=o(" class method or the "),qV=a("a"),aGo=o("from_config()"),nGo=o(` class
method.`),sGo=l(),Sy=a("p"),lGo=o("This class cannot be instantiated directly using "),cpe=a("code"),iGo=o("__init__()"),dGo=o(" (throws an error)."),cGo=l(),ft=a("div"),F(Ry.$$.fragment),fGo=l(),fpe=a("p"),mGo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gGo=l(),ed=a("p"),hGo=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),pGo=o("not"),_Go=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),uGo=o("from_pretrained()"),bGo=o(" to load the model weights."),vGo=l(),F(vb.$$.fragment),FGo=l(),ro=a("div"),F(Py.$$.fragment),TGo=l(),gpe=a("p"),MGo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),EGo=l(),ja=a("p"),CGo=o("The model class to instantiate is selected based on the "),hpe=a("code"),wGo=o("model_type"),AGo=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),LGo=o("pretrained_model_name_or_path"),yGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),xGo=o("pretrained_model_name_or_path"),$Go=o(":"),kGo=l(),K=a("ul"),Fb=a("li"),upe=a("strong"),SGo=o("albert"),RGo=o(" \u2014 "),DV=a("a"),PGo=o("AlbertForMultipleChoice"),BGo=o(" (ALBERT model)"),IGo=l(),Tb=a("li"),bpe=a("strong"),NGo=o("bert"),qGo=o(" \u2014 "),GV=a("a"),jGo=o("BertForMultipleChoice"),DGo=o(" (BERT model)"),GGo=l(),Mb=a("li"),vpe=a("strong"),OGo=o("big_bird"),VGo=o(" \u2014 "),OV=a("a"),XGo=o("BigBirdForMultipleChoice"),zGo=o(" (BigBird model)"),QGo=l(),Eb=a("li"),Fpe=a("strong"),WGo=o("camembert"),HGo=o(" \u2014 "),VV=a("a"),UGo=o("CamembertForMultipleChoice"),JGo=o(" (CamemBERT model)"),YGo=l(),Cb=a("li"),Tpe=a("strong"),ZGo=o("canine"),KGo=o(" \u2014 "),XV=a("a"),eOo=o("CanineForMultipleChoice"),oOo=o(" (CANINE model)"),rOo=l(),wb=a("li"),Mpe=a("strong"),tOo=o("convbert"),aOo=o(" \u2014 "),zV=a("a"),nOo=o("ConvBertForMultipleChoice"),sOo=o(" (ConvBERT model)"),lOo=l(),Ab=a("li"),Epe=a("strong"),iOo=o("data2vec-text"),dOo=o(" \u2014 "),QV=a("a"),cOo=o("Data2VecTextForMultipleChoice"),fOo=o(" (Data2VecText model)"),mOo=l(),Lb=a("li"),Cpe=a("strong"),gOo=o("deberta-v2"),hOo=o(" \u2014 "),WV=a("a"),pOo=o("DebertaV2ForMultipleChoice"),_Oo=o(" (DeBERTa-v2 model)"),uOo=l(),yb=a("li"),wpe=a("strong"),bOo=o("distilbert"),vOo=o(" \u2014 "),HV=a("a"),FOo=o("DistilBertForMultipleChoice"),TOo=o(" (DistilBERT model)"),MOo=l(),xb=a("li"),Ape=a("strong"),EOo=o("electra"),COo=o(" \u2014 "),UV=a("a"),wOo=o("ElectraForMultipleChoice"),AOo=o(" (ELECTRA model)"),LOo=l(),$b=a("li"),Lpe=a("strong"),yOo=o("flaubert"),xOo=o(" \u2014 "),JV=a("a"),$Oo=o("FlaubertForMultipleChoice"),kOo=o(" (FlauBERT model)"),SOo=l(),kb=a("li"),ype=a("strong"),ROo=o("fnet"),POo=o(" \u2014 "),YV=a("a"),BOo=o("FNetForMultipleChoice"),IOo=o(" (FNet model)"),NOo=l(),Sb=a("li"),xpe=a("strong"),qOo=o("funnel"),jOo=o(" \u2014 "),ZV=a("a"),DOo=o("FunnelForMultipleChoice"),GOo=o(" (Funnel Transformer model)"),OOo=l(),Rb=a("li"),$pe=a("strong"),VOo=o("ibert"),XOo=o(" \u2014 "),KV=a("a"),zOo=o("IBertForMultipleChoice"),QOo=o(" (I-BERT model)"),WOo=l(),Pb=a("li"),kpe=a("strong"),HOo=o("longformer"),UOo=o(" \u2014 "),eX=a("a"),JOo=o("LongformerForMultipleChoice"),YOo=o(" (Longformer model)"),ZOo=l(),Bb=a("li"),Spe=a("strong"),KOo=o("megatron-bert"),eVo=o(" \u2014 "),oX=a("a"),oVo=o("MegatronBertForMultipleChoice"),rVo=o(" (Megatron-BERT model)"),tVo=l(),Ib=a("li"),Rpe=a("strong"),aVo=o("mobilebert"),nVo=o(" \u2014 "),rX=a("a"),sVo=o("MobileBertForMultipleChoice"),lVo=o(" (MobileBERT model)"),iVo=l(),Nb=a("li"),Ppe=a("strong"),dVo=o("mpnet"),cVo=o(" \u2014 "),tX=a("a"),fVo=o("MPNetForMultipleChoice"),mVo=o(" (MPNet model)"),gVo=l(),qb=a("li"),Bpe=a("strong"),hVo=o("nezha"),pVo=o(" \u2014 "),aX=a("a"),_Vo=o("NeZhaForMultipleChoice"),uVo=o(" (NeZha model)"),bVo=l(),jb=a("li"),Ipe=a("strong"),vVo=o("nystromformer"),FVo=o(" \u2014 "),nX=a("a"),TVo=o("NystromformerForMultipleChoice"),MVo=o(" (Nystr\xF6mformer model)"),EVo=l(),Db=a("li"),Npe=a("strong"),CVo=o("qdqbert"),wVo=o(" \u2014 "),sX=a("a"),AVo=o("QDQBertForMultipleChoice"),LVo=o(" (QDQBert model)"),yVo=l(),Gb=a("li"),qpe=a("strong"),xVo=o("rembert"),$Vo=o(" \u2014 "),lX=a("a"),kVo=o("RemBertForMultipleChoice"),SVo=o(" (RemBERT model)"),RVo=l(),Ob=a("li"),jpe=a("strong"),PVo=o("roberta"),BVo=o(" \u2014 "),iX=a("a"),IVo=o("RobertaForMultipleChoice"),NVo=o(" (RoBERTa model)"),qVo=l(),Vb=a("li"),Dpe=a("strong"),jVo=o("roformer"),DVo=o(" \u2014 "),dX=a("a"),GVo=o("RoFormerForMultipleChoice"),OVo=o(" (RoFormer model)"),VVo=l(),Xb=a("li"),Gpe=a("strong"),XVo=o("squeezebert"),zVo=o(" \u2014 "),cX=a("a"),QVo=o("SqueezeBertForMultipleChoice"),WVo=o(" (SqueezeBERT model)"),HVo=l(),zb=a("li"),Ope=a("strong"),UVo=o("xlm"),JVo=o(" \u2014 "),fX=a("a"),YVo=o("XLMForMultipleChoice"),ZVo=o(" (XLM model)"),KVo=l(),Qb=a("li"),Vpe=a("strong"),eXo=o("xlm-roberta"),oXo=o(" \u2014 "),mX=a("a"),rXo=o("XLMRobertaForMultipleChoice"),tXo=o(" (XLM-RoBERTa model)"),aXo=l(),Wb=a("li"),Xpe=a("strong"),nXo=o("xlm-roberta-xl"),sXo=o(" \u2014 "),gX=a("a"),lXo=o("XLMRobertaXLForMultipleChoice"),iXo=o(" (XLM-RoBERTa-XL model)"),dXo=l(),Hb=a("li"),zpe=a("strong"),cXo=o("xlnet"),fXo=o(" \u2014 "),hX=a("a"),mXo=o("XLNetForMultipleChoice"),gXo=o(" (XLNet model)"),hXo=l(),Ub=a("li"),Qpe=a("strong"),pXo=o("yoso"),_Xo=o(" \u2014 "),pX=a("a"),uXo=o("YosoForMultipleChoice"),bXo=o(" (YOSO model)"),vXo=l(),Jb=a("p"),FXo=o("The model is set in evaluation mode by default using "),Wpe=a("code"),TXo=o("model.eval()"),MXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),EXo=o("model.train()"),CXo=l(),F(Yb.$$.fragment),lOe=l(),od=a("h2"),Zb=a("a"),Upe=a("span"),F(By.$$.fragment),wXo=l(),Jpe=a("span"),AXo=o("AutoModelForNextSentencePrediction"),iOe=l(),Io=a("div"),F(Iy.$$.fragment),LXo=l(),rd=a("p"),yXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_X=a("a"),xXo=o("from_pretrained()"),$Xo=o(" class method or the "),uX=a("a"),kXo=o("from_config()"),SXo=o(` class
method.`),RXo=l(),Ny=a("p"),PXo=o("This class cannot be instantiated directly using "),Ype=a("code"),BXo=o("__init__()"),IXo=o(" (throws an error)."),NXo=l(),mt=a("div"),F(qy.$$.fragment),qXo=l(),Zpe=a("p"),jXo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DXo=l(),td=a("p"),GXo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),OXo=o("not"),VXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),XXo=o("from_pretrained()"),zXo=o(" to load the model weights."),QXo=l(),F(Kb.$$.fragment),WXo=l(),to=a("div"),F(jy.$$.fragment),HXo=l(),e_e=a("p"),UXo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JXo=l(),Da=a("p"),YXo=o("The model class to instantiate is selected based on the "),o_e=a("code"),ZXo=o("model_type"),KXo=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(":"),azo=l(),No=a("ul"),ev=a("li"),a_e=a("strong"),nzo=o("bert"),szo=o(" \u2014 "),vX=a("a"),lzo=o("BertForNextSentencePrediction"),izo=o(" (BERT model)"),dzo=l(),ov=a("li"),n_e=a("strong"),czo=o("fnet"),fzo=o(" \u2014 "),FX=a("a"),mzo=o("FNetForNextSentencePrediction"),gzo=o(" (FNet model)"),hzo=l(),rv=a("li"),s_e=a("strong"),pzo=o("megatron-bert"),_zo=o(" \u2014 "),TX=a("a"),uzo=o("MegatronBertForNextSentencePrediction"),bzo=o(" (Megatron-BERT model)"),vzo=l(),tv=a("li"),l_e=a("strong"),Fzo=o("mobilebert"),Tzo=o(" \u2014 "),MX=a("a"),Mzo=o("MobileBertForNextSentencePrediction"),Ezo=o(" (MobileBERT model)"),Czo=l(),av=a("li"),i_e=a("strong"),wzo=o("nezha"),Azo=o(" \u2014 "),EX=a("a"),Lzo=o("NeZhaForNextSentencePrediction"),yzo=o(" (NeZha model)"),xzo=l(),nv=a("li"),d_e=a("strong"),$zo=o("qdqbert"),kzo=o(" \u2014 "),CX=a("a"),Szo=o("QDQBertForNextSentencePrediction"),Rzo=o(" (QDQBert model)"),Pzo=l(),sv=a("p"),Bzo=o("The model is set in evaluation mode by default using "),c_e=a("code"),Izo=o("model.eval()"),Nzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=a("code"),qzo=o("model.train()"),jzo=l(),F(lv.$$.fragment),dOe=l(),ad=a("h2"),iv=a("a"),m_e=a("span"),F(Dy.$$.fragment),Dzo=l(),g_e=a("span"),Gzo=o("AutoModelForTokenClassification"),cOe=l(),qo=a("div"),F(Gy.$$.fragment),Ozo=l(),nd=a("p"),Vzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wX=a("a"),Xzo=o("from_pretrained()"),zzo=o(" class method or the "),AX=a("a"),Qzo=o("from_config()"),Wzo=o(` class
method.`),Hzo=l(),Oy=a("p"),Uzo=o("This class cannot be instantiated directly using "),h_e=a("code"),Jzo=o("__init__()"),Yzo=o(" (throws an error)."),Zzo=l(),gt=a("div"),F(Vy.$$.fragment),Kzo=l(),p_e=a("p"),eQo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oQo=l(),sd=a("p"),rQo=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),tQo=o("not"),aQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),nQo=o("from_pretrained()"),sQo=o(" to load the model weights."),lQo=l(),F(dv.$$.fragment),iQo=l(),ao=a("div"),F(Xy.$$.fragment),dQo=l(),u_e=a("p"),cQo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fQo=l(),Ga=a("p"),mQo=o("The model class to instantiate is selected based on the "),b_e=a("code"),gQo=o("model_type"),hQo=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),pQo=o("pretrained_model_name_or_path"),_Qo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),uQo=o("pretrained_model_name_or_path"),bQo=o(":"),vQo=l(),H=a("ul"),cv=a("li"),T_e=a("strong"),FQo=o("albert"),TQo=o(" \u2014 "),yX=a("a"),MQo=o("AlbertForTokenClassification"),EQo=o(" (ALBERT model)"),CQo=l(),fv=a("li"),M_e=a("strong"),wQo=o("bert"),AQo=o(" \u2014 "),xX=a("a"),LQo=o("BertForTokenClassification"),yQo=o(" (BERT model)"),xQo=l(),mv=a("li"),E_e=a("strong"),$Qo=o("big_bird"),kQo=o(" \u2014 "),$X=a("a"),SQo=o("BigBirdForTokenClassification"),RQo=o(" (BigBird model)"),PQo=l(),gv=a("li"),C_e=a("strong"),BQo=o("bloom"),IQo=o(" \u2014 "),kX=a("a"),NQo=o("BloomForTokenClassification"),qQo=o(" (BLOOM model)"),jQo=l(),hv=a("li"),w_e=a("strong"),DQo=o("camembert"),GQo=o(" \u2014 "),SX=a("a"),OQo=o("CamembertForTokenClassification"),VQo=o(" (CamemBERT model)"),XQo=l(),pv=a("li"),A_e=a("strong"),zQo=o("canine"),QQo=o(" \u2014 "),RX=a("a"),WQo=o("CanineForTokenClassification"),HQo=o(" (CANINE model)"),UQo=l(),_v=a("li"),L_e=a("strong"),JQo=o("convbert"),YQo=o(" \u2014 "),PX=a("a"),ZQo=o("ConvBertForTokenClassification"),KQo=o(" (ConvBERT model)"),eWo=l(),uv=a("li"),y_e=a("strong"),oWo=o("data2vec-text"),rWo=o(" \u2014 "),BX=a("a"),tWo=o("Data2VecTextForTokenClassification"),aWo=o(" (Data2VecText model)"),nWo=l(),bv=a("li"),x_e=a("strong"),sWo=o("deberta"),lWo=o(" \u2014 "),IX=a("a"),iWo=o("DebertaForTokenClassification"),dWo=o(" (DeBERTa model)"),cWo=l(),vv=a("li"),$_e=a("strong"),fWo=o("deberta-v2"),mWo=o(" \u2014 "),NX=a("a"),gWo=o("DebertaV2ForTokenClassification"),hWo=o(" (DeBERTa-v2 model)"),pWo=l(),Fv=a("li"),k_e=a("strong"),_Wo=o("distilbert"),uWo=o(" \u2014 "),qX=a("a"),bWo=o("DistilBertForTokenClassification"),vWo=o(" (DistilBERT model)"),FWo=l(),Tv=a("li"),S_e=a("strong"),TWo=o("electra"),MWo=o(" \u2014 "),jX=a("a"),EWo=o("ElectraForTokenClassification"),CWo=o(" (ELECTRA model)"),wWo=l(),Mv=a("li"),R_e=a("strong"),AWo=o("flaubert"),LWo=o(" \u2014 "),DX=a("a"),yWo=o("FlaubertForTokenClassification"),xWo=o(" (FlauBERT model)"),$Wo=l(),Ev=a("li"),P_e=a("strong"),kWo=o("fnet"),SWo=o(" \u2014 "),GX=a("a"),RWo=o("FNetForTokenClassification"),PWo=o(" (FNet model)"),BWo=l(),Cv=a("li"),B_e=a("strong"),IWo=o("funnel"),NWo=o(" \u2014 "),OX=a("a"),qWo=o("FunnelForTokenClassification"),jWo=o(" (Funnel Transformer model)"),DWo=l(),wv=a("li"),I_e=a("strong"),GWo=o("gpt2"),OWo=o(" \u2014 "),VX=a("a"),VWo=o("GPT2ForTokenClassification"),XWo=o(" (OpenAI GPT-2 model)"),zWo=l(),Av=a("li"),N_e=a("strong"),QWo=o("ibert"),WWo=o(" \u2014 "),XX=a("a"),HWo=o("IBertForTokenClassification"),UWo=o(" (I-BERT model)"),JWo=l(),Lv=a("li"),q_e=a("strong"),YWo=o("layoutlm"),ZWo=o(" \u2014 "),zX=a("a"),KWo=o("LayoutLMForTokenClassification"),eHo=o(" (LayoutLM model)"),oHo=l(),yv=a("li"),j_e=a("strong"),rHo=o("layoutlmv2"),tHo=o(" \u2014 "),QX=a("a"),aHo=o("LayoutLMv2ForTokenClassification"),nHo=o(" (LayoutLMv2 model)"),sHo=l(),xv=a("li"),D_e=a("strong"),lHo=o("layoutlmv3"),iHo=o(" \u2014 "),WX=a("a"),dHo=o("LayoutLMv3ForTokenClassification"),cHo=o(" (LayoutLMv3 model)"),fHo=l(),$v=a("li"),G_e=a("strong"),mHo=o("longformer"),gHo=o(" \u2014 "),HX=a("a"),hHo=o("LongformerForTokenClassification"),pHo=o(" (Longformer model)"),_Ho=l(),kv=a("li"),O_e=a("strong"),uHo=o("megatron-bert"),bHo=o(" \u2014 "),UX=a("a"),vHo=o("MegatronBertForTokenClassification"),FHo=o(" (Megatron-BERT model)"),THo=l(),Sv=a("li"),V_e=a("strong"),MHo=o("mobilebert"),EHo=o(" \u2014 "),JX=a("a"),CHo=o("MobileBertForTokenClassification"),wHo=o(" (MobileBERT model)"),AHo=l(),Rv=a("li"),X_e=a("strong"),LHo=o("mpnet"),yHo=o(" \u2014 "),YX=a("a"),xHo=o("MPNetForTokenClassification"),$Ho=o(" (MPNet model)"),kHo=l(),Pv=a("li"),z_e=a("strong"),SHo=o("nezha"),RHo=o(" \u2014 "),ZX=a("a"),PHo=o("NeZhaForTokenClassification"),BHo=o(" (NeZha model)"),IHo=l(),Bv=a("li"),Q_e=a("strong"),NHo=o("nystromformer"),qHo=o(" \u2014 "),KX=a("a"),jHo=o("NystromformerForTokenClassification"),DHo=o(" (Nystr\xF6mformer model)"),GHo=l(),Iv=a("li"),W_e=a("strong"),OHo=o("qdqbert"),VHo=o(" \u2014 "),ez=a("a"),XHo=o("QDQBertForTokenClassification"),zHo=o(" (QDQBert model)"),QHo=l(),Nv=a("li"),H_e=a("strong"),WHo=o("rembert"),HHo=o(" \u2014 "),oz=a("a"),UHo=o("RemBertForTokenClassification"),JHo=o(" (RemBERT model)"),YHo=l(),qv=a("li"),U_e=a("strong"),ZHo=o("roberta"),KHo=o(" \u2014 "),rz=a("a"),eUo=o("RobertaForTokenClassification"),oUo=o(" (RoBERTa model)"),rUo=l(),jv=a("li"),J_e=a("strong"),tUo=o("roformer"),aUo=o(" \u2014 "),tz=a("a"),nUo=o("RoFormerForTokenClassification"),sUo=o(" (RoFormer model)"),lUo=l(),Dv=a("li"),Y_e=a("strong"),iUo=o("squeezebert"),dUo=o(" \u2014 "),az=a("a"),cUo=o("SqueezeBertForTokenClassification"),fUo=o(" (SqueezeBERT model)"),mUo=l(),Gv=a("li"),Z_e=a("strong"),gUo=o("xlm"),hUo=o(" \u2014 "),nz=a("a"),pUo=o("XLMForTokenClassification"),_Uo=o(" (XLM model)"),uUo=l(),Ov=a("li"),K_e=a("strong"),bUo=o("xlm-roberta"),vUo=o(" \u2014 "),sz=a("a"),FUo=o("XLMRobertaForTokenClassification"),TUo=o(" (XLM-RoBERTa model)"),MUo=l(),Vv=a("li"),eue=a("strong"),EUo=o("xlm-roberta-xl"),CUo=o(" \u2014 "),lz=a("a"),wUo=o("XLMRobertaXLForTokenClassification"),AUo=o(" (XLM-RoBERTa-XL model)"),LUo=l(),Xv=a("li"),oue=a("strong"),yUo=o("xlnet"),xUo=o(" \u2014 "),iz=a("a"),$Uo=o("XLNetForTokenClassification"),kUo=o(" (XLNet model)"),SUo=l(),zv=a("li"),rue=a("strong"),RUo=o("yoso"),PUo=o(" \u2014 "),dz=a("a"),BUo=o("YosoForTokenClassification"),IUo=o(" (YOSO model)"),NUo=l(),Qv=a("p"),qUo=o("The model is set in evaluation mode by default using "),tue=a("code"),jUo=o("model.eval()"),DUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),GUo=o("model.train()"),OUo=l(),F(Wv.$$.fragment),fOe=l(),ld=a("h2"),Hv=a("a"),nue=a("span"),F(zy.$$.fragment),VUo=l(),sue=a("span"),XUo=o("AutoModelForQuestionAnswering"),mOe=l(),jo=a("div"),F(Qy.$$.fragment),zUo=l(),id=a("p"),QUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cz=a("a"),WUo=o("from_pretrained()"),HUo=o(" class method or the "),fz=a("a"),UUo=o("from_config()"),JUo=o(` class
method.`),YUo=l(),Wy=a("p"),ZUo=o("This class cannot be instantiated directly using "),lue=a("code"),KUo=o("__init__()"),eJo=o(" (throws an error)."),oJo=l(),ht=a("div"),F(Hy.$$.fragment),rJo=l(),iue=a("p"),tJo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aJo=l(),dd=a("p"),nJo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),sJo=o("not"),lJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),iJo=o("from_pretrained()"),dJo=o(" to load the model weights."),cJo=l(),F(Uv.$$.fragment),fJo=l(),no=a("div"),F(Uy.$$.fragment),mJo=l(),cue=a("p"),gJo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hJo=l(),Oa=a("p"),pJo=o("The model class to instantiate is selected based on the "),fue=a("code"),_Jo=o("model_type"),uJo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),FJo=o("pretrained_model_name_or_path"),TJo=o(":"),MJo=l(),V=a("ul"),Jv=a("li"),hue=a("strong"),EJo=o("albert"),CJo=o(" \u2014 "),gz=a("a"),wJo=o("AlbertForQuestionAnswering"),AJo=o(" (ALBERT model)"),LJo=l(),Yv=a("li"),pue=a("strong"),yJo=o("bart"),xJo=o(" \u2014 "),hz=a("a"),$Jo=o("BartForQuestionAnswering"),kJo=o(" (BART model)"),SJo=l(),Zv=a("li"),_ue=a("strong"),RJo=o("bert"),PJo=o(" \u2014 "),pz=a("a"),BJo=o("BertForQuestionAnswering"),IJo=o(" (BERT model)"),NJo=l(),Kv=a("li"),uue=a("strong"),qJo=o("big_bird"),jJo=o(" \u2014 "),_z=a("a"),DJo=o("BigBirdForQuestionAnswering"),GJo=o(" (BigBird model)"),OJo=l(),eF=a("li"),bue=a("strong"),VJo=o("bigbird_pegasus"),XJo=o(" \u2014 "),uz=a("a"),zJo=o("BigBirdPegasusForQuestionAnswering"),QJo=o(" (BigBird-Pegasus model)"),WJo=l(),oF=a("li"),vue=a("strong"),HJo=o("camembert"),UJo=o(" \u2014 "),bz=a("a"),JJo=o("CamembertForQuestionAnswering"),YJo=o(" (CamemBERT model)"),ZJo=l(),rF=a("li"),Fue=a("strong"),KJo=o("canine"),eYo=o(" \u2014 "),vz=a("a"),oYo=o("CanineForQuestionAnswering"),rYo=o(" (CANINE model)"),tYo=l(),tF=a("li"),Tue=a("strong"),aYo=o("convbert"),nYo=o(" \u2014 "),Fz=a("a"),sYo=o("ConvBertForQuestionAnswering"),lYo=o(" (ConvBERT model)"),iYo=l(),aF=a("li"),Mue=a("strong"),dYo=o("data2vec-text"),cYo=o(" \u2014 "),Tz=a("a"),fYo=o("Data2VecTextForQuestionAnswering"),mYo=o(" (Data2VecText model)"),gYo=l(),nF=a("li"),Eue=a("strong"),hYo=o("deberta"),pYo=o(" \u2014 "),Mz=a("a"),_Yo=o("DebertaForQuestionAnswering"),uYo=o(" (DeBERTa model)"),bYo=l(),sF=a("li"),Cue=a("strong"),vYo=o("deberta-v2"),FYo=o(" \u2014 "),Ez=a("a"),TYo=o("DebertaV2ForQuestionAnswering"),MYo=o(" (DeBERTa-v2 model)"),EYo=l(),lF=a("li"),wue=a("strong"),CYo=o("distilbert"),wYo=o(" \u2014 "),Cz=a("a"),AYo=o("DistilBertForQuestionAnswering"),LYo=o(" (DistilBERT model)"),yYo=l(),iF=a("li"),Aue=a("strong"),xYo=o("electra"),$Yo=o(" \u2014 "),wz=a("a"),kYo=o("ElectraForQuestionAnswering"),SYo=o(" (ELECTRA model)"),RYo=l(),dF=a("li"),Lue=a("strong"),PYo=o("flaubert"),BYo=o(" \u2014 "),Az=a("a"),IYo=o("FlaubertForQuestionAnsweringSimple"),NYo=o(" (FlauBERT model)"),qYo=l(),cF=a("li"),yue=a("strong"),jYo=o("fnet"),DYo=o(" \u2014 "),Lz=a("a"),GYo=o("FNetForQuestionAnswering"),OYo=o(" (FNet model)"),VYo=l(),fF=a("li"),xue=a("strong"),XYo=o("funnel"),zYo=o(" \u2014 "),yz=a("a"),QYo=o("FunnelForQuestionAnswering"),WYo=o(" (Funnel Transformer model)"),HYo=l(),mF=a("li"),$ue=a("strong"),UYo=o("gptj"),JYo=o(" \u2014 "),xz=a("a"),YYo=o("GPTJForQuestionAnswering"),ZYo=o(" (GPT-J model)"),KYo=l(),gF=a("li"),kue=a("strong"),eZo=o("ibert"),oZo=o(" \u2014 "),$z=a("a"),rZo=o("IBertForQuestionAnswering"),tZo=o(" (I-BERT model)"),aZo=l(),hF=a("li"),Sue=a("strong"),nZo=o("layoutlmv2"),sZo=o(" \u2014 "),kz=a("a"),lZo=o("LayoutLMv2ForQuestionAnswering"),iZo=o(" (LayoutLMv2 model)"),dZo=l(),pF=a("li"),Rue=a("strong"),cZo=o("layoutlmv3"),fZo=o(" \u2014 "),Sz=a("a"),mZo=o("LayoutLMv3ForQuestionAnswering"),gZo=o(" (LayoutLMv3 model)"),hZo=l(),_F=a("li"),Pue=a("strong"),pZo=o("led"),_Zo=o(" \u2014 "),Rz=a("a"),uZo=o("LEDForQuestionAnswering"),bZo=o(" (LED model)"),vZo=l(),uF=a("li"),Bue=a("strong"),FZo=o("longformer"),TZo=o(" \u2014 "),Pz=a("a"),MZo=o("LongformerForQuestionAnswering"),EZo=o(" (Longformer model)"),CZo=l(),bF=a("li"),Iue=a("strong"),wZo=o("lxmert"),AZo=o(" \u2014 "),Bz=a("a"),LZo=o("LxmertForQuestionAnswering"),yZo=o(" (LXMERT model)"),xZo=l(),vF=a("li"),Nue=a("strong"),$Zo=o("mbart"),kZo=o(" \u2014 "),Iz=a("a"),SZo=o("MBartForQuestionAnswering"),RZo=o(" (mBART model)"),PZo=l(),FF=a("li"),que=a("strong"),BZo=o("megatron-bert"),IZo=o(" \u2014 "),Nz=a("a"),NZo=o("MegatronBertForQuestionAnswering"),qZo=o(" (Megatron-BERT model)"),jZo=l(),TF=a("li"),jue=a("strong"),DZo=o("mobilebert"),GZo=o(" \u2014 "),qz=a("a"),OZo=o("MobileBertForQuestionAnswering"),VZo=o(" (MobileBERT model)"),XZo=l(),MF=a("li"),Due=a("strong"),zZo=o("mpnet"),QZo=o(" \u2014 "),jz=a("a"),WZo=o("MPNetForQuestionAnswering"),HZo=o(" (MPNet model)"),UZo=l(),EF=a("li"),Gue=a("strong"),JZo=o("nezha"),YZo=o(" \u2014 "),Dz=a("a"),ZZo=o("NeZhaForQuestionAnswering"),KZo=o(" (NeZha model)"),eKo=l(),CF=a("li"),Oue=a("strong"),oKo=o("nystromformer"),rKo=o(" \u2014 "),Gz=a("a"),tKo=o("NystromformerForQuestionAnswering"),aKo=o(" (Nystr\xF6mformer model)"),nKo=l(),wF=a("li"),Vue=a("strong"),sKo=o("qdqbert"),lKo=o(" \u2014 "),Oz=a("a"),iKo=o("QDQBertForQuestionAnswering"),dKo=o(" (QDQBert model)"),cKo=l(),AF=a("li"),Xue=a("strong"),fKo=o("reformer"),mKo=o(" \u2014 "),Vz=a("a"),gKo=o("ReformerForQuestionAnswering"),hKo=o(" (Reformer model)"),pKo=l(),LF=a("li"),zue=a("strong"),_Ko=o("rembert"),uKo=o(" \u2014 "),Xz=a("a"),bKo=o("RemBertForQuestionAnswering"),vKo=o(" (RemBERT model)"),FKo=l(),yF=a("li"),Que=a("strong"),TKo=o("roberta"),MKo=o(" \u2014 "),zz=a("a"),EKo=o("RobertaForQuestionAnswering"),CKo=o(" (RoBERTa model)"),wKo=l(),xF=a("li"),Wue=a("strong"),AKo=o("roformer"),LKo=o(" \u2014 "),Qz=a("a"),yKo=o("RoFormerForQuestionAnswering"),xKo=o(" (RoFormer model)"),$Ko=l(),$F=a("li"),Hue=a("strong"),kKo=o("splinter"),SKo=o(" \u2014 "),Wz=a("a"),RKo=o("SplinterForQuestionAnswering"),PKo=o(" (Splinter model)"),BKo=l(),kF=a("li"),Uue=a("strong"),IKo=o("squeezebert"),NKo=o(" \u2014 "),Hz=a("a"),qKo=o("SqueezeBertForQuestionAnswering"),jKo=o(" (SqueezeBERT model)"),DKo=l(),SF=a("li"),Jue=a("strong"),GKo=o("xlm"),OKo=o(" \u2014 "),Uz=a("a"),VKo=o("XLMForQuestionAnsweringSimple"),XKo=o(" (XLM model)"),zKo=l(),RF=a("li"),Yue=a("strong"),QKo=o("xlm-roberta"),WKo=o(" \u2014 "),Jz=a("a"),HKo=o("XLMRobertaForQuestionAnswering"),UKo=o(" (XLM-RoBERTa model)"),JKo=l(),PF=a("li"),Zue=a("strong"),YKo=o("xlm-roberta-xl"),ZKo=o(" \u2014 "),Yz=a("a"),KKo=o("XLMRobertaXLForQuestionAnswering"),eer=o(" (XLM-RoBERTa-XL model)"),oer=l(),BF=a("li"),Kue=a("strong"),rer=o("xlnet"),ter=o(" \u2014 "),Zz=a("a"),aer=o("XLNetForQuestionAnsweringSimple"),ner=o(" (XLNet model)"),ser=l(),IF=a("li"),e7e=a("strong"),ler=o("yoso"),ier=o(" \u2014 "),Kz=a("a"),der=o("YosoForQuestionAnswering"),cer=o(" (YOSO model)"),fer=l(),NF=a("p"),mer=o("The model is set in evaluation mode by default using "),o7e=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r7e=a("code"),per=o("model.train()"),_er=l(),F(qF.$$.fragment),gOe=l(),cd=a("h2"),jF=a("a"),t7e=a("span"),F(Jy.$$.fragment),uer=l(),a7e=a("span"),ber=o("AutoModelForTableQuestionAnswering"),hOe=l(),Do=a("div"),F(Yy.$$.fragment),ver=l(),fd=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eQ=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),oQ=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),Zy=a("p"),Aer=o("This class cannot be instantiated directly using "),n7e=a("code"),Ler=o("__init__()"),yer=o(" (throws an error)."),xer=l(),pt=a("div"),F(Ky.$$.fragment),$er=l(),s7e=a("p"),ker=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ser=l(),md=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),l7e=a("strong"),Per=o("not"),Ber=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=a("a"),Ier=o("from_pretrained()"),Ner=o(" to load the model weights."),qer=l(),F(DF.$$.fragment),jer=l(),so=a("div"),F(e8.$$.fragment),Der=l(),i7e=a("p"),Ger=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Oer=l(),Va=a("p"),Ver=o("The model class to instantiate is selected based on the "),d7e=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),c7e=a("code"),Qer=o("pretrained_model_name_or_path"),Wer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),m7e=a("ul"),GF=a("li"),g7e=a("strong"),Yer=o("tapas"),Zer=o(" \u2014 "),tQ=a("a"),Ker=o("TapasForQuestionAnswering"),eor=o(" (TAPAS model)"),oor=l(),OF=a("p"),ror=o("The model is set in evaluation mode by default using "),h7e=a("code"),tor=o("model.eval()"),aor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p7e=a("code"),nor=o("model.train()"),sor=l(),F(VF.$$.fragment),pOe=l(),gd=a("h2"),XF=a("a"),_7e=a("span"),F(o8.$$.fragment),lor=l(),u7e=a("span"),ior=o("AutoModelForImageClassification"),_Oe=l(),Go=a("div"),F(r8.$$.fragment),dor=l(),hd=a("p"),cor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aQ=a("a"),mor=o("from_pretrained()"),gor=o(" class method or the "),nQ=a("a"),hor=o("from_config()"),por=o(` class
method.`),_or=l(),t8=a("p"),uor=o("This class cannot be instantiated directly using "),b7e=a("code"),bor=o("__init__()"),vor=o(" (throws an error)."),For=l(),_t=a("div"),F(a8.$$.fragment),Tor=l(),v7e=a("p"),Mor=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Eor=l(),pd=a("p"),Cor=o(`Note:
Loading a model from its configuration file does `),F7e=a("strong"),wor=o("not"),Aor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),Lor=o("from_pretrained()"),yor=o(" to load the model weights."),xor=l(),F(zF.$$.fragment),$or=l(),lo=a("div"),F(n8.$$.fragment),kor=l(),T7e=a("p"),Sor=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ror=l(),Xa=a("p"),Por=o("The model class to instantiate is selected based on the "),M7e=a("code"),Bor=o("model_type"),Ior=o(` property of the config object (either
passed as an argument or loaded from `),E7e=a("code"),Nor=o("pretrained_model_name_or_path"),qor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=a("code"),jor=o("pretrained_model_name_or_path"),Dor=o(":"),Gor=l(),Fe=a("ul"),QF=a("li"),w7e=a("strong"),Oor=o("beit"),Vor=o(" \u2014 "),lQ=a("a"),Xor=o("BeitForImageClassification"),zor=o(" (BEiT model)"),Qor=l(),WF=a("li"),A7e=a("strong"),Wor=o("convnext"),Hor=o(" \u2014 "),iQ=a("a"),Uor=o("ConvNextForImageClassification"),Jor=o(" (ConvNeXT model)"),Yor=l(),HF=a("li"),L7e=a("strong"),Zor=o("cvt"),Kor=o(" \u2014 "),dQ=a("a"),err=o("CvtForImageClassification"),orr=o(" (CvT model)"),rrr=l(),UF=a("li"),y7e=a("strong"),trr=o("data2vec-vision"),arr=o(" \u2014 "),cQ=a("a"),nrr=o("Data2VecVisionForImageClassification"),srr=o(" (Data2VecVision model)"),lrr=l(),Vs=a("li"),x7e=a("strong"),irr=o("deit"),drr=o(" \u2014 "),fQ=a("a"),crr=o("DeiTForImageClassification"),frr=o(" or "),mQ=a("a"),mrr=o("DeiTForImageClassificationWithTeacher"),grr=o(" (DeiT model)"),hrr=l(),JF=a("li"),$7e=a("strong"),prr=o("imagegpt"),_rr=o(" \u2014 "),gQ=a("a"),urr=o("ImageGPTForImageClassification"),brr=o(" (ImageGPT model)"),vrr=l(),Xs=a("li"),k7e=a("strong"),Frr=o("levit"),Trr=o(" \u2014 "),hQ=a("a"),Mrr=o("LevitForImageClassification"),Err=o(" or "),pQ=a("a"),Crr=o("LevitForImageClassificationWithTeacher"),wrr=o(" (LeViT model)"),Arr=l(),ut=a("li"),S7e=a("strong"),Lrr=o("perceiver"),yrr=o(" \u2014 "),_Q=a("a"),xrr=o("PerceiverForImageClassificationLearned"),$rr=o(" or "),uQ=a("a"),krr=o("PerceiverForImageClassificationFourier"),Srr=o(" or "),bQ=a("a"),Rrr=o("PerceiverForImageClassificationConvProcessing"),Prr=o(" (Perceiver model)"),Brr=l(),YF=a("li"),R7e=a("strong"),Irr=o("poolformer"),Nrr=o(" \u2014 "),vQ=a("a"),qrr=o("PoolFormerForImageClassification"),jrr=o(" (PoolFormer model)"),Drr=l(),ZF=a("li"),P7e=a("strong"),Grr=o("regnet"),Orr=o(" \u2014 "),FQ=a("a"),Vrr=o("RegNetForImageClassification"),Xrr=o(" (RegNet model)"),zrr=l(),KF=a("li"),B7e=a("strong"),Qrr=o("resnet"),Wrr=o(" \u2014 "),TQ=a("a"),Hrr=o("ResNetForImageClassification"),Urr=o(" (ResNet model)"),Jrr=l(),e6=a("li"),I7e=a("strong"),Yrr=o("segformer"),Zrr=o(" \u2014 "),MQ=a("a"),Krr=o("SegformerForImageClassification"),etr=o(" (SegFormer model)"),otr=l(),o6=a("li"),N7e=a("strong"),rtr=o("swin"),ttr=o(" \u2014 "),EQ=a("a"),atr=o("SwinForImageClassification"),ntr=o(" (Swin Transformer model)"),str=l(),r6=a("li"),q7e=a("strong"),ltr=o("van"),itr=o(" \u2014 "),CQ=a("a"),dtr=o("VanForImageClassification"),ctr=o(" (VAN model)"),ftr=l(),t6=a("li"),j7e=a("strong"),mtr=o("vit"),gtr=o(" \u2014 "),wQ=a("a"),htr=o("ViTForImageClassification"),ptr=o(" (ViT model)"),_tr=l(),a6=a("p"),utr=o("The model is set in evaluation mode by default using "),D7e=a("code"),btr=o("model.eval()"),vtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G7e=a("code"),Ftr=o("model.train()"),Ttr=l(),F(n6.$$.fragment),uOe=l(),_d=a("h2"),s6=a("a"),O7e=a("span"),F(s8.$$.fragment),Mtr=l(),V7e=a("span"),Etr=o("AutoModelForVision2Seq"),bOe=l(),Oo=a("div"),F(l8.$$.fragment),Ctr=l(),ud=a("p"),wtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AQ=a("a"),Atr=o("from_pretrained()"),Ltr=o(" class method or the "),LQ=a("a"),ytr=o("from_config()"),xtr=o(` class
method.`),$tr=l(),i8=a("p"),ktr=o("This class cannot be instantiated directly using "),X7e=a("code"),Str=o("__init__()"),Rtr=o(" (throws an error)."),Ptr=l(),bt=a("div"),F(d8.$$.fragment),Btr=l(),z7e=a("p"),Itr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ntr=l(),bd=a("p"),qtr=o(`Note:
Loading a model from its configuration file does `),Q7e=a("strong"),jtr=o("not"),Dtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),Gtr=o("from_pretrained()"),Otr=o(" to load the model weights."),Vtr=l(),F(l6.$$.fragment),Xtr=l(),io=a("div"),F(c8.$$.fragment),ztr=l(),W7e=a("p"),Qtr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wtr=l(),za=a("p"),Htr=o("The model class to instantiate is selected based on the "),H7e=a("code"),Utr=o("model_type"),Jtr=o(` property of the config object (either
passed as an argument or loaded from `),U7e=a("code"),Ytr=o("pretrained_model_name_or_path"),Ztr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=a("code"),Ktr=o("pretrained_model_name_or_path"),ear=o(":"),oar=l(),Y7e=a("ul"),i6=a("li"),Z7e=a("strong"),rar=o("vision-encoder-decoder"),tar=o(" \u2014 "),xQ=a("a"),aar=o("VisionEncoderDecoderModel"),nar=o(" (Vision Encoder decoder model)"),sar=l(),d6=a("p"),lar=o("The model is set in evaluation mode by default using "),K7e=a("code"),iar=o("model.eval()"),dar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),car=o("model.train()"),far=l(),F(c6.$$.fragment),vOe=l(),vd=a("h2"),f6=a("a"),o1e=a("span"),F(f8.$$.fragment),mar=l(),r1e=a("span"),gar=o("AutoModelForVisualQuestionAnswering"),FOe=l(),Vo=a("div"),F(m8.$$.fragment),har=l(),Fd=a("p"),par=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),$Q=a("a"),_ar=o("from_pretrained()"),uar=o(" class method or the "),kQ=a("a"),bar=o("from_config()"),Far=o(` class
method.`),Tar=l(),g8=a("p"),Mar=o("This class cannot be instantiated directly using "),t1e=a("code"),Ear=o("__init__()"),Car=o(" (throws an error)."),war=l(),vt=a("div"),F(h8.$$.fragment),Aar=l(),a1e=a("p"),Lar=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),yar=l(),Td=a("p"),xar=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),$ar=o("not"),kar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),Sar=o("from_pretrained()"),Rar=o(" to load the model weights."),Par=l(),F(m6.$$.fragment),Bar=l(),co=a("div"),F(p8.$$.fragment),Iar=l(),s1e=a("p"),Nar=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),qar=l(),Qa=a("p"),jar=o("The model class to instantiate is selected based on the "),l1e=a("code"),Dar=o("model_type"),Gar=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),Oar=o("pretrained_model_name_or_path"),Var=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),Xar=o("pretrained_model_name_or_path"),zar=o(":"),Qar=l(),c1e=a("ul"),g6=a("li"),f1e=a("strong"),War=o("vilt"),Har=o(" \u2014 "),RQ=a("a"),Uar=o("ViltForQuestionAnswering"),Jar=o(" (ViLT model)"),Yar=l(),h6=a("p"),Zar=o("The model is set in evaluation mode by default using "),m1e=a("code"),Kar=o("model.eval()"),enr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=a("code"),onr=o("model.train()"),rnr=l(),F(p6.$$.fragment),TOe=l(),Md=a("h2"),_6=a("a"),h1e=a("span"),F(_8.$$.fragment),tnr=l(),p1e=a("span"),anr=o("AutoModelForAudioClassification"),MOe=l(),Xo=a("div"),F(u8.$$.fragment),nnr=l(),Ed=a("p"),snr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PQ=a("a"),lnr=o("from_pretrained()"),inr=o(" class method or the "),BQ=a("a"),dnr=o("from_config()"),cnr=o(` class
method.`),fnr=l(),b8=a("p"),mnr=o("This class cannot be instantiated directly using "),_1e=a("code"),gnr=o("__init__()"),hnr=o(" (throws an error)."),pnr=l(),Ft=a("div"),F(v8.$$.fragment),_nr=l(),u1e=a("p"),unr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bnr=l(),Cd=a("p"),vnr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),Fnr=o("not"),Tnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),Mnr=o("from_pretrained()"),Enr=o(" to load the model weights."),Cnr=l(),F(u6.$$.fragment),wnr=l(),fo=a("div"),F(F8.$$.fragment),Anr=l(),v1e=a("p"),Lnr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ynr=l(),Wa=a("p"),xnr=o("The model class to instantiate is selected based on the "),F1e=a("code"),$nr=o("model_type"),knr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),Snr=o("pretrained_model_name_or_path"),Rnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),Pnr=o("pretrained_model_name_or_path"),Bnr=o(":"),Inr=l(),Pe=a("ul"),b6=a("li"),E1e=a("strong"),Nnr=o("data2vec-audio"),qnr=o(" \u2014 "),NQ=a("a"),jnr=o("Data2VecAudioForSequenceClassification"),Dnr=o(" (Data2VecAudio model)"),Gnr=l(),v6=a("li"),C1e=a("strong"),Onr=o("hubert"),Vnr=o(" \u2014 "),qQ=a("a"),Xnr=o("HubertForSequenceClassification"),znr=o(" (Hubert model)"),Qnr=l(),F6=a("li"),w1e=a("strong"),Wnr=o("sew"),Hnr=o(" \u2014 "),jQ=a("a"),Unr=o("SEWForSequenceClassification"),Jnr=o(" (SEW model)"),Ynr=l(),T6=a("li"),A1e=a("strong"),Znr=o("sew-d"),Knr=o(" \u2014 "),DQ=a("a"),esr=o("SEWDForSequenceClassification"),osr=o(" (SEW-D model)"),rsr=l(),M6=a("li"),L1e=a("strong"),tsr=o("unispeech"),asr=o(" \u2014 "),GQ=a("a"),nsr=o("UniSpeechForSequenceClassification"),ssr=o(" (UniSpeech model)"),lsr=l(),E6=a("li"),y1e=a("strong"),isr=o("unispeech-sat"),dsr=o(" \u2014 "),OQ=a("a"),csr=o("UniSpeechSatForSequenceClassification"),fsr=o(" (UniSpeechSat model)"),msr=l(),C6=a("li"),x1e=a("strong"),gsr=o("wav2vec2"),hsr=o(" \u2014 "),VQ=a("a"),psr=o("Wav2Vec2ForSequenceClassification"),_sr=o(" (Wav2Vec2 model)"),usr=l(),w6=a("li"),$1e=a("strong"),bsr=o("wav2vec2-conformer"),vsr=o(" \u2014 "),XQ=a("a"),Fsr=o("Wav2Vec2ConformerForSequenceClassification"),Tsr=o(" (Wav2Vec2-Conformer model)"),Msr=l(),A6=a("li"),k1e=a("strong"),Esr=o("wavlm"),Csr=o(" \u2014 "),zQ=a("a"),wsr=o("WavLMForSequenceClassification"),Asr=o(" (WavLM model)"),Lsr=l(),L6=a("p"),ysr=o("The model is set in evaluation mode by default using "),S1e=a("code"),xsr=o("model.eval()"),$sr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=a("code"),ksr=o("model.train()"),Ssr=l(),F(y6.$$.fragment),EOe=l(),wd=a("h2"),x6=a("a"),P1e=a("span"),F(T8.$$.fragment),Rsr=l(),B1e=a("span"),Psr=o("AutoModelForAudioFrameClassification"),COe=l(),zo=a("div"),F(M8.$$.fragment),Bsr=l(),Ad=a("p"),Isr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QQ=a("a"),Nsr=o("from_pretrained()"),qsr=o(" class method or the "),WQ=a("a"),jsr=o("from_config()"),Dsr=o(` class
method.`),Gsr=l(),E8=a("p"),Osr=o("This class cannot be instantiated directly using "),I1e=a("code"),Vsr=o("__init__()"),Xsr=o(" (throws an error)."),zsr=l(),Tt=a("div"),F(C8.$$.fragment),Qsr=l(),N1e=a("p"),Wsr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hsr=l(),Ld=a("p"),Usr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),Jsr=o("not"),Ysr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),Zsr=o("from_pretrained()"),Ksr=o(" to load the model weights."),elr=l(),F($6.$$.fragment),olr=l(),mo=a("div"),F(w8.$$.fragment),rlr=l(),j1e=a("p"),tlr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),alr=l(),Ha=a("p"),nlr=o("The model class to instantiate is selected based on the "),D1e=a("code"),slr=o("model_type"),llr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),ilr=o("pretrained_model_name_or_path"),dlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),clr=o("pretrained_model_name_or_path"),flr=o(":"),mlr=l(),et=a("ul"),k6=a("li"),V1e=a("strong"),glr=o("data2vec-audio"),hlr=o(" \u2014 "),UQ=a("a"),plr=o("Data2VecAudioForAudioFrameClassification"),_lr=o(" (Data2VecAudio model)"),ulr=l(),S6=a("li"),X1e=a("strong"),blr=o("unispeech-sat"),vlr=o(" \u2014 "),JQ=a("a"),Flr=o("UniSpeechSatForAudioFrameClassification"),Tlr=o(" (UniSpeechSat model)"),Mlr=l(),R6=a("li"),z1e=a("strong"),Elr=o("wav2vec2"),Clr=o(" \u2014 "),YQ=a("a"),wlr=o("Wav2Vec2ForAudioFrameClassification"),Alr=o(" (Wav2Vec2 model)"),Llr=l(),P6=a("li"),Q1e=a("strong"),ylr=o("wav2vec2-conformer"),xlr=o(" \u2014 "),ZQ=a("a"),$lr=o("Wav2Vec2ConformerForAudioFrameClassification"),klr=o(" (Wav2Vec2-Conformer model)"),Slr=l(),B6=a("li"),W1e=a("strong"),Rlr=o("wavlm"),Plr=o(" \u2014 "),KQ=a("a"),Blr=o("WavLMForAudioFrameClassification"),Ilr=o(" (WavLM model)"),Nlr=l(),I6=a("p"),qlr=o("The model is set in evaluation mode by default using "),H1e=a("code"),jlr=o("model.eval()"),Dlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=a("code"),Glr=o("model.train()"),Olr=l(),F(N6.$$.fragment),wOe=l(),yd=a("h2"),q6=a("a"),J1e=a("span"),F(A8.$$.fragment),Vlr=l(),Y1e=a("span"),Xlr=o("AutoModelForCTC"),AOe=l(),Qo=a("div"),F(L8.$$.fragment),zlr=l(),xd=a("p"),Qlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),eW=a("a"),Wlr=o("from_pretrained()"),Hlr=o(" class method or the "),oW=a("a"),Ulr=o("from_config()"),Jlr=o(` class
method.`),Ylr=l(),y8=a("p"),Zlr=o("This class cannot be instantiated directly using "),Z1e=a("code"),Klr=o("__init__()"),eir=o(" (throws an error)."),oir=l(),Mt=a("div"),F(x8.$$.fragment),rir=l(),K1e=a("p"),tir=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),air=l(),$d=a("p"),nir=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),sir=o("not"),lir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),iir=o("from_pretrained()"),dir=o(" to load the model weights."),cir=l(),F(j6.$$.fragment),fir=l(),go=a("div"),F($8.$$.fragment),mir=l(),o2e=a("p"),gir=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hir=l(),Ua=a("p"),pir=o("The model class to instantiate is selected based on the "),r2e=a("code"),_ir=o("model_type"),uir=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),bir=o("pretrained_model_name_or_path"),vir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),Fir=o("pretrained_model_name_or_path"),Tir=o(":"),Mir=l(),Le=a("ul"),D6=a("li"),n2e=a("strong"),Eir=o("data2vec-audio"),Cir=o(" \u2014 "),tW=a("a"),wir=o("Data2VecAudioForCTC"),Air=o(" (Data2VecAudio model)"),Lir=l(),G6=a("li"),s2e=a("strong"),yir=o("hubert"),xir=o(" \u2014 "),aW=a("a"),$ir=o("HubertForCTC"),kir=o(" (Hubert model)"),Sir=l(),O6=a("li"),l2e=a("strong"),Rir=o("mctct"),Pir=o(" \u2014 "),nW=a("a"),Bir=o("MCTCTForCTC"),Iir=o(" (M-CTC-T model)"),Nir=l(),V6=a("li"),i2e=a("strong"),qir=o("sew"),jir=o(" \u2014 "),sW=a("a"),Dir=o("SEWForCTC"),Gir=o(" (SEW model)"),Oir=l(),X6=a("li"),d2e=a("strong"),Vir=o("sew-d"),Xir=o(" \u2014 "),lW=a("a"),zir=o("SEWDForCTC"),Qir=o(" (SEW-D model)"),Wir=l(),z6=a("li"),c2e=a("strong"),Hir=o("unispeech"),Uir=o(" \u2014 "),iW=a("a"),Jir=o("UniSpeechForCTC"),Yir=o(" (UniSpeech model)"),Zir=l(),Q6=a("li"),f2e=a("strong"),Kir=o("unispeech-sat"),edr=o(" \u2014 "),dW=a("a"),odr=o("UniSpeechSatForCTC"),rdr=o(" (UniSpeechSat model)"),tdr=l(),W6=a("li"),m2e=a("strong"),adr=o("wav2vec2"),ndr=o(" \u2014 "),cW=a("a"),sdr=o("Wav2Vec2ForCTC"),ldr=o(" (Wav2Vec2 model)"),idr=l(),H6=a("li"),g2e=a("strong"),ddr=o("wav2vec2-conformer"),cdr=o(" \u2014 "),fW=a("a"),fdr=o("Wav2Vec2ConformerForCTC"),mdr=o(" (Wav2Vec2-Conformer model)"),gdr=l(),U6=a("li"),h2e=a("strong"),hdr=o("wavlm"),pdr=o(" \u2014 "),mW=a("a"),_dr=o("WavLMForCTC"),udr=o(" (WavLM model)"),bdr=l(),J6=a("p"),vdr=o("The model is set in evaluation mode by default using "),p2e=a("code"),Fdr=o("model.eval()"),Tdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=a("code"),Mdr=o("model.train()"),Edr=l(),F(Y6.$$.fragment),LOe=l(),kd=a("h2"),Z6=a("a"),u2e=a("span"),F(k8.$$.fragment),Cdr=l(),b2e=a("span"),wdr=o("AutoModelForSpeechSeq2Seq"),yOe=l(),Wo=a("div"),F(S8.$$.fragment),Adr=l(),Sd=a("p"),Ldr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gW=a("a"),ydr=o("from_pretrained()"),xdr=o(" class method or the "),hW=a("a"),$dr=o("from_config()"),kdr=o(` class
method.`),Sdr=l(),R8=a("p"),Rdr=o("This class cannot be instantiated directly using "),v2e=a("code"),Pdr=o("__init__()"),Bdr=o(" (throws an error)."),Idr=l(),Et=a("div"),F(P8.$$.fragment),Ndr=l(),F2e=a("p"),qdr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jdr=l(),Rd=a("p"),Ddr=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),Gdr=o("not"),Odr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),Vdr=o("from_pretrained()"),Xdr=o(" to load the model weights."),zdr=l(),F(K6.$$.fragment),Qdr=l(),ho=a("div"),F(B8.$$.fragment),Wdr=l(),M2e=a("p"),Hdr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Udr=l(),Ja=a("p"),Jdr=o("The model class to instantiate is selected based on the "),E2e=a("code"),Ydr=o("model_type"),Zdr=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),Kdr=o("pretrained_model_name_or_path"),ecr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(":"),tcr=l(),I8=a("ul"),eT=a("li"),A2e=a("strong"),acr=o("speech-encoder-decoder"),ncr=o(" \u2014 "),_W=a("a"),scr=o("SpeechEncoderDecoderModel"),lcr=o(" (Speech Encoder decoder model)"),icr=l(),oT=a("li"),L2e=a("strong"),dcr=o("speech_to_text"),ccr=o(" \u2014 "),uW=a("a"),fcr=o("Speech2TextForConditionalGeneration"),mcr=o(" (Speech2Text model)"),gcr=l(),rT=a("p"),hcr=o("The model is set in evaluation mode by default using "),y2e=a("code"),pcr=o("model.eval()"),_cr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x2e=a("code"),ucr=o("model.train()"),bcr=l(),F(tT.$$.fragment),xOe=l(),Pd=a("h2"),aT=a("a"),$2e=a("span"),F(N8.$$.fragment),vcr=l(),k2e=a("span"),Fcr=o("AutoModelForAudioXVector"),$Oe=l(),Ho=a("div"),F(q8.$$.fragment),Tcr=l(),Bd=a("p"),Mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bW=a("a"),Ecr=o("from_pretrained()"),Ccr=o(" class method or the "),vW=a("a"),wcr=o("from_config()"),Acr=o(` class
method.`),Lcr=l(),j8=a("p"),ycr=o("This class cannot be instantiated directly using "),S2e=a("code"),xcr=o("__init__()"),$cr=o(" (throws an error)."),kcr=l(),Ct=a("div"),F(D8.$$.fragment),Scr=l(),R2e=a("p"),Rcr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Pcr=l(),Id=a("p"),Bcr=o(`Note:
Loading a model from its configuration file does `),P2e=a("strong"),Icr=o("not"),Ncr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),qcr=o("from_pretrained()"),jcr=o(" to load the model weights."),Dcr=l(),F(nT.$$.fragment),Gcr=l(),po=a("div"),F(G8.$$.fragment),Ocr=l(),B2e=a("p"),Vcr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Xcr=l(),Ya=a("p"),zcr=o("The model class to instantiate is selected based on the "),I2e=a("code"),Qcr=o("model_type"),Wcr=o(` property of the config object (either
passed as an argument or loaded from `),N2e=a("code"),Hcr=o("pretrained_model_name_or_path"),Ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(":"),Zcr=l(),ot=a("ul"),sT=a("li"),j2e=a("strong"),Kcr=o("data2vec-audio"),efr=o(" \u2014 "),TW=a("a"),ofr=o("Data2VecAudioForXVector"),rfr=o(" (Data2VecAudio model)"),tfr=l(),lT=a("li"),D2e=a("strong"),afr=o("unispeech-sat"),nfr=o(" \u2014 "),MW=a("a"),sfr=o("UniSpeechSatForXVector"),lfr=o(" (UniSpeechSat model)"),ifr=l(),iT=a("li"),G2e=a("strong"),dfr=o("wav2vec2"),cfr=o(" \u2014 "),EW=a("a"),ffr=o("Wav2Vec2ForXVector"),mfr=o(" (Wav2Vec2 model)"),gfr=l(),dT=a("li"),O2e=a("strong"),hfr=o("wav2vec2-conformer"),pfr=o(" \u2014 "),CW=a("a"),_fr=o("Wav2Vec2ConformerForXVector"),ufr=o(" (Wav2Vec2-Conformer model)"),bfr=l(),cT=a("li"),V2e=a("strong"),vfr=o("wavlm"),Ffr=o(" \u2014 "),wW=a("a"),Tfr=o("WavLMForXVector"),Mfr=o(" (WavLM model)"),Efr=l(),fT=a("p"),Cfr=o("The model is set in evaluation mode by default using "),X2e=a("code"),wfr=o("model.eval()"),Afr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=a("code"),Lfr=o("model.train()"),yfr=l(),F(mT.$$.fragment),kOe=l(),Nd=a("h2"),gT=a("a"),Q2e=a("span"),F(O8.$$.fragment),xfr=l(),W2e=a("span"),$fr=o("AutoModelForMaskedImageModeling"),SOe=l(),Uo=a("div"),F(V8.$$.fragment),kfr=l(),qd=a("p"),Sfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AW=a("a"),Rfr=o("from_pretrained()"),Pfr=o(" class method or the "),LW=a("a"),Bfr=o("from_config()"),Ifr=o(` class
method.`),Nfr=l(),X8=a("p"),qfr=o("This class cannot be instantiated directly using "),H2e=a("code"),jfr=o("__init__()"),Dfr=o(" (throws an error)."),Gfr=l(),wt=a("div"),F(z8.$$.fragment),Ofr=l(),U2e=a("p"),Vfr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Xfr=l(),jd=a("p"),zfr=o(`Note:
Loading a model from its configuration file does `),J2e=a("strong"),Qfr=o("not"),Wfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),Hfr=o("from_pretrained()"),Ufr=o(" to load the model weights."),Jfr=l(),F(hT.$$.fragment),Yfr=l(),_o=a("div"),F(Q8.$$.fragment),Zfr=l(),Y2e=a("p"),Kfr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),emr=l(),Za=a("p"),omr=o("The model class to instantiate is selected based on the "),Z2e=a("code"),rmr=o("model_type"),tmr=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),smr=o("pretrained_model_name_or_path"),lmr=o(":"),imr=l(),Dd=a("ul"),pT=a("li"),obe=a("strong"),dmr=o("deit"),cmr=o(" \u2014 "),xW=a("a"),fmr=o("DeiTForMaskedImageModeling"),mmr=o(" (DeiT model)"),gmr=l(),_T=a("li"),rbe=a("strong"),hmr=o("swin"),pmr=o(" \u2014 "),$W=a("a"),_mr=o("SwinForMaskedImageModeling"),umr=o(" (Swin Transformer model)"),bmr=l(),uT=a("li"),tbe=a("strong"),vmr=o("vit"),Fmr=o(" \u2014 "),kW=a("a"),Tmr=o("ViTForMaskedImageModeling"),Mmr=o(" (ViT model)"),Emr=l(),bT=a("p"),Cmr=o("The model is set in evaluation mode by default using "),abe=a("code"),wmr=o("model.eval()"),Amr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=a("code"),Lmr=o("model.train()"),ymr=l(),F(vT.$$.fragment),ROe=l(),Gd=a("h2"),FT=a("a"),sbe=a("span"),F(W8.$$.fragment),xmr=l(),lbe=a("span"),$mr=o("AutoModelForObjectDetection"),POe=l(),Jo=a("div"),F(H8.$$.fragment),kmr=l(),Od=a("p"),Smr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SW=a("a"),Rmr=o("from_pretrained()"),Pmr=o(" class method or the "),RW=a("a"),Bmr=o("from_config()"),Imr=o(` class
method.`),Nmr=l(),U8=a("p"),qmr=o("This class cannot be instantiated directly using "),ibe=a("code"),jmr=o("__init__()"),Dmr=o(" (throws an error)."),Gmr=l(),At=a("div"),F(J8.$$.fragment),Omr=l(),dbe=a("p"),Vmr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Xmr=l(),Vd=a("p"),zmr=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),Qmr=o("not"),Wmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),Hmr=o("from_pretrained()"),Umr=o(" to load the model weights."),Jmr=l(),F(TT.$$.fragment),Ymr=l(),uo=a("div"),F(Y8.$$.fragment),Zmr=l(),fbe=a("p"),Kmr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),egr=l(),Ka=a("p"),ogr=o("The model class to instantiate is selected based on the "),mbe=a("code"),rgr=o("model_type"),tgr=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),agr=o("pretrained_model_name_or_path"),ngr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),sgr=o("pretrained_model_name_or_path"),lgr=o(":"),igr=l(),Z8=a("ul"),MT=a("li"),pbe=a("strong"),dgr=o("detr"),cgr=o(" \u2014 "),BW=a("a"),fgr=o("DetrForObjectDetection"),mgr=o(" (DETR model)"),ggr=l(),ET=a("li"),_be=a("strong"),hgr=o("yolos"),pgr=o(" \u2014 "),IW=a("a"),_gr=o("YolosForObjectDetection"),ugr=o(" (YOLOS model)"),bgr=l(),CT=a("p"),vgr=o("The model is set in evaluation mode by default using "),ube=a("code"),Fgr=o("model.eval()"),Tgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=a("code"),Mgr=o("model.train()"),Egr=l(),F(wT.$$.fragment),BOe=l(),Xd=a("h2"),AT=a("a"),vbe=a("span"),F(K8.$$.fragment),Cgr=l(),Fbe=a("span"),wgr=o("AutoModelForImageSegmentation"),IOe=l(),Yo=a("div"),F(e9.$$.fragment),Agr=l(),zd=a("p"),Lgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NW=a("a"),ygr=o("from_pretrained()"),xgr=o(" class method or the "),qW=a("a"),$gr=o("from_config()"),kgr=o(` class
method.`),Sgr=l(),o9=a("p"),Rgr=o("This class cannot be instantiated directly using "),Tbe=a("code"),Pgr=o("__init__()"),Bgr=o(" (throws an error)."),Igr=l(),Lt=a("div"),F(r9.$$.fragment),Ngr=l(),Mbe=a("p"),qgr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jgr=l(),Qd=a("p"),Dgr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),Ggr=o("not"),Ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" to load the model weights."),zgr=l(),F(LT.$$.fragment),Qgr=l(),bo=a("div"),F(t9.$$.fragment),Wgr=l(),Cbe=a("p"),Hgr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ugr=l(),en=a("p"),Jgr=o("The model class to instantiate is selected based on the "),wbe=a("code"),Ygr=o("model_type"),Zgr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),Kgr=o("pretrained_model_name_or_path"),ehr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(":"),thr=l(),ybe=a("ul"),yT=a("li"),xbe=a("strong"),ahr=o("detr"),nhr=o(" \u2014 "),DW=a("a"),shr=o("DetrForSegmentation"),lhr=o(" (DETR model)"),ihr=l(),xT=a("p"),dhr=o("The model is set in evaluation mode by default using "),$be=a("code"),chr=o("model.eval()"),fhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=a("code"),mhr=o("model.train()"),ghr=l(),F($T.$$.fragment),NOe=l(),Wd=a("h2"),kT=a("a"),Sbe=a("span"),F(a9.$$.fragment),hhr=l(),Rbe=a("span"),phr=o("AutoModelForSemanticSegmentation"),qOe=l(),Zo=a("div"),F(n9.$$.fragment),_hr=l(),Hd=a("p"),uhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GW=a("a"),bhr=o("from_pretrained()"),vhr=o(" class method or the "),OW=a("a"),Fhr=o("from_config()"),Thr=o(` class
method.`),Mhr=l(),s9=a("p"),Ehr=o("This class cannot be instantiated directly using "),Pbe=a("code"),Chr=o("__init__()"),whr=o(" (throws an error)."),Ahr=l(),yt=a("div"),F(l9.$$.fragment),Lhr=l(),Bbe=a("p"),yhr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xhr=l(),Ud=a("p"),$hr=o(`Note:
Loading a model from its configuration file does `),Ibe=a("strong"),khr=o("not"),Shr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Rhr=o("from_pretrained()"),Phr=o(" to load the model weights."),Bhr=l(),F(ST.$$.fragment),Ihr=l(),vo=a("div"),F(i9.$$.fragment),Nhr=l(),Nbe=a("p"),qhr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jhr=l(),on=a("p"),Dhr=o("The model class to instantiate is selected based on the "),qbe=a("code"),Ghr=o("model_type"),Ohr=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),zhr=o("pretrained_model_name_or_path"),Qhr=o(":"),Whr=l(),rn=a("ul"),RT=a("li"),Gbe=a("strong"),Hhr=o("beit"),Uhr=o(" \u2014 "),XW=a("a"),Jhr=o("BeitForSemanticSegmentation"),Yhr=o(" (BEiT model)"),Zhr=l(),PT=a("li"),Obe=a("strong"),Khr=o("data2vec-vision"),epr=o(" \u2014 "),zW=a("a"),opr=o("Data2VecVisionForSemanticSegmentation"),rpr=o(" (Data2VecVision model)"),tpr=l(),BT=a("li"),Vbe=a("strong"),apr=o("dpt"),npr=o(" \u2014 "),QW=a("a"),spr=o("DPTForSemanticSegmentation"),lpr=o(" (DPT model)"),ipr=l(),IT=a("li"),Xbe=a("strong"),dpr=o("segformer"),cpr=o(" \u2014 "),WW=a("a"),fpr=o("SegformerForSemanticSegmentation"),mpr=o(" (SegFormer model)"),gpr=l(),NT=a("p"),hpr=o("The model is set in evaluation mode by default using "),zbe=a("code"),ppr=o("model.eval()"),_pr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=a("code"),upr=o("model.train()"),bpr=l(),F(qT.$$.fragment),jOe=l(),Jd=a("h2"),jT=a("a"),Wbe=a("span"),F(d9.$$.fragment),vpr=l(),Hbe=a("span"),Fpr=o("AutoModelForInstanceSegmentation"),DOe=l(),Ko=a("div"),F(c9.$$.fragment),Tpr=l(),Yd=a("p"),Mpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HW=a("a"),Epr=o("from_pretrained()"),Cpr=o(" class method or the "),UW=a("a"),wpr=o("from_config()"),Apr=o(` class
method.`),Lpr=l(),f9=a("p"),ypr=o("This class cannot be instantiated directly using "),Ube=a("code"),xpr=o("__init__()"),$pr=o(" (throws an error)."),kpr=l(),xt=a("div"),F(m9.$$.fragment),Spr=l(),Jbe=a("p"),Rpr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ppr=l(),Zd=a("p"),Bpr=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),Ipr=o("not"),Npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),qpr=o("from_pretrained()"),jpr=o(" to load the model weights."),Dpr=l(),F(DT.$$.fragment),Gpr=l(),Fo=a("div"),F(g9.$$.fragment),Opr=l(),Zbe=a("p"),Vpr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Xpr=l(),tn=a("p"),zpr=o("The model class to instantiate is selected based on the "),Kbe=a("code"),Qpr=o("model_type"),Wpr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),Jpr=o("pretrained_model_name_or_path"),Ypr=o(":"),Zpr=l(),rve=a("ul"),GT=a("li"),tve=a("strong"),Kpr=o("maskformer"),e_r=o(" \u2014 "),YW=a("a"),o_r=o("MaskFormerForInstanceSegmentation"),r_r=o(" (MaskFormer model)"),t_r=l(),OT=a("p"),a_r=o("The model is set in evaluation mode by default using "),ave=a("code"),n_r=o("model.eval()"),s_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nve=a("code"),l_r=o("model.train()"),i_r=l(),F(VT.$$.fragment),GOe=l(),Kd=a("h2"),XT=a("a"),sve=a("span"),F(h9.$$.fragment),d_r=l(),lve=a("span"),c_r=o("TFAutoModel"),OOe=l(),er=a("div"),F(p9.$$.fragment),f_r=l(),ec=a("p"),m_r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZW=a("a"),g_r=o("from_pretrained()"),h_r=o(" class method or the "),KW=a("a"),p_r=o("from_config()"),__r=o(` class
method.`),u_r=l(),_9=a("p"),b_r=o("This class cannot be instantiated directly using "),ive=a("code"),v_r=o("__init__()"),F_r=o(" (throws an error)."),T_r=l(),$t=a("div"),F(u9.$$.fragment),M_r=l(),dve=a("p"),E_r=o("Instantiates one of the base model classes of the library from a configuration."),C_r=l(),oc=a("p"),w_r=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),A_r=o("not"),L_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),y_r=o("from_pretrained()"),x_r=o(" to load the model weights."),$_r=l(),F(zT.$$.fragment),k_r=l(),yr=a("div"),F(b9.$$.fragment),S_r=l(),fve=a("p"),R_r=o("Instantiate one of the base model classes of the library from a pretrained model."),P_r=l(),an=a("p"),B_r=o("The model class to instantiate is selected based on the "),mve=a("code"),I_r=o("model_type"),N_r=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),q_r=o("pretrained_model_name_or_path"),j_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),D_r=o("pretrained_model_name_or_path"),G_r=o(":"),O_r=l(),j=a("ul"),QT=a("li"),pve=a("strong"),V_r=o("albert"),X_r=o(" \u2014 "),oH=a("a"),z_r=o("TFAlbertModel"),Q_r=o(" (ALBERT model)"),W_r=l(),WT=a("li"),_ve=a("strong"),H_r=o("bart"),U_r=o(" \u2014 "),rH=a("a"),J_r=o("TFBartModel"),Y_r=o(" (BART model)"),Z_r=l(),HT=a("li"),uve=a("strong"),K_r=o("bert"),eur=o(" \u2014 "),tH=a("a"),our=o("TFBertModel"),rur=o(" (BERT model)"),tur=l(),UT=a("li"),bve=a("strong"),aur=o("blenderbot"),nur=o(" \u2014 "),aH=a("a"),sur=o("TFBlenderbotModel"),lur=o(" (Blenderbot model)"),iur=l(),JT=a("li"),vve=a("strong"),dur=o("blenderbot-small"),cur=o(" \u2014 "),nH=a("a"),fur=o("TFBlenderbotSmallModel"),mur=o(" (BlenderbotSmall model)"),gur=l(),YT=a("li"),Fve=a("strong"),hur=o("camembert"),pur=o(" \u2014 "),sH=a("a"),_ur=o("TFCamembertModel"),uur=o(" (CamemBERT model)"),bur=l(),ZT=a("li"),Tve=a("strong"),vur=o("clip"),Fur=o(" \u2014 "),lH=a("a"),Tur=o("TFCLIPModel"),Mur=o(" (CLIP model)"),Eur=l(),KT=a("li"),Mve=a("strong"),Cur=o("convbert"),wur=o(" \u2014 "),iH=a("a"),Aur=o("TFConvBertModel"),Lur=o(" (ConvBERT model)"),yur=l(),eM=a("li"),Eve=a("strong"),xur=o("convnext"),$ur=o(" \u2014 "),dH=a("a"),kur=o("TFConvNextModel"),Sur=o(" (ConvNeXT model)"),Rur=l(),oM=a("li"),Cve=a("strong"),Pur=o("ctrl"),Bur=o(" \u2014 "),cH=a("a"),Iur=o("TFCTRLModel"),Nur=o(" (CTRL model)"),qur=l(),rM=a("li"),wve=a("strong"),jur=o("data2vec-vision"),Dur=o(" \u2014 "),fH=a("a"),Gur=o("TFData2VecVisionModel"),Our=o(" (Data2VecVision model)"),Vur=l(),tM=a("li"),Ave=a("strong"),Xur=o("deberta"),zur=o(" \u2014 "),mH=a("a"),Qur=o("TFDebertaModel"),Wur=o(" (DeBERTa model)"),Hur=l(),aM=a("li"),Lve=a("strong"),Uur=o("deberta-v2"),Jur=o(" \u2014 "),gH=a("a"),Yur=o("TFDebertaV2Model"),Zur=o(" (DeBERTa-v2 model)"),Kur=l(),nM=a("li"),yve=a("strong"),e7r=o("distilbert"),o7r=o(" \u2014 "),hH=a("a"),r7r=o("TFDistilBertModel"),t7r=o(" (DistilBERT model)"),a7r=l(),sM=a("li"),xve=a("strong"),n7r=o("dpr"),s7r=o(" \u2014 "),pH=a("a"),l7r=o("TFDPRQuestionEncoder"),i7r=o(" (DPR model)"),d7r=l(),lM=a("li"),$ve=a("strong"),c7r=o("electra"),f7r=o(" \u2014 "),_H=a("a"),m7r=o("TFElectraModel"),g7r=o(" (ELECTRA model)"),h7r=l(),iM=a("li"),kve=a("strong"),p7r=o("flaubert"),_7r=o(" \u2014 "),uH=a("a"),u7r=o("TFFlaubertModel"),b7r=o(" (FlauBERT model)"),v7r=l(),zs=a("li"),Sve=a("strong"),F7r=o("funnel"),T7r=o(" \u2014 "),bH=a("a"),M7r=o("TFFunnelModel"),E7r=o(" or "),vH=a("a"),C7r=o("TFFunnelBaseModel"),w7r=o(" (Funnel Transformer model)"),A7r=l(),dM=a("li"),Rve=a("strong"),L7r=o("gpt2"),y7r=o(" \u2014 "),FH=a("a"),x7r=o("TFGPT2Model"),$7r=o(" (OpenAI GPT-2 model)"),k7r=l(),cM=a("li"),Pve=a("strong"),S7r=o("gptj"),R7r=o(" \u2014 "),TH=a("a"),P7r=o("TFGPTJModel"),B7r=o(" (GPT-J model)"),I7r=l(),fM=a("li"),Bve=a("strong"),N7r=o("hubert"),q7r=o(" \u2014 "),MH=a("a"),j7r=o("TFHubertModel"),D7r=o(" (Hubert model)"),G7r=l(),mM=a("li"),Ive=a("strong"),O7r=o("layoutlm"),V7r=o(" \u2014 "),EH=a("a"),X7r=o("TFLayoutLMModel"),z7r=o(" (LayoutLM model)"),Q7r=l(),gM=a("li"),Nve=a("strong"),W7r=o("led"),H7r=o(" \u2014 "),CH=a("a"),U7r=o("TFLEDModel"),J7r=o(" (LED model)"),Y7r=l(),hM=a("li"),qve=a("strong"),Z7r=o("longformer"),K7r=o(" \u2014 "),wH=a("a"),e1r=o("TFLongformerModel"),o1r=o(" (Longformer model)"),r1r=l(),pM=a("li"),jve=a("strong"),t1r=o("lxmert"),a1r=o(" \u2014 "),AH=a("a"),n1r=o("TFLxmertModel"),s1r=o(" (LXMERT model)"),l1r=l(),_M=a("li"),Dve=a("strong"),i1r=o("marian"),d1r=o(" \u2014 "),LH=a("a"),c1r=o("TFMarianModel"),f1r=o(" (Marian model)"),m1r=l(),uM=a("li"),Gve=a("strong"),g1r=o("mbart"),h1r=o(" \u2014 "),yH=a("a"),p1r=o("TFMBartModel"),_1r=o(" (mBART model)"),u1r=l(),bM=a("li"),Ove=a("strong"),b1r=o("mobilebert"),v1r=o(" \u2014 "),xH=a("a"),F1r=o("TFMobileBertModel"),T1r=o(" (MobileBERT model)"),M1r=l(),vM=a("li"),Vve=a("strong"),E1r=o("mpnet"),C1r=o(" \u2014 "),$H=a("a"),w1r=o("TFMPNetModel"),A1r=o(" (MPNet model)"),L1r=l(),FM=a("li"),Xve=a("strong"),y1r=o("mt5"),x1r=o(" \u2014 "),kH=a("a"),$1r=o("TFMT5Model"),k1r=o(" (MT5 model)"),S1r=l(),TM=a("li"),zve=a("strong"),R1r=o("openai-gpt"),P1r=o(" \u2014 "),SH=a("a"),B1r=o("TFOpenAIGPTModel"),I1r=o(" (OpenAI GPT model)"),N1r=l(),MM=a("li"),Qve=a("strong"),q1r=o("opt"),j1r=o(" \u2014 "),RH=a("a"),D1r=o("TFOPTModel"),G1r=o(" (OPT model)"),O1r=l(),EM=a("li"),Wve=a("strong"),V1r=o("pegasus"),X1r=o(" \u2014 "),PH=a("a"),z1r=o("TFPegasusModel"),Q1r=o(" (Pegasus model)"),W1r=l(),CM=a("li"),Hve=a("strong"),H1r=o("rembert"),U1r=o(" \u2014 "),BH=a("a"),J1r=o("TFRemBertModel"),Y1r=o(" (RemBERT model)"),Z1r=l(),wM=a("li"),Uve=a("strong"),K1r=o("roberta"),e2r=o(" \u2014 "),IH=a("a"),o2r=o("TFRobertaModel"),r2r=o(" (RoBERTa model)"),t2r=l(),AM=a("li"),Jve=a("strong"),a2r=o("roformer"),n2r=o(" \u2014 "),NH=a("a"),s2r=o("TFRoFormerModel"),l2r=o(" (RoFormer model)"),i2r=l(),LM=a("li"),Yve=a("strong"),d2r=o("speech_to_text"),c2r=o(" \u2014 "),qH=a("a"),f2r=o("TFSpeech2TextModel"),m2r=o(" (Speech2Text model)"),g2r=l(),yM=a("li"),Zve=a("strong"),h2r=o("swin"),p2r=o(" \u2014 "),jH=a("a"),_2r=o("TFSwinModel"),u2r=o(" (Swin Transformer model)"),b2r=l(),xM=a("li"),Kve=a("strong"),v2r=o("t5"),F2r=o(" \u2014 "),DH=a("a"),T2r=o("TFT5Model"),M2r=o(" (T5 model)"),E2r=l(),$M=a("li"),eFe=a("strong"),C2r=o("tapas"),w2r=o(" \u2014 "),GH=a("a"),A2r=o("TFTapasModel"),L2r=o(" (TAPAS model)"),y2r=l(),kM=a("li"),oFe=a("strong"),x2r=o("transfo-xl"),$2r=o(" \u2014 "),OH=a("a"),k2r=o("TFTransfoXLModel"),S2r=o(" (Transformer-XL model)"),R2r=l(),SM=a("li"),rFe=a("strong"),P2r=o("vit"),B2r=o(" \u2014 "),VH=a("a"),I2r=o("TFViTModel"),N2r=o(" (ViT model)"),q2r=l(),RM=a("li"),tFe=a("strong"),j2r=o("vit_mae"),D2r=o(" \u2014 "),XH=a("a"),G2r=o("TFViTMAEModel"),O2r=o(" (ViTMAE model)"),V2r=l(),PM=a("li"),aFe=a("strong"),X2r=o("wav2vec2"),z2r=o(" \u2014 "),zH=a("a"),Q2r=o("TFWav2Vec2Model"),W2r=o(" (Wav2Vec2 model)"),H2r=l(),BM=a("li"),nFe=a("strong"),U2r=o("xlm"),J2r=o(" \u2014 "),QH=a("a"),Y2r=o("TFXLMModel"),Z2r=o(" (XLM model)"),K2r=l(),IM=a("li"),sFe=a("strong"),ebr=o("xlm-roberta"),obr=o(" \u2014 "),WH=a("a"),rbr=o("TFXLMRobertaModel"),tbr=o(" (XLM-RoBERTa model)"),abr=l(),NM=a("li"),lFe=a("strong"),nbr=o("xlnet"),sbr=o(" \u2014 "),HH=a("a"),lbr=o("TFXLNetModel"),ibr=o(" (XLNet model)"),dbr=l(),F(qM.$$.fragment),VOe=l(),rc=a("h2"),jM=a("a"),iFe=a("span"),F(v9.$$.fragment),cbr=l(),dFe=a("span"),fbr=o("TFAutoModelForPreTraining"),XOe=l(),or=a("div"),F(F9.$$.fragment),mbr=l(),tc=a("p"),gbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UH=a("a"),hbr=o("from_pretrained()"),pbr=o(" class method or the "),JH=a("a"),_br=o("from_config()"),ubr=o(` class
method.`),bbr=l(),T9=a("p"),vbr=o("This class cannot be instantiated directly using "),cFe=a("code"),Fbr=o("__init__()"),Tbr=o(" (throws an error)."),Mbr=l(),kt=a("div"),F(M9.$$.fragment),Ebr=l(),fFe=a("p"),Cbr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wbr=l(),ac=a("p"),Abr=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),Lbr=o("not"),ybr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),xbr=o("from_pretrained()"),$br=o(" to load the model weights."),kbr=l(),F(DM.$$.fragment),Sbr=l(),xr=a("div"),F(E9.$$.fragment),Rbr=l(),gFe=a("p"),Pbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bbr=l(),nn=a("p"),Ibr=o("The model class to instantiate is selected based on the "),hFe=a("code"),Nbr=o("model_type"),qbr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),jbr=o("pretrained_model_name_or_path"),Dbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),Gbr=o("pretrained_model_name_or_path"),Obr=o(":"),Vbr=l(),se=a("ul"),GM=a("li"),uFe=a("strong"),Xbr=o("albert"),zbr=o(" \u2014 "),ZH=a("a"),Qbr=o("TFAlbertForPreTraining"),Wbr=o(" (ALBERT model)"),Hbr=l(),OM=a("li"),bFe=a("strong"),Ubr=o("bart"),Jbr=o(" \u2014 "),KH=a("a"),Ybr=o("TFBartForConditionalGeneration"),Zbr=o(" (BART model)"),Kbr=l(),VM=a("li"),vFe=a("strong"),evr=o("bert"),ovr=o(" \u2014 "),eU=a("a"),rvr=o("TFBertForPreTraining"),tvr=o(" (BERT model)"),avr=l(),XM=a("li"),FFe=a("strong"),nvr=o("camembert"),svr=o(" \u2014 "),oU=a("a"),lvr=o("TFCamembertForMaskedLM"),ivr=o(" (CamemBERT model)"),dvr=l(),zM=a("li"),TFe=a("strong"),cvr=o("ctrl"),fvr=o(" \u2014 "),rU=a("a"),mvr=o("TFCTRLLMHeadModel"),gvr=o(" (CTRL model)"),hvr=l(),QM=a("li"),MFe=a("strong"),pvr=o("distilbert"),_vr=o(" \u2014 "),tU=a("a"),uvr=o("TFDistilBertForMaskedLM"),bvr=o(" (DistilBERT model)"),vvr=l(),WM=a("li"),EFe=a("strong"),Fvr=o("electra"),Tvr=o(" \u2014 "),aU=a("a"),Mvr=o("TFElectraForPreTraining"),Evr=o(" (ELECTRA model)"),Cvr=l(),HM=a("li"),CFe=a("strong"),wvr=o("flaubert"),Avr=o(" \u2014 "),nU=a("a"),Lvr=o("TFFlaubertWithLMHeadModel"),yvr=o(" (FlauBERT model)"),xvr=l(),UM=a("li"),wFe=a("strong"),$vr=o("funnel"),kvr=o(" \u2014 "),sU=a("a"),Svr=o("TFFunnelForPreTraining"),Rvr=o(" (Funnel Transformer model)"),Pvr=l(),JM=a("li"),AFe=a("strong"),Bvr=o("gpt2"),Ivr=o(" \u2014 "),lU=a("a"),Nvr=o("TFGPT2LMHeadModel"),qvr=o(" (OpenAI GPT-2 model)"),jvr=l(),YM=a("li"),LFe=a("strong"),Dvr=o("layoutlm"),Gvr=o(" \u2014 "),iU=a("a"),Ovr=o("TFLayoutLMForMaskedLM"),Vvr=o(" (LayoutLM model)"),Xvr=l(),ZM=a("li"),yFe=a("strong"),zvr=o("lxmert"),Qvr=o(" \u2014 "),dU=a("a"),Wvr=o("TFLxmertForPreTraining"),Hvr=o(" (LXMERT model)"),Uvr=l(),KM=a("li"),xFe=a("strong"),Jvr=o("mobilebert"),Yvr=o(" \u2014 "),cU=a("a"),Zvr=o("TFMobileBertForPreTraining"),Kvr=o(" (MobileBERT model)"),eFr=l(),eE=a("li"),$Fe=a("strong"),oFr=o("mpnet"),rFr=o(" \u2014 "),fU=a("a"),tFr=o("TFMPNetForMaskedLM"),aFr=o(" (MPNet model)"),nFr=l(),oE=a("li"),kFe=a("strong"),sFr=o("openai-gpt"),lFr=o(" \u2014 "),mU=a("a"),iFr=o("TFOpenAIGPTLMHeadModel"),dFr=o(" (OpenAI GPT model)"),cFr=l(),rE=a("li"),SFe=a("strong"),fFr=o("roberta"),mFr=o(" \u2014 "),gU=a("a"),gFr=o("TFRobertaForMaskedLM"),hFr=o(" (RoBERTa model)"),pFr=l(),tE=a("li"),RFe=a("strong"),_Fr=o("t5"),uFr=o(" \u2014 "),hU=a("a"),bFr=o("TFT5ForConditionalGeneration"),vFr=o(" (T5 model)"),FFr=l(),aE=a("li"),PFe=a("strong"),TFr=o("tapas"),MFr=o(" \u2014 "),pU=a("a"),EFr=o("TFTapasForMaskedLM"),CFr=o(" (TAPAS model)"),wFr=l(),nE=a("li"),BFe=a("strong"),AFr=o("transfo-xl"),LFr=o(" \u2014 "),_U=a("a"),yFr=o("TFTransfoXLLMHeadModel"),xFr=o(" (Transformer-XL model)"),$Fr=l(),sE=a("li"),IFe=a("strong"),kFr=o("vit_mae"),SFr=o(" \u2014 "),uU=a("a"),RFr=o("TFViTMAEForPreTraining"),PFr=o(" (ViTMAE model)"),BFr=l(),lE=a("li"),NFe=a("strong"),IFr=o("xlm"),NFr=o(" \u2014 "),bU=a("a"),qFr=o("TFXLMWithLMHeadModel"),jFr=o(" (XLM model)"),DFr=l(),iE=a("li"),qFe=a("strong"),GFr=o("xlm-roberta"),OFr=o(" \u2014 "),vU=a("a"),VFr=o("TFXLMRobertaForMaskedLM"),XFr=o(" (XLM-RoBERTa model)"),zFr=l(),dE=a("li"),jFe=a("strong"),QFr=o("xlnet"),WFr=o(" \u2014 "),FU=a("a"),HFr=o("TFXLNetLMHeadModel"),UFr=o(" (XLNet model)"),JFr=l(),F(cE.$$.fragment),zOe=l(),nc=a("h2"),fE=a("a"),DFe=a("span"),F(C9.$$.fragment),YFr=l(),GFe=a("span"),ZFr=o("TFAutoModelForCausalLM"),QOe=l(),rr=a("div"),F(w9.$$.fragment),KFr=l(),sc=a("p"),e6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TU=a("a"),o6r=o("from_pretrained()"),r6r=o(" class method or the "),MU=a("a"),t6r=o("from_config()"),a6r=o(` class
method.`),n6r=l(),A9=a("p"),s6r=o("This class cannot be instantiated directly using "),OFe=a("code"),l6r=o("__init__()"),i6r=o(" (throws an error)."),d6r=l(),St=a("div"),F(L9.$$.fragment),c6r=l(),VFe=a("p"),f6r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),m6r=l(),lc=a("p"),g6r=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),h6r=o("not"),p6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),_6r=o("from_pretrained()"),u6r=o(" to load the model weights."),b6r=l(),F(mE.$$.fragment),v6r=l(),$r=a("div"),F(y9.$$.fragment),F6r=l(),zFe=a("p"),T6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),M6r=l(),sn=a("p"),E6r=o("The model class to instantiate is selected based on the "),QFe=a("code"),C6r=o("model_type"),w6r=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),A6r=o("pretrained_model_name_or_path"),L6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),y6r=o("pretrained_model_name_or_path"),x6r=o(":"),$6r=l(),Me=a("ul"),gE=a("li"),UFe=a("strong"),k6r=o("bert"),S6r=o(" \u2014 "),CU=a("a"),R6r=o("TFBertLMHeadModel"),P6r=o(" (BERT model)"),B6r=l(),hE=a("li"),JFe=a("strong"),I6r=o("camembert"),N6r=o(" \u2014 "),wU=a("a"),q6r=o("TFCamembertForCausalLM"),j6r=o(" (CamemBERT model)"),D6r=l(),pE=a("li"),YFe=a("strong"),G6r=o("ctrl"),O6r=o(" \u2014 "),AU=a("a"),V6r=o("TFCTRLLMHeadModel"),X6r=o(" (CTRL model)"),z6r=l(),_E=a("li"),ZFe=a("strong"),Q6r=o("gpt2"),W6r=o(" \u2014 "),LU=a("a"),H6r=o("TFGPT2LMHeadModel"),U6r=o(" (OpenAI GPT-2 model)"),J6r=l(),uE=a("li"),KFe=a("strong"),Y6r=o("gptj"),Z6r=o(" \u2014 "),yU=a("a"),K6r=o("TFGPTJForCausalLM"),eTr=o(" (GPT-J model)"),oTr=l(),bE=a("li"),e6e=a("strong"),rTr=o("openai-gpt"),tTr=o(" \u2014 "),xU=a("a"),aTr=o("TFOpenAIGPTLMHeadModel"),nTr=o(" (OpenAI GPT model)"),sTr=l(),vE=a("li"),o6e=a("strong"),lTr=o("opt"),iTr=o(" \u2014 "),$U=a("a"),dTr=o("TFOPTForCausalLM"),cTr=o(" (OPT model)"),fTr=l(),FE=a("li"),r6e=a("strong"),mTr=o("rembert"),gTr=o(" \u2014 "),kU=a("a"),hTr=o("TFRemBertForCausalLM"),pTr=o(" (RemBERT model)"),_Tr=l(),TE=a("li"),t6e=a("strong"),uTr=o("roberta"),bTr=o(" \u2014 "),SU=a("a"),vTr=o("TFRobertaForCausalLM"),FTr=o(" (RoBERTa model)"),TTr=l(),ME=a("li"),a6e=a("strong"),MTr=o("roformer"),ETr=o(" \u2014 "),RU=a("a"),CTr=o("TFRoFormerForCausalLM"),wTr=o(" (RoFormer model)"),ATr=l(),EE=a("li"),n6e=a("strong"),LTr=o("transfo-xl"),yTr=o(" \u2014 "),PU=a("a"),xTr=o("TFTransfoXLLMHeadModel"),$Tr=o(" (Transformer-XL model)"),kTr=l(),CE=a("li"),s6e=a("strong"),STr=o("xlm"),RTr=o(" \u2014 "),BU=a("a"),PTr=o("TFXLMWithLMHeadModel"),BTr=o(" (XLM model)"),ITr=l(),wE=a("li"),l6e=a("strong"),NTr=o("xlnet"),qTr=o(" \u2014 "),IU=a("a"),jTr=o("TFXLNetLMHeadModel"),DTr=o(" (XLNet model)"),GTr=l(),F(AE.$$.fragment),WOe=l(),ic=a("h2"),LE=a("a"),i6e=a("span"),F(x9.$$.fragment),OTr=l(),d6e=a("span"),VTr=o("TFAutoModelForImageClassification"),HOe=l(),tr=a("div"),F($9.$$.fragment),XTr=l(),dc=a("p"),zTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NU=a("a"),QTr=o("from_pretrained()"),WTr=o(" class method or the "),qU=a("a"),HTr=o("from_config()"),UTr=o(` class
method.`),JTr=l(),k9=a("p"),YTr=o("This class cannot be instantiated directly using "),c6e=a("code"),ZTr=o("__init__()"),KTr=o(" (throws an error)."),eMr=l(),Rt=a("div"),F(S9.$$.fragment),oMr=l(),f6e=a("p"),rMr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tMr=l(),cc=a("p"),aMr=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),nMr=o("not"),sMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),lMr=o("from_pretrained()"),iMr=o(" to load the model weights."),dMr=l(),F(yE.$$.fragment),cMr=l(),kr=a("div"),F(R9.$$.fragment),fMr=l(),g6e=a("p"),mMr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gMr=l(),ln=a("p"),hMr=o("The model class to instantiate is selected based on the "),h6e=a("code"),pMr=o("model_type"),_Mr=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),uMr=o("pretrained_model_name_or_path"),bMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),vMr=o("pretrained_model_name_or_path"),FMr=o(":"),TMr=l(),dn=a("ul"),xE=a("li"),u6e=a("strong"),MMr=o("convnext"),EMr=o(" \u2014 "),DU=a("a"),CMr=o("TFConvNextForImageClassification"),wMr=o(" (ConvNeXT model)"),AMr=l(),$E=a("li"),b6e=a("strong"),LMr=o("data2vec-vision"),yMr=o(" \u2014 "),GU=a("a"),xMr=o("TFData2VecVisionForImageClassification"),$Mr=o(" (Data2VecVision model)"),kMr=l(),kE=a("li"),v6e=a("strong"),SMr=o("swin"),RMr=o(" \u2014 "),OU=a("a"),PMr=o("TFSwinForImageClassification"),BMr=o(" (Swin Transformer model)"),IMr=l(),SE=a("li"),F6e=a("strong"),NMr=o("vit"),qMr=o(" \u2014 "),VU=a("a"),jMr=o("TFViTForImageClassification"),DMr=o(" (ViT model)"),GMr=l(),F(RE.$$.fragment),UOe=l(),fc=a("h2"),PE=a("a"),T6e=a("span"),F(P9.$$.fragment),OMr=l(),M6e=a("span"),VMr=o("TFAutoModelForMaskedLM"),JOe=l(),ar=a("div"),F(B9.$$.fragment),XMr=l(),mc=a("p"),zMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XU=a("a"),QMr=o("from_pretrained()"),WMr=o(" class method or the "),zU=a("a"),HMr=o("from_config()"),UMr=o(` class
method.`),JMr=l(),I9=a("p"),YMr=o("This class cannot be instantiated directly using "),E6e=a("code"),ZMr=o("__init__()"),KMr=o(" (throws an error)."),eEr=l(),Pt=a("div"),F(N9.$$.fragment),oEr=l(),C6e=a("p"),rEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tEr=l(),gc=a("p"),aEr=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),nEr=o("not"),sEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),lEr=o("from_pretrained()"),iEr=o(" to load the model weights."),dEr=l(),F(BE.$$.fragment),cEr=l(),Sr=a("div"),F(q9.$$.fragment),fEr=l(),A6e=a("p"),mEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gEr=l(),cn=a("p"),hEr=o("The model class to instantiate is selected based on the "),L6e=a("code"),pEr=o("model_type"),_Er=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),uEr=o("pretrained_model_name_or_path"),bEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=a("code"),vEr=o("pretrained_model_name_or_path"),FEr=o(":"),TEr=l(),ie=a("ul"),IE=a("li"),$6e=a("strong"),MEr=o("albert"),EEr=o(" \u2014 "),WU=a("a"),CEr=o("TFAlbertForMaskedLM"),wEr=o(" (ALBERT model)"),AEr=l(),NE=a("li"),k6e=a("strong"),LEr=o("bert"),yEr=o(" \u2014 "),HU=a("a"),xEr=o("TFBertForMaskedLM"),$Er=o(" (BERT model)"),kEr=l(),qE=a("li"),S6e=a("strong"),SEr=o("camembert"),REr=o(" \u2014 "),UU=a("a"),PEr=o("TFCamembertForMaskedLM"),BEr=o(" (CamemBERT model)"),IEr=l(),jE=a("li"),R6e=a("strong"),NEr=o("convbert"),qEr=o(" \u2014 "),JU=a("a"),jEr=o("TFConvBertForMaskedLM"),DEr=o(" (ConvBERT model)"),GEr=l(),DE=a("li"),P6e=a("strong"),OEr=o("deberta"),VEr=o(" \u2014 "),YU=a("a"),XEr=o("TFDebertaForMaskedLM"),zEr=o(" (DeBERTa model)"),QEr=l(),GE=a("li"),B6e=a("strong"),WEr=o("deberta-v2"),HEr=o(" \u2014 "),ZU=a("a"),UEr=o("TFDebertaV2ForMaskedLM"),JEr=o(" (DeBERTa-v2 model)"),YEr=l(),OE=a("li"),I6e=a("strong"),ZEr=o("distilbert"),KEr=o(" \u2014 "),KU=a("a"),e4r=o("TFDistilBertForMaskedLM"),o4r=o(" (DistilBERT model)"),r4r=l(),VE=a("li"),N6e=a("strong"),t4r=o("electra"),a4r=o(" \u2014 "),eJ=a("a"),n4r=o("TFElectraForMaskedLM"),s4r=o(" (ELECTRA model)"),l4r=l(),XE=a("li"),q6e=a("strong"),i4r=o("flaubert"),d4r=o(" \u2014 "),oJ=a("a"),c4r=o("TFFlaubertWithLMHeadModel"),f4r=o(" (FlauBERT model)"),m4r=l(),zE=a("li"),j6e=a("strong"),g4r=o("funnel"),h4r=o(" \u2014 "),rJ=a("a"),p4r=o("TFFunnelForMaskedLM"),_4r=o(" (Funnel Transformer model)"),u4r=l(),QE=a("li"),D6e=a("strong"),b4r=o("layoutlm"),v4r=o(" \u2014 "),tJ=a("a"),F4r=o("TFLayoutLMForMaskedLM"),T4r=o(" (LayoutLM model)"),M4r=l(),WE=a("li"),G6e=a("strong"),E4r=o("longformer"),C4r=o(" \u2014 "),aJ=a("a"),w4r=o("TFLongformerForMaskedLM"),A4r=o(" (Longformer model)"),L4r=l(),HE=a("li"),O6e=a("strong"),y4r=o("mobilebert"),x4r=o(" \u2014 "),nJ=a("a"),$4r=o("TFMobileBertForMaskedLM"),k4r=o(" (MobileBERT model)"),S4r=l(),UE=a("li"),V6e=a("strong"),R4r=o("mpnet"),P4r=o(" \u2014 "),sJ=a("a"),B4r=o("TFMPNetForMaskedLM"),I4r=o(" (MPNet model)"),N4r=l(),JE=a("li"),X6e=a("strong"),q4r=o("rembert"),j4r=o(" \u2014 "),lJ=a("a"),D4r=o("TFRemBertForMaskedLM"),G4r=o(" (RemBERT model)"),O4r=l(),YE=a("li"),z6e=a("strong"),V4r=o("roberta"),X4r=o(" \u2014 "),iJ=a("a"),z4r=o("TFRobertaForMaskedLM"),Q4r=o(" (RoBERTa model)"),W4r=l(),ZE=a("li"),Q6e=a("strong"),H4r=o("roformer"),U4r=o(" \u2014 "),dJ=a("a"),J4r=o("TFRoFormerForMaskedLM"),Y4r=o(" (RoFormer model)"),Z4r=l(),KE=a("li"),W6e=a("strong"),K4r=o("tapas"),eCr=o(" \u2014 "),cJ=a("a"),oCr=o("TFTapasForMaskedLM"),rCr=o(" (TAPAS model)"),tCr=l(),e4=a("li"),H6e=a("strong"),aCr=o("xlm"),nCr=o(" \u2014 "),fJ=a("a"),sCr=o("TFXLMWithLMHeadModel"),lCr=o(" (XLM model)"),iCr=l(),o4=a("li"),U6e=a("strong"),dCr=o("xlm-roberta"),cCr=o(" \u2014 "),mJ=a("a"),fCr=o("TFXLMRobertaForMaskedLM"),mCr=o(" (XLM-RoBERTa model)"),gCr=l(),F(r4.$$.fragment),YOe=l(),hc=a("h2"),t4=a("a"),J6e=a("span"),F(j9.$$.fragment),hCr=l(),Y6e=a("span"),pCr=o("TFAutoModelForSeq2SeqLM"),ZOe=l(),nr=a("div"),F(D9.$$.fragment),_Cr=l(),pc=a("p"),uCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gJ=a("a"),bCr=o("from_pretrained()"),vCr=o(" class method or the "),hJ=a("a"),FCr=o("from_config()"),TCr=o(` class
method.`),MCr=l(),G9=a("p"),ECr=o("This class cannot be instantiated directly using "),Z6e=a("code"),CCr=o("__init__()"),wCr=o(" (throws an error)."),ACr=l(),Bt=a("div"),F(O9.$$.fragment),LCr=l(),K6e=a("p"),yCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xCr=l(),_c=a("p"),$Cr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),kCr=o("not"),SCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),RCr=o("from_pretrained()"),PCr=o(" to load the model weights."),BCr=l(),F(a4.$$.fragment),ICr=l(),Rr=a("div"),F(V9.$$.fragment),NCr=l(),oTe=a("p"),qCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jCr=l(),fn=a("p"),DCr=o("The model class to instantiate is selected based on the "),rTe=a("code"),GCr=o("model_type"),OCr=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),VCr=o("pretrained_model_name_or_path"),XCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),zCr=o("pretrained_model_name_or_path"),QCr=o(":"),WCr=l(),ye=a("ul"),n4=a("li"),nTe=a("strong"),HCr=o("bart"),UCr=o(" \u2014 "),_J=a("a"),JCr=o("TFBartForConditionalGeneration"),YCr=o(" (BART model)"),ZCr=l(),s4=a("li"),sTe=a("strong"),KCr=o("blenderbot"),e5r=o(" \u2014 "),uJ=a("a"),o5r=o("TFBlenderbotForConditionalGeneration"),r5r=o(" (Blenderbot model)"),t5r=l(),l4=a("li"),lTe=a("strong"),a5r=o("blenderbot-small"),n5r=o(" \u2014 "),bJ=a("a"),s5r=o("TFBlenderbotSmallForConditionalGeneration"),l5r=o(" (BlenderbotSmall model)"),i5r=l(),i4=a("li"),iTe=a("strong"),d5r=o("encoder-decoder"),c5r=o(" \u2014 "),vJ=a("a"),f5r=o("TFEncoderDecoderModel"),m5r=o(" (Encoder decoder model)"),g5r=l(),d4=a("li"),dTe=a("strong"),h5r=o("led"),p5r=o(" \u2014 "),FJ=a("a"),_5r=o("TFLEDForConditionalGeneration"),u5r=o(" (LED model)"),b5r=l(),c4=a("li"),cTe=a("strong"),v5r=o("marian"),F5r=o(" \u2014 "),TJ=a("a"),T5r=o("TFMarianMTModel"),M5r=o(" (Marian model)"),E5r=l(),f4=a("li"),fTe=a("strong"),C5r=o("mbart"),w5r=o(" \u2014 "),MJ=a("a"),A5r=o("TFMBartForConditionalGeneration"),L5r=o(" (mBART model)"),y5r=l(),m4=a("li"),mTe=a("strong"),x5r=o("mt5"),$5r=o(" \u2014 "),EJ=a("a"),k5r=o("TFMT5ForConditionalGeneration"),S5r=o(" (MT5 model)"),R5r=l(),g4=a("li"),gTe=a("strong"),P5r=o("pegasus"),B5r=o(" \u2014 "),CJ=a("a"),I5r=o("TFPegasusForConditionalGeneration"),N5r=o(" (Pegasus model)"),q5r=l(),h4=a("li"),hTe=a("strong"),j5r=o("t5"),D5r=o(" \u2014 "),wJ=a("a"),G5r=o("TFT5ForConditionalGeneration"),O5r=o(" (T5 model)"),V5r=l(),F(p4.$$.fragment),KOe=l(),uc=a("h2"),_4=a("a"),pTe=a("span"),F(X9.$$.fragment),X5r=l(),_Te=a("span"),z5r=o("TFAutoModelForSequenceClassification"),eVe=l(),sr=a("div"),F(z9.$$.fragment),Q5r=l(),bc=a("p"),W5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AJ=a("a"),H5r=o("from_pretrained()"),U5r=o(" class method or the "),LJ=a("a"),J5r=o("from_config()"),Y5r=o(` class
method.`),Z5r=l(),Q9=a("p"),K5r=o("This class cannot be instantiated directly using "),uTe=a("code"),e3r=o("__init__()"),o3r=o(" (throws an error)."),r3r=l(),It=a("div"),F(W9.$$.fragment),t3r=l(),bTe=a("p"),a3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),n3r=l(),vc=a("p"),s3r=o(`Note:
Loading a model from its configuration file does `),vTe=a("strong"),l3r=o("not"),i3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),d3r=o("from_pretrained()"),c3r=o(" to load the model weights."),f3r=l(),F(u4.$$.fragment),m3r=l(),Pr=a("div"),F(H9.$$.fragment),g3r=l(),FTe=a("p"),h3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),p3r=l(),mn=a("p"),_3r=o("The model class to instantiate is selected based on the "),TTe=a("code"),u3r=o("model_type"),b3r=o(` property of the config object (either
passed as an argument or loaded from `),MTe=a("code"),v3r=o("pretrained_model_name_or_path"),F3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=a("code"),T3r=o("pretrained_model_name_or_path"),M3r=o(":"),E3r=l(),te=a("ul"),b4=a("li"),CTe=a("strong"),C3r=o("albert"),w3r=o(" \u2014 "),xJ=a("a"),A3r=o("TFAlbertForSequenceClassification"),L3r=o(" (ALBERT model)"),y3r=l(),v4=a("li"),wTe=a("strong"),x3r=o("bert"),$3r=o(" \u2014 "),$J=a("a"),k3r=o("TFBertForSequenceClassification"),S3r=o(" (BERT model)"),R3r=l(),F4=a("li"),ATe=a("strong"),P3r=o("camembert"),B3r=o(" \u2014 "),kJ=a("a"),I3r=o("TFCamembertForSequenceClassification"),N3r=o(" (CamemBERT model)"),q3r=l(),T4=a("li"),LTe=a("strong"),j3r=o("convbert"),D3r=o(" \u2014 "),SJ=a("a"),G3r=o("TFConvBertForSequenceClassification"),O3r=o(" (ConvBERT model)"),V3r=l(),M4=a("li"),yTe=a("strong"),X3r=o("ctrl"),z3r=o(" \u2014 "),RJ=a("a"),Q3r=o("TFCTRLForSequenceClassification"),W3r=o(" (CTRL model)"),H3r=l(),E4=a("li"),xTe=a("strong"),U3r=o("deberta"),J3r=o(" \u2014 "),PJ=a("a"),Y3r=o("TFDebertaForSequenceClassification"),Z3r=o(" (DeBERTa model)"),K3r=l(),C4=a("li"),$Te=a("strong"),e0r=o("deberta-v2"),o0r=o(" \u2014 "),BJ=a("a"),r0r=o("TFDebertaV2ForSequenceClassification"),t0r=o(" (DeBERTa-v2 model)"),a0r=l(),w4=a("li"),kTe=a("strong"),n0r=o("distilbert"),s0r=o(" \u2014 "),IJ=a("a"),l0r=o("TFDistilBertForSequenceClassification"),i0r=o(" (DistilBERT model)"),d0r=l(),A4=a("li"),STe=a("strong"),c0r=o("electra"),f0r=o(" \u2014 "),NJ=a("a"),m0r=o("TFElectraForSequenceClassification"),g0r=o(" (ELECTRA model)"),h0r=l(),L4=a("li"),RTe=a("strong"),p0r=o("flaubert"),_0r=o(" \u2014 "),qJ=a("a"),u0r=o("TFFlaubertForSequenceClassification"),b0r=o(" (FlauBERT model)"),v0r=l(),y4=a("li"),PTe=a("strong"),F0r=o("funnel"),T0r=o(" \u2014 "),jJ=a("a"),M0r=o("TFFunnelForSequenceClassification"),E0r=o(" (Funnel Transformer model)"),C0r=l(),x4=a("li"),BTe=a("strong"),w0r=o("gpt2"),A0r=o(" \u2014 "),DJ=a("a"),L0r=o("TFGPT2ForSequenceClassification"),y0r=o(" (OpenAI GPT-2 model)"),x0r=l(),$4=a("li"),ITe=a("strong"),$0r=o("gptj"),k0r=o(" \u2014 "),GJ=a("a"),S0r=o("TFGPTJForSequenceClassification"),R0r=o(" (GPT-J model)"),P0r=l(),k4=a("li"),NTe=a("strong"),B0r=o("layoutlm"),I0r=o(" \u2014 "),OJ=a("a"),N0r=o("TFLayoutLMForSequenceClassification"),q0r=o(" (LayoutLM model)"),j0r=l(),S4=a("li"),qTe=a("strong"),D0r=o("longformer"),G0r=o(" \u2014 "),VJ=a("a"),O0r=o("TFLongformerForSequenceClassification"),V0r=o(" (Longformer model)"),X0r=l(),R4=a("li"),jTe=a("strong"),z0r=o("mobilebert"),Q0r=o(" \u2014 "),XJ=a("a"),W0r=o("TFMobileBertForSequenceClassification"),H0r=o(" (MobileBERT model)"),U0r=l(),P4=a("li"),DTe=a("strong"),J0r=o("mpnet"),Y0r=o(" \u2014 "),zJ=a("a"),Z0r=o("TFMPNetForSequenceClassification"),K0r=o(" (MPNet model)"),ewr=l(),B4=a("li"),GTe=a("strong"),owr=o("openai-gpt"),rwr=o(" \u2014 "),QJ=a("a"),twr=o("TFOpenAIGPTForSequenceClassification"),awr=o(" (OpenAI GPT model)"),nwr=l(),I4=a("li"),OTe=a("strong"),swr=o("rembert"),lwr=o(" \u2014 "),WJ=a("a"),iwr=o("TFRemBertForSequenceClassification"),dwr=o(" (RemBERT model)"),cwr=l(),N4=a("li"),VTe=a("strong"),fwr=o("roberta"),mwr=o(" \u2014 "),HJ=a("a"),gwr=o("TFRobertaForSequenceClassification"),hwr=o(" (RoBERTa model)"),pwr=l(),q4=a("li"),XTe=a("strong"),_wr=o("roformer"),uwr=o(" \u2014 "),UJ=a("a"),bwr=o("TFRoFormerForSequenceClassification"),vwr=o(" (RoFormer model)"),Fwr=l(),j4=a("li"),zTe=a("strong"),Twr=o("tapas"),Mwr=o(" \u2014 "),JJ=a("a"),Ewr=o("TFTapasForSequenceClassification"),Cwr=o(" (TAPAS model)"),wwr=l(),D4=a("li"),QTe=a("strong"),Awr=o("transfo-xl"),Lwr=o(" \u2014 "),YJ=a("a"),ywr=o("TFTransfoXLForSequenceClassification"),xwr=o(" (Transformer-XL model)"),$wr=l(),G4=a("li"),WTe=a("strong"),kwr=o("xlm"),Swr=o(" \u2014 "),ZJ=a("a"),Rwr=o("TFXLMForSequenceClassification"),Pwr=o(" (XLM model)"),Bwr=l(),O4=a("li"),HTe=a("strong"),Iwr=o("xlm-roberta"),Nwr=o(" \u2014 "),KJ=a("a"),qwr=o("TFXLMRobertaForSequenceClassification"),jwr=o(" (XLM-RoBERTa model)"),Dwr=l(),V4=a("li"),UTe=a("strong"),Gwr=o("xlnet"),Owr=o(" \u2014 "),eY=a("a"),Vwr=o("TFXLNetForSequenceClassification"),Xwr=o(" (XLNet model)"),zwr=l(),F(X4.$$.fragment),oVe=l(),Fc=a("h2"),z4=a("a"),JTe=a("span"),F(U9.$$.fragment),Qwr=l(),YTe=a("span"),Wwr=o("TFAutoModelForMultipleChoice"),rVe=l(),lr=a("div"),F(J9.$$.fragment),Hwr=l(),Tc=a("p"),Uwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oY=a("a"),Jwr=o("from_pretrained()"),Ywr=o(" class method or the "),rY=a("a"),Zwr=o("from_config()"),Kwr=o(` class
method.`),eAr=l(),Y9=a("p"),oAr=o("This class cannot be instantiated directly using "),ZTe=a("code"),rAr=o("__init__()"),tAr=o(" (throws an error)."),aAr=l(),Nt=a("div"),F(Z9.$$.fragment),nAr=l(),KTe=a("p"),sAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lAr=l(),Mc=a("p"),iAr=o(`Note:
Loading a model from its configuration file does `),eMe=a("strong"),dAr=o("not"),cAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),fAr=o("from_pretrained()"),mAr=o(" to load the model weights."),gAr=l(),F(Q4.$$.fragment),hAr=l(),Br=a("div"),F(K9.$$.fragment),pAr=l(),oMe=a("p"),_Ar=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),uAr=l(),gn=a("p"),bAr=o("The model class to instantiate is selected based on the "),rMe=a("code"),vAr=o("model_type"),FAr=o(` property of the config object (either
passed as an argument or loaded from `),tMe=a("code"),TAr=o("pretrained_model_name_or_path"),MAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=a("code"),EAr=o("pretrained_model_name_or_path"),CAr=o(":"),wAr=l(),_e=a("ul"),W4=a("li"),nMe=a("strong"),AAr=o("albert"),LAr=o(" \u2014 "),aY=a("a"),yAr=o("TFAlbertForMultipleChoice"),xAr=o(" (ALBERT model)"),$Ar=l(),H4=a("li"),sMe=a("strong"),kAr=o("bert"),SAr=o(" \u2014 "),nY=a("a"),RAr=o("TFBertForMultipleChoice"),PAr=o(" (BERT model)"),BAr=l(),U4=a("li"),lMe=a("strong"),IAr=o("camembert"),NAr=o(" \u2014 "),sY=a("a"),qAr=o("TFCamembertForMultipleChoice"),jAr=o(" (CamemBERT model)"),DAr=l(),J4=a("li"),iMe=a("strong"),GAr=o("convbert"),OAr=o(" \u2014 "),lY=a("a"),VAr=o("TFConvBertForMultipleChoice"),XAr=o(" (ConvBERT model)"),zAr=l(),Y4=a("li"),dMe=a("strong"),QAr=o("distilbert"),WAr=o(" \u2014 "),iY=a("a"),HAr=o("TFDistilBertForMultipleChoice"),UAr=o(" (DistilBERT model)"),JAr=l(),Z4=a("li"),cMe=a("strong"),YAr=o("electra"),ZAr=o(" \u2014 "),dY=a("a"),KAr=o("TFElectraForMultipleChoice"),eLr=o(" (ELECTRA model)"),oLr=l(),K4=a("li"),fMe=a("strong"),rLr=o("flaubert"),tLr=o(" \u2014 "),cY=a("a"),aLr=o("TFFlaubertForMultipleChoice"),nLr=o(" (FlauBERT model)"),sLr=l(),eC=a("li"),mMe=a("strong"),lLr=o("funnel"),iLr=o(" \u2014 "),fY=a("a"),dLr=o("TFFunnelForMultipleChoice"),cLr=o(" (Funnel Transformer model)"),fLr=l(),oC=a("li"),gMe=a("strong"),mLr=o("longformer"),gLr=o(" \u2014 "),mY=a("a"),hLr=o("TFLongformerForMultipleChoice"),pLr=o(" (Longformer model)"),_Lr=l(),rC=a("li"),hMe=a("strong"),uLr=o("mobilebert"),bLr=o(" \u2014 "),gY=a("a"),vLr=o("TFMobileBertForMultipleChoice"),FLr=o(" (MobileBERT model)"),TLr=l(),tC=a("li"),pMe=a("strong"),MLr=o("mpnet"),ELr=o(" \u2014 "),hY=a("a"),CLr=o("TFMPNetForMultipleChoice"),wLr=o(" (MPNet model)"),ALr=l(),aC=a("li"),_Me=a("strong"),LLr=o("rembert"),yLr=o(" \u2014 "),pY=a("a"),xLr=o("TFRemBertForMultipleChoice"),$Lr=o(" (RemBERT model)"),kLr=l(),nC=a("li"),uMe=a("strong"),SLr=o("roberta"),RLr=o(" \u2014 "),_Y=a("a"),PLr=o("TFRobertaForMultipleChoice"),BLr=o(" (RoBERTa model)"),ILr=l(),sC=a("li"),bMe=a("strong"),NLr=o("roformer"),qLr=o(" \u2014 "),uY=a("a"),jLr=o("TFRoFormerForMultipleChoice"),DLr=o(" (RoFormer model)"),GLr=l(),lC=a("li"),vMe=a("strong"),OLr=o("xlm"),VLr=o(" \u2014 "),bY=a("a"),XLr=o("TFXLMForMultipleChoice"),zLr=o(" (XLM model)"),QLr=l(),iC=a("li"),FMe=a("strong"),WLr=o("xlm-roberta"),HLr=o(" \u2014 "),vY=a("a"),ULr=o("TFXLMRobertaForMultipleChoice"),JLr=o(" (XLM-RoBERTa model)"),YLr=l(),dC=a("li"),TMe=a("strong"),ZLr=o("xlnet"),KLr=o(" \u2014 "),FY=a("a"),eyr=o("TFXLNetForMultipleChoice"),oyr=o(" (XLNet model)"),ryr=l(),F(cC.$$.fragment),tVe=l(),Ec=a("h2"),fC=a("a"),MMe=a("span"),F(ex.$$.fragment),tyr=l(),EMe=a("span"),ayr=o("TFAutoModelForNextSentencePrediction"),aVe=l(),ir=a("div"),F(ox.$$.fragment),nyr=l(),Cc=a("p"),syr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TY=a("a"),lyr=o("from_pretrained()"),iyr=o(" class method or the "),MY=a("a"),dyr=o("from_config()"),cyr=o(` class
method.`),fyr=l(),rx=a("p"),myr=o("This class cannot be instantiated directly using "),CMe=a("code"),gyr=o("__init__()"),hyr=o(" (throws an error)."),pyr=l(),qt=a("div"),F(tx.$$.fragment),_yr=l(),wMe=a("p"),uyr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),byr=l(),wc=a("p"),vyr=o(`Note:
Loading a model from its configuration file does `),AMe=a("strong"),Fyr=o("not"),Tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),Myr=o("from_pretrained()"),Eyr=o(" to load the model weights."),Cyr=l(),F(mC.$$.fragment),wyr=l(),Ir=a("div"),F(ax.$$.fragment),Ayr=l(),LMe=a("p"),Lyr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yyr=l(),hn=a("p"),xyr=o("The model class to instantiate is selected based on the "),yMe=a("code"),$yr=o("model_type"),kyr=o(` property of the config object (either
passed as an argument or loaded from `),xMe=a("code"),Syr=o("pretrained_model_name_or_path"),Ryr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=a("code"),Pyr=o("pretrained_model_name_or_path"),Byr=o(":"),Iyr=l(),nx=a("ul"),gC=a("li"),kMe=a("strong"),Nyr=o("bert"),qyr=o(" \u2014 "),CY=a("a"),jyr=o("TFBertForNextSentencePrediction"),Dyr=o(" (BERT model)"),Gyr=l(),hC=a("li"),SMe=a("strong"),Oyr=o("mobilebert"),Vyr=o(" \u2014 "),wY=a("a"),Xyr=o("TFMobileBertForNextSentencePrediction"),zyr=o(" (MobileBERT model)"),Qyr=l(),F(pC.$$.fragment),nVe=l(),Ac=a("h2"),_C=a("a"),RMe=a("span"),F(sx.$$.fragment),Wyr=l(),PMe=a("span"),Hyr=o("TFAutoModelForTableQuestionAnswering"),sVe=l(),dr=a("div"),F(lx.$$.fragment),Uyr=l(),Lc=a("p"),Jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AY=a("a"),Yyr=o("from_pretrained()"),Zyr=o(" class method or the "),LY=a("a"),Kyr=o("from_config()"),e8r=o(` class
method.`),o8r=l(),ix=a("p"),r8r=o("This class cannot be instantiated directly using "),BMe=a("code"),t8r=o("__init__()"),a8r=o(" (throws an error)."),n8r=l(),jt=a("div"),F(dx.$$.fragment),s8r=l(),IMe=a("p"),l8r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),i8r=l(),yc=a("p"),d8r=o(`Note:
Loading a model from its configuration file does `),NMe=a("strong"),c8r=o("not"),f8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),m8r=o("from_pretrained()"),g8r=o(" to load the model weights."),h8r=l(),F(uC.$$.fragment),p8r=l(),Nr=a("div"),F(cx.$$.fragment),_8r=l(),qMe=a("p"),u8r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),b8r=l(),pn=a("p"),v8r=o("The model class to instantiate is selected based on the "),jMe=a("code"),F8r=o("model_type"),T8r=o(` property of the config object (either
passed as an argument or loaded from `),DMe=a("code"),M8r=o("pretrained_model_name_or_path"),E8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=a("code"),C8r=o("pretrained_model_name_or_path"),w8r=o(":"),A8r=l(),OMe=a("ul"),bC=a("li"),VMe=a("strong"),L8r=o("tapas"),y8r=o(" \u2014 "),xY=a("a"),x8r=o("TFTapasForQuestionAnswering"),$8r=o(" (TAPAS model)"),k8r=l(),F(vC.$$.fragment),lVe=l(),xc=a("h2"),FC=a("a"),XMe=a("span"),F(fx.$$.fragment),S8r=l(),zMe=a("span"),R8r=o("TFAutoModelForTokenClassification"),iVe=l(),cr=a("div"),F(mx.$$.fragment),P8r=l(),$c=a("p"),B8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$Y=a("a"),I8r=o("from_pretrained()"),N8r=o(" class method or the "),kY=a("a"),q8r=o("from_config()"),j8r=o(` class
method.`),D8r=l(),gx=a("p"),G8r=o("This class cannot be instantiated directly using "),QMe=a("code"),O8r=o("__init__()"),V8r=o(" (throws an error)."),X8r=l(),Dt=a("div"),F(hx.$$.fragment),z8r=l(),WMe=a("p"),Q8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W8r=l(),kc=a("p"),H8r=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),U8r=o("not"),J8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=a("a"),Y8r=o("from_pretrained()"),Z8r=o(" to load the model weights."),K8r=l(),F(TC.$$.fragment),e9r=l(),qr=a("div"),F(px.$$.fragment),o9r=l(),UMe=a("p"),r9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t9r=l(),_n=a("p"),a9r=o("The model class to instantiate is selected based on the "),JMe=a("code"),n9r=o("model_type"),s9r=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),l9r=o("pretrained_model_name_or_path"),i9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),d9r=o("pretrained_model_name_or_path"),c9r=o(":"),f9r=l(),de=a("ul"),MC=a("li"),KMe=a("strong"),m9r=o("albert"),g9r=o(" \u2014 "),RY=a("a"),h9r=o("TFAlbertForTokenClassification"),p9r=o(" (ALBERT model)"),_9r=l(),EC=a("li"),eEe=a("strong"),u9r=o("bert"),b9r=o(" \u2014 "),PY=a("a"),v9r=o("TFBertForTokenClassification"),F9r=o(" (BERT model)"),T9r=l(),CC=a("li"),oEe=a("strong"),M9r=o("camembert"),E9r=o(" \u2014 "),BY=a("a"),C9r=o("TFCamembertForTokenClassification"),w9r=o(" (CamemBERT model)"),A9r=l(),wC=a("li"),rEe=a("strong"),L9r=o("convbert"),y9r=o(" \u2014 "),IY=a("a"),x9r=o("TFConvBertForTokenClassification"),$9r=o(" (ConvBERT model)"),k9r=l(),AC=a("li"),tEe=a("strong"),S9r=o("deberta"),R9r=o(" \u2014 "),NY=a("a"),P9r=o("TFDebertaForTokenClassification"),B9r=o(" (DeBERTa model)"),I9r=l(),LC=a("li"),aEe=a("strong"),N9r=o("deberta-v2"),q9r=o(" \u2014 "),qY=a("a"),j9r=o("TFDebertaV2ForTokenClassification"),D9r=o(" (DeBERTa-v2 model)"),G9r=l(),yC=a("li"),nEe=a("strong"),O9r=o("distilbert"),V9r=o(" \u2014 "),jY=a("a"),X9r=o("TFDistilBertForTokenClassification"),z9r=o(" (DistilBERT model)"),Q9r=l(),xC=a("li"),sEe=a("strong"),W9r=o("electra"),H9r=o(" \u2014 "),DY=a("a"),U9r=o("TFElectraForTokenClassification"),J9r=o(" (ELECTRA model)"),Y9r=l(),$C=a("li"),lEe=a("strong"),Z9r=o("flaubert"),K9r=o(" \u2014 "),GY=a("a"),exr=o("TFFlaubertForTokenClassification"),oxr=o(" (FlauBERT model)"),rxr=l(),kC=a("li"),iEe=a("strong"),txr=o("funnel"),axr=o(" \u2014 "),OY=a("a"),nxr=o("TFFunnelForTokenClassification"),sxr=o(" (Funnel Transformer model)"),lxr=l(),SC=a("li"),dEe=a("strong"),ixr=o("layoutlm"),dxr=o(" \u2014 "),VY=a("a"),cxr=o("TFLayoutLMForTokenClassification"),fxr=o(" (LayoutLM model)"),mxr=l(),RC=a("li"),cEe=a("strong"),gxr=o("longformer"),hxr=o(" \u2014 "),XY=a("a"),pxr=o("TFLongformerForTokenClassification"),_xr=o(" (Longformer model)"),uxr=l(),PC=a("li"),fEe=a("strong"),bxr=o("mobilebert"),vxr=o(" \u2014 "),zY=a("a"),Fxr=o("TFMobileBertForTokenClassification"),Txr=o(" (MobileBERT model)"),Mxr=l(),BC=a("li"),mEe=a("strong"),Exr=o("mpnet"),Cxr=o(" \u2014 "),QY=a("a"),wxr=o("TFMPNetForTokenClassification"),Axr=o(" (MPNet model)"),Lxr=l(),IC=a("li"),gEe=a("strong"),yxr=o("rembert"),xxr=o(" \u2014 "),WY=a("a"),$xr=o("TFRemBertForTokenClassification"),kxr=o(" (RemBERT model)"),Sxr=l(),NC=a("li"),hEe=a("strong"),Rxr=o("roberta"),Pxr=o(" \u2014 "),HY=a("a"),Bxr=o("TFRobertaForTokenClassification"),Ixr=o(" (RoBERTa model)"),Nxr=l(),qC=a("li"),pEe=a("strong"),qxr=o("roformer"),jxr=o(" \u2014 "),UY=a("a"),Dxr=o("TFRoFormerForTokenClassification"),Gxr=o(" (RoFormer model)"),Oxr=l(),jC=a("li"),_Ee=a("strong"),Vxr=o("xlm"),Xxr=o(" \u2014 "),JY=a("a"),zxr=o("TFXLMForTokenClassification"),Qxr=o(" (XLM model)"),Wxr=l(),DC=a("li"),uEe=a("strong"),Hxr=o("xlm-roberta"),Uxr=o(" \u2014 "),YY=a("a"),Jxr=o("TFXLMRobertaForTokenClassification"),Yxr=o(" (XLM-RoBERTa model)"),Zxr=l(),GC=a("li"),bEe=a("strong"),Kxr=o("xlnet"),e$r=o(" \u2014 "),ZY=a("a"),o$r=o("TFXLNetForTokenClassification"),r$r=o(" (XLNet model)"),t$r=l(),F(OC.$$.fragment),dVe=l(),Sc=a("h2"),VC=a("a"),vEe=a("span"),F(_x.$$.fragment),a$r=l(),FEe=a("span"),n$r=o("TFAutoModelForQuestionAnswering"),cVe=l(),fr=a("div"),F(ux.$$.fragment),s$r=l(),Rc=a("p"),l$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KY=a("a"),i$r=o("from_pretrained()"),d$r=o(" class method or the "),eZ=a("a"),c$r=o("from_config()"),f$r=o(` class
method.`),m$r=l(),bx=a("p"),g$r=o("This class cannot be instantiated directly using "),TEe=a("code"),h$r=o("__init__()"),p$r=o(" (throws an error)."),_$r=l(),Gt=a("div"),F(vx.$$.fragment),u$r=l(),MEe=a("p"),b$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),v$r=l(),Pc=a("p"),F$r=o(`Note:
Loading a model from its configuration file does `),EEe=a("strong"),T$r=o("not"),M$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=a("a"),E$r=o("from_pretrained()"),C$r=o(" to load the model weights."),w$r=l(),F(XC.$$.fragment),A$r=l(),jr=a("div"),F(Fx.$$.fragment),L$r=l(),CEe=a("p"),y$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),x$r=l(),un=a("p"),$$r=o("The model class to instantiate is selected based on the "),wEe=a("code"),k$r=o("model_type"),S$r=o(` property of the config object (either
passed as an argument or loaded from `),AEe=a("code"),R$r=o("pretrained_model_name_or_path"),P$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=a("code"),B$r=o("pretrained_model_name_or_path"),I$r=o(":"),N$r=l(),ce=a("ul"),zC=a("li"),yEe=a("strong"),q$r=o("albert"),j$r=o(" \u2014 "),rZ=a("a"),D$r=o("TFAlbertForQuestionAnswering"),G$r=o(" (ALBERT model)"),O$r=l(),QC=a("li"),xEe=a("strong"),V$r=o("bert"),X$r=o(" \u2014 "),tZ=a("a"),z$r=o("TFBertForQuestionAnswering"),Q$r=o(" (BERT model)"),W$r=l(),WC=a("li"),$Ee=a("strong"),H$r=o("camembert"),U$r=o(" \u2014 "),aZ=a("a"),J$r=o("TFCamembertForQuestionAnswering"),Y$r=o(" (CamemBERT model)"),Z$r=l(),HC=a("li"),kEe=a("strong"),K$r=o("convbert"),ekr=o(" \u2014 "),nZ=a("a"),okr=o("TFConvBertForQuestionAnswering"),rkr=o(" (ConvBERT model)"),tkr=l(),UC=a("li"),SEe=a("strong"),akr=o("deberta"),nkr=o(" \u2014 "),sZ=a("a"),skr=o("TFDebertaForQuestionAnswering"),lkr=o(" (DeBERTa model)"),ikr=l(),JC=a("li"),REe=a("strong"),dkr=o("deberta-v2"),ckr=o(" \u2014 "),lZ=a("a"),fkr=o("TFDebertaV2ForQuestionAnswering"),mkr=o(" (DeBERTa-v2 model)"),gkr=l(),YC=a("li"),PEe=a("strong"),hkr=o("distilbert"),pkr=o(" \u2014 "),iZ=a("a"),_kr=o("TFDistilBertForQuestionAnswering"),ukr=o(" (DistilBERT model)"),bkr=l(),ZC=a("li"),BEe=a("strong"),vkr=o("electra"),Fkr=o(" \u2014 "),dZ=a("a"),Tkr=o("TFElectraForQuestionAnswering"),Mkr=o(" (ELECTRA model)"),Ekr=l(),KC=a("li"),IEe=a("strong"),Ckr=o("flaubert"),wkr=o(" \u2014 "),cZ=a("a"),Akr=o("TFFlaubertForQuestionAnsweringSimple"),Lkr=o(" (FlauBERT model)"),ykr=l(),e5=a("li"),NEe=a("strong"),xkr=o("funnel"),$kr=o(" \u2014 "),fZ=a("a"),kkr=o("TFFunnelForQuestionAnswering"),Skr=o(" (Funnel Transformer model)"),Rkr=l(),o5=a("li"),qEe=a("strong"),Pkr=o("gptj"),Bkr=o(" \u2014 "),mZ=a("a"),Ikr=o("TFGPTJForQuestionAnswering"),Nkr=o(" (GPT-J model)"),qkr=l(),r5=a("li"),jEe=a("strong"),jkr=o("longformer"),Dkr=o(" \u2014 "),gZ=a("a"),Gkr=o("TFLongformerForQuestionAnswering"),Okr=o(" (Longformer model)"),Vkr=l(),t5=a("li"),DEe=a("strong"),Xkr=o("mobilebert"),zkr=o(" \u2014 "),hZ=a("a"),Qkr=o("TFMobileBertForQuestionAnswering"),Wkr=o(" (MobileBERT model)"),Hkr=l(),a5=a("li"),GEe=a("strong"),Ukr=o("mpnet"),Jkr=o(" \u2014 "),pZ=a("a"),Ykr=o("TFMPNetForQuestionAnswering"),Zkr=o(" (MPNet model)"),Kkr=l(),n5=a("li"),OEe=a("strong"),eSr=o("rembert"),oSr=o(" \u2014 "),_Z=a("a"),rSr=o("TFRemBertForQuestionAnswering"),tSr=o(" (RemBERT model)"),aSr=l(),s5=a("li"),VEe=a("strong"),nSr=o("roberta"),sSr=o(" \u2014 "),uZ=a("a"),lSr=o("TFRobertaForQuestionAnswering"),iSr=o(" (RoBERTa model)"),dSr=l(),l5=a("li"),XEe=a("strong"),cSr=o("roformer"),fSr=o(" \u2014 "),bZ=a("a"),mSr=o("TFRoFormerForQuestionAnswering"),gSr=o(" (RoFormer model)"),hSr=l(),i5=a("li"),zEe=a("strong"),pSr=o("xlm"),_Sr=o(" \u2014 "),vZ=a("a"),uSr=o("TFXLMForQuestionAnsweringSimple"),bSr=o(" (XLM model)"),vSr=l(),d5=a("li"),QEe=a("strong"),FSr=o("xlm-roberta"),TSr=o(" \u2014 "),FZ=a("a"),MSr=o("TFXLMRobertaForQuestionAnswering"),ESr=o(" (XLM-RoBERTa model)"),CSr=l(),c5=a("li"),WEe=a("strong"),wSr=o("xlnet"),ASr=o(" \u2014 "),TZ=a("a"),LSr=o("TFXLNetForQuestionAnsweringSimple"),ySr=o(" (XLNet model)"),xSr=l(),F(f5.$$.fragment),fVe=l(),Bc=a("h2"),m5=a("a"),HEe=a("span"),F(Tx.$$.fragment),$Sr=l(),UEe=a("span"),kSr=o("TFAutoModelForVision2Seq"),mVe=l(),mr=a("div"),F(Mx.$$.fragment),SSr=l(),Ic=a("p"),RSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MZ=a("a"),PSr=o("from_pretrained()"),BSr=o(" class method or the "),EZ=a("a"),ISr=o("from_config()"),NSr=o(` class
method.`),qSr=l(),Ex=a("p"),jSr=o("This class cannot be instantiated directly using "),JEe=a("code"),DSr=o("__init__()"),GSr=o(" (throws an error)."),OSr=l(),Ot=a("div"),F(Cx.$$.fragment),VSr=l(),YEe=a("p"),XSr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zSr=l(),Nc=a("p"),QSr=o(`Note:
Loading a model from its configuration file does `),ZEe=a("strong"),WSr=o("not"),HSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=a("a"),USr=o("from_pretrained()"),JSr=o(" to load the model weights."),YSr=l(),F(g5.$$.fragment),ZSr=l(),Dr=a("div"),F(wx.$$.fragment),KSr=l(),KEe=a("p"),eRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oRr=l(),bn=a("p"),rRr=o("The model class to instantiate is selected based on the "),e4e=a("code"),tRr=o("model_type"),aRr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),nRr=o("pretrained_model_name_or_path"),sRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(":"),dRr=l(),t4e=a("ul"),h5=a("li"),a4e=a("strong"),cRr=o("vision-encoder-decoder"),fRr=o(" \u2014 "),wZ=a("a"),mRr=o("TFVisionEncoderDecoderModel"),gRr=o(" (Vision Encoder decoder model)"),hRr=l(),F(p5.$$.fragment),gVe=l(),qc=a("h2"),_5=a("a"),n4e=a("span"),F(Ax.$$.fragment),pRr=l(),s4e=a("span"),_Rr=o("TFAutoModelForSpeechSeq2Seq"),hVe=l(),gr=a("div"),F(Lx.$$.fragment),uRr=l(),jc=a("p"),bRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AZ=a("a"),vRr=o("from_pretrained()"),FRr=o(" class method or the "),LZ=a("a"),TRr=o("from_config()"),MRr=o(` class
method.`),ERr=l(),yx=a("p"),CRr=o("This class cannot be instantiated directly using "),l4e=a("code"),wRr=o("__init__()"),ARr=o(" (throws an error)."),LRr=l(),Vt=a("div"),F(xx.$$.fragment),yRr=l(),i4e=a("p"),xRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Rr=l(),Dc=a("p"),kRr=o(`Note:
Loading a model from its configuration file does `),d4e=a("strong"),SRr=o("not"),RRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),PRr=o("from_pretrained()"),BRr=o(" to load the model weights."),IRr=l(),F(u5.$$.fragment),NRr=l(),Gr=a("div"),F($x.$$.fragment),qRr=l(),c4e=a("p"),jRr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),DRr=l(),vn=a("p"),GRr=o("The model class to instantiate is selected based on the "),f4e=a("code"),ORr=o("model_type"),VRr=o(` property of the config object (either
passed as an argument or loaded from `),m4e=a("code"),XRr=o("pretrained_model_name_or_path"),zRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=a("code"),QRr=o("pretrained_model_name_or_path"),WRr=o(":"),HRr=l(),h4e=a("ul"),b5=a("li"),p4e=a("strong"),URr=o("speech_to_text"),JRr=o(" \u2014 "),xZ=a("a"),YRr=o("TFSpeech2TextForConditionalGeneration"),ZRr=o(" (Speech2Text model)"),KRr=l(),F(v5.$$.fragment),pVe=l(),Gc=a("h2"),F5=a("a"),_4e=a("span"),F(kx.$$.fragment),ePr=l(),u4e=a("span"),oPr=o("FlaxAutoModel"),_Ve=l(),hr=a("div"),F(Sx.$$.fragment),rPr=l(),Oc=a("p"),tPr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Z=a("a"),aPr=o("from_pretrained()"),nPr=o(" class method or the "),kZ=a("a"),sPr=o("from_config()"),lPr=o(` class
method.`),iPr=l(),Rx=a("p"),dPr=o("This class cannot be instantiated directly using "),b4e=a("code"),cPr=o("__init__()"),fPr=o(" (throws an error)."),mPr=l(),Xt=a("div"),F(Px.$$.fragment),gPr=l(),v4e=a("p"),hPr=o("Instantiates one of the base model classes of the library from a configuration."),pPr=l(),Vc=a("p"),_Pr=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),uPr=o("not"),bPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),vPr=o("from_pretrained()"),FPr=o(" to load the model weights."),TPr=l(),F(T5.$$.fragment),MPr=l(),Or=a("div"),F(Bx.$$.fragment),EPr=l(),T4e=a("p"),CPr=o("Instantiate one of the base model classes of the library from a pretrained model."),wPr=l(),Fn=a("p"),APr=o("The model class to instantiate is selected based on the "),M4e=a("code"),LPr=o("model_type"),yPr=o(` property of the config object (either
passed as an argument or loaded from `),E4e=a("code"),xPr=o("pretrained_model_name_or_path"),$Pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=a("code"),kPr=o("pretrained_model_name_or_path"),SPr=o(":"),RPr=l(),oe=a("ul"),M5=a("li"),w4e=a("strong"),PPr=o("albert"),BPr=o(" \u2014 "),RZ=a("a"),IPr=o("FlaxAlbertModel"),NPr=o(" (ALBERT model)"),qPr=l(),E5=a("li"),A4e=a("strong"),jPr=o("bart"),DPr=o(" \u2014 "),PZ=a("a"),GPr=o("FlaxBartModel"),OPr=o(" (BART model)"),VPr=l(),C5=a("li"),L4e=a("strong"),XPr=o("beit"),zPr=o(" \u2014 "),BZ=a("a"),QPr=o("FlaxBeitModel"),WPr=o(" (BEiT model)"),HPr=l(),w5=a("li"),y4e=a("strong"),UPr=o("bert"),JPr=o(" \u2014 "),IZ=a("a"),YPr=o("FlaxBertModel"),ZPr=o(" (BERT model)"),KPr=l(),A5=a("li"),x4e=a("strong"),eBr=o("big_bird"),oBr=o(" \u2014 "),NZ=a("a"),rBr=o("FlaxBigBirdModel"),tBr=o(" (BigBird model)"),aBr=l(),L5=a("li"),$4e=a("strong"),nBr=o("blenderbot"),sBr=o(" \u2014 "),qZ=a("a"),lBr=o("FlaxBlenderbotModel"),iBr=o(" (Blenderbot model)"),dBr=l(),y5=a("li"),k4e=a("strong"),cBr=o("blenderbot-small"),fBr=o(" \u2014 "),jZ=a("a"),mBr=o("FlaxBlenderbotSmallModel"),gBr=o(" (BlenderbotSmall model)"),hBr=l(),x5=a("li"),S4e=a("strong"),pBr=o("clip"),_Br=o(" \u2014 "),DZ=a("a"),uBr=o("FlaxCLIPModel"),bBr=o(" (CLIP model)"),vBr=l(),$5=a("li"),R4e=a("strong"),FBr=o("distilbert"),TBr=o(" \u2014 "),GZ=a("a"),MBr=o("FlaxDistilBertModel"),EBr=o(" (DistilBERT model)"),CBr=l(),k5=a("li"),P4e=a("strong"),wBr=o("electra"),ABr=o(" \u2014 "),OZ=a("a"),LBr=o("FlaxElectraModel"),yBr=o(" (ELECTRA model)"),xBr=l(),S5=a("li"),B4e=a("strong"),$Br=o("gpt2"),kBr=o(" \u2014 "),VZ=a("a"),SBr=o("FlaxGPT2Model"),RBr=o(" (OpenAI GPT-2 model)"),PBr=l(),R5=a("li"),I4e=a("strong"),BBr=o("gpt_neo"),IBr=o(" \u2014 "),XZ=a("a"),NBr=o("FlaxGPTNeoModel"),qBr=o(" (GPT Neo model)"),jBr=l(),P5=a("li"),N4e=a("strong"),DBr=o("gptj"),GBr=o(" \u2014 "),zZ=a("a"),OBr=o("FlaxGPTJModel"),VBr=o(" (GPT-J model)"),XBr=l(),B5=a("li"),q4e=a("strong"),zBr=o("longt5"),QBr=o(" \u2014 "),QZ=a("a"),WBr=o("FlaxLongT5Model"),HBr=o(" (LongT5 model)"),UBr=l(),I5=a("li"),j4e=a("strong"),JBr=o("marian"),YBr=o(" \u2014 "),WZ=a("a"),ZBr=o("FlaxMarianModel"),KBr=o(" (Marian model)"),eIr=l(),N5=a("li"),D4e=a("strong"),oIr=o("mbart"),rIr=o(" \u2014 "),HZ=a("a"),tIr=o("FlaxMBartModel"),aIr=o(" (mBART model)"),nIr=l(),q5=a("li"),G4e=a("strong"),sIr=o("mt5"),lIr=o(" \u2014 "),UZ=a("a"),iIr=o("FlaxMT5Model"),dIr=o(" (MT5 model)"),cIr=l(),j5=a("li"),O4e=a("strong"),fIr=o("opt"),mIr=o(" \u2014 "),JZ=a("a"),gIr=o("FlaxOPTModel"),hIr=o(" (OPT model)"),pIr=l(),D5=a("li"),V4e=a("strong"),_Ir=o("pegasus"),uIr=o(" \u2014 "),YZ=a("a"),bIr=o("FlaxPegasusModel"),vIr=o(" (Pegasus model)"),FIr=l(),G5=a("li"),X4e=a("strong"),TIr=o("roberta"),MIr=o(" \u2014 "),ZZ=a("a"),EIr=o("FlaxRobertaModel"),CIr=o(" (RoBERTa model)"),wIr=l(),O5=a("li"),z4e=a("strong"),AIr=o("roformer"),LIr=o(" \u2014 "),KZ=a("a"),yIr=o("FlaxRoFormerModel"),xIr=o(" (RoFormer model)"),$Ir=l(),V5=a("li"),Q4e=a("strong"),kIr=o("t5"),SIr=o(" \u2014 "),eK=a("a"),RIr=o("FlaxT5Model"),PIr=o(" (T5 model)"),BIr=l(),X5=a("li"),W4e=a("strong"),IIr=o("vision-text-dual-encoder"),NIr=o(" \u2014 "),oK=a("a"),qIr=o("FlaxVisionTextDualEncoderModel"),jIr=o(" (VisionTextDualEncoder model)"),DIr=l(),z5=a("li"),H4e=a("strong"),GIr=o("vit"),OIr=o(" \u2014 "),rK=a("a"),VIr=o("FlaxViTModel"),XIr=o(" (ViT model)"),zIr=l(),Q5=a("li"),U4e=a("strong"),QIr=o("wav2vec2"),WIr=o(" \u2014 "),tK=a("a"),HIr=o("FlaxWav2Vec2Model"),UIr=o(" (Wav2Vec2 model)"),JIr=l(),W5=a("li"),J4e=a("strong"),YIr=o("xglm"),ZIr=o(" \u2014 "),aK=a("a"),KIr=o("FlaxXGLMModel"),eNr=o(" (XGLM model)"),oNr=l(),H5=a("li"),Y4e=a("strong"),rNr=o("xlm-roberta"),tNr=o(" \u2014 "),nK=a("a"),aNr=o("FlaxXLMRobertaModel"),nNr=o(" (XLM-RoBERTa model)"),sNr=l(),F(U5.$$.fragment),uVe=l(),Xc=a("h2"),J5=a("a"),Z4e=a("span"),F(Ix.$$.fragment),lNr=l(),K4e=a("span"),iNr=o("FlaxAutoModelForCausalLM"),bVe=l(),pr=a("div"),F(Nx.$$.fragment),dNr=l(),zc=a("p"),cNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sK=a("a"),fNr=o("from_pretrained()"),mNr=o(" class method or the "),lK=a("a"),gNr=o("from_config()"),hNr=o(` class
method.`),pNr=l(),qx=a("p"),_Nr=o("This class cannot be instantiated directly using "),eCe=a("code"),uNr=o("__init__()"),bNr=o(" (throws an error)."),vNr=l(),zt=a("div"),F(jx.$$.fragment),FNr=l(),oCe=a("p"),TNr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MNr=l(),Qc=a("p"),ENr=o(`Note:
Loading a model from its configuration file does `),rCe=a("strong"),CNr=o("not"),wNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),ANr=o("from_pretrained()"),LNr=o(" to load the model weights."),yNr=l(),F(Y5.$$.fragment),xNr=l(),Vr=a("div"),F(Dx.$$.fragment),$Nr=l(),tCe=a("p"),kNr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SNr=l(),Tn=a("p"),RNr=o("The model class to instantiate is selected based on the "),aCe=a("code"),PNr=o("model_type"),BNr=o(` property of the config object (either
passed as an argument or loaded from `),nCe=a("code"),INr=o("pretrained_model_name_or_path"),NNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=a("code"),qNr=o("pretrained_model_name_or_path"),jNr=o(":"),DNr=l(),xe=a("ul"),Z5=a("li"),lCe=a("strong"),GNr=o("bart"),ONr=o(" \u2014 "),dK=a("a"),VNr=o("FlaxBartForCausalLM"),XNr=o(" (BART model)"),zNr=l(),K5=a("li"),iCe=a("strong"),QNr=o("bert"),WNr=o(" \u2014 "),cK=a("a"),HNr=o("FlaxBertForCausalLM"),UNr=o(" (BERT model)"),JNr=l(),e3=a("li"),dCe=a("strong"),YNr=o("big_bird"),ZNr=o(" \u2014 "),fK=a("a"),KNr=o("FlaxBigBirdForCausalLM"),eqr=o(" (BigBird model)"),oqr=l(),o3=a("li"),cCe=a("strong"),rqr=o("electra"),tqr=o(" \u2014 "),mK=a("a"),aqr=o("FlaxElectraForCausalLM"),nqr=o(" (ELECTRA model)"),sqr=l(),r3=a("li"),fCe=a("strong"),lqr=o("gpt2"),iqr=o(" \u2014 "),gK=a("a"),dqr=o("FlaxGPT2LMHeadModel"),cqr=o(" (OpenAI GPT-2 model)"),fqr=l(),t3=a("li"),mCe=a("strong"),mqr=o("gpt_neo"),gqr=o(" \u2014 "),hK=a("a"),hqr=o("FlaxGPTNeoForCausalLM"),pqr=o(" (GPT Neo model)"),_qr=l(),a3=a("li"),gCe=a("strong"),uqr=o("gptj"),bqr=o(" \u2014 "),pK=a("a"),vqr=o("FlaxGPTJForCausalLM"),Fqr=o(" (GPT-J model)"),Tqr=l(),n3=a("li"),hCe=a("strong"),Mqr=o("opt"),Eqr=o(" \u2014 "),_K=a("a"),Cqr=o("FlaxOPTForCausalLM"),wqr=o(" (OPT model)"),Aqr=l(),s3=a("li"),pCe=a("strong"),Lqr=o("roberta"),yqr=o(" \u2014 "),uK=a("a"),xqr=o("FlaxRobertaForCausalLM"),$qr=o(" (RoBERTa model)"),kqr=l(),l3=a("li"),_Ce=a("strong"),Sqr=o("xglm"),Rqr=o(" \u2014 "),bK=a("a"),Pqr=o("FlaxXGLMForCausalLM"),Bqr=o(" (XGLM model)"),Iqr=l(),F(i3.$$.fragment),vVe=l(),Wc=a("h2"),d3=a("a"),uCe=a("span"),F(Gx.$$.fragment),Nqr=l(),bCe=a("span"),qqr=o("FlaxAutoModelForPreTraining"),FVe=l(),_r=a("div"),F(Ox.$$.fragment),jqr=l(),Hc=a("p"),Dqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vK=a("a"),Gqr=o("from_pretrained()"),Oqr=o(" class method or the "),FK=a("a"),Vqr=o("from_config()"),Xqr=o(` class
method.`),zqr=l(),Vx=a("p"),Qqr=o("This class cannot be instantiated directly using "),vCe=a("code"),Wqr=o("__init__()"),Hqr=o(" (throws an error)."),Uqr=l(),Qt=a("div"),F(Xx.$$.fragment),Jqr=l(),FCe=a("p"),Yqr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Zqr=l(),Uc=a("p"),Kqr=o(`Note:
Loading a model from its configuration file does `),TCe=a("strong"),ejr=o("not"),ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),rjr=o("from_pretrained()"),tjr=o(" to load the model weights."),ajr=l(),F(c3.$$.fragment),njr=l(),Xr=a("div"),F(zx.$$.fragment),sjr=l(),MCe=a("p"),ljr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ijr=l(),Mn=a("p"),djr=o("The model class to instantiate is selected based on the "),ECe=a("code"),cjr=o("model_type"),fjr=o(` property of the config object (either
passed as an argument or loaded from `),CCe=a("code"),mjr=o("pretrained_model_name_or_path"),gjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=a("code"),hjr=o("pretrained_model_name_or_path"),pjr=o(":"),_jr=l(),Ee=a("ul"),f3=a("li"),ACe=a("strong"),ujr=o("albert"),bjr=o(" \u2014 "),MK=a("a"),vjr=o("FlaxAlbertForPreTraining"),Fjr=o(" (ALBERT model)"),Tjr=l(),m3=a("li"),LCe=a("strong"),Mjr=o("bart"),Ejr=o(" \u2014 "),EK=a("a"),Cjr=o("FlaxBartForConditionalGeneration"),wjr=o(" (BART model)"),Ajr=l(),g3=a("li"),yCe=a("strong"),Ljr=o("bert"),yjr=o(" \u2014 "),CK=a("a"),xjr=o("FlaxBertForPreTraining"),$jr=o(" (BERT model)"),kjr=l(),h3=a("li"),xCe=a("strong"),Sjr=o("big_bird"),Rjr=o(" \u2014 "),wK=a("a"),Pjr=o("FlaxBigBirdForPreTraining"),Bjr=o(" (BigBird model)"),Ijr=l(),p3=a("li"),$Ce=a("strong"),Njr=o("electra"),qjr=o(" \u2014 "),AK=a("a"),jjr=o("FlaxElectraForPreTraining"),Djr=o(" (ELECTRA model)"),Gjr=l(),_3=a("li"),kCe=a("strong"),Ojr=o("longt5"),Vjr=o(" \u2014 "),LK=a("a"),Xjr=o("FlaxLongT5ForConditionalGeneration"),zjr=o(" (LongT5 model)"),Qjr=l(),u3=a("li"),SCe=a("strong"),Wjr=o("mbart"),Hjr=o(" \u2014 "),yK=a("a"),Ujr=o("FlaxMBartForConditionalGeneration"),Jjr=o(" (mBART model)"),Yjr=l(),b3=a("li"),RCe=a("strong"),Zjr=o("mt5"),Kjr=o(" \u2014 "),xK=a("a"),eDr=o("FlaxMT5ForConditionalGeneration"),oDr=o(" (MT5 model)"),rDr=l(),v3=a("li"),PCe=a("strong"),tDr=o("roberta"),aDr=o(" \u2014 "),$K=a("a"),nDr=o("FlaxRobertaForMaskedLM"),sDr=o(" (RoBERTa model)"),lDr=l(),F3=a("li"),BCe=a("strong"),iDr=o("roformer"),dDr=o(" \u2014 "),kK=a("a"),cDr=o("FlaxRoFormerForMaskedLM"),fDr=o(" (RoFormer model)"),mDr=l(),T3=a("li"),ICe=a("strong"),gDr=o("t5"),hDr=o(" \u2014 "),SK=a("a"),pDr=o("FlaxT5ForConditionalGeneration"),_Dr=o(" (T5 model)"),uDr=l(),M3=a("li"),NCe=a("strong"),bDr=o("wav2vec2"),vDr=o(" \u2014 "),RK=a("a"),FDr=o("FlaxWav2Vec2ForPreTraining"),TDr=o(" (Wav2Vec2 model)"),MDr=l(),E3=a("li"),qCe=a("strong"),EDr=o("xlm-roberta"),CDr=o(" \u2014 "),PK=a("a"),wDr=o("FlaxXLMRobertaForMaskedLM"),ADr=o(" (XLM-RoBERTa model)"),LDr=l(),F(C3.$$.fragment),TVe=l(),Jc=a("h2"),w3=a("a"),jCe=a("span"),F(Qx.$$.fragment),yDr=l(),DCe=a("span"),xDr=o("FlaxAutoModelForMaskedLM"),MVe=l(),ur=a("div"),F(Wx.$$.fragment),$Dr=l(),Yc=a("p"),kDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BK=a("a"),SDr=o("from_pretrained()"),RDr=o(" class method or the "),IK=a("a"),PDr=o("from_config()"),BDr=o(` class
method.`),IDr=l(),Hx=a("p"),NDr=o("This class cannot be instantiated directly using "),GCe=a("code"),qDr=o("__init__()"),jDr=o(" (throws an error)."),DDr=l(),Wt=a("div"),F(Ux.$$.fragment),GDr=l(),OCe=a("p"),ODr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VDr=l(),Zc=a("p"),XDr=o(`Note:
Loading a model from its configuration file does `),VCe=a("strong"),zDr=o("not"),QDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),WDr=o("from_pretrained()"),HDr=o(" to load the model weights."),UDr=l(),F(A3.$$.fragment),JDr=l(),zr=a("div"),F(Jx.$$.fragment),YDr=l(),XCe=a("p"),ZDr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KDr=l(),En=a("p"),eGr=o("The model class to instantiate is selected based on the "),zCe=a("code"),oGr=o("model_type"),rGr=o(` property of the config object (either
passed as an argument or loaded from `),QCe=a("code"),tGr=o("pretrained_model_name_or_path"),aGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=a("code"),nGr=o("pretrained_model_name_or_path"),sGr=o(":"),lGr=l(),$e=a("ul"),L3=a("li"),HCe=a("strong"),iGr=o("albert"),dGr=o(" \u2014 "),qK=a("a"),cGr=o("FlaxAlbertForMaskedLM"),fGr=o(" (ALBERT model)"),mGr=l(),y3=a("li"),UCe=a("strong"),gGr=o("bart"),hGr=o(" \u2014 "),jK=a("a"),pGr=o("FlaxBartForConditionalGeneration"),_Gr=o(" (BART model)"),uGr=l(),x3=a("li"),JCe=a("strong"),bGr=o("bert"),vGr=o(" \u2014 "),DK=a("a"),FGr=o("FlaxBertForMaskedLM"),TGr=o(" (BERT model)"),MGr=l(),$3=a("li"),YCe=a("strong"),EGr=o("big_bird"),CGr=o(" \u2014 "),GK=a("a"),wGr=o("FlaxBigBirdForMaskedLM"),AGr=o(" (BigBird model)"),LGr=l(),k3=a("li"),ZCe=a("strong"),yGr=o("distilbert"),xGr=o(" \u2014 "),OK=a("a"),$Gr=o("FlaxDistilBertForMaskedLM"),kGr=o(" (DistilBERT model)"),SGr=l(),S3=a("li"),KCe=a("strong"),RGr=o("electra"),PGr=o(" \u2014 "),VK=a("a"),BGr=o("FlaxElectraForMaskedLM"),IGr=o(" (ELECTRA model)"),NGr=l(),R3=a("li"),e5e=a("strong"),qGr=o("mbart"),jGr=o(" \u2014 "),XK=a("a"),DGr=o("FlaxMBartForConditionalGeneration"),GGr=o(" (mBART model)"),OGr=l(),P3=a("li"),o5e=a("strong"),VGr=o("roberta"),XGr=o(" \u2014 "),zK=a("a"),zGr=o("FlaxRobertaForMaskedLM"),QGr=o(" (RoBERTa model)"),WGr=l(),B3=a("li"),r5e=a("strong"),HGr=o("roformer"),UGr=o(" \u2014 "),QK=a("a"),JGr=o("FlaxRoFormerForMaskedLM"),YGr=o(" (RoFormer model)"),ZGr=l(),I3=a("li"),t5e=a("strong"),KGr=o("xlm-roberta"),eOr=o(" \u2014 "),WK=a("a"),oOr=o("FlaxXLMRobertaForMaskedLM"),rOr=o(" (XLM-RoBERTa model)"),tOr=l(),F(N3.$$.fragment),EVe=l(),Kc=a("h2"),q3=a("a"),a5e=a("span"),F(Yx.$$.fragment),aOr=l(),n5e=a("span"),nOr=o("FlaxAutoModelForSeq2SeqLM"),CVe=l(),br=a("div"),F(Zx.$$.fragment),sOr=l(),ef=a("p"),lOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HK=a("a"),iOr=o("from_pretrained()"),dOr=o(" class method or the "),UK=a("a"),cOr=o("from_config()"),fOr=o(` class
method.`),mOr=l(),Kx=a("p"),gOr=o("This class cannot be instantiated directly using "),s5e=a("code"),hOr=o("__init__()"),pOr=o(" (throws an error)."),_Or=l(),Ht=a("div"),F(e$.$$.fragment),uOr=l(),l5e=a("p"),bOr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vOr=l(),of=a("p"),FOr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),TOr=o("not"),MOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),EOr=o("from_pretrained()"),COr=o(" to load the model weights."),wOr=l(),F(j3.$$.fragment),AOr=l(),Qr=a("div"),F(o$.$$.fragment),LOr=l(),d5e=a("p"),yOr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),xOr=l(),Cn=a("p"),$Or=o("The model class to instantiate is selected based on the "),c5e=a("code"),kOr=o("model_type"),SOr=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),ROr=o("pretrained_model_name_or_path"),POr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),BOr=o("pretrained_model_name_or_path"),IOr=o(":"),NOr=l(),ke=a("ul"),D3=a("li"),g5e=a("strong"),qOr=o("bart"),jOr=o(" \u2014 "),YK=a("a"),DOr=o("FlaxBartForConditionalGeneration"),GOr=o(" (BART model)"),OOr=l(),G3=a("li"),h5e=a("strong"),VOr=o("blenderbot"),XOr=o(" \u2014 "),ZK=a("a"),zOr=o("FlaxBlenderbotForConditionalGeneration"),QOr=o(" (Blenderbot model)"),WOr=l(),O3=a("li"),p5e=a("strong"),HOr=o("blenderbot-small"),UOr=o(" \u2014 "),KK=a("a"),JOr=o("FlaxBlenderbotSmallForConditionalGeneration"),YOr=o(" (BlenderbotSmall model)"),ZOr=l(),V3=a("li"),_5e=a("strong"),KOr=o("encoder-decoder"),eVr=o(" \u2014 "),eee=a("a"),oVr=o("FlaxEncoderDecoderModel"),rVr=o(" (Encoder decoder model)"),tVr=l(),X3=a("li"),u5e=a("strong"),aVr=o("longt5"),nVr=o(" \u2014 "),oee=a("a"),sVr=o("FlaxLongT5ForConditionalGeneration"),lVr=o(" (LongT5 model)"),iVr=l(),z3=a("li"),b5e=a("strong"),dVr=o("marian"),cVr=o(" \u2014 "),ree=a("a"),fVr=o("FlaxMarianMTModel"),mVr=o(" (Marian model)"),gVr=l(),Q3=a("li"),v5e=a("strong"),hVr=o("mbart"),pVr=o(" \u2014 "),tee=a("a"),_Vr=o("FlaxMBartForConditionalGeneration"),uVr=o(" (mBART model)"),bVr=l(),W3=a("li"),F5e=a("strong"),vVr=o("mt5"),FVr=o(" \u2014 "),aee=a("a"),TVr=o("FlaxMT5ForConditionalGeneration"),MVr=o(" (MT5 model)"),EVr=l(),H3=a("li"),T5e=a("strong"),CVr=o("pegasus"),wVr=o(" \u2014 "),nee=a("a"),AVr=o("FlaxPegasusForConditionalGeneration"),LVr=o(" (Pegasus model)"),yVr=l(),U3=a("li"),M5e=a("strong"),xVr=o("t5"),$Vr=o(" \u2014 "),see=a("a"),kVr=o("FlaxT5ForConditionalGeneration"),SVr=o(" (T5 model)"),RVr=l(),F(J3.$$.fragment),wVe=l(),rf=a("h2"),Y3=a("a"),E5e=a("span"),F(r$.$$.fragment),PVr=l(),C5e=a("span"),BVr=o("FlaxAutoModelForSequenceClassification"),AVe=l(),vr=a("div"),F(t$.$$.fragment),IVr=l(),tf=a("p"),NVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lee=a("a"),qVr=o("from_pretrained()"),jVr=o(" class method or the "),iee=a("a"),DVr=o("from_config()"),GVr=o(` class
method.`),OVr=l(),a$=a("p"),VVr=o("This class cannot be instantiated directly using "),w5e=a("code"),XVr=o("__init__()"),zVr=o(" (throws an error)."),QVr=l(),Ut=a("div"),F(n$.$$.fragment),WVr=l(),A5e=a("p"),HVr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),UVr=l(),af=a("p"),JVr=o(`Note:
Loading a model from its configuration file does `),L5e=a("strong"),YVr=o("not"),ZVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=a("a"),KVr=o("from_pretrained()"),eXr=o(" to load the model weights."),oXr=l(),F(Z3.$$.fragment),rXr=l(),Wr=a("div"),F(s$.$$.fragment),tXr=l(),y5e=a("p"),aXr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nXr=l(),wn=a("p"),sXr=o("The model class to instantiate is selected based on the "),x5e=a("code"),lXr=o("model_type"),iXr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),dXr=o("pretrained_model_name_or_path"),cXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=a("code"),fXr=o("pretrained_model_name_or_path"),mXr=o(":"),gXr=l(),Se=a("ul"),K3=a("li"),S5e=a("strong"),hXr=o("albert"),pXr=o(" \u2014 "),cee=a("a"),_Xr=o("FlaxAlbertForSequenceClassification"),uXr=o(" (ALBERT model)"),bXr=l(),e0=a("li"),R5e=a("strong"),vXr=o("bart"),FXr=o(" \u2014 "),fee=a("a"),TXr=o("FlaxBartForSequenceClassification"),MXr=o(" (BART model)"),EXr=l(),o0=a("li"),P5e=a("strong"),CXr=o("bert"),wXr=o(" \u2014 "),mee=a("a"),AXr=o("FlaxBertForSequenceClassification"),LXr=o(" (BERT model)"),yXr=l(),r0=a("li"),B5e=a("strong"),xXr=o("big_bird"),$Xr=o(" \u2014 "),gee=a("a"),kXr=o("FlaxBigBirdForSequenceClassification"),SXr=o(" (BigBird model)"),RXr=l(),t0=a("li"),I5e=a("strong"),PXr=o("distilbert"),BXr=o(" \u2014 "),hee=a("a"),IXr=o("FlaxDistilBertForSequenceClassification"),NXr=o(" (DistilBERT model)"),qXr=l(),a0=a("li"),N5e=a("strong"),jXr=o("electra"),DXr=o(" \u2014 "),pee=a("a"),GXr=o("FlaxElectraForSequenceClassification"),OXr=o(" (ELECTRA model)"),VXr=l(),n0=a("li"),q5e=a("strong"),XXr=o("mbart"),zXr=o(" \u2014 "),_ee=a("a"),QXr=o("FlaxMBartForSequenceClassification"),WXr=o(" (mBART model)"),HXr=l(),s0=a("li"),j5e=a("strong"),UXr=o("roberta"),JXr=o(" \u2014 "),uee=a("a"),YXr=o("FlaxRobertaForSequenceClassification"),ZXr=o(" (RoBERTa model)"),KXr=l(),l0=a("li"),D5e=a("strong"),ezr=o("roformer"),ozr=o(" \u2014 "),bee=a("a"),rzr=o("FlaxRoFormerForSequenceClassification"),tzr=o(" (RoFormer model)"),azr=l(),i0=a("li"),G5e=a("strong"),nzr=o("xlm-roberta"),szr=o(" \u2014 "),vee=a("a"),lzr=o("FlaxXLMRobertaForSequenceClassification"),izr=o(" (XLM-RoBERTa model)"),dzr=l(),F(d0.$$.fragment),LVe=l(),nf=a("h2"),c0=a("a"),O5e=a("span"),F(l$.$$.fragment),czr=l(),V5e=a("span"),fzr=o("FlaxAutoModelForQuestionAnswering"),yVe=l(),Fr=a("div"),F(i$.$$.fragment),mzr=l(),sf=a("p"),gzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fee=a("a"),hzr=o("from_pretrained()"),pzr=o(" class method or the "),Tee=a("a"),_zr=o("from_config()"),uzr=o(` class
method.`),bzr=l(),d$=a("p"),vzr=o("This class cannot be instantiated directly using "),X5e=a("code"),Fzr=o("__init__()"),Tzr=o(" (throws an error)."),Mzr=l(),Jt=a("div"),F(c$.$$.fragment),Ezr=l(),z5e=a("p"),Czr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wzr=l(),lf=a("p"),Azr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),Lzr=o("not"),yzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=a("a"),xzr=o("from_pretrained()"),$zr=o(" to load the model weights."),kzr=l(),F(f0.$$.fragment),Szr=l(),Hr=a("div"),F(f$.$$.fragment),Rzr=l(),W5e=a("p"),Pzr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Bzr=l(),An=a("p"),Izr=o("The model class to instantiate is selected based on the "),H5e=a("code"),Nzr=o("model_type"),qzr=o(` property of the config object (either
passed as an argument or loaded from `),U5e=a("code"),jzr=o("pretrained_model_name_or_path"),Dzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),Gzr=o("pretrained_model_name_or_path"),Ozr=o(":"),Vzr=l(),Re=a("ul"),m0=a("li"),Y5e=a("strong"),Xzr=o("albert"),zzr=o(" \u2014 "),Eee=a("a"),Qzr=o("FlaxAlbertForQuestionAnswering"),Wzr=o(" (ALBERT model)"),Hzr=l(),g0=a("li"),Z5e=a("strong"),Uzr=o("bart"),Jzr=o(" \u2014 "),Cee=a("a"),Yzr=o("FlaxBartForQuestionAnswering"),Zzr=o(" (BART model)"),Kzr=l(),h0=a("li"),K5e=a("strong"),eQr=o("bert"),oQr=o(" \u2014 "),wee=a("a"),rQr=o("FlaxBertForQuestionAnswering"),tQr=o(" (BERT model)"),aQr=l(),p0=a("li"),e3e=a("strong"),nQr=o("big_bird"),sQr=o(" \u2014 "),Aee=a("a"),lQr=o("FlaxBigBirdForQuestionAnswering"),iQr=o(" (BigBird model)"),dQr=l(),_0=a("li"),o3e=a("strong"),cQr=o("distilbert"),fQr=o(" \u2014 "),Lee=a("a"),mQr=o("FlaxDistilBertForQuestionAnswering"),gQr=o(" (DistilBERT model)"),hQr=l(),u0=a("li"),r3e=a("strong"),pQr=o("electra"),_Qr=o(" \u2014 "),yee=a("a"),uQr=o("FlaxElectraForQuestionAnswering"),bQr=o(" (ELECTRA model)"),vQr=l(),b0=a("li"),t3e=a("strong"),FQr=o("mbart"),TQr=o(" \u2014 "),xee=a("a"),MQr=o("FlaxMBartForQuestionAnswering"),EQr=o(" (mBART model)"),CQr=l(),v0=a("li"),a3e=a("strong"),wQr=o("roberta"),AQr=o(" \u2014 "),$ee=a("a"),LQr=o("FlaxRobertaForQuestionAnswering"),yQr=o(" (RoBERTa model)"),xQr=l(),F0=a("li"),n3e=a("strong"),$Qr=o("roformer"),kQr=o(" \u2014 "),kee=a("a"),SQr=o("FlaxRoFormerForQuestionAnswering"),RQr=o(" (RoFormer model)"),PQr=l(),T0=a("li"),s3e=a("strong"),BQr=o("xlm-roberta"),IQr=o(" \u2014 "),See=a("a"),NQr=o("FlaxXLMRobertaForQuestionAnswering"),qQr=o(" (XLM-RoBERTa model)"),jQr=l(),F(M0.$$.fragment),xVe=l(),df=a("h2"),E0=a("a"),l3e=a("span"),F(m$.$$.fragment),DQr=l(),i3e=a("span"),GQr=o("FlaxAutoModelForTokenClassification"),$Ve=l(),Tr=a("div"),F(g$.$$.fragment),OQr=l(),cf=a("p"),VQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ree=a("a"),XQr=o("from_pretrained()"),zQr=o(" class method or the "),Pee=a("a"),QQr=o("from_config()"),WQr=o(` class
method.`),HQr=l(),h$=a("p"),UQr=o("This class cannot be instantiated directly using "),d3e=a("code"),JQr=o("__init__()"),YQr=o(" (throws an error)."),ZQr=l(),Yt=a("div"),F(p$.$$.fragment),KQr=l(),c3e=a("p"),eWr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oWr=l(),ff=a("p"),rWr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),tWr=o("not"),aWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),nWr=o("from_pretrained()"),sWr=o(" to load the model weights."),lWr=l(),F(C0.$$.fragment),iWr=l(),Ur=a("div"),F(_$.$$.fragment),dWr=l(),m3e=a("p"),cWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fWr=l(),Ln=a("p"),mWr=o("The model class to instantiate is selected based on the "),g3e=a("code"),gWr=o("model_type"),hWr=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),pWr=o("pretrained_model_name_or_path"),_Wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),uWr=o("pretrained_model_name_or_path"),bWr=o(":"),vWr=l(),Ve=a("ul"),w0=a("li"),_3e=a("strong"),FWr=o("albert"),TWr=o(" \u2014 "),Iee=a("a"),MWr=o("FlaxAlbertForTokenClassification"),EWr=o(" (ALBERT model)"),CWr=l(),A0=a("li"),u3e=a("strong"),wWr=o("bert"),AWr=o(" \u2014 "),Nee=a("a"),LWr=o("FlaxBertForTokenClassification"),yWr=o(" (BERT model)"),xWr=l(),L0=a("li"),b3e=a("strong"),$Wr=o("big_bird"),kWr=o(" \u2014 "),qee=a("a"),SWr=o("FlaxBigBirdForTokenClassification"),RWr=o(" (BigBird model)"),PWr=l(),y0=a("li"),v3e=a("strong"),BWr=o("distilbert"),IWr=o(" \u2014 "),jee=a("a"),NWr=o("FlaxDistilBertForTokenClassification"),qWr=o(" (DistilBERT model)"),jWr=l(),x0=a("li"),F3e=a("strong"),DWr=o("electra"),GWr=o(" \u2014 "),Dee=a("a"),OWr=o("FlaxElectraForTokenClassification"),VWr=o(" (ELECTRA model)"),XWr=l(),$0=a("li"),T3e=a("strong"),zWr=o("roberta"),QWr=o(" \u2014 "),Gee=a("a"),WWr=o("FlaxRobertaForTokenClassification"),HWr=o(" (RoBERTa model)"),UWr=l(),k0=a("li"),M3e=a("strong"),JWr=o("roformer"),YWr=o(" \u2014 "),Oee=a("a"),ZWr=o("FlaxRoFormerForTokenClassification"),KWr=o(" (RoFormer model)"),eHr=l(),S0=a("li"),E3e=a("strong"),oHr=o("xlm-roberta"),rHr=o(" \u2014 "),Vee=a("a"),tHr=o("FlaxXLMRobertaForTokenClassification"),aHr=o(" (XLM-RoBERTa model)"),nHr=l(),F(R0.$$.fragment),kVe=l(),mf=a("h2"),P0=a("a"),C3e=a("span"),F(u$.$$.fragment),sHr=l(),w3e=a("span"),lHr=o("FlaxAutoModelForMultipleChoice"),SVe=l(),Mr=a("div"),F(b$.$$.fragment),iHr=l(),gf=a("p"),dHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xee=a("a"),cHr=o("from_pretrained()"),fHr=o(" class method or the "),zee=a("a"),mHr=o("from_config()"),gHr=o(` class
method.`),hHr=l(),v$=a("p"),pHr=o("This class cannot be instantiated directly using "),A3e=a("code"),_Hr=o("__init__()"),uHr=o(" (throws an error)."),bHr=l(),Zt=a("div"),F(F$.$$.fragment),vHr=l(),L3e=a("p"),FHr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),THr=l(),hf=a("p"),MHr=o(`Note:
Loading a model from its configuration file does `),y3e=a("strong"),EHr=o("not"),CHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=a("a"),wHr=o("from_pretrained()"),AHr=o(" to load the model weights."),LHr=l(),F(B0.$$.fragment),yHr=l(),Jr=a("div"),F(T$.$$.fragment),xHr=l(),x3e=a("p"),$Hr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kHr=l(),yn=a("p"),SHr=o("The model class to instantiate is selected based on the "),$3e=a("code"),RHr=o("model_type"),PHr=o(` property of the config object (either
passed as an argument or loaded from `),k3e=a("code"),BHr=o("pretrained_model_name_or_path"),IHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=a("code"),NHr=o("pretrained_model_name_or_path"),qHr=o(":"),jHr=l(),Xe=a("ul"),I0=a("li"),R3e=a("strong"),DHr=o("albert"),GHr=o(" \u2014 "),Wee=a("a"),OHr=o("FlaxAlbertForMultipleChoice"),VHr=o(" (ALBERT model)"),XHr=l(),N0=a("li"),P3e=a("strong"),zHr=o("bert"),QHr=o(" \u2014 "),Hee=a("a"),WHr=o("FlaxBertForMultipleChoice"),HHr=o(" (BERT model)"),UHr=l(),q0=a("li"),B3e=a("strong"),JHr=o("big_bird"),YHr=o(" \u2014 "),Uee=a("a"),ZHr=o("FlaxBigBirdForMultipleChoice"),KHr=o(" (BigBird model)"),eUr=l(),j0=a("li"),I3e=a("strong"),oUr=o("distilbert"),rUr=o(" \u2014 "),Jee=a("a"),tUr=o("FlaxDistilBertForMultipleChoice"),aUr=o(" (DistilBERT model)"),nUr=l(),D0=a("li"),N3e=a("strong"),sUr=o("electra"),lUr=o(" \u2014 "),Yee=a("a"),iUr=o("FlaxElectraForMultipleChoice"),dUr=o(" (ELECTRA model)"),cUr=l(),G0=a("li"),q3e=a("strong"),fUr=o("roberta"),mUr=o(" \u2014 "),Zee=a("a"),gUr=o("FlaxRobertaForMultipleChoice"),hUr=o(" (RoBERTa model)"),pUr=l(),O0=a("li"),j3e=a("strong"),_Ur=o("roformer"),uUr=o(" \u2014 "),Kee=a("a"),bUr=o("FlaxRoFormerForMultipleChoice"),vUr=o(" (RoFormer model)"),FUr=l(),V0=a("li"),D3e=a("strong"),TUr=o("xlm-roberta"),MUr=o(" \u2014 "),eoe=a("a"),EUr=o("FlaxXLMRobertaForMultipleChoice"),CUr=o(" (XLM-RoBERTa model)"),wUr=l(),F(X0.$$.fragment),RVe=l(),pf=a("h2"),z0=a("a"),G3e=a("span"),F(M$.$$.fragment),AUr=l(),O3e=a("span"),LUr=o("FlaxAutoModelForNextSentencePrediction"),PVe=l(),Er=a("div"),F(E$.$$.fragment),yUr=l(),_f=a("p"),xUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ooe=a("a"),$Ur=o("from_pretrained()"),kUr=o(" class method or the "),roe=a("a"),SUr=o("from_config()"),RUr=o(` class
method.`),PUr=l(),C$=a("p"),BUr=o("This class cannot be instantiated directly using "),V3e=a("code"),IUr=o("__init__()"),NUr=o(" (throws an error)."),qUr=l(),Kt=a("div"),F(w$.$$.fragment),jUr=l(),X3e=a("p"),DUr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),GUr=l(),uf=a("p"),OUr=o(`Note:
Loading a model from its configuration file does `),z3e=a("strong"),VUr=o("not"),XUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=a("a"),zUr=o("from_pretrained()"),QUr=o(" to load the model weights."),WUr=l(),F(Q0.$$.fragment),HUr=l(),Yr=a("div"),F(A$.$$.fragment),UUr=l(),Q3e=a("p"),JUr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),YUr=l(),xn=a("p"),ZUr=o("The model class to instantiate is selected based on the "),W3e=a("code"),KUr=o("model_type"),eJr=o(` property of the config object (either
passed as an argument or loaded from `),H3e=a("code"),oJr=o("pretrained_model_name_or_path"),rJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U3e=a("code"),tJr=o("pretrained_model_name_or_path"),aJr=o(":"),nJr=l(),J3e=a("ul"),W0=a("li"),Y3e=a("strong"),sJr=o("bert"),lJr=o(" \u2014 "),aoe=a("a"),iJr=o("FlaxBertForNextSentencePrediction"),dJr=o(" (BERT model)"),cJr=l(),F(H0.$$.fragment),BVe=l(),bf=a("h2"),U0=a("a"),Z3e=a("span"),F(L$.$$.fragment),fJr=l(),K3e=a("span"),mJr=o("FlaxAutoModelForImageClassification"),IVe=l(),Cr=a("div"),F(y$.$$.fragment),gJr=l(),vf=a("p"),hJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),noe=a("a"),pJr=o("from_pretrained()"),_Jr=o(" class method or the "),soe=a("a"),uJr=o("from_config()"),bJr=o(` class
method.`),vJr=l(),x$=a("p"),FJr=o("This class cannot be instantiated directly using "),e0e=a("code"),TJr=o("__init__()"),MJr=o(" (throws an error)."),EJr=l(),ea=a("div"),F($$.$$.fragment),CJr=l(),o0e=a("p"),wJr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),AJr=l(),Ff=a("p"),LJr=o(`Note:
Loading a model from its configuration file does `),r0e=a("strong"),yJr=o("not"),xJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=a("a"),$Jr=o("from_pretrained()"),kJr=o(" to load the model weights."),SJr=l(),F(J0.$$.fragment),RJr=l(),Zr=a("div"),F(k$.$$.fragment),PJr=l(),t0e=a("p"),BJr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),IJr=l(),$n=a("p"),NJr=o("The model class to instantiate is selected based on the "),a0e=a("code"),qJr=o("model_type"),jJr=o(` property of the config object (either
passed as an argument or loaded from `),n0e=a("code"),DJr=o("pretrained_model_name_or_path"),GJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=a("code"),OJr=o("pretrained_model_name_or_path"),VJr=o(":"),XJr=l(),S$=a("ul"),Y0=a("li"),l0e=a("strong"),zJr=o("beit"),QJr=o(" \u2014 "),ioe=a("a"),WJr=o("FlaxBeitForImageClassification"),HJr=o(" (BEiT model)"),UJr=l(),Z0=a("li"),i0e=a("strong"),JJr=o("vit"),YJr=o(" \u2014 "),doe=a("a"),ZJr=o("FlaxViTForImageClassification"),KJr=o(" (ViT model)"),eYr=l(),F(K0.$$.fragment),NVe=l(),Tf=a("h2"),ew=a("a"),d0e=a("span"),F(R$.$$.fragment),oYr=l(),c0e=a("span"),rYr=o("FlaxAutoModelForVision2Seq"),qVe=l(),wr=a("div"),F(P$.$$.fragment),tYr=l(),Mf=a("p"),aYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),coe=a("a"),nYr=o("from_pretrained()"),sYr=o(" class method or the "),foe=a("a"),lYr=o("from_config()"),iYr=o(` class
method.`),dYr=l(),B$=a("p"),cYr=o("This class cannot be instantiated directly using "),f0e=a("code"),fYr=o("__init__()"),mYr=o(" (throws an error)."),gYr=l(),oa=a("div"),F(I$.$$.fragment),hYr=l(),m0e=a("p"),pYr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Yr=l(),Ef=a("p"),uYr=o(`Note:
Loading a model from its configuration file does `),g0e=a("strong"),bYr=o("not"),vYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=a("a"),FYr=o("from_pretrained()"),TYr=o(" to load the model weights."),MYr=l(),F(ow.$$.fragment),EYr=l(),Kr=a("div"),F(N$.$$.fragment),CYr=l(),h0e=a("p"),wYr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),AYr=l(),kn=a("p"),LYr=o("The model class to instantiate is selected based on the "),p0e=a("code"),yYr=o("model_type"),xYr=o(` property of the config object (either
passed as an argument or loaded from `),_0e=a("code"),$Yr=o("pretrained_model_name_or_path"),kYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=a("code"),SYr=o("pretrained_model_name_or_path"),RYr=o(":"),PYr=l(),b0e=a("ul"),rw=a("li"),v0e=a("strong"),BYr=o("vision-encoder-decoder"),IYr=o(" \u2014 "),goe=a("a"),NYr=o("FlaxVisionEncoderDecoderModel"),qYr=o(" (Vision Encoder decoder model)"),jYr=l(),F(tw.$$.fragment),this.h()},l(f){const u=lDt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var q$=s(p);m=n(q$,"A",{id:!0,class:!0,href:!0});var F0e=s(m);_=n(F0e,"SPAN",{});var T0e=s(_);T(d.$$.fragment,T0e),T0e.forEach(t),F0e.forEach(t),h=i(q$),Eo=n(q$,"SPAN",{});var M0e=s(Eo);Fi=r(M0e,"Auto Classes"),M0e.forEach(t),q$.forEach(t),Lf=i(f),at=n(f,"P",{});var j$=s(at);Ti=r(j$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n(j$,"CODE",{});var E0e=s(Mi);CL=r(E0e,"from_pretrained()"),E0e.forEach(t),yf=r(j$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),j$.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Sn=s(Qe);Ei=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var C0e=s(Rn);wL=r(C0e,"AutoConfig"),C0e.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var w0e=s(Bn);AL=r(w0e,"AutoModel"),w0e.forEach(t),Ci=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var A0e=s(In);LL=r(A0e,"AutoTokenizer"),A0e.forEach(t),wi=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),xf=i(f),T(xa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var D$=s(Ae);eS=r(D$,"will create a model that is an instance of "),Ai=n(D$,"A",{href:!0});var L0e=s(Ai);oS=r(L0e,"BertModel"),L0e.forEach(t),rS=r(D$,"."),D$.forEach(t),Co=i(f),$a=n(f,"P",{});var G$=s($a);tS=r(G$,"There is one class of "),$f=n(G$,"CODE",{});var y0e=s($f);aS=r(y0e,"AutoModel"),y0e.forEach(t),Uze=r(G$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),G$.forEach(t),PGe=i(f),Li=n(f,"H2",{class:!0});var O$=s(Li);kf=n(O$,"A",{id:!0,class:!0,href:!0});var x0e=s(kf);ite=n(x0e,"SPAN",{});var $0e=s(ite);T(yL.$$.fragment,$0e),$0e.forEach(t),x0e.forEach(t),Jze=i(O$),dte=n(O$,"SPAN",{});var k0e=s(dte);Yze=r(k0e,"Extending the Auto Classes"),k0e.forEach(t),O$.forEach(t),BGe=i(f),Nn=n(f,"P",{});var Cf=s(Nn);Zze=r(Cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),cte=n(Cf,"CODE",{});var S0e=s(cte);Kze=r(S0e,"NewModel"),S0e.forEach(t),eQe=r(Cf,", make sure you have a "),fte=n(Cf,"CODE",{});var R0e=s(fte);oQe=r(R0e,"NewModelConfig"),R0e.forEach(t),rQe=r(Cf,` then you can add those to the auto
classes like this:`),Cf.forEach(t),IGe=i(f),T(xL.$$.fragment,f),NGe=i(f),nS=n(f,"P",{});var P0e=s(nS);tQe=r(P0e,"You will then be able to use the auto classes like you would usually do!"),P0e.forEach(t),qGe=i(f),T(Sf.$$.fragment,f),jGe=i(f),yi=n(f,"H2",{class:!0});var V$=s(yi);Rf=n(V$,"A",{id:!0,class:!0,href:!0});var B0e=s(Rf);mte=n(B0e,"SPAN",{});var I0e=s(mte);T($L.$$.fragment,I0e),I0e.forEach(t),B0e.forEach(t),aQe=i(V$),gte=n(V$,"SPAN",{});var N0e=s(gte);nQe=r(N0e,"AutoConfig"),N0e.forEach(t),V$.forEach(t),DGe=i(f),wo=n(f,"DIV",{class:!0});var rt=s(wo);T(kL.$$.fragment,rt),sQe=i(rt),SL=n(rt,"P",{});var X$=s(SL);lQe=r(X$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),sS=n(X$,"A",{href:!0});var q0e=s(sS);iQe=r(q0e,"from_pretrained()"),q0e.forEach(t),dQe=r(X$," class method."),X$.forEach(t),cQe=i(rt),RL=n(rt,"P",{});var z$=s(RL);fQe=r(z$,"This class cannot be instantiated directly using "),hte=n(z$,"CODE",{});var j0e=s(hte);mQe=r(j0e,"__init__()"),j0e.forEach(t),gQe=r(z$," (throws an error)."),z$.forEach(t),hQe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(PL.$$.fragment,tt),pQe=i(tt),pte=n(tt,"P",{});var D0e=s(pte);_Qe=r(D0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),D0e.forEach(t),uQe=i(tt),xi=n(tt,"P",{});var wf=s(xi);bQe=r(wf,"The configuration class to instantiate is selected based on the "),_te=n(wf,"CODE",{});var G0e=s(_te);vQe=r(G0e,"model_type"),G0e.forEach(t),FQe=r(wf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ute=n(wf,"CODE",{});var O0e=s(ute);TQe=r(O0e,"pretrained_model_name_or_path"),O0e.forEach(t),MQe=r(wf,":"),wf.forEach(t),EQe=i(tt),A=n(tt,"UL",{});var L=s(A);Pf=n(L,"LI",{});var aw=s(Pf);bte=n(aw,"STRONG",{});var V0e=s(bte);CQe=r(V0e,"albert"),V0e.forEach(t),wQe=r(aw," \u2014 "),lS=n(aw,"A",{href:!0});var X0e=s(lS);AQe=r(X0e,"AlbertConfig"),X0e.forEach(t),LQe=r(aw," (ALBERT model)"),aw.forEach(t),yQe=i(L),Bf=n(L,"LI",{});var nw=s(Bf);vte=n(nw,"STRONG",{});var z0e=s(vte);xQe=r(z0e,"bart"),z0e.forEach(t),$Qe=r(nw," \u2014 "),iS=n(nw,"A",{href:!0});var Q0e=s(iS);kQe=r(Q0e,"BartConfig"),Q0e.forEach(t),SQe=r(nw," (BART model)"),nw.forEach(t),RQe=i(L),If=n(L,"LI",{});var sw=s(If);Fte=n(sw,"STRONG",{});var W0e=s(Fte);PQe=r(W0e,"beit"),W0e.forEach(t),BQe=r(sw," \u2014 "),dS=n(sw,"A",{href:!0});var H0e=s(dS);IQe=r(H0e,"BeitConfig"),H0e.forEach(t),NQe=r(sw," (BEiT model)"),sw.forEach(t),qQe=i(L),Nf=n(L,"LI",{});var lw=s(Nf);Tte=n(lw,"STRONG",{});var U0e=s(Tte);jQe=r(U0e,"bert"),U0e.forEach(t),DQe=r(lw," \u2014 "),cS=n(lw,"A",{href:!0});var J0e=s(cS);GQe=r(J0e,"BertConfig"),J0e.forEach(t),OQe=r(lw," (BERT model)"),lw.forEach(t),VQe=i(L),qf=n(L,"LI",{});var iw=s(qf);Mte=n(iw,"STRONG",{});var Y0e=s(Mte);XQe=r(Y0e,"bert-generation"),Y0e.forEach(t),zQe=r(iw," \u2014 "),fS=n(iw,"A",{href:!0});var Z0e=s(fS);QQe=r(Z0e,"BertGenerationConfig"),Z0e.forEach(t),WQe=r(iw," (Bert Generation model)"),iw.forEach(t),HQe=i(L),jf=n(L,"LI",{});var dw=s(jf);Ete=n(dw,"STRONG",{});var K0e=s(Ete);UQe=r(K0e,"big_bird"),K0e.forEach(t),JQe=r(dw," \u2014 "),mS=n(dw,"A",{href:!0});var ewe=s(mS);YQe=r(ewe,"BigBirdConfig"),ewe.forEach(t),ZQe=r(dw," (BigBird model)"),dw.forEach(t),KQe=i(L),Df=n(L,"LI",{});var cw=s(Df);Cte=n(cw,"STRONG",{});var owe=s(Cte);eWe=r(owe,"bigbird_pegasus"),owe.forEach(t),oWe=r(cw," \u2014 "),gS=n(cw,"A",{href:!0});var rwe=s(gS);rWe=r(rwe,"BigBirdPegasusConfig"),rwe.forEach(t),tWe=r(cw," (BigBird-Pegasus model)"),cw.forEach(t),aWe=i(L),Gf=n(L,"LI",{});var fw=s(Gf);wte=n(fw,"STRONG",{});var twe=s(wte);nWe=r(twe,"blenderbot"),twe.forEach(t),sWe=r(fw," \u2014 "),hS=n(fw,"A",{href:!0});var awe=s(hS);lWe=r(awe,"BlenderbotConfig"),awe.forEach(t),iWe=r(fw," (Blenderbot model)"),fw.forEach(t),dWe=i(L),Of=n(L,"LI",{});var mw=s(Of);Ate=n(mw,"STRONG",{});var nwe=s(Ate);cWe=r(nwe,"blenderbot-small"),nwe.forEach(t),fWe=r(mw," \u2014 "),pS=n(mw,"A",{href:!0});var swe=s(pS);mWe=r(swe,"BlenderbotSmallConfig"),swe.forEach(t),gWe=r(mw," (BlenderbotSmall model)"),mw.forEach(t),hWe=i(L),Vf=n(L,"LI",{});var gw=s(Vf);Lte=n(gw,"STRONG",{});var lwe=s(Lte);pWe=r(lwe,"bloom"),lwe.forEach(t),_We=r(gw," \u2014 "),_S=n(gw,"A",{href:!0});var iwe=s(_S);uWe=r(iwe,"BloomConfig"),iwe.forEach(t),bWe=r(gw," (BLOOM model)"),gw.forEach(t),vWe=i(L),Xf=n(L,"LI",{});var hw=s(Xf);yte=n(hw,"STRONG",{});var dwe=s(yte);FWe=r(dwe,"camembert"),dwe.forEach(t),TWe=r(hw," \u2014 "),uS=n(hw,"A",{href:!0});var cwe=s(uS);MWe=r(cwe,"CamembertConfig"),cwe.forEach(t),EWe=r(hw," (CamemBERT model)"),hw.forEach(t),CWe=i(L),zf=n(L,"LI",{});var pw=s(zf);xte=n(pw,"STRONG",{});var fwe=s(xte);wWe=r(fwe,"canine"),fwe.forEach(t),AWe=r(pw," \u2014 "),bS=n(pw,"A",{href:!0});var mwe=s(bS);LWe=r(mwe,"CanineConfig"),mwe.forEach(t),yWe=r(pw," (CANINE model)"),pw.forEach(t),xWe=i(L),Qf=n(L,"LI",{});var _w=s(Qf);$te=n(_w,"STRONG",{});var gwe=s($te);$We=r(gwe,"clip"),gwe.forEach(t),kWe=r(_w," \u2014 "),vS=n(_w,"A",{href:!0});var hwe=s(vS);SWe=r(hwe,"CLIPConfig"),hwe.forEach(t),RWe=r(_w," (CLIP model)"),_w.forEach(t),PWe=i(L),Wf=n(L,"LI",{});var uw=s(Wf);kte=n(uw,"STRONG",{});var pwe=s(kte);BWe=r(pwe,"convbert"),pwe.forEach(t),IWe=r(uw," \u2014 "),FS=n(uw,"A",{href:!0});var _we=s(FS);NWe=r(_we,"ConvBertConfig"),_we.forEach(t),qWe=r(uw," (ConvBERT model)"),uw.forEach(t),jWe=i(L),Hf=n(L,"LI",{});var bw=s(Hf);Ste=n(bw,"STRONG",{});var uwe=s(Ste);DWe=r(uwe,"convnext"),uwe.forEach(t),GWe=r(bw," \u2014 "),TS=n(bw,"A",{href:!0});var bwe=s(TS);OWe=r(bwe,"ConvNextConfig"),bwe.forEach(t),VWe=r(bw," (ConvNeXT model)"),bw.forEach(t),XWe=i(L),Uf=n(L,"LI",{});var vw=s(Uf);Rte=n(vw,"STRONG",{});var vwe=s(Rte);zWe=r(vwe,"ctrl"),vwe.forEach(t),QWe=r(vw," \u2014 "),MS=n(vw,"A",{href:!0});var Fwe=s(MS);WWe=r(Fwe,"CTRLConfig"),Fwe.forEach(t),HWe=r(vw," (CTRL model)"),vw.forEach(t),UWe=i(L),Jf=n(L,"LI",{});var Fw=s(Jf);Pte=n(Fw,"STRONG",{});var Twe=s(Pte);JWe=r(Twe,"cvt"),Twe.forEach(t),YWe=r(Fw," \u2014 "),ES=n(Fw,"A",{href:!0});var Mwe=s(ES);ZWe=r(Mwe,"CvtConfig"),Mwe.forEach(t),KWe=r(Fw," (CvT model)"),Fw.forEach(t),eHe=i(L),Yf=n(L,"LI",{});var Tw=s(Yf);Bte=n(Tw,"STRONG",{});var Ewe=s(Bte);oHe=r(Ewe,"data2vec-audio"),Ewe.forEach(t),rHe=r(Tw," \u2014 "),CS=n(Tw,"A",{href:!0});var Cwe=s(CS);tHe=r(Cwe,"Data2VecAudioConfig"),Cwe.forEach(t),aHe=r(Tw," (Data2VecAudio model)"),Tw.forEach(t),nHe=i(L),Zf=n(L,"LI",{});var Mw=s(Zf);Ite=n(Mw,"STRONG",{});var wwe=s(Ite);sHe=r(wwe,"data2vec-text"),wwe.forEach(t),lHe=r(Mw," \u2014 "),wS=n(Mw,"A",{href:!0});var Awe=s(wS);iHe=r(Awe,"Data2VecTextConfig"),Awe.forEach(t),dHe=r(Mw," (Data2VecText model)"),Mw.forEach(t),cHe=i(L),Kf=n(L,"LI",{});var Ew=s(Kf);Nte=n(Ew,"STRONG",{});var Lwe=s(Nte);fHe=r(Lwe,"data2vec-vision"),Lwe.forEach(t),mHe=r(Ew," \u2014 "),AS=n(Ew,"A",{href:!0});var ywe=s(AS);gHe=r(ywe,"Data2VecVisionConfig"),ywe.forEach(t),hHe=r(Ew," (Data2VecVision model)"),Ew.forEach(t),pHe=i(L),em=n(L,"LI",{});var Cw=s(em);qte=n(Cw,"STRONG",{});var xwe=s(qte);_He=r(xwe,"deberta"),xwe.forEach(t),uHe=r(Cw," \u2014 "),LS=n(Cw,"A",{href:!0});var $we=s(LS);bHe=r($we,"DebertaConfig"),$we.forEach(t),vHe=r(Cw," (DeBERTa model)"),Cw.forEach(t),FHe=i(L),om=n(L,"LI",{});var ww=s(om);jte=n(ww,"STRONG",{});var kwe=s(jte);THe=r(kwe,"deberta-v2"),kwe.forEach(t),MHe=r(ww," \u2014 "),yS=n(ww,"A",{href:!0});var Swe=s(yS);EHe=r(Swe,"DebertaV2Config"),Swe.forEach(t),CHe=r(ww," (DeBERTa-v2 model)"),ww.forEach(t),wHe=i(L),rm=n(L,"LI",{});var Aw=s(rm);Dte=n(Aw,"STRONG",{});var Rwe=s(Dte);AHe=r(Rwe,"decision_transformer"),Rwe.forEach(t),LHe=r(Aw," \u2014 "),xS=n(Aw,"A",{href:!0});var Pwe=s(xS);yHe=r(Pwe,"DecisionTransformerConfig"),Pwe.forEach(t),xHe=r(Aw," (Decision Transformer model)"),Aw.forEach(t),$He=i(L),tm=n(L,"LI",{});var Lw=s(tm);Gte=n(Lw,"STRONG",{});var GYr=s(Gte);kHe=r(GYr,"deit"),GYr.forEach(t),SHe=r(Lw," \u2014 "),$S=n(Lw,"A",{href:!0});var OYr=s($S);RHe=r(OYr,"DeiTConfig"),OYr.forEach(t),PHe=r(Lw," (DeiT model)"),Lw.forEach(t),BHe=i(L),am=n(L,"LI",{});var Bwe=s(am);Ote=n(Bwe,"STRONG",{});var VYr=s(Ote);IHe=r(VYr,"detr"),VYr.forEach(t),NHe=r(Bwe," \u2014 "),kS=n(Bwe,"A",{href:!0});var XYr=s(kS);qHe=r(XYr,"DetrConfig"),XYr.forEach(t),jHe=r(Bwe," (DETR model)"),Bwe.forEach(t),DHe=i(L),nm=n(L,"LI",{});var Iwe=s(nm);Vte=n(Iwe,"STRONG",{});var zYr=s(Vte);GHe=r(zYr,"distilbert"),zYr.forEach(t),OHe=r(Iwe," \u2014 "),SS=n(Iwe,"A",{href:!0});var QYr=s(SS);VHe=r(QYr,"DistilBertConfig"),QYr.forEach(t),XHe=r(Iwe," (DistilBERT model)"),Iwe.forEach(t),zHe=i(L),sm=n(L,"LI",{});var Nwe=s(sm);Xte=n(Nwe,"STRONG",{});var WYr=s(Xte);QHe=r(WYr,"dpr"),WYr.forEach(t),WHe=r(Nwe," \u2014 "),RS=n(Nwe,"A",{href:!0});var HYr=s(RS);HHe=r(HYr,"DPRConfig"),HYr.forEach(t),UHe=r(Nwe," (DPR model)"),Nwe.forEach(t),JHe=i(L),lm=n(L,"LI",{});var qwe=s(lm);zte=n(qwe,"STRONG",{});var UYr=s(zte);YHe=r(UYr,"dpt"),UYr.forEach(t),ZHe=r(qwe," \u2014 "),PS=n(qwe,"A",{href:!0});var JYr=s(PS);KHe=r(JYr,"DPTConfig"),JYr.forEach(t),eUe=r(qwe," (DPT model)"),qwe.forEach(t),oUe=i(L),im=n(L,"LI",{});var jwe=s(im);Qte=n(jwe,"STRONG",{});var YYr=s(Qte);rUe=r(YYr,"electra"),YYr.forEach(t),tUe=r(jwe," \u2014 "),BS=n(jwe,"A",{href:!0});var ZYr=s(BS);aUe=r(ZYr,"ElectraConfig"),ZYr.forEach(t),nUe=r(jwe," (ELECTRA model)"),jwe.forEach(t),sUe=i(L),dm=n(L,"LI",{});var Dwe=s(dm);Wte=n(Dwe,"STRONG",{});var KYr=s(Wte);lUe=r(KYr,"encoder-decoder"),KYr.forEach(t),iUe=r(Dwe," \u2014 "),IS=n(Dwe,"A",{href:!0});var eZr=s(IS);dUe=r(eZr,"EncoderDecoderConfig"),eZr.forEach(t),cUe=r(Dwe," (Encoder decoder model)"),Dwe.forEach(t),fUe=i(L),cm=n(L,"LI",{});var Gwe=s(cm);Hte=n(Gwe,"STRONG",{});var oZr=s(Hte);mUe=r(oZr,"flaubert"),oZr.forEach(t),gUe=r(Gwe," \u2014 "),NS=n(Gwe,"A",{href:!0});var rZr=s(NS);hUe=r(rZr,"FlaubertConfig"),rZr.forEach(t),pUe=r(Gwe," (FlauBERT model)"),Gwe.forEach(t),_Ue=i(L),fm=n(L,"LI",{});var Owe=s(fm);Ute=n(Owe,"STRONG",{});var tZr=s(Ute);uUe=r(tZr,"flava"),tZr.forEach(t),bUe=r(Owe," \u2014 "),qS=n(Owe,"A",{href:!0});var aZr=s(qS);vUe=r(aZr,"FlavaConfig"),aZr.forEach(t),FUe=r(Owe," (FLAVA model)"),Owe.forEach(t),TUe=i(L),mm=n(L,"LI",{});var Vwe=s(mm);Jte=n(Vwe,"STRONG",{});var nZr=s(Jte);MUe=r(nZr,"fnet"),nZr.forEach(t),EUe=r(Vwe," \u2014 "),jS=n(Vwe,"A",{href:!0});var sZr=s(jS);CUe=r(sZr,"FNetConfig"),sZr.forEach(t),wUe=r(Vwe," (FNet model)"),Vwe.forEach(t),AUe=i(L),gm=n(L,"LI",{});var Xwe=s(gm);Yte=n(Xwe,"STRONG",{});var lZr=s(Yte);LUe=r(lZr,"fsmt"),lZr.forEach(t),yUe=r(Xwe," \u2014 "),DS=n(Xwe,"A",{href:!0});var iZr=s(DS);xUe=r(iZr,"FSMTConfig"),iZr.forEach(t),$Ue=r(Xwe," (FairSeq Machine-Translation model)"),Xwe.forEach(t),kUe=i(L),hm=n(L,"LI",{});var zwe=s(hm);Zte=n(zwe,"STRONG",{});var dZr=s(Zte);SUe=r(dZr,"funnel"),dZr.forEach(t),RUe=r(zwe," \u2014 "),GS=n(zwe,"A",{href:!0});var cZr=s(GS);PUe=r(cZr,"FunnelConfig"),cZr.forEach(t),BUe=r(zwe," (Funnel Transformer model)"),zwe.forEach(t),IUe=i(L),pm=n(L,"LI",{});var Qwe=s(pm);Kte=n(Qwe,"STRONG",{});var fZr=s(Kte);NUe=r(fZr,"glpn"),fZr.forEach(t),qUe=r(Qwe," \u2014 "),OS=n(Qwe,"A",{href:!0});var mZr=s(OS);jUe=r(mZr,"GLPNConfig"),mZr.forEach(t),DUe=r(Qwe," (GLPN model)"),Qwe.forEach(t),GUe=i(L),_m=n(L,"LI",{});var Wwe=s(_m);eae=n(Wwe,"STRONG",{});var gZr=s(eae);OUe=r(gZr,"gpt2"),gZr.forEach(t),VUe=r(Wwe," \u2014 "),VS=n(Wwe,"A",{href:!0});var hZr=s(VS);XUe=r(hZr,"GPT2Config"),hZr.forEach(t),zUe=r(Wwe," (OpenAI GPT-2 model)"),Wwe.forEach(t),QUe=i(L),um=n(L,"LI",{});var Hwe=s(um);oae=n(Hwe,"STRONG",{});var pZr=s(oae);WUe=r(pZr,"gpt_neo"),pZr.forEach(t),HUe=r(Hwe," \u2014 "),XS=n(Hwe,"A",{href:!0});var _Zr=s(XS);UUe=r(_Zr,"GPTNeoConfig"),_Zr.forEach(t),JUe=r(Hwe," (GPT Neo model)"),Hwe.forEach(t),YUe=i(L),bm=n(L,"LI",{});var Uwe=s(bm);rae=n(Uwe,"STRONG",{});var uZr=s(rae);ZUe=r(uZr,"gpt_neox"),uZr.forEach(t),KUe=r(Uwe," \u2014 "),zS=n(Uwe,"A",{href:!0});var bZr=s(zS);eJe=r(bZr,"GPTNeoXConfig"),bZr.forEach(t),oJe=r(Uwe," (GPT NeoX model)"),Uwe.forEach(t),rJe=i(L),vm=n(L,"LI",{});var Jwe=s(vm);tae=n(Jwe,"STRONG",{});var vZr=s(tae);tJe=r(vZr,"gptj"),vZr.forEach(t),aJe=r(Jwe," \u2014 "),QS=n(Jwe,"A",{href:!0});var FZr=s(QS);nJe=r(FZr,"GPTJConfig"),FZr.forEach(t),sJe=r(Jwe," (GPT-J model)"),Jwe.forEach(t),lJe=i(L),Fm=n(L,"LI",{});var Ywe=s(Fm);aae=n(Ywe,"STRONG",{});var TZr=s(aae);iJe=r(TZr,"hubert"),TZr.forEach(t),dJe=r(Ywe," \u2014 "),WS=n(Ywe,"A",{href:!0});var MZr=s(WS);cJe=r(MZr,"HubertConfig"),MZr.forEach(t),fJe=r(Ywe," (Hubert model)"),Ywe.forEach(t),mJe=i(L),Tm=n(L,"LI",{});var Zwe=s(Tm);nae=n(Zwe,"STRONG",{});var EZr=s(nae);gJe=r(EZr,"ibert"),EZr.forEach(t),hJe=r(Zwe," \u2014 "),HS=n(Zwe,"A",{href:!0});var CZr=s(HS);pJe=r(CZr,"IBertConfig"),CZr.forEach(t),_Je=r(Zwe," (I-BERT model)"),Zwe.forEach(t),uJe=i(L),Mm=n(L,"LI",{});var Kwe=s(Mm);sae=n(Kwe,"STRONG",{});var wZr=s(sae);bJe=r(wZr,"imagegpt"),wZr.forEach(t),vJe=r(Kwe," \u2014 "),US=n(Kwe,"A",{href:!0});var AZr=s(US);FJe=r(AZr,"ImageGPTConfig"),AZr.forEach(t),TJe=r(Kwe," (ImageGPT model)"),Kwe.forEach(t),MJe=i(L),Em=n(L,"LI",{});var eAe=s(Em);lae=n(eAe,"STRONG",{});var LZr=s(lae);EJe=r(LZr,"layoutlm"),LZr.forEach(t),CJe=r(eAe," \u2014 "),JS=n(eAe,"A",{href:!0});var yZr=s(JS);wJe=r(yZr,"LayoutLMConfig"),yZr.forEach(t),AJe=r(eAe," (LayoutLM model)"),eAe.forEach(t),LJe=i(L),Cm=n(L,"LI",{});var oAe=s(Cm);iae=n(oAe,"STRONG",{});var xZr=s(iae);yJe=r(xZr,"layoutlmv2"),xZr.forEach(t),xJe=r(oAe," \u2014 "),YS=n(oAe,"A",{href:!0});var $Zr=s(YS);$Je=r($Zr,"LayoutLMv2Config"),$Zr.forEach(t),kJe=r(oAe," (LayoutLMv2 model)"),oAe.forEach(t),SJe=i(L),wm=n(L,"LI",{});var rAe=s(wm);dae=n(rAe,"STRONG",{});var kZr=s(dae);RJe=r(kZr,"layoutlmv3"),kZr.forEach(t),PJe=r(rAe," \u2014 "),ZS=n(rAe,"A",{href:!0});var SZr=s(ZS);BJe=r(SZr,"LayoutLMv3Config"),SZr.forEach(t),IJe=r(rAe," (LayoutLMv3 model)"),rAe.forEach(t),NJe=i(L),Am=n(L,"LI",{});var tAe=s(Am);cae=n(tAe,"STRONG",{});var RZr=s(cae);qJe=r(RZr,"led"),RZr.forEach(t),jJe=r(tAe," \u2014 "),KS=n(tAe,"A",{href:!0});var PZr=s(KS);DJe=r(PZr,"LEDConfig"),PZr.forEach(t),GJe=r(tAe," (LED model)"),tAe.forEach(t),OJe=i(L),Lm=n(L,"LI",{});var aAe=s(Lm);fae=n(aAe,"STRONG",{});var BZr=s(fae);VJe=r(BZr,"levit"),BZr.forEach(t),XJe=r(aAe," \u2014 "),eR=n(aAe,"A",{href:!0});var IZr=s(eR);zJe=r(IZr,"LevitConfig"),IZr.forEach(t),QJe=r(aAe," (LeViT model)"),aAe.forEach(t),WJe=i(L),ym=n(L,"LI",{});var nAe=s(ym);mae=n(nAe,"STRONG",{});var NZr=s(mae);HJe=r(NZr,"longformer"),NZr.forEach(t),UJe=r(nAe," \u2014 "),oR=n(nAe,"A",{href:!0});var qZr=s(oR);JJe=r(qZr,"LongformerConfig"),qZr.forEach(t),YJe=r(nAe," (Longformer model)"),nAe.forEach(t),ZJe=i(L),xm=n(L,"LI",{});var sAe=s(xm);gae=n(sAe,"STRONG",{});var jZr=s(gae);KJe=r(jZr,"longt5"),jZr.forEach(t),eYe=r(sAe," \u2014 "),rR=n(sAe,"A",{href:!0});var DZr=s(rR);oYe=r(DZr,"LongT5Config"),DZr.forEach(t),rYe=r(sAe," (LongT5 model)"),sAe.forEach(t),tYe=i(L),$m=n(L,"LI",{});var lAe=s($m);hae=n(lAe,"STRONG",{});var GZr=s(hae);aYe=r(GZr,"luke"),GZr.forEach(t),nYe=r(lAe," \u2014 "),tR=n(lAe,"A",{href:!0});var OZr=s(tR);sYe=r(OZr,"LukeConfig"),OZr.forEach(t),lYe=r(lAe," (LUKE model)"),lAe.forEach(t),iYe=i(L),km=n(L,"LI",{});var iAe=s(km);pae=n(iAe,"STRONG",{});var VZr=s(pae);dYe=r(VZr,"lxmert"),VZr.forEach(t),cYe=r(iAe," \u2014 "),aR=n(iAe,"A",{href:!0});var XZr=s(aR);fYe=r(XZr,"LxmertConfig"),XZr.forEach(t),mYe=r(iAe," (LXMERT model)"),iAe.forEach(t),gYe=i(L),Sm=n(L,"LI",{});var dAe=s(Sm);_ae=n(dAe,"STRONG",{});var zZr=s(_ae);hYe=r(zZr,"m2m_100"),zZr.forEach(t),pYe=r(dAe," \u2014 "),nR=n(dAe,"A",{href:!0});var QZr=s(nR);_Ye=r(QZr,"M2M100Config"),QZr.forEach(t),uYe=r(dAe," (M2M100 model)"),dAe.forEach(t),bYe=i(L),Rm=n(L,"LI",{});var cAe=s(Rm);uae=n(cAe,"STRONG",{});var WZr=s(uae);vYe=r(WZr,"marian"),WZr.forEach(t),FYe=r(cAe," \u2014 "),sR=n(cAe,"A",{href:!0});var HZr=s(sR);TYe=r(HZr,"MarianConfig"),HZr.forEach(t),MYe=r(cAe," (Marian model)"),cAe.forEach(t),EYe=i(L),Pm=n(L,"LI",{});var fAe=s(Pm);bae=n(fAe,"STRONG",{});var UZr=s(bae);CYe=r(UZr,"maskformer"),UZr.forEach(t),wYe=r(fAe," \u2014 "),lR=n(fAe,"A",{href:!0});var JZr=s(lR);AYe=r(JZr,"MaskFormerConfig"),JZr.forEach(t),LYe=r(fAe," (MaskFormer model)"),fAe.forEach(t),yYe=i(L),Bm=n(L,"LI",{});var mAe=s(Bm);vae=n(mAe,"STRONG",{});var YZr=s(vae);xYe=r(YZr,"mbart"),YZr.forEach(t),$Ye=r(mAe," \u2014 "),iR=n(mAe,"A",{href:!0});var ZZr=s(iR);kYe=r(ZZr,"MBartConfig"),ZZr.forEach(t),SYe=r(mAe," (mBART model)"),mAe.forEach(t),RYe=i(L),Im=n(L,"LI",{});var gAe=s(Im);Fae=n(gAe,"STRONG",{});var KZr=s(Fae);PYe=r(KZr,"mctct"),KZr.forEach(t),BYe=r(gAe," \u2014 "),dR=n(gAe,"A",{href:!0});var eKr=s(dR);IYe=r(eKr,"MCTCTConfig"),eKr.forEach(t),NYe=r(gAe," (M-CTC-T model)"),gAe.forEach(t),qYe=i(L),Nm=n(L,"LI",{});var hAe=s(Nm);Tae=n(hAe,"STRONG",{});var oKr=s(Tae);jYe=r(oKr,"megatron-bert"),oKr.forEach(t),DYe=r(hAe," \u2014 "),cR=n(hAe,"A",{href:!0});var rKr=s(cR);GYe=r(rKr,"MegatronBertConfig"),rKr.forEach(t),OYe=r(hAe," (Megatron-BERT model)"),hAe.forEach(t),VYe=i(L),qm=n(L,"LI",{});var pAe=s(qm);Mae=n(pAe,"STRONG",{});var tKr=s(Mae);XYe=r(tKr,"mobilebert"),tKr.forEach(t),zYe=r(pAe," \u2014 "),fR=n(pAe,"A",{href:!0});var aKr=s(fR);QYe=r(aKr,"MobileBertConfig"),aKr.forEach(t),WYe=r(pAe," (MobileBERT model)"),pAe.forEach(t),HYe=i(L),jm=n(L,"LI",{});var _Ae=s(jm);Eae=n(_Ae,"STRONG",{});var nKr=s(Eae);UYe=r(nKr,"mpnet"),nKr.forEach(t),JYe=r(_Ae," \u2014 "),mR=n(_Ae,"A",{href:!0});var sKr=s(mR);YYe=r(sKr,"MPNetConfig"),sKr.forEach(t),ZYe=r(_Ae," (MPNet model)"),_Ae.forEach(t),KYe=i(L),Dm=n(L,"LI",{});var uAe=s(Dm);Cae=n(uAe,"STRONG",{});var lKr=s(Cae);eZe=r(lKr,"mt5"),lKr.forEach(t),oZe=r(uAe," \u2014 "),gR=n(uAe,"A",{href:!0});var iKr=s(gR);rZe=r(iKr,"MT5Config"),iKr.forEach(t),tZe=r(uAe," (MT5 model)"),uAe.forEach(t),aZe=i(L),Gm=n(L,"LI",{});var bAe=s(Gm);wae=n(bAe,"STRONG",{});var dKr=s(wae);nZe=r(dKr,"nezha"),dKr.forEach(t),sZe=r(bAe," \u2014 "),hR=n(bAe,"A",{href:!0});var cKr=s(hR);lZe=r(cKr,"NeZhaConfig"),cKr.forEach(t),iZe=r(bAe," (NeZha model)"),bAe.forEach(t),dZe=i(L),Om=n(L,"LI",{});var vAe=s(Om);Aae=n(vAe,"STRONG",{});var fKr=s(Aae);cZe=r(fKr,"nystromformer"),fKr.forEach(t),fZe=r(vAe," \u2014 "),pR=n(vAe,"A",{href:!0});var mKr=s(pR);mZe=r(mKr,"NystromformerConfig"),mKr.forEach(t),gZe=r(vAe," (Nystr\xF6mformer model)"),vAe.forEach(t),hZe=i(L),Vm=n(L,"LI",{});var FAe=s(Vm);Lae=n(FAe,"STRONG",{});var gKr=s(Lae);pZe=r(gKr,"openai-gpt"),gKr.forEach(t),_Ze=r(FAe," \u2014 "),_R=n(FAe,"A",{href:!0});var hKr=s(_R);uZe=r(hKr,"OpenAIGPTConfig"),hKr.forEach(t),bZe=r(FAe," (OpenAI GPT model)"),FAe.forEach(t),vZe=i(L),Xm=n(L,"LI",{});var TAe=s(Xm);yae=n(TAe,"STRONG",{});var pKr=s(yae);FZe=r(pKr,"opt"),pKr.forEach(t),TZe=r(TAe," \u2014 "),uR=n(TAe,"A",{href:!0});var _Kr=s(uR);MZe=r(_Kr,"OPTConfig"),_Kr.forEach(t),EZe=r(TAe," (OPT model)"),TAe.forEach(t),CZe=i(L),zm=n(L,"LI",{});var MAe=s(zm);xae=n(MAe,"STRONG",{});var uKr=s(xae);wZe=r(uKr,"pegasus"),uKr.forEach(t),AZe=r(MAe," \u2014 "),bR=n(MAe,"A",{href:!0});var bKr=s(bR);LZe=r(bKr,"PegasusConfig"),bKr.forEach(t),yZe=r(MAe," (Pegasus model)"),MAe.forEach(t),xZe=i(L),Qm=n(L,"LI",{});var EAe=s(Qm);$ae=n(EAe,"STRONG",{});var vKr=s($ae);$Ze=r(vKr,"perceiver"),vKr.forEach(t),kZe=r(EAe," \u2014 "),vR=n(EAe,"A",{href:!0});var FKr=s(vR);SZe=r(FKr,"PerceiverConfig"),FKr.forEach(t),RZe=r(EAe," (Perceiver model)"),EAe.forEach(t),PZe=i(L),Wm=n(L,"LI",{});var CAe=s(Wm);kae=n(CAe,"STRONG",{});var TKr=s(kae);BZe=r(TKr,"plbart"),TKr.forEach(t),IZe=r(CAe," \u2014 "),FR=n(CAe,"A",{href:!0});var MKr=s(FR);NZe=r(MKr,"PLBartConfig"),MKr.forEach(t),qZe=r(CAe," (PLBart model)"),CAe.forEach(t),jZe=i(L),Hm=n(L,"LI",{});var wAe=s(Hm);Sae=n(wAe,"STRONG",{});var EKr=s(Sae);DZe=r(EKr,"poolformer"),EKr.forEach(t),GZe=r(wAe," \u2014 "),TR=n(wAe,"A",{href:!0});var CKr=s(TR);OZe=r(CKr,"PoolFormerConfig"),CKr.forEach(t),VZe=r(wAe," (PoolFormer model)"),wAe.forEach(t),XZe=i(L),Um=n(L,"LI",{});var AAe=s(Um);Rae=n(AAe,"STRONG",{});var wKr=s(Rae);zZe=r(wKr,"prophetnet"),wKr.forEach(t),QZe=r(AAe," \u2014 "),MR=n(AAe,"A",{href:!0});var AKr=s(MR);WZe=r(AKr,"ProphetNetConfig"),AKr.forEach(t),HZe=r(AAe," (ProphetNet model)"),AAe.forEach(t),UZe=i(L),Jm=n(L,"LI",{});var LAe=s(Jm);Pae=n(LAe,"STRONG",{});var LKr=s(Pae);JZe=r(LKr,"qdqbert"),LKr.forEach(t),YZe=r(LAe," \u2014 "),ER=n(LAe,"A",{href:!0});var yKr=s(ER);ZZe=r(yKr,"QDQBertConfig"),yKr.forEach(t),KZe=r(LAe," (QDQBert model)"),LAe.forEach(t),eKe=i(L),Ym=n(L,"LI",{});var yAe=s(Ym);Bae=n(yAe,"STRONG",{});var xKr=s(Bae);oKe=r(xKr,"rag"),xKr.forEach(t),rKe=r(yAe," \u2014 "),CR=n(yAe,"A",{href:!0});var $Kr=s(CR);tKe=r($Kr,"RagConfig"),$Kr.forEach(t),aKe=r(yAe," (RAG model)"),yAe.forEach(t),nKe=i(L),Zm=n(L,"LI",{});var xAe=s(Zm);Iae=n(xAe,"STRONG",{});var kKr=s(Iae);sKe=r(kKr,"realm"),kKr.forEach(t),lKe=r(xAe," \u2014 "),wR=n(xAe,"A",{href:!0});var SKr=s(wR);iKe=r(SKr,"RealmConfig"),SKr.forEach(t),dKe=r(xAe," (REALM model)"),xAe.forEach(t),cKe=i(L),Km=n(L,"LI",{});var $Ae=s(Km);Nae=n($Ae,"STRONG",{});var RKr=s(Nae);fKe=r(RKr,"reformer"),RKr.forEach(t),mKe=r($Ae," \u2014 "),AR=n($Ae,"A",{href:!0});var PKr=s(AR);gKe=r(PKr,"ReformerConfig"),PKr.forEach(t),hKe=r($Ae," (Reformer model)"),$Ae.forEach(t),pKe=i(L),eg=n(L,"LI",{});var kAe=s(eg);qae=n(kAe,"STRONG",{});var BKr=s(qae);_Ke=r(BKr,"regnet"),BKr.forEach(t),uKe=r(kAe," \u2014 "),LR=n(kAe,"A",{href:!0});var IKr=s(LR);bKe=r(IKr,"RegNetConfig"),IKr.forEach(t),vKe=r(kAe," (RegNet model)"),kAe.forEach(t),FKe=i(L),og=n(L,"LI",{});var SAe=s(og);jae=n(SAe,"STRONG",{});var NKr=s(jae);TKe=r(NKr,"rembert"),NKr.forEach(t),MKe=r(SAe," \u2014 "),yR=n(SAe,"A",{href:!0});var qKr=s(yR);EKe=r(qKr,"RemBertConfig"),qKr.forEach(t),CKe=r(SAe," (RemBERT model)"),SAe.forEach(t),wKe=i(L),rg=n(L,"LI",{});var RAe=s(rg);Dae=n(RAe,"STRONG",{});var jKr=s(Dae);AKe=r(jKr,"resnet"),jKr.forEach(t),LKe=r(RAe," \u2014 "),xR=n(RAe,"A",{href:!0});var DKr=s(xR);yKe=r(DKr,"ResNetConfig"),DKr.forEach(t),xKe=r(RAe," (ResNet model)"),RAe.forEach(t),$Ke=i(L),tg=n(L,"LI",{});var PAe=s(tg);Gae=n(PAe,"STRONG",{});var GKr=s(Gae);kKe=r(GKr,"retribert"),GKr.forEach(t),SKe=r(PAe," \u2014 "),$R=n(PAe,"A",{href:!0});var OKr=s($R);RKe=r(OKr,"RetriBertConfig"),OKr.forEach(t),PKe=r(PAe," (RetriBERT model)"),PAe.forEach(t),BKe=i(L),ag=n(L,"LI",{});var BAe=s(ag);Oae=n(BAe,"STRONG",{});var VKr=s(Oae);IKe=r(VKr,"roberta"),VKr.forEach(t),NKe=r(BAe," \u2014 "),kR=n(BAe,"A",{href:!0});var XKr=s(kR);qKe=r(XKr,"RobertaConfig"),XKr.forEach(t),jKe=r(BAe," (RoBERTa model)"),BAe.forEach(t),DKe=i(L),ng=n(L,"LI",{});var IAe=s(ng);Vae=n(IAe,"STRONG",{});var zKr=s(Vae);GKe=r(zKr,"roformer"),zKr.forEach(t),OKe=r(IAe," \u2014 "),SR=n(IAe,"A",{href:!0});var QKr=s(SR);VKe=r(QKr,"RoFormerConfig"),QKr.forEach(t),XKe=r(IAe," (RoFormer model)"),IAe.forEach(t),zKe=i(L),sg=n(L,"LI",{});var NAe=s(sg);Xae=n(NAe,"STRONG",{});var WKr=s(Xae);QKe=r(WKr,"segformer"),WKr.forEach(t),WKe=r(NAe," \u2014 "),RR=n(NAe,"A",{href:!0});var HKr=s(RR);HKe=r(HKr,"SegformerConfig"),HKr.forEach(t),UKe=r(NAe," (SegFormer model)"),NAe.forEach(t),JKe=i(L),lg=n(L,"LI",{});var qAe=s(lg);zae=n(qAe,"STRONG",{});var UKr=s(zae);YKe=r(UKr,"sew"),UKr.forEach(t),ZKe=r(qAe," \u2014 "),PR=n(qAe,"A",{href:!0});var JKr=s(PR);KKe=r(JKr,"SEWConfig"),JKr.forEach(t),eeo=r(qAe," (SEW model)"),qAe.forEach(t),oeo=i(L),ig=n(L,"LI",{});var jAe=s(ig);Qae=n(jAe,"STRONG",{});var YKr=s(Qae);reo=r(YKr,"sew-d"),YKr.forEach(t),teo=r(jAe," \u2014 "),BR=n(jAe,"A",{href:!0});var ZKr=s(BR);aeo=r(ZKr,"SEWDConfig"),ZKr.forEach(t),neo=r(jAe," (SEW-D model)"),jAe.forEach(t),seo=i(L),dg=n(L,"LI",{});var DAe=s(dg);Wae=n(DAe,"STRONG",{});var KKr=s(Wae);leo=r(KKr,"speech-encoder-decoder"),KKr.forEach(t),ieo=r(DAe," \u2014 "),IR=n(DAe,"A",{href:!0});var eet=s(IR);deo=r(eet,"SpeechEncoderDecoderConfig"),eet.forEach(t),ceo=r(DAe," (Speech Encoder decoder model)"),DAe.forEach(t),feo=i(L),cg=n(L,"LI",{});var GAe=s(cg);Hae=n(GAe,"STRONG",{});var oet=s(Hae);meo=r(oet,"speech_to_text"),oet.forEach(t),geo=r(GAe," \u2014 "),NR=n(GAe,"A",{href:!0});var ret=s(NR);heo=r(ret,"Speech2TextConfig"),ret.forEach(t),peo=r(GAe," (Speech2Text model)"),GAe.forEach(t),_eo=i(L),fg=n(L,"LI",{});var OAe=s(fg);Uae=n(OAe,"STRONG",{});var tet=s(Uae);ueo=r(tet,"speech_to_text_2"),tet.forEach(t),beo=r(OAe," \u2014 "),qR=n(OAe,"A",{href:!0});var aet=s(qR);veo=r(aet,"Speech2Text2Config"),aet.forEach(t),Feo=r(OAe," (Speech2Text2 model)"),OAe.forEach(t),Teo=i(L),mg=n(L,"LI",{});var VAe=s(mg);Jae=n(VAe,"STRONG",{});var net=s(Jae);Meo=r(net,"splinter"),net.forEach(t),Eeo=r(VAe," \u2014 "),jR=n(VAe,"A",{href:!0});var set=s(jR);Ceo=r(set,"SplinterConfig"),set.forEach(t),weo=r(VAe," (Splinter model)"),VAe.forEach(t),Aeo=i(L),gg=n(L,"LI",{});var XAe=s(gg);Yae=n(XAe,"STRONG",{});var iet=s(Yae);Leo=r(iet,"squeezebert"),iet.forEach(t),yeo=r(XAe," \u2014 "),DR=n(XAe,"A",{href:!0});var det=s(DR);xeo=r(det,"SqueezeBertConfig"),det.forEach(t),$eo=r(XAe," (SqueezeBERT model)"),XAe.forEach(t),keo=i(L),hg=n(L,"LI",{});var zAe=s(hg);Zae=n(zAe,"STRONG",{});var cet=s(Zae);Seo=r(cet,"swin"),cet.forEach(t),Reo=r(zAe," \u2014 "),GR=n(zAe,"A",{href:!0});var fet=s(GR);Peo=r(fet,"SwinConfig"),fet.forEach(t),Beo=r(zAe," (Swin Transformer model)"),zAe.forEach(t),Ieo=i(L),pg=n(L,"LI",{});var QAe=s(pg);Kae=n(QAe,"STRONG",{});var met=s(Kae);Neo=r(met,"t5"),met.forEach(t),qeo=r(QAe," \u2014 "),OR=n(QAe,"A",{href:!0});var get=s(OR);jeo=r(get,"T5Config"),get.forEach(t),Deo=r(QAe," (T5 model)"),QAe.forEach(t),Geo=i(L),_g=n(L,"LI",{});var WAe=s(_g);ene=n(WAe,"STRONG",{});var het=s(ene);Oeo=r(het,"tapas"),het.forEach(t),Veo=r(WAe," \u2014 "),VR=n(WAe,"A",{href:!0});var pet=s(VR);Xeo=r(pet,"TapasConfig"),pet.forEach(t),zeo=r(WAe," (TAPAS model)"),WAe.forEach(t),Qeo=i(L),ug=n(L,"LI",{});var HAe=s(ug);one=n(HAe,"STRONG",{});var _et=s(one);Weo=r(_et,"trajectory_transformer"),_et.forEach(t),Heo=r(HAe," \u2014 "),XR=n(HAe,"A",{href:!0});var uet=s(XR);Ueo=r(uet,"TrajectoryTransformerConfig"),uet.forEach(t),Jeo=r(HAe," (Trajectory Transformer model)"),HAe.forEach(t),Yeo=i(L),bg=n(L,"LI",{});var UAe=s(bg);rne=n(UAe,"STRONG",{});var bet=s(rne);Zeo=r(bet,"transfo-xl"),bet.forEach(t),Keo=r(UAe," \u2014 "),zR=n(UAe,"A",{href:!0});var vet=s(zR);eoo=r(vet,"TransfoXLConfig"),vet.forEach(t),ooo=r(UAe," (Transformer-XL model)"),UAe.forEach(t),roo=i(L),vg=n(L,"LI",{});var JAe=s(vg);tne=n(JAe,"STRONG",{});var Fet=s(tne);too=r(Fet,"trocr"),Fet.forEach(t),aoo=r(JAe," \u2014 "),QR=n(JAe,"A",{href:!0});var Tet=s(QR);noo=r(Tet,"TrOCRConfig"),Tet.forEach(t),soo=r(JAe," (TrOCR model)"),JAe.forEach(t),loo=i(L),Fg=n(L,"LI",{});var YAe=s(Fg);ane=n(YAe,"STRONG",{});var Met=s(ane);ioo=r(Met,"unispeech"),Met.forEach(t),doo=r(YAe," \u2014 "),WR=n(YAe,"A",{href:!0});var Eet=s(WR);coo=r(Eet,"UniSpeechConfig"),Eet.forEach(t),foo=r(YAe," (UniSpeech model)"),YAe.forEach(t),moo=i(L),Tg=n(L,"LI",{});var ZAe=s(Tg);nne=n(ZAe,"STRONG",{});var Cet=s(nne);goo=r(Cet,"unispeech-sat"),Cet.forEach(t),hoo=r(ZAe," \u2014 "),HR=n(ZAe,"A",{href:!0});var wet=s(HR);poo=r(wet,"UniSpeechSatConfig"),wet.forEach(t),_oo=r(ZAe," (UniSpeechSat model)"),ZAe.forEach(t),uoo=i(L),Mg=n(L,"LI",{});var KAe=s(Mg);sne=n(KAe,"STRONG",{});var Aet=s(sne);boo=r(Aet,"van"),Aet.forEach(t),voo=r(KAe," \u2014 "),UR=n(KAe,"A",{href:!0});var Let=s(UR);Foo=r(Let,"VanConfig"),Let.forEach(t),Too=r(KAe," (VAN model)"),KAe.forEach(t),Moo=i(L),Eg=n(L,"LI",{});var eLe=s(Eg);lne=n(eLe,"STRONG",{});var yet=s(lne);Eoo=r(yet,"vilt"),yet.forEach(t),Coo=r(eLe," \u2014 "),JR=n(eLe,"A",{href:!0});var xet=s(JR);woo=r(xet,"ViltConfig"),xet.forEach(t),Aoo=r(eLe," (ViLT model)"),eLe.forEach(t),Loo=i(L),Cg=n(L,"LI",{});var oLe=s(Cg);ine=n(oLe,"STRONG",{});var $et=s(ine);yoo=r($et,"vision-encoder-decoder"),$et.forEach(t),xoo=r(oLe," \u2014 "),YR=n(oLe,"A",{href:!0});var ket=s(YR);$oo=r(ket,"VisionEncoderDecoderConfig"),ket.forEach(t),koo=r(oLe," (Vision Encoder decoder model)"),oLe.forEach(t),Soo=i(L),wg=n(L,"LI",{});var rLe=s(wg);dne=n(rLe,"STRONG",{});var Set=s(dne);Roo=r(Set,"vision-text-dual-encoder"),Set.forEach(t),Poo=r(rLe," \u2014 "),ZR=n(rLe,"A",{href:!0});var Ret=s(ZR);Boo=r(Ret,"VisionTextDualEncoderConfig"),Ret.forEach(t),Ioo=r(rLe," (VisionTextDualEncoder model)"),rLe.forEach(t),Noo=i(L),Ag=n(L,"LI",{});var tLe=s(Ag);cne=n(tLe,"STRONG",{});var Pet=s(cne);qoo=r(Pet,"visual_bert"),Pet.forEach(t),joo=r(tLe," \u2014 "),KR=n(tLe,"A",{href:!0});var Bet=s(KR);Doo=r(Bet,"VisualBertConfig"),Bet.forEach(t),Goo=r(tLe," (VisualBERT model)"),tLe.forEach(t),Ooo=i(L),Lg=n(L,"LI",{});var aLe=s(Lg);fne=n(aLe,"STRONG",{});var Iet=s(fne);Voo=r(Iet,"vit"),Iet.forEach(t),Xoo=r(aLe," \u2014 "),eP=n(aLe,"A",{href:!0});var Net=s(eP);zoo=r(Net,"ViTConfig"),Net.forEach(t),Qoo=r(aLe," (ViT model)"),aLe.forEach(t),Woo=i(L),yg=n(L,"LI",{});var nLe=s(yg);mne=n(nLe,"STRONG",{});var qet=s(mne);Hoo=r(qet,"vit_mae"),qet.forEach(t),Uoo=r(nLe," \u2014 "),oP=n(nLe,"A",{href:!0});var jet=s(oP);Joo=r(jet,"ViTMAEConfig"),jet.forEach(t),Yoo=r(nLe," (ViTMAE model)"),nLe.forEach(t),Zoo=i(L),xg=n(L,"LI",{});var sLe=s(xg);gne=n(sLe,"STRONG",{});var Det=s(gne);Koo=r(Det,"wav2vec2"),Det.forEach(t),ero=r(sLe," \u2014 "),rP=n(sLe,"A",{href:!0});var Get=s(rP);oro=r(Get,"Wav2Vec2Config"),Get.forEach(t),rro=r(sLe," (Wav2Vec2 model)"),sLe.forEach(t),tro=i(L),$g=n(L,"LI",{});var lLe=s($g);hne=n(lLe,"STRONG",{});var Oet=s(hne);aro=r(Oet,"wav2vec2-conformer"),Oet.forEach(t),nro=r(lLe," \u2014 "),tP=n(lLe,"A",{href:!0});var Vet=s(tP);sro=r(Vet,"Wav2Vec2ConformerConfig"),Vet.forEach(t),lro=r(lLe," (Wav2Vec2-Conformer model)"),lLe.forEach(t),iro=i(L),kg=n(L,"LI",{});var iLe=s(kg);pne=n(iLe,"STRONG",{});var Xet=s(pne);dro=r(Xet,"wavlm"),Xet.forEach(t),cro=r(iLe," \u2014 "),aP=n(iLe,"A",{href:!0});var zet=s(aP);fro=r(zet,"WavLMConfig"),zet.forEach(t),mro=r(iLe," (WavLM model)"),iLe.forEach(t),gro=i(L),Sg=n(L,"LI",{});var dLe=s(Sg);_ne=n(dLe,"STRONG",{});var Qet=s(_ne);hro=r(Qet,"xglm"),Qet.forEach(t),pro=r(dLe," \u2014 "),nP=n(dLe,"A",{href:!0});var Wet=s(nP);_ro=r(Wet,"XGLMConfig"),Wet.forEach(t),uro=r(dLe," (XGLM model)"),dLe.forEach(t),bro=i(L),Rg=n(L,"LI",{});var cLe=s(Rg);une=n(cLe,"STRONG",{});var Het=s(une);vro=r(Het,"xlm"),Het.forEach(t),Fro=r(cLe," \u2014 "),sP=n(cLe,"A",{href:!0});var Uet=s(sP);Tro=r(Uet,"XLMConfig"),Uet.forEach(t),Mro=r(cLe," (XLM model)"),cLe.forEach(t),Ero=i(L),Pg=n(L,"LI",{});var fLe=s(Pg);bne=n(fLe,"STRONG",{});var Jet=s(bne);Cro=r(Jet,"xlm-prophetnet"),Jet.forEach(t),wro=r(fLe," \u2014 "),lP=n(fLe,"A",{href:!0});var Yet=s(lP);Aro=r(Yet,"XLMProphetNetConfig"),Yet.forEach(t),Lro=r(fLe," (XLM-ProphetNet model)"),fLe.forEach(t),yro=i(L),Bg=n(L,"LI",{});var mLe=s(Bg);vne=n(mLe,"STRONG",{});var Zet=s(vne);xro=r(Zet,"xlm-roberta"),Zet.forEach(t),$ro=r(mLe," \u2014 "),iP=n(mLe,"A",{href:!0});var Ket=s(iP);kro=r(Ket,"XLMRobertaConfig"),Ket.forEach(t),Sro=r(mLe," (XLM-RoBERTa model)"),mLe.forEach(t),Rro=i(L),Ig=n(L,"LI",{});var gLe=s(Ig);Fne=n(gLe,"STRONG",{});var eot=s(Fne);Pro=r(eot,"xlm-roberta-xl"),eot.forEach(t),Bro=r(gLe," \u2014 "),dP=n(gLe,"A",{href:!0});var oot=s(dP);Iro=r(oot,"XLMRobertaXLConfig"),oot.forEach(t),Nro=r(gLe," (XLM-RoBERTa-XL model)"),gLe.forEach(t),qro=i(L),Ng=n(L,"LI",{});var hLe=s(Ng);Tne=n(hLe,"STRONG",{});var rot=s(Tne);jro=r(rot,"xlnet"),rot.forEach(t),Dro=r(hLe," \u2014 "),cP=n(hLe,"A",{href:!0});var tot=s(cP);Gro=r(tot,"XLNetConfig"),tot.forEach(t),Oro=r(hLe," (XLNet model)"),hLe.forEach(t),Vro=i(L),qg=n(L,"LI",{});var pLe=s(qg);Mne=n(pLe,"STRONG",{});var aot=s(Mne);Xro=r(aot,"yolos"),aot.forEach(t),zro=r(pLe," \u2014 "),fP=n(pLe,"A",{href:!0});var not=s(fP);Qro=r(not,"YolosConfig"),not.forEach(t),Wro=r(pLe," (YOLOS model)"),pLe.forEach(t),Hro=i(L),jg=n(L,"LI",{});var _Le=s(jg);Ene=n(_Le,"STRONG",{});var sot=s(Ene);Uro=r(sot,"yoso"),sot.forEach(t),Jro=r(_Le," \u2014 "),mP=n(_Le,"A",{href:!0});var lot=s(mP);Yro=r(lot,"YosoConfig"),lot.forEach(t),Zro=r(_Le," (YOSO model)"),_Le.forEach(t),L.forEach(t),Kro=i(tt),T(Dg.$$.fragment,tt),tt.forEach(t),eto=i(rt),Gg=n(rt,"DIV",{class:!0});var DVe=s(Gg);T(BL.$$.fragment,DVe),oto=i(DVe),Cne=n(DVe,"P",{});var iot=s(Cne);rto=r(iot,"Register a new configuration for this class."),iot.forEach(t),DVe.forEach(t),rt.forEach(t),GGe=i(f),$i=n(f,"H2",{class:!0});var GVe=s($i);Og=n(GVe,"A",{id:!0,class:!0,href:!0});var dot=s(Og);wne=n(dot,"SPAN",{});var cot=s(wne);T(IL.$$.fragment,cot),cot.forEach(t),dot.forEach(t),tto=i(GVe),Ane=n(GVe,"SPAN",{});var fot=s(Ane);ato=r(fot,"AutoTokenizer"),fot.forEach(t),GVe.forEach(t),OGe=i(f),Ao=n(f,"DIV",{class:!0});var Qs=s(Ao);T(NL.$$.fragment,Qs),nto=i(Qs),qL=n(Qs,"P",{});var OVe=s(qL);sto=r(OVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),gP=n(OVe,"A",{href:!0});var mot=s(gP);lto=r(mot,"AutoTokenizer.from_pretrained()"),mot.forEach(t),ito=r(OVe," class method."),OVe.forEach(t),dto=i(Qs),jL=n(Qs,"P",{});var VVe=s(jL);cto=r(VVe,"This class cannot be instantiated directly using "),Lne=n(VVe,"CODE",{});var got=s(Lne);fto=r(got,"__init__()"),got.forEach(t),mto=r(VVe," (throws an error)."),VVe.forEach(t),gto=i(Qs),Lr=n(Qs,"DIV",{class:!0});var Ws=s(Lr);T(DL.$$.fragment,Ws),hto=i(Ws),yne=n(Ws,"P",{});var hot=s(yne);pto=r(hot,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),hot.forEach(t),_to=i(Ws),ka=n(Ws,"P",{});var yw=s(ka);uto=r(yw,"The tokenizer class to instantiate is selected based on the "),xne=n(yw,"CODE",{});var pot=s(xne);bto=r(pot,"model_type"),pot.forEach(t),vto=r(yw,` property of the config object (either
passed as an argument or loaded from `),$ne=n(yw,"CODE",{});var _ot=s($ne);Fto=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),Tto=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kne=n(yw,"CODE",{});var uot=s(kne);Mto=r(uot,"pretrained_model_name_or_path"),uot.forEach(t),Eto=r(yw,":"),yw.forEach(t),Cto=i(Ws),k=n(Ws,"UL",{});var S=s(k);qn=n(S,"LI",{});var Q$=s(qn);Sne=n(Q$,"STRONG",{});var bot=s(Sne);wto=r(bot,"albert"),bot.forEach(t),Ato=r(Q$," \u2014 "),hP=n(Q$,"A",{href:!0});var vot=s(hP);Lto=r(vot,"AlbertTokenizer"),vot.forEach(t),yto=r(Q$," or "),pP=n(Q$,"A",{href:!0});var Fot=s(pP);xto=r(Fot,"AlbertTokenizerFast"),Fot.forEach(t),$to=r(Q$," (ALBERT model)"),Q$.forEach(t),kto=i(S),jn=n(S,"LI",{});var W$=s(jn);Rne=n(W$,"STRONG",{});var Tot=s(Rne);Sto=r(Tot,"bart"),Tot.forEach(t),Rto=r(W$," \u2014 "),_P=n(W$,"A",{href:!0});var Mot=s(_P);Pto=r(Mot,"BartTokenizer"),Mot.forEach(t),Bto=r(W$," or "),uP=n(W$,"A",{href:!0});var Eot=s(uP);Ito=r(Eot,"BartTokenizerFast"),Eot.forEach(t),Nto=r(W$," (BART model)"),W$.forEach(t),qto=i(S),Dn=n(S,"LI",{});var H$=s(Dn);Pne=n(H$,"STRONG",{});var Cot=s(Pne);jto=r(Cot,"barthez"),Cot.forEach(t),Dto=r(H$," \u2014 "),bP=n(H$,"A",{href:!0});var wot=s(bP);Gto=r(wot,"BarthezTokenizer"),wot.forEach(t),Oto=r(H$," or "),vP=n(H$,"A",{href:!0});var Aot=s(vP);Vto=r(Aot,"BarthezTokenizerFast"),Aot.forEach(t),Xto=r(H$," (BARThez model)"),H$.forEach(t),zto=i(S),Vg=n(S,"LI",{});var uLe=s(Vg);Bne=n(uLe,"STRONG",{});var Lot=s(Bne);Qto=r(Lot,"bartpho"),Lot.forEach(t),Wto=r(uLe," \u2014 "),FP=n(uLe,"A",{href:!0});var yot=s(FP);Hto=r(yot,"BartphoTokenizer"),yot.forEach(t),Uto=r(uLe," (BARTpho model)"),uLe.forEach(t),Jto=i(S),Gn=n(S,"LI",{});var U$=s(Gn);Ine=n(U$,"STRONG",{});var xot=s(Ine);Yto=r(xot,"bert"),xot.forEach(t),Zto=r(U$," \u2014 "),TP=n(U$,"A",{href:!0});var $ot=s(TP);Kto=r($ot,"BertTokenizer"),$ot.forEach(t),eao=r(U$," or "),MP=n(U$,"A",{href:!0});var kot=s(MP);oao=r(kot,"BertTokenizerFast"),kot.forEach(t),rao=r(U$," (BERT model)"),U$.forEach(t),tao=i(S),Xg=n(S,"LI",{});var bLe=s(Xg);Nne=n(bLe,"STRONG",{});var Sot=s(Nne);aao=r(Sot,"bert-generation"),Sot.forEach(t),nao=r(bLe," \u2014 "),EP=n(bLe,"A",{href:!0});var Rot=s(EP);sao=r(Rot,"BertGenerationTokenizer"),Rot.forEach(t),lao=r(bLe," (Bert Generation model)"),bLe.forEach(t),iao=i(S),zg=n(S,"LI",{});var vLe=s(zg);qne=n(vLe,"STRONG",{});var Pot=s(qne);dao=r(Pot,"bert-japanese"),Pot.forEach(t),cao=r(vLe," \u2014 "),CP=n(vLe,"A",{href:!0});var Bot=s(CP);fao=r(Bot,"BertJapaneseTokenizer"),Bot.forEach(t),mao=r(vLe," (BertJapanese model)"),vLe.forEach(t),gao=i(S),Qg=n(S,"LI",{});var FLe=s(Qg);jne=n(FLe,"STRONG",{});var Iot=s(jne);hao=r(Iot,"bertweet"),Iot.forEach(t),pao=r(FLe," \u2014 "),wP=n(FLe,"A",{href:!0});var Not=s(wP);_ao=r(Not,"BertweetTokenizer"),Not.forEach(t),uao=r(FLe," (BERTweet model)"),FLe.forEach(t),bao=i(S),On=n(S,"LI",{});var J$=s(On);Dne=n(J$,"STRONG",{});var qot=s(Dne);vao=r(qot,"big_bird"),qot.forEach(t),Fao=r(J$," \u2014 "),AP=n(J$,"A",{href:!0});var jot=s(AP);Tao=r(jot,"BigBirdTokenizer"),jot.forEach(t),Mao=r(J$," or "),LP=n(J$,"A",{href:!0});var Dot=s(LP);Eao=r(Dot,"BigBirdTokenizerFast"),Dot.forEach(t),Cao=r(J$," (BigBird model)"),J$.forEach(t),wao=i(S),Vn=n(S,"LI",{});var Y$=s(Vn);Gne=n(Y$,"STRONG",{});var Got=s(Gne);Aao=r(Got,"bigbird_pegasus"),Got.forEach(t),Lao=r(Y$," \u2014 "),yP=n(Y$,"A",{href:!0});var Oot=s(yP);yao=r(Oot,"PegasusTokenizer"),Oot.forEach(t),xao=r(Y$," or "),xP=n(Y$,"A",{href:!0});var Vot=s(xP);$ao=r(Vot,"PegasusTokenizerFast"),Vot.forEach(t),kao=r(Y$," (BigBird-Pegasus model)"),Y$.forEach(t),Sao=i(S),Xn=n(S,"LI",{});var Z$=s(Xn);One=n(Z$,"STRONG",{});var Xot=s(One);Rao=r(Xot,"blenderbot"),Xot.forEach(t),Pao=r(Z$," \u2014 "),$P=n(Z$,"A",{href:!0});var zot=s($P);Bao=r(zot,"BlenderbotTokenizer"),zot.forEach(t),Iao=r(Z$," or "),kP=n(Z$,"A",{href:!0});var Qot=s(kP);Nao=r(Qot,"BlenderbotTokenizerFast"),Qot.forEach(t),qao=r(Z$," (Blenderbot model)"),Z$.forEach(t),jao=i(S),Wg=n(S,"LI",{});var TLe=s(Wg);Vne=n(TLe,"STRONG",{});var Wot=s(Vne);Dao=r(Wot,"blenderbot-small"),Wot.forEach(t),Gao=r(TLe," \u2014 "),SP=n(TLe,"A",{href:!0});var Hot=s(SP);Oao=r(Hot,"BlenderbotSmallTokenizer"),Hot.forEach(t),Vao=r(TLe," (BlenderbotSmall model)"),TLe.forEach(t),Xao=i(S),Hg=n(S,"LI",{});var MLe=s(Hg);Xne=n(MLe,"STRONG",{});var Uot=s(Xne);zao=r(Uot,"bloom"),Uot.forEach(t),Qao=r(MLe," \u2014 "),RP=n(MLe,"A",{href:!0});var Jot=s(RP);Wao=r(Jot,"BloomTokenizerFast"),Jot.forEach(t),Hao=r(MLe," (BLOOM model)"),MLe.forEach(t),Uao=i(S),Ug=n(S,"LI",{});var ELe=s(Ug);zne=n(ELe,"STRONG",{});var Yot=s(zne);Jao=r(Yot,"byt5"),Yot.forEach(t),Yao=r(ELe," \u2014 "),PP=n(ELe,"A",{href:!0});var Zot=s(PP);Zao=r(Zot,"ByT5Tokenizer"),Zot.forEach(t),Kao=r(ELe," (ByT5 model)"),ELe.forEach(t),eno=i(S),zn=n(S,"LI",{});var K$=s(zn);Qne=n(K$,"STRONG",{});var Kot=s(Qne);ono=r(Kot,"camembert"),Kot.forEach(t),rno=r(K$," \u2014 "),BP=n(K$,"A",{href:!0});var ert=s(BP);tno=r(ert,"CamembertTokenizer"),ert.forEach(t),ano=r(K$," or "),IP=n(K$,"A",{href:!0});var ort=s(IP);nno=r(ort,"CamembertTokenizerFast"),ort.forEach(t),sno=r(K$," (CamemBERT model)"),K$.forEach(t),lno=i(S),Jg=n(S,"LI",{});var CLe=s(Jg);Wne=n(CLe,"STRONG",{});var rrt=s(Wne);ino=r(rrt,"canine"),rrt.forEach(t),dno=r(CLe," \u2014 "),NP=n(CLe,"A",{href:!0});var trt=s(NP);cno=r(trt,"CanineTokenizer"),trt.forEach(t),fno=r(CLe," (CANINE model)"),CLe.forEach(t),mno=i(S),Qn=n(S,"LI",{});var ek=s(Qn);Hne=n(ek,"STRONG",{});var art=s(Hne);gno=r(art,"clip"),art.forEach(t),hno=r(ek," \u2014 "),qP=n(ek,"A",{href:!0});var nrt=s(qP);pno=r(nrt,"CLIPTokenizer"),nrt.forEach(t),_no=r(ek," or "),jP=n(ek,"A",{href:!0});var srt=s(jP);uno=r(srt,"CLIPTokenizerFast"),srt.forEach(t),bno=r(ek," (CLIP model)"),ek.forEach(t),vno=i(S),Wn=n(S,"LI",{});var ok=s(Wn);Une=n(ok,"STRONG",{});var lrt=s(Une);Fno=r(lrt,"convbert"),lrt.forEach(t),Tno=r(ok," \u2014 "),DP=n(ok,"A",{href:!0});var irt=s(DP);Mno=r(irt,"ConvBertTokenizer"),irt.forEach(t),Eno=r(ok," or "),GP=n(ok,"A",{href:!0});var drt=s(GP);Cno=r(drt,"ConvBertTokenizerFast"),drt.forEach(t),wno=r(ok," (ConvBERT model)"),ok.forEach(t),Ano=i(S),Hn=n(S,"LI",{});var rk=s(Hn);Jne=n(rk,"STRONG",{});var crt=s(Jne);Lno=r(crt,"cpm"),crt.forEach(t),yno=r(rk," \u2014 "),OP=n(rk,"A",{href:!0});var frt=s(OP);xno=r(frt,"CpmTokenizer"),frt.forEach(t),$no=r(rk," or "),VP=n(rk,"A",{href:!0});var mrt=s(VP);kno=r(mrt,"CpmTokenizerFast"),mrt.forEach(t),Sno=r(rk," (CPM model)"),rk.forEach(t),Rno=i(S),Yg=n(S,"LI",{});var wLe=s(Yg);Yne=n(wLe,"STRONG",{});var grt=s(Yne);Pno=r(grt,"ctrl"),grt.forEach(t),Bno=r(wLe," \u2014 "),XP=n(wLe,"A",{href:!0});var hrt=s(XP);Ino=r(hrt,"CTRLTokenizer"),hrt.forEach(t),Nno=r(wLe," (CTRL model)"),wLe.forEach(t),qno=i(S),Un=n(S,"LI",{});var tk=s(Un);Zne=n(tk,"STRONG",{});var prt=s(Zne);jno=r(prt,"data2vec-text"),prt.forEach(t),Dno=r(tk," \u2014 "),zP=n(tk,"A",{href:!0});var _rt=s(zP);Gno=r(_rt,"RobertaTokenizer"),_rt.forEach(t),Ono=r(tk," or "),QP=n(tk,"A",{href:!0});var urt=s(QP);Vno=r(urt,"RobertaTokenizerFast"),urt.forEach(t),Xno=r(tk," (Data2VecText model)"),tk.forEach(t),zno=i(S),Jn=n(S,"LI",{});var ak=s(Jn);Kne=n(ak,"STRONG",{});var brt=s(Kne);Qno=r(brt,"deberta"),brt.forEach(t),Wno=r(ak," \u2014 "),WP=n(ak,"A",{href:!0});var vrt=s(WP);Hno=r(vrt,"DebertaTokenizer"),vrt.forEach(t),Uno=r(ak," or "),HP=n(ak,"A",{href:!0});var Frt=s(HP);Jno=r(Frt,"DebertaTokenizerFast"),Frt.forEach(t),Yno=r(ak," (DeBERTa model)"),ak.forEach(t),Zno=i(S),Yn=n(S,"LI",{});var nk=s(Yn);ese=n(nk,"STRONG",{});var Trt=s(ese);Kno=r(Trt,"deberta-v2"),Trt.forEach(t),eso=r(nk," \u2014 "),UP=n(nk,"A",{href:!0});var Mrt=s(UP);oso=r(Mrt,"DebertaV2Tokenizer"),Mrt.forEach(t),rso=r(nk," or "),JP=n(nk,"A",{href:!0});var Ert=s(JP);tso=r(Ert,"DebertaV2TokenizerFast"),Ert.forEach(t),aso=r(nk," (DeBERTa-v2 model)"),nk.forEach(t),nso=i(S),Zn=n(S,"LI",{});var sk=s(Zn);ose=n(sk,"STRONG",{});var Crt=s(ose);sso=r(Crt,"distilbert"),Crt.forEach(t),lso=r(sk," \u2014 "),YP=n(sk,"A",{href:!0});var wrt=s(YP);iso=r(wrt,"DistilBertTokenizer"),wrt.forEach(t),dso=r(sk," or "),ZP=n(sk,"A",{href:!0});var Art=s(ZP);cso=r(Art,"DistilBertTokenizerFast"),Art.forEach(t),fso=r(sk," (DistilBERT model)"),sk.forEach(t),mso=i(S),Kn=n(S,"LI",{});var lk=s(Kn);rse=n(lk,"STRONG",{});var Lrt=s(rse);gso=r(Lrt,"dpr"),Lrt.forEach(t),hso=r(lk," \u2014 "),KP=n(lk,"A",{href:!0});var yrt=s(KP);pso=r(yrt,"DPRQuestionEncoderTokenizer"),yrt.forEach(t),_so=r(lk," or "),eB=n(lk,"A",{href:!0});var xrt=s(eB);uso=r(xrt,"DPRQuestionEncoderTokenizerFast"),xrt.forEach(t),bso=r(lk," (DPR model)"),lk.forEach(t),vso=i(S),es=n(S,"LI",{});var ik=s(es);tse=n(ik,"STRONG",{});var $rt=s(tse);Fso=r($rt,"electra"),$rt.forEach(t),Tso=r(ik," \u2014 "),oB=n(ik,"A",{href:!0});var krt=s(oB);Mso=r(krt,"ElectraTokenizer"),krt.forEach(t),Eso=r(ik," or "),rB=n(ik,"A",{href:!0});var Srt=s(rB);Cso=r(Srt,"ElectraTokenizerFast"),Srt.forEach(t),wso=r(ik," (ELECTRA model)"),ik.forEach(t),Aso=i(S),Zg=n(S,"LI",{});var ALe=s(Zg);ase=n(ALe,"STRONG",{});var Rrt=s(ase);Lso=r(Rrt,"flaubert"),Rrt.forEach(t),yso=r(ALe," \u2014 "),tB=n(ALe,"A",{href:!0});var Prt=s(tB);xso=r(Prt,"FlaubertTokenizer"),Prt.forEach(t),$so=r(ALe," (FlauBERT model)"),ALe.forEach(t),kso=i(S),os=n(S,"LI",{});var dk=s(os);nse=n(dk,"STRONG",{});var Brt=s(nse);Sso=r(Brt,"fnet"),Brt.forEach(t),Rso=r(dk," \u2014 "),aB=n(dk,"A",{href:!0});var Irt=s(aB);Pso=r(Irt,"FNetTokenizer"),Irt.forEach(t),Bso=r(dk," or "),nB=n(dk,"A",{href:!0});var Nrt=s(nB);Iso=r(Nrt,"FNetTokenizerFast"),Nrt.forEach(t),Nso=r(dk," (FNet model)"),dk.forEach(t),qso=i(S),Kg=n(S,"LI",{});var LLe=s(Kg);sse=n(LLe,"STRONG",{});var qrt=s(sse);jso=r(qrt,"fsmt"),qrt.forEach(t),Dso=r(LLe," \u2014 "),sB=n(LLe,"A",{href:!0});var jrt=s(sB);Gso=r(jrt,"FSMTTokenizer"),jrt.forEach(t),Oso=r(LLe," (FairSeq Machine-Translation model)"),LLe.forEach(t),Vso=i(S),rs=n(S,"LI",{});var ck=s(rs);lse=n(ck,"STRONG",{});var Drt=s(lse);Xso=r(Drt,"funnel"),Drt.forEach(t),zso=r(ck," \u2014 "),lB=n(ck,"A",{href:!0});var Grt=s(lB);Qso=r(Grt,"FunnelTokenizer"),Grt.forEach(t),Wso=r(ck," or "),iB=n(ck,"A",{href:!0});var Ort=s(iB);Hso=r(Ort,"FunnelTokenizerFast"),Ort.forEach(t),Uso=r(ck," (Funnel Transformer model)"),ck.forEach(t),Jso=i(S),ts=n(S,"LI",{});var fk=s(ts);ise=n(fk,"STRONG",{});var Vrt=s(ise);Yso=r(Vrt,"gpt2"),Vrt.forEach(t),Zso=r(fk," \u2014 "),dB=n(fk,"A",{href:!0});var Xrt=s(dB);Kso=r(Xrt,"GPT2Tokenizer"),Xrt.forEach(t),elo=r(fk," or "),cB=n(fk,"A",{href:!0});var zrt=s(cB);olo=r(zrt,"GPT2TokenizerFast"),zrt.forEach(t),rlo=r(fk," (OpenAI GPT-2 model)"),fk.forEach(t),tlo=i(S),as=n(S,"LI",{});var mk=s(as);dse=n(mk,"STRONG",{});var Qrt=s(dse);alo=r(Qrt,"gpt_neo"),Qrt.forEach(t),nlo=r(mk," \u2014 "),fB=n(mk,"A",{href:!0});var Wrt=s(fB);slo=r(Wrt,"GPT2Tokenizer"),Wrt.forEach(t),llo=r(mk," or "),mB=n(mk,"A",{href:!0});var Hrt=s(mB);ilo=r(Hrt,"GPT2TokenizerFast"),Hrt.forEach(t),dlo=r(mk," (GPT Neo model)"),mk.forEach(t),clo=i(S),eh=n(S,"LI",{});var yLe=s(eh);cse=n(yLe,"STRONG",{});var Urt=s(cse);flo=r(Urt,"gpt_neox"),Urt.forEach(t),mlo=r(yLe," \u2014 "),gB=n(yLe,"A",{href:!0});var Jrt=s(gB);glo=r(Jrt,"GPTNeoXTokenizerFast"),Jrt.forEach(t),hlo=r(yLe," (GPT NeoX model)"),yLe.forEach(t),plo=i(S),ns=n(S,"LI",{});var gk=s(ns);fse=n(gk,"STRONG",{});var Yrt=s(fse);_lo=r(Yrt,"gptj"),Yrt.forEach(t),ulo=r(gk," \u2014 "),hB=n(gk,"A",{href:!0});var Zrt=s(hB);blo=r(Zrt,"GPT2Tokenizer"),Zrt.forEach(t),vlo=r(gk," or "),pB=n(gk,"A",{href:!0});var Krt=s(pB);Flo=r(Krt,"GPT2TokenizerFast"),Krt.forEach(t),Tlo=r(gk," (GPT-J model)"),gk.forEach(t),Mlo=i(S),ss=n(S,"LI",{});var hk=s(ss);mse=n(hk,"STRONG",{});var ett=s(mse);Elo=r(ett,"herbert"),ett.forEach(t),Clo=r(hk," \u2014 "),_B=n(hk,"A",{href:!0});var ott=s(_B);wlo=r(ott,"HerbertTokenizer"),ott.forEach(t),Alo=r(hk," or "),uB=n(hk,"A",{href:!0});var rtt=s(uB);Llo=r(rtt,"HerbertTokenizerFast"),rtt.forEach(t),ylo=r(hk," (HerBERT model)"),hk.forEach(t),xlo=i(S),oh=n(S,"LI",{});var xLe=s(oh);gse=n(xLe,"STRONG",{});var ttt=s(gse);$lo=r(ttt,"hubert"),ttt.forEach(t),klo=r(xLe," \u2014 "),bB=n(xLe,"A",{href:!0});var att=s(bB);Slo=r(att,"Wav2Vec2CTCTokenizer"),att.forEach(t),Rlo=r(xLe," (Hubert model)"),xLe.forEach(t),Plo=i(S),ls=n(S,"LI",{});var pk=s(ls);hse=n(pk,"STRONG",{});var ntt=s(hse);Blo=r(ntt,"ibert"),ntt.forEach(t),Ilo=r(pk," \u2014 "),vB=n(pk,"A",{href:!0});var stt=s(vB);Nlo=r(stt,"RobertaTokenizer"),stt.forEach(t),qlo=r(pk," or "),FB=n(pk,"A",{href:!0});var ltt=s(FB);jlo=r(ltt,"RobertaTokenizerFast"),ltt.forEach(t),Dlo=r(pk," (I-BERT model)"),pk.forEach(t),Glo=i(S),is=n(S,"LI",{});var _k=s(is);pse=n(_k,"STRONG",{});var itt=s(pse);Olo=r(itt,"layoutlm"),itt.forEach(t),Vlo=r(_k," \u2014 "),TB=n(_k,"A",{href:!0});var dtt=s(TB);Xlo=r(dtt,"LayoutLMTokenizer"),dtt.forEach(t),zlo=r(_k," or "),MB=n(_k,"A",{href:!0});var ctt=s(MB);Qlo=r(ctt,"LayoutLMTokenizerFast"),ctt.forEach(t),Wlo=r(_k," (LayoutLM model)"),_k.forEach(t),Hlo=i(S),ds=n(S,"LI",{});var uk=s(ds);_se=n(uk,"STRONG",{});var ftt=s(_se);Ulo=r(ftt,"layoutlmv2"),ftt.forEach(t),Jlo=r(uk," \u2014 "),EB=n(uk,"A",{href:!0});var mtt=s(EB);Ylo=r(mtt,"LayoutLMv2Tokenizer"),mtt.forEach(t),Zlo=r(uk," or "),CB=n(uk,"A",{href:!0});var gtt=s(CB);Klo=r(gtt,"LayoutLMv2TokenizerFast"),gtt.forEach(t),eio=r(uk," (LayoutLMv2 model)"),uk.forEach(t),oio=i(S),cs=n(S,"LI",{});var bk=s(cs);use=n(bk,"STRONG",{});var htt=s(use);rio=r(htt,"layoutlmv3"),htt.forEach(t),tio=r(bk," \u2014 "),wB=n(bk,"A",{href:!0});var ptt=s(wB);aio=r(ptt,"LayoutLMv3Tokenizer"),ptt.forEach(t),nio=r(bk," or "),AB=n(bk,"A",{href:!0});var _tt=s(AB);sio=r(_tt,"LayoutLMv3TokenizerFast"),_tt.forEach(t),lio=r(bk," (LayoutLMv3 model)"),bk.forEach(t),iio=i(S),fs=n(S,"LI",{});var vk=s(fs);bse=n(vk,"STRONG",{});var utt=s(bse);dio=r(utt,"layoutxlm"),utt.forEach(t),cio=r(vk," \u2014 "),LB=n(vk,"A",{href:!0});var btt=s(LB);fio=r(btt,"LayoutXLMTokenizer"),btt.forEach(t),mio=r(vk," or "),yB=n(vk,"A",{href:!0});var vtt=s(yB);gio=r(vtt,"LayoutXLMTokenizerFast"),vtt.forEach(t),hio=r(vk," (LayoutXLM model)"),vk.forEach(t),pio=i(S),ms=n(S,"LI",{});var Fk=s(ms);vse=n(Fk,"STRONG",{});var Ftt=s(vse);_io=r(Ftt,"led"),Ftt.forEach(t),uio=r(Fk," \u2014 "),xB=n(Fk,"A",{href:!0});var Ttt=s(xB);bio=r(Ttt,"LEDTokenizer"),Ttt.forEach(t),vio=r(Fk," or "),$B=n(Fk,"A",{href:!0});var Mtt=s($B);Fio=r(Mtt,"LEDTokenizerFast"),Mtt.forEach(t),Tio=r(Fk," (LED model)"),Fk.forEach(t),Mio=i(S),gs=n(S,"LI",{});var Tk=s(gs);Fse=n(Tk,"STRONG",{});var Ett=s(Fse);Eio=r(Ett,"longformer"),Ett.forEach(t),Cio=r(Tk," \u2014 "),kB=n(Tk,"A",{href:!0});var Ctt=s(kB);wio=r(Ctt,"LongformerTokenizer"),Ctt.forEach(t),Aio=r(Tk," or "),SB=n(Tk,"A",{href:!0});var wtt=s(SB);Lio=r(wtt,"LongformerTokenizerFast"),wtt.forEach(t),yio=r(Tk," (Longformer model)"),Tk.forEach(t),xio=i(S),hs=n(S,"LI",{});var Mk=s(hs);Tse=n(Mk,"STRONG",{});var Att=s(Tse);$io=r(Att,"longt5"),Att.forEach(t),kio=r(Mk," \u2014 "),RB=n(Mk,"A",{href:!0});var Ltt=s(RB);Sio=r(Ltt,"T5Tokenizer"),Ltt.forEach(t),Rio=r(Mk," or "),PB=n(Mk,"A",{href:!0});var ytt=s(PB);Pio=r(ytt,"T5TokenizerFast"),ytt.forEach(t),Bio=r(Mk," (LongT5 model)"),Mk.forEach(t),Iio=i(S),rh=n(S,"LI",{});var $Le=s(rh);Mse=n($Le,"STRONG",{});var xtt=s(Mse);Nio=r(xtt,"luke"),xtt.forEach(t),qio=r($Le," \u2014 "),BB=n($Le,"A",{href:!0});var $tt=s(BB);jio=r($tt,"LukeTokenizer"),$tt.forEach(t),Dio=r($Le," (LUKE model)"),$Le.forEach(t),Gio=i(S),ps=n(S,"LI",{});var Ek=s(ps);Ese=n(Ek,"STRONG",{});var ktt=s(Ese);Oio=r(ktt,"lxmert"),ktt.forEach(t),Vio=r(Ek," \u2014 "),IB=n(Ek,"A",{href:!0});var Stt=s(IB);Xio=r(Stt,"LxmertTokenizer"),Stt.forEach(t),zio=r(Ek," or "),NB=n(Ek,"A",{href:!0});var Rtt=s(NB);Qio=r(Rtt,"LxmertTokenizerFast"),Rtt.forEach(t),Wio=r(Ek," (LXMERT model)"),Ek.forEach(t),Hio=i(S),th=n(S,"LI",{});var kLe=s(th);Cse=n(kLe,"STRONG",{});var Ptt=s(Cse);Uio=r(Ptt,"m2m_100"),Ptt.forEach(t),Jio=r(kLe," \u2014 "),qB=n(kLe,"A",{href:!0});var Btt=s(qB);Yio=r(Btt,"M2M100Tokenizer"),Btt.forEach(t),Zio=r(kLe," (M2M100 model)"),kLe.forEach(t),Kio=i(S),ah=n(S,"LI",{});var SLe=s(ah);wse=n(SLe,"STRONG",{});var Itt=s(wse);edo=r(Itt,"marian"),Itt.forEach(t),odo=r(SLe," \u2014 "),jB=n(SLe,"A",{href:!0});var Ntt=s(jB);rdo=r(Ntt,"MarianTokenizer"),Ntt.forEach(t),tdo=r(SLe," (Marian model)"),SLe.forEach(t),ado=i(S),_s=n(S,"LI",{});var Ck=s(_s);Ase=n(Ck,"STRONG",{});var qtt=s(Ase);ndo=r(qtt,"mbart"),qtt.forEach(t),sdo=r(Ck," \u2014 "),DB=n(Ck,"A",{href:!0});var jtt=s(DB);ldo=r(jtt,"MBartTokenizer"),jtt.forEach(t),ido=r(Ck," or "),GB=n(Ck,"A",{href:!0});var Dtt=s(GB);ddo=r(Dtt,"MBartTokenizerFast"),Dtt.forEach(t),cdo=r(Ck," (mBART model)"),Ck.forEach(t),fdo=i(S),us=n(S,"LI",{});var wk=s(us);Lse=n(wk,"STRONG",{});var Gtt=s(Lse);mdo=r(Gtt,"mbart50"),Gtt.forEach(t),gdo=r(wk," \u2014 "),OB=n(wk,"A",{href:!0});var Ott=s(OB);hdo=r(Ott,"MBart50Tokenizer"),Ott.forEach(t),pdo=r(wk," or "),VB=n(wk,"A",{href:!0});var Vtt=s(VB);_do=r(Vtt,"MBart50TokenizerFast"),Vtt.forEach(t),udo=r(wk," (mBART-50 model)"),wk.forEach(t),bdo=i(S),bs=n(S,"LI",{});var Ak=s(bs);yse=n(Ak,"STRONG",{});var Xtt=s(yse);vdo=r(Xtt,"megatron-bert"),Xtt.forEach(t),Fdo=r(Ak," \u2014 "),XB=n(Ak,"A",{href:!0});var ztt=s(XB);Tdo=r(ztt,"BertTokenizer"),ztt.forEach(t),Mdo=r(Ak," or "),zB=n(Ak,"A",{href:!0});var Qtt=s(zB);Edo=r(Qtt,"BertTokenizerFast"),Qtt.forEach(t),Cdo=r(Ak," (Megatron-BERT model)"),Ak.forEach(t),wdo=i(S),nh=n(S,"LI",{});var RLe=s(nh);xse=n(RLe,"STRONG",{});var Wtt=s(xse);Ado=r(Wtt,"mluke"),Wtt.forEach(t),Ldo=r(RLe," \u2014 "),QB=n(RLe,"A",{href:!0});var Htt=s(QB);ydo=r(Htt,"MLukeTokenizer"),Htt.forEach(t),xdo=r(RLe," (mLUKE model)"),RLe.forEach(t),$do=i(S),vs=n(S,"LI",{});var Lk=s(vs);$se=n(Lk,"STRONG",{});var Utt=s($se);kdo=r(Utt,"mobilebert"),Utt.forEach(t),Sdo=r(Lk," \u2014 "),WB=n(Lk,"A",{href:!0});var Jtt=s(WB);Rdo=r(Jtt,"MobileBertTokenizer"),Jtt.forEach(t),Pdo=r(Lk," or "),HB=n(Lk,"A",{href:!0});var Ytt=s(HB);Bdo=r(Ytt,"MobileBertTokenizerFast"),Ytt.forEach(t),Ido=r(Lk," (MobileBERT model)"),Lk.forEach(t),Ndo=i(S),Fs=n(S,"LI",{});var yk=s(Fs);kse=n(yk,"STRONG",{});var Ztt=s(kse);qdo=r(Ztt,"mpnet"),Ztt.forEach(t),jdo=r(yk," \u2014 "),UB=n(yk,"A",{href:!0});var Ktt=s(UB);Ddo=r(Ktt,"MPNetTokenizer"),Ktt.forEach(t),Gdo=r(yk," or "),JB=n(yk,"A",{href:!0});var eat=s(JB);Odo=r(eat,"MPNetTokenizerFast"),eat.forEach(t),Vdo=r(yk," (MPNet model)"),yk.forEach(t),Xdo=i(S),Ts=n(S,"LI",{});var xk=s(Ts);Sse=n(xk,"STRONG",{});var oat=s(Sse);zdo=r(oat,"mt5"),oat.forEach(t),Qdo=r(xk," \u2014 "),YB=n(xk,"A",{href:!0});var rat=s(YB);Wdo=r(rat,"MT5Tokenizer"),rat.forEach(t),Hdo=r(xk," or "),ZB=n(xk,"A",{href:!0});var tat=s(ZB);Udo=r(tat,"MT5TokenizerFast"),tat.forEach(t),Jdo=r(xk," (MT5 model)"),xk.forEach(t),Ydo=i(S),Ms=n(S,"LI",{});var $k=s(Ms);Rse=n($k,"STRONG",{});var aat=s(Rse);Zdo=r(aat,"nystromformer"),aat.forEach(t),Kdo=r($k," \u2014 "),KB=n($k,"A",{href:!0});var nat=s(KB);eco=r(nat,"AlbertTokenizer"),nat.forEach(t),oco=r($k," or "),eI=n($k,"A",{href:!0});var sat=s(eI);rco=r(sat,"AlbertTokenizerFast"),sat.forEach(t),tco=r($k," (Nystr\xF6mformer model)"),$k.forEach(t),aco=i(S),Es=n(S,"LI",{});var kk=s(Es);Pse=n(kk,"STRONG",{});var lat=s(Pse);nco=r(lat,"openai-gpt"),lat.forEach(t),sco=r(kk," \u2014 "),oI=n(kk,"A",{href:!0});var iat=s(oI);lco=r(iat,"OpenAIGPTTokenizer"),iat.forEach(t),ico=r(kk," or "),rI=n(kk,"A",{href:!0});var dat=s(rI);dco=r(dat,"OpenAIGPTTokenizerFast"),dat.forEach(t),cco=r(kk," (OpenAI GPT model)"),kk.forEach(t),fco=i(S),sh=n(S,"LI",{});var PLe=s(sh);Bse=n(PLe,"STRONG",{});var cat=s(Bse);mco=r(cat,"opt"),cat.forEach(t),gco=r(PLe," \u2014 "),tI=n(PLe,"A",{href:!0});var fat=s(tI);hco=r(fat,"GPT2Tokenizer"),fat.forEach(t),pco=r(PLe," (OPT model)"),PLe.forEach(t),_co=i(S),Cs=n(S,"LI",{});var Sk=s(Cs);Ise=n(Sk,"STRONG",{});var mat=s(Ise);uco=r(mat,"pegasus"),mat.forEach(t),bco=r(Sk," \u2014 "),aI=n(Sk,"A",{href:!0});var gat=s(aI);vco=r(gat,"PegasusTokenizer"),gat.forEach(t),Fco=r(Sk," or "),nI=n(Sk,"A",{href:!0});var hat=s(nI);Tco=r(hat,"PegasusTokenizerFast"),hat.forEach(t),Mco=r(Sk," (Pegasus model)"),Sk.forEach(t),Eco=i(S),lh=n(S,"LI",{});var BLe=s(lh);Nse=n(BLe,"STRONG",{});var pat=s(Nse);Cco=r(pat,"perceiver"),pat.forEach(t),wco=r(BLe," \u2014 "),sI=n(BLe,"A",{href:!0});var _at=s(sI);Aco=r(_at,"PerceiverTokenizer"),_at.forEach(t),Lco=r(BLe," (Perceiver model)"),BLe.forEach(t),yco=i(S),ih=n(S,"LI",{});var ILe=s(ih);qse=n(ILe,"STRONG",{});var uat=s(qse);xco=r(uat,"phobert"),uat.forEach(t),$co=r(ILe," \u2014 "),lI=n(ILe,"A",{href:!0});var bat=s(lI);kco=r(bat,"PhobertTokenizer"),bat.forEach(t),Sco=r(ILe," (PhoBERT model)"),ILe.forEach(t),Rco=i(S),dh=n(S,"LI",{});var NLe=s(dh);jse=n(NLe,"STRONG",{});var vat=s(jse);Pco=r(vat,"plbart"),vat.forEach(t),Bco=r(NLe," \u2014 "),iI=n(NLe,"A",{href:!0});var Fat=s(iI);Ico=r(Fat,"PLBartTokenizer"),Fat.forEach(t),Nco=r(NLe," (PLBart model)"),NLe.forEach(t),qco=i(S),ch=n(S,"LI",{});var qLe=s(ch);Dse=n(qLe,"STRONG",{});var Tat=s(Dse);jco=r(Tat,"prophetnet"),Tat.forEach(t),Dco=r(qLe," \u2014 "),dI=n(qLe,"A",{href:!0});var Mat=s(dI);Gco=r(Mat,"ProphetNetTokenizer"),Mat.forEach(t),Oco=r(qLe," (ProphetNet model)"),qLe.forEach(t),Vco=i(S),ws=n(S,"LI",{});var Rk=s(ws);Gse=n(Rk,"STRONG",{});var Eat=s(Gse);Xco=r(Eat,"qdqbert"),Eat.forEach(t),zco=r(Rk," \u2014 "),cI=n(Rk,"A",{href:!0});var Cat=s(cI);Qco=r(Cat,"BertTokenizer"),Cat.forEach(t),Wco=r(Rk," or "),fI=n(Rk,"A",{href:!0});var wat=s(fI);Hco=r(wat,"BertTokenizerFast"),wat.forEach(t),Uco=r(Rk," (QDQBert model)"),Rk.forEach(t),Jco=i(S),fh=n(S,"LI",{});var jLe=s(fh);Ose=n(jLe,"STRONG",{});var Aat=s(Ose);Yco=r(Aat,"rag"),Aat.forEach(t),Zco=r(jLe," \u2014 "),mI=n(jLe,"A",{href:!0});var Lat=s(mI);Kco=r(Lat,"RagTokenizer"),Lat.forEach(t),efo=r(jLe," (RAG model)"),jLe.forEach(t),ofo=i(S),As=n(S,"LI",{});var Pk=s(As);Vse=n(Pk,"STRONG",{});var yat=s(Vse);rfo=r(yat,"realm"),yat.forEach(t),tfo=r(Pk," \u2014 "),gI=n(Pk,"A",{href:!0});var xat=s(gI);afo=r(xat,"RealmTokenizer"),xat.forEach(t),nfo=r(Pk," or "),hI=n(Pk,"A",{href:!0});var $at=s(hI);sfo=r($at,"RealmTokenizerFast"),$at.forEach(t),lfo=r(Pk," (REALM model)"),Pk.forEach(t),ifo=i(S),Ls=n(S,"LI",{});var Bk=s(Ls);Xse=n(Bk,"STRONG",{});var kat=s(Xse);dfo=r(kat,"reformer"),kat.forEach(t),cfo=r(Bk," \u2014 "),pI=n(Bk,"A",{href:!0});var Sat=s(pI);ffo=r(Sat,"ReformerTokenizer"),Sat.forEach(t),mfo=r(Bk," or "),_I=n(Bk,"A",{href:!0});var Rat=s(_I);gfo=r(Rat,"ReformerTokenizerFast"),Rat.forEach(t),hfo=r(Bk," (Reformer model)"),Bk.forEach(t),pfo=i(S),ys=n(S,"LI",{});var Ik=s(ys);zse=n(Ik,"STRONG",{});var Pat=s(zse);_fo=r(Pat,"rembert"),Pat.forEach(t),ufo=r(Ik," \u2014 "),uI=n(Ik,"A",{href:!0});var Bat=s(uI);bfo=r(Bat,"RemBertTokenizer"),Bat.forEach(t),vfo=r(Ik," or "),bI=n(Ik,"A",{href:!0});var Iat=s(bI);Ffo=r(Iat,"RemBertTokenizerFast"),Iat.forEach(t),Tfo=r(Ik," (RemBERT model)"),Ik.forEach(t),Mfo=i(S),xs=n(S,"LI",{});var Nk=s(xs);Qse=n(Nk,"STRONG",{});var Nat=s(Qse);Efo=r(Nat,"retribert"),Nat.forEach(t),Cfo=r(Nk," \u2014 "),vI=n(Nk,"A",{href:!0});var qat=s(vI);wfo=r(qat,"RetriBertTokenizer"),qat.forEach(t),Afo=r(Nk," or "),FI=n(Nk,"A",{href:!0});var jat=s(FI);Lfo=r(jat,"RetriBertTokenizerFast"),jat.forEach(t),yfo=r(Nk," (RetriBERT model)"),Nk.forEach(t),xfo=i(S),$s=n(S,"LI",{});var qk=s($s);Wse=n(qk,"STRONG",{});var Dat=s(Wse);$fo=r(Dat,"roberta"),Dat.forEach(t),kfo=r(qk," \u2014 "),TI=n(qk,"A",{href:!0});var Gat=s(TI);Sfo=r(Gat,"RobertaTokenizer"),Gat.forEach(t),Rfo=r(qk," or "),MI=n(qk,"A",{href:!0});var Oat=s(MI);Pfo=r(Oat,"RobertaTokenizerFast"),Oat.forEach(t),Bfo=r(qk," (RoBERTa model)"),qk.forEach(t),Ifo=i(S),ks=n(S,"LI",{});var jk=s(ks);Hse=n(jk,"STRONG",{});var Vat=s(Hse);Nfo=r(Vat,"roformer"),Vat.forEach(t),qfo=r(jk," \u2014 "),EI=n(jk,"A",{href:!0});var Xat=s(EI);jfo=r(Xat,"RoFormerTokenizer"),Xat.forEach(t),Dfo=r(jk," or "),CI=n(jk,"A",{href:!0});var zat=s(CI);Gfo=r(zat,"RoFormerTokenizerFast"),zat.forEach(t),Ofo=r(jk," (RoFormer model)"),jk.forEach(t),Vfo=i(S),mh=n(S,"LI",{});var DLe=s(mh);Use=n(DLe,"STRONG",{});var Qat=s(Use);Xfo=r(Qat,"speech_to_text"),Qat.forEach(t),zfo=r(DLe," \u2014 "),wI=n(DLe,"A",{href:!0});var Wat=s(wI);Qfo=r(Wat,"Speech2TextTokenizer"),Wat.forEach(t),Wfo=r(DLe," (Speech2Text model)"),DLe.forEach(t),Hfo=i(S),gh=n(S,"LI",{});var GLe=s(gh);Jse=n(GLe,"STRONG",{});var Hat=s(Jse);Ufo=r(Hat,"speech_to_text_2"),Hat.forEach(t),Jfo=r(GLe," \u2014 "),AI=n(GLe,"A",{href:!0});var Uat=s(AI);Yfo=r(Uat,"Speech2Text2Tokenizer"),Uat.forEach(t),Zfo=r(GLe," (Speech2Text2 model)"),GLe.forEach(t),Kfo=i(S),Ss=n(S,"LI",{});var Dk=s(Ss);Yse=n(Dk,"STRONG",{});var Jat=s(Yse);emo=r(Jat,"splinter"),Jat.forEach(t),omo=r(Dk," \u2014 "),LI=n(Dk,"A",{href:!0});var Yat=s(LI);rmo=r(Yat,"SplinterTokenizer"),Yat.forEach(t),tmo=r(Dk," or "),yI=n(Dk,"A",{href:!0});var Zat=s(yI);amo=r(Zat,"SplinterTokenizerFast"),Zat.forEach(t),nmo=r(Dk," (Splinter model)"),Dk.forEach(t),smo=i(S),Rs=n(S,"LI",{});var Gk=s(Rs);Zse=n(Gk,"STRONG",{});var Kat=s(Zse);lmo=r(Kat,"squeezebert"),Kat.forEach(t),imo=r(Gk," \u2014 "),xI=n(Gk,"A",{href:!0});var ent=s(xI);dmo=r(ent,"SqueezeBertTokenizer"),ent.forEach(t),cmo=r(Gk," or "),$I=n(Gk,"A",{href:!0});var ont=s($I);fmo=r(ont,"SqueezeBertTokenizerFast"),ont.forEach(t),mmo=r(Gk," (SqueezeBERT model)"),Gk.forEach(t),gmo=i(S),Ps=n(S,"LI",{});var Ok=s(Ps);Kse=n(Ok,"STRONG",{});var rnt=s(Kse);hmo=r(rnt,"t5"),rnt.forEach(t),pmo=r(Ok," \u2014 "),kI=n(Ok,"A",{href:!0});var tnt=s(kI);_mo=r(tnt,"T5Tokenizer"),tnt.forEach(t),umo=r(Ok," or "),SI=n(Ok,"A",{href:!0});var ant=s(SI);bmo=r(ant,"T5TokenizerFast"),ant.forEach(t),vmo=r(Ok," (T5 model)"),Ok.forEach(t),Fmo=i(S),hh=n(S,"LI",{});var OLe=s(hh);ele=n(OLe,"STRONG",{});var nnt=s(ele);Tmo=r(nnt,"tapas"),nnt.forEach(t),Mmo=r(OLe," \u2014 "),RI=n(OLe,"A",{href:!0});var snt=s(RI);Emo=r(snt,"TapasTokenizer"),snt.forEach(t),Cmo=r(OLe," (TAPAS model)"),OLe.forEach(t),wmo=i(S),ph=n(S,"LI",{});var VLe=s(ph);ole=n(VLe,"STRONG",{});var lnt=s(ole);Amo=r(lnt,"tapex"),lnt.forEach(t),Lmo=r(VLe," \u2014 "),PI=n(VLe,"A",{href:!0});var int=s(PI);ymo=r(int,"TapexTokenizer"),int.forEach(t),xmo=r(VLe," (TAPEX model)"),VLe.forEach(t),$mo=i(S),_h=n(S,"LI",{});var XLe=s(_h);rle=n(XLe,"STRONG",{});var dnt=s(rle);kmo=r(dnt,"transfo-xl"),dnt.forEach(t),Smo=r(XLe," \u2014 "),BI=n(XLe,"A",{href:!0});var cnt=s(BI);Rmo=r(cnt,"TransfoXLTokenizer"),cnt.forEach(t),Pmo=r(XLe," (Transformer-XL model)"),XLe.forEach(t),Bmo=i(S),Bs=n(S,"LI",{});var Vk=s(Bs);tle=n(Vk,"STRONG",{});var fnt=s(tle);Imo=r(fnt,"vilt"),fnt.forEach(t),Nmo=r(Vk," \u2014 "),II=n(Vk,"A",{href:!0});var mnt=s(II);qmo=r(mnt,"BertTokenizer"),mnt.forEach(t),jmo=r(Vk," or "),NI=n(Vk,"A",{href:!0});var gnt=s(NI);Dmo=r(gnt,"BertTokenizerFast"),gnt.forEach(t),Gmo=r(Vk," (ViLT model)"),Vk.forEach(t),Omo=i(S),Is=n(S,"LI",{});var Xk=s(Is);ale=n(Xk,"STRONG",{});var hnt=s(ale);Vmo=r(hnt,"visual_bert"),hnt.forEach(t),Xmo=r(Xk," \u2014 "),qI=n(Xk,"A",{href:!0});var pnt=s(qI);zmo=r(pnt,"BertTokenizer"),pnt.forEach(t),Qmo=r(Xk," or "),jI=n(Xk,"A",{href:!0});var _nt=s(jI);Wmo=r(_nt,"BertTokenizerFast"),_nt.forEach(t),Hmo=r(Xk," (VisualBERT model)"),Xk.forEach(t),Umo=i(S),uh=n(S,"LI",{});var zLe=s(uh);nle=n(zLe,"STRONG",{});var unt=s(nle);Jmo=r(unt,"wav2vec2"),unt.forEach(t),Ymo=r(zLe," \u2014 "),DI=n(zLe,"A",{href:!0});var bnt=s(DI);Zmo=r(bnt,"Wav2Vec2CTCTokenizer"),bnt.forEach(t),Kmo=r(zLe," (Wav2Vec2 model)"),zLe.forEach(t),ego=i(S),bh=n(S,"LI",{});var QLe=s(bh);sle=n(QLe,"STRONG",{});var vnt=s(sle);ogo=r(vnt,"wav2vec2-conformer"),vnt.forEach(t),rgo=r(QLe," \u2014 "),GI=n(QLe,"A",{href:!0});var Fnt=s(GI);tgo=r(Fnt,"Wav2Vec2CTCTokenizer"),Fnt.forEach(t),ago=r(QLe," (Wav2Vec2-Conformer model)"),QLe.forEach(t),ngo=i(S),vh=n(S,"LI",{});var WLe=s(vh);lle=n(WLe,"STRONG",{});var Tnt=s(lle);sgo=r(Tnt,"wav2vec2_phoneme"),Tnt.forEach(t),lgo=r(WLe," \u2014 "),OI=n(WLe,"A",{href:!0});var Mnt=s(OI);igo=r(Mnt,"Wav2Vec2PhonemeCTCTokenizer"),Mnt.forEach(t),dgo=r(WLe," (Wav2Vec2Phoneme model)"),WLe.forEach(t),cgo=i(S),Ns=n(S,"LI",{});var zk=s(Ns);ile=n(zk,"STRONG",{});var Ent=s(ile);fgo=r(Ent,"xglm"),Ent.forEach(t),mgo=r(zk," \u2014 "),VI=n(zk,"A",{href:!0});var Cnt=s(VI);ggo=r(Cnt,"XGLMTokenizer"),Cnt.forEach(t),hgo=r(zk," or "),XI=n(zk,"A",{href:!0});var wnt=s(XI);pgo=r(wnt,"XGLMTokenizerFast"),wnt.forEach(t),_go=r(zk," (XGLM model)"),zk.forEach(t),ugo=i(S),Fh=n(S,"LI",{});var HLe=s(Fh);dle=n(HLe,"STRONG",{});var Ant=s(dle);bgo=r(Ant,"xlm"),Ant.forEach(t),vgo=r(HLe," \u2014 "),zI=n(HLe,"A",{href:!0});var Lnt=s(zI);Fgo=r(Lnt,"XLMTokenizer"),Lnt.forEach(t),Tgo=r(HLe," (XLM model)"),HLe.forEach(t),Mgo=i(S),Th=n(S,"LI",{});var ULe=s(Th);cle=n(ULe,"STRONG",{});var ynt=s(cle);Ego=r(ynt,"xlm-prophetnet"),ynt.forEach(t),Cgo=r(ULe," \u2014 "),QI=n(ULe,"A",{href:!0});var xnt=s(QI);wgo=r(xnt,"XLMProphetNetTokenizer"),xnt.forEach(t),Ago=r(ULe," (XLM-ProphetNet model)"),ULe.forEach(t),Lgo=i(S),qs=n(S,"LI",{});var Qk=s(qs);fle=n(Qk,"STRONG",{});var $nt=s(fle);ygo=r($nt,"xlm-roberta"),$nt.forEach(t),xgo=r(Qk," \u2014 "),WI=n(Qk,"A",{href:!0});var knt=s(WI);$go=r(knt,"XLMRobertaTokenizer"),knt.forEach(t),kgo=r(Qk," or "),HI=n(Qk,"A",{href:!0});var Snt=s(HI);Sgo=r(Snt,"XLMRobertaTokenizerFast"),Snt.forEach(t),Rgo=r(Qk," (XLM-RoBERTa model)"),Qk.forEach(t),Pgo=i(S),js=n(S,"LI",{});var Wk=s(js);mle=n(Wk,"STRONG",{});var Rnt=s(mle);Bgo=r(Rnt,"xlm-roberta-xl"),Rnt.forEach(t),Igo=r(Wk," \u2014 "),UI=n(Wk,"A",{href:!0});var Pnt=s(UI);Ngo=r(Pnt,"RobertaTokenizer"),Pnt.forEach(t),qgo=r(Wk," or "),JI=n(Wk,"A",{href:!0});var Bnt=s(JI);jgo=r(Bnt,"RobertaTokenizerFast"),Bnt.forEach(t),Dgo=r(Wk," (XLM-RoBERTa-XL model)"),Wk.forEach(t),Ggo=i(S),Ds=n(S,"LI",{});var Hk=s(Ds);gle=n(Hk,"STRONG",{});var Int=s(gle);Ogo=r(Int,"xlnet"),Int.forEach(t),Vgo=r(Hk," \u2014 "),YI=n(Hk,"A",{href:!0});var Nnt=s(YI);Xgo=r(Nnt,"XLNetTokenizer"),Nnt.forEach(t),zgo=r(Hk," or "),ZI=n(Hk,"A",{href:!0});var qnt=s(ZI);Qgo=r(qnt,"XLNetTokenizerFast"),qnt.forEach(t),Wgo=r(Hk," (XLNet model)"),Hk.forEach(t),Hgo=i(S),Gs=n(S,"LI",{});var Uk=s(Gs);hle=n(Uk,"STRONG",{});var jnt=s(hle);Ugo=r(jnt,"yoso"),jnt.forEach(t),Jgo=r(Uk," \u2014 "),KI=n(Uk,"A",{href:!0});var Dnt=s(KI);Ygo=r(Dnt,"AlbertTokenizer"),Dnt.forEach(t),Zgo=r(Uk," or "),eN=n(Uk,"A",{href:!0});var Gnt=s(eN);Kgo=r(Gnt,"AlbertTokenizerFast"),Gnt.forEach(t),eho=r(Uk," (YOSO model)"),Uk.forEach(t),S.forEach(t),oho=i(Ws),T(Mh.$$.fragment,Ws),Ws.forEach(t),rho=i(Qs),Eh=n(Qs,"DIV",{class:!0});var XVe=s(Eh);T(GL.$$.fragment,XVe),tho=i(XVe),ple=n(XVe,"P",{});var Ont=s(ple);aho=r(Ont,"Register a new tokenizer in this mapping."),Ont.forEach(t),XVe.forEach(t),Qs.forEach(t),VGe=i(f),ki=n(f,"H2",{class:!0});var zVe=s(ki);Ch=n(zVe,"A",{id:!0,class:!0,href:!0});var Vnt=s(Ch);_le=n(Vnt,"SPAN",{});var Xnt=s(_le);T(OL.$$.fragment,Xnt),Xnt.forEach(t),Vnt.forEach(t),nho=i(zVe),ule=n(zVe,"SPAN",{});var znt=s(ule);sho=r(znt,"AutoFeatureExtractor"),znt.forEach(t),zVe.forEach(t),XGe=i(f),Lo=n(f,"DIV",{class:!0});var Hs=s(Lo);T(VL.$$.fragment,Hs),lho=i(Hs),XL=n(Hs,"P",{});var QVe=s(XL);iho=r(QVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),oN=n(QVe,"A",{href:!0});var Qnt=s(oN);dho=r(Qnt,"AutoFeatureExtractor.from_pretrained()"),Qnt.forEach(t),cho=r(QVe," class method."),QVe.forEach(t),fho=i(Hs),zL=n(Hs,"P",{});var WVe=s(zL);mho=r(WVe,"This class cannot be instantiated directly using "),ble=n(WVe,"CODE",{});var Wnt=s(ble);gho=r(Wnt,"__init__()"),Wnt.forEach(t),hho=r(WVe," (throws an error)."),WVe.forEach(t),pho=i(Hs),He=n(Hs,"DIV",{class:!0});var ra=s(He);T(QL.$$.fragment,ra),_ho=i(ra),vle=n(ra,"P",{});var Hnt=s(vle);uho=r(Hnt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Hnt.forEach(t),bho=i(ra),Sa=n(ra,"P",{});var xw=s(Sa);vho=r(xw,"The feature extractor class to instantiate is selected based on the "),Fle=n(xw,"CODE",{});var Unt=s(Fle);Fho=r(Unt,"model_type"),Unt.forEach(t),Tho=r(xw,` property of the config object
(either passed as an argument or loaded from `),Tle=n(xw,"CODE",{});var Jnt=s(Tle);Mho=r(Jnt,"pretrained_model_name_or_path"),Jnt.forEach(t),Eho=r(xw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mle=n(xw,"CODE",{});var Ynt=s(Mle);Cho=r(Ynt,"pretrained_model_name_or_path"),Ynt.forEach(t),who=r(xw,":"),xw.forEach(t),Aho=i(ra),Y=n(ra,"UL",{});var Z=s(Y);wh=n(Z,"LI",{});var JLe=s(wh);Ele=n(JLe,"STRONG",{});var Znt=s(Ele);Lho=r(Znt,"beit"),Znt.forEach(t),yho=r(JLe," \u2014 "),rN=n(JLe,"A",{href:!0});var Knt=s(rN);xho=r(Knt,"BeitFeatureExtractor"),Knt.forEach(t),$ho=r(JLe," (BEiT model)"),JLe.forEach(t),kho=i(Z),Ah=n(Z,"LI",{});var YLe=s(Ah);Cle=n(YLe,"STRONG",{});var est=s(Cle);Sho=r(est,"clip"),est.forEach(t),Rho=r(YLe," \u2014 "),tN=n(YLe,"A",{href:!0});var ost=s(tN);Pho=r(ost,"CLIPFeatureExtractor"),ost.forEach(t),Bho=r(YLe," (CLIP model)"),YLe.forEach(t),Iho=i(Z),Lh=n(Z,"LI",{});var ZLe=s(Lh);wle=n(ZLe,"STRONG",{});var rst=s(wle);Nho=r(rst,"convnext"),rst.forEach(t),qho=r(ZLe," \u2014 "),aN=n(ZLe,"A",{href:!0});var tst=s(aN);jho=r(tst,"ConvNextFeatureExtractor"),tst.forEach(t),Dho=r(ZLe," (ConvNeXT model)"),ZLe.forEach(t),Gho=i(Z),yh=n(Z,"LI",{});var KLe=s(yh);Ale=n(KLe,"STRONG",{});var ast=s(Ale);Oho=r(ast,"cvt"),ast.forEach(t),Vho=r(KLe," \u2014 "),nN=n(KLe,"A",{href:!0});var nst=s(nN);Xho=r(nst,"ConvNextFeatureExtractor"),nst.forEach(t),zho=r(KLe," (CvT model)"),KLe.forEach(t),Qho=i(Z),xh=n(Z,"LI",{});var eye=s(xh);Lle=n(eye,"STRONG",{});var sst=s(Lle);Who=r(sst,"data2vec-audio"),sst.forEach(t),Hho=r(eye," \u2014 "),sN=n(eye,"A",{href:!0});var lst=s(sN);Uho=r(lst,"Wav2Vec2FeatureExtractor"),lst.forEach(t),Jho=r(eye," (Data2VecAudio model)"),eye.forEach(t),Yho=i(Z),$h=n(Z,"LI",{});var oye=s($h);yle=n(oye,"STRONG",{});var ist=s(yle);Zho=r(ist,"data2vec-vision"),ist.forEach(t),Kho=r(oye," \u2014 "),lN=n(oye,"A",{href:!0});var dst=s(lN);epo=r(dst,"BeitFeatureExtractor"),dst.forEach(t),opo=r(oye," (Data2VecVision model)"),oye.forEach(t),rpo=i(Z),kh=n(Z,"LI",{});var rye=s(kh);xle=n(rye,"STRONG",{});var cst=s(xle);tpo=r(cst,"deit"),cst.forEach(t),apo=r(rye," \u2014 "),iN=n(rye,"A",{href:!0});var fst=s(iN);npo=r(fst,"DeiTFeatureExtractor"),fst.forEach(t),spo=r(rye," (DeiT model)"),rye.forEach(t),lpo=i(Z),Sh=n(Z,"LI",{});var tye=s(Sh);$le=n(tye,"STRONG",{});var mst=s($le);ipo=r(mst,"detr"),mst.forEach(t),dpo=r(tye," \u2014 "),dN=n(tye,"A",{href:!0});var gst=s(dN);cpo=r(gst,"DetrFeatureExtractor"),gst.forEach(t),fpo=r(tye," (DETR model)"),tye.forEach(t),mpo=i(Z),Rh=n(Z,"LI",{});var aye=s(Rh);kle=n(aye,"STRONG",{});var hst=s(kle);gpo=r(hst,"dpt"),hst.forEach(t),hpo=r(aye," \u2014 "),cN=n(aye,"A",{href:!0});var pst=s(cN);ppo=r(pst,"DPTFeatureExtractor"),pst.forEach(t),_po=r(aye," (DPT model)"),aye.forEach(t),upo=i(Z),Ph=n(Z,"LI",{});var nye=s(Ph);Sle=n(nye,"STRONG",{});var _st=s(Sle);bpo=r(_st,"flava"),_st.forEach(t),vpo=r(nye," \u2014 "),fN=n(nye,"A",{href:!0});var ust=s(fN);Fpo=r(ust,"FlavaFeatureExtractor"),ust.forEach(t),Tpo=r(nye," (FLAVA model)"),nye.forEach(t),Mpo=i(Z),Bh=n(Z,"LI",{});var sye=s(Bh);Rle=n(sye,"STRONG",{});var bst=s(Rle);Epo=r(bst,"glpn"),bst.forEach(t),Cpo=r(sye," \u2014 "),mN=n(sye,"A",{href:!0});var vst=s(mN);wpo=r(vst,"GLPNFeatureExtractor"),vst.forEach(t),Apo=r(sye," (GLPN model)"),sye.forEach(t),Lpo=i(Z),Ih=n(Z,"LI",{});var lye=s(Ih);Ple=n(lye,"STRONG",{});var Fst=s(Ple);ypo=r(Fst,"hubert"),Fst.forEach(t),xpo=r(lye," \u2014 "),gN=n(lye,"A",{href:!0});var Tst=s(gN);$po=r(Tst,"Wav2Vec2FeatureExtractor"),Tst.forEach(t),kpo=r(lye," (Hubert model)"),lye.forEach(t),Spo=i(Z),Nh=n(Z,"LI",{});var iye=s(Nh);Ble=n(iye,"STRONG",{});var Mst=s(Ble);Rpo=r(Mst,"imagegpt"),Mst.forEach(t),Ppo=r(iye," \u2014 "),hN=n(iye,"A",{href:!0});var Est=s(hN);Bpo=r(Est,"ImageGPTFeatureExtractor"),Est.forEach(t),Ipo=r(iye," (ImageGPT model)"),iye.forEach(t),Npo=i(Z),qh=n(Z,"LI",{});var dye=s(qh);Ile=n(dye,"STRONG",{});var Cst=s(Ile);qpo=r(Cst,"layoutlmv2"),Cst.forEach(t),jpo=r(dye," \u2014 "),pN=n(dye,"A",{href:!0});var wst=s(pN);Dpo=r(wst,"LayoutLMv2FeatureExtractor"),wst.forEach(t),Gpo=r(dye," (LayoutLMv2 model)"),dye.forEach(t),Opo=i(Z),jh=n(Z,"LI",{});var cye=s(jh);Nle=n(cye,"STRONG",{});var Ast=s(Nle);Vpo=r(Ast,"layoutlmv3"),Ast.forEach(t),Xpo=r(cye," \u2014 "),_N=n(cye,"A",{href:!0});var Lst=s(_N);zpo=r(Lst,"LayoutLMv3FeatureExtractor"),Lst.forEach(t),Qpo=r(cye," (LayoutLMv3 model)"),cye.forEach(t),Wpo=i(Z),Dh=n(Z,"LI",{});var fye=s(Dh);qle=n(fye,"STRONG",{});var yst=s(qle);Hpo=r(yst,"levit"),yst.forEach(t),Upo=r(fye," \u2014 "),uN=n(fye,"A",{href:!0});var xst=s(uN);Jpo=r(xst,"LevitFeatureExtractor"),xst.forEach(t),Ypo=r(fye," (LeViT model)"),fye.forEach(t),Zpo=i(Z),Gh=n(Z,"LI",{});var mye=s(Gh);jle=n(mye,"STRONG",{});var $st=s(jle);Kpo=r($st,"maskformer"),$st.forEach(t),e_o=r(mye," \u2014 "),bN=n(mye,"A",{href:!0});var kst=s(bN);o_o=r(kst,"MaskFormerFeatureExtractor"),kst.forEach(t),r_o=r(mye," (MaskFormer model)"),mye.forEach(t),t_o=i(Z),Oh=n(Z,"LI",{});var gye=s(Oh);Dle=n(gye,"STRONG",{});var Sst=s(Dle);a_o=r(Sst,"mctct"),Sst.forEach(t),n_o=r(gye," \u2014 "),vN=n(gye,"A",{href:!0});var Rst=s(vN);s_o=r(Rst,"MCTCTFeatureExtractor"),Rst.forEach(t),l_o=r(gye," (M-CTC-T model)"),gye.forEach(t),i_o=i(Z),Vh=n(Z,"LI",{});var hye=s(Vh);Gle=n(hye,"STRONG",{});var Pst=s(Gle);d_o=r(Pst,"perceiver"),Pst.forEach(t),c_o=r(hye," \u2014 "),FN=n(hye,"A",{href:!0});var Bst=s(FN);f_o=r(Bst,"PerceiverFeatureExtractor"),Bst.forEach(t),m_o=r(hye," (Perceiver model)"),hye.forEach(t),g_o=i(Z),Xh=n(Z,"LI",{});var pye=s(Xh);Ole=n(pye,"STRONG",{});var Ist=s(Ole);h_o=r(Ist,"poolformer"),Ist.forEach(t),p_o=r(pye," \u2014 "),TN=n(pye,"A",{href:!0});var Nst=s(TN);__o=r(Nst,"PoolFormerFeatureExtractor"),Nst.forEach(t),u_o=r(pye," (PoolFormer model)"),pye.forEach(t),b_o=i(Z),zh=n(Z,"LI",{});var _ye=s(zh);Vle=n(_ye,"STRONG",{});var qst=s(Vle);v_o=r(qst,"regnet"),qst.forEach(t),F_o=r(_ye," \u2014 "),MN=n(_ye,"A",{href:!0});var jst=s(MN);T_o=r(jst,"ConvNextFeatureExtractor"),jst.forEach(t),M_o=r(_ye," (RegNet model)"),_ye.forEach(t),E_o=i(Z),Qh=n(Z,"LI",{});var uye=s(Qh);Xle=n(uye,"STRONG",{});var Dst=s(Xle);C_o=r(Dst,"resnet"),Dst.forEach(t),w_o=r(uye," \u2014 "),EN=n(uye,"A",{href:!0});var Gst=s(EN);A_o=r(Gst,"ConvNextFeatureExtractor"),Gst.forEach(t),L_o=r(uye," (ResNet model)"),uye.forEach(t),y_o=i(Z),Wh=n(Z,"LI",{});var bye=s(Wh);zle=n(bye,"STRONG",{});var Ost=s(zle);x_o=r(Ost,"segformer"),Ost.forEach(t),$_o=r(bye," \u2014 "),CN=n(bye,"A",{href:!0});var Vst=s(CN);k_o=r(Vst,"SegformerFeatureExtractor"),Vst.forEach(t),S_o=r(bye," (SegFormer model)"),bye.forEach(t),R_o=i(Z),Hh=n(Z,"LI",{});var vye=s(Hh);Qle=n(vye,"STRONG",{});var Xst=s(Qle);P_o=r(Xst,"speech_to_text"),Xst.forEach(t),B_o=r(vye," \u2014 "),wN=n(vye,"A",{href:!0});var zst=s(wN);I_o=r(zst,"Speech2TextFeatureExtractor"),zst.forEach(t),N_o=r(vye," (Speech2Text model)"),vye.forEach(t),q_o=i(Z),Uh=n(Z,"LI",{});var Fye=s(Uh);Wle=n(Fye,"STRONG",{});var Qst=s(Wle);j_o=r(Qst,"swin"),Qst.forEach(t),D_o=r(Fye," \u2014 "),AN=n(Fye,"A",{href:!0});var Wst=s(AN);G_o=r(Wst,"ViTFeatureExtractor"),Wst.forEach(t),O_o=r(Fye," (Swin Transformer model)"),Fye.forEach(t),V_o=i(Z),Jh=n(Z,"LI",{});var Tye=s(Jh);Hle=n(Tye,"STRONG",{});var Hst=s(Hle);X_o=r(Hst,"van"),Hst.forEach(t),z_o=r(Tye," \u2014 "),LN=n(Tye,"A",{href:!0});var Ust=s(LN);Q_o=r(Ust,"ConvNextFeatureExtractor"),Ust.forEach(t),W_o=r(Tye," (VAN model)"),Tye.forEach(t),H_o=i(Z),Yh=n(Z,"LI",{});var Mye=s(Yh);Ule=n(Mye,"STRONG",{});var Jst=s(Ule);U_o=r(Jst,"vilt"),Jst.forEach(t),J_o=r(Mye," \u2014 "),yN=n(Mye,"A",{href:!0});var Yst=s(yN);Y_o=r(Yst,"ViltFeatureExtractor"),Yst.forEach(t),Z_o=r(Mye," (ViLT model)"),Mye.forEach(t),K_o=i(Z),Zh=n(Z,"LI",{});var Eye=s(Zh);Jle=n(Eye,"STRONG",{});var Zst=s(Jle);euo=r(Zst,"vit"),Zst.forEach(t),ouo=r(Eye," \u2014 "),xN=n(Eye,"A",{href:!0});var Kst=s(xN);ruo=r(Kst,"ViTFeatureExtractor"),Kst.forEach(t),tuo=r(Eye," (ViT model)"),Eye.forEach(t),auo=i(Z),Kh=n(Z,"LI",{});var Cye=s(Kh);Yle=n(Cye,"STRONG",{});var elt=s(Yle);nuo=r(elt,"vit_mae"),elt.forEach(t),suo=r(Cye," \u2014 "),$N=n(Cye,"A",{href:!0});var olt=s($N);luo=r(olt,"ViTFeatureExtractor"),olt.forEach(t),iuo=r(Cye," (ViTMAE model)"),Cye.forEach(t),duo=i(Z),ep=n(Z,"LI",{});var wye=s(ep);Zle=n(wye,"STRONG",{});var rlt=s(Zle);cuo=r(rlt,"wav2vec2"),rlt.forEach(t),fuo=r(wye," \u2014 "),kN=n(wye,"A",{href:!0});var tlt=s(kN);muo=r(tlt,"Wav2Vec2FeatureExtractor"),tlt.forEach(t),guo=r(wye," (Wav2Vec2 model)"),wye.forEach(t),huo=i(Z),op=n(Z,"LI",{});var Aye=s(op);Kle=n(Aye,"STRONG",{});var alt=s(Kle);puo=r(alt,"wav2vec2-conformer"),alt.forEach(t),_uo=r(Aye," \u2014 "),SN=n(Aye,"A",{href:!0});var nlt=s(SN);uuo=r(nlt,"Wav2Vec2FeatureExtractor"),nlt.forEach(t),buo=r(Aye," (Wav2Vec2-Conformer model)"),Aye.forEach(t),vuo=i(Z),rp=n(Z,"LI",{});var Lye=s(rp);eie=n(Lye,"STRONG",{});var slt=s(eie);Fuo=r(slt,"yolos"),slt.forEach(t),Tuo=r(Lye," \u2014 "),RN=n(Lye,"A",{href:!0});var llt=s(RN);Muo=r(llt,"YolosFeatureExtractor"),llt.forEach(t),Euo=r(Lye," (YOLOS model)"),Lye.forEach(t),Z.forEach(t),Cuo=i(ra),T(tp.$$.fragment,ra),wuo=i(ra),T(ap.$$.fragment,ra),ra.forEach(t),Auo=i(Hs),np=n(Hs,"DIV",{class:!0});var HVe=s(np);T(WL.$$.fragment,HVe),Luo=i(HVe),oie=n(HVe,"P",{});var ilt=s(oie);yuo=r(ilt,"Register a new feature extractor for this class."),ilt.forEach(t),HVe.forEach(t),Hs.forEach(t),zGe=i(f),Si=n(f,"H2",{class:!0});var UVe=s(Si);sp=n(UVe,"A",{id:!0,class:!0,href:!0});var dlt=s(sp);rie=n(dlt,"SPAN",{});var clt=s(rie);T(HL.$$.fragment,clt),clt.forEach(t),dlt.forEach(t),xuo=i(UVe),tie=n(UVe,"SPAN",{});var flt=s(tie);$uo=r(flt,"AutoProcessor"),flt.forEach(t),UVe.forEach(t),QGe=i(f),yo=n(f,"DIV",{class:!0});var Us=s(yo);T(UL.$$.fragment,Us),kuo=i(Us),JL=n(Us,"P",{});var JVe=s(JL);Suo=r(JVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),PN=n(JVe,"A",{href:!0});var mlt=s(PN);Ruo=r(mlt,"AutoProcessor.from_pretrained()"),mlt.forEach(t),Puo=r(JVe," class method."),JVe.forEach(t),Buo=i(Us),YL=n(Us,"P",{});var YVe=s(YL);Iuo=r(YVe,"This class cannot be instantiated directly using "),aie=n(YVe,"CODE",{});var glt=s(aie);Nuo=r(glt,"__init__()"),glt.forEach(t),quo=r(YVe," (throws an error)."),YVe.forEach(t),juo=i(Us),Ue=n(Us,"DIV",{class:!0});var ta=s(Ue);T(ZL.$$.fragment,ta),Duo=i(ta),nie=n(ta,"P",{});var hlt=s(nie);Guo=r(hlt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hlt.forEach(t),Ouo=i(ta),Ri=n(ta,"P",{});var hoe=s(Ri);Vuo=r(hoe,"The processor class to instantiate is selected based on the "),sie=n(hoe,"CODE",{});var plt=s(sie);Xuo=r(plt,"model_type"),plt.forEach(t),zuo=r(hoe,` property of the config object (either
passed as an argument or loaded from `),lie=n(hoe,"CODE",{});var _lt=s(lie);Quo=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),Wuo=r(hoe," if possible):"),hoe.forEach(t),Huo=i(ta),he=n(ta,"UL",{});var ue=s(he);lp=n(ue,"LI",{});var yye=s(lp);iie=n(yye,"STRONG",{});var ult=s(iie);Uuo=r(ult,"clip"),ult.forEach(t),Juo=r(yye," \u2014 "),BN=n(yye,"A",{href:!0});var blt=s(BN);Yuo=r(blt,"CLIPProcessor"),blt.forEach(t),Zuo=r(yye," (CLIP model)"),yye.forEach(t),Kuo=i(ue),ip=n(ue,"LI",{});var xye=s(ip);die=n(xye,"STRONG",{});var vlt=s(die);e7o=r(vlt,"flava"),vlt.forEach(t),o7o=r(xye," \u2014 "),cie=n(xye,"CODE",{});var Flt=s(cie);r7o=r(Flt,"FLAVAProcessor"),Flt.forEach(t),t7o=r(xye," (FLAVA model)"),xye.forEach(t),a7o=i(ue),dp=n(ue,"LI",{});var $ye=s(dp);fie=n($ye,"STRONG",{});var Tlt=s(fie);n7o=r(Tlt,"layoutlmv2"),Tlt.forEach(t),s7o=r($ye," \u2014 "),IN=n($ye,"A",{href:!0});var Mlt=s(IN);l7o=r(Mlt,"LayoutLMv2Processor"),Mlt.forEach(t),i7o=r($ye," (LayoutLMv2 model)"),$ye.forEach(t),d7o=i(ue),cp=n(ue,"LI",{});var kye=s(cp);mie=n(kye,"STRONG",{});var Elt=s(mie);c7o=r(Elt,"layoutlmv3"),Elt.forEach(t),f7o=r(kye," \u2014 "),NN=n(kye,"A",{href:!0});var Clt=s(NN);m7o=r(Clt,"LayoutLMv3Processor"),Clt.forEach(t),g7o=r(kye," (LayoutLMv3 model)"),kye.forEach(t),h7o=i(ue),fp=n(ue,"LI",{});var Sye=s(fp);gie=n(Sye,"STRONG",{});var wlt=s(gie);p7o=r(wlt,"layoutxlm"),wlt.forEach(t),_7o=r(Sye," \u2014 "),qN=n(Sye,"A",{href:!0});var Alt=s(qN);u7o=r(Alt,"LayoutXLMProcessor"),Alt.forEach(t),b7o=r(Sye," (LayoutXLM model)"),Sye.forEach(t),v7o=i(ue),mp=n(ue,"LI",{});var Rye=s(mp);hie=n(Rye,"STRONG",{});var Llt=s(hie);F7o=r(Llt,"sew"),Llt.forEach(t),T7o=r(Rye," \u2014 "),jN=n(Rye,"A",{href:!0});var ylt=s(jN);M7o=r(ylt,"Wav2Vec2Processor"),ylt.forEach(t),E7o=r(Rye," (SEW model)"),Rye.forEach(t),C7o=i(ue),gp=n(ue,"LI",{});var Pye=s(gp);pie=n(Pye,"STRONG",{});var xlt=s(pie);w7o=r(xlt,"sew-d"),xlt.forEach(t),A7o=r(Pye," \u2014 "),DN=n(Pye,"A",{href:!0});var $lt=s(DN);L7o=r($lt,"Wav2Vec2Processor"),$lt.forEach(t),y7o=r(Pye," (SEW-D model)"),Pye.forEach(t),x7o=i(ue),hp=n(ue,"LI",{});var Bye=s(hp);_ie=n(Bye,"STRONG",{});var klt=s(_ie);$7o=r(klt,"speech_to_text"),klt.forEach(t),k7o=r(Bye," \u2014 "),GN=n(Bye,"A",{href:!0});var Slt=s(GN);S7o=r(Slt,"Speech2TextProcessor"),Slt.forEach(t),R7o=r(Bye," (Speech2Text model)"),Bye.forEach(t),P7o=i(ue),pp=n(ue,"LI",{});var Iye=s(pp);uie=n(Iye,"STRONG",{});var Rlt=s(uie);B7o=r(Rlt,"speech_to_text_2"),Rlt.forEach(t),I7o=r(Iye," \u2014 "),ON=n(Iye,"A",{href:!0});var Plt=s(ON);N7o=r(Plt,"Speech2Text2Processor"),Plt.forEach(t),q7o=r(Iye," (Speech2Text2 model)"),Iye.forEach(t),j7o=i(ue),_p=n(ue,"LI",{});var Nye=s(_p);bie=n(Nye,"STRONG",{});var Blt=s(bie);D7o=r(Blt,"trocr"),Blt.forEach(t),G7o=r(Nye," \u2014 "),VN=n(Nye,"A",{href:!0});var Ilt=s(VN);O7o=r(Ilt,"TrOCRProcessor"),Ilt.forEach(t),V7o=r(Nye," (TrOCR model)"),Nye.forEach(t),X7o=i(ue),up=n(ue,"LI",{});var qye=s(up);vie=n(qye,"STRONG",{});var Nlt=s(vie);z7o=r(Nlt,"unispeech"),Nlt.forEach(t),Q7o=r(qye," \u2014 "),XN=n(qye,"A",{href:!0});var qlt=s(XN);W7o=r(qlt,"Wav2Vec2Processor"),qlt.forEach(t),H7o=r(qye," (UniSpeech model)"),qye.forEach(t),U7o=i(ue),bp=n(ue,"LI",{});var jye=s(bp);Fie=n(jye,"STRONG",{});var jlt=s(Fie);J7o=r(jlt,"unispeech-sat"),jlt.forEach(t),Y7o=r(jye," \u2014 "),zN=n(jye,"A",{href:!0});var Dlt=s(zN);Z7o=r(Dlt,"Wav2Vec2Processor"),Dlt.forEach(t),K7o=r(jye," (UniSpeechSat model)"),jye.forEach(t),e1o=i(ue),vp=n(ue,"LI",{});var Dye=s(vp);Tie=n(Dye,"STRONG",{});var Glt=s(Tie);o1o=r(Glt,"vilt"),Glt.forEach(t),r1o=r(Dye," \u2014 "),QN=n(Dye,"A",{href:!0});var Olt=s(QN);t1o=r(Olt,"ViltProcessor"),Olt.forEach(t),a1o=r(Dye," (ViLT model)"),Dye.forEach(t),n1o=i(ue),Fp=n(ue,"LI",{});var Gye=s(Fp);Mie=n(Gye,"STRONG",{});var Vlt=s(Mie);s1o=r(Vlt,"vision-text-dual-encoder"),Vlt.forEach(t),l1o=r(Gye," \u2014 "),WN=n(Gye,"A",{href:!0});var Xlt=s(WN);i1o=r(Xlt,"VisionTextDualEncoderProcessor"),Xlt.forEach(t),d1o=r(Gye," (VisionTextDualEncoder model)"),Gye.forEach(t),c1o=i(ue),Tp=n(ue,"LI",{});var Oye=s(Tp);Eie=n(Oye,"STRONG",{});var zlt=s(Eie);f1o=r(zlt,"wav2vec2"),zlt.forEach(t),m1o=r(Oye," \u2014 "),HN=n(Oye,"A",{href:!0});var Qlt=s(HN);g1o=r(Qlt,"Wav2Vec2Processor"),Qlt.forEach(t),h1o=r(Oye," (Wav2Vec2 model)"),Oye.forEach(t),p1o=i(ue),Mp=n(ue,"LI",{});var Vye=s(Mp);Cie=n(Vye,"STRONG",{});var Wlt=s(Cie);_1o=r(Wlt,"wav2vec2-conformer"),Wlt.forEach(t),u1o=r(Vye," \u2014 "),UN=n(Vye,"A",{href:!0});var Hlt=s(UN);b1o=r(Hlt,"Wav2Vec2Processor"),Hlt.forEach(t),v1o=r(Vye," (Wav2Vec2-Conformer model)"),Vye.forEach(t),F1o=i(ue),Ep=n(ue,"LI",{});var Xye=s(Ep);wie=n(Xye,"STRONG",{});var Ult=s(wie);T1o=r(Ult,"wavlm"),Ult.forEach(t),M1o=r(Xye," \u2014 "),JN=n(Xye,"A",{href:!0});var Jlt=s(JN);E1o=r(Jlt,"Wav2Vec2Processor"),Jlt.forEach(t),C1o=r(Xye," (WavLM model)"),Xye.forEach(t),ue.forEach(t),w1o=i(ta),T(Cp.$$.fragment,ta),A1o=i(ta),T(wp.$$.fragment,ta),ta.forEach(t),L1o=i(Us),Ap=n(Us,"DIV",{class:!0});var ZVe=s(Ap);T(KL.$$.fragment,ZVe),y1o=i(ZVe),Aie=n(ZVe,"P",{});var Ylt=s(Aie);x1o=r(Ylt,"Register a new processor for this class."),Ylt.forEach(t),ZVe.forEach(t),Us.forEach(t),WGe=i(f),Pi=n(f,"H2",{class:!0});var KVe=s(Pi);Lp=n(KVe,"A",{id:!0,class:!0,href:!0});var Zlt=s(Lp);Lie=n(Zlt,"SPAN",{});var Klt=s(Lie);T(ey.$$.fragment,Klt),Klt.forEach(t),Zlt.forEach(t),$1o=i(KVe),yie=n(KVe,"SPAN",{});var eit=s(yie);k1o=r(eit,"AutoModel"),eit.forEach(t),KVe.forEach(t),HGe=i(f),xo=n(f,"DIV",{class:!0});var Js=s(xo);T(oy.$$.fragment,Js),S1o=i(Js),Bi=n(Js,"P",{});var poe=s(Bi);R1o=r(poe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YN=n(poe,"A",{href:!0});var oit=s(YN);P1o=r(oit,"from_pretrained()"),oit.forEach(t),B1o=r(poe," class method or the "),ZN=n(poe,"A",{href:!0});var rit=s(ZN);I1o=r(rit,"from_config()"),rit.forEach(t),N1o=r(poe,` class
method.`),poe.forEach(t),q1o=i(Js),ry=n(Js,"P",{});var eXe=s(ry);j1o=r(eXe,"This class cannot be instantiated directly using "),xie=n(eXe,"CODE",{});var tit=s(xie);D1o=r(tit,"__init__()"),tit.forEach(t),G1o=r(eXe," (throws an error)."),eXe.forEach(t),O1o=i(Js),nt=n(Js,"DIV",{class:!0});var $w=s(nt);T(ty.$$.fragment,$w),V1o=i($w),$ie=n($w,"P",{});var ait=s($ie);X1o=r(ait,"Instantiates one of the base model classes of the library from a configuration."),ait.forEach(t),z1o=i($w),Ii=n($w,"P",{});var _oe=s(Ii);Q1o=r(_oe,`Note:
Loading a model from its configuration file does `),kie=n(_oe,"STRONG",{});var nit=s(kie);W1o=r(nit,"not"),nit.forEach(t),H1o=r(_oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=n(_oe,"A",{href:!0});var sit=s(KN);U1o=r(sit,"from_pretrained()"),sit.forEach(t),J1o=r(_oe," to load the model weights."),_oe.forEach(t),Y1o=i($w),T(yp.$$.fragment,$w),$w.forEach(t),Z1o=i(Js),Je=n(Js,"DIV",{class:!0});var aa=s(Je);T(ay.$$.fragment,aa),K1o=i(aa),Sie=n(aa,"P",{});var lit=s(Sie);e2o=r(lit,"Instantiate one of the base model classes of the library from a pretrained model."),lit.forEach(t),o2o=i(aa),Ra=n(aa,"P",{});var kw=s(Ra);r2o=r(kw,"The model class to instantiate is selected based on the "),Rie=n(kw,"CODE",{});var iit=s(Rie);t2o=r(iit,"model_type"),iit.forEach(t),a2o=r(kw,` property of the config object (either
passed as an argument or loaded from `),Pie=n(kw,"CODE",{});var dit=s(Pie);n2o=r(dit,"pretrained_model_name_or_path"),dit.forEach(t),s2o=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bie=n(kw,"CODE",{});var cit=s(Bie);l2o=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),i2o=r(kw,":"),kw.forEach(t),d2o=i(aa),y=n(aa,"UL",{});var $=s(y);xp=n($,"LI",{});var zye=s(xp);Iie=n(zye,"STRONG",{});var fit=s(Iie);c2o=r(fit,"albert"),fit.forEach(t),f2o=r(zye," \u2014 "),eq=n(zye,"A",{href:!0});var mit=s(eq);m2o=r(mit,"AlbertModel"),mit.forEach(t),g2o=r(zye," (ALBERT model)"),zye.forEach(t),h2o=i($),$p=n($,"LI",{});var Qye=s($p);Nie=n(Qye,"STRONG",{});var git=s(Nie);p2o=r(git,"bart"),git.forEach(t),_2o=r(Qye," \u2014 "),oq=n(Qye,"A",{href:!0});var hit=s(oq);u2o=r(hit,"BartModel"),hit.forEach(t),b2o=r(Qye," (BART model)"),Qye.forEach(t),v2o=i($),kp=n($,"LI",{});var Wye=s(kp);qie=n(Wye,"STRONG",{});var pit=s(qie);F2o=r(pit,"beit"),pit.forEach(t),T2o=r(Wye," \u2014 "),rq=n(Wye,"A",{href:!0});var _it=s(rq);M2o=r(_it,"BeitModel"),_it.forEach(t),E2o=r(Wye," (BEiT model)"),Wye.forEach(t),C2o=i($),Sp=n($,"LI",{});var Hye=s(Sp);jie=n(Hye,"STRONG",{});var uit=s(jie);w2o=r(uit,"bert"),uit.forEach(t),A2o=r(Hye," \u2014 "),tq=n(Hye,"A",{href:!0});var bit=s(tq);L2o=r(bit,"BertModel"),bit.forEach(t),y2o=r(Hye," (BERT model)"),Hye.forEach(t),x2o=i($),Rp=n($,"LI",{});var Uye=s(Rp);Die=n(Uye,"STRONG",{});var vit=s(Die);$2o=r(vit,"bert-generation"),vit.forEach(t),k2o=r(Uye," \u2014 "),aq=n(Uye,"A",{href:!0});var Fit=s(aq);S2o=r(Fit,"BertGenerationEncoder"),Fit.forEach(t),R2o=r(Uye," (Bert Generation model)"),Uye.forEach(t),P2o=i($),Pp=n($,"LI",{});var Jye=s(Pp);Gie=n(Jye,"STRONG",{});var Tit=s(Gie);B2o=r(Tit,"big_bird"),Tit.forEach(t),I2o=r(Jye," \u2014 "),nq=n(Jye,"A",{href:!0});var Mit=s(nq);N2o=r(Mit,"BigBirdModel"),Mit.forEach(t),q2o=r(Jye," (BigBird model)"),Jye.forEach(t),j2o=i($),Bp=n($,"LI",{});var Yye=s(Bp);Oie=n(Yye,"STRONG",{});var Eit=s(Oie);D2o=r(Eit,"bigbird_pegasus"),Eit.forEach(t),G2o=r(Yye," \u2014 "),sq=n(Yye,"A",{href:!0});var Cit=s(sq);O2o=r(Cit,"BigBirdPegasusModel"),Cit.forEach(t),V2o=r(Yye," (BigBird-Pegasus model)"),Yye.forEach(t),X2o=i($),Ip=n($,"LI",{});var Zye=s(Ip);Vie=n(Zye,"STRONG",{});var wit=s(Vie);z2o=r(wit,"blenderbot"),wit.forEach(t),Q2o=r(Zye," \u2014 "),lq=n(Zye,"A",{href:!0});var Ait=s(lq);W2o=r(Ait,"BlenderbotModel"),Ait.forEach(t),H2o=r(Zye," (Blenderbot model)"),Zye.forEach(t),U2o=i($),Np=n($,"LI",{});var Kye=s(Np);Xie=n(Kye,"STRONG",{});var Lit=s(Xie);J2o=r(Lit,"blenderbot-small"),Lit.forEach(t),Y2o=r(Kye," \u2014 "),iq=n(Kye,"A",{href:!0});var yit=s(iq);Z2o=r(yit,"BlenderbotSmallModel"),yit.forEach(t),K2o=r(Kye," (BlenderbotSmall model)"),Kye.forEach(t),ebo=i($),qp=n($,"LI",{});var e8e=s(qp);zie=n(e8e,"STRONG",{});var xit=s(zie);obo=r(xit,"bloom"),xit.forEach(t),rbo=r(e8e," \u2014 "),dq=n(e8e,"A",{href:!0});var $it=s(dq);tbo=r($it,"BloomModel"),$it.forEach(t),abo=r(e8e," (BLOOM model)"),e8e.forEach(t),nbo=i($),jp=n($,"LI",{});var o8e=s(jp);Qie=n(o8e,"STRONG",{});var kit=s(Qie);sbo=r(kit,"camembert"),kit.forEach(t),lbo=r(o8e," \u2014 "),cq=n(o8e,"A",{href:!0});var Sit=s(cq);ibo=r(Sit,"CamembertModel"),Sit.forEach(t),dbo=r(o8e," (CamemBERT model)"),o8e.forEach(t),cbo=i($),Dp=n($,"LI",{});var r8e=s(Dp);Wie=n(r8e,"STRONG",{});var Rit=s(Wie);fbo=r(Rit,"canine"),Rit.forEach(t),mbo=r(r8e," \u2014 "),fq=n(r8e,"A",{href:!0});var Pit=s(fq);gbo=r(Pit,"CanineModel"),Pit.forEach(t),hbo=r(r8e," (CANINE model)"),r8e.forEach(t),pbo=i($),Gp=n($,"LI",{});var t8e=s(Gp);Hie=n(t8e,"STRONG",{});var Bit=s(Hie);_bo=r(Bit,"clip"),Bit.forEach(t),ubo=r(t8e," \u2014 "),mq=n(t8e,"A",{href:!0});var Iit=s(mq);bbo=r(Iit,"CLIPModel"),Iit.forEach(t),vbo=r(t8e," (CLIP model)"),t8e.forEach(t),Fbo=i($),Op=n($,"LI",{});var a8e=s(Op);Uie=n(a8e,"STRONG",{});var Nit=s(Uie);Tbo=r(Nit,"convbert"),Nit.forEach(t),Mbo=r(a8e," \u2014 "),gq=n(a8e,"A",{href:!0});var qit=s(gq);Ebo=r(qit,"ConvBertModel"),qit.forEach(t),Cbo=r(a8e," (ConvBERT model)"),a8e.forEach(t),wbo=i($),Vp=n($,"LI",{});var n8e=s(Vp);Jie=n(n8e,"STRONG",{});var jit=s(Jie);Abo=r(jit,"convnext"),jit.forEach(t),Lbo=r(n8e," \u2014 "),hq=n(n8e,"A",{href:!0});var Dit=s(hq);ybo=r(Dit,"ConvNextModel"),Dit.forEach(t),xbo=r(n8e," (ConvNeXT model)"),n8e.forEach(t),$bo=i($),Xp=n($,"LI",{});var s8e=s(Xp);Yie=n(s8e,"STRONG",{});var Git=s(Yie);kbo=r(Git,"ctrl"),Git.forEach(t),Sbo=r(s8e," \u2014 "),pq=n(s8e,"A",{href:!0});var Oit=s(pq);Rbo=r(Oit,"CTRLModel"),Oit.forEach(t),Pbo=r(s8e," (CTRL model)"),s8e.forEach(t),Bbo=i($),zp=n($,"LI",{});var l8e=s(zp);Zie=n(l8e,"STRONG",{});var Vit=s(Zie);Ibo=r(Vit,"cvt"),Vit.forEach(t),Nbo=r(l8e," \u2014 "),_q=n(l8e,"A",{href:!0});var Xit=s(_q);qbo=r(Xit,"CvtModel"),Xit.forEach(t),jbo=r(l8e," (CvT model)"),l8e.forEach(t),Dbo=i($),Qp=n($,"LI",{});var i8e=s(Qp);Kie=n(i8e,"STRONG",{});var zit=s(Kie);Gbo=r(zit,"data2vec-audio"),zit.forEach(t),Obo=r(i8e," \u2014 "),uq=n(i8e,"A",{href:!0});var Qit=s(uq);Vbo=r(Qit,"Data2VecAudioModel"),Qit.forEach(t),Xbo=r(i8e," (Data2VecAudio model)"),i8e.forEach(t),zbo=i($),Wp=n($,"LI",{});var d8e=s(Wp);ede=n(d8e,"STRONG",{});var Wit=s(ede);Qbo=r(Wit,"data2vec-text"),Wit.forEach(t),Wbo=r(d8e," \u2014 "),bq=n(d8e,"A",{href:!0});var Hit=s(bq);Hbo=r(Hit,"Data2VecTextModel"),Hit.forEach(t),Ubo=r(d8e," (Data2VecText model)"),d8e.forEach(t),Jbo=i($),Hp=n($,"LI",{});var c8e=s(Hp);ode=n(c8e,"STRONG",{});var Uit=s(ode);Ybo=r(Uit,"data2vec-vision"),Uit.forEach(t),Zbo=r(c8e," \u2014 "),vq=n(c8e,"A",{href:!0});var Jit=s(vq);Kbo=r(Jit,"Data2VecVisionModel"),Jit.forEach(t),evo=r(c8e," (Data2VecVision model)"),c8e.forEach(t),ovo=i($),Up=n($,"LI",{});var f8e=s(Up);rde=n(f8e,"STRONG",{});var Yit=s(rde);rvo=r(Yit,"deberta"),Yit.forEach(t),tvo=r(f8e," \u2014 "),Fq=n(f8e,"A",{href:!0});var Zit=s(Fq);avo=r(Zit,"DebertaModel"),Zit.forEach(t),nvo=r(f8e," (DeBERTa model)"),f8e.forEach(t),svo=i($),Jp=n($,"LI",{});var m8e=s(Jp);tde=n(m8e,"STRONG",{});var Kit=s(tde);lvo=r(Kit,"deberta-v2"),Kit.forEach(t),ivo=r(m8e," \u2014 "),Tq=n(m8e,"A",{href:!0});var edt=s(Tq);dvo=r(edt,"DebertaV2Model"),edt.forEach(t),cvo=r(m8e," (DeBERTa-v2 model)"),m8e.forEach(t),fvo=i($),Yp=n($,"LI",{});var g8e=s(Yp);ade=n(g8e,"STRONG",{});var odt=s(ade);mvo=r(odt,"decision_transformer"),odt.forEach(t),gvo=r(g8e," \u2014 "),Mq=n(g8e,"A",{href:!0});var rdt=s(Mq);hvo=r(rdt,"DecisionTransformerModel"),rdt.forEach(t),pvo=r(g8e," (Decision Transformer model)"),g8e.forEach(t),_vo=i($),Zp=n($,"LI",{});var h8e=s(Zp);nde=n(h8e,"STRONG",{});var tdt=s(nde);uvo=r(tdt,"deit"),tdt.forEach(t),bvo=r(h8e," \u2014 "),Eq=n(h8e,"A",{href:!0});var adt=s(Eq);vvo=r(adt,"DeiTModel"),adt.forEach(t),Fvo=r(h8e," (DeiT model)"),h8e.forEach(t),Tvo=i($),Kp=n($,"LI",{});var p8e=s(Kp);sde=n(p8e,"STRONG",{});var ndt=s(sde);Mvo=r(ndt,"detr"),ndt.forEach(t),Evo=r(p8e," \u2014 "),Cq=n(p8e,"A",{href:!0});var sdt=s(Cq);Cvo=r(sdt,"DetrModel"),sdt.forEach(t),wvo=r(p8e," (DETR model)"),p8e.forEach(t),Avo=i($),e_=n($,"LI",{});var _8e=s(e_);lde=n(_8e,"STRONG",{});var ldt=s(lde);Lvo=r(ldt,"distilbert"),ldt.forEach(t),yvo=r(_8e," \u2014 "),wq=n(_8e,"A",{href:!0});var idt=s(wq);xvo=r(idt,"DistilBertModel"),idt.forEach(t),$vo=r(_8e," (DistilBERT model)"),_8e.forEach(t),kvo=i($),o_=n($,"LI",{});var u8e=s(o_);ide=n(u8e,"STRONG",{});var ddt=s(ide);Svo=r(ddt,"dpr"),ddt.forEach(t),Rvo=r(u8e," \u2014 "),Aq=n(u8e,"A",{href:!0});var cdt=s(Aq);Pvo=r(cdt,"DPRQuestionEncoder"),cdt.forEach(t),Bvo=r(u8e," (DPR model)"),u8e.forEach(t),Ivo=i($),r_=n($,"LI",{});var b8e=s(r_);dde=n(b8e,"STRONG",{});var fdt=s(dde);Nvo=r(fdt,"dpt"),fdt.forEach(t),qvo=r(b8e," \u2014 "),Lq=n(b8e,"A",{href:!0});var mdt=s(Lq);jvo=r(mdt,"DPTModel"),mdt.forEach(t),Dvo=r(b8e," (DPT model)"),b8e.forEach(t),Gvo=i($),t_=n($,"LI",{});var v8e=s(t_);cde=n(v8e,"STRONG",{});var gdt=s(cde);Ovo=r(gdt,"electra"),gdt.forEach(t),Vvo=r(v8e," \u2014 "),yq=n(v8e,"A",{href:!0});var hdt=s(yq);Xvo=r(hdt,"ElectraModel"),hdt.forEach(t),zvo=r(v8e," (ELECTRA model)"),v8e.forEach(t),Qvo=i($),a_=n($,"LI",{});var F8e=s(a_);fde=n(F8e,"STRONG",{});var pdt=s(fde);Wvo=r(pdt,"flaubert"),pdt.forEach(t),Hvo=r(F8e," \u2014 "),xq=n(F8e,"A",{href:!0});var _dt=s(xq);Uvo=r(_dt,"FlaubertModel"),_dt.forEach(t),Jvo=r(F8e," (FlauBERT model)"),F8e.forEach(t),Yvo=i($),n_=n($,"LI",{});var T8e=s(n_);mde=n(T8e,"STRONG",{});var udt=s(mde);Zvo=r(udt,"flava"),udt.forEach(t),Kvo=r(T8e," \u2014 "),$q=n(T8e,"A",{href:!0});var bdt=s($q);eFo=r(bdt,"FlavaModel"),bdt.forEach(t),oFo=r(T8e," (FLAVA model)"),T8e.forEach(t),rFo=i($),s_=n($,"LI",{});var M8e=s(s_);gde=n(M8e,"STRONG",{});var vdt=s(gde);tFo=r(vdt,"fnet"),vdt.forEach(t),aFo=r(M8e," \u2014 "),kq=n(M8e,"A",{href:!0});var Fdt=s(kq);nFo=r(Fdt,"FNetModel"),Fdt.forEach(t),sFo=r(M8e," (FNet model)"),M8e.forEach(t),lFo=i($),l_=n($,"LI",{});var E8e=s(l_);hde=n(E8e,"STRONG",{});var Tdt=s(hde);iFo=r(Tdt,"fsmt"),Tdt.forEach(t),dFo=r(E8e," \u2014 "),Sq=n(E8e,"A",{href:!0});var Mdt=s(Sq);cFo=r(Mdt,"FSMTModel"),Mdt.forEach(t),fFo=r(E8e," (FairSeq Machine-Translation model)"),E8e.forEach(t),mFo=i($),Os=n($,"LI",{});var Jk=s(Os);pde=n(Jk,"STRONG",{});var Edt=s(pde);gFo=r(Edt,"funnel"),Edt.forEach(t),hFo=r(Jk," \u2014 "),Rq=n(Jk,"A",{href:!0});var Cdt=s(Rq);pFo=r(Cdt,"FunnelModel"),Cdt.forEach(t),_Fo=r(Jk," or "),Pq=n(Jk,"A",{href:!0});var wdt=s(Pq);uFo=r(wdt,"FunnelBaseModel"),wdt.forEach(t),bFo=r(Jk," (Funnel Transformer model)"),Jk.forEach(t),vFo=i($),i_=n($,"LI",{});var C8e=s(i_);_de=n(C8e,"STRONG",{});var Adt=s(_de);FFo=r(Adt,"glpn"),Adt.forEach(t),TFo=r(C8e," \u2014 "),Bq=n(C8e,"A",{href:!0});var Ldt=s(Bq);MFo=r(Ldt,"GLPNModel"),Ldt.forEach(t),EFo=r(C8e," (GLPN model)"),C8e.forEach(t),CFo=i($),d_=n($,"LI",{});var w8e=s(d_);ude=n(w8e,"STRONG",{});var ydt=s(ude);wFo=r(ydt,"gpt2"),ydt.forEach(t),AFo=r(w8e," \u2014 "),Iq=n(w8e,"A",{href:!0});var xdt=s(Iq);LFo=r(xdt,"GPT2Model"),xdt.forEach(t),yFo=r(w8e," (OpenAI GPT-2 model)"),w8e.forEach(t),xFo=i($),c_=n($,"LI",{});var A8e=s(c_);bde=n(A8e,"STRONG",{});var $dt=s(bde);$Fo=r($dt,"gpt_neo"),$dt.forEach(t),kFo=r(A8e," \u2014 "),Nq=n(A8e,"A",{href:!0});var kdt=s(Nq);SFo=r(kdt,"GPTNeoModel"),kdt.forEach(t),RFo=r(A8e," (GPT Neo model)"),A8e.forEach(t),PFo=i($),f_=n($,"LI",{});var L8e=s(f_);vde=n(L8e,"STRONG",{});var Sdt=s(vde);BFo=r(Sdt,"gpt_neox"),Sdt.forEach(t),IFo=r(L8e," \u2014 "),qq=n(L8e,"A",{href:!0});var Rdt=s(qq);NFo=r(Rdt,"GPTNeoXModel"),Rdt.forEach(t),qFo=r(L8e," (GPT NeoX model)"),L8e.forEach(t),jFo=i($),m_=n($,"LI",{});var y8e=s(m_);Fde=n(y8e,"STRONG",{});var Pdt=s(Fde);DFo=r(Pdt,"gptj"),Pdt.forEach(t),GFo=r(y8e," \u2014 "),jq=n(y8e,"A",{href:!0});var Bdt=s(jq);OFo=r(Bdt,"GPTJModel"),Bdt.forEach(t),VFo=r(y8e," (GPT-J model)"),y8e.forEach(t),XFo=i($),g_=n($,"LI",{});var x8e=s(g_);Tde=n(x8e,"STRONG",{});var Idt=s(Tde);zFo=r(Idt,"hubert"),Idt.forEach(t),QFo=r(x8e," \u2014 "),Dq=n(x8e,"A",{href:!0});var Ndt=s(Dq);WFo=r(Ndt,"HubertModel"),Ndt.forEach(t),HFo=r(x8e," (Hubert model)"),x8e.forEach(t),UFo=i($),h_=n($,"LI",{});var $8e=s(h_);Mde=n($8e,"STRONG",{});var qdt=s(Mde);JFo=r(qdt,"ibert"),qdt.forEach(t),YFo=r($8e," \u2014 "),Gq=n($8e,"A",{href:!0});var jdt=s(Gq);ZFo=r(jdt,"IBertModel"),jdt.forEach(t),KFo=r($8e," (I-BERT model)"),$8e.forEach(t),e6o=i($),p_=n($,"LI",{});var k8e=s(p_);Ede=n(k8e,"STRONG",{});var Ddt=s(Ede);o6o=r(Ddt,"imagegpt"),Ddt.forEach(t),r6o=r(k8e," \u2014 "),Oq=n(k8e,"A",{href:!0});var Gdt=s(Oq);t6o=r(Gdt,"ImageGPTModel"),Gdt.forEach(t),a6o=r(k8e," (ImageGPT model)"),k8e.forEach(t),n6o=i($),__=n($,"LI",{});var S8e=s(__);Cde=n(S8e,"STRONG",{});var Odt=s(Cde);s6o=r(Odt,"layoutlm"),Odt.forEach(t),l6o=r(S8e," \u2014 "),Vq=n(S8e,"A",{href:!0});var Vdt=s(Vq);i6o=r(Vdt,"LayoutLMModel"),Vdt.forEach(t),d6o=r(S8e," (LayoutLM model)"),S8e.forEach(t),c6o=i($),u_=n($,"LI",{});var R8e=s(u_);wde=n(R8e,"STRONG",{});var Xdt=s(wde);f6o=r(Xdt,"layoutlmv2"),Xdt.forEach(t),m6o=r(R8e," \u2014 "),Xq=n(R8e,"A",{href:!0});var zdt=s(Xq);g6o=r(zdt,"LayoutLMv2Model"),zdt.forEach(t),h6o=r(R8e," (LayoutLMv2 model)"),R8e.forEach(t),p6o=i($),b_=n($,"LI",{});var P8e=s(b_);Ade=n(P8e,"STRONG",{});var Qdt=s(Ade);_6o=r(Qdt,"layoutlmv3"),Qdt.forEach(t),u6o=r(P8e," \u2014 "),zq=n(P8e,"A",{href:!0});var Wdt=s(zq);b6o=r(Wdt,"LayoutLMv3Model"),Wdt.forEach(t),v6o=r(P8e," (LayoutLMv3 model)"),P8e.forEach(t),F6o=i($),v_=n($,"LI",{});var B8e=s(v_);Lde=n(B8e,"STRONG",{});var Hdt=s(Lde);T6o=r(Hdt,"led"),Hdt.forEach(t),M6o=r(B8e," \u2014 "),Qq=n(B8e,"A",{href:!0});var Udt=s(Qq);E6o=r(Udt,"LEDModel"),Udt.forEach(t),C6o=r(B8e," (LED model)"),B8e.forEach(t),w6o=i($),F_=n($,"LI",{});var I8e=s(F_);yde=n(I8e,"STRONG",{});var Jdt=s(yde);A6o=r(Jdt,"levit"),Jdt.forEach(t),L6o=r(I8e," \u2014 "),Wq=n(I8e,"A",{href:!0});var Ydt=s(Wq);y6o=r(Ydt,"LevitModel"),Ydt.forEach(t),x6o=r(I8e," (LeViT model)"),I8e.forEach(t),$6o=i($),T_=n($,"LI",{});var N8e=s(T_);xde=n(N8e,"STRONG",{});var Zdt=s(xde);k6o=r(Zdt,"longformer"),Zdt.forEach(t),S6o=r(N8e," \u2014 "),Hq=n(N8e,"A",{href:!0});var Kdt=s(Hq);R6o=r(Kdt,"LongformerModel"),Kdt.forEach(t),P6o=r(N8e," (Longformer model)"),N8e.forEach(t),B6o=i($),M_=n($,"LI",{});var q8e=s(M_);$de=n(q8e,"STRONG",{});var ect=s($de);I6o=r(ect,"longt5"),ect.forEach(t),N6o=r(q8e," \u2014 "),Uq=n(q8e,"A",{href:!0});var oct=s(Uq);q6o=r(oct,"LongT5Model"),oct.forEach(t),j6o=r(q8e," (LongT5 model)"),q8e.forEach(t),D6o=i($),E_=n($,"LI",{});var j8e=s(E_);kde=n(j8e,"STRONG",{});var rct=s(kde);G6o=r(rct,"luke"),rct.forEach(t),O6o=r(j8e," \u2014 "),Jq=n(j8e,"A",{href:!0});var tct=s(Jq);V6o=r(tct,"LukeModel"),tct.forEach(t),X6o=r(j8e," (LUKE model)"),j8e.forEach(t),z6o=i($),C_=n($,"LI",{});var D8e=s(C_);Sde=n(D8e,"STRONG",{});var act=s(Sde);Q6o=r(act,"lxmert"),act.forEach(t),W6o=r(D8e," \u2014 "),Yq=n(D8e,"A",{href:!0});var nct=s(Yq);H6o=r(nct,"LxmertModel"),nct.forEach(t),U6o=r(D8e," (LXMERT model)"),D8e.forEach(t),J6o=i($),w_=n($,"LI",{});var G8e=s(w_);Rde=n(G8e,"STRONG",{});var sct=s(Rde);Y6o=r(sct,"m2m_100"),sct.forEach(t),Z6o=r(G8e," \u2014 "),Zq=n(G8e,"A",{href:!0});var lct=s(Zq);K6o=r(lct,"M2M100Model"),lct.forEach(t),eTo=r(G8e," (M2M100 model)"),G8e.forEach(t),oTo=i($),A_=n($,"LI",{});var O8e=s(A_);Pde=n(O8e,"STRONG",{});var ict=s(Pde);rTo=r(ict,"marian"),ict.forEach(t),tTo=r(O8e," \u2014 "),Kq=n(O8e,"A",{href:!0});var dct=s(Kq);aTo=r(dct,"MarianModel"),dct.forEach(t),nTo=r(O8e," (Marian model)"),O8e.forEach(t),sTo=i($),L_=n($,"LI",{});var V8e=s(L_);Bde=n(V8e,"STRONG",{});var cct=s(Bde);lTo=r(cct,"maskformer"),cct.forEach(t),iTo=r(V8e," \u2014 "),ej=n(V8e,"A",{href:!0});var fct=s(ej);dTo=r(fct,"MaskFormerModel"),fct.forEach(t),cTo=r(V8e," (MaskFormer model)"),V8e.forEach(t),fTo=i($),y_=n($,"LI",{});var X8e=s(y_);Ide=n(X8e,"STRONG",{});var mct=s(Ide);mTo=r(mct,"mbart"),mct.forEach(t),gTo=r(X8e," \u2014 "),oj=n(X8e,"A",{href:!0});var gct=s(oj);hTo=r(gct,"MBartModel"),gct.forEach(t),pTo=r(X8e," (mBART model)"),X8e.forEach(t),_To=i($),x_=n($,"LI",{});var z8e=s(x_);Nde=n(z8e,"STRONG",{});var hct=s(Nde);uTo=r(hct,"mctct"),hct.forEach(t),bTo=r(z8e," \u2014 "),rj=n(z8e,"A",{href:!0});var pct=s(rj);vTo=r(pct,"MCTCTModel"),pct.forEach(t),FTo=r(z8e," (M-CTC-T model)"),z8e.forEach(t),TTo=i($),$_=n($,"LI",{});var Q8e=s($_);qde=n(Q8e,"STRONG",{});var _ct=s(qde);MTo=r(_ct,"megatron-bert"),_ct.forEach(t),ETo=r(Q8e," \u2014 "),tj=n(Q8e,"A",{href:!0});var uct=s(tj);CTo=r(uct,"MegatronBertModel"),uct.forEach(t),wTo=r(Q8e," (Megatron-BERT model)"),Q8e.forEach(t),ATo=i($),k_=n($,"LI",{});var W8e=s(k_);jde=n(W8e,"STRONG",{});var bct=s(jde);LTo=r(bct,"mobilebert"),bct.forEach(t),yTo=r(W8e," \u2014 "),aj=n(W8e,"A",{href:!0});var vct=s(aj);xTo=r(vct,"MobileBertModel"),vct.forEach(t),$To=r(W8e," (MobileBERT model)"),W8e.forEach(t),kTo=i($),S_=n($,"LI",{});var H8e=s(S_);Dde=n(H8e,"STRONG",{});var Fct=s(Dde);STo=r(Fct,"mpnet"),Fct.forEach(t),RTo=r(H8e," \u2014 "),nj=n(H8e,"A",{href:!0});var Tct=s(nj);PTo=r(Tct,"MPNetModel"),Tct.forEach(t),BTo=r(H8e," (MPNet model)"),H8e.forEach(t),ITo=i($),R_=n($,"LI",{});var U8e=s(R_);Gde=n(U8e,"STRONG",{});var Mct=s(Gde);NTo=r(Mct,"mt5"),Mct.forEach(t),qTo=r(U8e," \u2014 "),sj=n(U8e,"A",{href:!0});var Ect=s(sj);jTo=r(Ect,"MT5Model"),Ect.forEach(t),DTo=r(U8e," (MT5 model)"),U8e.forEach(t),GTo=i($),P_=n($,"LI",{});var J8e=s(P_);Ode=n(J8e,"STRONG",{});var Cct=s(Ode);OTo=r(Cct,"nezha"),Cct.forEach(t),VTo=r(J8e," \u2014 "),lj=n(J8e,"A",{href:!0});var wct=s(lj);XTo=r(wct,"NeZhaModel"),wct.forEach(t),zTo=r(J8e," (NeZha model)"),J8e.forEach(t),QTo=i($),B_=n($,"LI",{});var Y8e=s(B_);Vde=n(Y8e,"STRONG",{});var Act=s(Vde);WTo=r(Act,"nystromformer"),Act.forEach(t),HTo=r(Y8e," \u2014 "),ij=n(Y8e,"A",{href:!0});var Lct=s(ij);UTo=r(Lct,"NystromformerModel"),Lct.forEach(t),JTo=r(Y8e," (Nystr\xF6mformer model)"),Y8e.forEach(t),YTo=i($),I_=n($,"LI",{});var Z8e=s(I_);Xde=n(Z8e,"STRONG",{});var yct=s(Xde);ZTo=r(yct,"openai-gpt"),yct.forEach(t),KTo=r(Z8e," \u2014 "),dj=n(Z8e,"A",{href:!0});var xct=s(dj);eMo=r(xct,"OpenAIGPTModel"),xct.forEach(t),oMo=r(Z8e," (OpenAI GPT model)"),Z8e.forEach(t),rMo=i($),N_=n($,"LI",{});var K8e=s(N_);zde=n(K8e,"STRONG",{});var $ct=s(zde);tMo=r($ct,"opt"),$ct.forEach(t),aMo=r(K8e," \u2014 "),cj=n(K8e,"A",{href:!0});var kct=s(cj);nMo=r(kct,"OPTModel"),kct.forEach(t),sMo=r(K8e," (OPT model)"),K8e.forEach(t),lMo=i($),q_=n($,"LI",{});var e9e=s(q_);Qde=n(e9e,"STRONG",{});var Sct=s(Qde);iMo=r(Sct,"pegasus"),Sct.forEach(t),dMo=r(e9e," \u2014 "),fj=n(e9e,"A",{href:!0});var Rct=s(fj);cMo=r(Rct,"PegasusModel"),Rct.forEach(t),fMo=r(e9e," (Pegasus model)"),e9e.forEach(t),mMo=i($),j_=n($,"LI",{});var o9e=s(j_);Wde=n(o9e,"STRONG",{});var Pct=s(Wde);gMo=r(Pct,"perceiver"),Pct.forEach(t),hMo=r(o9e," \u2014 "),mj=n(o9e,"A",{href:!0});var Bct=s(mj);pMo=r(Bct,"PerceiverModel"),Bct.forEach(t),_Mo=r(o9e," (Perceiver model)"),o9e.forEach(t),uMo=i($),D_=n($,"LI",{});var r9e=s(D_);Hde=n(r9e,"STRONG",{});var Ict=s(Hde);bMo=r(Ict,"plbart"),Ict.forEach(t),vMo=r(r9e," \u2014 "),gj=n(r9e,"A",{href:!0});var Nct=s(gj);FMo=r(Nct,"PLBartModel"),Nct.forEach(t),TMo=r(r9e," (PLBart model)"),r9e.forEach(t),MMo=i($),G_=n($,"LI",{});var t9e=s(G_);Ude=n(t9e,"STRONG",{});var qct=s(Ude);EMo=r(qct,"poolformer"),qct.forEach(t),CMo=r(t9e," \u2014 "),hj=n(t9e,"A",{href:!0});var jct=s(hj);wMo=r(jct,"PoolFormerModel"),jct.forEach(t),AMo=r(t9e," (PoolFormer model)"),t9e.forEach(t),LMo=i($),O_=n($,"LI",{});var a9e=s(O_);Jde=n(a9e,"STRONG",{});var Dct=s(Jde);yMo=r(Dct,"prophetnet"),Dct.forEach(t),xMo=r(a9e," \u2014 "),pj=n(a9e,"A",{href:!0});var Gct=s(pj);$Mo=r(Gct,"ProphetNetModel"),Gct.forEach(t),kMo=r(a9e," (ProphetNet model)"),a9e.forEach(t),SMo=i($),V_=n($,"LI",{});var n9e=s(V_);Yde=n(n9e,"STRONG",{});var Oct=s(Yde);RMo=r(Oct,"qdqbert"),Oct.forEach(t),PMo=r(n9e," \u2014 "),_j=n(n9e,"A",{href:!0});var Vct=s(_j);BMo=r(Vct,"QDQBertModel"),Vct.forEach(t),IMo=r(n9e," (QDQBert model)"),n9e.forEach(t),NMo=i($),X_=n($,"LI",{});var s9e=s(X_);Zde=n(s9e,"STRONG",{});var Xct=s(Zde);qMo=r(Xct,"reformer"),Xct.forEach(t),jMo=r(s9e," \u2014 "),uj=n(s9e,"A",{href:!0});var zct=s(uj);DMo=r(zct,"ReformerModel"),zct.forEach(t),GMo=r(s9e," (Reformer model)"),s9e.forEach(t),OMo=i($),z_=n($,"LI",{});var l9e=s(z_);Kde=n(l9e,"STRONG",{});var Qct=s(Kde);VMo=r(Qct,"regnet"),Qct.forEach(t),XMo=r(l9e," \u2014 "),bj=n(l9e,"A",{href:!0});var Wct=s(bj);zMo=r(Wct,"RegNetModel"),Wct.forEach(t),QMo=r(l9e," (RegNet model)"),l9e.forEach(t),WMo=i($),Q_=n($,"LI",{});var i9e=s(Q_);ece=n(i9e,"STRONG",{});var Hct=s(ece);HMo=r(Hct,"rembert"),Hct.forEach(t),UMo=r(i9e," \u2014 "),vj=n(i9e,"A",{href:!0});var Uct=s(vj);JMo=r(Uct,"RemBertModel"),Uct.forEach(t),YMo=r(i9e," (RemBERT model)"),i9e.forEach(t),ZMo=i($),W_=n($,"LI",{});var d9e=s(W_);oce=n(d9e,"STRONG",{});var Jct=s(oce);KMo=r(Jct,"resnet"),Jct.forEach(t),eEo=r(d9e," \u2014 "),Fj=n(d9e,"A",{href:!0});var Yct=s(Fj);oEo=r(Yct,"ResNetModel"),Yct.forEach(t),rEo=r(d9e," (ResNet model)"),d9e.forEach(t),tEo=i($),H_=n($,"LI",{});var c9e=s(H_);rce=n(c9e,"STRONG",{});var Zct=s(rce);aEo=r(Zct,"retribert"),Zct.forEach(t),nEo=r(c9e," \u2014 "),Tj=n(c9e,"A",{href:!0});var Kct=s(Tj);sEo=r(Kct,"RetriBertModel"),Kct.forEach(t),lEo=r(c9e," (RetriBERT model)"),c9e.forEach(t),iEo=i($),U_=n($,"LI",{});var f9e=s(U_);tce=n(f9e,"STRONG",{});var eft=s(tce);dEo=r(eft,"roberta"),eft.forEach(t),cEo=r(f9e," \u2014 "),Mj=n(f9e,"A",{href:!0});var oft=s(Mj);fEo=r(oft,"RobertaModel"),oft.forEach(t),mEo=r(f9e," (RoBERTa model)"),f9e.forEach(t),gEo=i($),J_=n($,"LI",{});var m9e=s(J_);ace=n(m9e,"STRONG",{});var rft=s(ace);hEo=r(rft,"roformer"),rft.forEach(t),pEo=r(m9e," \u2014 "),Ej=n(m9e,"A",{href:!0});var tft=s(Ej);_Eo=r(tft,"RoFormerModel"),tft.forEach(t),uEo=r(m9e," (RoFormer model)"),m9e.forEach(t),bEo=i($),Y_=n($,"LI",{});var g9e=s(Y_);nce=n(g9e,"STRONG",{});var aft=s(nce);vEo=r(aft,"segformer"),aft.forEach(t),FEo=r(g9e," \u2014 "),Cj=n(g9e,"A",{href:!0});var nft=s(Cj);TEo=r(nft,"SegformerModel"),nft.forEach(t),MEo=r(g9e," (SegFormer model)"),g9e.forEach(t),EEo=i($),Z_=n($,"LI",{});var h9e=s(Z_);sce=n(h9e,"STRONG",{});var sft=s(sce);CEo=r(sft,"sew"),sft.forEach(t),wEo=r(h9e," \u2014 "),wj=n(h9e,"A",{href:!0});var lft=s(wj);AEo=r(lft,"SEWModel"),lft.forEach(t),LEo=r(h9e," (SEW model)"),h9e.forEach(t),yEo=i($),K_=n($,"LI",{});var p9e=s(K_);lce=n(p9e,"STRONG",{});var ift=s(lce);xEo=r(ift,"sew-d"),ift.forEach(t),$Eo=r(p9e," \u2014 "),Aj=n(p9e,"A",{href:!0});var dft=s(Aj);kEo=r(dft,"SEWDModel"),dft.forEach(t),SEo=r(p9e," (SEW-D model)"),p9e.forEach(t),REo=i($),eu=n($,"LI",{});var _9e=s(eu);ice=n(_9e,"STRONG",{});var cft=s(ice);PEo=r(cft,"speech_to_text"),cft.forEach(t),BEo=r(_9e," \u2014 "),Lj=n(_9e,"A",{href:!0});var fft=s(Lj);IEo=r(fft,"Speech2TextModel"),fft.forEach(t),NEo=r(_9e," (Speech2Text model)"),_9e.forEach(t),qEo=i($),ou=n($,"LI",{});var u9e=s(ou);dce=n(u9e,"STRONG",{});var mft=s(dce);jEo=r(mft,"splinter"),mft.forEach(t),DEo=r(u9e," \u2014 "),yj=n(u9e,"A",{href:!0});var gft=s(yj);GEo=r(gft,"SplinterModel"),gft.forEach(t),OEo=r(u9e," (Splinter model)"),u9e.forEach(t),VEo=i($),ru=n($,"LI",{});var b9e=s(ru);cce=n(b9e,"STRONG",{});var hft=s(cce);XEo=r(hft,"squeezebert"),hft.forEach(t),zEo=r(b9e," \u2014 "),xj=n(b9e,"A",{href:!0});var pft=s(xj);QEo=r(pft,"SqueezeBertModel"),pft.forEach(t),WEo=r(b9e," (SqueezeBERT model)"),b9e.forEach(t),HEo=i($),tu=n($,"LI",{});var v9e=s(tu);fce=n(v9e,"STRONG",{});var _ft=s(fce);UEo=r(_ft,"swin"),_ft.forEach(t),JEo=r(v9e," \u2014 "),$j=n(v9e,"A",{href:!0});var uft=s($j);YEo=r(uft,"SwinModel"),uft.forEach(t),ZEo=r(v9e," (Swin Transformer model)"),v9e.forEach(t),KEo=i($),au=n($,"LI",{});var F9e=s(au);mce=n(F9e,"STRONG",{});var bft=s(mce);e4o=r(bft,"t5"),bft.forEach(t),o4o=r(F9e," \u2014 "),kj=n(F9e,"A",{href:!0});var vft=s(kj);r4o=r(vft,"T5Model"),vft.forEach(t),t4o=r(F9e," (T5 model)"),F9e.forEach(t),a4o=i($),nu=n($,"LI",{});var T9e=s(nu);gce=n(T9e,"STRONG",{});var Fft=s(gce);n4o=r(Fft,"tapas"),Fft.forEach(t),s4o=r(T9e," \u2014 "),Sj=n(T9e,"A",{href:!0});var Tft=s(Sj);l4o=r(Tft,"TapasModel"),Tft.forEach(t),i4o=r(T9e," (TAPAS model)"),T9e.forEach(t),d4o=i($),su=n($,"LI",{});var M9e=s(su);hce=n(M9e,"STRONG",{});var Mft=s(hce);c4o=r(Mft,"trajectory_transformer"),Mft.forEach(t),f4o=r(M9e," \u2014 "),Rj=n(M9e,"A",{href:!0});var Eft=s(Rj);m4o=r(Eft,"TrajectoryTransformerModel"),Eft.forEach(t),g4o=r(M9e," (Trajectory Transformer model)"),M9e.forEach(t),h4o=i($),lu=n($,"LI",{});var E9e=s(lu);pce=n(E9e,"STRONG",{});var Cft=s(pce);p4o=r(Cft,"transfo-xl"),Cft.forEach(t),_4o=r(E9e," \u2014 "),Pj=n(E9e,"A",{href:!0});var wft=s(Pj);u4o=r(wft,"TransfoXLModel"),wft.forEach(t),b4o=r(E9e," (Transformer-XL model)"),E9e.forEach(t),v4o=i($),iu=n($,"LI",{});var C9e=s(iu);_ce=n(C9e,"STRONG",{});var Aft=s(_ce);F4o=r(Aft,"unispeech"),Aft.forEach(t),T4o=r(C9e," \u2014 "),Bj=n(C9e,"A",{href:!0});var Lft=s(Bj);M4o=r(Lft,"UniSpeechModel"),Lft.forEach(t),E4o=r(C9e," (UniSpeech model)"),C9e.forEach(t),C4o=i($),du=n($,"LI",{});var w9e=s(du);uce=n(w9e,"STRONG",{});var yft=s(uce);w4o=r(yft,"unispeech-sat"),yft.forEach(t),A4o=r(w9e," \u2014 "),Ij=n(w9e,"A",{href:!0});var xft=s(Ij);L4o=r(xft,"UniSpeechSatModel"),xft.forEach(t),y4o=r(w9e," (UniSpeechSat model)"),w9e.forEach(t),x4o=i($),cu=n($,"LI",{});var A9e=s(cu);bce=n(A9e,"STRONG",{});var $ft=s(bce);$4o=r($ft,"van"),$ft.forEach(t),k4o=r(A9e," \u2014 "),Nj=n(A9e,"A",{href:!0});var kft=s(Nj);S4o=r(kft,"VanModel"),kft.forEach(t),R4o=r(A9e," (VAN model)"),A9e.forEach(t),P4o=i($),fu=n($,"LI",{});var L9e=s(fu);vce=n(L9e,"STRONG",{});var Sft=s(vce);B4o=r(Sft,"vilt"),Sft.forEach(t),I4o=r(L9e," \u2014 "),qj=n(L9e,"A",{href:!0});var Rft=s(qj);N4o=r(Rft,"ViltModel"),Rft.forEach(t),q4o=r(L9e," (ViLT model)"),L9e.forEach(t),j4o=i($),mu=n($,"LI",{});var y9e=s(mu);Fce=n(y9e,"STRONG",{});var Pft=s(Fce);D4o=r(Pft,"vision-text-dual-encoder"),Pft.forEach(t),G4o=r(y9e," \u2014 "),jj=n(y9e,"A",{href:!0});var Bft=s(jj);O4o=r(Bft,"VisionTextDualEncoderModel"),Bft.forEach(t),V4o=r(y9e," (VisionTextDualEncoder model)"),y9e.forEach(t),X4o=i($),gu=n($,"LI",{});var x9e=s(gu);Tce=n(x9e,"STRONG",{});var Ift=s(Tce);z4o=r(Ift,"visual_bert"),Ift.forEach(t),Q4o=r(x9e," \u2014 "),Dj=n(x9e,"A",{href:!0});var Nft=s(Dj);W4o=r(Nft,"VisualBertModel"),Nft.forEach(t),H4o=r(x9e," (VisualBERT model)"),x9e.forEach(t),U4o=i($),hu=n($,"LI",{});var $9e=s(hu);Mce=n($9e,"STRONG",{});var qft=s(Mce);J4o=r(qft,"vit"),qft.forEach(t),Y4o=r($9e," \u2014 "),Gj=n($9e,"A",{href:!0});var jft=s(Gj);Z4o=r(jft,"ViTModel"),jft.forEach(t),K4o=r($9e," (ViT model)"),$9e.forEach(t),eCo=i($),pu=n($,"LI",{});var k9e=s(pu);Ece=n(k9e,"STRONG",{});var Dft=s(Ece);oCo=r(Dft,"vit_mae"),Dft.forEach(t),rCo=r(k9e," \u2014 "),Oj=n(k9e,"A",{href:!0});var Gft=s(Oj);tCo=r(Gft,"ViTMAEModel"),Gft.forEach(t),aCo=r(k9e," (ViTMAE model)"),k9e.forEach(t),nCo=i($),_u=n($,"LI",{});var S9e=s(_u);Cce=n(S9e,"STRONG",{});var Oft=s(Cce);sCo=r(Oft,"wav2vec2"),Oft.forEach(t),lCo=r(S9e," \u2014 "),Vj=n(S9e,"A",{href:!0});var Vft=s(Vj);iCo=r(Vft,"Wav2Vec2Model"),Vft.forEach(t),dCo=r(S9e," (Wav2Vec2 model)"),S9e.forEach(t),cCo=i($),uu=n($,"LI",{});var R9e=s(uu);wce=n(R9e,"STRONG",{});var Xft=s(wce);fCo=r(Xft,"wav2vec2-conformer"),Xft.forEach(t),mCo=r(R9e," \u2014 "),Xj=n(R9e,"A",{href:!0});var zft=s(Xj);gCo=r(zft,"Wav2Vec2ConformerModel"),zft.forEach(t),hCo=r(R9e," (Wav2Vec2-Conformer model)"),R9e.forEach(t),pCo=i($),bu=n($,"LI",{});var P9e=s(bu);Ace=n(P9e,"STRONG",{});var Qft=s(Ace);_Co=r(Qft,"wavlm"),Qft.forEach(t),uCo=r(P9e," \u2014 "),zj=n(P9e,"A",{href:!0});var Wft=s(zj);bCo=r(Wft,"WavLMModel"),Wft.forEach(t),vCo=r(P9e," (WavLM model)"),P9e.forEach(t),FCo=i($),vu=n($,"LI",{});var B9e=s(vu);Lce=n(B9e,"STRONG",{});var Hft=s(Lce);TCo=r(Hft,"xglm"),Hft.forEach(t),MCo=r(B9e," \u2014 "),Qj=n(B9e,"A",{href:!0});var Uft=s(Qj);ECo=r(Uft,"XGLMModel"),Uft.forEach(t),CCo=r(B9e," (XGLM model)"),B9e.forEach(t),wCo=i($),Fu=n($,"LI",{});var I9e=s(Fu);yce=n(I9e,"STRONG",{});var Jft=s(yce);ACo=r(Jft,"xlm"),Jft.forEach(t),LCo=r(I9e," \u2014 "),Wj=n(I9e,"A",{href:!0});var Yft=s(Wj);yCo=r(Yft,"XLMModel"),Yft.forEach(t),xCo=r(I9e," (XLM model)"),I9e.forEach(t),$Co=i($),Tu=n($,"LI",{});var N9e=s(Tu);xce=n(N9e,"STRONG",{});var Zft=s(xce);kCo=r(Zft,"xlm-prophetnet"),Zft.forEach(t),SCo=r(N9e," \u2014 "),Hj=n(N9e,"A",{href:!0});var Kft=s(Hj);RCo=r(Kft,"XLMProphetNetModel"),Kft.forEach(t),PCo=r(N9e," (XLM-ProphetNet model)"),N9e.forEach(t),BCo=i($),Mu=n($,"LI",{});var q9e=s(Mu);$ce=n(q9e,"STRONG",{});var emt=s($ce);ICo=r(emt,"xlm-roberta"),emt.forEach(t),NCo=r(q9e," \u2014 "),Uj=n(q9e,"A",{href:!0});var omt=s(Uj);qCo=r(omt,"XLMRobertaModel"),omt.forEach(t),jCo=r(q9e," (XLM-RoBERTa model)"),q9e.forEach(t),DCo=i($),Eu=n($,"LI",{});var j9e=s(Eu);kce=n(j9e,"STRONG",{});var rmt=s(kce);GCo=r(rmt,"xlm-roberta-xl"),rmt.forEach(t),OCo=r(j9e," \u2014 "),Jj=n(j9e,"A",{href:!0});var tmt=s(Jj);VCo=r(tmt,"XLMRobertaXLModel"),tmt.forEach(t),XCo=r(j9e," (XLM-RoBERTa-XL model)"),j9e.forEach(t),zCo=i($),Cu=n($,"LI",{});var D9e=s(Cu);Sce=n(D9e,"STRONG",{});var amt=s(Sce);QCo=r(amt,"xlnet"),amt.forEach(t),WCo=r(D9e," \u2014 "),Yj=n(D9e,"A",{href:!0});var nmt=s(Yj);HCo=r(nmt,"XLNetModel"),nmt.forEach(t),UCo=r(D9e," (XLNet model)"),D9e.forEach(t),JCo=i($),wu=n($,"LI",{});var G9e=s(wu);Rce=n(G9e,"STRONG",{});var smt=s(Rce);YCo=r(smt,"yolos"),smt.forEach(t),ZCo=r(G9e," \u2014 "),Zj=n(G9e,"A",{href:!0});var lmt=s(Zj);KCo=r(lmt,"YolosModel"),lmt.forEach(t),e5o=r(G9e," (YOLOS model)"),G9e.forEach(t),o5o=i($),Au=n($,"LI",{});var O9e=s(Au);Pce=n(O9e,"STRONG",{});var imt=s(Pce);r5o=r(imt,"yoso"),imt.forEach(t),t5o=r(O9e," \u2014 "),Kj=n(O9e,"A",{href:!0});var dmt=s(Kj);a5o=r(dmt,"YosoModel"),dmt.forEach(t),n5o=r(O9e," (YOSO model)"),O9e.forEach(t),$.forEach(t),s5o=i(aa),Lu=n(aa,"P",{});var V9e=s(Lu);l5o=r(V9e,"The model is set in evaluation mode by default using "),Bce=n(V9e,"CODE",{});var cmt=s(Bce);i5o=r(cmt,"model.eval()"),cmt.forEach(t),d5o=r(V9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(V9e,"CODE",{});var fmt=s(Ice);c5o=r(fmt,"model.train()"),fmt.forEach(t),V9e.forEach(t),f5o=i(aa),T(yu.$$.fragment,aa),aa.forEach(t),Js.forEach(t),UGe=i(f),Ni=n(f,"H2",{class:!0});var oXe=s(Ni);xu=n(oXe,"A",{id:!0,class:!0,href:!0});var mmt=s(xu);Nce=n(mmt,"SPAN",{});var gmt=s(Nce);T(ny.$$.fragment,gmt),gmt.forEach(t),mmt.forEach(t),m5o=i(oXe),qce=n(oXe,"SPAN",{});var hmt=s(qce);g5o=r(hmt,"AutoModelForPreTraining"),hmt.forEach(t),oXe.forEach(t),JGe=i(f),$o=n(f,"DIV",{class:!0});var Ys=s($o);T(sy.$$.fragment,Ys),h5o=i(Ys),qi=n(Ys,"P",{});var uoe=s(qi);p5o=r(uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eD=n(uoe,"A",{href:!0});var pmt=s(eD);_5o=r(pmt,"from_pretrained()"),pmt.forEach(t),u5o=r(uoe," class method or the "),oD=n(uoe,"A",{href:!0});var _mt=s(oD);b5o=r(_mt,"from_config()"),_mt.forEach(t),v5o=r(uoe,` class
method.`),uoe.forEach(t),F5o=i(Ys),ly=n(Ys,"P",{});var rXe=s(ly);T5o=r(rXe,"This class cannot be instantiated directly using "),jce=n(rXe,"CODE",{});var umt=s(jce);M5o=r(umt,"__init__()"),umt.forEach(t),E5o=r(rXe," (throws an error)."),rXe.forEach(t),C5o=i(Ys),st=n(Ys,"DIV",{class:!0});var Sw=s(st);T(iy.$$.fragment,Sw),w5o=i(Sw),Dce=n(Sw,"P",{});var bmt=s(Dce);A5o=r(bmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bmt.forEach(t),L5o=i(Sw),ji=n(Sw,"P",{});var boe=s(ji);y5o=r(boe,`Note:
Loading a model from its configuration file does `),Gce=n(boe,"STRONG",{});var vmt=s(Gce);x5o=r(vmt,"not"),vmt.forEach(t),$5o=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(boe,"A",{href:!0});var Fmt=s(rD);k5o=r(Fmt,"from_pretrained()"),Fmt.forEach(t),S5o=r(boe," to load the model weights."),boe.forEach(t),R5o=i(Sw),T($u.$$.fragment,Sw),Sw.forEach(t),P5o=i(Ys),Ye=n(Ys,"DIV",{class:!0});var na=s(Ye);T(dy.$$.fragment,na),B5o=i(na),Oce=n(na,"P",{});var Tmt=s(Oce);I5o=r(Tmt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tmt.forEach(t),N5o=i(na),Pa=n(na,"P",{});var Rw=s(Pa);q5o=r(Rw,"The model class to instantiate is selected based on the "),Vce=n(Rw,"CODE",{});var Mmt=s(Vce);j5o=r(Mmt,"model_type"),Mmt.forEach(t),D5o=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Xce=n(Rw,"CODE",{});var Emt=s(Xce);G5o=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),O5o=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(Rw,"CODE",{});var Cmt=s(zce);V5o=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),X5o=r(Rw,":"),Rw.forEach(t),z5o=i(na),G=n(na,"UL",{});var O=s(G);ku=n(O,"LI",{});var X9e=s(ku);Qce=n(X9e,"STRONG",{});var wmt=s(Qce);Q5o=r(wmt,"albert"),wmt.forEach(t),W5o=r(X9e," \u2014 "),tD=n(X9e,"A",{href:!0});var Amt=s(tD);H5o=r(Amt,"AlbertForPreTraining"),Amt.forEach(t),U5o=r(X9e," (ALBERT model)"),X9e.forEach(t),J5o=i(O),Su=n(O,"LI",{});var z9e=s(Su);Wce=n(z9e,"STRONG",{});var Lmt=s(Wce);Y5o=r(Lmt,"bart"),Lmt.forEach(t),Z5o=r(z9e," \u2014 "),aD=n(z9e,"A",{href:!0});var ymt=s(aD);K5o=r(ymt,"BartForConditionalGeneration"),ymt.forEach(t),e3o=r(z9e," (BART model)"),z9e.forEach(t),o3o=i(O),Ru=n(O,"LI",{});var Q9e=s(Ru);Hce=n(Q9e,"STRONG",{});var xmt=s(Hce);r3o=r(xmt,"bert"),xmt.forEach(t),t3o=r(Q9e," \u2014 "),nD=n(Q9e,"A",{href:!0});var $mt=s(nD);a3o=r($mt,"BertForPreTraining"),$mt.forEach(t),n3o=r(Q9e," (BERT model)"),Q9e.forEach(t),s3o=i(O),Pu=n(O,"LI",{});var W9e=s(Pu);Uce=n(W9e,"STRONG",{});var kmt=s(Uce);l3o=r(kmt,"big_bird"),kmt.forEach(t),i3o=r(W9e," \u2014 "),sD=n(W9e,"A",{href:!0});var Smt=s(sD);d3o=r(Smt,"BigBirdForPreTraining"),Smt.forEach(t),c3o=r(W9e," (BigBird model)"),W9e.forEach(t),f3o=i(O),Bu=n(O,"LI",{});var H9e=s(Bu);Jce=n(H9e,"STRONG",{});var Rmt=s(Jce);m3o=r(Rmt,"bloom"),Rmt.forEach(t),g3o=r(H9e," \u2014 "),lD=n(H9e,"A",{href:!0});var Pmt=s(lD);h3o=r(Pmt,"BloomForCausalLM"),Pmt.forEach(t),p3o=r(H9e," (BLOOM model)"),H9e.forEach(t),_3o=i(O),Iu=n(O,"LI",{});var U9e=s(Iu);Yce=n(U9e,"STRONG",{});var Bmt=s(Yce);u3o=r(Bmt,"camembert"),Bmt.forEach(t),b3o=r(U9e," \u2014 "),iD=n(U9e,"A",{href:!0});var Imt=s(iD);v3o=r(Imt,"CamembertForMaskedLM"),Imt.forEach(t),F3o=r(U9e," (CamemBERT model)"),U9e.forEach(t),T3o=i(O),Nu=n(O,"LI",{});var J9e=s(Nu);Zce=n(J9e,"STRONG",{});var Nmt=s(Zce);M3o=r(Nmt,"ctrl"),Nmt.forEach(t),E3o=r(J9e," \u2014 "),dD=n(J9e,"A",{href:!0});var qmt=s(dD);C3o=r(qmt,"CTRLLMHeadModel"),qmt.forEach(t),w3o=r(J9e," (CTRL model)"),J9e.forEach(t),A3o=i(O),qu=n(O,"LI",{});var Y9e=s(qu);Kce=n(Y9e,"STRONG",{});var jmt=s(Kce);L3o=r(jmt,"data2vec-text"),jmt.forEach(t),y3o=r(Y9e," \u2014 "),cD=n(Y9e,"A",{href:!0});var Dmt=s(cD);x3o=r(Dmt,"Data2VecTextForMaskedLM"),Dmt.forEach(t),$3o=r(Y9e," (Data2VecText model)"),Y9e.forEach(t),k3o=i(O),ju=n(O,"LI",{});var Z9e=s(ju);efe=n(Z9e,"STRONG",{});var Gmt=s(efe);S3o=r(Gmt,"deberta"),Gmt.forEach(t),R3o=r(Z9e," \u2014 "),fD=n(Z9e,"A",{href:!0});var Omt=s(fD);P3o=r(Omt,"DebertaForMaskedLM"),Omt.forEach(t),B3o=r(Z9e," (DeBERTa model)"),Z9e.forEach(t),I3o=i(O),Du=n(O,"LI",{});var K9e=s(Du);ofe=n(K9e,"STRONG",{});var Vmt=s(ofe);N3o=r(Vmt,"deberta-v2"),Vmt.forEach(t),q3o=r(K9e," \u2014 "),mD=n(K9e,"A",{href:!0});var Xmt=s(mD);j3o=r(Xmt,"DebertaV2ForMaskedLM"),Xmt.forEach(t),D3o=r(K9e," (DeBERTa-v2 model)"),K9e.forEach(t),G3o=i(O),Gu=n(O,"LI",{});var exe=s(Gu);rfe=n(exe,"STRONG",{});var zmt=s(rfe);O3o=r(zmt,"distilbert"),zmt.forEach(t),V3o=r(exe," \u2014 "),gD=n(exe,"A",{href:!0});var Qmt=s(gD);X3o=r(Qmt,"DistilBertForMaskedLM"),Qmt.forEach(t),z3o=r(exe," (DistilBERT model)"),exe.forEach(t),Q3o=i(O),Ou=n(O,"LI",{});var oxe=s(Ou);tfe=n(oxe,"STRONG",{});var Wmt=s(tfe);W3o=r(Wmt,"electra"),Wmt.forEach(t),H3o=r(oxe," \u2014 "),hD=n(oxe,"A",{href:!0});var Hmt=s(hD);U3o=r(Hmt,"ElectraForPreTraining"),Hmt.forEach(t),J3o=r(oxe," (ELECTRA model)"),oxe.forEach(t),Y3o=i(O),Vu=n(O,"LI",{});var rxe=s(Vu);afe=n(rxe,"STRONG",{});var Umt=s(afe);Z3o=r(Umt,"flaubert"),Umt.forEach(t),K3o=r(rxe," \u2014 "),pD=n(rxe,"A",{href:!0});var Jmt=s(pD);e0o=r(Jmt,"FlaubertWithLMHeadModel"),Jmt.forEach(t),o0o=r(rxe," (FlauBERT model)"),rxe.forEach(t),r0o=i(O),Xu=n(O,"LI",{});var txe=s(Xu);nfe=n(txe,"STRONG",{});var Ymt=s(nfe);t0o=r(Ymt,"flava"),Ymt.forEach(t),a0o=r(txe," \u2014 "),_D=n(txe,"A",{href:!0});var Zmt=s(_D);n0o=r(Zmt,"FlavaForPreTraining"),Zmt.forEach(t),s0o=r(txe," (FLAVA model)"),txe.forEach(t),l0o=i(O),zu=n(O,"LI",{});var axe=s(zu);sfe=n(axe,"STRONG",{});var Kmt=s(sfe);i0o=r(Kmt,"fnet"),Kmt.forEach(t),d0o=r(axe," \u2014 "),uD=n(axe,"A",{href:!0});var egt=s(uD);c0o=r(egt,"FNetForPreTraining"),egt.forEach(t),f0o=r(axe," (FNet model)"),axe.forEach(t),m0o=i(O),Qu=n(O,"LI",{});var nxe=s(Qu);lfe=n(nxe,"STRONG",{});var ogt=s(lfe);g0o=r(ogt,"fsmt"),ogt.forEach(t),h0o=r(nxe," \u2014 "),bD=n(nxe,"A",{href:!0});var rgt=s(bD);p0o=r(rgt,"FSMTForConditionalGeneration"),rgt.forEach(t),_0o=r(nxe," (FairSeq Machine-Translation model)"),nxe.forEach(t),u0o=i(O),Wu=n(O,"LI",{});var sxe=s(Wu);ife=n(sxe,"STRONG",{});var tgt=s(ife);b0o=r(tgt,"funnel"),tgt.forEach(t),v0o=r(sxe," \u2014 "),vD=n(sxe,"A",{href:!0});var agt=s(vD);F0o=r(agt,"FunnelForPreTraining"),agt.forEach(t),T0o=r(sxe," (Funnel Transformer model)"),sxe.forEach(t),M0o=i(O),Hu=n(O,"LI",{});var lxe=s(Hu);dfe=n(lxe,"STRONG",{});var ngt=s(dfe);E0o=r(ngt,"gpt2"),ngt.forEach(t),C0o=r(lxe," \u2014 "),FD=n(lxe,"A",{href:!0});var sgt=s(FD);w0o=r(sgt,"GPT2LMHeadModel"),sgt.forEach(t),A0o=r(lxe," (OpenAI GPT-2 model)"),lxe.forEach(t),L0o=i(O),Uu=n(O,"LI",{});var ixe=s(Uu);cfe=n(ixe,"STRONG",{});var lgt=s(cfe);y0o=r(lgt,"ibert"),lgt.forEach(t),x0o=r(ixe," \u2014 "),TD=n(ixe,"A",{href:!0});var igt=s(TD);$0o=r(igt,"IBertForMaskedLM"),igt.forEach(t),k0o=r(ixe," (I-BERT model)"),ixe.forEach(t),S0o=i(O),Ju=n(O,"LI",{});var dxe=s(Ju);ffe=n(dxe,"STRONG",{});var dgt=s(ffe);R0o=r(dgt,"layoutlm"),dgt.forEach(t),P0o=r(dxe," \u2014 "),MD=n(dxe,"A",{href:!0});var cgt=s(MD);B0o=r(cgt,"LayoutLMForMaskedLM"),cgt.forEach(t),I0o=r(dxe," (LayoutLM model)"),dxe.forEach(t),N0o=i(O),Yu=n(O,"LI",{});var cxe=s(Yu);mfe=n(cxe,"STRONG",{});var fgt=s(mfe);q0o=r(fgt,"longformer"),fgt.forEach(t),j0o=r(cxe," \u2014 "),ED=n(cxe,"A",{href:!0});var mgt=s(ED);D0o=r(mgt,"LongformerForMaskedLM"),mgt.forEach(t),G0o=r(cxe," (Longformer model)"),cxe.forEach(t),O0o=i(O),Zu=n(O,"LI",{});var fxe=s(Zu);gfe=n(fxe,"STRONG",{});var ggt=s(gfe);V0o=r(ggt,"lxmert"),ggt.forEach(t),X0o=r(fxe," \u2014 "),CD=n(fxe,"A",{href:!0});var hgt=s(CD);z0o=r(hgt,"LxmertForPreTraining"),hgt.forEach(t),Q0o=r(fxe," (LXMERT model)"),fxe.forEach(t),W0o=i(O),Ku=n(O,"LI",{});var mxe=s(Ku);hfe=n(mxe,"STRONG",{});var pgt=s(hfe);H0o=r(pgt,"megatron-bert"),pgt.forEach(t),U0o=r(mxe," \u2014 "),wD=n(mxe,"A",{href:!0});var _gt=s(wD);J0o=r(_gt,"MegatronBertForPreTraining"),_gt.forEach(t),Y0o=r(mxe," (Megatron-BERT model)"),mxe.forEach(t),Z0o=i(O),e7=n(O,"LI",{});var gxe=s(e7);pfe=n(gxe,"STRONG",{});var ugt=s(pfe);K0o=r(ugt,"mobilebert"),ugt.forEach(t),ewo=r(gxe," \u2014 "),AD=n(gxe,"A",{href:!0});var bgt=s(AD);owo=r(bgt,"MobileBertForPreTraining"),bgt.forEach(t),rwo=r(gxe," (MobileBERT model)"),gxe.forEach(t),two=i(O),o7=n(O,"LI",{});var hxe=s(o7);_fe=n(hxe,"STRONG",{});var vgt=s(_fe);awo=r(vgt,"mpnet"),vgt.forEach(t),nwo=r(hxe," \u2014 "),LD=n(hxe,"A",{href:!0});var Fgt=s(LD);swo=r(Fgt,"MPNetForMaskedLM"),Fgt.forEach(t),lwo=r(hxe," (MPNet model)"),hxe.forEach(t),iwo=i(O),r7=n(O,"LI",{});var pxe=s(r7);ufe=n(pxe,"STRONG",{});var Tgt=s(ufe);dwo=r(Tgt,"nezha"),Tgt.forEach(t),cwo=r(pxe," \u2014 "),yD=n(pxe,"A",{href:!0});var Mgt=s(yD);fwo=r(Mgt,"NeZhaForPreTraining"),Mgt.forEach(t),mwo=r(pxe," (NeZha model)"),pxe.forEach(t),gwo=i(O),t7=n(O,"LI",{});var _xe=s(t7);bfe=n(_xe,"STRONG",{});var Egt=s(bfe);hwo=r(Egt,"openai-gpt"),Egt.forEach(t),pwo=r(_xe," \u2014 "),xD=n(_xe,"A",{href:!0});var Cgt=s(xD);_wo=r(Cgt,"OpenAIGPTLMHeadModel"),Cgt.forEach(t),uwo=r(_xe," (OpenAI GPT model)"),_xe.forEach(t),bwo=i(O),a7=n(O,"LI",{});var uxe=s(a7);vfe=n(uxe,"STRONG",{});var wgt=s(vfe);vwo=r(wgt,"retribert"),wgt.forEach(t),Fwo=r(uxe," \u2014 "),$D=n(uxe,"A",{href:!0});var Agt=s($D);Two=r(Agt,"RetriBertModel"),Agt.forEach(t),Mwo=r(uxe," (RetriBERT model)"),uxe.forEach(t),Ewo=i(O),n7=n(O,"LI",{});var bxe=s(n7);Ffe=n(bxe,"STRONG",{});var Lgt=s(Ffe);Cwo=r(Lgt,"roberta"),Lgt.forEach(t),wwo=r(bxe," \u2014 "),kD=n(bxe,"A",{href:!0});var ygt=s(kD);Awo=r(ygt,"RobertaForMaskedLM"),ygt.forEach(t),Lwo=r(bxe," (RoBERTa model)"),bxe.forEach(t),ywo=i(O),s7=n(O,"LI",{});var vxe=s(s7);Tfe=n(vxe,"STRONG",{});var xgt=s(Tfe);xwo=r(xgt,"splinter"),xgt.forEach(t),$wo=r(vxe," \u2014 "),SD=n(vxe,"A",{href:!0});var $gt=s(SD);kwo=r($gt,"SplinterForPreTraining"),$gt.forEach(t),Swo=r(vxe," (Splinter model)"),vxe.forEach(t),Rwo=i(O),l7=n(O,"LI",{});var Fxe=s(l7);Mfe=n(Fxe,"STRONG",{});var kgt=s(Mfe);Pwo=r(kgt,"squeezebert"),kgt.forEach(t),Bwo=r(Fxe," \u2014 "),RD=n(Fxe,"A",{href:!0});var Sgt=s(RD);Iwo=r(Sgt,"SqueezeBertForMaskedLM"),Sgt.forEach(t),Nwo=r(Fxe," (SqueezeBERT model)"),Fxe.forEach(t),qwo=i(O),i7=n(O,"LI",{});var Txe=s(i7);Efe=n(Txe,"STRONG",{});var Rgt=s(Efe);jwo=r(Rgt,"t5"),Rgt.forEach(t),Dwo=r(Txe," \u2014 "),PD=n(Txe,"A",{href:!0});var Pgt=s(PD);Gwo=r(Pgt,"T5ForConditionalGeneration"),Pgt.forEach(t),Owo=r(Txe," (T5 model)"),Txe.forEach(t),Vwo=i(O),d7=n(O,"LI",{});var Mxe=s(d7);Cfe=n(Mxe,"STRONG",{});var Bgt=s(Cfe);Xwo=r(Bgt,"tapas"),Bgt.forEach(t),zwo=r(Mxe," \u2014 "),BD=n(Mxe,"A",{href:!0});var Igt=s(BD);Qwo=r(Igt,"TapasForMaskedLM"),Igt.forEach(t),Wwo=r(Mxe," (TAPAS model)"),Mxe.forEach(t),Hwo=i(O),c7=n(O,"LI",{});var Exe=s(c7);wfe=n(Exe,"STRONG",{});var Ngt=s(wfe);Uwo=r(Ngt,"transfo-xl"),Ngt.forEach(t),Jwo=r(Exe," \u2014 "),ID=n(Exe,"A",{href:!0});var qgt=s(ID);Ywo=r(qgt,"TransfoXLLMHeadModel"),qgt.forEach(t),Zwo=r(Exe," (Transformer-XL model)"),Exe.forEach(t),Kwo=i(O),f7=n(O,"LI",{});var Cxe=s(f7);Afe=n(Cxe,"STRONG",{});var jgt=s(Afe);eAo=r(jgt,"unispeech"),jgt.forEach(t),oAo=r(Cxe," \u2014 "),ND=n(Cxe,"A",{href:!0});var Dgt=s(ND);rAo=r(Dgt,"UniSpeechForPreTraining"),Dgt.forEach(t),tAo=r(Cxe," (UniSpeech model)"),Cxe.forEach(t),aAo=i(O),m7=n(O,"LI",{});var wxe=s(m7);Lfe=n(wxe,"STRONG",{});var Ggt=s(Lfe);nAo=r(Ggt,"unispeech-sat"),Ggt.forEach(t),sAo=r(wxe," \u2014 "),qD=n(wxe,"A",{href:!0});var Ogt=s(qD);lAo=r(Ogt,"UniSpeechSatForPreTraining"),Ogt.forEach(t),iAo=r(wxe," (UniSpeechSat model)"),wxe.forEach(t),dAo=i(O),g7=n(O,"LI",{});var Axe=s(g7);yfe=n(Axe,"STRONG",{});var Vgt=s(yfe);cAo=r(Vgt,"visual_bert"),Vgt.forEach(t),fAo=r(Axe," \u2014 "),jD=n(Axe,"A",{href:!0});var Xgt=s(jD);mAo=r(Xgt,"VisualBertForPreTraining"),Xgt.forEach(t),gAo=r(Axe," (VisualBERT model)"),Axe.forEach(t),hAo=i(O),h7=n(O,"LI",{});var Lxe=s(h7);xfe=n(Lxe,"STRONG",{});var zgt=s(xfe);pAo=r(zgt,"vit_mae"),zgt.forEach(t),_Ao=r(Lxe," \u2014 "),DD=n(Lxe,"A",{href:!0});var Qgt=s(DD);uAo=r(Qgt,"ViTMAEForPreTraining"),Qgt.forEach(t),bAo=r(Lxe," (ViTMAE model)"),Lxe.forEach(t),vAo=i(O),p7=n(O,"LI",{});var yxe=s(p7);$fe=n(yxe,"STRONG",{});var Wgt=s($fe);FAo=r(Wgt,"wav2vec2"),Wgt.forEach(t),TAo=r(yxe," \u2014 "),GD=n(yxe,"A",{href:!0});var Hgt=s(GD);MAo=r(Hgt,"Wav2Vec2ForPreTraining"),Hgt.forEach(t),EAo=r(yxe," (Wav2Vec2 model)"),yxe.forEach(t),CAo=i(O),_7=n(O,"LI",{});var xxe=s(_7);kfe=n(xxe,"STRONG",{});var Ugt=s(kfe);wAo=r(Ugt,"wav2vec2-conformer"),Ugt.forEach(t),AAo=r(xxe," \u2014 "),OD=n(xxe,"A",{href:!0});var Jgt=s(OD);LAo=r(Jgt,"Wav2Vec2ConformerForPreTraining"),Jgt.forEach(t),yAo=r(xxe," (Wav2Vec2-Conformer model)"),xxe.forEach(t),xAo=i(O),u7=n(O,"LI",{});var $xe=s(u7);Sfe=n($xe,"STRONG",{});var Ygt=s(Sfe);$Ao=r(Ygt,"xlm"),Ygt.forEach(t),kAo=r($xe," \u2014 "),VD=n($xe,"A",{href:!0});var Zgt=s(VD);SAo=r(Zgt,"XLMWithLMHeadModel"),Zgt.forEach(t),RAo=r($xe," (XLM model)"),$xe.forEach(t),PAo=i(O),b7=n(O,"LI",{});var kxe=s(b7);Rfe=n(kxe,"STRONG",{});var Kgt=s(Rfe);BAo=r(Kgt,"xlm-roberta"),Kgt.forEach(t),IAo=r(kxe," \u2014 "),XD=n(kxe,"A",{href:!0});var eht=s(XD);NAo=r(eht,"XLMRobertaForMaskedLM"),eht.forEach(t),qAo=r(kxe," (XLM-RoBERTa model)"),kxe.forEach(t),jAo=i(O),v7=n(O,"LI",{});var Sxe=s(v7);Pfe=n(Sxe,"STRONG",{});var oht=s(Pfe);DAo=r(oht,"xlm-roberta-xl"),oht.forEach(t),GAo=r(Sxe," \u2014 "),zD=n(Sxe,"A",{href:!0});var rht=s(zD);OAo=r(rht,"XLMRobertaXLForMaskedLM"),rht.forEach(t),VAo=r(Sxe," (XLM-RoBERTa-XL model)"),Sxe.forEach(t),XAo=i(O),F7=n(O,"LI",{});var Rxe=s(F7);Bfe=n(Rxe,"STRONG",{});var tht=s(Bfe);zAo=r(tht,"xlnet"),tht.forEach(t),QAo=r(Rxe," \u2014 "),QD=n(Rxe,"A",{href:!0});var aht=s(QD);WAo=r(aht,"XLNetLMHeadModel"),aht.forEach(t),HAo=r(Rxe," (XLNet model)"),Rxe.forEach(t),O.forEach(t),UAo=i(na),T7=n(na,"P",{});var Pxe=s(T7);JAo=r(Pxe,"The model is set in evaluation mode by default using "),Ife=n(Pxe,"CODE",{});var nht=s(Ife);YAo=r(nht,"model.eval()"),nht.forEach(t),ZAo=r(Pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=n(Pxe,"CODE",{});var sht=s(Nfe);KAo=r(sht,"model.train()"),sht.forEach(t),Pxe.forEach(t),eLo=i(na),T(M7.$$.fragment,na),na.forEach(t),Ys.forEach(t),YGe=i(f),Di=n(f,"H2",{class:!0});var tXe=s(Di);E7=n(tXe,"A",{id:!0,class:!0,href:!0});var lht=s(E7);qfe=n(lht,"SPAN",{});var iht=s(qfe);T(cy.$$.fragment,iht),iht.forEach(t),lht.forEach(t),oLo=i(tXe),jfe=n(tXe,"SPAN",{});var dht=s(jfe);rLo=r(dht,"AutoModelForCausalLM"),dht.forEach(t),tXe.forEach(t),ZGe=i(f),ko=n(f,"DIV",{class:!0});var Zs=s(ko);T(fy.$$.fragment,Zs),tLo=i(Zs),Gi=n(Zs,"P",{});var voe=s(Gi);aLo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WD=n(voe,"A",{href:!0});var cht=s(WD);nLo=r(cht,"from_pretrained()"),cht.forEach(t),sLo=r(voe," class method or the "),HD=n(voe,"A",{href:!0});var fht=s(HD);lLo=r(fht,"from_config()"),fht.forEach(t),iLo=r(voe,` class
method.`),voe.forEach(t),dLo=i(Zs),my=n(Zs,"P",{});var aXe=s(my);cLo=r(aXe,"This class cannot be instantiated directly using "),Dfe=n(aXe,"CODE",{});var mht=s(Dfe);fLo=r(mht,"__init__()"),mht.forEach(t),mLo=r(aXe," (throws an error)."),aXe.forEach(t),gLo=i(Zs),lt=n(Zs,"DIV",{class:!0});var Pw=s(lt);T(gy.$$.fragment,Pw),hLo=i(Pw),Gfe=n(Pw,"P",{});var ght=s(Gfe);pLo=r(ght,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ght.forEach(t),_Lo=i(Pw),Oi=n(Pw,"P",{});var Foe=s(Oi);uLo=r(Foe,`Note:
Loading a model from its configuration file does `),Ofe=n(Foe,"STRONG",{});var hht=s(Ofe);bLo=r(hht,"not"),hht.forEach(t),vLo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UD=n(Foe,"A",{href:!0});var pht=s(UD);FLo=r(pht,"from_pretrained()"),pht.forEach(t),TLo=r(Foe," to load the model weights."),Foe.forEach(t),MLo=i(Pw),T(C7.$$.fragment,Pw),Pw.forEach(t),ELo=i(Zs),Ze=n(Zs,"DIV",{class:!0});var sa=s(Ze);T(hy.$$.fragment,sa),CLo=i(sa),Vfe=n(sa,"P",{});var _ht=s(Vfe);wLo=r(_ht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_ht.forEach(t),ALo=i(sa),Ba=n(sa,"P",{});var Bw=s(Ba);LLo=r(Bw,"The model class to instantiate is selected based on the "),Xfe=n(Bw,"CODE",{});var uht=s(Xfe);yLo=r(uht,"model_type"),uht.forEach(t),xLo=r(Bw,` property of the config object (either
passed as an argument or loaded from `),zfe=n(Bw,"CODE",{});var bht=s(zfe);$Lo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),kLo=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qfe=n(Bw,"CODE",{});var vht=s(Qfe);SLo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),RLo=r(Bw,":"),Bw.forEach(t),PLo=i(sa),z=n(sa,"UL",{});var W=s(z);w7=n(W,"LI",{});var Bxe=s(w7);Wfe=n(Bxe,"STRONG",{});var Fht=s(Wfe);BLo=r(Fht,"bart"),Fht.forEach(t),ILo=r(Bxe," \u2014 "),JD=n(Bxe,"A",{href:!0});var Tht=s(JD);NLo=r(Tht,"BartForCausalLM"),Tht.forEach(t),qLo=r(Bxe," (BART model)"),Bxe.forEach(t),jLo=i(W),A7=n(W,"LI",{});var Ixe=s(A7);Hfe=n(Ixe,"STRONG",{});var Mht=s(Hfe);DLo=r(Mht,"bert"),Mht.forEach(t),GLo=r(Ixe," \u2014 "),YD=n(Ixe,"A",{href:!0});var Eht=s(YD);OLo=r(Eht,"BertLMHeadModel"),Eht.forEach(t),VLo=r(Ixe," (BERT model)"),Ixe.forEach(t),XLo=i(W),L7=n(W,"LI",{});var Nxe=s(L7);Ufe=n(Nxe,"STRONG",{});var Cht=s(Ufe);zLo=r(Cht,"bert-generation"),Cht.forEach(t),QLo=r(Nxe," \u2014 "),ZD=n(Nxe,"A",{href:!0});var wht=s(ZD);WLo=r(wht,"BertGenerationDecoder"),wht.forEach(t),HLo=r(Nxe," (Bert Generation model)"),Nxe.forEach(t),ULo=i(W),y7=n(W,"LI",{});var qxe=s(y7);Jfe=n(qxe,"STRONG",{});var Aht=s(Jfe);JLo=r(Aht,"big_bird"),Aht.forEach(t),YLo=r(qxe," \u2014 "),KD=n(qxe,"A",{href:!0});var Lht=s(KD);ZLo=r(Lht,"BigBirdForCausalLM"),Lht.forEach(t),KLo=r(qxe," (BigBird model)"),qxe.forEach(t),eyo=i(W),x7=n(W,"LI",{});var jxe=s(x7);Yfe=n(jxe,"STRONG",{});var yht=s(Yfe);oyo=r(yht,"bigbird_pegasus"),yht.forEach(t),ryo=r(jxe," \u2014 "),eG=n(jxe,"A",{href:!0});var xht=s(eG);tyo=r(xht,"BigBirdPegasusForCausalLM"),xht.forEach(t),ayo=r(jxe," (BigBird-Pegasus model)"),jxe.forEach(t),nyo=i(W),$7=n(W,"LI",{});var Dxe=s($7);Zfe=n(Dxe,"STRONG",{});var $ht=s(Zfe);syo=r($ht,"blenderbot"),$ht.forEach(t),lyo=r(Dxe," \u2014 "),oG=n(Dxe,"A",{href:!0});var kht=s(oG);iyo=r(kht,"BlenderbotForCausalLM"),kht.forEach(t),dyo=r(Dxe," (Blenderbot model)"),Dxe.forEach(t),cyo=i(W),k7=n(W,"LI",{});var Gxe=s(k7);Kfe=n(Gxe,"STRONG",{});var Sht=s(Kfe);fyo=r(Sht,"blenderbot-small"),Sht.forEach(t),myo=r(Gxe," \u2014 "),rG=n(Gxe,"A",{href:!0});var Rht=s(rG);gyo=r(Rht,"BlenderbotSmallForCausalLM"),Rht.forEach(t),hyo=r(Gxe," (BlenderbotSmall model)"),Gxe.forEach(t),pyo=i(W),S7=n(W,"LI",{});var Oxe=s(S7);eme=n(Oxe,"STRONG",{});var Pht=s(eme);_yo=r(Pht,"bloom"),Pht.forEach(t),uyo=r(Oxe," \u2014 "),tG=n(Oxe,"A",{href:!0});var Bht=s(tG);byo=r(Bht,"BloomForCausalLM"),Bht.forEach(t),vyo=r(Oxe," (BLOOM model)"),Oxe.forEach(t),Fyo=i(W),R7=n(W,"LI",{});var Vxe=s(R7);ome=n(Vxe,"STRONG",{});var Iht=s(ome);Tyo=r(Iht,"camembert"),Iht.forEach(t),Myo=r(Vxe," \u2014 "),aG=n(Vxe,"A",{href:!0});var Nht=s(aG);Eyo=r(Nht,"CamembertForCausalLM"),Nht.forEach(t),Cyo=r(Vxe," (CamemBERT model)"),Vxe.forEach(t),wyo=i(W),P7=n(W,"LI",{});var Xxe=s(P7);rme=n(Xxe,"STRONG",{});var qht=s(rme);Ayo=r(qht,"ctrl"),qht.forEach(t),Lyo=r(Xxe," \u2014 "),nG=n(Xxe,"A",{href:!0});var jht=s(nG);yyo=r(jht,"CTRLLMHeadModel"),jht.forEach(t),xyo=r(Xxe," (CTRL model)"),Xxe.forEach(t),$yo=i(W),B7=n(W,"LI",{});var zxe=s(B7);tme=n(zxe,"STRONG",{});var Dht=s(tme);kyo=r(Dht,"data2vec-text"),Dht.forEach(t),Syo=r(zxe," \u2014 "),sG=n(zxe,"A",{href:!0});var Ght=s(sG);Ryo=r(Ght,"Data2VecTextForCausalLM"),Ght.forEach(t),Pyo=r(zxe," (Data2VecText model)"),zxe.forEach(t),Byo=i(W),I7=n(W,"LI",{});var Qxe=s(I7);ame=n(Qxe,"STRONG",{});var Oht=s(ame);Iyo=r(Oht,"electra"),Oht.forEach(t),Nyo=r(Qxe," \u2014 "),lG=n(Qxe,"A",{href:!0});var Vht=s(lG);qyo=r(Vht,"ElectraForCausalLM"),Vht.forEach(t),jyo=r(Qxe," (ELECTRA model)"),Qxe.forEach(t),Dyo=i(W),N7=n(W,"LI",{});var Wxe=s(N7);nme=n(Wxe,"STRONG",{});var Xht=s(nme);Gyo=r(Xht,"gpt2"),Xht.forEach(t),Oyo=r(Wxe," \u2014 "),iG=n(Wxe,"A",{href:!0});var zht=s(iG);Vyo=r(zht,"GPT2LMHeadModel"),zht.forEach(t),Xyo=r(Wxe," (OpenAI GPT-2 model)"),Wxe.forEach(t),zyo=i(W),q7=n(W,"LI",{});var Hxe=s(q7);sme=n(Hxe,"STRONG",{});var Qht=s(sme);Qyo=r(Qht,"gpt_neo"),Qht.forEach(t),Wyo=r(Hxe," \u2014 "),dG=n(Hxe,"A",{href:!0});var Wht=s(dG);Hyo=r(Wht,"GPTNeoForCausalLM"),Wht.forEach(t),Uyo=r(Hxe," (GPT Neo model)"),Hxe.forEach(t),Jyo=i(W),j7=n(W,"LI",{});var Uxe=s(j7);lme=n(Uxe,"STRONG",{});var Hht=s(lme);Yyo=r(Hht,"gpt_neox"),Hht.forEach(t),Zyo=r(Uxe," \u2014 "),cG=n(Uxe,"A",{href:!0});var Uht=s(cG);Kyo=r(Uht,"GPTNeoXForCausalLM"),Uht.forEach(t),e8o=r(Uxe," (GPT NeoX model)"),Uxe.forEach(t),o8o=i(W),D7=n(W,"LI",{});var Jxe=s(D7);ime=n(Jxe,"STRONG",{});var Jht=s(ime);r8o=r(Jht,"gptj"),Jht.forEach(t),t8o=r(Jxe," \u2014 "),fG=n(Jxe,"A",{href:!0});var Yht=s(fG);a8o=r(Yht,"GPTJForCausalLM"),Yht.forEach(t),n8o=r(Jxe," (GPT-J model)"),Jxe.forEach(t),s8o=i(W),G7=n(W,"LI",{});var Yxe=s(G7);dme=n(Yxe,"STRONG",{});var Zht=s(dme);l8o=r(Zht,"marian"),Zht.forEach(t),i8o=r(Yxe," \u2014 "),mG=n(Yxe,"A",{href:!0});var Kht=s(mG);d8o=r(Kht,"MarianForCausalLM"),Kht.forEach(t),c8o=r(Yxe," (Marian model)"),Yxe.forEach(t),f8o=i(W),O7=n(W,"LI",{});var Zxe=s(O7);cme=n(Zxe,"STRONG",{});var ept=s(cme);m8o=r(ept,"mbart"),ept.forEach(t),g8o=r(Zxe," \u2014 "),gG=n(Zxe,"A",{href:!0});var opt=s(gG);h8o=r(opt,"MBartForCausalLM"),opt.forEach(t),p8o=r(Zxe," (mBART model)"),Zxe.forEach(t),_8o=i(W),V7=n(W,"LI",{});var Kxe=s(V7);fme=n(Kxe,"STRONG",{});var rpt=s(fme);u8o=r(rpt,"megatron-bert"),rpt.forEach(t),b8o=r(Kxe," \u2014 "),hG=n(Kxe,"A",{href:!0});var tpt=s(hG);v8o=r(tpt,"MegatronBertForCausalLM"),tpt.forEach(t),F8o=r(Kxe," (Megatron-BERT model)"),Kxe.forEach(t),T8o=i(W),X7=n(W,"LI",{});var e$e=s(X7);mme=n(e$e,"STRONG",{});var apt=s(mme);M8o=r(apt,"openai-gpt"),apt.forEach(t),E8o=r(e$e," \u2014 "),pG=n(e$e,"A",{href:!0});var npt=s(pG);C8o=r(npt,"OpenAIGPTLMHeadModel"),npt.forEach(t),w8o=r(e$e," (OpenAI GPT model)"),e$e.forEach(t),A8o=i(W),z7=n(W,"LI",{});var o$e=s(z7);gme=n(o$e,"STRONG",{});var spt=s(gme);L8o=r(spt,"opt"),spt.forEach(t),y8o=r(o$e," \u2014 "),_G=n(o$e,"A",{href:!0});var lpt=s(_G);x8o=r(lpt,"OPTForCausalLM"),lpt.forEach(t),$8o=r(o$e," (OPT model)"),o$e.forEach(t),k8o=i(W),Q7=n(W,"LI",{});var r$e=s(Q7);hme=n(r$e,"STRONG",{});var ipt=s(hme);S8o=r(ipt,"pegasus"),ipt.forEach(t),R8o=r(r$e," \u2014 "),uG=n(r$e,"A",{href:!0});var dpt=s(uG);P8o=r(dpt,"PegasusForCausalLM"),dpt.forEach(t),B8o=r(r$e," (Pegasus model)"),r$e.forEach(t),I8o=i(W),W7=n(W,"LI",{});var t$e=s(W7);pme=n(t$e,"STRONG",{});var cpt=s(pme);N8o=r(cpt,"plbart"),cpt.forEach(t),q8o=r(t$e," \u2014 "),bG=n(t$e,"A",{href:!0});var fpt=s(bG);j8o=r(fpt,"PLBartForCausalLM"),fpt.forEach(t),D8o=r(t$e," (PLBart model)"),t$e.forEach(t),G8o=i(W),H7=n(W,"LI",{});var a$e=s(H7);_me=n(a$e,"STRONG",{});var mpt=s(_me);O8o=r(mpt,"prophetnet"),mpt.forEach(t),V8o=r(a$e," \u2014 "),vG=n(a$e,"A",{href:!0});var gpt=s(vG);X8o=r(gpt,"ProphetNetForCausalLM"),gpt.forEach(t),z8o=r(a$e," (ProphetNet model)"),a$e.forEach(t),Q8o=i(W),U7=n(W,"LI",{});var n$e=s(U7);ume=n(n$e,"STRONG",{});var hpt=s(ume);W8o=r(hpt,"qdqbert"),hpt.forEach(t),H8o=r(n$e," \u2014 "),FG=n(n$e,"A",{href:!0});var ppt=s(FG);U8o=r(ppt,"QDQBertLMHeadModel"),ppt.forEach(t),J8o=r(n$e," (QDQBert model)"),n$e.forEach(t),Y8o=i(W),J7=n(W,"LI",{});var s$e=s(J7);bme=n(s$e,"STRONG",{});var _pt=s(bme);Z8o=r(_pt,"reformer"),_pt.forEach(t),K8o=r(s$e," \u2014 "),TG=n(s$e,"A",{href:!0});var upt=s(TG);e9o=r(upt,"ReformerModelWithLMHead"),upt.forEach(t),o9o=r(s$e," (Reformer model)"),s$e.forEach(t),r9o=i(W),Y7=n(W,"LI",{});var l$e=s(Y7);vme=n(l$e,"STRONG",{});var bpt=s(vme);t9o=r(bpt,"rembert"),bpt.forEach(t),a9o=r(l$e," \u2014 "),MG=n(l$e,"A",{href:!0});var vpt=s(MG);n9o=r(vpt,"RemBertForCausalLM"),vpt.forEach(t),s9o=r(l$e," (RemBERT model)"),l$e.forEach(t),l9o=i(W),Z7=n(W,"LI",{});var i$e=s(Z7);Fme=n(i$e,"STRONG",{});var Fpt=s(Fme);i9o=r(Fpt,"roberta"),Fpt.forEach(t),d9o=r(i$e," \u2014 "),EG=n(i$e,"A",{href:!0});var Tpt=s(EG);c9o=r(Tpt,"RobertaForCausalLM"),Tpt.forEach(t),f9o=r(i$e," (RoBERTa model)"),i$e.forEach(t),m9o=i(W),K7=n(W,"LI",{});var d$e=s(K7);Tme=n(d$e,"STRONG",{});var Mpt=s(Tme);g9o=r(Mpt,"roformer"),Mpt.forEach(t),h9o=r(d$e," \u2014 "),CG=n(d$e,"A",{href:!0});var Ept=s(CG);p9o=r(Ept,"RoFormerForCausalLM"),Ept.forEach(t),_9o=r(d$e," (RoFormer model)"),d$e.forEach(t),u9o=i(W),e1=n(W,"LI",{});var c$e=s(e1);Mme=n(c$e,"STRONG",{});var Cpt=s(Mme);b9o=r(Cpt,"speech_to_text_2"),Cpt.forEach(t),v9o=r(c$e," \u2014 "),wG=n(c$e,"A",{href:!0});var wpt=s(wG);F9o=r(wpt,"Speech2Text2ForCausalLM"),wpt.forEach(t),T9o=r(c$e," (Speech2Text2 model)"),c$e.forEach(t),M9o=i(W),o1=n(W,"LI",{});var f$e=s(o1);Eme=n(f$e,"STRONG",{});var Apt=s(Eme);E9o=r(Apt,"transfo-xl"),Apt.forEach(t),C9o=r(f$e," \u2014 "),AG=n(f$e,"A",{href:!0});var Lpt=s(AG);w9o=r(Lpt,"TransfoXLLMHeadModel"),Lpt.forEach(t),A9o=r(f$e," (Transformer-XL model)"),f$e.forEach(t),L9o=i(W),r1=n(W,"LI",{});var m$e=s(r1);Cme=n(m$e,"STRONG",{});var ypt=s(Cme);y9o=r(ypt,"trocr"),ypt.forEach(t),x9o=r(m$e," \u2014 "),LG=n(m$e,"A",{href:!0});var xpt=s(LG);$9o=r(xpt,"TrOCRForCausalLM"),xpt.forEach(t),k9o=r(m$e," (TrOCR model)"),m$e.forEach(t),S9o=i(W),t1=n(W,"LI",{});var g$e=s(t1);wme=n(g$e,"STRONG",{});var $pt=s(wme);R9o=r($pt,"xglm"),$pt.forEach(t),P9o=r(g$e," \u2014 "),yG=n(g$e,"A",{href:!0});var kpt=s(yG);B9o=r(kpt,"XGLMForCausalLM"),kpt.forEach(t),I9o=r(g$e," (XGLM model)"),g$e.forEach(t),N9o=i(W),a1=n(W,"LI",{});var h$e=s(a1);Ame=n(h$e,"STRONG",{});var Spt=s(Ame);q9o=r(Spt,"xlm"),Spt.forEach(t),j9o=r(h$e," \u2014 "),xG=n(h$e,"A",{href:!0});var Rpt=s(xG);D9o=r(Rpt,"XLMWithLMHeadModel"),Rpt.forEach(t),G9o=r(h$e," (XLM model)"),h$e.forEach(t),O9o=i(W),n1=n(W,"LI",{});var p$e=s(n1);Lme=n(p$e,"STRONG",{});var Ppt=s(Lme);V9o=r(Ppt,"xlm-prophetnet"),Ppt.forEach(t),X9o=r(p$e," \u2014 "),$G=n(p$e,"A",{href:!0});var Bpt=s($G);z9o=r(Bpt,"XLMProphetNetForCausalLM"),Bpt.forEach(t),Q9o=r(p$e," (XLM-ProphetNet model)"),p$e.forEach(t),W9o=i(W),s1=n(W,"LI",{});var _$e=s(s1);yme=n(_$e,"STRONG",{});var Ipt=s(yme);H9o=r(Ipt,"xlm-roberta"),Ipt.forEach(t),U9o=r(_$e," \u2014 "),kG=n(_$e,"A",{href:!0});var Npt=s(kG);J9o=r(Npt,"XLMRobertaForCausalLM"),Npt.forEach(t),Y9o=r(_$e," (XLM-RoBERTa model)"),_$e.forEach(t),Z9o=i(W),l1=n(W,"LI",{});var u$e=s(l1);xme=n(u$e,"STRONG",{});var qpt=s(xme);K9o=r(qpt,"xlm-roberta-xl"),qpt.forEach(t),exo=r(u$e," \u2014 "),SG=n(u$e,"A",{href:!0});var jpt=s(SG);oxo=r(jpt,"XLMRobertaXLForCausalLM"),jpt.forEach(t),rxo=r(u$e," (XLM-RoBERTa-XL model)"),u$e.forEach(t),txo=i(W),i1=n(W,"LI",{});var b$e=s(i1);$me=n(b$e,"STRONG",{});var Dpt=s($me);axo=r(Dpt,"xlnet"),Dpt.forEach(t),nxo=r(b$e," \u2014 "),RG=n(b$e,"A",{href:!0});var Gpt=s(RG);sxo=r(Gpt,"XLNetLMHeadModel"),Gpt.forEach(t),lxo=r(b$e," (XLNet model)"),b$e.forEach(t),W.forEach(t),ixo=i(sa),d1=n(sa,"P",{});var v$e=s(d1);dxo=r(v$e,"The model is set in evaluation mode by default using "),kme=n(v$e,"CODE",{});var Opt=s(kme);cxo=r(Opt,"model.eval()"),Opt.forEach(t),fxo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(v$e,"CODE",{});var Vpt=s(Sme);mxo=r(Vpt,"model.train()"),Vpt.forEach(t),v$e.forEach(t),gxo=i(sa),T(c1.$$.fragment,sa),sa.forEach(t),Zs.forEach(t),KGe=i(f),Vi=n(f,"H2",{class:!0});var nXe=s(Vi);f1=n(nXe,"A",{id:!0,class:!0,href:!0});var Xpt=s(f1);Rme=n(Xpt,"SPAN",{});var zpt=s(Rme);T(py.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),hxo=i(nXe),Pme=n(nXe,"SPAN",{});var Qpt=s(Pme);pxo=r(Qpt,"AutoModelForMaskedLM"),Qpt.forEach(t),nXe.forEach(t),eOe=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(_y.$$.fragment,Ks),_xo=i(Ks),Xi=n(Ks,"P",{});var Toe=s(Xi);uxo=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PG=n(Toe,"A",{href:!0});var Wpt=s(PG);bxo=r(Wpt,"from_pretrained()"),Wpt.forEach(t),vxo=r(Toe," class method or the "),BG=n(Toe,"A",{href:!0});var Hpt=s(BG);Fxo=r(Hpt,"from_config()"),Hpt.forEach(t),Txo=r(Toe,` class
method.`),Toe.forEach(t),Mxo=i(Ks),uy=n(Ks,"P",{});var sXe=s(uy);Exo=r(sXe,"This class cannot be instantiated directly using "),Bme=n(sXe,"CODE",{});var Upt=s(Bme);Cxo=r(Upt,"__init__()"),Upt.forEach(t),wxo=r(sXe," (throws an error)."),sXe.forEach(t),Axo=i(Ks),it=n(Ks,"DIV",{class:!0});var Iw=s(it);T(by.$$.fragment,Iw),Lxo=i(Iw),Ime=n(Iw,"P",{});var Jpt=s(Ime);yxo=r(Jpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jpt.forEach(t),xxo=i(Iw),zi=n(Iw,"P",{});var Moe=s(zi);$xo=r(Moe,`Note:
Loading a model from its configuration file does `),Nme=n(Moe,"STRONG",{});var Ypt=s(Nme);kxo=r(Ypt,"not"),Ypt.forEach(t),Sxo=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(Moe,"A",{href:!0});var Zpt=s(IG);Rxo=r(Zpt,"from_pretrained()"),Zpt.forEach(t),Pxo=r(Moe," to load the model weights."),Moe.forEach(t),Bxo=i(Iw),T(m1.$$.fragment,Iw),Iw.forEach(t),Ixo=i(Ks),Ke=n(Ks,"DIV",{class:!0});var la=s(Ke);T(vy.$$.fragment,la),Nxo=i(la),qme=n(la,"P",{});var Kpt=s(qme);qxo=r(Kpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kpt.forEach(t),jxo=i(la),Ia=n(la,"P",{});var Nw=s(Ia);Dxo=r(Nw,"The model class to instantiate is selected based on the "),jme=n(Nw,"CODE",{});var e_t=s(jme);Gxo=r(e_t,"model_type"),e_t.forEach(t),Oxo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Dme=n(Nw,"CODE",{});var o_t=s(Dme);Vxo=r(o_t,"pretrained_model_name_or_path"),o_t.forEach(t),Xxo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(Nw,"CODE",{});var r_t=s(Gme);zxo=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),Qxo=r(Nw,":"),Nw.forEach(t),Wxo=i(la),Q=n(la,"UL",{});var U=s(Q);g1=n(U,"LI",{});var F$e=s(g1);Ome=n(F$e,"STRONG",{});var t_t=s(Ome);Hxo=r(t_t,"albert"),t_t.forEach(t),Uxo=r(F$e," \u2014 "),NG=n(F$e,"A",{href:!0});var a_t=s(NG);Jxo=r(a_t,"AlbertForMaskedLM"),a_t.forEach(t),Yxo=r(F$e," (ALBERT model)"),F$e.forEach(t),Zxo=i(U),h1=n(U,"LI",{});var T$e=s(h1);Vme=n(T$e,"STRONG",{});var n_t=s(Vme);Kxo=r(n_t,"bart"),n_t.forEach(t),e$o=r(T$e," \u2014 "),qG=n(T$e,"A",{href:!0});var s_t=s(qG);o$o=r(s_t,"BartForConditionalGeneration"),s_t.forEach(t),r$o=r(T$e," (BART model)"),T$e.forEach(t),t$o=i(U),p1=n(U,"LI",{});var M$e=s(p1);Xme=n(M$e,"STRONG",{});var l_t=s(Xme);a$o=r(l_t,"bert"),l_t.forEach(t),n$o=r(M$e," \u2014 "),jG=n(M$e,"A",{href:!0});var i_t=s(jG);s$o=r(i_t,"BertForMaskedLM"),i_t.forEach(t),l$o=r(M$e," (BERT model)"),M$e.forEach(t),i$o=i(U),_1=n(U,"LI",{});var E$e=s(_1);zme=n(E$e,"STRONG",{});var d_t=s(zme);d$o=r(d_t,"big_bird"),d_t.forEach(t),c$o=r(E$e," \u2014 "),DG=n(E$e,"A",{href:!0});var c_t=s(DG);f$o=r(c_t,"BigBirdForMaskedLM"),c_t.forEach(t),m$o=r(E$e," (BigBird model)"),E$e.forEach(t),g$o=i(U),u1=n(U,"LI",{});var C$e=s(u1);Qme=n(C$e,"STRONG",{});var f_t=s(Qme);h$o=r(f_t,"camembert"),f_t.forEach(t),p$o=r(C$e," \u2014 "),GG=n(C$e,"A",{href:!0});var m_t=s(GG);_$o=r(m_t,"CamembertForMaskedLM"),m_t.forEach(t),u$o=r(C$e," (CamemBERT model)"),C$e.forEach(t),b$o=i(U),b1=n(U,"LI",{});var w$e=s(b1);Wme=n(w$e,"STRONG",{});var g_t=s(Wme);v$o=r(g_t,"convbert"),g_t.forEach(t),F$o=r(w$e," \u2014 "),OG=n(w$e,"A",{href:!0});var h_t=s(OG);T$o=r(h_t,"ConvBertForMaskedLM"),h_t.forEach(t),M$o=r(w$e," (ConvBERT model)"),w$e.forEach(t),E$o=i(U),v1=n(U,"LI",{});var A$e=s(v1);Hme=n(A$e,"STRONG",{});var p_t=s(Hme);C$o=r(p_t,"data2vec-text"),p_t.forEach(t),w$o=r(A$e," \u2014 "),VG=n(A$e,"A",{href:!0});var __t=s(VG);A$o=r(__t,"Data2VecTextForMaskedLM"),__t.forEach(t),L$o=r(A$e," (Data2VecText model)"),A$e.forEach(t),y$o=i(U),F1=n(U,"LI",{});var L$e=s(F1);Ume=n(L$e,"STRONG",{});var u_t=s(Ume);x$o=r(u_t,"deberta"),u_t.forEach(t),$$o=r(L$e," \u2014 "),XG=n(L$e,"A",{href:!0});var b_t=s(XG);k$o=r(b_t,"DebertaForMaskedLM"),b_t.forEach(t),S$o=r(L$e," (DeBERTa model)"),L$e.forEach(t),R$o=i(U),T1=n(U,"LI",{});var y$e=s(T1);Jme=n(y$e,"STRONG",{});var v_t=s(Jme);P$o=r(v_t,"deberta-v2"),v_t.forEach(t),B$o=r(y$e," \u2014 "),zG=n(y$e,"A",{href:!0});var F_t=s(zG);I$o=r(F_t,"DebertaV2ForMaskedLM"),F_t.forEach(t),N$o=r(y$e," (DeBERTa-v2 model)"),y$e.forEach(t),q$o=i(U),M1=n(U,"LI",{});var x$e=s(M1);Yme=n(x$e,"STRONG",{});var T_t=s(Yme);j$o=r(T_t,"distilbert"),T_t.forEach(t),D$o=r(x$e," \u2014 "),QG=n(x$e,"A",{href:!0});var M_t=s(QG);G$o=r(M_t,"DistilBertForMaskedLM"),M_t.forEach(t),O$o=r(x$e," (DistilBERT model)"),x$e.forEach(t),V$o=i(U),E1=n(U,"LI",{});var $$e=s(E1);Zme=n($$e,"STRONG",{});var E_t=s(Zme);X$o=r(E_t,"electra"),E_t.forEach(t),z$o=r($$e," \u2014 "),WG=n($$e,"A",{href:!0});var C_t=s(WG);Q$o=r(C_t,"ElectraForMaskedLM"),C_t.forEach(t),W$o=r($$e," (ELECTRA model)"),$$e.forEach(t),H$o=i(U),C1=n(U,"LI",{});var k$e=s(C1);Kme=n(k$e,"STRONG",{});var w_t=s(Kme);U$o=r(w_t,"flaubert"),w_t.forEach(t),J$o=r(k$e," \u2014 "),HG=n(k$e,"A",{href:!0});var A_t=s(HG);Y$o=r(A_t,"FlaubertWithLMHeadModel"),A_t.forEach(t),Z$o=r(k$e," (FlauBERT model)"),k$e.forEach(t),K$o=i(U),w1=n(U,"LI",{});var S$e=s(w1);ege=n(S$e,"STRONG",{});var L_t=s(ege);eko=r(L_t,"fnet"),L_t.forEach(t),oko=r(S$e," \u2014 "),UG=n(S$e,"A",{href:!0});var y_t=s(UG);rko=r(y_t,"FNetForMaskedLM"),y_t.forEach(t),tko=r(S$e," (FNet model)"),S$e.forEach(t),ako=i(U),A1=n(U,"LI",{});var R$e=s(A1);oge=n(R$e,"STRONG",{});var x_t=s(oge);nko=r(x_t,"funnel"),x_t.forEach(t),sko=r(R$e," \u2014 "),JG=n(R$e,"A",{href:!0});var $_t=s(JG);lko=r($_t,"FunnelForMaskedLM"),$_t.forEach(t),iko=r(R$e," (Funnel Transformer model)"),R$e.forEach(t),dko=i(U),L1=n(U,"LI",{});var P$e=s(L1);rge=n(P$e,"STRONG",{});var k_t=s(rge);cko=r(k_t,"ibert"),k_t.forEach(t),fko=r(P$e," \u2014 "),YG=n(P$e,"A",{href:!0});var S_t=s(YG);mko=r(S_t,"IBertForMaskedLM"),S_t.forEach(t),gko=r(P$e," (I-BERT model)"),P$e.forEach(t),hko=i(U),y1=n(U,"LI",{});var B$e=s(y1);tge=n(B$e,"STRONG",{});var R_t=s(tge);pko=r(R_t,"layoutlm"),R_t.forEach(t),_ko=r(B$e," \u2014 "),ZG=n(B$e,"A",{href:!0});var P_t=s(ZG);uko=r(P_t,"LayoutLMForMaskedLM"),P_t.forEach(t),bko=r(B$e," (LayoutLM model)"),B$e.forEach(t),vko=i(U),x1=n(U,"LI",{});var I$e=s(x1);age=n(I$e,"STRONG",{});var B_t=s(age);Fko=r(B_t,"longformer"),B_t.forEach(t),Tko=r(I$e," \u2014 "),KG=n(I$e,"A",{href:!0});var I_t=s(KG);Mko=r(I_t,"LongformerForMaskedLM"),I_t.forEach(t),Eko=r(I$e," (Longformer model)"),I$e.forEach(t),Cko=i(U),$1=n(U,"LI",{});var N$e=s($1);nge=n(N$e,"STRONG",{});var N_t=s(nge);wko=r(N_t,"luke"),N_t.forEach(t),Ako=r(N$e," \u2014 "),eO=n(N$e,"A",{href:!0});var q_t=s(eO);Lko=r(q_t,"LukeForMaskedLM"),q_t.forEach(t),yko=r(N$e," (LUKE model)"),N$e.forEach(t),xko=i(U),k1=n(U,"LI",{});var q$e=s(k1);sge=n(q$e,"STRONG",{});var j_t=s(sge);$ko=r(j_t,"mbart"),j_t.forEach(t),kko=r(q$e," \u2014 "),oO=n(q$e,"A",{href:!0});var D_t=s(oO);Sko=r(D_t,"MBartForConditionalGeneration"),D_t.forEach(t),Rko=r(q$e," (mBART model)"),q$e.forEach(t),Pko=i(U),S1=n(U,"LI",{});var j$e=s(S1);lge=n(j$e,"STRONG",{});var G_t=s(lge);Bko=r(G_t,"megatron-bert"),G_t.forEach(t),Iko=r(j$e," \u2014 "),rO=n(j$e,"A",{href:!0});var O_t=s(rO);Nko=r(O_t,"MegatronBertForMaskedLM"),O_t.forEach(t),qko=r(j$e," (Megatron-BERT model)"),j$e.forEach(t),jko=i(U),R1=n(U,"LI",{});var D$e=s(R1);ige=n(D$e,"STRONG",{});var V_t=s(ige);Dko=r(V_t,"mobilebert"),V_t.forEach(t),Gko=r(D$e," \u2014 "),tO=n(D$e,"A",{href:!0});var X_t=s(tO);Oko=r(X_t,"MobileBertForMaskedLM"),X_t.forEach(t),Vko=r(D$e," (MobileBERT model)"),D$e.forEach(t),Xko=i(U),P1=n(U,"LI",{});var G$e=s(P1);dge=n(G$e,"STRONG",{});var z_t=s(dge);zko=r(z_t,"mpnet"),z_t.forEach(t),Qko=r(G$e," \u2014 "),aO=n(G$e,"A",{href:!0});var Q_t=s(aO);Wko=r(Q_t,"MPNetForMaskedLM"),Q_t.forEach(t),Hko=r(G$e," (MPNet model)"),G$e.forEach(t),Uko=i(U),B1=n(U,"LI",{});var O$e=s(B1);cge=n(O$e,"STRONG",{});var W_t=s(cge);Jko=r(W_t,"nezha"),W_t.forEach(t),Yko=r(O$e," \u2014 "),nO=n(O$e,"A",{href:!0});var H_t=s(nO);Zko=r(H_t,"NeZhaForMaskedLM"),H_t.forEach(t),Kko=r(O$e," (NeZha model)"),O$e.forEach(t),eSo=i(U),I1=n(U,"LI",{});var V$e=s(I1);fge=n(V$e,"STRONG",{});var U_t=s(fge);oSo=r(U_t,"nystromformer"),U_t.forEach(t),rSo=r(V$e," \u2014 "),sO=n(V$e,"A",{href:!0});var J_t=s(sO);tSo=r(J_t,"NystromformerForMaskedLM"),J_t.forEach(t),aSo=r(V$e," (Nystr\xF6mformer model)"),V$e.forEach(t),nSo=i(U),N1=n(U,"LI",{});var X$e=s(N1);mge=n(X$e,"STRONG",{});var Y_t=s(mge);sSo=r(Y_t,"perceiver"),Y_t.forEach(t),lSo=r(X$e," \u2014 "),lO=n(X$e,"A",{href:!0});var Z_t=s(lO);iSo=r(Z_t,"PerceiverForMaskedLM"),Z_t.forEach(t),dSo=r(X$e," (Perceiver model)"),X$e.forEach(t),cSo=i(U),q1=n(U,"LI",{});var z$e=s(q1);gge=n(z$e,"STRONG",{});var K_t=s(gge);fSo=r(K_t,"qdqbert"),K_t.forEach(t),mSo=r(z$e," \u2014 "),iO=n(z$e,"A",{href:!0});var eut=s(iO);gSo=r(eut,"QDQBertForMaskedLM"),eut.forEach(t),hSo=r(z$e," (QDQBert model)"),z$e.forEach(t),pSo=i(U),j1=n(U,"LI",{});var Q$e=s(j1);hge=n(Q$e,"STRONG",{});var out=s(hge);_So=r(out,"reformer"),out.forEach(t),uSo=r(Q$e," \u2014 "),dO=n(Q$e,"A",{href:!0});var rut=s(dO);bSo=r(rut,"ReformerForMaskedLM"),rut.forEach(t),vSo=r(Q$e," (Reformer model)"),Q$e.forEach(t),FSo=i(U),D1=n(U,"LI",{});var W$e=s(D1);pge=n(W$e,"STRONG",{});var tut=s(pge);TSo=r(tut,"rembert"),tut.forEach(t),MSo=r(W$e," \u2014 "),cO=n(W$e,"A",{href:!0});var aut=s(cO);ESo=r(aut,"RemBertForMaskedLM"),aut.forEach(t),CSo=r(W$e," (RemBERT model)"),W$e.forEach(t),wSo=i(U),G1=n(U,"LI",{});var H$e=s(G1);_ge=n(H$e,"STRONG",{});var nut=s(_ge);ASo=r(nut,"roberta"),nut.forEach(t),LSo=r(H$e," \u2014 "),fO=n(H$e,"A",{href:!0});var sut=s(fO);ySo=r(sut,"RobertaForMaskedLM"),sut.forEach(t),xSo=r(H$e," (RoBERTa model)"),H$e.forEach(t),$So=i(U),O1=n(U,"LI",{});var U$e=s(O1);uge=n(U$e,"STRONG",{});var lut=s(uge);kSo=r(lut,"roformer"),lut.forEach(t),SSo=r(U$e," \u2014 "),mO=n(U$e,"A",{href:!0});var iut=s(mO);RSo=r(iut,"RoFormerForMaskedLM"),iut.forEach(t),PSo=r(U$e," (RoFormer model)"),U$e.forEach(t),BSo=i(U),V1=n(U,"LI",{});var J$e=s(V1);bge=n(J$e,"STRONG",{});var dut=s(bge);ISo=r(dut,"squeezebert"),dut.forEach(t),NSo=r(J$e," \u2014 "),gO=n(J$e,"A",{href:!0});var cut=s(gO);qSo=r(cut,"SqueezeBertForMaskedLM"),cut.forEach(t),jSo=r(J$e," (SqueezeBERT model)"),J$e.forEach(t),DSo=i(U),X1=n(U,"LI",{});var Y$e=s(X1);vge=n(Y$e,"STRONG",{});var fut=s(vge);GSo=r(fut,"tapas"),fut.forEach(t),OSo=r(Y$e," \u2014 "),hO=n(Y$e,"A",{href:!0});var mut=s(hO);VSo=r(mut,"TapasForMaskedLM"),mut.forEach(t),XSo=r(Y$e," (TAPAS model)"),Y$e.forEach(t),zSo=i(U),z1=n(U,"LI",{});var Z$e=s(z1);Fge=n(Z$e,"STRONG",{});var gut=s(Fge);QSo=r(gut,"wav2vec2"),gut.forEach(t),WSo=r(Z$e," \u2014 "),Tge=n(Z$e,"CODE",{});var hut=s(Tge);HSo=r(hut,"Wav2Vec2ForMaskedLM"),hut.forEach(t),USo=r(Z$e," (Wav2Vec2 model)"),Z$e.forEach(t),JSo=i(U),Q1=n(U,"LI",{});var K$e=s(Q1);Mge=n(K$e,"STRONG",{});var put=s(Mge);YSo=r(put,"xlm"),put.forEach(t),ZSo=r(K$e," \u2014 "),pO=n(K$e,"A",{href:!0});var _ut=s(pO);KSo=r(_ut,"XLMWithLMHeadModel"),_ut.forEach(t),eRo=r(K$e," (XLM model)"),K$e.forEach(t),oRo=i(U),W1=n(U,"LI",{});var eke=s(W1);Ege=n(eke,"STRONG",{});var uut=s(Ege);rRo=r(uut,"xlm-roberta"),uut.forEach(t),tRo=r(eke," \u2014 "),_O=n(eke,"A",{href:!0});var but=s(_O);aRo=r(but,"XLMRobertaForMaskedLM"),but.forEach(t),nRo=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),sRo=i(U),H1=n(U,"LI",{});var oke=s(H1);Cge=n(oke,"STRONG",{});var vut=s(Cge);lRo=r(vut,"xlm-roberta-xl"),vut.forEach(t),iRo=r(oke," \u2014 "),uO=n(oke,"A",{href:!0});var Fut=s(uO);dRo=r(Fut,"XLMRobertaXLForMaskedLM"),Fut.forEach(t),cRo=r(oke," (XLM-RoBERTa-XL model)"),oke.forEach(t),fRo=i(U),U1=n(U,"LI",{});var rke=s(U1);wge=n(rke,"STRONG",{});var Tut=s(wge);mRo=r(Tut,"yoso"),Tut.forEach(t),gRo=r(rke," \u2014 "),bO=n(rke,"A",{href:!0});var Mut=s(bO);hRo=r(Mut,"YosoForMaskedLM"),Mut.forEach(t),pRo=r(rke," (YOSO model)"),rke.forEach(t),U.forEach(t),_Ro=i(la),J1=n(la,"P",{});var tke=s(J1);uRo=r(tke,"The model is set in evaluation mode by default using "),Age=n(tke,"CODE",{});var Eut=s(Age);bRo=r(Eut,"model.eval()"),Eut.forEach(t),vRo=r(tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(tke,"CODE",{});var Cut=s(Lge);FRo=r(Cut,"model.train()"),Cut.forEach(t),tke.forEach(t),TRo=i(la),T(Y1.$$.fragment,la),la.forEach(t),Ks.forEach(t),oOe=i(f),Qi=n(f,"H2",{class:!0});var lXe=s(Qi);Z1=n(lXe,"A",{id:!0,class:!0,href:!0});var wut=s(Z1);yge=n(wut,"SPAN",{});var Aut=s(yge);T(Fy.$$.fragment,Aut),Aut.forEach(t),wut.forEach(t),MRo=i(lXe),xge=n(lXe,"SPAN",{});var Lut=s(xge);ERo=r(Lut,"AutoModelForSeq2SeqLM"),Lut.forEach(t),lXe.forEach(t),rOe=i(f),Ro=n(f,"DIV",{class:!0});var el=s(Ro);T(Ty.$$.fragment,el),CRo=i(el),Wi=n(el,"P",{});var Eoe=s(Wi);wRo=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vO=n(Eoe,"A",{href:!0});var yut=s(vO);ARo=r(yut,"from_pretrained()"),yut.forEach(t),LRo=r(Eoe," class method or the "),FO=n(Eoe,"A",{href:!0});var xut=s(FO);yRo=r(xut,"from_config()"),xut.forEach(t),xRo=r(Eoe,` class
method.`),Eoe.forEach(t),$Ro=i(el),My=n(el,"P",{});var iXe=s(My);kRo=r(iXe,"This class cannot be instantiated directly using "),$ge=n(iXe,"CODE",{});var $ut=s($ge);SRo=r($ut,"__init__()"),$ut.forEach(t),RRo=r(iXe," (throws an error)."),iXe.forEach(t),PRo=i(el),dt=n(el,"DIV",{class:!0});var qw=s(dt);T(Ey.$$.fragment,qw),BRo=i(qw),kge=n(qw,"P",{});var kut=s(kge);IRo=r(kut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kut.forEach(t),NRo=i(qw),Hi=n(qw,"P",{});var Coe=s(Hi);qRo=r(Coe,`Note:
Loading a model from its configuration file does `),Sge=n(Coe,"STRONG",{});var Sut=s(Sge);jRo=r(Sut,"not"),Sut.forEach(t),DRo=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(Coe,"A",{href:!0});var Rut=s(TO);GRo=r(Rut,"from_pretrained()"),Rut.forEach(t),ORo=r(Coe," to load the model weights."),Coe.forEach(t),VRo=i(qw),T(K1.$$.fragment,qw),qw.forEach(t),XRo=i(el),eo=n(el,"DIV",{class:!0});var ia=s(eo);T(Cy.$$.fragment,ia),zRo=i(ia),Rge=n(ia,"P",{});var Put=s(Rge);QRo=r(Put,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Put.forEach(t),WRo=i(ia),Na=n(ia,"P",{});var jw=s(Na);HRo=r(jw,"The model class to instantiate is selected based on the "),Pge=n(jw,"CODE",{});var But=s(Pge);URo=r(But,"model_type"),But.forEach(t),JRo=r(jw,` property of the config object (either
passed as an argument or loaded from `),Bge=n(jw,"CODE",{});var Iut=s(Bge);YRo=r(Iut,"pretrained_model_name_or_path"),Iut.forEach(t),ZRo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=n(jw,"CODE",{});var Nut=s(Ige);KRo=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),ePo=r(jw,":"),jw.forEach(t),oPo=i(ia),pe=n(ia,"UL",{});var be=s(pe);e2=n(be,"LI",{});var ake=s(e2);Nge=n(ake,"STRONG",{});var qut=s(Nge);rPo=r(qut,"bart"),qut.forEach(t),tPo=r(ake," \u2014 "),MO=n(ake,"A",{href:!0});var jut=s(MO);aPo=r(jut,"BartForConditionalGeneration"),jut.forEach(t),nPo=r(ake," (BART model)"),ake.forEach(t),sPo=i(be),o2=n(be,"LI",{});var nke=s(o2);qge=n(nke,"STRONG",{});var Dut=s(qge);lPo=r(Dut,"bigbird_pegasus"),Dut.forEach(t),iPo=r(nke," \u2014 "),EO=n(nke,"A",{href:!0});var Gut=s(EO);dPo=r(Gut,"BigBirdPegasusForConditionalGeneration"),Gut.forEach(t),cPo=r(nke," (BigBird-Pegasus model)"),nke.forEach(t),fPo=i(be),r2=n(be,"LI",{});var ske=s(r2);jge=n(ske,"STRONG",{});var Out=s(jge);mPo=r(Out,"blenderbot"),Out.forEach(t),gPo=r(ske," \u2014 "),CO=n(ske,"A",{href:!0});var Vut=s(CO);hPo=r(Vut,"BlenderbotForConditionalGeneration"),Vut.forEach(t),pPo=r(ske," (Blenderbot model)"),ske.forEach(t),_Po=i(be),t2=n(be,"LI",{});var lke=s(t2);Dge=n(lke,"STRONG",{});var Xut=s(Dge);uPo=r(Xut,"blenderbot-small"),Xut.forEach(t),bPo=r(lke," \u2014 "),wO=n(lke,"A",{href:!0});var zut=s(wO);vPo=r(zut,"BlenderbotSmallForConditionalGeneration"),zut.forEach(t),FPo=r(lke," (BlenderbotSmall model)"),lke.forEach(t),TPo=i(be),a2=n(be,"LI",{});var ike=s(a2);Gge=n(ike,"STRONG",{});var Qut=s(Gge);MPo=r(Qut,"encoder-decoder"),Qut.forEach(t),EPo=r(ike," \u2014 "),AO=n(ike,"A",{href:!0});var Wut=s(AO);CPo=r(Wut,"EncoderDecoderModel"),Wut.forEach(t),wPo=r(ike," (Encoder decoder model)"),ike.forEach(t),APo=i(be),n2=n(be,"LI",{});var dke=s(n2);Oge=n(dke,"STRONG",{});var Hut=s(Oge);LPo=r(Hut,"fsmt"),Hut.forEach(t),yPo=r(dke," \u2014 "),LO=n(dke,"A",{href:!0});var Uut=s(LO);xPo=r(Uut,"FSMTForConditionalGeneration"),Uut.forEach(t),$Po=r(dke," (FairSeq Machine-Translation model)"),dke.forEach(t),kPo=i(be),s2=n(be,"LI",{});var cke=s(s2);Vge=n(cke,"STRONG",{});var Jut=s(Vge);SPo=r(Jut,"led"),Jut.forEach(t),RPo=r(cke," \u2014 "),yO=n(cke,"A",{href:!0});var Yut=s(yO);PPo=r(Yut,"LEDForConditionalGeneration"),Yut.forEach(t),BPo=r(cke," (LED model)"),cke.forEach(t),IPo=i(be),l2=n(be,"LI",{});var fke=s(l2);Xge=n(fke,"STRONG",{});var Zut=s(Xge);NPo=r(Zut,"longt5"),Zut.forEach(t),qPo=r(fke," \u2014 "),xO=n(fke,"A",{href:!0});var Kut=s(xO);jPo=r(Kut,"LongT5ForConditionalGeneration"),Kut.forEach(t),DPo=r(fke," (LongT5 model)"),fke.forEach(t),GPo=i(be),i2=n(be,"LI",{});var mke=s(i2);zge=n(mke,"STRONG",{});var e7t=s(zge);OPo=r(e7t,"m2m_100"),e7t.forEach(t),VPo=r(mke," \u2014 "),$O=n(mke,"A",{href:!0});var o7t=s($O);XPo=r(o7t,"M2M100ForConditionalGeneration"),o7t.forEach(t),zPo=r(mke," (M2M100 model)"),mke.forEach(t),QPo=i(be),d2=n(be,"LI",{});var gke=s(d2);Qge=n(gke,"STRONG",{});var r7t=s(Qge);WPo=r(r7t,"marian"),r7t.forEach(t),HPo=r(gke," \u2014 "),kO=n(gke,"A",{href:!0});var t7t=s(kO);UPo=r(t7t,"MarianMTModel"),t7t.forEach(t),JPo=r(gke," (Marian model)"),gke.forEach(t),YPo=i(be),c2=n(be,"LI",{});var hke=s(c2);Wge=n(hke,"STRONG",{});var a7t=s(Wge);ZPo=r(a7t,"mbart"),a7t.forEach(t),KPo=r(hke," \u2014 "),SO=n(hke,"A",{href:!0});var n7t=s(SO);eBo=r(n7t,"MBartForConditionalGeneration"),n7t.forEach(t),oBo=r(hke," (mBART model)"),hke.forEach(t),rBo=i(be),f2=n(be,"LI",{});var pke=s(f2);Hge=n(pke,"STRONG",{});var s7t=s(Hge);tBo=r(s7t,"mt5"),s7t.forEach(t),aBo=r(pke," \u2014 "),RO=n(pke,"A",{href:!0});var l7t=s(RO);nBo=r(l7t,"MT5ForConditionalGeneration"),l7t.forEach(t),sBo=r(pke," (MT5 model)"),pke.forEach(t),lBo=i(be),m2=n(be,"LI",{});var _ke=s(m2);Uge=n(_ke,"STRONG",{});var i7t=s(Uge);iBo=r(i7t,"pegasus"),i7t.forEach(t),dBo=r(_ke," \u2014 "),PO=n(_ke,"A",{href:!0});var d7t=s(PO);cBo=r(d7t,"PegasusForConditionalGeneration"),d7t.forEach(t),fBo=r(_ke," (Pegasus model)"),_ke.forEach(t),mBo=i(be),g2=n(be,"LI",{});var uke=s(g2);Jge=n(uke,"STRONG",{});var c7t=s(Jge);gBo=r(c7t,"plbart"),c7t.forEach(t),hBo=r(uke," \u2014 "),BO=n(uke,"A",{href:!0});var f7t=s(BO);pBo=r(f7t,"PLBartForConditionalGeneration"),f7t.forEach(t),_Bo=r(uke," (PLBart model)"),uke.forEach(t),uBo=i(be),h2=n(be,"LI",{});var bke=s(h2);Yge=n(bke,"STRONG",{});var m7t=s(Yge);bBo=r(m7t,"prophetnet"),m7t.forEach(t),vBo=r(bke," \u2014 "),IO=n(bke,"A",{href:!0});var g7t=s(IO);FBo=r(g7t,"ProphetNetForConditionalGeneration"),g7t.forEach(t),TBo=r(bke," (ProphetNet model)"),bke.forEach(t),MBo=i(be),p2=n(be,"LI",{});var vke=s(p2);Zge=n(vke,"STRONG",{});var h7t=s(Zge);EBo=r(h7t,"t5"),h7t.forEach(t),CBo=r(vke," \u2014 "),NO=n(vke,"A",{href:!0});var p7t=s(NO);wBo=r(p7t,"T5ForConditionalGeneration"),p7t.forEach(t),ABo=r(vke," (T5 model)"),vke.forEach(t),LBo=i(be),_2=n(be,"LI",{});var Fke=s(_2);Kge=n(Fke,"STRONG",{});var _7t=s(Kge);yBo=r(_7t,"xlm-prophetnet"),_7t.forEach(t),xBo=r(Fke," \u2014 "),qO=n(Fke,"A",{href:!0});var u7t=s(qO);$Bo=r(u7t,"XLMProphetNetForConditionalGeneration"),u7t.forEach(t),kBo=r(Fke," (XLM-ProphetNet model)"),Fke.forEach(t),be.forEach(t),SBo=i(ia),u2=n(ia,"P",{});var Tke=s(u2);RBo=r(Tke,"The model is set in evaluation mode by default using "),ehe=n(Tke,"CODE",{});var b7t=s(ehe);PBo=r(b7t,"model.eval()"),b7t.forEach(t),BBo=r(Tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(Tke,"CODE",{});var v7t=s(ohe);IBo=r(v7t,"model.train()"),v7t.forEach(t),Tke.forEach(t),NBo=i(ia),T(b2.$$.fragment,ia),ia.forEach(t),el.forEach(t),tOe=i(f),Ui=n(f,"H2",{class:!0});var dXe=s(Ui);v2=n(dXe,"A",{id:!0,class:!0,href:!0});var F7t=s(v2);rhe=n(F7t,"SPAN",{});var T7t=s(rhe);T(wy.$$.fragment,T7t),T7t.forEach(t),F7t.forEach(t),qBo=i(dXe),the=n(dXe,"SPAN",{});var M7t=s(the);jBo=r(M7t,"AutoModelForSequenceClassification"),M7t.forEach(t),dXe.forEach(t),aOe=i(f),Po=n(f,"DIV",{class:!0});var ol=s(Po);T(Ay.$$.fragment,ol),DBo=i(ol),Ji=n(ol,"P",{});var woe=s(Ji);GBo=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jO=n(woe,"A",{href:!0});var E7t=s(jO);OBo=r(E7t,"from_pretrained()"),E7t.forEach(t),VBo=r(woe," class method or the "),DO=n(woe,"A",{href:!0});var C7t=s(DO);XBo=r(C7t,"from_config()"),C7t.forEach(t),zBo=r(woe,` class
method.`),woe.forEach(t),QBo=i(ol),Ly=n(ol,"P",{});var cXe=s(Ly);WBo=r(cXe,"This class cannot be instantiated directly using "),ahe=n(cXe,"CODE",{});var w7t=s(ahe);HBo=r(w7t,"__init__()"),w7t.forEach(t),UBo=r(cXe," (throws an error)."),cXe.forEach(t),JBo=i(ol),ct=n(ol,"DIV",{class:!0});var Dw=s(ct);T(yy.$$.fragment,Dw),YBo=i(Dw),nhe=n(Dw,"P",{});var A7t=s(nhe);ZBo=r(A7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),A7t.forEach(t),KBo=i(Dw),Yi=n(Dw,"P",{});var Aoe=s(Yi);eIo=r(Aoe,`Note:
Loading a model from its configuration file does `),she=n(Aoe,"STRONG",{});var L7t=s(she);oIo=r(L7t,"not"),L7t.forEach(t),rIo=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GO=n(Aoe,"A",{href:!0});var y7t=s(GO);tIo=r(y7t,"from_pretrained()"),y7t.forEach(t),aIo=r(Aoe," to load the model weights."),Aoe.forEach(t),nIo=i(Dw),T(F2.$$.fragment,Dw),Dw.forEach(t),sIo=i(ol),oo=n(ol,"DIV",{class:!0});var da=s(oo);T(xy.$$.fragment,da),lIo=i(da),lhe=n(da,"P",{});var x7t=s(lhe);iIo=r(x7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),x7t.forEach(t),dIo=i(da),qa=n(da,"P",{});var Gw=s(qa);cIo=r(Gw,"The model class to instantiate is selected based on the "),ihe=n(Gw,"CODE",{});var $7t=s(ihe);fIo=r($7t,"model_type"),$7t.forEach(t),mIo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),dhe=n(Gw,"CODE",{});var k7t=s(dhe);gIo=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),hIo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(Gw,"CODE",{});var S7t=s(che);pIo=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),_Io=r(Gw,":"),Gw.forEach(t),uIo=i(da),N=n(da,"UL",{});var q=s(N);T2=n(q,"LI",{});var Mke=s(T2);fhe=n(Mke,"STRONG",{});var R7t=s(fhe);bIo=r(R7t,"albert"),R7t.forEach(t),vIo=r(Mke," \u2014 "),OO=n(Mke,"A",{href:!0});var P7t=s(OO);FIo=r(P7t,"AlbertForSequenceClassification"),P7t.forEach(t),TIo=r(Mke," (ALBERT model)"),Mke.forEach(t),MIo=i(q),M2=n(q,"LI",{});var Eke=s(M2);mhe=n(Eke,"STRONG",{});var B7t=s(mhe);EIo=r(B7t,"bart"),B7t.forEach(t),CIo=r(Eke," \u2014 "),VO=n(Eke,"A",{href:!0});var I7t=s(VO);wIo=r(I7t,"BartForSequenceClassification"),I7t.forEach(t),AIo=r(Eke," (BART model)"),Eke.forEach(t),LIo=i(q),E2=n(q,"LI",{});var Cke=s(E2);ghe=n(Cke,"STRONG",{});var N7t=s(ghe);yIo=r(N7t,"bert"),N7t.forEach(t),xIo=r(Cke," \u2014 "),XO=n(Cke,"A",{href:!0});var q7t=s(XO);$Io=r(q7t,"BertForSequenceClassification"),q7t.forEach(t),kIo=r(Cke," (BERT model)"),Cke.forEach(t),SIo=i(q),C2=n(q,"LI",{});var wke=s(C2);hhe=n(wke,"STRONG",{});var j7t=s(hhe);RIo=r(j7t,"big_bird"),j7t.forEach(t),PIo=r(wke," \u2014 "),zO=n(wke,"A",{href:!0});var D7t=s(zO);BIo=r(D7t,"BigBirdForSequenceClassification"),D7t.forEach(t),IIo=r(wke," (BigBird model)"),wke.forEach(t),NIo=i(q),w2=n(q,"LI",{});var Ake=s(w2);phe=n(Ake,"STRONG",{});var G7t=s(phe);qIo=r(G7t,"bigbird_pegasus"),G7t.forEach(t),jIo=r(Ake," \u2014 "),QO=n(Ake,"A",{href:!0});var O7t=s(QO);DIo=r(O7t,"BigBirdPegasusForSequenceClassification"),O7t.forEach(t),GIo=r(Ake," (BigBird-Pegasus model)"),Ake.forEach(t),OIo=i(q),A2=n(q,"LI",{});var Lke=s(A2);_he=n(Lke,"STRONG",{});var V7t=s(_he);VIo=r(V7t,"bloom"),V7t.forEach(t),XIo=r(Lke," \u2014 "),WO=n(Lke,"A",{href:!0});var X7t=s(WO);zIo=r(X7t,"BloomForSequenceClassification"),X7t.forEach(t),QIo=r(Lke," (BLOOM model)"),Lke.forEach(t),WIo=i(q),L2=n(q,"LI",{});var yke=s(L2);uhe=n(yke,"STRONG",{});var z7t=s(uhe);HIo=r(z7t,"camembert"),z7t.forEach(t),UIo=r(yke," \u2014 "),HO=n(yke,"A",{href:!0});var Q7t=s(HO);JIo=r(Q7t,"CamembertForSequenceClassification"),Q7t.forEach(t),YIo=r(yke," (CamemBERT model)"),yke.forEach(t),ZIo=i(q),y2=n(q,"LI",{});var xke=s(y2);bhe=n(xke,"STRONG",{});var W7t=s(bhe);KIo=r(W7t,"canine"),W7t.forEach(t),eNo=r(xke," \u2014 "),UO=n(xke,"A",{href:!0});var H7t=s(UO);oNo=r(H7t,"CanineForSequenceClassification"),H7t.forEach(t),rNo=r(xke," (CANINE model)"),xke.forEach(t),tNo=i(q),x2=n(q,"LI",{});var $ke=s(x2);vhe=n($ke,"STRONG",{});var U7t=s(vhe);aNo=r(U7t,"convbert"),U7t.forEach(t),nNo=r($ke," \u2014 "),JO=n($ke,"A",{href:!0});var J7t=s(JO);sNo=r(J7t,"ConvBertForSequenceClassification"),J7t.forEach(t),lNo=r($ke," (ConvBERT model)"),$ke.forEach(t),iNo=i(q),$2=n(q,"LI",{});var kke=s($2);Fhe=n(kke,"STRONG",{});var Y7t=s(Fhe);dNo=r(Y7t,"ctrl"),Y7t.forEach(t),cNo=r(kke," \u2014 "),YO=n(kke,"A",{href:!0});var Z7t=s(YO);fNo=r(Z7t,"CTRLForSequenceClassification"),Z7t.forEach(t),mNo=r(kke," (CTRL model)"),kke.forEach(t),gNo=i(q),k2=n(q,"LI",{});var Ske=s(k2);The=n(Ske,"STRONG",{});var K7t=s(The);hNo=r(K7t,"data2vec-text"),K7t.forEach(t),pNo=r(Ske," \u2014 "),ZO=n(Ske,"A",{href:!0});var e1t=s(ZO);_No=r(e1t,"Data2VecTextForSequenceClassification"),e1t.forEach(t),uNo=r(Ske," (Data2VecText model)"),Ske.forEach(t),bNo=i(q),S2=n(q,"LI",{});var Rke=s(S2);Mhe=n(Rke,"STRONG",{});var o1t=s(Mhe);vNo=r(o1t,"deberta"),o1t.forEach(t),FNo=r(Rke," \u2014 "),KO=n(Rke,"A",{href:!0});var r1t=s(KO);TNo=r(r1t,"DebertaForSequenceClassification"),r1t.forEach(t),MNo=r(Rke," (DeBERTa model)"),Rke.forEach(t),ENo=i(q),R2=n(q,"LI",{});var Pke=s(R2);Ehe=n(Pke,"STRONG",{});var t1t=s(Ehe);CNo=r(t1t,"deberta-v2"),t1t.forEach(t),wNo=r(Pke," \u2014 "),eV=n(Pke,"A",{href:!0});var a1t=s(eV);ANo=r(a1t,"DebertaV2ForSequenceClassification"),a1t.forEach(t),LNo=r(Pke," (DeBERTa-v2 model)"),Pke.forEach(t),yNo=i(q),P2=n(q,"LI",{});var Bke=s(P2);Che=n(Bke,"STRONG",{});var n1t=s(Che);xNo=r(n1t,"distilbert"),n1t.forEach(t),$No=r(Bke," \u2014 "),oV=n(Bke,"A",{href:!0});var s1t=s(oV);kNo=r(s1t,"DistilBertForSequenceClassification"),s1t.forEach(t),SNo=r(Bke," (DistilBERT model)"),Bke.forEach(t),RNo=i(q),B2=n(q,"LI",{});var Ike=s(B2);whe=n(Ike,"STRONG",{});var l1t=s(whe);PNo=r(l1t,"electra"),l1t.forEach(t),BNo=r(Ike," \u2014 "),rV=n(Ike,"A",{href:!0});var i1t=s(rV);INo=r(i1t,"ElectraForSequenceClassification"),i1t.forEach(t),NNo=r(Ike," (ELECTRA model)"),Ike.forEach(t),qNo=i(q),I2=n(q,"LI",{});var Nke=s(I2);Ahe=n(Nke,"STRONG",{});var d1t=s(Ahe);jNo=r(d1t,"flaubert"),d1t.forEach(t),DNo=r(Nke," \u2014 "),tV=n(Nke,"A",{href:!0});var c1t=s(tV);GNo=r(c1t,"FlaubertForSequenceClassification"),c1t.forEach(t),ONo=r(Nke," (FlauBERT model)"),Nke.forEach(t),VNo=i(q),N2=n(q,"LI",{});var qke=s(N2);Lhe=n(qke,"STRONG",{});var f1t=s(Lhe);XNo=r(f1t,"fnet"),f1t.forEach(t),zNo=r(qke," \u2014 "),aV=n(qke,"A",{href:!0});var m1t=s(aV);QNo=r(m1t,"FNetForSequenceClassification"),m1t.forEach(t),WNo=r(qke," (FNet model)"),qke.forEach(t),HNo=i(q),q2=n(q,"LI",{});var jke=s(q2);yhe=n(jke,"STRONG",{});var g1t=s(yhe);UNo=r(g1t,"funnel"),g1t.forEach(t),JNo=r(jke," \u2014 "),nV=n(jke,"A",{href:!0});var h1t=s(nV);YNo=r(h1t,"FunnelForSequenceClassification"),h1t.forEach(t),ZNo=r(jke," (Funnel Transformer model)"),jke.forEach(t),KNo=i(q),j2=n(q,"LI",{});var Dke=s(j2);xhe=n(Dke,"STRONG",{});var p1t=s(xhe);eqo=r(p1t,"gpt2"),p1t.forEach(t),oqo=r(Dke," \u2014 "),sV=n(Dke,"A",{href:!0});var _1t=s(sV);rqo=r(_1t,"GPT2ForSequenceClassification"),_1t.forEach(t),tqo=r(Dke," (OpenAI GPT-2 model)"),Dke.forEach(t),aqo=i(q),D2=n(q,"LI",{});var Gke=s(D2);$he=n(Gke,"STRONG",{});var u1t=s($he);nqo=r(u1t,"gpt_neo"),u1t.forEach(t),sqo=r(Gke," \u2014 "),lV=n(Gke,"A",{href:!0});var b1t=s(lV);lqo=r(b1t,"GPTNeoForSequenceClassification"),b1t.forEach(t),iqo=r(Gke," (GPT Neo model)"),Gke.forEach(t),dqo=i(q),G2=n(q,"LI",{});var Oke=s(G2);khe=n(Oke,"STRONG",{});var v1t=s(khe);cqo=r(v1t,"gptj"),v1t.forEach(t),fqo=r(Oke," \u2014 "),iV=n(Oke,"A",{href:!0});var F1t=s(iV);mqo=r(F1t,"GPTJForSequenceClassification"),F1t.forEach(t),gqo=r(Oke," (GPT-J model)"),Oke.forEach(t),hqo=i(q),O2=n(q,"LI",{});var Vke=s(O2);She=n(Vke,"STRONG",{});var T1t=s(She);pqo=r(T1t,"ibert"),T1t.forEach(t),_qo=r(Vke," \u2014 "),dV=n(Vke,"A",{href:!0});var M1t=s(dV);uqo=r(M1t,"IBertForSequenceClassification"),M1t.forEach(t),bqo=r(Vke," (I-BERT model)"),Vke.forEach(t),vqo=i(q),V2=n(q,"LI",{});var Xke=s(V2);Rhe=n(Xke,"STRONG",{});var E1t=s(Rhe);Fqo=r(E1t,"layoutlm"),E1t.forEach(t),Tqo=r(Xke," \u2014 "),cV=n(Xke,"A",{href:!0});var C1t=s(cV);Mqo=r(C1t,"LayoutLMForSequenceClassification"),C1t.forEach(t),Eqo=r(Xke," (LayoutLM model)"),Xke.forEach(t),Cqo=i(q),X2=n(q,"LI",{});var zke=s(X2);Phe=n(zke,"STRONG",{});var w1t=s(Phe);wqo=r(w1t,"layoutlmv2"),w1t.forEach(t),Aqo=r(zke," \u2014 "),fV=n(zke,"A",{href:!0});var A1t=s(fV);Lqo=r(A1t,"LayoutLMv2ForSequenceClassification"),A1t.forEach(t),yqo=r(zke," (LayoutLMv2 model)"),zke.forEach(t),xqo=i(q),z2=n(q,"LI",{});var Qke=s(z2);Bhe=n(Qke,"STRONG",{});var L1t=s(Bhe);$qo=r(L1t,"layoutlmv3"),L1t.forEach(t),kqo=r(Qke," \u2014 "),mV=n(Qke,"A",{href:!0});var y1t=s(mV);Sqo=r(y1t,"LayoutLMv3ForSequenceClassification"),y1t.forEach(t),Rqo=r(Qke," (LayoutLMv3 model)"),Qke.forEach(t),Pqo=i(q),Q2=n(q,"LI",{});var Wke=s(Q2);Ihe=n(Wke,"STRONG",{});var x1t=s(Ihe);Bqo=r(x1t,"led"),x1t.forEach(t),Iqo=r(Wke," \u2014 "),gV=n(Wke,"A",{href:!0});var $1t=s(gV);Nqo=r($1t,"LEDForSequenceClassification"),$1t.forEach(t),qqo=r(Wke," (LED model)"),Wke.forEach(t),jqo=i(q),W2=n(q,"LI",{});var Hke=s(W2);Nhe=n(Hke,"STRONG",{});var k1t=s(Nhe);Dqo=r(k1t,"longformer"),k1t.forEach(t),Gqo=r(Hke," \u2014 "),hV=n(Hke,"A",{href:!0});var S1t=s(hV);Oqo=r(S1t,"LongformerForSequenceClassification"),S1t.forEach(t),Vqo=r(Hke," (Longformer model)"),Hke.forEach(t),Xqo=i(q),H2=n(q,"LI",{});var Uke=s(H2);qhe=n(Uke,"STRONG",{});var R1t=s(qhe);zqo=r(R1t,"mbart"),R1t.forEach(t),Qqo=r(Uke," \u2014 "),pV=n(Uke,"A",{href:!0});var P1t=s(pV);Wqo=r(P1t,"MBartForSequenceClassification"),P1t.forEach(t),Hqo=r(Uke," (mBART model)"),Uke.forEach(t),Uqo=i(q),U2=n(q,"LI",{});var Jke=s(U2);jhe=n(Jke,"STRONG",{});var B1t=s(jhe);Jqo=r(B1t,"megatron-bert"),B1t.forEach(t),Yqo=r(Jke," \u2014 "),_V=n(Jke,"A",{href:!0});var I1t=s(_V);Zqo=r(I1t,"MegatronBertForSequenceClassification"),I1t.forEach(t),Kqo=r(Jke," (Megatron-BERT model)"),Jke.forEach(t),ejo=i(q),J2=n(q,"LI",{});var Yke=s(J2);Dhe=n(Yke,"STRONG",{});var N1t=s(Dhe);ojo=r(N1t,"mobilebert"),N1t.forEach(t),rjo=r(Yke," \u2014 "),uV=n(Yke,"A",{href:!0});var q1t=s(uV);tjo=r(q1t,"MobileBertForSequenceClassification"),q1t.forEach(t),ajo=r(Yke," (MobileBERT model)"),Yke.forEach(t),njo=i(q),Y2=n(q,"LI",{});var Zke=s(Y2);Ghe=n(Zke,"STRONG",{});var j1t=s(Ghe);sjo=r(j1t,"mpnet"),j1t.forEach(t),ljo=r(Zke," \u2014 "),bV=n(Zke,"A",{href:!0});var D1t=s(bV);ijo=r(D1t,"MPNetForSequenceClassification"),D1t.forEach(t),djo=r(Zke," (MPNet model)"),Zke.forEach(t),cjo=i(q),Z2=n(q,"LI",{});var Kke=s(Z2);Ohe=n(Kke,"STRONG",{});var G1t=s(Ohe);fjo=r(G1t,"nezha"),G1t.forEach(t),mjo=r(Kke," \u2014 "),vV=n(Kke,"A",{href:!0});var O1t=s(vV);gjo=r(O1t,"NeZhaForSequenceClassification"),O1t.forEach(t),hjo=r(Kke," (NeZha model)"),Kke.forEach(t),pjo=i(q),K2=n(q,"LI",{});var eSe=s(K2);Vhe=n(eSe,"STRONG",{});var V1t=s(Vhe);_jo=r(V1t,"nystromformer"),V1t.forEach(t),ujo=r(eSe," \u2014 "),FV=n(eSe,"A",{href:!0});var X1t=s(FV);bjo=r(X1t,"NystromformerForSequenceClassification"),X1t.forEach(t),vjo=r(eSe," (Nystr\xF6mformer model)"),eSe.forEach(t),Fjo=i(q),eb=n(q,"LI",{});var oSe=s(eb);Xhe=n(oSe,"STRONG",{});var z1t=s(Xhe);Tjo=r(z1t,"openai-gpt"),z1t.forEach(t),Mjo=r(oSe," \u2014 "),TV=n(oSe,"A",{href:!0});var Q1t=s(TV);Ejo=r(Q1t,"OpenAIGPTForSequenceClassification"),Q1t.forEach(t),Cjo=r(oSe," (OpenAI GPT model)"),oSe.forEach(t),wjo=i(q),ob=n(q,"LI",{});var rSe=s(ob);zhe=n(rSe,"STRONG",{});var W1t=s(zhe);Ajo=r(W1t,"perceiver"),W1t.forEach(t),Ljo=r(rSe," \u2014 "),MV=n(rSe,"A",{href:!0});var H1t=s(MV);yjo=r(H1t,"PerceiverForSequenceClassification"),H1t.forEach(t),xjo=r(rSe," (Perceiver model)"),rSe.forEach(t),$jo=i(q),rb=n(q,"LI",{});var tSe=s(rb);Qhe=n(tSe,"STRONG",{});var U1t=s(Qhe);kjo=r(U1t,"plbart"),U1t.forEach(t),Sjo=r(tSe," \u2014 "),EV=n(tSe,"A",{href:!0});var J1t=s(EV);Rjo=r(J1t,"PLBartForSequenceClassification"),J1t.forEach(t),Pjo=r(tSe," (PLBart model)"),tSe.forEach(t),Bjo=i(q),tb=n(q,"LI",{});var aSe=s(tb);Whe=n(aSe,"STRONG",{});var Y1t=s(Whe);Ijo=r(Y1t,"qdqbert"),Y1t.forEach(t),Njo=r(aSe," \u2014 "),CV=n(aSe,"A",{href:!0});var Z1t=s(CV);qjo=r(Z1t,"QDQBertForSequenceClassification"),Z1t.forEach(t),jjo=r(aSe," (QDQBert model)"),aSe.forEach(t),Djo=i(q),ab=n(q,"LI",{});var nSe=s(ab);Hhe=n(nSe,"STRONG",{});var K1t=s(Hhe);Gjo=r(K1t,"reformer"),K1t.forEach(t),Ojo=r(nSe," \u2014 "),wV=n(nSe,"A",{href:!0});var e2t=s(wV);Vjo=r(e2t,"ReformerForSequenceClassification"),e2t.forEach(t),Xjo=r(nSe," (Reformer model)"),nSe.forEach(t),zjo=i(q),nb=n(q,"LI",{});var sSe=s(nb);Uhe=n(sSe,"STRONG",{});var o2t=s(Uhe);Qjo=r(o2t,"rembert"),o2t.forEach(t),Wjo=r(sSe," \u2014 "),AV=n(sSe,"A",{href:!0});var r2t=s(AV);Hjo=r(r2t,"RemBertForSequenceClassification"),r2t.forEach(t),Ujo=r(sSe," (RemBERT model)"),sSe.forEach(t),Jjo=i(q),sb=n(q,"LI",{});var lSe=s(sb);Jhe=n(lSe,"STRONG",{});var t2t=s(Jhe);Yjo=r(t2t,"roberta"),t2t.forEach(t),Zjo=r(lSe," \u2014 "),LV=n(lSe,"A",{href:!0});var a2t=s(LV);Kjo=r(a2t,"RobertaForSequenceClassification"),a2t.forEach(t),eDo=r(lSe," (RoBERTa model)"),lSe.forEach(t),oDo=i(q),lb=n(q,"LI",{});var iSe=s(lb);Yhe=n(iSe,"STRONG",{});var n2t=s(Yhe);rDo=r(n2t,"roformer"),n2t.forEach(t),tDo=r(iSe," \u2014 "),yV=n(iSe,"A",{href:!0});var s2t=s(yV);aDo=r(s2t,"RoFormerForSequenceClassification"),s2t.forEach(t),nDo=r(iSe," (RoFormer model)"),iSe.forEach(t),sDo=i(q),ib=n(q,"LI",{});var dSe=s(ib);Zhe=n(dSe,"STRONG",{});var l2t=s(Zhe);lDo=r(l2t,"squeezebert"),l2t.forEach(t),iDo=r(dSe," \u2014 "),xV=n(dSe,"A",{href:!0});var i2t=s(xV);dDo=r(i2t,"SqueezeBertForSequenceClassification"),i2t.forEach(t),cDo=r(dSe," (SqueezeBERT model)"),dSe.forEach(t),fDo=i(q),db=n(q,"LI",{});var cSe=s(db);Khe=n(cSe,"STRONG",{});var d2t=s(Khe);mDo=r(d2t,"tapas"),d2t.forEach(t),gDo=r(cSe," \u2014 "),$V=n(cSe,"A",{href:!0});var c2t=s($V);hDo=r(c2t,"TapasForSequenceClassification"),c2t.forEach(t),pDo=r(cSe," (TAPAS model)"),cSe.forEach(t),_Do=i(q),cb=n(q,"LI",{});var fSe=s(cb);epe=n(fSe,"STRONG",{});var f2t=s(epe);uDo=r(f2t,"transfo-xl"),f2t.forEach(t),bDo=r(fSe," \u2014 "),kV=n(fSe,"A",{href:!0});var m2t=s(kV);vDo=r(m2t,"TransfoXLForSequenceClassification"),m2t.forEach(t),FDo=r(fSe," (Transformer-XL model)"),fSe.forEach(t),TDo=i(q),fb=n(q,"LI",{});var mSe=s(fb);ope=n(mSe,"STRONG",{});var g2t=s(ope);MDo=r(g2t,"xlm"),g2t.forEach(t),EDo=r(mSe," \u2014 "),SV=n(mSe,"A",{href:!0});var h2t=s(SV);CDo=r(h2t,"XLMForSequenceClassification"),h2t.forEach(t),wDo=r(mSe," (XLM model)"),mSe.forEach(t),ADo=i(q),mb=n(q,"LI",{});var gSe=s(mb);rpe=n(gSe,"STRONG",{});var p2t=s(rpe);LDo=r(p2t,"xlm-roberta"),p2t.forEach(t),yDo=r(gSe," \u2014 "),RV=n(gSe,"A",{href:!0});var _2t=s(RV);xDo=r(_2t,"XLMRobertaForSequenceClassification"),_2t.forEach(t),$Do=r(gSe," (XLM-RoBERTa model)"),gSe.forEach(t),kDo=i(q),gb=n(q,"LI",{});var hSe=s(gb);tpe=n(hSe,"STRONG",{});var u2t=s(tpe);SDo=r(u2t,"xlm-roberta-xl"),u2t.forEach(t),RDo=r(hSe," \u2014 "),PV=n(hSe,"A",{href:!0});var b2t=s(PV);PDo=r(b2t,"XLMRobertaXLForSequenceClassification"),b2t.forEach(t),BDo=r(hSe," (XLM-RoBERTa-XL model)"),hSe.forEach(t),IDo=i(q),hb=n(q,"LI",{});var pSe=s(hb);ape=n(pSe,"STRONG",{});var v2t=s(ape);NDo=r(v2t,"xlnet"),v2t.forEach(t),qDo=r(pSe," \u2014 "),BV=n(pSe,"A",{href:!0});var F2t=s(BV);jDo=r(F2t,"XLNetForSequenceClassification"),F2t.forEach(t),DDo=r(pSe," (XLNet model)"),pSe.forEach(t),GDo=i(q),pb=n(q,"LI",{});var _Se=s(pb);npe=n(_Se,"STRONG",{});var T2t=s(npe);ODo=r(T2t,"yoso"),T2t.forEach(t),VDo=r(_Se," \u2014 "),IV=n(_Se,"A",{href:!0});var M2t=s(IV);XDo=r(M2t,"YosoForSequenceClassification"),M2t.forEach(t),zDo=r(_Se," (YOSO model)"),_Se.forEach(t),q.forEach(t),QDo=i(da),_b=n(da,"P",{});var uSe=s(_b);WDo=r(uSe,"The model is set in evaluation mode by default using "),spe=n(uSe,"CODE",{});var E2t=s(spe);HDo=r(E2t,"model.eval()"),E2t.forEach(t),UDo=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(uSe,"CODE",{});var C2t=s(lpe);JDo=r(C2t,"model.train()"),C2t.forEach(t),uSe.forEach(t),YDo=i(da),T(ub.$$.fragment,da),da.forEach(t),ol.forEach(t),nOe=i(f),Zi=n(f,"H2",{class:!0});var fXe=s(Zi);bb=n(fXe,"A",{id:!0,class:!0,href:!0});var w2t=s(bb);ipe=n(w2t,"SPAN",{});var A2t=s(ipe);T($y.$$.fragment,A2t),A2t.forEach(t),w2t.forEach(t),ZDo=i(fXe),dpe=n(fXe,"SPAN",{});var L2t=s(dpe);KDo=r(L2t,"AutoModelForMultipleChoice"),L2t.forEach(t),fXe.forEach(t),sOe=i(f),Bo=n(f,"DIV",{class:!0});var rl=s(Bo);T(ky.$$.fragment,rl),eGo=i(rl),Ki=n(rl,"P",{});var Loe=s(Ki);oGo=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NV=n(Loe,"A",{href:!0});var y2t=s(NV);rGo=r(y2t,"from_pretrained()"),y2t.forEach(t),tGo=r(Loe," class method or the "),qV=n(Loe,"A",{href:!0});var x2t=s(qV);aGo=r(x2t,"from_config()"),x2t.forEach(t),nGo=r(Loe,` class
method.`),Loe.forEach(t),sGo=i(rl),Sy=n(rl,"P",{});var mXe=s(Sy);lGo=r(mXe,"This class cannot be instantiated directly using "),cpe=n(mXe,"CODE",{});var $2t=s(cpe);iGo=r($2t,"__init__()"),$2t.forEach(t),dGo=r(mXe," (throws an error)."),mXe.forEach(t),cGo=i(rl),ft=n(rl,"DIV",{class:!0});var Ow=s(ft);T(Ry.$$.fragment,Ow),fGo=i(Ow),fpe=n(Ow,"P",{});var k2t=s(fpe);mGo=r(k2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k2t.forEach(t),gGo=i(Ow),ed=n(Ow,"P",{});var yoe=s(ed);hGo=r(yoe,`Note:
Loading a model from its configuration file does `),mpe=n(yoe,"STRONG",{});var S2t=s(mpe);pGo=r(S2t,"not"),S2t.forEach(t),_Go=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(yoe,"A",{href:!0});var R2t=s(jV);uGo=r(R2t,"from_pretrained()"),R2t.forEach(t),bGo=r(yoe," to load the model weights."),yoe.forEach(t),vGo=i(Ow),T(vb.$$.fragment,Ow),Ow.forEach(t),FGo=i(rl),ro=n(rl,"DIV",{class:!0});var ca=s(ro);T(Py.$$.fragment,ca),TGo=i(ca),gpe=n(ca,"P",{});var P2t=s(gpe);MGo=r(P2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P2t.forEach(t),EGo=i(ca),ja=n(ca,"P",{});var Vw=s(ja);CGo=r(Vw,"The model class to instantiate is selected based on the "),hpe=n(Vw,"CODE",{});var B2t=s(hpe);wGo=r(B2t,"model_type"),B2t.forEach(t),AGo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),ppe=n(Vw,"CODE",{});var I2t=s(ppe);LGo=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),yGo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(Vw,"CODE",{});var N2t=s(_pe);xGo=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),$Go=r(Vw,":"),Vw.forEach(t),kGo=i(ca),K=n(ca,"UL",{});var ee=s(K);Fb=n(ee,"LI",{});var bSe=s(Fb);upe=n(bSe,"STRONG",{});var q2t=s(upe);SGo=r(q2t,"albert"),q2t.forEach(t),RGo=r(bSe," \u2014 "),DV=n(bSe,"A",{href:!0});var j2t=s(DV);PGo=r(j2t,"AlbertForMultipleChoice"),j2t.forEach(t),BGo=r(bSe," (ALBERT model)"),bSe.forEach(t),IGo=i(ee),Tb=n(ee,"LI",{});var vSe=s(Tb);bpe=n(vSe,"STRONG",{});var D2t=s(bpe);NGo=r(D2t,"bert"),D2t.forEach(t),qGo=r(vSe," \u2014 "),GV=n(vSe,"A",{href:!0});var G2t=s(GV);jGo=r(G2t,"BertForMultipleChoice"),G2t.forEach(t),DGo=r(vSe," (BERT model)"),vSe.forEach(t),GGo=i(ee),Mb=n(ee,"LI",{});var FSe=s(Mb);vpe=n(FSe,"STRONG",{});var O2t=s(vpe);OGo=r(O2t,"big_bird"),O2t.forEach(t),VGo=r(FSe," \u2014 "),OV=n(FSe,"A",{href:!0});var V2t=s(OV);XGo=r(V2t,"BigBirdForMultipleChoice"),V2t.forEach(t),zGo=r(FSe," (BigBird model)"),FSe.forEach(t),QGo=i(ee),Eb=n(ee,"LI",{});var TSe=s(Eb);Fpe=n(TSe,"STRONG",{});var X2t=s(Fpe);WGo=r(X2t,"camembert"),X2t.forEach(t),HGo=r(TSe," \u2014 "),VV=n(TSe,"A",{href:!0});var z2t=s(VV);UGo=r(z2t,"CamembertForMultipleChoice"),z2t.forEach(t),JGo=r(TSe," (CamemBERT model)"),TSe.forEach(t),YGo=i(ee),Cb=n(ee,"LI",{});var MSe=s(Cb);Tpe=n(MSe,"STRONG",{});var Q2t=s(Tpe);ZGo=r(Q2t,"canine"),Q2t.forEach(t),KGo=r(MSe," \u2014 "),XV=n(MSe,"A",{href:!0});var W2t=s(XV);eOo=r(W2t,"CanineForMultipleChoice"),W2t.forEach(t),oOo=r(MSe," (CANINE model)"),MSe.forEach(t),rOo=i(ee),wb=n(ee,"LI",{});var ESe=s(wb);Mpe=n(ESe,"STRONG",{});var H2t=s(Mpe);tOo=r(H2t,"convbert"),H2t.forEach(t),aOo=r(ESe," \u2014 "),zV=n(ESe,"A",{href:!0});var U2t=s(zV);nOo=r(U2t,"ConvBertForMultipleChoice"),U2t.forEach(t),sOo=r(ESe," (ConvBERT model)"),ESe.forEach(t),lOo=i(ee),Ab=n(ee,"LI",{});var CSe=s(Ab);Epe=n(CSe,"STRONG",{});var J2t=s(Epe);iOo=r(J2t,"data2vec-text"),J2t.forEach(t),dOo=r(CSe," \u2014 "),QV=n(CSe,"A",{href:!0});var Y2t=s(QV);cOo=r(Y2t,"Data2VecTextForMultipleChoice"),Y2t.forEach(t),fOo=r(CSe," (Data2VecText model)"),CSe.forEach(t),mOo=i(ee),Lb=n(ee,"LI",{});var wSe=s(Lb);Cpe=n(wSe,"STRONG",{});var Z2t=s(Cpe);gOo=r(Z2t,"deberta-v2"),Z2t.forEach(t),hOo=r(wSe," \u2014 "),WV=n(wSe,"A",{href:!0});var K2t=s(WV);pOo=r(K2t,"DebertaV2ForMultipleChoice"),K2t.forEach(t),_Oo=r(wSe," (DeBERTa-v2 model)"),wSe.forEach(t),uOo=i(ee),yb=n(ee,"LI",{});var ASe=s(yb);wpe=n(ASe,"STRONG",{});var ebt=s(wpe);bOo=r(ebt,"distilbert"),ebt.forEach(t),vOo=r(ASe," \u2014 "),HV=n(ASe,"A",{href:!0});var obt=s(HV);FOo=r(obt,"DistilBertForMultipleChoice"),obt.forEach(t),TOo=r(ASe," (DistilBERT model)"),ASe.forEach(t),MOo=i(ee),xb=n(ee,"LI",{});var LSe=s(xb);Ape=n(LSe,"STRONG",{});var rbt=s(Ape);EOo=r(rbt,"electra"),rbt.forEach(t),COo=r(LSe," \u2014 "),UV=n(LSe,"A",{href:!0});var tbt=s(UV);wOo=r(tbt,"ElectraForMultipleChoice"),tbt.forEach(t),AOo=r(LSe," (ELECTRA model)"),LSe.forEach(t),LOo=i(ee),$b=n(ee,"LI",{});var ySe=s($b);Lpe=n(ySe,"STRONG",{});var abt=s(Lpe);yOo=r(abt,"flaubert"),abt.forEach(t),xOo=r(ySe," \u2014 "),JV=n(ySe,"A",{href:!0});var nbt=s(JV);$Oo=r(nbt,"FlaubertForMultipleChoice"),nbt.forEach(t),kOo=r(ySe," (FlauBERT model)"),ySe.forEach(t),SOo=i(ee),kb=n(ee,"LI",{});var xSe=s(kb);ype=n(xSe,"STRONG",{});var sbt=s(ype);ROo=r(sbt,"fnet"),sbt.forEach(t),POo=r(xSe," \u2014 "),YV=n(xSe,"A",{href:!0});var lbt=s(YV);BOo=r(lbt,"FNetForMultipleChoice"),lbt.forEach(t),IOo=r(xSe," (FNet model)"),xSe.forEach(t),NOo=i(ee),Sb=n(ee,"LI",{});var $Se=s(Sb);xpe=n($Se,"STRONG",{});var ibt=s(xpe);qOo=r(ibt,"funnel"),ibt.forEach(t),jOo=r($Se," \u2014 "),ZV=n($Se,"A",{href:!0});var dbt=s(ZV);DOo=r(dbt,"FunnelForMultipleChoice"),dbt.forEach(t),GOo=r($Se," (Funnel Transformer model)"),$Se.forEach(t),OOo=i(ee),Rb=n(ee,"LI",{});var kSe=s(Rb);$pe=n(kSe,"STRONG",{});var cbt=s($pe);VOo=r(cbt,"ibert"),cbt.forEach(t),XOo=r(kSe," \u2014 "),KV=n(kSe,"A",{href:!0});var fbt=s(KV);zOo=r(fbt,"IBertForMultipleChoice"),fbt.forEach(t),QOo=r(kSe," (I-BERT model)"),kSe.forEach(t),WOo=i(ee),Pb=n(ee,"LI",{});var SSe=s(Pb);kpe=n(SSe,"STRONG",{});var mbt=s(kpe);HOo=r(mbt,"longformer"),mbt.forEach(t),UOo=r(SSe," \u2014 "),eX=n(SSe,"A",{href:!0});var gbt=s(eX);JOo=r(gbt,"LongformerForMultipleChoice"),gbt.forEach(t),YOo=r(SSe," (Longformer model)"),SSe.forEach(t),ZOo=i(ee),Bb=n(ee,"LI",{});var RSe=s(Bb);Spe=n(RSe,"STRONG",{});var hbt=s(Spe);KOo=r(hbt,"megatron-bert"),hbt.forEach(t),eVo=r(RSe," \u2014 "),oX=n(RSe,"A",{href:!0});var pbt=s(oX);oVo=r(pbt,"MegatronBertForMultipleChoice"),pbt.forEach(t),rVo=r(RSe," (Megatron-BERT model)"),RSe.forEach(t),tVo=i(ee),Ib=n(ee,"LI",{});var PSe=s(Ib);Rpe=n(PSe,"STRONG",{});var _bt=s(Rpe);aVo=r(_bt,"mobilebert"),_bt.forEach(t),nVo=r(PSe," \u2014 "),rX=n(PSe,"A",{href:!0});var ubt=s(rX);sVo=r(ubt,"MobileBertForMultipleChoice"),ubt.forEach(t),lVo=r(PSe," (MobileBERT model)"),PSe.forEach(t),iVo=i(ee),Nb=n(ee,"LI",{});var BSe=s(Nb);Ppe=n(BSe,"STRONG",{});var bbt=s(Ppe);dVo=r(bbt,"mpnet"),bbt.forEach(t),cVo=r(BSe," \u2014 "),tX=n(BSe,"A",{href:!0});var vbt=s(tX);fVo=r(vbt,"MPNetForMultipleChoice"),vbt.forEach(t),mVo=r(BSe," (MPNet model)"),BSe.forEach(t),gVo=i(ee),qb=n(ee,"LI",{});var ISe=s(qb);Bpe=n(ISe,"STRONG",{});var Fbt=s(Bpe);hVo=r(Fbt,"nezha"),Fbt.forEach(t),pVo=r(ISe," \u2014 "),aX=n(ISe,"A",{href:!0});var Tbt=s(aX);_Vo=r(Tbt,"NeZhaForMultipleChoice"),Tbt.forEach(t),uVo=r(ISe," (NeZha model)"),ISe.forEach(t),bVo=i(ee),jb=n(ee,"LI",{});var NSe=s(jb);Ipe=n(NSe,"STRONG",{});var Mbt=s(Ipe);vVo=r(Mbt,"nystromformer"),Mbt.forEach(t),FVo=r(NSe," \u2014 "),nX=n(NSe,"A",{href:!0});var Ebt=s(nX);TVo=r(Ebt,"NystromformerForMultipleChoice"),Ebt.forEach(t),MVo=r(NSe," (Nystr\xF6mformer model)"),NSe.forEach(t),EVo=i(ee),Db=n(ee,"LI",{});var qSe=s(Db);Npe=n(qSe,"STRONG",{});var Cbt=s(Npe);CVo=r(Cbt,"qdqbert"),Cbt.forEach(t),wVo=r(qSe," \u2014 "),sX=n(qSe,"A",{href:!0});var wbt=s(sX);AVo=r(wbt,"QDQBertForMultipleChoice"),wbt.forEach(t),LVo=r(qSe," (QDQBert model)"),qSe.forEach(t),yVo=i(ee),Gb=n(ee,"LI",{});var jSe=s(Gb);qpe=n(jSe,"STRONG",{});var Abt=s(qpe);xVo=r(Abt,"rembert"),Abt.forEach(t),$Vo=r(jSe," \u2014 "),lX=n(jSe,"A",{href:!0});var Lbt=s(lX);kVo=r(Lbt,"RemBertForMultipleChoice"),Lbt.forEach(t),SVo=r(jSe," (RemBERT model)"),jSe.forEach(t),RVo=i(ee),Ob=n(ee,"LI",{});var DSe=s(Ob);jpe=n(DSe,"STRONG",{});var ybt=s(jpe);PVo=r(ybt,"roberta"),ybt.forEach(t),BVo=r(DSe," \u2014 "),iX=n(DSe,"A",{href:!0});var xbt=s(iX);IVo=r(xbt,"RobertaForMultipleChoice"),xbt.forEach(t),NVo=r(DSe," (RoBERTa model)"),DSe.forEach(t),qVo=i(ee),Vb=n(ee,"LI",{});var GSe=s(Vb);Dpe=n(GSe,"STRONG",{});var $bt=s(Dpe);jVo=r($bt,"roformer"),$bt.forEach(t),DVo=r(GSe," \u2014 "),dX=n(GSe,"A",{href:!0});var kbt=s(dX);GVo=r(kbt,"RoFormerForMultipleChoice"),kbt.forEach(t),OVo=r(GSe," (RoFormer model)"),GSe.forEach(t),VVo=i(ee),Xb=n(ee,"LI",{});var OSe=s(Xb);Gpe=n(OSe,"STRONG",{});var Sbt=s(Gpe);XVo=r(Sbt,"squeezebert"),Sbt.forEach(t),zVo=r(OSe," \u2014 "),cX=n(OSe,"A",{href:!0});var Rbt=s(cX);QVo=r(Rbt,"SqueezeBertForMultipleChoice"),Rbt.forEach(t),WVo=r(OSe," (SqueezeBERT model)"),OSe.forEach(t),HVo=i(ee),zb=n(ee,"LI",{});var VSe=s(zb);Ope=n(VSe,"STRONG",{});var Pbt=s(Ope);UVo=r(Pbt,"xlm"),Pbt.forEach(t),JVo=r(VSe," \u2014 "),fX=n(VSe,"A",{href:!0});var Bbt=s(fX);YVo=r(Bbt,"XLMForMultipleChoice"),Bbt.forEach(t),ZVo=r(VSe," (XLM model)"),VSe.forEach(t),KVo=i(ee),Qb=n(ee,"LI",{});var XSe=s(Qb);Vpe=n(XSe,"STRONG",{});var Ibt=s(Vpe);eXo=r(Ibt,"xlm-roberta"),Ibt.forEach(t),oXo=r(XSe," \u2014 "),mX=n(XSe,"A",{href:!0});var Nbt=s(mX);rXo=r(Nbt,"XLMRobertaForMultipleChoice"),Nbt.forEach(t),tXo=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),aXo=i(ee),Wb=n(ee,"LI",{});var zSe=s(Wb);Xpe=n(zSe,"STRONG",{});var qbt=s(Xpe);nXo=r(qbt,"xlm-roberta-xl"),qbt.forEach(t),sXo=r(zSe," \u2014 "),gX=n(zSe,"A",{href:!0});var jbt=s(gX);lXo=r(jbt,"XLMRobertaXLForMultipleChoice"),jbt.forEach(t),iXo=r(zSe," (XLM-RoBERTa-XL model)"),zSe.forEach(t),dXo=i(ee),Hb=n(ee,"LI",{});var QSe=s(Hb);zpe=n(QSe,"STRONG",{});var Dbt=s(zpe);cXo=r(Dbt,"xlnet"),Dbt.forEach(t),fXo=r(QSe," \u2014 "),hX=n(QSe,"A",{href:!0});var Gbt=s(hX);mXo=r(Gbt,"XLNetForMultipleChoice"),Gbt.forEach(t),gXo=r(QSe," (XLNet model)"),QSe.forEach(t),hXo=i(ee),Ub=n(ee,"LI",{});var WSe=s(Ub);Qpe=n(WSe,"STRONG",{});var Obt=s(Qpe);pXo=r(Obt,"yoso"),Obt.forEach(t),_Xo=r(WSe," \u2014 "),pX=n(WSe,"A",{href:!0});var Vbt=s(pX);uXo=r(Vbt,"YosoForMultipleChoice"),Vbt.forEach(t),bXo=r(WSe," (YOSO model)"),WSe.forEach(t),ee.forEach(t),vXo=i(ca),Jb=n(ca,"P",{});var HSe=s(Jb);FXo=r(HSe,"The model is set in evaluation mode by default using "),Wpe=n(HSe,"CODE",{});var Xbt=s(Wpe);TXo=r(Xbt,"model.eval()"),Xbt.forEach(t),MXo=r(HSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(HSe,"CODE",{});var zbt=s(Hpe);EXo=r(zbt,"model.train()"),zbt.forEach(t),HSe.forEach(t),CXo=i(ca),T(Yb.$$.fragment,ca),ca.forEach(t),rl.forEach(t),lOe=i(f),od=n(f,"H2",{class:!0});var gXe=s(od);Zb=n(gXe,"A",{id:!0,class:!0,href:!0});var Qbt=s(Zb);Upe=n(Qbt,"SPAN",{});var Wbt=s(Upe);T(By.$$.fragment,Wbt),Wbt.forEach(t),Qbt.forEach(t),wXo=i(gXe),Jpe=n(gXe,"SPAN",{});var Hbt=s(Jpe);AXo=r(Hbt,"AutoModelForNextSentencePrediction"),Hbt.forEach(t),gXe.forEach(t),iOe=i(f),Io=n(f,"DIV",{class:!0});var tl=s(Io);T(Iy.$$.fragment,tl),LXo=i(tl),rd=n(tl,"P",{});var xoe=s(rd);yXo=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_X=n(xoe,"A",{href:!0});var Ubt=s(_X);xXo=r(Ubt,"from_pretrained()"),Ubt.forEach(t),$Xo=r(xoe," class method or the "),uX=n(xoe,"A",{href:!0});var Jbt=s(uX);kXo=r(Jbt,"from_config()"),Jbt.forEach(t),SXo=r(xoe,` class
method.`),xoe.forEach(t),RXo=i(tl),Ny=n(tl,"P",{});var hXe=s(Ny);PXo=r(hXe,"This class cannot be instantiated directly using "),Ype=n(hXe,"CODE",{});var Ybt=s(Ype);BXo=r(Ybt,"__init__()"),Ybt.forEach(t),IXo=r(hXe," (throws an error)."),hXe.forEach(t),NXo=i(tl),mt=n(tl,"DIV",{class:!0});var Xw=s(mt);T(qy.$$.fragment,Xw),qXo=i(Xw),Zpe=n(Xw,"P",{});var Zbt=s(Zpe);jXo=r(Zbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Zbt.forEach(t),DXo=i(Xw),td=n(Xw,"P",{});var $oe=s(td);GXo=r($oe,`Note:
Loading a model from its configuration file does `),Kpe=n($oe,"STRONG",{});var Kbt=s(Kpe);OXo=r(Kbt,"not"),Kbt.forEach(t),VXo=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n($oe,"A",{href:!0});var evt=s(bX);XXo=r(evt,"from_pretrained()"),evt.forEach(t),zXo=r($oe," to load the model weights."),$oe.forEach(t),QXo=i(Xw),T(Kb.$$.fragment,Xw),Xw.forEach(t),WXo=i(tl),to=n(tl,"DIV",{class:!0});var fa=s(to);T(jy.$$.fragment,fa),HXo=i(fa),e_e=n(fa,"P",{});var ovt=s(e_e);UXo=r(ovt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ovt.forEach(t),JXo=i(fa),Da=n(fa,"P",{});var zw=s(Da);YXo=r(zw,"The model class to instantiate is selected based on the "),o_e=n(zw,"CODE",{});var rvt=s(o_e);ZXo=r(rvt,"model_type"),rvt.forEach(t),KXo=r(zw,` property of the config object (either
passed as an argument or loaded from `),r_e=n(zw,"CODE",{});var tvt=s(r_e);ezo=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),ozo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(zw,"CODE",{});var avt=s(t_e);rzo=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),tzo=r(zw,":"),zw.forEach(t),azo=i(fa),No=n(fa,"UL",{});var ma=s(No);ev=n(ma,"LI",{});var USe=s(ev);a_e=n(USe,"STRONG",{});var nvt=s(a_e);nzo=r(nvt,"bert"),nvt.forEach(t),szo=r(USe," \u2014 "),vX=n(USe,"A",{href:!0});var svt=s(vX);lzo=r(svt,"BertForNextSentencePrediction"),svt.forEach(t),izo=r(USe," (BERT model)"),USe.forEach(t),dzo=i(ma),ov=n(ma,"LI",{});var JSe=s(ov);n_e=n(JSe,"STRONG",{});var lvt=s(n_e);czo=r(lvt,"fnet"),lvt.forEach(t),fzo=r(JSe," \u2014 "),FX=n(JSe,"A",{href:!0});var ivt=s(FX);mzo=r(ivt,"FNetForNextSentencePrediction"),ivt.forEach(t),gzo=r(JSe," (FNet model)"),JSe.forEach(t),hzo=i(ma),rv=n(ma,"LI",{});var YSe=s(rv);s_e=n(YSe,"STRONG",{});var dvt=s(s_e);pzo=r(dvt,"megatron-bert"),dvt.forEach(t),_zo=r(YSe," \u2014 "),TX=n(YSe,"A",{href:!0});var cvt=s(TX);uzo=r(cvt,"MegatronBertForNextSentencePrediction"),cvt.forEach(t),bzo=r(YSe," (Megatron-BERT model)"),YSe.forEach(t),vzo=i(ma),tv=n(ma,"LI",{});var ZSe=s(tv);l_e=n(ZSe,"STRONG",{});var fvt=s(l_e);Fzo=r(fvt,"mobilebert"),fvt.forEach(t),Tzo=r(ZSe," \u2014 "),MX=n(ZSe,"A",{href:!0});var mvt=s(MX);Mzo=r(mvt,"MobileBertForNextSentencePrediction"),mvt.forEach(t),Ezo=r(ZSe," (MobileBERT model)"),ZSe.forEach(t),Czo=i(ma),av=n(ma,"LI",{});var KSe=s(av);i_e=n(KSe,"STRONG",{});var gvt=s(i_e);wzo=r(gvt,"nezha"),gvt.forEach(t),Azo=r(KSe," \u2014 "),EX=n(KSe,"A",{href:!0});var hvt=s(EX);Lzo=r(hvt,"NeZhaForNextSentencePrediction"),hvt.forEach(t),yzo=r(KSe," (NeZha model)"),KSe.forEach(t),xzo=i(ma),nv=n(ma,"LI",{});var eRe=s(nv);d_e=n(eRe,"STRONG",{});var pvt=s(d_e);$zo=r(pvt,"qdqbert"),pvt.forEach(t),kzo=r(eRe," \u2014 "),CX=n(eRe,"A",{href:!0});var _vt=s(CX);Szo=r(_vt,"QDQBertForNextSentencePrediction"),_vt.forEach(t),Rzo=r(eRe," (QDQBert model)"),eRe.forEach(t),ma.forEach(t),Pzo=i(fa),sv=n(fa,"P",{});var oRe=s(sv);Bzo=r(oRe,"The model is set in evaluation mode by default using "),c_e=n(oRe,"CODE",{});var uvt=s(c_e);Izo=r(uvt,"model.eval()"),uvt.forEach(t),Nzo=r(oRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f_e=n(oRe,"CODE",{});var bvt=s(f_e);qzo=r(bvt,"model.train()"),bvt.forEach(t),oRe.forEach(t),jzo=i(fa),T(lv.$$.fragment,fa),fa.forEach(t),tl.forEach(t),dOe=i(f),ad=n(f,"H2",{class:!0});var pXe=s(ad);iv=n(pXe,"A",{id:!0,class:!0,href:!0});var vvt=s(iv);m_e=n(vvt,"SPAN",{});var Fvt=s(m_e);T(Dy.$$.fragment,Fvt),Fvt.forEach(t),vvt.forEach(t),Dzo=i(pXe),g_e=n(pXe,"SPAN",{});var Tvt=s(g_e);Gzo=r(Tvt,"AutoModelForTokenClassification"),Tvt.forEach(t),pXe.forEach(t),cOe=i(f),qo=n(f,"DIV",{class:!0});var al=s(qo);T(Gy.$$.fragment,al),Ozo=i(al),nd=n(al,"P",{});var koe=s(nd);Vzo=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wX=n(koe,"A",{href:!0});var Mvt=s(wX);Xzo=r(Mvt,"from_pretrained()"),Mvt.forEach(t),zzo=r(koe," class method or the "),AX=n(koe,"A",{href:!0});var Evt=s(AX);Qzo=r(Evt,"from_config()"),Evt.forEach(t),Wzo=r(koe,` class
method.`),koe.forEach(t),Hzo=i(al),Oy=n(al,"P",{});var _Xe=s(Oy);Uzo=r(_Xe,"This class cannot be instantiated directly using "),h_e=n(_Xe,"CODE",{});var Cvt=s(h_e);Jzo=r(Cvt,"__init__()"),Cvt.forEach(t),Yzo=r(_Xe," (throws an error)."),_Xe.forEach(t),Zzo=i(al),gt=n(al,"DIV",{class:!0});var Qw=s(gt);T(Vy.$$.fragment,Qw),Kzo=i(Qw),p_e=n(Qw,"P",{});var wvt=s(p_e);eQo=r(wvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wvt.forEach(t),oQo=i(Qw),sd=n(Qw,"P",{});var Soe=s(sd);rQo=r(Soe,`Note:
Loading a model from its configuration file does `),__e=n(Soe,"STRONG",{});var Avt=s(__e);tQo=r(Avt,"not"),Avt.forEach(t),aQo=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(Soe,"A",{href:!0});var Lvt=s(LX);nQo=r(Lvt,"from_pretrained()"),Lvt.forEach(t),sQo=r(Soe," to load the model weights."),Soe.forEach(t),lQo=i(Qw),T(dv.$$.fragment,Qw),Qw.forEach(t),iQo=i(al),ao=n(al,"DIV",{class:!0});var ga=s(ao);T(Xy.$$.fragment,ga),dQo=i(ga),u_e=n(ga,"P",{});var yvt=s(u_e);cQo=r(yvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yvt.forEach(t),fQo=i(ga),Ga=n(ga,"P",{});var Ww=s(Ga);mQo=r(Ww,"The model class to instantiate is selected based on the "),b_e=n(Ww,"CODE",{});var xvt=s(b_e);gQo=r(xvt,"model_type"),xvt.forEach(t),hQo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),v_e=n(Ww,"CODE",{});var $vt=s(v_e);pQo=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),_Qo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(Ww,"CODE",{});var kvt=s(F_e);uQo=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),bQo=r(Ww,":"),Ww.forEach(t),vQo=i(ga),H=n(ga,"UL",{});var J=s(H);cv=n(J,"LI",{});var rRe=s(cv);T_e=n(rRe,"STRONG",{});var Svt=s(T_e);FQo=r(Svt,"albert"),Svt.forEach(t),TQo=r(rRe," \u2014 "),yX=n(rRe,"A",{href:!0});var Rvt=s(yX);MQo=r(Rvt,"AlbertForTokenClassification"),Rvt.forEach(t),EQo=r(rRe," (ALBERT model)"),rRe.forEach(t),CQo=i(J),fv=n(J,"LI",{});var tRe=s(fv);M_e=n(tRe,"STRONG",{});var Pvt=s(M_e);wQo=r(Pvt,"bert"),Pvt.forEach(t),AQo=r(tRe," \u2014 "),xX=n(tRe,"A",{href:!0});var Bvt=s(xX);LQo=r(Bvt,"BertForTokenClassification"),Bvt.forEach(t),yQo=r(tRe," (BERT model)"),tRe.forEach(t),xQo=i(J),mv=n(J,"LI",{});var aRe=s(mv);E_e=n(aRe,"STRONG",{});var Ivt=s(E_e);$Qo=r(Ivt,"big_bird"),Ivt.forEach(t),kQo=r(aRe," \u2014 "),$X=n(aRe,"A",{href:!0});var Nvt=s($X);SQo=r(Nvt,"BigBirdForTokenClassification"),Nvt.forEach(t),RQo=r(aRe," (BigBird model)"),aRe.forEach(t),PQo=i(J),gv=n(J,"LI",{});var nRe=s(gv);C_e=n(nRe,"STRONG",{});var qvt=s(C_e);BQo=r(qvt,"bloom"),qvt.forEach(t),IQo=r(nRe," \u2014 "),kX=n(nRe,"A",{href:!0});var jvt=s(kX);NQo=r(jvt,"BloomForTokenClassification"),jvt.forEach(t),qQo=r(nRe," (BLOOM model)"),nRe.forEach(t),jQo=i(J),hv=n(J,"LI",{});var sRe=s(hv);w_e=n(sRe,"STRONG",{});var Dvt=s(w_e);DQo=r(Dvt,"camembert"),Dvt.forEach(t),GQo=r(sRe," \u2014 "),SX=n(sRe,"A",{href:!0});var Gvt=s(SX);OQo=r(Gvt,"CamembertForTokenClassification"),Gvt.forEach(t),VQo=r(sRe," (CamemBERT model)"),sRe.forEach(t),XQo=i(J),pv=n(J,"LI",{});var lRe=s(pv);A_e=n(lRe,"STRONG",{});var Ovt=s(A_e);zQo=r(Ovt,"canine"),Ovt.forEach(t),QQo=r(lRe," \u2014 "),RX=n(lRe,"A",{href:!0});var Vvt=s(RX);WQo=r(Vvt,"CanineForTokenClassification"),Vvt.forEach(t),HQo=r(lRe," (CANINE model)"),lRe.forEach(t),UQo=i(J),_v=n(J,"LI",{});var iRe=s(_v);L_e=n(iRe,"STRONG",{});var Xvt=s(L_e);JQo=r(Xvt,"convbert"),Xvt.forEach(t),YQo=r(iRe," \u2014 "),PX=n(iRe,"A",{href:!0});var zvt=s(PX);ZQo=r(zvt,"ConvBertForTokenClassification"),zvt.forEach(t),KQo=r(iRe," (ConvBERT model)"),iRe.forEach(t),eWo=i(J),uv=n(J,"LI",{});var dRe=s(uv);y_e=n(dRe,"STRONG",{});var Qvt=s(y_e);oWo=r(Qvt,"data2vec-text"),Qvt.forEach(t),rWo=r(dRe," \u2014 "),BX=n(dRe,"A",{href:!0});var Wvt=s(BX);tWo=r(Wvt,"Data2VecTextForTokenClassification"),Wvt.forEach(t),aWo=r(dRe," (Data2VecText model)"),dRe.forEach(t),nWo=i(J),bv=n(J,"LI",{});var cRe=s(bv);x_e=n(cRe,"STRONG",{});var Hvt=s(x_e);sWo=r(Hvt,"deberta"),Hvt.forEach(t),lWo=r(cRe," \u2014 "),IX=n(cRe,"A",{href:!0});var Uvt=s(IX);iWo=r(Uvt,"DebertaForTokenClassification"),Uvt.forEach(t),dWo=r(cRe," (DeBERTa model)"),cRe.forEach(t),cWo=i(J),vv=n(J,"LI",{});var fRe=s(vv);$_e=n(fRe,"STRONG",{});var Jvt=s($_e);fWo=r(Jvt,"deberta-v2"),Jvt.forEach(t),mWo=r(fRe," \u2014 "),NX=n(fRe,"A",{href:!0});var Yvt=s(NX);gWo=r(Yvt,"DebertaV2ForTokenClassification"),Yvt.forEach(t),hWo=r(fRe," (DeBERTa-v2 model)"),fRe.forEach(t),pWo=i(J),Fv=n(J,"LI",{});var mRe=s(Fv);k_e=n(mRe,"STRONG",{});var Zvt=s(k_e);_Wo=r(Zvt,"distilbert"),Zvt.forEach(t),uWo=r(mRe," \u2014 "),qX=n(mRe,"A",{href:!0});var Kvt=s(qX);bWo=r(Kvt,"DistilBertForTokenClassification"),Kvt.forEach(t),vWo=r(mRe," (DistilBERT model)"),mRe.forEach(t),FWo=i(J),Tv=n(J,"LI",{});var gRe=s(Tv);S_e=n(gRe,"STRONG",{});var eFt=s(S_e);TWo=r(eFt,"electra"),eFt.forEach(t),MWo=r(gRe," \u2014 "),jX=n(gRe,"A",{href:!0});var oFt=s(jX);EWo=r(oFt,"ElectraForTokenClassification"),oFt.forEach(t),CWo=r(gRe," (ELECTRA model)"),gRe.forEach(t),wWo=i(J),Mv=n(J,"LI",{});var hRe=s(Mv);R_e=n(hRe,"STRONG",{});var rFt=s(R_e);AWo=r(rFt,"flaubert"),rFt.forEach(t),LWo=r(hRe," \u2014 "),DX=n(hRe,"A",{href:!0});var tFt=s(DX);yWo=r(tFt,"FlaubertForTokenClassification"),tFt.forEach(t),xWo=r(hRe," (FlauBERT model)"),hRe.forEach(t),$Wo=i(J),Ev=n(J,"LI",{});var pRe=s(Ev);P_e=n(pRe,"STRONG",{});var aFt=s(P_e);kWo=r(aFt,"fnet"),aFt.forEach(t),SWo=r(pRe," \u2014 "),GX=n(pRe,"A",{href:!0});var nFt=s(GX);RWo=r(nFt,"FNetForTokenClassification"),nFt.forEach(t),PWo=r(pRe," (FNet model)"),pRe.forEach(t),BWo=i(J),Cv=n(J,"LI",{});var _Re=s(Cv);B_e=n(_Re,"STRONG",{});var sFt=s(B_e);IWo=r(sFt,"funnel"),sFt.forEach(t),NWo=r(_Re," \u2014 "),OX=n(_Re,"A",{href:!0});var lFt=s(OX);qWo=r(lFt,"FunnelForTokenClassification"),lFt.forEach(t),jWo=r(_Re," (Funnel Transformer model)"),_Re.forEach(t),DWo=i(J),wv=n(J,"LI",{});var uRe=s(wv);I_e=n(uRe,"STRONG",{});var iFt=s(I_e);GWo=r(iFt,"gpt2"),iFt.forEach(t),OWo=r(uRe," \u2014 "),VX=n(uRe,"A",{href:!0});var dFt=s(VX);VWo=r(dFt,"GPT2ForTokenClassification"),dFt.forEach(t),XWo=r(uRe," (OpenAI GPT-2 model)"),uRe.forEach(t),zWo=i(J),Av=n(J,"LI",{});var bRe=s(Av);N_e=n(bRe,"STRONG",{});var cFt=s(N_e);QWo=r(cFt,"ibert"),cFt.forEach(t),WWo=r(bRe," \u2014 "),XX=n(bRe,"A",{href:!0});var fFt=s(XX);HWo=r(fFt,"IBertForTokenClassification"),fFt.forEach(t),UWo=r(bRe," (I-BERT model)"),bRe.forEach(t),JWo=i(J),Lv=n(J,"LI",{});var vRe=s(Lv);q_e=n(vRe,"STRONG",{});var mFt=s(q_e);YWo=r(mFt,"layoutlm"),mFt.forEach(t),ZWo=r(vRe," \u2014 "),zX=n(vRe,"A",{href:!0});var gFt=s(zX);KWo=r(gFt,"LayoutLMForTokenClassification"),gFt.forEach(t),eHo=r(vRe," (LayoutLM model)"),vRe.forEach(t),oHo=i(J),yv=n(J,"LI",{});var FRe=s(yv);j_e=n(FRe,"STRONG",{});var hFt=s(j_e);rHo=r(hFt,"layoutlmv2"),hFt.forEach(t),tHo=r(FRe," \u2014 "),QX=n(FRe,"A",{href:!0});var pFt=s(QX);aHo=r(pFt,"LayoutLMv2ForTokenClassification"),pFt.forEach(t),nHo=r(FRe," (LayoutLMv2 model)"),FRe.forEach(t),sHo=i(J),xv=n(J,"LI",{});var TRe=s(xv);D_e=n(TRe,"STRONG",{});var _Ft=s(D_e);lHo=r(_Ft,"layoutlmv3"),_Ft.forEach(t),iHo=r(TRe," \u2014 "),WX=n(TRe,"A",{href:!0});var uFt=s(WX);dHo=r(uFt,"LayoutLMv3ForTokenClassification"),uFt.forEach(t),cHo=r(TRe," (LayoutLMv3 model)"),TRe.forEach(t),fHo=i(J),$v=n(J,"LI",{});var MRe=s($v);G_e=n(MRe,"STRONG",{});var bFt=s(G_e);mHo=r(bFt,"longformer"),bFt.forEach(t),gHo=r(MRe," \u2014 "),HX=n(MRe,"A",{href:!0});var vFt=s(HX);hHo=r(vFt,"LongformerForTokenClassification"),vFt.forEach(t),pHo=r(MRe," (Longformer model)"),MRe.forEach(t),_Ho=i(J),kv=n(J,"LI",{});var ERe=s(kv);O_e=n(ERe,"STRONG",{});var FFt=s(O_e);uHo=r(FFt,"megatron-bert"),FFt.forEach(t),bHo=r(ERe," \u2014 "),UX=n(ERe,"A",{href:!0});var TFt=s(UX);vHo=r(TFt,"MegatronBertForTokenClassification"),TFt.forEach(t),FHo=r(ERe," (Megatron-BERT model)"),ERe.forEach(t),THo=i(J),Sv=n(J,"LI",{});var CRe=s(Sv);V_e=n(CRe,"STRONG",{});var MFt=s(V_e);MHo=r(MFt,"mobilebert"),MFt.forEach(t),EHo=r(CRe," \u2014 "),JX=n(CRe,"A",{href:!0});var EFt=s(JX);CHo=r(EFt,"MobileBertForTokenClassification"),EFt.forEach(t),wHo=r(CRe," (MobileBERT model)"),CRe.forEach(t),AHo=i(J),Rv=n(J,"LI",{});var wRe=s(Rv);X_e=n(wRe,"STRONG",{});var CFt=s(X_e);LHo=r(CFt,"mpnet"),CFt.forEach(t),yHo=r(wRe," \u2014 "),YX=n(wRe,"A",{href:!0});var wFt=s(YX);xHo=r(wFt,"MPNetForTokenClassification"),wFt.forEach(t),$Ho=r(wRe," (MPNet model)"),wRe.forEach(t),kHo=i(J),Pv=n(J,"LI",{});var ARe=s(Pv);z_e=n(ARe,"STRONG",{});var AFt=s(z_e);SHo=r(AFt,"nezha"),AFt.forEach(t),RHo=r(ARe," \u2014 "),ZX=n(ARe,"A",{href:!0});var LFt=s(ZX);PHo=r(LFt,"NeZhaForTokenClassification"),LFt.forEach(t),BHo=r(ARe," (NeZha model)"),ARe.forEach(t),IHo=i(J),Bv=n(J,"LI",{});var LRe=s(Bv);Q_e=n(LRe,"STRONG",{});var yFt=s(Q_e);NHo=r(yFt,"nystromformer"),yFt.forEach(t),qHo=r(LRe," \u2014 "),KX=n(LRe,"A",{href:!0});var xFt=s(KX);jHo=r(xFt,"NystromformerForTokenClassification"),xFt.forEach(t),DHo=r(LRe," (Nystr\xF6mformer model)"),LRe.forEach(t),GHo=i(J),Iv=n(J,"LI",{});var yRe=s(Iv);W_e=n(yRe,"STRONG",{});var $Ft=s(W_e);OHo=r($Ft,"qdqbert"),$Ft.forEach(t),VHo=r(yRe," \u2014 "),ez=n(yRe,"A",{href:!0});var kFt=s(ez);XHo=r(kFt,"QDQBertForTokenClassification"),kFt.forEach(t),zHo=r(yRe," (QDQBert model)"),yRe.forEach(t),QHo=i(J),Nv=n(J,"LI",{});var xRe=s(Nv);H_e=n(xRe,"STRONG",{});var SFt=s(H_e);WHo=r(SFt,"rembert"),SFt.forEach(t),HHo=r(xRe," \u2014 "),oz=n(xRe,"A",{href:!0});var RFt=s(oz);UHo=r(RFt,"RemBertForTokenClassification"),RFt.forEach(t),JHo=r(xRe," (RemBERT model)"),xRe.forEach(t),YHo=i(J),qv=n(J,"LI",{});var $Re=s(qv);U_e=n($Re,"STRONG",{});var PFt=s(U_e);ZHo=r(PFt,"roberta"),PFt.forEach(t),KHo=r($Re," \u2014 "),rz=n($Re,"A",{href:!0});var BFt=s(rz);eUo=r(BFt,"RobertaForTokenClassification"),BFt.forEach(t),oUo=r($Re," (RoBERTa model)"),$Re.forEach(t),rUo=i(J),jv=n(J,"LI",{});var kRe=s(jv);J_e=n(kRe,"STRONG",{});var IFt=s(J_e);tUo=r(IFt,"roformer"),IFt.forEach(t),aUo=r(kRe," \u2014 "),tz=n(kRe,"A",{href:!0});var NFt=s(tz);nUo=r(NFt,"RoFormerForTokenClassification"),NFt.forEach(t),sUo=r(kRe," (RoFormer model)"),kRe.forEach(t),lUo=i(J),Dv=n(J,"LI",{});var SRe=s(Dv);Y_e=n(SRe,"STRONG",{});var qFt=s(Y_e);iUo=r(qFt,"squeezebert"),qFt.forEach(t),dUo=r(SRe," \u2014 "),az=n(SRe,"A",{href:!0});var jFt=s(az);cUo=r(jFt,"SqueezeBertForTokenClassification"),jFt.forEach(t),fUo=r(SRe," (SqueezeBERT model)"),SRe.forEach(t),mUo=i(J),Gv=n(J,"LI",{});var RRe=s(Gv);Z_e=n(RRe,"STRONG",{});var DFt=s(Z_e);gUo=r(DFt,"xlm"),DFt.forEach(t),hUo=r(RRe," \u2014 "),nz=n(RRe,"A",{href:!0});var GFt=s(nz);pUo=r(GFt,"XLMForTokenClassification"),GFt.forEach(t),_Uo=r(RRe," (XLM model)"),RRe.forEach(t),uUo=i(J),Ov=n(J,"LI",{});var PRe=s(Ov);K_e=n(PRe,"STRONG",{});var OFt=s(K_e);bUo=r(OFt,"xlm-roberta"),OFt.forEach(t),vUo=r(PRe," \u2014 "),sz=n(PRe,"A",{href:!0});var VFt=s(sz);FUo=r(VFt,"XLMRobertaForTokenClassification"),VFt.forEach(t),TUo=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),MUo=i(J),Vv=n(J,"LI",{});var BRe=s(Vv);eue=n(BRe,"STRONG",{});var XFt=s(eue);EUo=r(XFt,"xlm-roberta-xl"),XFt.forEach(t),CUo=r(BRe," \u2014 "),lz=n(BRe,"A",{href:!0});var zFt=s(lz);wUo=r(zFt,"XLMRobertaXLForTokenClassification"),zFt.forEach(t),AUo=r(BRe," (XLM-RoBERTa-XL model)"),BRe.forEach(t),LUo=i(J),Xv=n(J,"LI",{});var IRe=s(Xv);oue=n(IRe,"STRONG",{});var QFt=s(oue);yUo=r(QFt,"xlnet"),QFt.forEach(t),xUo=r(IRe," \u2014 "),iz=n(IRe,"A",{href:!0});var WFt=s(iz);$Uo=r(WFt,"XLNetForTokenClassification"),WFt.forEach(t),kUo=r(IRe," (XLNet model)"),IRe.forEach(t),SUo=i(J),zv=n(J,"LI",{});var NRe=s(zv);rue=n(NRe,"STRONG",{});var HFt=s(rue);RUo=r(HFt,"yoso"),HFt.forEach(t),PUo=r(NRe," \u2014 "),dz=n(NRe,"A",{href:!0});var UFt=s(dz);BUo=r(UFt,"YosoForTokenClassification"),UFt.forEach(t),IUo=r(NRe," (YOSO model)"),NRe.forEach(t),J.forEach(t),NUo=i(ga),Qv=n(ga,"P",{});var qRe=s(Qv);qUo=r(qRe,"The model is set in evaluation mode by default using "),tue=n(qRe,"CODE",{});var JFt=s(tue);jUo=r(JFt,"model.eval()"),JFt.forEach(t),DUo=r(qRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(qRe,"CODE",{});var YFt=s(aue);GUo=r(YFt,"model.train()"),YFt.forEach(t),qRe.forEach(t),OUo=i(ga),T(Wv.$$.fragment,ga),ga.forEach(t),al.forEach(t),fOe=i(f),ld=n(f,"H2",{class:!0});var uXe=s(ld);Hv=n(uXe,"A",{id:!0,class:!0,href:!0});var ZFt=s(Hv);nue=n(ZFt,"SPAN",{});var KFt=s(nue);T(zy.$$.fragment,KFt),KFt.forEach(t),ZFt.forEach(t),VUo=i(uXe),sue=n(uXe,"SPAN",{});var e6t=s(sue);XUo=r(e6t,"AutoModelForQuestionAnswering"),e6t.forEach(t),uXe.forEach(t),mOe=i(f),jo=n(f,"DIV",{class:!0});var nl=s(jo);T(Qy.$$.fragment,nl),zUo=i(nl),id=n(nl,"P",{});var Roe=s(id);QUo=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cz=n(Roe,"A",{href:!0});var o6t=s(cz);WUo=r(o6t,"from_pretrained()"),o6t.forEach(t),HUo=r(Roe," class method or the "),fz=n(Roe,"A",{href:!0});var r6t=s(fz);UUo=r(r6t,"from_config()"),r6t.forEach(t),JUo=r(Roe,` class
method.`),Roe.forEach(t),YUo=i(nl),Wy=n(nl,"P",{});var bXe=s(Wy);ZUo=r(bXe,"This class cannot be instantiated directly using "),lue=n(bXe,"CODE",{});var t6t=s(lue);KUo=r(t6t,"__init__()"),t6t.forEach(t),eJo=r(bXe," (throws an error)."),bXe.forEach(t),oJo=i(nl),ht=n(nl,"DIV",{class:!0});var Hw=s(ht);T(Hy.$$.fragment,Hw),rJo=i(Hw),iue=n(Hw,"P",{});var a6t=s(iue);tJo=r(a6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a6t.forEach(t),aJo=i(Hw),dd=n(Hw,"P",{});var Poe=s(dd);nJo=r(Poe,`Note:
Loading a model from its configuration file does `),due=n(Poe,"STRONG",{});var n6t=s(due);sJo=r(n6t,"not"),n6t.forEach(t),lJo=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(Poe,"A",{href:!0});var s6t=s(mz);iJo=r(s6t,"from_pretrained()"),s6t.forEach(t),dJo=r(Poe," to load the model weights."),Poe.forEach(t),cJo=i(Hw),T(Uv.$$.fragment,Hw),Hw.forEach(t),fJo=i(nl),no=n(nl,"DIV",{class:!0});var ha=s(no);T(Uy.$$.fragment,ha),mJo=i(ha),cue=n(ha,"P",{});var l6t=s(cue);gJo=r(l6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l6t.forEach(t),hJo=i(ha),Oa=n(ha,"P",{});var Uw=s(Oa);pJo=r(Uw,"The model class to instantiate is selected based on the "),fue=n(Uw,"CODE",{});var i6t=s(fue);_Jo=r(i6t,"model_type"),i6t.forEach(t),uJo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),mue=n(Uw,"CODE",{});var d6t=s(mue);bJo=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),vJo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(Uw,"CODE",{});var c6t=s(gue);FJo=r(c6t,"pretrained_model_name_or_path"),c6t.forEach(t),TJo=r(Uw,":"),Uw.forEach(t),MJo=i(ha),V=n(ha,"UL",{});var X=s(V);Jv=n(X,"LI",{});var jRe=s(Jv);hue=n(jRe,"STRONG",{});var f6t=s(hue);EJo=r(f6t,"albert"),f6t.forEach(t),CJo=r(jRe," \u2014 "),gz=n(jRe,"A",{href:!0});var m6t=s(gz);wJo=r(m6t,"AlbertForQuestionAnswering"),m6t.forEach(t),AJo=r(jRe," (ALBERT model)"),jRe.forEach(t),LJo=i(X),Yv=n(X,"LI",{});var DRe=s(Yv);pue=n(DRe,"STRONG",{});var g6t=s(pue);yJo=r(g6t,"bart"),g6t.forEach(t),xJo=r(DRe," \u2014 "),hz=n(DRe,"A",{href:!0});var h6t=s(hz);$Jo=r(h6t,"BartForQuestionAnswering"),h6t.forEach(t),kJo=r(DRe," (BART model)"),DRe.forEach(t),SJo=i(X),Zv=n(X,"LI",{});var GRe=s(Zv);_ue=n(GRe,"STRONG",{});var p6t=s(_ue);RJo=r(p6t,"bert"),p6t.forEach(t),PJo=r(GRe," \u2014 "),pz=n(GRe,"A",{href:!0});var _6t=s(pz);BJo=r(_6t,"BertForQuestionAnswering"),_6t.forEach(t),IJo=r(GRe," (BERT model)"),GRe.forEach(t),NJo=i(X),Kv=n(X,"LI",{});var ORe=s(Kv);uue=n(ORe,"STRONG",{});var u6t=s(uue);qJo=r(u6t,"big_bird"),u6t.forEach(t),jJo=r(ORe," \u2014 "),_z=n(ORe,"A",{href:!0});var b6t=s(_z);DJo=r(b6t,"BigBirdForQuestionAnswering"),b6t.forEach(t),GJo=r(ORe," (BigBird model)"),ORe.forEach(t),OJo=i(X),eF=n(X,"LI",{});var VRe=s(eF);bue=n(VRe,"STRONG",{});var v6t=s(bue);VJo=r(v6t,"bigbird_pegasus"),v6t.forEach(t),XJo=r(VRe," \u2014 "),uz=n(VRe,"A",{href:!0});var F6t=s(uz);zJo=r(F6t,"BigBirdPegasusForQuestionAnswering"),F6t.forEach(t),QJo=r(VRe," (BigBird-Pegasus model)"),VRe.forEach(t),WJo=i(X),oF=n(X,"LI",{});var XRe=s(oF);vue=n(XRe,"STRONG",{});var T6t=s(vue);HJo=r(T6t,"camembert"),T6t.forEach(t),UJo=r(XRe," \u2014 "),bz=n(XRe,"A",{href:!0});var M6t=s(bz);JJo=r(M6t,"CamembertForQuestionAnswering"),M6t.forEach(t),YJo=r(XRe," (CamemBERT model)"),XRe.forEach(t),ZJo=i(X),rF=n(X,"LI",{});var zRe=s(rF);Fue=n(zRe,"STRONG",{});var E6t=s(Fue);KJo=r(E6t,"canine"),E6t.forEach(t),eYo=r(zRe," \u2014 "),vz=n(zRe,"A",{href:!0});var C6t=s(vz);oYo=r(C6t,"CanineForQuestionAnswering"),C6t.forEach(t),rYo=r(zRe," (CANINE model)"),zRe.forEach(t),tYo=i(X),tF=n(X,"LI",{});var QRe=s(tF);Tue=n(QRe,"STRONG",{});var w6t=s(Tue);aYo=r(w6t,"convbert"),w6t.forEach(t),nYo=r(QRe," \u2014 "),Fz=n(QRe,"A",{href:!0});var A6t=s(Fz);sYo=r(A6t,"ConvBertForQuestionAnswering"),A6t.forEach(t),lYo=r(QRe," (ConvBERT model)"),QRe.forEach(t),iYo=i(X),aF=n(X,"LI",{});var WRe=s(aF);Mue=n(WRe,"STRONG",{});var L6t=s(Mue);dYo=r(L6t,"data2vec-text"),L6t.forEach(t),cYo=r(WRe," \u2014 "),Tz=n(WRe,"A",{href:!0});var y6t=s(Tz);fYo=r(y6t,"Data2VecTextForQuestionAnswering"),y6t.forEach(t),mYo=r(WRe," (Data2VecText model)"),WRe.forEach(t),gYo=i(X),nF=n(X,"LI",{});var HRe=s(nF);Eue=n(HRe,"STRONG",{});var x6t=s(Eue);hYo=r(x6t,"deberta"),x6t.forEach(t),pYo=r(HRe," \u2014 "),Mz=n(HRe,"A",{href:!0});var $6t=s(Mz);_Yo=r($6t,"DebertaForQuestionAnswering"),$6t.forEach(t),uYo=r(HRe," (DeBERTa model)"),HRe.forEach(t),bYo=i(X),sF=n(X,"LI",{});var URe=s(sF);Cue=n(URe,"STRONG",{});var k6t=s(Cue);vYo=r(k6t,"deberta-v2"),k6t.forEach(t),FYo=r(URe," \u2014 "),Ez=n(URe,"A",{href:!0});var S6t=s(Ez);TYo=r(S6t,"DebertaV2ForQuestionAnswering"),S6t.forEach(t),MYo=r(URe," (DeBERTa-v2 model)"),URe.forEach(t),EYo=i(X),lF=n(X,"LI",{});var JRe=s(lF);wue=n(JRe,"STRONG",{});var R6t=s(wue);CYo=r(R6t,"distilbert"),R6t.forEach(t),wYo=r(JRe," \u2014 "),Cz=n(JRe,"A",{href:!0});var P6t=s(Cz);AYo=r(P6t,"DistilBertForQuestionAnswering"),P6t.forEach(t),LYo=r(JRe," (DistilBERT model)"),JRe.forEach(t),yYo=i(X),iF=n(X,"LI",{});var YRe=s(iF);Aue=n(YRe,"STRONG",{});var B6t=s(Aue);xYo=r(B6t,"electra"),B6t.forEach(t),$Yo=r(YRe," \u2014 "),wz=n(YRe,"A",{href:!0});var I6t=s(wz);kYo=r(I6t,"ElectraForQuestionAnswering"),I6t.forEach(t),SYo=r(YRe," (ELECTRA model)"),YRe.forEach(t),RYo=i(X),dF=n(X,"LI",{});var ZRe=s(dF);Lue=n(ZRe,"STRONG",{});var N6t=s(Lue);PYo=r(N6t,"flaubert"),N6t.forEach(t),BYo=r(ZRe," \u2014 "),Az=n(ZRe,"A",{href:!0});var q6t=s(Az);IYo=r(q6t,"FlaubertForQuestionAnsweringSimple"),q6t.forEach(t),NYo=r(ZRe," (FlauBERT model)"),ZRe.forEach(t),qYo=i(X),cF=n(X,"LI",{});var KRe=s(cF);yue=n(KRe,"STRONG",{});var j6t=s(yue);jYo=r(j6t,"fnet"),j6t.forEach(t),DYo=r(KRe," \u2014 "),Lz=n(KRe,"A",{href:!0});var D6t=s(Lz);GYo=r(D6t,"FNetForQuestionAnswering"),D6t.forEach(t),OYo=r(KRe," (FNet model)"),KRe.forEach(t),VYo=i(X),fF=n(X,"LI",{});var ePe=s(fF);xue=n(ePe,"STRONG",{});var G6t=s(xue);XYo=r(G6t,"funnel"),G6t.forEach(t),zYo=r(ePe," \u2014 "),yz=n(ePe,"A",{href:!0});var O6t=s(yz);QYo=r(O6t,"FunnelForQuestionAnswering"),O6t.forEach(t),WYo=r(ePe," (Funnel Transformer model)"),ePe.forEach(t),HYo=i(X),mF=n(X,"LI",{});var oPe=s(mF);$ue=n(oPe,"STRONG",{});var V6t=s($ue);UYo=r(V6t,"gptj"),V6t.forEach(t),JYo=r(oPe," \u2014 "),xz=n(oPe,"A",{href:!0});var X6t=s(xz);YYo=r(X6t,"GPTJForQuestionAnswering"),X6t.forEach(t),ZYo=r(oPe," (GPT-J model)"),oPe.forEach(t),KYo=i(X),gF=n(X,"LI",{});var rPe=s(gF);kue=n(rPe,"STRONG",{});var z6t=s(kue);eZo=r(z6t,"ibert"),z6t.forEach(t),oZo=r(rPe," \u2014 "),$z=n(rPe,"A",{href:!0});var Q6t=s($z);rZo=r(Q6t,"IBertForQuestionAnswering"),Q6t.forEach(t),tZo=r(rPe," (I-BERT model)"),rPe.forEach(t),aZo=i(X),hF=n(X,"LI",{});var tPe=s(hF);Sue=n(tPe,"STRONG",{});var W6t=s(Sue);nZo=r(W6t,"layoutlmv2"),W6t.forEach(t),sZo=r(tPe," \u2014 "),kz=n(tPe,"A",{href:!0});var H6t=s(kz);lZo=r(H6t,"LayoutLMv2ForQuestionAnswering"),H6t.forEach(t),iZo=r(tPe," (LayoutLMv2 model)"),tPe.forEach(t),dZo=i(X),pF=n(X,"LI",{});var aPe=s(pF);Rue=n(aPe,"STRONG",{});var U6t=s(Rue);cZo=r(U6t,"layoutlmv3"),U6t.forEach(t),fZo=r(aPe," \u2014 "),Sz=n(aPe,"A",{href:!0});var J6t=s(Sz);mZo=r(J6t,"LayoutLMv3ForQuestionAnswering"),J6t.forEach(t),gZo=r(aPe," (LayoutLMv3 model)"),aPe.forEach(t),hZo=i(X),_F=n(X,"LI",{});var nPe=s(_F);Pue=n(nPe,"STRONG",{});var Y6t=s(Pue);pZo=r(Y6t,"led"),Y6t.forEach(t),_Zo=r(nPe," \u2014 "),Rz=n(nPe,"A",{href:!0});var Z6t=s(Rz);uZo=r(Z6t,"LEDForQuestionAnswering"),Z6t.forEach(t),bZo=r(nPe," (LED model)"),nPe.forEach(t),vZo=i(X),uF=n(X,"LI",{});var sPe=s(uF);Bue=n(sPe,"STRONG",{});var K6t=s(Bue);FZo=r(K6t,"longformer"),K6t.forEach(t),TZo=r(sPe," \u2014 "),Pz=n(sPe,"A",{href:!0});var eTt=s(Pz);MZo=r(eTt,"LongformerForQuestionAnswering"),eTt.forEach(t),EZo=r(sPe," (Longformer model)"),sPe.forEach(t),CZo=i(X),bF=n(X,"LI",{});var lPe=s(bF);Iue=n(lPe,"STRONG",{});var oTt=s(Iue);wZo=r(oTt,"lxmert"),oTt.forEach(t),AZo=r(lPe," \u2014 "),Bz=n(lPe,"A",{href:!0});var rTt=s(Bz);LZo=r(rTt,"LxmertForQuestionAnswering"),rTt.forEach(t),yZo=r(lPe," (LXMERT model)"),lPe.forEach(t),xZo=i(X),vF=n(X,"LI",{});var iPe=s(vF);Nue=n(iPe,"STRONG",{});var tTt=s(Nue);$Zo=r(tTt,"mbart"),tTt.forEach(t),kZo=r(iPe," \u2014 "),Iz=n(iPe,"A",{href:!0});var aTt=s(Iz);SZo=r(aTt,"MBartForQuestionAnswering"),aTt.forEach(t),RZo=r(iPe," (mBART model)"),iPe.forEach(t),PZo=i(X),FF=n(X,"LI",{});var dPe=s(FF);que=n(dPe,"STRONG",{});var nTt=s(que);BZo=r(nTt,"megatron-bert"),nTt.forEach(t),IZo=r(dPe," \u2014 "),Nz=n(dPe,"A",{href:!0});var sTt=s(Nz);NZo=r(sTt,"MegatronBertForQuestionAnswering"),sTt.forEach(t),qZo=r(dPe," (Megatron-BERT model)"),dPe.forEach(t),jZo=i(X),TF=n(X,"LI",{});var cPe=s(TF);jue=n(cPe,"STRONG",{});var lTt=s(jue);DZo=r(lTt,"mobilebert"),lTt.forEach(t),GZo=r(cPe," \u2014 "),qz=n(cPe,"A",{href:!0});var iTt=s(qz);OZo=r(iTt,"MobileBertForQuestionAnswering"),iTt.forEach(t),VZo=r(cPe," (MobileBERT model)"),cPe.forEach(t),XZo=i(X),MF=n(X,"LI",{});var fPe=s(MF);Due=n(fPe,"STRONG",{});var dTt=s(Due);zZo=r(dTt,"mpnet"),dTt.forEach(t),QZo=r(fPe," \u2014 "),jz=n(fPe,"A",{href:!0});var cTt=s(jz);WZo=r(cTt,"MPNetForQuestionAnswering"),cTt.forEach(t),HZo=r(fPe," (MPNet model)"),fPe.forEach(t),UZo=i(X),EF=n(X,"LI",{});var mPe=s(EF);Gue=n(mPe,"STRONG",{});var fTt=s(Gue);JZo=r(fTt,"nezha"),fTt.forEach(t),YZo=r(mPe," \u2014 "),Dz=n(mPe,"A",{href:!0});var mTt=s(Dz);ZZo=r(mTt,"NeZhaForQuestionAnswering"),mTt.forEach(t),KZo=r(mPe," (NeZha model)"),mPe.forEach(t),eKo=i(X),CF=n(X,"LI",{});var gPe=s(CF);Oue=n(gPe,"STRONG",{});var gTt=s(Oue);oKo=r(gTt,"nystromformer"),gTt.forEach(t),rKo=r(gPe," \u2014 "),Gz=n(gPe,"A",{href:!0});var hTt=s(Gz);tKo=r(hTt,"NystromformerForQuestionAnswering"),hTt.forEach(t),aKo=r(gPe," (Nystr\xF6mformer model)"),gPe.forEach(t),nKo=i(X),wF=n(X,"LI",{});var hPe=s(wF);Vue=n(hPe,"STRONG",{});var pTt=s(Vue);sKo=r(pTt,"qdqbert"),pTt.forEach(t),lKo=r(hPe," \u2014 "),Oz=n(hPe,"A",{href:!0});var _Tt=s(Oz);iKo=r(_Tt,"QDQBertForQuestionAnswering"),_Tt.forEach(t),dKo=r(hPe," (QDQBert model)"),hPe.forEach(t),cKo=i(X),AF=n(X,"LI",{});var pPe=s(AF);Xue=n(pPe,"STRONG",{});var uTt=s(Xue);fKo=r(uTt,"reformer"),uTt.forEach(t),mKo=r(pPe," \u2014 "),Vz=n(pPe,"A",{href:!0});var bTt=s(Vz);gKo=r(bTt,"ReformerForQuestionAnswering"),bTt.forEach(t),hKo=r(pPe," (Reformer model)"),pPe.forEach(t),pKo=i(X),LF=n(X,"LI",{});var _Pe=s(LF);zue=n(_Pe,"STRONG",{});var vTt=s(zue);_Ko=r(vTt,"rembert"),vTt.forEach(t),uKo=r(_Pe," \u2014 "),Xz=n(_Pe,"A",{href:!0});var FTt=s(Xz);bKo=r(FTt,"RemBertForQuestionAnswering"),FTt.forEach(t),vKo=r(_Pe," (RemBERT model)"),_Pe.forEach(t),FKo=i(X),yF=n(X,"LI",{});var uPe=s(yF);Que=n(uPe,"STRONG",{});var TTt=s(Que);TKo=r(TTt,"roberta"),TTt.forEach(t),MKo=r(uPe," \u2014 "),zz=n(uPe,"A",{href:!0});var MTt=s(zz);EKo=r(MTt,"RobertaForQuestionAnswering"),MTt.forEach(t),CKo=r(uPe," (RoBERTa model)"),uPe.forEach(t),wKo=i(X),xF=n(X,"LI",{});var bPe=s(xF);Wue=n(bPe,"STRONG",{});var ETt=s(Wue);AKo=r(ETt,"roformer"),ETt.forEach(t),LKo=r(bPe," \u2014 "),Qz=n(bPe,"A",{href:!0});var CTt=s(Qz);yKo=r(CTt,"RoFormerForQuestionAnswering"),CTt.forEach(t),xKo=r(bPe," (RoFormer model)"),bPe.forEach(t),$Ko=i(X),$F=n(X,"LI",{});var vPe=s($F);Hue=n(vPe,"STRONG",{});var wTt=s(Hue);kKo=r(wTt,"splinter"),wTt.forEach(t),SKo=r(vPe," \u2014 "),Wz=n(vPe,"A",{href:!0});var ATt=s(Wz);RKo=r(ATt,"SplinterForQuestionAnswering"),ATt.forEach(t),PKo=r(vPe," (Splinter model)"),vPe.forEach(t),BKo=i(X),kF=n(X,"LI",{});var FPe=s(kF);Uue=n(FPe,"STRONG",{});var LTt=s(Uue);IKo=r(LTt,"squeezebert"),LTt.forEach(t),NKo=r(FPe," \u2014 "),Hz=n(FPe,"A",{href:!0});var yTt=s(Hz);qKo=r(yTt,"SqueezeBertForQuestionAnswering"),yTt.forEach(t),jKo=r(FPe," (SqueezeBERT model)"),FPe.forEach(t),DKo=i(X),SF=n(X,"LI",{});var TPe=s(SF);Jue=n(TPe,"STRONG",{});var xTt=s(Jue);GKo=r(xTt,"xlm"),xTt.forEach(t),OKo=r(TPe," \u2014 "),Uz=n(TPe,"A",{href:!0});var $Tt=s(Uz);VKo=r($Tt,"XLMForQuestionAnsweringSimple"),$Tt.forEach(t),XKo=r(TPe," (XLM model)"),TPe.forEach(t),zKo=i(X),RF=n(X,"LI",{});var MPe=s(RF);Yue=n(MPe,"STRONG",{});var kTt=s(Yue);QKo=r(kTt,"xlm-roberta"),kTt.forEach(t),WKo=r(MPe," \u2014 "),Jz=n(MPe,"A",{href:!0});var STt=s(Jz);HKo=r(STt,"XLMRobertaForQuestionAnswering"),STt.forEach(t),UKo=r(MPe," (XLM-RoBERTa model)"),MPe.forEach(t),JKo=i(X),PF=n(X,"LI",{});var EPe=s(PF);Zue=n(EPe,"STRONG",{});var RTt=s(Zue);YKo=r(RTt,"xlm-roberta-xl"),RTt.forEach(t),ZKo=r(EPe," \u2014 "),Yz=n(EPe,"A",{href:!0});var PTt=s(Yz);KKo=r(PTt,"XLMRobertaXLForQuestionAnswering"),PTt.forEach(t),eer=r(EPe," (XLM-RoBERTa-XL model)"),EPe.forEach(t),oer=i(X),BF=n(X,"LI",{});var CPe=s(BF);Kue=n(CPe,"STRONG",{});var BTt=s(Kue);rer=r(BTt,"xlnet"),BTt.forEach(t),ter=r(CPe," \u2014 "),Zz=n(CPe,"A",{href:!0});var ITt=s(Zz);aer=r(ITt,"XLNetForQuestionAnsweringSimple"),ITt.forEach(t),ner=r(CPe," (XLNet model)"),CPe.forEach(t),ser=i(X),IF=n(X,"LI",{});var wPe=s(IF);e7e=n(wPe,"STRONG",{});var NTt=s(e7e);ler=r(NTt,"yoso"),NTt.forEach(t),ier=r(wPe," \u2014 "),Kz=n(wPe,"A",{href:!0});var qTt=s(Kz);der=r(qTt,"YosoForQuestionAnswering"),qTt.forEach(t),cer=r(wPe," (YOSO model)"),wPe.forEach(t),X.forEach(t),fer=i(ha),NF=n(ha,"P",{});var APe=s(NF);mer=r(APe,"The model is set in evaluation mode by default using "),o7e=n(APe,"CODE",{});var jTt=s(o7e);ger=r(jTt,"model.eval()"),jTt.forEach(t),her=r(APe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r7e=n(APe,"CODE",{});var DTt=s(r7e);per=r(DTt,"model.train()"),DTt.forEach(t),APe.forEach(t),_er=i(ha),T(qF.$$.fragment,ha),ha.forEach(t),nl.forEach(t),gOe=i(f),cd=n(f,"H2",{class:!0});var vXe=s(cd);jF=n(vXe,"A",{id:!0,class:!0,href:!0});var GTt=s(jF);t7e=n(GTt,"SPAN",{});var OTt=s(t7e);T(Jy.$$.fragment,OTt),OTt.forEach(t),GTt.forEach(t),uer=i(vXe),a7e=n(vXe,"SPAN",{});var VTt=s(a7e);ber=r(VTt,"AutoModelForTableQuestionAnswering"),VTt.forEach(t),vXe.forEach(t),hOe=i(f),Do=n(f,"DIV",{class:!0});var sl=s(Do);T(Yy.$$.fragment,sl),ver=i(sl),fd=n(sl,"P",{});var Boe=s(fd);Fer=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eQ=n(Boe,"A",{href:!0});var XTt=s(eQ);Ter=r(XTt,"from_pretrained()"),XTt.forEach(t),Mer=r(Boe," class method or the "),oQ=n(Boe,"A",{href:!0});var zTt=s(oQ);Eer=r(zTt,"from_config()"),zTt.forEach(t),Cer=r(Boe,` class
method.`),Boe.forEach(t),wer=i(sl),Zy=n(sl,"P",{});var FXe=s(Zy);Aer=r(FXe,"This class cannot be instantiated directly using "),n7e=n(FXe,"CODE",{});var QTt=s(n7e);Ler=r(QTt,"__init__()"),QTt.forEach(t),yer=r(FXe," (throws an error)."),FXe.forEach(t),xer=i(sl),pt=n(sl,"DIV",{class:!0});var Jw=s(pt);T(Ky.$$.fragment,Jw),$er=i(Jw),s7e=n(Jw,"P",{});var WTt=s(s7e);ker=r(WTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),WTt.forEach(t),Ser=i(Jw),md=n(Jw,"P",{});var Ioe=s(md);Rer=r(Ioe,`Note:
Loading a model from its configuration file does `),l7e=n(Ioe,"STRONG",{});var HTt=s(l7e);Per=r(HTt,"not"),HTt.forEach(t),Ber=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rQ=n(Ioe,"A",{href:!0});var UTt=s(rQ);Ier=r(UTt,"from_pretrained()"),UTt.forEach(t),Ner=r(Ioe," to load the model weights."),Ioe.forEach(t),qer=i(Jw),T(DF.$$.fragment,Jw),Jw.forEach(t),jer=i(sl),so=n(sl,"DIV",{class:!0});var pa=s(so);T(e8.$$.fragment,pa),Der=i(pa),i7e=n(pa,"P",{});var JTt=s(i7e);Ger=r(JTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),JTt.forEach(t),Oer=i(pa),Va=n(pa,"P",{});var Yw=s(Va);Ver=r(Yw,"The model class to instantiate is selected based on the "),d7e=n(Yw,"CODE",{});var YTt=s(d7e);Xer=r(YTt,"model_type"),YTt.forEach(t),zer=r(Yw,` property of the config object (either
passed as an argument or loaded from `),c7e=n(Yw,"CODE",{});var ZTt=s(c7e);Qer=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),Wer=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(Yw,"CODE",{});var KTt=s(f7e);Her=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),Uer=r(Yw,":"),Yw.forEach(t),Jer=i(pa),m7e=n(pa,"UL",{});var eMt=s(m7e);GF=n(eMt,"LI",{});var LPe=s(GF);g7e=n(LPe,"STRONG",{});var oMt=s(g7e);Yer=r(oMt,"tapas"),oMt.forEach(t),Zer=r(LPe," \u2014 "),tQ=n(LPe,"A",{href:!0});var rMt=s(tQ);Ker=r(rMt,"TapasForQuestionAnswering"),rMt.forEach(t),eor=r(LPe," (TAPAS model)"),LPe.forEach(t),eMt.forEach(t),oor=i(pa),OF=n(pa,"P",{});var yPe=s(OF);ror=r(yPe,"The model is set in evaluation mode by default using "),h7e=n(yPe,"CODE",{});var tMt=s(h7e);tor=r(tMt,"model.eval()"),tMt.forEach(t),aor=r(yPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),p7e=n(yPe,"CODE",{});var aMt=s(p7e);nor=r(aMt,"model.train()"),aMt.forEach(t),yPe.forEach(t),sor=i(pa),T(VF.$$.fragment,pa),pa.forEach(t),sl.forEach(t),pOe=i(f),gd=n(f,"H2",{class:!0});var TXe=s(gd);XF=n(TXe,"A",{id:!0,class:!0,href:!0});var nMt=s(XF);_7e=n(nMt,"SPAN",{});var sMt=s(_7e);T(o8.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),lor=i(TXe),u7e=n(TXe,"SPAN",{});var lMt=s(u7e);ior=r(lMt,"AutoModelForImageClassification"),lMt.forEach(t),TXe.forEach(t),_Oe=i(f),Go=n(f,"DIV",{class:!0});var ll=s(Go);T(r8.$$.fragment,ll),dor=i(ll),hd=n(ll,"P",{});var Noe=s(hd);cor=r(Noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aQ=n(Noe,"A",{href:!0});var iMt=s(aQ);mor=r(iMt,"from_pretrained()"),iMt.forEach(t),gor=r(Noe," class method or the "),nQ=n(Noe,"A",{href:!0});var dMt=s(nQ);hor=r(dMt,"from_config()"),dMt.forEach(t),por=r(Noe,` class
method.`),Noe.forEach(t),_or=i(ll),t8=n(ll,"P",{});var MXe=s(t8);uor=r(MXe,"This class cannot be instantiated directly using "),b7e=n(MXe,"CODE",{});var cMt=s(b7e);bor=r(cMt,"__init__()"),cMt.forEach(t),vor=r(MXe," (throws an error)."),MXe.forEach(t),For=i(ll),_t=n(ll,"DIV",{class:!0});var Zw=s(_t);T(a8.$$.fragment,Zw),Tor=i(Zw),v7e=n(Zw,"P",{});var fMt=s(v7e);Mor=r(fMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fMt.forEach(t),Eor=i(Zw),pd=n(Zw,"P",{});var qoe=s(pd);Cor=r(qoe,`Note:
Loading a model from its configuration file does `),F7e=n(qoe,"STRONG",{});var mMt=s(F7e);wor=r(mMt,"not"),mMt.forEach(t),Aor=r(qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(qoe,"A",{href:!0});var gMt=s(sQ);Lor=r(gMt,"from_pretrained()"),gMt.forEach(t),yor=r(qoe," to load the model weights."),qoe.forEach(t),xor=i(Zw),T(zF.$$.fragment,Zw),Zw.forEach(t),$or=i(ll),lo=n(ll,"DIV",{class:!0});var _a=s(lo);T(n8.$$.fragment,_a),kor=i(_a),T7e=n(_a,"P",{});var hMt=s(T7e);Sor=r(hMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hMt.forEach(t),Ror=i(_a),Xa=n(_a,"P",{});var Kw=s(Xa);Por=r(Kw,"The model class to instantiate is selected based on the "),M7e=n(Kw,"CODE",{});var pMt=s(M7e);Bor=r(pMt,"model_type"),pMt.forEach(t),Ior=r(Kw,` property of the config object (either
passed as an argument or loaded from `),E7e=n(Kw,"CODE",{});var _Mt=s(E7e);Nor=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),qor=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=n(Kw,"CODE",{});var uMt=s(C7e);jor=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),Dor=r(Kw,":"),Kw.forEach(t),Gor=i(_a),Fe=n(_a,"UL",{});var Te=s(Fe);QF=n(Te,"LI",{});var xPe=s(QF);w7e=n(xPe,"STRONG",{});var bMt=s(w7e);Oor=r(bMt,"beit"),bMt.forEach(t),Vor=r(xPe," \u2014 "),lQ=n(xPe,"A",{href:!0});var vMt=s(lQ);Xor=r(vMt,"BeitForImageClassification"),vMt.forEach(t),zor=r(xPe," (BEiT model)"),xPe.forEach(t),Qor=i(Te),WF=n(Te,"LI",{});var $Pe=s(WF);A7e=n($Pe,"STRONG",{});var FMt=s(A7e);Wor=r(FMt,"convnext"),FMt.forEach(t),Hor=r($Pe," \u2014 "),iQ=n($Pe,"A",{href:!0});var TMt=s(iQ);Uor=r(TMt,"ConvNextForImageClassification"),TMt.forEach(t),Jor=r($Pe," (ConvNeXT model)"),$Pe.forEach(t),Yor=i(Te),HF=n(Te,"LI",{});var kPe=s(HF);L7e=n(kPe,"STRONG",{});var MMt=s(L7e);Zor=r(MMt,"cvt"),MMt.forEach(t),Kor=r(kPe," \u2014 "),dQ=n(kPe,"A",{href:!0});var EMt=s(dQ);err=r(EMt,"CvtForImageClassification"),EMt.forEach(t),orr=r(kPe," (CvT model)"),kPe.forEach(t),rrr=i(Te),UF=n(Te,"LI",{});var SPe=s(UF);y7e=n(SPe,"STRONG",{});var CMt=s(y7e);trr=r(CMt,"data2vec-vision"),CMt.forEach(t),arr=r(SPe," \u2014 "),cQ=n(SPe,"A",{href:!0});var wMt=s(cQ);nrr=r(wMt,"Data2VecVisionForImageClassification"),wMt.forEach(t),srr=r(SPe," (Data2VecVision model)"),SPe.forEach(t),lrr=i(Te),Vs=n(Te,"LI",{});var Yk=s(Vs);x7e=n(Yk,"STRONG",{});var AMt=s(x7e);irr=r(AMt,"deit"),AMt.forEach(t),drr=r(Yk," \u2014 "),fQ=n(Yk,"A",{href:!0});var LMt=s(fQ);crr=r(LMt,"DeiTForImageClassification"),LMt.forEach(t),frr=r(Yk," or "),mQ=n(Yk,"A",{href:!0});var yMt=s(mQ);mrr=r(yMt,"DeiTForImageClassificationWithTeacher"),yMt.forEach(t),grr=r(Yk," (DeiT model)"),Yk.forEach(t),hrr=i(Te),JF=n(Te,"LI",{});var RPe=s(JF);$7e=n(RPe,"STRONG",{});var xMt=s($7e);prr=r(xMt,"imagegpt"),xMt.forEach(t),_rr=r(RPe," \u2014 "),gQ=n(RPe,"A",{href:!0});var $Mt=s(gQ);urr=r($Mt,"ImageGPTForImageClassification"),$Mt.forEach(t),brr=r(RPe," (ImageGPT model)"),RPe.forEach(t),vrr=i(Te),Xs=n(Te,"LI",{});var Zk=s(Xs);k7e=n(Zk,"STRONG",{});var kMt=s(k7e);Frr=r(kMt,"levit"),kMt.forEach(t),Trr=r(Zk," \u2014 "),hQ=n(Zk,"A",{href:!0});var SMt=s(hQ);Mrr=r(SMt,"LevitForImageClassification"),SMt.forEach(t),Err=r(Zk," or "),pQ=n(Zk,"A",{href:!0});var RMt=s(pQ);Crr=r(RMt,"LevitForImageClassificationWithTeacher"),RMt.forEach(t),wrr=r(Zk," (LeViT model)"),Zk.forEach(t),Arr=i(Te),ut=n(Te,"LI",{});var Af=s(ut);S7e=n(Af,"STRONG",{});var PMt=s(S7e);Lrr=r(PMt,"perceiver"),PMt.forEach(t),yrr=r(Af," \u2014 "),_Q=n(Af,"A",{href:!0});var BMt=s(_Q);xrr=r(BMt,"PerceiverForImageClassificationLearned"),BMt.forEach(t),$rr=r(Af," or "),uQ=n(Af,"A",{href:!0});var IMt=s(uQ);krr=r(IMt,"PerceiverForImageClassificationFourier"),IMt.forEach(t),Srr=r(Af," or "),bQ=n(Af,"A",{href:!0});var NMt=s(bQ);Rrr=r(NMt,"PerceiverForImageClassificationConvProcessing"),NMt.forEach(t),Prr=r(Af," (Perceiver model)"),Af.forEach(t),Brr=i(Te),YF=n(Te,"LI",{});var PPe=s(YF);R7e=n(PPe,"STRONG",{});var qMt=s(R7e);Irr=r(qMt,"poolformer"),qMt.forEach(t),Nrr=r(PPe," \u2014 "),vQ=n(PPe,"A",{href:!0});var jMt=s(vQ);qrr=r(jMt,"PoolFormerForImageClassification"),jMt.forEach(t),jrr=r(PPe," (PoolFormer model)"),PPe.forEach(t),Drr=i(Te),ZF=n(Te,"LI",{});var BPe=s(ZF);P7e=n(BPe,"STRONG",{});var DMt=s(P7e);Grr=r(DMt,"regnet"),DMt.forEach(t),Orr=r(BPe," \u2014 "),FQ=n(BPe,"A",{href:!0});var GMt=s(FQ);Vrr=r(GMt,"RegNetForImageClassification"),GMt.forEach(t),Xrr=r(BPe," (RegNet model)"),BPe.forEach(t),zrr=i(Te),KF=n(Te,"LI",{});var IPe=s(KF);B7e=n(IPe,"STRONG",{});var OMt=s(B7e);Qrr=r(OMt,"resnet"),OMt.forEach(t),Wrr=r(IPe," \u2014 "),TQ=n(IPe,"A",{href:!0});var VMt=s(TQ);Hrr=r(VMt,"ResNetForImageClassification"),VMt.forEach(t),Urr=r(IPe," (ResNet model)"),IPe.forEach(t),Jrr=i(Te),e6=n(Te,"LI",{});var NPe=s(e6);I7e=n(NPe,"STRONG",{});var XMt=s(I7e);Yrr=r(XMt,"segformer"),XMt.forEach(t),Zrr=r(NPe," \u2014 "),MQ=n(NPe,"A",{href:!0});var zMt=s(MQ);Krr=r(zMt,"SegformerForImageClassification"),zMt.forEach(t),etr=r(NPe," (SegFormer model)"),NPe.forEach(t),otr=i(Te),o6=n(Te,"LI",{});var qPe=s(o6);N7e=n(qPe,"STRONG",{});var QMt=s(N7e);rtr=r(QMt,"swin"),QMt.forEach(t),ttr=r(qPe," \u2014 "),EQ=n(qPe,"A",{href:!0});var WMt=s(EQ);atr=r(WMt,"SwinForImageClassification"),WMt.forEach(t),ntr=r(qPe," (Swin Transformer model)"),qPe.forEach(t),str=i(Te),r6=n(Te,"LI",{});var jPe=s(r6);q7e=n(jPe,"STRONG",{});var HMt=s(q7e);ltr=r(HMt,"van"),HMt.forEach(t),itr=r(jPe," \u2014 "),CQ=n(jPe,"A",{href:!0});var UMt=s(CQ);dtr=r(UMt,"VanForImageClassification"),UMt.forEach(t),ctr=r(jPe," (VAN model)"),jPe.forEach(t),ftr=i(Te),t6=n(Te,"LI",{});var DPe=s(t6);j7e=n(DPe,"STRONG",{});var JMt=s(j7e);mtr=r(JMt,"vit"),JMt.forEach(t),gtr=r(DPe," \u2014 "),wQ=n(DPe,"A",{href:!0});var YMt=s(wQ);htr=r(YMt,"ViTForImageClassification"),YMt.forEach(t),ptr=r(DPe," (ViT model)"),DPe.forEach(t),Te.forEach(t),_tr=i(_a),a6=n(_a,"P",{});var GPe=s(a6);utr=r(GPe,"The model is set in evaluation mode by default using "),D7e=n(GPe,"CODE",{});var ZMt=s(D7e);btr=r(ZMt,"model.eval()"),ZMt.forEach(t),vtr=r(GPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G7e=n(GPe,"CODE",{});var KMt=s(G7e);Ftr=r(KMt,"model.train()"),KMt.forEach(t),GPe.forEach(t),Ttr=i(_a),T(n6.$$.fragment,_a),_a.forEach(t),ll.forEach(t),uOe=i(f),_d=n(f,"H2",{class:!0});var EXe=s(_d);s6=n(EXe,"A",{id:!0,class:!0,href:!0});var eEt=s(s6);O7e=n(eEt,"SPAN",{});var oEt=s(O7e);T(s8.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),Mtr=i(EXe),V7e=n(EXe,"SPAN",{});var rEt=s(V7e);Etr=r(rEt,"AutoModelForVision2Seq"),rEt.forEach(t),EXe.forEach(t),bOe=i(f),Oo=n(f,"DIV",{class:!0});var il=s(Oo);T(l8.$$.fragment,il),Ctr=i(il),ud=n(il,"P",{});var joe=s(ud);wtr=r(joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),AQ=n(joe,"A",{href:!0});var tEt=s(AQ);Atr=r(tEt,"from_pretrained()"),tEt.forEach(t),Ltr=r(joe," class method or the "),LQ=n(joe,"A",{href:!0});var aEt=s(LQ);ytr=r(aEt,"from_config()"),aEt.forEach(t),xtr=r(joe,` class
method.`),joe.forEach(t),$tr=i(il),i8=n(il,"P",{});var CXe=s(i8);ktr=r(CXe,"This class cannot be instantiated directly using "),X7e=n(CXe,"CODE",{});var nEt=s(X7e);Str=r(nEt,"__init__()"),nEt.forEach(t),Rtr=r(CXe," (throws an error)."),CXe.forEach(t),Ptr=i(il),bt=n(il,"DIV",{class:!0});var eA=s(bt);T(d8.$$.fragment,eA),Btr=i(eA),z7e=n(eA,"P",{});var sEt=s(z7e);Itr=r(sEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sEt.forEach(t),Ntr=i(eA),bd=n(eA,"P",{});var Doe=s(bd);qtr=r(Doe,`Note:
Loading a model from its configuration file does `),Q7e=n(Doe,"STRONG",{});var lEt=s(Q7e);jtr=r(lEt,"not"),lEt.forEach(t),Dtr=r(Doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(Doe,"A",{href:!0});var iEt=s(yQ);Gtr=r(iEt,"from_pretrained()"),iEt.forEach(t),Otr=r(Doe," to load the model weights."),Doe.forEach(t),Vtr=i(eA),T(l6.$$.fragment,eA),eA.forEach(t),Xtr=i(il),io=n(il,"DIV",{class:!0});var ua=s(io);T(c8.$$.fragment,ua),ztr=i(ua),W7e=n(ua,"P",{});var dEt=s(W7e);Qtr=r(dEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dEt.forEach(t),Wtr=i(ua),za=n(ua,"P",{});var oA=s(za);Htr=r(oA,"The model class to instantiate is selected based on the "),H7e=n(oA,"CODE",{});var cEt=s(H7e);Utr=r(cEt,"model_type"),cEt.forEach(t),Jtr=r(oA,` property of the config object (either
passed as an argument or loaded from `),U7e=n(oA,"CODE",{});var fEt=s(U7e);Ytr=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),Ztr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J7e=n(oA,"CODE",{});var mEt=s(J7e);Ktr=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),ear=r(oA,":"),oA.forEach(t),oar=i(ua),Y7e=n(ua,"UL",{});var gEt=s(Y7e);i6=n(gEt,"LI",{});var OPe=s(i6);Z7e=n(OPe,"STRONG",{});var hEt=s(Z7e);rar=r(hEt,"vision-encoder-decoder"),hEt.forEach(t),tar=r(OPe," \u2014 "),xQ=n(OPe,"A",{href:!0});var pEt=s(xQ);aar=r(pEt,"VisionEncoderDecoderModel"),pEt.forEach(t),nar=r(OPe," (Vision Encoder decoder model)"),OPe.forEach(t),gEt.forEach(t),sar=i(ua),d6=n(ua,"P",{});var VPe=s(d6);lar=r(VPe,"The model is set in evaluation mode by default using "),K7e=n(VPe,"CODE",{});var _Et=s(K7e);iar=r(_Et,"model.eval()"),_Et.forEach(t),dar=r(VPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(VPe,"CODE",{});var uEt=s(e1e);car=r(uEt,"model.train()"),uEt.forEach(t),VPe.forEach(t),far=i(ua),T(c6.$$.fragment,ua),ua.forEach(t),il.forEach(t),vOe=i(f),vd=n(f,"H2",{class:!0});var wXe=s(vd);f6=n(wXe,"A",{id:!0,class:!0,href:!0});var bEt=s(f6);o1e=n(bEt,"SPAN",{});var vEt=s(o1e);T(f8.$$.fragment,vEt),vEt.forEach(t),bEt.forEach(t),mar=i(wXe),r1e=n(wXe,"SPAN",{});var FEt=s(r1e);gar=r(FEt,"AutoModelForVisualQuestionAnswering"),FEt.forEach(t),wXe.forEach(t),FOe=i(f),Vo=n(f,"DIV",{class:!0});var dl=s(Vo);T(m8.$$.fragment,dl),har=i(dl),Fd=n(dl,"P",{});var Goe=s(Fd);par=r(Goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),$Q=n(Goe,"A",{href:!0});var TEt=s($Q);_ar=r(TEt,"from_pretrained()"),TEt.forEach(t),uar=r(Goe," class method or the "),kQ=n(Goe,"A",{href:!0});var MEt=s(kQ);bar=r(MEt,"from_config()"),MEt.forEach(t),Far=r(Goe,` class
method.`),Goe.forEach(t),Tar=i(dl),g8=n(dl,"P",{});var AXe=s(g8);Mar=r(AXe,"This class cannot be instantiated directly using "),t1e=n(AXe,"CODE",{});var EEt=s(t1e);Ear=r(EEt,"__init__()"),EEt.forEach(t),Car=r(AXe," (throws an error)."),AXe.forEach(t),war=i(dl),vt=n(dl,"DIV",{class:!0});var rA=s(vt);T(h8.$$.fragment,rA),Aar=i(rA),a1e=n(rA,"P",{});var CEt=s(a1e);Lar=r(CEt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),CEt.forEach(t),yar=i(rA),Td=n(rA,"P",{});var Ooe=s(Td);xar=r(Ooe,`Note:
Loading a model from its configuration file does `),n1e=n(Ooe,"STRONG",{});var wEt=s(n1e);$ar=r(wEt,"not"),wEt.forEach(t),kar=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(Ooe,"A",{href:!0});var AEt=s(SQ);Sar=r(AEt,"from_pretrained()"),AEt.forEach(t),Rar=r(Ooe," to load the model weights."),Ooe.forEach(t),Par=i(rA),T(m6.$$.fragment,rA),rA.forEach(t),Bar=i(dl),co=n(dl,"DIV",{class:!0});var ba=s(co);T(p8.$$.fragment,ba),Iar=i(ba),s1e=n(ba,"P",{});var LEt=s(s1e);Nar=r(LEt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),LEt.forEach(t),qar=i(ba),Qa=n(ba,"P",{});var tA=s(Qa);jar=r(tA,"The model class to instantiate is selected based on the "),l1e=n(tA,"CODE",{});var yEt=s(l1e);Dar=r(yEt,"model_type"),yEt.forEach(t),Gar=r(tA,` property of the config object (either
passed as an argument or loaded from `),i1e=n(tA,"CODE",{});var xEt=s(i1e);Oar=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),Var=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(tA,"CODE",{});var $Et=s(d1e);Xar=r($Et,"pretrained_model_name_or_path"),$Et.forEach(t),zar=r(tA,":"),tA.forEach(t),Qar=i(ba),c1e=n(ba,"UL",{});var kEt=s(c1e);g6=n(kEt,"LI",{});var XPe=s(g6);f1e=n(XPe,"STRONG",{});var SEt=s(f1e);War=r(SEt,"vilt"),SEt.forEach(t),Har=r(XPe," \u2014 "),RQ=n(XPe,"A",{href:!0});var REt=s(RQ);Uar=r(REt,"ViltForQuestionAnswering"),REt.forEach(t),Jar=r(XPe," (ViLT model)"),XPe.forEach(t),kEt.forEach(t),Yar=i(ba),h6=n(ba,"P",{});var zPe=s(h6);Zar=r(zPe,"The model is set in evaluation mode by default using "),m1e=n(zPe,"CODE",{});var PEt=s(m1e);Kar=r(PEt,"model.eval()"),PEt.forEach(t),enr=r(zPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g1e=n(zPe,"CODE",{});var BEt=s(g1e);onr=r(BEt,"model.train()"),BEt.forEach(t),zPe.forEach(t),rnr=i(ba),T(p6.$$.fragment,ba),ba.forEach(t),dl.forEach(t),TOe=i(f),Md=n(f,"H2",{class:!0});var LXe=s(Md);_6=n(LXe,"A",{id:!0,class:!0,href:!0});var IEt=s(_6);h1e=n(IEt,"SPAN",{});var NEt=s(h1e);T(_8.$$.fragment,NEt),NEt.forEach(t),IEt.forEach(t),tnr=i(LXe),p1e=n(LXe,"SPAN",{});var qEt=s(p1e);anr=r(qEt,"AutoModelForAudioClassification"),qEt.forEach(t),LXe.forEach(t),MOe=i(f),Xo=n(f,"DIV",{class:!0});var cl=s(Xo);T(u8.$$.fragment,cl),nnr=i(cl),Ed=n(cl,"P",{});var Voe=s(Ed);snr=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),PQ=n(Voe,"A",{href:!0});var jEt=s(PQ);lnr=r(jEt,"from_pretrained()"),jEt.forEach(t),inr=r(Voe," class method or the "),BQ=n(Voe,"A",{href:!0});var DEt=s(BQ);dnr=r(DEt,"from_config()"),DEt.forEach(t),cnr=r(Voe,` class
method.`),Voe.forEach(t),fnr=i(cl),b8=n(cl,"P",{});var yXe=s(b8);mnr=r(yXe,"This class cannot be instantiated directly using "),_1e=n(yXe,"CODE",{});var GEt=s(_1e);gnr=r(GEt,"__init__()"),GEt.forEach(t),hnr=r(yXe," (throws an error)."),yXe.forEach(t),pnr=i(cl),Ft=n(cl,"DIV",{class:!0});var aA=s(Ft);T(v8.$$.fragment,aA),_nr=i(aA),u1e=n(aA,"P",{});var OEt=s(u1e);unr=r(OEt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),OEt.forEach(t),bnr=i(aA),Cd=n(aA,"P",{});var Xoe=s(Cd);vnr=r(Xoe,`Note:
Loading a model from its configuration file does `),b1e=n(Xoe,"STRONG",{});var VEt=s(b1e);Fnr=r(VEt,"not"),VEt.forEach(t),Tnr=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(Xoe,"A",{href:!0});var XEt=s(IQ);Mnr=r(XEt,"from_pretrained()"),XEt.forEach(t),Enr=r(Xoe," to load the model weights."),Xoe.forEach(t),Cnr=i(aA),T(u6.$$.fragment,aA),aA.forEach(t),wnr=i(cl),fo=n(cl,"DIV",{class:!0});var va=s(fo);T(F8.$$.fragment,va),Anr=i(va),v1e=n(va,"P",{});var zEt=s(v1e);Lnr=r(zEt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zEt.forEach(t),ynr=i(va),Wa=n(va,"P",{});var nA=s(Wa);xnr=r(nA,"The model class to instantiate is selected based on the "),F1e=n(nA,"CODE",{});var QEt=s(F1e);$nr=r(QEt,"model_type"),QEt.forEach(t),knr=r(nA,` property of the config object (either
passed as an argument or loaded from `),T1e=n(nA,"CODE",{});var WEt=s(T1e);Snr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),Rnr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(nA,"CODE",{});var HEt=s(M1e);Pnr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),Bnr=r(nA,":"),nA.forEach(t),Inr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);b6=n(ze,"LI",{});var QPe=s(b6);E1e=n(QPe,"STRONG",{});var UEt=s(E1e);Nnr=r(UEt,"data2vec-audio"),UEt.forEach(t),qnr=r(QPe," \u2014 "),NQ=n(QPe,"A",{href:!0});var JEt=s(NQ);jnr=r(JEt,"Data2VecAudioForSequenceClassification"),JEt.forEach(t),Dnr=r(QPe," (Data2VecAudio model)"),QPe.forEach(t),Gnr=i(ze),v6=n(ze,"LI",{});var WPe=s(v6);C1e=n(WPe,"STRONG",{});var YEt=s(C1e);Onr=r(YEt,"hubert"),YEt.forEach(t),Vnr=r(WPe," \u2014 "),qQ=n(WPe,"A",{href:!0});var ZEt=s(qQ);Xnr=r(ZEt,"HubertForSequenceClassification"),ZEt.forEach(t),znr=r(WPe," (Hubert model)"),WPe.forEach(t),Qnr=i(ze),F6=n(ze,"LI",{});var HPe=s(F6);w1e=n(HPe,"STRONG",{});var KEt=s(w1e);Wnr=r(KEt,"sew"),KEt.forEach(t),Hnr=r(HPe," \u2014 "),jQ=n(HPe,"A",{href:!0});var e4t=s(jQ);Unr=r(e4t,"SEWForSequenceClassification"),e4t.forEach(t),Jnr=r(HPe," (SEW model)"),HPe.forEach(t),Ynr=i(ze),T6=n(ze,"LI",{});var UPe=s(T6);A1e=n(UPe,"STRONG",{});var o4t=s(A1e);Znr=r(o4t,"sew-d"),o4t.forEach(t),Knr=r(UPe," \u2014 "),DQ=n(UPe,"A",{href:!0});var r4t=s(DQ);esr=r(r4t,"SEWDForSequenceClassification"),r4t.forEach(t),osr=r(UPe," (SEW-D model)"),UPe.forEach(t),rsr=i(ze),M6=n(ze,"LI",{});var JPe=s(M6);L1e=n(JPe,"STRONG",{});var t4t=s(L1e);tsr=r(t4t,"unispeech"),t4t.forEach(t),asr=r(JPe," \u2014 "),GQ=n(JPe,"A",{href:!0});var a4t=s(GQ);nsr=r(a4t,"UniSpeechForSequenceClassification"),a4t.forEach(t),ssr=r(JPe," (UniSpeech model)"),JPe.forEach(t),lsr=i(ze),E6=n(ze,"LI",{});var YPe=s(E6);y1e=n(YPe,"STRONG",{});var n4t=s(y1e);isr=r(n4t,"unispeech-sat"),n4t.forEach(t),dsr=r(YPe," \u2014 "),OQ=n(YPe,"A",{href:!0});var s4t=s(OQ);csr=r(s4t,"UniSpeechSatForSequenceClassification"),s4t.forEach(t),fsr=r(YPe," (UniSpeechSat model)"),YPe.forEach(t),msr=i(ze),C6=n(ze,"LI",{});var ZPe=s(C6);x1e=n(ZPe,"STRONG",{});var l4t=s(x1e);gsr=r(l4t,"wav2vec2"),l4t.forEach(t),hsr=r(ZPe," \u2014 "),VQ=n(ZPe,"A",{href:!0});var i4t=s(VQ);psr=r(i4t,"Wav2Vec2ForSequenceClassification"),i4t.forEach(t),_sr=r(ZPe," (Wav2Vec2 model)"),ZPe.forEach(t),usr=i(ze),w6=n(ze,"LI",{});var KPe=s(w6);$1e=n(KPe,"STRONG",{});var d4t=s($1e);bsr=r(d4t,"wav2vec2-conformer"),d4t.forEach(t),vsr=r(KPe," \u2014 "),XQ=n(KPe,"A",{href:!0});var c4t=s(XQ);Fsr=r(c4t,"Wav2Vec2ConformerForSequenceClassification"),c4t.forEach(t),Tsr=r(KPe," (Wav2Vec2-Conformer model)"),KPe.forEach(t),Msr=i(ze),A6=n(ze,"LI",{});var eBe=s(A6);k1e=n(eBe,"STRONG",{});var f4t=s(k1e);Esr=r(f4t,"wavlm"),f4t.forEach(t),Csr=r(eBe," \u2014 "),zQ=n(eBe,"A",{href:!0});var m4t=s(zQ);wsr=r(m4t,"WavLMForSequenceClassification"),m4t.forEach(t),Asr=r(eBe," (WavLM model)"),eBe.forEach(t),ze.forEach(t),Lsr=i(va),L6=n(va,"P",{});var oBe=s(L6);ysr=r(oBe,"The model is set in evaluation mode by default using "),S1e=n(oBe,"CODE",{});var g4t=s(S1e);xsr=r(g4t,"model.eval()"),g4t.forEach(t),$sr=r(oBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=n(oBe,"CODE",{});var h4t=s(R1e);ksr=r(h4t,"model.train()"),h4t.forEach(t),oBe.forEach(t),Ssr=i(va),T(y6.$$.fragment,va),va.forEach(t),cl.forEach(t),EOe=i(f),wd=n(f,"H2",{class:!0});var xXe=s(wd);x6=n(xXe,"A",{id:!0,class:!0,href:!0});var p4t=s(x6);P1e=n(p4t,"SPAN",{});var _4t=s(P1e);T(T8.$$.fragment,_4t),_4t.forEach(t),p4t.forEach(t),Rsr=i(xXe),B1e=n(xXe,"SPAN",{});var u4t=s(B1e);Psr=r(u4t,"AutoModelForAudioFrameClassification"),u4t.forEach(t),xXe.forEach(t),COe=i(f),zo=n(f,"DIV",{class:!0});var fl=s(zo);T(M8.$$.fragment,fl),Bsr=i(fl),Ad=n(fl,"P",{});var zoe=s(Ad);Isr=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),QQ=n(zoe,"A",{href:!0});var b4t=s(QQ);Nsr=r(b4t,"from_pretrained()"),b4t.forEach(t),qsr=r(zoe," class method or the "),WQ=n(zoe,"A",{href:!0});var v4t=s(WQ);jsr=r(v4t,"from_config()"),v4t.forEach(t),Dsr=r(zoe,` class
method.`),zoe.forEach(t),Gsr=i(fl),E8=n(fl,"P",{});var $Xe=s(E8);Osr=r($Xe,"This class cannot be instantiated directly using "),I1e=n($Xe,"CODE",{});var F4t=s(I1e);Vsr=r(F4t,"__init__()"),F4t.forEach(t),Xsr=r($Xe," (throws an error)."),$Xe.forEach(t),zsr=i(fl),Tt=n(fl,"DIV",{class:!0});var sA=s(Tt);T(C8.$$.fragment,sA),Qsr=i(sA),N1e=n(sA,"P",{});var T4t=s(N1e);Wsr=r(T4t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),T4t.forEach(t),Hsr=i(sA),Ld=n(sA,"P",{});var Qoe=s(Ld);Usr=r(Qoe,`Note:
Loading a model from its configuration file does `),q1e=n(Qoe,"STRONG",{});var M4t=s(q1e);Jsr=r(M4t,"not"),M4t.forEach(t),Ysr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(Qoe,"A",{href:!0});var E4t=s(HQ);Zsr=r(E4t,"from_pretrained()"),E4t.forEach(t),Ksr=r(Qoe," to load the model weights."),Qoe.forEach(t),elr=i(sA),T($6.$$.fragment,sA),sA.forEach(t),olr=i(fl),mo=n(fl,"DIV",{class:!0});var Fa=s(mo);T(w8.$$.fragment,Fa),rlr=i(Fa),j1e=n(Fa,"P",{});var C4t=s(j1e);tlr=r(C4t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),C4t.forEach(t),alr=i(Fa),Ha=n(Fa,"P",{});var lA=s(Ha);nlr=r(lA,"The model class to instantiate is selected based on the "),D1e=n(lA,"CODE",{});var w4t=s(D1e);slr=r(w4t,"model_type"),w4t.forEach(t),llr=r(lA,` property of the config object (either
passed as an argument or loaded from `),G1e=n(lA,"CODE",{});var A4t=s(G1e);ilr=r(A4t,"pretrained_model_name_or_path"),A4t.forEach(t),dlr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(lA,"CODE",{});var L4t=s(O1e);clr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),flr=r(lA,":"),lA.forEach(t),mlr=i(Fa),et=n(Fa,"UL",{});var ml=s(et);k6=n(ml,"LI",{});var rBe=s(k6);V1e=n(rBe,"STRONG",{});var y4t=s(V1e);glr=r(y4t,"data2vec-audio"),y4t.forEach(t),hlr=r(rBe," \u2014 "),UQ=n(rBe,"A",{href:!0});var x4t=s(UQ);plr=r(x4t,"Data2VecAudioForAudioFrameClassification"),x4t.forEach(t),_lr=r(rBe," (Data2VecAudio model)"),rBe.forEach(t),ulr=i(ml),S6=n(ml,"LI",{});var tBe=s(S6);X1e=n(tBe,"STRONG",{});var $4t=s(X1e);blr=r($4t,"unispeech-sat"),$4t.forEach(t),vlr=r(tBe," \u2014 "),JQ=n(tBe,"A",{href:!0});var k4t=s(JQ);Flr=r(k4t,"UniSpeechSatForAudioFrameClassification"),k4t.forEach(t),Tlr=r(tBe," (UniSpeechSat model)"),tBe.forEach(t),Mlr=i(ml),R6=n(ml,"LI",{});var aBe=s(R6);z1e=n(aBe,"STRONG",{});var S4t=s(z1e);Elr=r(S4t,"wav2vec2"),S4t.forEach(t),Clr=r(aBe," \u2014 "),YQ=n(aBe,"A",{href:!0});var R4t=s(YQ);wlr=r(R4t,"Wav2Vec2ForAudioFrameClassification"),R4t.forEach(t),Alr=r(aBe," (Wav2Vec2 model)"),aBe.forEach(t),Llr=i(ml),P6=n(ml,"LI",{});var nBe=s(P6);Q1e=n(nBe,"STRONG",{});var P4t=s(Q1e);ylr=r(P4t,"wav2vec2-conformer"),P4t.forEach(t),xlr=r(nBe," \u2014 "),ZQ=n(nBe,"A",{href:!0});var B4t=s(ZQ);$lr=r(B4t,"Wav2Vec2ConformerForAudioFrameClassification"),B4t.forEach(t),klr=r(nBe," (Wav2Vec2-Conformer model)"),nBe.forEach(t),Slr=i(ml),B6=n(ml,"LI",{});var sBe=s(B6);W1e=n(sBe,"STRONG",{});var I4t=s(W1e);Rlr=r(I4t,"wavlm"),I4t.forEach(t),Plr=r(sBe," \u2014 "),KQ=n(sBe,"A",{href:!0});var N4t=s(KQ);Blr=r(N4t,"WavLMForAudioFrameClassification"),N4t.forEach(t),Ilr=r(sBe," (WavLM model)"),sBe.forEach(t),ml.forEach(t),Nlr=i(Fa),I6=n(Fa,"P",{});var lBe=s(I6);qlr=r(lBe,"The model is set in evaluation mode by default using "),H1e=n(lBe,"CODE",{});var q4t=s(H1e);jlr=r(q4t,"model.eval()"),q4t.forEach(t),Dlr=r(lBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U1e=n(lBe,"CODE",{});var j4t=s(U1e);Glr=r(j4t,"model.train()"),j4t.forEach(t),lBe.forEach(t),Olr=i(Fa),T(N6.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),wOe=i(f),yd=n(f,"H2",{class:!0});var kXe=s(yd);q6=n(kXe,"A",{id:!0,class:!0,href:!0});var D4t=s(q6);J1e=n(D4t,"SPAN",{});var G4t=s(J1e);T(A8.$$.fragment,G4t),G4t.forEach(t),D4t.forEach(t),Vlr=i(kXe),Y1e=n(kXe,"SPAN",{});var O4t=s(Y1e);Xlr=r(O4t,"AutoModelForCTC"),O4t.forEach(t),kXe.forEach(t),AOe=i(f),Qo=n(f,"DIV",{class:!0});var gl=s(Qo);T(L8.$$.fragment,gl),zlr=i(gl),xd=n(gl,"P",{});var Woe=s(xd);Qlr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),eW=n(Woe,"A",{href:!0});var V4t=s(eW);Wlr=r(V4t,"from_pretrained()"),V4t.forEach(t),Hlr=r(Woe," class method or the "),oW=n(Woe,"A",{href:!0});var X4t=s(oW);Ulr=r(X4t,"from_config()"),X4t.forEach(t),Jlr=r(Woe,` class
method.`),Woe.forEach(t),Ylr=i(gl),y8=n(gl,"P",{});var SXe=s(y8);Zlr=r(SXe,"This class cannot be instantiated directly using "),Z1e=n(SXe,"CODE",{});var z4t=s(Z1e);Klr=r(z4t,"__init__()"),z4t.forEach(t),eir=r(SXe," (throws an error)."),SXe.forEach(t),oir=i(gl),Mt=n(gl,"DIV",{class:!0});var iA=s(Mt);T(x8.$$.fragment,iA),rir=i(iA),K1e=n(iA,"P",{});var Q4t=s(K1e);tir=r(Q4t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Q4t.forEach(t),air=i(iA),$d=n(iA,"P",{});var Hoe=s($d);nir=r(Hoe,`Note:
Loading a model from its configuration file does `),e2e=n(Hoe,"STRONG",{});var W4t=s(e2e);sir=r(W4t,"not"),W4t.forEach(t),lir=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(Hoe,"A",{href:!0});var H4t=s(rW);iir=r(H4t,"from_pretrained()"),H4t.forEach(t),dir=r(Hoe," to load the model weights."),Hoe.forEach(t),cir=i(iA),T(j6.$$.fragment,iA),iA.forEach(t),fir=i(gl),go=n(gl,"DIV",{class:!0});var Ta=s(go);T($8.$$.fragment,Ta),mir=i(Ta),o2e=n(Ta,"P",{});var U4t=s(o2e);gir=r(U4t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),U4t.forEach(t),hir=i(Ta),Ua=n(Ta,"P",{});var dA=s(Ua);pir=r(dA,"The model class to instantiate is selected based on the "),r2e=n(dA,"CODE",{});var J4t=s(r2e);_ir=r(J4t,"model_type"),J4t.forEach(t),uir=r(dA,` property of the config object (either
passed as an argument or loaded from `),t2e=n(dA,"CODE",{});var Y4t=s(t2e);bir=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),vir=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n(dA,"CODE",{});var Z4t=s(a2e);Fir=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),Tir=r(dA,":"),dA.forEach(t),Mir=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);D6=n(Be,"LI",{});var iBe=s(D6);n2e=n(iBe,"STRONG",{});var K4t=s(n2e);Eir=r(K4t,"data2vec-audio"),K4t.forEach(t),Cir=r(iBe," \u2014 "),tW=n(iBe,"A",{href:!0});var eCt=s(tW);wir=r(eCt,"Data2VecAudioForCTC"),eCt.forEach(t),Air=r(iBe," (Data2VecAudio model)"),iBe.forEach(t),Lir=i(Be),G6=n(Be,"LI",{});var dBe=s(G6);s2e=n(dBe,"STRONG",{});var oCt=s(s2e);yir=r(oCt,"hubert"),oCt.forEach(t),xir=r(dBe," \u2014 "),aW=n(dBe,"A",{href:!0});var rCt=s(aW);$ir=r(rCt,"HubertForCTC"),rCt.forEach(t),kir=r(dBe," (Hubert model)"),dBe.forEach(t),Sir=i(Be),O6=n(Be,"LI",{});var cBe=s(O6);l2e=n(cBe,"STRONG",{});var tCt=s(l2e);Rir=r(tCt,"mctct"),tCt.forEach(t),Pir=r(cBe," \u2014 "),nW=n(cBe,"A",{href:!0});var aCt=s(nW);Bir=r(aCt,"MCTCTForCTC"),aCt.forEach(t),Iir=r(cBe," (M-CTC-T model)"),cBe.forEach(t),Nir=i(Be),V6=n(Be,"LI",{});var fBe=s(V6);i2e=n(fBe,"STRONG",{});var nCt=s(i2e);qir=r(nCt,"sew"),nCt.forEach(t),jir=r(fBe," \u2014 "),sW=n(fBe,"A",{href:!0});var sCt=s(sW);Dir=r(sCt,"SEWForCTC"),sCt.forEach(t),Gir=r(fBe," (SEW model)"),fBe.forEach(t),Oir=i(Be),X6=n(Be,"LI",{});var mBe=s(X6);d2e=n(mBe,"STRONG",{});var lCt=s(d2e);Vir=r(lCt,"sew-d"),lCt.forEach(t),Xir=r(mBe," \u2014 "),lW=n(mBe,"A",{href:!0});var iCt=s(lW);zir=r(iCt,"SEWDForCTC"),iCt.forEach(t),Qir=r(mBe," (SEW-D model)"),mBe.forEach(t),Wir=i(Be),z6=n(Be,"LI",{});var gBe=s(z6);c2e=n(gBe,"STRONG",{});var dCt=s(c2e);Hir=r(dCt,"unispeech"),dCt.forEach(t),Uir=r(gBe," \u2014 "),iW=n(gBe,"A",{href:!0});var cCt=s(iW);Jir=r(cCt,"UniSpeechForCTC"),cCt.forEach(t),Yir=r(gBe," (UniSpeech model)"),gBe.forEach(t),Zir=i(Be),Q6=n(Be,"LI",{});var hBe=s(Q6);f2e=n(hBe,"STRONG",{});var fCt=s(f2e);Kir=r(fCt,"unispeech-sat"),fCt.forEach(t),edr=r(hBe," \u2014 "),dW=n(hBe,"A",{href:!0});var mCt=s(dW);odr=r(mCt,"UniSpeechSatForCTC"),mCt.forEach(t),rdr=r(hBe," (UniSpeechSat model)"),hBe.forEach(t),tdr=i(Be),W6=n(Be,"LI",{});var pBe=s(W6);m2e=n(pBe,"STRONG",{});var gCt=s(m2e);adr=r(gCt,"wav2vec2"),gCt.forEach(t),ndr=r(pBe," \u2014 "),cW=n(pBe,"A",{href:!0});var hCt=s(cW);sdr=r(hCt,"Wav2Vec2ForCTC"),hCt.forEach(t),ldr=r(pBe," (Wav2Vec2 model)"),pBe.forEach(t),idr=i(Be),H6=n(Be,"LI",{});var _Be=s(H6);g2e=n(_Be,"STRONG",{});var pCt=s(g2e);ddr=r(pCt,"wav2vec2-conformer"),pCt.forEach(t),cdr=r(_Be," \u2014 "),fW=n(_Be,"A",{href:!0});var _Ct=s(fW);fdr=r(_Ct,"Wav2Vec2ConformerForCTC"),_Ct.forEach(t),mdr=r(_Be," (Wav2Vec2-Conformer model)"),_Be.forEach(t),gdr=i(Be),U6=n(Be,"LI",{});var uBe=s(U6);h2e=n(uBe,"STRONG",{});var uCt=s(h2e);hdr=r(uCt,"wavlm"),uCt.forEach(t),pdr=r(uBe," \u2014 "),mW=n(uBe,"A",{href:!0});var bCt=s(mW);_dr=r(bCt,"WavLMForCTC"),bCt.forEach(t),udr=r(uBe," (WavLM model)"),uBe.forEach(t),Be.forEach(t),bdr=i(Ta),J6=n(Ta,"P",{});var bBe=s(J6);vdr=r(bBe,"The model is set in evaluation mode by default using "),p2e=n(bBe,"CODE",{});var vCt=s(p2e);Fdr=r(vCt,"model.eval()"),vCt.forEach(t),Tdr=r(bBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=n(bBe,"CODE",{});var FCt=s(_2e);Mdr=r(FCt,"model.train()"),FCt.forEach(t),bBe.forEach(t),Edr=i(Ta),T(Y6.$$.fragment,Ta),Ta.forEach(t),gl.forEach(t),LOe=i(f),kd=n(f,"H2",{class:!0});var RXe=s(kd);Z6=n(RXe,"A",{id:!0,class:!0,href:!0});var TCt=s(Z6);u2e=n(TCt,"SPAN",{});var MCt=s(u2e);T(k8.$$.fragment,MCt),MCt.forEach(t),TCt.forEach(t),Cdr=i(RXe),b2e=n(RXe,"SPAN",{});var ECt=s(b2e);wdr=r(ECt,"AutoModelForSpeechSeq2Seq"),ECt.forEach(t),RXe.forEach(t),yOe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(S8.$$.fragment,hl),Adr=i(hl),Sd=n(hl,"P",{});var Uoe=s(Sd);Ldr=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gW=n(Uoe,"A",{href:!0});var CCt=s(gW);ydr=r(CCt,"from_pretrained()"),CCt.forEach(t),xdr=r(Uoe," class method or the "),hW=n(Uoe,"A",{href:!0});var wCt=s(hW);$dr=r(wCt,"from_config()"),wCt.forEach(t),kdr=r(Uoe,` class
method.`),Uoe.forEach(t),Sdr=i(hl),R8=n(hl,"P",{});var PXe=s(R8);Rdr=r(PXe,"This class cannot be instantiated directly using "),v2e=n(PXe,"CODE",{});var ACt=s(v2e);Pdr=r(ACt,"__init__()"),ACt.forEach(t),Bdr=r(PXe," (throws an error)."),PXe.forEach(t),Idr=i(hl),Et=n(hl,"DIV",{class:!0});var cA=s(Et);T(P8.$$.fragment,cA),Ndr=i(cA),F2e=n(cA,"P",{});var LCt=s(F2e);qdr=r(LCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LCt.forEach(t),jdr=i(cA),Rd=n(cA,"P",{});var Joe=s(Rd);Ddr=r(Joe,`Note:
Loading a model from its configuration file does `),T2e=n(Joe,"STRONG",{});var yCt=s(T2e);Gdr=r(yCt,"not"),yCt.forEach(t),Odr=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(Joe,"A",{href:!0});var xCt=s(pW);Vdr=r(xCt,"from_pretrained()"),xCt.forEach(t),Xdr=r(Joe," to load the model weights."),Joe.forEach(t),zdr=i(cA),T(K6.$$.fragment,cA),cA.forEach(t),Qdr=i(hl),ho=n(hl,"DIV",{class:!0});var Ma=s(ho);T(B8.$$.fragment,Ma),Wdr=i(Ma),M2e=n(Ma,"P",{});var $Ct=s(M2e);Hdr=r($Ct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$Ct.forEach(t),Udr=i(Ma),Ja=n(Ma,"P",{});var fA=s(Ja);Jdr=r(fA,"The model class to instantiate is selected based on the "),E2e=n(fA,"CODE",{});var kCt=s(E2e);Ydr=r(kCt,"model_type"),kCt.forEach(t),Zdr=r(fA,` property of the config object (either
passed as an argument or loaded from `),C2e=n(fA,"CODE",{});var SCt=s(C2e);Kdr=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),ecr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(fA,"CODE",{});var RCt=s(w2e);ocr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),rcr=r(fA,":"),fA.forEach(t),tcr=i(Ma),I8=n(Ma,"UL",{});var BXe=s(I8);eT=n(BXe,"LI",{});var vBe=s(eT);A2e=n(vBe,"STRONG",{});var PCt=s(A2e);acr=r(PCt,"speech-encoder-decoder"),PCt.forEach(t),ncr=r(vBe," \u2014 "),_W=n(vBe,"A",{href:!0});var BCt=s(_W);scr=r(BCt,"SpeechEncoderDecoderModel"),BCt.forEach(t),lcr=r(vBe," (Speech Encoder decoder model)"),vBe.forEach(t),icr=i(BXe),oT=n(BXe,"LI",{});var FBe=s(oT);L2e=n(FBe,"STRONG",{});var ICt=s(L2e);dcr=r(ICt,"speech_to_text"),ICt.forEach(t),ccr=r(FBe," \u2014 "),uW=n(FBe,"A",{href:!0});var NCt=s(uW);fcr=r(NCt,"Speech2TextForConditionalGeneration"),NCt.forEach(t),mcr=r(FBe," (Speech2Text model)"),FBe.forEach(t),BXe.forEach(t),gcr=i(Ma),rT=n(Ma,"P",{});var TBe=s(rT);hcr=r(TBe,"The model is set in evaluation mode by default using "),y2e=n(TBe,"CODE",{});var qCt=s(y2e);pcr=r(qCt,"model.eval()"),qCt.forEach(t),_cr=r(TBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x2e=n(TBe,"CODE",{});var jCt=s(x2e);ucr=r(jCt,"model.train()"),jCt.forEach(t),TBe.forEach(t),bcr=i(Ma),T(tT.$$.fragment,Ma),Ma.forEach(t),hl.forEach(t),xOe=i(f),Pd=n(f,"H2",{class:!0});var IXe=s(Pd);aT=n(IXe,"A",{id:!0,class:!0,href:!0});var DCt=s(aT);$2e=n(DCt,"SPAN",{});var GCt=s($2e);T(N8.$$.fragment,GCt),GCt.forEach(t),DCt.forEach(t),vcr=i(IXe),k2e=n(IXe,"SPAN",{});var OCt=s(k2e);Fcr=r(OCt,"AutoModelForAudioXVector"),OCt.forEach(t),IXe.forEach(t),$Oe=i(f),Ho=n(f,"DIV",{class:!0});var pl=s(Ho);T(q8.$$.fragment,pl),Tcr=i(pl),Bd=n(pl,"P",{});var Yoe=s(Bd);Mcr=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bW=n(Yoe,"A",{href:!0});var VCt=s(bW);Ecr=r(VCt,"from_pretrained()"),VCt.forEach(t),Ccr=r(Yoe," class method or the "),vW=n(Yoe,"A",{href:!0});var XCt=s(vW);wcr=r(XCt,"from_config()"),XCt.forEach(t),Acr=r(Yoe,` class
method.`),Yoe.forEach(t),Lcr=i(pl),j8=n(pl,"P",{});var NXe=s(j8);ycr=r(NXe,"This class cannot be instantiated directly using "),S2e=n(NXe,"CODE",{});var zCt=s(S2e);xcr=r(zCt,"__init__()"),zCt.forEach(t),$cr=r(NXe," (throws an error)."),NXe.forEach(t),kcr=i(pl),Ct=n(pl,"DIV",{class:!0});var mA=s(Ct);T(D8.$$.fragment,mA),Scr=i(mA),R2e=n(mA,"P",{});var QCt=s(R2e);Rcr=r(QCt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),QCt.forEach(t),Pcr=i(mA),Id=n(mA,"P",{});var Zoe=s(Id);Bcr=r(Zoe,`Note:
Loading a model from its configuration file does `),P2e=n(Zoe,"STRONG",{});var WCt=s(P2e);Icr=r(WCt,"not"),WCt.forEach(t),Ncr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(Zoe,"A",{href:!0});var HCt=s(FW);qcr=r(HCt,"from_pretrained()"),HCt.forEach(t),jcr=r(Zoe," to load the model weights."),Zoe.forEach(t),Dcr=i(mA),T(nT.$$.fragment,mA),mA.forEach(t),Gcr=i(pl),po=n(pl,"DIV",{class:!0});var Ea=s(po);T(G8.$$.fragment,Ea),Ocr=i(Ea),B2e=n(Ea,"P",{});var UCt=s(B2e);Vcr=r(UCt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),UCt.forEach(t),Xcr=i(Ea),Ya=n(Ea,"P",{});var gA=s(Ya);zcr=r(gA,"The model class to instantiate is selected based on the "),I2e=n(gA,"CODE",{});var JCt=s(I2e);Qcr=r(JCt,"model_type"),JCt.forEach(t),Wcr=r(gA,` property of the config object (either
passed as an argument or loaded from `),N2e=n(gA,"CODE",{});var YCt=s(N2e);Hcr=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),Ucr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(gA,"CODE",{});var ZCt=s(q2e);Jcr=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),Ycr=r(gA,":"),gA.forEach(t),Zcr=i(Ea),ot=n(Ea,"UL",{});var _l=s(ot);sT=n(_l,"LI",{});var MBe=s(sT);j2e=n(MBe,"STRONG",{});var KCt=s(j2e);Kcr=r(KCt,"data2vec-audio"),KCt.forEach(t),efr=r(MBe," \u2014 "),TW=n(MBe,"A",{href:!0});var e5t=s(TW);ofr=r(e5t,"Data2VecAudioForXVector"),e5t.forEach(t),rfr=r(MBe," (Data2VecAudio model)"),MBe.forEach(t),tfr=i(_l),lT=n(_l,"LI",{});var EBe=s(lT);D2e=n(EBe,"STRONG",{});var o5t=s(D2e);afr=r(o5t,"unispeech-sat"),o5t.forEach(t),nfr=r(EBe," \u2014 "),MW=n(EBe,"A",{href:!0});var r5t=s(MW);sfr=r(r5t,"UniSpeechSatForXVector"),r5t.forEach(t),lfr=r(EBe," (UniSpeechSat model)"),EBe.forEach(t),ifr=i(_l),iT=n(_l,"LI",{});var CBe=s(iT);G2e=n(CBe,"STRONG",{});var t5t=s(G2e);dfr=r(t5t,"wav2vec2"),t5t.forEach(t),cfr=r(CBe," \u2014 "),EW=n(CBe,"A",{href:!0});var a5t=s(EW);ffr=r(a5t,"Wav2Vec2ForXVector"),a5t.forEach(t),mfr=r(CBe," (Wav2Vec2 model)"),CBe.forEach(t),gfr=i(_l),dT=n(_l,"LI",{});var wBe=s(dT);O2e=n(wBe,"STRONG",{});var n5t=s(O2e);hfr=r(n5t,"wav2vec2-conformer"),n5t.forEach(t),pfr=r(wBe," \u2014 "),CW=n(wBe,"A",{href:!0});var s5t=s(CW);_fr=r(s5t,"Wav2Vec2ConformerForXVector"),s5t.forEach(t),ufr=r(wBe," (Wav2Vec2-Conformer model)"),wBe.forEach(t),bfr=i(_l),cT=n(_l,"LI",{});var ABe=s(cT);V2e=n(ABe,"STRONG",{});var l5t=s(V2e);vfr=r(l5t,"wavlm"),l5t.forEach(t),Ffr=r(ABe," \u2014 "),wW=n(ABe,"A",{href:!0});var i5t=s(wW);Tfr=r(i5t,"WavLMForXVector"),i5t.forEach(t),Mfr=r(ABe," (WavLM model)"),ABe.forEach(t),_l.forEach(t),Efr=i(Ea),fT=n(Ea,"P",{});var LBe=s(fT);Cfr=r(LBe,"The model is set in evaluation mode by default using "),X2e=n(LBe,"CODE",{});var d5t=s(X2e);wfr=r(d5t,"model.eval()"),d5t.forEach(t),Afr=r(LBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z2e=n(LBe,"CODE",{});var c5t=s(z2e);Lfr=r(c5t,"model.train()"),c5t.forEach(t),LBe.forEach(t),yfr=i(Ea),T(mT.$$.fragment,Ea),Ea.forEach(t),pl.forEach(t),kOe=i(f),Nd=n(f,"H2",{class:!0});var qXe=s(Nd);gT=n(qXe,"A",{id:!0,class:!0,href:!0});var f5t=s(gT);Q2e=n(f5t,"SPAN",{});var m5t=s(Q2e);T(O8.$$.fragment,m5t),m5t.forEach(t),f5t.forEach(t),xfr=i(qXe),W2e=n(qXe,"SPAN",{});var g5t=s(W2e);$fr=r(g5t,"AutoModelForMaskedImageModeling"),g5t.forEach(t),qXe.forEach(t),SOe=i(f),Uo=n(f,"DIV",{class:!0});var ul=s(Uo);T(V8.$$.fragment,ul),kfr=i(ul),qd=n(ul,"P",{});var Koe=s(qd);Sfr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AW=n(Koe,"A",{href:!0});var h5t=s(AW);Rfr=r(h5t,"from_pretrained()"),h5t.forEach(t),Pfr=r(Koe," class method or the "),LW=n(Koe,"A",{href:!0});var p5t=s(LW);Bfr=r(p5t,"from_config()"),p5t.forEach(t),Ifr=r(Koe,` class
method.`),Koe.forEach(t),Nfr=i(ul),X8=n(ul,"P",{});var jXe=s(X8);qfr=r(jXe,"This class cannot be instantiated directly using "),H2e=n(jXe,"CODE",{});var _5t=s(H2e);jfr=r(_5t,"__init__()"),_5t.forEach(t),Dfr=r(jXe," (throws an error)."),jXe.forEach(t),Gfr=i(ul),wt=n(ul,"DIV",{class:!0});var hA=s(wt);T(z8.$$.fragment,hA),Ofr=i(hA),U2e=n(hA,"P",{});var u5t=s(U2e);Vfr=r(u5t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),u5t.forEach(t),Xfr=i(hA),jd=n(hA,"P",{});var ere=s(jd);zfr=r(ere,`Note:
Loading a model from its configuration file does `),J2e=n(ere,"STRONG",{});var b5t=s(J2e);Qfr=r(b5t,"not"),b5t.forEach(t),Wfr=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(ere,"A",{href:!0});var v5t=s(yW);Hfr=r(v5t,"from_pretrained()"),v5t.forEach(t),Ufr=r(ere," to load the model weights."),ere.forEach(t),Jfr=i(hA),T(hT.$$.fragment,hA),hA.forEach(t),Yfr=i(ul),_o=n(ul,"DIV",{class:!0});var Ca=s(_o);T(Q8.$$.fragment,Ca),Zfr=i(Ca),Y2e=n(Ca,"P",{});var F5t=s(Y2e);Kfr=r(F5t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),F5t.forEach(t),emr=i(Ca),Za=n(Ca,"P",{});var pA=s(Za);omr=r(pA,"The model class to instantiate is selected based on the "),Z2e=n(pA,"CODE",{});var T5t=s(Z2e);rmr=r(T5t,"model_type"),T5t.forEach(t),tmr=r(pA,` property of the config object (either
passed as an argument or loaded from `),K2e=n(pA,"CODE",{});var M5t=s(K2e);amr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),nmr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(pA,"CODE",{});var E5t=s(ebe);smr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),lmr=r(pA,":"),pA.forEach(t),imr=i(Ca),Dd=n(Ca,"UL",{});var ore=s(Dd);pT=n(ore,"LI",{});var yBe=s(pT);obe=n(yBe,"STRONG",{});var C5t=s(obe);dmr=r(C5t,"deit"),C5t.forEach(t),cmr=r(yBe," \u2014 "),xW=n(yBe,"A",{href:!0});var w5t=s(xW);fmr=r(w5t,"DeiTForMaskedImageModeling"),w5t.forEach(t),mmr=r(yBe," (DeiT model)"),yBe.forEach(t),gmr=i(ore),_T=n(ore,"LI",{});var xBe=s(_T);rbe=n(xBe,"STRONG",{});var A5t=s(rbe);hmr=r(A5t,"swin"),A5t.forEach(t),pmr=r(xBe," \u2014 "),$W=n(xBe,"A",{href:!0});var L5t=s($W);_mr=r(L5t,"SwinForMaskedImageModeling"),L5t.forEach(t),umr=r(xBe," (Swin Transformer model)"),xBe.forEach(t),bmr=i(ore),uT=n(ore,"LI",{});var $Be=s(uT);tbe=n($Be,"STRONG",{});var y5t=s(tbe);vmr=r(y5t,"vit"),y5t.forEach(t),Fmr=r($Be," \u2014 "),kW=n($Be,"A",{href:!0});var x5t=s(kW);Tmr=r(x5t,"ViTForMaskedImageModeling"),x5t.forEach(t),Mmr=r($Be," (ViT model)"),$Be.forEach(t),ore.forEach(t),Emr=i(Ca),bT=n(Ca,"P",{});var kBe=s(bT);Cmr=r(kBe,"The model is set in evaluation mode by default using "),abe=n(kBe,"CODE",{});var $5t=s(abe);wmr=r($5t,"model.eval()"),$5t.forEach(t),Amr=r(kBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nbe=n(kBe,"CODE",{});var k5t=s(nbe);Lmr=r(k5t,"model.train()"),k5t.forEach(t),kBe.forEach(t),ymr=i(Ca),T(vT.$$.fragment,Ca),Ca.forEach(t),ul.forEach(t),ROe=i(f),Gd=n(f,"H2",{class:!0});var DXe=s(Gd);FT=n(DXe,"A",{id:!0,class:!0,href:!0});var S5t=s(FT);sbe=n(S5t,"SPAN",{});var R5t=s(sbe);T(W8.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),xmr=i(DXe),lbe=n(DXe,"SPAN",{});var P5t=s(lbe);$mr=r(P5t,"AutoModelForObjectDetection"),P5t.forEach(t),DXe.forEach(t),POe=i(f),Jo=n(f,"DIV",{class:!0});var bl=s(Jo);T(H8.$$.fragment,bl),kmr=i(bl),Od=n(bl,"P",{});var rre=s(Od);Smr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),SW=n(rre,"A",{href:!0});var B5t=s(SW);Rmr=r(B5t,"from_pretrained()"),B5t.forEach(t),Pmr=r(rre," class method or the "),RW=n(rre,"A",{href:!0});var I5t=s(RW);Bmr=r(I5t,"from_config()"),I5t.forEach(t),Imr=r(rre,` class
method.`),rre.forEach(t),Nmr=i(bl),U8=n(bl,"P",{});var GXe=s(U8);qmr=r(GXe,"This class cannot be instantiated directly using "),ibe=n(GXe,"CODE",{});var N5t=s(ibe);jmr=r(N5t,"__init__()"),N5t.forEach(t),Dmr=r(GXe," (throws an error)."),GXe.forEach(t),Gmr=i(bl),At=n(bl,"DIV",{class:!0});var _A=s(At);T(J8.$$.fragment,_A),Omr=i(_A),dbe=n(_A,"P",{});var q5t=s(dbe);Vmr=r(q5t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),q5t.forEach(t),Xmr=i(_A),Vd=n(_A,"P",{});var tre=s(Vd);zmr=r(tre,`Note:
Loading a model from its configuration file does `),cbe=n(tre,"STRONG",{});var j5t=s(cbe);Qmr=r(j5t,"not"),j5t.forEach(t),Wmr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(tre,"A",{href:!0});var D5t=s(PW);Hmr=r(D5t,"from_pretrained()"),D5t.forEach(t),Umr=r(tre," to load the model weights."),tre.forEach(t),Jmr=i(_A),T(TT.$$.fragment,_A),_A.forEach(t),Ymr=i(bl),uo=n(bl,"DIV",{class:!0});var wa=s(uo);T(Y8.$$.fragment,wa),Zmr=i(wa),fbe=n(wa,"P",{});var G5t=s(fbe);Kmr=r(G5t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),G5t.forEach(t),egr=i(wa),Ka=n(wa,"P",{});var uA=s(Ka);ogr=r(uA,"The model class to instantiate is selected based on the "),mbe=n(uA,"CODE",{});var O5t=s(mbe);rgr=r(O5t,"model_type"),O5t.forEach(t),tgr=r(uA,` property of the config object (either
passed as an argument or loaded from `),gbe=n(uA,"CODE",{});var V5t=s(gbe);agr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),ngr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(uA,"CODE",{});var X5t=s(hbe);sgr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),lgr=r(uA,":"),uA.forEach(t),igr=i(wa),Z8=n(wa,"UL",{});var OXe=s(Z8);MT=n(OXe,"LI",{});var SBe=s(MT);pbe=n(SBe,"STRONG",{});var z5t=s(pbe);dgr=r(z5t,"detr"),z5t.forEach(t),cgr=r(SBe," \u2014 "),BW=n(SBe,"A",{href:!0});var Q5t=s(BW);fgr=r(Q5t,"DetrForObjectDetection"),Q5t.forEach(t),mgr=r(SBe," (DETR model)"),SBe.forEach(t),ggr=i(OXe),ET=n(OXe,"LI",{});var RBe=s(ET);_be=n(RBe,"STRONG",{});var W5t=s(_be);hgr=r(W5t,"yolos"),W5t.forEach(t),pgr=r(RBe," \u2014 "),IW=n(RBe,"A",{href:!0});var H5t=s(IW);_gr=r(H5t,"YolosForObjectDetection"),H5t.forEach(t),ugr=r(RBe," (YOLOS model)"),RBe.forEach(t),OXe.forEach(t),bgr=i(wa),CT=n(wa,"P",{});var PBe=s(CT);vgr=r(PBe,"The model is set in evaluation mode by default using "),ube=n(PBe,"CODE",{});var U5t=s(ube);Fgr=r(U5t,"model.eval()"),U5t.forEach(t),Tgr=r(PBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bbe=n(PBe,"CODE",{});var J5t=s(bbe);Mgr=r(J5t,"model.train()"),J5t.forEach(t),PBe.forEach(t),Egr=i(wa),T(wT.$$.fragment,wa),wa.forEach(t),bl.forEach(t),BOe=i(f),Xd=n(f,"H2",{class:!0});var VXe=s(Xd);AT=n(VXe,"A",{id:!0,class:!0,href:!0});var Y5t=s(AT);vbe=n(Y5t,"SPAN",{});var Z5t=s(vbe);T(K8.$$.fragment,Z5t),Z5t.forEach(t),Y5t.forEach(t),Cgr=i(VXe),Fbe=n(VXe,"SPAN",{});var K5t=s(Fbe);wgr=r(K5t,"AutoModelForImageSegmentation"),K5t.forEach(t),VXe.forEach(t),IOe=i(f),Yo=n(f,"DIV",{class:!0});var vl=s(Yo);T(e9.$$.fragment,vl),Agr=i(vl),zd=n(vl,"P",{});var are=s(zd);Lgr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NW=n(are,"A",{href:!0});var e3t=s(NW);ygr=r(e3t,"from_pretrained()"),e3t.forEach(t),xgr=r(are," class method or the "),qW=n(are,"A",{href:!0});var o3t=s(qW);$gr=r(o3t,"from_config()"),o3t.forEach(t),kgr=r(are,` class
method.`),are.forEach(t),Sgr=i(vl),o9=n(vl,"P",{});var XXe=s(o9);Rgr=r(XXe,"This class cannot be instantiated directly using "),Tbe=n(XXe,"CODE",{});var r3t=s(Tbe);Pgr=r(r3t,"__init__()"),r3t.forEach(t),Bgr=r(XXe," (throws an error)."),XXe.forEach(t),Igr=i(vl),Lt=n(vl,"DIV",{class:!0});var bA=s(Lt);T(r9.$$.fragment,bA),Ngr=i(bA),Mbe=n(bA,"P",{});var t3t=s(Mbe);qgr=r(t3t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),t3t.forEach(t),jgr=i(bA),Qd=n(bA,"P",{});var nre=s(Qd);Dgr=r(nre,`Note:
Loading a model from its configuration file does `),Ebe=n(nre,"STRONG",{});var a3t=s(Ebe);Ggr=r(a3t,"not"),a3t.forEach(t),Ogr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jW=n(nre,"A",{href:!0});var n3t=s(jW);Vgr=r(n3t,"from_pretrained()"),n3t.forEach(t),Xgr=r(nre," to load the model weights."),nre.forEach(t),zgr=i(bA),T(LT.$$.fragment,bA),bA.forEach(t),Qgr=i(vl),bo=n(vl,"DIV",{class:!0});var Aa=s(bo);T(t9.$$.fragment,Aa),Wgr=i(Aa),Cbe=n(Aa,"P",{});var s3t=s(Cbe);Hgr=r(s3t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),s3t.forEach(t),Ugr=i(Aa),en=n(Aa,"P",{});var vA=s(en);Jgr=r(vA,"The model class to instantiate is selected based on the "),wbe=n(vA,"CODE",{});var l3t=s(wbe);Ygr=r(l3t,"model_type"),l3t.forEach(t),Zgr=r(vA,` property of the config object (either
passed as an argument or loaded from `),Abe=n(vA,"CODE",{});var i3t=s(Abe);Kgr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),ehr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(vA,"CODE",{});var d3t=s(Lbe);ohr=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),rhr=r(vA,":"),vA.forEach(t),thr=i(Aa),ybe=n(Aa,"UL",{});var c3t=s(ybe);yT=n(c3t,"LI",{});var BBe=s(yT);xbe=n(BBe,"STRONG",{});var f3t=s(xbe);ahr=r(f3t,"detr"),f3t.forEach(t),nhr=r(BBe," \u2014 "),DW=n(BBe,"A",{href:!0});var m3t=s(DW);shr=r(m3t,"DetrForSegmentation"),m3t.forEach(t),lhr=r(BBe," (DETR model)"),BBe.forEach(t),c3t.forEach(t),ihr=i(Aa),xT=n(Aa,"P",{});var IBe=s(xT);dhr=r(IBe,"The model is set in evaluation mode by default using "),$be=n(IBe,"CODE",{});var g3t=s($be);chr=r(g3t,"model.eval()"),g3t.forEach(t),fhr=r(IBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kbe=n(IBe,"CODE",{});var h3t=s(kbe);mhr=r(h3t,"model.train()"),h3t.forEach(t),IBe.forEach(t),ghr=i(Aa),T($T.$$.fragment,Aa),Aa.forEach(t),vl.forEach(t),NOe=i(f),Wd=n(f,"H2",{class:!0});var zXe=s(Wd);kT=n(zXe,"A",{id:!0,class:!0,href:!0});var p3t=s(kT);Sbe=n(p3t,"SPAN",{});var _3t=s(Sbe);T(a9.$$.fragment,_3t),_3t.forEach(t),p3t.forEach(t),hhr=i(zXe),Rbe=n(zXe,"SPAN",{});var u3t=s(Rbe);phr=r(u3t,"AutoModelForSemanticSegmentation"),u3t.forEach(t),zXe.forEach(t),qOe=i(f),Zo=n(f,"DIV",{class:!0});var Fl=s(Zo);T(n9.$$.fragment,Fl),_hr=i(Fl),Hd=n(Fl,"P",{});var sre=s(Hd);uhr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GW=n(sre,"A",{href:!0});var b3t=s(GW);bhr=r(b3t,"from_pretrained()"),b3t.forEach(t),vhr=r(sre," class method or the "),OW=n(sre,"A",{href:!0});var v3t=s(OW);Fhr=r(v3t,"from_config()"),v3t.forEach(t),Thr=r(sre,` class
method.`),sre.forEach(t),Mhr=i(Fl),s9=n(Fl,"P",{});var QXe=s(s9);Ehr=r(QXe,"This class cannot be instantiated directly using "),Pbe=n(QXe,"CODE",{});var F3t=s(Pbe);Chr=r(F3t,"__init__()"),F3t.forEach(t),whr=r(QXe," (throws an error)."),QXe.forEach(t),Ahr=i(Fl),yt=n(Fl,"DIV",{class:!0});var FA=s(yt);T(l9.$$.fragment,FA),Lhr=i(FA),Bbe=n(FA,"P",{});var T3t=s(Bbe);yhr=r(T3t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),T3t.forEach(t),xhr=i(FA),Ud=n(FA,"P",{});var lre=s(Ud);$hr=r(lre,`Note:
Loading a model from its configuration file does `),Ibe=n(lre,"STRONG",{});var M3t=s(Ibe);khr=r(M3t,"not"),M3t.forEach(t),Shr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(lre,"A",{href:!0});var E3t=s(VW);Rhr=r(E3t,"from_pretrained()"),E3t.forEach(t),Phr=r(lre," to load the model weights."),lre.forEach(t),Bhr=i(FA),T(ST.$$.fragment,FA),FA.forEach(t),Ihr=i(Fl),vo=n(Fl,"DIV",{class:!0});var La=s(vo);T(i9.$$.fragment,La),Nhr=i(La),Nbe=n(La,"P",{});var C3t=s(Nbe);qhr=r(C3t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),C3t.forEach(t),jhr=i(La),on=n(La,"P",{});var TA=s(on);Dhr=r(TA,"The model class to instantiate is selected based on the "),qbe=n(TA,"CODE",{});var w3t=s(qbe);Ghr=r(w3t,"model_type"),w3t.forEach(t),Ohr=r(TA,` property of the config object (either
passed as an argument or loaded from `),jbe=n(TA,"CODE",{});var A3t=s(jbe);Vhr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),Xhr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(TA,"CODE",{});var L3t=s(Dbe);zhr=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),Qhr=r(TA,":"),TA.forEach(t),Whr=i(La),rn=n(La,"UL",{});var MA=s(rn);RT=n(MA,"LI",{});var NBe=s(RT);Gbe=n(NBe,"STRONG",{});var y3t=s(Gbe);Hhr=r(y3t,"beit"),y3t.forEach(t),Uhr=r(NBe," \u2014 "),XW=n(NBe,"A",{href:!0});var x3t=s(XW);Jhr=r(x3t,"BeitForSemanticSegmentation"),x3t.forEach(t),Yhr=r(NBe," (BEiT model)"),NBe.forEach(t),Zhr=i(MA),PT=n(MA,"LI",{});var qBe=s(PT);Obe=n(qBe,"STRONG",{});var $3t=s(Obe);Khr=r($3t,"data2vec-vision"),$3t.forEach(t),epr=r(qBe," \u2014 "),zW=n(qBe,"A",{href:!0});var k3t=s(zW);opr=r(k3t,"Data2VecVisionForSemanticSegmentation"),k3t.forEach(t),rpr=r(qBe," (Data2VecVision model)"),qBe.forEach(t),tpr=i(MA),BT=n(MA,"LI",{});var jBe=s(BT);Vbe=n(jBe,"STRONG",{});var S3t=s(Vbe);apr=r(S3t,"dpt"),S3t.forEach(t),npr=r(jBe," \u2014 "),QW=n(jBe,"A",{href:!0});var R3t=s(QW);spr=r(R3t,"DPTForSemanticSegmentation"),R3t.forEach(t),lpr=r(jBe," (DPT model)"),jBe.forEach(t),ipr=i(MA),IT=n(MA,"LI",{});var DBe=s(IT);Xbe=n(DBe,"STRONG",{});var P3t=s(Xbe);dpr=r(P3t,"segformer"),P3t.forEach(t),cpr=r(DBe," \u2014 "),WW=n(DBe,"A",{href:!0});var B3t=s(WW);fpr=r(B3t,"SegformerForSemanticSegmentation"),B3t.forEach(t),mpr=r(DBe," (SegFormer model)"),DBe.forEach(t),MA.forEach(t),gpr=i(La),NT=n(La,"P",{});var GBe=s(NT);hpr=r(GBe,"The model is set in evaluation mode by default using "),zbe=n(GBe,"CODE",{});var I3t=s(zbe);ppr=r(I3t,"model.eval()"),I3t.forEach(t),_pr=r(GBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qbe=n(GBe,"CODE",{});var N3t=s(Qbe);upr=r(N3t,"model.train()"),N3t.forEach(t),GBe.forEach(t),bpr=i(La),T(qT.$$.fragment,La),La.forEach(t),Fl.forEach(t),jOe=i(f),Jd=n(f,"H2",{class:!0});var WXe=s(Jd);jT=n(WXe,"A",{id:!0,class:!0,href:!0});var q3t=s(jT);Wbe=n(q3t,"SPAN",{});var j3t=s(Wbe);T(d9.$$.fragment,j3t),j3t.forEach(t),q3t.forEach(t),vpr=i(WXe),Hbe=n(WXe,"SPAN",{});var D3t=s(Hbe);Fpr=r(D3t,"AutoModelForInstanceSegmentation"),D3t.forEach(t),WXe.forEach(t),DOe=i(f),Ko=n(f,"DIV",{class:!0});var Tl=s(Ko);T(c9.$$.fragment,Tl),Tpr=i(Tl),Yd=n(Tl,"P",{});var ire=s(Yd);Mpr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HW=n(ire,"A",{href:!0});var G3t=s(HW);Epr=r(G3t,"from_pretrained()"),G3t.forEach(t),Cpr=r(ire," class method or the "),UW=n(ire,"A",{href:!0});var O3t=s(UW);wpr=r(O3t,"from_config()"),O3t.forEach(t),Apr=r(ire,` class
method.`),ire.forEach(t),Lpr=i(Tl),f9=n(Tl,"P",{});var HXe=s(f9);ypr=r(HXe,"This class cannot be instantiated directly using "),Ube=n(HXe,"CODE",{});var V3t=s(Ube);xpr=r(V3t,"__init__()"),V3t.forEach(t),$pr=r(HXe," (throws an error)."),HXe.forEach(t),kpr=i(Tl),xt=n(Tl,"DIV",{class:!0});var EA=s(xt);T(m9.$$.fragment,EA),Spr=i(EA),Jbe=n(EA,"P",{});var X3t=s(Jbe);Rpr=r(X3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),X3t.forEach(t),Ppr=i(EA),Zd=n(EA,"P",{});var dre=s(Zd);Bpr=r(dre,`Note:
Loading a model from its configuration file does `),Ybe=n(dre,"STRONG",{});var z3t=s(Ybe);Ipr=r(z3t,"not"),z3t.forEach(t),Npr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(dre,"A",{href:!0});var Q3t=s(JW);qpr=r(Q3t,"from_pretrained()"),Q3t.forEach(t),jpr=r(dre," to load the model weights."),dre.forEach(t),Dpr=i(EA),T(DT.$$.fragment,EA),EA.forEach(t),Gpr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var ya=s(Fo);T(g9.$$.fragment,ya),Opr=i(ya),Zbe=n(ya,"P",{});var W3t=s(Zbe);Vpr=r(W3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),W3t.forEach(t),Xpr=i(ya),tn=n(ya,"P",{});var CA=s(tn);zpr=r(CA,"The model class to instantiate is selected based on the "),Kbe=n(CA,"CODE",{});var H3t=s(Kbe);Qpr=r(H3t,"model_type"),H3t.forEach(t),Wpr=r(CA,` property of the config object (either
passed as an argument or loaded from `),eve=n(CA,"CODE",{});var U3t=s(eve);Hpr=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),Upr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(CA,"CODE",{});var J3t=s(ove);Jpr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),Ypr=r(CA,":"),CA.forEach(t),Zpr=i(ya),rve=n(ya,"UL",{});var Y3t=s(rve);GT=n(Y3t,"LI",{});var OBe=s(GT);tve=n(OBe,"STRONG",{});var Z3t=s(tve);Kpr=r(Z3t,"maskformer"),Z3t.forEach(t),e_r=r(OBe," \u2014 "),YW=n(OBe,"A",{href:!0});var K3t=s(YW);o_r=r(K3t,"MaskFormerForInstanceSegmentation"),K3t.forEach(t),r_r=r(OBe," (MaskFormer model)"),OBe.forEach(t),Y3t.forEach(t),t_r=i(ya),OT=n(ya,"P",{});var VBe=s(OT);a_r=r(VBe,"The model is set in evaluation mode by default using "),ave=n(VBe,"CODE",{});var e0t=s(ave);n_r=r(e0t,"model.eval()"),e0t.forEach(t),s_r=r(VBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nve=n(VBe,"CODE",{});var o0t=s(nve);l_r=r(o0t,"model.train()"),o0t.forEach(t),VBe.forEach(t),i_r=i(ya),T(VT.$$.fragment,ya),ya.forEach(t),Tl.forEach(t),GOe=i(f),Kd=n(f,"H2",{class:!0});var UXe=s(Kd);XT=n(UXe,"A",{id:!0,class:!0,href:!0});var r0t=s(XT);sve=n(r0t,"SPAN",{});var t0t=s(sve);T(h9.$$.fragment,t0t),t0t.forEach(t),r0t.forEach(t),d_r=i(UXe),lve=n(UXe,"SPAN",{});var a0t=s(lve);c_r=r(a0t,"TFAutoModel"),a0t.forEach(t),UXe.forEach(t),OOe=i(f),er=n(f,"DIV",{class:!0});var Ml=s(er);T(p9.$$.fragment,Ml),f_r=i(Ml),ec=n(Ml,"P",{});var cre=s(ec);m_r=r(cre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZW=n(cre,"A",{href:!0});var n0t=s(ZW);g_r=r(n0t,"from_pretrained()"),n0t.forEach(t),h_r=r(cre," class method or the "),KW=n(cre,"A",{href:!0});var s0t=s(KW);p_r=r(s0t,"from_config()"),s0t.forEach(t),__r=r(cre,` class
method.`),cre.forEach(t),u_r=i(Ml),_9=n(Ml,"P",{});var JXe=s(_9);b_r=r(JXe,"This class cannot be instantiated directly using "),ive=n(JXe,"CODE",{});var l0t=s(ive);v_r=r(l0t,"__init__()"),l0t.forEach(t),F_r=r(JXe," (throws an error)."),JXe.forEach(t),T_r=i(Ml),$t=n(Ml,"DIV",{class:!0});var wA=s($t);T(u9.$$.fragment,wA),M_r=i(wA),dve=n(wA,"P",{});var i0t=s(dve);E_r=r(i0t,"Instantiates one of the base model classes of the library from a configuration."),i0t.forEach(t),C_r=i(wA),oc=n(wA,"P",{});var fre=s(oc);w_r=r(fre,`Note:
Loading a model from its configuration file does `),cve=n(fre,"STRONG",{});var d0t=s(cve);A_r=r(d0t,"not"),d0t.forEach(t),L_r=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(fre,"A",{href:!0});var c0t=s(eH);y_r=r(c0t,"from_pretrained()"),c0t.forEach(t),x_r=r(fre," to load the model weights."),fre.forEach(t),$_r=i(wA),T(zT.$$.fragment,wA),wA.forEach(t),k_r=i(Ml),yr=n(Ml,"DIV",{class:!0});var El=s(yr);T(b9.$$.fragment,El),S_r=i(El),fve=n(El,"P",{});var f0t=s(fve);R_r=r(f0t,"Instantiate one of the base model classes of the library from a pretrained model."),f0t.forEach(t),P_r=i(El),an=n(El,"P",{});var AA=s(an);B_r=r(AA,"The model class to instantiate is selected based on the "),mve=n(AA,"CODE",{});var m0t=s(mve);I_r=r(m0t,"model_type"),m0t.forEach(t),N_r=r(AA,` property of the config object (either
passed as an argument or loaded from `),gve=n(AA,"CODE",{});var g0t=s(gve);q_r=r(g0t,"pretrained_model_name_or_path"),g0t.forEach(t),j_r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(AA,"CODE",{});var h0t=s(hve);D_r=r(h0t,"pretrained_model_name_or_path"),h0t.forEach(t),G_r=r(AA,":"),AA.forEach(t),O_r=i(El),j=n(El,"UL",{});var D=s(j);QT=n(D,"LI",{});var XBe=s(QT);pve=n(XBe,"STRONG",{});var p0t=s(pve);V_r=r(p0t,"albert"),p0t.forEach(t),X_r=r(XBe," \u2014 "),oH=n(XBe,"A",{href:!0});var _0t=s(oH);z_r=r(_0t,"TFAlbertModel"),_0t.forEach(t),Q_r=r(XBe," (ALBERT model)"),XBe.forEach(t),W_r=i(D),WT=n(D,"LI",{});var zBe=s(WT);_ve=n(zBe,"STRONG",{});var u0t=s(_ve);H_r=r(u0t,"bart"),u0t.forEach(t),U_r=r(zBe," \u2014 "),rH=n(zBe,"A",{href:!0});var b0t=s(rH);J_r=r(b0t,"TFBartModel"),b0t.forEach(t),Y_r=r(zBe," (BART model)"),zBe.forEach(t),Z_r=i(D),HT=n(D,"LI",{});var QBe=s(HT);uve=n(QBe,"STRONG",{});var v0t=s(uve);K_r=r(v0t,"bert"),v0t.forEach(t),eur=r(QBe," \u2014 "),tH=n(QBe,"A",{href:!0});var F0t=s(tH);our=r(F0t,"TFBertModel"),F0t.forEach(t),rur=r(QBe," (BERT model)"),QBe.forEach(t),tur=i(D),UT=n(D,"LI",{});var WBe=s(UT);bve=n(WBe,"STRONG",{});var T0t=s(bve);aur=r(T0t,"blenderbot"),T0t.forEach(t),nur=r(WBe," \u2014 "),aH=n(WBe,"A",{href:!0});var M0t=s(aH);sur=r(M0t,"TFBlenderbotModel"),M0t.forEach(t),lur=r(WBe," (Blenderbot model)"),WBe.forEach(t),iur=i(D),JT=n(D,"LI",{});var HBe=s(JT);vve=n(HBe,"STRONG",{});var E0t=s(vve);dur=r(E0t,"blenderbot-small"),E0t.forEach(t),cur=r(HBe," \u2014 "),nH=n(HBe,"A",{href:!0});var C0t=s(nH);fur=r(C0t,"TFBlenderbotSmallModel"),C0t.forEach(t),mur=r(HBe," (BlenderbotSmall model)"),HBe.forEach(t),gur=i(D),YT=n(D,"LI",{});var UBe=s(YT);Fve=n(UBe,"STRONG",{});var w0t=s(Fve);hur=r(w0t,"camembert"),w0t.forEach(t),pur=r(UBe," \u2014 "),sH=n(UBe,"A",{href:!0});var A0t=s(sH);_ur=r(A0t,"TFCamembertModel"),A0t.forEach(t),uur=r(UBe," (CamemBERT model)"),UBe.forEach(t),bur=i(D),ZT=n(D,"LI",{});var JBe=s(ZT);Tve=n(JBe,"STRONG",{});var L0t=s(Tve);vur=r(L0t,"clip"),L0t.forEach(t),Fur=r(JBe," \u2014 "),lH=n(JBe,"A",{href:!0});var y0t=s(lH);Tur=r(y0t,"TFCLIPModel"),y0t.forEach(t),Mur=r(JBe," (CLIP model)"),JBe.forEach(t),Eur=i(D),KT=n(D,"LI",{});var YBe=s(KT);Mve=n(YBe,"STRONG",{});var x0t=s(Mve);Cur=r(x0t,"convbert"),x0t.forEach(t),wur=r(YBe," \u2014 "),iH=n(YBe,"A",{href:!0});var $0t=s(iH);Aur=r($0t,"TFConvBertModel"),$0t.forEach(t),Lur=r(YBe," (ConvBERT model)"),YBe.forEach(t),yur=i(D),eM=n(D,"LI",{});var ZBe=s(eM);Eve=n(ZBe,"STRONG",{});var k0t=s(Eve);xur=r(k0t,"convnext"),k0t.forEach(t),$ur=r(ZBe," \u2014 "),dH=n(ZBe,"A",{href:!0});var S0t=s(dH);kur=r(S0t,"TFConvNextModel"),S0t.forEach(t),Sur=r(ZBe," (ConvNeXT model)"),ZBe.forEach(t),Rur=i(D),oM=n(D,"LI",{});var KBe=s(oM);Cve=n(KBe,"STRONG",{});var R0t=s(Cve);Pur=r(R0t,"ctrl"),R0t.forEach(t),Bur=r(KBe," \u2014 "),cH=n(KBe,"A",{href:!0});var P0t=s(cH);Iur=r(P0t,"TFCTRLModel"),P0t.forEach(t),Nur=r(KBe," (CTRL model)"),KBe.forEach(t),qur=i(D),rM=n(D,"LI",{});var eIe=s(rM);wve=n(eIe,"STRONG",{});var B0t=s(wve);jur=r(B0t,"data2vec-vision"),B0t.forEach(t),Dur=r(eIe," \u2014 "),fH=n(eIe,"A",{href:!0});var I0t=s(fH);Gur=r(I0t,"TFData2VecVisionModel"),I0t.forEach(t),Our=r(eIe," (Data2VecVision model)"),eIe.forEach(t),Vur=i(D),tM=n(D,"LI",{});var oIe=s(tM);Ave=n(oIe,"STRONG",{});var N0t=s(Ave);Xur=r(N0t,"deberta"),N0t.forEach(t),zur=r(oIe," \u2014 "),mH=n(oIe,"A",{href:!0});var q0t=s(mH);Qur=r(q0t,"TFDebertaModel"),q0t.forEach(t),Wur=r(oIe," (DeBERTa model)"),oIe.forEach(t),Hur=i(D),aM=n(D,"LI",{});var rIe=s(aM);Lve=n(rIe,"STRONG",{});var j0t=s(Lve);Uur=r(j0t,"deberta-v2"),j0t.forEach(t),Jur=r(rIe," \u2014 "),gH=n(rIe,"A",{href:!0});var D0t=s(gH);Yur=r(D0t,"TFDebertaV2Model"),D0t.forEach(t),Zur=r(rIe," (DeBERTa-v2 model)"),rIe.forEach(t),Kur=i(D),nM=n(D,"LI",{});var tIe=s(nM);yve=n(tIe,"STRONG",{});var G0t=s(yve);e7r=r(G0t,"distilbert"),G0t.forEach(t),o7r=r(tIe," \u2014 "),hH=n(tIe,"A",{href:!0});var O0t=s(hH);r7r=r(O0t,"TFDistilBertModel"),O0t.forEach(t),t7r=r(tIe," (DistilBERT model)"),tIe.forEach(t),a7r=i(D),sM=n(D,"LI",{});var aIe=s(sM);xve=n(aIe,"STRONG",{});var V0t=s(xve);n7r=r(V0t,"dpr"),V0t.forEach(t),s7r=r(aIe," \u2014 "),pH=n(aIe,"A",{href:!0});var X0t=s(pH);l7r=r(X0t,"TFDPRQuestionEncoder"),X0t.forEach(t),i7r=r(aIe," (DPR model)"),aIe.forEach(t),d7r=i(D),lM=n(D,"LI",{});var nIe=s(lM);$ve=n(nIe,"STRONG",{});var z0t=s($ve);c7r=r(z0t,"electra"),z0t.forEach(t),f7r=r(nIe," \u2014 "),_H=n(nIe,"A",{href:!0});var Q0t=s(_H);m7r=r(Q0t,"TFElectraModel"),Q0t.forEach(t),g7r=r(nIe," (ELECTRA model)"),nIe.forEach(t),h7r=i(D),iM=n(D,"LI",{});var sIe=s(iM);kve=n(sIe,"STRONG",{});var W0t=s(kve);p7r=r(W0t,"flaubert"),W0t.forEach(t),_7r=r(sIe," \u2014 "),uH=n(sIe,"A",{href:!0});var H0t=s(uH);u7r=r(H0t,"TFFlaubertModel"),H0t.forEach(t),b7r=r(sIe," (FlauBERT model)"),sIe.forEach(t),v7r=i(D),zs=n(D,"LI",{});var Kk=s(zs);Sve=n(Kk,"STRONG",{});var U0t=s(Sve);F7r=r(U0t,"funnel"),U0t.forEach(t),T7r=r(Kk," \u2014 "),bH=n(Kk,"A",{href:!0});var J0t=s(bH);M7r=r(J0t,"TFFunnelModel"),J0t.forEach(t),E7r=r(Kk," or "),vH=n(Kk,"A",{href:!0});var Y0t=s(vH);C7r=r(Y0t,"TFFunnelBaseModel"),Y0t.forEach(t),w7r=r(Kk," (Funnel Transformer model)"),Kk.forEach(t),A7r=i(D),dM=n(D,"LI",{});var lIe=s(dM);Rve=n(lIe,"STRONG",{});var Z0t=s(Rve);L7r=r(Z0t,"gpt2"),Z0t.forEach(t),y7r=r(lIe," \u2014 "),FH=n(lIe,"A",{href:!0});var K0t=s(FH);x7r=r(K0t,"TFGPT2Model"),K0t.forEach(t),$7r=r(lIe," (OpenAI GPT-2 model)"),lIe.forEach(t),k7r=i(D),cM=n(D,"LI",{});var iIe=s(cM);Pve=n(iIe,"STRONG",{});var ewt=s(Pve);S7r=r(ewt,"gptj"),ewt.forEach(t),R7r=r(iIe," \u2014 "),TH=n(iIe,"A",{href:!0});var owt=s(TH);P7r=r(owt,"TFGPTJModel"),owt.forEach(t),B7r=r(iIe," (GPT-J model)"),iIe.forEach(t),I7r=i(D),fM=n(D,"LI",{});var dIe=s(fM);Bve=n(dIe,"STRONG",{});var rwt=s(Bve);N7r=r(rwt,"hubert"),rwt.forEach(t),q7r=r(dIe," \u2014 "),MH=n(dIe,"A",{href:!0});var twt=s(MH);j7r=r(twt,"TFHubertModel"),twt.forEach(t),D7r=r(dIe," (Hubert model)"),dIe.forEach(t),G7r=i(D),mM=n(D,"LI",{});var cIe=s(mM);Ive=n(cIe,"STRONG",{});var awt=s(Ive);O7r=r(awt,"layoutlm"),awt.forEach(t),V7r=r(cIe," \u2014 "),EH=n(cIe,"A",{href:!0});var nwt=s(EH);X7r=r(nwt,"TFLayoutLMModel"),nwt.forEach(t),z7r=r(cIe," (LayoutLM model)"),cIe.forEach(t),Q7r=i(D),gM=n(D,"LI",{});var fIe=s(gM);Nve=n(fIe,"STRONG",{});var swt=s(Nve);W7r=r(swt,"led"),swt.forEach(t),H7r=r(fIe," \u2014 "),CH=n(fIe,"A",{href:!0});var lwt=s(CH);U7r=r(lwt,"TFLEDModel"),lwt.forEach(t),J7r=r(fIe," (LED model)"),fIe.forEach(t),Y7r=i(D),hM=n(D,"LI",{});var mIe=s(hM);qve=n(mIe,"STRONG",{});var iwt=s(qve);Z7r=r(iwt,"longformer"),iwt.forEach(t),K7r=r(mIe," \u2014 "),wH=n(mIe,"A",{href:!0});var dwt=s(wH);e1r=r(dwt,"TFLongformerModel"),dwt.forEach(t),o1r=r(mIe," (Longformer model)"),mIe.forEach(t),r1r=i(D),pM=n(D,"LI",{});var gIe=s(pM);jve=n(gIe,"STRONG",{});var cwt=s(jve);t1r=r(cwt,"lxmert"),cwt.forEach(t),a1r=r(gIe," \u2014 "),AH=n(gIe,"A",{href:!0});var fwt=s(AH);n1r=r(fwt,"TFLxmertModel"),fwt.forEach(t),s1r=r(gIe," (LXMERT model)"),gIe.forEach(t),l1r=i(D),_M=n(D,"LI",{});var hIe=s(_M);Dve=n(hIe,"STRONG",{});var mwt=s(Dve);i1r=r(mwt,"marian"),mwt.forEach(t),d1r=r(hIe," \u2014 "),LH=n(hIe,"A",{href:!0});var gwt=s(LH);c1r=r(gwt,"TFMarianModel"),gwt.forEach(t),f1r=r(hIe," (Marian model)"),hIe.forEach(t),m1r=i(D),uM=n(D,"LI",{});var pIe=s(uM);Gve=n(pIe,"STRONG",{});var hwt=s(Gve);g1r=r(hwt,"mbart"),hwt.forEach(t),h1r=r(pIe," \u2014 "),yH=n(pIe,"A",{href:!0});var pwt=s(yH);p1r=r(pwt,"TFMBartModel"),pwt.forEach(t),_1r=r(pIe," (mBART model)"),pIe.forEach(t),u1r=i(D),bM=n(D,"LI",{});var _Ie=s(bM);Ove=n(_Ie,"STRONG",{});var _wt=s(Ove);b1r=r(_wt,"mobilebert"),_wt.forEach(t),v1r=r(_Ie," \u2014 "),xH=n(_Ie,"A",{href:!0});var uwt=s(xH);F1r=r(uwt,"TFMobileBertModel"),uwt.forEach(t),T1r=r(_Ie," (MobileBERT model)"),_Ie.forEach(t),M1r=i(D),vM=n(D,"LI",{});var uIe=s(vM);Vve=n(uIe,"STRONG",{});var bwt=s(Vve);E1r=r(bwt,"mpnet"),bwt.forEach(t),C1r=r(uIe," \u2014 "),$H=n(uIe,"A",{href:!0});var vwt=s($H);w1r=r(vwt,"TFMPNetModel"),vwt.forEach(t),A1r=r(uIe," (MPNet model)"),uIe.forEach(t),L1r=i(D),FM=n(D,"LI",{});var bIe=s(FM);Xve=n(bIe,"STRONG",{});var Fwt=s(Xve);y1r=r(Fwt,"mt5"),Fwt.forEach(t),x1r=r(bIe," \u2014 "),kH=n(bIe,"A",{href:!0});var Twt=s(kH);$1r=r(Twt,"TFMT5Model"),Twt.forEach(t),k1r=r(bIe," (MT5 model)"),bIe.forEach(t),S1r=i(D),TM=n(D,"LI",{});var vIe=s(TM);zve=n(vIe,"STRONG",{});var Mwt=s(zve);R1r=r(Mwt,"openai-gpt"),Mwt.forEach(t),P1r=r(vIe," \u2014 "),SH=n(vIe,"A",{href:!0});var Ewt=s(SH);B1r=r(Ewt,"TFOpenAIGPTModel"),Ewt.forEach(t),I1r=r(vIe," (OpenAI GPT model)"),vIe.forEach(t),N1r=i(D),MM=n(D,"LI",{});var FIe=s(MM);Qve=n(FIe,"STRONG",{});var Cwt=s(Qve);q1r=r(Cwt,"opt"),Cwt.forEach(t),j1r=r(FIe," \u2014 "),RH=n(FIe,"A",{href:!0});var wwt=s(RH);D1r=r(wwt,"TFOPTModel"),wwt.forEach(t),G1r=r(FIe," (OPT model)"),FIe.forEach(t),O1r=i(D),EM=n(D,"LI",{});var TIe=s(EM);Wve=n(TIe,"STRONG",{});var Awt=s(Wve);V1r=r(Awt,"pegasus"),Awt.forEach(t),X1r=r(TIe," \u2014 "),PH=n(TIe,"A",{href:!0});var Lwt=s(PH);z1r=r(Lwt,"TFPegasusModel"),Lwt.forEach(t),Q1r=r(TIe," (Pegasus model)"),TIe.forEach(t),W1r=i(D),CM=n(D,"LI",{});var MIe=s(CM);Hve=n(MIe,"STRONG",{});var ywt=s(Hve);H1r=r(ywt,"rembert"),ywt.forEach(t),U1r=r(MIe," \u2014 "),BH=n(MIe,"A",{href:!0});var xwt=s(BH);J1r=r(xwt,"TFRemBertModel"),xwt.forEach(t),Y1r=r(MIe," (RemBERT model)"),MIe.forEach(t),Z1r=i(D),wM=n(D,"LI",{});var EIe=s(wM);Uve=n(EIe,"STRONG",{});var $wt=s(Uve);K1r=r($wt,"roberta"),$wt.forEach(t),e2r=r(EIe," \u2014 "),IH=n(EIe,"A",{href:!0});var kwt=s(IH);o2r=r(kwt,"TFRobertaModel"),kwt.forEach(t),r2r=r(EIe," (RoBERTa model)"),EIe.forEach(t),t2r=i(D),AM=n(D,"LI",{});var CIe=s(AM);Jve=n(CIe,"STRONG",{});var Swt=s(Jve);a2r=r(Swt,"roformer"),Swt.forEach(t),n2r=r(CIe," \u2014 "),NH=n(CIe,"A",{href:!0});var Rwt=s(NH);s2r=r(Rwt,"TFRoFormerModel"),Rwt.forEach(t),l2r=r(CIe," (RoFormer model)"),CIe.forEach(t),i2r=i(D),LM=n(D,"LI",{});var wIe=s(LM);Yve=n(wIe,"STRONG",{});var Pwt=s(Yve);d2r=r(Pwt,"speech_to_text"),Pwt.forEach(t),c2r=r(wIe," \u2014 "),qH=n(wIe,"A",{href:!0});var Bwt=s(qH);f2r=r(Bwt,"TFSpeech2TextModel"),Bwt.forEach(t),m2r=r(wIe," (Speech2Text model)"),wIe.forEach(t),g2r=i(D),yM=n(D,"LI",{});var AIe=s(yM);Zve=n(AIe,"STRONG",{});var Iwt=s(Zve);h2r=r(Iwt,"swin"),Iwt.forEach(t),p2r=r(AIe," \u2014 "),jH=n(AIe,"A",{href:!0});var Nwt=s(jH);_2r=r(Nwt,"TFSwinModel"),Nwt.forEach(t),u2r=r(AIe," (Swin Transformer model)"),AIe.forEach(t),b2r=i(D),xM=n(D,"LI",{});var LIe=s(xM);Kve=n(LIe,"STRONG",{});var qwt=s(Kve);v2r=r(qwt,"t5"),qwt.forEach(t),F2r=r(LIe," \u2014 "),DH=n(LIe,"A",{href:!0});var jwt=s(DH);T2r=r(jwt,"TFT5Model"),jwt.forEach(t),M2r=r(LIe," (T5 model)"),LIe.forEach(t),E2r=i(D),$M=n(D,"LI",{});var yIe=s($M);eFe=n(yIe,"STRONG",{});var Dwt=s(eFe);C2r=r(Dwt,"tapas"),Dwt.forEach(t),w2r=r(yIe," \u2014 "),GH=n(yIe,"A",{href:!0});var Gwt=s(GH);A2r=r(Gwt,"TFTapasModel"),Gwt.forEach(t),L2r=r(yIe," (TAPAS model)"),yIe.forEach(t),y2r=i(D),kM=n(D,"LI",{});var xIe=s(kM);oFe=n(xIe,"STRONG",{});var Owt=s(oFe);x2r=r(Owt,"transfo-xl"),Owt.forEach(t),$2r=r(xIe," \u2014 "),OH=n(xIe,"A",{href:!0});var Vwt=s(OH);k2r=r(Vwt,"TFTransfoXLModel"),Vwt.forEach(t),S2r=r(xIe," (Transformer-XL model)"),xIe.forEach(t),R2r=i(D),SM=n(D,"LI",{});var $Ie=s(SM);rFe=n($Ie,"STRONG",{});var Xwt=s(rFe);P2r=r(Xwt,"vit"),Xwt.forEach(t),B2r=r($Ie," \u2014 "),VH=n($Ie,"A",{href:!0});var zwt=s(VH);I2r=r(zwt,"TFViTModel"),zwt.forEach(t),N2r=r($Ie," (ViT model)"),$Ie.forEach(t),q2r=i(D),RM=n(D,"LI",{});var kIe=s(RM);tFe=n(kIe,"STRONG",{});var Qwt=s(tFe);j2r=r(Qwt,"vit_mae"),Qwt.forEach(t),D2r=r(kIe," \u2014 "),XH=n(kIe,"A",{href:!0});var Wwt=s(XH);G2r=r(Wwt,"TFViTMAEModel"),Wwt.forEach(t),O2r=r(kIe," (ViTMAE model)"),kIe.forEach(t),V2r=i(D),PM=n(D,"LI",{});var SIe=s(PM);aFe=n(SIe,"STRONG",{});var Hwt=s(aFe);X2r=r(Hwt,"wav2vec2"),Hwt.forEach(t),z2r=r(SIe," \u2014 "),zH=n(SIe,"A",{href:!0});var Uwt=s(zH);Q2r=r(Uwt,"TFWav2Vec2Model"),Uwt.forEach(t),W2r=r(SIe," (Wav2Vec2 model)"),SIe.forEach(t),H2r=i(D),BM=n(D,"LI",{});var RIe=s(BM);nFe=n(RIe,"STRONG",{});var Jwt=s(nFe);U2r=r(Jwt,"xlm"),Jwt.forEach(t),J2r=r(RIe," \u2014 "),QH=n(RIe,"A",{href:!0});var Ywt=s(QH);Y2r=r(Ywt,"TFXLMModel"),Ywt.forEach(t),Z2r=r(RIe," (XLM model)"),RIe.forEach(t),K2r=i(D),IM=n(D,"LI",{});var PIe=s(IM);sFe=n(PIe,"STRONG",{});var Zwt=s(sFe);ebr=r(Zwt,"xlm-roberta"),Zwt.forEach(t),obr=r(PIe," \u2014 "),WH=n(PIe,"A",{href:!0});var Kwt=s(WH);rbr=r(Kwt,"TFXLMRobertaModel"),Kwt.forEach(t),tbr=r(PIe," (XLM-RoBERTa model)"),PIe.forEach(t),abr=i(D),NM=n(D,"LI",{});var BIe=s(NM);lFe=n(BIe,"STRONG",{});var eAt=s(lFe);nbr=r(eAt,"xlnet"),eAt.forEach(t),sbr=r(BIe," \u2014 "),HH=n(BIe,"A",{href:!0});var oAt=s(HH);lbr=r(oAt,"TFXLNetModel"),oAt.forEach(t),ibr=r(BIe," (XLNet model)"),BIe.forEach(t),D.forEach(t),dbr=i(El),T(qM.$$.fragment,El),El.forEach(t),Ml.forEach(t),VOe=i(f),rc=n(f,"H2",{class:!0});var YXe=s(rc);jM=n(YXe,"A",{id:!0,class:!0,href:!0});var rAt=s(jM);iFe=n(rAt,"SPAN",{});var tAt=s(iFe);T(v9.$$.fragment,tAt),tAt.forEach(t),rAt.forEach(t),cbr=i(YXe),dFe=n(YXe,"SPAN",{});var aAt=s(dFe);fbr=r(aAt,"TFAutoModelForPreTraining"),aAt.forEach(t),YXe.forEach(t),XOe=i(f),or=n(f,"DIV",{class:!0});var Cl=s(or);T(F9.$$.fragment,Cl),mbr=i(Cl),tc=n(Cl,"P",{});var mre=s(tc);gbr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UH=n(mre,"A",{href:!0});var nAt=s(UH);hbr=r(nAt,"from_pretrained()"),nAt.forEach(t),pbr=r(mre," class method or the "),JH=n(mre,"A",{href:!0});var sAt=s(JH);_br=r(sAt,"from_config()"),sAt.forEach(t),ubr=r(mre,` class
method.`),mre.forEach(t),bbr=i(Cl),T9=n(Cl,"P",{});var ZXe=s(T9);vbr=r(ZXe,"This class cannot be instantiated directly using "),cFe=n(ZXe,"CODE",{});var lAt=s(cFe);Fbr=r(lAt,"__init__()"),lAt.forEach(t),Tbr=r(ZXe," (throws an error)."),ZXe.forEach(t),Mbr=i(Cl),kt=n(Cl,"DIV",{class:!0});var LA=s(kt);T(M9.$$.fragment,LA),Ebr=i(LA),fFe=n(LA,"P",{});var iAt=s(fFe);Cbr=r(iAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iAt.forEach(t),wbr=i(LA),ac=n(LA,"P",{});var gre=s(ac);Abr=r(gre,`Note:
Loading a model from its configuration file does `),mFe=n(gre,"STRONG",{});var dAt=s(mFe);Lbr=r(dAt,"not"),dAt.forEach(t),ybr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(gre,"A",{href:!0});var cAt=s(YH);xbr=r(cAt,"from_pretrained()"),cAt.forEach(t),$br=r(gre," to load the model weights."),gre.forEach(t),kbr=i(LA),T(DM.$$.fragment,LA),LA.forEach(t),Sbr=i(Cl),xr=n(Cl,"DIV",{class:!0});var wl=s(xr);T(E9.$$.fragment,wl),Rbr=i(wl),gFe=n(wl,"P",{});var fAt=s(gFe);Pbr=r(fAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fAt.forEach(t),Bbr=i(wl),nn=n(wl,"P",{});var yA=s(nn);Ibr=r(yA,"The model class to instantiate is selected based on the "),hFe=n(yA,"CODE",{});var mAt=s(hFe);Nbr=r(mAt,"model_type"),mAt.forEach(t),qbr=r(yA,` property of the config object (either
passed as an argument or loaded from `),pFe=n(yA,"CODE",{});var gAt=s(pFe);jbr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),Dbr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(yA,"CODE",{});var hAt=s(_Fe);Gbr=r(hAt,"pretrained_model_name_or_path"),hAt.forEach(t),Obr=r(yA,":"),yA.forEach(t),Vbr=i(wl),se=n(wl,"UL",{});var le=s(se);GM=n(le,"LI",{});var IIe=s(GM);uFe=n(IIe,"STRONG",{});var pAt=s(uFe);Xbr=r(pAt,"albert"),pAt.forEach(t),zbr=r(IIe," \u2014 "),ZH=n(IIe,"A",{href:!0});var _At=s(ZH);Qbr=r(_At,"TFAlbertForPreTraining"),_At.forEach(t),Wbr=r(IIe," (ALBERT model)"),IIe.forEach(t),Hbr=i(le),OM=n(le,"LI",{});var NIe=s(OM);bFe=n(NIe,"STRONG",{});var uAt=s(bFe);Ubr=r(uAt,"bart"),uAt.forEach(t),Jbr=r(NIe," \u2014 "),KH=n(NIe,"A",{href:!0});var bAt=s(KH);Ybr=r(bAt,"TFBartForConditionalGeneration"),bAt.forEach(t),Zbr=r(NIe," (BART model)"),NIe.forEach(t),Kbr=i(le),VM=n(le,"LI",{});var qIe=s(VM);vFe=n(qIe,"STRONG",{});var vAt=s(vFe);evr=r(vAt,"bert"),vAt.forEach(t),ovr=r(qIe," \u2014 "),eU=n(qIe,"A",{href:!0});var FAt=s(eU);rvr=r(FAt,"TFBertForPreTraining"),FAt.forEach(t),tvr=r(qIe," (BERT model)"),qIe.forEach(t),avr=i(le),XM=n(le,"LI",{});var jIe=s(XM);FFe=n(jIe,"STRONG",{});var TAt=s(FFe);nvr=r(TAt,"camembert"),TAt.forEach(t),svr=r(jIe," \u2014 "),oU=n(jIe,"A",{href:!0});var MAt=s(oU);lvr=r(MAt,"TFCamembertForMaskedLM"),MAt.forEach(t),ivr=r(jIe," (CamemBERT model)"),jIe.forEach(t),dvr=i(le),zM=n(le,"LI",{});var DIe=s(zM);TFe=n(DIe,"STRONG",{});var EAt=s(TFe);cvr=r(EAt,"ctrl"),EAt.forEach(t),fvr=r(DIe," \u2014 "),rU=n(DIe,"A",{href:!0});var CAt=s(rU);mvr=r(CAt,"TFCTRLLMHeadModel"),CAt.forEach(t),gvr=r(DIe," (CTRL model)"),DIe.forEach(t),hvr=i(le),QM=n(le,"LI",{});var GIe=s(QM);MFe=n(GIe,"STRONG",{});var wAt=s(MFe);pvr=r(wAt,"distilbert"),wAt.forEach(t),_vr=r(GIe," \u2014 "),tU=n(GIe,"A",{href:!0});var AAt=s(tU);uvr=r(AAt,"TFDistilBertForMaskedLM"),AAt.forEach(t),bvr=r(GIe," (DistilBERT model)"),GIe.forEach(t),vvr=i(le),WM=n(le,"LI",{});var OIe=s(WM);EFe=n(OIe,"STRONG",{});var LAt=s(EFe);Fvr=r(LAt,"electra"),LAt.forEach(t),Tvr=r(OIe," \u2014 "),aU=n(OIe,"A",{href:!0});var yAt=s(aU);Mvr=r(yAt,"TFElectraForPreTraining"),yAt.forEach(t),Evr=r(OIe," (ELECTRA model)"),OIe.forEach(t),Cvr=i(le),HM=n(le,"LI",{});var VIe=s(HM);CFe=n(VIe,"STRONG",{});var xAt=s(CFe);wvr=r(xAt,"flaubert"),xAt.forEach(t),Avr=r(VIe," \u2014 "),nU=n(VIe,"A",{href:!0});var $At=s(nU);Lvr=r($At,"TFFlaubertWithLMHeadModel"),$At.forEach(t),yvr=r(VIe," (FlauBERT model)"),VIe.forEach(t),xvr=i(le),UM=n(le,"LI",{});var XIe=s(UM);wFe=n(XIe,"STRONG",{});var kAt=s(wFe);$vr=r(kAt,"funnel"),kAt.forEach(t),kvr=r(XIe," \u2014 "),sU=n(XIe,"A",{href:!0});var SAt=s(sU);Svr=r(SAt,"TFFunnelForPreTraining"),SAt.forEach(t),Rvr=r(XIe," (Funnel Transformer model)"),XIe.forEach(t),Pvr=i(le),JM=n(le,"LI",{});var zIe=s(JM);AFe=n(zIe,"STRONG",{});var RAt=s(AFe);Bvr=r(RAt,"gpt2"),RAt.forEach(t),Ivr=r(zIe," \u2014 "),lU=n(zIe,"A",{href:!0});var PAt=s(lU);Nvr=r(PAt,"TFGPT2LMHeadModel"),PAt.forEach(t),qvr=r(zIe," (OpenAI GPT-2 model)"),zIe.forEach(t),jvr=i(le),YM=n(le,"LI",{});var QIe=s(YM);LFe=n(QIe,"STRONG",{});var BAt=s(LFe);Dvr=r(BAt,"layoutlm"),BAt.forEach(t),Gvr=r(QIe," \u2014 "),iU=n(QIe,"A",{href:!0});var IAt=s(iU);Ovr=r(IAt,"TFLayoutLMForMaskedLM"),IAt.forEach(t),Vvr=r(QIe," (LayoutLM model)"),QIe.forEach(t),Xvr=i(le),ZM=n(le,"LI",{});var WIe=s(ZM);yFe=n(WIe,"STRONG",{});var NAt=s(yFe);zvr=r(NAt,"lxmert"),NAt.forEach(t),Qvr=r(WIe," \u2014 "),dU=n(WIe,"A",{href:!0});var qAt=s(dU);Wvr=r(qAt,"TFLxmertForPreTraining"),qAt.forEach(t),Hvr=r(WIe," (LXMERT model)"),WIe.forEach(t),Uvr=i(le),KM=n(le,"LI",{});var HIe=s(KM);xFe=n(HIe,"STRONG",{});var jAt=s(xFe);Jvr=r(jAt,"mobilebert"),jAt.forEach(t),Yvr=r(HIe," \u2014 "),cU=n(HIe,"A",{href:!0});var DAt=s(cU);Zvr=r(DAt,"TFMobileBertForPreTraining"),DAt.forEach(t),Kvr=r(HIe," (MobileBERT model)"),HIe.forEach(t),eFr=i(le),eE=n(le,"LI",{});var UIe=s(eE);$Fe=n(UIe,"STRONG",{});var GAt=s($Fe);oFr=r(GAt,"mpnet"),GAt.forEach(t),rFr=r(UIe," \u2014 "),fU=n(UIe,"A",{href:!0});var OAt=s(fU);tFr=r(OAt,"TFMPNetForMaskedLM"),OAt.forEach(t),aFr=r(UIe," (MPNet model)"),UIe.forEach(t),nFr=i(le),oE=n(le,"LI",{});var JIe=s(oE);kFe=n(JIe,"STRONG",{});var VAt=s(kFe);sFr=r(VAt,"openai-gpt"),VAt.forEach(t),lFr=r(JIe," \u2014 "),mU=n(JIe,"A",{href:!0});var XAt=s(mU);iFr=r(XAt,"TFOpenAIGPTLMHeadModel"),XAt.forEach(t),dFr=r(JIe," (OpenAI GPT model)"),JIe.forEach(t),cFr=i(le),rE=n(le,"LI",{});var YIe=s(rE);SFe=n(YIe,"STRONG",{});var zAt=s(SFe);fFr=r(zAt,"roberta"),zAt.forEach(t),mFr=r(YIe," \u2014 "),gU=n(YIe,"A",{href:!0});var QAt=s(gU);gFr=r(QAt,"TFRobertaForMaskedLM"),QAt.forEach(t),hFr=r(YIe," (RoBERTa model)"),YIe.forEach(t),pFr=i(le),tE=n(le,"LI",{});var ZIe=s(tE);RFe=n(ZIe,"STRONG",{});var WAt=s(RFe);_Fr=r(WAt,"t5"),WAt.forEach(t),uFr=r(ZIe," \u2014 "),hU=n(ZIe,"A",{href:!0});var HAt=s(hU);bFr=r(HAt,"TFT5ForConditionalGeneration"),HAt.forEach(t),vFr=r(ZIe," (T5 model)"),ZIe.forEach(t),FFr=i(le),aE=n(le,"LI",{});var KIe=s(aE);PFe=n(KIe,"STRONG",{});var UAt=s(PFe);TFr=r(UAt,"tapas"),UAt.forEach(t),MFr=r(KIe," \u2014 "),pU=n(KIe,"A",{href:!0});var JAt=s(pU);EFr=r(JAt,"TFTapasForMaskedLM"),JAt.forEach(t),CFr=r(KIe," (TAPAS model)"),KIe.forEach(t),wFr=i(le),nE=n(le,"LI",{});var eNe=s(nE);BFe=n(eNe,"STRONG",{});var YAt=s(BFe);AFr=r(YAt,"transfo-xl"),YAt.forEach(t),LFr=r(eNe," \u2014 "),_U=n(eNe,"A",{href:!0});var ZAt=s(_U);yFr=r(ZAt,"TFTransfoXLLMHeadModel"),ZAt.forEach(t),xFr=r(eNe," (Transformer-XL model)"),eNe.forEach(t),$Fr=i(le),sE=n(le,"LI",{});var oNe=s(sE);IFe=n(oNe,"STRONG",{});var KAt=s(IFe);kFr=r(KAt,"vit_mae"),KAt.forEach(t),SFr=r(oNe," \u2014 "),uU=n(oNe,"A",{href:!0});var eLt=s(uU);RFr=r(eLt,"TFViTMAEForPreTraining"),eLt.forEach(t),PFr=r(oNe," (ViTMAE model)"),oNe.forEach(t),BFr=i(le),lE=n(le,"LI",{});var rNe=s(lE);NFe=n(rNe,"STRONG",{});var oLt=s(NFe);IFr=r(oLt,"xlm"),oLt.forEach(t),NFr=r(rNe," \u2014 "),bU=n(rNe,"A",{href:!0});var rLt=s(bU);qFr=r(rLt,"TFXLMWithLMHeadModel"),rLt.forEach(t),jFr=r(rNe," (XLM model)"),rNe.forEach(t),DFr=i(le),iE=n(le,"LI",{});var tNe=s(iE);qFe=n(tNe,"STRONG",{});var tLt=s(qFe);GFr=r(tLt,"xlm-roberta"),tLt.forEach(t),OFr=r(tNe," \u2014 "),vU=n(tNe,"A",{href:!0});var aLt=s(vU);VFr=r(aLt,"TFXLMRobertaForMaskedLM"),aLt.forEach(t),XFr=r(tNe," (XLM-RoBERTa model)"),tNe.forEach(t),zFr=i(le),dE=n(le,"LI",{});var aNe=s(dE);jFe=n(aNe,"STRONG",{});var nLt=s(jFe);QFr=r(nLt,"xlnet"),nLt.forEach(t),WFr=r(aNe," \u2014 "),FU=n(aNe,"A",{href:!0});var sLt=s(FU);HFr=r(sLt,"TFXLNetLMHeadModel"),sLt.forEach(t),UFr=r(aNe," (XLNet model)"),aNe.forEach(t),le.forEach(t),JFr=i(wl),T(cE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),zOe=i(f),nc=n(f,"H2",{class:!0});var KXe=s(nc);fE=n(KXe,"A",{id:!0,class:!0,href:!0});var lLt=s(fE);DFe=n(lLt,"SPAN",{});var iLt=s(DFe);T(C9.$$.fragment,iLt),iLt.forEach(t),lLt.forEach(t),YFr=i(KXe),GFe=n(KXe,"SPAN",{});var dLt=s(GFe);ZFr=r(dLt,"TFAutoModelForCausalLM"),dLt.forEach(t),KXe.forEach(t),QOe=i(f),rr=n(f,"DIV",{class:!0});var Al=s(rr);T(w9.$$.fragment,Al),KFr=i(Al),sc=n(Al,"P",{});var hre=s(sc);e6r=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),TU=n(hre,"A",{href:!0});var cLt=s(TU);o6r=r(cLt,"from_pretrained()"),cLt.forEach(t),r6r=r(hre," class method or the "),MU=n(hre,"A",{href:!0});var fLt=s(MU);t6r=r(fLt,"from_config()"),fLt.forEach(t),a6r=r(hre,` class
method.`),hre.forEach(t),n6r=i(Al),A9=n(Al,"P",{});var eze=s(A9);s6r=r(eze,"This class cannot be instantiated directly using "),OFe=n(eze,"CODE",{});var mLt=s(OFe);l6r=r(mLt,"__init__()"),mLt.forEach(t),i6r=r(eze," (throws an error)."),eze.forEach(t),d6r=i(Al),St=n(Al,"DIV",{class:!0});var xA=s(St);T(L9.$$.fragment,xA),c6r=i(xA),VFe=n(xA,"P",{});var gLt=s(VFe);f6r=r(gLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gLt.forEach(t),m6r=i(xA),lc=n(xA,"P",{});var pre=s(lc);g6r=r(pre,`Note:
Loading a model from its configuration file does `),XFe=n(pre,"STRONG",{});var hLt=s(XFe);h6r=r(hLt,"not"),hLt.forEach(t),p6r=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(pre,"A",{href:!0});var pLt=s(EU);_6r=r(pLt,"from_pretrained()"),pLt.forEach(t),u6r=r(pre," to load the model weights."),pre.forEach(t),b6r=i(xA),T(mE.$$.fragment,xA),xA.forEach(t),v6r=i(Al),$r=n(Al,"DIV",{class:!0});var Ll=s($r);T(y9.$$.fragment,Ll),F6r=i(Ll),zFe=n(Ll,"P",{});var _Lt=s(zFe);T6r=r(_Lt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Lt.forEach(t),M6r=i(Ll),sn=n(Ll,"P",{});var $A=s(sn);E6r=r($A,"The model class to instantiate is selected based on the "),QFe=n($A,"CODE",{});var uLt=s(QFe);C6r=r(uLt,"model_type"),uLt.forEach(t),w6r=r($A,` property of the config object (either
passed as an argument or loaded from `),WFe=n($A,"CODE",{});var bLt=s(WFe);A6r=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),L6r=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n($A,"CODE",{});var vLt=s(HFe);y6r=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),x6r=r($A,":"),$A.forEach(t),$6r=i(Ll),Me=n(Ll,"UL",{});var Ce=s(Me);gE=n(Ce,"LI",{});var nNe=s(gE);UFe=n(nNe,"STRONG",{});var FLt=s(UFe);k6r=r(FLt,"bert"),FLt.forEach(t),S6r=r(nNe," \u2014 "),CU=n(nNe,"A",{href:!0});var TLt=s(CU);R6r=r(TLt,"TFBertLMHeadModel"),TLt.forEach(t),P6r=r(nNe," (BERT model)"),nNe.forEach(t),B6r=i(Ce),hE=n(Ce,"LI",{});var sNe=s(hE);JFe=n(sNe,"STRONG",{});var MLt=s(JFe);I6r=r(MLt,"camembert"),MLt.forEach(t),N6r=r(sNe," \u2014 "),wU=n(sNe,"A",{href:!0});var ELt=s(wU);q6r=r(ELt,"TFCamembertForCausalLM"),ELt.forEach(t),j6r=r(sNe," (CamemBERT model)"),sNe.forEach(t),D6r=i(Ce),pE=n(Ce,"LI",{});var lNe=s(pE);YFe=n(lNe,"STRONG",{});var CLt=s(YFe);G6r=r(CLt,"ctrl"),CLt.forEach(t),O6r=r(lNe," \u2014 "),AU=n(lNe,"A",{href:!0});var wLt=s(AU);V6r=r(wLt,"TFCTRLLMHeadModel"),wLt.forEach(t),X6r=r(lNe," (CTRL model)"),lNe.forEach(t),z6r=i(Ce),_E=n(Ce,"LI",{});var iNe=s(_E);ZFe=n(iNe,"STRONG",{});var ALt=s(ZFe);Q6r=r(ALt,"gpt2"),ALt.forEach(t),W6r=r(iNe," \u2014 "),LU=n(iNe,"A",{href:!0});var LLt=s(LU);H6r=r(LLt,"TFGPT2LMHeadModel"),LLt.forEach(t),U6r=r(iNe," (OpenAI GPT-2 model)"),iNe.forEach(t),J6r=i(Ce),uE=n(Ce,"LI",{});var dNe=s(uE);KFe=n(dNe,"STRONG",{});var yLt=s(KFe);Y6r=r(yLt,"gptj"),yLt.forEach(t),Z6r=r(dNe," \u2014 "),yU=n(dNe,"A",{href:!0});var xLt=s(yU);K6r=r(xLt,"TFGPTJForCausalLM"),xLt.forEach(t),eTr=r(dNe," (GPT-J model)"),dNe.forEach(t),oTr=i(Ce),bE=n(Ce,"LI",{});var cNe=s(bE);e6e=n(cNe,"STRONG",{});var $Lt=s(e6e);rTr=r($Lt,"openai-gpt"),$Lt.forEach(t),tTr=r(cNe," \u2014 "),xU=n(cNe,"A",{href:!0});var kLt=s(xU);aTr=r(kLt,"TFOpenAIGPTLMHeadModel"),kLt.forEach(t),nTr=r(cNe," (OpenAI GPT model)"),cNe.forEach(t),sTr=i(Ce),vE=n(Ce,"LI",{});var fNe=s(vE);o6e=n(fNe,"STRONG",{});var SLt=s(o6e);lTr=r(SLt,"opt"),SLt.forEach(t),iTr=r(fNe," \u2014 "),$U=n(fNe,"A",{href:!0});var RLt=s($U);dTr=r(RLt,"TFOPTForCausalLM"),RLt.forEach(t),cTr=r(fNe," (OPT model)"),fNe.forEach(t),fTr=i(Ce),FE=n(Ce,"LI",{});var mNe=s(FE);r6e=n(mNe,"STRONG",{});var PLt=s(r6e);mTr=r(PLt,"rembert"),PLt.forEach(t),gTr=r(mNe," \u2014 "),kU=n(mNe,"A",{href:!0});var BLt=s(kU);hTr=r(BLt,"TFRemBertForCausalLM"),BLt.forEach(t),pTr=r(mNe," (RemBERT model)"),mNe.forEach(t),_Tr=i(Ce),TE=n(Ce,"LI",{});var gNe=s(TE);t6e=n(gNe,"STRONG",{});var ILt=s(t6e);uTr=r(ILt,"roberta"),ILt.forEach(t),bTr=r(gNe," \u2014 "),SU=n(gNe,"A",{href:!0});var NLt=s(SU);vTr=r(NLt,"TFRobertaForCausalLM"),NLt.forEach(t),FTr=r(gNe," (RoBERTa model)"),gNe.forEach(t),TTr=i(Ce),ME=n(Ce,"LI",{});var hNe=s(ME);a6e=n(hNe,"STRONG",{});var qLt=s(a6e);MTr=r(qLt,"roformer"),qLt.forEach(t),ETr=r(hNe," \u2014 "),RU=n(hNe,"A",{href:!0});var jLt=s(RU);CTr=r(jLt,"TFRoFormerForCausalLM"),jLt.forEach(t),wTr=r(hNe," (RoFormer model)"),hNe.forEach(t),ATr=i(Ce),EE=n(Ce,"LI",{});var pNe=s(EE);n6e=n(pNe,"STRONG",{});var DLt=s(n6e);LTr=r(DLt,"transfo-xl"),DLt.forEach(t),yTr=r(pNe," \u2014 "),PU=n(pNe,"A",{href:!0});var GLt=s(PU);xTr=r(GLt,"TFTransfoXLLMHeadModel"),GLt.forEach(t),$Tr=r(pNe," (Transformer-XL model)"),pNe.forEach(t),kTr=i(Ce),CE=n(Ce,"LI",{});var _Ne=s(CE);s6e=n(_Ne,"STRONG",{});var OLt=s(s6e);STr=r(OLt,"xlm"),OLt.forEach(t),RTr=r(_Ne," \u2014 "),BU=n(_Ne,"A",{href:!0});var VLt=s(BU);PTr=r(VLt,"TFXLMWithLMHeadModel"),VLt.forEach(t),BTr=r(_Ne," (XLM model)"),_Ne.forEach(t),ITr=i(Ce),wE=n(Ce,"LI",{});var uNe=s(wE);l6e=n(uNe,"STRONG",{});var XLt=s(l6e);NTr=r(XLt,"xlnet"),XLt.forEach(t),qTr=r(uNe," \u2014 "),IU=n(uNe,"A",{href:!0});var zLt=s(IU);jTr=r(zLt,"TFXLNetLMHeadModel"),zLt.forEach(t),DTr=r(uNe," (XLNet model)"),uNe.forEach(t),Ce.forEach(t),GTr=i(Ll),T(AE.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),WOe=i(f),ic=n(f,"H2",{class:!0});var oze=s(ic);LE=n(oze,"A",{id:!0,class:!0,href:!0});var QLt=s(LE);i6e=n(QLt,"SPAN",{});var WLt=s(i6e);T(x9.$$.fragment,WLt),WLt.forEach(t),QLt.forEach(t),OTr=i(oze),d6e=n(oze,"SPAN",{});var HLt=s(d6e);VTr=r(HLt,"TFAutoModelForImageClassification"),HLt.forEach(t),oze.forEach(t),HOe=i(f),tr=n(f,"DIV",{class:!0});var yl=s(tr);T($9.$$.fragment,yl),XTr=i(yl),dc=n(yl,"P",{});var _re=s(dc);zTr=r(_re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NU=n(_re,"A",{href:!0});var ULt=s(NU);QTr=r(ULt,"from_pretrained()"),ULt.forEach(t),WTr=r(_re," class method or the "),qU=n(_re,"A",{href:!0});var JLt=s(qU);HTr=r(JLt,"from_config()"),JLt.forEach(t),UTr=r(_re,` class
method.`),_re.forEach(t),JTr=i(yl),k9=n(yl,"P",{});var rze=s(k9);YTr=r(rze,"This class cannot be instantiated directly using "),c6e=n(rze,"CODE",{});var YLt=s(c6e);ZTr=r(YLt,"__init__()"),YLt.forEach(t),KTr=r(rze," (throws an error)."),rze.forEach(t),eMr=i(yl),Rt=n(yl,"DIV",{class:!0});var kA=s(Rt);T(S9.$$.fragment,kA),oMr=i(kA),f6e=n(kA,"P",{});var ZLt=s(f6e);rMr=r(ZLt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZLt.forEach(t),tMr=i(kA),cc=n(kA,"P",{});var ure=s(cc);aMr=r(ure,`Note:
Loading a model from its configuration file does `),m6e=n(ure,"STRONG",{});var KLt=s(m6e);nMr=r(KLt,"not"),KLt.forEach(t),sMr=r(ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(ure,"A",{href:!0});var eyt=s(jU);lMr=r(eyt,"from_pretrained()"),eyt.forEach(t),iMr=r(ure," to load the model weights."),ure.forEach(t),dMr=i(kA),T(yE.$$.fragment,kA),kA.forEach(t),cMr=i(yl),kr=n(yl,"DIV",{class:!0});var xl=s(kr);T(R9.$$.fragment,xl),fMr=i(xl),g6e=n(xl,"P",{});var oyt=s(g6e);mMr=r(oyt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oyt.forEach(t),gMr=i(xl),ln=n(xl,"P",{});var SA=s(ln);hMr=r(SA,"The model class to instantiate is selected based on the "),h6e=n(SA,"CODE",{});var ryt=s(h6e);pMr=r(ryt,"model_type"),ryt.forEach(t),_Mr=r(SA,` property of the config object (either
passed as an argument or loaded from `),p6e=n(SA,"CODE",{});var tyt=s(p6e);uMr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),bMr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n(SA,"CODE",{});var ayt=s(_6e);vMr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),FMr=r(SA,":"),SA.forEach(t),TMr=i(xl),dn=n(xl,"UL",{});var RA=s(dn);xE=n(RA,"LI",{});var bNe=s(xE);u6e=n(bNe,"STRONG",{});var nyt=s(u6e);MMr=r(nyt,"convnext"),nyt.forEach(t),EMr=r(bNe," \u2014 "),DU=n(bNe,"A",{href:!0});var syt=s(DU);CMr=r(syt,"TFConvNextForImageClassification"),syt.forEach(t),wMr=r(bNe," (ConvNeXT model)"),bNe.forEach(t),AMr=i(RA),$E=n(RA,"LI",{});var vNe=s($E);b6e=n(vNe,"STRONG",{});var lyt=s(b6e);LMr=r(lyt,"data2vec-vision"),lyt.forEach(t),yMr=r(vNe," \u2014 "),GU=n(vNe,"A",{href:!0});var iyt=s(GU);xMr=r(iyt,"TFData2VecVisionForImageClassification"),iyt.forEach(t),$Mr=r(vNe," (Data2VecVision model)"),vNe.forEach(t),kMr=i(RA),kE=n(RA,"LI",{});var FNe=s(kE);v6e=n(FNe,"STRONG",{});var dyt=s(v6e);SMr=r(dyt,"swin"),dyt.forEach(t),RMr=r(FNe," \u2014 "),OU=n(FNe,"A",{href:!0});var cyt=s(OU);PMr=r(cyt,"TFSwinForImageClassification"),cyt.forEach(t),BMr=r(FNe," (Swin Transformer model)"),FNe.forEach(t),IMr=i(RA),SE=n(RA,"LI",{});var TNe=s(SE);F6e=n(TNe,"STRONG",{});var fyt=s(F6e);NMr=r(fyt,"vit"),fyt.forEach(t),qMr=r(TNe," \u2014 "),VU=n(TNe,"A",{href:!0});var myt=s(VU);jMr=r(myt,"TFViTForImageClassification"),myt.forEach(t),DMr=r(TNe," (ViT model)"),TNe.forEach(t),RA.forEach(t),GMr=i(xl),T(RE.$$.fragment,xl),xl.forEach(t),yl.forEach(t),UOe=i(f),fc=n(f,"H2",{class:!0});var tze=s(fc);PE=n(tze,"A",{id:!0,class:!0,href:!0});var gyt=s(PE);T6e=n(gyt,"SPAN",{});var hyt=s(T6e);T(P9.$$.fragment,hyt),hyt.forEach(t),gyt.forEach(t),OMr=i(tze),M6e=n(tze,"SPAN",{});var pyt=s(M6e);VMr=r(pyt,"TFAutoModelForMaskedLM"),pyt.forEach(t),tze.forEach(t),JOe=i(f),ar=n(f,"DIV",{class:!0});var $l=s(ar);T(B9.$$.fragment,$l),XMr=i($l),mc=n($l,"P",{});var bre=s(mc);zMr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XU=n(bre,"A",{href:!0});var _yt=s(XU);QMr=r(_yt,"from_pretrained()"),_yt.forEach(t),WMr=r(bre," class method or the "),zU=n(bre,"A",{href:!0});var uyt=s(zU);HMr=r(uyt,"from_config()"),uyt.forEach(t),UMr=r(bre,` class
method.`),bre.forEach(t),JMr=i($l),I9=n($l,"P",{});var aze=s(I9);YMr=r(aze,"This class cannot be instantiated directly using "),E6e=n(aze,"CODE",{});var byt=s(E6e);ZMr=r(byt,"__init__()"),byt.forEach(t),KMr=r(aze," (throws an error)."),aze.forEach(t),eEr=i($l),Pt=n($l,"DIV",{class:!0});var PA=s(Pt);T(N9.$$.fragment,PA),oEr=i(PA),C6e=n(PA,"P",{});var vyt=s(C6e);rEr=r(vyt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vyt.forEach(t),tEr=i(PA),gc=n(PA,"P",{});var vre=s(gc);aEr=r(vre,`Note:
Loading a model from its configuration file does `),w6e=n(vre,"STRONG",{});var Fyt=s(w6e);nEr=r(Fyt,"not"),Fyt.forEach(t),sEr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(vre,"A",{href:!0});var Tyt=s(QU);lEr=r(Tyt,"from_pretrained()"),Tyt.forEach(t),iEr=r(vre," to load the model weights."),vre.forEach(t),dEr=i(PA),T(BE.$$.fragment,PA),PA.forEach(t),cEr=i($l),Sr=n($l,"DIV",{class:!0});var kl=s(Sr);T(q9.$$.fragment,kl),fEr=i(kl),A6e=n(kl,"P",{});var Myt=s(A6e);mEr=r(Myt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Myt.forEach(t),gEr=i(kl),cn=n(kl,"P",{});var BA=s(cn);hEr=r(BA,"The model class to instantiate is selected based on the "),L6e=n(BA,"CODE",{});var Eyt=s(L6e);pEr=r(Eyt,"model_type"),Eyt.forEach(t),_Er=r(BA,` property of the config object (either
passed as an argument or loaded from `),y6e=n(BA,"CODE",{});var Cyt=s(y6e);uEr=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),bEr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x6e=n(BA,"CODE",{});var wyt=s(x6e);vEr=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),FEr=r(BA,":"),BA.forEach(t),TEr=i(kl),ie=n(kl,"UL",{});var fe=s(ie);IE=n(fe,"LI",{});var MNe=s(IE);$6e=n(MNe,"STRONG",{});var Ayt=s($6e);MEr=r(Ayt,"albert"),Ayt.forEach(t),EEr=r(MNe," \u2014 "),WU=n(MNe,"A",{href:!0});var Lyt=s(WU);CEr=r(Lyt,"TFAlbertForMaskedLM"),Lyt.forEach(t),wEr=r(MNe," (ALBERT model)"),MNe.forEach(t),AEr=i(fe),NE=n(fe,"LI",{});var ENe=s(NE);k6e=n(ENe,"STRONG",{});var yyt=s(k6e);LEr=r(yyt,"bert"),yyt.forEach(t),yEr=r(ENe," \u2014 "),HU=n(ENe,"A",{href:!0});var xyt=s(HU);xEr=r(xyt,"TFBertForMaskedLM"),xyt.forEach(t),$Er=r(ENe," (BERT model)"),ENe.forEach(t),kEr=i(fe),qE=n(fe,"LI",{});var CNe=s(qE);S6e=n(CNe,"STRONG",{});var $yt=s(S6e);SEr=r($yt,"camembert"),$yt.forEach(t),REr=r(CNe," \u2014 "),UU=n(CNe,"A",{href:!0});var kyt=s(UU);PEr=r(kyt,"TFCamembertForMaskedLM"),kyt.forEach(t),BEr=r(CNe," (CamemBERT model)"),CNe.forEach(t),IEr=i(fe),jE=n(fe,"LI",{});var wNe=s(jE);R6e=n(wNe,"STRONG",{});var Syt=s(R6e);NEr=r(Syt,"convbert"),Syt.forEach(t),qEr=r(wNe," \u2014 "),JU=n(wNe,"A",{href:!0});var Ryt=s(JU);jEr=r(Ryt,"TFConvBertForMaskedLM"),Ryt.forEach(t),DEr=r(wNe," (ConvBERT model)"),wNe.forEach(t),GEr=i(fe),DE=n(fe,"LI",{});var ANe=s(DE);P6e=n(ANe,"STRONG",{});var Pyt=s(P6e);OEr=r(Pyt,"deberta"),Pyt.forEach(t),VEr=r(ANe," \u2014 "),YU=n(ANe,"A",{href:!0});var Byt=s(YU);XEr=r(Byt,"TFDebertaForMaskedLM"),Byt.forEach(t),zEr=r(ANe," (DeBERTa model)"),ANe.forEach(t),QEr=i(fe),GE=n(fe,"LI",{});var LNe=s(GE);B6e=n(LNe,"STRONG",{});var Iyt=s(B6e);WEr=r(Iyt,"deberta-v2"),Iyt.forEach(t),HEr=r(LNe," \u2014 "),ZU=n(LNe,"A",{href:!0});var Nyt=s(ZU);UEr=r(Nyt,"TFDebertaV2ForMaskedLM"),Nyt.forEach(t),JEr=r(LNe," (DeBERTa-v2 model)"),LNe.forEach(t),YEr=i(fe),OE=n(fe,"LI",{});var yNe=s(OE);I6e=n(yNe,"STRONG",{});var qyt=s(I6e);ZEr=r(qyt,"distilbert"),qyt.forEach(t),KEr=r(yNe," \u2014 "),KU=n(yNe,"A",{href:!0});var jyt=s(KU);e4r=r(jyt,"TFDistilBertForMaskedLM"),jyt.forEach(t),o4r=r(yNe," (DistilBERT model)"),yNe.forEach(t),r4r=i(fe),VE=n(fe,"LI",{});var xNe=s(VE);N6e=n(xNe,"STRONG",{});var Dyt=s(N6e);t4r=r(Dyt,"electra"),Dyt.forEach(t),a4r=r(xNe," \u2014 "),eJ=n(xNe,"A",{href:!0});var Gyt=s(eJ);n4r=r(Gyt,"TFElectraForMaskedLM"),Gyt.forEach(t),s4r=r(xNe," (ELECTRA model)"),xNe.forEach(t),l4r=i(fe),XE=n(fe,"LI",{});var $Ne=s(XE);q6e=n($Ne,"STRONG",{});var Oyt=s(q6e);i4r=r(Oyt,"flaubert"),Oyt.forEach(t),d4r=r($Ne," \u2014 "),oJ=n($Ne,"A",{href:!0});var Vyt=s(oJ);c4r=r(Vyt,"TFFlaubertWithLMHeadModel"),Vyt.forEach(t),f4r=r($Ne," (FlauBERT model)"),$Ne.forEach(t),m4r=i(fe),zE=n(fe,"LI",{});var kNe=s(zE);j6e=n(kNe,"STRONG",{});var Xyt=s(j6e);g4r=r(Xyt,"funnel"),Xyt.forEach(t),h4r=r(kNe," \u2014 "),rJ=n(kNe,"A",{href:!0});var zyt=s(rJ);p4r=r(zyt,"TFFunnelForMaskedLM"),zyt.forEach(t),_4r=r(kNe," (Funnel Transformer model)"),kNe.forEach(t),u4r=i(fe),QE=n(fe,"LI",{});var SNe=s(QE);D6e=n(SNe,"STRONG",{});var Qyt=s(D6e);b4r=r(Qyt,"layoutlm"),Qyt.forEach(t),v4r=r(SNe," \u2014 "),tJ=n(SNe,"A",{href:!0});var Wyt=s(tJ);F4r=r(Wyt,"TFLayoutLMForMaskedLM"),Wyt.forEach(t),T4r=r(SNe," (LayoutLM model)"),SNe.forEach(t),M4r=i(fe),WE=n(fe,"LI",{});var RNe=s(WE);G6e=n(RNe,"STRONG",{});var Hyt=s(G6e);E4r=r(Hyt,"longformer"),Hyt.forEach(t),C4r=r(RNe," \u2014 "),aJ=n(RNe,"A",{href:!0});var Uyt=s(aJ);w4r=r(Uyt,"TFLongformerForMaskedLM"),Uyt.forEach(t),A4r=r(RNe," (Longformer model)"),RNe.forEach(t),L4r=i(fe),HE=n(fe,"LI",{});var PNe=s(HE);O6e=n(PNe,"STRONG",{});var Jyt=s(O6e);y4r=r(Jyt,"mobilebert"),Jyt.forEach(t),x4r=r(PNe," \u2014 "),nJ=n(PNe,"A",{href:!0});var Yyt=s(nJ);$4r=r(Yyt,"TFMobileBertForMaskedLM"),Yyt.forEach(t),k4r=r(PNe," (MobileBERT model)"),PNe.forEach(t),S4r=i(fe),UE=n(fe,"LI",{});var BNe=s(UE);V6e=n(BNe,"STRONG",{});var Zyt=s(V6e);R4r=r(Zyt,"mpnet"),Zyt.forEach(t),P4r=r(BNe," \u2014 "),sJ=n(BNe,"A",{href:!0});var Kyt=s(sJ);B4r=r(Kyt,"TFMPNetForMaskedLM"),Kyt.forEach(t),I4r=r(BNe," (MPNet model)"),BNe.forEach(t),N4r=i(fe),JE=n(fe,"LI",{});var INe=s(JE);X6e=n(INe,"STRONG",{});var e8t=s(X6e);q4r=r(e8t,"rembert"),e8t.forEach(t),j4r=r(INe," \u2014 "),lJ=n(INe,"A",{href:!0});var o8t=s(lJ);D4r=r(o8t,"TFRemBertForMaskedLM"),o8t.forEach(t),G4r=r(INe," (RemBERT model)"),INe.forEach(t),O4r=i(fe),YE=n(fe,"LI",{});var NNe=s(YE);z6e=n(NNe,"STRONG",{});var r8t=s(z6e);V4r=r(r8t,"roberta"),r8t.forEach(t),X4r=r(NNe," \u2014 "),iJ=n(NNe,"A",{href:!0});var t8t=s(iJ);z4r=r(t8t,"TFRobertaForMaskedLM"),t8t.forEach(t),Q4r=r(NNe," (RoBERTa model)"),NNe.forEach(t),W4r=i(fe),ZE=n(fe,"LI",{});var qNe=s(ZE);Q6e=n(qNe,"STRONG",{});var a8t=s(Q6e);H4r=r(a8t,"roformer"),a8t.forEach(t),U4r=r(qNe," \u2014 "),dJ=n(qNe,"A",{href:!0});var n8t=s(dJ);J4r=r(n8t,"TFRoFormerForMaskedLM"),n8t.forEach(t),Y4r=r(qNe," (RoFormer model)"),qNe.forEach(t),Z4r=i(fe),KE=n(fe,"LI",{});var jNe=s(KE);W6e=n(jNe,"STRONG",{});var s8t=s(W6e);K4r=r(s8t,"tapas"),s8t.forEach(t),eCr=r(jNe," \u2014 "),cJ=n(jNe,"A",{href:!0});var l8t=s(cJ);oCr=r(l8t,"TFTapasForMaskedLM"),l8t.forEach(t),rCr=r(jNe," (TAPAS model)"),jNe.forEach(t),tCr=i(fe),e4=n(fe,"LI",{});var DNe=s(e4);H6e=n(DNe,"STRONG",{});var i8t=s(H6e);aCr=r(i8t,"xlm"),i8t.forEach(t),nCr=r(DNe," \u2014 "),fJ=n(DNe,"A",{href:!0});var d8t=s(fJ);sCr=r(d8t,"TFXLMWithLMHeadModel"),d8t.forEach(t),lCr=r(DNe," (XLM model)"),DNe.forEach(t),iCr=i(fe),o4=n(fe,"LI",{});var GNe=s(o4);U6e=n(GNe,"STRONG",{});var c8t=s(U6e);dCr=r(c8t,"xlm-roberta"),c8t.forEach(t),cCr=r(GNe," \u2014 "),mJ=n(GNe,"A",{href:!0});var f8t=s(mJ);fCr=r(f8t,"TFXLMRobertaForMaskedLM"),f8t.forEach(t),mCr=r(GNe," (XLM-RoBERTa model)"),GNe.forEach(t),fe.forEach(t),gCr=i(kl),T(r4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),YOe=i(f),hc=n(f,"H2",{class:!0});var nze=s(hc);t4=n(nze,"A",{id:!0,class:!0,href:!0});var m8t=s(t4);J6e=n(m8t,"SPAN",{});var g8t=s(J6e);T(j9.$$.fragment,g8t),g8t.forEach(t),m8t.forEach(t),hCr=i(nze),Y6e=n(nze,"SPAN",{});var h8t=s(Y6e);pCr=r(h8t,"TFAutoModelForSeq2SeqLM"),h8t.forEach(t),nze.forEach(t),ZOe=i(f),nr=n(f,"DIV",{class:!0});var Sl=s(nr);T(D9.$$.fragment,Sl),_Cr=i(Sl),pc=n(Sl,"P",{});var Fre=s(pc);uCr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gJ=n(Fre,"A",{href:!0});var p8t=s(gJ);bCr=r(p8t,"from_pretrained()"),p8t.forEach(t),vCr=r(Fre," class method or the "),hJ=n(Fre,"A",{href:!0});var _8t=s(hJ);FCr=r(_8t,"from_config()"),_8t.forEach(t),TCr=r(Fre,` class
method.`),Fre.forEach(t),MCr=i(Sl),G9=n(Sl,"P",{});var sze=s(G9);ECr=r(sze,"This class cannot be instantiated directly using "),Z6e=n(sze,"CODE",{});var u8t=s(Z6e);CCr=r(u8t,"__init__()"),u8t.forEach(t),wCr=r(sze," (throws an error)."),sze.forEach(t),ACr=i(Sl),Bt=n(Sl,"DIV",{class:!0});var IA=s(Bt);T(O9.$$.fragment,IA),LCr=i(IA),K6e=n(IA,"P",{});var b8t=s(K6e);yCr=r(b8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b8t.forEach(t),xCr=i(IA),_c=n(IA,"P",{});var Tre=s(_c);$Cr=r(Tre,`Note:
Loading a model from its configuration file does `),eTe=n(Tre,"STRONG",{});var v8t=s(eTe);kCr=r(v8t,"not"),v8t.forEach(t),SCr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(Tre,"A",{href:!0});var F8t=s(pJ);RCr=r(F8t,"from_pretrained()"),F8t.forEach(t),PCr=r(Tre," to load the model weights."),Tre.forEach(t),BCr=i(IA),T(a4.$$.fragment,IA),IA.forEach(t),ICr=i(Sl),Rr=n(Sl,"DIV",{class:!0});var Rl=s(Rr);T(V9.$$.fragment,Rl),NCr=i(Rl),oTe=n(Rl,"P",{});var T8t=s(oTe);qCr=r(T8t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),T8t.forEach(t),jCr=i(Rl),fn=n(Rl,"P",{});var NA=s(fn);DCr=r(NA,"The model class to instantiate is selected based on the "),rTe=n(NA,"CODE",{});var M8t=s(rTe);GCr=r(M8t,"model_type"),M8t.forEach(t),OCr=r(NA,` property of the config object (either
passed as an argument or loaded from `),tTe=n(NA,"CODE",{});var E8t=s(tTe);VCr=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),XCr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(NA,"CODE",{});var C8t=s(aTe);zCr=r(C8t,"pretrained_model_name_or_path"),C8t.forEach(t),QCr=r(NA,":"),NA.forEach(t),WCr=i(Rl),ye=n(Rl,"UL",{});var Ie=s(ye);n4=n(Ie,"LI",{});var ONe=s(n4);nTe=n(ONe,"STRONG",{});var w8t=s(nTe);HCr=r(w8t,"bart"),w8t.forEach(t),UCr=r(ONe," \u2014 "),_J=n(ONe,"A",{href:!0});var A8t=s(_J);JCr=r(A8t,"TFBartForConditionalGeneration"),A8t.forEach(t),YCr=r(ONe," (BART model)"),ONe.forEach(t),ZCr=i(Ie),s4=n(Ie,"LI",{});var VNe=s(s4);sTe=n(VNe,"STRONG",{});var L8t=s(sTe);KCr=r(L8t,"blenderbot"),L8t.forEach(t),e5r=r(VNe," \u2014 "),uJ=n(VNe,"A",{href:!0});var y8t=s(uJ);o5r=r(y8t,"TFBlenderbotForConditionalGeneration"),y8t.forEach(t),r5r=r(VNe," (Blenderbot model)"),VNe.forEach(t),t5r=i(Ie),l4=n(Ie,"LI",{});var XNe=s(l4);lTe=n(XNe,"STRONG",{});var x8t=s(lTe);a5r=r(x8t,"blenderbot-small"),x8t.forEach(t),n5r=r(XNe," \u2014 "),bJ=n(XNe,"A",{href:!0});var $8t=s(bJ);s5r=r($8t,"TFBlenderbotSmallForConditionalGeneration"),$8t.forEach(t),l5r=r(XNe," (BlenderbotSmall model)"),XNe.forEach(t),i5r=i(Ie),i4=n(Ie,"LI",{});var zNe=s(i4);iTe=n(zNe,"STRONG",{});var k8t=s(iTe);d5r=r(k8t,"encoder-decoder"),k8t.forEach(t),c5r=r(zNe," \u2014 "),vJ=n(zNe,"A",{href:!0});var S8t=s(vJ);f5r=r(S8t,"TFEncoderDecoderModel"),S8t.forEach(t),m5r=r(zNe," (Encoder decoder model)"),zNe.forEach(t),g5r=i(Ie),d4=n(Ie,"LI",{});var QNe=s(d4);dTe=n(QNe,"STRONG",{});var R8t=s(dTe);h5r=r(R8t,"led"),R8t.forEach(t),p5r=r(QNe," \u2014 "),FJ=n(QNe,"A",{href:!0});var P8t=s(FJ);_5r=r(P8t,"TFLEDForConditionalGeneration"),P8t.forEach(t),u5r=r(QNe," (LED model)"),QNe.forEach(t),b5r=i(Ie),c4=n(Ie,"LI",{});var WNe=s(c4);cTe=n(WNe,"STRONG",{});var B8t=s(cTe);v5r=r(B8t,"marian"),B8t.forEach(t),F5r=r(WNe," \u2014 "),TJ=n(WNe,"A",{href:!0});var I8t=s(TJ);T5r=r(I8t,"TFMarianMTModel"),I8t.forEach(t),M5r=r(WNe," (Marian model)"),WNe.forEach(t),E5r=i(Ie),f4=n(Ie,"LI",{});var HNe=s(f4);fTe=n(HNe,"STRONG",{});var N8t=s(fTe);C5r=r(N8t,"mbart"),N8t.forEach(t),w5r=r(HNe," \u2014 "),MJ=n(HNe,"A",{href:!0});var q8t=s(MJ);A5r=r(q8t,"TFMBartForConditionalGeneration"),q8t.forEach(t),L5r=r(HNe," (mBART model)"),HNe.forEach(t),y5r=i(Ie),m4=n(Ie,"LI",{});var UNe=s(m4);mTe=n(UNe,"STRONG",{});var j8t=s(mTe);x5r=r(j8t,"mt5"),j8t.forEach(t),$5r=r(UNe," \u2014 "),EJ=n(UNe,"A",{href:!0});var D8t=s(EJ);k5r=r(D8t,"TFMT5ForConditionalGeneration"),D8t.forEach(t),S5r=r(UNe," (MT5 model)"),UNe.forEach(t),R5r=i(Ie),g4=n(Ie,"LI",{});var JNe=s(g4);gTe=n(JNe,"STRONG",{});var G8t=s(gTe);P5r=r(G8t,"pegasus"),G8t.forEach(t),B5r=r(JNe," \u2014 "),CJ=n(JNe,"A",{href:!0});var O8t=s(CJ);I5r=r(O8t,"TFPegasusForConditionalGeneration"),O8t.forEach(t),N5r=r(JNe," (Pegasus model)"),JNe.forEach(t),q5r=i(Ie),h4=n(Ie,"LI",{});var YNe=s(h4);hTe=n(YNe,"STRONG",{});var V8t=s(hTe);j5r=r(V8t,"t5"),V8t.forEach(t),D5r=r(YNe," \u2014 "),wJ=n(YNe,"A",{href:!0});var X8t=s(wJ);G5r=r(X8t,"TFT5ForConditionalGeneration"),X8t.forEach(t),O5r=r(YNe," (T5 model)"),YNe.forEach(t),Ie.forEach(t),V5r=i(Rl),T(p4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),KOe=i(f),uc=n(f,"H2",{class:!0});var lze=s(uc);_4=n(lze,"A",{id:!0,class:!0,href:!0});var z8t=s(_4);pTe=n(z8t,"SPAN",{});var Q8t=s(pTe);T(X9.$$.fragment,Q8t),Q8t.forEach(t),z8t.forEach(t),X5r=i(lze),_Te=n(lze,"SPAN",{});var W8t=s(_Te);z5r=r(W8t,"TFAutoModelForSequenceClassification"),W8t.forEach(t),lze.forEach(t),eVe=i(f),sr=n(f,"DIV",{class:!0});var Pl=s(sr);T(z9.$$.fragment,Pl),Q5r=i(Pl),bc=n(Pl,"P",{});var Mre=s(bc);W5r=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AJ=n(Mre,"A",{href:!0});var H8t=s(AJ);H5r=r(H8t,"from_pretrained()"),H8t.forEach(t),U5r=r(Mre," class method or the "),LJ=n(Mre,"A",{href:!0});var U8t=s(LJ);J5r=r(U8t,"from_config()"),U8t.forEach(t),Y5r=r(Mre,` class
method.`),Mre.forEach(t),Z5r=i(Pl),Q9=n(Pl,"P",{});var ize=s(Q9);K5r=r(ize,"This class cannot be instantiated directly using "),uTe=n(ize,"CODE",{});var J8t=s(uTe);e3r=r(J8t,"__init__()"),J8t.forEach(t),o3r=r(ize," (throws an error)."),ize.forEach(t),r3r=i(Pl),It=n(Pl,"DIV",{class:!0});var qA=s(It);T(W9.$$.fragment,qA),t3r=i(qA),bTe=n(qA,"P",{});var Y8t=s(bTe);a3r=r(Y8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Y8t.forEach(t),n3r=i(qA),vc=n(qA,"P",{});var Ere=s(vc);s3r=r(Ere,`Note:
Loading a model from its configuration file does `),vTe=n(Ere,"STRONG",{});var Z8t=s(vTe);l3r=r(Z8t,"not"),Z8t.forEach(t),i3r=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(Ere,"A",{href:!0});var K8t=s(yJ);d3r=r(K8t,"from_pretrained()"),K8t.forEach(t),c3r=r(Ere," to load the model weights."),Ere.forEach(t),f3r=i(qA),T(u4.$$.fragment,qA),qA.forEach(t),m3r=i(Pl),Pr=n(Pl,"DIV",{class:!0});var Bl=s(Pr);T(H9.$$.fragment,Bl),g3r=i(Bl),FTe=n(Bl,"P",{});var e9t=s(FTe);h3r=r(e9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e9t.forEach(t),p3r=i(Bl),mn=n(Bl,"P",{});var jA=s(mn);_3r=r(jA,"The model class to instantiate is selected based on the "),TTe=n(jA,"CODE",{});var o9t=s(TTe);u3r=r(o9t,"model_type"),o9t.forEach(t),b3r=r(jA,` property of the config object (either
passed as an argument or loaded from `),MTe=n(jA,"CODE",{});var r9t=s(MTe);v3r=r(r9t,"pretrained_model_name_or_path"),r9t.forEach(t),F3r=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ETe=n(jA,"CODE",{});var t9t=s(ETe);T3r=r(t9t,"pretrained_model_name_or_path"),t9t.forEach(t),M3r=r(jA,":"),jA.forEach(t),E3r=i(Bl),te=n(Bl,"UL",{});var ne=s(te);b4=n(ne,"LI",{});var ZNe=s(b4);CTe=n(ZNe,"STRONG",{});var a9t=s(CTe);C3r=r(a9t,"albert"),a9t.forEach(t),w3r=r(ZNe," \u2014 "),xJ=n(ZNe,"A",{href:!0});var n9t=s(xJ);A3r=r(n9t,"TFAlbertForSequenceClassification"),n9t.forEach(t),L3r=r(ZNe," (ALBERT model)"),ZNe.forEach(t),y3r=i(ne),v4=n(ne,"LI",{});var KNe=s(v4);wTe=n(KNe,"STRONG",{});var s9t=s(wTe);x3r=r(s9t,"bert"),s9t.forEach(t),$3r=r(KNe," \u2014 "),$J=n(KNe,"A",{href:!0});var l9t=s($J);k3r=r(l9t,"TFBertForSequenceClassification"),l9t.forEach(t),S3r=r(KNe," (BERT model)"),KNe.forEach(t),R3r=i(ne),F4=n(ne,"LI",{});var eqe=s(F4);ATe=n(eqe,"STRONG",{});var i9t=s(ATe);P3r=r(i9t,"camembert"),i9t.forEach(t),B3r=r(eqe," \u2014 "),kJ=n(eqe,"A",{href:!0});var d9t=s(kJ);I3r=r(d9t,"TFCamembertForSequenceClassification"),d9t.forEach(t),N3r=r(eqe," (CamemBERT model)"),eqe.forEach(t),q3r=i(ne),T4=n(ne,"LI",{});var oqe=s(T4);LTe=n(oqe,"STRONG",{});var c9t=s(LTe);j3r=r(c9t,"convbert"),c9t.forEach(t),D3r=r(oqe," \u2014 "),SJ=n(oqe,"A",{href:!0});var f9t=s(SJ);G3r=r(f9t,"TFConvBertForSequenceClassification"),f9t.forEach(t),O3r=r(oqe," (ConvBERT model)"),oqe.forEach(t),V3r=i(ne),M4=n(ne,"LI",{});var rqe=s(M4);yTe=n(rqe,"STRONG",{});var m9t=s(yTe);X3r=r(m9t,"ctrl"),m9t.forEach(t),z3r=r(rqe," \u2014 "),RJ=n(rqe,"A",{href:!0});var g9t=s(RJ);Q3r=r(g9t,"TFCTRLForSequenceClassification"),g9t.forEach(t),W3r=r(rqe," (CTRL model)"),rqe.forEach(t),H3r=i(ne),E4=n(ne,"LI",{});var tqe=s(E4);xTe=n(tqe,"STRONG",{});var h9t=s(xTe);U3r=r(h9t,"deberta"),h9t.forEach(t),J3r=r(tqe," \u2014 "),PJ=n(tqe,"A",{href:!0});var p9t=s(PJ);Y3r=r(p9t,"TFDebertaForSequenceClassification"),p9t.forEach(t),Z3r=r(tqe," (DeBERTa model)"),tqe.forEach(t),K3r=i(ne),C4=n(ne,"LI",{});var aqe=s(C4);$Te=n(aqe,"STRONG",{});var _9t=s($Te);e0r=r(_9t,"deberta-v2"),_9t.forEach(t),o0r=r(aqe," \u2014 "),BJ=n(aqe,"A",{href:!0});var u9t=s(BJ);r0r=r(u9t,"TFDebertaV2ForSequenceClassification"),u9t.forEach(t),t0r=r(aqe," (DeBERTa-v2 model)"),aqe.forEach(t),a0r=i(ne),w4=n(ne,"LI",{});var nqe=s(w4);kTe=n(nqe,"STRONG",{});var b9t=s(kTe);n0r=r(b9t,"distilbert"),b9t.forEach(t),s0r=r(nqe," \u2014 "),IJ=n(nqe,"A",{href:!0});var v9t=s(IJ);l0r=r(v9t,"TFDistilBertForSequenceClassification"),v9t.forEach(t),i0r=r(nqe," (DistilBERT model)"),nqe.forEach(t),d0r=i(ne),A4=n(ne,"LI",{});var sqe=s(A4);STe=n(sqe,"STRONG",{});var F9t=s(STe);c0r=r(F9t,"electra"),F9t.forEach(t),f0r=r(sqe," \u2014 "),NJ=n(sqe,"A",{href:!0});var T9t=s(NJ);m0r=r(T9t,"TFElectraForSequenceClassification"),T9t.forEach(t),g0r=r(sqe," (ELECTRA model)"),sqe.forEach(t),h0r=i(ne),L4=n(ne,"LI",{});var lqe=s(L4);RTe=n(lqe,"STRONG",{});var M9t=s(RTe);p0r=r(M9t,"flaubert"),M9t.forEach(t),_0r=r(lqe," \u2014 "),qJ=n(lqe,"A",{href:!0});var E9t=s(qJ);u0r=r(E9t,"TFFlaubertForSequenceClassification"),E9t.forEach(t),b0r=r(lqe," (FlauBERT model)"),lqe.forEach(t),v0r=i(ne),y4=n(ne,"LI",{});var iqe=s(y4);PTe=n(iqe,"STRONG",{});var C9t=s(PTe);F0r=r(C9t,"funnel"),C9t.forEach(t),T0r=r(iqe," \u2014 "),jJ=n(iqe,"A",{href:!0});var w9t=s(jJ);M0r=r(w9t,"TFFunnelForSequenceClassification"),w9t.forEach(t),E0r=r(iqe," (Funnel Transformer model)"),iqe.forEach(t),C0r=i(ne),x4=n(ne,"LI",{});var dqe=s(x4);BTe=n(dqe,"STRONG",{});var A9t=s(BTe);w0r=r(A9t,"gpt2"),A9t.forEach(t),A0r=r(dqe," \u2014 "),DJ=n(dqe,"A",{href:!0});var L9t=s(DJ);L0r=r(L9t,"TFGPT2ForSequenceClassification"),L9t.forEach(t),y0r=r(dqe," (OpenAI GPT-2 model)"),dqe.forEach(t),x0r=i(ne),$4=n(ne,"LI",{});var cqe=s($4);ITe=n(cqe,"STRONG",{});var y9t=s(ITe);$0r=r(y9t,"gptj"),y9t.forEach(t),k0r=r(cqe," \u2014 "),GJ=n(cqe,"A",{href:!0});var x9t=s(GJ);S0r=r(x9t,"TFGPTJForSequenceClassification"),x9t.forEach(t),R0r=r(cqe," (GPT-J model)"),cqe.forEach(t),P0r=i(ne),k4=n(ne,"LI",{});var fqe=s(k4);NTe=n(fqe,"STRONG",{});var $9t=s(NTe);B0r=r($9t,"layoutlm"),$9t.forEach(t),I0r=r(fqe," \u2014 "),OJ=n(fqe,"A",{href:!0});var k9t=s(OJ);N0r=r(k9t,"TFLayoutLMForSequenceClassification"),k9t.forEach(t),q0r=r(fqe," (LayoutLM model)"),fqe.forEach(t),j0r=i(ne),S4=n(ne,"LI",{});var mqe=s(S4);qTe=n(mqe,"STRONG",{});var S9t=s(qTe);D0r=r(S9t,"longformer"),S9t.forEach(t),G0r=r(mqe," \u2014 "),VJ=n(mqe,"A",{href:!0});var R9t=s(VJ);O0r=r(R9t,"TFLongformerForSequenceClassification"),R9t.forEach(t),V0r=r(mqe," (Longformer model)"),mqe.forEach(t),X0r=i(ne),R4=n(ne,"LI",{});var gqe=s(R4);jTe=n(gqe,"STRONG",{});var P9t=s(jTe);z0r=r(P9t,"mobilebert"),P9t.forEach(t),Q0r=r(gqe," \u2014 "),XJ=n(gqe,"A",{href:!0});var B9t=s(XJ);W0r=r(B9t,"TFMobileBertForSequenceClassification"),B9t.forEach(t),H0r=r(gqe," (MobileBERT model)"),gqe.forEach(t),U0r=i(ne),P4=n(ne,"LI",{});var hqe=s(P4);DTe=n(hqe,"STRONG",{});var I9t=s(DTe);J0r=r(I9t,"mpnet"),I9t.forEach(t),Y0r=r(hqe," \u2014 "),zJ=n(hqe,"A",{href:!0});var N9t=s(zJ);Z0r=r(N9t,"TFMPNetForSequenceClassification"),N9t.forEach(t),K0r=r(hqe," (MPNet model)"),hqe.forEach(t),ewr=i(ne),B4=n(ne,"LI",{});var pqe=s(B4);GTe=n(pqe,"STRONG",{});var q9t=s(GTe);owr=r(q9t,"openai-gpt"),q9t.forEach(t),rwr=r(pqe," \u2014 "),QJ=n(pqe,"A",{href:!0});var j9t=s(QJ);twr=r(j9t,"TFOpenAIGPTForSequenceClassification"),j9t.forEach(t),awr=r(pqe," (OpenAI GPT model)"),pqe.forEach(t),nwr=i(ne),I4=n(ne,"LI",{});var _qe=s(I4);OTe=n(_qe,"STRONG",{});var D9t=s(OTe);swr=r(D9t,"rembert"),D9t.forEach(t),lwr=r(_qe," \u2014 "),WJ=n(_qe,"A",{href:!0});var G9t=s(WJ);iwr=r(G9t,"TFRemBertForSequenceClassification"),G9t.forEach(t),dwr=r(_qe," (RemBERT model)"),_qe.forEach(t),cwr=i(ne),N4=n(ne,"LI",{});var uqe=s(N4);VTe=n(uqe,"STRONG",{});var O9t=s(VTe);fwr=r(O9t,"roberta"),O9t.forEach(t),mwr=r(uqe," \u2014 "),HJ=n(uqe,"A",{href:!0});var V9t=s(HJ);gwr=r(V9t,"TFRobertaForSequenceClassification"),V9t.forEach(t),hwr=r(uqe," (RoBERTa model)"),uqe.forEach(t),pwr=i(ne),q4=n(ne,"LI",{});var bqe=s(q4);XTe=n(bqe,"STRONG",{});var X9t=s(XTe);_wr=r(X9t,"roformer"),X9t.forEach(t),uwr=r(bqe," \u2014 "),UJ=n(bqe,"A",{href:!0});var z9t=s(UJ);bwr=r(z9t,"TFRoFormerForSequenceClassification"),z9t.forEach(t),vwr=r(bqe," (RoFormer model)"),bqe.forEach(t),Fwr=i(ne),j4=n(ne,"LI",{});var vqe=s(j4);zTe=n(vqe,"STRONG",{});var Q9t=s(zTe);Twr=r(Q9t,"tapas"),Q9t.forEach(t),Mwr=r(vqe," \u2014 "),JJ=n(vqe,"A",{href:!0});var W9t=s(JJ);Ewr=r(W9t,"TFTapasForSequenceClassification"),W9t.forEach(t),Cwr=r(vqe," (TAPAS model)"),vqe.forEach(t),wwr=i(ne),D4=n(ne,"LI",{});var Fqe=s(D4);QTe=n(Fqe,"STRONG",{});var H9t=s(QTe);Awr=r(H9t,"transfo-xl"),H9t.forEach(t),Lwr=r(Fqe," \u2014 "),YJ=n(Fqe,"A",{href:!0});var U9t=s(YJ);ywr=r(U9t,"TFTransfoXLForSequenceClassification"),U9t.forEach(t),xwr=r(Fqe," (Transformer-XL model)"),Fqe.forEach(t),$wr=i(ne),G4=n(ne,"LI",{});var Tqe=s(G4);WTe=n(Tqe,"STRONG",{});var J9t=s(WTe);kwr=r(J9t,"xlm"),J9t.forEach(t),Swr=r(Tqe," \u2014 "),ZJ=n(Tqe,"A",{href:!0});var Y9t=s(ZJ);Rwr=r(Y9t,"TFXLMForSequenceClassification"),Y9t.forEach(t),Pwr=r(Tqe," (XLM model)"),Tqe.forEach(t),Bwr=i(ne),O4=n(ne,"LI",{});var Mqe=s(O4);HTe=n(Mqe,"STRONG",{});var Z9t=s(HTe);Iwr=r(Z9t,"xlm-roberta"),Z9t.forEach(t),Nwr=r(Mqe," \u2014 "),KJ=n(Mqe,"A",{href:!0});var K9t=s(KJ);qwr=r(K9t,"TFXLMRobertaForSequenceClassification"),K9t.forEach(t),jwr=r(Mqe," (XLM-RoBERTa model)"),Mqe.forEach(t),Dwr=i(ne),V4=n(ne,"LI",{});var Eqe=s(V4);UTe=n(Eqe,"STRONG",{});var ext=s(UTe);Gwr=r(ext,"xlnet"),ext.forEach(t),Owr=r(Eqe," \u2014 "),eY=n(Eqe,"A",{href:!0});var oxt=s(eY);Vwr=r(oxt,"TFXLNetForSequenceClassification"),oxt.forEach(t),Xwr=r(Eqe," (XLNet model)"),Eqe.forEach(t),ne.forEach(t),zwr=i(Bl),T(X4.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),oVe=i(f),Fc=n(f,"H2",{class:!0});var dze=s(Fc);z4=n(dze,"A",{id:!0,class:!0,href:!0});var rxt=s(z4);JTe=n(rxt,"SPAN",{});var txt=s(JTe);T(U9.$$.fragment,txt),txt.forEach(t),rxt.forEach(t),Qwr=i(dze),YTe=n(dze,"SPAN",{});var axt=s(YTe);Wwr=r(axt,"TFAutoModelForMultipleChoice"),axt.forEach(t),dze.forEach(t),rVe=i(f),lr=n(f,"DIV",{class:!0});var Il=s(lr);T(J9.$$.fragment,Il),Hwr=i(Il),Tc=n(Il,"P",{});var Cre=s(Tc);Uwr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oY=n(Cre,"A",{href:!0});var nxt=s(oY);Jwr=r(nxt,"from_pretrained()"),nxt.forEach(t),Ywr=r(Cre," class method or the "),rY=n(Cre,"A",{href:!0});var sxt=s(rY);Zwr=r(sxt,"from_config()"),sxt.forEach(t),Kwr=r(Cre,` class
method.`),Cre.forEach(t),eAr=i(Il),Y9=n(Il,"P",{});var cze=s(Y9);oAr=r(cze,"This class cannot be instantiated directly using "),ZTe=n(cze,"CODE",{});var lxt=s(ZTe);rAr=r(lxt,"__init__()"),lxt.forEach(t),tAr=r(cze," (throws an error)."),cze.forEach(t),aAr=i(Il),Nt=n(Il,"DIV",{class:!0});var DA=s(Nt);T(Z9.$$.fragment,DA),nAr=i(DA),KTe=n(DA,"P",{});var ixt=s(KTe);sAr=r(ixt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ixt.forEach(t),lAr=i(DA),Mc=n(DA,"P",{});var wre=s(Mc);iAr=r(wre,`Note:
Loading a model from its configuration file does `),eMe=n(wre,"STRONG",{});var dxt=s(eMe);dAr=r(dxt,"not"),dxt.forEach(t),cAr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(wre,"A",{href:!0});var cxt=s(tY);fAr=r(cxt,"from_pretrained()"),cxt.forEach(t),mAr=r(wre," to load the model weights."),wre.forEach(t),gAr=i(DA),T(Q4.$$.fragment,DA),DA.forEach(t),hAr=i(Il),Br=n(Il,"DIV",{class:!0});var Nl=s(Br);T(K9.$$.fragment,Nl),pAr=i(Nl),oMe=n(Nl,"P",{});var fxt=s(oMe);_Ar=r(fxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fxt.forEach(t),uAr=i(Nl),gn=n(Nl,"P",{});var GA=s(gn);bAr=r(GA,"The model class to instantiate is selected based on the "),rMe=n(GA,"CODE",{});var mxt=s(rMe);vAr=r(mxt,"model_type"),mxt.forEach(t),FAr=r(GA,` property of the config object (either
passed as an argument or loaded from `),tMe=n(GA,"CODE",{});var gxt=s(tMe);TAr=r(gxt,"pretrained_model_name_or_path"),gxt.forEach(t),MAr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=n(GA,"CODE",{});var hxt=s(aMe);EAr=r(hxt,"pretrained_model_name_or_path"),hxt.forEach(t),CAr=r(GA,":"),GA.forEach(t),wAr=i(Nl),_e=n(Nl,"UL",{});var ve=s(_e);W4=n(ve,"LI",{});var Cqe=s(W4);nMe=n(Cqe,"STRONG",{});var pxt=s(nMe);AAr=r(pxt,"albert"),pxt.forEach(t),LAr=r(Cqe," \u2014 "),aY=n(Cqe,"A",{href:!0});var _xt=s(aY);yAr=r(_xt,"TFAlbertForMultipleChoice"),_xt.forEach(t),xAr=r(Cqe," (ALBERT model)"),Cqe.forEach(t),$Ar=i(ve),H4=n(ve,"LI",{});var wqe=s(H4);sMe=n(wqe,"STRONG",{});var uxt=s(sMe);kAr=r(uxt,"bert"),uxt.forEach(t),SAr=r(wqe," \u2014 "),nY=n(wqe,"A",{href:!0});var bxt=s(nY);RAr=r(bxt,"TFBertForMultipleChoice"),bxt.forEach(t),PAr=r(wqe," (BERT model)"),wqe.forEach(t),BAr=i(ve),U4=n(ve,"LI",{});var Aqe=s(U4);lMe=n(Aqe,"STRONG",{});var vxt=s(lMe);IAr=r(vxt,"camembert"),vxt.forEach(t),NAr=r(Aqe," \u2014 "),sY=n(Aqe,"A",{href:!0});var Fxt=s(sY);qAr=r(Fxt,"TFCamembertForMultipleChoice"),Fxt.forEach(t),jAr=r(Aqe," (CamemBERT model)"),Aqe.forEach(t),DAr=i(ve),J4=n(ve,"LI",{});var Lqe=s(J4);iMe=n(Lqe,"STRONG",{});var Txt=s(iMe);GAr=r(Txt,"convbert"),Txt.forEach(t),OAr=r(Lqe," \u2014 "),lY=n(Lqe,"A",{href:!0});var Mxt=s(lY);VAr=r(Mxt,"TFConvBertForMultipleChoice"),Mxt.forEach(t),XAr=r(Lqe," (ConvBERT model)"),Lqe.forEach(t),zAr=i(ve),Y4=n(ve,"LI",{});var yqe=s(Y4);dMe=n(yqe,"STRONG",{});var Ext=s(dMe);QAr=r(Ext,"distilbert"),Ext.forEach(t),WAr=r(yqe," \u2014 "),iY=n(yqe,"A",{href:!0});var Cxt=s(iY);HAr=r(Cxt,"TFDistilBertForMultipleChoice"),Cxt.forEach(t),UAr=r(yqe," (DistilBERT model)"),yqe.forEach(t),JAr=i(ve),Z4=n(ve,"LI",{});var xqe=s(Z4);cMe=n(xqe,"STRONG",{});var wxt=s(cMe);YAr=r(wxt,"electra"),wxt.forEach(t),ZAr=r(xqe," \u2014 "),dY=n(xqe,"A",{href:!0});var Axt=s(dY);KAr=r(Axt,"TFElectraForMultipleChoice"),Axt.forEach(t),eLr=r(xqe," (ELECTRA model)"),xqe.forEach(t),oLr=i(ve),K4=n(ve,"LI",{});var $qe=s(K4);fMe=n($qe,"STRONG",{});var Lxt=s(fMe);rLr=r(Lxt,"flaubert"),Lxt.forEach(t),tLr=r($qe," \u2014 "),cY=n($qe,"A",{href:!0});var yxt=s(cY);aLr=r(yxt,"TFFlaubertForMultipleChoice"),yxt.forEach(t),nLr=r($qe," (FlauBERT model)"),$qe.forEach(t),sLr=i(ve),eC=n(ve,"LI",{});var kqe=s(eC);mMe=n(kqe,"STRONG",{});var xxt=s(mMe);lLr=r(xxt,"funnel"),xxt.forEach(t),iLr=r(kqe," \u2014 "),fY=n(kqe,"A",{href:!0});var $xt=s(fY);dLr=r($xt,"TFFunnelForMultipleChoice"),$xt.forEach(t),cLr=r(kqe," (Funnel Transformer model)"),kqe.forEach(t),fLr=i(ve),oC=n(ve,"LI",{});var Sqe=s(oC);gMe=n(Sqe,"STRONG",{});var kxt=s(gMe);mLr=r(kxt,"longformer"),kxt.forEach(t),gLr=r(Sqe," \u2014 "),mY=n(Sqe,"A",{href:!0});var Sxt=s(mY);hLr=r(Sxt,"TFLongformerForMultipleChoice"),Sxt.forEach(t),pLr=r(Sqe," (Longformer model)"),Sqe.forEach(t),_Lr=i(ve),rC=n(ve,"LI",{});var Rqe=s(rC);hMe=n(Rqe,"STRONG",{});var Rxt=s(hMe);uLr=r(Rxt,"mobilebert"),Rxt.forEach(t),bLr=r(Rqe," \u2014 "),gY=n(Rqe,"A",{href:!0});var Pxt=s(gY);vLr=r(Pxt,"TFMobileBertForMultipleChoice"),Pxt.forEach(t),FLr=r(Rqe," (MobileBERT model)"),Rqe.forEach(t),TLr=i(ve),tC=n(ve,"LI",{});var Pqe=s(tC);pMe=n(Pqe,"STRONG",{});var Bxt=s(pMe);MLr=r(Bxt,"mpnet"),Bxt.forEach(t),ELr=r(Pqe," \u2014 "),hY=n(Pqe,"A",{href:!0});var Ixt=s(hY);CLr=r(Ixt,"TFMPNetForMultipleChoice"),Ixt.forEach(t),wLr=r(Pqe," (MPNet model)"),Pqe.forEach(t),ALr=i(ve),aC=n(ve,"LI",{});var Bqe=s(aC);_Me=n(Bqe,"STRONG",{});var Nxt=s(_Me);LLr=r(Nxt,"rembert"),Nxt.forEach(t),yLr=r(Bqe," \u2014 "),pY=n(Bqe,"A",{href:!0});var qxt=s(pY);xLr=r(qxt,"TFRemBertForMultipleChoice"),qxt.forEach(t),$Lr=r(Bqe," (RemBERT model)"),Bqe.forEach(t),kLr=i(ve),nC=n(ve,"LI",{});var Iqe=s(nC);uMe=n(Iqe,"STRONG",{});var jxt=s(uMe);SLr=r(jxt,"roberta"),jxt.forEach(t),RLr=r(Iqe," \u2014 "),_Y=n(Iqe,"A",{href:!0});var Dxt=s(_Y);PLr=r(Dxt,"TFRobertaForMultipleChoice"),Dxt.forEach(t),BLr=r(Iqe," (RoBERTa model)"),Iqe.forEach(t),ILr=i(ve),sC=n(ve,"LI",{});var Nqe=s(sC);bMe=n(Nqe,"STRONG",{});var Gxt=s(bMe);NLr=r(Gxt,"roformer"),Gxt.forEach(t),qLr=r(Nqe," \u2014 "),uY=n(Nqe,"A",{href:!0});var Oxt=s(uY);jLr=r(Oxt,"TFRoFormerForMultipleChoice"),Oxt.forEach(t),DLr=r(Nqe," (RoFormer model)"),Nqe.forEach(t),GLr=i(ve),lC=n(ve,"LI",{});var qqe=s(lC);vMe=n(qqe,"STRONG",{});var Vxt=s(vMe);OLr=r(Vxt,"xlm"),Vxt.forEach(t),VLr=r(qqe," \u2014 "),bY=n(qqe,"A",{href:!0});var Xxt=s(bY);XLr=r(Xxt,"TFXLMForMultipleChoice"),Xxt.forEach(t),zLr=r(qqe," (XLM model)"),qqe.forEach(t),QLr=i(ve),iC=n(ve,"LI",{});var jqe=s(iC);FMe=n(jqe,"STRONG",{});var zxt=s(FMe);WLr=r(zxt,"xlm-roberta"),zxt.forEach(t),HLr=r(jqe," \u2014 "),vY=n(jqe,"A",{href:!0});var Qxt=s(vY);ULr=r(Qxt,"TFXLMRobertaForMultipleChoice"),Qxt.forEach(t),JLr=r(jqe," (XLM-RoBERTa model)"),jqe.forEach(t),YLr=i(ve),dC=n(ve,"LI",{});var Dqe=s(dC);TMe=n(Dqe,"STRONG",{});var Wxt=s(TMe);ZLr=r(Wxt,"xlnet"),Wxt.forEach(t),KLr=r(Dqe," \u2014 "),FY=n(Dqe,"A",{href:!0});var Hxt=s(FY);eyr=r(Hxt,"TFXLNetForMultipleChoice"),Hxt.forEach(t),oyr=r(Dqe," (XLNet model)"),Dqe.forEach(t),ve.forEach(t),ryr=i(Nl),T(cC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),tVe=i(f),Ec=n(f,"H2",{class:!0});var fze=s(Ec);fC=n(fze,"A",{id:!0,class:!0,href:!0});var Uxt=s(fC);MMe=n(Uxt,"SPAN",{});var Jxt=s(MMe);T(ex.$$.fragment,Jxt),Jxt.forEach(t),Uxt.forEach(t),tyr=i(fze),EMe=n(fze,"SPAN",{});var Yxt=s(EMe);ayr=r(Yxt,"TFAutoModelForNextSentencePrediction"),Yxt.forEach(t),fze.forEach(t),aVe=i(f),ir=n(f,"DIV",{class:!0});var ql=s(ir);T(ox.$$.fragment,ql),nyr=i(ql),Cc=n(ql,"P",{});var Are=s(Cc);syr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),TY=n(Are,"A",{href:!0});var Zxt=s(TY);lyr=r(Zxt,"from_pretrained()"),Zxt.forEach(t),iyr=r(Are," class method or the "),MY=n(Are,"A",{href:!0});var Kxt=s(MY);dyr=r(Kxt,"from_config()"),Kxt.forEach(t),cyr=r(Are,` class
method.`),Are.forEach(t),fyr=i(ql),rx=n(ql,"P",{});var mze=s(rx);myr=r(mze,"This class cannot be instantiated directly using "),CMe=n(mze,"CODE",{});var e$t=s(CMe);gyr=r(e$t,"__init__()"),e$t.forEach(t),hyr=r(mze," (throws an error)."),mze.forEach(t),pyr=i(ql),qt=n(ql,"DIV",{class:!0});var OA=s(qt);T(tx.$$.fragment,OA),_yr=i(OA),wMe=n(OA,"P",{});var o$t=s(wMe);uyr=r(o$t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),o$t.forEach(t),byr=i(OA),wc=n(OA,"P",{});var Lre=s(wc);vyr=r(Lre,`Note:
Loading a model from its configuration file does `),AMe=n(Lre,"STRONG",{});var r$t=s(AMe);Fyr=r(r$t,"not"),r$t.forEach(t),Tyr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Lre,"A",{href:!0});var t$t=s(EY);Myr=r(t$t,"from_pretrained()"),t$t.forEach(t),Eyr=r(Lre," to load the model weights."),Lre.forEach(t),Cyr=i(OA),T(mC.$$.fragment,OA),OA.forEach(t),wyr=i(ql),Ir=n(ql,"DIV",{class:!0});var jl=s(Ir);T(ax.$$.fragment,jl),Ayr=i(jl),LMe=n(jl,"P",{});var a$t=s(LMe);Lyr=r(a$t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),a$t.forEach(t),yyr=i(jl),hn=n(jl,"P",{});var VA=s(hn);xyr=r(VA,"The model class to instantiate is selected based on the "),yMe=n(VA,"CODE",{});var n$t=s(yMe);$yr=r(n$t,"model_type"),n$t.forEach(t),kyr=r(VA,` property of the config object (either
passed as an argument or loaded from `),xMe=n(VA,"CODE",{});var s$t=s(xMe);Syr=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),Ryr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=n(VA,"CODE",{});var l$t=s($Me);Pyr=r(l$t,"pretrained_model_name_or_path"),l$t.forEach(t),Byr=r(VA,":"),VA.forEach(t),Iyr=i(jl),nx=n(jl,"UL",{});var gze=s(nx);gC=n(gze,"LI",{});var Gqe=s(gC);kMe=n(Gqe,"STRONG",{});var i$t=s(kMe);Nyr=r(i$t,"bert"),i$t.forEach(t),qyr=r(Gqe," \u2014 "),CY=n(Gqe,"A",{href:!0});var d$t=s(CY);jyr=r(d$t,"TFBertForNextSentencePrediction"),d$t.forEach(t),Dyr=r(Gqe," (BERT model)"),Gqe.forEach(t),Gyr=i(gze),hC=n(gze,"LI",{});var Oqe=s(hC);SMe=n(Oqe,"STRONG",{});var c$t=s(SMe);Oyr=r(c$t,"mobilebert"),c$t.forEach(t),Vyr=r(Oqe," \u2014 "),wY=n(Oqe,"A",{href:!0});var f$t=s(wY);Xyr=r(f$t,"TFMobileBertForNextSentencePrediction"),f$t.forEach(t),zyr=r(Oqe," (MobileBERT model)"),Oqe.forEach(t),gze.forEach(t),Qyr=i(jl),T(pC.$$.fragment,jl),jl.forEach(t),ql.forEach(t),nVe=i(f),Ac=n(f,"H2",{class:!0});var hze=s(Ac);_C=n(hze,"A",{id:!0,class:!0,href:!0});var m$t=s(_C);RMe=n(m$t,"SPAN",{});var g$t=s(RMe);T(sx.$$.fragment,g$t),g$t.forEach(t),m$t.forEach(t),Wyr=i(hze),PMe=n(hze,"SPAN",{});var h$t=s(PMe);Hyr=r(h$t,"TFAutoModelForTableQuestionAnswering"),h$t.forEach(t),hze.forEach(t),sVe=i(f),dr=n(f,"DIV",{class:!0});var Dl=s(dr);T(lx.$$.fragment,Dl),Uyr=i(Dl),Lc=n(Dl,"P",{});var yre=s(Lc);Jyr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AY=n(yre,"A",{href:!0});var p$t=s(AY);Yyr=r(p$t,"from_pretrained()"),p$t.forEach(t),Zyr=r(yre," class method or the "),LY=n(yre,"A",{href:!0});var _$t=s(LY);Kyr=r(_$t,"from_config()"),_$t.forEach(t),e8r=r(yre,` class
method.`),yre.forEach(t),o8r=i(Dl),ix=n(Dl,"P",{});var pze=s(ix);r8r=r(pze,"This class cannot be instantiated directly using "),BMe=n(pze,"CODE",{});var u$t=s(BMe);t8r=r(u$t,"__init__()"),u$t.forEach(t),a8r=r(pze," (throws an error)."),pze.forEach(t),n8r=i(Dl),jt=n(Dl,"DIV",{class:!0});var XA=s(jt);T(dx.$$.fragment,XA),s8r=i(XA),IMe=n(XA,"P",{});var b$t=s(IMe);l8r=r(b$t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),b$t.forEach(t),i8r=i(XA),yc=n(XA,"P",{});var xre=s(yc);d8r=r(xre,`Note:
Loading a model from its configuration file does `),NMe=n(xre,"STRONG",{});var v$t=s(NMe);c8r=r(v$t,"not"),v$t.forEach(t),f8r=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(xre,"A",{href:!0});var F$t=s(yY);m8r=r(F$t,"from_pretrained()"),F$t.forEach(t),g8r=r(xre," to load the model weights."),xre.forEach(t),h8r=i(XA),T(uC.$$.fragment,XA),XA.forEach(t),p8r=i(Dl),Nr=n(Dl,"DIV",{class:!0});var Gl=s(Nr);T(cx.$$.fragment,Gl),_8r=i(Gl),qMe=n(Gl,"P",{});var T$t=s(qMe);u8r=r(T$t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),T$t.forEach(t),b8r=i(Gl),pn=n(Gl,"P",{});var zA=s(pn);v8r=r(zA,"The model class to instantiate is selected based on the "),jMe=n(zA,"CODE",{});var M$t=s(jMe);F8r=r(M$t,"model_type"),M$t.forEach(t),T8r=r(zA,` property of the config object (either
passed as an argument or loaded from `),DMe=n(zA,"CODE",{});var E$t=s(DMe);M8r=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),E8r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GMe=n(zA,"CODE",{});var C$t=s(GMe);C8r=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),w8r=r(zA,":"),zA.forEach(t),A8r=i(Gl),OMe=n(Gl,"UL",{});var w$t=s(OMe);bC=n(w$t,"LI",{});var Vqe=s(bC);VMe=n(Vqe,"STRONG",{});var A$t=s(VMe);L8r=r(A$t,"tapas"),A$t.forEach(t),y8r=r(Vqe," \u2014 "),xY=n(Vqe,"A",{href:!0});var L$t=s(xY);x8r=r(L$t,"TFTapasForQuestionAnswering"),L$t.forEach(t),$8r=r(Vqe," (TAPAS model)"),Vqe.forEach(t),w$t.forEach(t),k8r=i(Gl),T(vC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),lVe=i(f),xc=n(f,"H2",{class:!0});var _ze=s(xc);FC=n(_ze,"A",{id:!0,class:!0,href:!0});var y$t=s(FC);XMe=n(y$t,"SPAN",{});var x$t=s(XMe);T(fx.$$.fragment,x$t),x$t.forEach(t),y$t.forEach(t),S8r=i(_ze),zMe=n(_ze,"SPAN",{});var $$t=s(zMe);R8r=r($$t,"TFAutoModelForTokenClassification"),$$t.forEach(t),_ze.forEach(t),iVe=i(f),cr=n(f,"DIV",{class:!0});var Ol=s(cr);T(mx.$$.fragment,Ol),P8r=i(Ol),$c=n(Ol,"P",{});var $re=s($c);B8r=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$Y=n($re,"A",{href:!0});var k$t=s($Y);I8r=r(k$t,"from_pretrained()"),k$t.forEach(t),N8r=r($re," class method or the "),kY=n($re,"A",{href:!0});var S$t=s(kY);q8r=r(S$t,"from_config()"),S$t.forEach(t),j8r=r($re,` class
method.`),$re.forEach(t),D8r=i(Ol),gx=n(Ol,"P",{});var uze=s(gx);G8r=r(uze,"This class cannot be instantiated directly using "),QMe=n(uze,"CODE",{});var R$t=s(QMe);O8r=r(R$t,"__init__()"),R$t.forEach(t),V8r=r(uze," (throws an error)."),uze.forEach(t),X8r=i(Ol),Dt=n(Ol,"DIV",{class:!0});var QA=s(Dt);T(hx.$$.fragment,QA),z8r=i(QA),WMe=n(QA,"P",{});var P$t=s(WMe);Q8r=r(P$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),P$t.forEach(t),W8r=i(QA),kc=n(QA,"P",{});var kre=s(kc);H8r=r(kre,`Note:
Loading a model from its configuration file does `),HMe=n(kre,"STRONG",{});var B$t=s(HMe);U8r=r(B$t,"not"),B$t.forEach(t),J8r=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SY=n(kre,"A",{href:!0});var I$t=s(SY);Y8r=r(I$t,"from_pretrained()"),I$t.forEach(t),Z8r=r(kre," to load the model weights."),kre.forEach(t),K8r=i(QA),T(TC.$$.fragment,QA),QA.forEach(t),e9r=i(Ol),qr=n(Ol,"DIV",{class:!0});var Vl=s(qr);T(px.$$.fragment,Vl),o9r=i(Vl),UMe=n(Vl,"P",{});var N$t=s(UMe);r9r=r(N$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N$t.forEach(t),t9r=i(Vl),_n=n(Vl,"P",{});var WA=s(_n);a9r=r(WA,"The model class to instantiate is selected based on the "),JMe=n(WA,"CODE",{});var q$t=s(JMe);n9r=r(q$t,"model_type"),q$t.forEach(t),s9r=r(WA,` property of the config object (either
passed as an argument or loaded from `),YMe=n(WA,"CODE",{});var j$t=s(YMe);l9r=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),i9r=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(WA,"CODE",{});var D$t=s(ZMe);d9r=r(D$t,"pretrained_model_name_or_path"),D$t.forEach(t),c9r=r(WA,":"),WA.forEach(t),f9r=i(Vl),de=n(Vl,"UL",{});var me=s(de);MC=n(me,"LI",{});var Xqe=s(MC);KMe=n(Xqe,"STRONG",{});var G$t=s(KMe);m9r=r(G$t,"albert"),G$t.forEach(t),g9r=r(Xqe," \u2014 "),RY=n(Xqe,"A",{href:!0});var O$t=s(RY);h9r=r(O$t,"TFAlbertForTokenClassification"),O$t.forEach(t),p9r=r(Xqe," (ALBERT model)"),Xqe.forEach(t),_9r=i(me),EC=n(me,"LI",{});var zqe=s(EC);eEe=n(zqe,"STRONG",{});var V$t=s(eEe);u9r=r(V$t,"bert"),V$t.forEach(t),b9r=r(zqe," \u2014 "),PY=n(zqe,"A",{href:!0});var X$t=s(PY);v9r=r(X$t,"TFBertForTokenClassification"),X$t.forEach(t),F9r=r(zqe," (BERT model)"),zqe.forEach(t),T9r=i(me),CC=n(me,"LI",{});var Qqe=s(CC);oEe=n(Qqe,"STRONG",{});var z$t=s(oEe);M9r=r(z$t,"camembert"),z$t.forEach(t),E9r=r(Qqe," \u2014 "),BY=n(Qqe,"A",{href:!0});var Q$t=s(BY);C9r=r(Q$t,"TFCamembertForTokenClassification"),Q$t.forEach(t),w9r=r(Qqe," (CamemBERT model)"),Qqe.forEach(t),A9r=i(me),wC=n(me,"LI",{});var Wqe=s(wC);rEe=n(Wqe,"STRONG",{});var W$t=s(rEe);L9r=r(W$t,"convbert"),W$t.forEach(t),y9r=r(Wqe," \u2014 "),IY=n(Wqe,"A",{href:!0});var H$t=s(IY);x9r=r(H$t,"TFConvBertForTokenClassification"),H$t.forEach(t),$9r=r(Wqe," (ConvBERT model)"),Wqe.forEach(t),k9r=i(me),AC=n(me,"LI",{});var Hqe=s(AC);tEe=n(Hqe,"STRONG",{});var U$t=s(tEe);S9r=r(U$t,"deberta"),U$t.forEach(t),R9r=r(Hqe," \u2014 "),NY=n(Hqe,"A",{href:!0});var J$t=s(NY);P9r=r(J$t,"TFDebertaForTokenClassification"),J$t.forEach(t),B9r=r(Hqe," (DeBERTa model)"),Hqe.forEach(t),I9r=i(me),LC=n(me,"LI",{});var Uqe=s(LC);aEe=n(Uqe,"STRONG",{});var Y$t=s(aEe);N9r=r(Y$t,"deberta-v2"),Y$t.forEach(t),q9r=r(Uqe," \u2014 "),qY=n(Uqe,"A",{href:!0});var Z$t=s(qY);j9r=r(Z$t,"TFDebertaV2ForTokenClassification"),Z$t.forEach(t),D9r=r(Uqe," (DeBERTa-v2 model)"),Uqe.forEach(t),G9r=i(me),yC=n(me,"LI",{});var Jqe=s(yC);nEe=n(Jqe,"STRONG",{});var K$t=s(nEe);O9r=r(K$t,"distilbert"),K$t.forEach(t),V9r=r(Jqe," \u2014 "),jY=n(Jqe,"A",{href:!0});var ekt=s(jY);X9r=r(ekt,"TFDistilBertForTokenClassification"),ekt.forEach(t),z9r=r(Jqe," (DistilBERT model)"),Jqe.forEach(t),Q9r=i(me),xC=n(me,"LI",{});var Yqe=s(xC);sEe=n(Yqe,"STRONG",{});var okt=s(sEe);W9r=r(okt,"electra"),okt.forEach(t),H9r=r(Yqe," \u2014 "),DY=n(Yqe,"A",{href:!0});var rkt=s(DY);U9r=r(rkt,"TFElectraForTokenClassification"),rkt.forEach(t),J9r=r(Yqe," (ELECTRA model)"),Yqe.forEach(t),Y9r=i(me),$C=n(me,"LI",{});var Zqe=s($C);lEe=n(Zqe,"STRONG",{});var tkt=s(lEe);Z9r=r(tkt,"flaubert"),tkt.forEach(t),K9r=r(Zqe," \u2014 "),GY=n(Zqe,"A",{href:!0});var akt=s(GY);exr=r(akt,"TFFlaubertForTokenClassification"),akt.forEach(t),oxr=r(Zqe," (FlauBERT model)"),Zqe.forEach(t),rxr=i(me),kC=n(me,"LI",{});var Kqe=s(kC);iEe=n(Kqe,"STRONG",{});var nkt=s(iEe);txr=r(nkt,"funnel"),nkt.forEach(t),axr=r(Kqe," \u2014 "),OY=n(Kqe,"A",{href:!0});var skt=s(OY);nxr=r(skt,"TFFunnelForTokenClassification"),skt.forEach(t),sxr=r(Kqe," (Funnel Transformer model)"),Kqe.forEach(t),lxr=i(me),SC=n(me,"LI",{});var eje=s(SC);dEe=n(eje,"STRONG",{});var lkt=s(dEe);ixr=r(lkt,"layoutlm"),lkt.forEach(t),dxr=r(eje," \u2014 "),VY=n(eje,"A",{href:!0});var ikt=s(VY);cxr=r(ikt,"TFLayoutLMForTokenClassification"),ikt.forEach(t),fxr=r(eje," (LayoutLM model)"),eje.forEach(t),mxr=i(me),RC=n(me,"LI",{});var oje=s(RC);cEe=n(oje,"STRONG",{});var dkt=s(cEe);gxr=r(dkt,"longformer"),dkt.forEach(t),hxr=r(oje," \u2014 "),XY=n(oje,"A",{href:!0});var ckt=s(XY);pxr=r(ckt,"TFLongformerForTokenClassification"),ckt.forEach(t),_xr=r(oje," (Longformer model)"),oje.forEach(t),uxr=i(me),PC=n(me,"LI",{});var rje=s(PC);fEe=n(rje,"STRONG",{});var fkt=s(fEe);bxr=r(fkt,"mobilebert"),fkt.forEach(t),vxr=r(rje," \u2014 "),zY=n(rje,"A",{href:!0});var mkt=s(zY);Fxr=r(mkt,"TFMobileBertForTokenClassification"),mkt.forEach(t),Txr=r(rje," (MobileBERT model)"),rje.forEach(t),Mxr=i(me),BC=n(me,"LI",{});var tje=s(BC);mEe=n(tje,"STRONG",{});var gkt=s(mEe);Exr=r(gkt,"mpnet"),gkt.forEach(t),Cxr=r(tje," \u2014 "),QY=n(tje,"A",{href:!0});var hkt=s(QY);wxr=r(hkt,"TFMPNetForTokenClassification"),hkt.forEach(t),Axr=r(tje," (MPNet model)"),tje.forEach(t),Lxr=i(me),IC=n(me,"LI",{});var aje=s(IC);gEe=n(aje,"STRONG",{});var pkt=s(gEe);yxr=r(pkt,"rembert"),pkt.forEach(t),xxr=r(aje," \u2014 "),WY=n(aje,"A",{href:!0});var _kt=s(WY);$xr=r(_kt,"TFRemBertForTokenClassification"),_kt.forEach(t),kxr=r(aje," (RemBERT model)"),aje.forEach(t),Sxr=i(me),NC=n(me,"LI",{});var nje=s(NC);hEe=n(nje,"STRONG",{});var ukt=s(hEe);Rxr=r(ukt,"roberta"),ukt.forEach(t),Pxr=r(nje," \u2014 "),HY=n(nje,"A",{href:!0});var bkt=s(HY);Bxr=r(bkt,"TFRobertaForTokenClassification"),bkt.forEach(t),Ixr=r(nje," (RoBERTa model)"),nje.forEach(t),Nxr=i(me),qC=n(me,"LI",{});var sje=s(qC);pEe=n(sje,"STRONG",{});var vkt=s(pEe);qxr=r(vkt,"roformer"),vkt.forEach(t),jxr=r(sje," \u2014 "),UY=n(sje,"A",{href:!0});var Fkt=s(UY);Dxr=r(Fkt,"TFRoFormerForTokenClassification"),Fkt.forEach(t),Gxr=r(sje," (RoFormer model)"),sje.forEach(t),Oxr=i(me),jC=n(me,"LI",{});var lje=s(jC);_Ee=n(lje,"STRONG",{});var Tkt=s(_Ee);Vxr=r(Tkt,"xlm"),Tkt.forEach(t),Xxr=r(lje," \u2014 "),JY=n(lje,"A",{href:!0});var Mkt=s(JY);zxr=r(Mkt,"TFXLMForTokenClassification"),Mkt.forEach(t),Qxr=r(lje," (XLM model)"),lje.forEach(t),Wxr=i(me),DC=n(me,"LI",{});var ije=s(DC);uEe=n(ije,"STRONG",{});var Ekt=s(uEe);Hxr=r(Ekt,"xlm-roberta"),Ekt.forEach(t),Uxr=r(ije," \u2014 "),YY=n(ije,"A",{href:!0});var Ckt=s(YY);Jxr=r(Ckt,"TFXLMRobertaForTokenClassification"),Ckt.forEach(t),Yxr=r(ije," (XLM-RoBERTa model)"),ije.forEach(t),Zxr=i(me),GC=n(me,"LI",{});var dje=s(GC);bEe=n(dje,"STRONG",{});var wkt=s(bEe);Kxr=r(wkt,"xlnet"),wkt.forEach(t),e$r=r(dje," \u2014 "),ZY=n(dje,"A",{href:!0});var Akt=s(ZY);o$r=r(Akt,"TFXLNetForTokenClassification"),Akt.forEach(t),r$r=r(dje," (XLNet model)"),dje.forEach(t),me.forEach(t),t$r=i(Vl),T(OC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),dVe=i(f),Sc=n(f,"H2",{class:!0});var bze=s(Sc);VC=n(bze,"A",{id:!0,class:!0,href:!0});var Lkt=s(VC);vEe=n(Lkt,"SPAN",{});var ykt=s(vEe);T(_x.$$.fragment,ykt),ykt.forEach(t),Lkt.forEach(t),a$r=i(bze),FEe=n(bze,"SPAN",{});var xkt=s(FEe);n$r=r(xkt,"TFAutoModelForQuestionAnswering"),xkt.forEach(t),bze.forEach(t),cVe=i(f),fr=n(f,"DIV",{class:!0});var Xl=s(fr);T(ux.$$.fragment,Xl),s$r=i(Xl),Rc=n(Xl,"P",{});var Sre=s(Rc);l$r=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KY=n(Sre,"A",{href:!0});var $kt=s(KY);i$r=r($kt,"from_pretrained()"),$kt.forEach(t),d$r=r(Sre," class method or the "),eZ=n(Sre,"A",{href:!0});var kkt=s(eZ);c$r=r(kkt,"from_config()"),kkt.forEach(t),f$r=r(Sre,` class
method.`),Sre.forEach(t),m$r=i(Xl),bx=n(Xl,"P",{});var vze=s(bx);g$r=r(vze,"This class cannot be instantiated directly using "),TEe=n(vze,"CODE",{});var Skt=s(TEe);h$r=r(Skt,"__init__()"),Skt.forEach(t),p$r=r(vze," (throws an error)."),vze.forEach(t),_$r=i(Xl),Gt=n(Xl,"DIV",{class:!0});var HA=s(Gt);T(vx.$$.fragment,HA),u$r=i(HA),MEe=n(HA,"P",{});var Rkt=s(MEe);b$r=r(Rkt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Rkt.forEach(t),v$r=i(HA),Pc=n(HA,"P",{});var Rre=s(Pc);F$r=r(Rre,`Note:
Loading a model from its configuration file does `),EEe=n(Rre,"STRONG",{});var Pkt=s(EEe);T$r=r(Pkt,"not"),Pkt.forEach(t),M$r=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oZ=n(Rre,"A",{href:!0});var Bkt=s(oZ);E$r=r(Bkt,"from_pretrained()"),Bkt.forEach(t),C$r=r(Rre," to load the model weights."),Rre.forEach(t),w$r=i(HA),T(XC.$$.fragment,HA),HA.forEach(t),A$r=i(Xl),jr=n(Xl,"DIV",{class:!0});var zl=s(jr);T(Fx.$$.fragment,zl),L$r=i(zl),CEe=n(zl,"P",{});var Ikt=s(CEe);y$r=r(Ikt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ikt.forEach(t),x$r=i(zl),un=n(zl,"P",{});var UA=s(un);$$r=r(UA,"The model class to instantiate is selected based on the "),wEe=n(UA,"CODE",{});var Nkt=s(wEe);k$r=r(Nkt,"model_type"),Nkt.forEach(t),S$r=r(UA,` property of the config object (either
passed as an argument or loaded from `),AEe=n(UA,"CODE",{});var qkt=s(AEe);R$r=r(qkt,"pretrained_model_name_or_path"),qkt.forEach(t),P$r=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LEe=n(UA,"CODE",{});var jkt=s(LEe);B$r=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),I$r=r(UA,":"),UA.forEach(t),N$r=i(zl),ce=n(zl,"UL",{});var ge=s(ce);zC=n(ge,"LI",{});var cje=s(zC);yEe=n(cje,"STRONG",{});var Dkt=s(yEe);q$r=r(Dkt,"albert"),Dkt.forEach(t),j$r=r(cje," \u2014 "),rZ=n(cje,"A",{href:!0});var Gkt=s(rZ);D$r=r(Gkt,"TFAlbertForQuestionAnswering"),Gkt.forEach(t),G$r=r(cje," (ALBERT model)"),cje.forEach(t),O$r=i(ge),QC=n(ge,"LI",{});var fje=s(QC);xEe=n(fje,"STRONG",{});var Okt=s(xEe);V$r=r(Okt,"bert"),Okt.forEach(t),X$r=r(fje," \u2014 "),tZ=n(fje,"A",{href:!0});var Vkt=s(tZ);z$r=r(Vkt,"TFBertForQuestionAnswering"),Vkt.forEach(t),Q$r=r(fje," (BERT model)"),fje.forEach(t),W$r=i(ge),WC=n(ge,"LI",{});var mje=s(WC);$Ee=n(mje,"STRONG",{});var Xkt=s($Ee);H$r=r(Xkt,"camembert"),Xkt.forEach(t),U$r=r(mje," \u2014 "),aZ=n(mje,"A",{href:!0});var zkt=s(aZ);J$r=r(zkt,"TFCamembertForQuestionAnswering"),zkt.forEach(t),Y$r=r(mje," (CamemBERT model)"),mje.forEach(t),Z$r=i(ge),HC=n(ge,"LI",{});var gje=s(HC);kEe=n(gje,"STRONG",{});var Qkt=s(kEe);K$r=r(Qkt,"convbert"),Qkt.forEach(t),ekr=r(gje," \u2014 "),nZ=n(gje,"A",{href:!0});var Wkt=s(nZ);okr=r(Wkt,"TFConvBertForQuestionAnswering"),Wkt.forEach(t),rkr=r(gje," (ConvBERT model)"),gje.forEach(t),tkr=i(ge),UC=n(ge,"LI",{});var hje=s(UC);SEe=n(hje,"STRONG",{});var Hkt=s(SEe);akr=r(Hkt,"deberta"),Hkt.forEach(t),nkr=r(hje," \u2014 "),sZ=n(hje,"A",{href:!0});var Ukt=s(sZ);skr=r(Ukt,"TFDebertaForQuestionAnswering"),Ukt.forEach(t),lkr=r(hje," (DeBERTa model)"),hje.forEach(t),ikr=i(ge),JC=n(ge,"LI",{});var pje=s(JC);REe=n(pje,"STRONG",{});var Jkt=s(REe);dkr=r(Jkt,"deberta-v2"),Jkt.forEach(t),ckr=r(pje," \u2014 "),lZ=n(pje,"A",{href:!0});var Ykt=s(lZ);fkr=r(Ykt,"TFDebertaV2ForQuestionAnswering"),Ykt.forEach(t),mkr=r(pje," (DeBERTa-v2 model)"),pje.forEach(t),gkr=i(ge),YC=n(ge,"LI",{});var _je=s(YC);PEe=n(_je,"STRONG",{});var Zkt=s(PEe);hkr=r(Zkt,"distilbert"),Zkt.forEach(t),pkr=r(_je," \u2014 "),iZ=n(_je,"A",{href:!0});var Kkt=s(iZ);_kr=r(Kkt,"TFDistilBertForQuestionAnswering"),Kkt.forEach(t),ukr=r(_je," (DistilBERT model)"),_je.forEach(t),bkr=i(ge),ZC=n(ge,"LI",{});var uje=s(ZC);BEe=n(uje,"STRONG",{});var eSt=s(BEe);vkr=r(eSt,"electra"),eSt.forEach(t),Fkr=r(uje," \u2014 "),dZ=n(uje,"A",{href:!0});var oSt=s(dZ);Tkr=r(oSt,"TFElectraForQuestionAnswering"),oSt.forEach(t),Mkr=r(uje," (ELECTRA model)"),uje.forEach(t),Ekr=i(ge),KC=n(ge,"LI",{});var bje=s(KC);IEe=n(bje,"STRONG",{});var rSt=s(IEe);Ckr=r(rSt,"flaubert"),rSt.forEach(t),wkr=r(bje," \u2014 "),cZ=n(bje,"A",{href:!0});var tSt=s(cZ);Akr=r(tSt,"TFFlaubertForQuestionAnsweringSimple"),tSt.forEach(t),Lkr=r(bje," (FlauBERT model)"),bje.forEach(t),ykr=i(ge),e5=n(ge,"LI",{});var vje=s(e5);NEe=n(vje,"STRONG",{});var aSt=s(NEe);xkr=r(aSt,"funnel"),aSt.forEach(t),$kr=r(vje," \u2014 "),fZ=n(vje,"A",{href:!0});var nSt=s(fZ);kkr=r(nSt,"TFFunnelForQuestionAnswering"),nSt.forEach(t),Skr=r(vje," (Funnel Transformer model)"),vje.forEach(t),Rkr=i(ge),o5=n(ge,"LI",{});var Fje=s(o5);qEe=n(Fje,"STRONG",{});var sSt=s(qEe);Pkr=r(sSt,"gptj"),sSt.forEach(t),Bkr=r(Fje," \u2014 "),mZ=n(Fje,"A",{href:!0});var lSt=s(mZ);Ikr=r(lSt,"TFGPTJForQuestionAnswering"),lSt.forEach(t),Nkr=r(Fje," (GPT-J model)"),Fje.forEach(t),qkr=i(ge),r5=n(ge,"LI",{});var Tje=s(r5);jEe=n(Tje,"STRONG",{});var iSt=s(jEe);jkr=r(iSt,"longformer"),iSt.forEach(t),Dkr=r(Tje," \u2014 "),gZ=n(Tje,"A",{href:!0});var dSt=s(gZ);Gkr=r(dSt,"TFLongformerForQuestionAnswering"),dSt.forEach(t),Okr=r(Tje," (Longformer model)"),Tje.forEach(t),Vkr=i(ge),t5=n(ge,"LI",{});var Mje=s(t5);DEe=n(Mje,"STRONG",{});var cSt=s(DEe);Xkr=r(cSt,"mobilebert"),cSt.forEach(t),zkr=r(Mje," \u2014 "),hZ=n(Mje,"A",{href:!0});var fSt=s(hZ);Qkr=r(fSt,"TFMobileBertForQuestionAnswering"),fSt.forEach(t),Wkr=r(Mje," (MobileBERT model)"),Mje.forEach(t),Hkr=i(ge),a5=n(ge,"LI",{});var Eje=s(a5);GEe=n(Eje,"STRONG",{});var mSt=s(GEe);Ukr=r(mSt,"mpnet"),mSt.forEach(t),Jkr=r(Eje," \u2014 "),pZ=n(Eje,"A",{href:!0});var gSt=s(pZ);Ykr=r(gSt,"TFMPNetForQuestionAnswering"),gSt.forEach(t),Zkr=r(Eje," (MPNet model)"),Eje.forEach(t),Kkr=i(ge),n5=n(ge,"LI",{});var Cje=s(n5);OEe=n(Cje,"STRONG",{});var hSt=s(OEe);eSr=r(hSt,"rembert"),hSt.forEach(t),oSr=r(Cje," \u2014 "),_Z=n(Cje,"A",{href:!0});var pSt=s(_Z);rSr=r(pSt,"TFRemBertForQuestionAnswering"),pSt.forEach(t),tSr=r(Cje," (RemBERT model)"),Cje.forEach(t),aSr=i(ge),s5=n(ge,"LI",{});var wje=s(s5);VEe=n(wje,"STRONG",{});var _St=s(VEe);nSr=r(_St,"roberta"),_St.forEach(t),sSr=r(wje," \u2014 "),uZ=n(wje,"A",{href:!0});var uSt=s(uZ);lSr=r(uSt,"TFRobertaForQuestionAnswering"),uSt.forEach(t),iSr=r(wje," (RoBERTa model)"),wje.forEach(t),dSr=i(ge),l5=n(ge,"LI",{});var Aje=s(l5);XEe=n(Aje,"STRONG",{});var bSt=s(XEe);cSr=r(bSt,"roformer"),bSt.forEach(t),fSr=r(Aje," \u2014 "),bZ=n(Aje,"A",{href:!0});var vSt=s(bZ);mSr=r(vSt,"TFRoFormerForQuestionAnswering"),vSt.forEach(t),gSr=r(Aje," (RoFormer model)"),Aje.forEach(t),hSr=i(ge),i5=n(ge,"LI",{});var Lje=s(i5);zEe=n(Lje,"STRONG",{});var FSt=s(zEe);pSr=r(FSt,"xlm"),FSt.forEach(t),_Sr=r(Lje," \u2014 "),vZ=n(Lje,"A",{href:!0});var TSt=s(vZ);uSr=r(TSt,"TFXLMForQuestionAnsweringSimple"),TSt.forEach(t),bSr=r(Lje," (XLM model)"),Lje.forEach(t),vSr=i(ge),d5=n(ge,"LI",{});var yje=s(d5);QEe=n(yje,"STRONG",{});var MSt=s(QEe);FSr=r(MSt,"xlm-roberta"),MSt.forEach(t),TSr=r(yje," \u2014 "),FZ=n(yje,"A",{href:!0});var ESt=s(FZ);MSr=r(ESt,"TFXLMRobertaForQuestionAnswering"),ESt.forEach(t),ESr=r(yje," (XLM-RoBERTa model)"),yje.forEach(t),CSr=i(ge),c5=n(ge,"LI",{});var xje=s(c5);WEe=n(xje,"STRONG",{});var CSt=s(WEe);wSr=r(CSt,"xlnet"),CSt.forEach(t),ASr=r(xje," \u2014 "),TZ=n(xje,"A",{href:!0});var wSt=s(TZ);LSr=r(wSt,"TFXLNetForQuestionAnsweringSimple"),wSt.forEach(t),ySr=r(xje," (XLNet model)"),xje.forEach(t),ge.forEach(t),xSr=i(zl),T(f5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),fVe=i(f),Bc=n(f,"H2",{class:!0});var Fze=s(Bc);m5=n(Fze,"A",{id:!0,class:!0,href:!0});var ASt=s(m5);HEe=n(ASt,"SPAN",{});var LSt=s(HEe);T(Tx.$$.fragment,LSt),LSt.forEach(t),ASt.forEach(t),$Sr=i(Fze),UEe=n(Fze,"SPAN",{});var ySt=s(UEe);kSr=r(ySt,"TFAutoModelForVision2Seq"),ySt.forEach(t),Fze.forEach(t),mVe=i(f),mr=n(f,"DIV",{class:!0});var Ql=s(mr);T(Mx.$$.fragment,Ql),SSr=i(Ql),Ic=n(Ql,"P",{});var Pre=s(Ic);RSr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MZ=n(Pre,"A",{href:!0});var xSt=s(MZ);PSr=r(xSt,"from_pretrained()"),xSt.forEach(t),BSr=r(Pre," class method or the "),EZ=n(Pre,"A",{href:!0});var $St=s(EZ);ISr=r($St,"from_config()"),$St.forEach(t),NSr=r(Pre,` class
method.`),Pre.forEach(t),qSr=i(Ql),Ex=n(Ql,"P",{});var Tze=s(Ex);jSr=r(Tze,"This class cannot be instantiated directly using "),JEe=n(Tze,"CODE",{});var kSt=s(JEe);DSr=r(kSt,"__init__()"),kSt.forEach(t),GSr=r(Tze," (throws an error)."),Tze.forEach(t),OSr=i(Ql),Ot=n(Ql,"DIV",{class:!0});var JA=s(Ot);T(Cx.$$.fragment,JA),VSr=i(JA),YEe=n(JA,"P",{});var SSt=s(YEe);XSr=r(SSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SSt.forEach(t),zSr=i(JA),Nc=n(JA,"P",{});var Bre=s(Nc);QSr=r(Bre,`Note:
Loading a model from its configuration file does `),ZEe=n(Bre,"STRONG",{});var RSt=s(ZEe);WSr=r(RSt,"not"),RSt.forEach(t),HSr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CZ=n(Bre,"A",{href:!0});var PSt=s(CZ);USr=r(PSt,"from_pretrained()"),PSt.forEach(t),JSr=r(Bre," to load the model weights."),Bre.forEach(t),YSr=i(JA),T(g5.$$.fragment,JA),JA.forEach(t),ZSr=i(Ql),Dr=n(Ql,"DIV",{class:!0});var Wl=s(Dr);T(wx.$$.fragment,Wl),KSr=i(Wl),KEe=n(Wl,"P",{});var BSt=s(KEe);eRr=r(BSt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BSt.forEach(t),oRr=i(Wl),bn=n(Wl,"P",{});var YA=s(bn);rRr=r(YA,"The model class to instantiate is selected based on the "),e4e=n(YA,"CODE",{});var ISt=s(e4e);tRr=r(ISt,"model_type"),ISt.forEach(t),aRr=r(YA,` property of the config object (either
passed as an argument or loaded from `),o4e=n(YA,"CODE",{});var NSt=s(o4e);nRr=r(NSt,"pretrained_model_name_or_path"),NSt.forEach(t),sRr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(YA,"CODE",{});var qSt=s(r4e);lRr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),iRr=r(YA,":"),YA.forEach(t),dRr=i(Wl),t4e=n(Wl,"UL",{});var jSt=s(t4e);h5=n(jSt,"LI",{});var $je=s(h5);a4e=n($je,"STRONG",{});var DSt=s(a4e);cRr=r(DSt,"vision-encoder-decoder"),DSt.forEach(t),fRr=r($je," \u2014 "),wZ=n($je,"A",{href:!0});var GSt=s(wZ);mRr=r(GSt,"TFVisionEncoderDecoderModel"),GSt.forEach(t),gRr=r($je," (Vision Encoder decoder model)"),$je.forEach(t),jSt.forEach(t),hRr=i(Wl),T(p5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),gVe=i(f),qc=n(f,"H2",{class:!0});var Mze=s(qc);_5=n(Mze,"A",{id:!0,class:!0,href:!0});var OSt=s(_5);n4e=n(OSt,"SPAN",{});var VSt=s(n4e);T(Ax.$$.fragment,VSt),VSt.forEach(t),OSt.forEach(t),pRr=i(Mze),s4e=n(Mze,"SPAN",{});var XSt=s(s4e);_Rr=r(XSt,"TFAutoModelForSpeechSeq2Seq"),XSt.forEach(t),Mze.forEach(t),hVe=i(f),gr=n(f,"DIV",{class:!0});var Hl=s(gr);T(Lx.$$.fragment,Hl),uRr=i(Hl),jc=n(Hl,"P",{});var Ire=s(jc);bRr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),AZ=n(Ire,"A",{href:!0});var zSt=s(AZ);vRr=r(zSt,"from_pretrained()"),zSt.forEach(t),FRr=r(Ire," class method or the "),LZ=n(Ire,"A",{href:!0});var QSt=s(LZ);TRr=r(QSt,"from_config()"),QSt.forEach(t),MRr=r(Ire,` class
method.`),Ire.forEach(t),ERr=i(Hl),yx=n(Hl,"P",{});var Eze=s(yx);CRr=r(Eze,"This class cannot be instantiated directly using "),l4e=n(Eze,"CODE",{});var WSt=s(l4e);wRr=r(WSt,"__init__()"),WSt.forEach(t),ARr=r(Eze," (throws an error)."),Eze.forEach(t),LRr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var ZA=s(Vt);T(xx.$$.fragment,ZA),yRr=i(ZA),i4e=n(ZA,"P",{});var HSt=s(i4e);xRr=r(HSt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),HSt.forEach(t),$Rr=i(ZA),Dc=n(ZA,"P",{});var Nre=s(Dc);kRr=r(Nre,`Note:
Loading a model from its configuration file does `),d4e=n(Nre,"STRONG",{});var USt=s(d4e);SRr=r(USt,"not"),USt.forEach(t),RRr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(Nre,"A",{href:!0});var JSt=s(yZ);PRr=r(JSt,"from_pretrained()"),JSt.forEach(t),BRr=r(Nre," to load the model weights."),Nre.forEach(t),IRr=i(ZA),T(u5.$$.fragment,ZA),ZA.forEach(t),NRr=i(Hl),Gr=n(Hl,"DIV",{class:!0});var Ul=s(Gr);T($x.$$.fragment,Ul),qRr=i(Ul),c4e=n(Ul,"P",{});var YSt=s(c4e);jRr=r(YSt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YSt.forEach(t),DRr=i(Ul),vn=n(Ul,"P",{});var KA=s(vn);GRr=r(KA,"The model class to instantiate is selected based on the "),f4e=n(KA,"CODE",{});var ZSt=s(f4e);ORr=r(ZSt,"model_type"),ZSt.forEach(t),VRr=r(KA,` property of the config object (either
passed as an argument or loaded from `),m4e=n(KA,"CODE",{});var KSt=s(m4e);XRr=r(KSt,"pretrained_model_name_or_path"),KSt.forEach(t),zRr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g4e=n(KA,"CODE",{});var eRt=s(g4e);QRr=r(eRt,"pretrained_model_name_or_path"),eRt.forEach(t),WRr=r(KA,":"),KA.forEach(t),HRr=i(Ul),h4e=n(Ul,"UL",{});var oRt=s(h4e);b5=n(oRt,"LI",{});var kje=s(b5);p4e=n(kje,"STRONG",{});var rRt=s(p4e);URr=r(rRt,"speech_to_text"),rRt.forEach(t),JRr=r(kje," \u2014 "),xZ=n(kje,"A",{href:!0});var tRt=s(xZ);YRr=r(tRt,"TFSpeech2TextForConditionalGeneration"),tRt.forEach(t),ZRr=r(kje," (Speech2Text model)"),kje.forEach(t),oRt.forEach(t),KRr=i(Ul),T(v5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),pVe=i(f),Gc=n(f,"H2",{class:!0});var Cze=s(Gc);F5=n(Cze,"A",{id:!0,class:!0,href:!0});var aRt=s(F5);_4e=n(aRt,"SPAN",{});var nRt=s(_4e);T(kx.$$.fragment,nRt),nRt.forEach(t),aRt.forEach(t),ePr=i(Cze),u4e=n(Cze,"SPAN",{});var sRt=s(u4e);oPr=r(sRt,"FlaxAutoModel"),sRt.forEach(t),Cze.forEach(t),_Ve=i(f),hr=n(f,"DIV",{class:!0});var Jl=s(hr);T(Sx.$$.fragment,Jl),rPr=i(Jl),Oc=n(Jl,"P",{});var qre=s(Oc);tPr=r(qre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Z=n(qre,"A",{href:!0});var lRt=s($Z);aPr=r(lRt,"from_pretrained()"),lRt.forEach(t),nPr=r(qre," class method or the "),kZ=n(qre,"A",{href:!0});var iRt=s(kZ);sPr=r(iRt,"from_config()"),iRt.forEach(t),lPr=r(qre,` class
method.`),qre.forEach(t),iPr=i(Jl),Rx=n(Jl,"P",{});var wze=s(Rx);dPr=r(wze,"This class cannot be instantiated directly using "),b4e=n(wze,"CODE",{});var dRt=s(b4e);cPr=r(dRt,"__init__()"),dRt.forEach(t),fPr=r(wze," (throws an error)."),wze.forEach(t),mPr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var eL=s(Xt);T(Px.$$.fragment,eL),gPr=i(eL),v4e=n(eL,"P",{});var cRt=s(v4e);hPr=r(cRt,"Instantiates one of the base model classes of the library from a configuration."),cRt.forEach(t),pPr=i(eL),Vc=n(eL,"P",{});var jre=s(Vc);_Pr=r(jre,`Note:
Loading a model from its configuration file does `),F4e=n(jre,"STRONG",{});var fRt=s(F4e);uPr=r(fRt,"not"),fRt.forEach(t),bPr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(jre,"A",{href:!0});var mRt=s(SZ);vPr=r(mRt,"from_pretrained()"),mRt.forEach(t),FPr=r(jre," to load the model weights."),jre.forEach(t),TPr=i(eL),T(T5.$$.fragment,eL),eL.forEach(t),MPr=i(Jl),Or=n(Jl,"DIV",{class:!0});var Yl=s(Or);T(Bx.$$.fragment,Yl),EPr=i(Yl),T4e=n(Yl,"P",{});var gRt=s(T4e);CPr=r(gRt,"Instantiate one of the base model classes of the library from a pretrained model."),gRt.forEach(t),wPr=i(Yl),Fn=n(Yl,"P",{});var oL=s(Fn);APr=r(oL,"The model class to instantiate is selected based on the "),M4e=n(oL,"CODE",{});var hRt=s(M4e);LPr=r(hRt,"model_type"),hRt.forEach(t),yPr=r(oL,` property of the config object (either
passed as an argument or loaded from `),E4e=n(oL,"CODE",{});var pRt=s(E4e);xPr=r(pRt,"pretrained_model_name_or_path"),pRt.forEach(t),$Pr=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C4e=n(oL,"CODE",{});var _Rt=s(C4e);kPr=r(_Rt,"pretrained_model_name_or_path"),_Rt.forEach(t),SPr=r(oL,":"),oL.forEach(t),RPr=i(Yl),oe=n(Yl,"UL",{});var ae=s(oe);M5=n(ae,"LI",{});var Sje=s(M5);w4e=n(Sje,"STRONG",{});var uRt=s(w4e);PPr=r(uRt,"albert"),uRt.forEach(t),BPr=r(Sje," \u2014 "),RZ=n(Sje,"A",{href:!0});var bRt=s(RZ);IPr=r(bRt,"FlaxAlbertModel"),bRt.forEach(t),NPr=r(Sje," (ALBERT model)"),Sje.forEach(t),qPr=i(ae),E5=n(ae,"LI",{});var Rje=s(E5);A4e=n(Rje,"STRONG",{});var vRt=s(A4e);jPr=r(vRt,"bart"),vRt.forEach(t),DPr=r(Rje," \u2014 "),PZ=n(Rje,"A",{href:!0});var FRt=s(PZ);GPr=r(FRt,"FlaxBartModel"),FRt.forEach(t),OPr=r(Rje," (BART model)"),Rje.forEach(t),VPr=i(ae),C5=n(ae,"LI",{});var Pje=s(C5);L4e=n(Pje,"STRONG",{});var TRt=s(L4e);XPr=r(TRt,"beit"),TRt.forEach(t),zPr=r(Pje," \u2014 "),BZ=n(Pje,"A",{href:!0});var MRt=s(BZ);QPr=r(MRt,"FlaxBeitModel"),MRt.forEach(t),WPr=r(Pje," (BEiT model)"),Pje.forEach(t),HPr=i(ae),w5=n(ae,"LI",{});var Bje=s(w5);y4e=n(Bje,"STRONG",{});var ERt=s(y4e);UPr=r(ERt,"bert"),ERt.forEach(t),JPr=r(Bje," \u2014 "),IZ=n(Bje,"A",{href:!0});var CRt=s(IZ);YPr=r(CRt,"FlaxBertModel"),CRt.forEach(t),ZPr=r(Bje," (BERT model)"),Bje.forEach(t),KPr=i(ae),A5=n(ae,"LI",{});var Ije=s(A5);x4e=n(Ije,"STRONG",{});var wRt=s(x4e);eBr=r(wRt,"big_bird"),wRt.forEach(t),oBr=r(Ije," \u2014 "),NZ=n(Ije,"A",{href:!0});var ARt=s(NZ);rBr=r(ARt,"FlaxBigBirdModel"),ARt.forEach(t),tBr=r(Ije," (BigBird model)"),Ije.forEach(t),aBr=i(ae),L5=n(ae,"LI",{});var Nje=s(L5);$4e=n(Nje,"STRONG",{});var LRt=s($4e);nBr=r(LRt,"blenderbot"),LRt.forEach(t),sBr=r(Nje," \u2014 "),qZ=n(Nje,"A",{href:!0});var yRt=s(qZ);lBr=r(yRt,"FlaxBlenderbotModel"),yRt.forEach(t),iBr=r(Nje," (Blenderbot model)"),Nje.forEach(t),dBr=i(ae),y5=n(ae,"LI",{});var qje=s(y5);k4e=n(qje,"STRONG",{});var xRt=s(k4e);cBr=r(xRt,"blenderbot-small"),xRt.forEach(t),fBr=r(qje," \u2014 "),jZ=n(qje,"A",{href:!0});var $Rt=s(jZ);mBr=r($Rt,"FlaxBlenderbotSmallModel"),$Rt.forEach(t),gBr=r(qje," (BlenderbotSmall model)"),qje.forEach(t),hBr=i(ae),x5=n(ae,"LI",{});var jje=s(x5);S4e=n(jje,"STRONG",{});var kRt=s(S4e);pBr=r(kRt,"clip"),kRt.forEach(t),_Br=r(jje," \u2014 "),DZ=n(jje,"A",{href:!0});var SRt=s(DZ);uBr=r(SRt,"FlaxCLIPModel"),SRt.forEach(t),bBr=r(jje," (CLIP model)"),jje.forEach(t),vBr=i(ae),$5=n(ae,"LI",{});var Dje=s($5);R4e=n(Dje,"STRONG",{});var RRt=s(R4e);FBr=r(RRt,"distilbert"),RRt.forEach(t),TBr=r(Dje," \u2014 "),GZ=n(Dje,"A",{href:!0});var PRt=s(GZ);MBr=r(PRt,"FlaxDistilBertModel"),PRt.forEach(t),EBr=r(Dje," (DistilBERT model)"),Dje.forEach(t),CBr=i(ae),k5=n(ae,"LI",{});var Gje=s(k5);P4e=n(Gje,"STRONG",{});var BRt=s(P4e);wBr=r(BRt,"electra"),BRt.forEach(t),ABr=r(Gje," \u2014 "),OZ=n(Gje,"A",{href:!0});var IRt=s(OZ);LBr=r(IRt,"FlaxElectraModel"),IRt.forEach(t),yBr=r(Gje," (ELECTRA model)"),Gje.forEach(t),xBr=i(ae),S5=n(ae,"LI",{});var Oje=s(S5);B4e=n(Oje,"STRONG",{});var NRt=s(B4e);$Br=r(NRt,"gpt2"),NRt.forEach(t),kBr=r(Oje," \u2014 "),VZ=n(Oje,"A",{href:!0});var qRt=s(VZ);SBr=r(qRt,"FlaxGPT2Model"),qRt.forEach(t),RBr=r(Oje," (OpenAI GPT-2 model)"),Oje.forEach(t),PBr=i(ae),R5=n(ae,"LI",{});var Vje=s(R5);I4e=n(Vje,"STRONG",{});var jRt=s(I4e);BBr=r(jRt,"gpt_neo"),jRt.forEach(t),IBr=r(Vje," \u2014 "),XZ=n(Vje,"A",{href:!0});var DRt=s(XZ);NBr=r(DRt,"FlaxGPTNeoModel"),DRt.forEach(t),qBr=r(Vje," (GPT Neo model)"),Vje.forEach(t),jBr=i(ae),P5=n(ae,"LI",{});var Xje=s(P5);N4e=n(Xje,"STRONG",{});var GRt=s(N4e);DBr=r(GRt,"gptj"),GRt.forEach(t),GBr=r(Xje," \u2014 "),zZ=n(Xje,"A",{href:!0});var ORt=s(zZ);OBr=r(ORt,"FlaxGPTJModel"),ORt.forEach(t),VBr=r(Xje," (GPT-J model)"),Xje.forEach(t),XBr=i(ae),B5=n(ae,"LI",{});var zje=s(B5);q4e=n(zje,"STRONG",{});var VRt=s(q4e);zBr=r(VRt,"longt5"),VRt.forEach(t),QBr=r(zje," \u2014 "),QZ=n(zje,"A",{href:!0});var XRt=s(QZ);WBr=r(XRt,"FlaxLongT5Model"),XRt.forEach(t),HBr=r(zje," (LongT5 model)"),zje.forEach(t),UBr=i(ae),I5=n(ae,"LI",{});var Qje=s(I5);j4e=n(Qje,"STRONG",{});var zRt=s(j4e);JBr=r(zRt,"marian"),zRt.forEach(t),YBr=r(Qje," \u2014 "),WZ=n(Qje,"A",{href:!0});var QRt=s(WZ);ZBr=r(QRt,"FlaxMarianModel"),QRt.forEach(t),KBr=r(Qje," (Marian model)"),Qje.forEach(t),eIr=i(ae),N5=n(ae,"LI",{});var Wje=s(N5);D4e=n(Wje,"STRONG",{});var WRt=s(D4e);oIr=r(WRt,"mbart"),WRt.forEach(t),rIr=r(Wje," \u2014 "),HZ=n(Wje,"A",{href:!0});var HRt=s(HZ);tIr=r(HRt,"FlaxMBartModel"),HRt.forEach(t),aIr=r(Wje," (mBART model)"),Wje.forEach(t),nIr=i(ae),q5=n(ae,"LI",{});var Hje=s(q5);G4e=n(Hje,"STRONG",{});var URt=s(G4e);sIr=r(URt,"mt5"),URt.forEach(t),lIr=r(Hje," \u2014 "),UZ=n(Hje,"A",{href:!0});var JRt=s(UZ);iIr=r(JRt,"FlaxMT5Model"),JRt.forEach(t),dIr=r(Hje," (MT5 model)"),Hje.forEach(t),cIr=i(ae),j5=n(ae,"LI",{});var Uje=s(j5);O4e=n(Uje,"STRONG",{});var YRt=s(O4e);fIr=r(YRt,"opt"),YRt.forEach(t),mIr=r(Uje," \u2014 "),JZ=n(Uje,"A",{href:!0});var ZRt=s(JZ);gIr=r(ZRt,"FlaxOPTModel"),ZRt.forEach(t),hIr=r(Uje," (OPT model)"),Uje.forEach(t),pIr=i(ae),D5=n(ae,"LI",{});var Jje=s(D5);V4e=n(Jje,"STRONG",{});var KRt=s(V4e);_Ir=r(KRt,"pegasus"),KRt.forEach(t),uIr=r(Jje," \u2014 "),YZ=n(Jje,"A",{href:!0});var ePt=s(YZ);bIr=r(ePt,"FlaxPegasusModel"),ePt.forEach(t),vIr=r(Jje," (Pegasus model)"),Jje.forEach(t),FIr=i(ae),G5=n(ae,"LI",{});var Yje=s(G5);X4e=n(Yje,"STRONG",{});var oPt=s(X4e);TIr=r(oPt,"roberta"),oPt.forEach(t),MIr=r(Yje," \u2014 "),ZZ=n(Yje,"A",{href:!0});var rPt=s(ZZ);EIr=r(rPt,"FlaxRobertaModel"),rPt.forEach(t),CIr=r(Yje," (RoBERTa model)"),Yje.forEach(t),wIr=i(ae),O5=n(ae,"LI",{});var Zje=s(O5);z4e=n(Zje,"STRONG",{});var tPt=s(z4e);AIr=r(tPt,"roformer"),tPt.forEach(t),LIr=r(Zje," \u2014 "),KZ=n(Zje,"A",{href:!0});var aPt=s(KZ);yIr=r(aPt,"FlaxRoFormerModel"),aPt.forEach(t),xIr=r(Zje," (RoFormer model)"),Zje.forEach(t),$Ir=i(ae),V5=n(ae,"LI",{});var Kje=s(V5);Q4e=n(Kje,"STRONG",{});var nPt=s(Q4e);kIr=r(nPt,"t5"),nPt.forEach(t),SIr=r(Kje," \u2014 "),eK=n(Kje,"A",{href:!0});var sPt=s(eK);RIr=r(sPt,"FlaxT5Model"),sPt.forEach(t),PIr=r(Kje," (T5 model)"),Kje.forEach(t),BIr=i(ae),X5=n(ae,"LI",{});var eDe=s(X5);W4e=n(eDe,"STRONG",{});var lPt=s(W4e);IIr=r(lPt,"vision-text-dual-encoder"),lPt.forEach(t),NIr=r(eDe," \u2014 "),oK=n(eDe,"A",{href:!0});var iPt=s(oK);qIr=r(iPt,"FlaxVisionTextDualEncoderModel"),iPt.forEach(t),jIr=r(eDe," (VisionTextDualEncoder model)"),eDe.forEach(t),DIr=i(ae),z5=n(ae,"LI",{});var oDe=s(z5);H4e=n(oDe,"STRONG",{});var dPt=s(H4e);GIr=r(dPt,"vit"),dPt.forEach(t),OIr=r(oDe," \u2014 "),rK=n(oDe,"A",{href:!0});var cPt=s(rK);VIr=r(cPt,"FlaxViTModel"),cPt.forEach(t),XIr=r(oDe," (ViT model)"),oDe.forEach(t),zIr=i(ae),Q5=n(ae,"LI",{});var rDe=s(Q5);U4e=n(rDe,"STRONG",{});var fPt=s(U4e);QIr=r(fPt,"wav2vec2"),fPt.forEach(t),WIr=r(rDe," \u2014 "),tK=n(rDe,"A",{href:!0});var mPt=s(tK);HIr=r(mPt,"FlaxWav2Vec2Model"),mPt.forEach(t),UIr=r(rDe," (Wav2Vec2 model)"),rDe.forEach(t),JIr=i(ae),W5=n(ae,"LI",{});var tDe=s(W5);J4e=n(tDe,"STRONG",{});var gPt=s(J4e);YIr=r(gPt,"xglm"),gPt.forEach(t),ZIr=r(tDe," \u2014 "),aK=n(tDe,"A",{href:!0});var hPt=s(aK);KIr=r(hPt,"FlaxXGLMModel"),hPt.forEach(t),eNr=r(tDe," (XGLM model)"),tDe.forEach(t),oNr=i(ae),H5=n(ae,"LI",{});var aDe=s(H5);Y4e=n(aDe,"STRONG",{});var pPt=s(Y4e);rNr=r(pPt,"xlm-roberta"),pPt.forEach(t),tNr=r(aDe," \u2014 "),nK=n(aDe,"A",{href:!0});var _Pt=s(nK);aNr=r(_Pt,"FlaxXLMRobertaModel"),_Pt.forEach(t),nNr=r(aDe," (XLM-RoBERTa model)"),aDe.forEach(t),ae.forEach(t),sNr=i(Yl),T(U5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),uVe=i(f),Xc=n(f,"H2",{class:!0});var Aze=s(Xc);J5=n(Aze,"A",{id:!0,class:!0,href:!0});var uPt=s(J5);Z4e=n(uPt,"SPAN",{});var bPt=s(Z4e);T(Ix.$$.fragment,bPt),bPt.forEach(t),uPt.forEach(t),lNr=i(Aze),K4e=n(Aze,"SPAN",{});var vPt=s(K4e);iNr=r(vPt,"FlaxAutoModelForCausalLM"),vPt.forEach(t),Aze.forEach(t),bVe=i(f),pr=n(f,"DIV",{class:!0});var Zl=s(pr);T(Nx.$$.fragment,Zl),dNr=i(Zl),zc=n(Zl,"P",{});var Dre=s(zc);cNr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sK=n(Dre,"A",{href:!0});var FPt=s(sK);fNr=r(FPt,"from_pretrained()"),FPt.forEach(t),mNr=r(Dre," class method or the "),lK=n(Dre,"A",{href:!0});var TPt=s(lK);gNr=r(TPt,"from_config()"),TPt.forEach(t),hNr=r(Dre,` class
method.`),Dre.forEach(t),pNr=i(Zl),qx=n(Zl,"P",{});var Lze=s(qx);_Nr=r(Lze,"This class cannot be instantiated directly using "),eCe=n(Lze,"CODE",{});var MPt=s(eCe);uNr=r(MPt,"__init__()"),MPt.forEach(t),bNr=r(Lze," (throws an error)."),Lze.forEach(t),vNr=i(Zl),zt=n(Zl,"DIV",{class:!0});var rL=s(zt);T(jx.$$.fragment,rL),FNr=i(rL),oCe=n(rL,"P",{});var EPt=s(oCe);TNr=r(EPt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EPt.forEach(t),MNr=i(rL),Qc=n(rL,"P",{});var Gre=s(Qc);ENr=r(Gre,`Note:
Loading a model from its configuration file does `),rCe=n(Gre,"STRONG",{});var CPt=s(rCe);CNr=r(CPt,"not"),CPt.forEach(t),wNr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(Gre,"A",{href:!0});var wPt=s(iK);ANr=r(wPt,"from_pretrained()"),wPt.forEach(t),LNr=r(Gre," to load the model weights."),Gre.forEach(t),yNr=i(rL),T(Y5.$$.fragment,rL),rL.forEach(t),xNr=i(Zl),Vr=n(Zl,"DIV",{class:!0});var Kl=s(Vr);T(Dx.$$.fragment,Kl),$Nr=i(Kl),tCe=n(Kl,"P",{});var APt=s(tCe);kNr=r(APt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),APt.forEach(t),SNr=i(Kl),Tn=n(Kl,"P",{});var tL=s(Tn);RNr=r(tL,"The model class to instantiate is selected based on the "),aCe=n(tL,"CODE",{});var LPt=s(aCe);PNr=r(LPt,"model_type"),LPt.forEach(t),BNr=r(tL,` property of the config object (either
passed as an argument or loaded from `),nCe=n(tL,"CODE",{});var yPt=s(nCe);INr=r(yPt,"pretrained_model_name_or_path"),yPt.forEach(t),NNr=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=n(tL,"CODE",{});var xPt=s(sCe);qNr=r(xPt,"pretrained_model_name_or_path"),xPt.forEach(t),jNr=r(tL,":"),tL.forEach(t),DNr=i(Kl),xe=n(Kl,"UL",{});var Ne=s(xe);Z5=n(Ne,"LI",{});var nDe=s(Z5);lCe=n(nDe,"STRONG",{});var $Pt=s(lCe);GNr=r($Pt,"bart"),$Pt.forEach(t),ONr=r(nDe," \u2014 "),dK=n(nDe,"A",{href:!0});var kPt=s(dK);VNr=r(kPt,"FlaxBartForCausalLM"),kPt.forEach(t),XNr=r(nDe," (BART model)"),nDe.forEach(t),zNr=i(Ne),K5=n(Ne,"LI",{});var sDe=s(K5);iCe=n(sDe,"STRONG",{});var SPt=s(iCe);QNr=r(SPt,"bert"),SPt.forEach(t),WNr=r(sDe," \u2014 "),cK=n(sDe,"A",{href:!0});var RPt=s(cK);HNr=r(RPt,"FlaxBertForCausalLM"),RPt.forEach(t),UNr=r(sDe," (BERT model)"),sDe.forEach(t),JNr=i(Ne),e3=n(Ne,"LI",{});var lDe=s(e3);dCe=n(lDe,"STRONG",{});var PPt=s(dCe);YNr=r(PPt,"big_bird"),PPt.forEach(t),ZNr=r(lDe," \u2014 "),fK=n(lDe,"A",{href:!0});var BPt=s(fK);KNr=r(BPt,"FlaxBigBirdForCausalLM"),BPt.forEach(t),eqr=r(lDe," (BigBird model)"),lDe.forEach(t),oqr=i(Ne),o3=n(Ne,"LI",{});var iDe=s(o3);cCe=n(iDe,"STRONG",{});var IPt=s(cCe);rqr=r(IPt,"electra"),IPt.forEach(t),tqr=r(iDe," \u2014 "),mK=n(iDe,"A",{href:!0});var NPt=s(mK);aqr=r(NPt,"FlaxElectraForCausalLM"),NPt.forEach(t),nqr=r(iDe," (ELECTRA model)"),iDe.forEach(t),sqr=i(Ne),r3=n(Ne,"LI",{});var dDe=s(r3);fCe=n(dDe,"STRONG",{});var qPt=s(fCe);lqr=r(qPt,"gpt2"),qPt.forEach(t),iqr=r(dDe," \u2014 "),gK=n(dDe,"A",{href:!0});var jPt=s(gK);dqr=r(jPt,"FlaxGPT2LMHeadModel"),jPt.forEach(t),cqr=r(dDe," (OpenAI GPT-2 model)"),dDe.forEach(t),fqr=i(Ne),t3=n(Ne,"LI",{});var cDe=s(t3);mCe=n(cDe,"STRONG",{});var DPt=s(mCe);mqr=r(DPt,"gpt_neo"),DPt.forEach(t),gqr=r(cDe," \u2014 "),hK=n(cDe,"A",{href:!0});var GPt=s(hK);hqr=r(GPt,"FlaxGPTNeoForCausalLM"),GPt.forEach(t),pqr=r(cDe," (GPT Neo model)"),cDe.forEach(t),_qr=i(Ne),a3=n(Ne,"LI",{});var fDe=s(a3);gCe=n(fDe,"STRONG",{});var OPt=s(gCe);uqr=r(OPt,"gptj"),OPt.forEach(t),bqr=r(fDe," \u2014 "),pK=n(fDe,"A",{href:!0});var VPt=s(pK);vqr=r(VPt,"FlaxGPTJForCausalLM"),VPt.forEach(t),Fqr=r(fDe," (GPT-J model)"),fDe.forEach(t),Tqr=i(Ne),n3=n(Ne,"LI",{});var mDe=s(n3);hCe=n(mDe,"STRONG",{});var XPt=s(hCe);Mqr=r(XPt,"opt"),XPt.forEach(t),Eqr=r(mDe," \u2014 "),_K=n(mDe,"A",{href:!0});var zPt=s(_K);Cqr=r(zPt,"FlaxOPTForCausalLM"),zPt.forEach(t),wqr=r(mDe," (OPT model)"),mDe.forEach(t),Aqr=i(Ne),s3=n(Ne,"LI",{});var gDe=s(s3);pCe=n(gDe,"STRONG",{});var QPt=s(pCe);Lqr=r(QPt,"roberta"),QPt.forEach(t),yqr=r(gDe," \u2014 "),uK=n(gDe,"A",{href:!0});var WPt=s(uK);xqr=r(WPt,"FlaxRobertaForCausalLM"),WPt.forEach(t),$qr=r(gDe," (RoBERTa model)"),gDe.forEach(t),kqr=i(Ne),l3=n(Ne,"LI",{});var hDe=s(l3);_Ce=n(hDe,"STRONG",{});var HPt=s(_Ce);Sqr=r(HPt,"xglm"),HPt.forEach(t),Rqr=r(hDe," \u2014 "),bK=n(hDe,"A",{href:!0});var UPt=s(bK);Pqr=r(UPt,"FlaxXGLMForCausalLM"),UPt.forEach(t),Bqr=r(hDe," (XGLM model)"),hDe.forEach(t),Ne.forEach(t),Iqr=i(Kl),T(i3.$$.fragment,Kl),Kl.forEach(t),Zl.forEach(t),vVe=i(f),Wc=n(f,"H2",{class:!0});var yze=s(Wc);d3=n(yze,"A",{id:!0,class:!0,href:!0});var JPt=s(d3);uCe=n(JPt,"SPAN",{});var YPt=s(uCe);T(Gx.$$.fragment,YPt),YPt.forEach(t),JPt.forEach(t),Nqr=i(yze),bCe=n(yze,"SPAN",{});var ZPt=s(bCe);qqr=r(ZPt,"FlaxAutoModelForPreTraining"),ZPt.forEach(t),yze.forEach(t),FVe=i(f),_r=n(f,"DIV",{class:!0});var ei=s(_r);T(Ox.$$.fragment,ei),jqr=i(ei),Hc=n(ei,"P",{});var Ore=s(Hc);Dqr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vK=n(Ore,"A",{href:!0});var KPt=s(vK);Gqr=r(KPt,"from_pretrained()"),KPt.forEach(t),Oqr=r(Ore," class method or the "),FK=n(Ore,"A",{href:!0});var eBt=s(FK);Vqr=r(eBt,"from_config()"),eBt.forEach(t),Xqr=r(Ore,` class
method.`),Ore.forEach(t),zqr=i(ei),Vx=n(ei,"P",{});var xze=s(Vx);Qqr=r(xze,"This class cannot be instantiated directly using "),vCe=n(xze,"CODE",{});var oBt=s(vCe);Wqr=r(oBt,"__init__()"),oBt.forEach(t),Hqr=r(xze," (throws an error)."),xze.forEach(t),Uqr=i(ei),Qt=n(ei,"DIV",{class:!0});var aL=s(Qt);T(Xx.$$.fragment,aL),Jqr=i(aL),FCe=n(aL,"P",{});var rBt=s(FCe);Yqr=r(rBt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rBt.forEach(t),Zqr=i(aL),Uc=n(aL,"P",{});var Vre=s(Uc);Kqr=r(Vre,`Note:
Loading a model from its configuration file does `),TCe=n(Vre,"STRONG",{});var tBt=s(TCe);ejr=r(tBt,"not"),tBt.forEach(t),ojr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(Vre,"A",{href:!0});var aBt=s(TK);rjr=r(aBt,"from_pretrained()"),aBt.forEach(t),tjr=r(Vre," to load the model weights."),Vre.forEach(t),ajr=i(aL),T(c3.$$.fragment,aL),aL.forEach(t),njr=i(ei),Xr=n(ei,"DIV",{class:!0});var oi=s(Xr);T(zx.$$.fragment,oi),sjr=i(oi),MCe=n(oi,"P",{});var nBt=s(MCe);ljr=r(nBt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nBt.forEach(t),ijr=i(oi),Mn=n(oi,"P",{});var nL=s(Mn);djr=r(nL,"The model class to instantiate is selected based on the "),ECe=n(nL,"CODE",{});var sBt=s(ECe);cjr=r(sBt,"model_type"),sBt.forEach(t),fjr=r(nL,` property of the config object (either
passed as an argument or loaded from `),CCe=n(nL,"CODE",{});var lBt=s(CCe);mjr=r(lBt,"pretrained_model_name_or_path"),lBt.forEach(t),gjr=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wCe=n(nL,"CODE",{});var iBt=s(wCe);hjr=r(iBt,"pretrained_model_name_or_path"),iBt.forEach(t),pjr=r(nL,":"),nL.forEach(t),_jr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);f3=n(we,"LI",{});var pDe=s(f3);ACe=n(pDe,"STRONG",{});var dBt=s(ACe);ujr=r(dBt,"albert"),dBt.forEach(t),bjr=r(pDe," \u2014 "),MK=n(pDe,"A",{href:!0});var cBt=s(MK);vjr=r(cBt,"FlaxAlbertForPreTraining"),cBt.forEach(t),Fjr=r(pDe," (ALBERT model)"),pDe.forEach(t),Tjr=i(we),m3=n(we,"LI",{});var _De=s(m3);LCe=n(_De,"STRONG",{});var fBt=s(LCe);Mjr=r(fBt,"bart"),fBt.forEach(t),Ejr=r(_De," \u2014 "),EK=n(_De,"A",{href:!0});var mBt=s(EK);Cjr=r(mBt,"FlaxBartForConditionalGeneration"),mBt.forEach(t),wjr=r(_De," (BART model)"),_De.forEach(t),Ajr=i(we),g3=n(we,"LI",{});var uDe=s(g3);yCe=n(uDe,"STRONG",{});var gBt=s(yCe);Ljr=r(gBt,"bert"),gBt.forEach(t),yjr=r(uDe," \u2014 "),CK=n(uDe,"A",{href:!0});var hBt=s(CK);xjr=r(hBt,"FlaxBertForPreTraining"),hBt.forEach(t),$jr=r(uDe," (BERT model)"),uDe.forEach(t),kjr=i(we),h3=n(we,"LI",{});var bDe=s(h3);xCe=n(bDe,"STRONG",{});var pBt=s(xCe);Sjr=r(pBt,"big_bird"),pBt.forEach(t),Rjr=r(bDe," \u2014 "),wK=n(bDe,"A",{href:!0});var _Bt=s(wK);Pjr=r(_Bt,"FlaxBigBirdForPreTraining"),_Bt.forEach(t),Bjr=r(bDe," (BigBird model)"),bDe.forEach(t),Ijr=i(we),p3=n(we,"LI",{});var vDe=s(p3);$Ce=n(vDe,"STRONG",{});var uBt=s($Ce);Njr=r(uBt,"electra"),uBt.forEach(t),qjr=r(vDe," \u2014 "),AK=n(vDe,"A",{href:!0});var bBt=s(AK);jjr=r(bBt,"FlaxElectraForPreTraining"),bBt.forEach(t),Djr=r(vDe," (ELECTRA model)"),vDe.forEach(t),Gjr=i(we),_3=n(we,"LI",{});var FDe=s(_3);kCe=n(FDe,"STRONG",{});var vBt=s(kCe);Ojr=r(vBt,"longt5"),vBt.forEach(t),Vjr=r(FDe," \u2014 "),LK=n(FDe,"A",{href:!0});var FBt=s(LK);Xjr=r(FBt,"FlaxLongT5ForConditionalGeneration"),FBt.forEach(t),zjr=r(FDe," (LongT5 model)"),FDe.forEach(t),Qjr=i(we),u3=n(we,"LI",{});var TDe=s(u3);SCe=n(TDe,"STRONG",{});var TBt=s(SCe);Wjr=r(TBt,"mbart"),TBt.forEach(t),Hjr=r(TDe," \u2014 "),yK=n(TDe,"A",{href:!0});var MBt=s(yK);Ujr=r(MBt,"FlaxMBartForConditionalGeneration"),MBt.forEach(t),Jjr=r(TDe," (mBART model)"),TDe.forEach(t),Yjr=i(we),b3=n(we,"LI",{});var MDe=s(b3);RCe=n(MDe,"STRONG",{});var EBt=s(RCe);Zjr=r(EBt,"mt5"),EBt.forEach(t),Kjr=r(MDe," \u2014 "),xK=n(MDe,"A",{href:!0});var CBt=s(xK);eDr=r(CBt,"FlaxMT5ForConditionalGeneration"),CBt.forEach(t),oDr=r(MDe," (MT5 model)"),MDe.forEach(t),rDr=i(we),v3=n(we,"LI",{});var EDe=s(v3);PCe=n(EDe,"STRONG",{});var wBt=s(PCe);tDr=r(wBt,"roberta"),wBt.forEach(t),aDr=r(EDe," \u2014 "),$K=n(EDe,"A",{href:!0});var ABt=s($K);nDr=r(ABt,"FlaxRobertaForMaskedLM"),ABt.forEach(t),sDr=r(EDe," (RoBERTa model)"),EDe.forEach(t),lDr=i(we),F3=n(we,"LI",{});var CDe=s(F3);BCe=n(CDe,"STRONG",{});var LBt=s(BCe);iDr=r(LBt,"roformer"),LBt.forEach(t),dDr=r(CDe," \u2014 "),kK=n(CDe,"A",{href:!0});var yBt=s(kK);cDr=r(yBt,"FlaxRoFormerForMaskedLM"),yBt.forEach(t),fDr=r(CDe," (RoFormer model)"),CDe.forEach(t),mDr=i(we),T3=n(we,"LI",{});var wDe=s(T3);ICe=n(wDe,"STRONG",{});var xBt=s(ICe);gDr=r(xBt,"t5"),xBt.forEach(t),hDr=r(wDe," \u2014 "),SK=n(wDe,"A",{href:!0});var $Bt=s(SK);pDr=r($Bt,"FlaxT5ForConditionalGeneration"),$Bt.forEach(t),_Dr=r(wDe," (T5 model)"),wDe.forEach(t),uDr=i(we),M3=n(we,"LI",{});var ADe=s(M3);NCe=n(ADe,"STRONG",{});var kBt=s(NCe);bDr=r(kBt,"wav2vec2"),kBt.forEach(t),vDr=r(ADe," \u2014 "),RK=n(ADe,"A",{href:!0});var SBt=s(RK);FDr=r(SBt,"FlaxWav2Vec2ForPreTraining"),SBt.forEach(t),TDr=r(ADe," (Wav2Vec2 model)"),ADe.forEach(t),MDr=i(we),E3=n(we,"LI",{});var LDe=s(E3);qCe=n(LDe,"STRONG",{});var RBt=s(qCe);EDr=r(RBt,"xlm-roberta"),RBt.forEach(t),CDr=r(LDe," \u2014 "),PK=n(LDe,"A",{href:!0});var PBt=s(PK);wDr=r(PBt,"FlaxXLMRobertaForMaskedLM"),PBt.forEach(t),ADr=r(LDe," (XLM-RoBERTa model)"),LDe.forEach(t),we.forEach(t),LDr=i(oi),T(C3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),TVe=i(f),Jc=n(f,"H2",{class:!0});var $ze=s(Jc);w3=n($ze,"A",{id:!0,class:!0,href:!0});var BBt=s(w3);jCe=n(BBt,"SPAN",{});var IBt=s(jCe);T(Qx.$$.fragment,IBt),IBt.forEach(t),BBt.forEach(t),yDr=i($ze),DCe=n($ze,"SPAN",{});var NBt=s(DCe);xDr=r(NBt,"FlaxAutoModelForMaskedLM"),NBt.forEach(t),$ze.forEach(t),MVe=i(f),ur=n(f,"DIV",{class:!0});var ri=s(ur);T(Wx.$$.fragment,ri),$Dr=i(ri),Yc=n(ri,"P",{});var Xre=s(Yc);kDr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BK=n(Xre,"A",{href:!0});var qBt=s(BK);SDr=r(qBt,"from_pretrained()"),qBt.forEach(t),RDr=r(Xre," class method or the "),IK=n(Xre,"A",{href:!0});var jBt=s(IK);PDr=r(jBt,"from_config()"),jBt.forEach(t),BDr=r(Xre,` class
method.`),Xre.forEach(t),IDr=i(ri),Hx=n(ri,"P",{});var kze=s(Hx);NDr=r(kze,"This class cannot be instantiated directly using "),GCe=n(kze,"CODE",{});var DBt=s(GCe);qDr=r(DBt,"__init__()"),DBt.forEach(t),jDr=r(kze," (throws an error)."),kze.forEach(t),DDr=i(ri),Wt=n(ri,"DIV",{class:!0});var sL=s(Wt);T(Ux.$$.fragment,sL),GDr=i(sL),OCe=n(sL,"P",{});var GBt=s(OCe);ODr=r(GBt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GBt.forEach(t),VDr=i(sL),Zc=n(sL,"P",{});var zre=s(Zc);XDr=r(zre,`Note:
Loading a model from its configuration file does `),VCe=n(zre,"STRONG",{});var OBt=s(VCe);zDr=r(OBt,"not"),OBt.forEach(t),QDr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(zre,"A",{href:!0});var VBt=s(NK);WDr=r(VBt,"from_pretrained()"),VBt.forEach(t),HDr=r(zre," to load the model weights."),zre.forEach(t),UDr=i(sL),T(A3.$$.fragment,sL),sL.forEach(t),JDr=i(ri),zr=n(ri,"DIV",{class:!0});var ti=s(zr);T(Jx.$$.fragment,ti),YDr=i(ti),XCe=n(ti,"P",{});var XBt=s(XCe);ZDr=r(XBt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XBt.forEach(t),KDr=i(ti),En=n(ti,"P",{});var lL=s(En);eGr=r(lL,"The model class to instantiate is selected based on the "),zCe=n(lL,"CODE",{});var zBt=s(zCe);oGr=r(zBt,"model_type"),zBt.forEach(t),rGr=r(lL,` property of the config object (either
passed as an argument or loaded from `),QCe=n(lL,"CODE",{});var QBt=s(QCe);tGr=r(QBt,"pretrained_model_name_or_path"),QBt.forEach(t),aGr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WCe=n(lL,"CODE",{});var WBt=s(WCe);nGr=r(WBt,"pretrained_model_name_or_path"),WBt.forEach(t),sGr=r(lL,":"),lL.forEach(t),lGr=i(ti),$e=n(ti,"UL",{});var qe=s($e);L3=n(qe,"LI",{});var yDe=s(L3);HCe=n(yDe,"STRONG",{});var HBt=s(HCe);iGr=r(HBt,"albert"),HBt.forEach(t),dGr=r(yDe," \u2014 "),qK=n(yDe,"A",{href:!0});var UBt=s(qK);cGr=r(UBt,"FlaxAlbertForMaskedLM"),UBt.forEach(t),fGr=r(yDe," (ALBERT model)"),yDe.forEach(t),mGr=i(qe),y3=n(qe,"LI",{});var xDe=s(y3);UCe=n(xDe,"STRONG",{});var JBt=s(UCe);gGr=r(JBt,"bart"),JBt.forEach(t),hGr=r(xDe," \u2014 "),jK=n(xDe,"A",{href:!0});var YBt=s(jK);pGr=r(YBt,"FlaxBartForConditionalGeneration"),YBt.forEach(t),_Gr=r(xDe," (BART model)"),xDe.forEach(t),uGr=i(qe),x3=n(qe,"LI",{});var $De=s(x3);JCe=n($De,"STRONG",{});var ZBt=s(JCe);bGr=r(ZBt,"bert"),ZBt.forEach(t),vGr=r($De," \u2014 "),DK=n($De,"A",{href:!0});var KBt=s(DK);FGr=r(KBt,"FlaxBertForMaskedLM"),KBt.forEach(t),TGr=r($De," (BERT model)"),$De.forEach(t),MGr=i(qe),$3=n(qe,"LI",{});var kDe=s($3);YCe=n(kDe,"STRONG",{});var eIt=s(YCe);EGr=r(eIt,"big_bird"),eIt.forEach(t),CGr=r(kDe," \u2014 "),GK=n(kDe,"A",{href:!0});var oIt=s(GK);wGr=r(oIt,"FlaxBigBirdForMaskedLM"),oIt.forEach(t),AGr=r(kDe," (BigBird model)"),kDe.forEach(t),LGr=i(qe),k3=n(qe,"LI",{});var SDe=s(k3);ZCe=n(SDe,"STRONG",{});var rIt=s(ZCe);yGr=r(rIt,"distilbert"),rIt.forEach(t),xGr=r(SDe," \u2014 "),OK=n(SDe,"A",{href:!0});var tIt=s(OK);$Gr=r(tIt,"FlaxDistilBertForMaskedLM"),tIt.forEach(t),kGr=r(SDe," (DistilBERT model)"),SDe.forEach(t),SGr=i(qe),S3=n(qe,"LI",{});var RDe=s(S3);KCe=n(RDe,"STRONG",{});var aIt=s(KCe);RGr=r(aIt,"electra"),aIt.forEach(t),PGr=r(RDe," \u2014 "),VK=n(RDe,"A",{href:!0});var nIt=s(VK);BGr=r(nIt,"FlaxElectraForMaskedLM"),nIt.forEach(t),IGr=r(RDe," (ELECTRA model)"),RDe.forEach(t),NGr=i(qe),R3=n(qe,"LI",{});var PDe=s(R3);e5e=n(PDe,"STRONG",{});var sIt=s(e5e);qGr=r(sIt,"mbart"),sIt.forEach(t),jGr=r(PDe," \u2014 "),XK=n(PDe,"A",{href:!0});var lIt=s(XK);DGr=r(lIt,"FlaxMBartForConditionalGeneration"),lIt.forEach(t),GGr=r(PDe," (mBART model)"),PDe.forEach(t),OGr=i(qe),P3=n(qe,"LI",{});var BDe=s(P3);o5e=n(BDe,"STRONG",{});var iIt=s(o5e);VGr=r(iIt,"roberta"),iIt.forEach(t),XGr=r(BDe," \u2014 "),zK=n(BDe,"A",{href:!0});var dIt=s(zK);zGr=r(dIt,"FlaxRobertaForMaskedLM"),dIt.forEach(t),QGr=r(BDe," (RoBERTa model)"),BDe.forEach(t),WGr=i(qe),B3=n(qe,"LI",{});var IDe=s(B3);r5e=n(IDe,"STRONG",{});var cIt=s(r5e);HGr=r(cIt,"roformer"),cIt.forEach(t),UGr=r(IDe," \u2014 "),QK=n(IDe,"A",{href:!0});var fIt=s(QK);JGr=r(fIt,"FlaxRoFormerForMaskedLM"),fIt.forEach(t),YGr=r(IDe," (RoFormer model)"),IDe.forEach(t),ZGr=i(qe),I3=n(qe,"LI",{});var NDe=s(I3);t5e=n(NDe,"STRONG",{});var mIt=s(t5e);KGr=r(mIt,"xlm-roberta"),mIt.forEach(t),eOr=r(NDe," \u2014 "),WK=n(NDe,"A",{href:!0});var gIt=s(WK);oOr=r(gIt,"FlaxXLMRobertaForMaskedLM"),gIt.forEach(t),rOr=r(NDe," (XLM-RoBERTa model)"),NDe.forEach(t),qe.forEach(t),tOr=i(ti),T(N3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),EVe=i(f),Kc=n(f,"H2",{class:!0});var Sze=s(Kc);q3=n(Sze,"A",{id:!0,class:!0,href:!0});var hIt=s(q3);a5e=n(hIt,"SPAN",{});var pIt=s(a5e);T(Yx.$$.fragment,pIt),pIt.forEach(t),hIt.forEach(t),aOr=i(Sze),n5e=n(Sze,"SPAN",{});var _It=s(n5e);nOr=r(_It,"FlaxAutoModelForSeq2SeqLM"),_It.forEach(t),Sze.forEach(t),CVe=i(f),br=n(f,"DIV",{class:!0});var ai=s(br);T(Zx.$$.fragment,ai),sOr=i(ai),ef=n(ai,"P",{});var Qre=s(ef);lOr=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HK=n(Qre,"A",{href:!0});var uIt=s(HK);iOr=r(uIt,"from_pretrained()"),uIt.forEach(t),dOr=r(Qre," class method or the "),UK=n(Qre,"A",{href:!0});var bIt=s(UK);cOr=r(bIt,"from_config()"),bIt.forEach(t),fOr=r(Qre,` class
method.`),Qre.forEach(t),mOr=i(ai),Kx=n(ai,"P",{});var Rze=s(Kx);gOr=r(Rze,"This class cannot be instantiated directly using "),s5e=n(Rze,"CODE",{});var vIt=s(s5e);hOr=r(vIt,"__init__()"),vIt.forEach(t),pOr=r(Rze," (throws an error)."),Rze.forEach(t),_Or=i(ai),Ht=n(ai,"DIV",{class:!0});var iL=s(Ht);T(e$.$$.fragment,iL),uOr=i(iL),l5e=n(iL,"P",{});var FIt=s(l5e);bOr=r(FIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FIt.forEach(t),vOr=i(iL),of=n(iL,"P",{});var Wre=s(of);FOr=r(Wre,`Note:
Loading a model from its configuration file does `),i5e=n(Wre,"STRONG",{});var TIt=s(i5e);TOr=r(TIt,"not"),TIt.forEach(t),MOr=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(Wre,"A",{href:!0});var MIt=s(JK);EOr=r(MIt,"from_pretrained()"),MIt.forEach(t),COr=r(Wre," to load the model weights."),Wre.forEach(t),wOr=i(iL),T(j3.$$.fragment,iL),iL.forEach(t),AOr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(o$.$$.fragment,ni),LOr=i(ni),d5e=n(ni,"P",{});var EIt=s(d5e);yOr=r(EIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EIt.forEach(t),xOr=i(ni),Cn=n(ni,"P",{});var dL=s(Cn);$Or=r(dL,"The model class to instantiate is selected based on the "),c5e=n(dL,"CODE",{});var CIt=s(c5e);kOr=r(CIt,"model_type"),CIt.forEach(t),SOr=r(dL,` property of the config object (either
passed as an argument or loaded from `),f5e=n(dL,"CODE",{});var wIt=s(f5e);ROr=r(wIt,"pretrained_model_name_or_path"),wIt.forEach(t),POr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(dL,"CODE",{});var AIt=s(m5e);BOr=r(AIt,"pretrained_model_name_or_path"),AIt.forEach(t),IOr=r(dL,":"),dL.forEach(t),NOr=i(ni),ke=n(ni,"UL",{});var je=s(ke);D3=n(je,"LI",{});var qDe=s(D3);g5e=n(qDe,"STRONG",{});var LIt=s(g5e);qOr=r(LIt,"bart"),LIt.forEach(t),jOr=r(qDe," \u2014 "),YK=n(qDe,"A",{href:!0});var yIt=s(YK);DOr=r(yIt,"FlaxBartForConditionalGeneration"),yIt.forEach(t),GOr=r(qDe," (BART model)"),qDe.forEach(t),OOr=i(je),G3=n(je,"LI",{});var jDe=s(G3);h5e=n(jDe,"STRONG",{});var xIt=s(h5e);VOr=r(xIt,"blenderbot"),xIt.forEach(t),XOr=r(jDe," \u2014 "),ZK=n(jDe,"A",{href:!0});var $It=s(ZK);zOr=r($It,"FlaxBlenderbotForConditionalGeneration"),$It.forEach(t),QOr=r(jDe," (Blenderbot model)"),jDe.forEach(t),WOr=i(je),O3=n(je,"LI",{});var DDe=s(O3);p5e=n(DDe,"STRONG",{});var kIt=s(p5e);HOr=r(kIt,"blenderbot-small"),kIt.forEach(t),UOr=r(DDe," \u2014 "),KK=n(DDe,"A",{href:!0});var SIt=s(KK);JOr=r(SIt,"FlaxBlenderbotSmallForConditionalGeneration"),SIt.forEach(t),YOr=r(DDe," (BlenderbotSmall model)"),DDe.forEach(t),ZOr=i(je),V3=n(je,"LI",{});var GDe=s(V3);_5e=n(GDe,"STRONG",{});var RIt=s(_5e);KOr=r(RIt,"encoder-decoder"),RIt.forEach(t),eVr=r(GDe," \u2014 "),eee=n(GDe,"A",{href:!0});var PIt=s(eee);oVr=r(PIt,"FlaxEncoderDecoderModel"),PIt.forEach(t),rVr=r(GDe," (Encoder decoder model)"),GDe.forEach(t),tVr=i(je),X3=n(je,"LI",{});var ODe=s(X3);u5e=n(ODe,"STRONG",{});var BIt=s(u5e);aVr=r(BIt,"longt5"),BIt.forEach(t),nVr=r(ODe," \u2014 "),oee=n(ODe,"A",{href:!0});var IIt=s(oee);sVr=r(IIt,"FlaxLongT5ForConditionalGeneration"),IIt.forEach(t),lVr=r(ODe," (LongT5 model)"),ODe.forEach(t),iVr=i(je),z3=n(je,"LI",{});var VDe=s(z3);b5e=n(VDe,"STRONG",{});var NIt=s(b5e);dVr=r(NIt,"marian"),NIt.forEach(t),cVr=r(VDe," \u2014 "),ree=n(VDe,"A",{href:!0});var qIt=s(ree);fVr=r(qIt,"FlaxMarianMTModel"),qIt.forEach(t),mVr=r(VDe," (Marian model)"),VDe.forEach(t),gVr=i(je),Q3=n(je,"LI",{});var XDe=s(Q3);v5e=n(XDe,"STRONG",{});var jIt=s(v5e);hVr=r(jIt,"mbart"),jIt.forEach(t),pVr=r(XDe," \u2014 "),tee=n(XDe,"A",{href:!0});var DIt=s(tee);_Vr=r(DIt,"FlaxMBartForConditionalGeneration"),DIt.forEach(t),uVr=r(XDe," (mBART model)"),XDe.forEach(t),bVr=i(je),W3=n(je,"LI",{});var zDe=s(W3);F5e=n(zDe,"STRONG",{});var GIt=s(F5e);vVr=r(GIt,"mt5"),GIt.forEach(t),FVr=r(zDe," \u2014 "),aee=n(zDe,"A",{href:!0});var OIt=s(aee);TVr=r(OIt,"FlaxMT5ForConditionalGeneration"),OIt.forEach(t),MVr=r(zDe," (MT5 model)"),zDe.forEach(t),EVr=i(je),H3=n(je,"LI",{});var QDe=s(H3);T5e=n(QDe,"STRONG",{});var VIt=s(T5e);CVr=r(VIt,"pegasus"),VIt.forEach(t),wVr=r(QDe," \u2014 "),nee=n(QDe,"A",{href:!0});var XIt=s(nee);AVr=r(XIt,"FlaxPegasusForConditionalGeneration"),XIt.forEach(t),LVr=r(QDe," (Pegasus model)"),QDe.forEach(t),yVr=i(je),U3=n(je,"LI",{});var WDe=s(U3);M5e=n(WDe,"STRONG",{});var zIt=s(M5e);xVr=r(zIt,"t5"),zIt.forEach(t),$Vr=r(WDe," \u2014 "),see=n(WDe,"A",{href:!0});var QIt=s(see);kVr=r(QIt,"FlaxT5ForConditionalGeneration"),QIt.forEach(t),SVr=r(WDe," (T5 model)"),WDe.forEach(t),je.forEach(t),RVr=i(ni),T(J3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),wVe=i(f),rf=n(f,"H2",{class:!0});var Pze=s(rf);Y3=n(Pze,"A",{id:!0,class:!0,href:!0});var WIt=s(Y3);E5e=n(WIt,"SPAN",{});var HIt=s(E5e);T(r$.$$.fragment,HIt),HIt.forEach(t),WIt.forEach(t),PVr=i(Pze),C5e=n(Pze,"SPAN",{});var UIt=s(C5e);BVr=r(UIt,"FlaxAutoModelForSequenceClassification"),UIt.forEach(t),Pze.forEach(t),AVe=i(f),vr=n(f,"DIV",{class:!0});var si=s(vr);T(t$.$$.fragment,si),IVr=i(si),tf=n(si,"P",{});var Hre=s(tf);NVr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lee=n(Hre,"A",{href:!0});var JIt=s(lee);qVr=r(JIt,"from_pretrained()"),JIt.forEach(t),jVr=r(Hre," class method or the "),iee=n(Hre,"A",{href:!0});var YIt=s(iee);DVr=r(YIt,"from_config()"),YIt.forEach(t),GVr=r(Hre,` class
method.`),Hre.forEach(t),OVr=i(si),a$=n(si,"P",{});var Bze=s(a$);VVr=r(Bze,"This class cannot be instantiated directly using "),w5e=n(Bze,"CODE",{});var ZIt=s(w5e);XVr=r(ZIt,"__init__()"),ZIt.forEach(t),zVr=r(Bze," (throws an error)."),Bze.forEach(t),QVr=i(si),Ut=n(si,"DIV",{class:!0});var cL=s(Ut);T(n$.$$.fragment,cL),WVr=i(cL),A5e=n(cL,"P",{});var KIt=s(A5e);HVr=r(KIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KIt.forEach(t),UVr=i(cL),af=n(cL,"P",{});var Ure=s(af);JVr=r(Ure,`Note:
Loading a model from its configuration file does `),L5e=n(Ure,"STRONG",{});var eNt=s(L5e);YVr=r(eNt,"not"),eNt.forEach(t),ZVr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=n(Ure,"A",{href:!0});var oNt=s(dee);KVr=r(oNt,"from_pretrained()"),oNt.forEach(t),eXr=r(Ure," to load the model weights."),Ure.forEach(t),oXr=i(cL),T(Z3.$$.fragment,cL),cL.forEach(t),rXr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(s$.$$.fragment,li),tXr=i(li),y5e=n(li,"P",{});var rNt=s(y5e);aXr=r(rNt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rNt.forEach(t),nXr=i(li),wn=n(li,"P",{});var fL=s(wn);sXr=r(fL,"The model class to instantiate is selected based on the "),x5e=n(fL,"CODE",{});var tNt=s(x5e);lXr=r(tNt,"model_type"),tNt.forEach(t),iXr=r(fL,` property of the config object (either
passed as an argument or loaded from `),$5e=n(fL,"CODE",{});var aNt=s($5e);dXr=r(aNt,"pretrained_model_name_or_path"),aNt.forEach(t),cXr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=n(fL,"CODE",{});var nNt=s(k5e);fXr=r(nNt,"pretrained_model_name_or_path"),nNt.forEach(t),mXr=r(fL,":"),fL.forEach(t),gXr=i(li),Se=n(li,"UL",{});var De=s(Se);K3=n(De,"LI",{});var HDe=s(K3);S5e=n(HDe,"STRONG",{});var sNt=s(S5e);hXr=r(sNt,"albert"),sNt.forEach(t),pXr=r(HDe," \u2014 "),cee=n(HDe,"A",{href:!0});var lNt=s(cee);_Xr=r(lNt,"FlaxAlbertForSequenceClassification"),lNt.forEach(t),uXr=r(HDe," (ALBERT model)"),HDe.forEach(t),bXr=i(De),e0=n(De,"LI",{});var UDe=s(e0);R5e=n(UDe,"STRONG",{});var iNt=s(R5e);vXr=r(iNt,"bart"),iNt.forEach(t),FXr=r(UDe," \u2014 "),fee=n(UDe,"A",{href:!0});var dNt=s(fee);TXr=r(dNt,"FlaxBartForSequenceClassification"),dNt.forEach(t),MXr=r(UDe," (BART model)"),UDe.forEach(t),EXr=i(De),o0=n(De,"LI",{});var JDe=s(o0);P5e=n(JDe,"STRONG",{});var cNt=s(P5e);CXr=r(cNt,"bert"),cNt.forEach(t),wXr=r(JDe," \u2014 "),mee=n(JDe,"A",{href:!0});var fNt=s(mee);AXr=r(fNt,"FlaxBertForSequenceClassification"),fNt.forEach(t),LXr=r(JDe," (BERT model)"),JDe.forEach(t),yXr=i(De),r0=n(De,"LI",{});var YDe=s(r0);B5e=n(YDe,"STRONG",{});var mNt=s(B5e);xXr=r(mNt,"big_bird"),mNt.forEach(t),$Xr=r(YDe," \u2014 "),gee=n(YDe,"A",{href:!0});var gNt=s(gee);kXr=r(gNt,"FlaxBigBirdForSequenceClassification"),gNt.forEach(t),SXr=r(YDe," (BigBird model)"),YDe.forEach(t),RXr=i(De),t0=n(De,"LI",{});var ZDe=s(t0);I5e=n(ZDe,"STRONG",{});var hNt=s(I5e);PXr=r(hNt,"distilbert"),hNt.forEach(t),BXr=r(ZDe," \u2014 "),hee=n(ZDe,"A",{href:!0});var pNt=s(hee);IXr=r(pNt,"FlaxDistilBertForSequenceClassification"),pNt.forEach(t),NXr=r(ZDe," (DistilBERT model)"),ZDe.forEach(t),qXr=i(De),a0=n(De,"LI",{});var KDe=s(a0);N5e=n(KDe,"STRONG",{});var _Nt=s(N5e);jXr=r(_Nt,"electra"),_Nt.forEach(t),DXr=r(KDe," \u2014 "),pee=n(KDe,"A",{href:!0});var uNt=s(pee);GXr=r(uNt,"FlaxElectraForSequenceClassification"),uNt.forEach(t),OXr=r(KDe," (ELECTRA model)"),KDe.forEach(t),VXr=i(De),n0=n(De,"LI",{});var eGe=s(n0);q5e=n(eGe,"STRONG",{});var bNt=s(q5e);XXr=r(bNt,"mbart"),bNt.forEach(t),zXr=r(eGe," \u2014 "),_ee=n(eGe,"A",{href:!0});var vNt=s(_ee);QXr=r(vNt,"FlaxMBartForSequenceClassification"),vNt.forEach(t),WXr=r(eGe," (mBART model)"),eGe.forEach(t),HXr=i(De),s0=n(De,"LI",{});var oGe=s(s0);j5e=n(oGe,"STRONG",{});var FNt=s(j5e);UXr=r(FNt,"roberta"),FNt.forEach(t),JXr=r(oGe," \u2014 "),uee=n(oGe,"A",{href:!0});var TNt=s(uee);YXr=r(TNt,"FlaxRobertaForSequenceClassification"),TNt.forEach(t),ZXr=r(oGe," (RoBERTa model)"),oGe.forEach(t),KXr=i(De),l0=n(De,"LI",{});var rGe=s(l0);D5e=n(rGe,"STRONG",{});var MNt=s(D5e);ezr=r(MNt,"roformer"),MNt.forEach(t),ozr=r(rGe," \u2014 "),bee=n(rGe,"A",{href:!0});var ENt=s(bee);rzr=r(ENt,"FlaxRoFormerForSequenceClassification"),ENt.forEach(t),tzr=r(rGe," (RoFormer model)"),rGe.forEach(t),azr=i(De),i0=n(De,"LI",{});var tGe=s(i0);G5e=n(tGe,"STRONG",{});var CNt=s(G5e);nzr=r(CNt,"xlm-roberta"),CNt.forEach(t),szr=r(tGe," \u2014 "),vee=n(tGe,"A",{href:!0});var wNt=s(vee);lzr=r(wNt,"FlaxXLMRobertaForSequenceClassification"),wNt.forEach(t),izr=r(tGe," (XLM-RoBERTa model)"),tGe.forEach(t),De.forEach(t),dzr=i(li),T(d0.$$.fragment,li),li.forEach(t),si.forEach(t),LVe=i(f),nf=n(f,"H2",{class:!0});var Ize=s(nf);c0=n(Ize,"A",{id:!0,class:!0,href:!0});var ANt=s(c0);O5e=n(ANt,"SPAN",{});var LNt=s(O5e);T(l$.$$.fragment,LNt),LNt.forEach(t),ANt.forEach(t),czr=i(Ize),V5e=n(Ize,"SPAN",{});var yNt=s(V5e);fzr=r(yNt,"FlaxAutoModelForQuestionAnswering"),yNt.forEach(t),Ize.forEach(t),yVe=i(f),Fr=n(f,"DIV",{class:!0});var ii=s(Fr);T(i$.$$.fragment,ii),mzr=i(ii),sf=n(ii,"P",{});var Jre=s(sf);gzr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Fee=n(Jre,"A",{href:!0});var xNt=s(Fee);hzr=r(xNt,"from_pretrained()"),xNt.forEach(t),pzr=r(Jre," class method or the "),Tee=n(Jre,"A",{href:!0});var $Nt=s(Tee);_zr=r($Nt,"from_config()"),$Nt.forEach(t),uzr=r(Jre,` class
method.`),Jre.forEach(t),bzr=i(ii),d$=n(ii,"P",{});var Nze=s(d$);vzr=r(Nze,"This class cannot be instantiated directly using "),X5e=n(Nze,"CODE",{});var kNt=s(X5e);Fzr=r(kNt,"__init__()"),kNt.forEach(t),Tzr=r(Nze," (throws an error)."),Nze.forEach(t),Mzr=i(ii),Jt=n(ii,"DIV",{class:!0});var mL=s(Jt);T(c$.$$.fragment,mL),Ezr=i(mL),z5e=n(mL,"P",{});var SNt=s(z5e);Czr=r(SNt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SNt.forEach(t),wzr=i(mL),lf=n(mL,"P",{});var Yre=s(lf);Azr=r(Yre,`Note:
Loading a model from its configuration file does `),Q5e=n(Yre,"STRONG",{});var RNt=s(Q5e);Lzr=r(RNt,"not"),RNt.forEach(t),yzr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=n(Yre,"A",{href:!0});var PNt=s(Mee);xzr=r(PNt,"from_pretrained()"),PNt.forEach(t),$zr=r(Yre," to load the model weights."),Yre.forEach(t),kzr=i(mL),T(f0.$$.fragment,mL),mL.forEach(t),Szr=i(ii),Hr=n(ii,"DIV",{class:!0});var di=s(Hr);T(f$.$$.fragment,di),Rzr=i(di),W5e=n(di,"P",{});var BNt=s(W5e);Pzr=r(BNt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BNt.forEach(t),Bzr=i(di),An=n(di,"P",{});var gL=s(An);Izr=r(gL,"The model class to instantiate is selected based on the "),H5e=n(gL,"CODE",{});var INt=s(H5e);Nzr=r(INt,"model_type"),INt.forEach(t),qzr=r(gL,` property of the config object (either
passed as an argument or loaded from `),U5e=n(gL,"CODE",{});var NNt=s(U5e);jzr=r(NNt,"pretrained_model_name_or_path"),NNt.forEach(t),Dzr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n(gL,"CODE",{});var qNt=s(J5e);Gzr=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),Ozr=r(gL,":"),gL.forEach(t),Vzr=i(di),Re=n(di,"UL",{});var Ge=s(Re);m0=n(Ge,"LI",{});var aGe=s(m0);Y5e=n(aGe,"STRONG",{});var jNt=s(Y5e);Xzr=r(jNt,"albert"),jNt.forEach(t),zzr=r(aGe," \u2014 "),Eee=n(aGe,"A",{href:!0});var DNt=s(Eee);Qzr=r(DNt,"FlaxAlbertForQuestionAnswering"),DNt.forEach(t),Wzr=r(aGe," (ALBERT model)"),aGe.forEach(t),Hzr=i(Ge),g0=n(Ge,"LI",{});var nGe=s(g0);Z5e=n(nGe,"STRONG",{});var GNt=s(Z5e);Uzr=r(GNt,"bart"),GNt.forEach(t),Jzr=r(nGe," \u2014 "),Cee=n(nGe,"A",{href:!0});var ONt=s(Cee);Yzr=r(ONt,"FlaxBartForQuestionAnswering"),ONt.forEach(t),Zzr=r(nGe," (BART model)"),nGe.forEach(t),Kzr=i(Ge),h0=n(Ge,"LI",{});var sGe=s(h0);K5e=n(sGe,"STRONG",{});var VNt=s(K5e);eQr=r(VNt,"bert"),VNt.forEach(t),oQr=r(sGe," \u2014 "),wee=n(sGe,"A",{href:!0});var XNt=s(wee);rQr=r(XNt,"FlaxBertForQuestionAnswering"),XNt.forEach(t),tQr=r(sGe," (BERT model)"),sGe.forEach(t),aQr=i(Ge),p0=n(Ge,"LI",{});var lGe=s(p0);e3e=n(lGe,"STRONG",{});var zNt=s(e3e);nQr=r(zNt,"big_bird"),zNt.forEach(t),sQr=r(lGe," \u2014 "),Aee=n(lGe,"A",{href:!0});var QNt=s(Aee);lQr=r(QNt,"FlaxBigBirdForQuestionAnswering"),QNt.forEach(t),iQr=r(lGe," (BigBird model)"),lGe.forEach(t),dQr=i(Ge),_0=n(Ge,"LI",{});var iGe=s(_0);o3e=n(iGe,"STRONG",{});var WNt=s(o3e);cQr=r(WNt,"distilbert"),WNt.forEach(t),fQr=r(iGe," \u2014 "),Lee=n(iGe,"A",{href:!0});var HNt=s(Lee);mQr=r(HNt,"FlaxDistilBertForQuestionAnswering"),HNt.forEach(t),gQr=r(iGe," (DistilBERT model)"),iGe.forEach(t),hQr=i(Ge),u0=n(Ge,"LI",{});var dGe=s(u0);r3e=n(dGe,"STRONG",{});var UNt=s(r3e);pQr=r(UNt,"electra"),UNt.forEach(t),_Qr=r(dGe," \u2014 "),yee=n(dGe,"A",{href:!0});var JNt=s(yee);uQr=r(JNt,"FlaxElectraForQuestionAnswering"),JNt.forEach(t),bQr=r(dGe," (ELECTRA model)"),dGe.forEach(t),vQr=i(Ge),b0=n(Ge,"LI",{});var cGe=s(b0);t3e=n(cGe,"STRONG",{});var YNt=s(t3e);FQr=r(YNt,"mbart"),YNt.forEach(t),TQr=r(cGe," \u2014 "),xee=n(cGe,"A",{href:!0});var ZNt=s(xee);MQr=r(ZNt,"FlaxMBartForQuestionAnswering"),ZNt.forEach(t),EQr=r(cGe," (mBART model)"),cGe.forEach(t),CQr=i(Ge),v0=n(Ge,"LI",{});var fGe=s(v0);a3e=n(fGe,"STRONG",{});var KNt=s(a3e);wQr=r(KNt,"roberta"),KNt.forEach(t),AQr=r(fGe," \u2014 "),$ee=n(fGe,"A",{href:!0});var eqt=s($ee);LQr=r(eqt,"FlaxRobertaForQuestionAnswering"),eqt.forEach(t),yQr=r(fGe," (RoBERTa model)"),fGe.forEach(t),xQr=i(Ge),F0=n(Ge,"LI",{});var mGe=s(F0);n3e=n(mGe,"STRONG",{});var oqt=s(n3e);$Qr=r(oqt,"roformer"),oqt.forEach(t),kQr=r(mGe," \u2014 "),kee=n(mGe,"A",{href:!0});var rqt=s(kee);SQr=r(rqt,"FlaxRoFormerForQuestionAnswering"),rqt.forEach(t),RQr=r(mGe," (RoFormer model)"),mGe.forEach(t),PQr=i(Ge),T0=n(Ge,"LI",{});var gGe=s(T0);s3e=n(gGe,"STRONG",{});var tqt=s(s3e);BQr=r(tqt,"xlm-roberta"),tqt.forEach(t),IQr=r(gGe," \u2014 "),See=n(gGe,"A",{href:!0});var aqt=s(See);NQr=r(aqt,"FlaxXLMRobertaForQuestionAnswering"),aqt.forEach(t),qQr=r(gGe," (XLM-RoBERTa model)"),gGe.forEach(t),Ge.forEach(t),jQr=i(di),T(M0.$$.fragment,di),di.forEach(t),ii.forEach(t),xVe=i(f),df=n(f,"H2",{class:!0});var qze=s(df);E0=n(qze,"A",{id:!0,class:!0,href:!0});var nqt=s(E0);l3e=n(nqt,"SPAN",{});var sqt=s(l3e);T(m$.$$.fragment,sqt),sqt.forEach(t),nqt.forEach(t),DQr=i(qze),i3e=n(qze,"SPAN",{});var lqt=s(i3e);GQr=r(lqt,"FlaxAutoModelForTokenClassification"),lqt.forEach(t),qze.forEach(t),$Ve=i(f),Tr=n(f,"DIV",{class:!0});var ci=s(Tr);T(g$.$$.fragment,ci),OQr=i(ci),cf=n(ci,"P",{});var Zre=s(cf);VQr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ree=n(Zre,"A",{href:!0});var iqt=s(Ree);XQr=r(iqt,"from_pretrained()"),iqt.forEach(t),zQr=r(Zre," class method or the "),Pee=n(Zre,"A",{href:!0});var dqt=s(Pee);QQr=r(dqt,"from_config()"),dqt.forEach(t),WQr=r(Zre,` class
method.`),Zre.forEach(t),HQr=i(ci),h$=n(ci,"P",{});var jze=s(h$);UQr=r(jze,"This class cannot be instantiated directly using "),d3e=n(jze,"CODE",{});var cqt=s(d3e);JQr=r(cqt,"__init__()"),cqt.forEach(t),YQr=r(jze," (throws an error)."),jze.forEach(t),ZQr=i(ci),Yt=n(ci,"DIV",{class:!0});var hL=s(Yt);T(p$.$$.fragment,hL),KQr=i(hL),c3e=n(hL,"P",{});var fqt=s(c3e);eWr=r(fqt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fqt.forEach(t),oWr=i(hL),ff=n(hL,"P",{});var Kre=s(ff);rWr=r(Kre,`Note:
Loading a model from its configuration file does `),f3e=n(Kre,"STRONG",{});var mqt=s(f3e);tWr=r(mqt,"not"),mqt.forEach(t),aWr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(Kre,"A",{href:!0});var gqt=s(Bee);nWr=r(gqt,"from_pretrained()"),gqt.forEach(t),sWr=r(Kre," to load the model weights."),Kre.forEach(t),lWr=i(hL),T(C0.$$.fragment,hL),hL.forEach(t),iWr=i(ci),Ur=n(ci,"DIV",{class:!0});var fi=s(Ur);T(_$.$$.fragment,fi),dWr=i(fi),m3e=n(fi,"P",{});var hqt=s(m3e);cWr=r(hqt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hqt.forEach(t),fWr=i(fi),Ln=n(fi,"P",{});var pL=s(Ln);mWr=r(pL,"The model class to instantiate is selected based on the "),g3e=n(pL,"CODE",{});var pqt=s(g3e);gWr=r(pqt,"model_type"),pqt.forEach(t),hWr=r(pL,` property of the config object (either
passed as an argument or loaded from `),h3e=n(pL,"CODE",{});var _qt=s(h3e);pWr=r(_qt,"pretrained_model_name_or_path"),_qt.forEach(t),_Wr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(pL,"CODE",{});var uqt=s(p3e);uWr=r(uqt,"pretrained_model_name_or_path"),uqt.forEach(t),bWr=r(pL,":"),pL.forEach(t),vWr=i(fi),Ve=n(fi,"UL",{});var To=s(Ve);w0=n(To,"LI",{});var hGe=s(w0);_3e=n(hGe,"STRONG",{});var bqt=s(_3e);FWr=r(bqt,"albert"),bqt.forEach(t),TWr=r(hGe," \u2014 "),Iee=n(hGe,"A",{href:!0});var vqt=s(Iee);MWr=r(vqt,"FlaxAlbertForTokenClassification"),vqt.forEach(t),EWr=r(hGe," (ALBERT model)"),hGe.forEach(t),CWr=i(To),A0=n(To,"LI",{});var pGe=s(A0);u3e=n(pGe,"STRONG",{});var Fqt=s(u3e);wWr=r(Fqt,"bert"),Fqt.forEach(t),AWr=r(pGe," \u2014 "),Nee=n(pGe,"A",{href:!0});var Tqt=s(Nee);LWr=r(Tqt,"FlaxBertForTokenClassification"),Tqt.forEach(t),yWr=r(pGe," (BERT model)"),pGe.forEach(t),xWr=i(To),L0=n(To,"LI",{});var _Ge=s(L0);b3e=n(_Ge,"STRONG",{});var Mqt=s(b3e);$Wr=r(Mqt,"big_bird"),Mqt.forEach(t),kWr=r(_Ge," \u2014 "),qee=n(_Ge,"A",{href:!0});var Eqt=s(qee);SWr=r(Eqt,"FlaxBigBirdForTokenClassification"),Eqt.forEach(t),RWr=r(_Ge," (BigBird model)"),_Ge.forEach(t),PWr=i(To),y0=n(To,"LI",{});var uGe=s(y0);v3e=n(uGe,"STRONG",{});var Cqt=s(v3e);BWr=r(Cqt,"distilbert"),Cqt.forEach(t),IWr=r(uGe," \u2014 "),jee=n(uGe,"A",{href:!0});var wqt=s(jee);NWr=r(wqt,"FlaxDistilBertForTokenClassification"),wqt.forEach(t),qWr=r(uGe," (DistilBERT model)"),uGe.forEach(t),jWr=i(To),x0=n(To,"LI",{});var bGe=s(x0);F3e=n(bGe,"STRONG",{});var Aqt=s(F3e);DWr=r(Aqt,"electra"),Aqt.forEach(t),GWr=r(bGe," \u2014 "),Dee=n(bGe,"A",{href:!0});var Lqt=s(Dee);OWr=r(Lqt,"FlaxElectraForTokenClassification"),Lqt.forEach(t),VWr=r(bGe," (ELECTRA model)"),bGe.forEach(t),XWr=i(To),$0=n(To,"LI",{});var vGe=s($0);T3e=n(vGe,"STRONG",{});var yqt=s(T3e);zWr=r(yqt,"roberta"),yqt.forEach(t),QWr=r(vGe," \u2014 "),Gee=n(vGe,"A",{href:!0});var xqt=s(Gee);WWr=r(xqt,"FlaxRobertaForTokenClassification"),xqt.forEach(t),HWr=r(vGe," (RoBERTa model)"),vGe.forEach(t),UWr=i(To),k0=n(To,"LI",{});var FGe=s(k0);M3e=n(FGe,"STRONG",{});var $qt=s(M3e);JWr=r($qt,"roformer"),$qt.forEach(t),YWr=r(FGe," \u2014 "),Oee=n(FGe,"A",{href:!0});var kqt=s(Oee);ZWr=r(kqt,"FlaxRoFormerForTokenClassification"),kqt.forEach(t),KWr=r(FGe," (RoFormer model)"),FGe.forEach(t),eHr=i(To),S0=n(To,"LI",{});var TGe=s(S0);E3e=n(TGe,"STRONG",{});var Sqt=s(E3e);oHr=r(Sqt,"xlm-roberta"),Sqt.forEach(t),rHr=r(TGe," \u2014 "),Vee=n(TGe,"A",{href:!0});var Rqt=s(Vee);tHr=r(Rqt,"FlaxXLMRobertaForTokenClassification"),Rqt.forEach(t),aHr=r(TGe," (XLM-RoBERTa model)"),TGe.forEach(t),To.forEach(t),nHr=i(fi),T(R0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),kVe=i(f),mf=n(f,"H2",{class:!0});var Dze=s(mf);P0=n(Dze,"A",{id:!0,class:!0,href:!0});var Pqt=s(P0);C3e=n(Pqt,"SPAN",{});var Bqt=s(C3e);T(u$.$$.fragment,Bqt),Bqt.forEach(t),Pqt.forEach(t),sHr=i(Dze),w3e=n(Dze,"SPAN",{});var Iqt=s(w3e);lHr=r(Iqt,"FlaxAutoModelForMultipleChoice"),Iqt.forEach(t),Dze.forEach(t),SVe=i(f),Mr=n(f,"DIV",{class:!0});var mi=s(Mr);T(b$.$$.fragment,mi),iHr=i(mi),gf=n(mi,"P",{});var ete=s(gf);dHr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Xee=n(ete,"A",{href:!0});var Nqt=s(Xee);cHr=r(Nqt,"from_pretrained()"),Nqt.forEach(t),fHr=r(ete," class method or the "),zee=n(ete,"A",{href:!0});var qqt=s(zee);mHr=r(qqt,"from_config()"),qqt.forEach(t),gHr=r(ete,` class
method.`),ete.forEach(t),hHr=i(mi),v$=n(mi,"P",{});var Gze=s(v$);pHr=r(Gze,"This class cannot be instantiated directly using "),A3e=n(Gze,"CODE",{});var jqt=s(A3e);_Hr=r(jqt,"__init__()"),jqt.forEach(t),uHr=r(Gze," (throws an error)."),Gze.forEach(t),bHr=i(mi),Zt=n(mi,"DIV",{class:!0});var _L=s(Zt);T(F$.$$.fragment,_L),vHr=i(_L),L3e=n(_L,"P",{});var Dqt=s(L3e);FHr=r(Dqt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dqt.forEach(t),THr=i(_L),hf=n(_L,"P",{});var ote=s(hf);MHr=r(ote,`Note:
Loading a model from its configuration file does `),y3e=n(ote,"STRONG",{});var Gqt=s(y3e);EHr=r(Gqt,"not"),Gqt.forEach(t),CHr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qee=n(ote,"A",{href:!0});var Oqt=s(Qee);wHr=r(Oqt,"from_pretrained()"),Oqt.forEach(t),AHr=r(ote," to load the model weights."),ote.forEach(t),LHr=i(_L),T(B0.$$.fragment,_L),_L.forEach(t),yHr=i(mi),Jr=n(mi,"DIV",{class:!0});var gi=s(Jr);T(T$.$$.fragment,gi),xHr=i(gi),x3e=n(gi,"P",{});var Vqt=s(x3e);$Hr=r(Vqt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vqt.forEach(t),kHr=i(gi),yn=n(gi,"P",{});var uL=s(yn);SHr=r(uL,"The model class to instantiate is selected based on the "),$3e=n(uL,"CODE",{});var Xqt=s($3e);RHr=r(Xqt,"model_type"),Xqt.forEach(t),PHr=r(uL,` property of the config object (either
passed as an argument or loaded from `),k3e=n(uL,"CODE",{});var zqt=s(k3e);BHr=r(zqt,"pretrained_model_name_or_path"),zqt.forEach(t),IHr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=n(uL,"CODE",{});var Qqt=s(S3e);NHr=r(Qqt,"pretrained_model_name_or_path"),Qqt.forEach(t),qHr=r(uL,":"),uL.forEach(t),jHr=i(gi),Xe=n(gi,"UL",{});var Mo=s(Xe);I0=n(Mo,"LI",{});var MGe=s(I0);R3e=n(MGe,"STRONG",{});var Wqt=s(R3e);DHr=r(Wqt,"albert"),Wqt.forEach(t),GHr=r(MGe," \u2014 "),Wee=n(MGe,"A",{href:!0});var Hqt=s(Wee);OHr=r(Hqt,"FlaxAlbertForMultipleChoice"),Hqt.forEach(t),VHr=r(MGe," (ALBERT model)"),MGe.forEach(t),XHr=i(Mo),N0=n(Mo,"LI",{});var EGe=s(N0);P3e=n(EGe,"STRONG",{});var Uqt=s(P3e);zHr=r(Uqt,"bert"),Uqt.forEach(t),QHr=r(EGe," \u2014 "),Hee=n(EGe,"A",{href:!0});var Jqt=s(Hee);WHr=r(Jqt,"FlaxBertForMultipleChoice"),Jqt.forEach(t),HHr=r(EGe," (BERT model)"),EGe.forEach(t),UHr=i(Mo),q0=n(Mo,"LI",{});var CGe=s(q0);B3e=n(CGe,"STRONG",{});var Yqt=s(B3e);JHr=r(Yqt,"big_bird"),Yqt.forEach(t),YHr=r(CGe," \u2014 "),Uee=n(CGe,"A",{href:!0});var Zqt=s(Uee);ZHr=r(Zqt,"FlaxBigBirdForMultipleChoice"),Zqt.forEach(t),KHr=r(CGe," (BigBird model)"),CGe.forEach(t),eUr=i(Mo),j0=n(Mo,"LI",{});var wGe=s(j0);I3e=n(wGe,"STRONG",{});var Kqt=s(I3e);oUr=r(Kqt,"distilbert"),Kqt.forEach(t),rUr=r(wGe," \u2014 "),Jee=n(wGe,"A",{href:!0});var ejt=s(Jee);tUr=r(ejt,"FlaxDistilBertForMultipleChoice"),ejt.forEach(t),aUr=r(wGe," (DistilBERT model)"),wGe.forEach(t),nUr=i(Mo),D0=n(Mo,"LI",{});var AGe=s(D0);N3e=n(AGe,"STRONG",{});var ojt=s(N3e);sUr=r(ojt,"electra"),ojt.forEach(t),lUr=r(AGe," \u2014 "),Yee=n(AGe,"A",{href:!0});var rjt=s(Yee);iUr=r(rjt,"FlaxElectraForMultipleChoice"),rjt.forEach(t),dUr=r(AGe," (ELECTRA model)"),AGe.forEach(t),cUr=i(Mo),G0=n(Mo,"LI",{});var LGe=s(G0);q3e=n(LGe,"STRONG",{});var tjt=s(q3e);fUr=r(tjt,"roberta"),tjt.forEach(t),mUr=r(LGe," \u2014 "),Zee=n(LGe,"A",{href:!0});var ajt=s(Zee);gUr=r(ajt,"FlaxRobertaForMultipleChoice"),ajt.forEach(t),hUr=r(LGe," (RoBERTa model)"),LGe.forEach(t),pUr=i(Mo),O0=n(Mo,"LI",{});var yGe=s(O0);j3e=n(yGe,"STRONG",{});var njt=s(j3e);_Ur=r(njt,"roformer"),njt.forEach(t),uUr=r(yGe," \u2014 "),Kee=n(yGe,"A",{href:!0});var sjt=s(Kee);bUr=r(sjt,"FlaxRoFormerForMultipleChoice"),sjt.forEach(t),vUr=r(yGe," (RoFormer model)"),yGe.forEach(t),FUr=i(Mo),V0=n(Mo,"LI",{});var xGe=s(V0);D3e=n(xGe,"STRONG",{});var ljt=s(D3e);TUr=r(ljt,"xlm-roberta"),ljt.forEach(t),MUr=r(xGe," \u2014 "),eoe=n(xGe,"A",{href:!0});var ijt=s(eoe);EUr=r(ijt,"FlaxXLMRobertaForMultipleChoice"),ijt.forEach(t),CUr=r(xGe," (XLM-RoBERTa model)"),xGe.forEach(t),Mo.forEach(t),wUr=i(gi),T(X0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),RVe=i(f),pf=n(f,"H2",{class:!0});var Oze=s(pf);z0=n(Oze,"A",{id:!0,class:!0,href:!0});var djt=s(z0);G3e=n(djt,"SPAN",{});var cjt=s(G3e);T(M$.$$.fragment,cjt),cjt.forEach(t),djt.forEach(t),AUr=i(Oze),O3e=n(Oze,"SPAN",{});var fjt=s(O3e);LUr=r(fjt,"FlaxAutoModelForNextSentencePrediction"),fjt.forEach(t),Oze.forEach(t),PVe=i(f),Er=n(f,"DIV",{class:!0});var hi=s(Er);T(E$.$$.fragment,hi),yUr=i(hi),_f=n(hi,"P",{});var rte=s(_f);xUr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ooe=n(rte,"A",{href:!0});var mjt=s(ooe);$Ur=r(mjt,"from_pretrained()"),mjt.forEach(t),kUr=r(rte," class method or the "),roe=n(rte,"A",{href:!0});var gjt=s(roe);SUr=r(gjt,"from_config()"),gjt.forEach(t),RUr=r(rte,` class
method.`),rte.forEach(t),PUr=i(hi),C$=n(hi,"P",{});var Vze=s(C$);BUr=r(Vze,"This class cannot be instantiated directly using "),V3e=n(Vze,"CODE",{});var hjt=s(V3e);IUr=r(hjt,"__init__()"),hjt.forEach(t),NUr=r(Vze," (throws an error)."),Vze.forEach(t),qUr=i(hi),Kt=n(hi,"DIV",{class:!0});var bL=s(Kt);T(w$.$$.fragment,bL),jUr=i(bL),X3e=n(bL,"P",{});var pjt=s(X3e);DUr=r(pjt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pjt.forEach(t),GUr=i(bL),uf=n(bL,"P",{});var tte=s(uf);OUr=r(tte,`Note:
Loading a model from its configuration file does `),z3e=n(tte,"STRONG",{});var _jt=s(z3e);VUr=r(_jt,"not"),_jt.forEach(t),XUr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),toe=n(tte,"A",{href:!0});var ujt=s(toe);zUr=r(ujt,"from_pretrained()"),ujt.forEach(t),QUr=r(tte," to load the model weights."),tte.forEach(t),WUr=i(bL),T(Q0.$$.fragment,bL),bL.forEach(t),HUr=i(hi),Yr=n(hi,"DIV",{class:!0});var pi=s(Yr);T(A$.$$.fragment,pi),UUr=i(pi),Q3e=n(pi,"P",{});var bjt=s(Q3e);JUr=r(bjt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bjt.forEach(t),YUr=i(pi),xn=n(pi,"P",{});var vL=s(xn);ZUr=r(vL,"The model class to instantiate is selected based on the "),W3e=n(vL,"CODE",{});var vjt=s(W3e);KUr=r(vjt,"model_type"),vjt.forEach(t),eJr=r(vL,` property of the config object (either
passed as an argument or loaded from `),H3e=n(vL,"CODE",{});var Fjt=s(H3e);oJr=r(Fjt,"pretrained_model_name_or_path"),Fjt.forEach(t),rJr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U3e=n(vL,"CODE",{});var Tjt=s(U3e);tJr=r(Tjt,"pretrained_model_name_or_path"),Tjt.forEach(t),aJr=r(vL,":"),vL.forEach(t),nJr=i(pi),J3e=n(pi,"UL",{});var Mjt=s(J3e);W0=n(Mjt,"LI",{});var $Ge=s(W0);Y3e=n($Ge,"STRONG",{});var Ejt=s(Y3e);sJr=r(Ejt,"bert"),Ejt.forEach(t),lJr=r($Ge," \u2014 "),aoe=n($Ge,"A",{href:!0});var Cjt=s(aoe);iJr=r(Cjt,"FlaxBertForNextSentencePrediction"),Cjt.forEach(t),dJr=r($Ge," (BERT model)"),$Ge.forEach(t),Mjt.forEach(t),cJr=i(pi),T(H0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),BVe=i(f),bf=n(f,"H2",{class:!0});var Xze=s(bf);U0=n(Xze,"A",{id:!0,class:!0,href:!0});var wjt=s(U0);Z3e=n(wjt,"SPAN",{});var Ajt=s(Z3e);T(L$.$$.fragment,Ajt),Ajt.forEach(t),wjt.forEach(t),fJr=i(Xze),K3e=n(Xze,"SPAN",{});var Ljt=s(K3e);mJr=r(Ljt,"FlaxAutoModelForImageClassification"),Ljt.forEach(t),Xze.forEach(t),IVe=i(f),Cr=n(f,"DIV",{class:!0});var _i=s(Cr);T(y$.$$.fragment,_i),gJr=i(_i),vf=n(_i,"P",{});var ate=s(vf);hJr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),noe=n(ate,"A",{href:!0});var yjt=s(noe);pJr=r(yjt,"from_pretrained()"),yjt.forEach(t),_Jr=r(ate," class method or the "),soe=n(ate,"A",{href:!0});var xjt=s(soe);uJr=r(xjt,"from_config()"),xjt.forEach(t),bJr=r(ate,` class
method.`),ate.forEach(t),vJr=i(_i),x$=n(_i,"P",{});var zze=s(x$);FJr=r(zze,"This class cannot be instantiated directly using "),e0e=n(zze,"CODE",{});var $jt=s(e0e);TJr=r($jt,"__init__()"),$jt.forEach(t),MJr=r(zze," (throws an error)."),zze.forEach(t),EJr=i(_i),ea=n(_i,"DIV",{class:!0});var FL=s(ea);T($$.$$.fragment,FL),CJr=i(FL),o0e=n(FL,"P",{});var kjt=s(o0e);wJr=r(kjt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kjt.forEach(t),AJr=i(FL),Ff=n(FL,"P",{});var nte=s(Ff);LJr=r(nte,`Note:
Loading a model from its configuration file does `),r0e=n(nte,"STRONG",{});var Sjt=s(r0e);yJr=r(Sjt,"not"),Sjt.forEach(t),xJr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=n(nte,"A",{href:!0});var Rjt=s(loe);$Jr=r(Rjt,"from_pretrained()"),Rjt.forEach(t),kJr=r(nte," to load the model weights."),nte.forEach(t),SJr=i(FL),T(J0.$$.fragment,FL),FL.forEach(t),RJr=i(_i),Zr=n(_i,"DIV",{class:!0});var ui=s(Zr);T(k$.$$.fragment,ui),PJr=i(ui),t0e=n(ui,"P",{});var Pjt=s(t0e);BJr=r(Pjt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pjt.forEach(t),IJr=i(ui),$n=n(ui,"P",{});var TL=s($n);NJr=r(TL,"The model class to instantiate is selected based on the "),a0e=n(TL,"CODE",{});var Bjt=s(a0e);qJr=r(Bjt,"model_type"),Bjt.forEach(t),jJr=r(TL,` property of the config object (either
passed as an argument or loaded from `),n0e=n(TL,"CODE",{});var Ijt=s(n0e);DJr=r(Ijt,"pretrained_model_name_or_path"),Ijt.forEach(t),GJr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=n(TL,"CODE",{});var Njt=s(s0e);OJr=r(Njt,"pretrained_model_name_or_path"),Njt.forEach(t),VJr=r(TL,":"),TL.forEach(t),XJr=i(ui),S$=n(ui,"UL",{});var Qze=s(S$);Y0=n(Qze,"LI",{});var kGe=s(Y0);l0e=n(kGe,"STRONG",{});var qjt=s(l0e);zJr=r(qjt,"beit"),qjt.forEach(t),QJr=r(kGe," \u2014 "),ioe=n(kGe,"A",{href:!0});var jjt=s(ioe);WJr=r(jjt,"FlaxBeitForImageClassification"),jjt.forEach(t),HJr=r(kGe," (BEiT model)"),kGe.forEach(t),UJr=i(Qze),Z0=n(Qze,"LI",{});var SGe=s(Z0);i0e=n(SGe,"STRONG",{});var Djt=s(i0e);JJr=r(Djt,"vit"),Djt.forEach(t),YJr=r(SGe," \u2014 "),doe=n(SGe,"A",{href:!0});var Gjt=s(doe);ZJr=r(Gjt,"FlaxViTForImageClassification"),Gjt.forEach(t),KJr=r(SGe," (ViT model)"),SGe.forEach(t),Qze.forEach(t),eYr=i(ui),T(K0.$$.fragment,ui),ui.forEach(t),_i.forEach(t),NVe=i(f),Tf=n(f,"H2",{class:!0});var Wze=s(Tf);ew=n(Wze,"A",{id:!0,class:!0,href:!0});var Ojt=s(ew);d0e=n(Ojt,"SPAN",{});var Vjt=s(d0e);T(R$.$$.fragment,Vjt),Vjt.forEach(t),Ojt.forEach(t),oYr=i(Wze),c0e=n(Wze,"SPAN",{});var Xjt=s(c0e);rYr=r(Xjt,"FlaxAutoModelForVision2Seq"),Xjt.forEach(t),Wze.forEach(t),qVe=i(f),wr=n(f,"DIV",{class:!0});var bi=s(wr);T(P$.$$.fragment,bi),tYr=i(bi),Mf=n(bi,"P",{});var ste=s(Mf);aYr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),coe=n(ste,"A",{href:!0});var zjt=s(coe);nYr=r(zjt,"from_pretrained()"),zjt.forEach(t),sYr=r(ste," class method or the "),foe=n(ste,"A",{href:!0});var Qjt=s(foe);lYr=r(Qjt,"from_config()"),Qjt.forEach(t),iYr=r(ste,` class
method.`),ste.forEach(t),dYr=i(bi),B$=n(bi,"P",{});var Hze=s(B$);cYr=r(Hze,"This class cannot be instantiated directly using "),f0e=n(Hze,"CODE",{});var Wjt=s(f0e);fYr=r(Wjt,"__init__()"),Wjt.forEach(t),mYr=r(Hze," (throws an error)."),Hze.forEach(t),gYr=i(bi),oa=n(bi,"DIV",{class:!0});var ML=s(oa);T(I$.$$.fragment,ML),hYr=i(ML),m0e=n(ML,"P",{});var Hjt=s(m0e);pYr=r(Hjt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hjt.forEach(t),_Yr=i(ML),Ef=n(ML,"P",{});var lte=s(Ef);uYr=r(lte,`Note:
Loading a model from its configuration file does `),g0e=n(lte,"STRONG",{});var Ujt=s(g0e);bYr=r(Ujt,"not"),Ujt.forEach(t),vYr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=n(lte,"A",{href:!0});var Jjt=s(moe);FYr=r(Jjt,"from_pretrained()"),Jjt.forEach(t),TYr=r(lte," to load the model weights."),lte.forEach(t),MYr=i(ML),T(ow.$$.fragment,ML),ML.forEach(t),EYr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(N$.$$.fragment,vi),CYr=i(vi),h0e=n(vi,"P",{});var Yjt=s(h0e);wYr=r(Yjt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yjt.forEach(t),AYr=i(vi),kn=n(vi,"P",{});var EL=s(kn);LYr=r(EL,"The model class to instantiate is selected based on the "),p0e=n(EL,"CODE",{});var Zjt=s(p0e);yYr=r(Zjt,"model_type"),Zjt.forEach(t),xYr=r(EL,` property of the config object (either
passed as an argument or loaded from `),_0e=n(EL,"CODE",{});var Kjt=s(_0e);$Yr=r(Kjt,"pretrained_model_name_or_path"),Kjt.forEach(t),kYr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=n(EL,"CODE",{});var eDt=s(u0e);SYr=r(eDt,"pretrained_model_name_or_path"),eDt.forEach(t),RYr=r(EL,":"),EL.forEach(t),PYr=i(vi),b0e=n(vi,"UL",{});var oDt=s(b0e);rw=n(oDt,"LI",{});var RGe=s(rw);v0e=n(RGe,"STRONG",{});var rDt=s(v0e);BYr=r(rDt,"vision-encoder-decoder"),rDt.forEach(t),IYr=r(RGe," \u2014 "),goe=n(RGe,"A",{href:!0});var tDt=s(goe);NYr=r(tDt,"FlaxVisionEncoderDecoderModel"),tDt.forEach(t),qYr=r(RGe," (Vision Encoder decoder model)"),RGe.forEach(t),oDt.forEach(t),jYr=i(vi),T(tw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dOt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Rn,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertModel"),c(kf,"id","extending-the-auto-classes"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#extending-the-auto-classes"),c(Li,"class","relative group"),c(Rf,"id","transformers.AutoConfig"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(sS,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(lS,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertConfig"),c(iS,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartConfig"),c(dS,"href","/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitConfig"),c(cS,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertConfig"),c(fS,"href","/docs/transformers/pr_17776/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(mS,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdConfig"),c(gS,"href","/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(hS,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(pS,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(_S,"href","/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomConfig"),c(uS,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertConfig"),c(bS,"href","/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineConfig"),c(vS,"href","/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPConfig"),c(FS,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertConfig"),c(TS,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextConfig"),c(MS,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLConfig"),c(ES,"href","/docs/transformers/pr_17776/en/model_doc/cvt#transformers.CvtConfig"),c(CS,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(wS,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(AS,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(LS,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaConfig"),c(yS,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(xS,"href","/docs/transformers/pr_17776/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($S,"href","/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTConfig"),c(kS,"href","/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrConfig"),c(SS,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertConfig"),c(RS,"href","/docs/transformers/pr_17776/en/model_doc/dpr#transformers.DPRConfig"),c(PS,"href","/docs/transformers/pr_17776/en/model_doc/dpt#transformers.DPTConfig"),c(BS,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraConfig"),c(IS,"href","/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(NS,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertConfig"),c(qS,"href","/docs/transformers/pr_17776/en/model_doc/flava#transformers.FlavaConfig"),c(jS,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetConfig"),c(DS,"href","/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTConfig"),c(GS,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelConfig"),c(OS,"href","/docs/transformers/pr_17776/en/model_doc/glpn#transformers.GLPNConfig"),c(VS,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Config"),c(XS,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(zS,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(QS,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJConfig"),c(WS,"href","/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertConfig"),c(HS,"href","/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertConfig"),c(US,"href","/docs/transformers/pr_17776/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(JS,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(YS,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(ZS,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(KS,"href","/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDConfig"),c(eR,"href","/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitConfig"),c(oR,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerConfig"),c(rR,"href","/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5Config"),c(tR,"href","/docs/transformers/pr_17776/en/model_doc/luke#transformers.LukeConfig"),c(aR,"href","/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertConfig"),c(nR,"href","/docs/transformers/pr_17776/en/model_doc/m2m_100#transformers.M2M100Config"),c(sR,"href","/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianConfig"),c(lR,"href","/docs/transformers/pr_17776/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(iR,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartConfig"),c(dR,"href","/docs/transformers/pr_17776/en/model_doc/mctct#transformers.MCTCTConfig"),c(cR,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(fR,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(mR,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetConfig"),c(gR,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Config"),c(hR,"href","/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaConfig"),c(pR,"href","/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(_R,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(uR,"href","/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTConfig"),c(bR,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusConfig"),c(vR,"href","/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverConfig"),c(FR,"href","/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartConfig"),c(TR,"href","/docs/transformers/pr_17776/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(MR,"href","/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(ER,"href","/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(CR,"href","/docs/transformers/pr_17776/en/model_doc/rag#transformers.RagConfig"),c(wR,"href","/docs/transformers/pr_17776/en/model_doc/realm#transformers.RealmConfig"),c(AR,"href","/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerConfig"),c(LR,"href","/docs/transformers/pr_17776/en/model_doc/regnet#transformers.RegNetConfig"),c(yR,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertConfig"),c(xR,"href","/docs/transformers/pr_17776/en/model_doc/resnet#transformers.ResNetConfig"),c($R,"href","/docs/transformers/pr_17776/en/model_doc/retribert#transformers.RetriBertConfig"),c(kR,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaConfig"),c(SR,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerConfig"),c(RR,"href","/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerConfig"),c(PR,"href","/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWConfig"),c(BR,"href","/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDConfig"),c(IR,"href","/docs/transformers/pr_17776/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(NR,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(qR,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(jR,"href","/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterConfig"),c(DR,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(GR,"href","/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinConfig"),c(OR,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Config"),c(VR,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasConfig"),c(XR,"href","/docs/transformers/pr_17776/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(zR,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(QR,"href","/docs/transformers/pr_17776/en/model_doc/trocr#transformers.TrOCRConfig"),c(WR,"href","/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(HR,"href","/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(UR,"href","/docs/transformers/pr_17776/en/model_doc/van#transformers.VanConfig"),c(JR,"href","/docs/transformers/pr_17776/en/model_doc/vilt#transformers.ViltConfig"),c(YR,"href","/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(ZR,"href","/docs/transformers/pr_17776/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(KR,"href","/docs/transformers/pr_17776/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(eP,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTConfig"),c(oP,"href","/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(rP,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(tP,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(aP,"href","/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMConfig"),c(nP,"href","/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMConfig"),c(sP,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMConfig"),c(lP,"href","/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(iP,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(dP,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(cP,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetConfig"),c(fP,"href","/docs/transformers/pr_17776/en/model_doc/yolos#transformers.YolosConfig"),c(mP,"href","/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"id","transformers.AutoTokenizer"),c(Og,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Og,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(gP,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(hP,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertTokenizer"),c(pP,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(_P,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartTokenizer"),c(uP,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartTokenizerFast"),c(bP,"href","/docs/transformers/pr_17776/en/model_doc/barthez#transformers.BarthezTokenizer"),c(vP,"href","/docs/transformers/pr_17776/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(FP,"href","/docs/transformers/pr_17776/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(TP,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizer"),c(MP,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizerFast"),c(EP,"href","/docs/transformers/pr_17776/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(CP,"href","/docs/transformers/pr_17776/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(wP,"href","/docs/transformers/pr_17776/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(AP,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(LP,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(yP,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(xP,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c($P,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(kP,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(SP,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(RP,"href","/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(PP,"href","/docs/transformers/pr_17776/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(BP,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertTokenizer"),c(IP,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(NP,"href","/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineTokenizer"),c(qP,"href","/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPTokenizer"),c(jP,"href","/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(DP,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(GP,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17776/en/model_doc/cpm#transformers.CpmTokenizer"),c(VP,"href","/docs/transformers/pr_17776/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(XP,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(zP,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaTokenizer"),c(QP,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(WP,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaTokenizer"),c(HP,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(UP,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(JP,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(YP,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(ZP,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17776/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(eB,"href","/docs/transformers/pr_17776/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(oB,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraTokenizer"),c(rB,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(tB,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(aB,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetTokenizer"),c(nB,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(sB,"href","/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(lB,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelTokenizer"),c(iB,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(dB,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cB,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fB,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mB,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gB,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(hB,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pB,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(_B,"href","/docs/transformers/pr_17776/en/model_doc/herbert#transformers.HerbertTokenizer"),c(uB,"href","/docs/transformers/pr_17776/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(vB,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FB,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TB,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(MB,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(EB,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(CB,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(wB,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(AB,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(LB,"href","/docs/transformers/pr_17776/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(yB,"href","/docs/transformers/pr_17776/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(xB,"href","/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDTokenizer"),c($B,"href","/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDTokenizerFast"),c(kB,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerTokenizer"),c(SB,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(RB,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.T5Tokenizer"),c(PB,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.T5TokenizerFast"),c(BB,"href","/docs/transformers/pr_17776/en/model_doc/luke#transformers.LukeTokenizer"),c(IB,"href","/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(NB,"href","/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(qB,"href","/docs/transformers/pr_17776/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(jB,"href","/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianTokenizer"),c(DB,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartTokenizer"),c(GB,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(OB,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(VB,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(XB,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizer"),c(zB,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizerFast"),c(QB,"href","/docs/transformers/pr_17776/en/model_doc/mluke#transformers.MLukeTokenizer"),c(WB,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(HB,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(UB,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(JB,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(YB,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.T5Tokenizer"),c(ZB,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.T5TokenizerFast"),c(KB,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertTokenizer"),c(eI,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(oI,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(rI,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(tI,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aI,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(nI,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(sI,"href","/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(lI,"href","/docs/transformers/pr_17776/en/model_doc/phobert#transformers.PhobertTokenizer"),c(iI,"href","/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartTokenizer"),c(dI,"href","/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(cI,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizer"),c(fI,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizerFast"),c(mI,"href","/docs/transformers/pr_17776/en/model_doc/rag#transformers.RagTokenizer"),c(gI,"href","/docs/transformers/pr_17776/en/model_doc/realm#transformers.RealmTokenizer"),c(hI,"href","/docs/transformers/pr_17776/en/model_doc/realm#transformers.RealmTokenizerFast"),c(pI,"href","/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerTokenizer"),c(_I,"href","/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(uI,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertTokenizer"),c(bI,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(vI,"href","/docs/transformers/pr_17776/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(FI,"href","/docs/transformers/pr_17776/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(TI,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MI,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EI,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(CI,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(wI,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(AI,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(LI,"href","/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterTokenizer"),c(yI,"href","/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(xI,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c($I,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(kI,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.T5Tokenizer"),c(SI,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.T5TokenizerFast"),c(RI,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasTokenizer"),c(PI,"href","/docs/transformers/pr_17776/en/model_doc/tapex#transformers.TapexTokenizer"),c(BI,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(II,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizer"),c(NI,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizerFast"),c(qI,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizer"),c(jI,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertTokenizerFast"),c(DI,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GI,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OI,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(VI,"href","/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMTokenizer"),c(XI,"href","/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(zI,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMTokenizer"),c(QI,"href","/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(WI,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(HI,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(UI,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaTokenizer"),c(JI,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(YI,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(ZI,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(KI,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertTokenizer"),c(eN,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoFeatureExtractor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(oN,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(rN,"href","/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lN,"href","/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17776/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17776/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17776/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hN,"href","/docs/transformers/pr_17776/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(_N,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(uN,"href","/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17776/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17776/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17776/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(MN,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EN,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CN,"href","/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(wN,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(AN,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LN,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yN,"href","/docs/transformers/pr_17776/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(xN,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($N,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RN,"href","/docs/transformers/pr_17776/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoProcessor"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c(PN,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(BN,"href","/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPProcessor"),c(IN,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(NN,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(qN,"href","/docs/transformers/pr_17776/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(jN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GN,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ON,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(VN,"href","/docs/transformers/pr_17776/en/model_doc/trocr#transformers.TrOCRProcessor"),c(XN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QN,"href","/docs/transformers/pr_17776/en/model_doc/vilt#transformers.ViltProcessor"),c(WN,"href","/docs/transformers/pr_17776/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(HN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JN,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"id","transformers.AutoModel"),c(Lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lp,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c(YN,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZN,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KN,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eq,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertModel"),c(oq,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartModel"),c(rq,"href","/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitModel"),c(tq,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertModel"),c(aq,"href","/docs/transformers/pr_17776/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(nq,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdModel"),c(sq,"href","/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(lq,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(iq,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(dq,"href","/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomModel"),c(cq,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertModel"),c(fq,"href","/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineModel"),c(mq,"href","/docs/transformers/pr_17776/en/model_doc/clip#transformers.CLIPModel"),c(gq,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertModel"),c(hq,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextModel"),c(pq,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLModel"),c(_q,"href","/docs/transformers/pr_17776/en/model_doc/cvt#transformers.CvtModel"),c(uq,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(bq,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(vq,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Fq,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaModel"),c(Tq,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Mq,"href","/docs/transformers/pr_17776/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Eq,"href","/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTModel"),c(Cq,"href","/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrModel"),c(wq,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertModel"),c(Aq,"href","/docs/transformers/pr_17776/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Lq,"href","/docs/transformers/pr_17776/en/model_doc/dpt#transformers.DPTModel"),c(yq,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraModel"),c(xq,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertModel"),c($q,"href","/docs/transformers/pr_17776/en/model_doc/flava#transformers.FlavaModel"),c(kq,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetModel"),c(Sq,"href","/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTModel"),c(Rq,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelModel"),c(Pq,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Bq,"href","/docs/transformers/pr_17776/en/model_doc/glpn#transformers.GLPNModel"),c(Iq,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2Model"),c(Nq,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(qq,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(jq,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJModel"),c(Dq,"href","/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertModel"),c(Gq,"href","/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertModel"),c(Oq,"href","/docs/transformers/pr_17776/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Vq,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Xq,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(zq,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Qq,"href","/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDModel"),c(Wq,"href","/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitModel"),c(Hq,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerModel"),c(Uq,"href","/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5Model"),c(Jq,"href","/docs/transformers/pr_17776/en/model_doc/luke#transformers.LukeModel"),c(Yq,"href","/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertModel"),c(Zq,"href","/docs/transformers/pr_17776/en/model_doc/m2m_100#transformers.M2M100Model"),c(Kq,"href","/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianModel"),c(ej,"href","/docs/transformers/pr_17776/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oj,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartModel"),c(rj,"href","/docs/transformers/pr_17776/en/model_doc/mctct#transformers.MCTCTModel"),c(tj,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(aj,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertModel"),c(nj,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetModel"),c(sj,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5Model"),c(lj,"href","/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaModel"),c(ij,"href","/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerModel"),c(dj,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(cj,"href","/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTModel"),c(fj,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusModel"),c(mj,"href","/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverModel"),c(gj,"href","/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartModel"),c(hj,"href","/docs/transformers/pr_17776/en/model_doc/poolformer#transformers.PoolFormerModel"),c(pj,"href","/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(_j,"href","/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertModel"),c(uj,"href","/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerModel"),c(bj,"href","/docs/transformers/pr_17776/en/model_doc/regnet#transformers.RegNetModel"),c(vj,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertModel"),c(Fj,"href","/docs/transformers/pr_17776/en/model_doc/resnet#transformers.ResNetModel"),c(Tj,"href","/docs/transformers/pr_17776/en/model_doc/retribert#transformers.RetriBertModel"),c(Mj,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaModel"),c(Ej,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerModel"),c(Cj,"href","/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerModel"),c(wj,"href","/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWModel"),c(Aj,"href","/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDModel"),c(Lj,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(yj,"href","/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterModel"),c(xj,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c($j,"href","/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinModel"),c(kj,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5Model"),c(Sj,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasModel"),c(Rj,"href","/docs/transformers/pr_17776/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Pj,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Bj,"href","/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Ij,"href","/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Nj,"href","/docs/transformers/pr_17776/en/model_doc/van#transformers.VanModel"),c(qj,"href","/docs/transformers/pr_17776/en/model_doc/vilt#transformers.ViltModel"),c(jj,"href","/docs/transformers/pr_17776/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Dj,"href","/docs/transformers/pr_17776/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Gj,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTModel"),c(Oj,"href","/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Vj,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Xj,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(zj,"href","/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMModel"),c(Qj,"href","/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMModel"),c(Wj,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMModel"),c(Hj,"href","/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Uj,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Jj,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Yj,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetModel"),c(Zj,"href","/docs/transformers/pr_17776/en/model_doc/yolos#transformers.YolosModel"),c(Kj,"href","/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xu,"id","transformers.AutoModelForPreTraining"),c(xu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xu,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(eD,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oD,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rD,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tD,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForPreTraining"),c(aD,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForPreTraining"),c(sD,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(lD,"href","/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomForCausalLM"),c(iD,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(dD,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(cD,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fD,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mD,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(gD,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForPreTraining"),c(pD,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_D,"href","/docs/transformers/pr_17776/en/model_doc/flava#transformers.FlavaForPreTraining"),c(uD,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForPreTraining"),c(bD,"href","/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(vD,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(FD,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(TD,"href","/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ED,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CD,"href","/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(wD,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(AD,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(LD,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yD,"href","/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForPreTraining"),c(xD,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($D,"href","/docs/transformers/pr_17776/en/model_doc/retribert#transformers.RetriBertModel"),c(kD,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(SD,"href","/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(RD,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(PD,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(BD,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(ID,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ND,"href","/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(qD,"href","/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(jD,"href","/docs/transformers/pr_17776/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(DD,"href","/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(GD,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(OD,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(VD,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XD,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zD,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QD,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E7,"id","transformers.AutoModelForCausalLM"),c(E7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E7,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(WD,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HD,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UD,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JD,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForCausalLM"),c(YD,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertLMHeadModel"),c(ZD,"href","/docs/transformers/pr_17776/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(KD,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eG,"href","/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oG,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rG,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tG,"href","/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aG,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nG,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sG,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(lG,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForCausalLM"),c(iG,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dG,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(cG,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(fG,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(mG,"href","/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianForCausalLM"),c(gG,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForCausalLM"),c(hG,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(pG,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_G,"href","/docs/transformers/pr_17776/en/model_doc/opt#transformers.OPTForCausalLM"),c(uG,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(bG,"href","/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(vG,"href","/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(FG,"href","/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(TG,"href","/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(MG,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(EG,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(CG,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(wG,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(AG,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LG,"href","/docs/transformers/pr_17776/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yG,"href","/docs/transformers/pr_17776/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(xG,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($G,"href","/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(kG,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(SG,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(RG,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f1,"id","transformers.AutoModelForMaskedLM"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(PG,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BG,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IG,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NG,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(qG,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jG,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForMaskedLM"),c(DG,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(GG,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(OG,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(VG,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(XG,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zG,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(QG,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(WG,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(HG,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(UG,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(JG,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(YG,"href","/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(KG,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eO,"href","/docs/transformers/pr_17776/en/model_doc/luke#transformers.LukeForMaskedLM"),c(oO,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rO,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(tO,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(aO,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nO,"href","/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForMaskedLM"),c(sO,"href","/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(lO,"href","/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(iO,"href","/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(dO,"href","/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(cO,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(fO,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mO,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(gO,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(hO,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(pO,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_O,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(uO,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bO,"href","/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z1,"id","transformers.AutoModelForSeq2SeqLM"),c(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Qi,"class","relative group"),c(vO,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FO,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TO,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MO,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(AO,"href","/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(LO,"href","/docs/transformers/pr_17776/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(xO,"href","/docs/transformers/pr_17776/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c($O,"href","/docs/transformers/pr_17776/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(kO,"href","/docs/transformers/pr_17776/en/model_doc/marian#transformers.MarianMTModel"),c(SO,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(RO,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(PO,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(BO,"href","/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(IO,"href","/docs/transformers/pr_17776/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(NO,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qO,"href","/docs/transformers/pr_17776/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v2,"id","transformers.AutoModelForSequenceClassification"),c(v2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v2,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c(jO,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DO,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GO,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OO,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(MV,"href","/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(EV,"href","/docs/transformers/pr_17776/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(CV,"href","/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(wV,"href","/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(AV,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(yV,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c($V,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(PV,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(IV,"href","/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bb,"id","transformers.AutoModelForMultipleChoice"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForMultipleChoice"),c(Zi,"class","relative group"),c(NV,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jV,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DV,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(eX,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(oX,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(rX,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(tX,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(aX,"href","/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForMultipleChoice"),c(nX,"href","/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(sX,"href","/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(lX,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(iX,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(dX,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(cX,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(fX,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(mX,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(gX,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(hX,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(pX,"href","/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zb,"id","transformers.AutoModelForNextSentencePrediction"),c(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zb,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(_X,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(FX,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(TX,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(MX,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(EX,"href","/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForNextSentencePrediction"),c(CX,"href","/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iv,"id","transformers.AutoModelForTokenClassification"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(wX,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AX,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xX,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForTokenClassification"),c($X,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(kX,"href","/docs/transformers/pr_17776/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(SX,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(RX,"href","/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PX,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(BX,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(IX,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(NX,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(qX,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(jX,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(DX,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(GX,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(OX,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(VX,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(XX,"href","/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(zX,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(QX,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(WX,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(HX,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(UX,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(JX,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(YX,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(ZX,"href","/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForTokenClassification"),c(KX,"href","/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(ez,"href","/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(oz,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(rz,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(tz,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(az,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(nz,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(sz,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(lz,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(iz,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(dz,"href","/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForQuestionAnswering"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(cz,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17776/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17776/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Lz,"href","/docs/transformers/pr_17776/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c($z,"href","/docs/transformers/pr_17776/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17776/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(Rz,"href","/docs/transformers/pr_17776/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(Pz,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(Bz,"href","/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(Iz,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(Nz,"href","/docs/transformers/pr_17776/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(qz,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(jz,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Dz,"href","/docs/transformers/pr_17776/en/model_doc/nezha#transformers.NeZhaForQuestionAnswering"),c(Gz,"href","/docs/transformers/pr_17776/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Oz,"href","/docs/transformers/pr_17776/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Vz,"href","/docs/transformers/pr_17776/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Xz,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(zz,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Qz,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Wz,"href","/docs/transformers/pr_17776/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Hz,"href","/docs/transformers/pr_17776/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Uz,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(Jz,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Kz,"href","/docs/transformers/pr_17776/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForTableQuestionAnswering"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(eQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tQ,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForImageClassification"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitForImageClassification"),c(iQ,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(dQ,"href","/docs/transformers/pr_17776/en/model_doc/cvt#transformers.CvtForImageClassification"),c(cQ,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(fQ,"href","/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTForImageClassification"),c(mQ,"href","/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(gQ,"href","/docs/transformers/pr_17776/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(hQ,"href","/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitForImageClassification"),c(pQ,"href","/docs/transformers/pr_17776/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(_Q,"href","/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(uQ,"href","/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(bQ,"href","/docs/transformers/pr_17776/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(vQ,"href","/docs/transformers/pr_17776/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(FQ,"href","/docs/transformers/pr_17776/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(TQ,"href","/docs/transformers/pr_17776/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(MQ,"href","/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(EQ,"href","/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinForImageClassification"),c(CQ,"href","/docs/transformers/pr_17776/en/model_doc/van#transformers.VanForImageClassification"),c(wQ,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.AutoModelForVision2Seq"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.AutoModelForVision2Seq"),c(_d,"class","relative group"),c(AQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.AutoModelForVisualQuestionAnswering"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c($Q,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17776/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_6,"id","transformers.AutoModelForAudioClassification"),c(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_6,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(PQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NQ,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x6,"id","transformers.AutoModelForAudioFrameClassification"),c(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x6,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c(QQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(JQ,"href","/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(YQ,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(ZQ,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(KQ,"href","/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q6,"id","transformers.AutoModelForCTC"),c(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q6,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(eW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(aW,"href","/docs/transformers/pr_17776/en/model_doc/hubert#transformers.HubertForCTC"),c(nW,"href","/docs/transformers/pr_17776/en/model_doc/mctct#transformers.MCTCTForCTC"),c(sW,"href","/docs/transformers/pr_17776/en/model_doc/sew#transformers.SEWForCTC"),c(lW,"href","/docs/transformers/pr_17776/en/model_doc/sew-d#transformers.SEWDForCTC"),c(iW,"href","/docs/transformers/pr_17776/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(dW,"href","/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(cW,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(fW,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(mW,"href","/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_17776/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(uW,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForAudioXVector"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(bW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(MW,"href","/docs/transformers/pr_17776/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(EW,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(CW,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(wW,"href","/docs/transformers/pr_17776/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForMaskedImageModeling"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(AW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_17776/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c($W,"href","/docs/transformers/pr_17776/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(kW,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForObjectDetection"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(SW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrForObjectDetection"),c(IW,"href","/docs/transformers/pr_17776/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AT,"id","transformers.AutoModelForImageSegmentation"),c(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AT,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(NW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DW,"href","/docs/transformers/pr_17776/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForSemanticSegmentation"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Wd,"class","relative group"),c(GW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/pr_17776/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(zW,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(QW,"href","/docs/transformers/pr_17776/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(WW,"href","/docs/transformers/pr_17776/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForInstanceSegmentation"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c(HW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_17776/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.TFAutoModel"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.TFAutoModel"),c(Kd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertModel"),c(rH,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.TFBartModel"),c(tH,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertModel"),c(aH,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(nH,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(sH,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertModel"),c(lH,"href","/docs/transformers/pr_17776/en/model_doc/clip#transformers.TFCLIPModel"),c(iH,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertModel"),c(dH,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.TFConvNextModel"),c(cH,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.TFCTRLModel"),c(fH,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(mH,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaModel"),c(gH,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(hH,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(pH,"href","/docs/transformers/pr_17776/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(_H,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraModel"),c(uH,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(bH,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelModel"),c(vH,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(FH,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.TFGPT2Model"),c(TH,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.TFGPTJModel"),c(MH,"href","/docs/transformers/pr_17776/en/model_doc/hubert#transformers.TFHubertModel"),c(EH,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(CH,"href","/docs/transformers/pr_17776/en/model_doc/led#transformers.TFLEDModel"),c(wH,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerModel"),c(AH,"href","/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.TFLxmertModel"),c(LH,"href","/docs/transformers/pr_17776/en/model_doc/marian#transformers.TFMarianModel"),c(yH,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.TFMBartModel"),c(xH,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c($H,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetModel"),c(kH,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.TFMT5Model"),c(SH,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(RH,"href","/docs/transformers/pr_17776/en/model_doc/opt#transformers.TFOPTModel"),c(PH,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.TFPegasusModel"),c(BH,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertModel"),c(IH,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaModel"),c(NH,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerModel"),c(qH,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(jH,"href","/docs/transformers/pr_17776/en/model_doc/swin#transformers.TFSwinModel"),c(DH,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.TFT5Model"),c(GH,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasModel"),c(OH,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(VH,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.TFViTModel"),c(XH,"href","/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(zH,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(QH,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMModel"),c(WH,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(HH,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForPreTraining"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(UH,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(KH,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(eU,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForPreTraining"),c(oU,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(rU,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tU,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(aU,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(nU,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(sU,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(lU,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(iU,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(dU,"href","/docs/transformers/pr_17776/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(cU,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(fU,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(mU,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gU,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(hU,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(pU,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(_U,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uU,"href","/docs/transformers/pr_17776/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(bU,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(vU,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(FU,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fE,"id","transformers.TFAutoModelForCausalLM"),c(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fE,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(TU,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(wU,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(AU,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(LU,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(yU,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(xU,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c($U,"href","/docs/transformers/pr_17776/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(kU,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(SU,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(RU,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(PU,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(BU,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(IU,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.TFAutoModelForImageClassification"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(NU,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qU,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_17776/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(GU,"href","/docs/transformers/pr_17776/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(OU,"href","/docs/transformers/pr_17776/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(VU,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForMaskedLM"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForMaskedLM"),c(fc,"class","relative group"),c(XU,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(HU,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(UU,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(JU,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(YU,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(ZU,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(KU,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eJ,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(oJ,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rJ,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(tJ,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aJ,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(nJ,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(sJ,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lJ,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(iJ,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(cJ,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fJ,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mJ,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.TFAutoModelForSeq2SeqLM"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(vJ,"href","/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(FJ,"href","/docs/transformers/pr_17776/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(TJ,"href","/docs/transformers/pr_17776/en/model_doc/marian#transformers.TFMarianMTModel"),c(MJ,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.TFAutoModelForSequenceClassification"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.TFAutoModelForSequenceClassification"),c(uc,"class","relative group"),c(AJ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LJ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xJ,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c($J,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17776/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(NJ,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_17776/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_17776/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(eY,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForMultipleChoice"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(oY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(nY,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(sY,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lY,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(iY,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(dY,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cY,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(fY,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(mY,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gY,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hY,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(pY,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(_Y,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(uY,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bY,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vY,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(FY,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(TY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(wY,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(AY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xY,"href","/docs/transformers/pr_17776/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.TFAutoModelForTokenClassification"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c($Y,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RY,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(PY,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(BY,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(IY,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(NY,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(qY,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(jY,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(DY,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(GY,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(OY,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(VY,"href","/docs/transformers/pr_17776/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(XY,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(zY,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(QY,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(WY,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(HY,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(UY,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(JY,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(YY,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(ZY,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.TFAutoModelForQuestionAnswering"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(KY,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rZ,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(tZ,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(aZ,"href","/docs/transformers/pr_17776/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(nZ,"href","/docs/transformers/pr_17776/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(sZ,"href","/docs/transformers/pr_17776/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(lZ,"href","/docs/transformers/pr_17776/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(iZ,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(dZ,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(cZ,"href","/docs/transformers/pr_17776/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(fZ,"href","/docs/transformers/pr_17776/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(mZ,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17776/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17776/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17776/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_17776/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17776/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(FZ,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(TZ,"href","/docs/transformers/pr_17776/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.TFAutoModelForVision2Seq"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(MZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wZ,"href","/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(AZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xZ,"href","/docs/transformers/pr_17776/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F5,"id","transformers.FlaxAutoModel"),c(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F5,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c($Z,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertModel"),c(PZ,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartModel"),c(BZ,"href","/docs/transformers/pr_17776/en/model_doc/beit#transformers.FlaxBeitModel"),c(IZ,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertModel"),c(NZ,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(qZ,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(jZ,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(DZ,"href","/docs/transformers/pr_17776/en/model_doc/clip#transformers.FlaxCLIPModel"),c(GZ,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(OZ,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraModel"),c(VZ,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(XZ,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(zZ,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(QZ,"href","/docs/transformers/pr_17776/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(WZ,"href","/docs/transformers/pr_17776/en/model_doc/marian#transformers.FlaxMarianModel"),c(HZ,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartModel"),c(UZ,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.FlaxMT5Model"),c(JZ,"href","/docs/transformers/pr_17776/en/model_doc/opt#transformers.FlaxOPTModel"),c(YZ,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(ZZ,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(KZ,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(eK,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.FlaxT5Model"),c(oK,"href","/docs/transformers/pr_17776/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(rK,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.FlaxViTModel"),c(tK,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(aK,"href","/docs/transformers/pr_17776/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(nK,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForCausalLM"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(sK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(cK,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(fK,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(mK,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(gK,"href","/docs/transformers/pr_17776/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(hK,"href","/docs/transformers/pr_17776/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(pK,"href","/docs/transformers/pr_17776/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(_K,"href","/docs/transformers/pr_17776/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(uK,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(bK,"href","/docs/transformers/pr_17776/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.FlaxAutoModelForPreTraining"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Wc,"class","relative group"),c(vK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(EK,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(wK,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(AK,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(LK,"href","/docs/transformers/pr_17776/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(yK,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c($K,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kK,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(SK,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(RK,"href","/docs/transformers/pr_17776/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(PK,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForMaskedLM"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(BK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(jK,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DK,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(GK,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(OK,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(VK,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(XK,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(zK,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(QK,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(WK,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Kc,"class","relative group"),c(HK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ZK,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(KK,"href","/docs/transformers/pr_17776/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(eee,"href","/docs/transformers/pr_17776/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(oee,"href","/docs/transformers/pr_17776/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(ree,"href","/docs/transformers/pr_17776/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(tee,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aee,"href","/docs/transformers/pr_17776/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nee,"href","/docs/transformers/pr_17776/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(see,"href","/docs/transformers/pr_17776/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(lee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cee,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(fee,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(mee,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(gee,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(hee,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(pee,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(_ee,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(uee,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(bee,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(vee,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(c0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(Fee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eee,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Cee,"href","/docs/transformers/pr_17776/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(wee,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Aee,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Lee,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(yee,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(xee,"href","/docs/transformers/pr_17776/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c($ee,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(kee,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(See,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E0,"id","transformers.FlaxAutoModelForTokenClassification"),c(E0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(Ree,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iee,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Nee,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(qee,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(jee,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Dee,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Gee,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Oee,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Vee,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(P0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c(Xee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qee,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wee,"href","/docs/transformers/pr_17776/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Hee,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Uee,"href","/docs/transformers/pr_17776/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Jee,"href","/docs/transformers/pr_17776/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Yee,"href","/docs/transformers/pr_17776/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Zee,"href","/docs/transformers/pr_17776/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Kee,"href","/docs/transformers/pr_17776/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(eoe,"href","/docs/transformers/pr_17776/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(ooe,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(roe,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(toe,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aoe,"href","/docs/transformers/pr_17776/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.FlaxAutoModelForImageClassification"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(noe,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(soe,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(loe,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ioe,"href","/docs/transformers/pr_17776/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(doe,"href","/docs/transformers/pr_17776/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForVision2Seq"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c(coe,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(foe,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(moe,"href","/docs/transformers/pr_17776/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(goe,"href","/docs/transformers/pr_17776/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Fi),b(f,Lf,u),b(f,at,u),e(at,Ti),e(at,Mi),e(Mi,CL),e(at,yf),b(f,Oe,u),b(f,Qe,u),e(Qe,Ei),e(Qe,Rn),e(Rn,wL),e(Qe,Pn),e(Qe,Bn),e(Bn,AL),e(Qe,Ci),e(Qe,In),e(In,LL),e(Qe,wi),b(f,xf,u),M(xa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,eS),e(Ae,Ai),e(Ai,oS),e(Ae,rS),b(f,Co,u),b(f,$a,u),e($a,tS),e($a,$f),e($f,aS),e($a,Uze),b(f,PGe,u),b(f,Li,u),e(Li,kf),e(kf,ite),M(yL,ite,null),e(Li,Jze),e(Li,dte),e(dte,Yze),b(f,BGe,u),b(f,Nn,u),e(Nn,Zze),e(Nn,cte),e(cte,Kze),e(Nn,eQe),e(Nn,fte),e(fte,oQe),e(Nn,rQe),b(f,IGe,u),M(xL,f,u),b(f,NGe,u),b(f,nS,u),e(nS,tQe),b(f,qGe,u),M(Sf,f,u),b(f,jGe,u),b(f,yi,u),e(yi,Rf),e(Rf,mte),M($L,mte,null),e(yi,aQe),e(yi,gte),e(gte,nQe),b(f,DGe,u),b(f,wo,u),M(kL,wo,null),e(wo,sQe),e(wo,SL),e(SL,lQe),e(SL,sS),e(sS,iQe),e(SL,dQe),e(wo,cQe),e(wo,RL),e(RL,fQe),e(RL,hte),e(hte,mQe),e(RL,gQe),e(wo,hQe),e(wo,Ar),M(PL,Ar,null),e(Ar,pQe),e(Ar,pte),e(pte,_Qe),e(Ar,uQe),e(Ar,xi),e(xi,bQe),e(xi,_te),e(_te,vQe),e(xi,FQe),e(xi,ute),e(ute,TQe),e(xi,MQe),e(Ar,EQe),e(Ar,A),e(A,Pf),e(Pf,bte),e(bte,CQe),e(Pf,wQe),e(Pf,lS),e(lS,AQe),e(Pf,LQe),e(A,yQe),e(A,Bf),e(Bf,vte),e(vte,xQe),e(Bf,$Qe),e(Bf,iS),e(iS,kQe),e(Bf,SQe),e(A,RQe),e(A,If),e(If,Fte),e(Fte,PQe),e(If,BQe),e(If,dS),e(dS,IQe),e(If,NQe),e(A,qQe),e(A,Nf),e(Nf,Tte),e(Tte,jQe),e(Nf,DQe),e(Nf,cS),e(cS,GQe),e(Nf,OQe),e(A,VQe),e(A,qf),e(qf,Mte),e(Mte,XQe),e(qf,zQe),e(qf,fS),e(fS,QQe),e(qf,WQe),e(A,HQe),e(A,jf),e(jf,Ete),e(Ete,UQe),e(jf,JQe),e(jf,mS),e(mS,YQe),e(jf,ZQe),e(A,KQe),e(A,Df),e(Df,Cte),e(Cte,eWe),e(Df,oWe),e(Df,gS),e(gS,rWe),e(Df,tWe),e(A,aWe),e(A,Gf),e(Gf,wte),e(wte,nWe),e(Gf,sWe),e(Gf,hS),e(hS,lWe),e(Gf,iWe),e(A,dWe),e(A,Of),e(Of,Ate),e(Ate,cWe),e(Of,fWe),e(Of,pS),e(pS,mWe),e(Of,gWe),e(A,hWe),e(A,Vf),e(Vf,Lte),e(Lte,pWe),e(Vf,_We),e(Vf,_S),e(_S,uWe),e(Vf,bWe),e(A,vWe),e(A,Xf),e(Xf,yte),e(yte,FWe),e(Xf,TWe),e(Xf,uS),e(uS,MWe),e(Xf,EWe),e(A,CWe),e(A,zf),e(zf,xte),e(xte,wWe),e(zf,AWe),e(zf,bS),e(bS,LWe),e(zf,yWe),e(A,xWe),e(A,Qf),e(Qf,$te),e($te,$We),e(Qf,kWe),e(Qf,vS),e(vS,SWe),e(Qf,RWe),e(A,PWe),e(A,Wf),e(Wf,kte),e(kte,BWe),e(Wf,IWe),e(Wf,FS),e(FS,NWe),e(Wf,qWe),e(A,jWe),e(A,Hf),e(Hf,Ste),e(Ste,DWe),e(Hf,GWe),e(Hf,TS),e(TS,OWe),e(Hf,VWe),e(A,XWe),e(A,Uf),e(Uf,Rte),e(Rte,zWe),e(Uf,QWe),e(Uf,MS),e(MS,WWe),e(Uf,HWe),e(A,UWe),e(A,Jf),e(Jf,Pte),e(Pte,JWe),e(Jf,YWe),e(Jf,ES),e(ES,ZWe),e(Jf,KWe),e(A,eHe),e(A,Yf),e(Yf,Bte),e(Bte,oHe),e(Yf,rHe),e(Yf,CS),e(CS,tHe),e(Yf,aHe),e(A,nHe),e(A,Zf),e(Zf,Ite),e(Ite,sHe),e(Zf,lHe),e(Zf,wS),e(wS,iHe),e(Zf,dHe),e(A,cHe),e(A,Kf),e(Kf,Nte),e(Nte,fHe),e(Kf,mHe),e(Kf,AS),e(AS,gHe),e(Kf,hHe),e(A,pHe),e(A,em),e(em,qte),e(qte,_He),e(em,uHe),e(em,LS),e(LS,bHe),e(em,vHe),e(A,FHe),e(A,om),e(om,jte),e(jte,THe),e(om,MHe),e(om,yS),e(yS,EHe),e(om,CHe),e(A,wHe),e(A,rm),e(rm,Dte),e(Dte,AHe),e(rm,LHe),e(rm,xS),e(xS,yHe),e(rm,xHe),e(A,$He),e(A,tm),e(tm,Gte),e(Gte,kHe),e(tm,SHe),e(tm,$S),e($S,RHe),e(tm,PHe),e(A,BHe),e(A,am),e(am,Ote),e(Ote,IHe),e(am,NHe),e(am,kS),e(kS,qHe),e(am,jHe),e(A,DHe),e(A,nm),e(nm,Vte),e(Vte,GHe),e(nm,OHe),e(nm,SS),e(SS,VHe),e(nm,XHe),e(A,zHe),e(A,sm),e(sm,Xte),e(Xte,QHe),e(sm,WHe),e(sm,RS),e(RS,HHe),e(sm,UHe),e(A,JHe),e(A,lm),e(lm,zte),e(zte,YHe),e(lm,ZHe),e(lm,PS),e(PS,KHe),e(lm,eUe),e(A,oUe),e(A,im),e(im,Qte),e(Qte,rUe),e(im,tUe),e(im,BS),e(BS,aUe),e(im,nUe),e(A,sUe),e(A,dm),e(dm,Wte),e(Wte,lUe),e(dm,iUe),e(dm,IS),e(IS,dUe),e(dm,cUe),e(A,fUe),e(A,cm),e(cm,Hte),e(Hte,mUe),e(cm,gUe),e(cm,NS),e(NS,hUe),e(cm,pUe),e(A,_Ue),e(A,fm),e(fm,Ute),e(Ute,uUe),e(fm,bUe),e(fm,qS),e(qS,vUe),e(fm,FUe),e(A,TUe),e(A,mm),e(mm,Jte),e(Jte,MUe),e(mm,EUe),e(mm,jS),e(jS,CUe),e(mm,wUe),e(A,AUe),e(A,gm),e(gm,Yte),e(Yte,LUe),e(gm,yUe),e(gm,DS),e(DS,xUe),e(gm,$Ue),e(A,kUe),e(A,hm),e(hm,Zte),e(Zte,SUe),e(hm,RUe),e(hm,GS),e(GS,PUe),e(hm,BUe),e(A,IUe),e(A,pm),e(pm,Kte),e(Kte,NUe),e(pm,qUe),e(pm,OS),e(OS,jUe),e(pm,DUe),e(A,GUe),e(A,_m),e(_m,eae),e(eae,OUe),e(_m,VUe),e(_m,VS),e(VS,XUe),e(_m,zUe),e(A,QUe),e(A,um),e(um,oae),e(oae,WUe),e(um,HUe),e(um,XS),e(XS,UUe),e(um,JUe),e(A,YUe),e(A,bm),e(bm,rae),e(rae,ZUe),e(bm,KUe),e(bm,zS),e(zS,eJe),e(bm,oJe),e(A,rJe),e(A,vm),e(vm,tae),e(tae,tJe),e(vm,aJe),e(vm,QS),e(QS,nJe),e(vm,sJe),e(A,lJe),e(A,Fm),e(Fm,aae),e(aae,iJe),e(Fm,dJe),e(Fm,WS),e(WS,cJe),e(Fm,fJe),e(A,mJe),e(A,Tm),e(Tm,nae),e(nae,gJe),e(Tm,hJe),e(Tm,HS),e(HS,pJe),e(Tm,_Je),e(A,uJe),e(A,Mm),e(Mm,sae),e(sae,bJe),e(Mm,vJe),e(Mm,US),e(US,FJe),e(Mm,TJe),e(A,MJe),e(A,Em),e(Em,lae),e(lae,EJe),e(Em,CJe),e(Em,JS),e(JS,wJe),e(Em,AJe),e(A,LJe),e(A,Cm),e(Cm,iae),e(iae,yJe),e(Cm,xJe),e(Cm,YS),e(YS,$Je),e(Cm,kJe),e(A,SJe),e(A,wm),e(wm,dae),e(dae,RJe),e(wm,PJe),e(wm,ZS),e(ZS,BJe),e(wm,IJe),e(A,NJe),e(A,Am),e(Am,cae),e(cae,qJe),e(Am,jJe),e(Am,KS),e(KS,DJe),e(Am,GJe),e(A,OJe),e(A,Lm),e(Lm,fae),e(fae,VJe),e(Lm,XJe),e(Lm,eR),e(eR,zJe),e(Lm,QJe),e(A,WJe),e(A,ym),e(ym,mae),e(mae,HJe),e(ym,UJe),e(ym,oR),e(oR,JJe),e(ym,YJe),e(A,ZJe),e(A,xm),e(xm,gae),e(gae,KJe),e(xm,eYe),e(xm,rR),e(rR,oYe),e(xm,rYe),e(A,tYe),e(A,$m),e($m,hae),e(hae,aYe),e($m,nYe),e($m,tR),e(tR,sYe),e($m,lYe),e(A,iYe),e(A,km),e(km,pae),e(pae,dYe),e(km,cYe),e(km,aR),e(aR,fYe),e(km,mYe),e(A,gYe),e(A,Sm),e(Sm,_ae),e(_ae,hYe),e(Sm,pYe),e(Sm,nR),e(nR,_Ye),e(Sm,uYe),e(A,bYe),e(A,Rm),e(Rm,uae),e(uae,vYe),e(Rm,FYe),e(Rm,sR),e(sR,TYe),e(Rm,MYe),e(A,EYe),e(A,Pm),e(Pm,bae),e(bae,CYe),e(Pm,wYe),e(Pm,lR),e(lR,AYe),e(Pm,LYe),e(A,yYe),e(A,Bm),e(Bm,vae),e(vae,xYe),e(Bm,$Ye),e(Bm,iR),e(iR,kYe),e(Bm,SYe),e(A,RYe),e(A,Im),e(Im,Fae),e(Fae,PYe),e(Im,BYe),e(Im,dR),e(dR,IYe),e(Im,NYe),e(A,qYe),e(A,Nm),e(Nm,Tae),e(Tae,jYe),e(Nm,DYe),e(Nm,cR),e(cR,GYe),e(Nm,OYe),e(A,VYe),e(A,qm),e(qm,Mae),e(Mae,XYe),e(qm,zYe),e(qm,fR),e(fR,QYe),e(qm,WYe),e(A,HYe),e(A,jm),e(jm,Eae),e(Eae,UYe),e(jm,JYe),e(jm,mR),e(mR,YYe),e(jm,ZYe),e(A,KYe),e(A,Dm),e(Dm,Cae),e(Cae,eZe),e(Dm,oZe),e(Dm,gR),e(gR,rZe),e(Dm,tZe),e(A,aZe),e(A,Gm),e(Gm,wae),e(wae,nZe),e(Gm,sZe),e(Gm,hR),e(hR,lZe),e(Gm,iZe),e(A,dZe),e(A,Om),e(Om,Aae),e(Aae,cZe),e(Om,fZe),e(Om,pR),e(pR,mZe),e(Om,gZe),e(A,hZe),e(A,Vm),e(Vm,Lae),e(Lae,pZe),e(Vm,_Ze),e(Vm,_R),e(_R,uZe),e(Vm,bZe),e(A,vZe),e(A,Xm),e(Xm,yae),e(yae,FZe),e(Xm,TZe),e(Xm,uR),e(uR,MZe),e(Xm,EZe),e(A,CZe),e(A,zm),e(zm,xae),e(xae,wZe),e(zm,AZe),e(zm,bR),e(bR,LZe),e(zm,yZe),e(A,xZe),e(A,Qm),e(Qm,$ae),e($ae,$Ze),e(Qm,kZe),e(Qm,vR),e(vR,SZe),e(Qm,RZe),e(A,PZe),e(A,Wm),e(Wm,kae),e(kae,BZe),e(Wm,IZe),e(Wm,FR),e(FR,NZe),e(Wm,qZe),e(A,jZe),e(A,Hm),e(Hm,Sae),e(Sae,DZe),e(Hm,GZe),e(Hm,TR),e(TR,OZe),e(Hm,VZe),e(A,XZe),e(A,Um),e(Um,Rae),e(Rae,zZe),e(Um,QZe),e(Um,MR),e(MR,WZe),e(Um,HZe),e(A,UZe),e(A,Jm),e(Jm,Pae),e(Pae,JZe),e(Jm,YZe),e(Jm,ER),e(ER,ZZe),e(Jm,KZe),e(A,eKe),e(A,Ym),e(Ym,Bae),e(Bae,oKe),e(Ym,rKe),e(Ym,CR),e(CR,tKe),e(Ym,aKe),e(A,nKe),e(A,Zm),e(Zm,Iae),e(Iae,sKe),e(Zm,lKe),e(Zm,wR),e(wR,iKe),e(Zm,dKe),e(A,cKe),e(A,Km),e(Km,Nae),e(Nae,fKe),e(Km,mKe),e(Km,AR),e(AR,gKe),e(Km,hKe),e(A,pKe),e(A,eg),e(eg,qae),e(qae,_Ke),e(eg,uKe),e(eg,LR),e(LR,bKe),e(eg,vKe),e(A,FKe),e(A,og),e(og,jae),e(jae,TKe),e(og,MKe),e(og,yR),e(yR,EKe),e(og,CKe),e(A,wKe),e(A,rg),e(rg,Dae),e(Dae,AKe),e(rg,LKe),e(rg,xR),e(xR,yKe),e(rg,xKe),e(A,$Ke),e(A,tg),e(tg,Gae),e(Gae,kKe),e(tg,SKe),e(tg,$R),e($R,RKe),e(tg,PKe),e(A,BKe),e(A,ag),e(ag,Oae),e(Oae,IKe),e(ag,NKe),e(ag,kR),e(kR,qKe),e(ag,jKe),e(A,DKe),e(A,ng),e(ng,Vae),e(Vae,GKe),e(ng,OKe),e(ng,SR),e(SR,VKe),e(ng,XKe),e(A,zKe),e(A,sg),e(sg,Xae),e(Xae,QKe),e(sg,WKe),e(sg,RR),e(RR,HKe),e(sg,UKe),e(A,JKe),e(A,lg),e(lg,zae),e(zae,YKe),e(lg,ZKe),e(lg,PR),e(PR,KKe),e(lg,eeo),e(A,oeo),e(A,ig),e(ig,Qae),e(Qae,reo),e(ig,teo),e(ig,BR),e(BR,aeo),e(ig,neo),e(A,seo),e(A,dg),e(dg,Wae),e(Wae,leo),e(dg,ieo),e(dg,IR),e(IR,deo),e(dg,ceo),e(A,feo),e(A,cg),e(cg,Hae),e(Hae,meo),e(cg,geo),e(cg,NR),e(NR,heo),e(cg,peo),e(A,_eo),e(A,fg),e(fg,Uae),e(Uae,ueo),e(fg,beo),e(fg,qR),e(qR,veo),e(fg,Feo),e(A,Teo),e(A,mg),e(mg,Jae),e(Jae,Meo),e(mg,Eeo),e(mg,jR),e(jR,Ceo),e(mg,weo),e(A,Aeo),e(A,gg),e(gg,Yae),e(Yae,Leo),e(gg,yeo),e(gg,DR),e(DR,xeo),e(gg,$eo),e(A,keo),e(A,hg),e(hg,Zae),e(Zae,Seo),e(hg,Reo),e(hg,GR),e(GR,Peo),e(hg,Beo),e(A,Ieo),e(A,pg),e(pg,Kae),e(Kae,Neo),e(pg,qeo),e(pg,OR),e(OR,jeo),e(pg,Deo),e(A,Geo),e(A,_g),e(_g,ene),e(ene,Oeo),e(_g,Veo),e(_g,VR),e(VR,Xeo),e(_g,zeo),e(A,Qeo),e(A,ug),e(ug,one),e(one,Weo),e(ug,Heo),e(ug,XR),e(XR,Ueo),e(ug,Jeo),e(A,Yeo),e(A,bg),e(bg,rne),e(rne,Zeo),e(bg,Keo),e(bg,zR),e(zR,eoo),e(bg,ooo),e(A,roo),e(A,vg),e(vg,tne),e(tne,too),e(vg,aoo),e(vg,QR),e(QR,noo),e(vg,soo),e(A,loo),e(A,Fg),e(Fg,ane),e(ane,ioo),e(Fg,doo),e(Fg,WR),e(WR,coo),e(Fg,foo),e(A,moo),e(A,Tg),e(Tg,nne),e(nne,goo),e(Tg,hoo),e(Tg,HR),e(HR,poo),e(Tg,_oo),e(A,uoo),e(A,Mg),e(Mg,sne),e(sne,boo),e(Mg,voo),e(Mg,UR),e(UR,Foo),e(Mg,Too),e(A,Moo),e(A,Eg),e(Eg,lne),e(lne,Eoo),e(Eg,Coo),e(Eg,JR),e(JR,woo),e(Eg,Aoo),e(A,Loo),e(A,Cg),e(Cg,ine),e(ine,yoo),e(Cg,xoo),e(Cg,YR),e(YR,$oo),e(Cg,koo),e(A,Soo),e(A,wg),e(wg,dne),e(dne,Roo),e(wg,Poo),e(wg,ZR),e(ZR,Boo),e(wg,Ioo),e(A,Noo),e(A,Ag),e(Ag,cne),e(cne,qoo),e(Ag,joo),e(Ag,KR),e(KR,Doo),e(Ag,Goo),e(A,Ooo),e(A,Lg),e(Lg,fne),e(fne,Voo),e(Lg,Xoo),e(Lg,eP),e(eP,zoo),e(Lg,Qoo),e(A,Woo),e(A,yg),e(yg,mne),e(mne,Hoo),e(yg,Uoo),e(yg,oP),e(oP,Joo),e(yg,Yoo),e(A,Zoo),e(A,xg),e(xg,gne),e(gne,Koo),e(xg,ero),e(xg,rP),e(rP,oro),e(xg,rro),e(A,tro),e(A,$g),e($g,hne),e(hne,aro),e($g,nro),e($g,tP),e(tP,sro),e($g,lro),e(A,iro),e(A,kg),e(kg,pne),e(pne,dro),e(kg,cro),e(kg,aP),e(aP,fro),e(kg,mro),e(A,gro),e(A,Sg),e(Sg,_ne),e(_ne,hro),e(Sg,pro),e(Sg,nP),e(nP,_ro),e(Sg,uro),e(A,bro),e(A,Rg),e(Rg,une),e(une,vro),e(Rg,Fro),e(Rg,sP),e(sP,Tro),e(Rg,Mro),e(A,Ero),e(A,Pg),e(Pg,bne),e(bne,Cro),e(Pg,wro),e(Pg,lP),e(lP,Aro),e(Pg,Lro),e(A,yro),e(A,Bg),e(Bg,vne),e(vne,xro),e(Bg,$ro),e(Bg,iP),e(iP,kro),e(Bg,Sro),e(A,Rro),e(A,Ig),e(Ig,Fne),e(Fne,Pro),e(Ig,Bro),e(Ig,dP),e(dP,Iro),e(Ig,Nro),e(A,qro),e(A,Ng),e(Ng,Tne),e(Tne,jro),e(Ng,Dro),e(Ng,cP),e(cP,Gro),e(Ng,Oro),e(A,Vro),e(A,qg),e(qg,Mne),e(Mne,Xro),e(qg,zro),e(qg,fP),e(fP,Qro),e(qg,Wro),e(A,Hro),e(A,jg),e(jg,Ene),e(Ene,Uro),e(jg,Jro),e(jg,mP),e(mP,Yro),e(jg,Zro),e(Ar,Kro),M(Dg,Ar,null),e(wo,eto),e(wo,Gg),M(BL,Gg,null),e(Gg,oto),e(Gg,Cne),e(Cne,rto),b(f,GGe,u),b(f,$i,u),e($i,Og),e(Og,wne),M(IL,wne,null),e($i,tto),e($i,Ane),e(Ane,ato),b(f,OGe,u),b(f,Ao,u),M(NL,Ao,null),e(Ao,nto),e(Ao,qL),e(qL,sto),e(qL,gP),e(gP,lto),e(qL,ito),e(Ao,dto),e(Ao,jL),e(jL,cto),e(jL,Lne),e(Lne,fto),e(jL,mto),e(Ao,gto),e(Ao,Lr),M(DL,Lr,null),e(Lr,hto),e(Lr,yne),e(yne,pto),e(Lr,_to),e(Lr,ka),e(ka,uto),e(ka,xne),e(xne,bto),e(ka,vto),e(ka,$ne),e($ne,Fto),e(ka,Tto),e(ka,kne),e(kne,Mto),e(ka,Eto),e(Lr,Cto),e(Lr,k),e(k,qn),e(qn,Sne),e(Sne,wto),e(qn,Ato),e(qn,hP),e(hP,Lto),e(qn,yto),e(qn,pP),e(pP,xto),e(qn,$to),e(k,kto),e(k,jn),e(jn,Rne),e(Rne,Sto),e(jn,Rto),e(jn,_P),e(_P,Pto),e(jn,Bto),e(jn,uP),e(uP,Ito),e(jn,Nto),e(k,qto),e(k,Dn),e(Dn,Pne),e(Pne,jto),e(Dn,Dto),e(Dn,bP),e(bP,Gto),e(Dn,Oto),e(Dn,vP),e(vP,Vto),e(Dn,Xto),e(k,zto),e(k,Vg),e(Vg,Bne),e(Bne,Qto),e(Vg,Wto),e(Vg,FP),e(FP,Hto),e(Vg,Uto),e(k,Jto),e(k,Gn),e(Gn,Ine),e(Ine,Yto),e(Gn,Zto),e(Gn,TP),e(TP,Kto),e(Gn,eao),e(Gn,MP),e(MP,oao),e(Gn,rao),e(k,tao),e(k,Xg),e(Xg,Nne),e(Nne,aao),e(Xg,nao),e(Xg,EP),e(EP,sao),e(Xg,lao),e(k,iao),e(k,zg),e(zg,qne),e(qne,dao),e(zg,cao),e(zg,CP),e(CP,fao),e(zg,mao),e(k,gao),e(k,Qg),e(Qg,jne),e(jne,hao),e(Qg,pao),e(Qg,wP),e(wP,_ao),e(Qg,uao),e(k,bao),e(k,On),e(On,Dne),e(Dne,vao),e(On,Fao),e(On,AP),e(AP,Tao),e(On,Mao),e(On,LP),e(LP,Eao),e(On,Cao),e(k,wao),e(k,Vn),e(Vn,Gne),e(Gne,Aao),e(Vn,Lao),e(Vn,yP),e(yP,yao),e(Vn,xao),e(Vn,xP),e(xP,$ao),e(Vn,kao),e(k,Sao),e(k,Xn),e(Xn,One),e(One,Rao),e(Xn,Pao),e(Xn,$P),e($P,Bao),e(Xn,Iao),e(Xn,kP),e(kP,Nao),e(Xn,qao),e(k,jao),e(k,Wg),e(Wg,Vne),e(Vne,Dao),e(Wg,Gao),e(Wg,SP),e(SP,Oao),e(Wg,Vao),e(k,Xao),e(k,Hg),e(Hg,Xne),e(Xne,zao),e(Hg,Qao),e(Hg,RP),e(RP,Wao),e(Hg,Hao),e(k,Uao),e(k,Ug),e(Ug,zne),e(zne,Jao),e(Ug,Yao),e(Ug,PP),e(PP,Zao),e(Ug,Kao),e(k,eno),e(k,zn),e(zn,Qne),e(Qne,ono),e(zn,rno),e(zn,BP),e(BP,tno),e(zn,ano),e(zn,IP),e(IP,nno),e(zn,sno),e(k,lno),e(k,Jg),e(Jg,Wne),e(Wne,ino),e(Jg,dno),e(Jg,NP),e(NP,cno),e(Jg,fno),e(k,mno),e(k,Qn),e(Qn,Hne),e(Hne,gno),e(Qn,hno),e(Qn,qP),e(qP,pno),e(Qn,_no),e(Qn,jP),e(jP,uno),e(Qn,bno),e(k,vno),e(k,Wn),e(Wn,Une),e(Une,Fno),e(Wn,Tno),e(Wn,DP),e(DP,Mno),e(Wn,Eno),e(Wn,GP),e(GP,Cno),e(Wn,wno),e(k,Ano),e(k,Hn),e(Hn,Jne),e(Jne,Lno),e(Hn,yno),e(Hn,OP),e(OP,xno),e(Hn,$no),e(Hn,VP),e(VP,kno),e(Hn,Sno),e(k,Rno),e(k,Yg),e(Yg,Yne),e(Yne,Pno),e(Yg,Bno),e(Yg,XP),e(XP,Ino),e(Yg,Nno),e(k,qno),e(k,Un),e(Un,Zne),e(Zne,jno),e(Un,Dno),e(Un,zP),e(zP,Gno),e(Un,Ono),e(Un,QP),e(QP,Vno),e(Un,Xno),e(k,zno),e(k,Jn),e(Jn,Kne),e(Kne,Qno),e(Jn,Wno),e(Jn,WP),e(WP,Hno),e(Jn,Uno),e(Jn,HP),e(HP,Jno),e(Jn,Yno),e(k,Zno),e(k,Yn),e(Yn,ese),e(ese,Kno),e(Yn,eso),e(Yn,UP),e(UP,oso),e(Yn,rso),e(Yn,JP),e(JP,tso),e(Yn,aso),e(k,nso),e(k,Zn),e(Zn,ose),e(ose,sso),e(Zn,lso),e(Zn,YP),e(YP,iso),e(Zn,dso),e(Zn,ZP),e(ZP,cso),e(Zn,fso),e(k,mso),e(k,Kn),e(Kn,rse),e(rse,gso),e(Kn,hso),e(Kn,KP),e(KP,pso),e(Kn,_so),e(Kn,eB),e(eB,uso),e(Kn,bso),e(k,vso),e(k,es),e(es,tse),e(tse,Fso),e(es,Tso),e(es,oB),e(oB,Mso),e(es,Eso),e(es,rB),e(rB,Cso),e(es,wso),e(k,Aso),e(k,Zg),e(Zg,ase),e(ase,Lso),e(Zg,yso),e(Zg,tB),e(tB,xso),e(Zg,$so),e(k,kso),e(k,os),e(os,nse),e(nse,Sso),e(os,Rso),e(os,aB),e(aB,Pso),e(os,Bso),e(os,nB),e(nB,Iso),e(os,Nso),e(k,qso),e(k,Kg),e(Kg,sse),e(sse,jso),e(Kg,Dso),e(Kg,sB),e(sB,Gso),e(Kg,Oso),e(k,Vso),e(k,rs),e(rs,lse),e(lse,Xso),e(rs,zso),e(rs,lB),e(lB,Qso),e(rs,Wso),e(rs,iB),e(iB,Hso),e(rs,Uso),e(k,Jso),e(k,ts),e(ts,ise),e(ise,Yso),e(ts,Zso),e(ts,dB),e(dB,Kso),e(ts,elo),e(ts,cB),e(cB,olo),e(ts,rlo),e(k,tlo),e(k,as),e(as,dse),e(dse,alo),e(as,nlo),e(as,fB),e(fB,slo),e(as,llo),e(as,mB),e(mB,ilo),e(as,dlo),e(k,clo),e(k,eh),e(eh,cse),e(cse,flo),e(eh,mlo),e(eh,gB),e(gB,glo),e(eh,hlo),e(k,plo),e(k,ns),e(ns,fse),e(fse,_lo),e(ns,ulo),e(ns,hB),e(hB,blo),e(ns,vlo),e(ns,pB),e(pB,Flo),e(ns,Tlo),e(k,Mlo),e(k,ss),e(ss,mse),e(mse,Elo),e(ss,Clo),e(ss,_B),e(_B,wlo),e(ss,Alo),e(ss,uB),e(uB,Llo),e(ss,ylo),e(k,xlo),e(k,oh),e(oh,gse),e(gse,$lo),e(oh,klo),e(oh,bB),e(bB,Slo),e(oh,Rlo),e(k,Plo),e(k,ls),e(ls,hse),e(hse,Blo),e(ls,Ilo),e(ls,vB),e(vB,Nlo),e(ls,qlo),e(ls,FB),e(FB,jlo),e(ls,Dlo),e(k,Glo),e(k,is),e(is,pse),e(pse,Olo),e(is,Vlo),e(is,TB),e(TB,Xlo),e(is,zlo),e(is,MB),e(MB,Qlo),e(is,Wlo),e(k,Hlo),e(k,ds),e(ds,_se),e(_se,Ulo),e(ds,Jlo),e(ds,EB),e(EB,Ylo),e(ds,Zlo),e(ds,CB),e(CB,Klo),e(ds,eio),e(k,oio),e(k,cs),e(cs,use),e(use,rio),e(cs,tio),e(cs,wB),e(wB,aio),e(cs,nio),e(cs,AB),e(AB,sio),e(cs,lio),e(k,iio),e(k,fs),e(fs,bse),e(bse,dio),e(fs,cio),e(fs,LB),e(LB,fio),e(fs,mio),e(fs,yB),e(yB,gio),e(fs,hio),e(k,pio),e(k,ms),e(ms,vse),e(vse,_io),e(ms,uio),e(ms,xB),e(xB,bio),e(ms,vio),e(ms,$B),e($B,Fio),e(ms,Tio),e(k,Mio),e(k,gs),e(gs,Fse),e(Fse,Eio),e(gs,Cio),e(gs,kB),e(kB,wio),e(gs,Aio),e(gs,SB),e(SB,Lio),e(gs,yio),e(k,xio),e(k,hs),e(hs,Tse),e(Tse,$io),e(hs,kio),e(hs,RB),e(RB,Sio),e(hs,Rio),e(hs,PB),e(PB,Pio),e(hs,Bio),e(k,Iio),e(k,rh),e(rh,Mse),e(Mse,Nio),e(rh,qio),e(rh,BB),e(BB,jio),e(rh,Dio),e(k,Gio),e(k,ps),e(ps,Ese),e(Ese,Oio),e(ps,Vio),e(ps,IB),e(IB,Xio),e(ps,zio),e(ps,NB),e(NB,Qio),e(ps,Wio),e(k,Hio),e(k,th),e(th,Cse),e(Cse,Uio),e(th,Jio),e(th,qB),e(qB,Yio),e(th,Zio),e(k,Kio),e(k,ah),e(ah,wse),e(wse,edo),e(ah,odo),e(ah,jB),e(jB,rdo),e(ah,tdo),e(k,ado),e(k,_s),e(_s,Ase),e(Ase,ndo),e(_s,sdo),e(_s,DB),e(DB,ldo),e(_s,ido),e(_s,GB),e(GB,ddo),e(_s,cdo),e(k,fdo),e(k,us),e(us,Lse),e(Lse,mdo),e(us,gdo),e(us,OB),e(OB,hdo),e(us,pdo),e(us,VB),e(VB,_do),e(us,udo),e(k,bdo),e(k,bs),e(bs,yse),e(yse,vdo),e(bs,Fdo),e(bs,XB),e(XB,Tdo),e(bs,Mdo),e(bs,zB),e(zB,Edo),e(bs,Cdo),e(k,wdo),e(k,nh),e(nh,xse),e(xse,Ado),e(nh,Ldo),e(nh,QB),e(QB,ydo),e(nh,xdo),e(k,$do),e(k,vs),e(vs,$se),e($se,kdo),e(vs,Sdo),e(vs,WB),e(WB,Rdo),e(vs,Pdo),e(vs,HB),e(HB,Bdo),e(vs,Ido),e(k,Ndo),e(k,Fs),e(Fs,kse),e(kse,qdo),e(Fs,jdo),e(Fs,UB),e(UB,Ddo),e(Fs,Gdo),e(Fs,JB),e(JB,Odo),e(Fs,Vdo),e(k,Xdo),e(k,Ts),e(Ts,Sse),e(Sse,zdo),e(Ts,Qdo),e(Ts,YB),e(YB,Wdo),e(Ts,Hdo),e(Ts,ZB),e(ZB,Udo),e(Ts,Jdo),e(k,Ydo),e(k,Ms),e(Ms,Rse),e(Rse,Zdo),e(Ms,Kdo),e(Ms,KB),e(KB,eco),e(Ms,oco),e(Ms,eI),e(eI,rco),e(Ms,tco),e(k,aco),e(k,Es),e(Es,Pse),e(Pse,nco),e(Es,sco),e(Es,oI),e(oI,lco),e(Es,ico),e(Es,rI),e(rI,dco),e(Es,cco),e(k,fco),e(k,sh),e(sh,Bse),e(Bse,mco),e(sh,gco),e(sh,tI),e(tI,hco),e(sh,pco),e(k,_co),e(k,Cs),e(Cs,Ise),e(Ise,uco),e(Cs,bco),e(Cs,aI),e(aI,vco),e(Cs,Fco),e(Cs,nI),e(nI,Tco),e(Cs,Mco),e(k,Eco),e(k,lh),e(lh,Nse),e(Nse,Cco),e(lh,wco),e(lh,sI),e(sI,Aco),e(lh,Lco),e(k,yco),e(k,ih),e(ih,qse),e(qse,xco),e(ih,$co),e(ih,lI),e(lI,kco),e(ih,Sco),e(k,Rco),e(k,dh),e(dh,jse),e(jse,Pco),e(dh,Bco),e(dh,iI),e(iI,Ico),e(dh,Nco),e(k,qco),e(k,ch),e(ch,Dse),e(Dse,jco),e(ch,Dco),e(ch,dI),e(dI,Gco),e(ch,Oco),e(k,Vco),e(k,ws),e(ws,Gse),e(Gse,Xco),e(ws,zco),e(ws,cI),e(cI,Qco),e(ws,Wco),e(ws,fI),e(fI,Hco),e(ws,Uco),e(k,Jco),e(k,fh),e(fh,Ose),e(Ose,Yco),e(fh,Zco),e(fh,mI),e(mI,Kco),e(fh,efo),e(k,ofo),e(k,As),e(As,Vse),e(Vse,rfo),e(As,tfo),e(As,gI),e(gI,afo),e(As,nfo),e(As,hI),e(hI,sfo),e(As,lfo),e(k,ifo),e(k,Ls),e(Ls,Xse),e(Xse,dfo),e(Ls,cfo),e(Ls,pI),e(pI,ffo),e(Ls,mfo),e(Ls,_I),e(_I,gfo),e(Ls,hfo),e(k,pfo),e(k,ys),e(ys,zse),e(zse,_fo),e(ys,ufo),e(ys,uI),e(uI,bfo),e(ys,vfo),e(ys,bI),e(bI,Ffo),e(ys,Tfo),e(k,Mfo),e(k,xs),e(xs,Qse),e(Qse,Efo),e(xs,Cfo),e(xs,vI),e(vI,wfo),e(xs,Afo),e(xs,FI),e(FI,Lfo),e(xs,yfo),e(k,xfo),e(k,$s),e($s,Wse),e(Wse,$fo),e($s,kfo),e($s,TI),e(TI,Sfo),e($s,Rfo),e($s,MI),e(MI,Pfo),e($s,Bfo),e(k,Ifo),e(k,ks),e(ks,Hse),e(Hse,Nfo),e(ks,qfo),e(ks,EI),e(EI,jfo),e(ks,Dfo),e(ks,CI),e(CI,Gfo),e(ks,Ofo),e(k,Vfo),e(k,mh),e(mh,Use),e(Use,Xfo),e(mh,zfo),e(mh,wI),e(wI,Qfo),e(mh,Wfo),e(k,Hfo),e(k,gh),e(gh,Jse),e(Jse,Ufo),e(gh,Jfo),e(gh,AI),e(AI,Yfo),e(gh,Zfo),e(k,Kfo),e(k,Ss),e(Ss,Yse),e(Yse,emo),e(Ss,omo),e(Ss,LI),e(LI,rmo),e(Ss,tmo),e(Ss,yI),e(yI,amo),e(Ss,nmo),e(k,smo),e(k,Rs),e(Rs,Zse),e(Zse,lmo),e(Rs,imo),e(Rs,xI),e(xI,dmo),e(Rs,cmo),e(Rs,$I),e($I,fmo),e(Rs,mmo),e(k,gmo),e(k,Ps),e(Ps,Kse),e(Kse,hmo),e(Ps,pmo),e(Ps,kI),e(kI,_mo),e(Ps,umo),e(Ps,SI),e(SI,bmo),e(Ps,vmo),e(k,Fmo),e(k,hh),e(hh,ele),e(ele,Tmo),e(hh,Mmo),e(hh,RI),e(RI,Emo),e(hh,Cmo),e(k,wmo),e(k,ph),e(ph,ole),e(ole,Amo),e(ph,Lmo),e(ph,PI),e(PI,ymo),e(ph,xmo),e(k,$mo),e(k,_h),e(_h,rle),e(rle,kmo),e(_h,Smo),e(_h,BI),e(BI,Rmo),e(_h,Pmo),e(k,Bmo),e(k,Bs),e(Bs,tle),e(tle,Imo),e(Bs,Nmo),e(Bs,II),e(II,qmo),e(Bs,jmo),e(Bs,NI),e(NI,Dmo),e(Bs,Gmo),e(k,Omo),e(k,Is),e(Is,ale),e(ale,Vmo),e(Is,Xmo),e(Is,qI),e(qI,zmo),e(Is,Qmo),e(Is,jI),e(jI,Wmo),e(Is,Hmo),e(k,Umo),e(k,uh),e(uh,nle),e(nle,Jmo),e(uh,Ymo),e(uh,DI),e(DI,Zmo),e(uh,Kmo),e(k,ego),e(k,bh),e(bh,sle),e(sle,ogo),e(bh,rgo),e(bh,GI),e(GI,tgo),e(bh,ago),e(k,ngo),e(k,vh),e(vh,lle),e(lle,sgo),e(vh,lgo),e(vh,OI),e(OI,igo),e(vh,dgo),e(k,cgo),e(k,Ns),e(Ns,ile),e(ile,fgo),e(Ns,mgo),e(Ns,VI),e(VI,ggo),e(Ns,hgo),e(Ns,XI),e(XI,pgo),e(Ns,_go),e(k,ugo),e(k,Fh),e(Fh,dle),e(dle,bgo),e(Fh,vgo),e(Fh,zI),e(zI,Fgo),e(Fh,Tgo),e(k,Mgo),e(k,Th),e(Th,cle),e(cle,Ego),e(Th,Cgo),e(Th,QI),e(QI,wgo),e(Th,Ago),e(k,Lgo),e(k,qs),e(qs,fle),e(fle,ygo),e(qs,xgo),e(qs,WI),e(WI,$go),e(qs,kgo),e(qs,HI),e(HI,Sgo),e(qs,Rgo),e(k,Pgo),e(k,js),e(js,mle),e(mle,Bgo),e(js,Igo),e(js,UI),e(UI,Ngo),e(js,qgo),e(js,JI),e(JI,jgo),e(js,Dgo),e(k,Ggo),e(k,Ds),e(Ds,gle),e(gle,Ogo),e(Ds,Vgo),e(Ds,YI),e(YI,Xgo),e(Ds,zgo),e(Ds,ZI),e(ZI,Qgo),e(Ds,Wgo),e(k,Hgo),e(k,Gs),e(Gs,hle),e(hle,Ugo),e(Gs,Jgo),e(Gs,KI),e(KI,Ygo),e(Gs,Zgo),e(Gs,eN),e(eN,Kgo),e(Gs,eho),e(Lr,oho),M(Mh,Lr,null),e(Ao,rho),e(Ao,Eh),M(GL,Eh,null),e(Eh,tho),e(Eh,ple),e(ple,aho),b(f,VGe,u),b(f,ki,u),e(ki,Ch),e(Ch,_le),M(OL,_le,null),e(ki,nho),e(ki,ule),e(ule,sho),b(f,XGe,u),b(f,Lo,u),M(VL,Lo,null),e(Lo,lho),e(Lo,XL),e(XL,iho),e(XL,oN),e(oN,dho),e(XL,cho),e(Lo,fho),e(Lo,zL),e(zL,mho),e(zL,ble),e(ble,gho),e(zL,hho),e(Lo,pho),e(Lo,He),M(QL,He,null),e(He,_ho),e(He,vle),e(vle,uho),e(He,bho),e(He,Sa),e(Sa,vho),e(Sa,Fle),e(Fle,Fho),e(Sa,Tho),e(Sa,Tle),e(Tle,Mho),e(Sa,Eho),e(Sa,Mle),e(Mle,Cho),e(Sa,who),e(He,Aho),e(He,Y),e(Y,wh),e(wh,Ele),e(Ele,Lho),e(wh,yho),e(wh,rN),e(rN,xho),e(wh,$ho),e(Y,kho),e(Y,Ah),e(Ah,Cle),e(Cle,Sho),e(Ah,Rho),e(Ah,tN),e(tN,Pho),e(Ah,Bho),e(Y,Iho),e(Y,Lh),e(Lh,wle),e(wle,Nho),e(Lh,qho),e(Lh,aN),e(aN,jho),e(Lh,Dho),e(Y,Gho),e(Y,yh),e(yh,Ale),e(Ale,Oho),e(yh,Vho),e(yh,nN),e(nN,Xho),e(yh,zho),e(Y,Qho),e(Y,xh),e(xh,Lle),e(Lle,Who),e(xh,Hho),e(xh,sN),e(sN,Uho),e(xh,Jho),e(Y,Yho),e(Y,$h),e($h,yle),e(yle,Zho),e($h,Kho),e($h,lN),e(lN,epo),e($h,opo),e(Y,rpo),e(Y,kh),e(kh,xle),e(xle,tpo),e(kh,apo),e(kh,iN),e(iN,npo),e(kh,spo),e(Y,lpo),e(Y,Sh),e(Sh,$le),e($le,ipo),e(Sh,dpo),e(Sh,dN),e(dN,cpo),e(Sh,fpo),e(Y,mpo),e(Y,Rh),e(Rh,kle),e(kle,gpo),e(Rh,hpo),e(Rh,cN),e(cN,ppo),e(Rh,_po),e(Y,upo),e(Y,Ph),e(Ph,Sle),e(Sle,bpo),e(Ph,vpo),e(Ph,fN),e(fN,Fpo),e(Ph,Tpo),e(Y,Mpo),e(Y,Bh),e(Bh,Rle),e(Rle,Epo),e(Bh,Cpo),e(Bh,mN),e(mN,wpo),e(Bh,Apo),e(Y,Lpo),e(Y,Ih),e(Ih,Ple),e(Ple,ypo),e(Ih,xpo),e(Ih,gN),e(gN,$po),e(Ih,kpo),e(Y,Spo),e(Y,Nh),e(Nh,Ble),e(Ble,Rpo),e(Nh,Ppo),e(Nh,hN),e(hN,Bpo),e(Nh,Ipo),e(Y,Npo),e(Y,qh),e(qh,Ile),e(Ile,qpo),e(qh,jpo),e(qh,pN),e(pN,Dpo),e(qh,Gpo),e(Y,Opo),e(Y,jh),e(jh,Nle),e(Nle,Vpo),e(jh,Xpo),e(jh,_N),e(_N,zpo),e(jh,Qpo),e(Y,Wpo),e(Y,Dh),e(Dh,qle),e(qle,Hpo),e(Dh,Upo),e(Dh,uN),e(uN,Jpo),e(Dh,Ypo),e(Y,Zpo),e(Y,Gh),e(Gh,jle),e(jle,Kpo),e(Gh,e_o),e(Gh,bN),e(bN,o_o),e(Gh,r_o),e(Y,t_o),e(Y,Oh),e(Oh,Dle),e(Dle,a_o),e(Oh,n_o),e(Oh,vN),e(vN,s_o),e(Oh,l_o),e(Y,i_o),e(Y,Vh),e(Vh,Gle),e(Gle,d_o),e(Vh,c_o),e(Vh,FN),e(FN,f_o),e(Vh,m_o),e(Y,g_o),e(Y,Xh),e(Xh,Ole),e(Ole,h_o),e(Xh,p_o),e(Xh,TN),e(TN,__o),e(Xh,u_o),e(Y,b_o),e(Y,zh),e(zh,Vle),e(Vle,v_o),e(zh,F_o),e(zh,MN),e(MN,T_o),e(zh,M_o),e(Y,E_o),e(Y,Qh),e(Qh,Xle),e(Xle,C_o),e(Qh,w_o),e(Qh,EN),e(EN,A_o),e(Qh,L_o),e(Y,y_o),e(Y,Wh),e(Wh,zle),e(zle,x_o),e(Wh,$_o),e(Wh,CN),e(CN,k_o),e(Wh,S_o),e(Y,R_o),e(Y,Hh),e(Hh,Qle),e(Qle,P_o),e(Hh,B_o),e(Hh,wN),e(wN,I_o),e(Hh,N_o),e(Y,q_o),e(Y,Uh),e(Uh,Wle),e(Wle,j_o),e(Uh,D_o),e(Uh,AN),e(AN,G_o),e(Uh,O_o),e(Y,V_o),e(Y,Jh),e(Jh,Hle),e(Hle,X_o),e(Jh,z_o),e(Jh,LN),e(LN,Q_o),e(Jh,W_o),e(Y,H_o),e(Y,Yh),e(Yh,Ule),e(Ule,U_o),e(Yh,J_o),e(Yh,yN),e(yN,Y_o),e(Yh,Z_o),e(Y,K_o),e(Y,Zh),e(Zh,Jle),e(Jle,euo),e(Zh,ouo),e(Zh,xN),e(xN,ruo),e(Zh,tuo),e(Y,auo),e(Y,Kh),e(Kh,Yle),e(Yle,nuo),e(Kh,suo),e(Kh,$N),e($N,luo),e(Kh,iuo),e(Y,duo),e(Y,ep),e(ep,Zle),e(Zle,cuo),e(ep,fuo),e(ep,kN),e(kN,muo),e(ep,guo),e(Y,huo),e(Y,op),e(op,Kle),e(Kle,puo),e(op,_uo),e(op,SN),e(SN,uuo),e(op,buo),e(Y,vuo),e(Y,rp),e(rp,eie),e(eie,Fuo),e(rp,Tuo),e(rp,RN),e(RN,Muo),e(rp,Euo),e(He,Cuo),M(tp,He,null),e(He,wuo),M(ap,He,null),e(Lo,Auo),e(Lo,np),M(WL,np,null),e(np,Luo),e(np,oie),e(oie,yuo),b(f,zGe,u),b(f,Si,u),e(Si,sp),e(sp,rie),M(HL,rie,null),e(Si,xuo),e(Si,tie),e(tie,$uo),b(f,QGe,u),b(f,yo,u),M(UL,yo,null),e(yo,kuo),e(yo,JL),e(JL,Suo),e(JL,PN),e(PN,Ruo),e(JL,Puo),e(yo,Buo),e(yo,YL),e(YL,Iuo),e(YL,aie),e(aie,Nuo),e(YL,quo),e(yo,juo),e(yo,Ue),M(ZL,Ue,null),e(Ue,Duo),e(Ue,nie),e(nie,Guo),e(Ue,Ouo),e(Ue,Ri),e(Ri,Vuo),e(Ri,sie),e(sie,Xuo),e(Ri,zuo),e(Ri,lie),e(lie,Quo),e(Ri,Wuo),e(Ue,Huo),e(Ue,he),e(he,lp),e(lp,iie),e(iie,Uuo),e(lp,Juo),e(lp,BN),e(BN,Yuo),e(lp,Zuo),e(he,Kuo),e(he,ip),e(ip,die),e(die,e7o),e(ip,o7o),e(ip,cie),e(cie,r7o),e(ip,t7o),e(he,a7o),e(he,dp),e(dp,fie),e(fie,n7o),e(dp,s7o),e(dp,IN),e(IN,l7o),e(dp,i7o),e(he,d7o),e(he,cp),e(cp,mie),e(mie,c7o),e(cp,f7o),e(cp,NN),e(NN,m7o),e(cp,g7o),e(he,h7o),e(he,fp),e(fp,gie),e(gie,p7o),e(fp,_7o),e(fp,qN),e(qN,u7o),e(fp,b7o),e(he,v7o),e(he,mp),e(mp,hie),e(hie,F7o),e(mp,T7o),e(mp,jN),e(jN,M7o),e(mp,E7o),e(he,C7o),e(he,gp),e(gp,pie),e(pie,w7o),e(gp,A7o),e(gp,DN),e(DN,L7o),e(gp,y7o),e(he,x7o),e(he,hp),e(hp,_ie),e(_ie,$7o),e(hp,k7o),e(hp,GN),e(GN,S7o),e(hp,R7o),e(he,P7o),e(he,pp),e(pp,uie),e(uie,B7o),e(pp,I7o),e(pp,ON),e(ON,N7o),e(pp,q7o),e(he,j7o),e(he,_p),e(_p,bie),e(bie,D7o),e(_p,G7o),e(_p,VN),e(VN,O7o),e(_p,V7o),e(he,X7o),e(he,up),e(up,vie),e(vie,z7o),e(up,Q7o),e(up,XN),e(XN,W7o),e(up,H7o),e(he,U7o),e(he,bp),e(bp,Fie),e(Fie,J7o),e(bp,Y7o),e(bp,zN),e(zN,Z7o),e(bp,K7o),e(he,e1o),e(he,vp),e(vp,Tie),e(Tie,o1o),e(vp,r1o),e(vp,QN),e(QN,t1o),e(vp,a1o),e(he,n1o),e(he,Fp),e(Fp,Mie),e(Mie,s1o),e(Fp,l1o),e(Fp,WN),e(WN,i1o),e(Fp,d1o),e(he,c1o),e(he,Tp),e(Tp,Eie),e(Eie,f1o),e(Tp,m1o),e(Tp,HN),e(HN,g1o),e(Tp,h1o),e(he,p1o),e(he,Mp),e(Mp,Cie),e(Cie,_1o),e(Mp,u1o),e(Mp,UN),e(UN,b1o),e(Mp,v1o),e(he,F1o),e(he,Ep),e(Ep,wie),e(wie,T1o),e(Ep,M1o),e(Ep,JN),e(JN,E1o),e(Ep,C1o),e(Ue,w1o),M(Cp,Ue,null),e(Ue,A1o),M(wp,Ue,null),e(yo,L1o),e(yo,Ap),M(KL,Ap,null),e(Ap,y1o),e(Ap,Aie),e(Aie,x1o),b(f,WGe,u),b(f,Pi,u),e(Pi,Lp),e(Lp,Lie),M(ey,Lie,null),e(Pi,$1o),e(Pi,yie),e(yie,k1o),b(f,HGe,u),b(f,xo,u),M(oy,xo,null),e(xo,S1o),e(xo,Bi),e(Bi,R1o),e(Bi,YN),e(YN,P1o),e(Bi,B1o),e(Bi,ZN),e(ZN,I1o),e(Bi,N1o),e(xo,q1o),e(xo,ry),e(ry,j1o),e(ry,xie),e(xie,D1o),e(ry,G1o),e(xo,O1o),e(xo,nt),M(ty,nt,null),e(nt,V1o),e(nt,$ie),e($ie,X1o),e(nt,z1o),e(nt,Ii),e(Ii,Q1o),e(Ii,kie),e(kie,W1o),e(Ii,H1o),e(Ii,KN),e(KN,U1o),e(Ii,J1o),e(nt,Y1o),M(yp,nt,null),e(xo,Z1o),e(xo,Je),M(ay,Je,null),e(Je,K1o),e(Je,Sie),e(Sie,e2o),e(Je,o2o),e(Je,Ra),e(Ra,r2o),e(Ra,Rie),e(Rie,t2o),e(Ra,a2o),e(Ra,Pie),e(Pie,n2o),e(Ra,s2o),e(Ra,Bie),e(Bie,l2o),e(Ra,i2o),e(Je,d2o),e(Je,y),e(y,xp),e(xp,Iie),e(Iie,c2o),e(xp,f2o),e(xp,eq),e(eq,m2o),e(xp,g2o),e(y,h2o),e(y,$p),e($p,Nie),e(Nie,p2o),e($p,_2o),e($p,oq),e(oq,u2o),e($p,b2o),e(y,v2o),e(y,kp),e(kp,qie),e(qie,F2o),e(kp,T2o),e(kp,rq),e(rq,M2o),e(kp,E2o),e(y,C2o),e(y,Sp),e(Sp,jie),e(jie,w2o),e(Sp,A2o),e(Sp,tq),e(tq,L2o),e(Sp,y2o),e(y,x2o),e(y,Rp),e(Rp,Die),e(Die,$2o),e(Rp,k2o),e(Rp,aq),e(aq,S2o),e(Rp,R2o),e(y,P2o),e(y,Pp),e(Pp,Gie),e(Gie,B2o),e(Pp,I2o),e(Pp,nq),e(nq,N2o),e(Pp,q2o),e(y,j2o),e(y,Bp),e(Bp,Oie),e(Oie,D2o),e(Bp,G2o),e(Bp,sq),e(sq,O2o),e(Bp,V2o),e(y,X2o),e(y,Ip),e(Ip,Vie),e(Vie,z2o),e(Ip,Q2o),e(Ip,lq),e(lq,W2o),e(Ip,H2o),e(y,U2o),e(y,Np),e(Np,Xie),e(Xie,J2o),e(Np,Y2o),e(Np,iq),e(iq,Z2o),e(Np,K2o),e(y,ebo),e(y,qp),e(qp,zie),e(zie,obo),e(qp,rbo),e(qp,dq),e(dq,tbo),e(qp,abo),e(y,nbo),e(y,jp),e(jp,Qie),e(Qie,sbo),e(jp,lbo),e(jp,cq),e(cq,ibo),e(jp,dbo),e(y,cbo),e(y,Dp),e(Dp,Wie),e(Wie,fbo),e(Dp,mbo),e(Dp,fq),e(fq,gbo),e(Dp,hbo),e(y,pbo),e(y,Gp),e(Gp,Hie),e(Hie,_bo),e(Gp,ubo),e(Gp,mq),e(mq,bbo),e(Gp,vbo),e(y,Fbo),e(y,Op),e(Op,Uie),e(Uie,Tbo),e(Op,Mbo),e(Op,gq),e(gq,Ebo),e(Op,Cbo),e(y,wbo),e(y,Vp),e(Vp,Jie),e(Jie,Abo),e(Vp,Lbo),e(Vp,hq),e(hq,ybo),e(Vp,xbo),e(y,$bo),e(y,Xp),e(Xp,Yie),e(Yie,kbo),e(Xp,Sbo),e(Xp,pq),e(pq,Rbo),e(Xp,Pbo),e(y,Bbo),e(y,zp),e(zp,Zie),e(Zie,Ibo),e(zp,Nbo),e(zp,_q),e(_q,qbo),e(zp,jbo),e(y,Dbo),e(y,Qp),e(Qp,Kie),e(Kie,Gbo),e(Qp,Obo),e(Qp,uq),e(uq,Vbo),e(Qp,Xbo),e(y,zbo),e(y,Wp),e(Wp,ede),e(ede,Qbo),e(Wp,Wbo),e(Wp,bq),e(bq,Hbo),e(Wp,Ubo),e(y,Jbo),e(y,Hp),e(Hp,ode),e(ode,Ybo),e(Hp,Zbo),e(Hp,vq),e(vq,Kbo),e(Hp,evo),e(y,ovo),e(y,Up),e(Up,rde),e(rde,rvo),e(Up,tvo),e(Up,Fq),e(Fq,avo),e(Up,nvo),e(y,svo),e(y,Jp),e(Jp,tde),e(tde,lvo),e(Jp,ivo),e(Jp,Tq),e(Tq,dvo),e(Jp,cvo),e(y,fvo),e(y,Yp),e(Yp,ade),e(ade,mvo),e(Yp,gvo),e(Yp,Mq),e(Mq,hvo),e(Yp,pvo),e(y,_vo),e(y,Zp),e(Zp,nde),e(nde,uvo),e(Zp,bvo),e(Zp,Eq),e(Eq,vvo),e(Zp,Fvo),e(y,Tvo),e(y,Kp),e(Kp,sde),e(sde,Mvo),e(Kp,Evo),e(Kp,Cq),e(Cq,Cvo),e(Kp,wvo),e(y,Avo),e(y,e_),e(e_,lde),e(lde,Lvo),e(e_,yvo),e(e_,wq),e(wq,xvo),e(e_,$vo),e(y,kvo),e(y,o_),e(o_,ide),e(ide,Svo),e(o_,Rvo),e(o_,Aq),e(Aq,Pvo),e(o_,Bvo),e(y,Ivo),e(y,r_),e(r_,dde),e(dde,Nvo),e(r_,qvo),e(r_,Lq),e(Lq,jvo),e(r_,Dvo),e(y,Gvo),e(y,t_),e(t_,cde),e(cde,Ovo),e(t_,Vvo),e(t_,yq),e(yq,Xvo),e(t_,zvo),e(y,Qvo),e(y,a_),e(a_,fde),e(fde,Wvo),e(a_,Hvo),e(a_,xq),e(xq,Uvo),e(a_,Jvo),e(y,Yvo),e(y,n_),e(n_,mde),e(mde,Zvo),e(n_,Kvo),e(n_,$q),e($q,eFo),e(n_,oFo),e(y,rFo),e(y,s_),e(s_,gde),e(gde,tFo),e(s_,aFo),e(s_,kq),e(kq,nFo),e(s_,sFo),e(y,lFo),e(y,l_),e(l_,hde),e(hde,iFo),e(l_,dFo),e(l_,Sq),e(Sq,cFo),e(l_,fFo),e(y,mFo),e(y,Os),e(Os,pde),e(pde,gFo),e(Os,hFo),e(Os,Rq),e(Rq,pFo),e(Os,_Fo),e(Os,Pq),e(Pq,uFo),e(Os,bFo),e(y,vFo),e(y,i_),e(i_,_de),e(_de,FFo),e(i_,TFo),e(i_,Bq),e(Bq,MFo),e(i_,EFo),e(y,CFo),e(y,d_),e(d_,ude),e(ude,wFo),e(d_,AFo),e(d_,Iq),e(Iq,LFo),e(d_,yFo),e(y,xFo),e(y,c_),e(c_,bde),e(bde,$Fo),e(c_,kFo),e(c_,Nq),e(Nq,SFo),e(c_,RFo),e(y,PFo),e(y,f_),e(f_,vde),e(vde,BFo),e(f_,IFo),e(f_,qq),e(qq,NFo),e(f_,qFo),e(y,jFo),e(y,m_),e(m_,Fde),e(Fde,DFo),e(m_,GFo),e(m_,jq),e(jq,OFo),e(m_,VFo),e(y,XFo),e(y,g_),e(g_,Tde),e(Tde,zFo),e(g_,QFo),e(g_,Dq),e(Dq,WFo),e(g_,HFo),e(y,UFo),e(y,h_),e(h_,Mde),e(Mde,JFo),e(h_,YFo),e(h_,Gq),e(Gq,ZFo),e(h_,KFo),e(y,e6o),e(y,p_),e(p_,Ede),e(Ede,o6o),e(p_,r6o),e(p_,Oq),e(Oq,t6o),e(p_,a6o),e(y,n6o),e(y,__),e(__,Cde),e(Cde,s6o),e(__,l6o),e(__,Vq),e(Vq,i6o),e(__,d6o),e(y,c6o),e(y,u_),e(u_,wde),e(wde,f6o),e(u_,m6o),e(u_,Xq),e(Xq,g6o),e(u_,h6o),e(y,p6o),e(y,b_),e(b_,Ade),e(Ade,_6o),e(b_,u6o),e(b_,zq),e(zq,b6o),e(b_,v6o),e(y,F6o),e(y,v_),e(v_,Lde),e(Lde,T6o),e(v_,M6o),e(v_,Qq),e(Qq,E6o),e(v_,C6o),e(y,w6o),e(y,F_),e(F_,yde),e(yde,A6o),e(F_,L6o),e(F_,Wq),e(Wq,y6o),e(F_,x6o),e(y,$6o),e(y,T_),e(T_,xde),e(xde,k6o),e(T_,S6o),e(T_,Hq),e(Hq,R6o),e(T_,P6o),e(y,B6o),e(y,M_),e(M_,$de),e($de,I6o),e(M_,N6o),e(M_,Uq),e(Uq,q6o),e(M_,j6o),e(y,D6o),e(y,E_),e(E_,kde),e(kde,G6o),e(E_,O6o),e(E_,Jq),e(Jq,V6o),e(E_,X6o),e(y,z6o),e(y,C_),e(C_,Sde),e(Sde,Q6o),e(C_,W6o),e(C_,Yq),e(Yq,H6o),e(C_,U6o),e(y,J6o),e(y,w_),e(w_,Rde),e(Rde,Y6o),e(w_,Z6o),e(w_,Zq),e(Zq,K6o),e(w_,eTo),e(y,oTo),e(y,A_),e(A_,Pde),e(Pde,rTo),e(A_,tTo),e(A_,Kq),e(Kq,aTo),e(A_,nTo),e(y,sTo),e(y,L_),e(L_,Bde),e(Bde,lTo),e(L_,iTo),e(L_,ej),e(ej,dTo),e(L_,cTo),e(y,fTo),e(y,y_),e(y_,Ide),e(Ide,mTo),e(y_,gTo),e(y_,oj),e(oj,hTo),e(y_,pTo),e(y,_To),e(y,x_),e(x_,Nde),e(Nde,uTo),e(x_,bTo),e(x_,rj),e(rj,vTo),e(x_,FTo),e(y,TTo),e(y,$_),e($_,qde),e(qde,MTo),e($_,ETo),e($_,tj),e(tj,CTo),e($_,wTo),e(y,ATo),e(y,k_),e(k_,jde),e(jde,LTo),e(k_,yTo),e(k_,aj),e(aj,xTo),e(k_,$To),e(y,kTo),e(y,S_),e(S_,Dde),e(Dde,STo),e(S_,RTo),e(S_,nj),e(nj,PTo),e(S_,BTo),e(y,ITo),e(y,R_),e(R_,Gde),e(Gde,NTo),e(R_,qTo),e(R_,sj),e(sj,jTo),e(R_,DTo),e(y,GTo),e(y,P_),e(P_,Ode),e(Ode,OTo),e(P_,VTo),e(P_,lj),e(lj,XTo),e(P_,zTo),e(y,QTo),e(y,B_),e(B_,Vde),e(Vde,WTo),e(B_,HTo),e(B_,ij),e(ij,UTo),e(B_,JTo),e(y,YTo),e(y,I_),e(I_,Xde),e(Xde,ZTo),e(I_,KTo),e(I_,dj),e(dj,eMo),e(I_,oMo),e(y,rMo),e(y,N_),e(N_,zde),e(zde,tMo),e(N_,aMo),e(N_,cj),e(cj,nMo),e(N_,sMo),e(y,lMo),e(y,q_),e(q_,Qde),e(Qde,iMo),e(q_,dMo),e(q_,fj),e(fj,cMo),e(q_,fMo),e(y,mMo),e(y,j_),e(j_,Wde),e(Wde,gMo),e(j_,hMo),e(j_,mj),e(mj,pMo),e(j_,_Mo),e(y,uMo),e(y,D_),e(D_,Hde),e(Hde,bMo),e(D_,vMo),e(D_,gj),e(gj,FMo),e(D_,TMo),e(y,MMo),e(y,G_),e(G_,Ude),e(Ude,EMo),e(G_,CMo),e(G_,hj),e(hj,wMo),e(G_,AMo),e(y,LMo),e(y,O_),e(O_,Jde),e(Jde,yMo),e(O_,xMo),e(O_,pj),e(pj,$Mo),e(O_,kMo),e(y,SMo),e(y,V_),e(V_,Yde),e(Yde,RMo),e(V_,PMo),e(V_,_j),e(_j,BMo),e(V_,IMo),e(y,NMo),e(y,X_),e(X_,Zde),e(Zde,qMo),e(X_,jMo),e(X_,uj),e(uj,DMo),e(X_,GMo),e(y,OMo),e(y,z_),e(z_,Kde),e(Kde,VMo),e(z_,XMo),e(z_,bj),e(bj,zMo),e(z_,QMo),e(y,WMo),e(y,Q_),e(Q_,ece),e(ece,HMo),e(Q_,UMo),e(Q_,vj),e(vj,JMo),e(Q_,YMo),e(y,ZMo),e(y,W_),e(W_,oce),e(oce,KMo),e(W_,eEo),e(W_,Fj),e(Fj,oEo),e(W_,rEo),e(y,tEo),e(y,H_),e(H_,rce),e(rce,aEo),e(H_,nEo),e(H_,Tj),e(Tj,sEo),e(H_,lEo),e(y,iEo),e(y,U_),e(U_,tce),e(tce,dEo),e(U_,cEo),e(U_,Mj),e(Mj,fEo),e(U_,mEo),e(y,gEo),e(y,J_),e(J_,ace),e(ace,hEo),e(J_,pEo),e(J_,Ej),e(Ej,_Eo),e(J_,uEo),e(y,bEo),e(y,Y_),e(Y_,nce),e(nce,vEo),e(Y_,FEo),e(Y_,Cj),e(Cj,TEo),e(Y_,MEo),e(y,EEo),e(y,Z_),e(Z_,sce),e(sce,CEo),e(Z_,wEo),e(Z_,wj),e(wj,AEo),e(Z_,LEo),e(y,yEo),e(y,K_),e(K_,lce),e(lce,xEo),e(K_,$Eo),e(K_,Aj),e(Aj,kEo),e(K_,SEo),e(y,REo),e(y,eu),e(eu,ice),e(ice,PEo),e(eu,BEo),e(eu,Lj),e(Lj,IEo),e(eu,NEo),e(y,qEo),e(y,ou),e(ou,dce),e(dce,jEo),e(ou,DEo),e(ou,yj),e(yj,GEo),e(ou,OEo),e(y,VEo),e(y,ru),e(ru,cce),e(cce,XEo),e(ru,zEo),e(ru,xj),e(xj,QEo),e(ru,WEo),e(y,HEo),e(y,tu),e(tu,fce),e(fce,UEo),e(tu,JEo),e(tu,$j),e($j,YEo),e(tu,ZEo),e(y,KEo),e(y,au),e(au,mce),e(mce,e4o),e(au,o4o),e(au,kj),e(kj,r4o),e(au,t4o),e(y,a4o),e(y,nu),e(nu,gce),e(gce,n4o),e(nu,s4o),e(nu,Sj),e(Sj,l4o),e(nu,i4o),e(y,d4o),e(y,su),e(su,hce),e(hce,c4o),e(su,f4o),e(su,Rj),e(Rj,m4o),e(su,g4o),e(y,h4o),e(y,lu),e(lu,pce),e(pce,p4o),e(lu,_4o),e(lu,Pj),e(Pj,u4o),e(lu,b4o),e(y,v4o),e(y,iu),e(iu,_ce),e(_ce,F4o),e(iu,T4o),e(iu,Bj),e(Bj,M4o),e(iu,E4o),e(y,C4o),e(y,du),e(du,uce),e(uce,w4o),e(du,A4o),e(du,Ij),e(Ij,L4o),e(du,y4o),e(y,x4o),e(y,cu),e(cu,bce),e(bce,$4o),e(cu,k4o),e(cu,Nj),e(Nj,S4o),e(cu,R4o),e(y,P4o),e(y,fu),e(fu,vce),e(vce,B4o),e(fu,I4o),e(fu,qj),e(qj,N4o),e(fu,q4o),e(y,j4o),e(y,mu),e(mu,Fce),e(Fce,D4o),e(mu,G4o),e(mu,jj),e(jj,O4o),e(mu,V4o),e(y,X4o),e(y,gu),e(gu,Tce),e(Tce,z4o),e(gu,Q4o),e(gu,Dj),e(Dj,W4o),e(gu,H4o),e(y,U4o),e(y,hu),e(hu,Mce),e(Mce,J4o),e(hu,Y4o),e(hu,Gj),e(Gj,Z4o),e(hu,K4o),e(y,eCo),e(y,pu),e(pu,Ece),e(Ece,oCo),e(pu,rCo),e(pu,Oj),e(Oj,tCo),e(pu,aCo),e(y,nCo),e(y,_u),e(_u,Cce),e(Cce,sCo),e(_u,lCo),e(_u,Vj),e(Vj,iCo),e(_u,dCo),e(y,cCo),e(y,uu),e(uu,wce),e(wce,fCo),e(uu,mCo),e(uu,Xj),e(Xj,gCo),e(uu,hCo),e(y,pCo),e(y,bu),e(bu,Ace),e(Ace,_Co),e(bu,uCo),e(bu,zj),e(zj,bCo),e(bu,vCo),e(y,FCo),e(y,vu),e(vu,Lce),e(Lce,TCo),e(vu,MCo),e(vu,Qj),e(Qj,ECo),e(vu,CCo),e(y,wCo),e(y,Fu),e(Fu,yce),e(yce,ACo),e(Fu,LCo),e(Fu,Wj),e(Wj,yCo),e(Fu,xCo),e(y,$Co),e(y,Tu),e(Tu,xce),e(xce,kCo),e(Tu,SCo),e(Tu,Hj),e(Hj,RCo),e(Tu,PCo),e(y,BCo),e(y,Mu),e(Mu,$ce),e($ce,ICo),e(Mu,NCo),e(Mu,Uj),e(Uj,qCo),e(Mu,jCo),e(y,DCo),e(y,Eu),e(Eu,kce),e(kce,GCo),e(Eu,OCo),e(Eu,Jj),e(Jj,VCo),e(Eu,XCo),e(y,zCo),e(y,Cu),e(Cu,Sce),e(Sce,QCo),e(Cu,WCo),e(Cu,Yj),e(Yj,HCo),e(Cu,UCo),e(y,JCo),e(y,wu),e(wu,Rce),e(Rce,YCo),e(wu,ZCo),e(wu,Zj),e(Zj,KCo),e(wu,e5o),e(y,o5o),e(y,Au),e(Au,Pce),e(Pce,r5o),e(Au,t5o),e(Au,Kj),e(Kj,a5o),e(Au,n5o),e(Je,s5o),e(Je,Lu),e(Lu,l5o),e(Lu,Bce),e(Bce,i5o),e(Lu,d5o),e(Lu,Ice),e(Ice,c5o),e(Je,f5o),M(yu,Je,null),b(f,UGe,u),b(f,Ni,u),e(Ni,xu),e(xu,Nce),M(ny,Nce,null),e(Ni,m5o),e(Ni,qce),e(qce,g5o),b(f,JGe,u),b(f,$o,u),M(sy,$o,null),e($o,h5o),e($o,qi),e(qi,p5o),e(qi,eD),e(eD,_5o),e(qi,u5o),e(qi,oD),e(oD,b5o),e(qi,v5o),e($o,F5o),e($o,ly),e(ly,T5o),e(ly,jce),e(jce,M5o),e(ly,E5o),e($o,C5o),e($o,st),M(iy,st,null),e(st,w5o),e(st,Dce),e(Dce,A5o),e(st,L5o),e(st,ji),e(ji,y5o),e(ji,Gce),e(Gce,x5o),e(ji,$5o),e(ji,rD),e(rD,k5o),e(ji,S5o),e(st,R5o),M($u,st,null),e($o,P5o),e($o,Ye),M(dy,Ye,null),e(Ye,B5o),e(Ye,Oce),e(Oce,I5o),e(Ye,N5o),e(Ye,Pa),e(Pa,q5o),e(Pa,Vce),e(Vce,j5o),e(Pa,D5o),e(Pa,Xce),e(Xce,G5o),e(Pa,O5o),e(Pa,zce),e(zce,V5o),e(Pa,X5o),e(Ye,z5o),e(Ye,G),e(G,ku),e(ku,Qce),e(Qce,Q5o),e(ku,W5o),e(ku,tD),e(tD,H5o),e(ku,U5o),e(G,J5o),e(G,Su),e(Su,Wce),e(Wce,Y5o),e(Su,Z5o),e(Su,aD),e(aD,K5o),e(Su,e3o),e(G,o3o),e(G,Ru),e(Ru,Hce),e(Hce,r3o),e(Ru,t3o),e(Ru,nD),e(nD,a3o),e(Ru,n3o),e(G,s3o),e(G,Pu),e(Pu,Uce),e(Uce,l3o),e(Pu,i3o),e(Pu,sD),e(sD,d3o),e(Pu,c3o),e(G,f3o),e(G,Bu),e(Bu,Jce),e(Jce,m3o),e(Bu,g3o),e(Bu,lD),e(lD,h3o),e(Bu,p3o),e(G,_3o),e(G,Iu),e(Iu,Yce),e(Yce,u3o),e(Iu,b3o),e(Iu,iD),e(iD,v3o),e(Iu,F3o),e(G,T3o),e(G,Nu),e(Nu,Zce),e(Zce,M3o),e(Nu,E3o),e(Nu,dD),e(dD,C3o),e(Nu,w3o),e(G,A3o),e(G,qu),e(qu,Kce),e(Kce,L3o),e(qu,y3o),e(qu,cD),e(cD,x3o),e(qu,$3o),e(G,k3o),e(G,ju),e(ju,efe),e(efe,S3o),e(ju,R3o),e(ju,fD),e(fD,P3o),e(ju,B3o),e(G,I3o),e(G,Du),e(Du,ofe),e(ofe,N3o),e(Du,q3o),e(Du,mD),e(mD,j3o),e(Du,D3o),e(G,G3o),e(G,Gu),e(Gu,rfe),e(rfe,O3o),e(Gu,V3o),e(Gu,gD),e(gD,X3o),e(Gu,z3o),e(G,Q3o),e(G,Ou),e(Ou,tfe),e(tfe,W3o),e(Ou,H3o),e(Ou,hD),e(hD,U3o),e(Ou,J3o),e(G,Y3o),e(G,Vu),e(Vu,afe),e(afe,Z3o),e(Vu,K3o),e(Vu,pD),e(pD,e0o),e(Vu,o0o),e(G,r0o),e(G,Xu),e(Xu,nfe),e(nfe,t0o),e(Xu,a0o),e(Xu,_D),e(_D,n0o),e(Xu,s0o),e(G,l0o),e(G,zu),e(zu,sfe),e(sfe,i0o),e(zu,d0o),e(zu,uD),e(uD,c0o),e(zu,f0o),e(G,m0o),e(G,Qu),e(Qu,lfe),e(lfe,g0o),e(Qu,h0o),e(Qu,bD),e(bD,p0o),e(Qu,_0o),e(G,u0o),e(G,Wu),e(Wu,ife),e(ife,b0o),e(Wu,v0o),e(Wu,vD),e(vD,F0o),e(Wu,T0o),e(G,M0o),e(G,Hu),e(Hu,dfe),e(dfe,E0o),e(Hu,C0o),e(Hu,FD),e(FD,w0o),e(Hu,A0o),e(G,L0o),e(G,Uu),e(Uu,cfe),e(cfe,y0o),e(Uu,x0o),e(Uu,TD),e(TD,$0o),e(Uu,k0o),e(G,S0o),e(G,Ju),e(Ju,ffe),e(ffe,R0o),e(Ju,P0o),e(Ju,MD),e(MD,B0o),e(Ju,I0o),e(G,N0o),e(G,Yu),e(Yu,mfe),e(mfe,q0o),e(Yu,j0o),e(Yu,ED),e(ED,D0o),e(Yu,G0o),e(G,O0o),e(G,Zu),e(Zu,gfe),e(gfe,V0o),e(Zu,X0o),e(Zu,CD),e(CD,z0o),e(Zu,Q0o),e(G,W0o),e(G,Ku),e(Ku,hfe),e(hfe,H0o),e(Ku,U0o),e(Ku,wD),e(wD,J0o),e(Ku,Y0o),e(G,Z0o),e(G,e7),e(e7,pfe),e(pfe,K0o),e(e7,ewo),e(e7,AD),e(AD,owo),e(e7,rwo),e(G,two),e(G,o7),e(o7,_fe),e(_fe,awo),e(o7,nwo),e(o7,LD),e(LD,swo),e(o7,lwo),e(G,iwo),e(G,r7),e(r7,ufe),e(ufe,dwo),e(r7,cwo),e(r7,yD),e(yD,fwo),e(r7,mwo),e(G,gwo),e(G,t7),e(t7,bfe),e(bfe,hwo),e(t7,pwo),e(t7,xD),e(xD,_wo),e(t7,uwo),e(G,bwo),e(G,a7),e(a7,vfe),e(vfe,vwo),e(a7,Fwo),e(a7,$D),e($D,Two),e(a7,Mwo),e(G,Ewo),e(G,n7),e(n7,Ffe),e(Ffe,Cwo),e(n7,wwo),e(n7,kD),e(kD,Awo),e(n7,Lwo),e(G,ywo),e(G,s7),e(s7,Tfe),e(Tfe,xwo),e(s7,$wo),e(s7,SD),e(SD,kwo),e(s7,Swo),e(G,Rwo),e(G,l7),e(l7,Mfe),e(Mfe,Pwo),e(l7,Bwo),e(l7,RD),e(RD,Iwo),e(l7,Nwo),e(G,qwo),e(G,i7),e(i7,Efe),e(Efe,jwo),e(i7,Dwo),e(i7,PD),e(PD,Gwo),e(i7,Owo),e(G,Vwo),e(G,d7),e(d7,Cfe),e(Cfe,Xwo),e(d7,zwo),e(d7,BD),e(BD,Qwo),e(d7,Wwo),e(G,Hwo),e(G,c7),e(c7,wfe),e(wfe,Uwo),e(c7,Jwo),e(c7,ID),e(ID,Ywo),e(c7,Zwo),e(G,Kwo),e(G,f7),e(f7,Afe),e(Afe,eAo),e(f7,oAo),e(f7,ND),e(ND,rAo),e(f7,tAo),e(G,aAo),e(G,m7),e(m7,Lfe),e(Lfe,nAo),e(m7,sAo),e(m7,qD),e(qD,lAo),e(m7,iAo),e(G,dAo),e(G,g7),e(g7,yfe),e(yfe,cAo),e(g7,fAo),e(g7,jD),e(jD,mAo),e(g7,gAo),e(G,hAo),e(G,h7),e(h7,xfe),e(xfe,pAo),e(h7,_Ao),e(h7,DD),e(DD,uAo),e(h7,bAo),e(G,vAo),e(G,p7),e(p7,$fe),e($fe,FAo),e(p7,TAo),e(p7,GD),e(GD,MAo),e(p7,EAo),e(G,CAo),e(G,_7),e(_7,kfe),e(kfe,wAo),e(_7,AAo),e(_7,OD),e(OD,LAo),e(_7,yAo),e(G,xAo),e(G,u7),e(u7,Sfe),e(Sfe,$Ao),e(u7,kAo),e(u7,VD),e(VD,SAo),e(u7,RAo),e(G,PAo),e(G,b7),e(b7,Rfe),e(Rfe,BAo),e(b7,IAo),e(b7,XD),e(XD,NAo),e(b7,qAo),e(G,jAo),e(G,v7),e(v7,Pfe),e(Pfe,DAo),e(v7,GAo),e(v7,zD),e(zD,OAo),e(v7,VAo),e(G,XAo),e(G,F7),e(F7,Bfe),e(Bfe,zAo),e(F7,QAo),e(F7,QD),e(QD,WAo),e(F7,HAo),e(Ye,UAo),e(Ye,T7),e(T7,JAo),e(T7,Ife),e(Ife,YAo),e(T7,ZAo),e(T7,Nfe),e(Nfe,KAo),e(Ye,eLo),M(M7,Ye,null),b(f,YGe,u),b(f,Di,u),e(Di,E7),e(E7,qfe),M(cy,qfe,null),e(Di,oLo),e(Di,jfe),e(jfe,rLo),b(f,ZGe,u),b(f,ko,u),M(fy,ko,null),e(ko,tLo),e(ko,Gi),e(Gi,aLo),e(Gi,WD),e(WD,nLo),e(Gi,sLo),e(Gi,HD),e(HD,lLo),e(Gi,iLo),e(ko,dLo),e(ko,my),e(my,cLo),e(my,Dfe),e(Dfe,fLo),e(my,mLo),e(ko,gLo),e(ko,lt),M(gy,lt,null),e(lt,hLo),e(lt,Gfe),e(Gfe,pLo),e(lt,_Lo),e(lt,Oi),e(Oi,uLo),e(Oi,Ofe),e(Ofe,bLo),e(Oi,vLo),e(Oi,UD),e(UD,FLo),e(Oi,TLo),e(lt,MLo),M(C7,lt,null),e(ko,ELo),e(ko,Ze),M(hy,Ze,null),e(Ze,CLo),e(Ze,Vfe),e(Vfe,wLo),e(Ze,ALo),e(Ze,Ba),e(Ba,LLo),e(Ba,Xfe),e(Xfe,yLo),e(Ba,xLo),e(Ba,zfe),e(zfe,$Lo),e(Ba,kLo),e(Ba,Qfe),e(Qfe,SLo),e(Ba,RLo),e(Ze,PLo),e(Ze,z),e(z,w7),e(w7,Wfe),e(Wfe,BLo),e(w7,ILo),e(w7,JD),e(JD,NLo),e(w7,qLo),e(z,jLo),e(z,A7),e(A7,Hfe),e(Hfe,DLo),e(A7,GLo),e(A7,YD),e(YD,OLo),e(A7,VLo),e(z,XLo),e(z,L7),e(L7,Ufe),e(Ufe,zLo),e(L7,QLo),e(L7,ZD),e(ZD,WLo),e(L7,HLo),e(z,ULo),e(z,y7),e(y7,Jfe),e(Jfe,JLo),e(y7,YLo),e(y7,KD),e(KD,ZLo),e(y7,KLo),e(z,eyo),e(z,x7),e(x7,Yfe),e(Yfe,oyo),e(x7,ryo),e(x7,eG),e(eG,tyo),e(x7,ayo),e(z,nyo),e(z,$7),e($7,Zfe),e(Zfe,syo),e($7,lyo),e($7,oG),e(oG,iyo),e($7,dyo),e(z,cyo),e(z,k7),e(k7,Kfe),e(Kfe,fyo),e(k7,myo),e(k7,rG),e(rG,gyo),e(k7,hyo),e(z,pyo),e(z,S7),e(S7,eme),e(eme,_yo),e(S7,uyo),e(S7,tG),e(tG,byo),e(S7,vyo),e(z,Fyo),e(z,R7),e(R7,ome),e(ome,Tyo),e(R7,Myo),e(R7,aG),e(aG,Eyo),e(R7,Cyo),e(z,wyo),e(z,P7),e(P7,rme),e(rme,Ayo),e(P7,Lyo),e(P7,nG),e(nG,yyo),e(P7,xyo),e(z,$yo),e(z,B7),e(B7,tme),e(tme,kyo),e(B7,Syo),e(B7,sG),e(sG,Ryo),e(B7,Pyo),e(z,Byo),e(z,I7),e(I7,ame),e(ame,Iyo),e(I7,Nyo),e(I7,lG),e(lG,qyo),e(I7,jyo),e(z,Dyo),e(z,N7),e(N7,nme),e(nme,Gyo),e(N7,Oyo),e(N7,iG),e(iG,Vyo),e(N7,Xyo),e(z,zyo),e(z,q7),e(q7,sme),e(sme,Qyo),e(q7,Wyo),e(q7,dG),e(dG,Hyo),e(q7,Uyo),e(z,Jyo),e(z,j7),e(j7,lme),e(lme,Yyo),e(j7,Zyo),e(j7,cG),e(cG,Kyo),e(j7,e8o),e(z,o8o),e(z,D7),e(D7,ime),e(ime,r8o),e(D7,t8o),e(D7,fG),e(fG,a8o),e(D7,n8o),e(z,s8o),e(z,G7),e(G7,dme),e(dme,l8o),e(G7,i8o),e(G7,mG),e(mG,d8o),e(G7,c8o),e(z,f8o),e(z,O7),e(O7,cme),e(cme,m8o),e(O7,g8o),e(O7,gG),e(gG,h8o),e(O7,p8o),e(z,_8o),e(z,V7),e(V7,fme),e(fme,u8o),e(V7,b8o),e(V7,hG),e(hG,v8o),e(V7,F8o),e(z,T8o),e(z,X7),e(X7,mme),e(mme,M8o),e(X7,E8o),e(X7,pG),e(pG,C8o),e(X7,w8o),e(z,A8o),e(z,z7),e(z7,gme),e(gme,L8o),e(z7,y8o),e(z7,_G),e(_G,x8o),e(z7,$8o),e(z,k8o),e(z,Q7),e(Q7,hme),e(hme,S8o),e(Q7,R8o),e(Q7,uG),e(uG,P8o),e(Q7,B8o),e(z,I8o),e(z,W7),e(W7,pme),e(pme,N8o),e(W7,q8o),e(W7,bG),e(bG,j8o),e(W7,D8o),e(z,G8o),e(z,H7),e(H7,_me),e(_me,O8o),e(H7,V8o),e(H7,vG),e(vG,X8o),e(H7,z8o),e(z,Q8o),e(z,U7),e(U7,ume),e(ume,W8o),e(U7,H8o),e(U7,FG),e(FG,U8o),e(U7,J8o),e(z,Y8o),e(z,J7),e(J7,bme),e(bme,Z8o),e(J7,K8o),e(J7,TG),e(TG,e9o),e(J7,o9o),e(z,r9o),e(z,Y7),e(Y7,vme),e(vme,t9o),e(Y7,a9o),e(Y7,MG),e(MG,n9o),e(Y7,s9o),e(z,l9o),e(z,Z7),e(Z7,Fme),e(Fme,i9o),e(Z7,d9o),e(Z7,EG),e(EG,c9o),e(Z7,f9o),e(z,m9o),e(z,K7),e(K7,Tme),e(Tme,g9o),e(K7,h9o),e(K7,CG),e(CG,p9o),e(K7,_9o),e(z,u9o),e(z,e1),e(e1,Mme),e(Mme,b9o),e(e1,v9o),e(e1,wG),e(wG,F9o),e(e1,T9o),e(z,M9o),e(z,o1),e(o1,Eme),e(Eme,E9o),e(o1,C9o),e(o1,AG),e(AG,w9o),e(o1,A9o),e(z,L9o),e(z,r1),e(r1,Cme),e(Cme,y9o),e(r1,x9o),e(r1,LG),e(LG,$9o),e(r1,k9o),e(z,S9o),e(z,t1),e(t1,wme),e(wme,R9o),e(t1,P9o),e(t1,yG),e(yG,B9o),e(t1,I9o),e(z,N9o),e(z,a1),e(a1,Ame),e(Ame,q9o),e(a1,j9o),e(a1,xG),e(xG,D9o),e(a1,G9o),e(z,O9o),e(z,n1),e(n1,Lme),e(Lme,V9o),e(n1,X9o),e(n1,$G),e($G,z9o),e(n1,Q9o),e(z,W9o),e(z,s1),e(s1,yme),e(yme,H9o),e(s1,U9o),e(s1,kG),e(kG,J9o),e(s1,Y9o),e(z,Z9o),e(z,l1),e(l1,xme),e(xme,K9o),e(l1,exo),e(l1,SG),e(SG,oxo),e(l1,rxo),e(z,txo),e(z,i1),e(i1,$me),e($me,axo),e(i1,nxo),e(i1,RG),e(RG,sxo),e(i1,lxo),e(Ze,ixo),e(Ze,d1),e(d1,dxo),e(d1,kme),e(kme,cxo),e(d1,fxo),e(d1,Sme),e(Sme,mxo),e(Ze,gxo),M(c1,Ze,null),b(f,KGe,u),b(f,Vi,u),e(Vi,f1),e(f1,Rme),M(py,Rme,null),e(Vi,hxo),e(Vi,Pme),e(Pme,pxo),b(f,eOe,u),b(f,So,u),M(_y,So,null),e(So,_xo),e(So,Xi),e(Xi,uxo),e(Xi,PG),e(PG,bxo),e(Xi,vxo),e(Xi,BG),e(BG,Fxo),e(Xi,Txo),e(So,Mxo),e(So,uy),e(uy,Exo),e(uy,Bme),e(Bme,Cxo),e(uy,wxo),e(So,Axo),e(So,it),M(by,it,null),e(it,Lxo),e(it,Ime),e(Ime,yxo),e(it,xxo),e(it,zi),e(zi,$xo),e(zi,Nme),e(Nme,kxo),e(zi,Sxo),e(zi,IG),e(IG,Rxo),e(zi,Pxo),e(it,Bxo),M(m1,it,null),e(So,Ixo),e(So,Ke),M(vy,Ke,null),e(Ke,Nxo),e(Ke,qme),e(qme,qxo),e(Ke,jxo),e(Ke,Ia),e(Ia,Dxo),e(Ia,jme),e(jme,Gxo),e(Ia,Oxo),e(Ia,Dme),e(Dme,Vxo),e(Ia,Xxo),e(Ia,Gme),e(Gme,zxo),e(Ia,Qxo),e(Ke,Wxo),e(Ke,Q),e(Q,g1),e(g1,Ome),e(Ome,Hxo),e(g1,Uxo),e(g1,NG),e(NG,Jxo),e(g1,Yxo),e(Q,Zxo),e(Q,h1),e(h1,Vme),e(Vme,Kxo),e(h1,e$o),e(h1,qG),e(qG,o$o),e(h1,r$o),e(Q,t$o),e(Q,p1),e(p1,Xme),e(Xme,a$o),e(p1,n$o),e(p1,jG),e(jG,s$o),e(p1,l$o),e(Q,i$o),e(Q,_1),e(_1,zme),e(zme,d$o),e(_1,c$o),e(_1,DG),e(DG,f$o),e(_1,m$o),e(Q,g$o),e(Q,u1),e(u1,Qme),e(Qme,h$o),e(u1,p$o),e(u1,GG),e(GG,_$o),e(u1,u$o),e(Q,b$o),e(Q,b1),e(b1,Wme),e(Wme,v$o),e(b1,F$o),e(b1,OG),e(OG,T$o),e(b1,M$o),e(Q,E$o),e(Q,v1),e(v1,Hme),e(Hme,C$o),e(v1,w$o),e(v1,VG),e(VG,A$o),e(v1,L$o),e(Q,y$o),e(Q,F1),e(F1,Ume),e(Ume,x$o),e(F1,$$o),e(F1,XG),e(XG,k$o),e(F1,S$o),e(Q,R$o),e(Q,T1),e(T1,Jme),e(Jme,P$o),e(T1,B$o),e(T1,zG),e(zG,I$o),e(T1,N$o),e(Q,q$o),e(Q,M1),e(M1,Yme),e(Yme,j$o),e(M1,D$o),e(M1,QG),e(QG,G$o),e(M1,O$o),e(Q,V$o),e(Q,E1),e(E1,Zme),e(Zme,X$o),e(E1,z$o),e(E1,WG),e(WG,Q$o),e(E1,W$o),e(Q,H$o),e(Q,C1),e(C1,Kme),e(Kme,U$o),e(C1,J$o),e(C1,HG),e(HG,Y$o),e(C1,Z$o),e(Q,K$o),e(Q,w1),e(w1,ege),e(ege,eko),e(w1,oko),e(w1,UG),e(UG,rko),e(w1,tko),e(Q,ako),e(Q,A1),e(A1,oge),e(oge,nko),e(A1,sko),e(A1,JG),e(JG,lko),e(A1,iko),e(Q,dko),e(Q,L1),e(L1,rge),e(rge,cko),e(L1,fko),e(L1,YG),e(YG,mko),e(L1,gko),e(Q,hko),e(Q,y1),e(y1,tge),e(tge,pko),e(y1,_ko),e(y1,ZG),e(ZG,uko),e(y1,bko),e(Q,vko),e(Q,x1),e(x1,age),e(age,Fko),e(x1,Tko),e(x1,KG),e(KG,Mko),e(x1,Eko),e(Q,Cko),e(Q,$1),e($1,nge),e(nge,wko),e($1,Ako),e($1,eO),e(eO,Lko),e($1,yko),e(Q,xko),e(Q,k1),e(k1,sge),e(sge,$ko),e(k1,kko),e(k1,oO),e(oO,Sko),e(k1,Rko),e(Q,Pko),e(Q,S1),e(S1,lge),e(lge,Bko),e(S1,Iko),e(S1,rO),e(rO,Nko),e(S1,qko),e(Q,jko),e(Q,R1),e(R1,ige),e(ige,Dko),e(R1,Gko),e(R1,tO),e(tO,Oko),e(R1,Vko),e(Q,Xko),e(Q,P1),e(P1,dge),e(dge,zko),e(P1,Qko),e(P1,aO),e(aO,Wko),e(P1,Hko),e(Q,Uko),e(Q,B1),e(B1,cge),e(cge,Jko),e(B1,Yko),e(B1,nO),e(nO,Zko),e(B1,Kko),e(Q,eSo),e(Q,I1),e(I1,fge),e(fge,oSo),e(I1,rSo),e(I1,sO),e(sO,tSo),e(I1,aSo),e(Q,nSo),e(Q,N1),e(N1,mge),e(mge,sSo),e(N1,lSo),e(N1,lO),e(lO,iSo),e(N1,dSo),e(Q,cSo),e(Q,q1),e(q1,gge),e(gge,fSo),e(q1,mSo),e(q1,iO),e(iO,gSo),e(q1,hSo),e(Q,pSo),e(Q,j1),e(j1,hge),e(hge,_So),e(j1,uSo),e(j1,dO),e(dO,bSo),e(j1,vSo),e(Q,FSo),e(Q,D1),e(D1,pge),e(pge,TSo),e(D1,MSo),e(D1,cO),e(cO,ESo),e(D1,CSo),e(Q,wSo),e(Q,G1),e(G1,_ge),e(_ge,ASo),e(G1,LSo),e(G1,fO),e(fO,ySo),e(G1,xSo),e(Q,$So),e(Q,O1),e(O1,uge),e(uge,kSo),e(O1,SSo),e(O1,mO),e(mO,RSo),e(O1,PSo),e(Q,BSo),e(Q,V1),e(V1,bge),e(bge,ISo),e(V1,NSo),e(V1,gO),e(gO,qSo),e(V1,jSo),e(Q,DSo),e(Q,X1),e(X1,vge),e(vge,GSo),e(X1,OSo),e(X1,hO),e(hO,VSo),e(X1,XSo),e(Q,zSo),e(Q,z1),e(z1,Fge),e(Fge,QSo),e(z1,WSo),e(z1,Tge),e(Tge,HSo),e(z1,USo),e(Q,JSo),e(Q,Q1),e(Q1,Mge),e(Mge,YSo),e(Q1,ZSo),e(Q1,pO),e(pO,KSo),e(Q1,eRo),e(Q,oRo),e(Q,W1),e(W1,Ege),e(Ege,rRo),e(W1,tRo),e(W1,_O),e(_O,aRo),e(W1,nRo),e(Q,sRo),e(Q,H1),e(H1,Cge),e(Cge,lRo),e(H1,iRo),e(H1,uO),e(uO,dRo),e(H1,cRo),e(Q,fRo),e(Q,U1),e(U1,wge),e(wge,mRo),e(U1,gRo),e(U1,bO),e(bO,hRo),e(U1,pRo),e(Ke,_Ro),e(Ke,J1),e(J1,uRo),e(J1,Age),e(Age,bRo),e(J1,vRo),e(J1,Lge),e(Lge,FRo),e(Ke,TRo),M(Y1,Ke,null),b(f,oOe,u),b(f,Qi,u),e(Qi,Z1),e(Z1,yge),M(Fy,yge,null),e(Qi,MRo),e(Qi,xge),e(xge,ERo),b(f,rOe,u),b(f,Ro,u),M(Ty,Ro,null),e(Ro,CRo),e(Ro,Wi),e(Wi,wRo),e(Wi,vO),e(vO,ARo),e(Wi,LRo),e(Wi,FO),e(FO,yRo),e(Wi,xRo),e(Ro,$Ro),e(Ro,My),e(My,kRo),e(My,$ge),e($ge,SRo),e(My,RRo),e(Ro,PRo),e(Ro,dt),M(Ey,dt,null),e(dt,BRo),e(dt,kge),e(kge,IRo),e(dt,NRo),e(dt,Hi),e(Hi,qRo),e(Hi,Sge),e(Sge,jRo),e(Hi,DRo),e(Hi,TO),e(TO,GRo),e(Hi,ORo),e(dt,VRo),M(K1,dt,null),e(Ro,XRo),e(Ro,eo),M(Cy,eo,null),e(eo,zRo),e(eo,Rge),e(Rge,QRo),e(eo,WRo),e(eo,Na),e(Na,HRo),e(Na,Pge),e(Pge,URo),e(Na,JRo),e(Na,Bge),e(Bge,YRo),e(Na,ZRo),e(Na,Ige),e(Ige,KRo),e(Na,ePo),e(eo,oPo),e(eo,pe),e(pe,e2),e(e2,Nge),e(Nge,rPo),e(e2,tPo),e(e2,MO),e(MO,aPo),e(e2,nPo),e(pe,sPo),e(pe,o2),e(o2,qge),e(qge,lPo),e(o2,iPo),e(o2,EO),e(EO,dPo),e(o2,cPo),e(pe,fPo),e(pe,r2),e(r2,jge),e(jge,mPo),e(r2,gPo),e(r2,CO),e(CO,hPo),e(r2,pPo),e(pe,_Po),e(pe,t2),e(t2,Dge),e(Dge,uPo),e(t2,bPo),e(t2,wO),e(wO,vPo),e(t2,FPo),e(pe,TPo),e(pe,a2),e(a2,Gge),e(Gge,MPo),e(a2,EPo),e(a2,AO),e(AO,CPo),e(a2,wPo),e(pe,APo),e(pe,n2),e(n2,Oge),e(Oge,LPo),e(n2,yPo),e(n2,LO),e(LO,xPo),e(n2,$Po),e(pe,kPo),e(pe,s2),e(s2,Vge),e(Vge,SPo),e(s2,RPo),e(s2,yO),e(yO,PPo),e(s2,BPo),e(pe,IPo),e(pe,l2),e(l2,Xge),e(Xge,NPo),e(l2,qPo),e(l2,xO),e(xO,jPo),e(l2,DPo),e(pe,GPo),e(pe,i2),e(i2,zge),e(zge,OPo),e(i2,VPo),e(i2,$O),e($O,XPo),e(i2,zPo),e(pe,QPo),e(pe,d2),e(d2,Qge),e(Qge,WPo),e(d2,HPo),e(d2,kO),e(kO,UPo),e(d2,JPo),e(pe,YPo),e(pe,c2),e(c2,Wge),e(Wge,ZPo),e(c2,KPo),e(c2,SO),e(SO,eBo),e(c2,oBo),e(pe,rBo),e(pe,f2),e(f2,Hge),e(Hge,tBo),e(f2,aBo),e(f2,RO),e(RO,nBo),e(f2,sBo),e(pe,lBo),e(pe,m2),e(m2,Uge),e(Uge,iBo),e(m2,dBo),e(m2,PO),e(PO,cBo),e(m2,fBo),e(pe,mBo),e(pe,g2),e(g2,Jge),e(Jge,gBo),e(g2,hBo),e(g2,BO),e(BO,pBo),e(g2,_Bo),e(pe,uBo),e(pe,h2),e(h2,Yge),e(Yge,bBo),e(h2,vBo),e(h2,IO),e(IO,FBo),e(h2,TBo),e(pe,MBo),e(pe,p2),e(p2,Zge),e(Zge,EBo),e(p2,CBo),e(p2,NO),e(NO,wBo),e(p2,ABo),e(pe,LBo),e(pe,_2),e(_2,Kge),e(Kge,yBo),e(_2,xBo),e(_2,qO),e(qO,$Bo),e(_2,kBo),e(eo,SBo),e(eo,u2),e(u2,RBo),e(u2,ehe),e(ehe,PBo),e(u2,BBo),e(u2,ohe),e(ohe,IBo),e(eo,NBo),M(b2,eo,null),b(f,tOe,u),b(f,Ui,u),e(Ui,v2),e(v2,rhe),M(wy,rhe,null),e(Ui,qBo),e(Ui,the),e(the,jBo),b(f,aOe,u),b(f,Po,u),M(Ay,Po,null),e(Po,DBo),e(Po,Ji),e(Ji,GBo),e(Ji,jO),e(jO,OBo),e(Ji,VBo),e(Ji,DO),e(DO,XBo),e(Ji,zBo),e(Po,QBo),e(Po,Ly),e(Ly,WBo),e(Ly,ahe),e(ahe,HBo),e(Ly,UBo),e(Po,JBo),e(Po,ct),M(yy,ct,null),e(ct,YBo),e(ct,nhe),e(nhe,ZBo),e(ct,KBo),e(ct,Yi),e(Yi,eIo),e(Yi,she),e(she,oIo),e(Yi,rIo),e(Yi,GO),e(GO,tIo),e(Yi,aIo),e(ct,nIo),M(F2,ct,null),e(Po,sIo),e(Po,oo),M(xy,oo,null),e(oo,lIo),e(oo,lhe),e(lhe,iIo),e(oo,dIo),e(oo,qa),e(qa,cIo),e(qa,ihe),e(ihe,fIo),e(qa,mIo),e(qa,dhe),e(dhe,gIo),e(qa,hIo),e(qa,che),e(che,pIo),e(qa,_Io),e(oo,uIo),e(oo,N),e(N,T2),e(T2,fhe),e(fhe,bIo),e(T2,vIo),e(T2,OO),e(OO,FIo),e(T2,TIo),e(N,MIo),e(N,M2),e(M2,mhe),e(mhe,EIo),e(M2,CIo),e(M2,VO),e(VO,wIo),e(M2,AIo),e(N,LIo),e(N,E2),e(E2,ghe),e(ghe,yIo),e(E2,xIo),e(E2,XO),e(XO,$Io),e(E2,kIo),e(N,SIo),e(N,C2),e(C2,hhe),e(hhe,RIo),e(C2,PIo),e(C2,zO),e(zO,BIo),e(C2,IIo),e(N,NIo),e(N,w2),e(w2,phe),e(phe,qIo),e(w2,jIo),e(w2,QO),e(QO,DIo),e(w2,GIo),e(N,OIo),e(N,A2),e(A2,_he),e(_he,VIo),e(A2,XIo),e(A2,WO),e(WO,zIo),e(A2,QIo),e(N,WIo),e(N,L2),e(L2,uhe),e(uhe,HIo),e(L2,UIo),e(L2,HO),e(HO,JIo),e(L2,YIo),e(N,ZIo),e(N,y2),e(y2,bhe),e(bhe,KIo),e(y2,eNo),e(y2,UO),e(UO,oNo),e(y2,rNo),e(N,tNo),e(N,x2),e(x2,vhe),e(vhe,aNo),e(x2,nNo),e(x2,JO),e(JO,sNo),e(x2,lNo),e(N,iNo),e(N,$2),e($2,Fhe),e(Fhe,dNo),e($2,cNo),e($2,YO),e(YO,fNo),e($2,mNo),e(N,gNo),e(N,k2),e(k2,The),e(The,hNo),e(k2,pNo),e(k2,ZO),e(ZO,_No),e(k2,uNo),e(N,bNo),e(N,S2),e(S2,Mhe),e(Mhe,vNo),e(S2,FNo),e(S2,KO),e(KO,TNo),e(S2,MNo),e(N,ENo),e(N,R2),e(R2,Ehe),e(Ehe,CNo),e(R2,wNo),e(R2,eV),e(eV,ANo),e(R2,LNo),e(N,yNo),e(N,P2),e(P2,Che),e(Che,xNo),e(P2,$No),e(P2,oV),e(oV,kNo),e(P2,SNo),e(N,RNo),e(N,B2),e(B2,whe),e(whe,PNo),e(B2,BNo),e(B2,rV),e(rV,INo),e(B2,NNo),e(N,qNo),e(N,I2),e(I2,Ahe),e(Ahe,jNo),e(I2,DNo),e(I2,tV),e(tV,GNo),e(I2,ONo),e(N,VNo),e(N,N2),e(N2,Lhe),e(Lhe,XNo),e(N2,zNo),e(N2,aV),e(aV,QNo),e(N2,WNo),e(N,HNo),e(N,q2),e(q2,yhe),e(yhe,UNo),e(q2,JNo),e(q2,nV),e(nV,YNo),e(q2,ZNo),e(N,KNo),e(N,j2),e(j2,xhe),e(xhe,eqo),e(j2,oqo),e(j2,sV),e(sV,rqo),e(j2,tqo),e(N,aqo),e(N,D2),e(D2,$he),e($he,nqo),e(D2,sqo),e(D2,lV),e(lV,lqo),e(D2,iqo),e(N,dqo),e(N,G2),e(G2,khe),e(khe,cqo),e(G2,fqo),e(G2,iV),e(iV,mqo),e(G2,gqo),e(N,hqo),e(N,O2),e(O2,She),e(She,pqo),e(O2,_qo),e(O2,dV),e(dV,uqo),e(O2,bqo),e(N,vqo),e(N,V2),e(V2,Rhe),e(Rhe,Fqo),e(V2,Tqo),e(V2,cV),e(cV,Mqo),e(V2,Eqo),e(N,Cqo),e(N,X2),e(X2,Phe),e(Phe,wqo),e(X2,Aqo),e(X2,fV),e(fV,Lqo),e(X2,yqo),e(N,xqo),e(N,z2),e(z2,Bhe),e(Bhe,$qo),e(z2,kqo),e(z2,mV),e(mV,Sqo),e(z2,Rqo),e(N,Pqo),e(N,Q2),e(Q2,Ihe),e(Ihe,Bqo),e(Q2,Iqo),e(Q2,gV),e(gV,Nqo),e(Q2,qqo),e(N,jqo),e(N,W2),e(W2,Nhe),e(Nhe,Dqo),e(W2,Gqo),e(W2,hV),e(hV,Oqo),e(W2,Vqo),e(N,Xqo),e(N,H2),e(H2,qhe),e(qhe,zqo),e(H2,Qqo),e(H2,pV),e(pV,Wqo),e(H2,Hqo),e(N,Uqo),e(N,U2),e(U2,jhe),e(jhe,Jqo),e(U2,Yqo),e(U2,_V),e(_V,Zqo),e(U2,Kqo),e(N,ejo),e(N,J2),e(J2,Dhe),e(Dhe,ojo),e(J2,rjo),e(J2,uV),e(uV,tjo),e(J2,ajo),e(N,njo),e(N,Y2),e(Y2,Ghe),e(Ghe,sjo),e(Y2,ljo),e(Y2,bV),e(bV,ijo),e(Y2,djo),e(N,cjo),e(N,Z2),e(Z2,Ohe),e(Ohe,fjo),e(Z2,mjo),e(Z2,vV),e(vV,gjo),e(Z2,hjo),e(N,pjo),e(N,K2),e(K2,Vhe),e(Vhe,_jo),e(K2,ujo),e(K2,FV),e(FV,bjo),e(K2,vjo),e(N,Fjo),e(N,eb),e(eb,Xhe),e(Xhe,Tjo),e(eb,Mjo),e(eb,TV),e(TV,Ejo),e(eb,Cjo),e(N,wjo),e(N,ob),e(ob,zhe),e(zhe,Ajo),e(ob,Ljo),e(ob,MV),e(MV,yjo),e(ob,xjo),e(N,$jo),e(N,rb),e(rb,Qhe),e(Qhe,kjo),e(rb,Sjo),e(rb,EV),e(EV,Rjo),e(rb,Pjo),e(N,Bjo),e(N,tb),e(tb,Whe),e(Whe,Ijo),e(tb,Njo),e(tb,CV),e(CV,qjo),e(tb,jjo),e(N,Djo),e(N,ab),e(ab,Hhe),e(Hhe,Gjo),e(ab,Ojo),e(ab,wV),e(wV,Vjo),e(ab,Xjo),e(N,zjo),e(N,nb),e(nb,Uhe),e(Uhe,Qjo),e(nb,Wjo),e(nb,AV),e(AV,Hjo),e(nb,Ujo),e(N,Jjo),e(N,sb),e(sb,Jhe),e(Jhe,Yjo),e(sb,Zjo),e(sb,LV),e(LV,Kjo),e(sb,eDo),e(N,oDo),e(N,lb),e(lb,Yhe),e(Yhe,rDo),e(lb,tDo),e(lb,yV),e(yV,aDo),e(lb,nDo),e(N,sDo),e(N,ib),e(ib,Zhe),e(Zhe,lDo),e(ib,iDo),e(ib,xV),e(xV,dDo),e(ib,cDo),e(N,fDo),e(N,db),e(db,Khe),e(Khe,mDo),e(db,gDo),e(db,$V),e($V,hDo),e(db,pDo),e(N,_Do),e(N,cb),e(cb,epe),e(epe,uDo),e(cb,bDo),e(cb,kV),e(kV,vDo),e(cb,FDo),e(N,TDo),e(N,fb),e(fb,ope),e(ope,MDo),e(fb,EDo),e(fb,SV),e(SV,CDo),e(fb,wDo),e(N,ADo),e(N,mb),e(mb,rpe),e(rpe,LDo),e(mb,yDo),e(mb,RV),e(RV,xDo),e(mb,$Do),e(N,kDo),e(N,gb),e(gb,tpe),e(tpe,SDo),e(gb,RDo),e(gb,PV),e(PV,PDo),e(gb,BDo),e(N,IDo),e(N,hb),e(hb,ape),e(ape,NDo),e(hb,qDo),e(hb,BV),e(BV,jDo),e(hb,DDo),e(N,GDo),e(N,pb),e(pb,npe),e(npe,ODo),e(pb,VDo),e(pb,IV),e(IV,XDo),e(pb,zDo),e(oo,QDo),e(oo,_b),e(_b,WDo),e(_b,spe),e(spe,HDo),e(_b,UDo),e(_b,lpe),e(lpe,JDo),e(oo,YDo),M(ub,oo,null),b(f,nOe,u),b(f,Zi,u),e(Zi,bb),e(bb,ipe),M($y,ipe,null),e(Zi,ZDo),e(Zi,dpe),e(dpe,KDo),b(f,sOe,u),b(f,Bo,u),M(ky,Bo,null),e(Bo,eGo),e(Bo,Ki),e(Ki,oGo),e(Ki,NV),e(NV,rGo),e(Ki,tGo),e(Ki,qV),e(qV,aGo),e(Ki,nGo),e(Bo,sGo),e(Bo,Sy),e(Sy,lGo),e(Sy,cpe),e(cpe,iGo),e(Sy,dGo),e(Bo,cGo),e(Bo,ft),M(Ry,ft,null),e(ft,fGo),e(ft,fpe),e(fpe,mGo),e(ft,gGo),e(ft,ed),e(ed,hGo),e(ed,mpe),e(mpe,pGo),e(ed,_Go),e(ed,jV),e(jV,uGo),e(ed,bGo),e(ft,vGo),M(vb,ft,null),e(Bo,FGo),e(Bo,ro),M(Py,ro,null),e(ro,TGo),e(ro,gpe),e(gpe,MGo),e(ro,EGo),e(ro,ja),e(ja,CGo),e(ja,hpe),e(hpe,wGo),e(ja,AGo),e(ja,ppe),e(ppe,LGo),e(ja,yGo),e(ja,_pe),e(_pe,xGo),e(ja,$Go),e(ro,kGo),e(ro,K),e(K,Fb),e(Fb,upe),e(upe,SGo),e(Fb,RGo),e(Fb,DV),e(DV,PGo),e(Fb,BGo),e(K,IGo),e(K,Tb),e(Tb,bpe),e(bpe,NGo),e(Tb,qGo),e(Tb,GV),e(GV,jGo),e(Tb,DGo),e(K,GGo),e(K,Mb),e(Mb,vpe),e(vpe,OGo),e(Mb,VGo),e(Mb,OV),e(OV,XGo),e(Mb,zGo),e(K,QGo),e(K,Eb),e(Eb,Fpe),e(Fpe,WGo),e(Eb,HGo),e(Eb,VV),e(VV,UGo),e(Eb,JGo),e(K,YGo),e(K,Cb),e(Cb,Tpe),e(Tpe,ZGo),e(Cb,KGo),e(Cb,XV),e(XV,eOo),e(Cb,oOo),e(K,rOo),e(K,wb),e(wb,Mpe),e(Mpe,tOo),e(wb,aOo),e(wb,zV),e(zV,nOo),e(wb,sOo),e(K,lOo),e(K,Ab),e(Ab,Epe),e(Epe,iOo),e(Ab,dOo),e(Ab,QV),e(QV,cOo),e(Ab,fOo),e(K,mOo),e(K,Lb),e(Lb,Cpe),e(Cpe,gOo),e(Lb,hOo),e(Lb,WV),e(WV,pOo),e(Lb,_Oo),e(K,uOo),e(K,yb),e(yb,wpe),e(wpe,bOo),e(yb,vOo),e(yb,HV),e(HV,FOo),e(yb,TOo),e(K,MOo),e(K,xb),e(xb,Ape),e(Ape,EOo),e(xb,COo),e(xb,UV),e(UV,wOo),e(xb,AOo),e(K,LOo),e(K,$b),e($b,Lpe),e(Lpe,yOo),e($b,xOo),e($b,JV),e(JV,$Oo),e($b,kOo),e(K,SOo),e(K,kb),e(kb,ype),e(ype,ROo),e(kb,POo),e(kb,YV),e(YV,BOo),e(kb,IOo),e(K,NOo),e(K,Sb),e(Sb,xpe),e(xpe,qOo),e(Sb,jOo),e(Sb,ZV),e(ZV,DOo),e(Sb,GOo),e(K,OOo),e(K,Rb),e(Rb,$pe),e($pe,VOo),e(Rb,XOo),e(Rb,KV),e(KV,zOo),e(Rb,QOo),e(K,WOo),e(K,Pb),e(Pb,kpe),e(kpe,HOo),e(Pb,UOo),e(Pb,eX),e(eX,JOo),e(Pb,YOo),e(K,ZOo),e(K,Bb),e(Bb,Spe),e(Spe,KOo),e(Bb,eVo),e(Bb,oX),e(oX,oVo),e(Bb,rVo),e(K,tVo),e(K,Ib),e(Ib,Rpe),e(Rpe,aVo),e(Ib,nVo),e(Ib,rX),e(rX,sVo),e(Ib,lVo),e(K,iVo),e(K,Nb),e(Nb,Ppe),e(Ppe,dVo),e(Nb,cVo),e(Nb,tX),e(tX,fVo),e(Nb,mVo),e(K,gVo),e(K,qb),e(qb,Bpe),e(Bpe,hVo),e(qb,pVo),e(qb,aX),e(aX,_Vo),e(qb,uVo),e(K,bVo),e(K,jb),e(jb,Ipe),e(Ipe,vVo),e(jb,FVo),e(jb,nX),e(nX,TVo),e(jb,MVo),e(K,EVo),e(K,Db),e(Db,Npe),e(Npe,CVo),e(Db,wVo),e(Db,sX),e(sX,AVo),e(Db,LVo),e(K,yVo),e(K,Gb),e(Gb,qpe),e(qpe,xVo),e(Gb,$Vo),e(Gb,lX),e(lX,kVo),e(Gb,SVo),e(K,RVo),e(K,Ob),e(Ob,jpe),e(jpe,PVo),e(Ob,BVo),e(Ob,iX),e(iX,IVo),e(Ob,NVo),e(K,qVo),e(K,Vb),e(Vb,Dpe),e(Dpe,jVo),e(Vb,DVo),e(Vb,dX),e(dX,GVo),e(Vb,OVo),e(K,VVo),e(K,Xb),e(Xb,Gpe),e(Gpe,XVo),e(Xb,zVo),e(Xb,cX),e(cX,QVo),e(Xb,WVo),e(K,HVo),e(K,zb),e(zb,Ope),e(Ope,UVo),e(zb,JVo),e(zb,fX),e(fX,YVo),e(zb,ZVo),e(K,KVo),e(K,Qb),e(Qb,Vpe),e(Vpe,eXo),e(Qb,oXo),e(Qb,mX),e(mX,rXo),e(Qb,tXo),e(K,aXo),e(K,Wb),e(Wb,Xpe),e(Xpe,nXo),e(Wb,sXo),e(Wb,gX),e(gX,lXo),e(Wb,iXo),e(K,dXo),e(K,Hb),e(Hb,zpe),e(zpe,cXo),e(Hb,fXo),e(Hb,hX),e(hX,mXo),e(Hb,gXo),e(K,hXo),e(K,Ub),e(Ub,Qpe),e(Qpe,pXo),e(Ub,_Xo),e(Ub,pX),e(pX,uXo),e(Ub,bXo),e(ro,vXo),e(ro,Jb),e(Jb,FXo),e(Jb,Wpe),e(Wpe,TXo),e(Jb,MXo),e(Jb,Hpe),e(Hpe,EXo),e(ro,CXo),M(Yb,ro,null),b(f,lOe,u),b(f,od,u),e(od,Zb),e(Zb,Upe),M(By,Upe,null),e(od,wXo),e(od,Jpe),e(Jpe,AXo),b(f,iOe,u),b(f,Io,u),M(Iy,Io,null),e(Io,LXo),e(Io,rd),e(rd,yXo),e(rd,_X),e(_X,xXo),e(rd,$Xo),e(rd,uX),e(uX,kXo),e(rd,SXo),e(Io,RXo),e(Io,Ny),e(Ny,PXo),e(Ny,Ype),e(Ype,BXo),e(Ny,IXo),e(Io,NXo),e(Io,mt),M(qy,mt,null),e(mt,qXo),e(mt,Zpe),e(Zpe,jXo),e(mt,DXo),e(mt,td),e(td,GXo),e(td,Kpe),e(Kpe,OXo),e(td,VXo),e(td,bX),e(bX,XXo),e(td,zXo),e(mt,QXo),M(Kb,mt,null),e(Io,WXo),e(Io,to),M(jy,to,null),e(to,HXo),e(to,e_e),e(e_e,UXo),e(to,JXo),e(to,Da),e(Da,YXo),e(Da,o_e),e(o_e,ZXo),e(Da,KXo),e(Da,r_e),e(r_e,ezo),e(Da,ozo),e(Da,t_e),e(t_e,rzo),e(Da,tzo),e(to,azo),e(to,No),e(No,ev),e(ev,a_e),e(a_e,nzo),e(ev,szo),e(ev,vX),e(vX,lzo),e(ev,izo),e(No,dzo),e(No,ov),e(ov,n_e),e(n_e,czo),e(ov,fzo),e(ov,FX),e(FX,mzo),e(ov,gzo),e(No,hzo),e(No,rv),e(rv,s_e),e(s_e,pzo),e(rv,_zo),e(rv,TX),e(TX,uzo),e(rv,bzo),e(No,vzo),e(No,tv),e(tv,l_e),e(l_e,Fzo),e(tv,Tzo),e(tv,MX),e(MX,Mzo),e(tv,Ezo),e(No,Czo),e(No,av),e(av,i_e),e(i_e,wzo),e(av,Azo),e(av,EX),e(EX,Lzo),e(av,yzo),e(No,xzo),e(No,nv),e(nv,d_e),e(d_e,$zo),e(nv,kzo),e(nv,CX),e(CX,Szo),e(nv,Rzo),e(to,Pzo),e(to,sv),e(sv,Bzo),e(sv,c_e),e(c_e,Izo),e(sv,Nzo),e(sv,f_e),e(f_e,qzo),e(to,jzo),M(lv,to,null),b(f,dOe,u),b(f,ad,u),e(ad,iv),e(iv,m_e),M(Dy,m_e,null),e(ad,Dzo),e(ad,g_e),e(g_e,Gzo),b(f,cOe,u),b(f,qo,u),M(Gy,qo,null),e(qo,Ozo),e(qo,nd),e(nd,Vzo),e(nd,wX),e(wX,Xzo),e(nd,zzo),e(nd,AX),e(AX,Qzo),e(nd,Wzo),e(qo,Hzo),e(qo,Oy),e(Oy,Uzo),e(Oy,h_e),e(h_e,Jzo),e(Oy,Yzo),e(qo,Zzo),e(qo,gt),M(Vy,gt,null),e(gt,Kzo),e(gt,p_e),e(p_e,eQo),e(gt,oQo),e(gt,sd),e(sd,rQo),e(sd,__e),e(__e,tQo),e(sd,aQo),e(sd,LX),e(LX,nQo),e(sd,sQo),e(gt,lQo),M(dv,gt,null),e(qo,iQo),e(qo,ao),M(Xy,ao,null),e(ao,dQo),e(ao,u_e),e(u_e,cQo),e(ao,fQo),e(ao,Ga),e(Ga,mQo),e(Ga,b_e),e(b_e,gQo),e(Ga,hQo),e(Ga,v_e),e(v_e,pQo),e(Ga,_Qo),e(Ga,F_e),e(F_e,uQo),e(Ga,bQo),e(ao,vQo),e(ao,H),e(H,cv),e(cv,T_e),e(T_e,FQo),e(cv,TQo),e(cv,yX),e(yX,MQo),e(cv,EQo),e(H,CQo),e(H,fv),e(fv,M_e),e(M_e,wQo),e(fv,AQo),e(fv,xX),e(xX,LQo),e(fv,yQo),e(H,xQo),e(H,mv),e(mv,E_e),e(E_e,$Qo),e(mv,kQo),e(mv,$X),e($X,SQo),e(mv,RQo),e(H,PQo),e(H,gv),e(gv,C_e),e(C_e,BQo),e(gv,IQo),e(gv,kX),e(kX,NQo),e(gv,qQo),e(H,jQo),e(H,hv),e(hv,w_e),e(w_e,DQo),e(hv,GQo),e(hv,SX),e(SX,OQo),e(hv,VQo),e(H,XQo),e(H,pv),e(pv,A_e),e(A_e,zQo),e(pv,QQo),e(pv,RX),e(RX,WQo),e(pv,HQo),e(H,UQo),e(H,_v),e(_v,L_e),e(L_e,JQo),e(_v,YQo),e(_v,PX),e(PX,ZQo),e(_v,KQo),e(H,eWo),e(H,uv),e(uv,y_e),e(y_e,oWo),e(uv,rWo),e(uv,BX),e(BX,tWo),e(uv,aWo),e(H,nWo),e(H,bv),e(bv,x_e),e(x_e,sWo),e(bv,lWo),e(bv,IX),e(IX,iWo),e(bv,dWo),e(H,cWo),e(H,vv),e(vv,$_e),e($_e,fWo),e(vv,mWo),e(vv,NX),e(NX,gWo),e(vv,hWo),e(H,pWo),e(H,Fv),e(Fv,k_e),e(k_e,_Wo),e(Fv,uWo),e(Fv,qX),e(qX,bWo),e(Fv,vWo),e(H,FWo),e(H,Tv),e(Tv,S_e),e(S_e,TWo),e(Tv,MWo),e(Tv,jX),e(jX,EWo),e(Tv,CWo),e(H,wWo),e(H,Mv),e(Mv,R_e),e(R_e,AWo),e(Mv,LWo),e(Mv,DX),e(DX,yWo),e(Mv,xWo),e(H,$Wo),e(H,Ev),e(Ev,P_e),e(P_e,kWo),e(Ev,SWo),e(Ev,GX),e(GX,RWo),e(Ev,PWo),e(H,BWo),e(H,Cv),e(Cv,B_e),e(B_e,IWo),e(Cv,NWo),e(Cv,OX),e(OX,qWo),e(Cv,jWo),e(H,DWo),e(H,wv),e(wv,I_e),e(I_e,GWo),e(wv,OWo),e(wv,VX),e(VX,VWo),e(wv,XWo),e(H,zWo),e(H,Av),e(Av,N_e),e(N_e,QWo),e(Av,WWo),e(Av,XX),e(XX,HWo),e(Av,UWo),e(H,JWo),e(H,Lv),e(Lv,q_e),e(q_e,YWo),e(Lv,ZWo),e(Lv,zX),e(zX,KWo),e(Lv,eHo),e(H,oHo),e(H,yv),e(yv,j_e),e(j_e,rHo),e(yv,tHo),e(yv,QX),e(QX,aHo),e(yv,nHo),e(H,sHo),e(H,xv),e(xv,D_e),e(D_e,lHo),e(xv,iHo),e(xv,WX),e(WX,dHo),e(xv,cHo),e(H,fHo),e(H,$v),e($v,G_e),e(G_e,mHo),e($v,gHo),e($v,HX),e(HX,hHo),e($v,pHo),e(H,_Ho),e(H,kv),e(kv,O_e),e(O_e,uHo),e(kv,bHo),e(kv,UX),e(UX,vHo),e(kv,FHo),e(H,THo),e(H,Sv),e(Sv,V_e),e(V_e,MHo),e(Sv,EHo),e(Sv,JX),e(JX,CHo),e(Sv,wHo),e(H,AHo),e(H,Rv),e(Rv,X_e),e(X_e,LHo),e(Rv,yHo),e(Rv,YX),e(YX,xHo),e(Rv,$Ho),e(H,kHo),e(H,Pv),e(Pv,z_e),e(z_e,SHo),e(Pv,RHo),e(Pv,ZX),e(ZX,PHo),e(Pv,BHo),e(H,IHo),e(H,Bv),e(Bv,Q_e),e(Q_e,NHo),e(Bv,qHo),e(Bv,KX),e(KX,jHo),e(Bv,DHo),e(H,GHo),e(H,Iv),e(Iv,W_e),e(W_e,OHo),e(Iv,VHo),e(Iv,ez),e(ez,XHo),e(Iv,zHo),e(H,QHo),e(H,Nv),e(Nv,H_e),e(H_e,WHo),e(Nv,HHo),e(Nv,oz),e(oz,UHo),e(Nv,JHo),e(H,YHo),e(H,qv),e(qv,U_e),e(U_e,ZHo),e(qv,KHo),e(qv,rz),e(rz,eUo),e(qv,oUo),e(H,rUo),e(H,jv),e(jv,J_e),e(J_e,tUo),e(jv,aUo),e(jv,tz),e(tz,nUo),e(jv,sUo),e(H,lUo),e(H,Dv),e(Dv,Y_e),e(Y_e,iUo),e(Dv,dUo),e(Dv,az),e(az,cUo),e(Dv,fUo),e(H,mUo),e(H,Gv),e(Gv,Z_e),e(Z_e,gUo),e(Gv,hUo),e(Gv,nz),e(nz,pUo),e(Gv,_Uo),e(H,uUo),e(H,Ov),e(Ov,K_e),e(K_e,bUo),e(Ov,vUo),e(Ov,sz),e(sz,FUo),e(Ov,TUo),e(H,MUo),e(H,Vv),e(Vv,eue),e(eue,EUo),e(Vv,CUo),e(Vv,lz),e(lz,wUo),e(Vv,AUo),e(H,LUo),e(H,Xv),e(Xv,oue),e(oue,yUo),e(Xv,xUo),e(Xv,iz),e(iz,$Uo),e(Xv,kUo),e(H,SUo),e(H,zv),e(zv,rue),e(rue,RUo),e(zv,PUo),e(zv,dz),e(dz,BUo),e(zv,IUo),e(ao,NUo),e(ao,Qv),e(Qv,qUo),e(Qv,tue),e(tue,jUo),e(Qv,DUo),e(Qv,aue),e(aue,GUo),e(ao,OUo),M(Wv,ao,null),b(f,fOe,u),b(f,ld,u),e(ld,Hv),e(Hv,nue),M(zy,nue,null),e(ld,VUo),e(ld,sue),e(sue,XUo),b(f,mOe,u),b(f,jo,u),M(Qy,jo,null),e(jo,zUo),e(jo,id),e(id,QUo),e(id,cz),e(cz,WUo),e(id,HUo),e(id,fz),e(fz,UUo),e(id,JUo),e(jo,YUo),e(jo,Wy),e(Wy,ZUo),e(Wy,lue),e(lue,KUo),e(Wy,eJo),e(jo,oJo),e(jo,ht),M(Hy,ht,null),e(ht,rJo),e(ht,iue),e(iue,tJo),e(ht,aJo),e(ht,dd),e(dd,nJo),e(dd,due),e(due,sJo),e(dd,lJo),e(dd,mz),e(mz,iJo),e(dd,dJo),e(ht,cJo),M(Uv,ht,null),e(jo,fJo),e(jo,no),M(Uy,no,null),e(no,mJo),e(no,cue),e(cue,gJo),e(no,hJo),e(no,Oa),e(Oa,pJo),e(Oa,fue),e(fue,_Jo),e(Oa,uJo),e(Oa,mue),e(mue,bJo),e(Oa,vJo),e(Oa,gue),e(gue,FJo),e(Oa,TJo),e(no,MJo),e(no,V),e(V,Jv),e(Jv,hue),e(hue,EJo),e(Jv,CJo),e(Jv,gz),e(gz,wJo),e(Jv,AJo),e(V,LJo),e(V,Yv),e(Yv,pue),e(pue,yJo),e(Yv,xJo),e(Yv,hz),e(hz,$Jo),e(Yv,kJo),e(V,SJo),e(V,Zv),e(Zv,_ue),e(_ue,RJo),e(Zv,PJo),e(Zv,pz),e(pz,BJo),e(Zv,IJo),e(V,NJo),e(V,Kv),e(Kv,uue),e(uue,qJo),e(Kv,jJo),e(Kv,_z),e(_z,DJo),e(Kv,GJo),e(V,OJo),e(V,eF),e(eF,bue),e(bue,VJo),e(eF,XJo),e(eF,uz),e(uz,zJo),e(eF,QJo),e(V,WJo),e(V,oF),e(oF,vue),e(vue,HJo),e(oF,UJo),e(oF,bz),e(bz,JJo),e(oF,YJo),e(V,ZJo),e(V,rF),e(rF,Fue),e(Fue,KJo),e(rF,eYo),e(rF,vz),e(vz,oYo),e(rF,rYo),e(V,tYo),e(V,tF),e(tF,Tue),e(Tue,aYo),e(tF,nYo),e(tF,Fz),e(Fz,sYo),e(tF,lYo),e(V,iYo),e(V,aF),e(aF,Mue),e(Mue,dYo),e(aF,cYo),e(aF,Tz),e(Tz,fYo),e(aF,mYo),e(V,gYo),e(V,nF),e(nF,Eue),e(Eue,hYo),e(nF,pYo),e(nF,Mz),e(Mz,_Yo),e(nF,uYo),e(V,bYo),e(V,sF),e(sF,Cue),e(Cue,vYo),e(sF,FYo),e(sF,Ez),e(Ez,TYo),e(sF,MYo),e(V,EYo),e(V,lF),e(lF,wue),e(wue,CYo),e(lF,wYo),e(lF,Cz),e(Cz,AYo),e(lF,LYo),e(V,yYo),e(V,iF),e(iF,Aue),e(Aue,xYo),e(iF,$Yo),e(iF,wz),e(wz,kYo),e(iF,SYo),e(V,RYo),e(V,dF),e(dF,Lue),e(Lue,PYo),e(dF,BYo),e(dF,Az),e(Az,IYo),e(dF,NYo),e(V,qYo),e(V,cF),e(cF,yue),e(yue,jYo),e(cF,DYo),e(cF,Lz),e(Lz,GYo),e(cF,OYo),e(V,VYo),e(V,fF),e(fF,xue),e(xue,XYo),e(fF,zYo),e(fF,yz),e(yz,QYo),e(fF,WYo),e(V,HYo),e(V,mF),e(mF,$ue),e($ue,UYo),e(mF,JYo),e(mF,xz),e(xz,YYo),e(mF,ZYo),e(V,KYo),e(V,gF),e(gF,kue),e(kue,eZo),e(gF,oZo),e(gF,$z),e($z,rZo),e(gF,tZo),e(V,aZo),e(V,hF),e(hF,Sue),e(Sue,nZo),e(hF,sZo),e(hF,kz),e(kz,lZo),e(hF,iZo),e(V,dZo),e(V,pF),e(pF,Rue),e(Rue,cZo),e(pF,fZo),e(pF,Sz),e(Sz,mZo),e(pF,gZo),e(V,hZo),e(V,_F),e(_F,Pue),e(Pue,pZo),e(_F,_Zo),e(_F,Rz),e(Rz,uZo),e(_F,bZo),e(V,vZo),e(V,uF),e(uF,Bue),e(Bue,FZo),e(uF,TZo),e(uF,Pz),e(Pz,MZo),e(uF,EZo),e(V,CZo),e(V,bF),e(bF,Iue),e(Iue,wZo),e(bF,AZo),e(bF,Bz),e(Bz,LZo),e(bF,yZo),e(V,xZo),e(V,vF),e(vF,Nue),e(Nue,$Zo),e(vF,kZo),e(vF,Iz),e(Iz,SZo),e(vF,RZo),e(V,PZo),e(V,FF),e(FF,que),e(que,BZo),e(FF,IZo),e(FF,Nz),e(Nz,NZo),e(FF,qZo),e(V,jZo),e(V,TF),e(TF,jue),e(jue,DZo),e(TF,GZo),e(TF,qz),e(qz,OZo),e(TF,VZo),e(V,XZo),e(V,MF),e(MF,Due),e(Due,zZo),e(MF,QZo),e(MF,jz),e(jz,WZo),e(MF,HZo),e(V,UZo),e(V,EF),e(EF,Gue),e(Gue,JZo),e(EF,YZo),e(EF,Dz),e(Dz,ZZo),e(EF,KZo),e(V,eKo),e(V,CF),e(CF,Oue),e(Oue,oKo),e(CF,rKo),e(CF,Gz),e(Gz,tKo),e(CF,aKo),e(V,nKo),e(V,wF),e(wF,Vue),e(Vue,sKo),e(wF,lKo),e(wF,Oz),e(Oz,iKo),e(wF,dKo),e(V,cKo),e(V,AF),e(AF,Xue),e(Xue,fKo),e(AF,mKo),e(AF,Vz),e(Vz,gKo),e(AF,hKo),e(V,pKo),e(V,LF),e(LF,zue),e(zue,_Ko),e(LF,uKo),e(LF,Xz),e(Xz,bKo),e(LF,vKo),e(V,FKo),e(V,yF),e(yF,Que),e(Que,TKo),e(yF,MKo),e(yF,zz),e(zz,EKo),e(yF,CKo),e(V,wKo),e(V,xF),e(xF,Wue),e(Wue,AKo),e(xF,LKo),e(xF,Qz),e(Qz,yKo),e(xF,xKo),e(V,$Ko),e(V,$F),e($F,Hue),e(Hue,kKo),e($F,SKo),e($F,Wz),e(Wz,RKo),e($F,PKo),e(V,BKo),e(V,kF),e(kF,Uue),e(Uue,IKo),e(kF,NKo),e(kF,Hz),e(Hz,qKo),e(kF,jKo),e(V,DKo),e(V,SF),e(SF,Jue),e(Jue,GKo),e(SF,OKo),e(SF,Uz),e(Uz,VKo),e(SF,XKo),e(V,zKo),e(V,RF),e(RF,Yue),e(Yue,QKo),e(RF,WKo),e(RF,Jz),e(Jz,HKo),e(RF,UKo),e(V,JKo),e(V,PF),e(PF,Zue),e(Zue,YKo),e(PF,ZKo),e(PF,Yz),e(Yz,KKo),e(PF,eer),e(V,oer),e(V,BF),e(BF,Kue),e(Kue,rer),e(BF,ter),e(BF,Zz),e(Zz,aer),e(BF,ner),e(V,ser),e(V,IF),e(IF,e7e),e(e7e,ler),e(IF,ier),e(IF,Kz),e(Kz,der),e(IF,cer),e(no,fer),e(no,NF),e(NF,mer),e(NF,o7e),e(o7e,ger),e(NF,her),e(NF,r7e),e(r7e,per),e(no,_er),M(qF,no,null),b(f,gOe,u),b(f,cd,u),e(cd,jF),e(jF,t7e),M(Jy,t7e,null),e(cd,uer),e(cd,a7e),e(a7e,ber),b(f,hOe,u),b(f,Do,u),M(Yy,Do,null),e(Do,ver),e(Do,fd),e(fd,Fer),e(fd,eQ),e(eQ,Ter),e(fd,Mer),e(fd,oQ),e(oQ,Eer),e(fd,Cer),e(Do,wer),e(Do,Zy),e(Zy,Aer),e(Zy,n7e),e(n7e,Ler),e(Zy,yer),e(Do,xer),e(Do,pt),M(Ky,pt,null),e(pt,$er),e(pt,s7e),e(s7e,ker),e(pt,Ser),e(pt,md),e(md,Rer),e(md,l7e),e(l7e,Per),e(md,Ber),e(md,rQ),e(rQ,Ier),e(md,Ner),e(pt,qer),M(DF,pt,null),e(Do,jer),e(Do,so),M(e8,so,null),e(so,Der),e(so,i7e),e(i7e,Ger),e(so,Oer),e(so,Va),e(Va,Ver),e(Va,d7e),e(d7e,Xer),e(Va,zer),e(Va,c7e),e(c7e,Qer),e(Va,Wer),e(Va,f7e),e(f7e,Her),e(Va,Uer),e(so,Jer),e(so,m7e),e(m7e,GF),e(GF,g7e),e(g7e,Yer),e(GF,Zer),e(GF,tQ),e(tQ,Ker),e(GF,eor),e(so,oor),e(so,OF),e(OF,ror),e(OF,h7e),e(h7e,tor),e(OF,aor),e(OF,p7e),e(p7e,nor),e(so,sor),M(VF,so,null),b(f,pOe,u),b(f,gd,u),e(gd,XF),e(XF,_7e),M(o8,_7e,null),e(gd,lor),e(gd,u7e),e(u7e,ior),b(f,_Oe,u),b(f,Go,u),M(r8,Go,null),e(Go,dor),e(Go,hd),e(hd,cor),e(hd,aQ),e(aQ,mor),e(hd,gor),e(hd,nQ),e(nQ,hor),e(hd,por),e(Go,_or),e(Go,t8),e(t8,uor),e(t8,b7e),e(b7e,bor),e(t8,vor),e(Go,For),e(Go,_t),M(a8,_t,null),e(_t,Tor),e(_t,v7e),e(v7e,Mor),e(_t,Eor),e(_t,pd),e(pd,Cor),e(pd,F7e),e(F7e,wor),e(pd,Aor),e(pd,sQ),e(sQ,Lor),e(pd,yor),e(_t,xor),M(zF,_t,null),e(Go,$or),e(Go,lo),M(n8,lo,null),e(lo,kor),e(lo,T7e),e(T7e,Sor),e(lo,Ror),e(lo,Xa),e(Xa,Por),e(Xa,M7e),e(M7e,Bor),e(Xa,Ior),e(Xa,E7e),e(E7e,Nor),e(Xa,qor),e(Xa,C7e),e(C7e,jor),e(Xa,Dor),e(lo,Gor),e(lo,Fe),e(Fe,QF),e(QF,w7e),e(w7e,Oor),e(QF,Vor),e(QF,lQ),e(lQ,Xor),e(QF,zor),e(Fe,Qor),e(Fe,WF),e(WF,A7e),e(A7e,Wor),e(WF,Hor),e(WF,iQ),e(iQ,Uor),e(WF,Jor),e(Fe,Yor),e(Fe,HF),e(HF,L7e),e(L7e,Zor),e(HF,Kor),e(HF,dQ),e(dQ,err),e(HF,orr),e(Fe,rrr),e(Fe,UF),e(UF,y7e),e(y7e,trr),e(UF,arr),e(UF,cQ),e(cQ,nrr),e(UF,srr),e(Fe,lrr),e(Fe,Vs),e(Vs,x7e),e(x7e,irr),e(Vs,drr),e(Vs,fQ),e(fQ,crr),e(Vs,frr),e(Vs,mQ),e(mQ,mrr),e(Vs,grr),e(Fe,hrr),e(Fe,JF),e(JF,$7e),e($7e,prr),e(JF,_rr),e(JF,gQ),e(gQ,urr),e(JF,brr),e(Fe,vrr),e(Fe,Xs),e(Xs,k7e),e(k7e,Frr),e(Xs,Trr),e(Xs,hQ),e(hQ,Mrr),e(Xs,Err),e(Xs,pQ),e(pQ,Crr),e(Xs,wrr),e(Fe,Arr),e(Fe,ut),e(ut,S7e),e(S7e,Lrr),e(ut,yrr),e(ut,_Q),e(_Q,xrr),e(ut,$rr),e(ut,uQ),e(uQ,krr),e(ut,Srr),e(ut,bQ),e(bQ,Rrr),e(ut,Prr),e(Fe,Brr),e(Fe,YF),e(YF,R7e),e(R7e,Irr),e(YF,Nrr),e(YF,vQ),e(vQ,qrr),e(YF,jrr),e(Fe,Drr),e(Fe,ZF),e(ZF,P7e),e(P7e,Grr),e(ZF,Orr),e(ZF,FQ),e(FQ,Vrr),e(ZF,Xrr),e(Fe,zrr),e(Fe,KF),e(KF,B7e),e(B7e,Qrr),e(KF,Wrr),e(KF,TQ),e(TQ,Hrr),e(KF,Urr),e(Fe,Jrr),e(Fe,e6),e(e6,I7e),e(I7e,Yrr),e(e6,Zrr),e(e6,MQ),e(MQ,Krr),e(e6,etr),e(Fe,otr),e(Fe,o6),e(o6,N7e),e(N7e,rtr),e(o6,ttr),e(o6,EQ),e(EQ,atr),e(o6,ntr),e(Fe,str),e(Fe,r6),e(r6,q7e),e(q7e,ltr),e(r6,itr),e(r6,CQ),e(CQ,dtr),e(r6,ctr),e(Fe,ftr),e(Fe,t6),e(t6,j7e),e(j7e,mtr),e(t6,gtr),e(t6,wQ),e(wQ,htr),e(t6,ptr),e(lo,_tr),e(lo,a6),e(a6,utr),e(a6,D7e),e(D7e,btr),e(a6,vtr),e(a6,G7e),e(G7e,Ftr),e(lo,Ttr),M(n6,lo,null),b(f,uOe,u),b(f,_d,u),e(_d,s6),e(s6,O7e),M(s8,O7e,null),e(_d,Mtr),e(_d,V7e),e(V7e,Etr),b(f,bOe,u),b(f,Oo,u),M(l8,Oo,null),e(Oo,Ctr),e(Oo,ud),e(ud,wtr),e(ud,AQ),e(AQ,Atr),e(ud,Ltr),e(ud,LQ),e(LQ,ytr),e(ud,xtr),e(Oo,$tr),e(Oo,i8),e(i8,ktr),e(i8,X7e),e(X7e,Str),e(i8,Rtr),e(Oo,Ptr),e(Oo,bt),M(d8,bt,null),e(bt,Btr),e(bt,z7e),e(z7e,Itr),e(bt,Ntr),e(bt,bd),e(bd,qtr),e(bd,Q7e),e(Q7e,jtr),e(bd,Dtr),e(bd,yQ),e(yQ,Gtr),e(bd,Otr),e(bt,Vtr),M(l6,bt,null),e(Oo,Xtr),e(Oo,io),M(c8,io,null),e(io,ztr),e(io,W7e),e(W7e,Qtr),e(io,Wtr),e(io,za),e(za,Htr),e(za,H7e),e(H7e,Utr),e(za,Jtr),e(za,U7e),e(U7e,Ytr),e(za,Ztr),e(za,J7e),e(J7e,Ktr),e(za,ear),e(io,oar),e(io,Y7e),e(Y7e,i6),e(i6,Z7e),e(Z7e,rar),e(i6,tar),e(i6,xQ),e(xQ,aar),e(i6,nar),e(io,sar),e(io,d6),e(d6,lar),e(d6,K7e),e(K7e,iar),e(d6,dar),e(d6,e1e),e(e1e,car),e(io,far),M(c6,io,null),b(f,vOe,u),b(f,vd,u),e(vd,f6),e(f6,o1e),M(f8,o1e,null),e(vd,mar),e(vd,r1e),e(r1e,gar),b(f,FOe,u),b(f,Vo,u),M(m8,Vo,null),e(Vo,har),e(Vo,Fd),e(Fd,par),e(Fd,$Q),e($Q,_ar),e(Fd,uar),e(Fd,kQ),e(kQ,bar),e(Fd,Far),e(Vo,Tar),e(Vo,g8),e(g8,Mar),e(g8,t1e),e(t1e,Ear),e(g8,Car),e(Vo,war),e(Vo,vt),M(h8,vt,null),e(vt,Aar),e(vt,a1e),e(a1e,Lar),e(vt,yar),e(vt,Td),e(Td,xar),e(Td,n1e),e(n1e,$ar),e(Td,kar),e(Td,SQ),e(SQ,Sar),e(Td,Rar),e(vt,Par),M(m6,vt,null),e(Vo,Bar),e(Vo,co),M(p8,co,null),e(co,Iar),e(co,s1e),e(s1e,Nar),e(co,qar),e(co,Qa),e(Qa,jar),e(Qa,l1e),e(l1e,Dar),e(Qa,Gar),e(Qa,i1e),e(i1e,Oar),e(Qa,Var),e(Qa,d1e),e(d1e,Xar),e(Qa,zar),e(co,Qar),e(co,c1e),e(c1e,g6),e(g6,f1e),e(f1e,War),e(g6,Har),e(g6,RQ),e(RQ,Uar),e(g6,Jar),e(co,Yar),e(co,h6),e(h6,Zar),e(h6,m1e),e(m1e,Kar),e(h6,enr),e(h6,g1e),e(g1e,onr),e(co,rnr),M(p6,co,null),b(f,TOe,u),b(f,Md,u),e(Md,_6),e(_6,h1e),M(_8,h1e,null),e(Md,tnr),e(Md,p1e),e(p1e,anr),b(f,MOe,u),b(f,Xo,u),M(u8,Xo,null),e(Xo,nnr),e(Xo,Ed),e(Ed,snr),e(Ed,PQ),e(PQ,lnr),e(Ed,inr),e(Ed,BQ),e(BQ,dnr),e(Ed,cnr),e(Xo,fnr),e(Xo,b8),e(b8,mnr),e(b8,_1e),e(_1e,gnr),e(b8,hnr),e(Xo,pnr),e(Xo,Ft),M(v8,Ft,null),e(Ft,_nr),e(Ft,u1e),e(u1e,unr),e(Ft,bnr),e(Ft,Cd),e(Cd,vnr),e(Cd,b1e),e(b1e,Fnr),e(Cd,Tnr),e(Cd,IQ),e(IQ,Mnr),e(Cd,Enr),e(Ft,Cnr),M(u6,Ft,null),e(Xo,wnr),e(Xo,fo),M(F8,fo,null),e(fo,Anr),e(fo,v1e),e(v1e,Lnr),e(fo,ynr),e(fo,Wa),e(Wa,xnr),e(Wa,F1e),e(F1e,$nr),e(Wa,knr),e(Wa,T1e),e(T1e,Snr),e(Wa,Rnr),e(Wa,M1e),e(M1e,Pnr),e(Wa,Bnr),e(fo,Inr),e(fo,Pe),e(Pe,b6),e(b6,E1e),e(E1e,Nnr),e(b6,qnr),e(b6,NQ),e(NQ,jnr),e(b6,Dnr),e(Pe,Gnr),e(Pe,v6),e(v6,C1e),e(C1e,Onr),e(v6,Vnr),e(v6,qQ),e(qQ,Xnr),e(v6,znr),e(Pe,Qnr),e(Pe,F6),e(F6,w1e),e(w1e,Wnr),e(F6,Hnr),e(F6,jQ),e(jQ,Unr),e(F6,Jnr),e(Pe,Ynr),e(Pe,T6),e(T6,A1e),e(A1e,Znr),e(T6,Knr),e(T6,DQ),e(DQ,esr),e(T6,osr),e(Pe,rsr),e(Pe,M6),e(M6,L1e),e(L1e,tsr),e(M6,asr),e(M6,GQ),e(GQ,nsr),e(M6,ssr),e(Pe,lsr),e(Pe,E6),e(E6,y1e),e(y1e,isr),e(E6,dsr),e(E6,OQ),e(OQ,csr),e(E6,fsr),e(Pe,msr),e(Pe,C6),e(C6,x1e),e(x1e,gsr),e(C6,hsr),e(C6,VQ),e(VQ,psr),e(C6,_sr),e(Pe,usr),e(Pe,w6),e(w6,$1e),e($1e,bsr),e(w6,vsr),e(w6,XQ),e(XQ,Fsr),e(w6,Tsr),e(Pe,Msr),e(Pe,A6),e(A6,k1e),e(k1e,Esr),e(A6,Csr),e(A6,zQ),e(zQ,wsr),e(A6,Asr),e(fo,Lsr),e(fo,L6),e(L6,ysr),e(L6,S1e),e(S1e,xsr),e(L6,$sr),e(L6,R1e),e(R1e,ksr),e(fo,Ssr),M(y6,fo,null),b(f,EOe,u),b(f,wd,u),e(wd,x6),e(x6,P1e),M(T8,P1e,null),e(wd,Rsr),e(wd,B1e),e(B1e,Psr),b(f,COe,u),b(f,zo,u),M(M8,zo,null),e(zo,Bsr),e(zo,Ad),e(Ad,Isr),e(Ad,QQ),e(QQ,Nsr),e(Ad,qsr),e(Ad,WQ),e(WQ,jsr),e(Ad,Dsr),e(zo,Gsr),e(zo,E8),e(E8,Osr),e(E8,I1e),e(I1e,Vsr),e(E8,Xsr),e(zo,zsr),e(zo,Tt),M(C8,Tt,null),e(Tt,Qsr),e(Tt,N1e),e(N1e,Wsr),e(Tt,Hsr),e(Tt,Ld),e(Ld,Usr),e(Ld,q1e),e(q1e,Jsr),e(Ld,Ysr),e(Ld,HQ),e(HQ,Zsr),e(Ld,Ksr),e(Tt,elr),M($6,Tt,null),e(zo,olr),e(zo,mo),M(w8,mo,null),e(mo,rlr),e(mo,j1e),e(j1e,tlr),e(mo,alr),e(mo,Ha),e(Ha,nlr),e(Ha,D1e),e(D1e,slr),e(Ha,llr),e(Ha,G1e),e(G1e,ilr),e(Ha,dlr),e(Ha,O1e),e(O1e,clr),e(Ha,flr),e(mo,mlr),e(mo,et),e(et,k6),e(k6,V1e),e(V1e,glr),e(k6,hlr),e(k6,UQ),e(UQ,plr),e(k6,_lr),e(et,ulr),e(et,S6),e(S6,X1e),e(X1e,blr),e(S6,vlr),e(S6,JQ),e(JQ,Flr),e(S6,Tlr),e(et,Mlr),e(et,R6),e(R6,z1e),e(z1e,Elr),e(R6,Clr),e(R6,YQ),e(YQ,wlr),e(R6,Alr),e(et,Llr),e(et,P6),e(P6,Q1e),e(Q1e,ylr),e(P6,xlr),e(P6,ZQ),e(ZQ,$lr),e(P6,klr),e(et,Slr),e(et,B6),e(B6,W1e),e(W1e,Rlr),e(B6,Plr),e(B6,KQ),e(KQ,Blr),e(B6,Ilr),e(mo,Nlr),e(mo,I6),e(I6,qlr),e(I6,H1e),e(H1e,jlr),e(I6,Dlr),e(I6,U1e),e(U1e,Glr),e(mo,Olr),M(N6,mo,null),b(f,wOe,u),b(f,yd,u),e(yd,q6),e(q6,J1e),M(A8,J1e,null),e(yd,Vlr),e(yd,Y1e),e(Y1e,Xlr),b(f,AOe,u),b(f,Qo,u),M(L8,Qo,null),e(Qo,zlr),e(Qo,xd),e(xd,Qlr),e(xd,eW),e(eW,Wlr),e(xd,Hlr),e(xd,oW),e(oW,Ulr),e(xd,Jlr),e(Qo,Ylr),e(Qo,y8),e(y8,Zlr),e(y8,Z1e),e(Z1e,Klr),e(y8,eir),e(Qo,oir),e(Qo,Mt),M(x8,Mt,null),e(Mt,rir),e(Mt,K1e),e(K1e,tir),e(Mt,air),e(Mt,$d),e($d,nir),e($d,e2e),e(e2e,sir),e($d,lir),e($d,rW),e(rW,iir),e($d,dir),e(Mt,cir),M(j6,Mt,null),e(Qo,fir),e(Qo,go),M($8,go,null),e(go,mir),e(go,o2e),e(o2e,gir),e(go,hir),e(go,Ua),e(Ua,pir),e(Ua,r2e),e(r2e,_ir),e(Ua,uir),e(Ua,t2e),e(t2e,bir),e(Ua,vir),e(Ua,a2e),e(a2e,Fir),e(Ua,Tir),e(go,Mir),e(go,Le),e(Le,D6),e(D6,n2e),e(n2e,Eir),e(D6,Cir),e(D6,tW),e(tW,wir),e(D6,Air),e(Le,Lir),e(Le,G6),e(G6,s2e),e(s2e,yir),e(G6,xir),e(G6,aW),e(aW,$ir),e(G6,kir),e(Le,Sir),e(Le,O6),e(O6,l2e),e(l2e,Rir),e(O6,Pir),e(O6,nW),e(nW,Bir),e(O6,Iir),e(Le,Nir),e(Le,V6),e(V6,i2e),e(i2e,qir),e(V6,jir),e(V6,sW),e(sW,Dir),e(V6,Gir),e(Le,Oir),e(Le,X6),e(X6,d2e),e(d2e,Vir),e(X6,Xir),e(X6,lW),e(lW,zir),e(X6,Qir),e(Le,Wir),e(Le,z6),e(z6,c2e),e(c2e,Hir),e(z6,Uir),e(z6,iW),e(iW,Jir),e(z6,Yir),e(Le,Zir),e(Le,Q6),e(Q6,f2e),e(f2e,Kir),e(Q6,edr),e(Q6,dW),e(dW,odr),e(Q6,rdr),e(Le,tdr),e(Le,W6),e(W6,m2e),e(m2e,adr),e(W6,ndr),e(W6,cW),e(cW,sdr),e(W6,ldr),e(Le,idr),e(Le,H6),e(H6,g2e),e(g2e,ddr),e(H6,cdr),e(H6,fW),e(fW,fdr),e(H6,mdr),e(Le,gdr),e(Le,U6),e(U6,h2e),e(h2e,hdr),e(U6,pdr),e(U6,mW),e(mW,_dr),e(U6,udr),e(go,bdr),e(go,J6),e(J6,vdr),e(J6,p2e),e(p2e,Fdr),e(J6,Tdr),e(J6,_2e),e(_2e,Mdr),e(go,Edr),M(Y6,go,null),b(f,LOe,u),b(f,kd,u),e(kd,Z6),e(Z6,u2e),M(k8,u2e,null),e(kd,Cdr),e(kd,b2e),e(b2e,wdr),b(f,yOe,u),b(f,Wo,u),M(S8,Wo,null),e(Wo,Adr),e(Wo,Sd),e(Sd,Ldr),e(Sd,gW),e(gW,ydr),e(Sd,xdr),e(Sd,hW),e(hW,$dr),e(Sd,kdr),e(Wo,Sdr),e(Wo,R8),e(R8,Rdr),e(R8,v2e),e(v2e,Pdr),e(R8,Bdr),e(Wo,Idr),e(Wo,Et),M(P8,Et,null),e(Et,Ndr),e(Et,F2e),e(F2e,qdr),e(Et,jdr),e(Et,Rd),e(Rd,Ddr),e(Rd,T2e),e(T2e,Gdr),e(Rd,Odr),e(Rd,pW),e(pW,Vdr),e(Rd,Xdr),e(Et,zdr),M(K6,Et,null),e(Wo,Qdr),e(Wo,ho),M(B8,ho,null),e(ho,Wdr),e(ho,M2e),e(M2e,Hdr),e(ho,Udr),e(ho,Ja),e(Ja,Jdr),e(Ja,E2e),e(E2e,Ydr),e(Ja,Zdr),e(Ja,C2e),e(C2e,Kdr),e(Ja,ecr),e(Ja,w2e),e(w2e,ocr),e(Ja,rcr),e(ho,tcr),e(ho,I8),e(I8,eT),e(eT,A2e),e(A2e,acr),e(eT,ncr),e(eT,_W),e(_W,scr),e(eT,lcr),e(I8,icr),e(I8,oT),e(oT,L2e),e(L2e,dcr),e(oT,ccr),e(oT,uW),e(uW,fcr),e(oT,mcr),e(ho,gcr),e(ho,rT),e(rT,hcr),e(rT,y2e),e(y2e,pcr),e(rT,_cr),e(rT,x2e),e(x2e,ucr),e(ho,bcr),M(tT,ho,null),b(f,xOe,u),b(f,Pd,u),e(Pd,aT),e(aT,$2e),M(N8,$2e,null),e(Pd,vcr),e(Pd,k2e),e(k2e,Fcr),b(f,$Oe,u),b(f,Ho,u),M(q8,Ho,null),e(Ho,Tcr),e(Ho,Bd),e(Bd,Mcr),e(Bd,bW),e(bW,Ecr),e(Bd,Ccr),e(Bd,vW),e(vW,wcr),e(Bd,Acr),e(Ho,Lcr),e(Ho,j8),e(j8,ycr),e(j8,S2e),e(S2e,xcr),e(j8,$cr),e(Ho,kcr),e(Ho,Ct),M(D8,Ct,null),e(Ct,Scr),e(Ct,R2e),e(R2e,Rcr),e(Ct,Pcr),e(Ct,Id),e(Id,Bcr),e(Id,P2e),e(P2e,Icr),e(Id,Ncr),e(Id,FW),e(FW,qcr),e(Id,jcr),e(Ct,Dcr),M(nT,Ct,null),e(Ho,Gcr),e(Ho,po),M(G8,po,null),e(po,Ocr),e(po,B2e),e(B2e,Vcr),e(po,Xcr),e(po,Ya),e(Ya,zcr),e(Ya,I2e),e(I2e,Qcr),e(Ya,Wcr),e(Ya,N2e),e(N2e,Hcr),e(Ya,Ucr),e(Ya,q2e),e(q2e,Jcr),e(Ya,Ycr),e(po,Zcr),e(po,ot),e(ot,sT),e(sT,j2e),e(j2e,Kcr),e(sT,efr),e(sT,TW),e(TW,ofr),e(sT,rfr),e(ot,tfr),e(ot,lT),e(lT,D2e),e(D2e,afr),e(lT,nfr),e(lT,MW),e(MW,sfr),e(lT,lfr),e(ot,ifr),e(ot,iT),e(iT,G2e),e(G2e,dfr),e(iT,cfr),e(iT,EW),e(EW,ffr),e(iT,mfr),e(ot,gfr),e(ot,dT),e(dT,O2e),e(O2e,hfr),e(dT,pfr),e(dT,CW),e(CW,_fr),e(dT,ufr),e(ot,bfr),e(ot,cT),e(cT,V2e),e(V2e,vfr),e(cT,Ffr),e(cT,wW),e(wW,Tfr),e(cT,Mfr),e(po,Efr),e(po,fT),e(fT,Cfr),e(fT,X2e),e(X2e,wfr),e(fT,Afr),e(fT,z2e),e(z2e,Lfr),e(po,yfr),M(mT,po,null),b(f,kOe,u),b(f,Nd,u),e(Nd,gT),e(gT,Q2e),M(O8,Q2e,null),e(Nd,xfr),e(Nd,W2e),e(W2e,$fr),b(f,SOe,u),b(f,Uo,u),M(V8,Uo,null),e(Uo,kfr),e(Uo,qd),e(qd,Sfr),e(qd,AW),e(AW,Rfr),e(qd,Pfr),e(qd,LW),e(LW,Bfr),e(qd,Ifr),e(Uo,Nfr),e(Uo,X8),e(X8,qfr),e(X8,H2e),e(H2e,jfr),e(X8,Dfr),e(Uo,Gfr),e(Uo,wt),M(z8,wt,null),e(wt,Ofr),e(wt,U2e),e(U2e,Vfr),e(wt,Xfr),e(wt,jd),e(jd,zfr),e(jd,J2e),e(J2e,Qfr),e(jd,Wfr),e(jd,yW),e(yW,Hfr),e(jd,Ufr),e(wt,Jfr),M(hT,wt,null),e(Uo,Yfr),e(Uo,_o),M(Q8,_o,null),e(_o,Zfr),e(_o,Y2e),e(Y2e,Kfr),e(_o,emr),e(_o,Za),e(Za,omr),e(Za,Z2e),e(Z2e,rmr),e(Za,tmr),e(Za,K2e),e(K2e,amr),e(Za,nmr),e(Za,ebe),e(ebe,smr),e(Za,lmr),e(_o,imr),e(_o,Dd),e(Dd,pT),e(pT,obe),e(obe,dmr),e(pT,cmr),e(pT,xW),e(xW,fmr),e(pT,mmr),e(Dd,gmr),e(Dd,_T),e(_T,rbe),e(rbe,hmr),e(_T,pmr),e(_T,$W),e($W,_mr),e(_T,umr),e(Dd,bmr),e(Dd,uT),e(uT,tbe),e(tbe,vmr),e(uT,Fmr),e(uT,kW),e(kW,Tmr),e(uT,Mmr),e(_o,Emr),e(_o,bT),e(bT,Cmr),e(bT,abe),e(abe,wmr),e(bT,Amr),e(bT,nbe),e(nbe,Lmr),e(_o,ymr),M(vT,_o,null),b(f,ROe,u),b(f,Gd,u),e(Gd,FT),e(FT,sbe),M(W8,sbe,null),e(Gd,xmr),e(Gd,lbe),e(lbe,$mr),b(f,POe,u),b(f,Jo,u),M(H8,Jo,null),e(Jo,kmr),e(Jo,Od),e(Od,Smr),e(Od,SW),e(SW,Rmr),e(Od,Pmr),e(Od,RW),e(RW,Bmr),e(Od,Imr),e(Jo,Nmr),e(Jo,U8),e(U8,qmr),e(U8,ibe),e(ibe,jmr),e(U8,Dmr),e(Jo,Gmr),e(Jo,At),M(J8,At,null),e(At,Omr),e(At,dbe),e(dbe,Vmr),e(At,Xmr),e(At,Vd),e(Vd,zmr),e(Vd,cbe),e(cbe,Qmr),e(Vd,Wmr),e(Vd,PW),e(PW,Hmr),e(Vd,Umr),e(At,Jmr),M(TT,At,null),e(Jo,Ymr),e(Jo,uo),M(Y8,uo,null),e(uo,Zmr),e(uo,fbe),e(fbe,Kmr),e(uo,egr),e(uo,Ka),e(Ka,ogr),e(Ka,mbe),e(mbe,rgr),e(Ka,tgr),e(Ka,gbe),e(gbe,agr),e(Ka,ngr),e(Ka,hbe),e(hbe,sgr),e(Ka,lgr),e(uo,igr),e(uo,Z8),e(Z8,MT),e(MT,pbe),e(pbe,dgr),e(MT,cgr),e(MT,BW),e(BW,fgr),e(MT,mgr),e(Z8,ggr),e(Z8,ET),e(ET,_be),e(_be,hgr),e(ET,pgr),e(ET,IW),e(IW,_gr),e(ET,ugr),e(uo,bgr),e(uo,CT),e(CT,vgr),e(CT,ube),e(ube,Fgr),e(CT,Tgr),e(CT,bbe),e(bbe,Mgr),e(uo,Egr),M(wT,uo,null),b(f,BOe,u),b(f,Xd,u),e(Xd,AT),e(AT,vbe),M(K8,vbe,null),e(Xd,Cgr),e(Xd,Fbe),e(Fbe,wgr),b(f,IOe,u),b(f,Yo,u),M(e9,Yo,null),e(Yo,Agr),e(Yo,zd),e(zd,Lgr),e(zd,NW),e(NW,ygr),e(zd,xgr),e(zd,qW),e(qW,$gr),e(zd,kgr),e(Yo,Sgr),e(Yo,o9),e(o9,Rgr),e(o9,Tbe),e(Tbe,Pgr),e(o9,Bgr),e(Yo,Igr),e(Yo,Lt),M(r9,Lt,null),e(Lt,Ngr),e(Lt,Mbe),e(Mbe,qgr),e(Lt,jgr),e(Lt,Qd),e(Qd,Dgr),e(Qd,Ebe),e(Ebe,Ggr),e(Qd,Ogr),e(Qd,jW),e(jW,Vgr),e(Qd,Xgr),e(Lt,zgr),M(LT,Lt,null),e(Yo,Qgr),e(Yo,bo),M(t9,bo,null),e(bo,Wgr),e(bo,Cbe),e(Cbe,Hgr),e(bo,Ugr),e(bo,en),e(en,Jgr),e(en,wbe),e(wbe,Ygr),e(en,Zgr),e(en,Abe),e(Abe,Kgr),e(en,ehr),e(en,Lbe),e(Lbe,ohr),e(en,rhr),e(bo,thr),e(bo,ybe),e(ybe,yT),e(yT,xbe),e(xbe,ahr),e(yT,nhr),e(yT,DW),e(DW,shr),e(yT,lhr),e(bo,ihr),e(bo,xT),e(xT,dhr),e(xT,$be),e($be,chr),e(xT,fhr),e(xT,kbe),e(kbe,mhr),e(bo,ghr),M($T,bo,null),b(f,NOe,u),b(f,Wd,u),e(Wd,kT),e(kT,Sbe),M(a9,Sbe,null),e(Wd,hhr),e(Wd,Rbe),e(Rbe,phr),b(f,qOe,u),b(f,Zo,u),M(n9,Zo,null),e(Zo,_hr),e(Zo,Hd),e(Hd,uhr),e(Hd,GW),e(GW,bhr),e(Hd,vhr),e(Hd,OW),e(OW,Fhr),e(Hd,Thr),e(Zo,Mhr),e(Zo,s9),e(s9,Ehr),e(s9,Pbe),e(Pbe,Chr),e(s9,whr),e(Zo,Ahr),e(Zo,yt),M(l9,yt,null),e(yt,Lhr),e(yt,Bbe),e(Bbe,yhr),e(yt,xhr),e(yt,Ud),e(Ud,$hr),e(Ud,Ibe),e(Ibe,khr),e(Ud,Shr),e(Ud,VW),e(VW,Rhr),e(Ud,Phr),e(yt,Bhr),M(ST,yt,null),e(Zo,Ihr),e(Zo,vo),M(i9,vo,null),e(vo,Nhr),e(vo,Nbe),e(Nbe,qhr),e(vo,jhr),e(vo,on),e(on,Dhr),e(on,qbe),e(qbe,Ghr),e(on,Ohr),e(on,jbe),e(jbe,Vhr),e(on,Xhr),e(on,Dbe),e(Dbe,zhr),e(on,Qhr),e(vo,Whr),e(vo,rn),e(rn,RT),e(RT,Gbe),e(Gbe,Hhr),e(RT,Uhr),e(RT,XW),e(XW,Jhr),e(RT,Yhr),e(rn,Zhr),e(rn,PT),e(PT,Obe),e(Obe,Khr),e(PT,epr),e(PT,zW),e(zW,opr),e(PT,rpr),e(rn,tpr),e(rn,BT),e(BT,Vbe),e(Vbe,apr),e(BT,npr),e(BT,QW),e(QW,spr),e(BT,lpr),e(rn,ipr),e(rn,IT),e(IT,Xbe),e(Xbe,dpr),e(IT,cpr),e(IT,WW),e(WW,fpr),e(IT,mpr),e(vo,gpr),e(vo,NT),e(NT,hpr),e(NT,zbe),e(zbe,ppr),e(NT,_pr),e(NT,Qbe),e(Qbe,upr),e(vo,bpr),M(qT,vo,null),b(f,jOe,u),b(f,Jd,u),e(Jd,jT),e(jT,Wbe),M(d9,Wbe,null),e(Jd,vpr),e(Jd,Hbe),e(Hbe,Fpr),b(f,DOe,u),b(f,Ko,u),M(c9,Ko,null),e(Ko,Tpr),e(Ko,Yd),e(Yd,Mpr),e(Yd,HW),e(HW,Epr),e(Yd,Cpr),e(Yd,UW),e(UW,wpr),e(Yd,Apr),e(Ko,Lpr),e(Ko,f9),e(f9,ypr),e(f9,Ube),e(Ube,xpr),e(f9,$pr),e(Ko,kpr),e(Ko,xt),M(m9,xt,null),e(xt,Spr),e(xt,Jbe),e(Jbe,Rpr),e(xt,Ppr),e(xt,Zd),e(Zd,Bpr),e(Zd,Ybe),e(Ybe,Ipr),e(Zd,Npr),e(Zd,JW),e(JW,qpr),e(Zd,jpr),e(xt,Dpr),M(DT,xt,null),e(Ko,Gpr),e(Ko,Fo),M(g9,Fo,null),e(Fo,Opr),e(Fo,Zbe),e(Zbe,Vpr),e(Fo,Xpr),e(Fo,tn),e(tn,zpr),e(tn,Kbe),e(Kbe,Qpr),e(tn,Wpr),e(tn,eve),e(eve,Hpr),e(tn,Upr),e(tn,ove),e(ove,Jpr),e(tn,Ypr),e(Fo,Zpr),e(Fo,rve),e(rve,GT),e(GT,tve),e(tve,Kpr),e(GT,e_r),e(GT,YW),e(YW,o_r),e(GT,r_r),e(Fo,t_r),e(Fo,OT),e(OT,a_r),e(OT,ave),e(ave,n_r),e(OT,s_r),e(OT,nve),e(nve,l_r),e(Fo,i_r),M(VT,Fo,null),b(f,GOe,u),b(f,Kd,u),e(Kd,XT),e(XT,sve),M(h9,sve,null),e(Kd,d_r),e(Kd,lve),e(lve,c_r),b(f,OOe,u),b(f,er,u),M(p9,er,null),e(er,f_r),e(er,ec),e(ec,m_r),e(ec,ZW),e(ZW,g_r),e(ec,h_r),e(ec,KW),e(KW,p_r),e(ec,__r),e(er,u_r),e(er,_9),e(_9,b_r),e(_9,ive),e(ive,v_r),e(_9,F_r),e(er,T_r),e(er,$t),M(u9,$t,null),e($t,M_r),e($t,dve),e(dve,E_r),e($t,C_r),e($t,oc),e(oc,w_r),e(oc,cve),e(cve,A_r),e(oc,L_r),e(oc,eH),e(eH,y_r),e(oc,x_r),e($t,$_r),M(zT,$t,null),e(er,k_r),e(er,yr),M(b9,yr,null),e(yr,S_r),e(yr,fve),e(fve,R_r),e(yr,P_r),e(yr,an),e(an,B_r),e(an,mve),e(mve,I_r),e(an,N_r),e(an,gve),e(gve,q_r),e(an,j_r),e(an,hve),e(hve,D_r),e(an,G_r),e(yr,O_r),e(yr,j),e(j,QT),e(QT,pve),e(pve,V_r),e(QT,X_r),e(QT,oH),e(oH,z_r),e(QT,Q_r),e(j,W_r),e(j,WT),e(WT,_ve),e(_ve,H_r),e(WT,U_r),e(WT,rH),e(rH,J_r),e(WT,Y_r),e(j,Z_r),e(j,HT),e(HT,uve),e(uve,K_r),e(HT,eur),e(HT,tH),e(tH,our),e(HT,rur),e(j,tur),e(j,UT),e(UT,bve),e(bve,aur),e(UT,nur),e(UT,aH),e(aH,sur),e(UT,lur),e(j,iur),e(j,JT),e(JT,vve),e(vve,dur),e(JT,cur),e(JT,nH),e(nH,fur),e(JT,mur),e(j,gur),e(j,YT),e(YT,Fve),e(Fve,hur),e(YT,pur),e(YT,sH),e(sH,_ur),e(YT,uur),e(j,bur),e(j,ZT),e(ZT,Tve),e(Tve,vur),e(ZT,Fur),e(ZT,lH),e(lH,Tur),e(ZT,Mur),e(j,Eur),e(j,KT),e(KT,Mve),e(Mve,Cur),e(KT,wur),e(KT,iH),e(iH,Aur),e(KT,Lur),e(j,yur),e(j,eM),e(eM,Eve),e(Eve,xur),e(eM,$ur),e(eM,dH),e(dH,kur),e(eM,Sur),e(j,Rur),e(j,oM),e(oM,Cve),e(Cve,Pur),e(oM,Bur),e(oM,cH),e(cH,Iur),e(oM,Nur),e(j,qur),e(j,rM),e(rM,wve),e(wve,jur),e(rM,Dur),e(rM,fH),e(fH,Gur),e(rM,Our),e(j,Vur),e(j,tM),e(tM,Ave),e(Ave,Xur),e(tM,zur),e(tM,mH),e(mH,Qur),e(tM,Wur),e(j,Hur),e(j,aM),e(aM,Lve),e(Lve,Uur),e(aM,Jur),e(aM,gH),e(gH,Yur),e(aM,Zur),e(j,Kur),e(j,nM),e(nM,yve),e(yve,e7r),e(nM,o7r),e(nM,hH),e(hH,r7r),e(nM,t7r),e(j,a7r),e(j,sM),e(sM,xve),e(xve,n7r),e(sM,s7r),e(sM,pH),e(pH,l7r),e(sM,i7r),e(j,d7r),e(j,lM),e(lM,$ve),e($ve,c7r),e(lM,f7r),e(lM,_H),e(_H,m7r),e(lM,g7r),e(j,h7r),e(j,iM),e(iM,kve),e(kve,p7r),e(iM,_7r),e(iM,uH),e(uH,u7r),e(iM,b7r),e(j,v7r),e(j,zs),e(zs,Sve),e(Sve,F7r),e(zs,T7r),e(zs,bH),e(bH,M7r),e(zs,E7r),e(zs,vH),e(vH,C7r),e(zs,w7r),e(j,A7r),e(j,dM),e(dM,Rve),e(Rve,L7r),e(dM,y7r),e(dM,FH),e(FH,x7r),e(dM,$7r),e(j,k7r),e(j,cM),e(cM,Pve),e(Pve,S7r),e(cM,R7r),e(cM,TH),e(TH,P7r),e(cM,B7r),e(j,I7r),e(j,fM),e(fM,Bve),e(Bve,N7r),e(fM,q7r),e(fM,MH),e(MH,j7r),e(fM,D7r),e(j,G7r),e(j,mM),e(mM,Ive),e(Ive,O7r),e(mM,V7r),e(mM,EH),e(EH,X7r),e(mM,z7r),e(j,Q7r),e(j,gM),e(gM,Nve),e(Nve,W7r),e(gM,H7r),e(gM,CH),e(CH,U7r),e(gM,J7r),e(j,Y7r),e(j,hM),e(hM,qve),e(qve,Z7r),e(hM,K7r),e(hM,wH),e(wH,e1r),e(hM,o1r),e(j,r1r),e(j,pM),e(pM,jve),e(jve,t1r),e(pM,a1r),e(pM,AH),e(AH,n1r),e(pM,s1r),e(j,l1r),e(j,_M),e(_M,Dve),e(Dve,i1r),e(_M,d1r),e(_M,LH),e(LH,c1r),e(_M,f1r),e(j,m1r),e(j,uM),e(uM,Gve),e(Gve,g1r),e(uM,h1r),e(uM,yH),e(yH,p1r),e(uM,_1r),e(j,u1r),e(j,bM),e(bM,Ove),e(Ove,b1r),e(bM,v1r),e(bM,xH),e(xH,F1r),e(bM,T1r),e(j,M1r),e(j,vM),e(vM,Vve),e(Vve,E1r),e(vM,C1r),e(vM,$H),e($H,w1r),e(vM,A1r),e(j,L1r),e(j,FM),e(FM,Xve),e(Xve,y1r),e(FM,x1r),e(FM,kH),e(kH,$1r),e(FM,k1r),e(j,S1r),e(j,TM),e(TM,zve),e(zve,R1r),e(TM,P1r),e(TM,SH),e(SH,B1r),e(TM,I1r),e(j,N1r),e(j,MM),e(MM,Qve),e(Qve,q1r),e(MM,j1r),e(MM,RH),e(RH,D1r),e(MM,G1r),e(j,O1r),e(j,EM),e(EM,Wve),e(Wve,V1r),e(EM,X1r),e(EM,PH),e(PH,z1r),e(EM,Q1r),e(j,W1r),e(j,CM),e(CM,Hve),e(Hve,H1r),e(CM,U1r),e(CM,BH),e(BH,J1r),e(CM,Y1r),e(j,Z1r),e(j,wM),e(wM,Uve),e(Uve,K1r),e(wM,e2r),e(wM,IH),e(IH,o2r),e(wM,r2r),e(j,t2r),e(j,AM),e(AM,Jve),e(Jve,a2r),e(AM,n2r),e(AM,NH),e(NH,s2r),e(AM,l2r),e(j,i2r),e(j,LM),e(LM,Yve),e(Yve,d2r),e(LM,c2r),e(LM,qH),e(qH,f2r),e(LM,m2r),e(j,g2r),e(j,yM),e(yM,Zve),e(Zve,h2r),e(yM,p2r),e(yM,jH),e(jH,_2r),e(yM,u2r),e(j,b2r),e(j,xM),e(xM,Kve),e(Kve,v2r),e(xM,F2r),e(xM,DH),e(DH,T2r),e(xM,M2r),e(j,E2r),e(j,$M),e($M,eFe),e(eFe,C2r),e($M,w2r),e($M,GH),e(GH,A2r),e($M,L2r),e(j,y2r),e(j,kM),e(kM,oFe),e(oFe,x2r),e(kM,$2r),e(kM,OH),e(OH,k2r),e(kM,S2r),e(j,R2r),e(j,SM),e(SM,rFe),e(rFe,P2r),e(SM,B2r),e(SM,VH),e(VH,I2r),e(SM,N2r),e(j,q2r),e(j,RM),e(RM,tFe),e(tFe,j2r),e(RM,D2r),e(RM,XH),e(XH,G2r),e(RM,O2r),e(j,V2r),e(j,PM),e(PM,aFe),e(aFe,X2r),e(PM,z2r),e(PM,zH),e(zH,Q2r),e(PM,W2r),e(j,H2r),e(j,BM),e(BM,nFe),e(nFe,U2r),e(BM,J2r),e(BM,QH),e(QH,Y2r),e(BM,Z2r),e(j,K2r),e(j,IM),e(IM,sFe),e(sFe,ebr),e(IM,obr),e(IM,WH),e(WH,rbr),e(IM,tbr),e(j,abr),e(j,NM),e(NM,lFe),e(lFe,nbr),e(NM,sbr),e(NM,HH),e(HH,lbr),e(NM,ibr),e(yr,dbr),M(qM,yr,null),b(f,VOe,u),b(f,rc,u),e(rc,jM),e(jM,iFe),M(v9,iFe,null),e(rc,cbr),e(rc,dFe),e(dFe,fbr),b(f,XOe,u),b(f,or,u),M(F9,or,null),e(or,mbr),e(or,tc),e(tc,gbr),e(tc,UH),e(UH,hbr),e(tc,pbr),e(tc,JH),e(JH,_br),e(tc,ubr),e(or,bbr),e(or,T9),e(T9,vbr),e(T9,cFe),e(cFe,Fbr),e(T9,Tbr),e(or,Mbr),e(or,kt),M(M9,kt,null),e(kt,Ebr),e(kt,fFe),e(fFe,Cbr),e(kt,wbr),e(kt,ac),e(ac,Abr),e(ac,mFe),e(mFe,Lbr),e(ac,ybr),e(ac,YH),e(YH,xbr),e(ac,$br),e(kt,kbr),M(DM,kt,null),e(or,Sbr),e(or,xr),M(E9,xr,null),e(xr,Rbr),e(xr,gFe),e(gFe,Pbr),e(xr,Bbr),e(xr,nn),e(nn,Ibr),e(nn,hFe),e(hFe,Nbr),e(nn,qbr),e(nn,pFe),e(pFe,jbr),e(nn,Dbr),e(nn,_Fe),e(_Fe,Gbr),e(nn,Obr),e(xr,Vbr),e(xr,se),e(se,GM),e(GM,uFe),e(uFe,Xbr),e(GM,zbr),e(GM,ZH),e(ZH,Qbr),e(GM,Wbr),e(se,Hbr),e(se,OM),e(OM,bFe),e(bFe,Ubr),e(OM,Jbr),e(OM,KH),e(KH,Ybr),e(OM,Zbr),e(se,Kbr),e(se,VM),e(VM,vFe),e(vFe,evr),e(VM,ovr),e(VM,eU),e(eU,rvr),e(VM,tvr),e(se,avr),e(se,XM),e(XM,FFe),e(FFe,nvr),e(XM,svr),e(XM,oU),e(oU,lvr),e(XM,ivr),e(se,dvr),e(se,zM),e(zM,TFe),e(TFe,cvr),e(zM,fvr),e(zM,rU),e(rU,mvr),e(zM,gvr),e(se,hvr),e(se,QM),e(QM,MFe),e(MFe,pvr),e(QM,_vr),e(QM,tU),e(tU,uvr),e(QM,bvr),e(se,vvr),e(se,WM),e(WM,EFe),e(EFe,Fvr),e(WM,Tvr),e(WM,aU),e(aU,Mvr),e(WM,Evr),e(se,Cvr),e(se,HM),e(HM,CFe),e(CFe,wvr),e(HM,Avr),e(HM,nU),e(nU,Lvr),e(HM,yvr),e(se,xvr),e(se,UM),e(UM,wFe),e(wFe,$vr),e(UM,kvr),e(UM,sU),e(sU,Svr),e(UM,Rvr),e(se,Pvr),e(se,JM),e(JM,AFe),e(AFe,Bvr),e(JM,Ivr),e(JM,lU),e(lU,Nvr),e(JM,qvr),e(se,jvr),e(se,YM),e(YM,LFe),e(LFe,Dvr),e(YM,Gvr),e(YM,iU),e(iU,Ovr),e(YM,Vvr),e(se,Xvr),e(se,ZM),e(ZM,yFe),e(yFe,zvr),e(ZM,Qvr),e(ZM,dU),e(dU,Wvr),e(ZM,Hvr),e(se,Uvr),e(se,KM),e(KM,xFe),e(xFe,Jvr),e(KM,Yvr),e(KM,cU),e(cU,Zvr),e(KM,Kvr),e(se,eFr),e(se,eE),e(eE,$Fe),e($Fe,oFr),e(eE,rFr),e(eE,fU),e(fU,tFr),e(eE,aFr),e(se,nFr),e(se,oE),e(oE,kFe),e(kFe,sFr),e(oE,lFr),e(oE,mU),e(mU,iFr),e(oE,dFr),e(se,cFr),e(se,rE),e(rE,SFe),e(SFe,fFr),e(rE,mFr),e(rE,gU),e(gU,gFr),e(rE,hFr),e(se,pFr),e(se,tE),e(tE,RFe),e(RFe,_Fr),e(tE,uFr),e(tE,hU),e(hU,bFr),e(tE,vFr),e(se,FFr),e(se,aE),e(aE,PFe),e(PFe,TFr),e(aE,MFr),e(aE,pU),e(pU,EFr),e(aE,CFr),e(se,wFr),e(se,nE),e(nE,BFe),e(BFe,AFr),e(nE,LFr),e(nE,_U),e(_U,yFr),e(nE,xFr),e(se,$Fr),e(se,sE),e(sE,IFe),e(IFe,kFr),e(sE,SFr),e(sE,uU),e(uU,RFr),e(sE,PFr),e(se,BFr),e(se,lE),e(lE,NFe),e(NFe,IFr),e(lE,NFr),e(lE,bU),e(bU,qFr),e(lE,jFr),e(se,DFr),e(se,iE),e(iE,qFe),e(qFe,GFr),e(iE,OFr),e(iE,vU),e(vU,VFr),e(iE,XFr),e(se,zFr),e(se,dE),e(dE,jFe),e(jFe,QFr),e(dE,WFr),e(dE,FU),e(FU,HFr),e(dE,UFr),e(xr,JFr),M(cE,xr,null),b(f,zOe,u),b(f,nc,u),e(nc,fE),e(fE,DFe),M(C9,DFe,null),e(nc,YFr),e(nc,GFe),e(GFe,ZFr),b(f,QOe,u),b(f,rr,u),M(w9,rr,null),e(rr,KFr),e(rr,sc),e(sc,e6r),e(sc,TU),e(TU,o6r),e(sc,r6r),e(sc,MU),e(MU,t6r),e(sc,a6r),e(rr,n6r),e(rr,A9),e(A9,s6r),e(A9,OFe),e(OFe,l6r),e(A9,i6r),e(rr,d6r),e(rr,St),M(L9,St,null),e(St,c6r),e(St,VFe),e(VFe,f6r),e(St,m6r),e(St,lc),e(lc,g6r),e(lc,XFe),e(XFe,h6r),e(lc,p6r),e(lc,EU),e(EU,_6r),e(lc,u6r),e(St,b6r),M(mE,St,null),e(rr,v6r),e(rr,$r),M(y9,$r,null),e($r,F6r),e($r,zFe),e(zFe,T6r),e($r,M6r),e($r,sn),e(sn,E6r),e(sn,QFe),e(QFe,C6r),e(sn,w6r),e(sn,WFe),e(WFe,A6r),e(sn,L6r),e(sn,HFe),e(HFe,y6r),e(sn,x6r),e($r,$6r),e($r,Me),e(Me,gE),e(gE,UFe),e(UFe,k6r),e(gE,S6r),e(gE,CU),e(CU,R6r),e(gE,P6r),e(Me,B6r),e(Me,hE),e(hE,JFe),e(JFe,I6r),e(hE,N6r),e(hE,wU),e(wU,q6r),e(hE,j6r),e(Me,D6r),e(Me,pE),e(pE,YFe),e(YFe,G6r),e(pE,O6r),e(pE,AU),e(AU,V6r),e(pE,X6r),e(Me,z6r),e(Me,_E),e(_E,ZFe),e(ZFe,Q6r),e(_E,W6r),e(_E,LU),e(LU,H6r),e(_E,U6r),e(Me,J6r),e(Me,uE),e(uE,KFe),e(KFe,Y6r),e(uE,Z6r),e(uE,yU),e(yU,K6r),e(uE,eTr),e(Me,oTr),e(Me,bE),e(bE,e6e),e(e6e,rTr),e(bE,tTr),e(bE,xU),e(xU,aTr),e(bE,nTr),e(Me,sTr),e(Me,vE),e(vE,o6e),e(o6e,lTr),e(vE,iTr),e(vE,$U),e($U,dTr),e(vE,cTr),e(Me,fTr),e(Me,FE),e(FE,r6e),e(r6e,mTr),e(FE,gTr),e(FE,kU),e(kU,hTr),e(FE,pTr),e(Me,_Tr),e(Me,TE),e(TE,t6e),e(t6e,uTr),e(TE,bTr),e(TE,SU),e(SU,vTr),e(TE,FTr),e(Me,TTr),e(Me,ME),e(ME,a6e),e(a6e,MTr),e(ME,ETr),e(ME,RU),e(RU,CTr),e(ME,wTr),e(Me,ATr),e(Me,EE),e(EE,n6e),e(n6e,LTr),e(EE,yTr),e(EE,PU),e(PU,xTr),e(EE,$Tr),e(Me,kTr),e(Me,CE),e(CE,s6e),e(s6e,STr),e(CE,RTr),e(CE,BU),e(BU,PTr),e(CE,BTr),e(Me,ITr),e(Me,wE),e(wE,l6e),e(l6e,NTr),e(wE,qTr),e(wE,IU),e(IU,jTr),e(wE,DTr),e($r,GTr),M(AE,$r,null),b(f,WOe,u),b(f,ic,u),e(ic,LE),e(LE,i6e),M(x9,i6e,null),e(ic,OTr),e(ic,d6e),e(d6e,VTr),b(f,HOe,u),b(f,tr,u),M($9,tr,null),e(tr,XTr),e(tr,dc),e(dc,zTr),e(dc,NU),e(NU,QTr),e(dc,WTr),e(dc,qU),e(qU,HTr),e(dc,UTr),e(tr,JTr),e(tr,k9),e(k9,YTr),e(k9,c6e),e(c6e,ZTr),e(k9,KTr),e(tr,eMr),e(tr,Rt),M(S9,Rt,null),e(Rt,oMr),e(Rt,f6e),e(f6e,rMr),e(Rt,tMr),e(Rt,cc),e(cc,aMr),e(cc,m6e),e(m6e,nMr),e(cc,sMr),e(cc,jU),e(jU,lMr),e(cc,iMr),e(Rt,dMr),M(yE,Rt,null),e(tr,cMr),e(tr,kr),M(R9,kr,null),e(kr,fMr),e(kr,g6e),e(g6e,mMr),e(kr,gMr),e(kr,ln),e(ln,hMr),e(ln,h6e),e(h6e,pMr),e(ln,_Mr),e(ln,p6e),e(p6e,uMr),e(ln,bMr),e(ln,_6e),e(_6e,vMr),e(ln,FMr),e(kr,TMr),e(kr,dn),e(dn,xE),e(xE,u6e),e(u6e,MMr),e(xE,EMr),e(xE,DU),e(DU,CMr),e(xE,wMr),e(dn,AMr),e(dn,$E),e($E,b6e),e(b6e,LMr),e($E,yMr),e($E,GU),e(GU,xMr),e($E,$Mr),e(dn,kMr),e(dn,kE),e(kE,v6e),e(v6e,SMr),e(kE,RMr),e(kE,OU),e(OU,PMr),e(kE,BMr),e(dn,IMr),e(dn,SE),e(SE,F6e),e(F6e,NMr),e(SE,qMr),e(SE,VU),e(VU,jMr),e(SE,DMr),e(kr,GMr),M(RE,kr,null),b(f,UOe,u),b(f,fc,u),e(fc,PE),e(PE,T6e),M(P9,T6e,null),e(fc,OMr),e(fc,M6e),e(M6e,VMr),b(f,JOe,u),b(f,ar,u),M(B9,ar,null),e(ar,XMr),e(ar,mc),e(mc,zMr),e(mc,XU),e(XU,QMr),e(mc,WMr),e(mc,zU),e(zU,HMr),e(mc,UMr),e(ar,JMr),e(ar,I9),e(I9,YMr),e(I9,E6e),e(E6e,ZMr),e(I9,KMr),e(ar,eEr),e(ar,Pt),M(N9,Pt,null),e(Pt,oEr),e(Pt,C6e),e(C6e,rEr),e(Pt,tEr),e(Pt,gc),e(gc,aEr),e(gc,w6e),e(w6e,nEr),e(gc,sEr),e(gc,QU),e(QU,lEr),e(gc,iEr),e(Pt,dEr),M(BE,Pt,null),e(ar,cEr),e(ar,Sr),M(q9,Sr,null),e(Sr,fEr),e(Sr,A6e),e(A6e,mEr),e(Sr,gEr),e(Sr,cn),e(cn,hEr),e(cn,L6e),e(L6e,pEr),e(cn,_Er),e(cn,y6e),e(y6e,uEr),e(cn,bEr),e(cn,x6e),e(x6e,vEr),e(cn,FEr),e(Sr,TEr),e(Sr,ie),e(ie,IE),e(IE,$6e),e($6e,MEr),e(IE,EEr),e(IE,WU),e(WU,CEr),e(IE,wEr),e(ie,AEr),e(ie,NE),e(NE,k6e),e(k6e,LEr),e(NE,yEr),e(NE,HU),e(HU,xEr),e(NE,$Er),e(ie,kEr),e(ie,qE),e(qE,S6e),e(S6e,SEr),e(qE,REr),e(qE,UU),e(UU,PEr),e(qE,BEr),e(ie,IEr),e(ie,jE),e(jE,R6e),e(R6e,NEr),e(jE,qEr),e(jE,JU),e(JU,jEr),e(jE,DEr),e(ie,GEr),e(ie,DE),e(DE,P6e),e(P6e,OEr),e(DE,VEr),e(DE,YU),e(YU,XEr),e(DE,zEr),e(ie,QEr),e(ie,GE),e(GE,B6e),e(B6e,WEr),e(GE,HEr),e(GE,ZU),e(ZU,UEr),e(GE,JEr),e(ie,YEr),e(ie,OE),e(OE,I6e),e(I6e,ZEr),e(OE,KEr),e(OE,KU),e(KU,e4r),e(OE,o4r),e(ie,r4r),e(ie,VE),e(VE,N6e),e(N6e,t4r),e(VE,a4r),e(VE,eJ),e(eJ,n4r),e(VE,s4r),e(ie,l4r),e(ie,XE),e(XE,q6e),e(q6e,i4r),e(XE,d4r),e(XE,oJ),e(oJ,c4r),e(XE,f4r),e(ie,m4r),e(ie,zE),e(zE,j6e),e(j6e,g4r),e(zE,h4r),e(zE,rJ),e(rJ,p4r),e(zE,_4r),e(ie,u4r),e(ie,QE),e(QE,D6e),e(D6e,b4r),e(QE,v4r),e(QE,tJ),e(tJ,F4r),e(QE,T4r),e(ie,M4r),e(ie,WE),e(WE,G6e),e(G6e,E4r),e(WE,C4r),e(WE,aJ),e(aJ,w4r),e(WE,A4r),e(ie,L4r),e(ie,HE),e(HE,O6e),e(O6e,y4r),e(HE,x4r),e(HE,nJ),e(nJ,$4r),e(HE,k4r),e(ie,S4r),e(ie,UE),e(UE,V6e),e(V6e,R4r),e(UE,P4r),e(UE,sJ),e(sJ,B4r),e(UE,I4r),e(ie,N4r),e(ie,JE),e(JE,X6e),e(X6e,q4r),e(JE,j4r),e(JE,lJ),e(lJ,D4r),e(JE,G4r),e(ie,O4r),e(ie,YE),e(YE,z6e),e(z6e,V4r),e(YE,X4r),e(YE,iJ),e(iJ,z4r),e(YE,Q4r),e(ie,W4r),e(ie,ZE),e(ZE,Q6e),e(Q6e,H4r),e(ZE,U4r),e(ZE,dJ),e(dJ,J4r),e(ZE,Y4r),e(ie,Z4r),e(ie,KE),e(KE,W6e),e(W6e,K4r),e(KE,eCr),e(KE,cJ),e(cJ,oCr),e(KE,rCr),e(ie,tCr),e(ie,e4),e(e4,H6e),e(H6e,aCr),e(e4,nCr),e(e4,fJ),e(fJ,sCr),e(e4,lCr),e(ie,iCr),e(ie,o4),e(o4,U6e),e(U6e,dCr),e(o4,cCr),e(o4,mJ),e(mJ,fCr),e(o4,mCr),e(Sr,gCr),M(r4,Sr,null),b(f,YOe,u),b(f,hc,u),e(hc,t4),e(t4,J6e),M(j9,J6e,null),e(hc,hCr),e(hc,Y6e),e(Y6e,pCr),b(f,ZOe,u),b(f,nr,u),M(D9,nr,null),e(nr,_Cr),e(nr,pc),e(pc,uCr),e(pc,gJ),e(gJ,bCr),e(pc,vCr),e(pc,hJ),e(hJ,FCr),e(pc,TCr),e(nr,MCr),e(nr,G9),e(G9,ECr),e(G9,Z6e),e(Z6e,CCr),e(G9,wCr),e(nr,ACr),e(nr,Bt),M(O9,Bt,null),e(Bt,LCr),e(Bt,K6e),e(K6e,yCr),e(Bt,xCr),e(Bt,_c),e(_c,$Cr),e(_c,eTe),e(eTe,kCr),e(_c,SCr),e(_c,pJ),e(pJ,RCr),e(_c,PCr),e(Bt,BCr),M(a4,Bt,null),e(nr,ICr),e(nr,Rr),M(V9,Rr,null),e(Rr,NCr),e(Rr,oTe),e(oTe,qCr),e(Rr,jCr),e(Rr,fn),e(fn,DCr),e(fn,rTe),e(rTe,GCr),e(fn,OCr),e(fn,tTe),e(tTe,VCr),e(fn,XCr),e(fn,aTe),e(aTe,zCr),e(fn,QCr),e(Rr,WCr),e(Rr,ye),e(ye,n4),e(n4,nTe),e(nTe,HCr),e(n4,UCr),e(n4,_J),e(_J,JCr),e(n4,YCr),e(ye,ZCr),e(ye,s4),e(s4,sTe),e(sTe,KCr),e(s4,e5r),e(s4,uJ),e(uJ,o5r),e(s4,r5r),e(ye,t5r),e(ye,l4),e(l4,lTe),e(lTe,a5r),e(l4,n5r),e(l4,bJ),e(bJ,s5r),e(l4,l5r),e(ye,i5r),e(ye,i4),e(i4,iTe),e(iTe,d5r),e(i4,c5r),e(i4,vJ),e(vJ,f5r),e(i4,m5r),e(ye,g5r),e(ye,d4),e(d4,dTe),e(dTe,h5r),e(d4,p5r),e(d4,FJ),e(FJ,_5r),e(d4,u5r),e(ye,b5r),e(ye,c4),e(c4,cTe),e(cTe,v5r),e(c4,F5r),e(c4,TJ),e(TJ,T5r),e(c4,M5r),e(ye,E5r),e(ye,f4),e(f4,fTe),e(fTe,C5r),e(f4,w5r),e(f4,MJ),e(MJ,A5r),e(f4,L5r),e(ye,y5r),e(ye,m4),e(m4,mTe),e(mTe,x5r),e(m4,$5r),e(m4,EJ),e(EJ,k5r),e(m4,S5r),e(ye,R5r),e(ye,g4),e(g4,gTe),e(gTe,P5r),e(g4,B5r),e(g4,CJ),e(CJ,I5r),e(g4,N5r),e(ye,q5r),e(ye,h4),e(h4,hTe),e(hTe,j5r),e(h4,D5r),e(h4,wJ),e(wJ,G5r),e(h4,O5r),e(Rr,V5r),M(p4,Rr,null),b(f,KOe,u),b(f,uc,u),e(uc,_4),e(_4,pTe),M(X9,pTe,null),e(uc,X5r),e(uc,_Te),e(_Te,z5r),b(f,eVe,u),b(f,sr,u),M(z9,sr,null),e(sr,Q5r),e(sr,bc),e(bc,W5r),e(bc,AJ),e(AJ,H5r),e(bc,U5r),e(bc,LJ),e(LJ,J5r),e(bc,Y5r),e(sr,Z5r),e(sr,Q9),e(Q9,K5r),e(Q9,uTe),e(uTe,e3r),e(Q9,o3r),e(sr,r3r),e(sr,It),M(W9,It,null),e(It,t3r),e(It,bTe),e(bTe,a3r),e(It,n3r),e(It,vc),e(vc,s3r),e(vc,vTe),e(vTe,l3r),e(vc,i3r),e(vc,yJ),e(yJ,d3r),e(vc,c3r),e(It,f3r),M(u4,It,null),e(sr,m3r),e(sr,Pr),M(H9,Pr,null),e(Pr,g3r),e(Pr,FTe),e(FTe,h3r),e(Pr,p3r),e(Pr,mn),e(mn,_3r),e(mn,TTe),e(TTe,u3r),e(mn,b3r),e(mn,MTe),e(MTe,v3r),e(mn,F3r),e(mn,ETe),e(ETe,T3r),e(mn,M3r),e(Pr,E3r),e(Pr,te),e(te,b4),e(b4,CTe),e(CTe,C3r),e(b4,w3r),e(b4,xJ),e(xJ,A3r),e(b4,L3r),e(te,y3r),e(te,v4),e(v4,wTe),e(wTe,x3r),e(v4,$3r),e(v4,$J),e($J,k3r),e(v4,S3r),e(te,R3r),e(te,F4),e(F4,ATe),e(ATe,P3r),e(F4,B3r),e(F4,kJ),e(kJ,I3r),e(F4,N3r),e(te,q3r),e(te,T4),e(T4,LTe),e(LTe,j3r),e(T4,D3r),e(T4,SJ),e(SJ,G3r),e(T4,O3r),e(te,V3r),e(te,M4),e(M4,yTe),e(yTe,X3r),e(M4,z3r),e(M4,RJ),e(RJ,Q3r),e(M4,W3r),e(te,H3r),e(te,E4),e(E4,xTe),e(xTe,U3r),e(E4,J3r),e(E4,PJ),e(PJ,Y3r),e(E4,Z3r),e(te,K3r),e(te,C4),e(C4,$Te),e($Te,e0r),e(C4,o0r),e(C4,BJ),e(BJ,r0r),e(C4,t0r),e(te,a0r),e(te,w4),e(w4,kTe),e(kTe,n0r),e(w4,s0r),e(w4,IJ),e(IJ,l0r),e(w4,i0r),e(te,d0r),e(te,A4),e(A4,STe),e(STe,c0r),e(A4,f0r),e(A4,NJ),e(NJ,m0r),e(A4,g0r),e(te,h0r),e(te,L4),e(L4,RTe),e(RTe,p0r),e(L4,_0r),e(L4,qJ),e(qJ,u0r),e(L4,b0r),e(te,v0r),e(te,y4),e(y4,PTe),e(PTe,F0r),e(y4,T0r),e(y4,jJ),e(jJ,M0r),e(y4,E0r),e(te,C0r),e(te,x4),e(x4,BTe),e(BTe,w0r),e(x4,A0r),e(x4,DJ),e(DJ,L0r),e(x4,y0r),e(te,x0r),e(te,$4),e($4,ITe),e(ITe,$0r),e($4,k0r),e($4,GJ),e(GJ,S0r),e($4,R0r),e(te,P0r),e(te,k4),e(k4,NTe),e(NTe,B0r),e(k4,I0r),e(k4,OJ),e(OJ,N0r),e(k4,q0r),e(te,j0r),e(te,S4),e(S4,qTe),e(qTe,D0r),e(S4,G0r),e(S4,VJ),e(VJ,O0r),e(S4,V0r),e(te,X0r),e(te,R4),e(R4,jTe),e(jTe,z0r),e(R4,Q0r),e(R4,XJ),e(XJ,W0r),e(R4,H0r),e(te,U0r),e(te,P4),e(P4,DTe),e(DTe,J0r),e(P4,Y0r),e(P4,zJ),e(zJ,Z0r),e(P4,K0r),e(te,ewr),e(te,B4),e(B4,GTe),e(GTe,owr),e(B4,rwr),e(B4,QJ),e(QJ,twr),e(B4,awr),e(te,nwr),e(te,I4),e(I4,OTe),e(OTe,swr),e(I4,lwr),e(I4,WJ),e(WJ,iwr),e(I4,dwr),e(te,cwr),e(te,N4),e(N4,VTe),e(VTe,fwr),e(N4,mwr),e(N4,HJ),e(HJ,gwr),e(N4,hwr),e(te,pwr),e(te,q4),e(q4,XTe),e(XTe,_wr),e(q4,uwr),e(q4,UJ),e(UJ,bwr),e(q4,vwr),e(te,Fwr),e(te,j4),e(j4,zTe),e(zTe,Twr),e(j4,Mwr),e(j4,JJ),e(JJ,Ewr),e(j4,Cwr),e(te,wwr),e(te,D4),e(D4,QTe),e(QTe,Awr),e(D4,Lwr),e(D4,YJ),e(YJ,ywr),e(D4,xwr),e(te,$wr),e(te,G4),e(G4,WTe),e(WTe,kwr),e(G4,Swr),e(G4,ZJ),e(ZJ,Rwr),e(G4,Pwr),e(te,Bwr),e(te,O4),e(O4,HTe),e(HTe,Iwr),e(O4,Nwr),e(O4,KJ),e(KJ,qwr),e(O4,jwr),e(te,Dwr),e(te,V4),e(V4,UTe),e(UTe,Gwr),e(V4,Owr),e(V4,eY),e(eY,Vwr),e(V4,Xwr),e(Pr,zwr),M(X4,Pr,null),b(f,oVe,u),b(f,Fc,u),e(Fc,z4),e(z4,JTe),M(U9,JTe,null),e(Fc,Qwr),e(Fc,YTe),e(YTe,Wwr),b(f,rVe,u),b(f,lr,u),M(J9,lr,null),e(lr,Hwr),e(lr,Tc),e(Tc,Uwr),e(Tc,oY),e(oY,Jwr),e(Tc,Ywr),e(Tc,rY),e(rY,Zwr),e(Tc,Kwr),e(lr,eAr),e(lr,Y9),e(Y9,oAr),e(Y9,ZTe),e(ZTe,rAr),e(Y9,tAr),e(lr,aAr),e(lr,Nt),M(Z9,Nt,null),e(Nt,nAr),e(Nt,KTe),e(KTe,sAr),e(Nt,lAr),e(Nt,Mc),e(Mc,iAr),e(Mc,eMe),e(eMe,dAr),e(Mc,cAr),e(Mc,tY),e(tY,fAr),e(Mc,mAr),e(Nt,gAr),M(Q4,Nt,null),e(lr,hAr),e(lr,Br),M(K9,Br,null),e(Br,pAr),e(Br,oMe),e(oMe,_Ar),e(Br,uAr),e(Br,gn),e(gn,bAr),e(gn,rMe),e(rMe,vAr),e(gn,FAr),e(gn,tMe),e(tMe,TAr),e(gn,MAr),e(gn,aMe),e(aMe,EAr),e(gn,CAr),e(Br,wAr),e(Br,_e),e(_e,W4),e(W4,nMe),e(nMe,AAr),e(W4,LAr),e(W4,aY),e(aY,yAr),e(W4,xAr),e(_e,$Ar),e(_e,H4),e(H4,sMe),e(sMe,kAr),e(H4,SAr),e(H4,nY),e(nY,RAr),e(H4,PAr),e(_e,BAr),e(_e,U4),e(U4,lMe),e(lMe,IAr),e(U4,NAr),e(U4,sY),e(sY,qAr),e(U4,jAr),e(_e,DAr),e(_e,J4),e(J4,iMe),e(iMe,GAr),e(J4,OAr),e(J4,lY),e(lY,VAr),e(J4,XAr),e(_e,zAr),e(_e,Y4),e(Y4,dMe),e(dMe,QAr),e(Y4,WAr),e(Y4,iY),e(iY,HAr),e(Y4,UAr),e(_e,JAr),e(_e,Z4),e(Z4,cMe),e(cMe,YAr),e(Z4,ZAr),e(Z4,dY),e(dY,KAr),e(Z4,eLr),e(_e,oLr),e(_e,K4),e(K4,fMe),e(fMe,rLr),e(K4,tLr),e(K4,cY),e(cY,aLr),e(K4,nLr),e(_e,sLr),e(_e,eC),e(eC,mMe),e(mMe,lLr),e(eC,iLr),e(eC,fY),e(fY,dLr),e(eC,cLr),e(_e,fLr),e(_e,oC),e(oC,gMe),e(gMe,mLr),e(oC,gLr),e(oC,mY),e(mY,hLr),e(oC,pLr),e(_e,_Lr),e(_e,rC),e(rC,hMe),e(hMe,uLr),e(rC,bLr),e(rC,gY),e(gY,vLr),e(rC,FLr),e(_e,TLr),e(_e,tC),e(tC,pMe),e(pMe,MLr),e(tC,ELr),e(tC,hY),e(hY,CLr),e(tC,wLr),e(_e,ALr),e(_e,aC),e(aC,_Me),e(_Me,LLr),e(aC,yLr),e(aC,pY),e(pY,xLr),e(aC,$Lr),e(_e,kLr),e(_e,nC),e(nC,uMe),e(uMe,SLr),e(nC,RLr),e(nC,_Y),e(_Y,PLr),e(nC,BLr),e(_e,ILr),e(_e,sC),e(sC,bMe),e(bMe,NLr),e(sC,qLr),e(sC,uY),e(uY,jLr),e(sC,DLr),e(_e,GLr),e(_e,lC),e(lC,vMe),e(vMe,OLr),e(lC,VLr),e(lC,bY),e(bY,XLr),e(lC,zLr),e(_e,QLr),e(_e,iC),e(iC,FMe),e(FMe,WLr),e(iC,HLr),e(iC,vY),e(vY,ULr),e(iC,JLr),e(_e,YLr),e(_e,dC),e(dC,TMe),e(TMe,ZLr),e(dC,KLr),e(dC,FY),e(FY,eyr),e(dC,oyr),e(Br,ryr),M(cC,Br,null),b(f,tVe,u),b(f,Ec,u),e(Ec,fC),e(fC,MMe),M(ex,MMe,null),e(Ec,tyr),e(Ec,EMe),e(EMe,ayr),b(f,aVe,u),b(f,ir,u),M(ox,ir,null),e(ir,nyr),e(ir,Cc),e(Cc,syr),e(Cc,TY),e(TY,lyr),e(Cc,iyr),e(Cc,MY),e(MY,dyr),e(Cc,cyr),e(ir,fyr),e(ir,rx),e(rx,myr),e(rx,CMe),e(CMe,gyr),e(rx,hyr),e(ir,pyr),e(ir,qt),M(tx,qt,null),e(qt,_yr),e(qt,wMe),e(wMe,uyr),e(qt,byr),e(qt,wc),e(wc,vyr),e(wc,AMe),e(AMe,Fyr),e(wc,Tyr),e(wc,EY),e(EY,Myr),e(wc,Eyr),e(qt,Cyr),M(mC,qt,null),e(ir,wyr),e(ir,Ir),M(ax,Ir,null),e(Ir,Ayr),e(Ir,LMe),e(LMe,Lyr),e(Ir,yyr),e(Ir,hn),e(hn,xyr),e(hn,yMe),e(yMe,$yr),e(hn,kyr),e(hn,xMe),e(xMe,Syr),e(hn,Ryr),e(hn,$Me),e($Me,Pyr),e(hn,Byr),e(Ir,Iyr),e(Ir,nx),e(nx,gC),e(gC,kMe),e(kMe,Nyr),e(gC,qyr),e(gC,CY),e(CY,jyr),e(gC,Dyr),e(nx,Gyr),e(nx,hC),e(hC,SMe),e(SMe,Oyr),e(hC,Vyr),e(hC,wY),e(wY,Xyr),e(hC,zyr),e(Ir,Qyr),M(pC,Ir,null),b(f,nVe,u),b(f,Ac,u),e(Ac,_C),e(_C,RMe),M(sx,RMe,null),e(Ac,Wyr),e(Ac,PMe),e(PMe,Hyr),b(f,sVe,u),b(f,dr,u),M(lx,dr,null),e(dr,Uyr),e(dr,Lc),e(Lc,Jyr),e(Lc,AY),e(AY,Yyr),e(Lc,Zyr),e(Lc,LY),e(LY,Kyr),e(Lc,e8r),e(dr,o8r),e(dr,ix),e(ix,r8r),e(ix,BMe),e(BMe,t8r),e(ix,a8r),e(dr,n8r),e(dr,jt),M(dx,jt,null),e(jt,s8r),e(jt,IMe),e(IMe,l8r),e(jt,i8r),e(jt,yc),e(yc,d8r),e(yc,NMe),e(NMe,c8r),e(yc,f8r),e(yc,yY),e(yY,m8r),e(yc,g8r),e(jt,h8r),M(uC,jt,null),e(dr,p8r),e(dr,Nr),M(cx,Nr,null),e(Nr,_8r),e(Nr,qMe),e(qMe,u8r),e(Nr,b8r),e(Nr,pn),e(pn,v8r),e(pn,jMe),e(jMe,F8r),e(pn,T8r),e(pn,DMe),e(DMe,M8r),e(pn,E8r),e(pn,GMe),e(GMe,C8r),e(pn,w8r),e(Nr,A8r),e(Nr,OMe),e(OMe,bC),e(bC,VMe),e(VMe,L8r),e(bC,y8r),e(bC,xY),e(xY,x8r),e(bC,$8r),e(Nr,k8r),M(vC,Nr,null),b(f,lVe,u),b(f,xc,u),e(xc,FC),e(FC,XMe),M(fx,XMe,null),e(xc,S8r),e(xc,zMe),e(zMe,R8r),b(f,iVe,u),b(f,cr,u),M(mx,cr,null),e(cr,P8r),e(cr,$c),e($c,B8r),e($c,$Y),e($Y,I8r),e($c,N8r),e($c,kY),e(kY,q8r),e($c,j8r),e(cr,D8r),e(cr,gx),e(gx,G8r),e(gx,QMe),e(QMe,O8r),e(gx,V8r),e(cr,X8r),e(cr,Dt),M(hx,Dt,null),e(Dt,z8r),e(Dt,WMe),e(WMe,Q8r),e(Dt,W8r),e(Dt,kc),e(kc,H8r),e(kc,HMe),e(HMe,U8r),e(kc,J8r),e(kc,SY),e(SY,Y8r),e(kc,Z8r),e(Dt,K8r),M(TC,Dt,null),e(cr,e9r),e(cr,qr),M(px,qr,null),e(qr,o9r),e(qr,UMe),e(UMe,r9r),e(qr,t9r),e(qr,_n),e(_n,a9r),e(_n,JMe),e(JMe,n9r),e(_n,s9r),e(_n,YMe),e(YMe,l9r),e(_n,i9r),e(_n,ZMe),e(ZMe,d9r),e(_n,c9r),e(qr,f9r),e(qr,de),e(de,MC),e(MC,KMe),e(KMe,m9r),e(MC,g9r),e(MC,RY),e(RY,h9r),e(MC,p9r),e(de,_9r),e(de,EC),e(EC,eEe),e(eEe,u9r),e(EC,b9r),e(EC,PY),e(PY,v9r),e(EC,F9r),e(de,T9r),e(de,CC),e(CC,oEe),e(oEe,M9r),e(CC,E9r),e(CC,BY),e(BY,C9r),e(CC,w9r),e(de,A9r),e(de,wC),e(wC,rEe),e(rEe,L9r),e(wC,y9r),e(wC,IY),e(IY,x9r),e(wC,$9r),e(de,k9r),e(de,AC),e(AC,tEe),e(tEe,S9r),e(AC,R9r),e(AC,NY),e(NY,P9r),e(AC,B9r),e(de,I9r),e(de,LC),e(LC,aEe),e(aEe,N9r),e(LC,q9r),e(LC,qY),e(qY,j9r),e(LC,D9r),e(de,G9r),e(de,yC),e(yC,nEe),e(nEe,O9r),e(yC,V9r),e(yC,jY),e(jY,X9r),e(yC,z9r),e(de,Q9r),e(de,xC),e(xC,sEe),e(sEe,W9r),e(xC,H9r),e(xC,DY),e(DY,U9r),e(xC,J9r),e(de,Y9r),e(de,$C),e($C,lEe),e(lEe,Z9r),e($C,K9r),e($C,GY),e(GY,exr),e($C,oxr),e(de,rxr),e(de,kC),e(kC,iEe),e(iEe,txr),e(kC,axr),e(kC,OY),e(OY,nxr),e(kC,sxr),e(de,lxr),e(de,SC),e(SC,dEe),e(dEe,ixr),e(SC,dxr),e(SC,VY),e(VY,cxr),e(SC,fxr),e(de,mxr),e(de,RC),e(RC,cEe),e(cEe,gxr),e(RC,hxr),e(RC,XY),e(XY,pxr),e(RC,_xr),e(de,uxr),e(de,PC),e(PC,fEe),e(fEe,bxr),e(PC,vxr),e(PC,zY),e(zY,Fxr),e(PC,Txr),e(de,Mxr),e(de,BC),e(BC,mEe),e(mEe,Exr),e(BC,Cxr),e(BC,QY),e(QY,wxr),e(BC,Axr),e(de,Lxr),e(de,IC),e(IC,gEe),e(gEe,yxr),e(IC,xxr),e(IC,WY),e(WY,$xr),e(IC,kxr),e(de,Sxr),e(de,NC),e(NC,hEe),e(hEe,Rxr),e(NC,Pxr),e(NC,HY),e(HY,Bxr),e(NC,Ixr),e(de,Nxr),e(de,qC),e(qC,pEe),e(pEe,qxr),e(qC,jxr),e(qC,UY),e(UY,Dxr),e(qC,Gxr),e(de,Oxr),e(de,jC),e(jC,_Ee),e(_Ee,Vxr),e(jC,Xxr),e(jC,JY),e(JY,zxr),e(jC,Qxr),e(de,Wxr),e(de,DC),e(DC,uEe),e(uEe,Hxr),e(DC,Uxr),e(DC,YY),e(YY,Jxr),e(DC,Yxr),e(de,Zxr),e(de,GC),e(GC,bEe),e(bEe,Kxr),e(GC,e$r),e(GC,ZY),e(ZY,o$r),e(GC,r$r),e(qr,t$r),M(OC,qr,null),b(f,dVe,u),b(f,Sc,u),e(Sc,VC),e(VC,vEe),M(_x,vEe,null),e(Sc,a$r),e(Sc,FEe),e(FEe,n$r),b(f,cVe,u),b(f,fr,u),M(ux,fr,null),e(fr,s$r),e(fr,Rc),e(Rc,l$r),e(Rc,KY),e(KY,i$r),e(Rc,d$r),e(Rc,eZ),e(eZ,c$r),e(Rc,f$r),e(fr,m$r),e(fr,bx),e(bx,g$r),e(bx,TEe),e(TEe,h$r),e(bx,p$r),e(fr,_$r),e(fr,Gt),M(vx,Gt,null),e(Gt,u$r),e(Gt,MEe),e(MEe,b$r),e(Gt,v$r),e(Gt,Pc),e(Pc,F$r),e(Pc,EEe),e(EEe,T$r),e(Pc,M$r),e(Pc,oZ),e(oZ,E$r),e(Pc,C$r),e(Gt,w$r),M(XC,Gt,null),e(fr,A$r),e(fr,jr),M(Fx,jr,null),e(jr,L$r),e(jr,CEe),e(CEe,y$r),e(jr,x$r),e(jr,un),e(un,$$r),e(un,wEe),e(wEe,k$r),e(un,S$r),e(un,AEe),e(AEe,R$r),e(un,P$r),e(un,LEe),e(LEe,B$r),e(un,I$r),e(jr,N$r),e(jr,ce),e(ce,zC),e(zC,yEe),e(yEe,q$r),e(zC,j$r),e(zC,rZ),e(rZ,D$r),e(zC,G$r),e(ce,O$r),e(ce,QC),e(QC,xEe),e(xEe,V$r),e(QC,X$r),e(QC,tZ),e(tZ,z$r),e(QC,Q$r),e(ce,W$r),e(ce,WC),e(WC,$Ee),e($Ee,H$r),e(WC,U$r),e(WC,aZ),e(aZ,J$r),e(WC,Y$r),e(ce,Z$r),e(ce,HC),e(HC,kEe),e(kEe,K$r),e(HC,ekr),e(HC,nZ),e(nZ,okr),e(HC,rkr),e(ce,tkr),e(ce,UC),e(UC,SEe),e(SEe,akr),e(UC,nkr),e(UC,sZ),e(sZ,skr),e(UC,lkr),e(ce,ikr),e(ce,JC),e(JC,REe),e(REe,dkr),e(JC,ckr),e(JC,lZ),e(lZ,fkr),e(JC,mkr),e(ce,gkr),e(ce,YC),e(YC,PEe),e(PEe,hkr),e(YC,pkr),e(YC,iZ),e(iZ,_kr),e(YC,ukr),e(ce,bkr),e(ce,ZC),e(ZC,BEe),e(BEe,vkr),e(ZC,Fkr),e(ZC,dZ),e(dZ,Tkr),e(ZC,Mkr),e(ce,Ekr),e(ce,KC),e(KC,IEe),e(IEe,Ckr),e(KC,wkr),e(KC,cZ),e(cZ,Akr),e(KC,Lkr),e(ce,ykr),e(ce,e5),e(e5,NEe),e(NEe,xkr),e(e5,$kr),e(e5,fZ),e(fZ,kkr),e(e5,Skr),e(ce,Rkr),e(ce,o5),e(o5,qEe),e(qEe,Pkr),e(o5,Bkr),e(o5,mZ),e(mZ,Ikr),e(o5,Nkr),e(ce,qkr),e(ce,r5),e(r5,jEe),e(jEe,jkr),e(r5,Dkr),e(r5,gZ),e(gZ,Gkr),e(r5,Okr),e(ce,Vkr),e(ce,t5),e(t5,DEe),e(DEe,Xkr),e(t5,zkr),e(t5,hZ),e(hZ,Qkr),e(t5,Wkr),e(ce,Hkr),e(ce,a5),e(a5,GEe),e(GEe,Ukr),e(a5,Jkr),e(a5,pZ),e(pZ,Ykr),e(a5,Zkr),e(ce,Kkr),e(ce,n5),e(n5,OEe),e(OEe,eSr),e(n5,oSr),e(n5,_Z),e(_Z,rSr),e(n5,tSr),e(ce,aSr),e(ce,s5),e(s5,VEe),e(VEe,nSr),e(s5,sSr),e(s5,uZ),e(uZ,lSr),e(s5,iSr),e(ce,dSr),e(ce,l5),e(l5,XEe),e(XEe,cSr),e(l5,fSr),e(l5,bZ),e(bZ,mSr),e(l5,gSr),e(ce,hSr),e(ce,i5),e(i5,zEe),e(zEe,pSr),e(i5,_Sr),e(i5,vZ),e(vZ,uSr),e(i5,bSr),e(ce,vSr),e(ce,d5),e(d5,QEe),e(QEe,FSr),e(d5,TSr),e(d5,FZ),e(FZ,MSr),e(d5,ESr),e(ce,CSr),e(ce,c5),e(c5,WEe),e(WEe,wSr),e(c5,ASr),e(c5,TZ),e(TZ,LSr),e(c5,ySr),e(jr,xSr),M(f5,jr,null),b(f,fVe,u),b(f,Bc,u),e(Bc,m5),e(m5,HEe),M(Tx,HEe,null),e(Bc,$Sr),e(Bc,UEe),e(UEe,kSr),b(f,mVe,u),b(f,mr,u),M(Mx,mr,null),e(mr,SSr),e(mr,Ic),e(Ic,RSr),e(Ic,MZ),e(MZ,PSr),e(Ic,BSr),e(Ic,EZ),e(EZ,ISr),e(Ic,NSr),e(mr,qSr),e(mr,Ex),e(Ex,jSr),e(Ex,JEe),e(JEe,DSr),e(Ex,GSr),e(mr,OSr),e(mr,Ot),M(Cx,Ot,null),e(Ot,VSr),e(Ot,YEe),e(YEe,XSr),e(Ot,zSr),e(Ot,Nc),e(Nc,QSr),e(Nc,ZEe),e(ZEe,WSr),e(Nc,HSr),e(Nc,CZ),e(CZ,USr),e(Nc,JSr),e(Ot,YSr),M(g5,Ot,null),e(mr,ZSr),e(mr,Dr),M(wx,Dr,null),e(Dr,KSr),e(Dr,KEe),e(KEe,eRr),e(Dr,oRr),e(Dr,bn),e(bn,rRr),e(bn,e4e),e(e4e,tRr),e(bn,aRr),e(bn,o4e),e(o4e,nRr),e(bn,sRr),e(bn,r4e),e(r4e,lRr),e(bn,iRr),e(Dr,dRr),e(Dr,t4e),e(t4e,h5),e(h5,a4e),e(a4e,cRr),e(h5,fRr),e(h5,wZ),e(wZ,mRr),e(h5,gRr),e(Dr,hRr),M(p5,Dr,null),b(f,gVe,u),b(f,qc,u),e(qc,_5),e(_5,n4e),M(Ax,n4e,null),e(qc,pRr),e(qc,s4e),e(s4e,_Rr),b(f,hVe,u),b(f,gr,u),M(Lx,gr,null),e(gr,uRr),e(gr,jc),e(jc,bRr),e(jc,AZ),e(AZ,vRr),e(jc,FRr),e(jc,LZ),e(LZ,TRr),e(jc,MRr),e(gr,ERr),e(gr,yx),e(yx,CRr),e(yx,l4e),e(l4e,wRr),e(yx,ARr),e(gr,LRr),e(gr,Vt),M(xx,Vt,null),e(Vt,yRr),e(Vt,i4e),e(i4e,xRr),e(Vt,$Rr),e(Vt,Dc),e(Dc,kRr),e(Dc,d4e),e(d4e,SRr),e(Dc,RRr),e(Dc,yZ),e(yZ,PRr),e(Dc,BRr),e(Vt,IRr),M(u5,Vt,null),e(gr,NRr),e(gr,Gr),M($x,Gr,null),e(Gr,qRr),e(Gr,c4e),e(c4e,jRr),e(Gr,DRr),e(Gr,vn),e(vn,GRr),e(vn,f4e),e(f4e,ORr),e(vn,VRr),e(vn,m4e),e(m4e,XRr),e(vn,zRr),e(vn,g4e),e(g4e,QRr),e(vn,WRr),e(Gr,HRr),e(Gr,h4e),e(h4e,b5),e(b5,p4e),e(p4e,URr),e(b5,JRr),e(b5,xZ),e(xZ,YRr),e(b5,ZRr),e(Gr,KRr),M(v5,Gr,null),b(f,pVe,u),b(f,Gc,u),e(Gc,F5),e(F5,_4e),M(kx,_4e,null),e(Gc,ePr),e(Gc,u4e),e(u4e,oPr),b(f,_Ve,u),b(f,hr,u),M(Sx,hr,null),e(hr,rPr),e(hr,Oc),e(Oc,tPr),e(Oc,$Z),e($Z,aPr),e(Oc,nPr),e(Oc,kZ),e(kZ,sPr),e(Oc,lPr),e(hr,iPr),e(hr,Rx),e(Rx,dPr),e(Rx,b4e),e(b4e,cPr),e(Rx,fPr),e(hr,mPr),e(hr,Xt),M(Px,Xt,null),e(Xt,gPr),e(Xt,v4e),e(v4e,hPr),e(Xt,pPr),e(Xt,Vc),e(Vc,_Pr),e(Vc,F4e),e(F4e,uPr),e(Vc,bPr),e(Vc,SZ),e(SZ,vPr),e(Vc,FPr),e(Xt,TPr),M(T5,Xt,null),e(hr,MPr),e(hr,Or),M(Bx,Or,null),e(Or,EPr),e(Or,T4e),e(T4e,CPr),e(Or,wPr),e(Or,Fn),e(Fn,APr),e(Fn,M4e),e(M4e,LPr),e(Fn,yPr),e(Fn,E4e),e(E4e,xPr),e(Fn,$Pr),e(Fn,C4e),e(C4e,kPr),e(Fn,SPr),e(Or,RPr),e(Or,oe),e(oe,M5),e(M5,w4e),e(w4e,PPr),e(M5,BPr),e(M5,RZ),e(RZ,IPr),e(M5,NPr),e(oe,qPr),e(oe,E5),e(E5,A4e),e(A4e,jPr),e(E5,DPr),e(E5,PZ),e(PZ,GPr),e(E5,OPr),e(oe,VPr),e(oe,C5),e(C5,L4e),e(L4e,XPr),e(C5,zPr),e(C5,BZ),e(BZ,QPr),e(C5,WPr),e(oe,HPr),e(oe,w5),e(w5,y4e),e(y4e,UPr),e(w5,JPr),e(w5,IZ),e(IZ,YPr),e(w5,ZPr),e(oe,KPr),e(oe,A5),e(A5,x4e),e(x4e,eBr),e(A5,oBr),e(A5,NZ),e(NZ,rBr),e(A5,tBr),e(oe,aBr),e(oe,L5),e(L5,$4e),e($4e,nBr),e(L5,sBr),e(L5,qZ),e(qZ,lBr),e(L5,iBr),e(oe,dBr),e(oe,y5),e(y5,k4e),e(k4e,cBr),e(y5,fBr),e(y5,jZ),e(jZ,mBr),e(y5,gBr),e(oe,hBr),e(oe,x5),e(x5,S4e),e(S4e,pBr),e(x5,_Br),e(x5,DZ),e(DZ,uBr),e(x5,bBr),e(oe,vBr),e(oe,$5),e($5,R4e),e(R4e,FBr),e($5,TBr),e($5,GZ),e(GZ,MBr),e($5,EBr),e(oe,CBr),e(oe,k5),e(k5,P4e),e(P4e,wBr),e(k5,ABr),e(k5,OZ),e(OZ,LBr),e(k5,yBr),e(oe,xBr),e(oe,S5),e(S5,B4e),e(B4e,$Br),e(S5,kBr),e(S5,VZ),e(VZ,SBr),e(S5,RBr),e(oe,PBr),e(oe,R5),e(R5,I4e),e(I4e,BBr),e(R5,IBr),e(R5,XZ),e(XZ,NBr),e(R5,qBr),e(oe,jBr),e(oe,P5),e(P5,N4e),e(N4e,DBr),e(P5,GBr),e(P5,zZ),e(zZ,OBr),e(P5,VBr),e(oe,XBr),e(oe,B5),e(B5,q4e),e(q4e,zBr),e(B5,QBr),e(B5,QZ),e(QZ,WBr),e(B5,HBr),e(oe,UBr),e(oe,I5),e(I5,j4e),e(j4e,JBr),e(I5,YBr),e(I5,WZ),e(WZ,ZBr),e(I5,KBr),e(oe,eIr),e(oe,N5),e(N5,D4e),e(D4e,oIr),e(N5,rIr),e(N5,HZ),e(HZ,tIr),e(N5,aIr),e(oe,nIr),e(oe,q5),e(q5,G4e),e(G4e,sIr),e(q5,lIr),e(q5,UZ),e(UZ,iIr),e(q5,dIr),e(oe,cIr),e(oe,j5),e(j5,O4e),e(O4e,fIr),e(j5,mIr),e(j5,JZ),e(JZ,gIr),e(j5,hIr),e(oe,pIr),e(oe,D5),e(D5,V4e),e(V4e,_Ir),e(D5,uIr),e(D5,YZ),e(YZ,bIr),e(D5,vIr),e(oe,FIr),e(oe,G5),e(G5,X4e),e(X4e,TIr),e(G5,MIr),e(G5,ZZ),e(ZZ,EIr),e(G5,CIr),e(oe,wIr),e(oe,O5),e(O5,z4e),e(z4e,AIr),e(O5,LIr),e(O5,KZ),e(KZ,yIr),e(O5,xIr),e(oe,$Ir),e(oe,V5),e(V5,Q4e),e(Q4e,kIr),e(V5,SIr),e(V5,eK),e(eK,RIr),e(V5,PIr),e(oe,BIr),e(oe,X5),e(X5,W4e),e(W4e,IIr),e(X5,NIr),e(X5,oK),e(oK,qIr),e(X5,jIr),e(oe,DIr),e(oe,z5),e(z5,H4e),e(H4e,GIr),e(z5,OIr),e(z5,rK),e(rK,VIr),e(z5,XIr),e(oe,zIr),e(oe,Q5),e(Q5,U4e),e(U4e,QIr),e(Q5,WIr),e(Q5,tK),e(tK,HIr),e(Q5,UIr),e(oe,JIr),e(oe,W5),e(W5,J4e),e(J4e,YIr),e(W5,ZIr),e(W5,aK),e(aK,KIr),e(W5,eNr),e(oe,oNr),e(oe,H5),e(H5,Y4e),e(Y4e,rNr),e(H5,tNr),e(H5,nK),e(nK,aNr),e(H5,nNr),e(Or,sNr),M(U5,Or,null),b(f,uVe,u),b(f,Xc,u),e(Xc,J5),e(J5,Z4e),M(Ix,Z4e,null),e(Xc,lNr),e(Xc,K4e),e(K4e,iNr),b(f,bVe,u),b(f,pr,u),M(Nx,pr,null),e(pr,dNr),e(pr,zc),e(zc,cNr),e(zc,sK),e(sK,fNr),e(zc,mNr),e(zc,lK),e(lK,gNr),e(zc,hNr),e(pr,pNr),e(pr,qx),e(qx,_Nr),e(qx,eCe),e(eCe,uNr),e(qx,bNr),e(pr,vNr),e(pr,zt),M(jx,zt,null),e(zt,FNr),e(zt,oCe),e(oCe,TNr),e(zt,MNr),e(zt,Qc),e(Qc,ENr),e(Qc,rCe),e(rCe,CNr),e(Qc,wNr),e(Qc,iK),e(iK,ANr),e(Qc,LNr),e(zt,yNr),M(Y5,zt,null),e(pr,xNr),e(pr,Vr),M(Dx,Vr,null),e(Vr,$Nr),e(Vr,tCe),e(tCe,kNr),e(Vr,SNr),e(Vr,Tn),e(Tn,RNr),e(Tn,aCe),e(aCe,PNr),e(Tn,BNr),e(Tn,nCe),e(nCe,INr),e(Tn,NNr),e(Tn,sCe),e(sCe,qNr),e(Tn,jNr),e(Vr,DNr),e(Vr,xe),e(xe,Z5),e(Z5,lCe),e(lCe,GNr),e(Z5,ONr),e(Z5,dK),e(dK,VNr),e(Z5,XNr),e(xe,zNr),e(xe,K5),e(K5,iCe),e(iCe,QNr),e(K5,WNr),e(K5,cK),e(cK,HNr),e(K5,UNr),e(xe,JNr),e(xe,e3),e(e3,dCe),e(dCe,YNr),e(e3,ZNr),e(e3,fK),e(fK,KNr),e(e3,eqr),e(xe,oqr),e(xe,o3),e(o3,cCe),e(cCe,rqr),e(o3,tqr),e(o3,mK),e(mK,aqr),e(o3,nqr),e(xe,sqr),e(xe,r3),e(r3,fCe),e(fCe,lqr),e(r3,iqr),e(r3,gK),e(gK,dqr),e(r3,cqr),e(xe,fqr),e(xe,t3),e(t3,mCe),e(mCe,mqr),e(t3,gqr),e(t3,hK),e(hK,hqr),e(t3,pqr),e(xe,_qr),e(xe,a3),e(a3,gCe),e(gCe,uqr),e(a3,bqr),e(a3,pK),e(pK,vqr),e(a3,Fqr),e(xe,Tqr),e(xe,n3),e(n3,hCe),e(hCe,Mqr),e(n3,Eqr),e(n3,_K),e(_K,Cqr),e(n3,wqr),e(xe,Aqr),e(xe,s3),e(s3,pCe),e(pCe,Lqr),e(s3,yqr),e(s3,uK),e(uK,xqr),e(s3,$qr),e(xe,kqr),e(xe,l3),e(l3,_Ce),e(_Ce,Sqr),e(l3,Rqr),e(l3,bK),e(bK,Pqr),e(l3,Bqr),e(Vr,Iqr),M(i3,Vr,null),b(f,vVe,u),b(f,Wc,u),e(Wc,d3),e(d3,uCe),M(Gx,uCe,null),e(Wc,Nqr),e(Wc,bCe),e(bCe,qqr),b(f,FVe,u),b(f,_r,u),M(Ox,_r,null),e(_r,jqr),e(_r,Hc),e(Hc,Dqr),e(Hc,vK),e(vK,Gqr),e(Hc,Oqr),e(Hc,FK),e(FK,Vqr),e(Hc,Xqr),e(_r,zqr),e(_r,Vx),e(Vx,Qqr),e(Vx,vCe),e(vCe,Wqr),e(Vx,Hqr),e(_r,Uqr),e(_r,Qt),M(Xx,Qt,null),e(Qt,Jqr),e(Qt,FCe),e(FCe,Yqr),e(Qt,Zqr),e(Qt,Uc),e(Uc,Kqr),e(Uc,TCe),e(TCe,ejr),e(Uc,ojr),e(Uc,TK),e(TK,rjr),e(Uc,tjr),e(Qt,ajr),M(c3,Qt,null),e(_r,njr),e(_r,Xr),M(zx,Xr,null),e(Xr,sjr),e(Xr,MCe),e(MCe,ljr),e(Xr,ijr),e(Xr,Mn),e(Mn,djr),e(Mn,ECe),e(ECe,cjr),e(Mn,fjr),e(Mn,CCe),e(CCe,mjr),e(Mn,gjr),e(Mn,wCe),e(wCe,hjr),e(Mn,pjr),e(Xr,_jr),e(Xr,Ee),e(Ee,f3),e(f3,ACe),e(ACe,ujr),e(f3,bjr),e(f3,MK),e(MK,vjr),e(f3,Fjr),e(Ee,Tjr),e(Ee,m3),e(m3,LCe),e(LCe,Mjr),e(m3,Ejr),e(m3,EK),e(EK,Cjr),e(m3,wjr),e(Ee,Ajr),e(Ee,g3),e(g3,yCe),e(yCe,Ljr),e(g3,yjr),e(g3,CK),e(CK,xjr),e(g3,$jr),e(Ee,kjr),e(Ee,h3),e(h3,xCe),e(xCe,Sjr),e(h3,Rjr),e(h3,wK),e(wK,Pjr),e(h3,Bjr),e(Ee,Ijr),e(Ee,p3),e(p3,$Ce),e($Ce,Njr),e(p3,qjr),e(p3,AK),e(AK,jjr),e(p3,Djr),e(Ee,Gjr),e(Ee,_3),e(_3,kCe),e(kCe,Ojr),e(_3,Vjr),e(_3,LK),e(LK,Xjr),e(_3,zjr),e(Ee,Qjr),e(Ee,u3),e(u3,SCe),e(SCe,Wjr),e(u3,Hjr),e(u3,yK),e(yK,Ujr),e(u3,Jjr),e(Ee,Yjr),e(Ee,b3),e(b3,RCe),e(RCe,Zjr),e(b3,Kjr),e(b3,xK),e(xK,eDr),e(b3,oDr),e(Ee,rDr),e(Ee,v3),e(v3,PCe),e(PCe,tDr),e(v3,aDr),e(v3,$K),e($K,nDr),e(v3,sDr),e(Ee,lDr),e(Ee,F3),e(F3,BCe),e(BCe,iDr),e(F3,dDr),e(F3,kK),e(kK,cDr),e(F3,fDr),e(Ee,mDr),e(Ee,T3),e(T3,ICe),e(ICe,gDr),e(T3,hDr),e(T3,SK),e(SK,pDr),e(T3,_Dr),e(Ee,uDr),e(Ee,M3),e(M3,NCe),e(NCe,bDr),e(M3,vDr),e(M3,RK),e(RK,FDr),e(M3,TDr),e(Ee,MDr),e(Ee,E3),e(E3,qCe),e(qCe,EDr),e(E3,CDr),e(E3,PK),e(PK,wDr),e(E3,ADr),e(Xr,LDr),M(C3,Xr,null),b(f,TVe,u),b(f,Jc,u),e(Jc,w3),e(w3,jCe),M(Qx,jCe,null),e(Jc,yDr),e(Jc,DCe),e(DCe,xDr),b(f,MVe,u),b(f,ur,u),M(Wx,ur,null),e(ur,$Dr),e(ur,Yc),e(Yc,kDr),e(Yc,BK),e(BK,SDr),e(Yc,RDr),e(Yc,IK),e(IK,PDr),e(Yc,BDr),e(ur,IDr),e(ur,Hx),e(Hx,NDr),e(Hx,GCe),e(GCe,qDr),e(Hx,jDr),e(ur,DDr),e(ur,Wt),M(Ux,Wt,null),e(Wt,GDr),e(Wt,OCe),e(OCe,ODr),e(Wt,VDr),e(Wt,Zc),e(Zc,XDr),e(Zc,VCe),e(VCe,zDr),e(Zc,QDr),e(Zc,NK),e(NK,WDr),e(Zc,HDr),e(Wt,UDr),M(A3,Wt,null),e(ur,JDr),e(ur,zr),M(Jx,zr,null),e(zr,YDr),e(zr,XCe),e(XCe,ZDr),e(zr,KDr),e(zr,En),e(En,eGr),e(En,zCe),e(zCe,oGr),e(En,rGr),e(En,QCe),e(QCe,tGr),e(En,aGr),e(En,WCe),e(WCe,nGr),e(En,sGr),e(zr,lGr),e(zr,$e),e($e,L3),e(L3,HCe),e(HCe,iGr),e(L3,dGr),e(L3,qK),e(qK,cGr),e(L3,fGr),e($e,mGr),e($e,y3),e(y3,UCe),e(UCe,gGr),e(y3,hGr),e(y3,jK),e(jK,pGr),e(y3,_Gr),e($e,uGr),e($e,x3),e(x3,JCe),e(JCe,bGr),e(x3,vGr),e(x3,DK),e(DK,FGr),e(x3,TGr),e($e,MGr),e($e,$3),e($3,YCe),e(YCe,EGr),e($3,CGr),e($3,GK),e(GK,wGr),e($3,AGr),e($e,LGr),e($e,k3),e(k3,ZCe),e(ZCe,yGr),e(k3,xGr),e(k3,OK),e(OK,$Gr),e(k3,kGr),e($e,SGr),e($e,S3),e(S3,KCe),e(KCe,RGr),e(S3,PGr),e(S3,VK),e(VK,BGr),e(S3,IGr),e($e,NGr),e($e,R3),e(R3,e5e),e(e5e,qGr),e(R3,jGr),e(R3,XK),e(XK,DGr),e(R3,GGr),e($e,OGr),e($e,P3),e(P3,o5e),e(o5e,VGr),e(P3,XGr),e(P3,zK),e(zK,zGr),e(P3,QGr),e($e,WGr),e($e,B3),e(B3,r5e),e(r5e,HGr),e(B3,UGr),e(B3,QK),e(QK,JGr),e(B3,YGr),e($e,ZGr),e($e,I3),e(I3,t5e),e(t5e,KGr),e(I3,eOr),e(I3,WK),e(WK,oOr),e(I3,rOr),e(zr,tOr),M(N3,zr,null),b(f,EVe,u),b(f,Kc,u),e(Kc,q3),e(q3,a5e),M(Yx,a5e,null),e(Kc,aOr),e(Kc,n5e),e(n5e,nOr),b(f,CVe,u),b(f,br,u),M(Zx,br,null),e(br,sOr),e(br,ef),e(ef,lOr),e(ef,HK),e(HK,iOr),e(ef,dOr),e(ef,UK),e(UK,cOr),e(ef,fOr),e(br,mOr),e(br,Kx),e(Kx,gOr),e(Kx,s5e),e(s5e,hOr),e(Kx,pOr),e(br,_Or),e(br,Ht),M(e$,Ht,null),e(Ht,uOr),e(Ht,l5e),e(l5e,bOr),e(Ht,vOr),e(Ht,of),e(of,FOr),e(of,i5e),e(i5e,TOr),e(of,MOr),e(of,JK),e(JK,EOr),e(of,COr),e(Ht,wOr),M(j3,Ht,null),e(br,AOr),e(br,Qr),M(o$,Qr,null),e(Qr,LOr),e(Qr,d5e),e(d5e,yOr),e(Qr,xOr),e(Qr,Cn),e(Cn,$Or),e(Cn,c5e),e(c5e,kOr),e(Cn,SOr),e(Cn,f5e),e(f5e,ROr),e(Cn,POr),e(Cn,m5e),e(m5e,BOr),e(Cn,IOr),e(Qr,NOr),e(Qr,ke),e(ke,D3),e(D3,g5e),e(g5e,qOr),e(D3,jOr),e(D3,YK),e(YK,DOr),e(D3,GOr),e(ke,OOr),e(ke,G3),e(G3,h5e),e(h5e,VOr),e(G3,XOr),e(G3,ZK),e(ZK,zOr),e(G3,QOr),e(ke,WOr),e(ke,O3),e(O3,p5e),e(p5e,HOr),e(O3,UOr),e(O3,KK),e(KK,JOr),e(O3,YOr),e(ke,ZOr),e(ke,V3),e(V3,_5e),e(_5e,KOr),e(V3,eVr),e(V3,eee),e(eee,oVr),e(V3,rVr),e(ke,tVr),e(ke,X3),e(X3,u5e),e(u5e,aVr),e(X3,nVr),e(X3,oee),e(oee,sVr),e(X3,lVr),e(ke,iVr),e(ke,z3),e(z3,b5e),e(b5e,dVr),e(z3,cVr),e(z3,ree),e(ree,fVr),e(z3,mVr),e(ke,gVr),e(ke,Q3),e(Q3,v5e),e(v5e,hVr),e(Q3,pVr),e(Q3,tee),e(tee,_Vr),e(Q3,uVr),e(ke,bVr),e(ke,W3),e(W3,F5e),e(F5e,vVr),e(W3,FVr),e(W3,aee),e(aee,TVr),e(W3,MVr),e(ke,EVr),e(ke,H3),e(H3,T5e),e(T5e,CVr),e(H3,wVr),e(H3,nee),e(nee,AVr),e(H3,LVr),e(ke,yVr),e(ke,U3),e(U3,M5e),e(M5e,xVr),e(U3,$Vr),e(U3,see),e(see,kVr),e(U3,SVr),e(Qr,RVr),M(J3,Qr,null),b(f,wVe,u),b(f,rf,u),e(rf,Y3),e(Y3,E5e),M(r$,E5e,null),e(rf,PVr),e(rf,C5e),e(C5e,BVr),b(f,AVe,u),b(f,vr,u),M(t$,vr,null),e(vr,IVr),e(vr,tf),e(tf,NVr),e(tf,lee),e(lee,qVr),e(tf,jVr),e(tf,iee),e(iee,DVr),e(tf,GVr),e(vr,OVr),e(vr,a$),e(a$,VVr),e(a$,w5e),e(w5e,XVr),e(a$,zVr),e(vr,QVr),e(vr,Ut),M(n$,Ut,null),e(Ut,WVr),e(Ut,A5e),e(A5e,HVr),e(Ut,UVr),e(Ut,af),e(af,JVr),e(af,L5e),e(L5e,YVr),e(af,ZVr),e(af,dee),e(dee,KVr),e(af,eXr),e(Ut,oXr),M(Z3,Ut,null),e(vr,rXr),e(vr,Wr),M(s$,Wr,null),e(Wr,tXr),e(Wr,y5e),e(y5e,aXr),e(Wr,nXr),e(Wr,wn),e(wn,sXr),e(wn,x5e),e(x5e,lXr),e(wn,iXr),e(wn,$5e),e($5e,dXr),e(wn,cXr),e(wn,k5e),e(k5e,fXr),e(wn,mXr),e(Wr,gXr),e(Wr,Se),e(Se,K3),e(K3,S5e),e(S5e,hXr),e(K3,pXr),e(K3,cee),e(cee,_Xr),e(K3,uXr),e(Se,bXr),e(Se,e0),e(e0,R5e),e(R5e,vXr),e(e0,FXr),e(e0,fee),e(fee,TXr),e(e0,MXr),e(Se,EXr),e(Se,o0),e(o0,P5e),e(P5e,CXr),e(o0,wXr),e(o0,mee),e(mee,AXr),e(o0,LXr),e(Se,yXr),e(Se,r0),e(r0,B5e),e(B5e,xXr),e(r0,$Xr),e(r0,gee),e(gee,kXr),e(r0,SXr),e(Se,RXr),e(Se,t0),e(t0,I5e),e(I5e,PXr),e(t0,BXr),e(t0,hee),e(hee,IXr),e(t0,NXr),e(Se,qXr),e(Se,a0),e(a0,N5e),e(N5e,jXr),e(a0,DXr),e(a0,pee),e(pee,GXr),e(a0,OXr),e(Se,VXr),e(Se,n0),e(n0,q5e),e(q5e,XXr),e(n0,zXr),e(n0,_ee),e(_ee,QXr),e(n0,WXr),e(Se,HXr),e(Se,s0),e(s0,j5e),e(j5e,UXr),e(s0,JXr),e(s0,uee),e(uee,YXr),e(s0,ZXr),e(Se,KXr),e(Se,l0),e(l0,D5e),e(D5e,ezr),e(l0,ozr),e(l0,bee),e(bee,rzr),e(l0,tzr),e(Se,azr),e(Se,i0),e(i0,G5e),e(G5e,nzr),e(i0,szr),e(i0,vee),e(vee,lzr),e(i0,izr),e(Wr,dzr),M(d0,Wr,null),b(f,LVe,u),b(f,nf,u),e(nf,c0),e(c0,O5e),M(l$,O5e,null),e(nf,czr),e(nf,V5e),e(V5e,fzr),b(f,yVe,u),b(f,Fr,u),M(i$,Fr,null),e(Fr,mzr),e(Fr,sf),e(sf,gzr),e(sf,Fee),e(Fee,hzr),e(sf,pzr),e(sf,Tee),e(Tee,_zr),e(sf,uzr),e(Fr,bzr),e(Fr,d$),e(d$,vzr),e(d$,X5e),e(X5e,Fzr),e(d$,Tzr),e(Fr,Mzr),e(Fr,Jt),M(c$,Jt,null),e(Jt,Ezr),e(Jt,z5e),e(z5e,Czr),e(Jt,wzr),e(Jt,lf),e(lf,Azr),e(lf,Q5e),e(Q5e,Lzr),e(lf,yzr),e(lf,Mee),e(Mee,xzr),e(lf,$zr),e(Jt,kzr),M(f0,Jt,null),e(Fr,Szr),e(Fr,Hr),M(f$,Hr,null),e(Hr,Rzr),e(Hr,W5e),e(W5e,Pzr),e(Hr,Bzr),e(Hr,An),e(An,Izr),e(An,H5e),e(H5e,Nzr),e(An,qzr),e(An,U5e),e(U5e,jzr),e(An,Dzr),e(An,J5e),e(J5e,Gzr),e(An,Ozr),e(Hr,Vzr),e(Hr,Re),e(Re,m0),e(m0,Y5e),e(Y5e,Xzr),e(m0,zzr),e(m0,Eee),e(Eee,Qzr),e(m0,Wzr),e(Re,Hzr),e(Re,g0),e(g0,Z5e),e(Z5e,Uzr),e(g0,Jzr),e(g0,Cee),e(Cee,Yzr),e(g0,Zzr),e(Re,Kzr),e(Re,h0),e(h0,K5e),e(K5e,eQr),e(h0,oQr),e(h0,wee),e(wee,rQr),e(h0,tQr),e(Re,aQr),e(Re,p0),e(p0,e3e),e(e3e,nQr),e(p0,sQr),e(p0,Aee),e(Aee,lQr),e(p0,iQr),e(Re,dQr),e(Re,_0),e(_0,o3e),e(o3e,cQr),e(_0,fQr),e(_0,Lee),e(Lee,mQr),e(_0,gQr),e(Re,hQr),e(Re,u0),e(u0,r3e),e(r3e,pQr),e(u0,_Qr),e(u0,yee),e(yee,uQr),e(u0,bQr),e(Re,vQr),e(Re,b0),e(b0,t3e),e(t3e,FQr),e(b0,TQr),e(b0,xee),e(xee,MQr),e(b0,EQr),e(Re,CQr),e(Re,v0),e(v0,a3e),e(a3e,wQr),e(v0,AQr),e(v0,$ee),e($ee,LQr),e(v0,yQr),e(Re,xQr),e(Re,F0),e(F0,n3e),e(n3e,$Qr),e(F0,kQr),e(F0,kee),e(kee,SQr),e(F0,RQr),e(Re,PQr),e(Re,T0),e(T0,s3e),e(s3e,BQr),e(T0,IQr),e(T0,See),e(See,NQr),e(T0,qQr),e(Hr,jQr),M(M0,Hr,null),b(f,xVe,u),b(f,df,u),e(df,E0),e(E0,l3e),M(m$,l3e,null),e(df,DQr),e(df,i3e),e(i3e,GQr),b(f,$Ve,u),b(f,Tr,u),M(g$,Tr,null),e(Tr,OQr),e(Tr,cf),e(cf,VQr),e(cf,Ree),e(Ree,XQr),e(cf,zQr),e(cf,Pee),e(Pee,QQr),e(cf,WQr),e(Tr,HQr),e(Tr,h$),e(h$,UQr),e(h$,d3e),e(d3e,JQr),e(h$,YQr),e(Tr,ZQr),e(Tr,Yt),M(p$,Yt,null),e(Yt,KQr),e(Yt,c3e),e(c3e,eWr),e(Yt,oWr),e(Yt,ff),e(ff,rWr),e(ff,f3e),e(f3e,tWr),e(ff,aWr),e(ff,Bee),e(Bee,nWr),e(ff,sWr),e(Yt,lWr),M(C0,Yt,null),e(Tr,iWr),e(Tr,Ur),M(_$,Ur,null),e(Ur,dWr),e(Ur,m3e),e(m3e,cWr),e(Ur,fWr),e(Ur,Ln),e(Ln,mWr),e(Ln,g3e),e(g3e,gWr),e(Ln,hWr),e(Ln,h3e),e(h3e,pWr),e(Ln,_Wr),e(Ln,p3e),e(p3e,uWr),e(Ln,bWr),e(Ur,vWr),e(Ur,Ve),e(Ve,w0),e(w0,_3e),e(_3e,FWr),e(w0,TWr),e(w0,Iee),e(Iee,MWr),e(w0,EWr),e(Ve,CWr),e(Ve,A0),e(A0,u3e),e(u3e,wWr),e(A0,AWr),e(A0,Nee),e(Nee,LWr),e(A0,yWr),e(Ve,xWr),e(Ve,L0),e(L0,b3e),e(b3e,$Wr),e(L0,kWr),e(L0,qee),e(qee,SWr),e(L0,RWr),e(Ve,PWr),e(Ve,y0),e(y0,v3e),e(v3e,BWr),e(y0,IWr),e(y0,jee),e(jee,NWr),e(y0,qWr),e(Ve,jWr),e(Ve,x0),e(x0,F3e),e(F3e,DWr),e(x0,GWr),e(x0,Dee),e(Dee,OWr),e(x0,VWr),e(Ve,XWr),e(Ve,$0),e($0,T3e),e(T3e,zWr),e($0,QWr),e($0,Gee),e(Gee,WWr),e($0,HWr),e(Ve,UWr),e(Ve,k0),e(k0,M3e),e(M3e,JWr),e(k0,YWr),e(k0,Oee),e(Oee,ZWr),e(k0,KWr),e(Ve,eHr),e(Ve,S0),e(S0,E3e),e(E3e,oHr),e(S0,rHr),e(S0,Vee),e(Vee,tHr),e(S0,aHr),e(Ur,nHr),M(R0,Ur,null),b(f,kVe,u),b(f,mf,u),e(mf,P0),e(P0,C3e),M(u$,C3e,null),e(mf,sHr),e(mf,w3e),e(w3e,lHr),b(f,SVe,u),b(f,Mr,u),M(b$,Mr,null),e(Mr,iHr),e(Mr,gf),e(gf,dHr),e(gf,Xee),e(Xee,cHr),e(gf,fHr),e(gf,zee),e(zee,mHr),e(gf,gHr),e(Mr,hHr),e(Mr,v$),e(v$,pHr),e(v$,A3e),e(A3e,_Hr),e(v$,uHr),e(Mr,bHr),e(Mr,Zt),M(F$,Zt,null),e(Zt,vHr),e(Zt,L3e),e(L3e,FHr),e(Zt,THr),e(Zt,hf),e(hf,MHr),e(hf,y3e),e(y3e,EHr),e(hf,CHr),e(hf,Qee),e(Qee,wHr),e(hf,AHr),e(Zt,LHr),M(B0,Zt,null),e(Mr,yHr),e(Mr,Jr),M(T$,Jr,null),e(Jr,xHr),e(Jr,x3e),e(x3e,$Hr),e(Jr,kHr),e(Jr,yn),e(yn,SHr),e(yn,$3e),e($3e,RHr),e(yn,PHr),e(yn,k3e),e(k3e,BHr),e(yn,IHr),e(yn,S3e),e(S3e,NHr),e(yn,qHr),e(Jr,jHr),e(Jr,Xe),e(Xe,I0),e(I0,R3e),e(R3e,DHr),e(I0,GHr),e(I0,Wee),e(Wee,OHr),e(I0,VHr),e(Xe,XHr),e(Xe,N0),e(N0,P3e),e(P3e,zHr),e(N0,QHr),e(N0,Hee),e(Hee,WHr),e(N0,HHr),e(Xe,UHr),e(Xe,q0),e(q0,B3e),e(B3e,JHr),e(q0,YHr),e(q0,Uee),e(Uee,ZHr),e(q0,KHr),e(Xe,eUr),e(Xe,j0),e(j0,I3e),e(I3e,oUr),e(j0,rUr),e(j0,Jee),e(Jee,tUr),e(j0,aUr),e(Xe,nUr),e(Xe,D0),e(D0,N3e),e(N3e,sUr),e(D0,lUr),e(D0,Yee),e(Yee,iUr),e(D0,dUr),e(Xe,cUr),e(Xe,G0),e(G0,q3e),e(q3e,fUr),e(G0,mUr),e(G0,Zee),e(Zee,gUr),e(G0,hUr),e(Xe,pUr),e(Xe,O0),e(O0,j3e),e(j3e,_Ur),e(O0,uUr),e(O0,Kee),e(Kee,bUr),e(O0,vUr),e(Xe,FUr),e(Xe,V0),e(V0,D3e),e(D3e,TUr),e(V0,MUr),e(V0,eoe),e(eoe,EUr),e(V0,CUr),e(Jr,wUr),M(X0,Jr,null),b(f,RVe,u),b(f,pf,u),e(pf,z0),e(z0,G3e),M(M$,G3e,null),e(pf,AUr),e(pf,O3e),e(O3e,LUr),b(f,PVe,u),b(f,Er,u),M(E$,Er,null),e(Er,yUr),e(Er,_f),e(_f,xUr),e(_f,ooe),e(ooe,$Ur),e(_f,kUr),e(_f,roe),e(roe,SUr),e(_f,RUr),e(Er,PUr),e(Er,C$),e(C$,BUr),e(C$,V3e),e(V3e,IUr),e(C$,NUr),e(Er,qUr),e(Er,Kt),M(w$,Kt,null),e(Kt,jUr),e(Kt,X3e),e(X3e,DUr),e(Kt,GUr),e(Kt,uf),e(uf,OUr),e(uf,z3e),e(z3e,VUr),e(uf,XUr),e(uf,toe),e(toe,zUr),e(uf,QUr),e(Kt,WUr),M(Q0,Kt,null),e(Er,HUr),e(Er,Yr),M(A$,Yr,null),e(Yr,UUr),e(Yr,Q3e),e(Q3e,JUr),e(Yr,YUr),e(Yr,xn),e(xn,ZUr),e(xn,W3e),e(W3e,KUr),e(xn,eJr),e(xn,H3e),e(H3e,oJr),e(xn,rJr),e(xn,U3e),e(U3e,tJr),e(xn,aJr),e(Yr,nJr),e(Yr,J3e),e(J3e,W0),e(W0,Y3e),e(Y3e,sJr),e(W0,lJr),e(W0,aoe),e(aoe,iJr),e(W0,dJr),e(Yr,cJr),M(H0,Yr,null),b(f,BVe,u),b(f,bf,u),e(bf,U0),e(U0,Z3e),M(L$,Z3e,null),e(bf,fJr),e(bf,K3e),e(K3e,mJr),b(f,IVe,u),b(f,Cr,u),M(y$,Cr,null),e(Cr,gJr),e(Cr,vf),e(vf,hJr),e(vf,noe),e(noe,pJr),e(vf,_Jr),e(vf,soe),e(soe,uJr),e(vf,bJr),e(Cr,vJr),e(Cr,x$),e(x$,FJr),e(x$,e0e),e(e0e,TJr),e(x$,MJr),e(Cr,EJr),e(Cr,ea),M($$,ea,null),e(ea,CJr),e(ea,o0e),e(o0e,wJr),e(ea,AJr),e(ea,Ff),e(Ff,LJr),e(Ff,r0e),e(r0e,yJr),e(Ff,xJr),e(Ff,loe),e(loe,$Jr),e(Ff,kJr),e(ea,SJr),M(J0,ea,null),e(Cr,RJr),e(Cr,Zr),M(k$,Zr,null),e(Zr,PJr),e(Zr,t0e),e(t0e,BJr),e(Zr,IJr),e(Zr,$n),e($n,NJr),e($n,a0e),e(a0e,qJr),e($n,jJr),e($n,n0e),e(n0e,DJr),e($n,GJr),e($n,s0e),e(s0e,OJr),e($n,VJr),e(Zr,XJr),e(Zr,S$),e(S$,Y0),e(Y0,l0e),e(l0e,zJr),e(Y0,QJr),e(Y0,ioe),e(ioe,WJr),e(Y0,HJr),e(S$,UJr),e(S$,Z0),e(Z0,i0e),e(i0e,JJr),e(Z0,YJr),e(Z0,doe),e(doe,ZJr),e(Z0,KJr),e(Zr,eYr),M(K0,Zr,null),b(f,NVe,u),b(f,Tf,u),e(Tf,ew),e(ew,d0e),M(R$,d0e,null),e(Tf,oYr),e(Tf,c0e),e(c0e,rYr),b(f,qVe,u),b(f,wr,u),M(P$,wr,null),e(wr,tYr),e(wr,Mf),e(Mf,aYr),e(Mf,coe),e(coe,nYr),e(Mf,sYr),e(Mf,foe),e(foe,lYr),e(Mf,iYr),e(wr,dYr),e(wr,B$),e(B$,cYr),e(B$,f0e),e(f0e,fYr),e(B$,mYr),e(wr,gYr),e(wr,oa),M(I$,oa,null),e(oa,hYr),e(oa,m0e),e(m0e,pYr),e(oa,_Yr),e(oa,Ef),e(Ef,uYr),e(Ef,g0e),e(g0e,bYr),e(Ef,vYr),e(Ef,moe),e(moe,FYr),e(Ef,TYr),e(oa,MYr),M(ow,oa,null),e(wr,EYr),e(wr,Kr),M(N$,Kr,null),e(Kr,CYr),e(Kr,h0e),e(h0e,wYr),e(Kr,AYr),e(Kr,kn),e(kn,LYr),e(kn,p0e),e(p0e,yYr),e(kn,xYr),e(kn,_0e),e(_0e,$Yr),e(kn,kYr),e(kn,u0e),e(u0e,SYr),e(kn,RYr),e(Kr,PYr),e(Kr,b0e),e(b0e,rw),e(rw,v0e),e(v0e,BYr),e(rw,IYr),e(rw,goe),e(goe,NYr),e(rw,qYr),e(Kr,jYr),M(tw,Kr,null),jVe=!0},p(f,[u]){const q$={};u&2&&(q$.$$scope={dirty:u,ctx:f}),Sf.$set(q$);const F0e={};u&2&&(F0e.$$scope={dirty:u,ctx:f}),Dg.$set(F0e);const T0e={};u&2&&(T0e.$$scope={dirty:u,ctx:f}),Mh.$set(T0e);const M0e={};u&2&&(M0e.$$scope={dirty:u,ctx:f}),tp.$set(M0e);const j$={};u&2&&(j$.$$scope={dirty:u,ctx:f}),ap.$set(j$);const E0e={};u&2&&(E0e.$$scope={dirty:u,ctx:f}),Cp.$set(E0e);const Sn={};u&2&&(Sn.$$scope={dirty:u,ctx:f}),wp.$set(Sn);const C0e={};u&2&&(C0e.$$scope={dirty:u,ctx:f}),yp.$set(C0e);const w0e={};u&2&&(w0e.$$scope={dirty:u,ctx:f}),yu.$set(w0e);const A0e={};u&2&&(A0e.$$scope={dirty:u,ctx:f}),$u.$set(A0e);const D$={};u&2&&(D$.$$scope={dirty:u,ctx:f}),M7.$set(D$);const L0e={};u&2&&(L0e.$$scope={dirty:u,ctx:f}),C7.$set(L0e);const G$={};u&2&&(G$.$$scope={dirty:u,ctx:f}),c1.$set(G$);const y0e={};u&2&&(y0e.$$scope={dirty:u,ctx:f}),m1.$set(y0e);const O$={};u&2&&(O$.$$scope={dirty:u,ctx:f}),Y1.$set(O$);const x0e={};u&2&&(x0e.$$scope={dirty:u,ctx:f}),K1.$set(x0e);const $0e={};u&2&&($0e.$$scope={dirty:u,ctx:f}),b2.$set($0e);const k0e={};u&2&&(k0e.$$scope={dirty:u,ctx:f}),F2.$set(k0e);const Cf={};u&2&&(Cf.$$scope={dirty:u,ctx:f}),ub.$set(Cf);const S0e={};u&2&&(S0e.$$scope={dirty:u,ctx:f}),vb.$set(S0e);const R0e={};u&2&&(R0e.$$scope={dirty:u,ctx:f}),Yb.$set(R0e);const P0e={};u&2&&(P0e.$$scope={dirty:u,ctx:f}),Kb.$set(P0e);const V$={};u&2&&(V$.$$scope={dirty:u,ctx:f}),lv.$set(V$);const B0e={};u&2&&(B0e.$$scope={dirty:u,ctx:f}),dv.$set(B0e);const I0e={};u&2&&(I0e.$$scope={dirty:u,ctx:f}),Wv.$set(I0e);const N0e={};u&2&&(N0e.$$scope={dirty:u,ctx:f}),Uv.$set(N0e);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),qF.$set(rt);const X$={};u&2&&(X$.$$scope={dirty:u,ctx:f}),DF.$set(X$);const q0e={};u&2&&(q0e.$$scope={dirty:u,ctx:f}),VF.$set(q0e);const z$={};u&2&&(z$.$$scope={dirty:u,ctx:f}),zF.$set(z$);const j0e={};u&2&&(j0e.$$scope={dirty:u,ctx:f}),n6.$set(j0e);const tt={};u&2&&(tt.$$scope={dirty:u,ctx:f}),l6.$set(tt);const D0e={};u&2&&(D0e.$$scope={dirty:u,ctx:f}),c6.$set(D0e);const wf={};u&2&&(wf.$$scope={dirty:u,ctx:f}),m6.$set(wf);const G0e={};u&2&&(G0e.$$scope={dirty:u,ctx:f}),p6.$set(G0e);const O0e={};u&2&&(O0e.$$scope={dirty:u,ctx:f}),u6.$set(O0e);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),y6.$set(L);const aw={};u&2&&(aw.$$scope={dirty:u,ctx:f}),$6.$set(aw);const V0e={};u&2&&(V0e.$$scope={dirty:u,ctx:f}),N6.$set(V0e);const X0e={};u&2&&(X0e.$$scope={dirty:u,ctx:f}),j6.$set(X0e);const nw={};u&2&&(nw.$$scope={dirty:u,ctx:f}),Y6.$set(nw);const z0e={};u&2&&(z0e.$$scope={dirty:u,ctx:f}),K6.$set(z0e);const Q0e={};u&2&&(Q0e.$$scope={dirty:u,ctx:f}),tT.$set(Q0e);const sw={};u&2&&(sw.$$scope={dirty:u,ctx:f}),nT.$set(sw);const W0e={};u&2&&(W0e.$$scope={dirty:u,ctx:f}),mT.$set(W0e);const H0e={};u&2&&(H0e.$$scope={dirty:u,ctx:f}),hT.$set(H0e);const lw={};u&2&&(lw.$$scope={dirty:u,ctx:f}),vT.$set(lw);const U0e={};u&2&&(U0e.$$scope={dirty:u,ctx:f}),TT.$set(U0e);const J0e={};u&2&&(J0e.$$scope={dirty:u,ctx:f}),wT.$set(J0e);const iw={};u&2&&(iw.$$scope={dirty:u,ctx:f}),LT.$set(iw);const Y0e={};u&2&&(Y0e.$$scope={dirty:u,ctx:f}),$T.$set(Y0e);const Z0e={};u&2&&(Z0e.$$scope={dirty:u,ctx:f}),ST.$set(Z0e);const dw={};u&2&&(dw.$$scope={dirty:u,ctx:f}),qT.$set(dw);const K0e={};u&2&&(K0e.$$scope={dirty:u,ctx:f}),DT.$set(K0e);const ewe={};u&2&&(ewe.$$scope={dirty:u,ctx:f}),VT.$set(ewe);const cw={};u&2&&(cw.$$scope={dirty:u,ctx:f}),zT.$set(cw);const owe={};u&2&&(owe.$$scope={dirty:u,ctx:f}),qM.$set(owe);const rwe={};u&2&&(rwe.$$scope={dirty:u,ctx:f}),DM.$set(rwe);const fw={};u&2&&(fw.$$scope={dirty:u,ctx:f}),cE.$set(fw);const twe={};u&2&&(twe.$$scope={dirty:u,ctx:f}),mE.$set(twe);const awe={};u&2&&(awe.$$scope={dirty:u,ctx:f}),AE.$set(awe);const mw={};u&2&&(mw.$$scope={dirty:u,ctx:f}),yE.$set(mw);const nwe={};u&2&&(nwe.$$scope={dirty:u,ctx:f}),RE.$set(nwe);const swe={};u&2&&(swe.$$scope={dirty:u,ctx:f}),BE.$set(swe);const gw={};u&2&&(gw.$$scope={dirty:u,ctx:f}),r4.$set(gw);const lwe={};u&2&&(lwe.$$scope={dirty:u,ctx:f}),a4.$set(lwe);const iwe={};u&2&&(iwe.$$scope={dirty:u,ctx:f}),p4.$set(iwe);const hw={};u&2&&(hw.$$scope={dirty:u,ctx:f}),u4.$set(hw);const dwe={};u&2&&(dwe.$$scope={dirty:u,ctx:f}),X4.$set(dwe);const cwe={};u&2&&(cwe.$$scope={dirty:u,ctx:f}),Q4.$set(cwe);const pw={};u&2&&(pw.$$scope={dirty:u,ctx:f}),cC.$set(pw);const fwe={};u&2&&(fwe.$$scope={dirty:u,ctx:f}),mC.$set(fwe);const mwe={};u&2&&(mwe.$$scope={dirty:u,ctx:f}),pC.$set(mwe);const _w={};u&2&&(_w.$$scope={dirty:u,ctx:f}),uC.$set(_w);const gwe={};u&2&&(gwe.$$scope={dirty:u,ctx:f}),vC.$set(gwe);const hwe={};u&2&&(hwe.$$scope={dirty:u,ctx:f}),TC.$set(hwe);const uw={};u&2&&(uw.$$scope={dirty:u,ctx:f}),OC.$set(uw);const pwe={};u&2&&(pwe.$$scope={dirty:u,ctx:f}),XC.$set(pwe);const _we={};u&2&&(_we.$$scope={dirty:u,ctx:f}),f5.$set(_we);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),g5.$set(bw);const uwe={};u&2&&(uwe.$$scope={dirty:u,ctx:f}),p5.$set(uwe);const bwe={};u&2&&(bwe.$$scope={dirty:u,ctx:f}),u5.$set(bwe);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),v5.$set(vw);const vwe={};u&2&&(vwe.$$scope={dirty:u,ctx:f}),T5.$set(vwe);const Fwe={};u&2&&(Fwe.$$scope={dirty:u,ctx:f}),U5.$set(Fwe);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),Y5.$set(Fw);const Twe={};u&2&&(Twe.$$scope={dirty:u,ctx:f}),i3.$set(Twe);const Mwe={};u&2&&(Mwe.$$scope={dirty:u,ctx:f}),c3.$set(Mwe);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),C3.$set(Tw);const Ewe={};u&2&&(Ewe.$$scope={dirty:u,ctx:f}),A3.$set(Ewe);const Cwe={};u&2&&(Cwe.$$scope={dirty:u,ctx:f}),N3.$set(Cwe);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),j3.$set(Mw);const wwe={};u&2&&(wwe.$$scope={dirty:u,ctx:f}),J3.$set(wwe);const Awe={};u&2&&(Awe.$$scope={dirty:u,ctx:f}),Z3.$set(Awe);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),d0.$set(Ew);const Lwe={};u&2&&(Lwe.$$scope={dirty:u,ctx:f}),f0.$set(Lwe);const ywe={};u&2&&(ywe.$$scope={dirty:u,ctx:f}),M0.$set(ywe);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),C0.$set(Cw);const xwe={};u&2&&(xwe.$$scope={dirty:u,ctx:f}),R0.$set(xwe);const $we={};u&2&&($we.$$scope={dirty:u,ctx:f}),B0.$set($we);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),X0.$set(ww);const kwe={};u&2&&(kwe.$$scope={dirty:u,ctx:f}),Q0.$set(kwe);const Swe={};u&2&&(Swe.$$scope={dirty:u,ctx:f}),H0.$set(Swe);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),J0.$set(Aw);const Rwe={};u&2&&(Rwe.$$scope={dirty:u,ctx:f}),K0.$set(Rwe);const Pwe={};u&2&&(Pwe.$$scope={dirty:u,ctx:f}),ow.$set(Pwe);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),tw.$set(Lw)},i(f){jVe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(Sf.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(PL.$$.fragment,f),E(Dg.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(Mh.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(QL.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(ZL.$$.fragment,f),E(Cp.$$.fragment,f),E(wp.$$.fragment,f),E(KL.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(yp.$$.fragment,f),E(ay.$$.fragment,f),E(yu.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E($u.$$.fragment,f),E(dy.$$.fragment,f),E(M7.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(C7.$$.fragment,f),E(hy.$$.fragment,f),E(c1.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(m1.$$.fragment,f),E(vy.$$.fragment,f),E(Y1.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(K1.$$.fragment,f),E(Cy.$$.fragment,f),E(b2.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(F2.$$.fragment,f),E(xy.$$.fragment,f),E(ub.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(vb.$$.fragment,f),E(Py.$$.fragment,f),E(Yb.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(Kb.$$.fragment,f),E(jy.$$.fragment,f),E(lv.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(dv.$$.fragment,f),E(Xy.$$.fragment,f),E(Wv.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(Uv.$$.fragment,f),E(Uy.$$.fragment,f),E(qF.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(DF.$$.fragment,f),E(e8.$$.fragment,f),E(VF.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(zF.$$.fragment,f),E(n8.$$.fragment,f),E(n6.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(l6.$$.fragment,f),E(c8.$$.fragment,f),E(c6.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(m6.$$.fragment,f),E(p8.$$.fragment,f),E(p6.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(u6.$$.fragment,f),E(F8.$$.fragment,f),E(y6.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E($6.$$.fragment,f),E(w8.$$.fragment,f),E(N6.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(j6.$$.fragment,f),E($8.$$.fragment,f),E(Y6.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(K6.$$.fragment,f),E(B8.$$.fragment,f),E(tT.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(nT.$$.fragment,f),E(G8.$$.fragment,f),E(mT.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(hT.$$.fragment,f),E(Q8.$$.fragment,f),E(vT.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(TT.$$.fragment,f),E(Y8.$$.fragment,f),E(wT.$$.fragment,f),E(K8.$$.fragment,f),E(e9.$$.fragment,f),E(r9.$$.fragment,f),E(LT.$$.fragment,f),E(t9.$$.fragment,f),E($T.$$.fragment,f),E(a9.$$.fragment,f),E(n9.$$.fragment,f),E(l9.$$.fragment,f),E(ST.$$.fragment,f),E(i9.$$.fragment,f),E(qT.$$.fragment,f),E(d9.$$.fragment,f),E(c9.$$.fragment,f),E(m9.$$.fragment,f),E(DT.$$.fragment,f),E(g9.$$.fragment,f),E(VT.$$.fragment,f),E(h9.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(zT.$$.fragment,f),E(b9.$$.fragment,f),E(qM.$$.fragment,f),E(v9.$$.fragment,f),E(F9.$$.fragment,f),E(M9.$$.fragment,f),E(DM.$$.fragment,f),E(E9.$$.fragment,f),E(cE.$$.fragment,f),E(C9.$$.fragment,f),E(w9.$$.fragment,f),E(L9.$$.fragment,f),E(mE.$$.fragment,f),E(y9.$$.fragment,f),E(AE.$$.fragment,f),E(x9.$$.fragment,f),E($9.$$.fragment,f),E(S9.$$.fragment,f),E(yE.$$.fragment,f),E(R9.$$.fragment,f),E(RE.$$.fragment,f),E(P9.$$.fragment,f),E(B9.$$.fragment,f),E(N9.$$.fragment,f),E(BE.$$.fragment,f),E(q9.$$.fragment,f),E(r4.$$.fragment,f),E(j9.$$.fragment,f),E(D9.$$.fragment,f),E(O9.$$.fragment,f),E(a4.$$.fragment,f),E(V9.$$.fragment,f),E(p4.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(u4.$$.fragment,f),E(H9.$$.fragment,f),E(X4.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(Z9.$$.fragment,f),E(Q4.$$.fragment,f),E(K9.$$.fragment,f),E(cC.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(mC.$$.fragment,f),E(ax.$$.fragment,f),E(pC.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(uC.$$.fragment,f),E(cx.$$.fragment,f),E(vC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(TC.$$.fragment,f),E(px.$$.fragment,f),E(OC.$$.fragment,f),E(_x.$$.fragment,f),E(ux.$$.fragment,f),E(vx.$$.fragment,f),E(XC.$$.fragment,f),E(Fx.$$.fragment,f),E(f5.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(g5.$$.fragment,f),E(wx.$$.fragment,f),E(p5.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(u5.$$.fragment,f),E($x.$$.fragment,f),E(v5.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Px.$$.fragment,f),E(T5.$$.fragment,f),E(Bx.$$.fragment,f),E(U5.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(Y5.$$.fragment,f),E(Dx.$$.fragment,f),E(i3.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(c3.$$.fragment,f),E(zx.$$.fragment,f),E(C3.$$.fragment,f),E(Qx.$$.fragment,f),E(Wx.$$.fragment,f),E(Ux.$$.fragment,f),E(A3.$$.fragment,f),E(Jx.$$.fragment,f),E(N3.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(e$.$$.fragment,f),E(j3.$$.fragment,f),E(o$.$$.fragment,f),E(J3.$$.fragment,f),E(r$.$$.fragment,f),E(t$.$$.fragment,f),E(n$.$$.fragment,f),E(Z3.$$.fragment,f),E(s$.$$.fragment,f),E(d0.$$.fragment,f),E(l$.$$.fragment,f),E(i$.$$.fragment,f),E(c$.$$.fragment,f),E(f0.$$.fragment,f),E(f$.$$.fragment,f),E(M0.$$.fragment,f),E(m$.$$.fragment,f),E(g$.$$.fragment,f),E(p$.$$.fragment,f),E(C0.$$.fragment,f),E(_$.$$.fragment,f),E(R0.$$.fragment,f),E(u$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(B0.$$.fragment,f),E(T$.$$.fragment,f),E(X0.$$.fragment,f),E(M$.$$.fragment,f),E(E$.$$.fragment,f),E(w$.$$.fragment,f),E(Q0.$$.fragment,f),E(A$.$$.fragment,f),E(H0.$$.fragment,f),E(L$.$$.fragment,f),E(y$.$$.fragment,f),E($$.$$.fragment,f),E(J0.$$.fragment,f),E(k$.$$.fragment,f),E(K0.$$.fragment,f),E(R$.$$.fragment,f),E(P$.$$.fragment,f),E(I$.$$.fragment,f),E(ow.$$.fragment,f),E(N$.$$.fragment,f),E(tw.$$.fragment,f),jVe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(Sf.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(PL.$$.fragment,f),C(Dg.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(Mh.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(QL.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(ZL.$$.fragment,f),C(Cp.$$.fragment,f),C(wp.$$.fragment,f),C(KL.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(yp.$$.fragment,f),C(ay.$$.fragment,f),C(yu.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C($u.$$.fragment,f),C(dy.$$.fragment,f),C(M7.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(C7.$$.fragment,f),C(hy.$$.fragment,f),C(c1.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(m1.$$.fragment,f),C(vy.$$.fragment,f),C(Y1.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(K1.$$.fragment,f),C(Cy.$$.fragment,f),C(b2.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(F2.$$.fragment,f),C(xy.$$.fragment,f),C(ub.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(vb.$$.fragment,f),C(Py.$$.fragment,f),C(Yb.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(Kb.$$.fragment,f),C(jy.$$.fragment,f),C(lv.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(dv.$$.fragment,f),C(Xy.$$.fragment,f),C(Wv.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(Uv.$$.fragment,f),C(Uy.$$.fragment,f),C(qF.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(DF.$$.fragment,f),C(e8.$$.fragment,f),C(VF.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(zF.$$.fragment,f),C(n8.$$.fragment,f),C(n6.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(l6.$$.fragment,f),C(c8.$$.fragment,f),C(c6.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(m6.$$.fragment,f),C(p8.$$.fragment,f),C(p6.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(u6.$$.fragment,f),C(F8.$$.fragment,f),C(y6.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C($6.$$.fragment,f),C(w8.$$.fragment,f),C(N6.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(j6.$$.fragment,f),C($8.$$.fragment,f),C(Y6.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(K6.$$.fragment,f),C(B8.$$.fragment,f),C(tT.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(nT.$$.fragment,f),C(G8.$$.fragment,f),C(mT.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(hT.$$.fragment,f),C(Q8.$$.fragment,f),C(vT.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(TT.$$.fragment,f),C(Y8.$$.fragment,f),C(wT.$$.fragment,f),C(K8.$$.fragment,f),C(e9.$$.fragment,f),C(r9.$$.fragment,f),C(LT.$$.fragment,f),C(t9.$$.fragment,f),C($T.$$.fragment,f),C(a9.$$.fragment,f),C(n9.$$.fragment,f),C(l9.$$.fragment,f),C(ST.$$.fragment,f),C(i9.$$.fragment,f),C(qT.$$.fragment,f),C(d9.$$.fragment,f),C(c9.$$.fragment,f),C(m9.$$.fragment,f),C(DT.$$.fragment,f),C(g9.$$.fragment,f),C(VT.$$.fragment,f),C(h9.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(zT.$$.fragment,f),C(b9.$$.fragment,f),C(qM.$$.fragment,f),C(v9.$$.fragment,f),C(F9.$$.fragment,f),C(M9.$$.fragment,f),C(DM.$$.fragment,f),C(E9.$$.fragment,f),C(cE.$$.fragment,f),C(C9.$$.fragment,f),C(w9.$$.fragment,f),C(L9.$$.fragment,f),C(mE.$$.fragment,f),C(y9.$$.fragment,f),C(AE.$$.fragment,f),C(x9.$$.fragment,f),C($9.$$.fragment,f),C(S9.$$.fragment,f),C(yE.$$.fragment,f),C(R9.$$.fragment,f),C(RE.$$.fragment,f),C(P9.$$.fragment,f),C(B9.$$.fragment,f),C(N9.$$.fragment,f),C(BE.$$.fragment,f),C(q9.$$.fragment,f),C(r4.$$.fragment,f),C(j9.$$.fragment,f),C(D9.$$.fragment,f),C(O9.$$.fragment,f),C(a4.$$.fragment,f),C(V9.$$.fragment,f),C(p4.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(u4.$$.fragment,f),C(H9.$$.fragment,f),C(X4.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(Z9.$$.fragment,f),C(Q4.$$.fragment,f),C(K9.$$.fragment,f),C(cC.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(mC.$$.fragment,f),C(ax.$$.fragment,f),C(pC.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(uC.$$.fragment,f),C(cx.$$.fragment,f),C(vC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(TC.$$.fragment,f),C(px.$$.fragment,f),C(OC.$$.fragment,f),C(_x.$$.fragment,f),C(ux.$$.fragment,f),C(vx.$$.fragment,f),C(XC.$$.fragment,f),C(Fx.$$.fragment,f),C(f5.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(g5.$$.fragment,f),C(wx.$$.fragment,f),C(p5.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(u5.$$.fragment,f),C($x.$$.fragment,f),C(v5.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Px.$$.fragment,f),C(T5.$$.fragment,f),C(Bx.$$.fragment,f),C(U5.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(Y5.$$.fragment,f),C(Dx.$$.fragment,f),C(i3.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(c3.$$.fragment,f),C(zx.$$.fragment,f),C(C3.$$.fragment,f),C(Qx.$$.fragment,f),C(Wx.$$.fragment,f),C(Ux.$$.fragment,f),C(A3.$$.fragment,f),C(Jx.$$.fragment,f),C(N3.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(e$.$$.fragment,f),C(j3.$$.fragment,f),C(o$.$$.fragment,f),C(J3.$$.fragment,f),C(r$.$$.fragment,f),C(t$.$$.fragment,f),C(n$.$$.fragment,f),C(Z3.$$.fragment,f),C(s$.$$.fragment,f),C(d0.$$.fragment,f),C(l$.$$.fragment,f),C(i$.$$.fragment,f),C(c$.$$.fragment,f),C(f0.$$.fragment,f),C(f$.$$.fragment,f),C(M0.$$.fragment,f),C(m$.$$.fragment,f),C(g$.$$.fragment,f),C(p$.$$.fragment,f),C(C0.$$.fragment,f),C(_$.$$.fragment,f),C(R0.$$.fragment,f),C(u$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(B0.$$.fragment,f),C(T$.$$.fragment,f),C(X0.$$.fragment,f),C(M$.$$.fragment,f),C(E$.$$.fragment,f),C(w$.$$.fragment,f),C(Q0.$$.fragment,f),C(A$.$$.fragment,f),C(H0.$$.fragment,f),C(L$.$$.fragment,f),C(y$.$$.fragment,f),C($$.$$.fragment,f),C(J0.$$.fragment,f),C(k$.$$.fragment,f),C(K0.$$.fragment,f),C(R$.$$.fragment,f),C(P$.$$.fragment,f),C(I$.$$.fragment,f),C(ow.$$.fragment,f),C(N$.$$.fragment,f),C(tw.$$.fragment,f),jVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Lf),f&&t(at),f&&t(Oe),f&&t(Qe),f&&t(xf),w(xa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(PGe),f&&t(Li),w(yL),f&&t(BGe),f&&t(Nn),f&&t(IGe),w(xL,f),f&&t(NGe),f&&t(nS),f&&t(qGe),w(Sf,f),f&&t(jGe),f&&t(yi),w($L),f&&t(DGe),f&&t(wo),w(kL),w(PL),w(Dg),w(BL),f&&t(GGe),f&&t($i),w(IL),f&&t(OGe),f&&t(Ao),w(NL),w(DL),w(Mh),w(GL),f&&t(VGe),f&&t(ki),w(OL),f&&t(XGe),f&&t(Lo),w(VL),w(QL),w(tp),w(ap),w(WL),f&&t(zGe),f&&t(Si),w(HL),f&&t(QGe),f&&t(yo),w(UL),w(ZL),w(Cp),w(wp),w(KL),f&&t(WGe),f&&t(Pi),w(ey),f&&t(HGe),f&&t(xo),w(oy),w(ty),w(yp),w(ay),w(yu),f&&t(UGe),f&&t(Ni),w(ny),f&&t(JGe),f&&t($o),w(sy),w(iy),w($u),w(dy),w(M7),f&&t(YGe),f&&t(Di),w(cy),f&&t(ZGe),f&&t(ko),w(fy),w(gy),w(C7),w(hy),w(c1),f&&t(KGe),f&&t(Vi),w(py),f&&t(eOe),f&&t(So),w(_y),w(by),w(m1),w(vy),w(Y1),f&&t(oOe),f&&t(Qi),w(Fy),f&&t(rOe),f&&t(Ro),w(Ty),w(Ey),w(K1),w(Cy),w(b2),f&&t(tOe),f&&t(Ui),w(wy),f&&t(aOe),f&&t(Po),w(Ay),w(yy),w(F2),w(xy),w(ub),f&&t(nOe),f&&t(Zi),w($y),f&&t(sOe),f&&t(Bo),w(ky),w(Ry),w(vb),w(Py),w(Yb),f&&t(lOe),f&&t(od),w(By),f&&t(iOe),f&&t(Io),w(Iy),w(qy),w(Kb),w(jy),w(lv),f&&t(dOe),f&&t(ad),w(Dy),f&&t(cOe),f&&t(qo),w(Gy),w(Vy),w(dv),w(Xy),w(Wv),f&&t(fOe),f&&t(ld),w(zy),f&&t(mOe),f&&t(jo),w(Qy),w(Hy),w(Uv),w(Uy),w(qF),f&&t(gOe),f&&t(cd),w(Jy),f&&t(hOe),f&&t(Do),w(Yy),w(Ky),w(DF),w(e8),w(VF),f&&t(pOe),f&&t(gd),w(o8),f&&t(_Oe),f&&t(Go),w(r8),w(a8),w(zF),w(n8),w(n6),f&&t(uOe),f&&t(_d),w(s8),f&&t(bOe),f&&t(Oo),w(l8),w(d8),w(l6),w(c8),w(c6),f&&t(vOe),f&&t(vd),w(f8),f&&t(FOe),f&&t(Vo),w(m8),w(h8),w(m6),w(p8),w(p6),f&&t(TOe),f&&t(Md),w(_8),f&&t(MOe),f&&t(Xo),w(u8),w(v8),w(u6),w(F8),w(y6),f&&t(EOe),f&&t(wd),w(T8),f&&t(COe),f&&t(zo),w(M8),w(C8),w($6),w(w8),w(N6),f&&t(wOe),f&&t(yd),w(A8),f&&t(AOe),f&&t(Qo),w(L8),w(x8),w(j6),w($8),w(Y6),f&&t(LOe),f&&t(kd),w(k8),f&&t(yOe),f&&t(Wo),w(S8),w(P8),w(K6),w(B8),w(tT),f&&t(xOe),f&&t(Pd),w(N8),f&&t($Oe),f&&t(Ho),w(q8),w(D8),w(nT),w(G8),w(mT),f&&t(kOe),f&&t(Nd),w(O8),f&&t(SOe),f&&t(Uo),w(V8),w(z8),w(hT),w(Q8),w(vT),f&&t(ROe),f&&t(Gd),w(W8),f&&t(POe),f&&t(Jo),w(H8),w(J8),w(TT),w(Y8),w(wT),f&&t(BOe),f&&t(Xd),w(K8),f&&t(IOe),f&&t(Yo),w(e9),w(r9),w(LT),w(t9),w($T),f&&t(NOe),f&&t(Wd),w(a9),f&&t(qOe),f&&t(Zo),w(n9),w(l9),w(ST),w(i9),w(qT),f&&t(jOe),f&&t(Jd),w(d9),f&&t(DOe),f&&t(Ko),w(c9),w(m9),w(DT),w(g9),w(VT),f&&t(GOe),f&&t(Kd),w(h9),f&&t(OOe),f&&t(er),w(p9),w(u9),w(zT),w(b9),w(qM),f&&t(VOe),f&&t(rc),w(v9),f&&t(XOe),f&&t(or),w(F9),w(M9),w(DM),w(E9),w(cE),f&&t(zOe),f&&t(nc),w(C9),f&&t(QOe),f&&t(rr),w(w9),w(L9),w(mE),w(y9),w(AE),f&&t(WOe),f&&t(ic),w(x9),f&&t(HOe),f&&t(tr),w($9),w(S9),w(yE),w(R9),w(RE),f&&t(UOe),f&&t(fc),w(P9),f&&t(JOe),f&&t(ar),w(B9),w(N9),w(BE),w(q9),w(r4),f&&t(YOe),f&&t(hc),w(j9),f&&t(ZOe),f&&t(nr),w(D9),w(O9),w(a4),w(V9),w(p4),f&&t(KOe),f&&t(uc),w(X9),f&&t(eVe),f&&t(sr),w(z9),w(W9),w(u4),w(H9),w(X4),f&&t(oVe),f&&t(Fc),w(U9),f&&t(rVe),f&&t(lr),w(J9),w(Z9),w(Q4),w(K9),w(cC),f&&t(tVe),f&&t(Ec),w(ex),f&&t(aVe),f&&t(ir),w(ox),w(tx),w(mC),w(ax),w(pC),f&&t(nVe),f&&t(Ac),w(sx),f&&t(sVe),f&&t(dr),w(lx),w(dx),w(uC),w(cx),w(vC),f&&t(lVe),f&&t(xc),w(fx),f&&t(iVe),f&&t(cr),w(mx),w(hx),w(TC),w(px),w(OC),f&&t(dVe),f&&t(Sc),w(_x),f&&t(cVe),f&&t(fr),w(ux),w(vx),w(XC),w(Fx),w(f5),f&&t(fVe),f&&t(Bc),w(Tx),f&&t(mVe),f&&t(mr),w(Mx),w(Cx),w(g5),w(wx),w(p5),f&&t(gVe),f&&t(qc),w(Ax),f&&t(hVe),f&&t(gr),w(Lx),w(xx),w(u5),w($x),w(v5),f&&t(pVe),f&&t(Gc),w(kx),f&&t(_Ve),f&&t(hr),w(Sx),w(Px),w(T5),w(Bx),w(U5),f&&t(uVe),f&&t(Xc),w(Ix),f&&t(bVe),f&&t(pr),w(Nx),w(jx),w(Y5),w(Dx),w(i3),f&&t(vVe),f&&t(Wc),w(Gx),f&&t(FVe),f&&t(_r),w(Ox),w(Xx),w(c3),w(zx),w(C3),f&&t(TVe),f&&t(Jc),w(Qx),f&&t(MVe),f&&t(ur),w(Wx),w(Ux),w(A3),w(Jx),w(N3),f&&t(EVe),f&&t(Kc),w(Yx),f&&t(CVe),f&&t(br),w(Zx),w(e$),w(j3),w(o$),w(J3),f&&t(wVe),f&&t(rf),w(r$),f&&t(AVe),f&&t(vr),w(t$),w(n$),w(Z3),w(s$),w(d0),f&&t(LVe),f&&t(nf),w(l$),f&&t(yVe),f&&t(Fr),w(i$),w(c$),w(f0),w(f$),w(M0),f&&t(xVe),f&&t(df),w(m$),f&&t($Ve),f&&t(Tr),w(g$),w(p$),w(C0),w(_$),w(R0),f&&t(kVe),f&&t(mf),w(u$),f&&t(SVe),f&&t(Mr),w(b$),w(F$),w(B0),w(T$),w(X0),f&&t(RVe),f&&t(pf),w(M$),f&&t(PVe),f&&t(Er),w(E$),w(w$),w(Q0),w(A$),w(H0),f&&t(BVe),f&&t(bf),w(L$),f&&t(IVe),f&&t(Cr),w(y$),w($$),w(J0),w(k$),w(K0),f&&t(NVe),f&&t(Tf),w(R$),f&&t(qVe),f&&t(wr),w(P$),w(I$),w(ow),w(N$),w(tw)}}}const dOt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cOt(x){return iDt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class uOt extends aDt{constructor(g){super();nDt(this,g,cOt,iOt,sDt,{})}}export{uOt as default,dOt as metadata};
