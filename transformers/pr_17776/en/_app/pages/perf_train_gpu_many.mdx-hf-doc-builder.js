import{S as j6,i as A6,s as x6,e as a,k as h,w as m,t as o,M as M6,c as s,d as t,m as f,a as i,x as v,h as r,b as c,N as ee,G as l,g as p,y as P,L as $6,q as w,o as y,B as b,v as N6}from"../chunks/vendor-hf-doc-builder.js";import{I as U}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as Ip}from"../chunks/CodeBlock-hf-doc-builder.js";function z6(K_){let te,Sp,le,ke,no,vt,Qd,po,eu,Op,ha,tu,jp,fa,lu,Ap,ae,Ue,ho,Pt,au,fo,su,xp,ca,iu,Mp,g,da,co,ou,ru,nu,ua,uo,pu,hu,fu,ma,mo,cu,du,uu,va,vo,mu,vu,Pu,Pa,Po,wu,yu,$p,wa,bu,Np,se,Ie,wo,wt,_u,yo,Eu,zp,ya,bo,gu,Rp,$,yt,_o,Du,Lu,bt,Eo,Tu,Gu,go,ku,Uu,_t,Do,Iu,Su,ie,Lo,To,Ou,ju,Go,ko,Au,xu,oe,Uo,Mu,$u,Io,Nu,zu,So,Ru,Cu,Et,Oo,Zu,Bu,gt,jo,qu,Fu,Ao,Vu,Cp,ba,xo,Wu,Zp,Se,Dt,Mo,Hu,Yu,Lt,$o,Xu,Ku,No,Ju,Qu,Tt,zo,em,tm,Ro,Co,lm,Bp,re,Oe,Zo,Gt,am,Bo,sm,qp,I,im,qo,om,rm,Fo,nm,pm,kt,hm,fm,Fp,ne,je,Vo,Ut,cm,Wo,dm,Vp,pe,Ho,um,mm,Yo,vm,Pm,Wp,Ae,Xo,wm,ym,Ko,bm,Hp,_a,_m,Yp,It,St,Em,gm,Xp,xe,Jo,Dm,Lm,Ea,Tm,Ot,Qo,Gm,km,jt,Um,er,Im,Sm,Kp,At,xt,Om,jm,Jp,ga,Am,Qp,D,tr,xm,Mm,lr,$m,Nm,Mt,zm,ar,Rm,Cm,Zm,Da,Bm,sr,qm,Fm,ir,Vm,eh,La,Wm,th,Me,Hm,$t,Ym,Xm,lh,Ta,Km,ah,Ga,Jm,sh,ka,Qm,ih,$e,ev,Nt,tv,lv,oh,Ua,av,rh,Ne,or,he,Ia,sv,iv,rr,ov,rv,Sa,nv,pv,fe,ce,Oa,hv,fv,nr,cv,dv,ja,uv,mv,de,Aa,vv,Pv,pr,wv,yv,xa,bv,_v,ue,Ma,Ev,gv,hr,Dv,Lv,$a,Tv,nh,Na,Gv,ph,za,kv,hh,Ra,Uv,fh,Ca,Iv,ch,zt,fr,Sv,Ov,dh,Rt,uh,E,jv,cr,Av,xv,dr,Mv,$v,ur,Nv,zv,mr,Rv,Cv,vr,Zv,mh,me,ze,Pr,Ct,Bv,wr,qv,vh,ve,Fv,Zt,Vv,Wv,Za,J_,Ph,Re,Hv,yr,Yv,Xv,wh,Ba,Kv,yh,Bt,bh,qa,Jv,_h,Fa,Qv,Eh,qt,gh,Va,eP,Dh,Wa,tP,Lh,Ft,Th,Ha,lP,Gh,Ya,aP,kh,Xa,sP,Uh,Ka,iP,Ih,Ja,oP,Sh,Qa,rP,Oh,es,nP,jh,ts,pP,Ah,ls,hP,xh,N,br,fP,cP,_r,dP,uP,Er,mP,Mh,as,vP,$h,ss,PP,Nh,is,wP,zh,os,yP,Rh,rs,bP,Ch,z,ns,Vt,_P,EP,gP,ps,Wt,DP,LP,TP,gr,Ht,Dr,GP,kP,Zh,Pe,Ce,Lr,Yt,UP,Tr,IP,Bh,Ze,SP,Gr,OP,jP,qh,hs,AP,Fh,Xt,Vh,fs,xP,Wh,cs,MP,Hh,ds,$P,Yh,us,NP,Xh,Be,kr,zP,RP,Ur,CP,Kh,ms,ZP,Jh,qe,BP,Kt,qP,FP,Qh,vs,Ps,Q_,ef,ws,VP,tf,ys,WP,lf,R,HP,Ir,YP,XP,Sr,KP,JP,af,Fe,QP,Or,e1,t1,sf,Ve,l1,jr,a1,s1,of,C,i1,Ar,o1,r1,xr,n1,p1,rf,bs,h1,nf,Z,f1,Mr,c1,d1,$r,u1,m1,pf,S,v1,Nr,P1,w1,zr,y1,b1,Rr,_1,E1,hf,_s,g1,ff,Es,D1,cf,O,Cr,L1,T1,Zr,G1,k1,Br,U1,I1,qr,S1,df,gs,O1,uf,We,Fr,j1,A1,Vr,x1,mf,Ds,M1,vf,j,Jt,$1,Wr,N1,z1,R1,Ls,C1,Qt,Z1,B1,Hr,q1,F1,Yr,V1,Pf,Ts,W1,wf,Gs,H1,yf,u,el,tl,Y1,X1,ll,K1,J1,Xr,al,Q1,ew,Kr,sl,tw,lw,ks,il,aw,sw,iw,Jr,ol,ow,rw,Us,rl,nw,pw,hw,Is,nl,fw,cw,bf,He,dw,Qr,uw,mw,_f,Ss,vw,Ef,we,Pw,pl,ww,yw,Os,eE,gf,js,bw,Df,As,_w,Lf,Ye,Ew,en,gw,Dw,Tf,ye,Xe,tn,hl,Lw,ln,Tw,Gf,xs,Gw,kf,B,kw,fl,Uw,Iw,cl,Sw,Ow,Uf,q,jw,an,Aw,xw,sn,Mw,$w,If,L,Nw,on,zw,Rw,rn,Cw,Zw,nn,Bw,qw,pn,Fw,Vw,Sf,dl,Ww,Ms,tE,Of,d,Hw,hn,Yw,Xw,fn,Kw,Jw,cn,Qw,e2,dn,t2,l2,un,a2,s2,mn,i2,o2,vn,r2,n2,$s,lE,jf,ul,p2,Ns,aE,Af,ml,h2,zs,sE,xf,Rs,f2,Mf,F,c2,vl,d2,u2,Pl,m2,v2,$f,Cs,P2,Nf,Zs,w2,zf,Bs,qs,y2,wl,b2,Rf,Fs,_2,Cf,A,Vs,yl,E2,g2,D2,Ws,bl,L2,T2,G2,Hs,_l,k2,U2,I2,Ys,El,S2,O2,Zf,Xs,j2,Bf,V,Pn,A2,x2,gl,M2,Dl,$2,N2,z2,Ks,R2,Ll,C2,qf,be,Ke,wn,Tl,Z2,yn,B2,Ff,Je,q2,Gl,F2,V2,Vf,Js,Qs,iE,Wf,ei,W2,Hf,ti,H2,Yf,li,Y2,Xf,T,bn,kl,X2,K2,_n,Ul,J2,Q2,En,Il,ey,ty,gn,Sl,ly,ay,Dn,Ol,sy,Kf,ai,iy,Jf,_e,Qe,Ln,jl,oy,Tn,ry,Qf,si,ny,ec,ii,oi,oE,tc,et,py,Al,hy,fy,lc,ri,cy,ac,ni,dy,sc,G,pi,xl,uy,my,vy,Gn,Ml,Py,wy,kn,$l,yy,by,Un,Nl,_y,Ey,In,zl,gy,ic,hi,Dy,oc,Ee,tt,Sn,Rl,Ly,On,Ty,rc,lt,Gy,fi,ky,Uy,nc,ci,Iy,pc,di,Sy,hc,at,Oy,jn,jy,Ay,fc,ui,xy,cc,mi,My,dc,vi,$y,uc,st,it,Cl,Ny,zy,Zl,Ry,Cy,Zy,An,Bl,By,mc,Pi,qy,vc,wi,xn,ql,Fy,Pc,yi,Vy,wc,ge,ot,Mn,Fl,Wy,$n,Hy,yc,Vl,Wl,Yy,Xy,bc,Hl,Ky,Yl,Jy,_c,bi,Qy,Ec,x,Nn,eb,tb,zn,lb,ab,Rn,sb,ib,Cn,ob,gc,_i,rb,Dc,Ei,Zn,nb,Lc,gi,pb,Tc,Di,Bn,hb,Gc,Li,fb,kc,Ti,qn,cb,Uc,Gi,db,Ic,ki,Fn,ub,Sc,Ui,mb,Oc,Ii,Si,rE,jc,Oi,vb,Ac,ji,Pb,xc,Ai,wb,Mc,rt,yb,Xl,bb,_b,$c,De,nt,Vn,Kl,Eb,Wn,gb,Nc,xi,Db,zc,Mi,Hn,Lb,Rc,W,Jl,Yn,Tb,Gb,Xn,Kn,kb,Ub,Ql,Jn,Ib,Sb,ea,Qn,Ob,jb,ep,Ab,xb,tp,lp,Mb,Cc,$i,Le,$b,ta,Nb,zb,ap,Rb,Cb,Zc,Ni,sp,Zb,Bc,H,la,ip,Bb,qb,aa,op,Fb,Vb,rp,Wb,Hb,sa,np,Yb,Xb,Te,pp,hp,Kb,Jb,fp,cp,Qb,e_,Ge,dp,t_,l_,up,a_,s_,mp,i_,o_,ia,vp,r_,n_,oa,Pp,p_,h_,wp,f_,qc,zi,yp,c_,Fc,pt,ra,bp,d_,u_,na,_p,m_,v_,Ep,P_,w_,pa,gp,y_,b_,Dp,Lp,__,Vc;return vt=new U({}),Pt=new U({}),wt=new U({}),Gt=new U({}),Ut=new U({}),Rt=new Ip({props:{code:`




`,highlighted:`
<span class="hljs-comment"># DP</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">110</span>.<span class="hljs-string">5948</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">808</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/ NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">101</span>.<span class="hljs-string">9003</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">963</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}

<span class="hljs-comment"># DDP w/o NVlink</span>
<span class="hljs-string">rm</span> -<span class="hljs-string">r</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span>; <span class="hljs-string">NCCL_P2P_DISABLE</span>=<span class="hljs-string">1</span> <span class="hljs-string">CUDA_VISIBLE_DEVICES</span>=<span class="hljs-string">0</span>,<span class="hljs-string">1</span> \\
<span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">torch</span>.<span class="hljs-string">distributed</span>.<span class="hljs-string">launch</span> <span class="hljs-built_in">--nproc_per_node</span> <span class="hljs-string">2</span> <span class="hljs-string">examples</span>/<span class="hljs-string">pytorch</span>/<span class="hljs-string">language-modeling</span>/<span class="hljs-string">run_clm</span>.<span class="hljs-string">py</span> \\
<span class="hljs-built_in">--model_name_or_path</span> <span class="hljs-string">gpt2</span> <span class="hljs-built_in">--dataset_name</span> <span class="hljs-string">wikitext</span> <span class="hljs-built_in">--dataset_config_name</span> <span class="hljs-string">wikitext-2-raw-v1</span> \\
<span class="hljs-built_in">--do_train</span> <span class="hljs-built_in">--output_dir</span> /<span class="hljs-string">tmp</span>/<span class="hljs-string">test-clm</span> <span class="hljs-built_in">--per_device_train_batch_size</span> <span class="hljs-string">4</span> <span class="hljs-built_in">--max_steps</span> <span class="hljs-string">200</span>

{<span class="hljs-string">&#x27;train_runtime&#x27;</span>: <span class="hljs-string">131</span>.<span class="hljs-string">4367</span>, <span class="hljs-string">&#x27;train_samples_per_second&#x27;</span>: <span class="hljs-string">1</span>.<span class="hljs-string">522</span>, <span class="hljs-string">&#x27;epoch&#x27;</span>: <span class="hljs-string">0</span>.<span class="hljs-string">69</span>}`}}),Ct=new U({}),Bt=new Ip({props:{code:`La | Lb | Lc
---|----|---
a0 | b0 | c0
a1 | b1 | c1
a2 | b2 | c2`,highlighted:`La |<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a0 </span>|<span class="hljs-string"> b0 </span>|<span class="hljs-string"> c0
a1 </span>|<span class="hljs-string"> b1 </span>|<span class="hljs-string"> c1
a2 </span>|<span class="hljs-string"> b2 </span>|<span class="hljs-string"> c2</span>`}}),qt=new Ip({props:{code:`
`,highlighted:`GPU0:
La |<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a0 </span>|<span class="hljs-string"> b0 </span>|<span class="hljs-string"> c0

GPU1:
La </span>|<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a1 </span>|<span class="hljs-string"> b1 </span>|<span class="hljs-string"> c1

GPU2:
La </span>|<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a2 </span>|<span class="hljs-string"> b2 </span>|<span class="hljs-string"> c2</span>`}}),Ft=new Ip({props:{code:`x0 => GPU0
x1 => GPU1
x2 => GPU2`,highlighted:`<span class="hljs-attribute">x0</span> <span class="hljs-operator">=</span>&gt; GPU0
<span class="hljs-attribute">x1</span> <span class="hljs-operator">=</span>&gt; GPU1
<span class="hljs-attribute">x2</span> <span class="hljs-operator">=</span>&gt; GPU2`}}),Yt=new U({}),Xt=new Ip({props:{code:`===================  ===================
|  0 | 1 | 2 | 3  |  |  4 | 5 | 6 | 7  |
===================  ===================
        gpu0                 gpu1`,highlighted:`===================  ===================
|<span class="hljs-string">  0 </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string"> 2 </span>|<span class="hljs-string"> 3  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> 5 </span>|<span class="hljs-string"> 6 </span>|<span class="hljs-string"> 7  </span>|
===================  ===================
        gpu0                 gpu1`}}),hl=new U({}),Tl=new U({}),jl=new U({}),Rl=new U({}),Fl=new U({}),Kl=new U({}),{c(){te=a("meta"),Sp=h(),le=a("h1"),ke=a("a"),no=a("span"),m(vt.$$.fragment),Qd=h(),po=a("span"),eu=o("Efficient Training on Multiple GPUs"),Op=h(),ha=a("p"),tu=o("When training on a single GPU is too slow or the model weights don\u2019t fit in a single GPUs memory we use a mutli-GPU setup. Switching from a single GPU to multiple requires some form of parallelism as the work needs to be distributed. There are several techniques to achieve parallism such as data, tensor, or pipeline parallism. However, there is no one solution to fit them all and which settings works best depends on the hardware you are running on. While the main concepts most likely will apply to any other framework, this article is focused on PyTorch-based implementations."),jp=h(),fa=a("p"),lu=o("We will first discuss in depth various 1D parallelism techniques and their pros and cons and then look at how they can be combined into 2D and 3D parallelism to enable an even faster training and to support even bigger models. Various other powerful alternative approaches will be presented."),Ap=h(),ae=a("h2"),Ue=a("a"),ho=a("span"),m(Pt.$$.fragment),au=h(),fo=a("span"),su=o("Concepts"),xp=h(),ca=a("p"),iu=o("The following is the brief description of the main concepts that will be described later in depth in this document."),Mp=h(),g=a("ol"),da=a("li"),co=a("strong"),ou=o("DataParallel (DP)"),ru=o(" - the same setup is replicated multiple times, and each being fed a slice of the data. The processing is done in parallel and all setups are synchronized at the end of each training step."),nu=h(),ua=a("li"),uo=a("strong"),pu=o("TensorParallel (TP)"),hu=o(" - each tensor is split up into multiple chunks, so instead of having the whole tensor reside on a single gpu, each shard of the tensor resides on its designated gpu. During processing each shard gets processed separately and in parallel on different GPUs and the results are synced at the end of the step. This is what one may call horizontal parallelism, as the splitting happens on horizontal level."),fu=h(),ma=a("li"),mo=a("strong"),cu=o("PipelineParallel (PP)"),du=o(" - the model is split up vertically (layer-level) across multiple GPUs, so that only one or several layers of the model are places on a single gpu. Each gpu processes in parallel different stages of the pipeline and working on a small chunk of the batch."),uu=h(),va=a("li"),vo=a("strong"),mu=o("Zero Redundancy Optimizer (ZeRO)"),vu=o(" - Also performs sharding of the tensors somewhat similar to TP, except the whole tensor gets reconstructed in time for a forward or backward computation, therefore the model doesn\u2019t need to be modified. It also supports various offloading techniques to compensate for limited GPU memory."),Pu=h(),Pa=a("li"),Po=a("strong"),wu=o("Sharded DDP"),yu=o(" - is another name for the foundational ZeRO concept as used by various other implementations of ZeRO."),$p=h(),wa=a("p"),bu=o("Before diving deeper into the specifics of each concept we first have a look at the rough decision process when training large models on a large infrastructure."),Np=h(),se=a("h2"),Ie=a("a"),wo=a("span"),m(wt.$$.fragment),_u=h(),yo=a("span"),Eu=o("Scalability Strategy"),zp=h(),ya=a("p"),bo=a("strong"),gu=o("\u21E8 Single Node / Multi-GPU"),Rp=h(),$=a("ul"),yt=a("li"),_o=a("p"),Du=o("Model fits onto a single GPU:"),Lu=h(),bt=a("ol"),Eo=a("li"),Tu=o("DDP - Distributed DP"),Gu=h(),go=a("li"),ku=o("ZeRO - may or may not be faster depending on the situation and configuration used"),Uu=h(),_t=a("li"),Do=a("p"),Iu=o("Model doesn\u2019t fit onto a single GPU:"),Su=h(),ie=a("ol"),Lo=a("li"),To=a("p"),Ou=o("PP"),ju=h(),Go=a("li"),ko=a("p"),Au=o("ZeRO"),xu=h(),oe=a("li"),Uo=a("p"),Mu=o("TP"),$u=h(),Io=a("p"),Nu=o("With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),zu=h(),So=a("p"),Ru=o("TP is almost always used within a single node. That is TP size <= gpus per node."),Cu=h(),Et=a("li"),Oo=a("p"),Zu=o("Largest Layer not fitting into a single GPU:"),Bu=h(),gt=a("ol"),jo=a("li"),qu=o("If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),Fu=h(),Ao=a("li"),Vu=o("With ZeRO see the same entry for \u201CSingle GPU\u201D above"),Cp=h(),ba=a("p"),xo=a("strong"),Wu=o("\u21E8 Multi-Node / Multi-GPU"),Zp=h(),Se=a("ul"),Dt=a("li"),Mo=a("p"),Hu=o("When you have fast inter-node connectivity:"),Yu=h(),Lt=a("ol"),$o=a("li"),Xu=o("ZeRO - as it requires close to no modifications to the model"),Ku=h(),No=a("li"),Ju=o("PP+TP+DP - less communications, but requires massive changes to the model"),Qu=h(),Tt=a("li"),zo=a("p"),em=o("when you have slow inter-node connectivity and still low on GPU memory:"),tm=h(),Ro=a("ol"),Co=a("li"),lm=o("DP+PP+TP+ZeRO-1"),Bp=h(),re=a("h2"),Oe=a("a"),Zo=a("span"),m(Gt.$$.fragment),am=h(),Bo=a("span"),sm=o("Data Parallelism"),qp=h(),I=a("p"),im=o("Most users with just 2 GPUs already enjoy the increased training speed up thanks to "),qo=a("code"),om=o("DataParallel"),rm=o(" (DP) and "),Fo=a("code"),nm=o("DistributedDataParallel"),pm=o(" (DDP) that are almost trivial to use. This is a built-in feature of Pytorch. Note that in general it is advised to use DDP as it is better maintained and works for all models while DP might fail for some models. "),kt=a("a"),hm=o("PyTorch documentation"),fm=o(" itself recommends the use of DDP."),Fp=h(),ne=a("h3"),je=a("a"),Vo=a("span"),m(Ut.$$.fragment),cm=h(),Wo=a("span"),dm=o("DP vs DDP"),Vp=h(),pe=a("p"),Ho=a("code"),um=o("DistributedDataParallel"),mm=o(" (DDP) is typically faster than "),Yo=a("code"),vm=o("DataParallel"),Pm=o(" (DP), but it is not always the case:"),Wp=h(),Ae=a("ul"),Xo=a("li"),wm=o("while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),ym=h(),Ko=a("li"),bm=o("on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),Hp=h(),_a=a("p"),_m=o("Here are the main differences in the inter-GPU communication overhead between the two modes:"),Yp=h(),It=a("p"),St=a("a"),Em=o("DDP"),gm=o(":"),Xp=h(),xe=a("ul"),Jo=a("li"),Dm=o("At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),Lm=h(),Ea=a("li"),Tm=o("Then for each batch:"),Ot=a("ol"),Qo=a("li"),Gm=o("each gpu consumes each own mini-batch of data directly"),km=h(),jt=a("li"),Um=o("during "),er=a("code"),Im=o("backward"),Sm=o(", once the local gradients are ready, they are then averaged across all processes"),Kp=h(),At=a("p"),xt=a("a"),Om=o("DP"),jm=o(":"),Jp=h(),ga=a("p"),Am=o("For each batch:"),Qp=h(),D=a("ol"),tr=a("li"),xm=o("gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),Mm=h(),lr=a("li"),$m=o("replicates the up-to-date model from gpu 0 to each gpu"),Nm=h(),Mt=a("li"),zm=o("runs "),ar=a("code"),Rm=o("forward"),Cm=o(" and sends output from each gpu to gpu 0, computes loss"),Zm=h(),Da=a("li"),Bm=o("scatters loss from gpu 0 to all gpus, runs "),sr=a("code"),qm=o("backward"),Fm=h(),ir=a("li"),Vm=o("sends gradients from each gpu to gpu 0 and averages those"),eh=h(),La=a("p"),Wm=o("The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),th=h(),Me=a("p"),Hm=o("DP copies data within the process via python threads, whereas DDP copies data via "),$t=a("a"),Ym=o("torch.distributed"),Xm=o("."),lh=h(),Ta=a("p"),Km=o("Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),ah=h(),Ga=a("p"),Jm=o("You can use DDP across multiple machines, but this is not the case with DP."),sh=h(),ka=a("p"),Qm=o("There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),ih=h(),$e=a("p"),ev=o("If you want to go really deep into understanding these 2 modes, this "),Nt=a("a"),tv=o("article"),lv=o(" is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),oh=h(),Ua=a("p"),av=o("Let\u2019s look at an actual benchmark:"),rh=h(),Ne=a("table"),or=a("thead"),he=a("tr"),Ia=a("th"),sv=o("Type"),iv=h(),rr=a("th"),ov=o("NVlink"),rv=h(),Sa=a("th"),nv=o("Time"),pv=h(),fe=a("tbody"),ce=a("tr"),Oa=a("td"),hv=o("2:DP"),fv=h(),nr=a("td"),cv=o("Y"),dv=h(),ja=a("td"),uv=o("110s"),mv=h(),de=a("tr"),Aa=a("td"),vv=o("2:DDP"),Pv=h(),pr=a("td"),wv=o("Y"),yv=h(),xa=a("td"),bv=o("101s"),_v=h(),ue=a("tr"),Ma=a("td"),Ev=o("2:DDP"),gv=h(),hr=a("td"),Dv=o("N"),Lv=h(),$a=a("td"),Tv=o("131s"),nh=h(),Na=a("p"),Gv=o("Analysis:"),ph=h(),za=a("p"),kv=o("Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),hh=h(),Ra=a("p"),Uv=o("The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),fh=h(),Ca=a("p"),Iv=o("Here is the full benchmark code and outputs:"),ch=h(),zt=a("p"),fr=a("code"),Sv=o("NCCL_P2P_DISABLE=1"),Ov=o(" was used to disable the NVLink feature on the corresponding benchmark."),dh=h(),m(Rt.$$.fragment),uh=h(),E=a("p"),jv=o("Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),cr=a("code"),Av=o("NV2"),xv=o(" in "),dr=a("code"),Mv=o("nvidia-smi topo -m"),$v=o(`)
Software: `),ur=a("code"),Nv=o("pytorch-1.8-to-be"),zv=o(" + "),mr=a("code"),Rv=o("cuda-11.0"),Cv=o(" / "),vr=a("code"),Zv=o("transformers==4.3.0.dev0"),mh=h(),me=a("h2"),ze=a("a"),Pr=a("span"),m(Ct.$$.fragment),Bv=h(),wr=a("span"),qv=o("ZeRO Data Parallelism"),vh=h(),ve=a("p"),Fv=o("ZeRO-powered data parallelism (ZeRO-DP) is described on the following diagram from this "),Zt=a("a"),Vv=o("blog post"),Wv=h(),Za=a("img"),Ph=h(),Re=a("p"),Hv=o("It can be difficult to wrap one\u2019s head around it, but in reality the concept is quite simple. This is just the usual "),yr=a("code"),Yv=o("DataParallel"),Xv=o(" (DP), except, instead of replicating the full model params, gradients and optimizer states, each GPU stores only a slice of it.  And then at run-time when the full layer params are needed just for the given layer, all GPUs synchronize to give each other parts that they miss - this is it."),wh=h(),Ba=a("p"),Kv=o("Consider this simple model with 3 layers, where each layer has 3 params:"),yh=h(),m(Bt.$$.fragment),bh=h(),qa=a("p"),Jv=o("Layer La has weights a0, a1 and a2."),_h=h(),Fa=a("p"),Qv=o("If we have 3 GPUs, the Sharded DDP (= Zero-DP) splits the model onto 3 GPUs like so:"),Eh=h(),m(qt.$$.fragment),gh=h(),Va=a("p"),eP=o("In a way this is the same horizontal slicing, as tensor parallelism, if you imagine the typical DNN diagram. Vertical slicing is where one puts whole layer-groups on different GPUs. But it\u2019s just the starting point."),Dh=h(),Wa=a("p"),tP=o("Now each of these GPUs will get the usual mini-batch as it works in DP:"),Lh=h(),m(Ft.$$.fragment),Th=h(),Ha=a("p"),lP=o("The inputs are unmodified - they think they are going to be processed by the normal model."),Gh=h(),Ya=a("p"),aP=o("First, the inputs hit the layer La."),kh=h(),Xa=a("p"),sP=o("Let\u2019s focus just on GPU0: x0 needs a0, a1, a2 params to do its forward path, but GPU0 has only a0 - it gets sent a1 from GPU1 and a2 from GPU2, bringing all pieces of the model together."),Uh=h(),Ka=a("p"),iP=o("In parallel, GPU1 gets mini-batch x1 and it only has a1, but needs a0 and a2 params, so it gets those from GPU0 and GPU2."),Ih=h(),Ja=a("p"),oP=o("Same happens to GPU2 that gets input x2. It gets a0 and a1 from GPU0 and GPU1, and with its a2 it reconstructs the full tensor."),Sh=h(),Qa=a("p"),rP=o("All 3 GPUs get the full tensors reconstructed and a forward happens."),Oh=h(),es=a("p"),nP=o("As soon as the calculation is done, the data that is no longer needed gets dropped - it\u2019s only used during the calculation. The reconstruction is done efficiently via a pre-fetch."),jh=h(),ts=a("p"),pP=o("And the whole process is repeated for layer Lb, then Lc forward-wise, and then backward Lc -> Lb -> La."),Ah=h(),ls=a("p"),hP=o("To me this sounds like an efficient group backpacking weight distribution strategy:"),xh=h(),N=a("ol"),br=a("li"),fP=o("person A carries the tent"),cP=h(),_r=a("li"),dP=o("person B carries the stove"),uP=h(),Er=a("li"),mP=o("person C carries the axe"),Mh=h(),as=a("p"),vP=o("Now each night they all share what they have with others and get from others what they don\u2019t have, and in the morning they pack up their allocated type of gear and continue on their way. This is Sharded DDP / Zero DP."),$h=h(),ss=a("p"),PP=o("Compare this strategy to the simple one where each person has to carry their own tent, stove and axe, which would be far more inefficient. This is DataParallel (DP and DDP) in Pytorch."),Nh=h(),is=a("p"),wP=o("While reading the literature on this topic you may encounter the following synonyms: Sharded, Partitioned."),zh=h(),os=a("p"),yP=o("If you pay close attention the way ZeRO partitions the model\u2019s weights - it looks very similar to tensor parallelism which will be discussed later. This is because it partitions/shards each layer\u2019s weights, unlike vertical model parallelism which is discussed next."),Rh=h(),rs=a("p"),bP=o("Implementations:"),Ch=h(),z=a("ul"),ns=a("li"),Vt=a("a"),_P=o("DeepSpeed"),EP=o(" ZeRO-DP stages 1+2+3"),gP=h(),ps=a("li"),Wt=a("a"),DP=o("Fairscale"),LP=o(" ZeRO-DP stages 1+2+3"),TP=h(),gr=a("li"),Ht=a("a"),Dr=a("code"),GP=o("transformers"),kP=o(" integration"),Zh=h(),Pe=a("h2"),Ce=a("a"),Lr=a("span"),m(Yt.$$.fragment),UP=h(),Tr=a("span"),IP=o("Naive Model Parallelism (Vertical) and Pipeline Parallelism"),Bh=h(),Ze=a("p"),SP=o("Naive Model Parallelism (MP) is where one spreads groups of model layers across multiple GPUs. The mechanism is relatively simple - switch the desired layers "),Gr=a("code"),OP=o(".to()"),jP=o(" the desired devices and now whenever the data goes in and out those layers switch the data to the same device as the layer and leave the rest unmodified."),qh=h(),hs=a("p"),AP=o("We refer to it as Vertical MP, because if you remember how most models are drawn, we slice the layers vertically. For example, if the following diagram shows an 8-layer model:"),Fh=h(),m(Xt.$$.fragment),Vh=h(),fs=a("p"),xP=o("we just sliced it in 2 vertically, placing layers 0-3 onto GPU0 and 4-7 to GPU1."),Wh=h(),cs=a("p"),MP=o("Now while data travels from layer 0 to 1, 1 to 2 and 2 to 3 this is just the normal model. But when data needs to pass from layer 3 to layer 4 it needs to travel from GPU0 to GPU1 which introduces a communication overhead. If the participating GPUs are on the same compute node (e.g. same physical machine) this copying is pretty fast, but if the GPUs are located on different compute nodes (e.g. multiple machines) the communication overhead could be significantly larger."),Hh=h(),ds=a("p"),$P=o("Then layers 4 to 5 to 6 to 7 are as a normal model would have and when the 7th layer completes we often need to send the data back to layer 0 where the labels are (or alternatively send the labels to the last layer). Now the loss can be computed and the optimizer can do its work."),Yh=h(),us=a("p"),NP=o("Problems:"),Xh=h(),Be=a("ul"),kr=a("li"),zP=o("the main deficiency and why this one is called \u201Cnaive\u201D MP, is that all but one GPU is idle at any given moment. So if 4 GPUs are used, it\u2019s almost identical to quadrupling the amount of memory of a single GPU, and ignoring the rest of the hardware. Plus there is the overhead of copying the data between devices. So 4x 6GB cards will be able to accommodate the same size as 1x 24GB card using naive MP, except the latter will complete the training faster, since it doesn\u2019t have the data copying overhead. But, say, if you have 40GB cards and need to fit a 45GB model you can with 4x 40GB cards (but barely because of the gradient and optimizer states)"),RP=h(),Ur=a("li"),CP=o("shared embeddings may need to get copied back and forth between GPUs."),Kh=h(),ms=a("p"),ZP=o("Pipeline Parallelism (PP) is almost identical to a naive MP, but it solves the GPU idling problem, by chunking the incoming batch into micro-batches and artificially creating a pipeline, which allows different GPUs to concurrently participate in the computation process."),Jh=h(),qe=a("p"),BP=o("The following illustration from the "),Kt=a("a"),qP=o("GPipe paper"),FP=o(" shows the naive MP on the top, and PP on the bottom:"),Qh=h(),vs=a("p"),Ps=a("img"),ef=h(),ws=a("p"),VP=o("It\u2019s easy to see from the bottom diagram how PP has less dead zones, where GPUs are idle. The idle parts are referred to as the \u201Cbubble\u201D."),tf=h(),ys=a("p"),WP=o("Both parts of the diagram show a parallelism that is of degree 4. That is 4 GPUs are participating in the pipeline. So there is the forward path of 4 pipe stages F0, F1, F2 and F3 and then the return reverse order backward path of B3, B2, B1 and B0."),lf=h(),R=a("p"),HP=o("PP introduces a new hyper-parameter to tune and it\u2019s "),Ir=a("code"),YP=o("chunks"),XP=o(" which defines how many chunks of data are sent in a sequence through the same pipe stage. For example, in the bottomw diagram you can see that "),Sr=a("code"),KP=o("chunks=4"),JP=o(". GPU0 performs the same forward path on chunk 0, 1, 2 and 3 (F0,0, F0,1, F0,2, F0,3) and then it waits for other GPUs to do their work and only when their work is starting to be complete, GPU0 starts to work again doing the backward path for chunks 3, 2, 1 and 0 (B0,3, B0,2, B0,1, B0,0)."),af=h(),Fe=a("p"),QP=o("Note that conceptually this is the same concept as gradient accumulation steps (GAS). Pytorch uses "),Or=a("code"),e1=o("chunks"),t1=o(", whereas DeepSpeed refers to the same hyper-parameter as GAS."),sf=h(),Ve=a("p"),l1=o("Because of the chunks, PP introduces the concept of micro-batches (MBS). DP splits the global data batch size into mini-batches, so if you have a DP degree of 4, a global batch size of 1024 gets split up into 4 mini-batches of 256 each (1024/4). And if the number of "),jr=a("code"),a1=o("chunks"),s1=o(" (or GAS) is 32 we end up with a micro-batch size of 8 (256/32). Each Pipeline stage works with a single micro-batch at a time."),of=h(),C=a("p"),i1=o("To calculate the global batch size of the DP + PP setup we then do: "),Ar=a("code"),o1=o("mbs*chunks*dp_degree"),r1=o(" ("),xr=a("code"),n1=o("8*32*4=1024"),p1=o(")."),rf=h(),bs=a("p"),h1=o("Let\u2019s go back to the diagram."),nf=h(),Z=a("p"),f1=o("With "),Mr=a("code"),c1=o("chunks=1"),d1=o(" you end up with the naive MP, which is very inefficient. With a very large "),$r=a("code"),u1=o("chunks"),m1=o(" value you end up with tiny micro-batch sizes which could be not every efficient either. So one has to experiment to find the value that leads to the highest efficient utilization of the gpus."),pf=h(),S=a("p"),v1=o("While the diagram shows that there is a bubble of \u201Cdead\u201D time that can\u2019t be parallelized because the last "),Nr=a("code"),P1=o("forward"),w1=o(" stage has to wait for "),zr=a("code"),y1=o("backward"),b1=o(" to complete the pipeline, the purpose of finding the best value for "),Rr=a("code"),_1=o("chunks"),E1=o(" is to enable a high concurrent GPU utilization across all participating GPUs which translates to minimizing the size of the bubble."),hf=h(),_s=a("p"),g1=o("There are 2 groups of solutions - the traditional Pipeline API and the more modern solutions that make things much easier for the end user."),ff=h(),Es=a("p"),D1=o("Traditional Pipeline API solutions:"),cf=h(),O=a("ul"),Cr=a("li"),L1=o("PyTorch"),T1=h(),Zr=a("li"),G1=o("FairScale"),k1=h(),Br=a("li"),U1=o("DeepSpeed"),I1=h(),qr=a("li"),S1=o("Megatron-LM"),df=h(),gs=a("p"),O1=o("Modern solutions:"),uf=h(),We=a("ul"),Fr=a("li"),j1=o("Varuna"),A1=h(),Vr=a("li"),x1=o("Sagemaker"),mf=h(),Ds=a("p"),M1=o("Problems with traditional Pipeline API solutions:"),vf=h(),j=a("ul"),Jt=a("li"),$1=o("have to modify the model quite heavily, because Pipeline requires one to rewrite the normal flow of modules into a "),Wr=a("code"),N1=o("nn.Sequential"),z1=o(" sequence of the same, which may require changes to the design of the model."),R1=h(),Ls=a("li"),C1=o("currently the Pipeline API is very restricted. If you had a bunch of python variables being passed in the very first stage of the Pipeline, you will have to find a way around it. Currently, the pipeline interface requires either a single Tensor or a tuple of Tensors as the only input and output. These tensors must have a batch size as the very first dimension, since pipeline is going to chunk the mini batch into micro-batches. Possible improvements are being discussed here "),Qt=a("a"),Z1=o("https://github.com/pytorch/pytorch/pull/50693"),B1=h(),Hr=a("li"),q1=o("conditional control flow at the level of pipe stages is not possible - e.g., Encoder-Decoder models like T5 require special workarounds to handle a conditional encoder stage."),F1=h(),Yr=a("li"),V1=o("have to arrange each layer so that the output of one model becomes an input to the other model."),Pf=h(),Ts=a("p"),W1=o("We are yet to experiment with Varuna and SageMaker but their papers report that they have overcome the list of problems mentioned above and that they require much smaller changes to the user\u2019s model."),wf=h(),Gs=a("p"),H1=o("Implementations:"),yf=h(),u=a("ul"),el=a("li"),tl=a("a"),Y1=o("Pytorch"),X1=o(" (initial support in pytorch-1.8, and progressively getting improved in 1.9 and more so in 1.10). Some "),ll=a("a"),K1=o("examples"),J1=h(),Xr=a("li"),al=a("a"),Q1=o("FairScale"),ew=h(),Kr=a("li"),sl=a("a"),tw=o("DeepSpeed"),lw=h(),ks=a("li"),il=a("a"),aw=o("Megatron-LM"),sw=o(" has an internal implementation - no API."),iw=h(),Jr=a("li"),ol=a("a"),ow=o("Varuna"),rw=h(),Us=a("li"),rl=a("a"),nw=o("SageMaker"),pw=o(" - this is a proprietary solution that can only be used on AWS."),hw=h(),Is=a("li"),nl=a("a"),fw=o("OSLO"),cw=o(" - this is implemented based on the Hugging Face Transformers."),bf=h(),He=a("p"),dw=o("\u{1F917} Transformers status: as of this writing none of the models supports full-PP. GPT2 and T5 models have naive MP support. The main obstacle is being unable to convert the models to "),Qr=a("code"),uw=o("nn.Sequential"),mw=o(" and have all the inputs to be Tensors. This is because currently the models include many features that make the conversion very complicated, and will need to be removed to accomplish that."),_f=h(),Ss=a("p"),vw=o("Other approaches:"),Ef=h(),we=a("p"),Pw=o("DeepSpeed, Varuna and SageMaker use the concept of an "),pl=a("a"),ww=o("Interleaved Pipeline"),yw=h(),Os=a("img"),gf=h(),js=a("p"),bw=o("Here the bubble (idle time) is further minimized by prioritizing backward passes."),Df=h(),As=a("p"),_w=o("Varuna further tries to improve the schedule by using simulations to discover the most efficient scheduling."),Lf=h(),Ye=a("p"),Ew=o("OSLO has pipeline parallelism implementation based on the Transformers without "),en=a("code"),gw=o("nn.Sequential"),Dw=o(" converting."),Tf=h(),ye=a("h2"),Xe=a("a"),tn=a("span"),m(hl.$$.fragment),Lw=h(),ln=a("span"),Tw=o("Tensor Parallelism"),Gf=h(),xs=a("p"),Gw=o("In Tensor Parallelism each GPU processes only a slice of a tensor and only aggregates the full tensor for operations that require the whole thing."),kf=h(),B=a("p"),kw=o("In this section we use concepts and diagrams from the "),fl=a("a"),Uw=o("Megatron-LM"),Iw=o(" paper: "),cl=a("a"),Sw=o("Efficient Large-Scale Language Model Training on GPU Clusters"),Ow=o("."),Uf=h(),q=a("p"),jw=o("The main building block of any transformer is a fully connected "),an=a("code"),Aw=o("nn.Linear"),xw=o(" followed by a nonlinear activation "),sn=a("code"),Mw=o("GeLU"),$w=o("."),If=h(),L=a("p"),Nw=o("Following the Megatron\u2019s paper notation, we can write the dot-product part of it as "),on=a("code"),zw=o("Y = GeLU(XA)"),Rw=o(", where "),rn=a("code"),Cw=o("X"),Zw=o(" and "),nn=a("code"),Bw=o("Y"),qw=o(" are the input and output vectors, and "),pn=a("code"),Fw=o("A"),Vw=o(" is the weight matrix."),Sf=h(),dl=a("p"),Ww=o(`If we look at the computation in matrix form, it\u2019s easy to see how the matrix multiplication can be split between multiple GPUs:
`),Ms=a("img"),Of=h(),d=a("p"),Hw=o("If we split the weight matrix "),hn=a("code"),Yw=o("A"),Xw=o(" column-wise across "),fn=a("code"),Kw=o("N"),Jw=o(" GPUs and perform matrix multiplications "),cn=a("code"),Qw=o("XA_1"),e2=o(" through "),dn=a("code"),t2=o("XA_n"),l2=o(" in parallel, then we will end up with "),un=a("code"),a2=o("N"),s2=o(" output vectors "),mn=a("code"),i2=o("Y_1, Y_2, ..., Y_n"),o2=o(" which can be fed into "),vn=a("code"),r2=o("GeLU"),n2=o(` independently:
`),$s=a("img"),jf=h(),ul=a("p"),p2=o(`Using this principle, we can update an MLP of arbitrary depth, without the need for any synchronization between GPUs until the very end, where we need to reconstruct the output vector from shards. The Megatron-LM paper authors provide a helpful illustration for that:
`),Ns=a("img"),Af=h(),ml=a("p"),h2=o(`Parallelizing the multi-headed attention layers is even simpler, since they are already inherently parallel, due to having multiple independent heads!
`),zs=a("img"),xf=h(),Rs=a("p"),f2=o("Special considerations: TP requires very fast network, and therefore it\u2019s not advisable to do TP across more than one node. Practically, if a node has 4 GPUs, the highest TP degree is therefore 4. If you need a TP degree of 8, you need to use nodes that have at least 8 GPUs."),Mf=h(),F=a("p"),c2=o("This section is based on the original much more "),vl=a("a"),d2=o("detailed TP overview"),u2=o(`.
by `),Pl=a("a"),m2=o("@anton-l"),v2=o("."),$f=h(),Cs=a("p"),P2=o("SageMaker combines TP with DP for a more efficient processing."),Nf=h(),Zs=a("p"),w2=o("Alternative names:"),zf=h(),Bs=a("ul"),qs=a("li"),y2=o("DeepSpeed calls it "),wl=a("a"),b2=o("tensor slicing"),Rf=h(),Fs=a("p"),_2=o("Implementations:"),Cf=h(),A=a("ul"),Vs=a("li"),yl=a("a"),E2=o("Megatron-LM"),g2=o(" has an internal implementation, as it\u2019s very model-specific"),D2=h(),Ws=a("li"),bl=a("a"),L2=o("parallelformers"),T2=o(" (only inference at the moment)"),G2=h(),Hs=a("li"),_l=a("a"),k2=o("SageMaker"),U2=o(" - this is a proprietary solution that can only be used on AWS."),I2=h(),Ys=a("li"),El=a("a"),S2=o("OSLO"),O2=o(" has the tensor parallelism implementation based on the Transformers."),Zf=h(),Xs=a("p"),j2=o("\u{1F917} Transformers status:"),Bf=h(),V=a("ul"),Pn=a("li"),A2=o("core: not yet implemented in the core"),x2=h(),gl=a("li"),M2=o("but if you want inference "),Dl=a("a"),$2=o("parallelformers"),N2=o(" provides this support for most of our models. So until this is implemented in the core you can use theirs. And hopefully training mode will be supported too."),z2=h(),Ks=a("li"),R2=o("Deepspeed-Inference also supports our BERT, GPT-2, and GPT-Neo models in their super-fast CUDA-kernel-based inference mode, see more "),Ll=a("a"),C2=o("here"),qf=h(),be=a("h2"),Ke=a("a"),wn=a("span"),m(Tl.$$.fragment),Z2=h(),yn=a("span"),B2=o("DP+PP"),Ff=h(),Je=a("p"),q2=o("The following diagram from the DeepSpeed "),Gl=a("a"),F2=o("pipeline tutorial"),V2=o(" demonstrates how one combines DP with PP."),Vf=h(),Js=a("p"),Qs=a("img"),Wf=h(),ei=a("p"),W2=o("Here it\u2019s important to see how DP rank 0 doesn\u2019t see GPU2 and DP rank 1 doesn\u2019t see GPU3. To DP there is just GPUs 0 and 1 where it feeds data as if there were just 2 GPUs. GPU0 \u201Csecretly\u201D offloads some of its load to GPU2 using PP. And GPU1 does the same by enlisting GPU3 to its aid."),Hf=h(),ti=a("p"),H2=o("Since each dimension requires at least 2 GPUs, here you\u2019d need at least 4 GPUs."),Yf=h(),li=a("p"),Y2=o("Implementations:"),Xf=h(),T=a("ul"),bn=a("li"),kl=a("a"),X2=o("DeepSpeed"),K2=h(),_n=a("li"),Ul=a("a"),J2=o("Megatron-LM"),Q2=h(),En=a("li"),Il=a("a"),ey=o("Varuna"),ty=h(),gn=a("li"),Sl=a("a"),ly=o("SageMaker"),ay=h(),Dn=a("li"),Ol=a("a"),sy=o("OSLO"),Kf=h(),ai=a("p"),iy=o("\u{1F917} Transformers status: not yet implemented"),Jf=h(),_e=a("h2"),Qe=a("a"),Ln=a("span"),m(jl.$$.fragment),oy=h(),Tn=a("span"),ry=o("DP+PP+TP"),Qf=h(),si=a("p"),ny=o("To get an even more efficient training a 3D parallelism is used where PP is combined with TP and DP. This can be seen in the following diagram."),ec=h(),ii=a("p"),oi=a("img"),tc=h(),et=a("p"),py=o("This diagram is from a blog post "),Al=a("a"),hy=o("3D parallelism: Scaling to trillion-parameter models"),fy=o(", which is a good read as well."),lc=h(),ri=a("p"),cy=o("Since each dimension requires at least 2 GPUs, here you\u2019d need at least 8 GPUs."),ac=h(),ni=a("p"),dy=o("Implementations:"),sc=h(),G=a("ul"),pi=a("li"),xl=a("a"),uy=o("DeepSpeed"),my=o(" - DeepSpeed also includes an even more efficient DP, which they call ZeRO-DP."),vy=h(),Gn=a("li"),Ml=a("a"),Py=o("Megatron-LM"),wy=h(),kn=a("li"),$l=a("a"),yy=o("Varuna"),by=h(),Un=a("li"),Nl=a("a"),_y=o("SageMaker"),Ey=h(),In=a("li"),zl=a("a"),gy=o("OSLO"),ic=h(),hi=a("p"),Dy=o("\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),oc=h(),Ee=a("h2"),tt=a("a"),Sn=a("span"),m(Rl.$$.fragment),Ly=h(),On=a("span"),Ty=o("ZeRO DP+PP+TP"),rc=h(),lt=a("p"),Gy=o("One of the main features of DeepSpeed is ZeRO, which is a super-scalable extension of DP. It has already been discussed in "),fi=a("a"),ky=o("ZeRO Data Parallelism"),Uy=o(". Normally it\u2019s a standalone feature that doesn\u2019t require PP or TP. But it can be combined with PP and TP."),nc=h(),ci=a("p"),Iy=o("When ZeRO-DP is combined with PP (and optionally TP) it typically enables only ZeRO stage 1 (optimizer sharding)."),pc=h(),di=a("p"),Sy=o("While it\u2019s theoretically possible to use ZeRO stage 2 (gradient sharding) with Pipeline Parallelism, it will have bad performance impacts. There would need to be an additional reduce-scatter collective for every micro-batch to aggregate the gradients before sharding, which adds a potentially significant communication overhead. By nature of Pipeline Parallelism, small micro-batches are used and instead the focus is on trying to balance arithmetic intensity (micro-batch size) with minimizing the Pipeline bubble (number of micro-batches). Therefore those communication costs are going to hurt."),hc=h(),at=a("p"),Oy=o("In addition, There are already fewer layers than normal due to PP and so the memory savings won\u2019t be huge. PP already reduces gradient size by "),jn=a("code"),jy=o("1/PP"),Ay=o(", and so gradient sharding savings on top of that are less significant than pure DP."),fc=h(),ui=a("p"),xy=o("ZeRO stage 3 is not a good choice either for the same reason - more inter-node communications required."),cc=h(),mi=a("p"),My=o("And since we have ZeRO, the other benefit is ZeRO-Offload. Since this is stage 1 optimizer states can be offloaded to CPU."),dc=h(),vi=a("p"),$y=o("Implementations:"),uc=h(),st=a("ul"),it=a("li"),Cl=a("a"),Ny=o("Megatron-DeepSpeed"),zy=o(" and "),Zl=a("a"),Ry=o("Megatron-Deepspeed from BigScience"),Cy=o(", which is the fork of the former repo."),Zy=h(),An=a("li"),Bl=a("a"),By=o("OSLO"),mc=h(),Pi=a("p"),qy=o("Important papers:"),vc=h(),wi=a("ul"),xn=a("li"),ql=a("a"),Fy=o("Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model"),Pc=h(),yi=a("p"),Vy=o("\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),wc=h(),ge=a("h2"),ot=a("a"),Mn=a("span"),m(Fl.$$.fragment),Wy=h(),$n=a("span"),Hy=o("FlexFlow"),yc=h(),Vl=a("p"),Wl=a("a"),Yy=o("FlexFlow"),Xy=o(" also solves the parallelization problem in a slightly different approach."),bc=h(),Hl=a("p"),Ky=o("Paper: "),Yl=a("a"),Jy=o("\u201CBeyond Data and Model Parallelism for Deep Neural Networks\u201D by Zhihao Jia, Matei Zaharia, Alex Aiken"),_c=h(),bi=a("p"),Qy=o("It performs a sort of 4D Parallelism over Sample-Operator-Attribute-Parameter."),Ec=h(),x=a("ol"),Nn=a("li"),eb=o("Sample = Data Parallelism (sample-wise parallel)"),tb=h(),zn=a("li"),lb=o("Operator = Parallelize a single operation into several sub-operations"),ab=h(),Rn=a("li"),sb=o("Attribute = Data Parallelism (length-wise parallel)"),ib=h(),Cn=a("li"),ob=o("Parameter = Model Parallelism (regardless of dimension - horizontal or vertical)"),gc=h(),_i=a("p"),rb=o("Examples:"),Dc=h(),Ei=a("ul"),Zn=a("li"),nb=o("Sample"),Lc=h(),gi=a("p"),pb=o("Let\u2019s take 10 batches of sequence length 512. If we parallelize them by sample dimension into 2 devices, we get 10 x 512 which becomes be 5 x 2 x 512."),Tc=h(),Di=a("ul"),Bn=a("li"),hb=o("Operator"),Gc=h(),Li=a("p"),fb=o("If we perform layer normalization, we compute std first and mean second, and then we can normalize data. Operator parallelism allows computing std and mean in parallel. So if we parallelize them by operator dimension into 2 devices (cuda:0, cuda:1), first we copy input data into both devices, and cuda:0 computes std, cuda:1 computes mean at the same time."),kc=h(),Ti=a("ul"),qn=a("li"),cb=o("Attribute"),Uc=h(),Gi=a("p"),db=o("We have 10 batches of 512 length. If we parallelize them by attribute dimension into 2 devices, 10 x 512 will be 10 x 2 x 256."),Ic=h(),ki=a("ul"),Fn=a("li"),ub=o("Parameter"),Sc=h(),Ui=a("p"),mb=o("It is similar with tensor model parallelism or naive layer-wise model parallelism."),Oc=h(),Ii=a("p"),Si=a("img"),jc=h(),Oi=a("p"),vb=o("The significance of this framework is that it takes resources like (1) GPU/TPU/CPU vs. (2) RAM/DRAM vs. (3) fast-intra-connect/slow-inter-connect and it automatically optimizes all these  algorithmically deciding which parallelisation to use where."),Ac=h(),ji=a("p"),Pb=o("One very important aspect is that FlexFlow is designed for optimizing DNN parallelizations for models with static and fixed workloads, since models with dynamic behavior may prefer different parallelization strategies across iterations."),xc=h(),Ai=a("p"),wb=o("So the promise is very attractive - it runs a 30min simulation on the cluster of choice and it comes up with the best strategy to utilise this specific environment. If you add/remove/replace any parts it\u2019ll run and re-optimize the plan for that. And then you can train. A different setup will have its own custom optimization."),Mc=h(),rt=a("p"),yb=o("\u{1F917} Transformers status: not yet integrated. We already have our models FX-trace-able via "),Xl=a("a"),bb=o("transformers.utils.fx"),_b=o(", which is a prerequisite for FlexFlow, so someone needs to figure out what needs to be done to make FlexFlow work with our models."),$c=h(),De=a("h2"),nt=a("a"),Vn=a("span"),m(Kl.$$.fragment),Eb=h(),Wn=a("span"),gb=o("Which Strategy To Use When"),Nc=h(),xi=a("p"),Db=o("Here is a very rough outline at which parallelism strategy to use when. The first on each list is typically faster."),zc=h(),Mi=a("p"),Hn=a("strong"),Lb=o("\u21E8 Single GPU"),Rc=h(),W=a("ul"),Jl=a("li"),Yn=a("p"),Tb=o("Model fits onto a single GPU:"),Gb=h(),Xn=a("ol"),Kn=a("li"),kb=o("Normal use"),Ub=h(),Ql=a("li"),Jn=a("p"),Ib=o("Model doesn\u2019t fit onto a single GPU:"),Sb=h(),ea=a("ol"),Qn=a("li"),Ob=o("ZeRO + Offload CPU and optionally NVMe"),jb=h(),ep=a("li"),Ab=o("as above plus Memory Centric Tiling (see below for details) if the largest layer can\u2019t fit into a single GPU"),xb=h(),tp=a("li"),lp=a("p"),Mb=o("Largest Layer not fitting into a single GPU:"),Cc=h(),$i=a("ol"),Le=a("li"),$b=o("ZeRO - Enable "),ta=a("a"),Nb=o("Memory Centric Tiling"),zb=o(" (MCT). It allows you to run arbitrarily large layers by automatically splitting them and executing them sequentially. MCT reduces the number of parameters that are live on a GPU, but it does not affect the activation memory. As this need is very rare as of this writing a manual override of "),ap=a("code"),Rb=o("torch.nn.Linear"),Cb=o(" needs to be done by the user."),Zc=h(),Ni=a("p"),sp=a("strong"),Zb=o("\u21E8 Single Node / Multi-GPU"),Bc=h(),H=a("ul"),la=a("li"),ip=a("p"),Bb=o("Model fits onto a single GPU:"),qb=h(),aa=a("ol"),op=a("li"),Fb=o("DDP - Distributed DP"),Vb=h(),rp=a("li"),Wb=o("ZeRO - may or may not be faster depending on the situation and configuration used"),Hb=h(),sa=a("li"),np=a("p"),Yb=o("Model doesn\u2019t fit onto a single GPU:"),Xb=h(),Te=a("ol"),pp=a("li"),hp=a("p"),Kb=o("PP"),Jb=h(),fp=a("li"),cp=a("p"),Qb=o("ZeRO"),e_=h(),Ge=a("li"),dp=a("p"),t_=o("TP"),l_=h(),up=a("p"),a_=o("With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),s_=h(),mp=a("p"),i_=o("TP is almost always used within a single node. That is TP size <= gpus per node."),o_=h(),ia=a("li"),vp=a("p"),r_=o("Largest Layer not fitting into a single GPU:"),n_=h(),oa=a("ol"),Pp=a("li"),p_=o("If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),h_=h(),wp=a("li"),f_=o("With ZeRO see the same entry for \u201CSingle GPU\u201D above"),qc=h(),zi=a("p"),yp=a("strong"),c_=o("\u21E8 Multi-Node / Multi-GPU"),Fc=h(),pt=a("ul"),ra=a("li"),bp=a("p"),d_=o("When you have fast inter-node connectivity:"),u_=h(),na=a("ol"),_p=a("li"),m_=o("ZeRO - as it requires close to no modifications to the model"),v_=h(),Ep=a("li"),P_=o("PP+TP+DP - less communications, but requires massive changes to the model"),w_=h(),pa=a("li"),gp=a("p"),y_=o("when you have slow inter-node connectivity and still low on GPU memory:"),b_=h(),Dp=a("ol"),Lp=a("li"),__=o("DP+PP+TP+ZeRO-1"),this.h()},l(e){const n=M6('[data-svelte="svelte-1phssyn"]',document.head);te=s(n,"META",{name:!0,content:!0}),n.forEach(t),Sp=f(e),le=s(e,"H1",{class:!0});var Wc=i(le);ke=s(Wc,"A",{id:!0,class:!0,href:!0});var nE=i(ke);no=s(nE,"SPAN",{});var pE=i(no);v(vt.$$.fragment,pE),pE.forEach(t),nE.forEach(t),Qd=f(Wc),po=s(Wc,"SPAN",{});var hE=i(po);eu=r(hE,"Efficient Training on Multiple GPUs"),hE.forEach(t),Wc.forEach(t),Op=f(e),ha=s(e,"P",{});var fE=i(ha);tu=r(fE,"When training on a single GPU is too slow or the model weights don\u2019t fit in a single GPUs memory we use a mutli-GPU setup. Switching from a single GPU to multiple requires some form of parallelism as the work needs to be distributed. There are several techniques to achieve parallism such as data, tensor, or pipeline parallism. However, there is no one solution to fit them all and which settings works best depends on the hardware you are running on. While the main concepts most likely will apply to any other framework, this article is focused on PyTorch-based implementations."),fE.forEach(t),jp=f(e),fa=s(e,"P",{});var cE=i(fa);lu=r(cE,"We will first discuss in depth various 1D parallelism techniques and their pros and cons and then look at how they can be combined into 2D and 3D parallelism to enable an even faster training and to support even bigger models. Various other powerful alternative approaches will be presented."),cE.forEach(t),Ap=f(e),ae=s(e,"H2",{class:!0});var Hc=i(ae);Ue=s(Hc,"A",{id:!0,class:!0,href:!0});var dE=i(Ue);ho=s(dE,"SPAN",{});var uE=i(ho);v(Pt.$$.fragment,uE),uE.forEach(t),dE.forEach(t),au=f(Hc),fo=s(Hc,"SPAN",{});var mE=i(fo);su=r(mE,"Concepts"),mE.forEach(t),Hc.forEach(t),xp=f(e),ca=s(e,"P",{});var vE=i(ca);iu=r(vE,"The following is the brief description of the main concepts that will be described later in depth in this document."),vE.forEach(t),Mp=f(e),g=s(e,"OL",{});var Y=i(g);da=s(Y,"LI",{});var E_=i(da);co=s(E_,"STRONG",{});var PE=i(co);ou=r(PE,"DataParallel (DP)"),PE.forEach(t),ru=r(E_," - the same setup is replicated multiple times, and each being fed a slice of the data. The processing is done in parallel and all setups are synchronized at the end of each training step."),E_.forEach(t),nu=f(Y),ua=s(Y,"LI",{});var g_=i(ua);uo=s(g_,"STRONG",{});var wE=i(uo);pu=r(wE,"TensorParallel (TP)"),wE.forEach(t),hu=r(g_," - each tensor is split up into multiple chunks, so instead of having the whole tensor reside on a single gpu, each shard of the tensor resides on its designated gpu. During processing each shard gets processed separately and in parallel on different GPUs and the results are synced at the end of the step. This is what one may call horizontal parallelism, as the splitting happens on horizontal level."),g_.forEach(t),fu=f(Y),ma=s(Y,"LI",{});var D_=i(ma);mo=s(D_,"STRONG",{});var yE=i(mo);cu=r(yE,"PipelineParallel (PP)"),yE.forEach(t),du=r(D_," - the model is split up vertically (layer-level) across multiple GPUs, so that only one or several layers of the model are places on a single gpu. Each gpu processes in parallel different stages of the pipeline and working on a small chunk of the batch."),D_.forEach(t),uu=f(Y),va=s(Y,"LI",{});var L_=i(va);vo=s(L_,"STRONG",{});var bE=i(vo);mu=r(bE,"Zero Redundancy Optimizer (ZeRO)"),bE.forEach(t),vu=r(L_," - Also performs sharding of the tensors somewhat similar to TP, except the whole tensor gets reconstructed in time for a forward or backward computation, therefore the model doesn\u2019t need to be modified. It also supports various offloading techniques to compensate for limited GPU memory."),L_.forEach(t),Pu=f(Y),Pa=s(Y,"LI",{});var T_=i(Pa);Po=s(T_,"STRONG",{});var _E=i(Po);wu=r(_E,"Sharded DDP"),_E.forEach(t),yu=r(T_," - is another name for the foundational ZeRO concept as used by various other implementations of ZeRO."),T_.forEach(t),Y.forEach(t),$p=f(e),wa=s(e,"P",{});var EE=i(wa);bu=r(EE,"Before diving deeper into the specifics of each concept we first have a look at the rough decision process when training large models on a large infrastructure."),EE.forEach(t),Np=f(e),se=s(e,"H2",{class:!0});var Yc=i(se);Ie=s(Yc,"A",{id:!0,class:!0,href:!0});var gE=i(Ie);wo=s(gE,"SPAN",{});var DE=i(wo);v(wt.$$.fragment,DE),DE.forEach(t),gE.forEach(t),_u=f(Yc),yo=s(Yc,"SPAN",{});var LE=i(yo);Eu=r(LE,"Scalability Strategy"),LE.forEach(t),Yc.forEach(t),zp=f(e),ya=s(e,"P",{});var TE=i(ya);bo=s(TE,"STRONG",{});var GE=i(bo);gu=r(GE,"\u21E8 Single Node / Multi-GPU"),GE.forEach(t),TE.forEach(t),Rp=f(e),$=s(e,"UL",{});var Ri=i($);yt=s(Ri,"LI",{});var Xc=i(yt);_o=s(Xc,"P",{});var kE=i(_o);Du=r(kE,"Model fits onto a single GPU:"),kE.forEach(t),Lu=f(Xc),bt=s(Xc,"OL",{});var Kc=i(bt);Eo=s(Kc,"LI",{});var UE=i(Eo);Tu=r(UE,"DDP - Distributed DP"),UE.forEach(t),Gu=f(Kc),go=s(Kc,"LI",{});var IE=i(go);ku=r(IE,"ZeRO - may or may not be faster depending on the situation and configuration used"),IE.forEach(t),Kc.forEach(t),Xc.forEach(t),Uu=f(Ri),_t=s(Ri,"LI",{});var Jc=i(_t);Do=s(Jc,"P",{});var SE=i(Do);Iu=r(SE,"Model doesn\u2019t fit onto a single GPU:"),SE.forEach(t),Su=f(Jc),ie=s(Jc,"OL",{});var Ci=i(ie);Lo=s(Ci,"LI",{});var OE=i(Lo);To=s(OE,"P",{});var jE=i(To);Ou=r(jE,"PP"),jE.forEach(t),OE.forEach(t),ju=f(Ci),Go=s(Ci,"LI",{});var AE=i(Go);ko=s(AE,"P",{});var xE=i(ko);Au=r(xE,"ZeRO"),xE.forEach(t),AE.forEach(t),xu=f(Ci),oe=s(Ci,"LI",{});var Zi=i(oe);Uo=s(Zi,"P",{});var ME=i(Uo);Mu=r(ME,"TP"),ME.forEach(t),$u=f(Zi),Io=s(Zi,"P",{});var $E=i(Io);Nu=r($E,"With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),$E.forEach(t),zu=f(Zi),So=s(Zi,"P",{});var NE=i(So);Ru=r(NE,"TP is almost always used within a single node. That is TP size <= gpus per node."),NE.forEach(t),Zi.forEach(t),Ci.forEach(t),Jc.forEach(t),Cu=f(Ri),Et=s(Ri,"LI",{});var Qc=i(Et);Oo=s(Qc,"P",{});var zE=i(Oo);Zu=r(zE,"Largest Layer not fitting into a single GPU:"),zE.forEach(t),Bu=f(Qc),gt=s(Qc,"OL",{});var ed=i(gt);jo=s(ed,"LI",{});var RE=i(jo);qu=r(RE,"If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),RE.forEach(t),Fu=f(ed),Ao=s(ed,"LI",{});var CE=i(Ao);Vu=r(CE,"With ZeRO see the same entry for \u201CSingle GPU\u201D above"),CE.forEach(t),ed.forEach(t),Qc.forEach(t),Ri.forEach(t),Cp=f(e),ba=s(e,"P",{});var ZE=i(ba);xo=s(ZE,"STRONG",{});var BE=i(xo);Wu=r(BE,"\u21E8 Multi-Node / Multi-GPU"),BE.forEach(t),ZE.forEach(t),Zp=f(e),Se=s(e,"UL",{});var td=i(Se);Dt=s(td,"LI",{});var ld=i(Dt);Mo=s(ld,"P",{});var qE=i(Mo);Hu=r(qE,"When you have fast inter-node connectivity:"),qE.forEach(t),Yu=f(ld),Lt=s(ld,"OL",{});var ad=i(Lt);$o=s(ad,"LI",{});var FE=i($o);Xu=r(FE,"ZeRO - as it requires close to no modifications to the model"),FE.forEach(t),Ku=f(ad),No=s(ad,"LI",{});var VE=i(No);Ju=r(VE,"PP+TP+DP - less communications, but requires massive changes to the model"),VE.forEach(t),ad.forEach(t),ld.forEach(t),Qu=f(td),Tt=s(td,"LI",{});var sd=i(Tt);zo=s(sd,"P",{});var WE=i(zo);em=r(WE,"when you have slow inter-node connectivity and still low on GPU memory:"),WE.forEach(t),tm=f(sd),Ro=s(sd,"OL",{});var HE=i(Ro);Co=s(HE,"LI",{});var YE=i(Co);lm=r(YE,"DP+PP+TP+ZeRO-1"),YE.forEach(t),HE.forEach(t),sd.forEach(t),td.forEach(t),Bp=f(e),re=s(e,"H2",{class:!0});var id=i(re);Oe=s(id,"A",{id:!0,class:!0,href:!0});var XE=i(Oe);Zo=s(XE,"SPAN",{});var KE=i(Zo);v(Gt.$$.fragment,KE),KE.forEach(t),XE.forEach(t),am=f(id),Bo=s(id,"SPAN",{});var JE=i(Bo);sm=r(JE,"Data Parallelism"),JE.forEach(t),id.forEach(t),qp=f(e),I=s(e,"P",{});var ht=i(I);im=r(ht,"Most users with just 2 GPUs already enjoy the increased training speed up thanks to "),qo=s(ht,"CODE",{});var QE=i(qo);om=r(QE,"DataParallel"),QE.forEach(t),rm=r(ht," (DP) and "),Fo=s(ht,"CODE",{});var eg=i(Fo);nm=r(eg,"DistributedDataParallel"),eg.forEach(t),pm=r(ht," (DDP) that are almost trivial to use. This is a built-in feature of Pytorch. Note that in general it is advised to use DDP as it is better maintained and works for all models while DP might fail for some models. "),kt=s(ht,"A",{href:!0,rel:!0});var tg=i(kt);hm=r(tg,"PyTorch documentation"),tg.forEach(t),fm=r(ht," itself recommends the use of DDP."),ht.forEach(t),Fp=f(e),ne=s(e,"H3",{class:!0});var od=i(ne);je=s(od,"A",{id:!0,class:!0,href:!0});var lg=i(je);Vo=s(lg,"SPAN",{});var ag=i(Vo);v(Ut.$$.fragment,ag),ag.forEach(t),lg.forEach(t),cm=f(od),Wo=s(od,"SPAN",{});var sg=i(Wo);dm=r(sg,"DP vs DDP"),sg.forEach(t),od.forEach(t),Vp=f(e),pe=s(e,"P",{});var Tp=i(pe);Ho=s(Tp,"CODE",{});var ig=i(Ho);um=r(ig,"DistributedDataParallel"),ig.forEach(t),mm=r(Tp," (DDP) is typically faster than "),Yo=s(Tp,"CODE",{});var og=i(Yo);vm=r(og,"DataParallel"),og.forEach(t),Pm=r(Tp," (DP), but it is not always the case:"),Tp.forEach(t),Wp=f(e),Ae=s(e,"UL",{});var rd=i(Ae);Xo=s(rd,"LI",{});var rg=i(Xo);wm=r(rg,"while DP is python threads-based, DDP is multiprocess-based - and as such it has no python threads limitations, such as GIL"),rg.forEach(t),ym=f(rd),Ko=s(rd,"LI",{});var ng=i(Ko);bm=r(ng,"on the other hand a slow inter-connectivity between the GPU cards could lead to an actual slower outcome with DDP"),ng.forEach(t),rd.forEach(t),Hp=f(e),_a=s(e,"P",{});var pg=i(_a);_m=r(pg,"Here are the main differences in the inter-GPU communication overhead between the two modes:"),pg.forEach(t),Yp=f(e),It=s(e,"P",{});var G_=i(It);St=s(G_,"A",{href:!0,rel:!0});var hg=i(St);Em=r(hg,"DDP"),hg.forEach(t),gm=r(G_,":"),G_.forEach(t),Xp=f(e),xe=s(e,"UL",{});var nd=i(xe);Jo=s(nd,"LI",{});var fg=i(Jo);Dm=r(fg,"At the start time the main process replicates the model once from gpu 0 to the rest of gpus"),fg.forEach(t),Lm=f(nd),Ea=s(nd,"LI",{});var k_=i(Ea);Tm=r(k_,"Then for each batch:"),Ot=s(k_,"OL",{});var pd=i(Ot);Qo=s(pd,"LI",{});var cg=i(Qo);Gm=r(cg,"each gpu consumes each own mini-batch of data directly"),cg.forEach(t),km=f(pd),jt=s(pd,"LI",{});var hd=i(jt);Um=r(hd,"during "),er=s(hd,"CODE",{});var dg=i(er);Im=r(dg,"backward"),dg.forEach(t),Sm=r(hd,", once the local gradients are ready, they are then averaged across all processes"),hd.forEach(t),pd.forEach(t),k_.forEach(t),nd.forEach(t),Kp=f(e),At=s(e,"P",{});var U_=i(At);xt=s(U_,"A",{href:!0,rel:!0});var ug=i(xt);Om=r(ug,"DP"),ug.forEach(t),jm=r(U_,":"),U_.forEach(t),Jp=f(e),ga=s(e,"P",{});var mg=i(ga);Am=r(mg,"For each batch:"),mg.forEach(t),Qp=f(e),D=s(e,"OL",{});var X=i(D);tr=s(X,"LI",{});var vg=i(tr);xm=r(vg,"gpu 0 reads the batch of data and then sends a mini-batch to each gpu"),vg.forEach(t),Mm=f(X),lr=s(X,"LI",{});var Pg=i(lr);$m=r(Pg,"replicates the up-to-date model from gpu 0 to each gpu"),Pg.forEach(t),Nm=f(X),Mt=s(X,"LI",{});var fd=i(Mt);zm=r(fd,"runs "),ar=s(fd,"CODE",{});var wg=i(ar);Rm=r(wg,"forward"),wg.forEach(t),Cm=r(fd," and sends output from each gpu to gpu 0, computes loss"),fd.forEach(t),Zm=f(X),Da=s(X,"LI",{});var I_=i(Da);Bm=r(I_,"scatters loss from gpu 0 to all gpus, runs "),sr=s(I_,"CODE",{});var yg=i(sr);qm=r(yg,"backward"),yg.forEach(t),I_.forEach(t),Fm=f(X),ir=s(X,"LI",{});var bg=i(ir);Vm=r(bg,"sends gradients from each gpu to gpu 0 and averages those"),bg.forEach(t),X.forEach(t),eh=f(e),La=s(e,"P",{});var _g=i(La);Wm=r(_g,"The only communication DDP performs per batch is sending gradients, whereas DP does 5 different data exchanges per batch."),_g.forEach(t),th=f(e),Me=s(e,"P",{});var cd=i(Me);Hm=r(cd,"DP copies data within the process via python threads, whereas DDP copies data via "),$t=s(cd,"A",{href:!0,rel:!0});var Eg=i($t);Ym=r(Eg,"torch.distributed"),Eg.forEach(t),Xm=r(cd,"."),cd.forEach(t),lh=f(e),Ta=s(e,"P",{});var gg=i(Ta);Km=r(gg,"Under DP gpu 0 performs a lot more work than the rest of the gpus, thus resulting in under-utilization of gpus."),gg.forEach(t),ah=f(e),Ga=s(e,"P",{});var Dg=i(Ga);Jm=r(Dg,"You can use DDP across multiple machines, but this is not the case with DP."),Dg.forEach(t),sh=f(e),ka=s(e,"P",{});var Lg=i(ka);Qm=r(Lg,"There are other differences between DP and DDP but they aren\u2019t relevant to this discussion."),Lg.forEach(t),ih=f(e),$e=s(e,"P",{});var dd=i($e);ev=r(dd,"If you want to go really deep into understanding these 2 modes, this "),Nt=s(dd,"A",{href:!0,rel:!0});var Tg=i(Nt);tv=r(Tg,"article"),Tg.forEach(t),lv=r(dd," is highly recommended, as it has great diagrams, includes multiple benchmarks and profiler outputs on various hardware, explains all the nuances that you may need to know."),dd.forEach(t),oh=f(e),Ua=s(e,"P",{});var Gg=i(Ua);av=r(Gg,"Let\u2019s look at an actual benchmark:"),Gg.forEach(t),rh=f(e),Ne=s(e,"TABLE",{});var ud=i(Ne);or=s(ud,"THEAD",{});var kg=i(or);he=s(kg,"TR",{});var Bi=i(he);Ia=s(Bi,"TH",{align:!0});var Ug=i(Ia);sv=r(Ug,"Type"),Ug.forEach(t),iv=f(Bi),rr=s(Bi,"TH",{});var Ig=i(rr);ov=r(Ig,"NVlink"),Ig.forEach(t),rv=f(Bi),Sa=s(Bi,"TH",{align:!0});var Sg=i(Sa);nv=r(Sg,"Time"),Sg.forEach(t),Bi.forEach(t),kg.forEach(t),pv=f(ud),fe=s(ud,"TBODY",{});var qi=i(fe);ce=s(qi,"TR",{});var Fi=i(ce);Oa=s(Fi,"TD",{align:!0});var Og=i(Oa);hv=r(Og,"2:DP"),Og.forEach(t),fv=f(Fi),nr=s(Fi,"TD",{});var jg=i(nr);cv=r(jg,"Y"),jg.forEach(t),dv=f(Fi),ja=s(Fi,"TD",{align:!0});var Ag=i(ja);uv=r(Ag,"110s"),Ag.forEach(t),Fi.forEach(t),mv=f(qi),de=s(qi,"TR",{});var Vi=i(de);Aa=s(Vi,"TD",{align:!0});var xg=i(Aa);vv=r(xg,"2:DDP"),xg.forEach(t),Pv=f(Vi),pr=s(Vi,"TD",{});var Mg=i(pr);wv=r(Mg,"Y"),Mg.forEach(t),yv=f(Vi),xa=s(Vi,"TD",{align:!0});var $g=i(xa);bv=r($g,"101s"),$g.forEach(t),Vi.forEach(t),_v=f(qi),ue=s(qi,"TR",{});var Wi=i(ue);Ma=s(Wi,"TD",{align:!0});var Ng=i(Ma);Ev=r(Ng,"2:DDP"),Ng.forEach(t),gv=f(Wi),hr=s(Wi,"TD",{});var zg=i(hr);Dv=r(zg,"N"),zg.forEach(t),Lv=f(Wi),$a=s(Wi,"TD",{align:!0});var Rg=i($a);Tv=r(Rg,"131s"),Rg.forEach(t),Wi.forEach(t),qi.forEach(t),ud.forEach(t),nh=f(e),Na=s(e,"P",{});var Cg=i(Na);Gv=r(Cg,"Analysis:"),Cg.forEach(t),ph=f(e),za=s(e,"P",{});var Zg=i(za);kv=r(Zg,"Here DP is ~10% slower than DDP w/ NVlink, but ~15% faster than DDP w/o NVlink"),Zg.forEach(t),hh=f(e),Ra=s(e,"P",{});var Bg=i(Ra);Uv=r(Bg,"The real difference will depend on how much data each GPU needs to sync with the others - the more there is to sync, the more a slow link will slow down the total runtime."),Bg.forEach(t),fh=f(e),Ca=s(e,"P",{});var qg=i(Ca);Iv=r(qg,"Here is the full benchmark code and outputs:"),qg.forEach(t),ch=f(e),zt=s(e,"P",{});var S_=i(zt);fr=s(S_,"CODE",{});var Fg=i(fr);Sv=r(Fg,"NCCL_P2P_DISABLE=1"),Fg.forEach(t),Ov=r(S_," was used to disable the NVLink feature on the corresponding benchmark."),S_.forEach(t),dh=f(e),v(Rt.$$.fragment,e),uh=f(e),E=s(e,"P",{});var M=i(E);jv=r(M,"Hardware: 2x TITAN RTX 24GB each + NVlink with 2 NVLinks ("),cr=s(M,"CODE",{});var Vg=i(cr);Av=r(Vg,"NV2"),Vg.forEach(t),xv=r(M," in "),dr=s(M,"CODE",{});var Wg=i(dr);Mv=r(Wg,"nvidia-smi topo -m"),Wg.forEach(t),$v=r(M,`)
Software: `),ur=s(M,"CODE",{});var Hg=i(ur);Nv=r(Hg,"pytorch-1.8-to-be"),Hg.forEach(t),zv=r(M," + "),mr=s(M,"CODE",{});var Yg=i(mr);Rv=r(Yg,"cuda-11.0"),Yg.forEach(t),Cv=r(M," / "),vr=s(M,"CODE",{});var Xg=i(vr);Zv=r(Xg,"transformers==4.3.0.dev0"),Xg.forEach(t),M.forEach(t),mh=f(e),me=s(e,"H2",{class:!0});var md=i(me);ze=s(md,"A",{id:!0,class:!0,href:!0});var Kg=i(ze);Pr=s(Kg,"SPAN",{});var Jg=i(Pr);v(Ct.$$.fragment,Jg),Jg.forEach(t),Kg.forEach(t),Bv=f(md),wr=s(md,"SPAN",{});var Qg=i(wr);qv=r(Qg,"ZeRO Data Parallelism"),Qg.forEach(t),md.forEach(t),vh=f(e),ve=s(e,"P",{});var Gp=i(ve);Fv=r(Gp,"ZeRO-powered data parallelism (ZeRO-DP) is described on the following diagram from this "),Zt=s(Gp,"A",{href:!0,rel:!0});var e3=i(Zt);Vv=r(e3,"blog post"),e3.forEach(t),Wv=f(Gp),Za=s(Gp,"IMG",{src:!0,alt:!0}),Gp.forEach(t),Ph=f(e),Re=s(e,"P",{});var vd=i(Re);Hv=r(vd,"It can be difficult to wrap one\u2019s head around it, but in reality the concept is quite simple. This is just the usual "),yr=s(vd,"CODE",{});var t3=i(yr);Yv=r(t3,"DataParallel"),t3.forEach(t),Xv=r(vd," (DP), except, instead of replicating the full model params, gradients and optimizer states, each GPU stores only a slice of it.  And then at run-time when the full layer params are needed just for the given layer, all GPUs synchronize to give each other parts that they miss - this is it."),vd.forEach(t),wh=f(e),Ba=s(e,"P",{});var l3=i(Ba);Kv=r(l3,"Consider this simple model with 3 layers, where each layer has 3 params:"),l3.forEach(t),yh=f(e),v(Bt.$$.fragment,e),bh=f(e),qa=s(e,"P",{});var a3=i(qa);Jv=r(a3,"Layer La has weights a0, a1 and a2."),a3.forEach(t),_h=f(e),Fa=s(e,"P",{});var s3=i(Fa);Qv=r(s3,"If we have 3 GPUs, the Sharded DDP (= Zero-DP) splits the model onto 3 GPUs like so:"),s3.forEach(t),Eh=f(e),v(qt.$$.fragment,e),gh=f(e),Va=s(e,"P",{});var i3=i(Va);eP=r(i3,"In a way this is the same horizontal slicing, as tensor parallelism, if you imagine the typical DNN diagram. Vertical slicing is where one puts whole layer-groups on different GPUs. But it\u2019s just the starting point."),i3.forEach(t),Dh=f(e),Wa=s(e,"P",{});var o3=i(Wa);tP=r(o3,"Now each of these GPUs will get the usual mini-batch as it works in DP:"),o3.forEach(t),Lh=f(e),v(Ft.$$.fragment,e),Th=f(e),Ha=s(e,"P",{});var r3=i(Ha);lP=r(r3,"The inputs are unmodified - they think they are going to be processed by the normal model."),r3.forEach(t),Gh=f(e),Ya=s(e,"P",{});var n3=i(Ya);aP=r(n3,"First, the inputs hit the layer La."),n3.forEach(t),kh=f(e),Xa=s(e,"P",{});var p3=i(Xa);sP=r(p3,"Let\u2019s focus just on GPU0: x0 needs a0, a1, a2 params to do its forward path, but GPU0 has only a0 - it gets sent a1 from GPU1 and a2 from GPU2, bringing all pieces of the model together."),p3.forEach(t),Uh=f(e),Ka=s(e,"P",{});var h3=i(Ka);iP=r(h3,"In parallel, GPU1 gets mini-batch x1 and it only has a1, but needs a0 and a2 params, so it gets those from GPU0 and GPU2."),h3.forEach(t),Ih=f(e),Ja=s(e,"P",{});var f3=i(Ja);oP=r(f3,"Same happens to GPU2 that gets input x2. It gets a0 and a1 from GPU0 and GPU1, and with its a2 it reconstructs the full tensor."),f3.forEach(t),Sh=f(e),Qa=s(e,"P",{});var c3=i(Qa);rP=r(c3,"All 3 GPUs get the full tensors reconstructed and a forward happens."),c3.forEach(t),Oh=f(e),es=s(e,"P",{});var d3=i(es);nP=r(d3,"As soon as the calculation is done, the data that is no longer needed gets dropped - it\u2019s only used during the calculation. The reconstruction is done efficiently via a pre-fetch."),d3.forEach(t),jh=f(e),ts=s(e,"P",{});var u3=i(ts);pP=r(u3,"And the whole process is repeated for layer Lb, then Lc forward-wise, and then backward Lc -> Lb -> La."),u3.forEach(t),Ah=f(e),ls=s(e,"P",{});var m3=i(ls);hP=r(m3,"To me this sounds like an efficient group backpacking weight distribution strategy:"),m3.forEach(t),xh=f(e),N=s(e,"OL",{});var Hi=i(N);br=s(Hi,"LI",{});var v3=i(br);fP=r(v3,"person A carries the tent"),v3.forEach(t),cP=f(Hi),_r=s(Hi,"LI",{});var P3=i(_r);dP=r(P3,"person B carries the stove"),P3.forEach(t),uP=f(Hi),Er=s(Hi,"LI",{});var w3=i(Er);mP=r(w3,"person C carries the axe"),w3.forEach(t),Hi.forEach(t),Mh=f(e),as=s(e,"P",{});var y3=i(as);vP=r(y3,"Now each night they all share what they have with others and get from others what they don\u2019t have, and in the morning they pack up their allocated type of gear and continue on their way. This is Sharded DDP / Zero DP."),y3.forEach(t),$h=f(e),ss=s(e,"P",{});var b3=i(ss);PP=r(b3,"Compare this strategy to the simple one where each person has to carry their own tent, stove and axe, which would be far more inefficient. This is DataParallel (DP and DDP) in Pytorch."),b3.forEach(t),Nh=f(e),is=s(e,"P",{});var _3=i(is);wP=r(_3,"While reading the literature on this topic you may encounter the following synonyms: Sharded, Partitioned."),_3.forEach(t),zh=f(e),os=s(e,"P",{});var E3=i(os);yP=r(E3,"If you pay close attention the way ZeRO partitions the model\u2019s weights - it looks very similar to tensor parallelism which will be discussed later. This is because it partitions/shards each layer\u2019s weights, unlike vertical model parallelism which is discussed next."),E3.forEach(t),Rh=f(e),rs=s(e,"P",{});var g3=i(rs);bP=r(g3,"Implementations:"),g3.forEach(t),Ch=f(e),z=s(e,"UL",{});var Yi=i(z);ns=s(Yi,"LI",{});var O_=i(ns);Vt=s(O_,"A",{href:!0,rel:!0});var D3=i(Vt);_P=r(D3,"DeepSpeed"),D3.forEach(t),EP=r(O_," ZeRO-DP stages 1+2+3"),O_.forEach(t),gP=f(Yi),ps=s(Yi,"LI",{});var j_=i(ps);Wt=s(j_,"A",{href:!0,rel:!0});var L3=i(Wt);DP=r(L3,"Fairscale"),L3.forEach(t),LP=r(j_," ZeRO-DP stages 1+2+3"),j_.forEach(t),TP=f(Yi),gr=s(Yi,"LI",{});var T3=i(gr);Ht=s(T3,"A",{href:!0});var A_=i(Ht);Dr=s(A_,"CODE",{});var G3=i(Dr);GP=r(G3,"transformers"),G3.forEach(t),kP=r(A_," integration"),A_.forEach(t),T3.forEach(t),Yi.forEach(t),Zh=f(e),Pe=s(e,"H2",{class:!0});var Pd=i(Pe);Ce=s(Pd,"A",{id:!0,class:!0,href:!0});var k3=i(Ce);Lr=s(k3,"SPAN",{});var U3=i(Lr);v(Yt.$$.fragment,U3),U3.forEach(t),k3.forEach(t),UP=f(Pd),Tr=s(Pd,"SPAN",{});var I3=i(Tr);IP=r(I3,"Naive Model Parallelism (Vertical) and Pipeline Parallelism"),I3.forEach(t),Pd.forEach(t),Bh=f(e),Ze=s(e,"P",{});var wd=i(Ze);SP=r(wd,"Naive Model Parallelism (MP) is where one spreads groups of model layers across multiple GPUs. The mechanism is relatively simple - switch the desired layers "),Gr=s(wd,"CODE",{});var S3=i(Gr);OP=r(S3,".to()"),S3.forEach(t),jP=r(wd," the desired devices and now whenever the data goes in and out those layers switch the data to the same device as the layer and leave the rest unmodified."),wd.forEach(t),qh=f(e),hs=s(e,"P",{});var O3=i(hs);AP=r(O3,"We refer to it as Vertical MP, because if you remember how most models are drawn, we slice the layers vertically. For example, if the following diagram shows an 8-layer model:"),O3.forEach(t),Fh=f(e),v(Xt.$$.fragment,e),Vh=f(e),fs=s(e,"P",{});var j3=i(fs);xP=r(j3,"we just sliced it in 2 vertically, placing layers 0-3 onto GPU0 and 4-7 to GPU1."),j3.forEach(t),Wh=f(e),cs=s(e,"P",{});var A3=i(cs);MP=r(A3,"Now while data travels from layer 0 to 1, 1 to 2 and 2 to 3 this is just the normal model. But when data needs to pass from layer 3 to layer 4 it needs to travel from GPU0 to GPU1 which introduces a communication overhead. If the participating GPUs are on the same compute node (e.g. same physical machine) this copying is pretty fast, but if the GPUs are located on different compute nodes (e.g. multiple machines) the communication overhead could be significantly larger."),A3.forEach(t),Hh=f(e),ds=s(e,"P",{});var x3=i(ds);$P=r(x3,"Then layers 4 to 5 to 6 to 7 are as a normal model would have and when the 7th layer completes we often need to send the data back to layer 0 where the labels are (or alternatively send the labels to the last layer). Now the loss can be computed and the optimizer can do its work."),x3.forEach(t),Yh=f(e),us=s(e,"P",{});var M3=i(us);NP=r(M3,"Problems:"),M3.forEach(t),Xh=f(e),Be=s(e,"UL",{});var yd=i(Be);kr=s(yd,"LI",{});var $3=i(kr);zP=r($3,"the main deficiency and why this one is called \u201Cnaive\u201D MP, is that all but one GPU is idle at any given moment. So if 4 GPUs are used, it\u2019s almost identical to quadrupling the amount of memory of a single GPU, and ignoring the rest of the hardware. Plus there is the overhead of copying the data between devices. So 4x 6GB cards will be able to accommodate the same size as 1x 24GB card using naive MP, except the latter will complete the training faster, since it doesn\u2019t have the data copying overhead. But, say, if you have 40GB cards and need to fit a 45GB model you can with 4x 40GB cards (but barely because of the gradient and optimizer states)"),$3.forEach(t),RP=f(yd),Ur=s(yd,"LI",{});var N3=i(Ur);CP=r(N3,"shared embeddings may need to get copied back and forth between GPUs."),N3.forEach(t),yd.forEach(t),Kh=f(e),ms=s(e,"P",{});var z3=i(ms);ZP=r(z3,"Pipeline Parallelism (PP) is almost identical to a naive MP, but it solves the GPU idling problem, by chunking the incoming batch into micro-batches and artificially creating a pipeline, which allows different GPUs to concurrently participate in the computation process."),z3.forEach(t),Jh=f(e),qe=s(e,"P",{});var bd=i(qe);BP=r(bd,"The following illustration from the "),Kt=s(bd,"A",{href:!0,rel:!0});var R3=i(Kt);qP=r(R3,"GPipe paper"),R3.forEach(t),FP=r(bd," shows the naive MP on the top, and PP on the bottom:"),bd.forEach(t),Qh=f(e),vs=s(e,"P",{});var C3=i(vs);Ps=s(C3,"IMG",{src:!0,alt:!0}),C3.forEach(t),ef=f(e),ws=s(e,"P",{});var Z3=i(ws);VP=r(Z3,"It\u2019s easy to see from the bottom diagram how PP has less dead zones, where GPUs are idle. The idle parts are referred to as the \u201Cbubble\u201D."),Z3.forEach(t),tf=f(e),ys=s(e,"P",{});var B3=i(ys);WP=r(B3,"Both parts of the diagram show a parallelism that is of degree 4. That is 4 GPUs are participating in the pipeline. So there is the forward path of 4 pipe stages F0, F1, F2 and F3 and then the return reverse order backward path of B3, B2, B1 and B0."),B3.forEach(t),lf=f(e),R=s(e,"P",{});var Xi=i(R);HP=r(Xi,"PP introduces a new hyper-parameter to tune and it\u2019s "),Ir=s(Xi,"CODE",{});var q3=i(Ir);YP=r(q3,"chunks"),q3.forEach(t),XP=r(Xi," which defines how many chunks of data are sent in a sequence through the same pipe stage. For example, in the bottomw diagram you can see that "),Sr=s(Xi,"CODE",{});var F3=i(Sr);KP=r(F3,"chunks=4"),F3.forEach(t),JP=r(Xi,". GPU0 performs the same forward path on chunk 0, 1, 2 and 3 (F0,0, F0,1, F0,2, F0,3) and then it waits for other GPUs to do their work and only when their work is starting to be complete, GPU0 starts to work again doing the backward path for chunks 3, 2, 1 and 0 (B0,3, B0,2, B0,1, B0,0)."),Xi.forEach(t),af=f(e),Fe=s(e,"P",{});var _d=i(Fe);QP=r(_d,"Note that conceptually this is the same concept as gradient accumulation steps (GAS). Pytorch uses "),Or=s(_d,"CODE",{});var V3=i(Or);e1=r(V3,"chunks"),V3.forEach(t),t1=r(_d,", whereas DeepSpeed refers to the same hyper-parameter as GAS."),_d.forEach(t),sf=f(e),Ve=s(e,"P",{});var Ed=i(Ve);l1=r(Ed,"Because of the chunks, PP introduces the concept of micro-batches (MBS). DP splits the global data batch size into mini-batches, so if you have a DP degree of 4, a global batch size of 1024 gets split up into 4 mini-batches of 256 each (1024/4). And if the number of "),jr=s(Ed,"CODE",{});var W3=i(jr);a1=r(W3,"chunks"),W3.forEach(t),s1=r(Ed," (or GAS) is 32 we end up with a micro-batch size of 8 (256/32). Each Pipeline stage works with a single micro-batch at a time."),Ed.forEach(t),of=f(e),C=s(e,"P",{});var Ki=i(C);i1=r(Ki,"To calculate the global batch size of the DP + PP setup we then do: "),Ar=s(Ki,"CODE",{});var H3=i(Ar);o1=r(H3,"mbs*chunks*dp_degree"),H3.forEach(t),r1=r(Ki," ("),xr=s(Ki,"CODE",{});var Y3=i(xr);n1=r(Y3,"8*32*4=1024"),Y3.forEach(t),p1=r(Ki,")."),Ki.forEach(t),rf=f(e),bs=s(e,"P",{});var X3=i(bs);h1=r(X3,"Let\u2019s go back to the diagram."),X3.forEach(t),nf=f(e),Z=s(e,"P",{});var Ji=i(Z);f1=r(Ji,"With "),Mr=s(Ji,"CODE",{});var K3=i(Mr);c1=r(K3,"chunks=1"),K3.forEach(t),d1=r(Ji," you end up with the naive MP, which is very inefficient. With a very large "),$r=s(Ji,"CODE",{});var J3=i($r);u1=r(J3,"chunks"),J3.forEach(t),m1=r(Ji," value you end up with tiny micro-batch sizes which could be not every efficient either. So one has to experiment to find the value that leads to the highest efficient utilization of the gpus."),Ji.forEach(t),pf=f(e),S=s(e,"P",{});var ft=i(S);v1=r(ft,"While the diagram shows that there is a bubble of \u201Cdead\u201D time that can\u2019t be parallelized because the last "),Nr=s(ft,"CODE",{});var Q3=i(Nr);P1=r(Q3,"forward"),Q3.forEach(t),w1=r(ft," stage has to wait for "),zr=s(ft,"CODE",{});var e4=i(zr);y1=r(e4,"backward"),e4.forEach(t),b1=r(ft," to complete the pipeline, the purpose of finding the best value for "),Rr=s(ft,"CODE",{});var t4=i(Rr);_1=r(t4,"chunks"),t4.forEach(t),E1=r(ft," is to enable a high concurrent GPU utilization across all participating GPUs which translates to minimizing the size of the bubble."),ft.forEach(t),hf=f(e),_s=s(e,"P",{});var l4=i(_s);g1=r(l4,"There are 2 groups of solutions - the traditional Pipeline API and the more modern solutions that make things much easier for the end user."),l4.forEach(t),ff=f(e),Es=s(e,"P",{});var a4=i(Es);D1=r(a4,"Traditional Pipeline API solutions:"),a4.forEach(t),cf=f(e),O=s(e,"UL",{});var ct=i(O);Cr=s(ct,"LI",{});var s4=i(Cr);L1=r(s4,"PyTorch"),s4.forEach(t),T1=f(ct),Zr=s(ct,"LI",{});var i4=i(Zr);G1=r(i4,"FairScale"),i4.forEach(t),k1=f(ct),Br=s(ct,"LI",{});var o4=i(Br);U1=r(o4,"DeepSpeed"),o4.forEach(t),I1=f(ct),qr=s(ct,"LI",{});var r4=i(qr);S1=r(r4,"Megatron-LM"),r4.forEach(t),ct.forEach(t),df=f(e),gs=s(e,"P",{});var n4=i(gs);O1=r(n4,"Modern solutions:"),n4.forEach(t),uf=f(e),We=s(e,"UL",{});var gd=i(We);Fr=s(gd,"LI",{});var p4=i(Fr);j1=r(p4,"Varuna"),p4.forEach(t),A1=f(gd),Vr=s(gd,"LI",{});var h4=i(Vr);x1=r(h4,"Sagemaker"),h4.forEach(t),gd.forEach(t),mf=f(e),Ds=s(e,"P",{});var f4=i(Ds);M1=r(f4,"Problems with traditional Pipeline API solutions:"),f4.forEach(t),vf=f(e),j=s(e,"UL",{});var dt=i(j);Jt=s(dt,"LI",{});var Dd=i(Jt);$1=r(Dd,"have to modify the model quite heavily, because Pipeline requires one to rewrite the normal flow of modules into a "),Wr=s(Dd,"CODE",{});var c4=i(Wr);N1=r(c4,"nn.Sequential"),c4.forEach(t),z1=r(Dd," sequence of the same, which may require changes to the design of the model."),Dd.forEach(t),R1=f(dt),Ls=s(dt,"LI",{});var x_=i(Ls);C1=r(x_,"currently the Pipeline API is very restricted. If you had a bunch of python variables being passed in the very first stage of the Pipeline, you will have to find a way around it. Currently, the pipeline interface requires either a single Tensor or a tuple of Tensors as the only input and output. These tensors must have a batch size as the very first dimension, since pipeline is going to chunk the mini batch into micro-batches. Possible improvements are being discussed here "),Qt=s(x_,"A",{href:!0,rel:!0});var d4=i(Qt);Z1=r(d4,"https://github.com/pytorch/pytorch/pull/50693"),d4.forEach(t),x_.forEach(t),B1=f(dt),Hr=s(dt,"LI",{});var u4=i(Hr);q1=r(u4,"conditional control flow at the level of pipe stages is not possible - e.g., Encoder-Decoder models like T5 require special workarounds to handle a conditional encoder stage."),u4.forEach(t),F1=f(dt),Yr=s(dt,"LI",{});var m4=i(Yr);V1=r(m4,"have to arrange each layer so that the output of one model becomes an input to the other model."),m4.forEach(t),dt.forEach(t),Pf=f(e),Ts=s(e,"P",{});var v4=i(Ts);W1=r(v4,"We are yet to experiment with Varuna and SageMaker but their papers report that they have overcome the list of problems mentioned above and that they require much smaller changes to the user\u2019s model."),v4.forEach(t),wf=f(e),Gs=s(e,"P",{});var P4=i(Gs);H1=r(P4,"Implementations:"),P4.forEach(t),yf=f(e),u=s(e,"UL",{});var k=i(u);el=s(k,"LI",{});var Ld=i(el);tl=s(Ld,"A",{href:!0,rel:!0});var w4=i(tl);Y1=r(w4,"Pytorch"),w4.forEach(t),X1=r(Ld," (initial support in pytorch-1.8, and progressively getting improved in 1.9 and more so in 1.10). Some "),ll=s(Ld,"A",{href:!0,rel:!0});var y4=i(ll);K1=r(y4,"examples"),y4.forEach(t),Ld.forEach(t),J1=f(k),Xr=s(k,"LI",{});var b4=i(Xr);al=s(b4,"A",{href:!0,rel:!0});var _4=i(al);Q1=r(_4,"FairScale"),_4.forEach(t),b4.forEach(t),ew=f(k),Kr=s(k,"LI",{});var E4=i(Kr);sl=s(E4,"A",{href:!0,rel:!0});var g4=i(sl);tw=r(g4,"DeepSpeed"),g4.forEach(t),E4.forEach(t),lw=f(k),ks=s(k,"LI",{});var M_=i(ks);il=s(M_,"A",{href:!0,rel:!0});var D4=i(il);aw=r(D4,"Megatron-LM"),D4.forEach(t),sw=r(M_," has an internal implementation - no API."),M_.forEach(t),iw=f(k),Jr=s(k,"LI",{});var L4=i(Jr);ol=s(L4,"A",{href:!0,rel:!0});var T4=i(ol);ow=r(T4,"Varuna"),T4.forEach(t),L4.forEach(t),rw=f(k),Us=s(k,"LI",{});var $_=i(Us);rl=s($_,"A",{href:!0,rel:!0});var G4=i(rl);nw=r(G4,"SageMaker"),G4.forEach(t),pw=r($_," - this is a proprietary solution that can only be used on AWS."),$_.forEach(t),hw=f(k),Is=s(k,"LI",{});var N_=i(Is);nl=s(N_,"A",{href:!0,rel:!0});var k4=i(nl);fw=r(k4,"OSLO"),k4.forEach(t),cw=r(N_," - this is implemented based on the Hugging Face Transformers."),N_.forEach(t),k.forEach(t),bf=f(e),He=s(e,"P",{});var Td=i(He);dw=r(Td,"\u{1F917} Transformers status: as of this writing none of the models supports full-PP. GPT2 and T5 models have naive MP support. The main obstacle is being unable to convert the models to "),Qr=s(Td,"CODE",{});var U4=i(Qr);uw=r(U4,"nn.Sequential"),U4.forEach(t),mw=r(Td," and have all the inputs to be Tensors. This is because currently the models include many features that make the conversion very complicated, and will need to be removed to accomplish that."),Td.forEach(t),_f=f(e),Ss=s(e,"P",{});var I4=i(Ss);vw=r(I4,"Other approaches:"),I4.forEach(t),Ef=f(e),we=s(e,"P",{});var kp=i(we);Pw=r(kp,"DeepSpeed, Varuna and SageMaker use the concept of an "),pl=s(kp,"A",{href:!0,rel:!0});var S4=i(pl);ww=r(S4,"Interleaved Pipeline"),S4.forEach(t),yw=f(kp),Os=s(kp,"IMG",{src:!0,alt:!0}),kp.forEach(t),gf=f(e),js=s(e,"P",{});var O4=i(js);bw=r(O4,"Here the bubble (idle time) is further minimized by prioritizing backward passes."),O4.forEach(t),Df=f(e),As=s(e,"P",{});var j4=i(As);_w=r(j4,"Varuna further tries to improve the schedule by using simulations to discover the most efficient scheduling."),j4.forEach(t),Lf=f(e),Ye=s(e,"P",{});var Gd=i(Ye);Ew=r(Gd,"OSLO has pipeline parallelism implementation based on the Transformers without "),en=s(Gd,"CODE",{});var A4=i(en);gw=r(A4,"nn.Sequential"),A4.forEach(t),Dw=r(Gd," converting."),Gd.forEach(t),Tf=f(e),ye=s(e,"H2",{class:!0});var kd=i(ye);Xe=s(kd,"A",{id:!0,class:!0,href:!0});var x4=i(Xe);tn=s(x4,"SPAN",{});var M4=i(tn);v(hl.$$.fragment,M4),M4.forEach(t),x4.forEach(t),Lw=f(kd),ln=s(kd,"SPAN",{});var $4=i(ln);Tw=r($4,"Tensor Parallelism"),$4.forEach(t),kd.forEach(t),Gf=f(e),xs=s(e,"P",{});var N4=i(xs);Gw=r(N4,"In Tensor Parallelism each GPU processes only a slice of a tensor and only aggregates the full tensor for operations that require the whole thing."),N4.forEach(t),kf=f(e),B=s(e,"P",{});var Qi=i(B);kw=r(Qi,"In this section we use concepts and diagrams from the "),fl=s(Qi,"A",{href:!0,rel:!0});var z4=i(fl);Uw=r(z4,"Megatron-LM"),z4.forEach(t),Iw=r(Qi," paper: "),cl=s(Qi,"A",{href:!0,rel:!0});var R4=i(cl);Sw=r(R4,"Efficient Large-Scale Language Model Training on GPU Clusters"),R4.forEach(t),Ow=r(Qi,"."),Qi.forEach(t),Uf=f(e),q=s(e,"P",{});var eo=i(q);jw=r(eo,"The main building block of any transformer is a fully connected "),an=s(eo,"CODE",{});var C4=i(an);Aw=r(C4,"nn.Linear"),C4.forEach(t),xw=r(eo," followed by a nonlinear activation "),sn=s(eo,"CODE",{});var Z4=i(sn);Mw=r(Z4,"GeLU"),Z4.forEach(t),$w=r(eo,"."),eo.forEach(t),If=f(e),L=s(e,"P",{});var K=i(L);Nw=r(K,"Following the Megatron\u2019s paper notation, we can write the dot-product part of it as "),on=s(K,"CODE",{});var B4=i(on);zw=r(B4,"Y = GeLU(XA)"),B4.forEach(t),Rw=r(K,", where "),rn=s(K,"CODE",{});var q4=i(rn);Cw=r(q4,"X"),q4.forEach(t),Zw=r(K," and "),nn=s(K,"CODE",{});var F4=i(nn);Bw=r(F4,"Y"),F4.forEach(t),qw=r(K," are the input and output vectors, and "),pn=s(K,"CODE",{});var V4=i(pn);Fw=r(V4,"A"),V4.forEach(t),Vw=r(K," is the weight matrix."),K.forEach(t),Sf=f(e),dl=s(e,"P",{});var z_=i(dl);Ww=r(z_,`If we look at the computation in matrix form, it\u2019s easy to see how the matrix multiplication can be split between multiple GPUs:
`),Ms=s(z_,"IMG",{src:!0,alt:!0}),z_.forEach(t),Of=f(e),d=s(e,"P",{});var _=i(d);Hw=r(_,"If we split the weight matrix "),hn=s(_,"CODE",{});var W4=i(hn);Yw=r(W4,"A"),W4.forEach(t),Xw=r(_," column-wise across "),fn=s(_,"CODE",{});var H4=i(fn);Kw=r(H4,"N"),H4.forEach(t),Jw=r(_," GPUs and perform matrix multiplications "),cn=s(_,"CODE",{});var Y4=i(cn);Qw=r(Y4,"XA_1"),Y4.forEach(t),e2=r(_," through "),dn=s(_,"CODE",{});var X4=i(dn);t2=r(X4,"XA_n"),X4.forEach(t),l2=r(_," in parallel, then we will end up with "),un=s(_,"CODE",{});var K4=i(un);a2=r(K4,"N"),K4.forEach(t),s2=r(_," output vectors "),mn=s(_,"CODE",{});var J4=i(mn);i2=r(J4,"Y_1, Y_2, ..., Y_n"),J4.forEach(t),o2=r(_," which can be fed into "),vn=s(_,"CODE",{});var Q4=i(vn);r2=r(Q4,"GeLU"),Q4.forEach(t),n2=r(_,` independently:
`),$s=s(_,"IMG",{src:!0,alt:!0}),_.forEach(t),jf=f(e),ul=s(e,"P",{});var R_=i(ul);p2=r(R_,`Using this principle, we can update an MLP of arbitrary depth, without the need for any synchronization between GPUs until the very end, where we need to reconstruct the output vector from shards. The Megatron-LM paper authors provide a helpful illustration for that:
`),Ns=s(R_,"IMG",{src:!0,alt:!0}),R_.forEach(t),Af=f(e),ml=s(e,"P",{});var C_=i(ml);h2=r(C_,`Parallelizing the multi-headed attention layers is even simpler, since they are already inherently parallel, due to having multiple independent heads!
`),zs=s(C_,"IMG",{src:!0,alt:!0}),C_.forEach(t),xf=f(e),Rs=s(e,"P",{});var e0=i(Rs);f2=r(e0,"Special considerations: TP requires very fast network, and therefore it\u2019s not advisable to do TP across more than one node. Practically, if a node has 4 GPUs, the highest TP degree is therefore 4. If you need a TP degree of 8, you need to use nodes that have at least 8 GPUs."),e0.forEach(t),Mf=f(e),F=s(e,"P",{});var to=i(F);c2=r(to,"This section is based on the original much more "),vl=s(to,"A",{href:!0,rel:!0});var t0=i(vl);d2=r(t0,"detailed TP overview"),t0.forEach(t),u2=r(to,`.
by `),Pl=s(to,"A",{href:!0,rel:!0});var l0=i(Pl);m2=r(l0,"@anton-l"),l0.forEach(t),v2=r(to,"."),to.forEach(t),$f=f(e),Cs=s(e,"P",{});var a0=i(Cs);P2=r(a0,"SageMaker combines TP with DP for a more efficient processing."),a0.forEach(t),Nf=f(e),Zs=s(e,"P",{});var s0=i(Zs);w2=r(s0,"Alternative names:"),s0.forEach(t),zf=f(e),Bs=s(e,"UL",{});var i0=i(Bs);qs=s(i0,"LI",{});var Z_=i(qs);y2=r(Z_,"DeepSpeed calls it "),wl=s(Z_,"A",{href:!0,rel:!0});var o0=i(wl);b2=r(o0,"tensor slicing"),o0.forEach(t),Z_.forEach(t),i0.forEach(t),Rf=f(e),Fs=s(e,"P",{});var r0=i(Fs);_2=r(r0,"Implementations:"),r0.forEach(t),Cf=f(e),A=s(e,"UL",{});var ut=i(A);Vs=s(ut,"LI",{});var B_=i(Vs);yl=s(B_,"A",{href:!0,rel:!0});var n0=i(yl);E2=r(n0,"Megatron-LM"),n0.forEach(t),g2=r(B_," has an internal implementation, as it\u2019s very model-specific"),B_.forEach(t),D2=f(ut),Ws=s(ut,"LI",{});var q_=i(Ws);bl=s(q_,"A",{href:!0,rel:!0});var p0=i(bl);L2=r(p0,"parallelformers"),p0.forEach(t),T2=r(q_," (only inference at the moment)"),q_.forEach(t),G2=f(ut),Hs=s(ut,"LI",{});var F_=i(Hs);_l=s(F_,"A",{href:!0,rel:!0});var h0=i(_l);k2=r(h0,"SageMaker"),h0.forEach(t),U2=r(F_," - this is a proprietary solution that can only be used on AWS."),F_.forEach(t),I2=f(ut),Ys=s(ut,"LI",{});var V_=i(Ys);El=s(V_,"A",{href:!0,rel:!0});var f0=i(El);S2=r(f0,"OSLO"),f0.forEach(t),O2=r(V_," has the tensor parallelism implementation based on the Transformers."),V_.forEach(t),ut.forEach(t),Zf=f(e),Xs=s(e,"P",{});var c0=i(Xs);j2=r(c0,"\u{1F917} Transformers status:"),c0.forEach(t),Bf=f(e),V=s(e,"UL",{});var lo=i(V);Pn=s(lo,"LI",{});var d0=i(Pn);A2=r(d0,"core: not yet implemented in the core"),d0.forEach(t),x2=f(lo),gl=s(lo,"LI",{});var Ud=i(gl);M2=r(Ud,"but if you want inference "),Dl=s(Ud,"A",{href:!0,rel:!0});var u0=i(Dl);$2=r(u0,"parallelformers"),u0.forEach(t),N2=r(Ud," provides this support for most of our models. So until this is implemented in the core you can use theirs. And hopefully training mode will be supported too."),Ud.forEach(t),z2=f(lo),Ks=s(lo,"LI",{});var W_=i(Ks);R2=r(W_,"Deepspeed-Inference also supports our BERT, GPT-2, and GPT-Neo models in their super-fast CUDA-kernel-based inference mode, see more "),Ll=s(W_,"A",{href:!0,rel:!0});var m0=i(Ll);C2=r(m0,"here"),m0.forEach(t),W_.forEach(t),lo.forEach(t),qf=f(e),be=s(e,"H2",{class:!0});var Id=i(be);Ke=s(Id,"A",{id:!0,class:!0,href:!0});var v0=i(Ke);wn=s(v0,"SPAN",{});var P0=i(wn);v(Tl.$$.fragment,P0),P0.forEach(t),v0.forEach(t),Z2=f(Id),yn=s(Id,"SPAN",{});var w0=i(yn);B2=r(w0,"DP+PP"),w0.forEach(t),Id.forEach(t),Ff=f(e),Je=s(e,"P",{});var Sd=i(Je);q2=r(Sd,"The following diagram from the DeepSpeed "),Gl=s(Sd,"A",{href:!0,rel:!0});var y0=i(Gl);F2=r(y0,"pipeline tutorial"),y0.forEach(t),V2=r(Sd," demonstrates how one combines DP with PP."),Sd.forEach(t),Vf=f(e),Js=s(e,"P",{});var b0=i(Js);Qs=s(b0,"IMG",{src:!0,alt:!0}),b0.forEach(t),Wf=f(e),ei=s(e,"P",{});var _0=i(ei);W2=r(_0,"Here it\u2019s important to see how DP rank 0 doesn\u2019t see GPU2 and DP rank 1 doesn\u2019t see GPU3. To DP there is just GPUs 0 and 1 where it feeds data as if there were just 2 GPUs. GPU0 \u201Csecretly\u201D offloads some of its load to GPU2 using PP. And GPU1 does the same by enlisting GPU3 to its aid."),_0.forEach(t),Hf=f(e),ti=s(e,"P",{});var E0=i(ti);H2=r(E0,"Since each dimension requires at least 2 GPUs, here you\u2019d need at least 4 GPUs."),E0.forEach(t),Yf=f(e),li=s(e,"P",{});var g0=i(li);Y2=r(g0,"Implementations:"),g0.forEach(t),Xf=f(e),T=s(e,"UL",{});var J=i(T);bn=s(J,"LI",{});var D0=i(bn);kl=s(D0,"A",{href:!0,rel:!0});var L0=i(kl);X2=r(L0,"DeepSpeed"),L0.forEach(t),D0.forEach(t),K2=f(J),_n=s(J,"LI",{});var T0=i(_n);Ul=s(T0,"A",{href:!0,rel:!0});var G0=i(Ul);J2=r(G0,"Megatron-LM"),G0.forEach(t),T0.forEach(t),Q2=f(J),En=s(J,"LI",{});var k0=i(En);Il=s(k0,"A",{href:!0,rel:!0});var U0=i(Il);ey=r(U0,"Varuna"),U0.forEach(t),k0.forEach(t),ty=f(J),gn=s(J,"LI",{});var I0=i(gn);Sl=s(I0,"A",{href:!0,rel:!0});var S0=i(Sl);ly=r(S0,"SageMaker"),S0.forEach(t),I0.forEach(t),ay=f(J),Dn=s(J,"LI",{});var O0=i(Dn);Ol=s(O0,"A",{href:!0,rel:!0});var j0=i(Ol);sy=r(j0,"OSLO"),j0.forEach(t),O0.forEach(t),J.forEach(t),Kf=f(e),ai=s(e,"P",{});var A0=i(ai);iy=r(A0,"\u{1F917} Transformers status: not yet implemented"),A0.forEach(t),Jf=f(e),_e=s(e,"H2",{class:!0});var Od=i(_e);Qe=s(Od,"A",{id:!0,class:!0,href:!0});var x0=i(Qe);Ln=s(x0,"SPAN",{});var M0=i(Ln);v(jl.$$.fragment,M0),M0.forEach(t),x0.forEach(t),oy=f(Od),Tn=s(Od,"SPAN",{});var $0=i(Tn);ry=r($0,"DP+PP+TP"),$0.forEach(t),Od.forEach(t),Qf=f(e),si=s(e,"P",{});var N0=i(si);ny=r(N0,"To get an even more efficient training a 3D parallelism is used where PP is combined with TP and DP. This can be seen in the following diagram."),N0.forEach(t),ec=f(e),ii=s(e,"P",{});var z0=i(ii);oi=s(z0,"IMG",{src:!0,alt:!0}),z0.forEach(t),tc=f(e),et=s(e,"P",{});var jd=i(et);py=r(jd,"This diagram is from a blog post "),Al=s(jd,"A",{href:!0,rel:!0});var R0=i(Al);hy=r(R0,"3D parallelism: Scaling to trillion-parameter models"),R0.forEach(t),fy=r(jd,", which is a good read as well."),jd.forEach(t),lc=f(e),ri=s(e,"P",{});var C0=i(ri);cy=r(C0,"Since each dimension requires at least 2 GPUs, here you\u2019d need at least 8 GPUs."),C0.forEach(t),ac=f(e),ni=s(e,"P",{});var Z0=i(ni);dy=r(Z0,"Implementations:"),Z0.forEach(t),sc=f(e),G=s(e,"UL",{});var Q=i(G);pi=s(Q,"LI",{});var H_=i(pi);xl=s(H_,"A",{href:!0,rel:!0});var B0=i(xl);uy=r(B0,"DeepSpeed"),B0.forEach(t),my=r(H_," - DeepSpeed also includes an even more efficient DP, which they call ZeRO-DP."),H_.forEach(t),vy=f(Q),Gn=s(Q,"LI",{});var q0=i(Gn);Ml=s(q0,"A",{href:!0,rel:!0});var F0=i(Ml);Py=r(F0,"Megatron-LM"),F0.forEach(t),q0.forEach(t),wy=f(Q),kn=s(Q,"LI",{});var V0=i(kn);$l=s(V0,"A",{href:!0,rel:!0});var W0=i($l);yy=r(W0,"Varuna"),W0.forEach(t),V0.forEach(t),by=f(Q),Un=s(Q,"LI",{});var H0=i(Un);Nl=s(H0,"A",{href:!0,rel:!0});var Y0=i(Nl);_y=r(Y0,"SageMaker"),Y0.forEach(t),H0.forEach(t),Ey=f(Q),In=s(Q,"LI",{});var X0=i(In);zl=s(X0,"A",{href:!0,rel:!0});var K0=i(zl);gy=r(K0,"OSLO"),K0.forEach(t),X0.forEach(t),Q.forEach(t),ic=f(e),hi=s(e,"P",{});var J0=i(hi);Dy=r(J0,"\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),J0.forEach(t),oc=f(e),Ee=s(e,"H2",{class:!0});var Ad=i(Ee);tt=s(Ad,"A",{id:!0,class:!0,href:!0});var Q0=i(tt);Sn=s(Q0,"SPAN",{});var e5=i(Sn);v(Rl.$$.fragment,e5),e5.forEach(t),Q0.forEach(t),Ly=f(Ad),On=s(Ad,"SPAN",{});var t5=i(On);Ty=r(t5,"ZeRO DP+PP+TP"),t5.forEach(t),Ad.forEach(t),rc=f(e),lt=s(e,"P",{});var xd=i(lt);Gy=r(xd,"One of the main features of DeepSpeed is ZeRO, which is a super-scalable extension of DP. It has already been discussed in "),fi=s(xd,"A",{href:!0});var l5=i(fi);ky=r(l5,"ZeRO Data Parallelism"),l5.forEach(t),Uy=r(xd,". Normally it\u2019s a standalone feature that doesn\u2019t require PP or TP. But it can be combined with PP and TP."),xd.forEach(t),nc=f(e),ci=s(e,"P",{});var a5=i(ci);Iy=r(a5,"When ZeRO-DP is combined with PP (and optionally TP) it typically enables only ZeRO stage 1 (optimizer sharding)."),a5.forEach(t),pc=f(e),di=s(e,"P",{});var s5=i(di);Sy=r(s5,"While it\u2019s theoretically possible to use ZeRO stage 2 (gradient sharding) with Pipeline Parallelism, it will have bad performance impacts. There would need to be an additional reduce-scatter collective for every micro-batch to aggregate the gradients before sharding, which adds a potentially significant communication overhead. By nature of Pipeline Parallelism, small micro-batches are used and instead the focus is on trying to balance arithmetic intensity (micro-batch size) with minimizing the Pipeline bubble (number of micro-batches). Therefore those communication costs are going to hurt."),s5.forEach(t),hc=f(e),at=s(e,"P",{});var Md=i(at);Oy=r(Md,"In addition, There are already fewer layers than normal due to PP and so the memory savings won\u2019t be huge. PP already reduces gradient size by "),jn=s(Md,"CODE",{});var i5=i(jn);jy=r(i5,"1/PP"),i5.forEach(t),Ay=r(Md,", and so gradient sharding savings on top of that are less significant than pure DP."),Md.forEach(t),fc=f(e),ui=s(e,"P",{});var o5=i(ui);xy=r(o5,"ZeRO stage 3 is not a good choice either for the same reason - more inter-node communications required."),o5.forEach(t),cc=f(e),mi=s(e,"P",{});var r5=i(mi);My=r(r5,"And since we have ZeRO, the other benefit is ZeRO-Offload. Since this is stage 1 optimizer states can be offloaded to CPU."),r5.forEach(t),dc=f(e),vi=s(e,"P",{});var n5=i(vi);$y=r(n5,"Implementations:"),n5.forEach(t),uc=f(e),st=s(e,"UL",{});var $d=i(st);it=s($d,"LI",{});var Up=i(it);Cl=s(Up,"A",{href:!0,rel:!0});var p5=i(Cl);Ny=r(p5,"Megatron-DeepSpeed"),p5.forEach(t),zy=r(Up," and "),Zl=s(Up,"A",{href:!0,rel:!0});var h5=i(Zl);Ry=r(h5,"Megatron-Deepspeed from BigScience"),h5.forEach(t),Cy=r(Up,", which is the fork of the former repo."),Up.forEach(t),Zy=f($d),An=s($d,"LI",{});var f5=i(An);Bl=s(f5,"A",{href:!0,rel:!0});var c5=i(Bl);By=r(c5,"OSLO"),c5.forEach(t),f5.forEach(t),$d.forEach(t),mc=f(e),Pi=s(e,"P",{});var d5=i(Pi);qy=r(d5,"Important papers:"),d5.forEach(t),vc=f(e),wi=s(e,"UL",{});var u5=i(wi);xn=s(u5,"LI",{});var m5=i(xn);ql=s(m5,"A",{href:!0,rel:!0});var v5=i(ql);Fy=r(v5,"Using DeepSpeed and Megatron to Train Megatron-Turing NLG 530B, A Large-Scale Generative Language Model"),v5.forEach(t),m5.forEach(t),u5.forEach(t),Pc=f(e),yi=s(e,"P",{});var P5=i(yi);Vy=r(P5,"\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),P5.forEach(t),wc=f(e),ge=s(e,"H2",{class:!0});var Nd=i(ge);ot=s(Nd,"A",{id:!0,class:!0,href:!0});var w5=i(ot);Mn=s(w5,"SPAN",{});var y5=i(Mn);v(Fl.$$.fragment,y5),y5.forEach(t),w5.forEach(t),Wy=f(Nd),$n=s(Nd,"SPAN",{});var b5=i($n);Hy=r(b5,"FlexFlow"),b5.forEach(t),Nd.forEach(t),yc=f(e),Vl=s(e,"P",{});var Y_=i(Vl);Wl=s(Y_,"A",{href:!0,rel:!0});var _5=i(Wl);Yy=r(_5,"FlexFlow"),_5.forEach(t),Xy=r(Y_," also solves the parallelization problem in a slightly different approach."),Y_.forEach(t),bc=f(e),Hl=s(e,"P",{});var X_=i(Hl);Ky=r(X_,"Paper: "),Yl=s(X_,"A",{href:!0,rel:!0});var E5=i(Yl);Jy=r(E5,"\u201CBeyond Data and Model Parallelism for Deep Neural Networks\u201D by Zhihao Jia, Matei Zaharia, Alex Aiken"),E5.forEach(t),X_.forEach(t),_c=f(e),bi=s(e,"P",{});var g5=i(bi);Qy=r(g5,"It performs a sort of 4D Parallelism over Sample-Operator-Attribute-Parameter."),g5.forEach(t),Ec=f(e),x=s(e,"OL",{});var mt=i(x);Nn=s(mt,"LI",{});var D5=i(Nn);eb=r(D5,"Sample = Data Parallelism (sample-wise parallel)"),D5.forEach(t),tb=f(mt),zn=s(mt,"LI",{});var L5=i(zn);lb=r(L5,"Operator = Parallelize a single operation into several sub-operations"),L5.forEach(t),ab=f(mt),Rn=s(mt,"LI",{});var T5=i(Rn);sb=r(T5,"Attribute = Data Parallelism (length-wise parallel)"),T5.forEach(t),ib=f(mt),Cn=s(mt,"LI",{});var G5=i(Cn);ob=r(G5,"Parameter = Model Parallelism (regardless of dimension - horizontal or vertical)"),G5.forEach(t),mt.forEach(t),gc=f(e),_i=s(e,"P",{});var k5=i(_i);rb=r(k5,"Examples:"),k5.forEach(t),Dc=f(e),Ei=s(e,"UL",{});var U5=i(Ei);Zn=s(U5,"LI",{});var I5=i(Zn);nb=r(I5,"Sample"),I5.forEach(t),U5.forEach(t),Lc=f(e),gi=s(e,"P",{});var S5=i(gi);pb=r(S5,"Let\u2019s take 10 batches of sequence length 512. If we parallelize them by sample dimension into 2 devices, we get 10 x 512 which becomes be 5 x 2 x 512."),S5.forEach(t),Tc=f(e),Di=s(e,"UL",{});var O5=i(Di);Bn=s(O5,"LI",{});var j5=i(Bn);hb=r(j5,"Operator"),j5.forEach(t),O5.forEach(t),Gc=f(e),Li=s(e,"P",{});var A5=i(Li);fb=r(A5,"If we perform layer normalization, we compute std first and mean second, and then we can normalize data. Operator parallelism allows computing std and mean in parallel. So if we parallelize them by operator dimension into 2 devices (cuda:0, cuda:1), first we copy input data into both devices, and cuda:0 computes std, cuda:1 computes mean at the same time."),A5.forEach(t),kc=f(e),Ti=s(e,"UL",{});var x5=i(Ti);qn=s(x5,"LI",{});var M5=i(qn);cb=r(M5,"Attribute"),M5.forEach(t),x5.forEach(t),Uc=f(e),Gi=s(e,"P",{});var $5=i(Gi);db=r($5,"We have 10 batches of 512 length. If we parallelize them by attribute dimension into 2 devices, 10 x 512 will be 10 x 2 x 256."),$5.forEach(t),Ic=f(e),ki=s(e,"UL",{});var N5=i(ki);Fn=s(N5,"LI",{});var z5=i(Fn);ub=r(z5,"Parameter"),z5.forEach(t),N5.forEach(t),Sc=f(e),Ui=s(e,"P",{});var R5=i(Ui);mb=r(R5,"It is similar with tensor model parallelism or naive layer-wise model parallelism."),R5.forEach(t),Oc=f(e),Ii=s(e,"P",{});var C5=i(Ii);Si=s(C5,"IMG",{src:!0,alt:!0}),C5.forEach(t),jc=f(e),Oi=s(e,"P",{});var Z5=i(Oi);vb=r(Z5,"The significance of this framework is that it takes resources like (1) GPU/TPU/CPU vs. (2) RAM/DRAM vs. (3) fast-intra-connect/slow-inter-connect and it automatically optimizes all these  algorithmically deciding which parallelisation to use where."),Z5.forEach(t),Ac=f(e),ji=s(e,"P",{});var B5=i(ji);Pb=r(B5,"One very important aspect is that FlexFlow is designed for optimizing DNN parallelizations for models with static and fixed workloads, since models with dynamic behavior may prefer different parallelization strategies across iterations."),B5.forEach(t),xc=f(e),Ai=s(e,"P",{});var q5=i(Ai);wb=r(q5,"So the promise is very attractive - it runs a 30min simulation on the cluster of choice and it comes up with the best strategy to utilise this specific environment. If you add/remove/replace any parts it\u2019ll run and re-optimize the plan for that. And then you can train. A different setup will have its own custom optimization."),q5.forEach(t),Mc=f(e),rt=s(e,"P",{});var zd=i(rt);yb=r(zd,"\u{1F917} Transformers status: not yet integrated. We already have our models FX-trace-able via "),Xl=s(zd,"A",{href:!0,rel:!0});var F5=i(Xl);bb=r(F5,"transformers.utils.fx"),F5.forEach(t),_b=r(zd,", which is a prerequisite for FlexFlow, so someone needs to figure out what needs to be done to make FlexFlow work with our models."),zd.forEach(t),$c=f(e),De=s(e,"H2",{class:!0});var Rd=i(De);nt=s(Rd,"A",{id:!0,class:!0,href:!0});var V5=i(nt);Vn=s(V5,"SPAN",{});var W5=i(Vn);v(Kl.$$.fragment,W5),W5.forEach(t),V5.forEach(t),Eb=f(Rd),Wn=s(Rd,"SPAN",{});var H5=i(Wn);gb=r(H5,"Which Strategy To Use When"),H5.forEach(t),Rd.forEach(t),Nc=f(e),xi=s(e,"P",{});var Y5=i(xi);Db=r(Y5,"Here is a very rough outline at which parallelism strategy to use when. The first on each list is typically faster."),Y5.forEach(t),zc=f(e),Mi=s(e,"P",{});var X5=i(Mi);Hn=s(X5,"STRONG",{});var K5=i(Hn);Lb=r(K5,"\u21E8 Single GPU"),K5.forEach(t),X5.forEach(t),Rc=f(e),W=s(e,"UL",{});var ao=i(W);Jl=s(ao,"LI",{});var Cd=i(Jl);Yn=s(Cd,"P",{});var J5=i(Yn);Tb=r(J5,"Model fits onto a single GPU:"),J5.forEach(t),Gb=f(Cd),Xn=s(Cd,"OL",{});var Q5=i(Xn);Kn=s(Q5,"LI",{});var e6=i(Kn);kb=r(e6,"Normal use"),e6.forEach(t),Q5.forEach(t),Cd.forEach(t),Ub=f(ao),Ql=s(ao,"LI",{});var Zd=i(Ql);Jn=s(Zd,"P",{});var t6=i(Jn);Ib=r(t6,"Model doesn\u2019t fit onto a single GPU:"),t6.forEach(t),Sb=f(Zd),ea=s(Zd,"OL",{});var Bd=i(ea);Qn=s(Bd,"LI",{});var l6=i(Qn);Ob=r(l6,"ZeRO + Offload CPU and optionally NVMe"),l6.forEach(t),jb=f(Bd),ep=s(Bd,"LI",{});var a6=i(ep);Ab=r(a6,"as above plus Memory Centric Tiling (see below for details) if the largest layer can\u2019t fit into a single GPU"),a6.forEach(t),Bd.forEach(t),Zd.forEach(t),xb=f(ao),tp=s(ao,"LI",{});var s6=i(tp);lp=s(s6,"P",{});var i6=i(lp);Mb=r(i6,"Largest Layer not fitting into a single GPU:"),i6.forEach(t),s6.forEach(t),ao.forEach(t),Cc=f(e),$i=s(e,"OL",{});var o6=i($i);Le=s(o6,"LI",{});var so=i(Le);$b=r(so,"ZeRO - Enable "),ta=s(so,"A",{href:!0,rel:!0});var r6=i(ta);Nb=r(r6,"Memory Centric Tiling"),r6.forEach(t),zb=r(so," (MCT). It allows you to run arbitrarily large layers by automatically splitting them and executing them sequentially. MCT reduces the number of parameters that are live on a GPU, but it does not affect the activation memory. As this need is very rare as of this writing a manual override of "),ap=s(so,"CODE",{});var n6=i(ap);Rb=r(n6,"torch.nn.Linear"),n6.forEach(t),Cb=r(so," needs to be done by the user."),so.forEach(t),o6.forEach(t),Zc=f(e),Ni=s(e,"P",{});var p6=i(Ni);sp=s(p6,"STRONG",{});var h6=i(sp);Zb=r(h6,"\u21E8 Single Node / Multi-GPU"),h6.forEach(t),p6.forEach(t),Bc=f(e),H=s(e,"UL",{});var io=i(H);la=s(io,"LI",{});var qd=i(la);ip=s(qd,"P",{});var f6=i(ip);Bb=r(f6,"Model fits onto a single GPU:"),f6.forEach(t),qb=f(qd),aa=s(qd,"OL",{});var Fd=i(aa);op=s(Fd,"LI",{});var c6=i(op);Fb=r(c6,"DDP - Distributed DP"),c6.forEach(t),Vb=f(Fd),rp=s(Fd,"LI",{});var d6=i(rp);Wb=r(d6,"ZeRO - may or may not be faster depending on the situation and configuration used"),d6.forEach(t),Fd.forEach(t),qd.forEach(t),Hb=f(io),sa=s(io,"LI",{});var Vd=i(sa);np=s(Vd,"P",{});var u6=i(np);Yb=r(u6,"Model doesn\u2019t fit onto a single GPU:"),u6.forEach(t),Xb=f(Vd),Te=s(Vd,"OL",{});var oo=i(Te);pp=s(oo,"LI",{});var m6=i(pp);hp=s(m6,"P",{});var v6=i(hp);Kb=r(v6,"PP"),v6.forEach(t),m6.forEach(t),Jb=f(oo),fp=s(oo,"LI",{});var P6=i(fp);cp=s(P6,"P",{});var w6=i(cp);Qb=r(w6,"ZeRO"),w6.forEach(t),P6.forEach(t),e_=f(oo),Ge=s(oo,"LI",{});var ro=i(Ge);dp=s(ro,"P",{});var y6=i(dp);t_=r(y6,"TP"),y6.forEach(t),l_=f(ro),up=s(ro,"P",{});var b6=i(up);a_=r(b6,"With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),b6.forEach(t),s_=f(ro),mp=s(ro,"P",{});var _6=i(mp);i_=r(_6,"TP is almost always used within a single node. That is TP size <= gpus per node."),_6.forEach(t),ro.forEach(t),oo.forEach(t),Vd.forEach(t),o_=f(io),ia=s(io,"LI",{});var Wd=i(ia);vp=s(Wd,"P",{});var E6=i(vp);r_=r(E6,"Largest Layer not fitting into a single GPU:"),E6.forEach(t),n_=f(Wd),oa=s(Wd,"OL",{});var Hd=i(oa);Pp=s(Hd,"LI",{});var g6=i(Pp);p_=r(g6,"If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),g6.forEach(t),h_=f(Hd),wp=s(Hd,"LI",{});var D6=i(wp);f_=r(D6,"With ZeRO see the same entry for \u201CSingle GPU\u201D above"),D6.forEach(t),Hd.forEach(t),Wd.forEach(t),io.forEach(t),qc=f(e),zi=s(e,"P",{});var L6=i(zi);yp=s(L6,"STRONG",{});var T6=i(yp);c_=r(T6,"\u21E8 Multi-Node / Multi-GPU"),T6.forEach(t),L6.forEach(t),Fc=f(e),pt=s(e,"UL",{});var Yd=i(pt);ra=s(Yd,"LI",{});var Xd=i(ra);bp=s(Xd,"P",{});var G6=i(bp);d_=r(G6,"When you have fast inter-node connectivity:"),G6.forEach(t),u_=f(Xd),na=s(Xd,"OL",{});var Kd=i(na);_p=s(Kd,"LI",{});var k6=i(_p);m_=r(k6,"ZeRO - as it requires close to no modifications to the model"),k6.forEach(t),v_=f(Kd),Ep=s(Kd,"LI",{});var U6=i(Ep);P_=r(U6,"PP+TP+DP - less communications, but requires massive changes to the model"),U6.forEach(t),Kd.forEach(t),Xd.forEach(t),w_=f(Yd),pa=s(Yd,"LI",{});var Jd=i(pa);gp=s(Jd,"P",{});var I6=i(gp);y_=r(I6,"when you have slow inter-node connectivity and still low on GPU memory:"),I6.forEach(t),b_=f(Jd),Dp=s(Jd,"OL",{});var S6=i(Dp);Lp=s(S6,"LI",{});var O6=i(Lp);__=r(O6,"DP+PP+TP+ZeRO-1"),O6.forEach(t),S6.forEach(t),Jd.forEach(t),Yd.forEach(t),this.h()},h(){c(te,"name","hf:doc:metadata"),c(te,"content",JSON.stringify(R6)),c(ke,"id","efficient-training-on-multiple-gpus"),c(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ke,"href","#efficient-training-on-multiple-gpus"),c(le,"class","relative group"),c(Ue,"id","concepts"),c(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ue,"href","#concepts"),c(ae,"class","relative group"),c(Ie,"id","scalability-strategy"),c(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ie,"href","#scalability-strategy"),c(se,"class","relative group"),c(Oe,"id","data-parallelism"),c(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oe,"href","#data-parallelism"),c(re,"class","relative group"),c(kt,"href","https://pytorch.org/docs/master/generated/torch.nn.DataParallel.html"),c(kt,"rel","nofollow"),c(je,"id","dp-vs-ddp"),c(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(je,"href","#dp-vs-ddp"),c(ne,"class","relative group"),c(St,"href","https://pytorch.org/docs/master/notes/ddp.html"),c(St,"rel","nofollow"),c(xt,"href","https://pytorch.org/docs/master/generated/torch.nn.DataParallel.html"),c(xt,"rel","nofollow"),c($t,"href","https://pytorch.org/docs/master/distributed.html"),c($t,"rel","nofollow"),c(Nt,"href","https://www.telesens.co/2019/04/04/distributed-data-parallel-training-using-pytorch-on-aws/"),c(Nt,"rel","nofollow"),c(Ia,"align","left"),c(Sa,"align","right"),c(Oa,"align","left"),c(ja,"align","right"),c(Aa,"align","left"),c(xa,"align","right"),c(Ma,"align","left"),c($a,"align","right"),c(ze,"id","zero-data-parallelism"),c(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ze,"href","#zero-data-parallelism"),c(me,"class","relative group"),c(Zt,"href","https://www.microsoft.com/en-us/research/blog/zero-deepspeed-new-system-optimizations-enable-training-models-with-over-100-billion-parameters/"),c(Zt,"rel","nofollow"),ee(Za.src,J_="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-zero.png")||c(Za,"src",J_),c(Za,"alt","DeepSpeed-Image-1"),c(Vt,"href","https://www.deepspeed.ai/features/#the-zero-redundancy-optimizer"),c(Vt,"rel","nofollow"),c(Wt,"href","https://github.com/facebookresearch/fairscale/#optimizer-state-sharding-zero"),c(Wt,"rel","nofollow"),c(Ht,"href","main_classes/trainer#trainer-integrations"),c(Ce,"id","naive-model-parallelism-vertical-and-pipeline-parallelism"),c(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ce,"href","#naive-model-parallelism-vertical-and-pipeline-parallelism"),c(Pe,"class","relative group"),c(Kt,"href","https://ai.googleblog.com/2019/03/introducing-gpipe-open-source-library.html"),c(Kt,"rel","nofollow"),ee(Ps.src,Q_="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-gpipe-bubble.png")||c(Ps,"src",Q_),c(Ps,"alt","mp-pp"),c(Qt,"href","https://github.com/pytorch/pytorch/pull/50693"),c(Qt,"rel","nofollow"),c(tl,"href","https://pytorch.org/docs/stable/pipeline.html"),c(tl,"rel","nofollow"),c(ll,"href","https://github.com/pytorch/pytorch/blob/master/benchmarks/distributed/pipeline/pipe.py"),c(ll,"rel","nofollow"),c(al,"href","https://fairscale.readthedocs.io/en/latest/tutorials/pipe.html"),c(al,"rel","nofollow"),c(sl,"href","https://www.deepspeed.ai/tutorials/pipeline/"),c(sl,"rel","nofollow"),c(il,"href","https://github.com/NVIDIA/Megatron-LM"),c(il,"rel","nofollow"),c(ol,"href","https://github.com/microsoft/varuna"),c(ol,"rel","nofollow"),c(rl,"href","https://arxiv.org/abs/2111.05972"),c(rl,"rel","nofollow"),c(nl,"href","https://github.com/tunib-ai/oslo"),c(nl,"rel","nofollow"),c(pl,"href","https://docs.aws.amazon.com/sagemaker/latest/dg/model-parallel-core-features.html"),c(pl,"rel","nofollow"),ee(Os.src,eE="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-sagemaker-interleaved-pipeline.png")||c(Os,"src",eE),c(Os,"alt","interleaved-pipeline-execution"),c(Xe,"id","tensor-parallelism"),c(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xe,"href","#tensor-parallelism"),c(ye,"class","relative group"),c(fl,"href","https://github.com/NVIDIA/Megatron-LM"),c(fl,"rel","nofollow"),c(cl,"href","https://arxiv.org/abs/2104.04473"),c(cl,"rel","nofollow"),ee(Ms.src,tE="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_gemm.png")||c(Ms,"src",tE),c(Ms,"alt","Parallel GEMM"),ee($s.src,lE="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-independent-gelu.png")||c($s,"src",lE),c($s,"alt","independent GeLU"),ee(Ns.src,aE="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_shard_processing.png")||c(Ns,"src",aE),c(Ns,"alt","parallel shard processing"),ee(zs.src,sE="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_self_attention.png")||c(zs,"src",sE),c(zs,"alt","parallel self-attention"),c(vl,"href","https://github.com/huggingface/transformers/issues/10321#issuecomment-783543530"),c(vl,"rel","nofollow"),c(Pl,"href","https://github.com/anton-l"),c(Pl,"rel","nofollow"),c(wl,"href","https://www.deepspeed.ai/features/#model-parallelism"),c(wl,"rel","nofollow"),c(yl,"href","https://github.com/NVIDIA/Megatron-LM"),c(yl,"rel","nofollow"),c(bl,"href","https://github.com/tunib-ai/parallelformers"),c(bl,"rel","nofollow"),c(_l,"href","https://arxiv.org/abs/2111.05972"),c(_l,"rel","nofollow"),c(El,"href","https://github.com/tunib-ai/oslo"),c(El,"rel","nofollow"),c(Dl,"href","https://github.com/tunib-ai/parallelformers"),c(Dl,"rel","nofollow"),c(Ll,"href","https://www.deepspeed.ai/tutorials/inference-tutorial/"),c(Ll,"rel","nofollow"),c(Ke,"id","dppp"),c(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ke,"href","#dppp"),c(be,"class","relative group"),c(Gl,"href","https://www.deepspeed.ai/tutorials/pipeline/"),c(Gl,"rel","nofollow"),ee(Qs.src,iE="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-zero-dp-pp.png")||c(Qs,"src",iE),c(Qs,"alt","dp-pp-2d"),c(kl,"href","https://github.com/microsoft/DeepSpeed"),c(kl,"rel","nofollow"),c(Ul,"href","https://github.com/NVIDIA/Megatron-LM"),c(Ul,"rel","nofollow"),c(Il,"href","https://github.com/microsoft/varuna"),c(Il,"rel","nofollow"),c(Sl,"href","https://arxiv.org/abs/2111.05972"),c(Sl,"rel","nofollow"),c(Ol,"href","https://github.com/tunib-ai/oslo"),c(Ol,"rel","nofollow"),c(Qe,"id","dppptp"),c(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qe,"href","#dppptp"),c(_e,"class","relative group"),ee(oi.src,oE="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-deepspeed-3d.png")||c(oi,"src",oE),c(oi,"alt","dp-pp-tp-3d"),c(Al,"href","https://www.microsoft.com/en-us/research/blog/deepspeed-extreme-scale-model-training-for-everyone/"),c(Al,"rel","nofollow"),c(xl,"href","https://github.com/microsoft/DeepSpeed"),c(xl,"rel","nofollow"),c(Ml,"href","https://github.com/NVIDIA/Megatron-LM"),c(Ml,"rel","nofollow"),c($l,"href","https://github.com/microsoft/varuna"),c($l,"rel","nofollow"),c(Nl,"href","https://arxiv.org/abs/2111.05972"),c(Nl,"rel","nofollow"),c(zl,"href","https://github.com/tunib-ai/oslo"),c(zl,"rel","nofollow"),c(tt,"id","zero-dppptp"),c(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tt,"href","#zero-dppptp"),c(Ee,"class","relative group"),c(fi,"href","#zero-data-parallelism"),c(Cl,"href","https://github.com/microsoft/Megatron-DeepSpeed"),c(Cl,"rel","nofollow"),c(Zl,"href","https://github.com/bigscience-workshop/Megatron-DeepSpeed"),c(Zl,"rel","nofollow"),c(Bl,"href","https://github.com/tunib-ai/oslo"),c(Bl,"rel","nofollow"),c(ql,"href","https://arxiv.org/abs/2201.11990"),c(ql,"rel","nofollow"),c(ot,"id","flexflow"),c(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ot,"href","#flexflow"),c(ge,"class","relative group"),c(Wl,"href","https://github.com/flexflow/FlexFlow"),c(Wl,"rel","nofollow"),c(Yl,"href","https://arxiv.org/abs/1807.05358"),c(Yl,"rel","nofollow"),ee(Si.src,rE="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-flexflow.jpeg")||c(Si,"src",rE),c(Si,"alt","flex-flow-soap"),c(Xl,"href","https://github.com/huggingface/transformers/blob/master/src/transformers/utils/fx.py"),c(Xl,"rel","nofollow"),c(nt,"id","which-strategy-to-use-when"),c(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nt,"href","#which-strategy-to-use-when"),c(De,"class","relative group"),c(ta,"href","https://deepspeed.readthedocs.io/en/latest/zero3.html#memory-centric-tiling"),c(ta,"rel","nofollow")},m(e,n){l(document.head,te),p(e,Sp,n),p(e,le,n),l(le,ke),l(ke,no),P(vt,no,null),l(le,Qd),l(le,po),l(po,eu),p(e,Op,n),p(e,ha,n),l(ha,tu),p(e,jp,n),p(e,fa,n),l(fa,lu),p(e,Ap,n),p(e,ae,n),l(ae,Ue),l(Ue,ho),P(Pt,ho,null),l(ae,au),l(ae,fo),l(fo,su),p(e,xp,n),p(e,ca,n),l(ca,iu),p(e,Mp,n),p(e,g,n),l(g,da),l(da,co),l(co,ou),l(da,ru),l(g,nu),l(g,ua),l(ua,uo),l(uo,pu),l(ua,hu),l(g,fu),l(g,ma),l(ma,mo),l(mo,cu),l(ma,du),l(g,uu),l(g,va),l(va,vo),l(vo,mu),l(va,vu),l(g,Pu),l(g,Pa),l(Pa,Po),l(Po,wu),l(Pa,yu),p(e,$p,n),p(e,wa,n),l(wa,bu),p(e,Np,n),p(e,se,n),l(se,Ie),l(Ie,wo),P(wt,wo,null),l(se,_u),l(se,yo),l(yo,Eu),p(e,zp,n),p(e,ya,n),l(ya,bo),l(bo,gu),p(e,Rp,n),p(e,$,n),l($,yt),l(yt,_o),l(_o,Du),l(yt,Lu),l(yt,bt),l(bt,Eo),l(Eo,Tu),l(bt,Gu),l(bt,go),l(go,ku),l($,Uu),l($,_t),l(_t,Do),l(Do,Iu),l(_t,Su),l(_t,ie),l(ie,Lo),l(Lo,To),l(To,Ou),l(ie,ju),l(ie,Go),l(Go,ko),l(ko,Au),l(ie,xu),l(ie,oe),l(oe,Uo),l(Uo,Mu),l(oe,$u),l(oe,Io),l(Io,Nu),l(oe,zu),l(oe,So),l(So,Ru),l($,Cu),l($,Et),l(Et,Oo),l(Oo,Zu),l(Et,Bu),l(Et,gt),l(gt,jo),l(jo,qu),l(gt,Fu),l(gt,Ao),l(Ao,Vu),p(e,Cp,n),p(e,ba,n),l(ba,xo),l(xo,Wu),p(e,Zp,n),p(e,Se,n),l(Se,Dt),l(Dt,Mo),l(Mo,Hu),l(Dt,Yu),l(Dt,Lt),l(Lt,$o),l($o,Xu),l(Lt,Ku),l(Lt,No),l(No,Ju),l(Se,Qu),l(Se,Tt),l(Tt,zo),l(zo,em),l(Tt,tm),l(Tt,Ro),l(Ro,Co),l(Co,lm),p(e,Bp,n),p(e,re,n),l(re,Oe),l(Oe,Zo),P(Gt,Zo,null),l(re,am),l(re,Bo),l(Bo,sm),p(e,qp,n),p(e,I,n),l(I,im),l(I,qo),l(qo,om),l(I,rm),l(I,Fo),l(Fo,nm),l(I,pm),l(I,kt),l(kt,hm),l(I,fm),p(e,Fp,n),p(e,ne,n),l(ne,je),l(je,Vo),P(Ut,Vo,null),l(ne,cm),l(ne,Wo),l(Wo,dm),p(e,Vp,n),p(e,pe,n),l(pe,Ho),l(Ho,um),l(pe,mm),l(pe,Yo),l(Yo,vm),l(pe,Pm),p(e,Wp,n),p(e,Ae,n),l(Ae,Xo),l(Xo,wm),l(Ae,ym),l(Ae,Ko),l(Ko,bm),p(e,Hp,n),p(e,_a,n),l(_a,_m),p(e,Yp,n),p(e,It,n),l(It,St),l(St,Em),l(It,gm),p(e,Xp,n),p(e,xe,n),l(xe,Jo),l(Jo,Dm),l(xe,Lm),l(xe,Ea),l(Ea,Tm),l(Ea,Ot),l(Ot,Qo),l(Qo,Gm),l(Ot,km),l(Ot,jt),l(jt,Um),l(jt,er),l(er,Im),l(jt,Sm),p(e,Kp,n),p(e,At,n),l(At,xt),l(xt,Om),l(At,jm),p(e,Jp,n),p(e,ga,n),l(ga,Am),p(e,Qp,n),p(e,D,n),l(D,tr),l(tr,xm),l(D,Mm),l(D,lr),l(lr,$m),l(D,Nm),l(D,Mt),l(Mt,zm),l(Mt,ar),l(ar,Rm),l(Mt,Cm),l(D,Zm),l(D,Da),l(Da,Bm),l(Da,sr),l(sr,qm),l(D,Fm),l(D,ir),l(ir,Vm),p(e,eh,n),p(e,La,n),l(La,Wm),p(e,th,n),p(e,Me,n),l(Me,Hm),l(Me,$t),l($t,Ym),l(Me,Xm),p(e,lh,n),p(e,Ta,n),l(Ta,Km),p(e,ah,n),p(e,Ga,n),l(Ga,Jm),p(e,sh,n),p(e,ka,n),l(ka,Qm),p(e,ih,n),p(e,$e,n),l($e,ev),l($e,Nt),l(Nt,tv),l($e,lv),p(e,oh,n),p(e,Ua,n),l(Ua,av),p(e,rh,n),p(e,Ne,n),l(Ne,or),l(or,he),l(he,Ia),l(Ia,sv),l(he,iv),l(he,rr),l(rr,ov),l(he,rv),l(he,Sa),l(Sa,nv),l(Ne,pv),l(Ne,fe),l(fe,ce),l(ce,Oa),l(Oa,hv),l(ce,fv),l(ce,nr),l(nr,cv),l(ce,dv),l(ce,ja),l(ja,uv),l(fe,mv),l(fe,de),l(de,Aa),l(Aa,vv),l(de,Pv),l(de,pr),l(pr,wv),l(de,yv),l(de,xa),l(xa,bv),l(fe,_v),l(fe,ue),l(ue,Ma),l(Ma,Ev),l(ue,gv),l(ue,hr),l(hr,Dv),l(ue,Lv),l(ue,$a),l($a,Tv),p(e,nh,n),p(e,Na,n),l(Na,Gv),p(e,ph,n),p(e,za,n),l(za,kv),p(e,hh,n),p(e,Ra,n),l(Ra,Uv),p(e,fh,n),p(e,Ca,n),l(Ca,Iv),p(e,ch,n),p(e,zt,n),l(zt,fr),l(fr,Sv),l(zt,Ov),p(e,dh,n),P(Rt,e,n),p(e,uh,n),p(e,E,n),l(E,jv),l(E,cr),l(cr,Av),l(E,xv),l(E,dr),l(dr,Mv),l(E,$v),l(E,ur),l(ur,Nv),l(E,zv),l(E,mr),l(mr,Rv),l(E,Cv),l(E,vr),l(vr,Zv),p(e,mh,n),p(e,me,n),l(me,ze),l(ze,Pr),P(Ct,Pr,null),l(me,Bv),l(me,wr),l(wr,qv),p(e,vh,n),p(e,ve,n),l(ve,Fv),l(ve,Zt),l(Zt,Vv),l(ve,Wv),l(ve,Za),p(e,Ph,n),p(e,Re,n),l(Re,Hv),l(Re,yr),l(yr,Yv),l(Re,Xv),p(e,wh,n),p(e,Ba,n),l(Ba,Kv),p(e,yh,n),P(Bt,e,n),p(e,bh,n),p(e,qa,n),l(qa,Jv),p(e,_h,n),p(e,Fa,n),l(Fa,Qv),p(e,Eh,n),P(qt,e,n),p(e,gh,n),p(e,Va,n),l(Va,eP),p(e,Dh,n),p(e,Wa,n),l(Wa,tP),p(e,Lh,n),P(Ft,e,n),p(e,Th,n),p(e,Ha,n),l(Ha,lP),p(e,Gh,n),p(e,Ya,n),l(Ya,aP),p(e,kh,n),p(e,Xa,n),l(Xa,sP),p(e,Uh,n),p(e,Ka,n),l(Ka,iP),p(e,Ih,n),p(e,Ja,n),l(Ja,oP),p(e,Sh,n),p(e,Qa,n),l(Qa,rP),p(e,Oh,n),p(e,es,n),l(es,nP),p(e,jh,n),p(e,ts,n),l(ts,pP),p(e,Ah,n),p(e,ls,n),l(ls,hP),p(e,xh,n),p(e,N,n),l(N,br),l(br,fP),l(N,cP),l(N,_r),l(_r,dP),l(N,uP),l(N,Er),l(Er,mP),p(e,Mh,n),p(e,as,n),l(as,vP),p(e,$h,n),p(e,ss,n),l(ss,PP),p(e,Nh,n),p(e,is,n),l(is,wP),p(e,zh,n),p(e,os,n),l(os,yP),p(e,Rh,n),p(e,rs,n),l(rs,bP),p(e,Ch,n),p(e,z,n),l(z,ns),l(ns,Vt),l(Vt,_P),l(ns,EP),l(z,gP),l(z,ps),l(ps,Wt),l(Wt,DP),l(ps,LP),l(z,TP),l(z,gr),l(gr,Ht),l(Ht,Dr),l(Dr,GP),l(Ht,kP),p(e,Zh,n),p(e,Pe,n),l(Pe,Ce),l(Ce,Lr),P(Yt,Lr,null),l(Pe,UP),l(Pe,Tr),l(Tr,IP),p(e,Bh,n),p(e,Ze,n),l(Ze,SP),l(Ze,Gr),l(Gr,OP),l(Ze,jP),p(e,qh,n),p(e,hs,n),l(hs,AP),p(e,Fh,n),P(Xt,e,n),p(e,Vh,n),p(e,fs,n),l(fs,xP),p(e,Wh,n),p(e,cs,n),l(cs,MP),p(e,Hh,n),p(e,ds,n),l(ds,$P),p(e,Yh,n),p(e,us,n),l(us,NP),p(e,Xh,n),p(e,Be,n),l(Be,kr),l(kr,zP),l(Be,RP),l(Be,Ur),l(Ur,CP),p(e,Kh,n),p(e,ms,n),l(ms,ZP),p(e,Jh,n),p(e,qe,n),l(qe,BP),l(qe,Kt),l(Kt,qP),l(qe,FP),p(e,Qh,n),p(e,vs,n),l(vs,Ps),p(e,ef,n),p(e,ws,n),l(ws,VP),p(e,tf,n),p(e,ys,n),l(ys,WP),p(e,lf,n),p(e,R,n),l(R,HP),l(R,Ir),l(Ir,YP),l(R,XP),l(R,Sr),l(Sr,KP),l(R,JP),p(e,af,n),p(e,Fe,n),l(Fe,QP),l(Fe,Or),l(Or,e1),l(Fe,t1),p(e,sf,n),p(e,Ve,n),l(Ve,l1),l(Ve,jr),l(jr,a1),l(Ve,s1),p(e,of,n),p(e,C,n),l(C,i1),l(C,Ar),l(Ar,o1),l(C,r1),l(C,xr),l(xr,n1),l(C,p1),p(e,rf,n),p(e,bs,n),l(bs,h1),p(e,nf,n),p(e,Z,n),l(Z,f1),l(Z,Mr),l(Mr,c1),l(Z,d1),l(Z,$r),l($r,u1),l(Z,m1),p(e,pf,n),p(e,S,n),l(S,v1),l(S,Nr),l(Nr,P1),l(S,w1),l(S,zr),l(zr,y1),l(S,b1),l(S,Rr),l(Rr,_1),l(S,E1),p(e,hf,n),p(e,_s,n),l(_s,g1),p(e,ff,n),p(e,Es,n),l(Es,D1),p(e,cf,n),p(e,O,n),l(O,Cr),l(Cr,L1),l(O,T1),l(O,Zr),l(Zr,G1),l(O,k1),l(O,Br),l(Br,U1),l(O,I1),l(O,qr),l(qr,S1),p(e,df,n),p(e,gs,n),l(gs,O1),p(e,uf,n),p(e,We,n),l(We,Fr),l(Fr,j1),l(We,A1),l(We,Vr),l(Vr,x1),p(e,mf,n),p(e,Ds,n),l(Ds,M1),p(e,vf,n),p(e,j,n),l(j,Jt),l(Jt,$1),l(Jt,Wr),l(Wr,N1),l(Jt,z1),l(j,R1),l(j,Ls),l(Ls,C1),l(Ls,Qt),l(Qt,Z1),l(j,B1),l(j,Hr),l(Hr,q1),l(j,F1),l(j,Yr),l(Yr,V1),p(e,Pf,n),p(e,Ts,n),l(Ts,W1),p(e,wf,n),p(e,Gs,n),l(Gs,H1),p(e,yf,n),p(e,u,n),l(u,el),l(el,tl),l(tl,Y1),l(el,X1),l(el,ll),l(ll,K1),l(u,J1),l(u,Xr),l(Xr,al),l(al,Q1),l(u,ew),l(u,Kr),l(Kr,sl),l(sl,tw),l(u,lw),l(u,ks),l(ks,il),l(il,aw),l(ks,sw),l(u,iw),l(u,Jr),l(Jr,ol),l(ol,ow),l(u,rw),l(u,Us),l(Us,rl),l(rl,nw),l(Us,pw),l(u,hw),l(u,Is),l(Is,nl),l(nl,fw),l(Is,cw),p(e,bf,n),p(e,He,n),l(He,dw),l(He,Qr),l(Qr,uw),l(He,mw),p(e,_f,n),p(e,Ss,n),l(Ss,vw),p(e,Ef,n),p(e,we,n),l(we,Pw),l(we,pl),l(pl,ww),l(we,yw),l(we,Os),p(e,gf,n),p(e,js,n),l(js,bw),p(e,Df,n),p(e,As,n),l(As,_w),p(e,Lf,n),p(e,Ye,n),l(Ye,Ew),l(Ye,en),l(en,gw),l(Ye,Dw),p(e,Tf,n),p(e,ye,n),l(ye,Xe),l(Xe,tn),P(hl,tn,null),l(ye,Lw),l(ye,ln),l(ln,Tw),p(e,Gf,n),p(e,xs,n),l(xs,Gw),p(e,kf,n),p(e,B,n),l(B,kw),l(B,fl),l(fl,Uw),l(B,Iw),l(B,cl),l(cl,Sw),l(B,Ow),p(e,Uf,n),p(e,q,n),l(q,jw),l(q,an),l(an,Aw),l(q,xw),l(q,sn),l(sn,Mw),l(q,$w),p(e,If,n),p(e,L,n),l(L,Nw),l(L,on),l(on,zw),l(L,Rw),l(L,rn),l(rn,Cw),l(L,Zw),l(L,nn),l(nn,Bw),l(L,qw),l(L,pn),l(pn,Fw),l(L,Vw),p(e,Sf,n),p(e,dl,n),l(dl,Ww),l(dl,Ms),p(e,Of,n),p(e,d,n),l(d,Hw),l(d,hn),l(hn,Yw),l(d,Xw),l(d,fn),l(fn,Kw),l(d,Jw),l(d,cn),l(cn,Qw),l(d,e2),l(d,dn),l(dn,t2),l(d,l2),l(d,un),l(un,a2),l(d,s2),l(d,mn),l(mn,i2),l(d,o2),l(d,vn),l(vn,r2),l(d,n2),l(d,$s),p(e,jf,n),p(e,ul,n),l(ul,p2),l(ul,Ns),p(e,Af,n),p(e,ml,n),l(ml,h2),l(ml,zs),p(e,xf,n),p(e,Rs,n),l(Rs,f2),p(e,Mf,n),p(e,F,n),l(F,c2),l(F,vl),l(vl,d2),l(F,u2),l(F,Pl),l(Pl,m2),l(F,v2),p(e,$f,n),p(e,Cs,n),l(Cs,P2),p(e,Nf,n),p(e,Zs,n),l(Zs,w2),p(e,zf,n),p(e,Bs,n),l(Bs,qs),l(qs,y2),l(qs,wl),l(wl,b2),p(e,Rf,n),p(e,Fs,n),l(Fs,_2),p(e,Cf,n),p(e,A,n),l(A,Vs),l(Vs,yl),l(yl,E2),l(Vs,g2),l(A,D2),l(A,Ws),l(Ws,bl),l(bl,L2),l(Ws,T2),l(A,G2),l(A,Hs),l(Hs,_l),l(_l,k2),l(Hs,U2),l(A,I2),l(A,Ys),l(Ys,El),l(El,S2),l(Ys,O2),p(e,Zf,n),p(e,Xs,n),l(Xs,j2),p(e,Bf,n),p(e,V,n),l(V,Pn),l(Pn,A2),l(V,x2),l(V,gl),l(gl,M2),l(gl,Dl),l(Dl,$2),l(gl,N2),l(V,z2),l(V,Ks),l(Ks,R2),l(Ks,Ll),l(Ll,C2),p(e,qf,n),p(e,be,n),l(be,Ke),l(Ke,wn),P(Tl,wn,null),l(be,Z2),l(be,yn),l(yn,B2),p(e,Ff,n),p(e,Je,n),l(Je,q2),l(Je,Gl),l(Gl,F2),l(Je,V2),p(e,Vf,n),p(e,Js,n),l(Js,Qs),p(e,Wf,n),p(e,ei,n),l(ei,W2),p(e,Hf,n),p(e,ti,n),l(ti,H2),p(e,Yf,n),p(e,li,n),l(li,Y2),p(e,Xf,n),p(e,T,n),l(T,bn),l(bn,kl),l(kl,X2),l(T,K2),l(T,_n),l(_n,Ul),l(Ul,J2),l(T,Q2),l(T,En),l(En,Il),l(Il,ey),l(T,ty),l(T,gn),l(gn,Sl),l(Sl,ly),l(T,ay),l(T,Dn),l(Dn,Ol),l(Ol,sy),p(e,Kf,n),p(e,ai,n),l(ai,iy),p(e,Jf,n),p(e,_e,n),l(_e,Qe),l(Qe,Ln),P(jl,Ln,null),l(_e,oy),l(_e,Tn),l(Tn,ry),p(e,Qf,n),p(e,si,n),l(si,ny),p(e,ec,n),p(e,ii,n),l(ii,oi),p(e,tc,n),p(e,et,n),l(et,py),l(et,Al),l(Al,hy),l(et,fy),p(e,lc,n),p(e,ri,n),l(ri,cy),p(e,ac,n),p(e,ni,n),l(ni,dy),p(e,sc,n),p(e,G,n),l(G,pi),l(pi,xl),l(xl,uy),l(pi,my),l(G,vy),l(G,Gn),l(Gn,Ml),l(Ml,Py),l(G,wy),l(G,kn),l(kn,$l),l($l,yy),l(G,by),l(G,Un),l(Un,Nl),l(Nl,_y),l(G,Ey),l(G,In),l(In,zl),l(zl,gy),p(e,ic,n),p(e,hi,n),l(hi,Dy),p(e,oc,n),p(e,Ee,n),l(Ee,tt),l(tt,Sn),P(Rl,Sn,null),l(Ee,Ly),l(Ee,On),l(On,Ty),p(e,rc,n),p(e,lt,n),l(lt,Gy),l(lt,fi),l(fi,ky),l(lt,Uy),p(e,nc,n),p(e,ci,n),l(ci,Iy),p(e,pc,n),p(e,di,n),l(di,Sy),p(e,hc,n),p(e,at,n),l(at,Oy),l(at,jn),l(jn,jy),l(at,Ay),p(e,fc,n),p(e,ui,n),l(ui,xy),p(e,cc,n),p(e,mi,n),l(mi,My),p(e,dc,n),p(e,vi,n),l(vi,$y),p(e,uc,n),p(e,st,n),l(st,it),l(it,Cl),l(Cl,Ny),l(it,zy),l(it,Zl),l(Zl,Ry),l(it,Cy),l(st,Zy),l(st,An),l(An,Bl),l(Bl,By),p(e,mc,n),p(e,Pi,n),l(Pi,qy),p(e,vc,n),p(e,wi,n),l(wi,xn),l(xn,ql),l(ql,Fy),p(e,Pc,n),p(e,yi,n),l(yi,Vy),p(e,wc,n),p(e,ge,n),l(ge,ot),l(ot,Mn),P(Fl,Mn,null),l(ge,Wy),l(ge,$n),l($n,Hy),p(e,yc,n),p(e,Vl,n),l(Vl,Wl),l(Wl,Yy),l(Vl,Xy),p(e,bc,n),p(e,Hl,n),l(Hl,Ky),l(Hl,Yl),l(Yl,Jy),p(e,_c,n),p(e,bi,n),l(bi,Qy),p(e,Ec,n),p(e,x,n),l(x,Nn),l(Nn,eb),l(x,tb),l(x,zn),l(zn,lb),l(x,ab),l(x,Rn),l(Rn,sb),l(x,ib),l(x,Cn),l(Cn,ob),p(e,gc,n),p(e,_i,n),l(_i,rb),p(e,Dc,n),p(e,Ei,n),l(Ei,Zn),l(Zn,nb),p(e,Lc,n),p(e,gi,n),l(gi,pb),p(e,Tc,n),p(e,Di,n),l(Di,Bn),l(Bn,hb),p(e,Gc,n),p(e,Li,n),l(Li,fb),p(e,kc,n),p(e,Ti,n),l(Ti,qn),l(qn,cb),p(e,Uc,n),p(e,Gi,n),l(Gi,db),p(e,Ic,n),p(e,ki,n),l(ki,Fn),l(Fn,ub),p(e,Sc,n),p(e,Ui,n),l(Ui,mb),p(e,Oc,n),p(e,Ii,n),l(Ii,Si),p(e,jc,n),p(e,Oi,n),l(Oi,vb),p(e,Ac,n),p(e,ji,n),l(ji,Pb),p(e,xc,n),p(e,Ai,n),l(Ai,wb),p(e,Mc,n),p(e,rt,n),l(rt,yb),l(rt,Xl),l(Xl,bb),l(rt,_b),p(e,$c,n),p(e,De,n),l(De,nt),l(nt,Vn),P(Kl,Vn,null),l(De,Eb),l(De,Wn),l(Wn,gb),p(e,Nc,n),p(e,xi,n),l(xi,Db),p(e,zc,n),p(e,Mi,n),l(Mi,Hn),l(Hn,Lb),p(e,Rc,n),p(e,W,n),l(W,Jl),l(Jl,Yn),l(Yn,Tb),l(Jl,Gb),l(Jl,Xn),l(Xn,Kn),l(Kn,kb),l(W,Ub),l(W,Ql),l(Ql,Jn),l(Jn,Ib),l(Ql,Sb),l(Ql,ea),l(ea,Qn),l(Qn,Ob),l(ea,jb),l(ea,ep),l(ep,Ab),l(W,xb),l(W,tp),l(tp,lp),l(lp,Mb),p(e,Cc,n),p(e,$i,n),l($i,Le),l(Le,$b),l(Le,ta),l(ta,Nb),l(Le,zb),l(Le,ap),l(ap,Rb),l(Le,Cb),p(e,Zc,n),p(e,Ni,n),l(Ni,sp),l(sp,Zb),p(e,Bc,n),p(e,H,n),l(H,la),l(la,ip),l(ip,Bb),l(la,qb),l(la,aa),l(aa,op),l(op,Fb),l(aa,Vb),l(aa,rp),l(rp,Wb),l(H,Hb),l(H,sa),l(sa,np),l(np,Yb),l(sa,Xb),l(sa,Te),l(Te,pp),l(pp,hp),l(hp,Kb),l(Te,Jb),l(Te,fp),l(fp,cp),l(cp,Qb),l(Te,e_),l(Te,Ge),l(Ge,dp),l(dp,t_),l(Ge,l_),l(Ge,up),l(up,a_),l(Ge,s_),l(Ge,mp),l(mp,i_),l(H,o_),l(H,ia),l(ia,vp),l(vp,r_),l(ia,n_),l(ia,oa),l(oa,Pp),l(Pp,p_),l(oa,h_),l(oa,wp),l(wp,f_),p(e,qc,n),p(e,zi,n),l(zi,yp),l(yp,c_),p(e,Fc,n),p(e,pt,n),l(pt,ra),l(ra,bp),l(bp,d_),l(ra,u_),l(ra,na),l(na,_p),l(_p,m_),l(na,v_),l(na,Ep),l(Ep,P_),l(pt,w_),l(pt,pa),l(pa,gp),l(gp,y_),l(pa,b_),l(pa,Dp),l(Dp,Lp),l(Lp,__),Vc=!0},p:$6,i(e){Vc||(w(vt.$$.fragment,e),w(Pt.$$.fragment,e),w(wt.$$.fragment,e),w(Gt.$$.fragment,e),w(Ut.$$.fragment,e),w(Rt.$$.fragment,e),w(Ct.$$.fragment,e),w(Bt.$$.fragment,e),w(qt.$$.fragment,e),w(Ft.$$.fragment,e),w(Yt.$$.fragment,e),w(Xt.$$.fragment,e),w(hl.$$.fragment,e),w(Tl.$$.fragment,e),w(jl.$$.fragment,e),w(Rl.$$.fragment,e),w(Fl.$$.fragment,e),w(Kl.$$.fragment,e),Vc=!0)},o(e){y(vt.$$.fragment,e),y(Pt.$$.fragment,e),y(wt.$$.fragment,e),y(Gt.$$.fragment,e),y(Ut.$$.fragment,e),y(Rt.$$.fragment,e),y(Ct.$$.fragment,e),y(Bt.$$.fragment,e),y(qt.$$.fragment,e),y(Ft.$$.fragment,e),y(Yt.$$.fragment,e),y(Xt.$$.fragment,e),y(hl.$$.fragment,e),y(Tl.$$.fragment,e),y(jl.$$.fragment,e),y(Rl.$$.fragment,e),y(Fl.$$.fragment,e),y(Kl.$$.fragment,e),Vc=!1},d(e){t(te),e&&t(Sp),e&&t(le),b(vt),e&&t(Op),e&&t(ha),e&&t(jp),e&&t(fa),e&&t(Ap),e&&t(ae),b(Pt),e&&t(xp),e&&t(ca),e&&t(Mp),e&&t(g),e&&t($p),e&&t(wa),e&&t(Np),e&&t(se),b(wt),e&&t(zp),e&&t(ya),e&&t(Rp),e&&t($),e&&t(Cp),e&&t(ba),e&&t(Zp),e&&t(Se),e&&t(Bp),e&&t(re),b(Gt),e&&t(qp),e&&t(I),e&&t(Fp),e&&t(ne),b(Ut),e&&t(Vp),e&&t(pe),e&&t(Wp),e&&t(Ae),e&&t(Hp),e&&t(_a),e&&t(Yp),e&&t(It),e&&t(Xp),e&&t(xe),e&&t(Kp),e&&t(At),e&&t(Jp),e&&t(ga),e&&t(Qp),e&&t(D),e&&t(eh),e&&t(La),e&&t(th),e&&t(Me),e&&t(lh),e&&t(Ta),e&&t(ah),e&&t(Ga),e&&t(sh),e&&t(ka),e&&t(ih),e&&t($e),e&&t(oh),e&&t(Ua),e&&t(rh),e&&t(Ne),e&&t(nh),e&&t(Na),e&&t(ph),e&&t(za),e&&t(hh),e&&t(Ra),e&&t(fh),e&&t(Ca),e&&t(ch),e&&t(zt),e&&t(dh),b(Rt,e),e&&t(uh),e&&t(E),e&&t(mh),e&&t(me),b(Ct),e&&t(vh),e&&t(ve),e&&t(Ph),e&&t(Re),e&&t(wh),e&&t(Ba),e&&t(yh),b(Bt,e),e&&t(bh),e&&t(qa),e&&t(_h),e&&t(Fa),e&&t(Eh),b(qt,e),e&&t(gh),e&&t(Va),e&&t(Dh),e&&t(Wa),e&&t(Lh),b(Ft,e),e&&t(Th),e&&t(Ha),e&&t(Gh),e&&t(Ya),e&&t(kh),e&&t(Xa),e&&t(Uh),e&&t(Ka),e&&t(Ih),e&&t(Ja),e&&t(Sh),e&&t(Qa),e&&t(Oh),e&&t(es),e&&t(jh),e&&t(ts),e&&t(Ah),e&&t(ls),e&&t(xh),e&&t(N),e&&t(Mh),e&&t(as),e&&t($h),e&&t(ss),e&&t(Nh),e&&t(is),e&&t(zh),e&&t(os),e&&t(Rh),e&&t(rs),e&&t(Ch),e&&t(z),e&&t(Zh),e&&t(Pe),b(Yt),e&&t(Bh),e&&t(Ze),e&&t(qh),e&&t(hs),e&&t(Fh),b(Xt,e),e&&t(Vh),e&&t(fs),e&&t(Wh),e&&t(cs),e&&t(Hh),e&&t(ds),e&&t(Yh),e&&t(us),e&&t(Xh),e&&t(Be),e&&t(Kh),e&&t(ms),e&&t(Jh),e&&t(qe),e&&t(Qh),e&&t(vs),e&&t(ef),e&&t(ws),e&&t(tf),e&&t(ys),e&&t(lf),e&&t(R),e&&t(af),e&&t(Fe),e&&t(sf),e&&t(Ve),e&&t(of),e&&t(C),e&&t(rf),e&&t(bs),e&&t(nf),e&&t(Z),e&&t(pf),e&&t(S),e&&t(hf),e&&t(_s),e&&t(ff),e&&t(Es),e&&t(cf),e&&t(O),e&&t(df),e&&t(gs),e&&t(uf),e&&t(We),e&&t(mf),e&&t(Ds),e&&t(vf),e&&t(j),e&&t(Pf),e&&t(Ts),e&&t(wf),e&&t(Gs),e&&t(yf),e&&t(u),e&&t(bf),e&&t(He),e&&t(_f),e&&t(Ss),e&&t(Ef),e&&t(we),e&&t(gf),e&&t(js),e&&t(Df),e&&t(As),e&&t(Lf),e&&t(Ye),e&&t(Tf),e&&t(ye),b(hl),e&&t(Gf),e&&t(xs),e&&t(kf),e&&t(B),e&&t(Uf),e&&t(q),e&&t(If),e&&t(L),e&&t(Sf),e&&t(dl),e&&t(Of),e&&t(d),e&&t(jf),e&&t(ul),e&&t(Af),e&&t(ml),e&&t(xf),e&&t(Rs),e&&t(Mf),e&&t(F),e&&t($f),e&&t(Cs),e&&t(Nf),e&&t(Zs),e&&t(zf),e&&t(Bs),e&&t(Rf),e&&t(Fs),e&&t(Cf),e&&t(A),e&&t(Zf),e&&t(Xs),e&&t(Bf),e&&t(V),e&&t(qf),e&&t(be),b(Tl),e&&t(Ff),e&&t(Je),e&&t(Vf),e&&t(Js),e&&t(Wf),e&&t(ei),e&&t(Hf),e&&t(ti),e&&t(Yf),e&&t(li),e&&t(Xf),e&&t(T),e&&t(Kf),e&&t(ai),e&&t(Jf),e&&t(_e),b(jl),e&&t(Qf),e&&t(si),e&&t(ec),e&&t(ii),e&&t(tc),e&&t(et),e&&t(lc),e&&t(ri),e&&t(ac),e&&t(ni),e&&t(sc),e&&t(G),e&&t(ic),e&&t(hi),e&&t(oc),e&&t(Ee),b(Rl),e&&t(rc),e&&t(lt),e&&t(nc),e&&t(ci),e&&t(pc),e&&t(di),e&&t(hc),e&&t(at),e&&t(fc),e&&t(ui),e&&t(cc),e&&t(mi),e&&t(dc),e&&t(vi),e&&t(uc),e&&t(st),e&&t(mc),e&&t(Pi),e&&t(vc),e&&t(wi),e&&t(Pc),e&&t(yi),e&&t(wc),e&&t(ge),b(Fl),e&&t(yc),e&&t(Vl),e&&t(bc),e&&t(Hl),e&&t(_c),e&&t(bi),e&&t(Ec),e&&t(x),e&&t(gc),e&&t(_i),e&&t(Dc),e&&t(Ei),e&&t(Lc),e&&t(gi),e&&t(Tc),e&&t(Di),e&&t(Gc),e&&t(Li),e&&t(kc),e&&t(Ti),e&&t(Uc),e&&t(Gi),e&&t(Ic),e&&t(ki),e&&t(Sc),e&&t(Ui),e&&t(Oc),e&&t(Ii),e&&t(jc),e&&t(Oi),e&&t(Ac),e&&t(ji),e&&t(xc),e&&t(Ai),e&&t(Mc),e&&t(rt),e&&t($c),e&&t(De),b(Kl),e&&t(Nc),e&&t(xi),e&&t(zc),e&&t(Mi),e&&t(Rc),e&&t(W),e&&t(Cc),e&&t($i),e&&t(Zc),e&&t(Ni),e&&t(Bc),e&&t(H),e&&t(qc),e&&t(zi),e&&t(Fc),e&&t(pt)}}}const R6={local:"efficient-training-on-multiple-gpus",sections:[{local:"concepts",title:"Concepts"},{local:"scalability-strategy",title:"Scalability Strategy"},{local:"data-parallelism",sections:[{local:"dp-vs-ddp",title:"DP vs DDP"}],title:"Data Parallelism"},{local:"zero-data-parallelism",title:"ZeRO Data Parallelism"},{local:"naive-model-parallelism-vertical-and-pipeline-parallelism",title:"Naive Model Parallelism (Vertical) and Pipeline Parallelism"},{local:"tensor-parallelism",title:"Tensor Parallelism"},{local:"dppp",title:"DP+PP"},{local:"dppptp",title:"DP+PP+TP"},{local:"zero-dppptp",title:"ZeRO DP+PP+TP"},{local:"flexflow",title:"FlexFlow"},{local:"which-strategy-to-use-when",title:"Which Strategy To Use When"}],title:"Efficient Training on Multiple GPUs"};function C6(K_){return N6(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class F6 extends j6{constructor(te){super();A6(this,te,C6,z6,x6,{})}}export{F6 as default,R6 as metadata};
