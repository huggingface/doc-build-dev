import{S as JAt,i as YAt,s as KAt,e as a,k as l,w as F,t as o,M as ZAt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as e6t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as yNr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function o6t(A){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,WA,gf,qe,Xe,fi,yn,HA,Ln,xn,UA,mi,$n,JA,gi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),WA=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),yn=o("NewModel"),HA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),UA=o(`, make sure its
`),mi=a("code"),$n=o("config_class"),JA=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var h$=s(p);m=r(h$,"NewModelConfig"),h$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var p$=s(ii);mf=r(p$,"model_type"),p$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var u$=s(di);ci=r(u$,'"new-model"'),u$.forEach(t),WA=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);yn=r(Ea,"NewModel"),Ea.forEach(t),HA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var _$=s(Ln);xn=r(_$,"PreTrainedModel"),_$.forEach(t),UA=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var pf=s(mi);$n=r(pf,"config_class"),pf.forEach(t),JA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var b$=s(gi);hf=r(b$,"NewModelConfig"),b$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,mf),e(g,et),e(g,di),e(di,ci),e(g,WA),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,yn),e(qe,HA),e(qe,Ln),e(Ln,xn),e(qe,UA),e(qe,mi),e(mi,$n),e(qe,JA),e(qe,gi),e(gi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function r6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a6t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function n6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s6t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function l6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(A){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,WA,gf,qe,Xe,fi,yn,HA,Ln,xn,UA,mi,$n,JA,gi,hf,Ma,ze,Ae,h$,hi,p$,u$,Eo,Ea,_$,pf,b$,Jje,jPe,pi,uf,KZ,YA,Yje,ZZ,Kje,DPe,kn,Zje,eee,eDe,oDe,oee,rDe,tDe,GPe,KA,OPe,v$,aDe,VPe,_f,XPe,ui,bf,ree,ZA,nDe,tee,sDe,zPe,Co,e6,lDe,o6,iDe,F$,dDe,cDe,fDe,r6,mDe,aee,gDe,hDe,pDe,Er,t6,uDe,nee,_De,bDe,_i,vDe,see,FDe,TDe,lee,MDe,EDe,CDe,y,vf,iee,wDe,ADe,T$,yDe,LDe,xDe,Ff,dee,$De,kDe,M$,SDe,RDe,BDe,Tf,cee,PDe,IDe,E$,qDe,NDe,jDe,Mf,fee,DDe,GDe,C$,ODe,VDe,XDe,Ef,mee,zDe,QDe,w$,WDe,HDe,UDe,Cf,gee,JDe,YDe,A$,KDe,ZDe,eGe,wf,hee,oGe,rGe,y$,tGe,aGe,nGe,Af,pee,sGe,lGe,L$,iGe,dGe,cGe,yf,uee,fGe,mGe,x$,gGe,hGe,pGe,Lf,_ee,uGe,_Ge,$$,bGe,vGe,FGe,xf,bee,TGe,MGe,k$,EGe,CGe,wGe,$f,vee,AGe,yGe,S$,LGe,xGe,$Ge,kf,Fee,kGe,SGe,R$,RGe,BGe,PGe,Sf,Tee,IGe,qGe,B$,NGe,jGe,DGe,Rf,Mee,GGe,OGe,P$,VGe,XGe,zGe,Bf,Eee,QGe,WGe,I$,HGe,UGe,JGe,Pf,Cee,YGe,KGe,q$,ZGe,eOe,oOe,If,wee,rOe,tOe,N$,aOe,nOe,sOe,qf,Aee,lOe,iOe,j$,dOe,cOe,fOe,Nf,yee,mOe,gOe,D$,hOe,pOe,uOe,jf,Lee,_Oe,bOe,G$,vOe,FOe,TOe,Df,xee,MOe,EOe,O$,COe,wOe,AOe,Gf,$ee,yOe,LOe,V$,xOe,$Oe,kOe,Of,kee,SOe,ROe,X$,BOe,POe,IOe,Vf,See,qOe,NOe,z$,jOe,DOe,GOe,Xf,Ree,OOe,VOe,Q$,XOe,zOe,QOe,zf,Bee,WOe,HOe,W$,UOe,JOe,YOe,Qf,Pee,KOe,ZOe,H$,eVe,oVe,rVe,Wf,Iee,tVe,aVe,U$,nVe,sVe,lVe,Hf,qee,iVe,dVe,J$,cVe,fVe,mVe,Uf,Nee,gVe,hVe,Y$,pVe,uVe,_Ve,Jf,jee,bVe,vVe,K$,FVe,TVe,MVe,Yf,Dee,EVe,CVe,Z$,wVe,AVe,yVe,Kf,Gee,LVe,xVe,ek,$Ve,kVe,SVe,Zf,Oee,RVe,BVe,ok,PVe,IVe,qVe,em,Vee,NVe,jVe,rk,DVe,GVe,OVe,om,Xee,VVe,XVe,tk,zVe,QVe,WVe,rm,zee,HVe,UVe,ak,JVe,YVe,KVe,tm,Qee,ZVe,eXe,nk,oXe,rXe,tXe,am,Wee,aXe,nXe,sk,sXe,lXe,iXe,nm,Hee,dXe,cXe,lk,fXe,mXe,gXe,sm,Uee,hXe,pXe,ik,uXe,_Xe,bXe,lm,Jee,vXe,FXe,dk,TXe,MXe,EXe,im,Yee,CXe,wXe,ck,AXe,yXe,LXe,dm,Kee,xXe,$Xe,fk,kXe,SXe,RXe,cm,Zee,BXe,PXe,mk,IXe,qXe,NXe,fm,eoe,jXe,DXe,gk,GXe,OXe,VXe,mm,ooe,XXe,zXe,hk,QXe,WXe,HXe,gm,roe,UXe,JXe,pk,YXe,KXe,ZXe,hm,toe,eze,oze,uk,rze,tze,aze,pm,aoe,nze,sze,_k,lze,ize,dze,um,noe,cze,fze,bk,mze,gze,hze,_m,soe,pze,uze,vk,_ze,bze,vze,bm,loe,Fze,Tze,Fk,Mze,Eze,Cze,vm,ioe,wze,Aze,Tk,yze,Lze,xze,Fm,doe,$ze,kze,Mk,Sze,Rze,Bze,Tm,coe,Pze,Ize,Ek,qze,Nze,jze,Mm,foe,Dze,Gze,Ck,Oze,Vze,Xze,Em,moe,zze,Qze,wk,Wze,Hze,Uze,Cm,goe,Jze,Yze,Ak,Kze,Zze,eQe,wm,hoe,oQe,rQe,yk,tQe,aQe,nQe,Am,poe,sQe,lQe,Lk,iQe,dQe,cQe,ym,uoe,fQe,mQe,xk,gQe,hQe,pQe,Lm,_oe,uQe,_Qe,$k,bQe,vQe,FQe,xm,boe,TQe,MQe,kk,EQe,CQe,wQe,$m,voe,AQe,yQe,Sk,LQe,xQe,$Qe,km,Foe,kQe,SQe,Rk,RQe,BQe,PQe,Sm,Toe,IQe,qQe,Bk,NQe,jQe,DQe,Rm,Moe,GQe,OQe,Pk,VQe,XQe,zQe,Bm,Eoe,QQe,WQe,Ik,HQe,UQe,JQe,Pm,Coe,YQe,KQe,qk,ZQe,eWe,oWe,Im,woe,rWe,tWe,Nk,aWe,nWe,sWe,qm,Aoe,lWe,iWe,jk,dWe,cWe,fWe,Nm,yoe,mWe,gWe,Dk,hWe,pWe,uWe,jm,Loe,_We,bWe,Gk,vWe,FWe,TWe,Dm,xoe,MWe,EWe,Ok,CWe,wWe,AWe,Gm,$oe,yWe,LWe,Vk,xWe,$We,kWe,Om,koe,SWe,RWe,Xk,BWe,PWe,IWe,Vm,Soe,qWe,NWe,zk,jWe,DWe,GWe,Xm,Roe,OWe,VWe,Qk,XWe,zWe,QWe,zm,Boe,WWe,HWe,Wk,UWe,JWe,YWe,Qm,Poe,KWe,ZWe,Hk,eHe,oHe,rHe,Wm,Ioe,tHe,aHe,Uk,nHe,sHe,lHe,Hm,qoe,iHe,dHe,Jk,cHe,fHe,mHe,Um,Noe,gHe,hHe,Yk,pHe,uHe,_He,Jm,joe,bHe,vHe,Kk,FHe,THe,MHe,Ym,Doe,EHe,CHe,Zk,wHe,AHe,yHe,Km,Goe,LHe,xHe,eS,$He,kHe,SHe,Zm,Ooe,RHe,BHe,oS,PHe,IHe,qHe,eg,Voe,NHe,jHe,rS,DHe,GHe,OHe,og,Xoe,VHe,XHe,tS,zHe,QHe,WHe,rg,zoe,HHe,UHe,aS,JHe,YHe,KHe,tg,Qoe,ZHe,eUe,nS,oUe,rUe,tUe,ag,Woe,aUe,nUe,sS,sUe,lUe,iUe,ng,Hoe,dUe,cUe,lS,fUe,mUe,gUe,sg,Uoe,hUe,pUe,iS,uUe,_Ue,bUe,lg,Joe,vUe,FUe,dS,TUe,MUe,EUe,ig,Yoe,CUe,wUe,cS,AUe,yUe,LUe,dg,Koe,xUe,$Ue,fS,kUe,SUe,RUe,cg,Zoe,BUe,PUe,mS,IUe,qUe,NUe,fg,ere,jUe,DUe,gS,GUe,OUe,VUe,mg,ore,XUe,zUe,hS,QUe,WUe,HUe,gg,rre,UUe,JUe,pS,YUe,KUe,ZUe,hg,tre,eJe,oJe,uS,rJe,tJe,aJe,pg,nJe,ug,a6,sJe,are,lJe,QPe,bi,_g,nre,n6,iJe,sre,dJe,WPe,wo,s6,cJe,l6,fJe,_S,mJe,gJe,hJe,i6,pJe,lre,uJe,_Je,bJe,Cr,d6,vJe,ire,FJe,TJe,Ca,MJe,dre,EJe,CJe,cre,wJe,AJe,fre,yJe,LJe,xJe,k,Sn,mre,$Je,kJe,bS,SJe,RJe,vS,BJe,PJe,IJe,Rn,gre,qJe,NJe,FS,jJe,DJe,TS,GJe,OJe,VJe,Bn,hre,XJe,zJe,MS,QJe,WJe,ES,HJe,UJe,JJe,bg,pre,YJe,KJe,CS,ZJe,eYe,oYe,Pn,ure,rYe,tYe,wS,aYe,nYe,AS,sYe,lYe,iYe,vg,_re,dYe,cYe,yS,fYe,mYe,gYe,Fg,bre,hYe,pYe,LS,uYe,_Ye,bYe,Tg,vre,vYe,FYe,xS,TYe,MYe,EYe,In,Fre,CYe,wYe,$S,AYe,yYe,kS,LYe,xYe,$Ye,qn,Tre,kYe,SYe,SS,RYe,BYe,RS,PYe,IYe,qYe,Nn,Mre,NYe,jYe,BS,DYe,GYe,PS,OYe,VYe,XYe,Mg,Ere,zYe,QYe,IS,WYe,HYe,UYe,Eg,Cre,JYe,YYe,qS,KYe,ZYe,eKe,jn,wre,oKe,rKe,NS,tKe,aKe,jS,nKe,sKe,lKe,Cg,Are,iKe,dKe,DS,cKe,fKe,mKe,Dn,yre,gKe,hKe,GS,pKe,uKe,OS,_Ke,bKe,vKe,Gn,Lre,FKe,TKe,VS,MKe,EKe,XS,CKe,wKe,AKe,On,xre,yKe,LKe,zS,xKe,$Ke,QS,kKe,SKe,RKe,wg,$re,BKe,PKe,WS,IKe,qKe,NKe,Vn,kre,jKe,DKe,HS,GKe,OKe,US,VKe,XKe,zKe,Xn,Sre,QKe,WKe,JS,HKe,UKe,YS,JKe,YKe,KKe,zn,Rre,ZKe,eZe,KS,oZe,rZe,ZS,tZe,aZe,nZe,Qn,Bre,sZe,lZe,eR,iZe,dZe,oR,cZe,fZe,mZe,Wn,Pre,gZe,hZe,rR,pZe,uZe,tR,_Ze,bZe,vZe,Hn,Ire,FZe,TZe,aR,MZe,EZe,nR,CZe,wZe,AZe,Ag,qre,yZe,LZe,sR,xZe,$Ze,kZe,Un,Nre,SZe,RZe,lR,BZe,PZe,iR,IZe,qZe,NZe,yg,jre,jZe,DZe,dR,GZe,OZe,VZe,Jn,Dre,XZe,zZe,cR,QZe,WZe,fR,HZe,UZe,JZe,Yn,Gre,YZe,KZe,mR,ZZe,eeo,gR,oeo,reo,teo,Kn,Ore,aeo,neo,hR,seo,leo,pR,ieo,deo,ceo,Zn,Vre,feo,meo,uR,geo,heo,_R,peo,ueo,_eo,es,Xre,beo,veo,bR,Feo,Teo,vR,Meo,Eeo,Ceo,Lg,zre,weo,Aeo,FR,yeo,Leo,xeo,os,Qre,$eo,keo,TR,Seo,Reo,MR,Beo,Peo,Ieo,rs,Wre,qeo,Neo,ER,jeo,Deo,CR,Geo,Oeo,Veo,ts,Hre,Xeo,zeo,wR,Qeo,Weo,AR,Heo,Ueo,Jeo,as,Ure,Yeo,Keo,yR,Zeo,eoo,LR,ooo,roo,too,ns,Jre,aoo,noo,xR,soo,loo,$R,ioo,doo,coo,ss,Yre,foo,moo,kR,goo,hoo,SR,poo,uoo,_oo,xg,Kre,boo,voo,RR,Foo,Too,Moo,ls,Zre,Eoo,Coo,BR,woo,Aoo,PR,yoo,Loo,xoo,$g,ete,$oo,koo,IR,Soo,Roo,Boo,kg,ote,Poo,Ioo,qR,qoo,Noo,joo,is,rte,Doo,Goo,NR,Ooo,Voo,jR,Xoo,zoo,Qoo,ds,tte,Woo,Hoo,DR,Uoo,Joo,GR,Yoo,Koo,Zoo,cs,ate,ero,oro,OR,rro,tro,VR,aro,nro,sro,Sg,nte,lro,iro,XR,dro,cro,fro,fs,ste,mro,gro,zR,hro,pro,QR,uro,_ro,bro,ms,lte,vro,Fro,WR,Tro,Mro,HR,Ero,Cro,wro,gs,ite,Aro,yro,UR,Lro,xro,JR,$ro,kro,Sro,hs,dte,Rro,Bro,YR,Pro,Iro,KR,qro,Nro,jro,ps,cte,Dro,Gro,ZR,Oro,Vro,eB,Xro,zro,Qro,Rg,fte,Wro,Hro,oB,Uro,Jro,Yro,us,mte,Kro,Zro,rB,eto,oto,tB,rto,tto,ato,Bg,gte,nto,sto,aB,lto,ito,dto,Pg,hte,cto,fto,nB,mto,gto,hto,Ig,pte,pto,uto,sB,_to,bto,vto,qg,ute,Fto,Tto,lB,Mto,Eto,Cto,_s,_te,wto,Ato,iB,yto,Lto,dB,xto,$to,kto,Ng,bte,Sto,Rto,cB,Bto,Pto,Ito,bs,vte,qto,Nto,fB,jto,Dto,mB,Gto,Oto,Vto,vs,Fte,Xto,zto,gB,Qto,Wto,hB,Hto,Uto,Jto,Fs,Tte,Yto,Kto,pB,Zto,eao,uB,oao,rao,tao,Ts,Mte,aao,nao,_B,sao,lao,bB,iao,dao,cao,Ms,Ete,fao,mao,vB,gao,hao,FB,pao,uao,_ao,Es,Cte,bao,vao,TB,Fao,Tao,MB,Mao,Eao,Cao,jg,wte,wao,Aao,EB,yao,Lao,xao,Dg,Ate,$ao,kao,CB,Sao,Rao,Bao,Cs,yte,Pao,Iao,wB,qao,Nao,AB,jao,Dao,Gao,ws,Lte,Oao,Vao,yB,Xao,zao,LB,Qao,Wao,Hao,As,xte,Uao,Jao,xB,Yao,Kao,$B,Zao,eno,ono,Gg,$te,rno,tno,kB,ano,nno,sno,Og,kte,lno,ino,SB,dno,cno,fno,Vg,Ste,mno,gno,RB,hno,pno,uno,ys,Rte,_no,bno,BB,vno,Fno,PB,Tno,Mno,Eno,Xg,Bte,Cno,wno,IB,Ano,yno,Lno,zg,Pte,xno,$no,qB,kno,Sno,Rno,Ls,Ite,Bno,Pno,NB,Ino,qno,jB,Nno,jno,Dno,Qg,qte,Gno,Ono,DB,Vno,Xno,zno,Wg,Nte,Qno,Wno,GB,Hno,Uno,Jno,xs,jte,Yno,Kno,OB,Zno,eso,VB,oso,rso,tso,$s,Dte,aso,nso,XB,sso,lso,zB,iso,dso,cso,ks,Gte,fso,mso,QB,gso,hso,WB,pso,uso,_so,Ss,Ote,bso,vso,HB,Fso,Tso,UB,Mso,Eso,Cso,Hg,wso,Ug,c6,Aso,Vte,yso,HPe,vi,Jg,Xte,f6,Lso,zte,xso,UPe,Ao,m6,$so,g6,kso,JB,Sso,Rso,Bso,h6,Pso,Qte,Iso,qso,Nso,Qe,p6,jso,Wte,Dso,Gso,wa,Oso,Hte,Vso,Xso,Ute,zso,Qso,Jte,Wso,Hso,Uso,oe,Yg,Yte,Jso,Yso,YB,Kso,Zso,elo,Kg,Kte,olo,rlo,KB,tlo,alo,nlo,Zg,Zte,slo,llo,ZB,ilo,dlo,clo,eh,eae,flo,mlo,eP,glo,hlo,plo,oh,oae,ulo,_lo,oP,blo,vlo,Flo,rh,rae,Tlo,Mlo,rP,Elo,Clo,wlo,th,tae,Alo,ylo,tP,Llo,xlo,$lo,ah,aae,klo,Slo,aP,Rlo,Blo,Plo,nh,nae,Ilo,qlo,nP,Nlo,jlo,Dlo,sh,sae,Glo,Olo,sP,Vlo,Xlo,zlo,lh,lae,Qlo,Wlo,lP,Hlo,Ulo,Jlo,ih,iae,Ylo,Klo,iP,Zlo,eio,oio,dh,dae,rio,tio,dP,aio,nio,sio,ch,cae,lio,iio,cP,dio,cio,fio,fh,fae,mio,gio,fP,hio,pio,uio,mh,mae,_io,bio,mP,vio,Fio,Tio,gh,gae,Mio,Eio,gP,Cio,wio,Aio,hh,hae,yio,Lio,hP,xio,$io,kio,ph,pae,Sio,Rio,pP,Bio,Pio,Iio,uh,uae,qio,Nio,uP,jio,Dio,Gio,_h,_ae,Oio,Vio,_P,Xio,zio,Qio,bh,bae,Wio,Hio,bP,Uio,Jio,Yio,vh,vae,Kio,Zio,vP,edo,odo,rdo,Fh,Fae,tdo,ado,FP,ndo,sdo,ldo,Th,Tae,ido,ddo,TP,cdo,fdo,mdo,Mh,gdo,Eh,hdo,Ch,u6,pdo,Mae,udo,JPe,Fi,wh,Eae,_6,_do,Cae,bdo,YPe,yo,b6,vdo,v6,Fdo,MP,Tdo,Mdo,Edo,F6,Cdo,wae,wdo,Ado,ydo,We,T6,Ldo,Aae,xdo,$do,Ti,kdo,yae,Sdo,Rdo,Lae,Bdo,Pdo,Ido,_e,Ah,xae,qdo,Ndo,EP,jdo,Ddo,Gdo,yh,$ae,Odo,Vdo,kae,Xdo,zdo,Qdo,Lh,Sae,Wdo,Hdo,CP,Udo,Jdo,Ydo,xh,Rae,Kdo,Zdo,wP,eco,oco,rco,$h,Bae,tco,aco,AP,nco,sco,lco,kh,Pae,ico,dco,yP,cco,fco,mco,Sh,Iae,gco,hco,LP,pco,uco,_co,Rh,qae,bco,vco,xP,Fco,Tco,Mco,Bh,Nae,Eco,Cco,$P,wco,Aco,yco,Ph,jae,Lco,xco,kP,$co,kco,Sco,Ih,Dae,Rco,Bco,SP,Pco,Ico,qco,qh,Gae,Nco,jco,RP,Dco,Gco,Oco,Nh,Oae,Vco,Xco,BP,zco,Qco,Wco,jh,Vae,Hco,Uco,PP,Jco,Yco,Kco,Dh,Xae,Zco,efo,IP,ofo,rfo,tfo,Gh,afo,Oh,nfo,Vh,M6,sfo,zae,lfo,KPe,Mi,Xh,Qae,E6,ifo,Wae,dfo,ZPe,Lo,C6,cfo,Ei,ffo,qP,mfo,gfo,NP,hfo,pfo,ufo,w6,_fo,Hae,bfo,vfo,Ffo,ot,A6,Tfo,Uae,Mfo,Efo,Ci,Cfo,Jae,wfo,Afo,jP,yfo,Lfo,xfo,zh,$fo,He,y6,kfo,Yae,Sfo,Rfo,Aa,Bfo,Kae,Pfo,Ifo,Zae,qfo,Nfo,ene,jfo,Dfo,Gfo,x,Qh,one,Ofo,Vfo,DP,Xfo,zfo,Qfo,Wh,rne,Wfo,Hfo,GP,Ufo,Jfo,Yfo,Hh,tne,Kfo,Zfo,OP,emo,omo,rmo,Uh,ane,tmo,amo,VP,nmo,smo,lmo,Jh,nne,imo,dmo,XP,cmo,fmo,mmo,Yh,sne,gmo,hmo,zP,pmo,umo,_mo,Kh,lne,bmo,vmo,QP,Fmo,Tmo,Mmo,Zh,ine,Emo,Cmo,WP,wmo,Amo,ymo,ep,dne,Lmo,xmo,HP,$mo,kmo,Smo,op,cne,Rmo,Bmo,UP,Pmo,Imo,qmo,rp,fne,Nmo,jmo,JP,Dmo,Gmo,Omo,tp,mne,Vmo,Xmo,YP,zmo,Qmo,Wmo,ap,gne,Hmo,Umo,KP,Jmo,Ymo,Kmo,np,hne,Zmo,ego,ZP,ogo,rgo,tgo,sp,pne,ago,ngo,eI,sgo,lgo,igo,lp,une,dgo,cgo,oI,fgo,mgo,ggo,ip,_ne,hgo,pgo,rI,ugo,_go,bgo,dp,bne,vgo,Fgo,tI,Tgo,Mgo,Ego,cp,vne,Cgo,wgo,aI,Ago,ygo,Lgo,fp,Fne,xgo,$go,nI,kgo,Sgo,Rgo,mp,Tne,Bgo,Pgo,sI,Igo,qgo,Ngo,gp,Mne,jgo,Dgo,lI,Ggo,Ogo,Vgo,hp,Ene,Xgo,zgo,iI,Qgo,Wgo,Hgo,pp,Cne,Ugo,Jgo,dI,Ygo,Kgo,Zgo,up,wne,eho,oho,cI,rho,tho,aho,_p,Ane,nho,sho,fI,lho,iho,dho,bp,yne,cho,fho,mI,mho,gho,hho,vp,Lne,pho,uho,gI,_ho,bho,vho,Fp,xne,Fho,Tho,hI,Mho,Eho,Cho,Tp,$ne,who,Aho,pI,yho,Lho,xho,Mp,kne,$ho,kho,uI,Sho,Rho,Bho,Rs,Sne,Pho,Iho,_I,qho,Nho,bI,jho,Dho,Gho,Ep,Rne,Oho,Vho,vI,Xho,zho,Qho,Cp,Bne,Who,Hho,FI,Uho,Jho,Yho,wp,Pne,Kho,Zho,TI,epo,opo,rpo,Ap,Ine,tpo,apo,MI,npo,spo,lpo,yp,qne,ipo,dpo,EI,cpo,fpo,mpo,Lp,Nne,gpo,hpo,CI,ppo,upo,_po,xp,jne,bpo,vpo,wI,Fpo,Tpo,Mpo,$p,Dne,Epo,Cpo,AI,wpo,Apo,ypo,kp,Gne,Lpo,xpo,yI,$po,kpo,Spo,Sp,One,Rpo,Bpo,LI,Ppo,Ipo,qpo,Rp,Vne,Npo,jpo,xI,Dpo,Gpo,Opo,Bp,Xne,Vpo,Xpo,$I,zpo,Qpo,Wpo,Pp,zne,Hpo,Upo,kI,Jpo,Ypo,Kpo,Ip,Qne,Zpo,euo,SI,ouo,ruo,tuo,qp,Wne,auo,nuo,RI,suo,luo,iuo,Np,Hne,duo,cuo,BI,fuo,muo,guo,jp,Une,huo,puo,PI,uuo,_uo,buo,Dp,Jne,vuo,Fuo,II,Tuo,Muo,Euo,Gp,Yne,Cuo,wuo,qI,Auo,yuo,Luo,Op,Kne,xuo,$uo,NI,kuo,Suo,Ruo,Vp,Zne,Buo,Puo,jI,Iuo,quo,Nuo,Xp,ese,juo,Duo,DI,Guo,Ouo,Vuo,zp,ose,Xuo,zuo,GI,Quo,Wuo,Huo,Qp,rse,Uuo,Juo,OI,Yuo,Kuo,Zuo,Wp,tse,e_o,o_o,VI,r_o,t_o,a_o,Hp,ase,n_o,s_o,XI,l_o,i_o,d_o,Up,nse,c_o,f_o,zI,m_o,g_o,h_o,Jp,sse,p_o,u_o,QI,__o,b_o,v_o,Yp,lse,F_o,T_o,WI,M_o,E_o,C_o,Kp,ise,w_o,A_o,HI,y_o,L_o,x_o,Zp,dse,$_o,k_o,UI,S_o,R_o,B_o,eu,cse,P_o,I_o,JI,q_o,N_o,j_o,ou,fse,D_o,G_o,YI,O_o,V_o,X_o,ru,mse,z_o,Q_o,KI,W_o,H_o,U_o,tu,gse,J_o,Y_o,ZI,K_o,Z_o,e1o,au,hse,o1o,r1o,eq,t1o,a1o,n1o,nu,pse,s1o,l1o,oq,i1o,d1o,c1o,su,use,f1o,m1o,rq,g1o,h1o,p1o,lu,_se,u1o,_1o,tq,b1o,v1o,F1o,iu,bse,T1o,M1o,aq,E1o,C1o,w1o,du,vse,A1o,y1o,nq,L1o,x1o,$1o,cu,Fse,k1o,S1o,sq,R1o,B1o,P1o,fu,Tse,I1o,q1o,lq,N1o,j1o,D1o,mu,Mse,G1o,O1o,iq,V1o,X1o,z1o,gu,Ese,Q1o,W1o,dq,H1o,U1o,J1o,hu,Cse,Y1o,K1o,cq,Z1o,e2o,o2o,pu,wse,r2o,t2o,fq,a2o,n2o,s2o,uu,Ase,l2o,i2o,mq,d2o,c2o,f2o,_u,yse,m2o,g2o,gq,h2o,p2o,u2o,bu,Lse,_2o,b2o,hq,v2o,F2o,T2o,vu,xse,M2o,E2o,pq,C2o,w2o,A2o,Fu,$se,y2o,L2o,uq,x2o,$2o,k2o,Tu,kse,S2o,R2o,_q,B2o,P2o,I2o,Mu,Sse,q2o,N2o,bq,j2o,D2o,G2o,Eu,Rse,O2o,V2o,vq,X2o,z2o,Q2o,Cu,Bse,W2o,H2o,Fq,U2o,J2o,Y2o,wu,Pse,K2o,Z2o,Tq,ebo,obo,rbo,Au,Ise,tbo,abo,Mq,nbo,sbo,lbo,yu,qse,ibo,dbo,Eq,cbo,fbo,mbo,Lu,Nse,gbo,hbo,Cq,pbo,ubo,_bo,xu,jse,bbo,vbo,wq,Fbo,Tbo,Mbo,$u,Dse,Ebo,Cbo,Aq,wbo,Abo,ybo,ku,Gse,Lbo,xbo,yq,$bo,kbo,Sbo,Su,Ose,Rbo,Bbo,Lq,Pbo,Ibo,qbo,Ru,Vse,Nbo,jbo,xq,Dbo,Gbo,Obo,Bu,Vbo,Xse,Xbo,zbo,zse,Qbo,Wbo,Pu,eIe,wi,Iu,Qse,L6,Hbo,Wse,Ubo,oIe,xo,x6,Jbo,Ai,Ybo,$q,Kbo,Zbo,kq,evo,ovo,rvo,$6,tvo,Hse,avo,nvo,svo,rt,k6,lvo,Use,ivo,dvo,yi,cvo,Jse,fvo,mvo,Sq,gvo,hvo,pvo,qu,uvo,Ue,S6,_vo,Yse,bvo,vvo,ya,Fvo,Kse,Tvo,Mvo,Zse,Evo,Cvo,ele,wvo,Avo,yvo,G,Nu,ole,Lvo,xvo,Rq,$vo,kvo,Svo,ju,rle,Rvo,Bvo,Bq,Pvo,Ivo,qvo,Du,tle,Nvo,jvo,Pq,Dvo,Gvo,Ovo,Gu,ale,Vvo,Xvo,Iq,zvo,Qvo,Wvo,Ou,nle,Hvo,Uvo,qq,Jvo,Yvo,Kvo,Vu,sle,Zvo,eFo,Nq,oFo,rFo,tFo,Xu,lle,aFo,nFo,jq,sFo,lFo,iFo,zu,ile,dFo,cFo,Dq,fFo,mFo,gFo,Qu,dle,hFo,pFo,Gq,uFo,_Fo,bFo,Wu,cle,vFo,FFo,Oq,TFo,MFo,EFo,Hu,fle,CFo,wFo,Vq,AFo,yFo,LFo,Uu,mle,xFo,$Fo,Xq,kFo,SFo,RFo,Ju,gle,BFo,PFo,zq,IFo,qFo,NFo,Yu,hle,jFo,DFo,Qq,GFo,OFo,VFo,Ku,ple,XFo,zFo,Wq,QFo,WFo,HFo,Zu,ule,UFo,JFo,Hq,YFo,KFo,ZFo,e_,_le,eTo,oTo,Uq,rTo,tTo,aTo,o_,ble,nTo,sTo,Jq,lTo,iTo,dTo,r_,vle,cTo,fTo,Yq,mTo,gTo,hTo,t_,Fle,pTo,uTo,Kq,_To,bTo,vTo,a_,Tle,FTo,TTo,Zq,MTo,ETo,CTo,n_,Mle,wTo,ATo,eN,yTo,LTo,xTo,s_,Ele,$To,kTo,oN,STo,RTo,BTo,l_,Cle,PTo,ITo,rN,qTo,NTo,jTo,i_,wle,DTo,GTo,tN,OTo,VTo,XTo,d_,Ale,zTo,QTo,aN,WTo,HTo,UTo,c_,yle,JTo,YTo,nN,KTo,ZTo,e7o,f_,Lle,o7o,r7o,sN,t7o,a7o,n7o,m_,xle,s7o,l7o,lN,i7o,d7o,c7o,g_,$le,f7o,m7o,iN,g7o,h7o,p7o,h_,kle,u7o,_7o,dN,b7o,v7o,F7o,p_,Sle,T7o,M7o,cN,E7o,C7o,w7o,u_,Rle,A7o,y7o,fN,L7o,x7o,$7o,__,Ble,k7o,S7o,mN,R7o,B7o,P7o,b_,Ple,I7o,q7o,gN,N7o,j7o,D7o,v_,Ile,G7o,O7o,hN,V7o,X7o,z7o,F_,qle,Q7o,W7o,pN,H7o,U7o,J7o,T_,Nle,Y7o,K7o,uN,Z7o,e9o,o9o,M_,jle,r9o,t9o,_N,a9o,n9o,s9o,E_,Dle,l9o,i9o,bN,d9o,c9o,f9o,C_,m9o,Gle,g9o,h9o,Ole,p9o,u9o,w_,rIe,Li,A_,Vle,R6,_9o,Xle,b9o,tIe,$o,B6,v9o,xi,F9o,vN,T9o,M9o,FN,E9o,C9o,w9o,P6,A9o,zle,y9o,L9o,x9o,tt,I6,$9o,Qle,k9o,S9o,$i,R9o,Wle,B9o,P9o,TN,I9o,q9o,N9o,y_,j9o,Je,q6,D9o,Hle,G9o,O9o,La,V9o,Ule,X9o,z9o,Jle,Q9o,W9o,Yle,H9o,U9o,J9o,z,L_,Kle,Y9o,K9o,MN,Z9o,eMo,oMo,x_,Zle,rMo,tMo,EN,aMo,nMo,sMo,$_,eie,lMo,iMo,CN,dMo,cMo,fMo,k_,oie,mMo,gMo,wN,hMo,pMo,uMo,S_,rie,_Mo,bMo,AN,vMo,FMo,TMo,R_,tie,MMo,EMo,yN,CMo,wMo,AMo,B_,aie,yMo,LMo,LN,xMo,$Mo,kMo,P_,nie,SMo,RMo,xN,BMo,PMo,IMo,I_,sie,qMo,NMo,$N,jMo,DMo,GMo,q_,lie,OMo,VMo,kN,XMo,zMo,QMo,N_,iie,WMo,HMo,SN,UMo,JMo,YMo,j_,die,KMo,ZMo,RN,e4o,o4o,r4o,D_,cie,t4o,a4o,BN,n4o,s4o,l4o,G_,fie,i4o,d4o,PN,c4o,f4o,m4o,O_,mie,g4o,h4o,IN,p4o,u4o,_4o,V_,gie,b4o,v4o,qN,F4o,T4o,M4o,X_,hie,E4o,C4o,NN,w4o,A4o,y4o,z_,pie,L4o,x4o,jN,$4o,k4o,S4o,Q_,uie,R4o,B4o,DN,P4o,I4o,q4o,W_,_ie,N4o,j4o,GN,D4o,G4o,O4o,H_,bie,V4o,X4o,ON,z4o,Q4o,W4o,U_,vie,H4o,U4o,VN,J4o,Y4o,K4o,J_,Fie,Z4o,eEo,XN,oEo,rEo,tEo,Y_,Tie,aEo,nEo,zN,sEo,lEo,iEo,K_,Mie,dEo,cEo,QN,fEo,mEo,gEo,Z_,Eie,hEo,pEo,WN,uEo,_Eo,bEo,e1,Cie,vEo,FEo,HN,TEo,MEo,EEo,o1,wie,CEo,wEo,UN,AEo,yEo,LEo,r1,Aie,xEo,$Eo,JN,kEo,SEo,REo,t1,yie,BEo,PEo,YN,IEo,qEo,NEo,a1,Lie,jEo,DEo,KN,GEo,OEo,VEo,n1,xie,XEo,zEo,ZN,QEo,WEo,HEo,s1,$ie,UEo,JEo,ej,YEo,KEo,ZEo,l1,kie,e5o,o5o,oj,r5o,t5o,a5o,i1,Sie,n5o,s5o,rj,l5o,i5o,d5o,d1,Rie,c5o,f5o,tj,m5o,g5o,h5o,c1,p5o,Bie,u5o,_5o,Pie,b5o,v5o,f1,aIe,ki,m1,Iie,N6,F5o,qie,T5o,nIe,ko,j6,M5o,Si,E5o,aj,C5o,w5o,nj,A5o,y5o,L5o,D6,x5o,Nie,$5o,k5o,S5o,at,G6,R5o,jie,B5o,P5o,Ri,I5o,Die,q5o,N5o,sj,j5o,D5o,G5o,g1,O5o,Ye,O6,V5o,Gie,X5o,z5o,xa,Q5o,Oie,W5o,H5o,Vie,U5o,J5o,Xie,Y5o,K5o,Z5o,Q,h1,zie,eCo,oCo,lj,rCo,tCo,aCo,p1,Qie,nCo,sCo,ij,lCo,iCo,dCo,u1,Wie,cCo,fCo,dj,mCo,gCo,hCo,_1,Hie,pCo,uCo,cj,_Co,bCo,vCo,b1,Uie,FCo,TCo,fj,MCo,ECo,CCo,v1,Jie,wCo,ACo,mj,yCo,LCo,xCo,F1,Yie,$Co,kCo,gj,SCo,RCo,BCo,T1,Kie,PCo,ICo,hj,qCo,NCo,jCo,M1,Zie,DCo,GCo,pj,OCo,VCo,XCo,E1,ede,zCo,QCo,uj,WCo,HCo,UCo,C1,ode,JCo,YCo,_j,KCo,ZCo,e3o,w1,rde,o3o,r3o,bj,t3o,a3o,n3o,A1,tde,s3o,l3o,vj,i3o,d3o,c3o,y1,ade,f3o,m3o,Fj,g3o,h3o,p3o,L1,nde,u3o,_3o,Tj,b3o,v3o,F3o,x1,sde,T3o,M3o,Mj,E3o,C3o,w3o,$1,lde,A3o,y3o,Ej,L3o,x3o,$3o,k1,ide,k3o,S3o,Cj,R3o,B3o,P3o,S1,dde,I3o,q3o,wj,N3o,j3o,D3o,R1,cde,G3o,O3o,Aj,V3o,X3o,z3o,B1,fde,Q3o,W3o,yj,H3o,U3o,J3o,P1,mde,Y3o,K3o,Lj,Z3o,ewo,owo,I1,gde,rwo,two,xj,awo,nwo,swo,q1,hde,lwo,iwo,$j,dwo,cwo,fwo,N1,pde,mwo,gwo,kj,hwo,pwo,uwo,j1,ude,_wo,bwo,Sj,vwo,Fwo,Two,D1,_de,Mwo,Ewo,Rj,Cwo,wwo,Awo,G1,bde,ywo,Lwo,Bj,xwo,$wo,kwo,O1,vde,Swo,Rwo,Pj,Bwo,Pwo,Iwo,V1,Fde,qwo,Nwo,Ij,jwo,Dwo,Gwo,X1,Tde,Owo,Vwo,Mde,Xwo,zwo,Qwo,z1,Ede,Wwo,Hwo,qj,Uwo,Jwo,Ywo,Q1,Cde,Kwo,Zwo,Nj,eAo,oAo,rAo,W1,wde,tAo,aAo,jj,nAo,sAo,lAo,H1,Ade,iAo,dAo,Dj,cAo,fAo,mAo,U1,gAo,yde,hAo,pAo,Lde,uAo,_Ao,J1,sIe,Bi,Y1,xde,V6,bAo,$de,vAo,lIe,So,X6,FAo,Pi,TAo,Gj,MAo,EAo,Oj,CAo,wAo,AAo,z6,yAo,kde,LAo,xAo,$Ao,nt,Q6,kAo,Sde,SAo,RAo,Ii,BAo,Rde,PAo,IAo,Vj,qAo,NAo,jAo,K1,DAo,Ke,W6,GAo,Bde,OAo,VAo,$a,XAo,Pde,zAo,QAo,Ide,WAo,HAo,qde,UAo,JAo,YAo,pe,Z1,Nde,KAo,ZAo,Xj,e6o,o6o,r6o,e2,jde,t6o,a6o,zj,n6o,s6o,l6o,o2,Dde,i6o,d6o,Qj,c6o,f6o,m6o,r2,Gde,g6o,h6o,Wj,p6o,u6o,_6o,t2,Ode,b6o,v6o,Hj,F6o,T6o,M6o,a2,Vde,E6o,C6o,Uj,w6o,A6o,y6o,n2,Xde,L6o,x6o,Jj,$6o,k6o,S6o,s2,zde,R6o,B6o,Yj,P6o,I6o,q6o,l2,Qde,N6o,j6o,Kj,D6o,G6o,O6o,i2,Wde,V6o,X6o,Zj,z6o,Q6o,W6o,d2,Hde,H6o,U6o,eD,J6o,Y6o,K6o,c2,Ude,Z6o,e0o,oD,o0o,r0o,t0o,f2,Jde,a0o,n0o,rD,s0o,l0o,i0o,m2,Yde,d0o,c0o,tD,f0o,m0o,g0o,g2,Kde,h0o,p0o,aD,u0o,_0o,b0o,h2,Zde,v0o,F0o,nD,T0o,M0o,E0o,p2,C0o,ece,w0o,A0o,oce,y0o,L0o,u2,iIe,qi,_2,rce,H6,x0o,tce,$0o,dIe,Ro,U6,k0o,Ni,S0o,sD,R0o,B0o,lD,P0o,I0o,q0o,J6,N0o,ace,j0o,D0o,G0o,st,Y6,O0o,nce,V0o,X0o,ji,z0o,sce,Q0o,W0o,iD,H0o,U0o,J0o,b2,Y0o,Ze,K6,K0o,lce,Z0o,eyo,ka,oyo,ice,ryo,tyo,dce,ayo,nyo,cce,syo,lyo,iyo,q,v2,fce,dyo,cyo,dD,fyo,myo,gyo,F2,mce,hyo,pyo,cD,uyo,_yo,byo,T2,gce,vyo,Fyo,fD,Tyo,Myo,Eyo,M2,hce,Cyo,wyo,mD,Ayo,yyo,Lyo,E2,pce,xyo,$yo,gD,kyo,Syo,Ryo,C2,uce,Byo,Pyo,hD,Iyo,qyo,Nyo,w2,_ce,jyo,Dyo,pD,Gyo,Oyo,Vyo,A2,bce,Xyo,zyo,uD,Qyo,Wyo,Hyo,y2,vce,Uyo,Jyo,_D,Yyo,Kyo,Zyo,L2,Fce,eLo,oLo,bD,rLo,tLo,aLo,x2,Tce,nLo,sLo,vD,lLo,iLo,dLo,$2,Mce,cLo,fLo,FD,mLo,gLo,hLo,k2,Ece,pLo,uLo,TD,_Lo,bLo,vLo,S2,Cce,FLo,TLo,MD,MLo,ELo,CLo,R2,wce,wLo,ALo,ED,yLo,LLo,xLo,B2,Ace,$Lo,kLo,CD,SLo,RLo,BLo,P2,yce,PLo,ILo,wD,qLo,NLo,jLo,I2,Lce,DLo,GLo,AD,OLo,VLo,XLo,q2,xce,zLo,QLo,yD,WLo,HLo,ULo,N2,$ce,JLo,YLo,LD,KLo,ZLo,e8o,j2,kce,o8o,r8o,xD,t8o,a8o,n8o,D2,Sce,s8o,l8o,$D,i8o,d8o,c8o,G2,Rce,f8o,m8o,kD,g8o,h8o,p8o,O2,Bce,u8o,_8o,SD,b8o,v8o,F8o,V2,Pce,T8o,M8o,RD,E8o,C8o,w8o,X2,Ice,A8o,y8o,BD,L8o,x8o,$8o,z2,qce,k8o,S8o,PD,R8o,B8o,P8o,Q2,Nce,I8o,q8o,ID,N8o,j8o,D8o,W2,jce,G8o,O8o,qD,V8o,X8o,z8o,H2,Dce,Q8o,W8o,ND,H8o,U8o,J8o,U2,Gce,Y8o,K8o,jD,Z8o,exo,oxo,J2,Oce,rxo,txo,DD,axo,nxo,sxo,Y2,Vce,lxo,ixo,GD,dxo,cxo,fxo,K2,Xce,mxo,gxo,OD,hxo,pxo,uxo,Z2,zce,_xo,bxo,VD,vxo,Fxo,Txo,eb,Qce,Mxo,Exo,XD,Cxo,wxo,Axo,ob,Wce,yxo,Lxo,zD,xxo,$xo,kxo,rb,Hce,Sxo,Rxo,QD,Bxo,Pxo,Ixo,tb,Uce,qxo,Nxo,WD,jxo,Dxo,Gxo,ab,Jce,Oxo,Vxo,HD,Xxo,zxo,Qxo,nb,Yce,Wxo,Hxo,UD,Uxo,Jxo,Yxo,sb,Kce,Kxo,Zxo,JD,e$o,o$o,r$o,lb,Zce,t$o,a$o,YD,n$o,s$o,l$o,ib,efe,i$o,d$o,KD,c$o,f$o,m$o,db,ofe,g$o,h$o,ZD,p$o,u$o,_$o,cb,rfe,b$o,v$o,eG,F$o,T$o,M$o,fb,E$o,tfe,C$o,w$o,afe,A$o,y$o,mb,cIe,Di,gb,nfe,Z6,L$o,sfe,x$o,fIe,Bo,e0,$$o,Gi,k$o,oG,S$o,R$o,rG,B$o,P$o,I$o,o0,q$o,lfe,N$o,j$o,D$o,lt,r0,G$o,ife,O$o,V$o,Oi,X$o,dfe,z$o,Q$o,tG,W$o,H$o,U$o,hb,J$o,eo,t0,Y$o,cfe,K$o,Z$o,Sa,eko,ffe,oko,rko,mfe,tko,ako,gfe,nko,sko,lko,Y,pb,hfe,iko,dko,aG,cko,fko,mko,ub,pfe,gko,hko,nG,pko,uko,_ko,_b,ufe,bko,vko,sG,Fko,Tko,Mko,bb,_fe,Eko,Cko,lG,wko,Ako,yko,vb,bfe,Lko,xko,iG,$ko,kko,Sko,Fb,vfe,Rko,Bko,dG,Pko,Iko,qko,Tb,Ffe,Nko,jko,cG,Dko,Gko,Oko,Mb,Tfe,Vko,Xko,fG,zko,Qko,Wko,Eb,Mfe,Hko,Uko,mG,Jko,Yko,Kko,Cb,Efe,Zko,eSo,gG,oSo,rSo,tSo,wb,Cfe,aSo,nSo,hG,sSo,lSo,iSo,Ab,wfe,dSo,cSo,pG,fSo,mSo,gSo,yb,Afe,hSo,pSo,uG,uSo,_So,bSo,Lb,yfe,vSo,FSo,_G,TSo,MSo,ESo,xb,Lfe,CSo,wSo,bG,ASo,ySo,LSo,$b,xfe,xSo,$So,vG,kSo,SSo,RSo,kb,$fe,BSo,PSo,FG,ISo,qSo,NSo,Sb,kfe,jSo,DSo,TG,GSo,OSo,VSo,Rb,Sfe,XSo,zSo,MG,QSo,WSo,HSo,Bb,Rfe,USo,JSo,EG,YSo,KSo,ZSo,Pb,Bfe,eRo,oRo,CG,rRo,tRo,aRo,Ib,Pfe,nRo,sRo,wG,lRo,iRo,dRo,qb,Ife,cRo,fRo,AG,mRo,gRo,hRo,Nb,qfe,pRo,uRo,yG,_Ro,bRo,vRo,jb,Nfe,FRo,TRo,LG,MRo,ERo,CRo,Db,jfe,wRo,ARo,xG,yRo,LRo,xRo,Gb,Dfe,$Ro,kRo,$G,SRo,RRo,BRo,Ob,Gfe,PRo,IRo,kG,qRo,NRo,jRo,Vb,Ofe,DRo,GRo,SG,ORo,VRo,XRo,Xb,zRo,Vfe,QRo,WRo,Xfe,HRo,URo,zb,mIe,Vi,Qb,zfe,a0,JRo,Qfe,YRo,gIe,Po,n0,KRo,Xi,ZRo,RG,eBo,oBo,BG,rBo,tBo,aBo,s0,nBo,Wfe,sBo,lBo,iBo,it,l0,dBo,Hfe,cBo,fBo,zi,mBo,Ufe,gBo,hBo,PG,pBo,uBo,_Bo,Wb,bBo,oo,i0,vBo,Jfe,FBo,TBo,Ra,MBo,Yfe,EBo,CBo,Kfe,wBo,ABo,Zfe,yBo,LBo,xBo,Yr,Hb,eme,$Bo,kBo,IG,SBo,RBo,BBo,Ub,ome,PBo,IBo,qG,qBo,NBo,jBo,Jb,rme,DBo,GBo,NG,OBo,VBo,XBo,Yb,tme,zBo,QBo,jG,WBo,HBo,UBo,Kb,ame,JBo,YBo,DG,KBo,ZBo,ePo,Zb,oPo,nme,rPo,tPo,sme,aPo,nPo,ev,hIe,Qi,ov,lme,d0,sPo,ime,lPo,pIe,Io,c0,iPo,Wi,dPo,GG,cPo,fPo,OG,mPo,gPo,hPo,f0,pPo,dme,uPo,_Po,bPo,dt,m0,vPo,cme,FPo,TPo,Hi,MPo,fme,EPo,CPo,VG,wPo,APo,yPo,rv,LPo,ro,g0,xPo,mme,$Po,kPo,Ba,SPo,gme,RPo,BPo,hme,PPo,IPo,pme,qPo,NPo,jPo,U,tv,ume,DPo,GPo,XG,OPo,VPo,XPo,av,_me,zPo,QPo,zG,WPo,HPo,UPo,nv,bme,JPo,YPo,QG,KPo,ZPo,eIo,sv,vme,oIo,rIo,WG,tIo,aIo,nIo,lv,Fme,sIo,lIo,HG,iIo,dIo,cIo,iv,Tme,fIo,mIo,UG,gIo,hIo,pIo,dv,Mme,uIo,_Io,JG,bIo,vIo,FIo,cv,Eme,TIo,MIo,YG,EIo,CIo,wIo,fv,Cme,AIo,yIo,KG,LIo,xIo,$Io,mv,wme,kIo,SIo,ZG,RIo,BIo,PIo,gv,Ame,IIo,qIo,eO,NIo,jIo,DIo,hv,yme,GIo,OIo,oO,VIo,XIo,zIo,pv,Lme,QIo,WIo,rO,HIo,UIo,JIo,uv,xme,YIo,KIo,tO,ZIo,eqo,oqo,_v,$me,rqo,tqo,aO,aqo,nqo,sqo,bv,kme,lqo,iqo,nO,dqo,cqo,fqo,vv,Sme,mqo,gqo,sO,hqo,pqo,uqo,Fv,Rme,_qo,bqo,lO,vqo,Fqo,Tqo,Tv,Bme,Mqo,Eqo,iO,Cqo,wqo,Aqo,Mv,Pme,yqo,Lqo,dO,xqo,$qo,kqo,Ev,Ime,Sqo,Rqo,cO,Bqo,Pqo,Iqo,Cv,qme,qqo,Nqo,fO,jqo,Dqo,Gqo,wv,Nme,Oqo,Vqo,mO,Xqo,zqo,Qqo,Av,jme,Wqo,Hqo,gO,Uqo,Jqo,Yqo,yv,Dme,Kqo,Zqo,hO,eNo,oNo,rNo,Lv,Gme,tNo,aNo,pO,nNo,sNo,lNo,xv,Ome,iNo,dNo,uO,cNo,fNo,mNo,$v,Vme,gNo,hNo,_O,pNo,uNo,_No,kv,Xme,bNo,vNo,bO,FNo,TNo,MNo,Sv,zme,ENo,CNo,vO,wNo,ANo,yNo,Rv,Qme,LNo,xNo,FO,$No,kNo,SNo,Bv,Wme,RNo,BNo,TO,PNo,INo,qNo,Pv,Hme,NNo,jNo,MO,DNo,GNo,ONo,Iv,VNo,Ume,XNo,zNo,Jme,QNo,WNo,qv,uIe,Ui,Nv,Yme,h0,HNo,Kme,UNo,_Ie,qo,p0,JNo,Ji,YNo,EO,KNo,ZNo,CO,ejo,ojo,rjo,u0,tjo,Zme,ajo,njo,sjo,ct,_0,ljo,ege,ijo,djo,Yi,cjo,oge,fjo,mjo,wO,gjo,hjo,pjo,jv,ujo,to,b0,_jo,rge,bjo,vjo,Pa,Fjo,tge,Tjo,Mjo,age,Ejo,Cjo,nge,wjo,Ajo,yjo,O,Dv,sge,Ljo,xjo,AO,$jo,kjo,Sjo,Gv,lge,Rjo,Bjo,yO,Pjo,Ijo,qjo,Ov,ige,Njo,jjo,LO,Djo,Gjo,Ojo,Vv,dge,Vjo,Xjo,xO,zjo,Qjo,Wjo,Xv,cge,Hjo,Ujo,$O,Jjo,Yjo,Kjo,zv,fge,Zjo,eDo,kO,oDo,rDo,tDo,Qv,mge,aDo,nDo,SO,sDo,lDo,iDo,Wv,gge,dDo,cDo,RO,fDo,mDo,gDo,Hv,hge,hDo,pDo,BO,uDo,_Do,bDo,Uv,pge,vDo,FDo,PO,TDo,MDo,EDo,Jv,uge,CDo,wDo,IO,ADo,yDo,LDo,Yv,_ge,xDo,$Do,qO,kDo,SDo,RDo,Kv,bge,BDo,PDo,NO,IDo,qDo,NDo,Zv,vge,jDo,DDo,jO,GDo,ODo,VDo,eF,Fge,XDo,zDo,DO,QDo,WDo,HDo,oF,Tge,UDo,JDo,GO,YDo,KDo,ZDo,rF,Mge,eGo,oGo,OO,rGo,tGo,aGo,tF,Ege,nGo,sGo,VO,lGo,iGo,dGo,aF,Cge,cGo,fGo,XO,mGo,gGo,hGo,nF,wge,pGo,uGo,zO,_Go,bGo,vGo,sF,Age,FGo,TGo,QO,MGo,EGo,CGo,lF,yge,wGo,AGo,WO,yGo,LGo,xGo,iF,Lge,$Go,kGo,HO,SGo,RGo,BGo,dF,xge,PGo,IGo,UO,qGo,NGo,jGo,cF,$ge,DGo,GGo,JO,OGo,VGo,XGo,fF,kge,zGo,QGo,YO,WGo,HGo,UGo,mF,Sge,JGo,YGo,KO,KGo,ZGo,eOo,gF,Rge,oOo,rOo,ZO,tOo,aOo,nOo,hF,Bge,sOo,lOo,eV,iOo,dOo,cOo,pF,Pge,fOo,mOo,oV,gOo,hOo,pOo,uF,Ige,uOo,_Oo,rV,bOo,vOo,FOo,_F,qge,TOo,MOo,tV,EOo,COo,wOo,bF,Nge,AOo,yOo,aV,LOo,xOo,$Oo,vF,jge,kOo,SOo,nV,ROo,BOo,POo,FF,Dge,IOo,qOo,sV,NOo,jOo,DOo,TF,Gge,GOo,OOo,lV,VOo,XOo,zOo,MF,Oge,QOo,WOo,iV,HOo,UOo,JOo,EF,Vge,YOo,KOo,dV,ZOo,eVo,oVo,CF,Xge,rVo,tVo,cV,aVo,nVo,sVo,wF,lVo,zge,iVo,dVo,Qge,cVo,fVo,AF,bIe,Ki,yF,Wge,v0,mVo,Hge,gVo,vIe,No,F0,hVo,Zi,pVo,fV,uVo,_Vo,mV,bVo,vVo,FVo,T0,TVo,Uge,MVo,EVo,CVo,ft,M0,wVo,Jge,AVo,yVo,ed,LVo,Yge,xVo,$Vo,gV,kVo,SVo,RVo,LF,BVo,ao,E0,PVo,Kge,IVo,qVo,Ia,NVo,Zge,jVo,DVo,ehe,GVo,OVo,ohe,VVo,XVo,zVo,rhe,xF,the,QVo,WVo,hV,HVo,UVo,JVo,$F,YVo,ahe,KVo,ZVo,nhe,eXo,oXo,kF,FIe,od,SF,she,C0,rXo,lhe,tXo,TIe,jo,w0,aXo,rd,nXo,pV,sXo,lXo,uV,iXo,dXo,cXo,A0,fXo,ihe,mXo,gXo,hXo,mt,y0,pXo,dhe,uXo,_Xo,td,bXo,che,vXo,FXo,_V,TXo,MXo,EXo,RF,CXo,no,L0,wXo,fhe,AXo,yXo,qa,LXo,mhe,xXo,$Xo,ghe,kXo,SXo,hhe,RXo,BXo,PXo,Fe,BF,phe,IXo,qXo,bV,NXo,jXo,DXo,PF,uhe,GXo,OXo,vV,VXo,XXo,zXo,IF,_he,QXo,WXo,FV,HXo,UXo,JXo,Bs,bhe,YXo,KXo,TV,ZXo,ezo,MV,ozo,rzo,tzo,qF,vhe,azo,nzo,EV,szo,lzo,izo,gt,Fhe,dzo,czo,CV,fzo,mzo,wV,gzo,hzo,AV,pzo,uzo,_zo,NF,The,bzo,vzo,yV,Fzo,Tzo,Mzo,jF,Mhe,Ezo,Czo,LV,wzo,Azo,yzo,DF,Ehe,Lzo,xzo,xV,$zo,kzo,Szo,GF,Che,Rzo,Bzo,$V,Pzo,Izo,qzo,OF,whe,Nzo,jzo,kV,Dzo,Gzo,Ozo,VF,Ahe,Vzo,Xzo,SV,zzo,Qzo,Wzo,XF,yhe,Hzo,Uzo,RV,Jzo,Yzo,Kzo,zF,Zzo,Lhe,eQo,oQo,xhe,rQo,tQo,QF,MIe,ad,WF,$he,x0,aQo,khe,nQo,EIe,Do,$0,sQo,nd,lQo,BV,iQo,dQo,PV,cQo,fQo,mQo,k0,gQo,She,hQo,pQo,uQo,ht,S0,_Qo,Rhe,bQo,vQo,sd,FQo,Bhe,TQo,MQo,IV,EQo,CQo,wQo,HF,AQo,so,R0,yQo,Phe,LQo,xQo,Na,$Qo,Ihe,kQo,SQo,qhe,RQo,BQo,Nhe,PQo,IQo,qQo,jhe,UF,Dhe,NQo,jQo,qV,DQo,GQo,OQo,JF,VQo,Ghe,XQo,zQo,Ohe,QQo,WQo,YF,CIe,ld,KF,Vhe,B0,HQo,Xhe,UQo,wIe,Go,P0,JQo,id,YQo,NV,KQo,ZQo,jV,eWo,oWo,rWo,I0,tWo,zhe,aWo,nWo,sWo,pt,q0,lWo,Qhe,iWo,dWo,dd,cWo,Whe,fWo,mWo,DV,gWo,hWo,pWo,ZF,uWo,lo,N0,_Wo,Hhe,bWo,vWo,ja,FWo,Uhe,TWo,MWo,Jhe,EWo,CWo,Yhe,wWo,AWo,yWo,Ne,eT,Khe,LWo,xWo,GV,$Wo,kWo,SWo,oT,Zhe,RWo,BWo,OV,PWo,IWo,qWo,rT,epe,NWo,jWo,VV,DWo,GWo,OWo,tT,ope,VWo,XWo,XV,zWo,QWo,WWo,aT,rpe,HWo,UWo,zV,JWo,YWo,KWo,nT,tpe,ZWo,eHo,QV,oHo,rHo,tHo,sT,ape,aHo,nHo,WV,sHo,lHo,iHo,lT,npe,dHo,cHo,HV,fHo,mHo,gHo,iT,hHo,spe,pHo,uHo,lpe,_Ho,bHo,dT,AIe,cd,cT,ipe,j0,vHo,dpe,FHo,yIe,Oo,D0,THo,fd,MHo,UV,EHo,CHo,JV,wHo,AHo,yHo,G0,LHo,cpe,xHo,$Ho,kHo,ut,O0,SHo,fpe,RHo,BHo,md,PHo,mpe,IHo,qHo,YV,NHo,jHo,DHo,fT,GHo,io,V0,OHo,gpe,VHo,XHo,Da,zHo,hpe,QHo,WHo,ppe,HHo,UHo,upe,JHo,YHo,KHo,Ga,mT,_pe,ZHo,eUo,KV,oUo,rUo,tUo,gT,bpe,aUo,nUo,ZV,sUo,lUo,iUo,hT,vpe,dUo,cUo,eX,fUo,mUo,gUo,pT,Fpe,hUo,pUo,oX,uUo,_Uo,bUo,uT,vUo,Tpe,FUo,TUo,Mpe,MUo,EUo,_T,LIe,gd,bT,Epe,X0,CUo,Cpe,wUo,xIe,Vo,z0,AUo,hd,yUo,rX,LUo,xUo,tX,$Uo,kUo,SUo,Q0,RUo,wpe,BUo,PUo,IUo,_t,W0,qUo,Ape,NUo,jUo,pd,DUo,ype,GUo,OUo,aX,VUo,XUo,zUo,vT,QUo,co,H0,WUo,Lpe,HUo,UUo,Oa,JUo,xpe,YUo,KUo,$pe,ZUo,eJo,kpe,oJo,rJo,tJo,je,FT,Spe,aJo,nJo,nX,sJo,lJo,iJo,TT,Rpe,dJo,cJo,sX,fJo,mJo,gJo,MT,Bpe,hJo,pJo,lX,uJo,_Jo,bJo,ET,Ppe,vJo,FJo,iX,TJo,MJo,EJo,CT,Ipe,CJo,wJo,dX,AJo,yJo,LJo,wT,qpe,xJo,$Jo,cX,kJo,SJo,RJo,AT,Npe,BJo,PJo,fX,IJo,qJo,NJo,yT,jpe,jJo,DJo,mX,GJo,OJo,VJo,LT,XJo,Dpe,zJo,QJo,Gpe,WJo,HJo,xT,$Ie,ud,$T,Ope,U0,UJo,Vpe,JJo,kIe,Xo,J0,YJo,_d,KJo,gX,ZJo,eYo,hX,oYo,rYo,tYo,Y0,aYo,Xpe,nYo,sYo,lYo,bt,K0,iYo,zpe,dYo,cYo,bd,fYo,Qpe,mYo,gYo,pX,hYo,pYo,uYo,kT,_Yo,fo,Z0,bYo,Wpe,vYo,FYo,Va,TYo,Hpe,MYo,EYo,Upe,CYo,wYo,Jpe,AYo,yYo,LYo,ey,ST,Ype,xYo,$Yo,uX,kYo,SYo,RYo,RT,Kpe,BYo,PYo,_X,IYo,qYo,NYo,BT,jYo,Zpe,DYo,GYo,eue,OYo,VYo,PT,SIe,vd,IT,oue,oy,XYo,rue,zYo,RIe,zo,ry,QYo,Fd,WYo,bX,HYo,UYo,vX,JYo,YYo,KYo,ty,ZYo,tue,eKo,oKo,rKo,vt,ay,tKo,aue,aKo,nKo,Td,sKo,nue,lKo,iKo,FX,dKo,cKo,fKo,qT,mKo,mo,ny,gKo,sue,hKo,pKo,Xa,uKo,lue,_Ko,bKo,iue,vKo,FKo,due,TKo,MKo,EKo,za,NT,cue,CKo,wKo,TX,AKo,yKo,LKo,jT,fue,xKo,$Ko,MX,kKo,SKo,RKo,DT,mue,BKo,PKo,EX,IKo,qKo,NKo,GT,gue,jKo,DKo,CX,GKo,OKo,VKo,OT,XKo,hue,zKo,QKo,pue,WKo,HKo,VT,BIe,Md,XT,uue,sy,UKo,_ue,JKo,PIe,Qo,ly,YKo,Ed,KKo,wX,ZKo,eZo,AX,oZo,rZo,tZo,iy,aZo,bue,nZo,sZo,lZo,Ft,dy,iZo,vue,dZo,cZo,Cd,fZo,Fue,mZo,gZo,yX,hZo,pZo,uZo,zT,_Zo,go,cy,bZo,Tue,vZo,FZo,Qa,TZo,Mue,MZo,EZo,Eue,CZo,wZo,Cue,AZo,yZo,LZo,wd,QT,wue,xZo,$Zo,LX,kZo,SZo,RZo,WT,Aue,BZo,PZo,xX,IZo,qZo,NZo,HT,yue,jZo,DZo,$X,GZo,OZo,VZo,UT,XZo,Lue,zZo,QZo,xue,WZo,HZo,JT,IIe,Ad,YT,$ue,fy,UZo,kue,JZo,qIe,Wo,my,YZo,yd,KZo,kX,ZZo,eer,SX,oer,rer,ter,gy,aer,Sue,ner,ser,ler,Tt,hy,ier,Rue,der,cer,Ld,fer,Bue,mer,ger,RX,her,per,uer,KT,_er,ho,py,ber,Pue,ver,Fer,Wa,Ter,Iue,Mer,Eer,que,Cer,wer,Nue,Aer,yer,Ler,uy,ZT,jue,xer,$er,BX,ker,Ser,Rer,e7,Due,Ber,Per,PX,Ier,qer,Ner,o7,jer,Gue,Der,Ger,Oue,Oer,Ver,r7,NIe,xd,t7,Vue,_y,Xer,Xue,zer,jIe,Ho,by,Qer,$d,Wer,IX,Her,Uer,qX,Jer,Yer,Ker,vy,Zer,zue,eor,oor,ror,Mt,Fy,tor,Que,aor,nor,kd,sor,Wue,lor,ior,NX,dor,cor,mor,a7,gor,po,Ty,hor,Hue,por,uor,Ha,_or,Uue,bor,vor,Jue,For,Tor,Yue,Mor,Eor,Cor,Kue,n7,Zue,wor,Aor,jX,yor,Lor,xor,s7,$or,e_e,kor,Sor,o_e,Ror,Bor,l7,DIe,Sd,i7,r_e,My,Por,t_e,Ior,GIe,Uo,Ey,qor,Rd,Nor,DX,jor,Dor,GX,Gor,Oor,Vor,Cy,Xor,a_e,zor,Qor,Wor,Et,wy,Hor,n_e,Uor,Jor,Bd,Yor,s_e,Kor,Zor,OX,err,orr,rrr,d7,trr,uo,Ay,arr,l_e,nrr,srr,Ua,lrr,i_e,irr,drr,d_e,crr,frr,c_e,mrr,grr,hrr,Ja,c7,f_e,prr,urr,VX,_rr,brr,vrr,f7,m_e,Frr,Trr,XX,Mrr,Err,Crr,m7,g_e,wrr,Arr,zX,yrr,Lrr,xrr,g7,h_e,$rr,krr,QX,Srr,Rrr,Brr,h7,Prr,p_e,Irr,qrr,u_e,Nrr,jrr,p7,OIe,Pd,u7,__e,yy,Drr,b_e,Grr,VIe,Jo,Ly,Orr,Id,Vrr,WX,Xrr,zrr,HX,Qrr,Wrr,Hrr,xy,Urr,v_e,Jrr,Yrr,Krr,Ct,$y,Zrr,F_e,etr,otr,qd,rtr,T_e,ttr,atr,UX,ntr,str,ltr,_7,itr,_o,ky,dtr,M_e,ctr,ftr,Ya,mtr,E_e,gtr,htr,C_e,ptr,utr,w_e,_tr,btr,vtr,A_e,b7,y_e,Ftr,Ttr,JX,Mtr,Etr,Ctr,v7,wtr,L_e,Atr,ytr,x_e,Ltr,xtr,F7,XIe,Nd,T7,$_e,Sy,$tr,k_e,ktr,zIe,Yo,Ry,Str,jd,Rtr,YX,Btr,Ptr,KX,Itr,qtr,Ntr,By,jtr,S_e,Dtr,Gtr,Otr,wt,Py,Vtr,R_e,Xtr,ztr,Dd,Qtr,B_e,Wtr,Htr,ZX,Utr,Jtr,Ytr,M7,Ktr,wr,Iy,Ztr,P_e,ear,oar,Ka,rar,I_e,tar,aar,q_e,nar,sar,N_e,lar,iar,dar,N,E7,j_e,car,far,ez,mar,gar,har,C7,D_e,par,uar,oz,_ar,bar,Far,w7,G_e,Tar,Mar,rz,Ear,Car,war,A7,O_e,Aar,yar,tz,Lar,xar,$ar,y7,V_e,kar,Sar,az,Rar,Bar,Par,L7,X_e,Iar,qar,nz,Nar,jar,Dar,x7,z_e,Gar,Oar,sz,Var,Xar,zar,$7,Q_e,Qar,War,lz,Har,Uar,Jar,k7,W_e,Yar,Kar,iz,Zar,enr,onr,S7,H_e,rnr,tnr,dz,anr,nnr,snr,R7,U_e,lnr,inr,cz,dnr,cnr,fnr,B7,J_e,mnr,gnr,fz,hnr,pnr,unr,P7,Y_e,_nr,bnr,mz,vnr,Fnr,Tnr,I7,K_e,Mnr,Enr,gz,Cnr,wnr,Anr,q7,Z_e,ynr,Lnr,hz,xnr,$nr,knr,N7,e1e,Snr,Rnr,pz,Bnr,Pnr,Inr,j7,o1e,qnr,Nnr,uz,jnr,Dnr,Gnr,Ps,r1e,Onr,Vnr,_z,Xnr,znr,bz,Qnr,Wnr,Hnr,D7,t1e,Unr,Jnr,vz,Ynr,Knr,Znr,G7,a1e,esr,osr,Fz,rsr,tsr,asr,O7,n1e,nsr,ssr,Tz,lsr,isr,dsr,V7,s1e,csr,fsr,Mz,msr,gsr,hsr,X7,l1e,psr,usr,Ez,_sr,bsr,vsr,z7,i1e,Fsr,Tsr,Cz,Msr,Esr,Csr,Q7,d1e,wsr,Asr,wz,ysr,Lsr,xsr,W7,c1e,$sr,ksr,Az,Ssr,Rsr,Bsr,H7,f1e,Psr,Isr,yz,qsr,Nsr,jsr,U7,m1e,Dsr,Gsr,Lz,Osr,Vsr,Xsr,J7,g1e,zsr,Qsr,xz,Wsr,Hsr,Usr,Y7,h1e,Jsr,Ysr,$z,Ksr,Zsr,elr,K7,p1e,olr,rlr,kz,tlr,alr,nlr,Z7,u1e,slr,llr,Sz,ilr,dlr,clr,e9,_1e,flr,mlr,Rz,glr,hlr,plr,o9,b1e,ulr,_lr,Bz,blr,vlr,Flr,r9,v1e,Tlr,Mlr,Pz,Elr,Clr,wlr,t9,F1e,Alr,ylr,Iz,Llr,xlr,$lr,a9,T1e,klr,Slr,qz,Rlr,Blr,Plr,n9,M1e,Ilr,qlr,Nz,Nlr,jlr,Dlr,s9,E1e,Glr,Olr,jz,Vlr,Xlr,zlr,l9,C1e,Qlr,Wlr,Dz,Hlr,Ulr,Jlr,i9,w1e,Ylr,Klr,Gz,Zlr,eir,oir,d9,A1e,rir,tir,Oz,air,nir,sir,c9,y1e,lir,iir,Vz,dir,cir,fir,f9,L1e,mir,gir,Xz,hir,pir,uir,m9,x1e,_ir,bir,zz,vir,Fir,Tir,g9,$1e,Mir,Eir,Qz,Cir,wir,Air,h9,QIe,Gd,p9,k1e,qy,yir,S1e,Lir,WIe,Ko,Ny,xir,Od,$ir,Wz,kir,Sir,Hz,Rir,Bir,Pir,jy,Iir,R1e,qir,Nir,jir,At,Dy,Dir,B1e,Gir,Oir,Vd,Vir,P1e,Xir,zir,Uz,Qir,Wir,Hir,u9,Uir,Ar,Gy,Jir,I1e,Yir,Kir,Za,Zir,q1e,edr,odr,N1e,rdr,tdr,j1e,adr,ndr,sdr,se,_9,D1e,ldr,idr,Jz,ddr,cdr,fdr,b9,G1e,mdr,gdr,Yz,hdr,pdr,udr,v9,O1e,_dr,bdr,Kz,vdr,Fdr,Tdr,F9,V1e,Mdr,Edr,Zz,Cdr,wdr,Adr,T9,X1e,ydr,Ldr,eQ,xdr,$dr,kdr,M9,z1e,Sdr,Rdr,oQ,Bdr,Pdr,Idr,E9,Q1e,qdr,Ndr,rQ,jdr,Ddr,Gdr,C9,W1e,Odr,Vdr,tQ,Xdr,zdr,Qdr,w9,H1e,Wdr,Hdr,aQ,Udr,Jdr,Ydr,A9,U1e,Kdr,Zdr,nQ,ecr,ocr,rcr,y9,J1e,tcr,acr,sQ,ncr,scr,lcr,L9,Y1e,icr,dcr,lQ,ccr,fcr,mcr,x9,K1e,gcr,hcr,iQ,pcr,ucr,_cr,$9,Z1e,bcr,vcr,dQ,Fcr,Tcr,Mcr,k9,e2e,Ecr,Ccr,cQ,wcr,Acr,ycr,S9,o2e,Lcr,xcr,fQ,$cr,kcr,Scr,R9,r2e,Rcr,Bcr,mQ,Pcr,Icr,qcr,B9,t2e,Ncr,jcr,gQ,Dcr,Gcr,Ocr,P9,a2e,Vcr,Xcr,hQ,zcr,Qcr,Wcr,I9,n2e,Hcr,Ucr,pQ,Jcr,Ycr,Kcr,q9,s2e,Zcr,efr,uQ,ofr,rfr,tfr,N9,l2e,afr,nfr,_Q,sfr,lfr,ifr,j9,i2e,dfr,cfr,bQ,ffr,mfr,gfr,D9,HIe,Xd,G9,d2e,Oy,hfr,c2e,pfr,UIe,Zo,Vy,ufr,zd,_fr,vQ,bfr,vfr,FQ,Ffr,Tfr,Mfr,Xy,Efr,f2e,Cfr,wfr,Afr,yt,zy,yfr,m2e,Lfr,xfr,Qd,$fr,g2e,kfr,Sfr,TQ,Rfr,Bfr,Pfr,O9,Ifr,yr,Qy,qfr,h2e,Nfr,jfr,en,Dfr,p2e,Gfr,Ofr,u2e,Vfr,Xfr,_2e,zfr,Qfr,Wfr,Te,V9,b2e,Hfr,Ufr,MQ,Jfr,Yfr,Kfr,X9,v2e,Zfr,emr,EQ,omr,rmr,tmr,z9,F2e,amr,nmr,CQ,smr,lmr,imr,Q9,T2e,dmr,cmr,wQ,fmr,mmr,gmr,W9,M2e,hmr,pmr,AQ,umr,_mr,bmr,H9,E2e,vmr,Fmr,yQ,Tmr,Mmr,Emr,U9,C2e,Cmr,wmr,LQ,Amr,ymr,Lmr,J9,w2e,xmr,$mr,xQ,kmr,Smr,Rmr,Y9,A2e,Bmr,Pmr,$Q,Imr,qmr,Nmr,K9,y2e,jmr,Dmr,kQ,Gmr,Omr,Vmr,Z9,L2e,Xmr,zmr,SQ,Qmr,Wmr,Hmr,eM,x2e,Umr,Jmr,RQ,Ymr,Kmr,Zmr,oM,JIe,Wd,rM,$2e,Wy,egr,k2e,ogr,YIe,er,Hy,rgr,Hd,tgr,BQ,agr,ngr,PQ,sgr,lgr,igr,Uy,dgr,S2e,cgr,fgr,mgr,Lt,Jy,ggr,R2e,hgr,pgr,Ud,ugr,B2e,_gr,bgr,IQ,vgr,Fgr,Tgr,tM,Mgr,Lr,Yy,Egr,P2e,Cgr,wgr,on,Agr,I2e,ygr,Lgr,q2e,xgr,$gr,N2e,kgr,Sgr,Rgr,rn,aM,j2e,Bgr,Pgr,qQ,Igr,qgr,Ngr,nM,D2e,jgr,Dgr,NQ,Ggr,Ogr,Vgr,sM,G2e,Xgr,zgr,jQ,Qgr,Wgr,Hgr,lM,O2e,Ugr,Jgr,DQ,Ygr,Kgr,Zgr,iM,KIe,Jd,dM,V2e,Ky,ehr,X2e,ohr,ZIe,or,Zy,rhr,Yd,thr,GQ,ahr,nhr,OQ,shr,lhr,ihr,eL,dhr,z2e,chr,fhr,mhr,xt,oL,ghr,Q2e,hhr,phr,Kd,uhr,W2e,_hr,bhr,VQ,vhr,Fhr,Thr,cM,Mhr,xr,rL,Ehr,H2e,Chr,whr,tn,Ahr,U2e,yhr,Lhr,J2e,xhr,$hr,Y2e,khr,Shr,Rhr,ie,fM,K2e,Bhr,Phr,XQ,Ihr,qhr,Nhr,mM,Z2e,jhr,Dhr,zQ,Ghr,Ohr,Vhr,gM,ebe,Xhr,zhr,QQ,Qhr,Whr,Hhr,hM,obe,Uhr,Jhr,WQ,Yhr,Khr,Zhr,pM,rbe,epr,opr,HQ,rpr,tpr,apr,uM,tbe,npr,spr,UQ,lpr,ipr,dpr,_M,abe,cpr,fpr,JQ,mpr,gpr,hpr,bM,nbe,ppr,upr,YQ,_pr,bpr,vpr,vM,sbe,Fpr,Tpr,KQ,Mpr,Epr,Cpr,FM,lbe,wpr,Apr,ZQ,ypr,Lpr,xpr,TM,ibe,$pr,kpr,eW,Spr,Rpr,Bpr,MM,dbe,Ppr,Ipr,oW,qpr,Npr,jpr,EM,cbe,Dpr,Gpr,rW,Opr,Vpr,Xpr,CM,fbe,zpr,Qpr,tW,Wpr,Hpr,Upr,wM,mbe,Jpr,Ypr,aW,Kpr,Zpr,eur,AM,gbe,our,rur,nW,tur,aur,nur,yM,hbe,sur,lur,sW,iur,dur,cur,LM,pbe,fur,mur,lW,gur,hur,pur,xM,ube,uur,_ur,iW,bur,vur,Fur,$M,_be,Tur,Mur,dW,Eur,Cur,wur,kM,eqe,Zd,SM,bbe,tL,Aur,vbe,yur,oqe,rr,aL,Lur,ec,xur,cW,$ur,kur,fW,Sur,Rur,Bur,nL,Pur,Fbe,Iur,qur,Nur,$t,sL,jur,Tbe,Dur,Gur,oc,Our,Mbe,Vur,Xur,mW,zur,Qur,Wur,RM,Hur,$r,lL,Uur,Ebe,Jur,Yur,an,Kur,Cbe,Zur,e_r,wbe,o_r,r_r,Abe,t_r,a_r,n_r,ye,BM,ybe,s_r,l_r,gW,i_r,d_r,c_r,PM,Lbe,f_r,m_r,hW,g_r,h_r,p_r,IM,xbe,u_r,__r,pW,b_r,v_r,F_r,qM,$be,T_r,M_r,uW,E_r,C_r,w_r,NM,kbe,A_r,y_r,_W,L_r,x_r,$_r,jM,Sbe,k_r,S_r,bW,R_r,B_r,P_r,DM,Rbe,I_r,q_r,vW,N_r,j_r,D_r,GM,Bbe,G_r,O_r,FW,V_r,X_r,z_r,OM,Pbe,Q_r,W_r,TW,H_r,U_r,J_r,VM,Ibe,Y_r,K_r,MW,Z_r,e1r,o1r,XM,rqe,rc,zM,qbe,iL,r1r,Nbe,t1r,tqe,tr,dL,a1r,tc,n1r,EW,s1r,l1r,CW,i1r,d1r,c1r,cL,f1r,jbe,m1r,g1r,h1r,kt,fL,p1r,Dbe,u1r,_1r,ac,b1r,Gbe,v1r,F1r,wW,T1r,M1r,E1r,QM,C1r,kr,mL,w1r,Obe,A1r,y1r,nn,L1r,Vbe,x1r,$1r,Xbe,k1r,S1r,zbe,R1r,B1r,P1r,Z,WM,Qbe,I1r,q1r,AW,N1r,j1r,D1r,HM,Wbe,G1r,O1r,yW,V1r,X1r,z1r,UM,Hbe,Q1r,W1r,LW,H1r,U1r,J1r,JM,Ube,Y1r,K1r,xW,Z1r,e2r,o2r,YM,Jbe,r2r,t2r,$W,a2r,n2r,s2r,KM,Ybe,l2r,i2r,kW,d2r,c2r,f2r,ZM,Kbe,m2r,g2r,SW,h2r,p2r,u2r,e4,Zbe,_2r,b2r,RW,v2r,F2r,T2r,o4,eve,M2r,E2r,BW,C2r,w2r,A2r,r4,ove,y2r,L2r,PW,x2r,$2r,k2r,t4,rve,S2r,R2r,IW,B2r,P2r,I2r,a4,tve,q2r,N2r,qW,j2r,D2r,G2r,n4,ave,O2r,V2r,NW,X2r,z2r,Q2r,s4,nve,W2r,H2r,jW,U2r,J2r,Y2r,l4,sve,K2r,Z2r,DW,ebr,obr,rbr,i4,lve,tbr,abr,GW,nbr,sbr,lbr,d4,ive,ibr,dbr,OW,cbr,fbr,mbr,c4,dve,gbr,hbr,VW,pbr,ubr,_br,f4,cve,bbr,vbr,XW,Fbr,Tbr,Mbr,m4,fve,Ebr,Cbr,zW,wbr,Abr,ybr,g4,mve,Lbr,xbr,QW,$br,kbr,Sbr,h4,gve,Rbr,Bbr,WW,Pbr,Ibr,qbr,p4,hve,Nbr,jbr,HW,Dbr,Gbr,Obr,u4,pve,Vbr,Xbr,UW,zbr,Qbr,Wbr,_4,uve,Hbr,Ubr,JW,Jbr,Ybr,Kbr,b4,_ve,Zbr,evr,YW,ovr,rvr,tvr,v4,aqe,nc,F4,bve,gL,avr,vve,nvr,nqe,ar,hL,svr,sc,lvr,KW,ivr,dvr,ZW,cvr,fvr,mvr,pL,gvr,Fve,hvr,pvr,uvr,St,uL,_vr,Tve,bvr,vvr,lc,Fvr,Mve,Tvr,Mvr,eH,Evr,Cvr,wvr,T4,Avr,Sr,_L,yvr,Eve,Lvr,xvr,sn,$vr,Cve,kvr,Svr,wve,Rvr,Bvr,Ave,Pvr,Ivr,qvr,he,M4,yve,Nvr,jvr,oH,Dvr,Gvr,Ovr,E4,Lve,Vvr,Xvr,rH,zvr,Qvr,Wvr,C4,xve,Hvr,Uvr,tH,Jvr,Yvr,Kvr,w4,$ve,Zvr,eFr,aH,oFr,rFr,tFr,A4,kve,aFr,nFr,nH,sFr,lFr,iFr,y4,Sve,dFr,cFr,sH,fFr,mFr,gFr,L4,Rve,hFr,pFr,lH,uFr,_Fr,bFr,x4,Bve,vFr,FFr,iH,TFr,MFr,EFr,$4,Pve,CFr,wFr,dH,AFr,yFr,LFr,k4,Ive,xFr,$Fr,cH,kFr,SFr,RFr,S4,qve,BFr,PFr,fH,IFr,qFr,NFr,R4,Nve,jFr,DFr,mH,GFr,OFr,VFr,B4,jve,XFr,zFr,gH,QFr,WFr,HFr,P4,Dve,UFr,JFr,hH,YFr,KFr,ZFr,I4,Gve,eTr,oTr,pH,rTr,tTr,aTr,q4,Ove,nTr,sTr,uH,lTr,iTr,dTr,N4,Vve,cTr,fTr,_H,mTr,gTr,hTr,j4,sqe,ic,D4,Xve,bL,pTr,zve,uTr,lqe,nr,vL,_Tr,dc,bTr,bH,vTr,FTr,vH,TTr,MTr,ETr,FL,CTr,Qve,wTr,ATr,yTr,Rt,TL,LTr,Wve,xTr,$Tr,cc,kTr,Hve,STr,RTr,FH,BTr,PTr,ITr,G4,qTr,Rr,ML,NTr,Uve,jTr,DTr,ln,GTr,Jve,OTr,VTr,Yve,XTr,zTr,Kve,QTr,WTr,HTr,EL,O4,Zve,UTr,JTr,TH,YTr,KTr,ZTr,V4,eFe,e7r,o7r,MH,r7r,t7r,a7r,X4,iqe,fc,z4,oFe,CL,n7r,rFe,s7r,dqe,sr,wL,l7r,mc,i7r,EH,d7r,c7r,CH,f7r,m7r,g7r,AL,h7r,tFe,p7r,u7r,_7r,Bt,yL,b7r,aFe,v7r,F7r,gc,T7r,nFe,M7r,E7r,wH,C7r,w7r,A7r,Q4,y7r,Br,LL,L7r,sFe,x7r,$7r,dn,k7r,lFe,S7r,R7r,iFe,B7r,P7r,dFe,I7r,q7r,N7r,cFe,W4,fFe,j7r,D7r,AH,G7r,O7r,V7r,H4,cqe,hc,U4,mFe,xL,X7r,gFe,z7r,fqe,lr,$L,Q7r,pc,W7r,yH,H7r,U7r,LH,J7r,Y7r,K7r,kL,Z7r,hFe,e9r,o9r,r9r,Pt,SL,t9r,pFe,a9r,n9r,uc,s9r,uFe,l9r,i9r,xH,d9r,c9r,f9r,J4,m9r,Pr,RL,g9r,_Fe,h9r,p9r,cn,u9r,bFe,_9r,b9r,vFe,v9r,F9r,FFe,T9r,M9r,E9r,de,Y4,TFe,C9r,w9r,$H,A9r,y9r,L9r,K4,MFe,x9r,$9r,kH,k9r,S9r,R9r,Z4,EFe,B9r,P9r,SH,I9r,q9r,N9r,eE,CFe,j9r,D9r,RH,G9r,O9r,V9r,oE,wFe,X9r,z9r,BH,Q9r,W9r,H9r,rE,AFe,U9r,J9r,PH,Y9r,K9r,Z9r,tE,yFe,eMr,oMr,IH,rMr,tMr,aMr,aE,LFe,nMr,sMr,qH,lMr,iMr,dMr,nE,xFe,cMr,fMr,NH,mMr,gMr,hMr,sE,$Fe,pMr,uMr,jH,_Mr,bMr,vMr,lE,kFe,FMr,TMr,DH,MMr,EMr,CMr,iE,SFe,wMr,AMr,GH,yMr,LMr,xMr,dE,RFe,$Mr,kMr,OH,SMr,RMr,BMr,cE,BFe,PMr,IMr,VH,qMr,NMr,jMr,fE,PFe,DMr,GMr,XH,OMr,VMr,XMr,mE,IFe,zMr,QMr,zH,WMr,HMr,UMr,gE,qFe,JMr,YMr,QH,KMr,ZMr,e4r,hE,NFe,o4r,r4r,WH,t4r,a4r,n4r,pE,jFe,s4r,l4r,HH,i4r,d4r,c4r,uE,DFe,f4r,m4r,UH,g4r,h4r,p4r,_E,mqe,_c,bE,GFe,BL,u4r,OFe,_4r,gqe,ir,PL,b4r,bc,v4r,JH,F4r,T4r,YH,M4r,E4r,C4r,IL,w4r,VFe,A4r,y4r,L4r,It,qL,x4r,XFe,$4r,k4r,vc,S4r,zFe,R4r,B4r,KH,P4r,I4r,q4r,vE,N4r,Ir,NL,j4r,QFe,D4r,G4r,fn,O4r,WFe,V4r,X4r,HFe,z4r,Q4r,UFe,W4r,H4r,U4r,ce,FE,JFe,J4r,Y4r,ZH,K4r,Z4r,eEr,TE,YFe,oEr,rEr,eU,tEr,aEr,nEr,ME,KFe,sEr,lEr,oU,iEr,dEr,cEr,EE,ZFe,fEr,mEr,rU,gEr,hEr,pEr,CE,eTe,uEr,_Er,tU,bEr,vEr,FEr,wE,oTe,TEr,MEr,aU,EEr,CEr,wEr,AE,rTe,AEr,yEr,nU,LEr,xEr,$Er,yE,tTe,kEr,SEr,sU,REr,BEr,PEr,LE,aTe,IEr,qEr,lU,NEr,jEr,DEr,xE,nTe,GEr,OEr,iU,VEr,XEr,zEr,$E,sTe,QEr,WEr,dU,HEr,UEr,JEr,kE,lTe,YEr,KEr,cU,ZEr,e5r,o5r,SE,iTe,r5r,t5r,fU,a5r,n5r,s5r,RE,dTe,l5r,i5r,mU,d5r,c5r,f5r,BE,cTe,m5r,g5r,gU,h5r,p5r,u5r,PE,fTe,_5r,b5r,hU,v5r,F5r,T5r,IE,mTe,M5r,E5r,pU,C5r,w5r,A5r,qE,gTe,y5r,L5r,uU,x5r,$5r,k5r,NE,hTe,S5r,R5r,_U,B5r,P5r,I5r,jE,pTe,q5r,N5r,bU,j5r,D5r,G5r,DE,hqe,Fc,GE,uTe,jL,O5r,_Te,V5r,pqe,dr,DL,X5r,Tc,z5r,vU,Q5r,W5r,FU,H5r,U5r,J5r,GL,Y5r,bTe,K5r,Z5r,eCr,qt,OL,oCr,vTe,rCr,tCr,Mc,aCr,FTe,nCr,sCr,TU,lCr,iCr,dCr,OE,cCr,qr,VL,fCr,TTe,mCr,gCr,mn,hCr,MTe,pCr,uCr,ETe,_Cr,bCr,CTe,vCr,FCr,TCr,wTe,VE,ATe,MCr,ECr,MU,CCr,wCr,ACr,XE,uqe,Ec,zE,yTe,XL,yCr,LTe,LCr,_qe,cr,zL,xCr,Cc,$Cr,EU,kCr,SCr,CU,RCr,BCr,PCr,QL,ICr,xTe,qCr,NCr,jCr,Nt,WL,DCr,$Te,GCr,OCr,wc,VCr,kTe,XCr,zCr,wU,QCr,WCr,HCr,QE,UCr,Nr,HL,JCr,STe,YCr,KCr,gn,ZCr,RTe,e3r,o3r,BTe,r3r,t3r,PTe,a3r,n3r,s3r,ITe,WE,qTe,l3r,i3r,AU,d3r,c3r,f3r,HE,bqe,Ac,UE,NTe,UL,m3r,jTe,g3r,vqe,fr,JL,h3r,yc,p3r,yU,u3r,_3r,LU,b3r,v3r,F3r,YL,T3r,DTe,M3r,E3r,C3r,jt,KL,w3r,GTe,A3r,y3r,Lc,L3r,OTe,x3r,$3r,xU,k3r,S3r,R3r,JE,B3r,jr,ZL,P3r,VTe,I3r,q3r,hn,N3r,XTe,j3r,D3r,zTe,G3r,O3r,QTe,V3r,X3r,z3r,re,YE,WTe,Q3r,W3r,$U,H3r,U3r,J3r,KE,HTe,Y3r,K3r,kU,Z3r,ewr,owr,ZE,UTe,rwr,twr,SU,awr,nwr,swr,e5,JTe,lwr,iwr,RU,dwr,cwr,fwr,o5,YTe,mwr,gwr,BU,hwr,pwr,uwr,r5,KTe,_wr,bwr,PU,vwr,Fwr,Twr,t5,ZTe,Mwr,Ewr,IU,Cwr,wwr,Awr,a5,e7e,ywr,Lwr,qU,xwr,$wr,kwr,n5,o7e,Swr,Rwr,NU,Bwr,Pwr,Iwr,s5,r7e,qwr,Nwr,jU,jwr,Dwr,Gwr,l5,t7e,Owr,Vwr,DU,Xwr,zwr,Qwr,i5,a7e,Wwr,Hwr,GU,Uwr,Jwr,Ywr,d5,n7e,Kwr,Zwr,OU,eAr,oAr,rAr,c5,s7e,tAr,aAr,VU,nAr,sAr,lAr,f5,l7e,iAr,dAr,XU,cAr,fAr,mAr,m5,i7e,gAr,hAr,zU,pAr,uAr,_Ar,g5,d7e,bAr,vAr,QU,FAr,TAr,MAr,h5,c7e,EAr,CAr,WU,wAr,AAr,yAr,p5,f7e,LAr,xAr,HU,$Ar,kAr,SAr,u5,m7e,RAr,BAr,UU,PAr,IAr,qAr,_5,g7e,NAr,jAr,JU,DAr,GAr,OAr,b5,h7e,VAr,XAr,YU,zAr,QAr,WAr,v5,p7e,HAr,UAr,KU,JAr,YAr,KAr,F5,u7e,ZAr,e6r,ZU,o6r,r6r,t6r,T5,_7e,a6r,n6r,eJ,s6r,l6r,i6r,M5,Fqe,xc,E5,b7e,e8,d6r,v7e,c6r,Tqe,mr,o8,f6r,$c,m6r,oJ,g6r,h6r,rJ,p6r,u6r,_6r,r8,b6r,F7e,v6r,F6r,T6r,Dt,t8,M6r,T7e,E6r,C6r,kc,w6r,M7e,A6r,y6r,tJ,L6r,x6r,$6r,C5,k6r,Dr,a8,S6r,E7e,R6r,B6r,pn,P6r,C7e,I6r,q6r,w7e,N6r,j6r,A7e,D6r,G6r,O6r,ke,w5,y7e,V6r,X6r,aJ,z6r,Q6r,W6r,A5,L7e,H6r,U6r,nJ,J6r,Y6r,K6r,y5,x7e,Z6r,e0r,sJ,o0r,r0r,t0r,L5,$7e,a0r,n0r,lJ,s0r,l0r,i0r,x5,k7e,d0r,c0r,iJ,f0r,m0r,g0r,$5,S7e,h0r,p0r,dJ,u0r,_0r,b0r,k5,R7e,v0r,F0r,cJ,T0r,M0r,E0r,S5,B7e,C0r,w0r,fJ,A0r,y0r,L0r,R5,P7e,x0r,$0r,mJ,k0r,S0r,R0r,B5,Mqe,Sc,P5,I7e,n8,B0r,q7e,P0r,Eqe,gr,s8,I0r,Rc,q0r,gJ,N0r,j0r,hJ,D0r,G0r,O0r,l8,V0r,N7e,X0r,z0r,Q0r,Gt,i8,W0r,j7e,H0r,U0r,Bc,J0r,D7e,Y0r,K0r,pJ,Z0r,eyr,oyr,I5,ryr,Gr,d8,tyr,G7e,ayr,nyr,un,syr,O7e,lyr,iyr,V7e,dyr,cyr,X7e,fyr,myr,gyr,Me,q5,z7e,hyr,pyr,uJ,uyr,_yr,byr,N5,Q7e,vyr,Fyr,_J,Tyr,Myr,Eyr,j5,W7e,Cyr,wyr,bJ,Ayr,yyr,Lyr,D5,H7e,xyr,$yr,vJ,kyr,Syr,Ryr,G5,U7e,Byr,Pyr,FJ,Iyr,qyr,Nyr,O5,J7e,jyr,Dyr,TJ,Gyr,Oyr,Vyr,V5,Y7e,Xyr,zyr,MJ,Qyr,Wyr,Hyr,X5,K7e,Uyr,Jyr,EJ,Yyr,Kyr,Zyr,z5,Z7e,eLr,oLr,CJ,rLr,tLr,aLr,Q5,e9e,nLr,sLr,wJ,lLr,iLr,dLr,W5,o9e,cLr,fLr,AJ,mLr,gLr,hLr,H5,r9e,pLr,uLr,yJ,_Lr,bLr,vLr,U5,Cqe,Pc,J5,t9e,c8,FLr,a9e,TLr,wqe,hr,f8,MLr,Ic,ELr,LJ,CLr,wLr,xJ,ALr,yLr,LLr,m8,xLr,n9e,$Lr,kLr,SLr,Ot,g8,RLr,s9e,BLr,PLr,qc,ILr,l9e,qLr,NLr,$J,jLr,DLr,GLr,Y5,OLr,Or,h8,VLr,i9e,XLr,zLr,_n,QLr,d9e,WLr,HLr,c9e,ULr,JLr,f9e,YLr,KLr,ZLr,Le,K5,m9e,e8r,o8r,kJ,r8r,t8r,a8r,Z5,g9e,n8r,s8r,SJ,l8r,i8r,d8r,eC,h9e,c8r,f8r,RJ,m8r,g8r,h8r,oC,p9e,p8r,u8r,BJ,_8r,b8r,v8r,rC,u9e,F8r,T8r,PJ,M8r,E8r,C8r,tC,_9e,w8r,A8r,IJ,y8r,L8r,x8r,aC,b9e,$8r,k8r,qJ,S8r,R8r,B8r,nC,v9e,P8r,I8r,NJ,q8r,N8r,j8r,sC,F9e,D8r,G8r,jJ,O8r,V8r,X8r,lC,T9e,z8r,Q8r,DJ,W8r,H8r,U8r,iC,Aqe,Nc,dC,M9e,p8,J8r,E9e,Y8r,yqe,pr,u8,K8r,jc,Z8r,GJ,exr,oxr,OJ,rxr,txr,axr,_8,nxr,C9e,sxr,lxr,ixr,Vt,b8,dxr,w9e,cxr,fxr,Dc,mxr,A9e,gxr,hxr,VJ,pxr,uxr,_xr,cC,bxr,Vr,v8,vxr,y9e,Fxr,Txr,bn,Mxr,L9e,Exr,Cxr,x9e,wxr,Axr,$9e,yxr,Lxr,xxr,Se,fC,k9e,$xr,kxr,XJ,Sxr,Rxr,Bxr,mC,S9e,Pxr,Ixr,zJ,qxr,Nxr,jxr,gC,R9e,Dxr,Gxr,QJ,Oxr,Vxr,Xxr,hC,B9e,zxr,Qxr,WJ,Wxr,Hxr,Uxr,pC,P9e,Jxr,Yxr,HJ,Kxr,Zxr,e$r,uC,I9e,o$r,r$r,UJ,t$r,a$r,n$r,_C,q9e,s$r,l$r,JJ,i$r,d$r,c$r,bC,N9e,f$r,m$r,YJ,g$r,h$r,p$r,vC,j9e,u$r,_$r,KJ,b$r,v$r,F$r,FC,Lqe,Gc,TC,D9e,F8,T$r,G9e,M$r,xqe,ur,T8,E$r,Oc,C$r,ZJ,w$r,A$r,eY,y$r,L$r,x$r,M8,$$r,O9e,k$r,S$r,R$r,Xt,E8,B$r,V9e,P$r,I$r,Vc,q$r,X9e,N$r,j$r,oY,D$r,G$r,O$r,MC,V$r,Xr,C8,X$r,z9e,z$r,Q$r,vn,W$r,Q9e,H$r,U$r,W9e,J$r,Y$r,H9e,K$r,Z$r,ekr,xe,EC,U9e,okr,rkr,rY,tkr,akr,nkr,CC,J9e,skr,lkr,tY,ikr,dkr,ckr,wC,Y9e,fkr,mkr,aY,gkr,hkr,pkr,AC,K9e,ukr,_kr,nY,bkr,vkr,Fkr,yC,Z9e,Tkr,Mkr,sY,Ekr,Ckr,wkr,LC,eMe,Akr,ykr,lY,Lkr,xkr,$kr,xC,oMe,kkr,Skr,iY,Rkr,Bkr,Pkr,$C,rMe,Ikr,qkr,dY,Nkr,jkr,Dkr,kC,tMe,Gkr,Okr,cY,Vkr,Xkr,zkr,SC,aMe,Qkr,Wkr,fY,Hkr,Ukr,Jkr,RC,$qe,Xc,BC,nMe,w8,Ykr,sMe,Kkr,kqe,_r,A8,Zkr,zc,eSr,mY,oSr,rSr,gY,tSr,aSr,nSr,y8,sSr,lMe,lSr,iSr,dSr,zt,L8,cSr,iMe,fSr,mSr,Qc,gSr,dMe,hSr,pSr,hY,uSr,_Sr,bSr,PC,vSr,zr,x8,FSr,cMe,TSr,MSr,Fn,ESr,fMe,CSr,wSr,mMe,ASr,ySr,gMe,LSr,xSr,$Sr,$e,IC,hMe,kSr,SSr,pY,RSr,BSr,PSr,qC,pMe,ISr,qSr,uY,NSr,jSr,DSr,NC,uMe,GSr,OSr,_Y,VSr,XSr,zSr,jC,_Me,QSr,WSr,bY,HSr,USr,JSr,DC,bMe,YSr,KSr,vY,ZSr,eRr,oRr,GC,vMe,rRr,tRr,FY,aRr,nRr,sRr,OC,FMe,lRr,iRr,TY,dRr,cRr,fRr,VC,TMe,mRr,gRr,MY,hRr,pRr,uRr,XC,MMe,_Rr,bRr,EY,vRr,FRr,TRr,zC,EMe,MRr,ERr,CY,CRr,wRr,ARr,QC,Sqe,Wc,WC,CMe,$8,yRr,wMe,LRr,Rqe,br,k8,xRr,Hc,$Rr,wY,kRr,SRr,AY,RRr,BRr,PRr,S8,IRr,AMe,qRr,NRr,jRr,Qt,R8,DRr,yMe,GRr,ORr,Uc,VRr,LMe,XRr,zRr,yY,QRr,WRr,HRr,HC,URr,Qr,B8,JRr,xMe,YRr,KRr,Tn,ZRr,$Me,eBr,oBr,kMe,rBr,tBr,SMe,aBr,nBr,sBr,De,UC,RMe,lBr,iBr,LY,dBr,cBr,fBr,JC,BMe,mBr,gBr,xY,hBr,pBr,uBr,YC,PMe,_Br,bBr,$Y,vBr,FBr,TBr,KC,IMe,MBr,EBr,kY,CBr,wBr,ABr,ZC,qMe,yBr,LBr,SY,xBr,$Br,kBr,e3,NMe,SBr,RBr,RY,BBr,PBr,IBr,o3,jMe,qBr,NBr,BY,jBr,DBr,GBr,r3,DMe,OBr,VBr,PY,XBr,zBr,QBr,t3,Bqe,Jc,a3,GMe,P8,WBr,OMe,HBr,Pqe,vr,I8,UBr,Yc,JBr,IY,YBr,KBr,qY,ZBr,ePr,oPr,q8,rPr,VMe,tPr,aPr,nPr,Wt,N8,sPr,XMe,lPr,iPr,Kc,dPr,zMe,cPr,fPr,NY,mPr,gPr,hPr,n3,pPr,Wr,j8,uPr,QMe,_Pr,bPr,Mn,vPr,WMe,FPr,TPr,HMe,MPr,EPr,UMe,CPr,wPr,APr,Ge,s3,JMe,yPr,LPr,jY,xPr,$Pr,kPr,l3,YMe,SPr,RPr,DY,BPr,PPr,IPr,i3,KMe,qPr,NPr,GY,jPr,DPr,GPr,d3,ZMe,OPr,VPr,OY,XPr,zPr,QPr,c3,e4e,WPr,HPr,VY,UPr,JPr,YPr,f3,o4e,KPr,ZPr,XY,eIr,oIr,rIr,m3,r4e,tIr,aIr,zY,nIr,sIr,lIr,g3,t4e,iIr,dIr,QY,cIr,fIr,mIr,h3,Iqe,Zc,p3,a4e,D8,gIr,n4e,hIr,qqe,Fr,G8,pIr,ef,uIr,WY,_Ir,bIr,HY,vIr,FIr,TIr,O8,MIr,s4e,EIr,CIr,wIr,Ht,V8,AIr,l4e,yIr,LIr,of,xIr,i4e,$Ir,kIr,UY,SIr,RIr,BIr,u3,PIr,Hr,X8,IIr,d4e,qIr,NIr,En,jIr,c4e,DIr,GIr,f4e,OIr,VIr,m4e,XIr,zIr,QIr,g4e,_3,h4e,WIr,HIr,JY,UIr,JIr,YIr,b3,Nqe,rf,v3,p4e,z8,KIr,u4e,ZIr,jqe,Tr,Q8,eqr,tf,oqr,YY,rqr,tqr,KY,aqr,nqr,sqr,W8,lqr,_4e,iqr,dqr,cqr,Ut,H8,fqr,b4e,mqr,gqr,af,hqr,v4e,pqr,uqr,ZY,_qr,bqr,vqr,F3,Fqr,Ur,U8,Tqr,F4e,Mqr,Eqr,Cn,Cqr,T4e,wqr,Aqr,M4e,yqr,Lqr,E4e,xqr,$qr,kqr,J8,T3,C4e,Sqr,Rqr,eK,Bqr,Pqr,Iqr,M3,w4e,qqr,Nqr,oK,jqr,Dqr,Gqr,E3,Dqe,nf,C3,A4e,Y8,Oqr,y4e,Vqr,Gqe,Mr,K8,Xqr,sf,zqr,rK,Qqr,Wqr,tK,Hqr,Uqr,Jqr,Z8,Yqr,L4e,Kqr,Zqr,eNr,Jt,ex,oNr,x4e,rNr,tNr,lf,aNr,$4e,nNr,sNr,aK,lNr,iNr,dNr,w3,cNr,Jr,ox,fNr,k4e,mNr,gNr,wn,hNr,S4e,pNr,uNr,R4e,_Nr,bNr,B4e,vNr,FNr,TNr,P4e,A3,I4e,MNr,ENr,nK,CNr,wNr,ANr,y3,Oqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),YA=new ee({}),KA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new yNr({props:{warning:!0,$$slots:{default:[o6t]},$$scope:{ctx:A}}}),ZA=new ee({}),e6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/configuration_auto.py#L570"}}),t6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/configuration_auto.py#L593"}}),pg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),a6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/configuration_auto.py#L716"}}),n6=new ee({}),s6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/tokenization_auto.py#L387"}}),d6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17291/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/tokenization_auto.py#L401"}}),Hg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),c6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/tokenization_auto.py#L597"}}),f6=new ee({}),m6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),p6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17291/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/feature_extraction_auto.py#L200"}}),Mh=new yNr({props:{$$slots:{default:[a6t]},$$scope:{ctx:A}}}),Eh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),u6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/feature_extraction_auto.py#L327"}}),_6=new ee({}),b6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/processing_auto.py#L86"}}),T6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/processing_auto.py#L100"}}),Gh=new yNr({props:{$$slots:{default:[s6t]},$$scope:{ctx:A}}}),Oh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),M6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/processing_auto.py#L253"}}),E6=new ee({}),C6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L719"}}),A6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),zh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[i6t]},$$scope:{ctx:A}}}),y6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),Pu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[d6t]},$$scope:{ctx:A}}}),L6=new ee({}),x6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L726"}}),k6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),qu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[c6t]},$$scope:{ctx:A}}}),S6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),w_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[f6t]},$$scope:{ctx:A}}}),R6=new ee({}),B6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L741"}}),I6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[m6t]},$$scope:{ctx:A}}}),q6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),f1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[g6t]},$$scope:{ctx:A}}}),N6=new ee({}),j6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L748"}}),G6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),g1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[h6t]},$$scope:{ctx:A}}}),O6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[p6t]},$$scope:{ctx:A}}}),V6=new ee({}),X6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L755"}}),Q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[u6t]},$$scope:{ctx:A}}}),W6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),u2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[_6t]},$$scope:{ctx:A}}}),H6=new ee({}),U6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L764"}}),Y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),b2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[b6t]},$$scope:{ctx:A}}}),K6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[v6t]},$$scope:{ctx:A}}}),Z6=new ee({}),e0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L798"}}),r0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),hb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[F6t]},$$scope:{ctx:A}}}),t0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[T6t]},$$scope:{ctx:A}}}),a0=new ee({}),n0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L805"}}),l0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),Wb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[M6t]},$$scope:{ctx:A}}}),i0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[E6t]},$$scope:{ctx:A}}}),d0=new ee({}),c0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L791"}}),m0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[C6t]},$$scope:{ctx:A}}}),g0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[w6t]},$$scope:{ctx:A}}}),h0=new ee({}),p0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L773"}}),_0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[A6t]},$$scope:{ctx:A}}}),b0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[y6t]},$$scope:{ctx:A}}}),v0=new ee({}),F0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L780"}}),M0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[L6t]},$$scope:{ctx:A}}}),E0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[x6t]},$$scope:{ctx:A}}}),C0=new ee({}),w0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L814"}}),y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[$6t]},$$scope:{ctx:A}}}),L0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[k6t]},$$scope:{ctx:A}}}),x0=new ee({}),$0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L853"}}),S0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[S6t]},$$scope:{ctx:A}}}),R0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[R6t]},$$scope:{ctx:A}}}),B0=new ee({}),P0=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L860"}}),q0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[B6t]},$$scope:{ctx:A}}}),N0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[P6t]},$$scope:{ctx:A}}}),j0=new ee({}),D0=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L883"}}),O0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[I6t]},$$scope:{ctx:A}}}),V0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[q6t]},$$scope:{ctx:A}}}),X0=new ee({}),z0=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L867"}}),W0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[N6t]},$$scope:{ctx:A}}}),H0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[j6t]},$$scope:{ctx:A}}}),U0=new ee({}),J0=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L874"}}),K0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[D6t]},$$scope:{ctx:A}}}),Z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),PT=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[G6t]},$$scope:{ctx:A}}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L892"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),qT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[O6t]},$$scope:{ctx:A}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[V6t]},$$scope:{ctx:A}}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L899"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[X6t]},$$scope:{ctx:A}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),JT=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[z6t]},$$scope:{ctx:A}}}),fy=new ee({}),my=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L846"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),KT=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Q6t]},$$scope:{ctx:A}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[W6t]},$$scope:{ctx:A}}}),_y=new ee({}),by=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L821"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[H6t]},$$scope:{ctx:A}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[U6t]},$$scope:{ctx:A}}}),My=new ee({}),Ey=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L828"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[J6t]},$$scope:{ctx:A}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Y6t]},$$scope:{ctx:A}}}),yy=new ee({}),Ly=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_auto.py#L837"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),_7=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[K6t]},$$scope:{ctx:A}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Z6t]},$$scope:{ctx:A}}}),Sy=new ee({}),Ry=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Py=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[e0t]},$$scope:{ctx:A}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),h9=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[o0t]},$$scope:{ctx:A}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),u9=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[r0t]},$$scope:{ctx:A}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),D9=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[t0t]},$$scope:{ctx:A}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),O9=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[a0t]},$$scope:{ctx:A}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),oM=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[n0t]},$$scope:{ctx:A}}}),Wy=new ee({}),Hy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),tM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[s0t]},$$scope:{ctx:A}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),iM=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[l0t]},$$scope:{ctx:A}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),oL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),cM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[i0t]},$$scope:{ctx:A}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),kM=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[d0t]},$$scope:{ctx:A}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),sL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),RM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[c0t]},$$scope:{ctx:A}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[f0t]},$$scope:{ctx:A}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),fL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[m0t]},$$scope:{ctx:A}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[g0t]},$$scope:{ctx:A}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),uL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[h0t]},$$scope:{ctx:A}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[p0t]},$$scope:{ctx:A}}}),bL=new ee({}),vL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),TL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[u0t]},$$scope:{ctx:A}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),X4=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_0t]},$$scope:{ctx:A}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),Q4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[b0t]},$$scope:{ctx:A}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[v0t]},$$scope:{ctx:A}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[F0t]},$$scope:{ctx:A}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[T0t]},$$scope:{ctx:A}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[M0t]},$$scope:{ctx:A}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[E0t]},$$scope:{ctx:A}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[C0t]},$$scope:{ctx:A}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[w0t]},$$scope:{ctx:A}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),WL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[A0t]},$$scope:{ctx:A}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[y0t]},$$scope:{ctx:A}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),KL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[L0t]},$$scope:{ctx:A}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[x0t]},$$scope:{ctx:A}}}),e8=new ee({}),o8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),t8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[$0t]},$$scope:{ctx:A}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[k0t]},$$scope:{ctx:A}}}),n8=new ee({}),s8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),i8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[S0t]},$$scope:{ctx:A}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[R0t]},$$scope:{ctx:A}}}),c8=new ee({}),f8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),g8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[B0t]},$$scope:{ctx:A}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[P0t]},$$scope:{ctx:A}}}),p8=new ee({}),u8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),b8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[I0t]},$$scope:{ctx:A}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[q0t]},$$scope:{ctx:A}}}),F8=new ee({}),T8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),E8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[N0t]},$$scope:{ctx:A}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),RC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[j0t]},$$scope:{ctx:A}}}),w8=new ee({}),A8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),L8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[D0t]},$$scope:{ctx:A}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[G0t]},$$scope:{ctx:A}}}),$8=new ee({}),k8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),R8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[O0t]},$$scope:{ctx:A}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[V0t]},$$scope:{ctx:A}}}),P8=new ee({}),I8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),N8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[X0t]},$$scope:{ctx:A}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[z0t]},$$scope:{ctx:A}}}),D8=new ee({}),G8=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),V8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Q0t]},$$scope:{ctx:A}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[W0t]},$$scope:{ctx:A}}}),z8=new ee({}),Q8=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),H8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[H0t]},$$scope:{ctx:A}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),E3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[U0t]},$$scope:{ctx:A}}}),Y8=new ee({}),K8=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L389"}}),w3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[J0t]},$$scope:{ctx:A}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17291/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17291/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17291/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Y0t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),mf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),WA=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),yn=a("a"),HA=o("AutoConfig"),Ln=o(", "),xn=a("a"),UA=o("AutoModel"),mi=o(`, and
`),$n=a("a"),JA=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),h$=o("will create a model that is an instance of "),hi=a("a"),p$=o("BertModel"),u$=o("."),Eo=l(),Ea=a("p"),_$=o("There is one class of "),pf=a("code"),b$=o("AutoModel"),Jje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jPe=l(),pi=a("h2"),uf=a("a"),KZ=a("span"),F(YA.$$.fragment),Yje=l(),ZZ=a("span"),Kje=o("Extending the Auto Classes"),DPe=l(),kn=a("p"),Zje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eee=a("code"),eDe=o("NewModel"),oDe=o(", make sure you have a "),oee=a("code"),rDe=o("NewModelConfig"),tDe=o(` then you can add those to the auto
classes like this:`),GPe=l(),F(KA.$$.fragment),OPe=l(),v$=a("p"),aDe=o("You will then be able to use the auto classes like you would usually do!"),VPe=l(),F(_f.$$.fragment),XPe=l(),ui=a("h2"),bf=a("a"),ree=a("span"),F(ZA.$$.fragment),nDe=l(),tee=a("span"),sDe=o("AutoConfig"),zPe=l(),Co=a("div"),F(e6.$$.fragment),lDe=l(),o6=a("p"),iDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),F$=a("a"),dDe=o("from_pretrained()"),cDe=o(" class method."),fDe=l(),r6=a("p"),mDe=o("This class cannot be instantiated directly using "),aee=a("code"),gDe=o("__init__()"),hDe=o(" (throws an error)."),pDe=l(),Er=a("div"),F(t6.$$.fragment),uDe=l(),nee=a("p"),_De=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bDe=l(),_i=a("p"),vDe=o("The configuration class to instantiate is selected based on the "),see=a("code"),FDe=o("model_type"),TDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lee=a("code"),MDe=o("pretrained_model_name_or_path"),EDe=o(":"),CDe=l(),y=a("ul"),vf=a("li"),iee=a("strong"),wDe=o("albert"),ADe=o(" \u2014 "),T$=a("a"),yDe=o("AlbertConfig"),LDe=o(" (ALBERT model)"),xDe=l(),Ff=a("li"),dee=a("strong"),$De=o("bart"),kDe=o(" \u2014 "),M$=a("a"),SDe=o("BartConfig"),RDe=o(" (BART model)"),BDe=l(),Tf=a("li"),cee=a("strong"),PDe=o("beit"),IDe=o(" \u2014 "),E$=a("a"),qDe=o("BeitConfig"),NDe=o(" (BEiT model)"),jDe=l(),Mf=a("li"),fee=a("strong"),DDe=o("bert"),GDe=o(" \u2014 "),C$=a("a"),ODe=o("BertConfig"),VDe=o(" (BERT model)"),XDe=l(),Ef=a("li"),mee=a("strong"),zDe=o("bert-generation"),QDe=o(" \u2014 "),w$=a("a"),WDe=o("BertGenerationConfig"),HDe=o(" (Bert Generation model)"),UDe=l(),Cf=a("li"),gee=a("strong"),JDe=o("big_bird"),YDe=o(" \u2014 "),A$=a("a"),KDe=o("BigBirdConfig"),ZDe=o(" (BigBird model)"),eGe=l(),wf=a("li"),hee=a("strong"),oGe=o("bigbird_pegasus"),rGe=o(" \u2014 "),y$=a("a"),tGe=o("BigBirdPegasusConfig"),aGe=o(" (BigBirdPegasus model)"),nGe=l(),Af=a("li"),pee=a("strong"),sGe=o("blenderbot"),lGe=o(" \u2014 "),L$=a("a"),iGe=o("BlenderbotConfig"),dGe=o(" (Blenderbot model)"),cGe=l(),yf=a("li"),uee=a("strong"),fGe=o("blenderbot-small"),mGe=o(" \u2014 "),x$=a("a"),gGe=o("BlenderbotSmallConfig"),hGe=o(" (BlenderbotSmall model)"),pGe=l(),Lf=a("li"),_ee=a("strong"),uGe=o("camembert"),_Ge=o(" \u2014 "),$$=a("a"),bGe=o("CamembertConfig"),vGe=o(" (CamemBERT model)"),FGe=l(),xf=a("li"),bee=a("strong"),TGe=o("canine"),MGe=o(" \u2014 "),k$=a("a"),EGe=o("CanineConfig"),CGe=o(" (Canine model)"),wGe=l(),$f=a("li"),vee=a("strong"),AGe=o("clip"),yGe=o(" \u2014 "),S$=a("a"),LGe=o("CLIPConfig"),xGe=o(" (CLIP model)"),$Ge=l(),kf=a("li"),Fee=a("strong"),kGe=o("convbert"),SGe=o(" \u2014 "),R$=a("a"),RGe=o("ConvBertConfig"),BGe=o(" (ConvBERT model)"),PGe=l(),Sf=a("li"),Tee=a("strong"),IGe=o("convnext"),qGe=o(" \u2014 "),B$=a("a"),NGe=o("ConvNextConfig"),jGe=o(" (ConvNext model)"),DGe=l(),Rf=a("li"),Mee=a("strong"),GGe=o("ctrl"),OGe=o(" \u2014 "),P$=a("a"),VGe=o("CTRLConfig"),XGe=o(" (CTRL model)"),zGe=l(),Bf=a("li"),Eee=a("strong"),QGe=o("data2vec-audio"),WGe=o(" \u2014 "),I$=a("a"),HGe=o("Data2VecAudioConfig"),UGe=o(" (Data2VecAudio model)"),JGe=l(),Pf=a("li"),Cee=a("strong"),YGe=o("data2vec-text"),KGe=o(" \u2014 "),q$=a("a"),ZGe=o("Data2VecTextConfig"),eOe=o(" (Data2VecText model)"),oOe=l(),If=a("li"),wee=a("strong"),rOe=o("data2vec-vision"),tOe=o(" \u2014 "),N$=a("a"),aOe=o("Data2VecVisionConfig"),nOe=o(" (Data2VecVision model)"),sOe=l(),qf=a("li"),Aee=a("strong"),lOe=o("deberta"),iOe=o(" \u2014 "),j$=a("a"),dOe=o("DebertaConfig"),cOe=o(" (DeBERTa model)"),fOe=l(),Nf=a("li"),yee=a("strong"),mOe=o("deberta-v2"),gOe=o(" \u2014 "),D$=a("a"),hOe=o("DebertaV2Config"),pOe=o(" (DeBERTa-v2 model)"),uOe=l(),jf=a("li"),Lee=a("strong"),_Oe=o("decision_transformer"),bOe=o(" \u2014 "),G$=a("a"),vOe=o("DecisionTransformerConfig"),FOe=o(" (Decision Transformer model)"),TOe=l(),Df=a("li"),xee=a("strong"),MOe=o("deit"),EOe=o(" \u2014 "),O$=a("a"),COe=o("DeiTConfig"),wOe=o(" (DeiT model)"),AOe=l(),Gf=a("li"),$ee=a("strong"),yOe=o("detr"),LOe=o(" \u2014 "),V$=a("a"),xOe=o("DetrConfig"),$Oe=o(" (DETR model)"),kOe=l(),Of=a("li"),kee=a("strong"),SOe=o("distilbert"),ROe=o(" \u2014 "),X$=a("a"),BOe=o("DistilBertConfig"),POe=o(" (DistilBERT model)"),IOe=l(),Vf=a("li"),See=a("strong"),qOe=o("dpr"),NOe=o(" \u2014 "),z$=a("a"),jOe=o("DPRConfig"),DOe=o(" (DPR model)"),GOe=l(),Xf=a("li"),Ree=a("strong"),OOe=o("dpt"),VOe=o(" \u2014 "),Q$=a("a"),XOe=o("DPTConfig"),zOe=o(" (DPT model)"),QOe=l(),zf=a("li"),Bee=a("strong"),WOe=o("electra"),HOe=o(" \u2014 "),W$=a("a"),UOe=o("ElectraConfig"),JOe=o(" (ELECTRA model)"),YOe=l(),Qf=a("li"),Pee=a("strong"),KOe=o("encoder-decoder"),ZOe=o(" \u2014 "),H$=a("a"),eVe=o("EncoderDecoderConfig"),oVe=o(" (Encoder decoder model)"),rVe=l(),Wf=a("li"),Iee=a("strong"),tVe=o("flaubert"),aVe=o(" \u2014 "),U$=a("a"),nVe=o("FlaubertConfig"),sVe=o(" (FlauBERT model)"),lVe=l(),Hf=a("li"),qee=a("strong"),iVe=o("flava"),dVe=o(" \u2014 "),J$=a("a"),cVe=o("FlavaConfig"),fVe=o(" (Flava model)"),mVe=l(),Uf=a("li"),Nee=a("strong"),gVe=o("fnet"),hVe=o(" \u2014 "),Y$=a("a"),pVe=o("FNetConfig"),uVe=o(" (FNet model)"),_Ve=l(),Jf=a("li"),jee=a("strong"),bVe=o("fsmt"),vVe=o(" \u2014 "),K$=a("a"),FVe=o("FSMTConfig"),TVe=o(" (FairSeq Machine-Translation model)"),MVe=l(),Yf=a("li"),Dee=a("strong"),EVe=o("funnel"),CVe=o(" \u2014 "),Z$=a("a"),wVe=o("FunnelConfig"),AVe=o(" (Funnel Transformer model)"),yVe=l(),Kf=a("li"),Gee=a("strong"),LVe=o("glpn"),xVe=o(" \u2014 "),ek=a("a"),$Ve=o("GLPNConfig"),kVe=o(" (GLPN model)"),SVe=l(),Zf=a("li"),Oee=a("strong"),RVe=o("gpt2"),BVe=o(" \u2014 "),ok=a("a"),PVe=o("GPT2Config"),IVe=o(" (OpenAI GPT-2 model)"),qVe=l(),em=a("li"),Vee=a("strong"),NVe=o("gpt_neo"),jVe=o(" \u2014 "),rk=a("a"),DVe=o("GPTNeoConfig"),GVe=o(" (GPT Neo model)"),OVe=l(),om=a("li"),Xee=a("strong"),VVe=o("gptj"),XVe=o(" \u2014 "),tk=a("a"),zVe=o("GPTJConfig"),QVe=o(" (GPT-J model)"),WVe=l(),rm=a("li"),zee=a("strong"),HVe=o("hubert"),UVe=o(" \u2014 "),ak=a("a"),JVe=o("HubertConfig"),YVe=o(" (Hubert model)"),KVe=l(),tm=a("li"),Qee=a("strong"),ZVe=o("ibert"),eXe=o(" \u2014 "),nk=a("a"),oXe=o("IBertConfig"),rXe=o(" (I-BERT model)"),tXe=l(),am=a("li"),Wee=a("strong"),aXe=o("imagegpt"),nXe=o(" \u2014 "),sk=a("a"),sXe=o("ImageGPTConfig"),lXe=o(" (ImageGPT model)"),iXe=l(),nm=a("li"),Hee=a("strong"),dXe=o("layoutlm"),cXe=o(" \u2014 "),lk=a("a"),fXe=o("LayoutLMConfig"),mXe=o(" (LayoutLM model)"),gXe=l(),sm=a("li"),Uee=a("strong"),hXe=o("layoutlmv2"),pXe=o(" \u2014 "),ik=a("a"),uXe=o("LayoutLMv2Config"),_Xe=o(" (LayoutLMv2 model)"),bXe=l(),lm=a("li"),Jee=a("strong"),vXe=o("led"),FXe=o(" \u2014 "),dk=a("a"),TXe=o("LEDConfig"),MXe=o(" (LED model)"),EXe=l(),im=a("li"),Yee=a("strong"),CXe=o("longformer"),wXe=o(" \u2014 "),ck=a("a"),AXe=o("LongformerConfig"),yXe=o(" (Longformer model)"),LXe=l(),dm=a("li"),Kee=a("strong"),xXe=o("luke"),$Xe=o(" \u2014 "),fk=a("a"),kXe=o("LukeConfig"),SXe=o(" (LUKE model)"),RXe=l(),cm=a("li"),Zee=a("strong"),BXe=o("lxmert"),PXe=o(" \u2014 "),mk=a("a"),IXe=o("LxmertConfig"),qXe=o(" (LXMERT model)"),NXe=l(),fm=a("li"),eoe=a("strong"),jXe=o("m2m_100"),DXe=o(" \u2014 "),gk=a("a"),GXe=o("M2M100Config"),OXe=o(" (M2M100 model)"),VXe=l(),mm=a("li"),ooe=a("strong"),XXe=o("marian"),zXe=o(" \u2014 "),hk=a("a"),QXe=o("MarianConfig"),WXe=o(" (Marian model)"),HXe=l(),gm=a("li"),roe=a("strong"),UXe=o("maskformer"),JXe=o(" \u2014 "),pk=a("a"),YXe=o("MaskFormerConfig"),KXe=o(" (MaskFormer model)"),ZXe=l(),hm=a("li"),toe=a("strong"),eze=o("mbart"),oze=o(" \u2014 "),uk=a("a"),rze=o("MBartConfig"),tze=o(" (mBART model)"),aze=l(),pm=a("li"),aoe=a("strong"),nze=o("megatron-bert"),sze=o(" \u2014 "),_k=a("a"),lze=o("MegatronBertConfig"),ize=o(" (MegatronBert model)"),dze=l(),um=a("li"),noe=a("strong"),cze=o("mobilebert"),fze=o(" \u2014 "),bk=a("a"),mze=o("MobileBertConfig"),gze=o(" (MobileBERT model)"),hze=l(),_m=a("li"),soe=a("strong"),pze=o("mpnet"),uze=o(" \u2014 "),vk=a("a"),_ze=o("MPNetConfig"),bze=o(" (MPNet model)"),vze=l(),bm=a("li"),loe=a("strong"),Fze=o("mt5"),Tze=o(" \u2014 "),Fk=a("a"),Mze=o("MT5Config"),Eze=o(" (mT5 model)"),Cze=l(),vm=a("li"),ioe=a("strong"),wze=o("nystromformer"),Aze=o(" \u2014 "),Tk=a("a"),yze=o("NystromformerConfig"),Lze=o(" (Nystromformer model)"),xze=l(),Fm=a("li"),doe=a("strong"),$ze=o("openai-gpt"),kze=o(" \u2014 "),Mk=a("a"),Sze=o("OpenAIGPTConfig"),Rze=o(" (OpenAI GPT model)"),Bze=l(),Tm=a("li"),coe=a("strong"),Pze=o("opt"),Ize=o(" \u2014 "),Ek=a("a"),qze=o("OPTConfig"),Nze=o(" (OPT model)"),jze=l(),Mm=a("li"),foe=a("strong"),Dze=o("pegasus"),Gze=o(" \u2014 "),Ck=a("a"),Oze=o("PegasusConfig"),Vze=o(" (Pegasus model)"),Xze=l(),Em=a("li"),moe=a("strong"),zze=o("perceiver"),Qze=o(" \u2014 "),wk=a("a"),Wze=o("PerceiverConfig"),Hze=o(" (Perceiver model)"),Uze=l(),Cm=a("li"),goe=a("strong"),Jze=o("plbart"),Yze=o(" \u2014 "),Ak=a("a"),Kze=o("PLBartConfig"),Zze=o(" (PLBart model)"),eQe=l(),wm=a("li"),hoe=a("strong"),oQe=o("poolformer"),rQe=o(" \u2014 "),yk=a("a"),tQe=o("PoolFormerConfig"),aQe=o(" (PoolFormer model)"),nQe=l(),Am=a("li"),poe=a("strong"),sQe=o("prophetnet"),lQe=o(" \u2014 "),Lk=a("a"),iQe=o("ProphetNetConfig"),dQe=o(" (ProphetNet model)"),cQe=l(),ym=a("li"),uoe=a("strong"),fQe=o("qdqbert"),mQe=o(" \u2014 "),xk=a("a"),gQe=o("QDQBertConfig"),hQe=o(" (QDQBert model)"),pQe=l(),Lm=a("li"),_oe=a("strong"),uQe=o("rag"),_Qe=o(" \u2014 "),$k=a("a"),bQe=o("RagConfig"),vQe=o(" (RAG model)"),FQe=l(),xm=a("li"),boe=a("strong"),TQe=o("realm"),MQe=o(" \u2014 "),kk=a("a"),EQe=o("RealmConfig"),CQe=o(" (Realm model)"),wQe=l(),$m=a("li"),voe=a("strong"),AQe=o("reformer"),yQe=o(" \u2014 "),Sk=a("a"),LQe=o("ReformerConfig"),xQe=o(" (Reformer model)"),$Qe=l(),km=a("li"),Foe=a("strong"),kQe=o("regnet"),SQe=o(" \u2014 "),Rk=a("a"),RQe=o("RegNetConfig"),BQe=o(" (RegNet model)"),PQe=l(),Sm=a("li"),Toe=a("strong"),IQe=o("rembert"),qQe=o(" \u2014 "),Bk=a("a"),NQe=o("RemBertConfig"),jQe=o(" (RemBERT model)"),DQe=l(),Rm=a("li"),Moe=a("strong"),GQe=o("resnet"),OQe=o(" \u2014 "),Pk=a("a"),VQe=o("ResNetConfig"),XQe=o(" (ResNet model)"),zQe=l(),Bm=a("li"),Eoe=a("strong"),QQe=o("retribert"),WQe=o(" \u2014 "),Ik=a("a"),HQe=o("RetriBertConfig"),UQe=o(" (RetriBERT model)"),JQe=l(),Pm=a("li"),Coe=a("strong"),YQe=o("roberta"),KQe=o(" \u2014 "),qk=a("a"),ZQe=o("RobertaConfig"),eWe=o(" (RoBERTa model)"),oWe=l(),Im=a("li"),woe=a("strong"),rWe=o("roformer"),tWe=o(" \u2014 "),Nk=a("a"),aWe=o("RoFormerConfig"),nWe=o(" (RoFormer model)"),sWe=l(),qm=a("li"),Aoe=a("strong"),lWe=o("segformer"),iWe=o(" \u2014 "),jk=a("a"),dWe=o("SegformerConfig"),cWe=o(" (SegFormer model)"),fWe=l(),Nm=a("li"),yoe=a("strong"),mWe=o("sew"),gWe=o(" \u2014 "),Dk=a("a"),hWe=o("SEWConfig"),pWe=o(" (SEW model)"),uWe=l(),jm=a("li"),Loe=a("strong"),_We=o("sew-d"),bWe=o(" \u2014 "),Gk=a("a"),vWe=o("SEWDConfig"),FWe=o(" (SEW-D model)"),TWe=l(),Dm=a("li"),xoe=a("strong"),MWe=o("speech-encoder-decoder"),EWe=o(" \u2014 "),Ok=a("a"),CWe=o("SpeechEncoderDecoderConfig"),wWe=o(" (Speech Encoder decoder model)"),AWe=l(),Gm=a("li"),$oe=a("strong"),yWe=o("speech_to_text"),LWe=o(" \u2014 "),Vk=a("a"),xWe=o("Speech2TextConfig"),$We=o(" (Speech2Text model)"),kWe=l(),Om=a("li"),koe=a("strong"),SWe=o("speech_to_text_2"),RWe=o(" \u2014 "),Xk=a("a"),BWe=o("Speech2Text2Config"),PWe=o(" (Speech2Text2 model)"),IWe=l(),Vm=a("li"),Soe=a("strong"),qWe=o("splinter"),NWe=o(" \u2014 "),zk=a("a"),jWe=o("SplinterConfig"),DWe=o(" (Splinter model)"),GWe=l(),Xm=a("li"),Roe=a("strong"),OWe=o("squeezebert"),VWe=o(" \u2014 "),Qk=a("a"),XWe=o("SqueezeBertConfig"),zWe=o(" (SqueezeBERT model)"),QWe=l(),zm=a("li"),Boe=a("strong"),WWe=o("swin"),HWe=o(" \u2014 "),Wk=a("a"),UWe=o("SwinConfig"),JWe=o(" (Swin model)"),YWe=l(),Qm=a("li"),Poe=a("strong"),KWe=o("t5"),ZWe=o(" \u2014 "),Hk=a("a"),eHe=o("T5Config"),oHe=o(" (T5 model)"),rHe=l(),Wm=a("li"),Ioe=a("strong"),tHe=o("tapas"),aHe=o(" \u2014 "),Uk=a("a"),nHe=o("TapasConfig"),sHe=o(" (TAPAS model)"),lHe=l(),Hm=a("li"),qoe=a("strong"),iHe=o("transfo-xl"),dHe=o(" \u2014 "),Jk=a("a"),cHe=o("TransfoXLConfig"),fHe=o(" (Transformer-XL model)"),mHe=l(),Um=a("li"),Noe=a("strong"),gHe=o("trocr"),hHe=o(" \u2014 "),Yk=a("a"),pHe=o("TrOCRConfig"),uHe=o(" (TrOCR model)"),_He=l(),Jm=a("li"),joe=a("strong"),bHe=o("unispeech"),vHe=o(" \u2014 "),Kk=a("a"),FHe=o("UniSpeechConfig"),THe=o(" (UniSpeech model)"),MHe=l(),Ym=a("li"),Doe=a("strong"),EHe=o("unispeech-sat"),CHe=o(" \u2014 "),Zk=a("a"),wHe=o("UniSpeechSatConfig"),AHe=o(" (UniSpeechSat model)"),yHe=l(),Km=a("li"),Goe=a("strong"),LHe=o("van"),xHe=o(" \u2014 "),eS=a("a"),$He=o("VanConfig"),kHe=o(" (VAN model)"),SHe=l(),Zm=a("li"),Ooe=a("strong"),RHe=o("vilt"),BHe=o(" \u2014 "),oS=a("a"),PHe=o("ViltConfig"),IHe=o(" (ViLT model)"),qHe=l(),eg=a("li"),Voe=a("strong"),NHe=o("vision-encoder-decoder"),jHe=o(" \u2014 "),rS=a("a"),DHe=o("VisionEncoderDecoderConfig"),GHe=o(" (Vision Encoder decoder model)"),OHe=l(),og=a("li"),Xoe=a("strong"),VHe=o("vision-text-dual-encoder"),XHe=o(" \u2014 "),tS=a("a"),zHe=o("VisionTextDualEncoderConfig"),QHe=o(" (VisionTextDualEncoder model)"),WHe=l(),rg=a("li"),zoe=a("strong"),HHe=o("visual_bert"),UHe=o(" \u2014 "),aS=a("a"),JHe=o("VisualBertConfig"),YHe=o(" (VisualBert model)"),KHe=l(),tg=a("li"),Qoe=a("strong"),ZHe=o("vit"),eUe=o(" \u2014 "),nS=a("a"),oUe=o("ViTConfig"),rUe=o(" (ViT model)"),tUe=l(),ag=a("li"),Woe=a("strong"),aUe=o("vit_mae"),nUe=o(" \u2014 "),sS=a("a"),sUe=o("ViTMAEConfig"),lUe=o(" (ViTMAE model)"),iUe=l(),ng=a("li"),Hoe=a("strong"),dUe=o("wav2vec2"),cUe=o(" \u2014 "),lS=a("a"),fUe=o("Wav2Vec2Config"),mUe=o(" (Wav2Vec2 model)"),gUe=l(),sg=a("li"),Uoe=a("strong"),hUe=o("wavlm"),pUe=o(" \u2014 "),iS=a("a"),uUe=o("WavLMConfig"),_Ue=o(" (WavLM model)"),bUe=l(),lg=a("li"),Joe=a("strong"),vUe=o("xglm"),FUe=o(" \u2014 "),dS=a("a"),TUe=o("XGLMConfig"),MUe=o(" (XGLM model)"),EUe=l(),ig=a("li"),Yoe=a("strong"),CUe=o("xlm"),wUe=o(" \u2014 "),cS=a("a"),AUe=o("XLMConfig"),yUe=o(" (XLM model)"),LUe=l(),dg=a("li"),Koe=a("strong"),xUe=o("xlm-prophetnet"),$Ue=o(" \u2014 "),fS=a("a"),kUe=o("XLMProphetNetConfig"),SUe=o(" (XLMProphetNet model)"),RUe=l(),cg=a("li"),Zoe=a("strong"),BUe=o("xlm-roberta"),PUe=o(" \u2014 "),mS=a("a"),IUe=o("XLMRobertaConfig"),qUe=o(" (XLM-RoBERTa model)"),NUe=l(),fg=a("li"),ere=a("strong"),jUe=o("xlm-roberta-xl"),DUe=o(" \u2014 "),gS=a("a"),GUe=o("XLMRobertaXLConfig"),OUe=o(" (XLM-RoBERTa-XL model)"),VUe=l(),mg=a("li"),ore=a("strong"),XUe=o("xlnet"),zUe=o(" \u2014 "),hS=a("a"),QUe=o("XLNetConfig"),WUe=o(" (XLNet model)"),HUe=l(),gg=a("li"),rre=a("strong"),UUe=o("yolos"),JUe=o(" \u2014 "),pS=a("a"),YUe=o("YolosConfig"),KUe=o(" (YOLOS model)"),ZUe=l(),hg=a("li"),tre=a("strong"),eJe=o("yoso"),oJe=o(" \u2014 "),uS=a("a"),rJe=o("YosoConfig"),tJe=o(" (YOSO model)"),aJe=l(),F(pg.$$.fragment),nJe=l(),ug=a("div"),F(a6.$$.fragment),sJe=l(),are=a("p"),lJe=o("Register a new configuration for this class."),QPe=l(),bi=a("h2"),_g=a("a"),nre=a("span"),F(n6.$$.fragment),iJe=l(),sre=a("span"),dJe=o("AutoTokenizer"),WPe=l(),wo=a("div"),F(s6.$$.fragment),cJe=l(),l6=a("p"),fJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=a("a"),mJe=o("AutoTokenizer.from_pretrained()"),gJe=o(" class method."),hJe=l(),i6=a("p"),pJe=o("This class cannot be instantiated directly using "),lre=a("code"),uJe=o("__init__()"),_Je=o(" (throws an error)."),bJe=l(),Cr=a("div"),F(d6.$$.fragment),vJe=l(),ire=a("p"),FJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),TJe=l(),Ca=a("p"),MJe=o("The tokenizer class to instantiate is selected based on the "),dre=a("code"),EJe=o("model_type"),CJe=o(` property of the config object (either
passed as an argument or loaded from `),cre=a("code"),wJe=o("pretrained_model_name_or_path"),AJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fre=a("code"),yJe=o("pretrained_model_name_or_path"),LJe=o(":"),xJe=l(),k=a("ul"),Sn=a("li"),mre=a("strong"),$Je=o("albert"),kJe=o(" \u2014 "),bS=a("a"),SJe=o("AlbertTokenizer"),RJe=o(" or "),vS=a("a"),BJe=o("AlbertTokenizerFast"),PJe=o(" (ALBERT model)"),IJe=l(),Rn=a("li"),gre=a("strong"),qJe=o("bart"),NJe=o(" \u2014 "),FS=a("a"),jJe=o("BartTokenizer"),DJe=o(" or "),TS=a("a"),GJe=o("BartTokenizerFast"),OJe=o(" (BART model)"),VJe=l(),Bn=a("li"),hre=a("strong"),XJe=o("barthez"),zJe=o(" \u2014 "),MS=a("a"),QJe=o("BarthezTokenizer"),WJe=o(" or "),ES=a("a"),HJe=o("BarthezTokenizerFast"),UJe=o(" (BARThez model)"),JJe=l(),bg=a("li"),pre=a("strong"),YJe=o("bartpho"),KJe=o(" \u2014 "),CS=a("a"),ZJe=o("BartphoTokenizer"),eYe=o(" (BARTpho model)"),oYe=l(),Pn=a("li"),ure=a("strong"),rYe=o("bert"),tYe=o(" \u2014 "),wS=a("a"),aYe=o("BertTokenizer"),nYe=o(" or "),AS=a("a"),sYe=o("BertTokenizerFast"),lYe=o(" (BERT model)"),iYe=l(),vg=a("li"),_re=a("strong"),dYe=o("bert-generation"),cYe=o(" \u2014 "),yS=a("a"),fYe=o("BertGenerationTokenizer"),mYe=o(" (Bert Generation model)"),gYe=l(),Fg=a("li"),bre=a("strong"),hYe=o("bert-japanese"),pYe=o(" \u2014 "),LS=a("a"),uYe=o("BertJapaneseTokenizer"),_Ye=o(" (BertJapanese model)"),bYe=l(),Tg=a("li"),vre=a("strong"),vYe=o("bertweet"),FYe=o(" \u2014 "),xS=a("a"),TYe=o("BertweetTokenizer"),MYe=o(" (Bertweet model)"),EYe=l(),In=a("li"),Fre=a("strong"),CYe=o("big_bird"),wYe=o(" \u2014 "),$S=a("a"),AYe=o("BigBirdTokenizer"),yYe=o(" or "),kS=a("a"),LYe=o("BigBirdTokenizerFast"),xYe=o(" (BigBird model)"),$Ye=l(),qn=a("li"),Tre=a("strong"),kYe=o("bigbird_pegasus"),SYe=o(" \u2014 "),SS=a("a"),RYe=o("PegasusTokenizer"),BYe=o(" or "),RS=a("a"),PYe=o("PegasusTokenizerFast"),IYe=o(" (BigBirdPegasus model)"),qYe=l(),Nn=a("li"),Mre=a("strong"),NYe=o("blenderbot"),jYe=o(" \u2014 "),BS=a("a"),DYe=o("BlenderbotTokenizer"),GYe=o(" or "),PS=a("a"),OYe=o("BlenderbotTokenizerFast"),VYe=o(" (Blenderbot model)"),XYe=l(),Mg=a("li"),Ere=a("strong"),zYe=o("blenderbot-small"),QYe=o(" \u2014 "),IS=a("a"),WYe=o("BlenderbotSmallTokenizer"),HYe=o(" (BlenderbotSmall model)"),UYe=l(),Eg=a("li"),Cre=a("strong"),JYe=o("byt5"),YYe=o(" \u2014 "),qS=a("a"),KYe=o("ByT5Tokenizer"),ZYe=o(" (ByT5 model)"),eKe=l(),jn=a("li"),wre=a("strong"),oKe=o("camembert"),rKe=o(" \u2014 "),NS=a("a"),tKe=o("CamembertTokenizer"),aKe=o(" or "),jS=a("a"),nKe=o("CamembertTokenizerFast"),sKe=o(" (CamemBERT model)"),lKe=l(),Cg=a("li"),Are=a("strong"),iKe=o("canine"),dKe=o(" \u2014 "),DS=a("a"),cKe=o("CanineTokenizer"),fKe=o(" (Canine model)"),mKe=l(),Dn=a("li"),yre=a("strong"),gKe=o("clip"),hKe=o(" \u2014 "),GS=a("a"),pKe=o("CLIPTokenizer"),uKe=o(" or "),OS=a("a"),_Ke=o("CLIPTokenizerFast"),bKe=o(" (CLIP model)"),vKe=l(),Gn=a("li"),Lre=a("strong"),FKe=o("convbert"),TKe=o(" \u2014 "),VS=a("a"),MKe=o("ConvBertTokenizer"),EKe=o(" or "),XS=a("a"),CKe=o("ConvBertTokenizerFast"),wKe=o(" (ConvBERT model)"),AKe=l(),On=a("li"),xre=a("strong"),yKe=o("cpm"),LKe=o(" \u2014 "),zS=a("a"),xKe=o("CpmTokenizer"),$Ke=o(" or "),QS=a("a"),kKe=o("CpmTokenizerFast"),SKe=o(" (CPM model)"),RKe=l(),wg=a("li"),$re=a("strong"),BKe=o("ctrl"),PKe=o(" \u2014 "),WS=a("a"),IKe=o("CTRLTokenizer"),qKe=o(" (CTRL model)"),NKe=l(),Vn=a("li"),kre=a("strong"),jKe=o("data2vec-text"),DKe=o(" \u2014 "),HS=a("a"),GKe=o("RobertaTokenizer"),OKe=o(" or "),US=a("a"),VKe=o("RobertaTokenizerFast"),XKe=o(" (Data2VecText model)"),zKe=l(),Xn=a("li"),Sre=a("strong"),QKe=o("deberta"),WKe=o(" \u2014 "),JS=a("a"),HKe=o("DebertaTokenizer"),UKe=o(" or "),YS=a("a"),JKe=o("DebertaTokenizerFast"),YKe=o(" (DeBERTa model)"),KKe=l(),zn=a("li"),Rre=a("strong"),ZKe=o("deberta-v2"),eZe=o(" \u2014 "),KS=a("a"),oZe=o("DebertaV2Tokenizer"),rZe=o(" or "),ZS=a("a"),tZe=o("DebertaV2TokenizerFast"),aZe=o(" (DeBERTa-v2 model)"),nZe=l(),Qn=a("li"),Bre=a("strong"),sZe=o("distilbert"),lZe=o(" \u2014 "),eR=a("a"),iZe=o("DistilBertTokenizer"),dZe=o(" or "),oR=a("a"),cZe=o("DistilBertTokenizerFast"),fZe=o(" (DistilBERT model)"),mZe=l(),Wn=a("li"),Pre=a("strong"),gZe=o("dpr"),hZe=o(" \u2014 "),rR=a("a"),pZe=o("DPRQuestionEncoderTokenizer"),uZe=o(" or "),tR=a("a"),_Ze=o("DPRQuestionEncoderTokenizerFast"),bZe=o(" (DPR model)"),vZe=l(),Hn=a("li"),Ire=a("strong"),FZe=o("electra"),TZe=o(" \u2014 "),aR=a("a"),MZe=o("ElectraTokenizer"),EZe=o(" or "),nR=a("a"),CZe=o("ElectraTokenizerFast"),wZe=o(" (ELECTRA model)"),AZe=l(),Ag=a("li"),qre=a("strong"),yZe=o("flaubert"),LZe=o(" \u2014 "),sR=a("a"),xZe=o("FlaubertTokenizer"),$Ze=o(" (FlauBERT model)"),kZe=l(),Un=a("li"),Nre=a("strong"),SZe=o("fnet"),RZe=o(" \u2014 "),lR=a("a"),BZe=o("FNetTokenizer"),PZe=o(" or "),iR=a("a"),IZe=o("FNetTokenizerFast"),qZe=o(" (FNet model)"),NZe=l(),yg=a("li"),jre=a("strong"),jZe=o("fsmt"),DZe=o(" \u2014 "),dR=a("a"),GZe=o("FSMTTokenizer"),OZe=o(" (FairSeq Machine-Translation model)"),VZe=l(),Jn=a("li"),Dre=a("strong"),XZe=o("funnel"),zZe=o(" \u2014 "),cR=a("a"),QZe=o("FunnelTokenizer"),WZe=o(" or "),fR=a("a"),HZe=o("FunnelTokenizerFast"),UZe=o(" (Funnel Transformer model)"),JZe=l(),Yn=a("li"),Gre=a("strong"),YZe=o("gpt2"),KZe=o(" \u2014 "),mR=a("a"),ZZe=o("GPT2Tokenizer"),eeo=o(" or "),gR=a("a"),oeo=o("GPT2TokenizerFast"),reo=o(" (OpenAI GPT-2 model)"),teo=l(),Kn=a("li"),Ore=a("strong"),aeo=o("gpt_neo"),neo=o(" \u2014 "),hR=a("a"),seo=o("GPT2Tokenizer"),leo=o(" or "),pR=a("a"),ieo=o("GPT2TokenizerFast"),deo=o(" (GPT Neo model)"),ceo=l(),Zn=a("li"),Vre=a("strong"),feo=o("gptj"),meo=o(" \u2014 "),uR=a("a"),geo=o("GPT2Tokenizer"),heo=o(" or "),_R=a("a"),peo=o("GPT2TokenizerFast"),ueo=o(" (GPT-J model)"),_eo=l(),es=a("li"),Xre=a("strong"),beo=o("herbert"),veo=o(" \u2014 "),bR=a("a"),Feo=o("HerbertTokenizer"),Teo=o(" or "),vR=a("a"),Meo=o("HerbertTokenizerFast"),Eeo=o(" (HerBERT model)"),Ceo=l(),Lg=a("li"),zre=a("strong"),weo=o("hubert"),Aeo=o(" \u2014 "),FR=a("a"),yeo=o("Wav2Vec2CTCTokenizer"),Leo=o(" (Hubert model)"),xeo=l(),os=a("li"),Qre=a("strong"),$eo=o("ibert"),keo=o(" \u2014 "),TR=a("a"),Seo=o("RobertaTokenizer"),Reo=o(" or "),MR=a("a"),Beo=o("RobertaTokenizerFast"),Peo=o(" (I-BERT model)"),Ieo=l(),rs=a("li"),Wre=a("strong"),qeo=o("layoutlm"),Neo=o(" \u2014 "),ER=a("a"),jeo=o("LayoutLMTokenizer"),Deo=o(" or "),CR=a("a"),Geo=o("LayoutLMTokenizerFast"),Oeo=o(" (LayoutLM model)"),Veo=l(),ts=a("li"),Hre=a("strong"),Xeo=o("layoutlmv2"),zeo=o(" \u2014 "),wR=a("a"),Qeo=o("LayoutLMv2Tokenizer"),Weo=o(" or "),AR=a("a"),Heo=o("LayoutLMv2TokenizerFast"),Ueo=o(" (LayoutLMv2 model)"),Jeo=l(),as=a("li"),Ure=a("strong"),Yeo=o("layoutxlm"),Keo=o(" \u2014 "),yR=a("a"),Zeo=o("LayoutXLMTokenizer"),eoo=o(" or "),LR=a("a"),ooo=o("LayoutXLMTokenizerFast"),roo=o(" (LayoutXLM model)"),too=l(),ns=a("li"),Jre=a("strong"),aoo=o("led"),noo=o(" \u2014 "),xR=a("a"),soo=o("LEDTokenizer"),loo=o(" or "),$R=a("a"),ioo=o("LEDTokenizerFast"),doo=o(" (LED model)"),coo=l(),ss=a("li"),Yre=a("strong"),foo=o("longformer"),moo=o(" \u2014 "),kR=a("a"),goo=o("LongformerTokenizer"),hoo=o(" or "),SR=a("a"),poo=o("LongformerTokenizerFast"),uoo=o(" (Longformer model)"),_oo=l(),xg=a("li"),Kre=a("strong"),boo=o("luke"),voo=o(" \u2014 "),RR=a("a"),Foo=o("LukeTokenizer"),Too=o(" (LUKE model)"),Moo=l(),ls=a("li"),Zre=a("strong"),Eoo=o("lxmert"),Coo=o(" \u2014 "),BR=a("a"),woo=o("LxmertTokenizer"),Aoo=o(" or "),PR=a("a"),yoo=o("LxmertTokenizerFast"),Loo=o(" (LXMERT model)"),xoo=l(),$g=a("li"),ete=a("strong"),$oo=o("m2m_100"),koo=o(" \u2014 "),IR=a("a"),Soo=o("M2M100Tokenizer"),Roo=o(" (M2M100 model)"),Boo=l(),kg=a("li"),ote=a("strong"),Poo=o("marian"),Ioo=o(" \u2014 "),qR=a("a"),qoo=o("MarianTokenizer"),Noo=o(" (Marian model)"),joo=l(),is=a("li"),rte=a("strong"),Doo=o("mbart"),Goo=o(" \u2014 "),NR=a("a"),Ooo=o("MBartTokenizer"),Voo=o(" or "),jR=a("a"),Xoo=o("MBartTokenizerFast"),zoo=o(" (mBART model)"),Qoo=l(),ds=a("li"),tte=a("strong"),Woo=o("mbart50"),Hoo=o(" \u2014 "),DR=a("a"),Uoo=o("MBart50Tokenizer"),Joo=o(" or "),GR=a("a"),Yoo=o("MBart50TokenizerFast"),Koo=o(" (mBART-50 model)"),Zoo=l(),cs=a("li"),ate=a("strong"),ero=o("megatron-bert"),oro=o(" \u2014 "),OR=a("a"),rro=o("BertTokenizer"),tro=o(" or "),VR=a("a"),aro=o("BertTokenizerFast"),nro=o(" (MegatronBert model)"),sro=l(),Sg=a("li"),nte=a("strong"),lro=o("mluke"),iro=o(" \u2014 "),XR=a("a"),dro=o("MLukeTokenizer"),cro=o(" (mLUKE model)"),fro=l(),fs=a("li"),ste=a("strong"),mro=o("mobilebert"),gro=o(" \u2014 "),zR=a("a"),hro=o("MobileBertTokenizer"),pro=o(" or "),QR=a("a"),uro=o("MobileBertTokenizerFast"),_ro=o(" (MobileBERT model)"),bro=l(),ms=a("li"),lte=a("strong"),vro=o("mpnet"),Fro=o(" \u2014 "),WR=a("a"),Tro=o("MPNetTokenizer"),Mro=o(" or "),HR=a("a"),Ero=o("MPNetTokenizerFast"),Cro=o(" (MPNet model)"),wro=l(),gs=a("li"),ite=a("strong"),Aro=o("mt5"),yro=o(" \u2014 "),UR=a("a"),Lro=o("MT5Tokenizer"),xro=o(" or "),JR=a("a"),$ro=o("MT5TokenizerFast"),kro=o(" (mT5 model)"),Sro=l(),hs=a("li"),dte=a("strong"),Rro=o("nystromformer"),Bro=o(" \u2014 "),YR=a("a"),Pro=o("AlbertTokenizer"),Iro=o(" or "),KR=a("a"),qro=o("AlbertTokenizerFast"),Nro=o(" (Nystromformer model)"),jro=l(),ps=a("li"),cte=a("strong"),Dro=o("openai-gpt"),Gro=o(" \u2014 "),ZR=a("a"),Oro=o("OpenAIGPTTokenizer"),Vro=o(" or "),eB=a("a"),Xro=o("OpenAIGPTTokenizerFast"),zro=o(" (OpenAI GPT model)"),Qro=l(),Rg=a("li"),fte=a("strong"),Wro=o("opt"),Hro=o(" \u2014 "),oB=a("a"),Uro=o("GPT2Tokenizer"),Jro=o(" (OPT model)"),Yro=l(),us=a("li"),mte=a("strong"),Kro=o("pegasus"),Zro=o(" \u2014 "),rB=a("a"),eto=o("PegasusTokenizer"),oto=o(" or "),tB=a("a"),rto=o("PegasusTokenizerFast"),tto=o(" (Pegasus model)"),ato=l(),Bg=a("li"),gte=a("strong"),nto=o("perceiver"),sto=o(" \u2014 "),aB=a("a"),lto=o("PerceiverTokenizer"),ito=o(" (Perceiver model)"),dto=l(),Pg=a("li"),hte=a("strong"),cto=o("phobert"),fto=o(" \u2014 "),nB=a("a"),mto=o("PhobertTokenizer"),gto=o(" (PhoBERT model)"),hto=l(),Ig=a("li"),pte=a("strong"),pto=o("plbart"),uto=o(" \u2014 "),sB=a("a"),_to=o("PLBartTokenizer"),bto=o(" (PLBart model)"),vto=l(),qg=a("li"),ute=a("strong"),Fto=o("prophetnet"),Tto=o(" \u2014 "),lB=a("a"),Mto=o("ProphetNetTokenizer"),Eto=o(" (ProphetNet model)"),Cto=l(),_s=a("li"),_te=a("strong"),wto=o("qdqbert"),Ato=o(" \u2014 "),iB=a("a"),yto=o("BertTokenizer"),Lto=o(" or "),dB=a("a"),xto=o("BertTokenizerFast"),$to=o(" (QDQBert model)"),kto=l(),Ng=a("li"),bte=a("strong"),Sto=o("rag"),Rto=o(" \u2014 "),cB=a("a"),Bto=o("RagTokenizer"),Pto=o(" (RAG model)"),Ito=l(),bs=a("li"),vte=a("strong"),qto=o("realm"),Nto=o(" \u2014 "),fB=a("a"),jto=o("RealmTokenizer"),Dto=o(" or "),mB=a("a"),Gto=o("RealmTokenizerFast"),Oto=o(" (Realm model)"),Vto=l(),vs=a("li"),Fte=a("strong"),Xto=o("reformer"),zto=o(" \u2014 "),gB=a("a"),Qto=o("ReformerTokenizer"),Wto=o(" or "),hB=a("a"),Hto=o("ReformerTokenizerFast"),Uto=o(" (Reformer model)"),Jto=l(),Fs=a("li"),Tte=a("strong"),Yto=o("rembert"),Kto=o(" \u2014 "),pB=a("a"),Zto=o("RemBertTokenizer"),eao=o(" or "),uB=a("a"),oao=o("RemBertTokenizerFast"),rao=o(" (RemBERT model)"),tao=l(),Ts=a("li"),Mte=a("strong"),aao=o("retribert"),nao=o(" \u2014 "),_B=a("a"),sao=o("RetriBertTokenizer"),lao=o(" or "),bB=a("a"),iao=o("RetriBertTokenizerFast"),dao=o(" (RetriBERT model)"),cao=l(),Ms=a("li"),Ete=a("strong"),fao=o("roberta"),mao=o(" \u2014 "),vB=a("a"),gao=o("RobertaTokenizer"),hao=o(" or "),FB=a("a"),pao=o("RobertaTokenizerFast"),uao=o(" (RoBERTa model)"),_ao=l(),Es=a("li"),Cte=a("strong"),bao=o("roformer"),vao=o(" \u2014 "),TB=a("a"),Fao=o("RoFormerTokenizer"),Tao=o(" or "),MB=a("a"),Mao=o("RoFormerTokenizerFast"),Eao=o(" (RoFormer model)"),Cao=l(),jg=a("li"),wte=a("strong"),wao=o("speech_to_text"),Aao=o(" \u2014 "),EB=a("a"),yao=o("Speech2TextTokenizer"),Lao=o(" (Speech2Text model)"),xao=l(),Dg=a("li"),Ate=a("strong"),$ao=o("speech_to_text_2"),kao=o(" \u2014 "),CB=a("a"),Sao=o("Speech2Text2Tokenizer"),Rao=o(" (Speech2Text2 model)"),Bao=l(),Cs=a("li"),yte=a("strong"),Pao=o("splinter"),Iao=o(" \u2014 "),wB=a("a"),qao=o("SplinterTokenizer"),Nao=o(" or "),AB=a("a"),jao=o("SplinterTokenizerFast"),Dao=o(" (Splinter model)"),Gao=l(),ws=a("li"),Lte=a("strong"),Oao=o("squeezebert"),Vao=o(" \u2014 "),yB=a("a"),Xao=o("SqueezeBertTokenizer"),zao=o(" or "),LB=a("a"),Qao=o("SqueezeBertTokenizerFast"),Wao=o(" (SqueezeBERT model)"),Hao=l(),As=a("li"),xte=a("strong"),Uao=o("t5"),Jao=o(" \u2014 "),xB=a("a"),Yao=o("T5Tokenizer"),Kao=o(" or "),$B=a("a"),Zao=o("T5TokenizerFast"),eno=o(" (T5 model)"),ono=l(),Gg=a("li"),$te=a("strong"),rno=o("tapas"),tno=o(" \u2014 "),kB=a("a"),ano=o("TapasTokenizer"),nno=o(" (TAPAS model)"),sno=l(),Og=a("li"),kte=a("strong"),lno=o("tapex"),ino=o(" \u2014 "),SB=a("a"),dno=o("TapexTokenizer"),cno=o(" (TAPEX model)"),fno=l(),Vg=a("li"),Ste=a("strong"),mno=o("transfo-xl"),gno=o(" \u2014 "),RB=a("a"),hno=o("TransfoXLTokenizer"),pno=o(" (Transformer-XL model)"),uno=l(),ys=a("li"),Rte=a("strong"),_no=o("visual_bert"),bno=o(" \u2014 "),BB=a("a"),vno=o("BertTokenizer"),Fno=o(" or "),PB=a("a"),Tno=o("BertTokenizerFast"),Mno=o(" (VisualBert model)"),Eno=l(),Xg=a("li"),Bte=a("strong"),Cno=o("wav2vec2"),wno=o(" \u2014 "),IB=a("a"),Ano=o("Wav2Vec2CTCTokenizer"),yno=o(" (Wav2Vec2 model)"),Lno=l(),zg=a("li"),Pte=a("strong"),xno=o("wav2vec2_phoneme"),$no=o(" \u2014 "),qB=a("a"),kno=o("Wav2Vec2PhonemeCTCTokenizer"),Sno=o(" (Wav2Vec2Phoneme model)"),Rno=l(),Ls=a("li"),Ite=a("strong"),Bno=o("xglm"),Pno=o(" \u2014 "),NB=a("a"),Ino=o("XGLMTokenizer"),qno=o(" or "),jB=a("a"),Nno=o("XGLMTokenizerFast"),jno=o(" (XGLM model)"),Dno=l(),Qg=a("li"),qte=a("strong"),Gno=o("xlm"),Ono=o(" \u2014 "),DB=a("a"),Vno=o("XLMTokenizer"),Xno=o(" (XLM model)"),zno=l(),Wg=a("li"),Nte=a("strong"),Qno=o("xlm-prophetnet"),Wno=o(" \u2014 "),GB=a("a"),Hno=o("XLMProphetNetTokenizer"),Uno=o(" (XLMProphetNet model)"),Jno=l(),xs=a("li"),jte=a("strong"),Yno=o("xlm-roberta"),Kno=o(" \u2014 "),OB=a("a"),Zno=o("XLMRobertaTokenizer"),eso=o(" or "),VB=a("a"),oso=o("XLMRobertaTokenizerFast"),rso=o(" (XLM-RoBERTa model)"),tso=l(),$s=a("li"),Dte=a("strong"),aso=o("xlm-roberta-xl"),nso=o(" \u2014 "),XB=a("a"),sso=o("RobertaTokenizer"),lso=o(" or "),zB=a("a"),iso=o("RobertaTokenizerFast"),dso=o(" (XLM-RoBERTa-XL model)"),cso=l(),ks=a("li"),Gte=a("strong"),fso=o("xlnet"),mso=o(" \u2014 "),QB=a("a"),gso=o("XLNetTokenizer"),hso=o(" or "),WB=a("a"),pso=o("XLNetTokenizerFast"),uso=o(" (XLNet model)"),_so=l(),Ss=a("li"),Ote=a("strong"),bso=o("yoso"),vso=o(" \u2014 "),HB=a("a"),Fso=o("AlbertTokenizer"),Tso=o(" or "),UB=a("a"),Mso=o("AlbertTokenizerFast"),Eso=o(" (YOSO model)"),Cso=l(),F(Hg.$$.fragment),wso=l(),Ug=a("div"),F(c6.$$.fragment),Aso=l(),Vte=a("p"),yso=o("Register a new tokenizer in this mapping."),HPe=l(),vi=a("h2"),Jg=a("a"),Xte=a("span"),F(f6.$$.fragment),Lso=l(),zte=a("span"),xso=o("AutoFeatureExtractor"),UPe=l(),Ao=a("div"),F(m6.$$.fragment),$so=l(),g6=a("p"),kso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JB=a("a"),Sso=o("AutoFeatureExtractor.from_pretrained()"),Rso=o(" class method."),Bso=l(),h6=a("p"),Pso=o("This class cannot be instantiated directly using "),Qte=a("code"),Iso=o("__init__()"),qso=o(" (throws an error)."),Nso=l(),Qe=a("div"),F(p6.$$.fragment),jso=l(),Wte=a("p"),Dso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Gso=l(),wa=a("p"),Oso=o("The feature extractor class to instantiate is selected based on the "),Hte=a("code"),Vso=o("model_type"),Xso=o(` property of the config object
(either passed as an argument or loaded from `),Ute=a("code"),zso=o("pretrained_model_name_or_path"),Qso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jte=a("code"),Wso=o("pretrained_model_name_or_path"),Hso=o(":"),Uso=l(),oe=a("ul"),Yg=a("li"),Yte=a("strong"),Jso=o("beit"),Yso=o(" \u2014 "),YB=a("a"),Kso=o("BeitFeatureExtractor"),Zso=o(" (BEiT model)"),elo=l(),Kg=a("li"),Kte=a("strong"),olo=o("clip"),rlo=o(" \u2014 "),KB=a("a"),tlo=o("CLIPFeatureExtractor"),alo=o(" (CLIP model)"),nlo=l(),Zg=a("li"),Zte=a("strong"),slo=o("convnext"),llo=o(" \u2014 "),ZB=a("a"),ilo=o("ConvNextFeatureExtractor"),dlo=o(" (ConvNext model)"),clo=l(),eh=a("li"),eae=a("strong"),flo=o("data2vec-audio"),mlo=o(" \u2014 "),eP=a("a"),glo=o("Wav2Vec2FeatureExtractor"),hlo=o(" (Data2VecAudio model)"),plo=l(),oh=a("li"),oae=a("strong"),ulo=o("data2vec-vision"),_lo=o(" \u2014 "),oP=a("a"),blo=o("BeitFeatureExtractor"),vlo=o(" (Data2VecVision model)"),Flo=l(),rh=a("li"),rae=a("strong"),Tlo=o("deit"),Mlo=o(" \u2014 "),rP=a("a"),Elo=o("DeiTFeatureExtractor"),Clo=o(" (DeiT model)"),wlo=l(),th=a("li"),tae=a("strong"),Alo=o("detr"),ylo=o(" \u2014 "),tP=a("a"),Llo=o("DetrFeatureExtractor"),xlo=o(" (DETR model)"),$lo=l(),ah=a("li"),aae=a("strong"),klo=o("dpt"),Slo=o(" \u2014 "),aP=a("a"),Rlo=o("DPTFeatureExtractor"),Blo=o(" (DPT model)"),Plo=l(),nh=a("li"),nae=a("strong"),Ilo=o("flava"),qlo=o(" \u2014 "),nP=a("a"),Nlo=o("FlavaFeatureExtractor"),jlo=o(" (Flava model)"),Dlo=l(),sh=a("li"),sae=a("strong"),Glo=o("glpn"),Olo=o(" \u2014 "),sP=a("a"),Vlo=o("GLPNFeatureExtractor"),Xlo=o(" (GLPN model)"),zlo=l(),lh=a("li"),lae=a("strong"),Qlo=o("hubert"),Wlo=o(" \u2014 "),lP=a("a"),Hlo=o("Wav2Vec2FeatureExtractor"),Ulo=o(" (Hubert model)"),Jlo=l(),ih=a("li"),iae=a("strong"),Ylo=o("layoutlmv2"),Klo=o(" \u2014 "),iP=a("a"),Zlo=o("LayoutLMv2FeatureExtractor"),eio=o(" (LayoutLMv2 model)"),oio=l(),dh=a("li"),dae=a("strong"),rio=o("maskformer"),tio=o(" \u2014 "),dP=a("a"),aio=o("MaskFormerFeatureExtractor"),nio=o(" (MaskFormer model)"),sio=l(),ch=a("li"),cae=a("strong"),lio=o("perceiver"),iio=o(" \u2014 "),cP=a("a"),dio=o("PerceiverFeatureExtractor"),cio=o(" (Perceiver model)"),fio=l(),fh=a("li"),fae=a("strong"),mio=o("poolformer"),gio=o(" \u2014 "),fP=a("a"),hio=o("PoolFormerFeatureExtractor"),pio=o(" (PoolFormer model)"),uio=l(),mh=a("li"),mae=a("strong"),_io=o("regnet"),bio=o(" \u2014 "),mP=a("a"),vio=o("ConvNextFeatureExtractor"),Fio=o(" (RegNet model)"),Tio=l(),gh=a("li"),gae=a("strong"),Mio=o("resnet"),Eio=o(" \u2014 "),gP=a("a"),Cio=o("ConvNextFeatureExtractor"),wio=o(" (ResNet model)"),Aio=l(),hh=a("li"),hae=a("strong"),yio=o("segformer"),Lio=o(" \u2014 "),hP=a("a"),xio=o("SegformerFeatureExtractor"),$io=o(" (SegFormer model)"),kio=l(),ph=a("li"),pae=a("strong"),Sio=o("speech_to_text"),Rio=o(" \u2014 "),pP=a("a"),Bio=o("Speech2TextFeatureExtractor"),Pio=o(" (Speech2Text model)"),Iio=l(),uh=a("li"),uae=a("strong"),qio=o("swin"),Nio=o(" \u2014 "),uP=a("a"),jio=o("ViTFeatureExtractor"),Dio=o(" (Swin model)"),Gio=l(),_h=a("li"),_ae=a("strong"),Oio=o("van"),Vio=o(" \u2014 "),_P=a("a"),Xio=o("ConvNextFeatureExtractor"),zio=o(" (VAN model)"),Qio=l(),bh=a("li"),bae=a("strong"),Wio=o("vit"),Hio=o(" \u2014 "),bP=a("a"),Uio=o("ViTFeatureExtractor"),Jio=o(" (ViT model)"),Yio=l(),vh=a("li"),vae=a("strong"),Kio=o("vit_mae"),Zio=o(" \u2014 "),vP=a("a"),edo=o("ViTFeatureExtractor"),odo=o(" (ViTMAE model)"),rdo=l(),Fh=a("li"),Fae=a("strong"),tdo=o("wav2vec2"),ado=o(" \u2014 "),FP=a("a"),ndo=o("Wav2Vec2FeatureExtractor"),sdo=o(" (Wav2Vec2 model)"),ldo=l(),Th=a("li"),Tae=a("strong"),ido=o("yolos"),ddo=o(" \u2014 "),TP=a("a"),cdo=o("YolosFeatureExtractor"),fdo=o(" (YOLOS model)"),mdo=l(),F(Mh.$$.fragment),gdo=l(),F(Eh.$$.fragment),hdo=l(),Ch=a("div"),F(u6.$$.fragment),pdo=l(),Mae=a("p"),udo=o("Register a new feature extractor for this class."),JPe=l(),Fi=a("h2"),wh=a("a"),Eae=a("span"),F(_6.$$.fragment),_do=l(),Cae=a("span"),bdo=o("AutoProcessor"),YPe=l(),yo=a("div"),F(b6.$$.fragment),vdo=l(),v6=a("p"),Fdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MP=a("a"),Tdo=o("AutoProcessor.from_pretrained()"),Mdo=o(" class method."),Edo=l(),F6=a("p"),Cdo=o("This class cannot be instantiated directly using "),wae=a("code"),wdo=o("__init__()"),Ado=o(" (throws an error)."),ydo=l(),We=a("div"),F(T6.$$.fragment),Ldo=l(),Aae=a("p"),xdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$do=l(),Ti=a("p"),kdo=o("The processor class to instantiate is selected based on the "),yae=a("code"),Sdo=o("model_type"),Rdo=o(` property of the config object (either
passed as an argument or loaded from `),Lae=a("code"),Bdo=o("pretrained_model_name_or_path"),Pdo=o(" if possible):"),Ido=l(),_e=a("ul"),Ah=a("li"),xae=a("strong"),qdo=o("clip"),Ndo=o(" \u2014 "),EP=a("a"),jdo=o("CLIPProcessor"),Ddo=o(" (CLIP model)"),Gdo=l(),yh=a("li"),$ae=a("strong"),Odo=o("flava"),Vdo=o(" \u2014 "),kae=a("code"),Xdo=o("FLAVAProcessor"),zdo=o(" (Flava model)"),Qdo=l(),Lh=a("li"),Sae=a("strong"),Wdo=o("layoutlmv2"),Hdo=o(" \u2014 "),CP=a("a"),Udo=o("LayoutLMv2Processor"),Jdo=o(" (LayoutLMv2 model)"),Ydo=l(),xh=a("li"),Rae=a("strong"),Kdo=o("layoutxlm"),Zdo=o(" \u2014 "),wP=a("a"),eco=o("LayoutXLMProcessor"),oco=o(" (LayoutXLM model)"),rco=l(),$h=a("li"),Bae=a("strong"),tco=o("sew"),aco=o(" \u2014 "),AP=a("a"),nco=o("Wav2Vec2Processor"),sco=o(" (SEW model)"),lco=l(),kh=a("li"),Pae=a("strong"),ico=o("sew-d"),dco=o(" \u2014 "),yP=a("a"),cco=o("Wav2Vec2Processor"),fco=o(" (SEW-D model)"),mco=l(),Sh=a("li"),Iae=a("strong"),gco=o("speech_to_text"),hco=o(" \u2014 "),LP=a("a"),pco=o("Speech2TextProcessor"),uco=o(" (Speech2Text model)"),_co=l(),Rh=a("li"),qae=a("strong"),bco=o("speech_to_text_2"),vco=o(" \u2014 "),xP=a("a"),Fco=o("Speech2Text2Processor"),Tco=o(" (Speech2Text2 model)"),Mco=l(),Bh=a("li"),Nae=a("strong"),Eco=o("trocr"),Cco=o(" \u2014 "),$P=a("a"),wco=o("TrOCRProcessor"),Aco=o(" (TrOCR model)"),yco=l(),Ph=a("li"),jae=a("strong"),Lco=o("unispeech"),xco=o(" \u2014 "),kP=a("a"),$co=o("Wav2Vec2Processor"),kco=o(" (UniSpeech model)"),Sco=l(),Ih=a("li"),Dae=a("strong"),Rco=o("unispeech-sat"),Bco=o(" \u2014 "),SP=a("a"),Pco=o("Wav2Vec2Processor"),Ico=o(" (UniSpeechSat model)"),qco=l(),qh=a("li"),Gae=a("strong"),Nco=o("vilt"),jco=o(" \u2014 "),RP=a("a"),Dco=o("ViltProcessor"),Gco=o(" (ViLT model)"),Oco=l(),Nh=a("li"),Oae=a("strong"),Vco=o("vision-text-dual-encoder"),Xco=o(" \u2014 "),BP=a("a"),zco=o("VisionTextDualEncoderProcessor"),Qco=o(" (VisionTextDualEncoder model)"),Wco=l(),jh=a("li"),Vae=a("strong"),Hco=o("wav2vec2"),Uco=o(" \u2014 "),PP=a("a"),Jco=o("Wav2Vec2Processor"),Yco=o(" (Wav2Vec2 model)"),Kco=l(),Dh=a("li"),Xae=a("strong"),Zco=o("wavlm"),efo=o(" \u2014 "),IP=a("a"),ofo=o("Wav2Vec2Processor"),rfo=o(" (WavLM model)"),tfo=l(),F(Gh.$$.fragment),afo=l(),F(Oh.$$.fragment),nfo=l(),Vh=a("div"),F(M6.$$.fragment),sfo=l(),zae=a("p"),lfo=o("Register a new processor for this class."),KPe=l(),Mi=a("h2"),Xh=a("a"),Qae=a("span"),F(E6.$$.fragment),ifo=l(),Wae=a("span"),dfo=o("AutoModel"),ZPe=l(),Lo=a("div"),F(C6.$$.fragment),cfo=l(),Ei=a("p"),ffo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qP=a("a"),mfo=o("from_pretrained()"),gfo=o(" class method or the "),NP=a("a"),hfo=o("from_config()"),pfo=o(` class
method.`),ufo=l(),w6=a("p"),_fo=o("This class cannot be instantiated directly using "),Hae=a("code"),bfo=o("__init__()"),vfo=o(" (throws an error)."),Ffo=l(),ot=a("div"),F(A6.$$.fragment),Tfo=l(),Uae=a("p"),Mfo=o("Instantiates one of the base model classes of the library from a configuration."),Efo=l(),Ci=a("p"),Cfo=o(`Note:
Loading a model from its configuration file does `),Jae=a("strong"),wfo=o("not"),Afo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jP=a("a"),yfo=o("from_pretrained()"),Lfo=o(" to load the model weights."),xfo=l(),F(zh.$$.fragment),$fo=l(),He=a("div"),F(y6.$$.fragment),kfo=l(),Yae=a("p"),Sfo=o("Instantiate one of the base model classes of the library from a pretrained model."),Rfo=l(),Aa=a("p"),Bfo=o("The model class to instantiate is selected based on the "),Kae=a("code"),Pfo=o("model_type"),Ifo=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),qfo=o("pretrained_model_name_or_path"),Nfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=a("code"),jfo=o("pretrained_model_name_or_path"),Dfo=o(":"),Gfo=l(),x=a("ul"),Qh=a("li"),one=a("strong"),Ofo=o("albert"),Vfo=o(" \u2014 "),DP=a("a"),Xfo=o("AlbertModel"),zfo=o(" (ALBERT model)"),Qfo=l(),Wh=a("li"),rne=a("strong"),Wfo=o("bart"),Hfo=o(" \u2014 "),GP=a("a"),Ufo=o("BartModel"),Jfo=o(" (BART model)"),Yfo=l(),Hh=a("li"),tne=a("strong"),Kfo=o("beit"),Zfo=o(" \u2014 "),OP=a("a"),emo=o("BeitModel"),omo=o(" (BEiT model)"),rmo=l(),Uh=a("li"),ane=a("strong"),tmo=o("bert"),amo=o(" \u2014 "),VP=a("a"),nmo=o("BertModel"),smo=o(" (BERT model)"),lmo=l(),Jh=a("li"),nne=a("strong"),imo=o("bert-generation"),dmo=o(" \u2014 "),XP=a("a"),cmo=o("BertGenerationEncoder"),fmo=o(" (Bert Generation model)"),mmo=l(),Yh=a("li"),sne=a("strong"),gmo=o("big_bird"),hmo=o(" \u2014 "),zP=a("a"),pmo=o("BigBirdModel"),umo=o(" (BigBird model)"),_mo=l(),Kh=a("li"),lne=a("strong"),bmo=o("bigbird_pegasus"),vmo=o(" \u2014 "),QP=a("a"),Fmo=o("BigBirdPegasusModel"),Tmo=o(" (BigBirdPegasus model)"),Mmo=l(),Zh=a("li"),ine=a("strong"),Emo=o("blenderbot"),Cmo=o(" \u2014 "),WP=a("a"),wmo=o("BlenderbotModel"),Amo=o(" (Blenderbot model)"),ymo=l(),ep=a("li"),dne=a("strong"),Lmo=o("blenderbot-small"),xmo=o(" \u2014 "),HP=a("a"),$mo=o("BlenderbotSmallModel"),kmo=o(" (BlenderbotSmall model)"),Smo=l(),op=a("li"),cne=a("strong"),Rmo=o("camembert"),Bmo=o(" \u2014 "),UP=a("a"),Pmo=o("CamembertModel"),Imo=o(" (CamemBERT model)"),qmo=l(),rp=a("li"),fne=a("strong"),Nmo=o("canine"),jmo=o(" \u2014 "),JP=a("a"),Dmo=o("CanineModel"),Gmo=o(" (Canine model)"),Omo=l(),tp=a("li"),mne=a("strong"),Vmo=o("clip"),Xmo=o(" \u2014 "),YP=a("a"),zmo=o("CLIPModel"),Qmo=o(" (CLIP model)"),Wmo=l(),ap=a("li"),gne=a("strong"),Hmo=o("convbert"),Umo=o(" \u2014 "),KP=a("a"),Jmo=o("ConvBertModel"),Ymo=o(" (ConvBERT model)"),Kmo=l(),np=a("li"),hne=a("strong"),Zmo=o("convnext"),ego=o(" \u2014 "),ZP=a("a"),ogo=o("ConvNextModel"),rgo=o(" (ConvNext model)"),tgo=l(),sp=a("li"),pne=a("strong"),ago=o("ctrl"),ngo=o(" \u2014 "),eI=a("a"),sgo=o("CTRLModel"),lgo=o(" (CTRL model)"),igo=l(),lp=a("li"),une=a("strong"),dgo=o("data2vec-audio"),cgo=o(" \u2014 "),oI=a("a"),fgo=o("Data2VecAudioModel"),mgo=o(" (Data2VecAudio model)"),ggo=l(),ip=a("li"),_ne=a("strong"),hgo=o("data2vec-text"),pgo=o(" \u2014 "),rI=a("a"),ugo=o("Data2VecTextModel"),_go=o(" (Data2VecText model)"),bgo=l(),dp=a("li"),bne=a("strong"),vgo=o("data2vec-vision"),Fgo=o(" \u2014 "),tI=a("a"),Tgo=o("Data2VecVisionModel"),Mgo=o(" (Data2VecVision model)"),Ego=l(),cp=a("li"),vne=a("strong"),Cgo=o("deberta"),wgo=o(" \u2014 "),aI=a("a"),Ago=o("DebertaModel"),ygo=o(" (DeBERTa model)"),Lgo=l(),fp=a("li"),Fne=a("strong"),xgo=o("deberta-v2"),$go=o(" \u2014 "),nI=a("a"),kgo=o("DebertaV2Model"),Sgo=o(" (DeBERTa-v2 model)"),Rgo=l(),mp=a("li"),Tne=a("strong"),Bgo=o("decision_transformer"),Pgo=o(" \u2014 "),sI=a("a"),Igo=o("DecisionTransformerModel"),qgo=o(" (Decision Transformer model)"),Ngo=l(),gp=a("li"),Mne=a("strong"),jgo=o("deit"),Dgo=o(" \u2014 "),lI=a("a"),Ggo=o("DeiTModel"),Ogo=o(" (DeiT model)"),Vgo=l(),hp=a("li"),Ene=a("strong"),Xgo=o("detr"),zgo=o(" \u2014 "),iI=a("a"),Qgo=o("DetrModel"),Wgo=o(" (DETR model)"),Hgo=l(),pp=a("li"),Cne=a("strong"),Ugo=o("distilbert"),Jgo=o(" \u2014 "),dI=a("a"),Ygo=o("DistilBertModel"),Kgo=o(" (DistilBERT model)"),Zgo=l(),up=a("li"),wne=a("strong"),eho=o("dpr"),oho=o(" \u2014 "),cI=a("a"),rho=o("DPRQuestionEncoder"),tho=o(" (DPR model)"),aho=l(),_p=a("li"),Ane=a("strong"),nho=o("dpt"),sho=o(" \u2014 "),fI=a("a"),lho=o("DPTModel"),iho=o(" (DPT model)"),dho=l(),bp=a("li"),yne=a("strong"),cho=o("electra"),fho=o(" \u2014 "),mI=a("a"),mho=o("ElectraModel"),gho=o(" (ELECTRA model)"),hho=l(),vp=a("li"),Lne=a("strong"),pho=o("flaubert"),uho=o(" \u2014 "),gI=a("a"),_ho=o("FlaubertModel"),bho=o(" (FlauBERT model)"),vho=l(),Fp=a("li"),xne=a("strong"),Fho=o("flava"),Tho=o(" \u2014 "),hI=a("a"),Mho=o("FlavaModel"),Eho=o(" (Flava model)"),Cho=l(),Tp=a("li"),$ne=a("strong"),who=o("fnet"),Aho=o(" \u2014 "),pI=a("a"),yho=o("FNetModel"),Lho=o(" (FNet model)"),xho=l(),Mp=a("li"),kne=a("strong"),$ho=o("fsmt"),kho=o(" \u2014 "),uI=a("a"),Sho=o("FSMTModel"),Rho=o(" (FairSeq Machine-Translation model)"),Bho=l(),Rs=a("li"),Sne=a("strong"),Pho=o("funnel"),Iho=o(" \u2014 "),_I=a("a"),qho=o("FunnelModel"),Nho=o(" or "),bI=a("a"),jho=o("FunnelBaseModel"),Dho=o(" (Funnel Transformer model)"),Gho=l(),Ep=a("li"),Rne=a("strong"),Oho=o("glpn"),Vho=o(" \u2014 "),vI=a("a"),Xho=o("GLPNModel"),zho=o(" (GLPN model)"),Qho=l(),Cp=a("li"),Bne=a("strong"),Who=o("gpt2"),Hho=o(" \u2014 "),FI=a("a"),Uho=o("GPT2Model"),Jho=o(" (OpenAI GPT-2 model)"),Yho=l(),wp=a("li"),Pne=a("strong"),Kho=o("gpt_neo"),Zho=o(" \u2014 "),TI=a("a"),epo=o("GPTNeoModel"),opo=o(" (GPT Neo model)"),rpo=l(),Ap=a("li"),Ine=a("strong"),tpo=o("gptj"),apo=o(" \u2014 "),MI=a("a"),npo=o("GPTJModel"),spo=o(" (GPT-J model)"),lpo=l(),yp=a("li"),qne=a("strong"),ipo=o("hubert"),dpo=o(" \u2014 "),EI=a("a"),cpo=o("HubertModel"),fpo=o(" (Hubert model)"),mpo=l(),Lp=a("li"),Nne=a("strong"),gpo=o("ibert"),hpo=o(" \u2014 "),CI=a("a"),ppo=o("IBertModel"),upo=o(" (I-BERT model)"),_po=l(),xp=a("li"),jne=a("strong"),bpo=o("imagegpt"),vpo=o(" \u2014 "),wI=a("a"),Fpo=o("ImageGPTModel"),Tpo=o(" (ImageGPT model)"),Mpo=l(),$p=a("li"),Dne=a("strong"),Epo=o("layoutlm"),Cpo=o(" \u2014 "),AI=a("a"),wpo=o("LayoutLMModel"),Apo=o(" (LayoutLM model)"),ypo=l(),kp=a("li"),Gne=a("strong"),Lpo=o("layoutlmv2"),xpo=o(" \u2014 "),yI=a("a"),$po=o("LayoutLMv2Model"),kpo=o(" (LayoutLMv2 model)"),Spo=l(),Sp=a("li"),One=a("strong"),Rpo=o("led"),Bpo=o(" \u2014 "),LI=a("a"),Ppo=o("LEDModel"),Ipo=o(" (LED model)"),qpo=l(),Rp=a("li"),Vne=a("strong"),Npo=o("longformer"),jpo=o(" \u2014 "),xI=a("a"),Dpo=o("LongformerModel"),Gpo=o(" (Longformer model)"),Opo=l(),Bp=a("li"),Xne=a("strong"),Vpo=o("luke"),Xpo=o(" \u2014 "),$I=a("a"),zpo=o("LukeModel"),Qpo=o(" (LUKE model)"),Wpo=l(),Pp=a("li"),zne=a("strong"),Hpo=o("lxmert"),Upo=o(" \u2014 "),kI=a("a"),Jpo=o("LxmertModel"),Ypo=o(" (LXMERT model)"),Kpo=l(),Ip=a("li"),Qne=a("strong"),Zpo=o("m2m_100"),euo=o(" \u2014 "),SI=a("a"),ouo=o("M2M100Model"),ruo=o(" (M2M100 model)"),tuo=l(),qp=a("li"),Wne=a("strong"),auo=o("marian"),nuo=o(" \u2014 "),RI=a("a"),suo=o("MarianModel"),luo=o(" (Marian model)"),iuo=l(),Np=a("li"),Hne=a("strong"),duo=o("maskformer"),cuo=o(" \u2014 "),BI=a("a"),fuo=o("MaskFormerModel"),muo=o(" (MaskFormer model)"),guo=l(),jp=a("li"),Une=a("strong"),huo=o("mbart"),puo=o(" \u2014 "),PI=a("a"),uuo=o("MBartModel"),_uo=o(" (mBART model)"),buo=l(),Dp=a("li"),Jne=a("strong"),vuo=o("megatron-bert"),Fuo=o(" \u2014 "),II=a("a"),Tuo=o("MegatronBertModel"),Muo=o(" (MegatronBert model)"),Euo=l(),Gp=a("li"),Yne=a("strong"),Cuo=o("mobilebert"),wuo=o(" \u2014 "),qI=a("a"),Auo=o("MobileBertModel"),yuo=o(" (MobileBERT model)"),Luo=l(),Op=a("li"),Kne=a("strong"),xuo=o("mpnet"),$uo=o(" \u2014 "),NI=a("a"),kuo=o("MPNetModel"),Suo=o(" (MPNet model)"),Ruo=l(),Vp=a("li"),Zne=a("strong"),Buo=o("mt5"),Puo=o(" \u2014 "),jI=a("a"),Iuo=o("MT5Model"),quo=o(" (mT5 model)"),Nuo=l(),Xp=a("li"),ese=a("strong"),juo=o("nystromformer"),Duo=o(" \u2014 "),DI=a("a"),Guo=o("NystromformerModel"),Ouo=o(" (Nystromformer model)"),Vuo=l(),zp=a("li"),ose=a("strong"),Xuo=o("openai-gpt"),zuo=o(" \u2014 "),GI=a("a"),Quo=o("OpenAIGPTModel"),Wuo=o(" (OpenAI GPT model)"),Huo=l(),Qp=a("li"),rse=a("strong"),Uuo=o("opt"),Juo=o(" \u2014 "),OI=a("a"),Yuo=o("OPTModel"),Kuo=o(" (OPT model)"),Zuo=l(),Wp=a("li"),tse=a("strong"),e_o=o("pegasus"),o_o=o(" \u2014 "),VI=a("a"),r_o=o("PegasusModel"),t_o=o(" (Pegasus model)"),a_o=l(),Hp=a("li"),ase=a("strong"),n_o=o("perceiver"),s_o=o(" \u2014 "),XI=a("a"),l_o=o("PerceiverModel"),i_o=o(" (Perceiver model)"),d_o=l(),Up=a("li"),nse=a("strong"),c_o=o("plbart"),f_o=o(" \u2014 "),zI=a("a"),m_o=o("PLBartModel"),g_o=o(" (PLBart model)"),h_o=l(),Jp=a("li"),sse=a("strong"),p_o=o("poolformer"),u_o=o(" \u2014 "),QI=a("a"),__o=o("PoolFormerModel"),b_o=o(" (PoolFormer model)"),v_o=l(),Yp=a("li"),lse=a("strong"),F_o=o("prophetnet"),T_o=o(" \u2014 "),WI=a("a"),M_o=o("ProphetNetModel"),E_o=o(" (ProphetNet model)"),C_o=l(),Kp=a("li"),ise=a("strong"),w_o=o("qdqbert"),A_o=o(" \u2014 "),HI=a("a"),y_o=o("QDQBertModel"),L_o=o(" (QDQBert model)"),x_o=l(),Zp=a("li"),dse=a("strong"),$_o=o("reformer"),k_o=o(" \u2014 "),UI=a("a"),S_o=o("ReformerModel"),R_o=o(" (Reformer model)"),B_o=l(),eu=a("li"),cse=a("strong"),P_o=o("regnet"),I_o=o(" \u2014 "),JI=a("a"),q_o=o("RegNetModel"),N_o=o(" (RegNet model)"),j_o=l(),ou=a("li"),fse=a("strong"),D_o=o("rembert"),G_o=o(" \u2014 "),YI=a("a"),O_o=o("RemBertModel"),V_o=o(" (RemBERT model)"),X_o=l(),ru=a("li"),mse=a("strong"),z_o=o("resnet"),Q_o=o(" \u2014 "),KI=a("a"),W_o=o("ResNetModel"),H_o=o(" (ResNet model)"),U_o=l(),tu=a("li"),gse=a("strong"),J_o=o("retribert"),Y_o=o(" \u2014 "),ZI=a("a"),K_o=o("RetriBertModel"),Z_o=o(" (RetriBERT model)"),e1o=l(),au=a("li"),hse=a("strong"),o1o=o("roberta"),r1o=o(" \u2014 "),eq=a("a"),t1o=o("RobertaModel"),a1o=o(" (RoBERTa model)"),n1o=l(),nu=a("li"),pse=a("strong"),s1o=o("roformer"),l1o=o(" \u2014 "),oq=a("a"),i1o=o("RoFormerModel"),d1o=o(" (RoFormer model)"),c1o=l(),su=a("li"),use=a("strong"),f1o=o("segformer"),m1o=o(" \u2014 "),rq=a("a"),g1o=o("SegformerModel"),h1o=o(" (SegFormer model)"),p1o=l(),lu=a("li"),_se=a("strong"),u1o=o("sew"),_1o=o(" \u2014 "),tq=a("a"),b1o=o("SEWModel"),v1o=o(" (SEW model)"),F1o=l(),iu=a("li"),bse=a("strong"),T1o=o("sew-d"),M1o=o(" \u2014 "),aq=a("a"),E1o=o("SEWDModel"),C1o=o(" (SEW-D model)"),w1o=l(),du=a("li"),vse=a("strong"),A1o=o("speech_to_text"),y1o=o(" \u2014 "),nq=a("a"),L1o=o("Speech2TextModel"),x1o=o(" (Speech2Text model)"),$1o=l(),cu=a("li"),Fse=a("strong"),k1o=o("splinter"),S1o=o(" \u2014 "),sq=a("a"),R1o=o("SplinterModel"),B1o=o(" (Splinter model)"),P1o=l(),fu=a("li"),Tse=a("strong"),I1o=o("squeezebert"),q1o=o(" \u2014 "),lq=a("a"),N1o=o("SqueezeBertModel"),j1o=o(" (SqueezeBERT model)"),D1o=l(),mu=a("li"),Mse=a("strong"),G1o=o("swin"),O1o=o(" \u2014 "),iq=a("a"),V1o=o("SwinModel"),X1o=o(" (Swin model)"),z1o=l(),gu=a("li"),Ese=a("strong"),Q1o=o("t5"),W1o=o(" \u2014 "),dq=a("a"),H1o=o("T5Model"),U1o=o(" (T5 model)"),J1o=l(),hu=a("li"),Cse=a("strong"),Y1o=o("tapas"),K1o=o(" \u2014 "),cq=a("a"),Z1o=o("TapasModel"),e2o=o(" (TAPAS model)"),o2o=l(),pu=a("li"),wse=a("strong"),r2o=o("transfo-xl"),t2o=o(" \u2014 "),fq=a("a"),a2o=o("TransfoXLModel"),n2o=o(" (Transformer-XL model)"),s2o=l(),uu=a("li"),Ase=a("strong"),l2o=o("unispeech"),i2o=o(" \u2014 "),mq=a("a"),d2o=o("UniSpeechModel"),c2o=o(" (UniSpeech model)"),f2o=l(),_u=a("li"),yse=a("strong"),m2o=o("unispeech-sat"),g2o=o(" \u2014 "),gq=a("a"),h2o=o("UniSpeechSatModel"),p2o=o(" (UniSpeechSat model)"),u2o=l(),bu=a("li"),Lse=a("strong"),_2o=o("van"),b2o=o(" \u2014 "),hq=a("a"),v2o=o("VanModel"),F2o=o(" (VAN model)"),T2o=l(),vu=a("li"),xse=a("strong"),M2o=o("vilt"),E2o=o(" \u2014 "),pq=a("a"),C2o=o("ViltModel"),w2o=o(" (ViLT model)"),A2o=l(),Fu=a("li"),$se=a("strong"),y2o=o("vision-text-dual-encoder"),L2o=o(" \u2014 "),uq=a("a"),x2o=o("VisionTextDualEncoderModel"),$2o=o(" (VisionTextDualEncoder model)"),k2o=l(),Tu=a("li"),kse=a("strong"),S2o=o("visual_bert"),R2o=o(" \u2014 "),_q=a("a"),B2o=o("VisualBertModel"),P2o=o(" (VisualBert model)"),I2o=l(),Mu=a("li"),Sse=a("strong"),q2o=o("vit"),N2o=o(" \u2014 "),bq=a("a"),j2o=o("ViTModel"),D2o=o(" (ViT model)"),G2o=l(),Eu=a("li"),Rse=a("strong"),O2o=o("vit_mae"),V2o=o(" \u2014 "),vq=a("a"),X2o=o("ViTMAEModel"),z2o=o(" (ViTMAE model)"),Q2o=l(),Cu=a("li"),Bse=a("strong"),W2o=o("wav2vec2"),H2o=o(" \u2014 "),Fq=a("a"),U2o=o("Wav2Vec2Model"),J2o=o(" (Wav2Vec2 model)"),Y2o=l(),wu=a("li"),Pse=a("strong"),K2o=o("wavlm"),Z2o=o(" \u2014 "),Tq=a("a"),ebo=o("WavLMModel"),obo=o(" (WavLM model)"),rbo=l(),Au=a("li"),Ise=a("strong"),tbo=o("xglm"),abo=o(" \u2014 "),Mq=a("a"),nbo=o("XGLMModel"),sbo=o(" (XGLM model)"),lbo=l(),yu=a("li"),qse=a("strong"),ibo=o("xlm"),dbo=o(" \u2014 "),Eq=a("a"),cbo=o("XLMModel"),fbo=o(" (XLM model)"),mbo=l(),Lu=a("li"),Nse=a("strong"),gbo=o("xlm-prophetnet"),hbo=o(" \u2014 "),Cq=a("a"),pbo=o("XLMProphetNetModel"),ubo=o(" (XLMProphetNet model)"),_bo=l(),xu=a("li"),jse=a("strong"),bbo=o("xlm-roberta"),vbo=o(" \u2014 "),wq=a("a"),Fbo=o("XLMRobertaModel"),Tbo=o(" (XLM-RoBERTa model)"),Mbo=l(),$u=a("li"),Dse=a("strong"),Ebo=o("xlm-roberta-xl"),Cbo=o(" \u2014 "),Aq=a("a"),wbo=o("XLMRobertaXLModel"),Abo=o(" (XLM-RoBERTa-XL model)"),ybo=l(),ku=a("li"),Gse=a("strong"),Lbo=o("xlnet"),xbo=o(" \u2014 "),yq=a("a"),$bo=o("XLNetModel"),kbo=o(" (XLNet model)"),Sbo=l(),Su=a("li"),Ose=a("strong"),Rbo=o("yolos"),Bbo=o(" \u2014 "),Lq=a("a"),Pbo=o("YolosModel"),Ibo=o(" (YOLOS model)"),qbo=l(),Ru=a("li"),Vse=a("strong"),Nbo=o("yoso"),jbo=o(" \u2014 "),xq=a("a"),Dbo=o("YosoModel"),Gbo=o(" (YOSO model)"),Obo=l(),Bu=a("p"),Vbo=o("The model is set in evaluation mode by default using "),Xse=a("code"),Xbo=o("model.eval()"),zbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=a("code"),Qbo=o("model.train()"),Wbo=l(),F(Pu.$$.fragment),eIe=l(),wi=a("h2"),Iu=a("a"),Qse=a("span"),F(L6.$$.fragment),Hbo=l(),Wse=a("span"),Ubo=o("AutoModelForPreTraining"),oIe=l(),xo=a("div"),F(x6.$$.fragment),Jbo=l(),Ai=a("p"),Ybo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$q=a("a"),Kbo=o("from_pretrained()"),Zbo=o(" class method or the "),kq=a("a"),evo=o("from_config()"),ovo=o(` class
method.`),rvo=l(),$6=a("p"),tvo=o("This class cannot be instantiated directly using "),Hse=a("code"),avo=o("__init__()"),nvo=o(" (throws an error)."),svo=l(),rt=a("div"),F(k6.$$.fragment),lvo=l(),Use=a("p"),ivo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dvo=l(),yi=a("p"),cvo=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),fvo=o("not"),mvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sq=a("a"),gvo=o("from_pretrained()"),hvo=o(" to load the model weights."),pvo=l(),F(qu.$$.fragment),uvo=l(),Ue=a("div"),F(S6.$$.fragment),_vo=l(),Yse=a("p"),bvo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vvo=l(),ya=a("p"),Fvo=o("The model class to instantiate is selected based on the "),Kse=a("code"),Tvo=o("model_type"),Mvo=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),Evo=o("pretrained_model_name_or_path"),Cvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),wvo=o("pretrained_model_name_or_path"),Avo=o(":"),yvo=l(),G=a("ul"),Nu=a("li"),ole=a("strong"),Lvo=o("albert"),xvo=o(" \u2014 "),Rq=a("a"),$vo=o("AlbertForPreTraining"),kvo=o(" (ALBERT model)"),Svo=l(),ju=a("li"),rle=a("strong"),Rvo=o("bart"),Bvo=o(" \u2014 "),Bq=a("a"),Pvo=o("BartForConditionalGeneration"),Ivo=o(" (BART model)"),qvo=l(),Du=a("li"),tle=a("strong"),Nvo=o("bert"),jvo=o(" \u2014 "),Pq=a("a"),Dvo=o("BertForPreTraining"),Gvo=o(" (BERT model)"),Ovo=l(),Gu=a("li"),ale=a("strong"),Vvo=o("big_bird"),Xvo=o(" \u2014 "),Iq=a("a"),zvo=o("BigBirdForPreTraining"),Qvo=o(" (BigBird model)"),Wvo=l(),Ou=a("li"),nle=a("strong"),Hvo=o("camembert"),Uvo=o(" \u2014 "),qq=a("a"),Jvo=o("CamembertForMaskedLM"),Yvo=o(" (CamemBERT model)"),Kvo=l(),Vu=a("li"),sle=a("strong"),Zvo=o("ctrl"),eFo=o(" \u2014 "),Nq=a("a"),oFo=o("CTRLLMHeadModel"),rFo=o(" (CTRL model)"),tFo=l(),Xu=a("li"),lle=a("strong"),aFo=o("data2vec-text"),nFo=o(" \u2014 "),jq=a("a"),sFo=o("Data2VecTextForMaskedLM"),lFo=o(" (Data2VecText model)"),iFo=l(),zu=a("li"),ile=a("strong"),dFo=o("deberta"),cFo=o(" \u2014 "),Dq=a("a"),fFo=o("DebertaForMaskedLM"),mFo=o(" (DeBERTa model)"),gFo=l(),Qu=a("li"),dle=a("strong"),hFo=o("deberta-v2"),pFo=o(" \u2014 "),Gq=a("a"),uFo=o("DebertaV2ForMaskedLM"),_Fo=o(" (DeBERTa-v2 model)"),bFo=l(),Wu=a("li"),cle=a("strong"),vFo=o("distilbert"),FFo=o(" \u2014 "),Oq=a("a"),TFo=o("DistilBertForMaskedLM"),MFo=o(" (DistilBERT model)"),EFo=l(),Hu=a("li"),fle=a("strong"),CFo=o("electra"),wFo=o(" \u2014 "),Vq=a("a"),AFo=o("ElectraForPreTraining"),yFo=o(" (ELECTRA model)"),LFo=l(),Uu=a("li"),mle=a("strong"),xFo=o("flaubert"),$Fo=o(" \u2014 "),Xq=a("a"),kFo=o("FlaubertWithLMHeadModel"),SFo=o(" (FlauBERT model)"),RFo=l(),Ju=a("li"),gle=a("strong"),BFo=o("flava"),PFo=o(" \u2014 "),zq=a("a"),IFo=o("FlavaForPreTraining"),qFo=o(" (Flava model)"),NFo=l(),Yu=a("li"),hle=a("strong"),jFo=o("fnet"),DFo=o(" \u2014 "),Qq=a("a"),GFo=o("FNetForPreTraining"),OFo=o(" (FNet model)"),VFo=l(),Ku=a("li"),ple=a("strong"),XFo=o("fsmt"),zFo=o(" \u2014 "),Wq=a("a"),QFo=o("FSMTForConditionalGeneration"),WFo=o(" (FairSeq Machine-Translation model)"),HFo=l(),Zu=a("li"),ule=a("strong"),UFo=o("funnel"),JFo=o(" \u2014 "),Hq=a("a"),YFo=o("FunnelForPreTraining"),KFo=o(" (Funnel Transformer model)"),ZFo=l(),e_=a("li"),_le=a("strong"),eTo=o("gpt2"),oTo=o(" \u2014 "),Uq=a("a"),rTo=o("GPT2LMHeadModel"),tTo=o(" (OpenAI GPT-2 model)"),aTo=l(),o_=a("li"),ble=a("strong"),nTo=o("ibert"),sTo=o(" \u2014 "),Jq=a("a"),lTo=o("IBertForMaskedLM"),iTo=o(" (I-BERT model)"),dTo=l(),r_=a("li"),vle=a("strong"),cTo=o("layoutlm"),fTo=o(" \u2014 "),Yq=a("a"),mTo=o("LayoutLMForMaskedLM"),gTo=o(" (LayoutLM model)"),hTo=l(),t_=a("li"),Fle=a("strong"),pTo=o("longformer"),uTo=o(" \u2014 "),Kq=a("a"),_To=o("LongformerForMaskedLM"),bTo=o(" (Longformer model)"),vTo=l(),a_=a("li"),Tle=a("strong"),FTo=o("lxmert"),TTo=o(" \u2014 "),Zq=a("a"),MTo=o("LxmertForPreTraining"),ETo=o(" (LXMERT model)"),CTo=l(),n_=a("li"),Mle=a("strong"),wTo=o("megatron-bert"),ATo=o(" \u2014 "),eN=a("a"),yTo=o("MegatronBertForPreTraining"),LTo=o(" (MegatronBert model)"),xTo=l(),s_=a("li"),Ele=a("strong"),$To=o("mobilebert"),kTo=o(" \u2014 "),oN=a("a"),STo=o("MobileBertForPreTraining"),RTo=o(" (MobileBERT model)"),BTo=l(),l_=a("li"),Cle=a("strong"),PTo=o("mpnet"),ITo=o(" \u2014 "),rN=a("a"),qTo=o("MPNetForMaskedLM"),NTo=o(" (MPNet model)"),jTo=l(),i_=a("li"),wle=a("strong"),DTo=o("openai-gpt"),GTo=o(" \u2014 "),tN=a("a"),OTo=o("OpenAIGPTLMHeadModel"),VTo=o(" (OpenAI GPT model)"),XTo=l(),d_=a("li"),Ale=a("strong"),zTo=o("retribert"),QTo=o(" \u2014 "),aN=a("a"),WTo=o("RetriBertModel"),HTo=o(" (RetriBERT model)"),UTo=l(),c_=a("li"),yle=a("strong"),JTo=o("roberta"),YTo=o(" \u2014 "),nN=a("a"),KTo=o("RobertaForMaskedLM"),ZTo=o(" (RoBERTa model)"),e7o=l(),f_=a("li"),Lle=a("strong"),o7o=o("squeezebert"),r7o=o(" \u2014 "),sN=a("a"),t7o=o("SqueezeBertForMaskedLM"),a7o=o(" (SqueezeBERT model)"),n7o=l(),m_=a("li"),xle=a("strong"),s7o=o("t5"),l7o=o(" \u2014 "),lN=a("a"),i7o=o("T5ForConditionalGeneration"),d7o=o(" (T5 model)"),c7o=l(),g_=a("li"),$le=a("strong"),f7o=o("tapas"),m7o=o(" \u2014 "),iN=a("a"),g7o=o("TapasForMaskedLM"),h7o=o(" (TAPAS model)"),p7o=l(),h_=a("li"),kle=a("strong"),u7o=o("transfo-xl"),_7o=o(" \u2014 "),dN=a("a"),b7o=o("TransfoXLLMHeadModel"),v7o=o(" (Transformer-XL model)"),F7o=l(),p_=a("li"),Sle=a("strong"),T7o=o("unispeech"),M7o=o(" \u2014 "),cN=a("a"),E7o=o("UniSpeechForPreTraining"),C7o=o(" (UniSpeech model)"),w7o=l(),u_=a("li"),Rle=a("strong"),A7o=o("unispeech-sat"),y7o=o(" \u2014 "),fN=a("a"),L7o=o("UniSpeechSatForPreTraining"),x7o=o(" (UniSpeechSat model)"),$7o=l(),__=a("li"),Ble=a("strong"),k7o=o("visual_bert"),S7o=o(" \u2014 "),mN=a("a"),R7o=o("VisualBertForPreTraining"),B7o=o(" (VisualBert model)"),P7o=l(),b_=a("li"),Ple=a("strong"),I7o=o("vit_mae"),q7o=o(" \u2014 "),gN=a("a"),N7o=o("ViTMAEForPreTraining"),j7o=o(" (ViTMAE model)"),D7o=l(),v_=a("li"),Ile=a("strong"),G7o=o("wav2vec2"),O7o=o(" \u2014 "),hN=a("a"),V7o=o("Wav2Vec2ForPreTraining"),X7o=o(" (Wav2Vec2 model)"),z7o=l(),F_=a("li"),qle=a("strong"),Q7o=o("xlm"),W7o=o(" \u2014 "),pN=a("a"),H7o=o("XLMWithLMHeadModel"),U7o=o(" (XLM model)"),J7o=l(),T_=a("li"),Nle=a("strong"),Y7o=o("xlm-roberta"),K7o=o(" \u2014 "),uN=a("a"),Z7o=o("XLMRobertaForMaskedLM"),e9o=o(" (XLM-RoBERTa model)"),o9o=l(),M_=a("li"),jle=a("strong"),r9o=o("xlm-roberta-xl"),t9o=o(" \u2014 "),_N=a("a"),a9o=o("XLMRobertaXLForMaskedLM"),n9o=o(" (XLM-RoBERTa-XL model)"),s9o=l(),E_=a("li"),Dle=a("strong"),l9o=o("xlnet"),i9o=o(" \u2014 "),bN=a("a"),d9o=o("XLNetLMHeadModel"),c9o=o(" (XLNet model)"),f9o=l(),C_=a("p"),m9o=o("The model is set in evaluation mode by default using "),Gle=a("code"),g9o=o("model.eval()"),h9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=a("code"),p9o=o("model.train()"),u9o=l(),F(w_.$$.fragment),rIe=l(),Li=a("h2"),A_=a("a"),Vle=a("span"),F(R6.$$.fragment),_9o=l(),Xle=a("span"),b9o=o("AutoModelForCausalLM"),tIe=l(),$o=a("div"),F(B6.$$.fragment),v9o=l(),xi=a("p"),F9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vN=a("a"),T9o=o("from_pretrained()"),M9o=o(" class method or the "),FN=a("a"),E9o=o("from_config()"),C9o=o(` class
method.`),w9o=l(),P6=a("p"),A9o=o("This class cannot be instantiated directly using "),zle=a("code"),y9o=o("__init__()"),L9o=o(" (throws an error)."),x9o=l(),tt=a("div"),F(I6.$$.fragment),$9o=l(),Qle=a("p"),k9o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),S9o=l(),$i=a("p"),R9o=o(`Note:
Loading a model from its configuration file does `),Wle=a("strong"),B9o=o("not"),P9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=a("a"),I9o=o("from_pretrained()"),q9o=o(" to load the model weights."),N9o=l(),F(y_.$$.fragment),j9o=l(),Je=a("div"),F(q6.$$.fragment),D9o=l(),Hle=a("p"),G9o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O9o=l(),La=a("p"),V9o=o("The model class to instantiate is selected based on the "),Ule=a("code"),X9o=o("model_type"),z9o=o(` property of the config object (either
passed as an argument or loaded from `),Jle=a("code"),Q9o=o("pretrained_model_name_or_path"),W9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=a("code"),H9o=o("pretrained_model_name_or_path"),U9o=o(":"),J9o=l(),z=a("ul"),L_=a("li"),Kle=a("strong"),Y9o=o("bart"),K9o=o(" \u2014 "),MN=a("a"),Z9o=o("BartForCausalLM"),eMo=o(" (BART model)"),oMo=l(),x_=a("li"),Zle=a("strong"),rMo=o("bert"),tMo=o(" \u2014 "),EN=a("a"),aMo=o("BertLMHeadModel"),nMo=o(" (BERT model)"),sMo=l(),$_=a("li"),eie=a("strong"),lMo=o("bert-generation"),iMo=o(" \u2014 "),CN=a("a"),dMo=o("BertGenerationDecoder"),cMo=o(" (Bert Generation model)"),fMo=l(),k_=a("li"),oie=a("strong"),mMo=o("big_bird"),gMo=o(" \u2014 "),wN=a("a"),hMo=o("BigBirdForCausalLM"),pMo=o(" (BigBird model)"),uMo=l(),S_=a("li"),rie=a("strong"),_Mo=o("bigbird_pegasus"),bMo=o(" \u2014 "),AN=a("a"),vMo=o("BigBirdPegasusForCausalLM"),FMo=o(" (BigBirdPegasus model)"),TMo=l(),R_=a("li"),tie=a("strong"),MMo=o("blenderbot"),EMo=o(" \u2014 "),yN=a("a"),CMo=o("BlenderbotForCausalLM"),wMo=o(" (Blenderbot model)"),AMo=l(),B_=a("li"),aie=a("strong"),yMo=o("blenderbot-small"),LMo=o(" \u2014 "),LN=a("a"),xMo=o("BlenderbotSmallForCausalLM"),$Mo=o(" (BlenderbotSmall model)"),kMo=l(),P_=a("li"),nie=a("strong"),SMo=o("camembert"),RMo=o(" \u2014 "),xN=a("a"),BMo=o("CamembertForCausalLM"),PMo=o(" (CamemBERT model)"),IMo=l(),I_=a("li"),sie=a("strong"),qMo=o("ctrl"),NMo=o(" \u2014 "),$N=a("a"),jMo=o("CTRLLMHeadModel"),DMo=o(" (CTRL model)"),GMo=l(),q_=a("li"),lie=a("strong"),OMo=o("data2vec-text"),VMo=o(" \u2014 "),kN=a("a"),XMo=o("Data2VecTextForCausalLM"),zMo=o(" (Data2VecText model)"),QMo=l(),N_=a("li"),iie=a("strong"),WMo=o("electra"),HMo=o(" \u2014 "),SN=a("a"),UMo=o("ElectraForCausalLM"),JMo=o(" (ELECTRA model)"),YMo=l(),j_=a("li"),die=a("strong"),KMo=o("gpt2"),ZMo=o(" \u2014 "),RN=a("a"),e4o=o("GPT2LMHeadModel"),o4o=o(" (OpenAI GPT-2 model)"),r4o=l(),D_=a("li"),cie=a("strong"),t4o=o("gpt_neo"),a4o=o(" \u2014 "),BN=a("a"),n4o=o("GPTNeoForCausalLM"),s4o=o(" (GPT Neo model)"),l4o=l(),G_=a("li"),fie=a("strong"),i4o=o("gptj"),d4o=o(" \u2014 "),PN=a("a"),c4o=o("GPTJForCausalLM"),f4o=o(" (GPT-J model)"),m4o=l(),O_=a("li"),mie=a("strong"),g4o=o("marian"),h4o=o(" \u2014 "),IN=a("a"),p4o=o("MarianForCausalLM"),u4o=o(" (Marian model)"),_4o=l(),V_=a("li"),gie=a("strong"),b4o=o("mbart"),v4o=o(" \u2014 "),qN=a("a"),F4o=o("MBartForCausalLM"),T4o=o(" (mBART model)"),M4o=l(),X_=a("li"),hie=a("strong"),E4o=o("megatron-bert"),C4o=o(" \u2014 "),NN=a("a"),w4o=o("MegatronBertForCausalLM"),A4o=o(" (MegatronBert model)"),y4o=l(),z_=a("li"),pie=a("strong"),L4o=o("openai-gpt"),x4o=o(" \u2014 "),jN=a("a"),$4o=o("OpenAIGPTLMHeadModel"),k4o=o(" (OpenAI GPT model)"),S4o=l(),Q_=a("li"),uie=a("strong"),R4o=o("opt"),B4o=o(" \u2014 "),DN=a("a"),P4o=o("OPTForCausalLM"),I4o=o(" (OPT model)"),q4o=l(),W_=a("li"),_ie=a("strong"),N4o=o("pegasus"),j4o=o(" \u2014 "),GN=a("a"),D4o=o("PegasusForCausalLM"),G4o=o(" (Pegasus model)"),O4o=l(),H_=a("li"),bie=a("strong"),V4o=o("plbart"),X4o=o(" \u2014 "),ON=a("a"),z4o=o("PLBartForCausalLM"),Q4o=o(" (PLBart model)"),W4o=l(),U_=a("li"),vie=a("strong"),H4o=o("prophetnet"),U4o=o(" \u2014 "),VN=a("a"),J4o=o("ProphetNetForCausalLM"),Y4o=o(" (ProphetNet model)"),K4o=l(),J_=a("li"),Fie=a("strong"),Z4o=o("qdqbert"),eEo=o(" \u2014 "),XN=a("a"),oEo=o("QDQBertLMHeadModel"),rEo=o(" (QDQBert model)"),tEo=l(),Y_=a("li"),Tie=a("strong"),aEo=o("reformer"),nEo=o(" \u2014 "),zN=a("a"),sEo=o("ReformerModelWithLMHead"),lEo=o(" (Reformer model)"),iEo=l(),K_=a("li"),Mie=a("strong"),dEo=o("rembert"),cEo=o(" \u2014 "),QN=a("a"),fEo=o("RemBertForCausalLM"),mEo=o(" (RemBERT model)"),gEo=l(),Z_=a("li"),Eie=a("strong"),hEo=o("roberta"),pEo=o(" \u2014 "),WN=a("a"),uEo=o("RobertaForCausalLM"),_Eo=o(" (RoBERTa model)"),bEo=l(),e1=a("li"),Cie=a("strong"),vEo=o("roformer"),FEo=o(" \u2014 "),HN=a("a"),TEo=o("RoFormerForCausalLM"),MEo=o(" (RoFormer model)"),EEo=l(),o1=a("li"),wie=a("strong"),CEo=o("speech_to_text_2"),wEo=o(" \u2014 "),UN=a("a"),AEo=o("Speech2Text2ForCausalLM"),yEo=o(" (Speech2Text2 model)"),LEo=l(),r1=a("li"),Aie=a("strong"),xEo=o("transfo-xl"),$Eo=o(" \u2014 "),JN=a("a"),kEo=o("TransfoXLLMHeadModel"),SEo=o(" (Transformer-XL model)"),REo=l(),t1=a("li"),yie=a("strong"),BEo=o("trocr"),PEo=o(" \u2014 "),YN=a("a"),IEo=o("TrOCRForCausalLM"),qEo=o(" (TrOCR model)"),NEo=l(),a1=a("li"),Lie=a("strong"),jEo=o("xglm"),DEo=o(" \u2014 "),KN=a("a"),GEo=o("XGLMForCausalLM"),OEo=o(" (XGLM model)"),VEo=l(),n1=a("li"),xie=a("strong"),XEo=o("xlm"),zEo=o(" \u2014 "),ZN=a("a"),QEo=o("XLMWithLMHeadModel"),WEo=o(" (XLM model)"),HEo=l(),s1=a("li"),$ie=a("strong"),UEo=o("xlm-prophetnet"),JEo=o(" \u2014 "),ej=a("a"),YEo=o("XLMProphetNetForCausalLM"),KEo=o(" (XLMProphetNet model)"),ZEo=l(),l1=a("li"),kie=a("strong"),e5o=o("xlm-roberta"),o5o=o(" \u2014 "),oj=a("a"),r5o=o("XLMRobertaForCausalLM"),t5o=o(" (XLM-RoBERTa model)"),a5o=l(),i1=a("li"),Sie=a("strong"),n5o=o("xlm-roberta-xl"),s5o=o(" \u2014 "),rj=a("a"),l5o=o("XLMRobertaXLForCausalLM"),i5o=o(" (XLM-RoBERTa-XL model)"),d5o=l(),d1=a("li"),Rie=a("strong"),c5o=o("xlnet"),f5o=o(" \u2014 "),tj=a("a"),m5o=o("XLNetLMHeadModel"),g5o=o(" (XLNet model)"),h5o=l(),c1=a("p"),p5o=o("The model is set in evaluation mode by default using "),Bie=a("code"),u5o=o("model.eval()"),_5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=a("code"),b5o=o("model.train()"),v5o=l(),F(f1.$$.fragment),aIe=l(),ki=a("h2"),m1=a("a"),Iie=a("span"),F(N6.$$.fragment),F5o=l(),qie=a("span"),T5o=o("AutoModelForMaskedLM"),nIe=l(),ko=a("div"),F(j6.$$.fragment),M5o=l(),Si=a("p"),E5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aj=a("a"),C5o=o("from_pretrained()"),w5o=o(" class method or the "),nj=a("a"),A5o=o("from_config()"),y5o=o(` class
method.`),L5o=l(),D6=a("p"),x5o=o("This class cannot be instantiated directly using "),Nie=a("code"),$5o=o("__init__()"),k5o=o(" (throws an error)."),S5o=l(),at=a("div"),F(G6.$$.fragment),R5o=l(),jie=a("p"),B5o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P5o=l(),Ri=a("p"),I5o=o(`Note:
Loading a model from its configuration file does `),Die=a("strong"),q5o=o("not"),N5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=a("a"),j5o=o("from_pretrained()"),D5o=o(" to load the model weights."),G5o=l(),F(g1.$$.fragment),O5o=l(),Ye=a("div"),F(O6.$$.fragment),V5o=l(),Gie=a("p"),X5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),z5o=l(),xa=a("p"),Q5o=o("The model class to instantiate is selected based on the "),Oie=a("code"),W5o=o("model_type"),H5o=o(` property of the config object (either
passed as an argument or loaded from `),Vie=a("code"),U5o=o("pretrained_model_name_or_path"),J5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=a("code"),Y5o=o("pretrained_model_name_or_path"),K5o=o(":"),Z5o=l(),Q=a("ul"),h1=a("li"),zie=a("strong"),eCo=o("albert"),oCo=o(" \u2014 "),lj=a("a"),rCo=o("AlbertForMaskedLM"),tCo=o(" (ALBERT model)"),aCo=l(),p1=a("li"),Qie=a("strong"),nCo=o("bart"),sCo=o(" \u2014 "),ij=a("a"),lCo=o("BartForConditionalGeneration"),iCo=o(" (BART model)"),dCo=l(),u1=a("li"),Wie=a("strong"),cCo=o("bert"),fCo=o(" \u2014 "),dj=a("a"),mCo=o("BertForMaskedLM"),gCo=o(" (BERT model)"),hCo=l(),_1=a("li"),Hie=a("strong"),pCo=o("big_bird"),uCo=o(" \u2014 "),cj=a("a"),_Co=o("BigBirdForMaskedLM"),bCo=o(" (BigBird model)"),vCo=l(),b1=a("li"),Uie=a("strong"),FCo=o("camembert"),TCo=o(" \u2014 "),fj=a("a"),MCo=o("CamembertForMaskedLM"),ECo=o(" (CamemBERT model)"),CCo=l(),v1=a("li"),Jie=a("strong"),wCo=o("convbert"),ACo=o(" \u2014 "),mj=a("a"),yCo=o("ConvBertForMaskedLM"),LCo=o(" (ConvBERT model)"),xCo=l(),F1=a("li"),Yie=a("strong"),$Co=o("data2vec-text"),kCo=o(" \u2014 "),gj=a("a"),SCo=o("Data2VecTextForMaskedLM"),RCo=o(" (Data2VecText model)"),BCo=l(),T1=a("li"),Kie=a("strong"),PCo=o("deberta"),ICo=o(" \u2014 "),hj=a("a"),qCo=o("DebertaForMaskedLM"),NCo=o(" (DeBERTa model)"),jCo=l(),M1=a("li"),Zie=a("strong"),DCo=o("deberta-v2"),GCo=o(" \u2014 "),pj=a("a"),OCo=o("DebertaV2ForMaskedLM"),VCo=o(" (DeBERTa-v2 model)"),XCo=l(),E1=a("li"),ede=a("strong"),zCo=o("distilbert"),QCo=o(" \u2014 "),uj=a("a"),WCo=o("DistilBertForMaskedLM"),HCo=o(" (DistilBERT model)"),UCo=l(),C1=a("li"),ode=a("strong"),JCo=o("electra"),YCo=o(" \u2014 "),_j=a("a"),KCo=o("ElectraForMaskedLM"),ZCo=o(" (ELECTRA model)"),e3o=l(),w1=a("li"),rde=a("strong"),o3o=o("flaubert"),r3o=o(" \u2014 "),bj=a("a"),t3o=o("FlaubertWithLMHeadModel"),a3o=o(" (FlauBERT model)"),n3o=l(),A1=a("li"),tde=a("strong"),s3o=o("fnet"),l3o=o(" \u2014 "),vj=a("a"),i3o=o("FNetForMaskedLM"),d3o=o(" (FNet model)"),c3o=l(),y1=a("li"),ade=a("strong"),f3o=o("funnel"),m3o=o(" \u2014 "),Fj=a("a"),g3o=o("FunnelForMaskedLM"),h3o=o(" (Funnel Transformer model)"),p3o=l(),L1=a("li"),nde=a("strong"),u3o=o("ibert"),_3o=o(" \u2014 "),Tj=a("a"),b3o=o("IBertForMaskedLM"),v3o=o(" (I-BERT model)"),F3o=l(),x1=a("li"),sde=a("strong"),T3o=o("layoutlm"),M3o=o(" \u2014 "),Mj=a("a"),E3o=o("LayoutLMForMaskedLM"),C3o=o(" (LayoutLM model)"),w3o=l(),$1=a("li"),lde=a("strong"),A3o=o("longformer"),y3o=o(" \u2014 "),Ej=a("a"),L3o=o("LongformerForMaskedLM"),x3o=o(" (Longformer model)"),$3o=l(),k1=a("li"),ide=a("strong"),k3o=o("mbart"),S3o=o(" \u2014 "),Cj=a("a"),R3o=o("MBartForConditionalGeneration"),B3o=o(" (mBART model)"),P3o=l(),S1=a("li"),dde=a("strong"),I3o=o("megatron-bert"),q3o=o(" \u2014 "),wj=a("a"),N3o=o("MegatronBertForMaskedLM"),j3o=o(" (MegatronBert model)"),D3o=l(),R1=a("li"),cde=a("strong"),G3o=o("mobilebert"),O3o=o(" \u2014 "),Aj=a("a"),V3o=o("MobileBertForMaskedLM"),X3o=o(" (MobileBERT model)"),z3o=l(),B1=a("li"),fde=a("strong"),Q3o=o("mpnet"),W3o=o(" \u2014 "),yj=a("a"),H3o=o("MPNetForMaskedLM"),U3o=o(" (MPNet model)"),J3o=l(),P1=a("li"),mde=a("strong"),Y3o=o("nystromformer"),K3o=o(" \u2014 "),Lj=a("a"),Z3o=o("NystromformerForMaskedLM"),ewo=o(" (Nystromformer model)"),owo=l(),I1=a("li"),gde=a("strong"),rwo=o("perceiver"),two=o(" \u2014 "),xj=a("a"),awo=o("PerceiverForMaskedLM"),nwo=o(" (Perceiver model)"),swo=l(),q1=a("li"),hde=a("strong"),lwo=o("qdqbert"),iwo=o(" \u2014 "),$j=a("a"),dwo=o("QDQBertForMaskedLM"),cwo=o(" (QDQBert model)"),fwo=l(),N1=a("li"),pde=a("strong"),mwo=o("reformer"),gwo=o(" \u2014 "),kj=a("a"),hwo=o("ReformerForMaskedLM"),pwo=o(" (Reformer model)"),uwo=l(),j1=a("li"),ude=a("strong"),_wo=o("rembert"),bwo=o(" \u2014 "),Sj=a("a"),vwo=o("RemBertForMaskedLM"),Fwo=o(" (RemBERT model)"),Two=l(),D1=a("li"),_de=a("strong"),Mwo=o("roberta"),Ewo=o(" \u2014 "),Rj=a("a"),Cwo=o("RobertaForMaskedLM"),wwo=o(" (RoBERTa model)"),Awo=l(),G1=a("li"),bde=a("strong"),ywo=o("roformer"),Lwo=o(" \u2014 "),Bj=a("a"),xwo=o("RoFormerForMaskedLM"),$wo=o(" (RoFormer model)"),kwo=l(),O1=a("li"),vde=a("strong"),Swo=o("squeezebert"),Rwo=o(" \u2014 "),Pj=a("a"),Bwo=o("SqueezeBertForMaskedLM"),Pwo=o(" (SqueezeBERT model)"),Iwo=l(),V1=a("li"),Fde=a("strong"),qwo=o("tapas"),Nwo=o(" \u2014 "),Ij=a("a"),jwo=o("TapasForMaskedLM"),Dwo=o(" (TAPAS model)"),Gwo=l(),X1=a("li"),Tde=a("strong"),Owo=o("wav2vec2"),Vwo=o(" \u2014 "),Mde=a("code"),Xwo=o("Wav2Vec2ForMaskedLM"),zwo=o(" (Wav2Vec2 model)"),Qwo=l(),z1=a("li"),Ede=a("strong"),Wwo=o("xlm"),Hwo=o(" \u2014 "),qj=a("a"),Uwo=o("XLMWithLMHeadModel"),Jwo=o(" (XLM model)"),Ywo=l(),Q1=a("li"),Cde=a("strong"),Kwo=o("xlm-roberta"),Zwo=o(" \u2014 "),Nj=a("a"),eAo=o("XLMRobertaForMaskedLM"),oAo=o(" (XLM-RoBERTa model)"),rAo=l(),W1=a("li"),wde=a("strong"),tAo=o("xlm-roberta-xl"),aAo=o(" \u2014 "),jj=a("a"),nAo=o("XLMRobertaXLForMaskedLM"),sAo=o(" (XLM-RoBERTa-XL model)"),lAo=l(),H1=a("li"),Ade=a("strong"),iAo=o("yoso"),dAo=o(" \u2014 "),Dj=a("a"),cAo=o("YosoForMaskedLM"),fAo=o(" (YOSO model)"),mAo=l(),U1=a("p"),gAo=o("The model is set in evaluation mode by default using "),yde=a("code"),hAo=o("model.eval()"),pAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=a("code"),uAo=o("model.train()"),_Ao=l(),F(J1.$$.fragment),sIe=l(),Bi=a("h2"),Y1=a("a"),xde=a("span"),F(V6.$$.fragment),bAo=l(),$de=a("span"),vAo=o("AutoModelForSeq2SeqLM"),lIe=l(),So=a("div"),F(X6.$$.fragment),FAo=l(),Pi=a("p"),TAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gj=a("a"),MAo=o("from_pretrained()"),EAo=o(" class method or the "),Oj=a("a"),CAo=o("from_config()"),wAo=o(` class
method.`),AAo=l(),z6=a("p"),yAo=o("This class cannot be instantiated directly using "),kde=a("code"),LAo=o("__init__()"),xAo=o(" (throws an error)."),$Ao=l(),nt=a("div"),F(Q6.$$.fragment),kAo=l(),Sde=a("p"),SAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RAo=l(),Ii=a("p"),BAo=o(`Note:
Loading a model from its configuration file does `),Rde=a("strong"),PAo=o("not"),IAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),qAo=o("from_pretrained()"),NAo=o(" to load the model weights."),jAo=l(),F(K1.$$.fragment),DAo=l(),Ke=a("div"),F(W6.$$.fragment),GAo=l(),Bde=a("p"),OAo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VAo=l(),$a=a("p"),XAo=o("The model class to instantiate is selected based on the "),Pde=a("code"),zAo=o("model_type"),QAo=o(` property of the config object (either
passed as an argument or loaded from `),Ide=a("code"),WAo=o("pretrained_model_name_or_path"),HAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=a("code"),UAo=o("pretrained_model_name_or_path"),JAo=o(":"),YAo=l(),pe=a("ul"),Z1=a("li"),Nde=a("strong"),KAo=o("bart"),ZAo=o(" \u2014 "),Xj=a("a"),e6o=o("BartForConditionalGeneration"),o6o=o(" (BART model)"),r6o=l(),e2=a("li"),jde=a("strong"),t6o=o("bigbird_pegasus"),a6o=o(" \u2014 "),zj=a("a"),n6o=o("BigBirdPegasusForConditionalGeneration"),s6o=o(" (BigBirdPegasus model)"),l6o=l(),o2=a("li"),Dde=a("strong"),i6o=o("blenderbot"),d6o=o(" \u2014 "),Qj=a("a"),c6o=o("BlenderbotForConditionalGeneration"),f6o=o(" (Blenderbot model)"),m6o=l(),r2=a("li"),Gde=a("strong"),g6o=o("blenderbot-small"),h6o=o(" \u2014 "),Wj=a("a"),p6o=o("BlenderbotSmallForConditionalGeneration"),u6o=o(" (BlenderbotSmall model)"),_6o=l(),t2=a("li"),Ode=a("strong"),b6o=o("encoder-decoder"),v6o=o(" \u2014 "),Hj=a("a"),F6o=o("EncoderDecoderModel"),T6o=o(" (Encoder decoder model)"),M6o=l(),a2=a("li"),Vde=a("strong"),E6o=o("fsmt"),C6o=o(" \u2014 "),Uj=a("a"),w6o=o("FSMTForConditionalGeneration"),A6o=o(" (FairSeq Machine-Translation model)"),y6o=l(),n2=a("li"),Xde=a("strong"),L6o=o("led"),x6o=o(" \u2014 "),Jj=a("a"),$6o=o("LEDForConditionalGeneration"),k6o=o(" (LED model)"),S6o=l(),s2=a("li"),zde=a("strong"),R6o=o("m2m_100"),B6o=o(" \u2014 "),Yj=a("a"),P6o=o("M2M100ForConditionalGeneration"),I6o=o(" (M2M100 model)"),q6o=l(),l2=a("li"),Qde=a("strong"),N6o=o("marian"),j6o=o(" \u2014 "),Kj=a("a"),D6o=o("MarianMTModel"),G6o=o(" (Marian model)"),O6o=l(),i2=a("li"),Wde=a("strong"),V6o=o("mbart"),X6o=o(" \u2014 "),Zj=a("a"),z6o=o("MBartForConditionalGeneration"),Q6o=o(" (mBART model)"),W6o=l(),d2=a("li"),Hde=a("strong"),H6o=o("mt5"),U6o=o(" \u2014 "),eD=a("a"),J6o=o("MT5ForConditionalGeneration"),Y6o=o(" (mT5 model)"),K6o=l(),c2=a("li"),Ude=a("strong"),Z6o=o("pegasus"),e0o=o(" \u2014 "),oD=a("a"),o0o=o("PegasusForConditionalGeneration"),r0o=o(" (Pegasus model)"),t0o=l(),f2=a("li"),Jde=a("strong"),a0o=o("plbart"),n0o=o(" \u2014 "),rD=a("a"),s0o=o("PLBartForConditionalGeneration"),l0o=o(" (PLBart model)"),i0o=l(),m2=a("li"),Yde=a("strong"),d0o=o("prophetnet"),c0o=o(" \u2014 "),tD=a("a"),f0o=o("ProphetNetForConditionalGeneration"),m0o=o(" (ProphetNet model)"),g0o=l(),g2=a("li"),Kde=a("strong"),h0o=o("t5"),p0o=o(" \u2014 "),aD=a("a"),u0o=o("T5ForConditionalGeneration"),_0o=o(" (T5 model)"),b0o=l(),h2=a("li"),Zde=a("strong"),v0o=o("xlm-prophetnet"),F0o=o(" \u2014 "),nD=a("a"),T0o=o("XLMProphetNetForConditionalGeneration"),M0o=o(" (XLMProphetNet model)"),E0o=l(),p2=a("p"),C0o=o("The model is set in evaluation mode by default using "),ece=a("code"),w0o=o("model.eval()"),A0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),y0o=o("model.train()"),L0o=l(),F(u2.$$.fragment),iIe=l(),qi=a("h2"),_2=a("a"),rce=a("span"),F(H6.$$.fragment),x0o=l(),tce=a("span"),$0o=o("AutoModelForSequenceClassification"),dIe=l(),Ro=a("div"),F(U6.$$.fragment),k0o=l(),Ni=a("p"),S0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sD=a("a"),R0o=o("from_pretrained()"),B0o=o(" class method or the "),lD=a("a"),P0o=o("from_config()"),I0o=o(` class
method.`),q0o=l(),J6=a("p"),N0o=o("This class cannot be instantiated directly using "),ace=a("code"),j0o=o("__init__()"),D0o=o(" (throws an error)."),G0o=l(),st=a("div"),F(Y6.$$.fragment),O0o=l(),nce=a("p"),V0o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X0o=l(),ji=a("p"),z0o=o(`Note:
Loading a model from its configuration file does `),sce=a("strong"),Q0o=o("not"),W0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=a("a"),H0o=o("from_pretrained()"),U0o=o(" to load the model weights."),J0o=l(),F(b2.$$.fragment),Y0o=l(),Ze=a("div"),F(K6.$$.fragment),K0o=l(),lce=a("p"),Z0o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eyo=l(),ka=a("p"),oyo=o("The model class to instantiate is selected based on the "),ice=a("code"),ryo=o("model_type"),tyo=o(` property of the config object (either
passed as an argument or loaded from `),dce=a("code"),ayo=o("pretrained_model_name_or_path"),nyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=a("code"),syo=o("pretrained_model_name_or_path"),lyo=o(":"),iyo=l(),q=a("ul"),v2=a("li"),fce=a("strong"),dyo=o("albert"),cyo=o(" \u2014 "),dD=a("a"),fyo=o("AlbertForSequenceClassification"),myo=o(" (ALBERT model)"),gyo=l(),F2=a("li"),mce=a("strong"),hyo=o("bart"),pyo=o(" \u2014 "),cD=a("a"),uyo=o("BartForSequenceClassification"),_yo=o(" (BART model)"),byo=l(),T2=a("li"),gce=a("strong"),vyo=o("bert"),Fyo=o(" \u2014 "),fD=a("a"),Tyo=o("BertForSequenceClassification"),Myo=o(" (BERT model)"),Eyo=l(),M2=a("li"),hce=a("strong"),Cyo=o("big_bird"),wyo=o(" \u2014 "),mD=a("a"),Ayo=o("BigBirdForSequenceClassification"),yyo=o(" (BigBird model)"),Lyo=l(),E2=a("li"),pce=a("strong"),xyo=o("bigbird_pegasus"),$yo=o(" \u2014 "),gD=a("a"),kyo=o("BigBirdPegasusForSequenceClassification"),Syo=o(" (BigBirdPegasus model)"),Ryo=l(),C2=a("li"),uce=a("strong"),Byo=o("camembert"),Pyo=o(" \u2014 "),hD=a("a"),Iyo=o("CamembertForSequenceClassification"),qyo=o(" (CamemBERT model)"),Nyo=l(),w2=a("li"),_ce=a("strong"),jyo=o("canine"),Dyo=o(" \u2014 "),pD=a("a"),Gyo=o("CanineForSequenceClassification"),Oyo=o(" (Canine model)"),Vyo=l(),A2=a("li"),bce=a("strong"),Xyo=o("convbert"),zyo=o(" \u2014 "),uD=a("a"),Qyo=o("ConvBertForSequenceClassification"),Wyo=o(" (ConvBERT model)"),Hyo=l(),y2=a("li"),vce=a("strong"),Uyo=o("ctrl"),Jyo=o(" \u2014 "),_D=a("a"),Yyo=o("CTRLForSequenceClassification"),Kyo=o(" (CTRL model)"),Zyo=l(),L2=a("li"),Fce=a("strong"),eLo=o("data2vec-text"),oLo=o(" \u2014 "),bD=a("a"),rLo=o("Data2VecTextForSequenceClassification"),tLo=o(" (Data2VecText model)"),aLo=l(),x2=a("li"),Tce=a("strong"),nLo=o("deberta"),sLo=o(" \u2014 "),vD=a("a"),lLo=o("DebertaForSequenceClassification"),iLo=o(" (DeBERTa model)"),dLo=l(),$2=a("li"),Mce=a("strong"),cLo=o("deberta-v2"),fLo=o(" \u2014 "),FD=a("a"),mLo=o("DebertaV2ForSequenceClassification"),gLo=o(" (DeBERTa-v2 model)"),hLo=l(),k2=a("li"),Ece=a("strong"),pLo=o("distilbert"),uLo=o(" \u2014 "),TD=a("a"),_Lo=o("DistilBertForSequenceClassification"),bLo=o(" (DistilBERT model)"),vLo=l(),S2=a("li"),Cce=a("strong"),FLo=o("electra"),TLo=o(" \u2014 "),MD=a("a"),MLo=o("ElectraForSequenceClassification"),ELo=o(" (ELECTRA model)"),CLo=l(),R2=a("li"),wce=a("strong"),wLo=o("flaubert"),ALo=o(" \u2014 "),ED=a("a"),yLo=o("FlaubertForSequenceClassification"),LLo=o(" (FlauBERT model)"),xLo=l(),B2=a("li"),Ace=a("strong"),$Lo=o("fnet"),kLo=o(" \u2014 "),CD=a("a"),SLo=o("FNetForSequenceClassification"),RLo=o(" (FNet model)"),BLo=l(),P2=a("li"),yce=a("strong"),PLo=o("funnel"),ILo=o(" \u2014 "),wD=a("a"),qLo=o("FunnelForSequenceClassification"),NLo=o(" (Funnel Transformer model)"),jLo=l(),I2=a("li"),Lce=a("strong"),DLo=o("gpt2"),GLo=o(" \u2014 "),AD=a("a"),OLo=o("GPT2ForSequenceClassification"),VLo=o(" (OpenAI GPT-2 model)"),XLo=l(),q2=a("li"),xce=a("strong"),zLo=o("gpt_neo"),QLo=o(" \u2014 "),yD=a("a"),WLo=o("GPTNeoForSequenceClassification"),HLo=o(" (GPT Neo model)"),ULo=l(),N2=a("li"),$ce=a("strong"),JLo=o("gptj"),YLo=o(" \u2014 "),LD=a("a"),KLo=o("GPTJForSequenceClassification"),ZLo=o(" (GPT-J model)"),e8o=l(),j2=a("li"),kce=a("strong"),o8o=o("ibert"),r8o=o(" \u2014 "),xD=a("a"),t8o=o("IBertForSequenceClassification"),a8o=o(" (I-BERT model)"),n8o=l(),D2=a("li"),Sce=a("strong"),s8o=o("layoutlm"),l8o=o(" \u2014 "),$D=a("a"),i8o=o("LayoutLMForSequenceClassification"),d8o=o(" (LayoutLM model)"),c8o=l(),G2=a("li"),Rce=a("strong"),f8o=o("layoutlmv2"),m8o=o(" \u2014 "),kD=a("a"),g8o=o("LayoutLMv2ForSequenceClassification"),h8o=o(" (LayoutLMv2 model)"),p8o=l(),O2=a("li"),Bce=a("strong"),u8o=o("led"),_8o=o(" \u2014 "),SD=a("a"),b8o=o("LEDForSequenceClassification"),v8o=o(" (LED model)"),F8o=l(),V2=a("li"),Pce=a("strong"),T8o=o("longformer"),M8o=o(" \u2014 "),RD=a("a"),E8o=o("LongformerForSequenceClassification"),C8o=o(" (Longformer model)"),w8o=l(),X2=a("li"),Ice=a("strong"),A8o=o("mbart"),y8o=o(" \u2014 "),BD=a("a"),L8o=o("MBartForSequenceClassification"),x8o=o(" (mBART model)"),$8o=l(),z2=a("li"),qce=a("strong"),k8o=o("megatron-bert"),S8o=o(" \u2014 "),PD=a("a"),R8o=o("MegatronBertForSequenceClassification"),B8o=o(" (MegatronBert model)"),P8o=l(),Q2=a("li"),Nce=a("strong"),I8o=o("mobilebert"),q8o=o(" \u2014 "),ID=a("a"),N8o=o("MobileBertForSequenceClassification"),j8o=o(" (MobileBERT model)"),D8o=l(),W2=a("li"),jce=a("strong"),G8o=o("mpnet"),O8o=o(" \u2014 "),qD=a("a"),V8o=o("MPNetForSequenceClassification"),X8o=o(" (MPNet model)"),z8o=l(),H2=a("li"),Dce=a("strong"),Q8o=o("nystromformer"),W8o=o(" \u2014 "),ND=a("a"),H8o=o("NystromformerForSequenceClassification"),U8o=o(" (Nystromformer model)"),J8o=l(),U2=a("li"),Gce=a("strong"),Y8o=o("openai-gpt"),K8o=o(" \u2014 "),jD=a("a"),Z8o=o("OpenAIGPTForSequenceClassification"),exo=o(" (OpenAI GPT model)"),oxo=l(),J2=a("li"),Oce=a("strong"),rxo=o("perceiver"),txo=o(" \u2014 "),DD=a("a"),axo=o("PerceiverForSequenceClassification"),nxo=o(" (Perceiver model)"),sxo=l(),Y2=a("li"),Vce=a("strong"),lxo=o("plbart"),ixo=o(" \u2014 "),GD=a("a"),dxo=o("PLBartForSequenceClassification"),cxo=o(" (PLBart model)"),fxo=l(),K2=a("li"),Xce=a("strong"),mxo=o("qdqbert"),gxo=o(" \u2014 "),OD=a("a"),hxo=o("QDQBertForSequenceClassification"),pxo=o(" (QDQBert model)"),uxo=l(),Z2=a("li"),zce=a("strong"),_xo=o("reformer"),bxo=o(" \u2014 "),VD=a("a"),vxo=o("ReformerForSequenceClassification"),Fxo=o(" (Reformer model)"),Txo=l(),eb=a("li"),Qce=a("strong"),Mxo=o("rembert"),Exo=o(" \u2014 "),XD=a("a"),Cxo=o("RemBertForSequenceClassification"),wxo=o(" (RemBERT model)"),Axo=l(),ob=a("li"),Wce=a("strong"),yxo=o("roberta"),Lxo=o(" \u2014 "),zD=a("a"),xxo=o("RobertaForSequenceClassification"),$xo=o(" (RoBERTa model)"),kxo=l(),rb=a("li"),Hce=a("strong"),Sxo=o("roformer"),Rxo=o(" \u2014 "),QD=a("a"),Bxo=o("RoFormerForSequenceClassification"),Pxo=o(" (RoFormer model)"),Ixo=l(),tb=a("li"),Uce=a("strong"),qxo=o("squeezebert"),Nxo=o(" \u2014 "),WD=a("a"),jxo=o("SqueezeBertForSequenceClassification"),Dxo=o(" (SqueezeBERT model)"),Gxo=l(),ab=a("li"),Jce=a("strong"),Oxo=o("tapas"),Vxo=o(" \u2014 "),HD=a("a"),Xxo=o("TapasForSequenceClassification"),zxo=o(" (TAPAS model)"),Qxo=l(),nb=a("li"),Yce=a("strong"),Wxo=o("transfo-xl"),Hxo=o(" \u2014 "),UD=a("a"),Uxo=o("TransfoXLForSequenceClassification"),Jxo=o(" (Transformer-XL model)"),Yxo=l(),sb=a("li"),Kce=a("strong"),Kxo=o("xlm"),Zxo=o(" \u2014 "),JD=a("a"),e$o=o("XLMForSequenceClassification"),o$o=o(" (XLM model)"),r$o=l(),lb=a("li"),Zce=a("strong"),t$o=o("xlm-roberta"),a$o=o(" \u2014 "),YD=a("a"),n$o=o("XLMRobertaForSequenceClassification"),s$o=o(" (XLM-RoBERTa model)"),l$o=l(),ib=a("li"),efe=a("strong"),i$o=o("xlm-roberta-xl"),d$o=o(" \u2014 "),KD=a("a"),c$o=o("XLMRobertaXLForSequenceClassification"),f$o=o(" (XLM-RoBERTa-XL model)"),m$o=l(),db=a("li"),ofe=a("strong"),g$o=o("xlnet"),h$o=o(" \u2014 "),ZD=a("a"),p$o=o("XLNetForSequenceClassification"),u$o=o(" (XLNet model)"),_$o=l(),cb=a("li"),rfe=a("strong"),b$o=o("yoso"),v$o=o(" \u2014 "),eG=a("a"),F$o=o("YosoForSequenceClassification"),T$o=o(" (YOSO model)"),M$o=l(),fb=a("p"),E$o=o("The model is set in evaluation mode by default using "),tfe=a("code"),C$o=o("model.eval()"),w$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),A$o=o("model.train()"),y$o=l(),F(mb.$$.fragment),cIe=l(),Di=a("h2"),gb=a("a"),nfe=a("span"),F(Z6.$$.fragment),L$o=l(),sfe=a("span"),x$o=o("AutoModelForMultipleChoice"),fIe=l(),Bo=a("div"),F(e0.$$.fragment),$$o=l(),Gi=a("p"),k$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oG=a("a"),S$o=o("from_pretrained()"),R$o=o(" class method or the "),rG=a("a"),B$o=o("from_config()"),P$o=o(` class
method.`),I$o=l(),o0=a("p"),q$o=o("This class cannot be instantiated directly using "),lfe=a("code"),N$o=o("__init__()"),j$o=o(" (throws an error)."),D$o=l(),lt=a("div"),F(r0.$$.fragment),G$o=l(),ife=a("p"),O$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V$o=l(),Oi=a("p"),X$o=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),z$o=o("not"),Q$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),W$o=o("from_pretrained()"),H$o=o(" to load the model weights."),U$o=l(),F(hb.$$.fragment),J$o=l(),eo=a("div"),F(t0.$$.fragment),Y$o=l(),cfe=a("p"),K$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z$o=l(),Sa=a("p"),eko=o("The model class to instantiate is selected based on the "),ffe=a("code"),oko=o("model_type"),rko=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),tko=o("pretrained_model_name_or_path"),ako=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),nko=o("pretrained_model_name_or_path"),sko=o(":"),lko=l(),Y=a("ul"),pb=a("li"),hfe=a("strong"),iko=o("albert"),dko=o(" \u2014 "),aG=a("a"),cko=o("AlbertForMultipleChoice"),fko=o(" (ALBERT model)"),mko=l(),ub=a("li"),pfe=a("strong"),gko=o("bert"),hko=o(" \u2014 "),nG=a("a"),pko=o("BertForMultipleChoice"),uko=o(" (BERT model)"),_ko=l(),_b=a("li"),ufe=a("strong"),bko=o("big_bird"),vko=o(" \u2014 "),sG=a("a"),Fko=o("BigBirdForMultipleChoice"),Tko=o(" (BigBird model)"),Mko=l(),bb=a("li"),_fe=a("strong"),Eko=o("camembert"),Cko=o(" \u2014 "),lG=a("a"),wko=o("CamembertForMultipleChoice"),Ako=o(" (CamemBERT model)"),yko=l(),vb=a("li"),bfe=a("strong"),Lko=o("canine"),xko=o(" \u2014 "),iG=a("a"),$ko=o("CanineForMultipleChoice"),kko=o(" (Canine model)"),Sko=l(),Fb=a("li"),vfe=a("strong"),Rko=o("convbert"),Bko=o(" \u2014 "),dG=a("a"),Pko=o("ConvBertForMultipleChoice"),Iko=o(" (ConvBERT model)"),qko=l(),Tb=a("li"),Ffe=a("strong"),Nko=o("data2vec-text"),jko=o(" \u2014 "),cG=a("a"),Dko=o("Data2VecTextForMultipleChoice"),Gko=o(" (Data2VecText model)"),Oko=l(),Mb=a("li"),Tfe=a("strong"),Vko=o("deberta-v2"),Xko=o(" \u2014 "),fG=a("a"),zko=o("DebertaV2ForMultipleChoice"),Qko=o(" (DeBERTa-v2 model)"),Wko=l(),Eb=a("li"),Mfe=a("strong"),Hko=o("distilbert"),Uko=o(" \u2014 "),mG=a("a"),Jko=o("DistilBertForMultipleChoice"),Yko=o(" (DistilBERT model)"),Kko=l(),Cb=a("li"),Efe=a("strong"),Zko=o("electra"),eSo=o(" \u2014 "),gG=a("a"),oSo=o("ElectraForMultipleChoice"),rSo=o(" (ELECTRA model)"),tSo=l(),wb=a("li"),Cfe=a("strong"),aSo=o("flaubert"),nSo=o(" \u2014 "),hG=a("a"),sSo=o("FlaubertForMultipleChoice"),lSo=o(" (FlauBERT model)"),iSo=l(),Ab=a("li"),wfe=a("strong"),dSo=o("fnet"),cSo=o(" \u2014 "),pG=a("a"),fSo=o("FNetForMultipleChoice"),mSo=o(" (FNet model)"),gSo=l(),yb=a("li"),Afe=a("strong"),hSo=o("funnel"),pSo=o(" \u2014 "),uG=a("a"),uSo=o("FunnelForMultipleChoice"),_So=o(" (Funnel Transformer model)"),bSo=l(),Lb=a("li"),yfe=a("strong"),vSo=o("ibert"),FSo=o(" \u2014 "),_G=a("a"),TSo=o("IBertForMultipleChoice"),MSo=o(" (I-BERT model)"),ESo=l(),xb=a("li"),Lfe=a("strong"),CSo=o("longformer"),wSo=o(" \u2014 "),bG=a("a"),ASo=o("LongformerForMultipleChoice"),ySo=o(" (Longformer model)"),LSo=l(),$b=a("li"),xfe=a("strong"),xSo=o("megatron-bert"),$So=o(" \u2014 "),vG=a("a"),kSo=o("MegatronBertForMultipleChoice"),SSo=o(" (MegatronBert model)"),RSo=l(),kb=a("li"),$fe=a("strong"),BSo=o("mobilebert"),PSo=o(" \u2014 "),FG=a("a"),ISo=o("MobileBertForMultipleChoice"),qSo=o(" (MobileBERT model)"),NSo=l(),Sb=a("li"),kfe=a("strong"),jSo=o("mpnet"),DSo=o(" \u2014 "),TG=a("a"),GSo=o("MPNetForMultipleChoice"),OSo=o(" (MPNet model)"),VSo=l(),Rb=a("li"),Sfe=a("strong"),XSo=o("nystromformer"),zSo=o(" \u2014 "),MG=a("a"),QSo=o("NystromformerForMultipleChoice"),WSo=o(" (Nystromformer model)"),HSo=l(),Bb=a("li"),Rfe=a("strong"),USo=o("qdqbert"),JSo=o(" \u2014 "),EG=a("a"),YSo=o("QDQBertForMultipleChoice"),KSo=o(" (QDQBert model)"),ZSo=l(),Pb=a("li"),Bfe=a("strong"),eRo=o("rembert"),oRo=o(" \u2014 "),CG=a("a"),rRo=o("RemBertForMultipleChoice"),tRo=o(" (RemBERT model)"),aRo=l(),Ib=a("li"),Pfe=a("strong"),nRo=o("roberta"),sRo=o(" \u2014 "),wG=a("a"),lRo=o("RobertaForMultipleChoice"),iRo=o(" (RoBERTa model)"),dRo=l(),qb=a("li"),Ife=a("strong"),cRo=o("roformer"),fRo=o(" \u2014 "),AG=a("a"),mRo=o("RoFormerForMultipleChoice"),gRo=o(" (RoFormer model)"),hRo=l(),Nb=a("li"),qfe=a("strong"),pRo=o("squeezebert"),uRo=o(" \u2014 "),yG=a("a"),_Ro=o("SqueezeBertForMultipleChoice"),bRo=o(" (SqueezeBERT model)"),vRo=l(),jb=a("li"),Nfe=a("strong"),FRo=o("xlm"),TRo=o(" \u2014 "),LG=a("a"),MRo=o("XLMForMultipleChoice"),ERo=o(" (XLM model)"),CRo=l(),Db=a("li"),jfe=a("strong"),wRo=o("xlm-roberta"),ARo=o(" \u2014 "),xG=a("a"),yRo=o("XLMRobertaForMultipleChoice"),LRo=o(" (XLM-RoBERTa model)"),xRo=l(),Gb=a("li"),Dfe=a("strong"),$Ro=o("xlm-roberta-xl"),kRo=o(" \u2014 "),$G=a("a"),SRo=o("XLMRobertaXLForMultipleChoice"),RRo=o(" (XLM-RoBERTa-XL model)"),BRo=l(),Ob=a("li"),Gfe=a("strong"),PRo=o("xlnet"),IRo=o(" \u2014 "),kG=a("a"),qRo=o("XLNetForMultipleChoice"),NRo=o(" (XLNet model)"),jRo=l(),Vb=a("li"),Ofe=a("strong"),DRo=o("yoso"),GRo=o(" \u2014 "),SG=a("a"),ORo=o("YosoForMultipleChoice"),VRo=o(" (YOSO model)"),XRo=l(),Xb=a("p"),zRo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),QRo=o("model.eval()"),WRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),HRo=o("model.train()"),URo=l(),F(zb.$$.fragment),mIe=l(),Vi=a("h2"),Qb=a("a"),zfe=a("span"),F(a0.$$.fragment),JRo=l(),Qfe=a("span"),YRo=o("AutoModelForNextSentencePrediction"),gIe=l(),Po=a("div"),F(n0.$$.fragment),KRo=l(),Xi=a("p"),ZRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RG=a("a"),eBo=o("from_pretrained()"),oBo=o(" class method or the "),BG=a("a"),rBo=o("from_config()"),tBo=o(` class
method.`),aBo=l(),s0=a("p"),nBo=o("This class cannot be instantiated directly using "),Wfe=a("code"),sBo=o("__init__()"),lBo=o(" (throws an error)."),iBo=l(),it=a("div"),F(l0.$$.fragment),dBo=l(),Hfe=a("p"),cBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fBo=l(),zi=a("p"),mBo=o(`Note:
Loading a model from its configuration file does `),Ufe=a("strong"),gBo=o("not"),hBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),pBo=o("from_pretrained()"),uBo=o(" to load the model weights."),_Bo=l(),F(Wb.$$.fragment),bBo=l(),oo=a("div"),F(i0.$$.fragment),vBo=l(),Jfe=a("p"),FBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),TBo=l(),Ra=a("p"),MBo=o("The model class to instantiate is selected based on the "),Yfe=a("code"),EBo=o("model_type"),CBo=o(` property of the config object (either
passed as an argument or loaded from `),Kfe=a("code"),wBo=o("pretrained_model_name_or_path"),ABo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(":"),xBo=l(),Yr=a("ul"),Hb=a("li"),eme=a("strong"),$Bo=o("bert"),kBo=o(" \u2014 "),IG=a("a"),SBo=o("BertForNextSentencePrediction"),RBo=o(" (BERT model)"),BBo=l(),Ub=a("li"),ome=a("strong"),PBo=o("fnet"),IBo=o(" \u2014 "),qG=a("a"),qBo=o("FNetForNextSentencePrediction"),NBo=o(" (FNet model)"),jBo=l(),Jb=a("li"),rme=a("strong"),DBo=o("megatron-bert"),GBo=o(" \u2014 "),NG=a("a"),OBo=o("MegatronBertForNextSentencePrediction"),VBo=o(" (MegatronBert model)"),XBo=l(),Yb=a("li"),tme=a("strong"),zBo=o("mobilebert"),QBo=o(" \u2014 "),jG=a("a"),WBo=o("MobileBertForNextSentencePrediction"),HBo=o(" (MobileBERT model)"),UBo=l(),Kb=a("li"),ame=a("strong"),JBo=o("qdqbert"),YBo=o(" \u2014 "),DG=a("a"),KBo=o("QDQBertForNextSentencePrediction"),ZBo=o(" (QDQBert model)"),ePo=l(),Zb=a("p"),oPo=o("The model is set in evaluation mode by default using "),nme=a("code"),rPo=o("model.eval()"),tPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),aPo=o("model.train()"),nPo=l(),F(ev.$$.fragment),hIe=l(),Qi=a("h2"),ov=a("a"),lme=a("span"),F(d0.$$.fragment),sPo=l(),ime=a("span"),lPo=o("AutoModelForTokenClassification"),pIe=l(),Io=a("div"),F(c0.$$.fragment),iPo=l(),Wi=a("p"),dPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GG=a("a"),cPo=o("from_pretrained()"),fPo=o(" class method or the "),OG=a("a"),mPo=o("from_config()"),gPo=o(` class
method.`),hPo=l(),f0=a("p"),pPo=o("This class cannot be instantiated directly using "),dme=a("code"),uPo=o("__init__()"),_Po=o(" (throws an error)."),bPo=l(),dt=a("div"),F(m0.$$.fragment),vPo=l(),cme=a("p"),FPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TPo=l(),Hi=a("p"),MPo=o(`Note:
Loading a model from its configuration file does `),fme=a("strong"),EPo=o("not"),CPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=a("a"),wPo=o("from_pretrained()"),APo=o(" to load the model weights."),yPo=l(),F(rv.$$.fragment),LPo=l(),ro=a("div"),F(g0.$$.fragment),xPo=l(),mme=a("p"),$Po=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kPo=l(),Ba=a("p"),SPo=o("The model class to instantiate is selected based on the "),gme=a("code"),RPo=o("model_type"),BPo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),PPo=o("pretrained_model_name_or_path"),IPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=a("code"),qPo=o("pretrained_model_name_or_path"),NPo=o(":"),jPo=l(),U=a("ul"),tv=a("li"),ume=a("strong"),DPo=o("albert"),GPo=o(" \u2014 "),XG=a("a"),OPo=o("AlbertForTokenClassification"),VPo=o(" (ALBERT model)"),XPo=l(),av=a("li"),_me=a("strong"),zPo=o("bert"),QPo=o(" \u2014 "),zG=a("a"),WPo=o("BertForTokenClassification"),HPo=o(" (BERT model)"),UPo=l(),nv=a("li"),bme=a("strong"),JPo=o("big_bird"),YPo=o(" \u2014 "),QG=a("a"),KPo=o("BigBirdForTokenClassification"),ZPo=o(" (BigBird model)"),eIo=l(),sv=a("li"),vme=a("strong"),oIo=o("camembert"),rIo=o(" \u2014 "),WG=a("a"),tIo=o("CamembertForTokenClassification"),aIo=o(" (CamemBERT model)"),nIo=l(),lv=a("li"),Fme=a("strong"),sIo=o("canine"),lIo=o(" \u2014 "),HG=a("a"),iIo=o("CanineForTokenClassification"),dIo=o(" (Canine model)"),cIo=l(),iv=a("li"),Tme=a("strong"),fIo=o("convbert"),mIo=o(" \u2014 "),UG=a("a"),gIo=o("ConvBertForTokenClassification"),hIo=o(" (ConvBERT model)"),pIo=l(),dv=a("li"),Mme=a("strong"),uIo=o("data2vec-text"),_Io=o(" \u2014 "),JG=a("a"),bIo=o("Data2VecTextForTokenClassification"),vIo=o(" (Data2VecText model)"),FIo=l(),cv=a("li"),Eme=a("strong"),TIo=o("deberta"),MIo=o(" \u2014 "),YG=a("a"),EIo=o("DebertaForTokenClassification"),CIo=o(" (DeBERTa model)"),wIo=l(),fv=a("li"),Cme=a("strong"),AIo=o("deberta-v2"),yIo=o(" \u2014 "),KG=a("a"),LIo=o("DebertaV2ForTokenClassification"),xIo=o(" (DeBERTa-v2 model)"),$Io=l(),mv=a("li"),wme=a("strong"),kIo=o("distilbert"),SIo=o(" \u2014 "),ZG=a("a"),RIo=o("DistilBertForTokenClassification"),BIo=o(" (DistilBERT model)"),PIo=l(),gv=a("li"),Ame=a("strong"),IIo=o("electra"),qIo=o(" \u2014 "),eO=a("a"),NIo=o("ElectraForTokenClassification"),jIo=o(" (ELECTRA model)"),DIo=l(),hv=a("li"),yme=a("strong"),GIo=o("flaubert"),OIo=o(" \u2014 "),oO=a("a"),VIo=o("FlaubertForTokenClassification"),XIo=o(" (FlauBERT model)"),zIo=l(),pv=a("li"),Lme=a("strong"),QIo=o("fnet"),WIo=o(" \u2014 "),rO=a("a"),HIo=o("FNetForTokenClassification"),UIo=o(" (FNet model)"),JIo=l(),uv=a("li"),xme=a("strong"),YIo=o("funnel"),KIo=o(" \u2014 "),tO=a("a"),ZIo=o("FunnelForTokenClassification"),eqo=o(" (Funnel Transformer model)"),oqo=l(),_v=a("li"),$me=a("strong"),rqo=o("gpt2"),tqo=o(" \u2014 "),aO=a("a"),aqo=o("GPT2ForTokenClassification"),nqo=o(" (OpenAI GPT-2 model)"),sqo=l(),bv=a("li"),kme=a("strong"),lqo=o("ibert"),iqo=o(" \u2014 "),nO=a("a"),dqo=o("IBertForTokenClassification"),cqo=o(" (I-BERT model)"),fqo=l(),vv=a("li"),Sme=a("strong"),mqo=o("layoutlm"),gqo=o(" \u2014 "),sO=a("a"),hqo=o("LayoutLMForTokenClassification"),pqo=o(" (LayoutLM model)"),uqo=l(),Fv=a("li"),Rme=a("strong"),_qo=o("layoutlmv2"),bqo=o(" \u2014 "),lO=a("a"),vqo=o("LayoutLMv2ForTokenClassification"),Fqo=o(" (LayoutLMv2 model)"),Tqo=l(),Tv=a("li"),Bme=a("strong"),Mqo=o("longformer"),Eqo=o(" \u2014 "),iO=a("a"),Cqo=o("LongformerForTokenClassification"),wqo=o(" (Longformer model)"),Aqo=l(),Mv=a("li"),Pme=a("strong"),yqo=o("megatron-bert"),Lqo=o(" \u2014 "),dO=a("a"),xqo=o("MegatronBertForTokenClassification"),$qo=o(" (MegatronBert model)"),kqo=l(),Ev=a("li"),Ime=a("strong"),Sqo=o("mobilebert"),Rqo=o(" \u2014 "),cO=a("a"),Bqo=o("MobileBertForTokenClassification"),Pqo=o(" (MobileBERT model)"),Iqo=l(),Cv=a("li"),qme=a("strong"),qqo=o("mpnet"),Nqo=o(" \u2014 "),fO=a("a"),jqo=o("MPNetForTokenClassification"),Dqo=o(" (MPNet model)"),Gqo=l(),wv=a("li"),Nme=a("strong"),Oqo=o("nystromformer"),Vqo=o(" \u2014 "),mO=a("a"),Xqo=o("NystromformerForTokenClassification"),zqo=o(" (Nystromformer model)"),Qqo=l(),Av=a("li"),jme=a("strong"),Wqo=o("qdqbert"),Hqo=o(" \u2014 "),gO=a("a"),Uqo=o("QDQBertForTokenClassification"),Jqo=o(" (QDQBert model)"),Yqo=l(),yv=a("li"),Dme=a("strong"),Kqo=o("rembert"),Zqo=o(" \u2014 "),hO=a("a"),eNo=o("RemBertForTokenClassification"),oNo=o(" (RemBERT model)"),rNo=l(),Lv=a("li"),Gme=a("strong"),tNo=o("roberta"),aNo=o(" \u2014 "),pO=a("a"),nNo=o("RobertaForTokenClassification"),sNo=o(" (RoBERTa model)"),lNo=l(),xv=a("li"),Ome=a("strong"),iNo=o("roformer"),dNo=o(" \u2014 "),uO=a("a"),cNo=o("RoFormerForTokenClassification"),fNo=o(" (RoFormer model)"),mNo=l(),$v=a("li"),Vme=a("strong"),gNo=o("squeezebert"),hNo=o(" \u2014 "),_O=a("a"),pNo=o("SqueezeBertForTokenClassification"),uNo=o(" (SqueezeBERT model)"),_No=l(),kv=a("li"),Xme=a("strong"),bNo=o("xlm"),vNo=o(" \u2014 "),bO=a("a"),FNo=o("XLMForTokenClassification"),TNo=o(" (XLM model)"),MNo=l(),Sv=a("li"),zme=a("strong"),ENo=o("xlm-roberta"),CNo=o(" \u2014 "),vO=a("a"),wNo=o("XLMRobertaForTokenClassification"),ANo=o(" (XLM-RoBERTa model)"),yNo=l(),Rv=a("li"),Qme=a("strong"),LNo=o("xlm-roberta-xl"),xNo=o(" \u2014 "),FO=a("a"),$No=o("XLMRobertaXLForTokenClassification"),kNo=o(" (XLM-RoBERTa-XL model)"),SNo=l(),Bv=a("li"),Wme=a("strong"),RNo=o("xlnet"),BNo=o(" \u2014 "),TO=a("a"),PNo=o("XLNetForTokenClassification"),INo=o(" (XLNet model)"),qNo=l(),Pv=a("li"),Hme=a("strong"),NNo=o("yoso"),jNo=o(" \u2014 "),MO=a("a"),DNo=o("YosoForTokenClassification"),GNo=o(" (YOSO model)"),ONo=l(),Iv=a("p"),VNo=o("The model is set in evaluation mode by default using "),Ume=a("code"),XNo=o("model.eval()"),zNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=a("code"),QNo=o("model.train()"),WNo=l(),F(qv.$$.fragment),uIe=l(),Ui=a("h2"),Nv=a("a"),Yme=a("span"),F(h0.$$.fragment),HNo=l(),Kme=a("span"),UNo=o("AutoModelForQuestionAnswering"),_Ie=l(),qo=a("div"),F(p0.$$.fragment),JNo=l(),Ji=a("p"),YNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EO=a("a"),KNo=o("from_pretrained()"),ZNo=o(" class method or the "),CO=a("a"),ejo=o("from_config()"),ojo=o(` class
method.`),rjo=l(),u0=a("p"),tjo=o("This class cannot be instantiated directly using "),Zme=a("code"),ajo=o("__init__()"),njo=o(" (throws an error)."),sjo=l(),ct=a("div"),F(_0.$$.fragment),ljo=l(),ege=a("p"),ijo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),djo=l(),Yi=a("p"),cjo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),fjo=o("not"),mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),gjo=o("from_pretrained()"),hjo=o(" to load the model weights."),pjo=l(),F(jv.$$.fragment),ujo=l(),to=a("div"),F(b0.$$.fragment),_jo=l(),rge=a("p"),bjo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vjo=l(),Pa=a("p"),Fjo=o("The model class to instantiate is selected based on the "),tge=a("code"),Tjo=o("model_type"),Mjo=o(` property of the config object (either
passed as an argument or loaded from `),age=a("code"),Ejo=o("pretrained_model_name_or_path"),Cjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=a("code"),wjo=o("pretrained_model_name_or_path"),Ajo=o(":"),yjo=l(),O=a("ul"),Dv=a("li"),sge=a("strong"),Ljo=o("albert"),xjo=o(" \u2014 "),AO=a("a"),$jo=o("AlbertForQuestionAnswering"),kjo=o(" (ALBERT model)"),Sjo=l(),Gv=a("li"),lge=a("strong"),Rjo=o("bart"),Bjo=o(" \u2014 "),yO=a("a"),Pjo=o("BartForQuestionAnswering"),Ijo=o(" (BART model)"),qjo=l(),Ov=a("li"),ige=a("strong"),Njo=o("bert"),jjo=o(" \u2014 "),LO=a("a"),Djo=o("BertForQuestionAnswering"),Gjo=o(" (BERT model)"),Ojo=l(),Vv=a("li"),dge=a("strong"),Vjo=o("big_bird"),Xjo=o(" \u2014 "),xO=a("a"),zjo=o("BigBirdForQuestionAnswering"),Qjo=o(" (BigBird model)"),Wjo=l(),Xv=a("li"),cge=a("strong"),Hjo=o("bigbird_pegasus"),Ujo=o(" \u2014 "),$O=a("a"),Jjo=o("BigBirdPegasusForQuestionAnswering"),Yjo=o(" (BigBirdPegasus model)"),Kjo=l(),zv=a("li"),fge=a("strong"),Zjo=o("camembert"),eDo=o(" \u2014 "),kO=a("a"),oDo=o("CamembertForQuestionAnswering"),rDo=o(" (CamemBERT model)"),tDo=l(),Qv=a("li"),mge=a("strong"),aDo=o("canine"),nDo=o(" \u2014 "),SO=a("a"),sDo=o("CanineForQuestionAnswering"),lDo=o(" (Canine model)"),iDo=l(),Wv=a("li"),gge=a("strong"),dDo=o("convbert"),cDo=o(" \u2014 "),RO=a("a"),fDo=o("ConvBertForQuestionAnswering"),mDo=o(" (ConvBERT model)"),gDo=l(),Hv=a("li"),hge=a("strong"),hDo=o("data2vec-text"),pDo=o(" \u2014 "),BO=a("a"),uDo=o("Data2VecTextForQuestionAnswering"),_Do=o(" (Data2VecText model)"),bDo=l(),Uv=a("li"),pge=a("strong"),vDo=o("deberta"),FDo=o(" \u2014 "),PO=a("a"),TDo=o("DebertaForQuestionAnswering"),MDo=o(" (DeBERTa model)"),EDo=l(),Jv=a("li"),uge=a("strong"),CDo=o("deberta-v2"),wDo=o(" \u2014 "),IO=a("a"),ADo=o("DebertaV2ForQuestionAnswering"),yDo=o(" (DeBERTa-v2 model)"),LDo=l(),Yv=a("li"),_ge=a("strong"),xDo=o("distilbert"),$Do=o(" \u2014 "),qO=a("a"),kDo=o("DistilBertForQuestionAnswering"),SDo=o(" (DistilBERT model)"),RDo=l(),Kv=a("li"),bge=a("strong"),BDo=o("electra"),PDo=o(" \u2014 "),NO=a("a"),IDo=o("ElectraForQuestionAnswering"),qDo=o(" (ELECTRA model)"),NDo=l(),Zv=a("li"),vge=a("strong"),jDo=o("flaubert"),DDo=o(" \u2014 "),jO=a("a"),GDo=o("FlaubertForQuestionAnsweringSimple"),ODo=o(" (FlauBERT model)"),VDo=l(),eF=a("li"),Fge=a("strong"),XDo=o("fnet"),zDo=o(" \u2014 "),DO=a("a"),QDo=o("FNetForQuestionAnswering"),WDo=o(" (FNet model)"),HDo=l(),oF=a("li"),Tge=a("strong"),UDo=o("funnel"),JDo=o(" \u2014 "),GO=a("a"),YDo=o("FunnelForQuestionAnswering"),KDo=o(" (Funnel Transformer model)"),ZDo=l(),rF=a("li"),Mge=a("strong"),eGo=o("gptj"),oGo=o(" \u2014 "),OO=a("a"),rGo=o("GPTJForQuestionAnswering"),tGo=o(" (GPT-J model)"),aGo=l(),tF=a("li"),Ege=a("strong"),nGo=o("ibert"),sGo=o(" \u2014 "),VO=a("a"),lGo=o("IBertForQuestionAnswering"),iGo=o(" (I-BERT model)"),dGo=l(),aF=a("li"),Cge=a("strong"),cGo=o("layoutlmv2"),fGo=o(" \u2014 "),XO=a("a"),mGo=o("LayoutLMv2ForQuestionAnswering"),gGo=o(" (LayoutLMv2 model)"),hGo=l(),nF=a("li"),wge=a("strong"),pGo=o("led"),uGo=o(" \u2014 "),zO=a("a"),_Go=o("LEDForQuestionAnswering"),bGo=o(" (LED model)"),vGo=l(),sF=a("li"),Age=a("strong"),FGo=o("longformer"),TGo=o(" \u2014 "),QO=a("a"),MGo=o("LongformerForQuestionAnswering"),EGo=o(" (Longformer model)"),CGo=l(),lF=a("li"),yge=a("strong"),wGo=o("lxmert"),AGo=o(" \u2014 "),WO=a("a"),yGo=o("LxmertForQuestionAnswering"),LGo=o(" (LXMERT model)"),xGo=l(),iF=a("li"),Lge=a("strong"),$Go=o("mbart"),kGo=o(" \u2014 "),HO=a("a"),SGo=o("MBartForQuestionAnswering"),RGo=o(" (mBART model)"),BGo=l(),dF=a("li"),xge=a("strong"),PGo=o("megatron-bert"),IGo=o(" \u2014 "),UO=a("a"),qGo=o("MegatronBertForQuestionAnswering"),NGo=o(" (MegatronBert model)"),jGo=l(),cF=a("li"),$ge=a("strong"),DGo=o("mobilebert"),GGo=o(" \u2014 "),JO=a("a"),OGo=o("MobileBertForQuestionAnswering"),VGo=o(" (MobileBERT model)"),XGo=l(),fF=a("li"),kge=a("strong"),zGo=o("mpnet"),QGo=o(" \u2014 "),YO=a("a"),WGo=o("MPNetForQuestionAnswering"),HGo=o(" (MPNet model)"),UGo=l(),mF=a("li"),Sge=a("strong"),JGo=o("nystromformer"),YGo=o(" \u2014 "),KO=a("a"),KGo=o("NystromformerForQuestionAnswering"),ZGo=o(" (Nystromformer model)"),eOo=l(),gF=a("li"),Rge=a("strong"),oOo=o("qdqbert"),rOo=o(" \u2014 "),ZO=a("a"),tOo=o("QDQBertForQuestionAnswering"),aOo=o(" (QDQBert model)"),nOo=l(),hF=a("li"),Bge=a("strong"),sOo=o("reformer"),lOo=o(" \u2014 "),eV=a("a"),iOo=o("ReformerForQuestionAnswering"),dOo=o(" (Reformer model)"),cOo=l(),pF=a("li"),Pge=a("strong"),fOo=o("rembert"),mOo=o(" \u2014 "),oV=a("a"),gOo=o("RemBertForQuestionAnswering"),hOo=o(" (RemBERT model)"),pOo=l(),uF=a("li"),Ige=a("strong"),uOo=o("roberta"),_Oo=o(" \u2014 "),rV=a("a"),bOo=o("RobertaForQuestionAnswering"),vOo=o(" (RoBERTa model)"),FOo=l(),_F=a("li"),qge=a("strong"),TOo=o("roformer"),MOo=o(" \u2014 "),tV=a("a"),EOo=o("RoFormerForQuestionAnswering"),COo=o(" (RoFormer model)"),wOo=l(),bF=a("li"),Nge=a("strong"),AOo=o("splinter"),yOo=o(" \u2014 "),aV=a("a"),LOo=o("SplinterForQuestionAnswering"),xOo=o(" (Splinter model)"),$Oo=l(),vF=a("li"),jge=a("strong"),kOo=o("squeezebert"),SOo=o(" \u2014 "),nV=a("a"),ROo=o("SqueezeBertForQuestionAnswering"),BOo=o(" (SqueezeBERT model)"),POo=l(),FF=a("li"),Dge=a("strong"),IOo=o("xlm"),qOo=o(" \u2014 "),sV=a("a"),NOo=o("XLMForQuestionAnsweringSimple"),jOo=o(" (XLM model)"),DOo=l(),TF=a("li"),Gge=a("strong"),GOo=o("xlm-roberta"),OOo=o(" \u2014 "),lV=a("a"),VOo=o("XLMRobertaForQuestionAnswering"),XOo=o(" (XLM-RoBERTa model)"),zOo=l(),MF=a("li"),Oge=a("strong"),QOo=o("xlm-roberta-xl"),WOo=o(" \u2014 "),iV=a("a"),HOo=o("XLMRobertaXLForQuestionAnswering"),UOo=o(" (XLM-RoBERTa-XL model)"),JOo=l(),EF=a("li"),Vge=a("strong"),YOo=o("xlnet"),KOo=o(" \u2014 "),dV=a("a"),ZOo=o("XLNetForQuestionAnsweringSimple"),eVo=o(" (XLNet model)"),oVo=l(),CF=a("li"),Xge=a("strong"),rVo=o("yoso"),tVo=o(" \u2014 "),cV=a("a"),aVo=o("YosoForQuestionAnswering"),nVo=o(" (YOSO model)"),sVo=l(),wF=a("p"),lVo=o("The model is set in evaluation mode by default using "),zge=a("code"),iVo=o("model.eval()"),dVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),cVo=o("model.train()"),fVo=l(),F(AF.$$.fragment),bIe=l(),Ki=a("h2"),yF=a("a"),Wge=a("span"),F(v0.$$.fragment),mVo=l(),Hge=a("span"),gVo=o("AutoModelForTableQuestionAnswering"),vIe=l(),No=a("div"),F(F0.$$.fragment),hVo=l(),Zi=a("p"),pVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fV=a("a"),uVo=o("from_pretrained()"),_Vo=o(" class method or the "),mV=a("a"),bVo=o("from_config()"),vVo=o(` class
method.`),FVo=l(),T0=a("p"),TVo=o("This class cannot be instantiated directly using "),Uge=a("code"),MVo=o("__init__()"),EVo=o(" (throws an error)."),CVo=l(),ft=a("div"),F(M0.$$.fragment),wVo=l(),Jge=a("p"),AVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yVo=l(),ed=a("p"),LVo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),xVo=o("not"),$Vo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),kVo=o("from_pretrained()"),SVo=o(" to load the model weights."),RVo=l(),F(LF.$$.fragment),BVo=l(),ao=a("div"),F(E0.$$.fragment),PVo=l(),Kge=a("p"),IVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),qVo=l(),Ia=a("p"),NVo=o("The model class to instantiate is selected based on the "),Zge=a("code"),jVo=o("model_type"),DVo=o(` property of the config object (either
passed as an argument or loaded from `),ehe=a("code"),GVo=o("pretrained_model_name_or_path"),OVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=a("code"),VVo=o("pretrained_model_name_or_path"),XVo=o(":"),zVo=l(),rhe=a("ul"),xF=a("li"),the=a("strong"),QVo=o("tapas"),WVo=o(" \u2014 "),hV=a("a"),HVo=o("TapasForQuestionAnswering"),UVo=o(" (TAPAS model)"),JVo=l(),$F=a("p"),YVo=o("The model is set in evaluation mode by default using "),ahe=a("code"),KVo=o("model.eval()"),ZVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),eXo=o("model.train()"),oXo=l(),F(kF.$$.fragment),FIe=l(),od=a("h2"),SF=a("a"),she=a("span"),F(C0.$$.fragment),rXo=l(),lhe=a("span"),tXo=o("AutoModelForImageClassification"),TIe=l(),jo=a("div"),F(w0.$$.fragment),aXo=l(),rd=a("p"),nXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pV=a("a"),sXo=o("from_pretrained()"),lXo=o(" class method or the "),uV=a("a"),iXo=o("from_config()"),dXo=o(` class
method.`),cXo=l(),A0=a("p"),fXo=o("This class cannot be instantiated directly using "),ihe=a("code"),mXo=o("__init__()"),gXo=o(" (throws an error)."),hXo=l(),mt=a("div"),F(y0.$$.fragment),pXo=l(),dhe=a("p"),uXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Xo=l(),td=a("p"),bXo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),vXo=o("not"),FXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),TXo=o("from_pretrained()"),MXo=o(" to load the model weights."),EXo=l(),F(RF.$$.fragment),CXo=l(),no=a("div"),F(L0.$$.fragment),wXo=l(),fhe=a("p"),AXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yXo=l(),qa=a("p"),LXo=o("The model class to instantiate is selected based on the "),mhe=a("code"),xXo=o("model_type"),$Xo=o(` property of the config object (either
passed as an argument or loaded from `),ghe=a("code"),kXo=o("pretrained_model_name_or_path"),SXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=a("code"),RXo=o("pretrained_model_name_or_path"),BXo=o(":"),PXo=l(),Fe=a("ul"),BF=a("li"),phe=a("strong"),IXo=o("beit"),qXo=o(" \u2014 "),bV=a("a"),NXo=o("BeitForImageClassification"),jXo=o(" (BEiT model)"),DXo=l(),PF=a("li"),uhe=a("strong"),GXo=o("convnext"),OXo=o(" \u2014 "),vV=a("a"),VXo=o("ConvNextForImageClassification"),XXo=o(" (ConvNext model)"),zXo=l(),IF=a("li"),_he=a("strong"),QXo=o("data2vec-vision"),WXo=o(" \u2014 "),FV=a("a"),HXo=o("Data2VecVisionForImageClassification"),UXo=o(" (Data2VecVision model)"),JXo=l(),Bs=a("li"),bhe=a("strong"),YXo=o("deit"),KXo=o(" \u2014 "),TV=a("a"),ZXo=o("DeiTForImageClassification"),ezo=o(" or "),MV=a("a"),ozo=o("DeiTForImageClassificationWithTeacher"),rzo=o(" (DeiT model)"),tzo=l(),qF=a("li"),vhe=a("strong"),azo=o("imagegpt"),nzo=o(" \u2014 "),EV=a("a"),szo=o("ImageGPTForImageClassification"),lzo=o(" (ImageGPT model)"),izo=l(),gt=a("li"),Fhe=a("strong"),dzo=o("perceiver"),czo=o(" \u2014 "),CV=a("a"),fzo=o("PerceiverForImageClassificationLearned"),mzo=o(" or "),wV=a("a"),gzo=o("PerceiverForImageClassificationFourier"),hzo=o(" or "),AV=a("a"),pzo=o("PerceiverForImageClassificationConvProcessing"),uzo=o(" (Perceiver model)"),_zo=l(),NF=a("li"),The=a("strong"),bzo=o("poolformer"),vzo=o(" \u2014 "),yV=a("a"),Fzo=o("PoolFormerForImageClassification"),Tzo=o(" (PoolFormer model)"),Mzo=l(),jF=a("li"),Mhe=a("strong"),Ezo=o("regnet"),Czo=o(" \u2014 "),LV=a("a"),wzo=o("RegNetForImageClassification"),Azo=o(" (RegNet model)"),yzo=l(),DF=a("li"),Ehe=a("strong"),Lzo=o("resnet"),xzo=o(" \u2014 "),xV=a("a"),$zo=o("ResNetForImageClassification"),kzo=o(" (ResNet model)"),Szo=l(),GF=a("li"),Che=a("strong"),Rzo=o("segformer"),Bzo=o(" \u2014 "),$V=a("a"),Pzo=o("SegformerForImageClassification"),Izo=o(" (SegFormer model)"),qzo=l(),OF=a("li"),whe=a("strong"),Nzo=o("swin"),jzo=o(" \u2014 "),kV=a("a"),Dzo=o("SwinForImageClassification"),Gzo=o(" (Swin model)"),Ozo=l(),VF=a("li"),Ahe=a("strong"),Vzo=o("van"),Xzo=o(" \u2014 "),SV=a("a"),zzo=o("VanForImageClassification"),Qzo=o(" (VAN model)"),Wzo=l(),XF=a("li"),yhe=a("strong"),Hzo=o("vit"),Uzo=o(" \u2014 "),RV=a("a"),Jzo=o("ViTForImageClassification"),Yzo=o(" (ViT model)"),Kzo=l(),zF=a("p"),Zzo=o("The model is set in evaluation mode by default using "),Lhe=a("code"),eQo=o("model.eval()"),oQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),rQo=o("model.train()"),tQo=l(),F(QF.$$.fragment),MIe=l(),ad=a("h2"),WF=a("a"),$he=a("span"),F(x0.$$.fragment),aQo=l(),khe=a("span"),nQo=o("AutoModelForVision2Seq"),EIe=l(),Do=a("div"),F($0.$$.fragment),sQo=l(),nd=a("p"),lQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BV=a("a"),iQo=o("from_pretrained()"),dQo=o(" class method or the "),PV=a("a"),cQo=o("from_config()"),fQo=o(` class
method.`),mQo=l(),k0=a("p"),gQo=o("This class cannot be instantiated directly using "),She=a("code"),hQo=o("__init__()"),pQo=o(" (throws an error)."),uQo=l(),ht=a("div"),F(S0.$$.fragment),_Qo=l(),Rhe=a("p"),bQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vQo=l(),sd=a("p"),FQo=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),TQo=o("not"),MQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),EQo=o("from_pretrained()"),CQo=o(" to load the model weights."),wQo=l(),F(HF.$$.fragment),AQo=l(),so=a("div"),F(R0.$$.fragment),yQo=l(),Phe=a("p"),LQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xQo=l(),Na=a("p"),$Qo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),kQo=o("model_type"),SQo=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),RQo=o("pretrained_model_name_or_path"),BQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),PQo=o("pretrained_model_name_or_path"),IQo=o(":"),qQo=l(),jhe=a("ul"),UF=a("li"),Dhe=a("strong"),NQo=o("vision-encoder-decoder"),jQo=o(" \u2014 "),qV=a("a"),DQo=o("VisionEncoderDecoderModel"),GQo=o(" (Vision Encoder decoder model)"),OQo=l(),JF=a("p"),VQo=o("The model is set in evaluation mode by default using "),Ghe=a("code"),XQo=o("model.eval()"),zQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=a("code"),QQo=o("model.train()"),WQo=l(),F(YF.$$.fragment),CIe=l(),ld=a("h2"),KF=a("a"),Vhe=a("span"),F(B0.$$.fragment),HQo=l(),Xhe=a("span"),UQo=o("AutoModelForAudioClassification"),wIe=l(),Go=a("div"),F(P0.$$.fragment),JQo=l(),id=a("p"),YQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NV=a("a"),KQo=o("from_pretrained()"),ZQo=o(" class method or the "),jV=a("a"),eWo=o("from_config()"),oWo=o(` class
method.`),rWo=l(),I0=a("p"),tWo=o("This class cannot be instantiated directly using "),zhe=a("code"),aWo=o("__init__()"),nWo=o(" (throws an error)."),sWo=l(),pt=a("div"),F(q0.$$.fragment),lWo=l(),Qhe=a("p"),iWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),dWo=l(),dd=a("p"),cWo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),fWo=o("not"),mWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),gWo=o("from_pretrained()"),hWo=o(" to load the model weights."),pWo=l(),F(ZF.$$.fragment),uWo=l(),lo=a("div"),F(N0.$$.fragment),_Wo=l(),Hhe=a("p"),bWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),vWo=l(),ja=a("p"),FWo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),TWo=o("model_type"),MWo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),EWo=o("pretrained_model_name_or_path"),CWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),wWo=o("pretrained_model_name_or_path"),AWo=o(":"),yWo=l(),Ne=a("ul"),eT=a("li"),Khe=a("strong"),LWo=o("data2vec-audio"),xWo=o(" \u2014 "),GV=a("a"),$Wo=o("Data2VecAudioForSequenceClassification"),kWo=o(" (Data2VecAudio model)"),SWo=l(),oT=a("li"),Zhe=a("strong"),RWo=o("hubert"),BWo=o(" \u2014 "),OV=a("a"),PWo=o("HubertForSequenceClassification"),IWo=o(" (Hubert model)"),qWo=l(),rT=a("li"),epe=a("strong"),NWo=o("sew"),jWo=o(" \u2014 "),VV=a("a"),DWo=o("SEWForSequenceClassification"),GWo=o(" (SEW model)"),OWo=l(),tT=a("li"),ope=a("strong"),VWo=o("sew-d"),XWo=o(" \u2014 "),XV=a("a"),zWo=o("SEWDForSequenceClassification"),QWo=o(" (SEW-D model)"),WWo=l(),aT=a("li"),rpe=a("strong"),HWo=o("unispeech"),UWo=o(" \u2014 "),zV=a("a"),JWo=o("UniSpeechForSequenceClassification"),YWo=o(" (UniSpeech model)"),KWo=l(),nT=a("li"),tpe=a("strong"),ZWo=o("unispeech-sat"),eHo=o(" \u2014 "),QV=a("a"),oHo=o("UniSpeechSatForSequenceClassification"),rHo=o(" (UniSpeechSat model)"),tHo=l(),sT=a("li"),ape=a("strong"),aHo=o("wav2vec2"),nHo=o(" \u2014 "),WV=a("a"),sHo=o("Wav2Vec2ForSequenceClassification"),lHo=o(" (Wav2Vec2 model)"),iHo=l(),lT=a("li"),npe=a("strong"),dHo=o("wavlm"),cHo=o(" \u2014 "),HV=a("a"),fHo=o("WavLMForSequenceClassification"),mHo=o(" (WavLM model)"),gHo=l(),iT=a("p"),hHo=o("The model is set in evaluation mode by default using "),spe=a("code"),pHo=o("model.eval()"),uHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=a("code"),_Ho=o("model.train()"),bHo=l(),F(dT.$$.fragment),AIe=l(),cd=a("h2"),cT=a("a"),ipe=a("span"),F(j0.$$.fragment),vHo=l(),dpe=a("span"),FHo=o("AutoModelForAudioFrameClassification"),yIe=l(),Oo=a("div"),F(D0.$$.fragment),THo=l(),fd=a("p"),MHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UV=a("a"),EHo=o("from_pretrained()"),CHo=o(" class method or the "),JV=a("a"),wHo=o("from_config()"),AHo=o(` class
method.`),yHo=l(),G0=a("p"),LHo=o("This class cannot be instantiated directly using "),cpe=a("code"),xHo=o("__init__()"),$Ho=o(" (throws an error)."),kHo=l(),ut=a("div"),F(O0.$$.fragment),SHo=l(),fpe=a("p"),RHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),BHo=l(),md=a("p"),PHo=o(`Note:
Loading a model from its configuration file does `),mpe=a("strong"),IHo=o("not"),qHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),NHo=o("from_pretrained()"),jHo=o(" to load the model weights."),DHo=l(),F(fT.$$.fragment),GHo=l(),io=a("div"),F(V0.$$.fragment),OHo=l(),gpe=a("p"),VHo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),XHo=l(),Da=a("p"),zHo=o("The model class to instantiate is selected based on the "),hpe=a("code"),QHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),HHo=o("pretrained_model_name_or_path"),UHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(":"),KHo=l(),Ga=a("ul"),mT=a("li"),_pe=a("strong"),ZHo=o("data2vec-audio"),eUo=o(" \u2014 "),KV=a("a"),oUo=o("Data2VecAudioForAudioFrameClassification"),rUo=o(" (Data2VecAudio model)"),tUo=l(),gT=a("li"),bpe=a("strong"),aUo=o("unispeech-sat"),nUo=o(" \u2014 "),ZV=a("a"),sUo=o("UniSpeechSatForAudioFrameClassification"),lUo=o(" (UniSpeechSat model)"),iUo=l(),hT=a("li"),vpe=a("strong"),dUo=o("wav2vec2"),cUo=o(" \u2014 "),eX=a("a"),fUo=o("Wav2Vec2ForAudioFrameClassification"),mUo=o(" (Wav2Vec2 model)"),gUo=l(),pT=a("li"),Fpe=a("strong"),hUo=o("wavlm"),pUo=o(" \u2014 "),oX=a("a"),uUo=o("WavLMForAudioFrameClassification"),_Uo=o(" (WavLM model)"),bUo=l(),uT=a("p"),vUo=o("The model is set in evaluation mode by default using "),Tpe=a("code"),FUo=o("model.eval()"),TUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=a("code"),MUo=o("model.train()"),EUo=l(),F(_T.$$.fragment),LIe=l(),gd=a("h2"),bT=a("a"),Epe=a("span"),F(X0.$$.fragment),CUo=l(),Cpe=a("span"),wUo=o("AutoModelForCTC"),xIe=l(),Vo=a("div"),F(z0.$$.fragment),AUo=l(),hd=a("p"),yUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rX=a("a"),LUo=o("from_pretrained()"),xUo=o(" class method or the "),tX=a("a"),$Uo=o("from_config()"),kUo=o(` class
method.`),SUo=l(),Q0=a("p"),RUo=o("This class cannot be instantiated directly using "),wpe=a("code"),BUo=o("__init__()"),PUo=o(" (throws an error)."),IUo=l(),_t=a("div"),F(W0.$$.fragment),qUo=l(),Ape=a("p"),NUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jUo=l(),pd=a("p"),DUo=o(`Note:
Loading a model from its configuration file does `),ype=a("strong"),GUo=o("not"),OUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),VUo=o("from_pretrained()"),XUo=o(" to load the model weights."),zUo=l(),F(vT.$$.fragment),QUo=l(),co=a("div"),F(H0.$$.fragment),WUo=l(),Lpe=a("p"),HUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),UUo=l(),Oa=a("p"),JUo=o("The model class to instantiate is selected based on the "),xpe=a("code"),YUo=o("model_type"),KUo=o(` property of the config object (either
passed as an argument or loaded from `),$pe=a("code"),ZUo=o("pretrained_model_name_or_path"),eJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=a("code"),oJo=o("pretrained_model_name_or_path"),rJo=o(":"),tJo=l(),je=a("ul"),FT=a("li"),Spe=a("strong"),aJo=o("data2vec-audio"),nJo=o(" \u2014 "),nX=a("a"),sJo=o("Data2VecAudioForCTC"),lJo=o(" (Data2VecAudio model)"),iJo=l(),TT=a("li"),Rpe=a("strong"),dJo=o("hubert"),cJo=o(" \u2014 "),sX=a("a"),fJo=o("HubertForCTC"),mJo=o(" (Hubert model)"),gJo=l(),MT=a("li"),Bpe=a("strong"),hJo=o("sew"),pJo=o(" \u2014 "),lX=a("a"),uJo=o("SEWForCTC"),_Jo=o(" (SEW model)"),bJo=l(),ET=a("li"),Ppe=a("strong"),vJo=o("sew-d"),FJo=o(" \u2014 "),iX=a("a"),TJo=o("SEWDForCTC"),MJo=o(" (SEW-D model)"),EJo=l(),CT=a("li"),Ipe=a("strong"),CJo=o("unispeech"),wJo=o(" \u2014 "),dX=a("a"),AJo=o("UniSpeechForCTC"),yJo=o(" (UniSpeech model)"),LJo=l(),wT=a("li"),qpe=a("strong"),xJo=o("unispeech-sat"),$Jo=o(" \u2014 "),cX=a("a"),kJo=o("UniSpeechSatForCTC"),SJo=o(" (UniSpeechSat model)"),RJo=l(),AT=a("li"),Npe=a("strong"),BJo=o("wav2vec2"),PJo=o(" \u2014 "),fX=a("a"),IJo=o("Wav2Vec2ForCTC"),qJo=o(" (Wav2Vec2 model)"),NJo=l(),yT=a("li"),jpe=a("strong"),jJo=o("wavlm"),DJo=o(" \u2014 "),mX=a("a"),GJo=o("WavLMForCTC"),OJo=o(" (WavLM model)"),VJo=l(),LT=a("p"),XJo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),zJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),WJo=o("model.train()"),HJo=l(),F(xT.$$.fragment),$Ie=l(),ud=a("h2"),$T=a("a"),Ope=a("span"),F(U0.$$.fragment),UJo=l(),Vpe=a("span"),JJo=o("AutoModelForSpeechSeq2Seq"),kIe=l(),Xo=a("div"),F(J0.$$.fragment),YJo=l(),_d=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),hX=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),Y0=a("p"),aYo=o("This class cannot be instantiated directly using "),Xpe=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),bt=a("div"),F(K0.$$.fragment),iYo=l(),zpe=a("p"),dYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cYo=l(),bd=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),hYo=o("from_pretrained()"),pYo=o(" to load the model weights."),uYo=l(),F(kT.$$.fragment),_Yo=l(),fo=a("div"),F(Z0.$$.fragment),bYo=l(),Wpe=a("p"),vYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FYo=l(),Va=a("p"),TYo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(":"),LYo=l(),ey=a("ul"),ST=a("li"),Ype=a("strong"),xYo=o("speech-encoder-decoder"),$Yo=o(" \u2014 "),uX=a("a"),kYo=o("SpeechEncoderDecoderModel"),SYo=o(" (Speech Encoder decoder model)"),RYo=l(),RT=a("li"),Kpe=a("strong"),BYo=o("speech_to_text"),PYo=o(" \u2014 "),_X=a("a"),IYo=o("Speech2TextForConditionalGeneration"),qYo=o(" (Speech2Text model)"),NYo=l(),BT=a("p"),jYo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),DYo=o("model.eval()"),GYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=a("code"),OYo=o("model.train()"),VYo=l(),F(PT.$$.fragment),SIe=l(),vd=a("h2"),IT=a("a"),oue=a("span"),F(oy.$$.fragment),XYo=l(),rue=a("span"),zYo=o("AutoModelForAudioXVector"),RIe=l(),zo=a("div"),F(ry.$$.fragment),QYo=l(),Fd=a("p"),WYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bX=a("a"),HYo=o("from_pretrained()"),UYo=o(" class method or the "),vX=a("a"),JYo=o("from_config()"),YYo=o(` class
method.`),KYo=l(),ty=a("p"),ZYo=o("This class cannot be instantiated directly using "),tue=a("code"),eKo=o("__init__()"),oKo=o(" (throws an error)."),rKo=l(),vt=a("div"),F(ay.$$.fragment),tKo=l(),aue=a("p"),aKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),nKo=l(),Td=a("p"),sKo=o(`Note:
Loading a model from its configuration file does `),nue=a("strong"),lKo=o("not"),iKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),dKo=o("from_pretrained()"),cKo=o(" to load the model weights."),fKo=l(),F(qT.$$.fragment),mKo=l(),mo=a("div"),F(ny.$$.fragment),gKo=l(),sue=a("p"),hKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),pKo=l(),Xa=a("p"),uKo=o("The model class to instantiate is selected based on the "),lue=a("code"),_Ko=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),TKo=o("pretrained_model_name_or_path"),MKo=o(":"),EKo=l(),za=a("ul"),NT=a("li"),cue=a("strong"),CKo=o("data2vec-audio"),wKo=o(" \u2014 "),TX=a("a"),AKo=o("Data2VecAudioForXVector"),yKo=o(" (Data2VecAudio model)"),LKo=l(),jT=a("li"),fue=a("strong"),xKo=o("unispeech-sat"),$Ko=o(" \u2014 "),MX=a("a"),kKo=o("UniSpeechSatForXVector"),SKo=o(" (UniSpeechSat model)"),RKo=l(),DT=a("li"),mue=a("strong"),BKo=o("wav2vec2"),PKo=o(" \u2014 "),EX=a("a"),IKo=o("Wav2Vec2ForXVector"),qKo=o(" (Wav2Vec2 model)"),NKo=l(),GT=a("li"),gue=a("strong"),jKo=o("wavlm"),DKo=o(" \u2014 "),CX=a("a"),GKo=o("WavLMForXVector"),OKo=o(" (WavLM model)"),VKo=l(),OT=a("p"),XKo=o("The model is set in evaluation mode by default using "),hue=a("code"),zKo=o("model.eval()"),QKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),WKo=o("model.train()"),HKo=l(),F(VT.$$.fragment),BIe=l(),Md=a("h2"),XT=a("a"),uue=a("span"),F(sy.$$.fragment),UKo=l(),_ue=a("span"),JKo=o("AutoModelForMaskedImageModeling"),PIe=l(),Qo=a("div"),F(ly.$$.fragment),YKo=l(),Ed=a("p"),KKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wX=a("a"),ZKo=o("from_pretrained()"),eZo=o(" class method or the "),AX=a("a"),oZo=o("from_config()"),rZo=o(` class
method.`),tZo=l(),iy=a("p"),aZo=o("This class cannot be instantiated directly using "),bue=a("code"),nZo=o("__init__()"),sZo=o(" (throws an error)."),lZo=l(),Ft=a("div"),F(dy.$$.fragment),iZo=l(),vue=a("p"),dZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cZo=l(),Cd=a("p"),fZo=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),mZo=o("not"),gZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=a("a"),hZo=o("from_pretrained()"),pZo=o(" to load the model weights."),uZo=l(),F(zT.$$.fragment),_Zo=l(),go=a("div"),F(cy.$$.fragment),bZo=l(),Tue=a("p"),vZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),FZo=l(),Qa=a("p"),TZo=o("The model class to instantiate is selected based on the "),Mue=a("code"),MZo=o("model_type"),EZo=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),CZo=o("pretrained_model_name_or_path"),wZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),AZo=o("pretrained_model_name_or_path"),yZo=o(":"),LZo=l(),wd=a("ul"),QT=a("li"),wue=a("strong"),xZo=o("deit"),$Zo=o(" \u2014 "),LX=a("a"),kZo=o("DeiTForMaskedImageModeling"),SZo=o(" (DeiT model)"),RZo=l(),WT=a("li"),Aue=a("strong"),BZo=o("swin"),PZo=o(" \u2014 "),xX=a("a"),IZo=o("SwinForMaskedImageModeling"),qZo=o(" (Swin model)"),NZo=l(),HT=a("li"),yue=a("strong"),jZo=o("vit"),DZo=o(" \u2014 "),$X=a("a"),GZo=o("ViTForMaskedImageModeling"),OZo=o(" (ViT model)"),VZo=l(),UT=a("p"),XZo=o("The model is set in evaluation mode by default using "),Lue=a("code"),zZo=o("model.eval()"),QZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=a("code"),WZo=o("model.train()"),HZo=l(),F(JT.$$.fragment),IIe=l(),Ad=a("h2"),YT=a("a"),$ue=a("span"),F(fy.$$.fragment),UZo=l(),kue=a("span"),JZo=o("AutoModelForObjectDetection"),qIe=l(),Wo=a("div"),F(my.$$.fragment),YZo=l(),yd=a("p"),KZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kX=a("a"),ZZo=o("from_pretrained()"),eer=o(" class method or the "),SX=a("a"),oer=o("from_config()"),rer=o(` class
method.`),ter=l(),gy=a("p"),aer=o("This class cannot be instantiated directly using "),Sue=a("code"),ner=o("__init__()"),ser=o(" (throws an error)."),ler=l(),Tt=a("div"),F(hy.$$.fragment),ier=l(),Rue=a("p"),der=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cer=l(),Ld=a("p"),fer=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),mer=o("not"),ger=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),her=o("from_pretrained()"),per=o(" to load the model weights."),uer=l(),F(KT.$$.fragment),_er=l(),ho=a("div"),F(py.$$.fragment),ber=l(),Pue=a("p"),ver=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Fer=l(),Wa=a("p"),Ter=o("The model class to instantiate is selected based on the "),Iue=a("code"),Mer=o("model_type"),Eer=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),Cer=o("pretrained_model_name_or_path"),wer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),Aer=o("pretrained_model_name_or_path"),yer=o(":"),Ler=l(),uy=a("ul"),ZT=a("li"),jue=a("strong"),xer=o("detr"),$er=o(" \u2014 "),BX=a("a"),ker=o("DetrForObjectDetection"),Ser=o(" (DETR model)"),Rer=l(),e7=a("li"),Due=a("strong"),Ber=o("yolos"),Per=o(" \u2014 "),PX=a("a"),Ier=o("YolosForObjectDetection"),qer=o(" (YOLOS model)"),Ner=l(),o7=a("p"),jer=o("The model is set in evaluation mode by default using "),Gue=a("code"),Der=o("model.eval()"),Ger=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),Oer=o("model.train()"),Ver=l(),F(r7.$$.fragment),NIe=l(),xd=a("h2"),t7=a("a"),Vue=a("span"),F(_y.$$.fragment),Xer=l(),Xue=a("span"),zer=o("AutoModelForImageSegmentation"),jIe=l(),Ho=a("div"),F(by.$$.fragment),Qer=l(),$d=a("p"),Wer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IX=a("a"),Her=o("from_pretrained()"),Uer=o(" class method or the "),qX=a("a"),Jer=o("from_config()"),Yer=o(` class
method.`),Ker=l(),vy=a("p"),Zer=o("This class cannot be instantiated directly using "),zue=a("code"),eor=o("__init__()"),oor=o(" (throws an error)."),ror=l(),Mt=a("div"),F(Fy.$$.fragment),tor=l(),Que=a("p"),aor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),nor=l(),kd=a("p"),sor=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),lor=o("not"),ior=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),dor=o("from_pretrained()"),cor=o(" to load the model weights."),mor=l(),F(a7.$$.fragment),gor=l(),po=a("div"),F(Ty.$$.fragment),hor=l(),Hue=a("p"),por=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),uor=l(),Ha=a("p"),_or=o("The model class to instantiate is selected based on the "),Uue=a("code"),bor=o("model_type"),vor=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),For=o("pretrained_model_name_or_path"),Tor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),Mor=o("pretrained_model_name_or_path"),Eor=o(":"),Cor=l(),Kue=a("ul"),n7=a("li"),Zue=a("strong"),wor=o("detr"),Aor=o(" \u2014 "),jX=a("a"),yor=o("DetrForSegmentation"),Lor=o(" (DETR model)"),xor=l(),s7=a("p"),$or=o("The model is set in evaluation mode by default using "),e_e=a("code"),kor=o("model.eval()"),Sor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=a("code"),Ror=o("model.train()"),Bor=l(),F(l7.$$.fragment),DIe=l(),Sd=a("h2"),i7=a("a"),r_e=a("span"),F(My.$$.fragment),Por=l(),t_e=a("span"),Ior=o("AutoModelForSemanticSegmentation"),GIe=l(),Uo=a("div"),F(Ey.$$.fragment),qor=l(),Rd=a("p"),Nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DX=a("a"),jor=o("from_pretrained()"),Dor=o(" class method or the "),GX=a("a"),Gor=o("from_config()"),Oor=o(` class
method.`),Vor=l(),Cy=a("p"),Xor=o("This class cannot be instantiated directly using "),a_e=a("code"),zor=o("__init__()"),Qor=o(" (throws an error)."),Wor=l(),Et=a("div"),F(wy.$$.fragment),Hor=l(),n_e=a("p"),Uor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Jor=l(),Bd=a("p"),Yor=o(`Note:
Loading a model from its configuration file does `),s_e=a("strong"),Kor=o("not"),Zor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),err=o("from_pretrained()"),orr=o(" to load the model weights."),rrr=l(),F(d7.$$.fragment),trr=l(),uo=a("div"),F(Ay.$$.fragment),arr=l(),l_e=a("p"),nrr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),srr=l(),Ua=a("p"),lrr=o("The model class to instantiate is selected based on the "),i_e=a("code"),irr=o("model_type"),drr=o(` property of the config object (either
passed as an argument or loaded from `),d_e=a("code"),crr=o("pretrained_model_name_or_path"),frr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=a("code"),mrr=o("pretrained_model_name_or_path"),grr=o(":"),hrr=l(),Ja=a("ul"),c7=a("li"),f_e=a("strong"),prr=o("beit"),urr=o(" \u2014 "),VX=a("a"),_rr=o("BeitForSemanticSegmentation"),brr=o(" (BEiT model)"),vrr=l(),f7=a("li"),m_e=a("strong"),Frr=o("data2vec-vision"),Trr=o(" \u2014 "),XX=a("a"),Mrr=o("Data2VecVisionForSemanticSegmentation"),Err=o(" (Data2VecVision model)"),Crr=l(),m7=a("li"),g_e=a("strong"),wrr=o("dpt"),Arr=o(" \u2014 "),zX=a("a"),yrr=o("DPTForSemanticSegmentation"),Lrr=o(" (DPT model)"),xrr=l(),g7=a("li"),h_e=a("strong"),$rr=o("segformer"),krr=o(" \u2014 "),QX=a("a"),Srr=o("SegformerForSemanticSegmentation"),Rrr=o(" (SegFormer model)"),Brr=l(),h7=a("p"),Prr=o("The model is set in evaluation mode by default using "),p_e=a("code"),Irr=o("model.eval()"),qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=a("code"),Nrr=o("model.train()"),jrr=l(),F(p7.$$.fragment),OIe=l(),Pd=a("h2"),u7=a("a"),__e=a("span"),F(yy.$$.fragment),Drr=l(),b_e=a("span"),Grr=o("AutoModelForInstanceSegmentation"),VIe=l(),Jo=a("div"),F(Ly.$$.fragment),Orr=l(),Id=a("p"),Vrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WX=a("a"),Xrr=o("from_pretrained()"),zrr=o(" class method or the "),HX=a("a"),Qrr=o("from_config()"),Wrr=o(` class
method.`),Hrr=l(),xy=a("p"),Urr=o("This class cannot be instantiated directly using "),v_e=a("code"),Jrr=o("__init__()"),Yrr=o(" (throws an error)."),Krr=l(),Ct=a("div"),F($y.$$.fragment),Zrr=l(),F_e=a("p"),etr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),otr=l(),qd=a("p"),rtr=o(`Note:
Loading a model from its configuration file does `),T_e=a("strong"),ttr=o("not"),atr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),ntr=o("from_pretrained()"),str=o(" to load the model weights."),ltr=l(),F(_7.$$.fragment),itr=l(),_o=a("div"),F(ky.$$.fragment),dtr=l(),M_e=a("p"),ctr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ftr=l(),Ya=a("p"),mtr=o("The model class to instantiate is selected based on the "),E_e=a("code"),gtr=o("model_type"),htr=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),ptr=o("pretrained_model_name_or_path"),utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),_tr=o("pretrained_model_name_or_path"),btr=o(":"),vtr=l(),A_e=a("ul"),b7=a("li"),y_e=a("strong"),Ftr=o("maskformer"),Ttr=o(" \u2014 "),JX=a("a"),Mtr=o("MaskFormerForInstanceSegmentation"),Etr=o(" (MaskFormer model)"),Ctr=l(),v7=a("p"),wtr=o("The model is set in evaluation mode by default using "),L_e=a("code"),Atr=o("model.eval()"),ytr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=a("code"),Ltr=o("model.train()"),xtr=l(),F(F7.$$.fragment),XIe=l(),Nd=a("h2"),T7=a("a"),$_e=a("span"),F(Sy.$$.fragment),$tr=l(),k_e=a("span"),ktr=o("TFAutoModel"),zIe=l(),Yo=a("div"),F(Ry.$$.fragment),Str=l(),jd=a("p"),Rtr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YX=a("a"),Btr=o("from_pretrained()"),Ptr=o(" class method or the "),KX=a("a"),Itr=o("from_config()"),qtr=o(` class
method.`),Ntr=l(),By=a("p"),jtr=o("This class cannot be instantiated directly using "),S_e=a("code"),Dtr=o("__init__()"),Gtr=o(" (throws an error)."),Otr=l(),wt=a("div"),F(Py.$$.fragment),Vtr=l(),R_e=a("p"),Xtr=o("Instantiates one of the base model classes of the library from a configuration."),ztr=l(),Dd=a("p"),Qtr=o(`Note:
Loading a model from its configuration file does `),B_e=a("strong"),Wtr=o("not"),Htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),Utr=o("from_pretrained()"),Jtr=o(" to load the model weights."),Ytr=l(),F(M7.$$.fragment),Ktr=l(),wr=a("div"),F(Iy.$$.fragment),Ztr=l(),P_e=a("p"),ear=o("Instantiate one of the base model classes of the library from a pretrained model."),oar=l(),Ka=a("p"),rar=o("The model class to instantiate is selected based on the "),I_e=a("code"),tar=o("model_type"),aar=o(` property of the config object (either
passed as an argument or loaded from `),q_e=a("code"),nar=o("pretrained_model_name_or_path"),sar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=a("code"),lar=o("pretrained_model_name_or_path"),iar=o(":"),dar=l(),N=a("ul"),E7=a("li"),j_e=a("strong"),car=o("albert"),far=o(" \u2014 "),ez=a("a"),mar=o("TFAlbertModel"),gar=o(" (ALBERT model)"),har=l(),C7=a("li"),D_e=a("strong"),par=o("bart"),uar=o(" \u2014 "),oz=a("a"),_ar=o("TFBartModel"),bar=o(" (BART model)"),Far=l(),w7=a("li"),G_e=a("strong"),Tar=o("bert"),Mar=o(" \u2014 "),rz=a("a"),Ear=o("TFBertModel"),Car=o(" (BERT model)"),war=l(),A7=a("li"),O_e=a("strong"),Aar=o("blenderbot"),yar=o(" \u2014 "),tz=a("a"),Lar=o("TFBlenderbotModel"),xar=o(" (Blenderbot model)"),$ar=l(),y7=a("li"),V_e=a("strong"),kar=o("blenderbot-small"),Sar=o(" \u2014 "),az=a("a"),Rar=o("TFBlenderbotSmallModel"),Bar=o(" (BlenderbotSmall model)"),Par=l(),L7=a("li"),X_e=a("strong"),Iar=o("camembert"),qar=o(" \u2014 "),nz=a("a"),Nar=o("TFCamembertModel"),jar=o(" (CamemBERT model)"),Dar=l(),x7=a("li"),z_e=a("strong"),Gar=o("clip"),Oar=o(" \u2014 "),sz=a("a"),Var=o("TFCLIPModel"),Xar=o(" (CLIP model)"),zar=l(),$7=a("li"),Q_e=a("strong"),Qar=o("convbert"),War=o(" \u2014 "),lz=a("a"),Har=o("TFConvBertModel"),Uar=o(" (ConvBERT model)"),Jar=l(),k7=a("li"),W_e=a("strong"),Yar=o("convnext"),Kar=o(" \u2014 "),iz=a("a"),Zar=o("TFConvNextModel"),enr=o(" (ConvNext model)"),onr=l(),S7=a("li"),H_e=a("strong"),rnr=o("ctrl"),tnr=o(" \u2014 "),dz=a("a"),anr=o("TFCTRLModel"),nnr=o(" (CTRL model)"),snr=l(),R7=a("li"),U_e=a("strong"),lnr=o("data2vec-vision"),inr=o(" \u2014 "),cz=a("a"),dnr=o("TFData2VecVisionModel"),cnr=o(" (Data2VecVision model)"),fnr=l(),B7=a("li"),J_e=a("strong"),mnr=o("deberta"),gnr=o(" \u2014 "),fz=a("a"),hnr=o("TFDebertaModel"),pnr=o(" (DeBERTa model)"),unr=l(),P7=a("li"),Y_e=a("strong"),_nr=o("deberta-v2"),bnr=o(" \u2014 "),mz=a("a"),vnr=o("TFDebertaV2Model"),Fnr=o(" (DeBERTa-v2 model)"),Tnr=l(),I7=a("li"),K_e=a("strong"),Mnr=o("distilbert"),Enr=o(" \u2014 "),gz=a("a"),Cnr=o("TFDistilBertModel"),wnr=o(" (DistilBERT model)"),Anr=l(),q7=a("li"),Z_e=a("strong"),ynr=o("dpr"),Lnr=o(" \u2014 "),hz=a("a"),xnr=o("TFDPRQuestionEncoder"),$nr=o(" (DPR model)"),knr=l(),N7=a("li"),e1e=a("strong"),Snr=o("electra"),Rnr=o(" \u2014 "),pz=a("a"),Bnr=o("TFElectraModel"),Pnr=o(" (ELECTRA model)"),Inr=l(),j7=a("li"),o1e=a("strong"),qnr=o("flaubert"),Nnr=o(" \u2014 "),uz=a("a"),jnr=o("TFFlaubertModel"),Dnr=o(" (FlauBERT model)"),Gnr=l(),Ps=a("li"),r1e=a("strong"),Onr=o("funnel"),Vnr=o(" \u2014 "),_z=a("a"),Xnr=o("TFFunnelModel"),znr=o(" or "),bz=a("a"),Qnr=o("TFFunnelBaseModel"),Wnr=o(" (Funnel Transformer model)"),Hnr=l(),D7=a("li"),t1e=a("strong"),Unr=o("gpt2"),Jnr=o(" \u2014 "),vz=a("a"),Ynr=o("TFGPT2Model"),Knr=o(" (OpenAI GPT-2 model)"),Znr=l(),G7=a("li"),a1e=a("strong"),esr=o("gptj"),osr=o(" \u2014 "),Fz=a("a"),rsr=o("TFGPTJModel"),tsr=o(" (GPT-J model)"),asr=l(),O7=a("li"),n1e=a("strong"),nsr=o("hubert"),ssr=o(" \u2014 "),Tz=a("a"),lsr=o("TFHubertModel"),isr=o(" (Hubert model)"),dsr=l(),V7=a("li"),s1e=a("strong"),csr=o("layoutlm"),fsr=o(" \u2014 "),Mz=a("a"),msr=o("TFLayoutLMModel"),gsr=o(" (LayoutLM model)"),hsr=l(),X7=a("li"),l1e=a("strong"),psr=o("led"),usr=o(" \u2014 "),Ez=a("a"),_sr=o("TFLEDModel"),bsr=o(" (LED model)"),vsr=l(),z7=a("li"),i1e=a("strong"),Fsr=o("longformer"),Tsr=o(" \u2014 "),Cz=a("a"),Msr=o("TFLongformerModel"),Esr=o(" (Longformer model)"),Csr=l(),Q7=a("li"),d1e=a("strong"),wsr=o("lxmert"),Asr=o(" \u2014 "),wz=a("a"),ysr=o("TFLxmertModel"),Lsr=o(" (LXMERT model)"),xsr=l(),W7=a("li"),c1e=a("strong"),$sr=o("marian"),ksr=o(" \u2014 "),Az=a("a"),Ssr=o("TFMarianModel"),Rsr=o(" (Marian model)"),Bsr=l(),H7=a("li"),f1e=a("strong"),Psr=o("mbart"),Isr=o(" \u2014 "),yz=a("a"),qsr=o("TFMBartModel"),Nsr=o(" (mBART model)"),jsr=l(),U7=a("li"),m1e=a("strong"),Dsr=o("mobilebert"),Gsr=o(" \u2014 "),Lz=a("a"),Osr=o("TFMobileBertModel"),Vsr=o(" (MobileBERT model)"),Xsr=l(),J7=a("li"),g1e=a("strong"),zsr=o("mpnet"),Qsr=o(" \u2014 "),xz=a("a"),Wsr=o("TFMPNetModel"),Hsr=o(" (MPNet model)"),Usr=l(),Y7=a("li"),h1e=a("strong"),Jsr=o("mt5"),Ysr=o(" \u2014 "),$z=a("a"),Ksr=o("TFMT5Model"),Zsr=o(" (mT5 model)"),elr=l(),K7=a("li"),p1e=a("strong"),olr=o("openai-gpt"),rlr=o(" \u2014 "),kz=a("a"),tlr=o("TFOpenAIGPTModel"),alr=o(" (OpenAI GPT model)"),nlr=l(),Z7=a("li"),u1e=a("strong"),slr=o("pegasus"),llr=o(" \u2014 "),Sz=a("a"),ilr=o("TFPegasusModel"),dlr=o(" (Pegasus model)"),clr=l(),e9=a("li"),_1e=a("strong"),flr=o("rembert"),mlr=o(" \u2014 "),Rz=a("a"),glr=o("TFRemBertModel"),hlr=o(" (RemBERT model)"),plr=l(),o9=a("li"),b1e=a("strong"),ulr=o("roberta"),_lr=o(" \u2014 "),Bz=a("a"),blr=o("TFRobertaModel"),vlr=o(" (RoBERTa model)"),Flr=l(),r9=a("li"),v1e=a("strong"),Tlr=o("roformer"),Mlr=o(" \u2014 "),Pz=a("a"),Elr=o("TFRoFormerModel"),Clr=o(" (RoFormer model)"),wlr=l(),t9=a("li"),F1e=a("strong"),Alr=o("speech_to_text"),ylr=o(" \u2014 "),Iz=a("a"),Llr=o("TFSpeech2TextModel"),xlr=o(" (Speech2Text model)"),$lr=l(),a9=a("li"),T1e=a("strong"),klr=o("swin"),Slr=o(" \u2014 "),qz=a("a"),Rlr=o("TFSwinModel"),Blr=o(" (Swin model)"),Plr=l(),n9=a("li"),M1e=a("strong"),Ilr=o("t5"),qlr=o(" \u2014 "),Nz=a("a"),Nlr=o("TFT5Model"),jlr=o(" (T5 model)"),Dlr=l(),s9=a("li"),E1e=a("strong"),Glr=o("tapas"),Olr=o(" \u2014 "),jz=a("a"),Vlr=o("TFTapasModel"),Xlr=o(" (TAPAS model)"),zlr=l(),l9=a("li"),C1e=a("strong"),Qlr=o("transfo-xl"),Wlr=o(" \u2014 "),Dz=a("a"),Hlr=o("TFTransfoXLModel"),Ulr=o(" (Transformer-XL model)"),Jlr=l(),i9=a("li"),w1e=a("strong"),Ylr=o("vit"),Klr=o(" \u2014 "),Gz=a("a"),Zlr=o("TFViTModel"),eir=o(" (ViT model)"),oir=l(),d9=a("li"),A1e=a("strong"),rir=o("vit_mae"),tir=o(" \u2014 "),Oz=a("a"),air=o("TFViTMAEModel"),nir=o(" (ViTMAE model)"),sir=l(),c9=a("li"),y1e=a("strong"),lir=o("wav2vec2"),iir=o(" \u2014 "),Vz=a("a"),dir=o("TFWav2Vec2Model"),cir=o(" (Wav2Vec2 model)"),fir=l(),f9=a("li"),L1e=a("strong"),mir=o("xlm"),gir=o(" \u2014 "),Xz=a("a"),hir=o("TFXLMModel"),pir=o(" (XLM model)"),uir=l(),m9=a("li"),x1e=a("strong"),_ir=o("xlm-roberta"),bir=o(" \u2014 "),zz=a("a"),vir=o("TFXLMRobertaModel"),Fir=o(" (XLM-RoBERTa model)"),Tir=l(),g9=a("li"),$1e=a("strong"),Mir=o("xlnet"),Eir=o(" \u2014 "),Qz=a("a"),Cir=o("TFXLNetModel"),wir=o(" (XLNet model)"),Air=l(),F(h9.$$.fragment),QIe=l(),Gd=a("h2"),p9=a("a"),k1e=a("span"),F(qy.$$.fragment),yir=l(),S1e=a("span"),Lir=o("TFAutoModelForPreTraining"),WIe=l(),Ko=a("div"),F(Ny.$$.fragment),xir=l(),Od=a("p"),$ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wz=a("a"),kir=o("from_pretrained()"),Sir=o(" class method or the "),Hz=a("a"),Rir=o("from_config()"),Bir=o(` class
method.`),Pir=l(),jy=a("p"),Iir=o("This class cannot be instantiated directly using "),R1e=a("code"),qir=o("__init__()"),Nir=o(" (throws an error)."),jir=l(),At=a("div"),F(Dy.$$.fragment),Dir=l(),B1e=a("p"),Gir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oir=l(),Vd=a("p"),Vir=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),Xir=o("not"),zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),Qir=o("from_pretrained()"),Wir=o(" to load the model weights."),Hir=l(),F(u9.$$.fragment),Uir=l(),Ar=a("div"),F(Gy.$$.fragment),Jir=l(),I1e=a("p"),Yir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kir=l(),Za=a("p"),Zir=o("The model class to instantiate is selected based on the "),q1e=a("code"),edr=o("model_type"),odr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),rdr=o("pretrained_model_name_or_path"),tdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),adr=o("pretrained_model_name_or_path"),ndr=o(":"),sdr=l(),se=a("ul"),_9=a("li"),D1e=a("strong"),ldr=o("albert"),idr=o(" \u2014 "),Jz=a("a"),ddr=o("TFAlbertForPreTraining"),cdr=o(" (ALBERT model)"),fdr=l(),b9=a("li"),G1e=a("strong"),mdr=o("bart"),gdr=o(" \u2014 "),Yz=a("a"),hdr=o("TFBartForConditionalGeneration"),pdr=o(" (BART model)"),udr=l(),v9=a("li"),O1e=a("strong"),_dr=o("bert"),bdr=o(" \u2014 "),Kz=a("a"),vdr=o("TFBertForPreTraining"),Fdr=o(" (BERT model)"),Tdr=l(),F9=a("li"),V1e=a("strong"),Mdr=o("camembert"),Edr=o(" \u2014 "),Zz=a("a"),Cdr=o("TFCamembertForMaskedLM"),wdr=o(" (CamemBERT model)"),Adr=l(),T9=a("li"),X1e=a("strong"),ydr=o("ctrl"),Ldr=o(" \u2014 "),eQ=a("a"),xdr=o("TFCTRLLMHeadModel"),$dr=o(" (CTRL model)"),kdr=l(),M9=a("li"),z1e=a("strong"),Sdr=o("distilbert"),Rdr=o(" \u2014 "),oQ=a("a"),Bdr=o("TFDistilBertForMaskedLM"),Pdr=o(" (DistilBERT model)"),Idr=l(),E9=a("li"),Q1e=a("strong"),qdr=o("electra"),Ndr=o(" \u2014 "),rQ=a("a"),jdr=o("TFElectraForPreTraining"),Ddr=o(" (ELECTRA model)"),Gdr=l(),C9=a("li"),W1e=a("strong"),Odr=o("flaubert"),Vdr=o(" \u2014 "),tQ=a("a"),Xdr=o("TFFlaubertWithLMHeadModel"),zdr=o(" (FlauBERT model)"),Qdr=l(),w9=a("li"),H1e=a("strong"),Wdr=o("funnel"),Hdr=o(" \u2014 "),aQ=a("a"),Udr=o("TFFunnelForPreTraining"),Jdr=o(" (Funnel Transformer model)"),Ydr=l(),A9=a("li"),U1e=a("strong"),Kdr=o("gpt2"),Zdr=o(" \u2014 "),nQ=a("a"),ecr=o("TFGPT2LMHeadModel"),ocr=o(" (OpenAI GPT-2 model)"),rcr=l(),y9=a("li"),J1e=a("strong"),tcr=o("layoutlm"),acr=o(" \u2014 "),sQ=a("a"),ncr=o("TFLayoutLMForMaskedLM"),scr=o(" (LayoutLM model)"),lcr=l(),L9=a("li"),Y1e=a("strong"),icr=o("lxmert"),dcr=o(" \u2014 "),lQ=a("a"),ccr=o("TFLxmertForPreTraining"),fcr=o(" (LXMERT model)"),mcr=l(),x9=a("li"),K1e=a("strong"),gcr=o("mobilebert"),hcr=o(" \u2014 "),iQ=a("a"),pcr=o("TFMobileBertForPreTraining"),ucr=o(" (MobileBERT model)"),_cr=l(),$9=a("li"),Z1e=a("strong"),bcr=o("mpnet"),vcr=o(" \u2014 "),dQ=a("a"),Fcr=o("TFMPNetForMaskedLM"),Tcr=o(" (MPNet model)"),Mcr=l(),k9=a("li"),e2e=a("strong"),Ecr=o("openai-gpt"),Ccr=o(" \u2014 "),cQ=a("a"),wcr=o("TFOpenAIGPTLMHeadModel"),Acr=o(" (OpenAI GPT model)"),ycr=l(),S9=a("li"),o2e=a("strong"),Lcr=o("roberta"),xcr=o(" \u2014 "),fQ=a("a"),$cr=o("TFRobertaForMaskedLM"),kcr=o(" (RoBERTa model)"),Scr=l(),R9=a("li"),r2e=a("strong"),Rcr=o("t5"),Bcr=o(" \u2014 "),mQ=a("a"),Pcr=o("TFT5ForConditionalGeneration"),Icr=o(" (T5 model)"),qcr=l(),B9=a("li"),t2e=a("strong"),Ncr=o("tapas"),jcr=o(" \u2014 "),gQ=a("a"),Dcr=o("TFTapasForMaskedLM"),Gcr=o(" (TAPAS model)"),Ocr=l(),P9=a("li"),a2e=a("strong"),Vcr=o("transfo-xl"),Xcr=o(" \u2014 "),hQ=a("a"),zcr=o("TFTransfoXLLMHeadModel"),Qcr=o(" (Transformer-XL model)"),Wcr=l(),I9=a("li"),n2e=a("strong"),Hcr=o("vit_mae"),Ucr=o(" \u2014 "),pQ=a("a"),Jcr=o("TFViTMAEForPreTraining"),Ycr=o(" (ViTMAE model)"),Kcr=l(),q9=a("li"),s2e=a("strong"),Zcr=o("xlm"),efr=o(" \u2014 "),uQ=a("a"),ofr=o("TFXLMWithLMHeadModel"),rfr=o(" (XLM model)"),tfr=l(),N9=a("li"),l2e=a("strong"),afr=o("xlm-roberta"),nfr=o(" \u2014 "),_Q=a("a"),sfr=o("TFXLMRobertaForMaskedLM"),lfr=o(" (XLM-RoBERTa model)"),ifr=l(),j9=a("li"),i2e=a("strong"),dfr=o("xlnet"),cfr=o(" \u2014 "),bQ=a("a"),ffr=o("TFXLNetLMHeadModel"),mfr=o(" (XLNet model)"),gfr=l(),F(D9.$$.fragment),HIe=l(),Xd=a("h2"),G9=a("a"),d2e=a("span"),F(Oy.$$.fragment),hfr=l(),c2e=a("span"),pfr=o("TFAutoModelForCausalLM"),UIe=l(),Zo=a("div"),F(Vy.$$.fragment),ufr=l(),zd=a("p"),_fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=a("a"),bfr=o("from_pretrained()"),vfr=o(" class method or the "),FQ=a("a"),Ffr=o("from_config()"),Tfr=o(` class
method.`),Mfr=l(),Xy=a("p"),Efr=o("This class cannot be instantiated directly using "),f2e=a("code"),Cfr=o("__init__()"),wfr=o(" (throws an error)."),Afr=l(),yt=a("div"),F(zy.$$.fragment),yfr=l(),m2e=a("p"),Lfr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xfr=l(),Qd=a("p"),$fr=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),kfr=o("not"),Sfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Rfr=o("from_pretrained()"),Bfr=o(" to load the model weights."),Pfr=l(),F(O9.$$.fragment),Ifr=l(),yr=a("div"),F(Qy.$$.fragment),qfr=l(),h2e=a("p"),Nfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jfr=l(),en=a("p"),Dfr=o("The model class to instantiate is selected based on the "),p2e=a("code"),Gfr=o("model_type"),Ofr=o(` property of the config object (either
passed as an argument or loaded from `),u2e=a("code"),Vfr=o("pretrained_model_name_or_path"),Xfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),zfr=o("pretrained_model_name_or_path"),Qfr=o(":"),Wfr=l(),Te=a("ul"),V9=a("li"),b2e=a("strong"),Hfr=o("bert"),Ufr=o(" \u2014 "),MQ=a("a"),Jfr=o("TFBertLMHeadModel"),Yfr=o(" (BERT model)"),Kfr=l(),X9=a("li"),v2e=a("strong"),Zfr=o("camembert"),emr=o(" \u2014 "),EQ=a("a"),omr=o("TFCamembertForCausalLM"),rmr=o(" (CamemBERT model)"),tmr=l(),z9=a("li"),F2e=a("strong"),amr=o("ctrl"),nmr=o(" \u2014 "),CQ=a("a"),smr=o("TFCTRLLMHeadModel"),lmr=o(" (CTRL model)"),imr=l(),Q9=a("li"),T2e=a("strong"),dmr=o("gpt2"),cmr=o(" \u2014 "),wQ=a("a"),fmr=o("TFGPT2LMHeadModel"),mmr=o(" (OpenAI GPT-2 model)"),gmr=l(),W9=a("li"),M2e=a("strong"),hmr=o("gptj"),pmr=o(" \u2014 "),AQ=a("a"),umr=o("TFGPTJForCausalLM"),_mr=o(" (GPT-J model)"),bmr=l(),H9=a("li"),E2e=a("strong"),vmr=o("openai-gpt"),Fmr=o(" \u2014 "),yQ=a("a"),Tmr=o("TFOpenAIGPTLMHeadModel"),Mmr=o(" (OpenAI GPT model)"),Emr=l(),U9=a("li"),C2e=a("strong"),Cmr=o("rembert"),wmr=o(" \u2014 "),LQ=a("a"),Amr=o("TFRemBertForCausalLM"),ymr=o(" (RemBERT model)"),Lmr=l(),J9=a("li"),w2e=a("strong"),xmr=o("roberta"),$mr=o(" \u2014 "),xQ=a("a"),kmr=o("TFRobertaForCausalLM"),Smr=o(" (RoBERTa model)"),Rmr=l(),Y9=a("li"),A2e=a("strong"),Bmr=o("roformer"),Pmr=o(" \u2014 "),$Q=a("a"),Imr=o("TFRoFormerForCausalLM"),qmr=o(" (RoFormer model)"),Nmr=l(),K9=a("li"),y2e=a("strong"),jmr=o("transfo-xl"),Dmr=o(" \u2014 "),kQ=a("a"),Gmr=o("TFTransfoXLLMHeadModel"),Omr=o(" (Transformer-XL model)"),Vmr=l(),Z9=a("li"),L2e=a("strong"),Xmr=o("xlm"),zmr=o(" \u2014 "),SQ=a("a"),Qmr=o("TFXLMWithLMHeadModel"),Wmr=o(" (XLM model)"),Hmr=l(),eM=a("li"),x2e=a("strong"),Umr=o("xlnet"),Jmr=o(" \u2014 "),RQ=a("a"),Ymr=o("TFXLNetLMHeadModel"),Kmr=o(" (XLNet model)"),Zmr=l(),F(oM.$$.fragment),JIe=l(),Wd=a("h2"),rM=a("a"),$2e=a("span"),F(Wy.$$.fragment),egr=l(),k2e=a("span"),ogr=o("TFAutoModelForImageClassification"),YIe=l(),er=a("div"),F(Hy.$$.fragment),rgr=l(),Hd=a("p"),tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BQ=a("a"),agr=o("from_pretrained()"),ngr=o(" class method or the "),PQ=a("a"),sgr=o("from_config()"),lgr=o(` class
method.`),igr=l(),Uy=a("p"),dgr=o("This class cannot be instantiated directly using "),S2e=a("code"),cgr=o("__init__()"),fgr=o(" (throws an error)."),mgr=l(),Lt=a("div"),F(Jy.$$.fragment),ggr=l(),R2e=a("p"),hgr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),pgr=l(),Ud=a("p"),ugr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),_gr=o("not"),bgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),vgr=o("from_pretrained()"),Fgr=o(" to load the model weights."),Tgr=l(),F(tM.$$.fragment),Mgr=l(),Lr=a("div"),F(Yy.$$.fragment),Egr=l(),P2e=a("p"),Cgr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wgr=l(),on=a("p"),Agr=o("The model class to instantiate is selected based on the "),I2e=a("code"),ygr=o("model_type"),Lgr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),xgr=o("pretrained_model_name_or_path"),$gr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),kgr=o("pretrained_model_name_or_path"),Sgr=o(":"),Rgr=l(),rn=a("ul"),aM=a("li"),j2e=a("strong"),Bgr=o("convnext"),Pgr=o(" \u2014 "),qQ=a("a"),Igr=o("TFConvNextForImageClassification"),qgr=o(" (ConvNext model)"),Ngr=l(),nM=a("li"),D2e=a("strong"),jgr=o("data2vec-vision"),Dgr=o(" \u2014 "),NQ=a("a"),Ggr=o("TFData2VecVisionForImageClassification"),Ogr=o(" (Data2VecVision model)"),Vgr=l(),sM=a("li"),G2e=a("strong"),Xgr=o("swin"),zgr=o(" \u2014 "),jQ=a("a"),Qgr=o("TFSwinForImageClassification"),Wgr=o(" (Swin model)"),Hgr=l(),lM=a("li"),O2e=a("strong"),Ugr=o("vit"),Jgr=o(" \u2014 "),DQ=a("a"),Ygr=o("TFViTForImageClassification"),Kgr=o(" (ViT model)"),Zgr=l(),F(iM.$$.fragment),KIe=l(),Jd=a("h2"),dM=a("a"),V2e=a("span"),F(Ky.$$.fragment),ehr=l(),X2e=a("span"),ohr=o("TFAutoModelForMaskedLM"),ZIe=l(),or=a("div"),F(Zy.$$.fragment),rhr=l(),Yd=a("p"),thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=a("a"),ahr=o("from_pretrained()"),nhr=o(" class method or the "),OQ=a("a"),shr=o("from_config()"),lhr=o(` class
method.`),ihr=l(),eL=a("p"),dhr=o("This class cannot be instantiated directly using "),z2e=a("code"),chr=o("__init__()"),fhr=o(" (throws an error)."),mhr=l(),xt=a("div"),F(oL.$$.fragment),ghr=l(),Q2e=a("p"),hhr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),phr=l(),Kd=a("p"),uhr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),_hr=o("not"),bhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),vhr=o("from_pretrained()"),Fhr=o(" to load the model weights."),Thr=l(),F(cM.$$.fragment),Mhr=l(),xr=a("div"),F(rL.$$.fragment),Ehr=l(),H2e=a("p"),Chr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),whr=l(),tn=a("p"),Ahr=o("The model class to instantiate is selected based on the "),U2e=a("code"),yhr=o("model_type"),Lhr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),xhr=o("pretrained_model_name_or_path"),$hr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),khr=o("pretrained_model_name_or_path"),Shr=o(":"),Rhr=l(),ie=a("ul"),fM=a("li"),K2e=a("strong"),Bhr=o("albert"),Phr=o(" \u2014 "),XQ=a("a"),Ihr=o("TFAlbertForMaskedLM"),qhr=o(" (ALBERT model)"),Nhr=l(),mM=a("li"),Z2e=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),zQ=a("a"),Ghr=o("TFBertForMaskedLM"),Ohr=o(" (BERT model)"),Vhr=l(),gM=a("li"),ebe=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),QQ=a("a"),Qhr=o("TFCamembertForMaskedLM"),Whr=o(" (CamemBERT model)"),Hhr=l(),hM=a("li"),obe=a("strong"),Uhr=o("convbert"),Jhr=o(" \u2014 "),WQ=a("a"),Yhr=o("TFConvBertForMaskedLM"),Khr=o(" (ConvBERT model)"),Zhr=l(),pM=a("li"),rbe=a("strong"),epr=o("deberta"),opr=o(" \u2014 "),HQ=a("a"),rpr=o("TFDebertaForMaskedLM"),tpr=o(" (DeBERTa model)"),apr=l(),uM=a("li"),tbe=a("strong"),npr=o("deberta-v2"),spr=o(" \u2014 "),UQ=a("a"),lpr=o("TFDebertaV2ForMaskedLM"),ipr=o(" (DeBERTa-v2 model)"),dpr=l(),_M=a("li"),abe=a("strong"),cpr=o("distilbert"),fpr=o(" \u2014 "),JQ=a("a"),mpr=o("TFDistilBertForMaskedLM"),gpr=o(" (DistilBERT model)"),hpr=l(),bM=a("li"),nbe=a("strong"),ppr=o("electra"),upr=o(" \u2014 "),YQ=a("a"),_pr=o("TFElectraForMaskedLM"),bpr=o(" (ELECTRA model)"),vpr=l(),vM=a("li"),sbe=a("strong"),Fpr=o("flaubert"),Tpr=o(" \u2014 "),KQ=a("a"),Mpr=o("TFFlaubertWithLMHeadModel"),Epr=o(" (FlauBERT model)"),Cpr=l(),FM=a("li"),lbe=a("strong"),wpr=o("funnel"),Apr=o(" \u2014 "),ZQ=a("a"),ypr=o("TFFunnelForMaskedLM"),Lpr=o(" (Funnel Transformer model)"),xpr=l(),TM=a("li"),ibe=a("strong"),$pr=o("layoutlm"),kpr=o(" \u2014 "),eW=a("a"),Spr=o("TFLayoutLMForMaskedLM"),Rpr=o(" (LayoutLM model)"),Bpr=l(),MM=a("li"),dbe=a("strong"),Ppr=o("longformer"),Ipr=o(" \u2014 "),oW=a("a"),qpr=o("TFLongformerForMaskedLM"),Npr=o(" (Longformer model)"),jpr=l(),EM=a("li"),cbe=a("strong"),Dpr=o("mobilebert"),Gpr=o(" \u2014 "),rW=a("a"),Opr=o("TFMobileBertForMaskedLM"),Vpr=o(" (MobileBERT model)"),Xpr=l(),CM=a("li"),fbe=a("strong"),zpr=o("mpnet"),Qpr=o(" \u2014 "),tW=a("a"),Wpr=o("TFMPNetForMaskedLM"),Hpr=o(" (MPNet model)"),Upr=l(),wM=a("li"),mbe=a("strong"),Jpr=o("rembert"),Ypr=o(" \u2014 "),aW=a("a"),Kpr=o("TFRemBertForMaskedLM"),Zpr=o(" (RemBERT model)"),eur=l(),AM=a("li"),gbe=a("strong"),our=o("roberta"),rur=o(" \u2014 "),nW=a("a"),tur=o("TFRobertaForMaskedLM"),aur=o(" (RoBERTa model)"),nur=l(),yM=a("li"),hbe=a("strong"),sur=o("roformer"),lur=o(" \u2014 "),sW=a("a"),iur=o("TFRoFormerForMaskedLM"),dur=o(" (RoFormer model)"),cur=l(),LM=a("li"),pbe=a("strong"),fur=o("tapas"),mur=o(" \u2014 "),lW=a("a"),gur=o("TFTapasForMaskedLM"),hur=o(" (TAPAS model)"),pur=l(),xM=a("li"),ube=a("strong"),uur=o("xlm"),_ur=o(" \u2014 "),iW=a("a"),bur=o("TFXLMWithLMHeadModel"),vur=o(" (XLM model)"),Fur=l(),$M=a("li"),_be=a("strong"),Tur=o("xlm-roberta"),Mur=o(" \u2014 "),dW=a("a"),Eur=o("TFXLMRobertaForMaskedLM"),Cur=o(" (XLM-RoBERTa model)"),wur=l(),F(kM.$$.fragment),eqe=l(),Zd=a("h2"),SM=a("a"),bbe=a("span"),F(tL.$$.fragment),Aur=l(),vbe=a("span"),yur=o("TFAutoModelForSeq2SeqLM"),oqe=l(),rr=a("div"),F(aL.$$.fragment),Lur=l(),ec=a("p"),xur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cW=a("a"),$ur=o("from_pretrained()"),kur=o(" class method or the "),fW=a("a"),Sur=o("from_config()"),Rur=o(` class
method.`),Bur=l(),nL=a("p"),Pur=o("This class cannot be instantiated directly using "),Fbe=a("code"),Iur=o("__init__()"),qur=o(" (throws an error)."),Nur=l(),$t=a("div"),F(sL.$$.fragment),jur=l(),Tbe=a("p"),Dur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gur=l(),oc=a("p"),Our=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),Vur=o("not"),Xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),zur=o("from_pretrained()"),Qur=o(" to load the model weights."),Wur=l(),F(RM.$$.fragment),Hur=l(),$r=a("div"),F(lL.$$.fragment),Uur=l(),Ebe=a("p"),Jur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Yur=l(),an=a("p"),Kur=o("The model class to instantiate is selected based on the "),Cbe=a("code"),Zur=o("model_type"),e_r=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),t_r=o("pretrained_model_name_or_path"),a_r=o(":"),n_r=l(),ye=a("ul"),BM=a("li"),ybe=a("strong"),s_r=o("bart"),l_r=o(" \u2014 "),gW=a("a"),i_r=o("TFBartForConditionalGeneration"),d_r=o(" (BART model)"),c_r=l(),PM=a("li"),Lbe=a("strong"),f_r=o("blenderbot"),m_r=o(" \u2014 "),hW=a("a"),g_r=o("TFBlenderbotForConditionalGeneration"),h_r=o(" (Blenderbot model)"),p_r=l(),IM=a("li"),xbe=a("strong"),u_r=o("blenderbot-small"),__r=o(" \u2014 "),pW=a("a"),b_r=o("TFBlenderbotSmallForConditionalGeneration"),v_r=o(" (BlenderbotSmall model)"),F_r=l(),qM=a("li"),$be=a("strong"),T_r=o("encoder-decoder"),M_r=o(" \u2014 "),uW=a("a"),E_r=o("TFEncoderDecoderModel"),C_r=o(" (Encoder decoder model)"),w_r=l(),NM=a("li"),kbe=a("strong"),A_r=o("led"),y_r=o(" \u2014 "),_W=a("a"),L_r=o("TFLEDForConditionalGeneration"),x_r=o(" (LED model)"),$_r=l(),jM=a("li"),Sbe=a("strong"),k_r=o("marian"),S_r=o(" \u2014 "),bW=a("a"),R_r=o("TFMarianMTModel"),B_r=o(" (Marian model)"),P_r=l(),DM=a("li"),Rbe=a("strong"),I_r=o("mbart"),q_r=o(" \u2014 "),vW=a("a"),N_r=o("TFMBartForConditionalGeneration"),j_r=o(" (mBART model)"),D_r=l(),GM=a("li"),Bbe=a("strong"),G_r=o("mt5"),O_r=o(" \u2014 "),FW=a("a"),V_r=o("TFMT5ForConditionalGeneration"),X_r=o(" (mT5 model)"),z_r=l(),OM=a("li"),Pbe=a("strong"),Q_r=o("pegasus"),W_r=o(" \u2014 "),TW=a("a"),H_r=o("TFPegasusForConditionalGeneration"),U_r=o(" (Pegasus model)"),J_r=l(),VM=a("li"),Ibe=a("strong"),Y_r=o("t5"),K_r=o(" \u2014 "),MW=a("a"),Z_r=o("TFT5ForConditionalGeneration"),e1r=o(" (T5 model)"),o1r=l(),F(XM.$$.fragment),rqe=l(),rc=a("h2"),zM=a("a"),qbe=a("span"),F(iL.$$.fragment),r1r=l(),Nbe=a("span"),t1r=o("TFAutoModelForSequenceClassification"),tqe=l(),tr=a("div"),F(dL.$$.fragment),a1r=l(),tc=a("p"),n1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EW=a("a"),s1r=o("from_pretrained()"),l1r=o(" class method or the "),CW=a("a"),i1r=o("from_config()"),d1r=o(` class
method.`),c1r=l(),cL=a("p"),f1r=o("This class cannot be instantiated directly using "),jbe=a("code"),m1r=o("__init__()"),g1r=o(" (throws an error)."),h1r=l(),kt=a("div"),F(fL.$$.fragment),p1r=l(),Dbe=a("p"),u1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_1r=l(),ac=a("p"),b1r=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),v1r=o("not"),F1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),T1r=o("from_pretrained()"),M1r=o(" to load the model weights."),E1r=l(),F(QM.$$.fragment),C1r=l(),kr=a("div"),F(mL.$$.fragment),w1r=l(),Obe=a("p"),A1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),y1r=l(),nn=a("p"),L1r=o("The model class to instantiate is selected based on the "),Vbe=a("code"),x1r=o("model_type"),$1r=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),k1r=o("pretrained_model_name_or_path"),S1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),R1r=o("pretrained_model_name_or_path"),B1r=o(":"),P1r=l(),Z=a("ul"),WM=a("li"),Qbe=a("strong"),I1r=o("albert"),q1r=o(" \u2014 "),AW=a("a"),N1r=o("TFAlbertForSequenceClassification"),j1r=o(" (ALBERT model)"),D1r=l(),HM=a("li"),Wbe=a("strong"),G1r=o("bert"),O1r=o(" \u2014 "),yW=a("a"),V1r=o("TFBertForSequenceClassification"),X1r=o(" (BERT model)"),z1r=l(),UM=a("li"),Hbe=a("strong"),Q1r=o("camembert"),W1r=o(" \u2014 "),LW=a("a"),H1r=o("TFCamembertForSequenceClassification"),U1r=o(" (CamemBERT model)"),J1r=l(),JM=a("li"),Ube=a("strong"),Y1r=o("convbert"),K1r=o(" \u2014 "),xW=a("a"),Z1r=o("TFConvBertForSequenceClassification"),e2r=o(" (ConvBERT model)"),o2r=l(),YM=a("li"),Jbe=a("strong"),r2r=o("ctrl"),t2r=o(" \u2014 "),$W=a("a"),a2r=o("TFCTRLForSequenceClassification"),n2r=o(" (CTRL model)"),s2r=l(),KM=a("li"),Ybe=a("strong"),l2r=o("deberta"),i2r=o(" \u2014 "),kW=a("a"),d2r=o("TFDebertaForSequenceClassification"),c2r=o(" (DeBERTa model)"),f2r=l(),ZM=a("li"),Kbe=a("strong"),m2r=o("deberta-v2"),g2r=o(" \u2014 "),SW=a("a"),h2r=o("TFDebertaV2ForSequenceClassification"),p2r=o(" (DeBERTa-v2 model)"),u2r=l(),e4=a("li"),Zbe=a("strong"),_2r=o("distilbert"),b2r=o(" \u2014 "),RW=a("a"),v2r=o("TFDistilBertForSequenceClassification"),F2r=o(" (DistilBERT model)"),T2r=l(),o4=a("li"),eve=a("strong"),M2r=o("electra"),E2r=o(" \u2014 "),BW=a("a"),C2r=o("TFElectraForSequenceClassification"),w2r=o(" (ELECTRA model)"),A2r=l(),r4=a("li"),ove=a("strong"),y2r=o("flaubert"),L2r=o(" \u2014 "),PW=a("a"),x2r=o("TFFlaubertForSequenceClassification"),$2r=o(" (FlauBERT model)"),k2r=l(),t4=a("li"),rve=a("strong"),S2r=o("funnel"),R2r=o(" \u2014 "),IW=a("a"),B2r=o("TFFunnelForSequenceClassification"),P2r=o(" (Funnel Transformer model)"),I2r=l(),a4=a("li"),tve=a("strong"),q2r=o("gpt2"),N2r=o(" \u2014 "),qW=a("a"),j2r=o("TFGPT2ForSequenceClassification"),D2r=o(" (OpenAI GPT-2 model)"),G2r=l(),n4=a("li"),ave=a("strong"),O2r=o("gptj"),V2r=o(" \u2014 "),NW=a("a"),X2r=o("TFGPTJForSequenceClassification"),z2r=o(" (GPT-J model)"),Q2r=l(),s4=a("li"),nve=a("strong"),W2r=o("layoutlm"),H2r=o(" \u2014 "),jW=a("a"),U2r=o("TFLayoutLMForSequenceClassification"),J2r=o(" (LayoutLM model)"),Y2r=l(),l4=a("li"),sve=a("strong"),K2r=o("longformer"),Z2r=o(" \u2014 "),DW=a("a"),ebr=o("TFLongformerForSequenceClassification"),obr=o(" (Longformer model)"),rbr=l(),i4=a("li"),lve=a("strong"),tbr=o("mobilebert"),abr=o(" \u2014 "),GW=a("a"),nbr=o("TFMobileBertForSequenceClassification"),sbr=o(" (MobileBERT model)"),lbr=l(),d4=a("li"),ive=a("strong"),ibr=o("mpnet"),dbr=o(" \u2014 "),OW=a("a"),cbr=o("TFMPNetForSequenceClassification"),fbr=o(" (MPNet model)"),mbr=l(),c4=a("li"),dve=a("strong"),gbr=o("openai-gpt"),hbr=o(" \u2014 "),VW=a("a"),pbr=o("TFOpenAIGPTForSequenceClassification"),ubr=o(" (OpenAI GPT model)"),_br=l(),f4=a("li"),cve=a("strong"),bbr=o("rembert"),vbr=o(" \u2014 "),XW=a("a"),Fbr=o("TFRemBertForSequenceClassification"),Tbr=o(" (RemBERT model)"),Mbr=l(),m4=a("li"),fve=a("strong"),Ebr=o("roberta"),Cbr=o(" \u2014 "),zW=a("a"),wbr=o("TFRobertaForSequenceClassification"),Abr=o(" (RoBERTa model)"),ybr=l(),g4=a("li"),mve=a("strong"),Lbr=o("roformer"),xbr=o(" \u2014 "),QW=a("a"),$br=o("TFRoFormerForSequenceClassification"),kbr=o(" (RoFormer model)"),Sbr=l(),h4=a("li"),gve=a("strong"),Rbr=o("tapas"),Bbr=o(" \u2014 "),WW=a("a"),Pbr=o("TFTapasForSequenceClassification"),Ibr=o(" (TAPAS model)"),qbr=l(),p4=a("li"),hve=a("strong"),Nbr=o("transfo-xl"),jbr=o(" \u2014 "),HW=a("a"),Dbr=o("TFTransfoXLForSequenceClassification"),Gbr=o(" (Transformer-XL model)"),Obr=l(),u4=a("li"),pve=a("strong"),Vbr=o("xlm"),Xbr=o(" \u2014 "),UW=a("a"),zbr=o("TFXLMForSequenceClassification"),Qbr=o(" (XLM model)"),Wbr=l(),_4=a("li"),uve=a("strong"),Hbr=o("xlm-roberta"),Ubr=o(" \u2014 "),JW=a("a"),Jbr=o("TFXLMRobertaForSequenceClassification"),Ybr=o(" (XLM-RoBERTa model)"),Kbr=l(),b4=a("li"),_ve=a("strong"),Zbr=o("xlnet"),evr=o(" \u2014 "),YW=a("a"),ovr=o("TFXLNetForSequenceClassification"),rvr=o(" (XLNet model)"),tvr=l(),F(v4.$$.fragment),aqe=l(),nc=a("h2"),F4=a("a"),bve=a("span"),F(gL.$$.fragment),avr=l(),vve=a("span"),nvr=o("TFAutoModelForMultipleChoice"),nqe=l(),ar=a("div"),F(hL.$$.fragment),svr=l(),sc=a("p"),lvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KW=a("a"),ivr=o("from_pretrained()"),dvr=o(" class method or the "),ZW=a("a"),cvr=o("from_config()"),fvr=o(` class
method.`),mvr=l(),pL=a("p"),gvr=o("This class cannot be instantiated directly using "),Fve=a("code"),hvr=o("__init__()"),pvr=o(" (throws an error)."),uvr=l(),St=a("div"),F(uL.$$.fragment),_vr=l(),Tve=a("p"),bvr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vvr=l(),lc=a("p"),Fvr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),Tvr=o("not"),Mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),Evr=o("from_pretrained()"),Cvr=o(" to load the model weights."),wvr=l(),F(T4.$$.fragment),Avr=l(),Sr=a("div"),F(_L.$$.fragment),yvr=l(),Eve=a("p"),Lvr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xvr=l(),sn=a("p"),$vr=o("The model class to instantiate is selected based on the "),Cve=a("code"),kvr=o("model_type"),Svr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),Rvr=o("pretrained_model_name_or_path"),Bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),Pvr=o("pretrained_model_name_or_path"),Ivr=o(":"),qvr=l(),he=a("ul"),M4=a("li"),yve=a("strong"),Nvr=o("albert"),jvr=o(" \u2014 "),oH=a("a"),Dvr=o("TFAlbertForMultipleChoice"),Gvr=o(" (ALBERT model)"),Ovr=l(),E4=a("li"),Lve=a("strong"),Vvr=o("bert"),Xvr=o(" \u2014 "),rH=a("a"),zvr=o("TFBertForMultipleChoice"),Qvr=o(" (BERT model)"),Wvr=l(),C4=a("li"),xve=a("strong"),Hvr=o("camembert"),Uvr=o(" \u2014 "),tH=a("a"),Jvr=o("TFCamembertForMultipleChoice"),Yvr=o(" (CamemBERT model)"),Kvr=l(),w4=a("li"),$ve=a("strong"),Zvr=o("convbert"),eFr=o(" \u2014 "),aH=a("a"),oFr=o("TFConvBertForMultipleChoice"),rFr=o(" (ConvBERT model)"),tFr=l(),A4=a("li"),kve=a("strong"),aFr=o("distilbert"),nFr=o(" \u2014 "),nH=a("a"),sFr=o("TFDistilBertForMultipleChoice"),lFr=o(" (DistilBERT model)"),iFr=l(),y4=a("li"),Sve=a("strong"),dFr=o("electra"),cFr=o(" \u2014 "),sH=a("a"),fFr=o("TFElectraForMultipleChoice"),mFr=o(" (ELECTRA model)"),gFr=l(),L4=a("li"),Rve=a("strong"),hFr=o("flaubert"),pFr=o(" \u2014 "),lH=a("a"),uFr=o("TFFlaubertForMultipleChoice"),_Fr=o(" (FlauBERT model)"),bFr=l(),x4=a("li"),Bve=a("strong"),vFr=o("funnel"),FFr=o(" \u2014 "),iH=a("a"),TFr=o("TFFunnelForMultipleChoice"),MFr=o(" (Funnel Transformer model)"),EFr=l(),$4=a("li"),Pve=a("strong"),CFr=o("longformer"),wFr=o(" \u2014 "),dH=a("a"),AFr=o("TFLongformerForMultipleChoice"),yFr=o(" (Longformer model)"),LFr=l(),k4=a("li"),Ive=a("strong"),xFr=o("mobilebert"),$Fr=o(" \u2014 "),cH=a("a"),kFr=o("TFMobileBertForMultipleChoice"),SFr=o(" (MobileBERT model)"),RFr=l(),S4=a("li"),qve=a("strong"),BFr=o("mpnet"),PFr=o(" \u2014 "),fH=a("a"),IFr=o("TFMPNetForMultipleChoice"),qFr=o(" (MPNet model)"),NFr=l(),R4=a("li"),Nve=a("strong"),jFr=o("rembert"),DFr=o(" \u2014 "),mH=a("a"),GFr=o("TFRemBertForMultipleChoice"),OFr=o(" (RemBERT model)"),VFr=l(),B4=a("li"),jve=a("strong"),XFr=o("roberta"),zFr=o(" \u2014 "),gH=a("a"),QFr=o("TFRobertaForMultipleChoice"),WFr=o(" (RoBERTa model)"),HFr=l(),P4=a("li"),Dve=a("strong"),UFr=o("roformer"),JFr=o(" \u2014 "),hH=a("a"),YFr=o("TFRoFormerForMultipleChoice"),KFr=o(" (RoFormer model)"),ZFr=l(),I4=a("li"),Gve=a("strong"),eTr=o("xlm"),oTr=o(" \u2014 "),pH=a("a"),rTr=o("TFXLMForMultipleChoice"),tTr=o(" (XLM model)"),aTr=l(),q4=a("li"),Ove=a("strong"),nTr=o("xlm-roberta"),sTr=o(" \u2014 "),uH=a("a"),lTr=o("TFXLMRobertaForMultipleChoice"),iTr=o(" (XLM-RoBERTa model)"),dTr=l(),N4=a("li"),Vve=a("strong"),cTr=o("xlnet"),fTr=o(" \u2014 "),_H=a("a"),mTr=o("TFXLNetForMultipleChoice"),gTr=o(" (XLNet model)"),hTr=l(),F(j4.$$.fragment),sqe=l(),ic=a("h2"),D4=a("a"),Xve=a("span"),F(bL.$$.fragment),pTr=l(),zve=a("span"),uTr=o("TFAutoModelForNextSentencePrediction"),lqe=l(),nr=a("div"),F(vL.$$.fragment),_Tr=l(),dc=a("p"),bTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bH=a("a"),vTr=o("from_pretrained()"),FTr=o(" class method or the "),vH=a("a"),TTr=o("from_config()"),MTr=o(` class
method.`),ETr=l(),FL=a("p"),CTr=o("This class cannot be instantiated directly using "),Qve=a("code"),wTr=o("__init__()"),ATr=o(" (throws an error)."),yTr=l(),Rt=a("div"),F(TL.$$.fragment),LTr=l(),Wve=a("p"),xTr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Tr=l(),cc=a("p"),kTr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),STr=o("not"),RTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),BTr=o("from_pretrained()"),PTr=o(" to load the model weights."),ITr=l(),F(G4.$$.fragment),qTr=l(),Rr=a("div"),F(ML.$$.fragment),NTr=l(),Uve=a("p"),jTr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DTr=l(),ln=a("p"),GTr=o("The model class to instantiate is selected based on the "),Jve=a("code"),OTr=o("model_type"),VTr=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),XTr=o("pretrained_model_name_or_path"),zTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),QTr=o("pretrained_model_name_or_path"),WTr=o(":"),HTr=l(),EL=a("ul"),O4=a("li"),Zve=a("strong"),UTr=o("bert"),JTr=o(" \u2014 "),TH=a("a"),YTr=o("TFBertForNextSentencePrediction"),KTr=o(" (BERT model)"),ZTr=l(),V4=a("li"),eFe=a("strong"),e7r=o("mobilebert"),o7r=o(" \u2014 "),MH=a("a"),r7r=o("TFMobileBertForNextSentencePrediction"),t7r=o(" (MobileBERT model)"),a7r=l(),F(X4.$$.fragment),iqe=l(),fc=a("h2"),z4=a("a"),oFe=a("span"),F(CL.$$.fragment),n7r=l(),rFe=a("span"),s7r=o("TFAutoModelForTableQuestionAnswering"),dqe=l(),sr=a("div"),F(wL.$$.fragment),l7r=l(),mc=a("p"),i7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EH=a("a"),d7r=o("from_pretrained()"),c7r=o(" class method or the "),CH=a("a"),f7r=o("from_config()"),m7r=o(` class
method.`),g7r=l(),AL=a("p"),h7r=o("This class cannot be instantiated directly using "),tFe=a("code"),p7r=o("__init__()"),u7r=o(" (throws an error)."),_7r=l(),Bt=a("div"),F(yL.$$.fragment),b7r=l(),aFe=a("p"),v7r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F7r=l(),gc=a("p"),T7r=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),M7r=o("not"),E7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),C7r=o("from_pretrained()"),w7r=o(" to load the model weights."),A7r=l(),F(Q4.$$.fragment),y7r=l(),Br=a("div"),F(LL.$$.fragment),L7r=l(),sFe=a("p"),x7r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$7r=l(),dn=a("p"),k7r=o("The model class to instantiate is selected based on the "),lFe=a("code"),S7r=o("model_type"),R7r=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),B7r=o("pretrained_model_name_or_path"),P7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),I7r=o("pretrained_model_name_or_path"),q7r=o(":"),N7r=l(),cFe=a("ul"),W4=a("li"),fFe=a("strong"),j7r=o("tapas"),D7r=o(" \u2014 "),AH=a("a"),G7r=o("TFTapasForQuestionAnswering"),O7r=o(" (TAPAS model)"),V7r=l(),F(H4.$$.fragment),cqe=l(),hc=a("h2"),U4=a("a"),mFe=a("span"),F(xL.$$.fragment),X7r=l(),gFe=a("span"),z7r=o("TFAutoModelForTokenClassification"),fqe=l(),lr=a("div"),F($L.$$.fragment),Q7r=l(),pc=a("p"),W7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=a("a"),H7r=o("from_pretrained()"),U7r=o(" class method or the "),LH=a("a"),J7r=o("from_config()"),Y7r=o(` class
method.`),K7r=l(),kL=a("p"),Z7r=o("This class cannot be instantiated directly using "),hFe=a("code"),e9r=o("__init__()"),o9r=o(" (throws an error)."),r9r=l(),Pt=a("div"),F(SL.$$.fragment),t9r=l(),pFe=a("p"),a9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n9r=l(),uc=a("p"),s9r=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),l9r=o("not"),i9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),d9r=o("from_pretrained()"),c9r=o(" to load the model weights."),f9r=l(),F(J4.$$.fragment),m9r=l(),Pr=a("div"),F(RL.$$.fragment),g9r=l(),_Fe=a("p"),h9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p9r=l(),cn=a("p"),u9r=o("The model class to instantiate is selected based on the "),bFe=a("code"),_9r=o("model_type"),b9r=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),v9r=o("pretrained_model_name_or_path"),F9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),T9r=o("pretrained_model_name_or_path"),M9r=o(":"),E9r=l(),de=a("ul"),Y4=a("li"),TFe=a("strong"),C9r=o("albert"),w9r=o(" \u2014 "),$H=a("a"),A9r=o("TFAlbertForTokenClassification"),y9r=o(" (ALBERT model)"),L9r=l(),K4=a("li"),MFe=a("strong"),x9r=o("bert"),$9r=o(" \u2014 "),kH=a("a"),k9r=o("TFBertForTokenClassification"),S9r=o(" (BERT model)"),R9r=l(),Z4=a("li"),EFe=a("strong"),B9r=o("camembert"),P9r=o(" \u2014 "),SH=a("a"),I9r=o("TFCamembertForTokenClassification"),q9r=o(" (CamemBERT model)"),N9r=l(),eE=a("li"),CFe=a("strong"),j9r=o("convbert"),D9r=o(" \u2014 "),RH=a("a"),G9r=o("TFConvBertForTokenClassification"),O9r=o(" (ConvBERT model)"),V9r=l(),oE=a("li"),wFe=a("strong"),X9r=o("deberta"),z9r=o(" \u2014 "),BH=a("a"),Q9r=o("TFDebertaForTokenClassification"),W9r=o(" (DeBERTa model)"),H9r=l(),rE=a("li"),AFe=a("strong"),U9r=o("deberta-v2"),J9r=o(" \u2014 "),PH=a("a"),Y9r=o("TFDebertaV2ForTokenClassification"),K9r=o(" (DeBERTa-v2 model)"),Z9r=l(),tE=a("li"),yFe=a("strong"),eMr=o("distilbert"),oMr=o(" \u2014 "),IH=a("a"),rMr=o("TFDistilBertForTokenClassification"),tMr=o(" (DistilBERT model)"),aMr=l(),aE=a("li"),LFe=a("strong"),nMr=o("electra"),sMr=o(" \u2014 "),qH=a("a"),lMr=o("TFElectraForTokenClassification"),iMr=o(" (ELECTRA model)"),dMr=l(),nE=a("li"),xFe=a("strong"),cMr=o("flaubert"),fMr=o(" \u2014 "),NH=a("a"),mMr=o("TFFlaubertForTokenClassification"),gMr=o(" (FlauBERT model)"),hMr=l(),sE=a("li"),$Fe=a("strong"),pMr=o("funnel"),uMr=o(" \u2014 "),jH=a("a"),_Mr=o("TFFunnelForTokenClassification"),bMr=o(" (Funnel Transformer model)"),vMr=l(),lE=a("li"),kFe=a("strong"),FMr=o("layoutlm"),TMr=o(" \u2014 "),DH=a("a"),MMr=o("TFLayoutLMForTokenClassification"),EMr=o(" (LayoutLM model)"),CMr=l(),iE=a("li"),SFe=a("strong"),wMr=o("longformer"),AMr=o(" \u2014 "),GH=a("a"),yMr=o("TFLongformerForTokenClassification"),LMr=o(" (Longformer model)"),xMr=l(),dE=a("li"),RFe=a("strong"),$Mr=o("mobilebert"),kMr=o(" \u2014 "),OH=a("a"),SMr=o("TFMobileBertForTokenClassification"),RMr=o(" (MobileBERT model)"),BMr=l(),cE=a("li"),BFe=a("strong"),PMr=o("mpnet"),IMr=o(" \u2014 "),VH=a("a"),qMr=o("TFMPNetForTokenClassification"),NMr=o(" (MPNet model)"),jMr=l(),fE=a("li"),PFe=a("strong"),DMr=o("rembert"),GMr=o(" \u2014 "),XH=a("a"),OMr=o("TFRemBertForTokenClassification"),VMr=o(" (RemBERT model)"),XMr=l(),mE=a("li"),IFe=a("strong"),zMr=o("roberta"),QMr=o(" \u2014 "),zH=a("a"),WMr=o("TFRobertaForTokenClassification"),HMr=o(" (RoBERTa model)"),UMr=l(),gE=a("li"),qFe=a("strong"),JMr=o("roformer"),YMr=o(" \u2014 "),QH=a("a"),KMr=o("TFRoFormerForTokenClassification"),ZMr=o(" (RoFormer model)"),e4r=l(),hE=a("li"),NFe=a("strong"),o4r=o("xlm"),r4r=o(" \u2014 "),WH=a("a"),t4r=o("TFXLMForTokenClassification"),a4r=o(" (XLM model)"),n4r=l(),pE=a("li"),jFe=a("strong"),s4r=o("xlm-roberta"),l4r=o(" \u2014 "),HH=a("a"),i4r=o("TFXLMRobertaForTokenClassification"),d4r=o(" (XLM-RoBERTa model)"),c4r=l(),uE=a("li"),DFe=a("strong"),f4r=o("xlnet"),m4r=o(" \u2014 "),UH=a("a"),g4r=o("TFXLNetForTokenClassification"),h4r=o(" (XLNet model)"),p4r=l(),F(_E.$$.fragment),mqe=l(),_c=a("h2"),bE=a("a"),GFe=a("span"),F(BL.$$.fragment),u4r=l(),OFe=a("span"),_4r=o("TFAutoModelForQuestionAnswering"),gqe=l(),ir=a("div"),F(PL.$$.fragment),b4r=l(),bc=a("p"),v4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JH=a("a"),F4r=o("from_pretrained()"),T4r=o(" class method or the "),YH=a("a"),M4r=o("from_config()"),E4r=o(` class
method.`),C4r=l(),IL=a("p"),w4r=o("This class cannot be instantiated directly using "),VFe=a("code"),A4r=o("__init__()"),y4r=o(" (throws an error)."),L4r=l(),It=a("div"),F(qL.$$.fragment),x4r=l(),XFe=a("p"),$4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k4r=l(),vc=a("p"),S4r=o(`Note:
Loading a model from its configuration file does `),zFe=a("strong"),R4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),P4r=o("from_pretrained()"),I4r=o(" to load the model weights."),q4r=l(),F(vE.$$.fragment),N4r=l(),Ir=a("div"),F(NL.$$.fragment),j4r=l(),QFe=a("p"),D4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G4r=l(),fn=a("p"),O4r=o("The model class to instantiate is selected based on the "),WFe=a("code"),V4r=o("model_type"),X4r=o(` property of the config object (either
passed as an argument or loaded from `),HFe=a("code"),z4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=a("code"),W4r=o("pretrained_model_name_or_path"),H4r=o(":"),U4r=l(),ce=a("ul"),FE=a("li"),JFe=a("strong"),J4r=o("albert"),Y4r=o(" \u2014 "),ZH=a("a"),K4r=o("TFAlbertForQuestionAnswering"),Z4r=o(" (ALBERT model)"),eEr=l(),TE=a("li"),YFe=a("strong"),oEr=o("bert"),rEr=o(" \u2014 "),eU=a("a"),tEr=o("TFBertForQuestionAnswering"),aEr=o(" (BERT model)"),nEr=l(),ME=a("li"),KFe=a("strong"),sEr=o("camembert"),lEr=o(" \u2014 "),oU=a("a"),iEr=o("TFCamembertForQuestionAnswering"),dEr=o(" (CamemBERT model)"),cEr=l(),EE=a("li"),ZFe=a("strong"),fEr=o("convbert"),mEr=o(" \u2014 "),rU=a("a"),gEr=o("TFConvBertForQuestionAnswering"),hEr=o(" (ConvBERT model)"),pEr=l(),CE=a("li"),eTe=a("strong"),uEr=o("deberta"),_Er=o(" \u2014 "),tU=a("a"),bEr=o("TFDebertaForQuestionAnswering"),vEr=o(" (DeBERTa model)"),FEr=l(),wE=a("li"),oTe=a("strong"),TEr=o("deberta-v2"),MEr=o(" \u2014 "),aU=a("a"),EEr=o("TFDebertaV2ForQuestionAnswering"),CEr=o(" (DeBERTa-v2 model)"),wEr=l(),AE=a("li"),rTe=a("strong"),AEr=o("distilbert"),yEr=o(" \u2014 "),nU=a("a"),LEr=o("TFDistilBertForQuestionAnswering"),xEr=o(" (DistilBERT model)"),$Er=l(),yE=a("li"),tTe=a("strong"),kEr=o("electra"),SEr=o(" \u2014 "),sU=a("a"),REr=o("TFElectraForQuestionAnswering"),BEr=o(" (ELECTRA model)"),PEr=l(),LE=a("li"),aTe=a("strong"),IEr=o("flaubert"),qEr=o(" \u2014 "),lU=a("a"),NEr=o("TFFlaubertForQuestionAnsweringSimple"),jEr=o(" (FlauBERT model)"),DEr=l(),xE=a("li"),nTe=a("strong"),GEr=o("funnel"),OEr=o(" \u2014 "),iU=a("a"),VEr=o("TFFunnelForQuestionAnswering"),XEr=o(" (Funnel Transformer model)"),zEr=l(),$E=a("li"),sTe=a("strong"),QEr=o("gptj"),WEr=o(" \u2014 "),dU=a("a"),HEr=o("TFGPTJForQuestionAnswering"),UEr=o(" (GPT-J model)"),JEr=l(),kE=a("li"),lTe=a("strong"),YEr=o("longformer"),KEr=o(" \u2014 "),cU=a("a"),ZEr=o("TFLongformerForQuestionAnswering"),e5r=o(" (Longformer model)"),o5r=l(),SE=a("li"),iTe=a("strong"),r5r=o("mobilebert"),t5r=o(" \u2014 "),fU=a("a"),a5r=o("TFMobileBertForQuestionAnswering"),n5r=o(" (MobileBERT model)"),s5r=l(),RE=a("li"),dTe=a("strong"),l5r=o("mpnet"),i5r=o(" \u2014 "),mU=a("a"),d5r=o("TFMPNetForQuestionAnswering"),c5r=o(" (MPNet model)"),f5r=l(),BE=a("li"),cTe=a("strong"),m5r=o("rembert"),g5r=o(" \u2014 "),gU=a("a"),h5r=o("TFRemBertForQuestionAnswering"),p5r=o(" (RemBERT model)"),u5r=l(),PE=a("li"),fTe=a("strong"),_5r=o("roberta"),b5r=o(" \u2014 "),hU=a("a"),v5r=o("TFRobertaForQuestionAnswering"),F5r=o(" (RoBERTa model)"),T5r=l(),IE=a("li"),mTe=a("strong"),M5r=o("roformer"),E5r=o(" \u2014 "),pU=a("a"),C5r=o("TFRoFormerForQuestionAnswering"),w5r=o(" (RoFormer model)"),A5r=l(),qE=a("li"),gTe=a("strong"),y5r=o("xlm"),L5r=o(" \u2014 "),uU=a("a"),x5r=o("TFXLMForQuestionAnsweringSimple"),$5r=o(" (XLM model)"),k5r=l(),NE=a("li"),hTe=a("strong"),S5r=o("xlm-roberta"),R5r=o(" \u2014 "),_U=a("a"),B5r=o("TFXLMRobertaForQuestionAnswering"),P5r=o(" (XLM-RoBERTa model)"),I5r=l(),jE=a("li"),pTe=a("strong"),q5r=o("xlnet"),N5r=o(" \u2014 "),bU=a("a"),j5r=o("TFXLNetForQuestionAnsweringSimple"),D5r=o(" (XLNet model)"),G5r=l(),F(DE.$$.fragment),hqe=l(),Fc=a("h2"),GE=a("a"),uTe=a("span"),F(jL.$$.fragment),O5r=l(),_Te=a("span"),V5r=o("TFAutoModelForVision2Seq"),pqe=l(),dr=a("div"),F(DL.$$.fragment),X5r=l(),Tc=a("p"),z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=a("a"),Q5r=o("from_pretrained()"),W5r=o(" class method or the "),FU=a("a"),H5r=o("from_config()"),U5r=o(` class
method.`),J5r=l(),GL=a("p"),Y5r=o("This class cannot be instantiated directly using "),bTe=a("code"),K5r=o("__init__()"),Z5r=o(" (throws an error)."),eCr=l(),qt=a("div"),F(OL.$$.fragment),oCr=l(),vTe=a("p"),rCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tCr=l(),Mc=a("p"),aCr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),nCr=o("not"),sCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),lCr=o("from_pretrained()"),iCr=o(" to load the model weights."),dCr=l(),F(OE.$$.fragment),cCr=l(),qr=a("div"),F(VL.$$.fragment),fCr=l(),TTe=a("p"),mCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gCr=l(),mn=a("p"),hCr=o("The model class to instantiate is selected based on the "),MTe=a("code"),pCr=o("model_type"),uCr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),_Cr=o("pretrained_model_name_or_path"),bCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),vCr=o("pretrained_model_name_or_path"),FCr=o(":"),TCr=l(),wTe=a("ul"),VE=a("li"),ATe=a("strong"),MCr=o("vision-encoder-decoder"),ECr=o(" \u2014 "),MU=a("a"),CCr=o("TFVisionEncoderDecoderModel"),wCr=o(" (Vision Encoder decoder model)"),ACr=l(),F(XE.$$.fragment),uqe=l(),Ec=a("h2"),zE=a("a"),yTe=a("span"),F(XL.$$.fragment),yCr=l(),LTe=a("span"),LCr=o("TFAutoModelForSpeechSeq2Seq"),_qe=l(),cr=a("div"),F(zL.$$.fragment),xCr=l(),Cc=a("p"),$Cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EU=a("a"),kCr=o("from_pretrained()"),SCr=o(" class method or the "),CU=a("a"),RCr=o("from_config()"),BCr=o(` class
method.`),PCr=l(),QL=a("p"),ICr=o("This class cannot be instantiated directly using "),xTe=a("code"),qCr=o("__init__()"),NCr=o(" (throws an error)."),jCr=l(),Nt=a("div"),F(WL.$$.fragment),DCr=l(),$Te=a("p"),GCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OCr=l(),wc=a("p"),VCr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),XCr=o("not"),zCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),QCr=o("from_pretrained()"),WCr=o(" to load the model weights."),HCr=l(),F(QE.$$.fragment),UCr=l(),Nr=a("div"),F(HL.$$.fragment),JCr=l(),STe=a("p"),YCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KCr=l(),gn=a("p"),ZCr=o("The model class to instantiate is selected based on the "),RTe=a("code"),e3r=o("model_type"),o3r=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),r3r=o("pretrained_model_name_or_path"),t3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),a3r=o("pretrained_model_name_or_path"),n3r=o(":"),s3r=l(),ITe=a("ul"),WE=a("li"),qTe=a("strong"),l3r=o("speech_to_text"),i3r=o(" \u2014 "),AU=a("a"),d3r=o("TFSpeech2TextForConditionalGeneration"),c3r=o(" (Speech2Text model)"),f3r=l(),F(HE.$$.fragment),bqe=l(),Ac=a("h2"),UE=a("a"),NTe=a("span"),F(UL.$$.fragment),m3r=l(),jTe=a("span"),g3r=o("FlaxAutoModel"),vqe=l(),fr=a("div"),F(JL.$$.fragment),h3r=l(),yc=a("p"),p3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yU=a("a"),u3r=o("from_pretrained()"),_3r=o(" class method or the "),LU=a("a"),b3r=o("from_config()"),v3r=o(` class
method.`),F3r=l(),YL=a("p"),T3r=o("This class cannot be instantiated directly using "),DTe=a("code"),M3r=o("__init__()"),E3r=o(" (throws an error)."),C3r=l(),jt=a("div"),F(KL.$$.fragment),w3r=l(),GTe=a("p"),A3r=o("Instantiates one of the base model classes of the library from a configuration."),y3r=l(),Lc=a("p"),L3r=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),x3r=o("not"),$3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),k3r=o("from_pretrained()"),S3r=o(" to load the model weights."),R3r=l(),F(JE.$$.fragment),B3r=l(),jr=a("div"),F(ZL.$$.fragment),P3r=l(),VTe=a("p"),I3r=o("Instantiate one of the base model classes of the library from a pretrained model."),q3r=l(),hn=a("p"),N3r=o("The model class to instantiate is selected based on the "),XTe=a("code"),j3r=o("model_type"),D3r=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),G3r=o("pretrained_model_name_or_path"),O3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),V3r=o("pretrained_model_name_or_path"),X3r=o(":"),z3r=l(),re=a("ul"),YE=a("li"),WTe=a("strong"),Q3r=o("albert"),W3r=o(" \u2014 "),$U=a("a"),H3r=o("FlaxAlbertModel"),U3r=o(" (ALBERT model)"),J3r=l(),KE=a("li"),HTe=a("strong"),Y3r=o("bart"),K3r=o(" \u2014 "),kU=a("a"),Z3r=o("FlaxBartModel"),ewr=o(" (BART model)"),owr=l(),ZE=a("li"),UTe=a("strong"),rwr=o("beit"),twr=o(" \u2014 "),SU=a("a"),awr=o("FlaxBeitModel"),nwr=o(" (BEiT model)"),swr=l(),e5=a("li"),JTe=a("strong"),lwr=o("bert"),iwr=o(" \u2014 "),RU=a("a"),dwr=o("FlaxBertModel"),cwr=o(" (BERT model)"),fwr=l(),o5=a("li"),YTe=a("strong"),mwr=o("big_bird"),gwr=o(" \u2014 "),BU=a("a"),hwr=o("FlaxBigBirdModel"),pwr=o(" (BigBird model)"),uwr=l(),r5=a("li"),KTe=a("strong"),_wr=o("blenderbot"),bwr=o(" \u2014 "),PU=a("a"),vwr=o("FlaxBlenderbotModel"),Fwr=o(" (Blenderbot model)"),Twr=l(),t5=a("li"),ZTe=a("strong"),Mwr=o("blenderbot-small"),Ewr=o(" \u2014 "),IU=a("a"),Cwr=o("FlaxBlenderbotSmallModel"),wwr=o(" (BlenderbotSmall model)"),Awr=l(),a5=a("li"),e7e=a("strong"),ywr=o("clip"),Lwr=o(" \u2014 "),qU=a("a"),xwr=o("FlaxCLIPModel"),$wr=o(" (CLIP model)"),kwr=l(),n5=a("li"),o7e=a("strong"),Swr=o("distilbert"),Rwr=o(" \u2014 "),NU=a("a"),Bwr=o("FlaxDistilBertModel"),Pwr=o(" (DistilBERT model)"),Iwr=l(),s5=a("li"),r7e=a("strong"),qwr=o("electra"),Nwr=o(" \u2014 "),jU=a("a"),jwr=o("FlaxElectraModel"),Dwr=o(" (ELECTRA model)"),Gwr=l(),l5=a("li"),t7e=a("strong"),Owr=o("gpt2"),Vwr=o(" \u2014 "),DU=a("a"),Xwr=o("FlaxGPT2Model"),zwr=o(" (OpenAI GPT-2 model)"),Qwr=l(),i5=a("li"),a7e=a("strong"),Wwr=o("gpt_neo"),Hwr=o(" \u2014 "),GU=a("a"),Uwr=o("FlaxGPTNeoModel"),Jwr=o(" (GPT Neo model)"),Ywr=l(),d5=a("li"),n7e=a("strong"),Kwr=o("gptj"),Zwr=o(" \u2014 "),OU=a("a"),eAr=o("FlaxGPTJModel"),oAr=o(" (GPT-J model)"),rAr=l(),c5=a("li"),s7e=a("strong"),tAr=o("marian"),aAr=o(" \u2014 "),VU=a("a"),nAr=o("FlaxMarianModel"),sAr=o(" (Marian model)"),lAr=l(),f5=a("li"),l7e=a("strong"),iAr=o("mbart"),dAr=o(" \u2014 "),XU=a("a"),cAr=o("FlaxMBartModel"),fAr=o(" (mBART model)"),mAr=l(),m5=a("li"),i7e=a("strong"),gAr=o("mt5"),hAr=o(" \u2014 "),zU=a("a"),pAr=o("FlaxMT5Model"),uAr=o(" (mT5 model)"),_Ar=l(),g5=a("li"),d7e=a("strong"),bAr=o("pegasus"),vAr=o(" \u2014 "),QU=a("a"),FAr=o("FlaxPegasusModel"),TAr=o(" (Pegasus model)"),MAr=l(),h5=a("li"),c7e=a("strong"),EAr=o("roberta"),CAr=o(" \u2014 "),WU=a("a"),wAr=o("FlaxRobertaModel"),AAr=o(" (RoBERTa model)"),yAr=l(),p5=a("li"),f7e=a("strong"),LAr=o("roformer"),xAr=o(" \u2014 "),HU=a("a"),$Ar=o("FlaxRoFormerModel"),kAr=o(" (RoFormer model)"),SAr=l(),u5=a("li"),m7e=a("strong"),RAr=o("t5"),BAr=o(" \u2014 "),UU=a("a"),PAr=o("FlaxT5Model"),IAr=o(" (T5 model)"),qAr=l(),_5=a("li"),g7e=a("strong"),NAr=o("vision-text-dual-encoder"),jAr=o(" \u2014 "),JU=a("a"),DAr=o("FlaxVisionTextDualEncoderModel"),GAr=o(" (VisionTextDualEncoder model)"),OAr=l(),b5=a("li"),h7e=a("strong"),VAr=o("vit"),XAr=o(" \u2014 "),YU=a("a"),zAr=o("FlaxViTModel"),QAr=o(" (ViT model)"),WAr=l(),v5=a("li"),p7e=a("strong"),HAr=o("wav2vec2"),UAr=o(" \u2014 "),KU=a("a"),JAr=o("FlaxWav2Vec2Model"),YAr=o(" (Wav2Vec2 model)"),KAr=l(),F5=a("li"),u7e=a("strong"),ZAr=o("xglm"),e6r=o(" \u2014 "),ZU=a("a"),o6r=o("FlaxXGLMModel"),r6r=o(" (XGLM model)"),t6r=l(),T5=a("li"),_7e=a("strong"),a6r=o("xlm-roberta"),n6r=o(" \u2014 "),eJ=a("a"),s6r=o("FlaxXLMRobertaModel"),l6r=o(" (XLM-RoBERTa model)"),i6r=l(),F(M5.$$.fragment),Fqe=l(),xc=a("h2"),E5=a("a"),b7e=a("span"),F(e8.$$.fragment),d6r=l(),v7e=a("span"),c6r=o("FlaxAutoModelForCausalLM"),Tqe=l(),mr=a("div"),F(o8.$$.fragment),f6r=l(),$c=a("p"),m6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oJ=a("a"),g6r=o("from_pretrained()"),h6r=o(" class method or the "),rJ=a("a"),p6r=o("from_config()"),u6r=o(` class
method.`),_6r=l(),r8=a("p"),b6r=o("This class cannot be instantiated directly using "),F7e=a("code"),v6r=o("__init__()"),F6r=o(" (throws an error)."),T6r=l(),Dt=a("div"),F(t8.$$.fragment),M6r=l(),T7e=a("p"),E6r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C6r=l(),kc=a("p"),w6r=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),A6r=o("not"),y6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),L6r=o("from_pretrained()"),x6r=o(" to load the model weights."),$6r=l(),F(C5.$$.fragment),k6r=l(),Dr=a("div"),F(a8.$$.fragment),S6r=l(),E7e=a("p"),R6r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B6r=l(),pn=a("p"),P6r=o("The model class to instantiate is selected based on the "),C7e=a("code"),I6r=o("model_type"),q6r=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),N6r=o("pretrained_model_name_or_path"),j6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),D6r=o("pretrained_model_name_or_path"),G6r=o(":"),O6r=l(),ke=a("ul"),w5=a("li"),y7e=a("strong"),V6r=o("bart"),X6r=o(" \u2014 "),aJ=a("a"),z6r=o("FlaxBartForCausalLM"),Q6r=o(" (BART model)"),W6r=l(),A5=a("li"),L7e=a("strong"),H6r=o("bert"),U6r=o(" \u2014 "),nJ=a("a"),J6r=o("FlaxBertForCausalLM"),Y6r=o(" (BERT model)"),K6r=l(),y5=a("li"),x7e=a("strong"),Z6r=o("big_bird"),e0r=o(" \u2014 "),sJ=a("a"),o0r=o("FlaxBigBirdForCausalLM"),r0r=o(" (BigBird model)"),t0r=l(),L5=a("li"),$7e=a("strong"),a0r=o("electra"),n0r=o(" \u2014 "),lJ=a("a"),s0r=o("FlaxElectraForCausalLM"),l0r=o(" (ELECTRA model)"),i0r=l(),x5=a("li"),k7e=a("strong"),d0r=o("gpt2"),c0r=o(" \u2014 "),iJ=a("a"),f0r=o("FlaxGPT2LMHeadModel"),m0r=o(" (OpenAI GPT-2 model)"),g0r=l(),$5=a("li"),S7e=a("strong"),h0r=o("gpt_neo"),p0r=o(" \u2014 "),dJ=a("a"),u0r=o("FlaxGPTNeoForCausalLM"),_0r=o(" (GPT Neo model)"),b0r=l(),k5=a("li"),R7e=a("strong"),v0r=o("gptj"),F0r=o(" \u2014 "),cJ=a("a"),T0r=o("FlaxGPTJForCausalLM"),M0r=o(" (GPT-J model)"),E0r=l(),S5=a("li"),B7e=a("strong"),C0r=o("roberta"),w0r=o(" \u2014 "),fJ=a("a"),A0r=o("FlaxRobertaForCausalLM"),y0r=o(" (RoBERTa model)"),L0r=l(),R5=a("li"),P7e=a("strong"),x0r=o("xglm"),$0r=o(" \u2014 "),mJ=a("a"),k0r=o("FlaxXGLMForCausalLM"),S0r=o(" (XGLM model)"),R0r=l(),F(B5.$$.fragment),Mqe=l(),Sc=a("h2"),P5=a("a"),I7e=a("span"),F(n8.$$.fragment),B0r=l(),q7e=a("span"),P0r=o("FlaxAutoModelForPreTraining"),Eqe=l(),gr=a("div"),F(s8.$$.fragment),I0r=l(),Rc=a("p"),q0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gJ=a("a"),N0r=o("from_pretrained()"),j0r=o(" class method or the "),hJ=a("a"),D0r=o("from_config()"),G0r=o(` class
method.`),O0r=l(),l8=a("p"),V0r=o("This class cannot be instantiated directly using "),N7e=a("code"),X0r=o("__init__()"),z0r=o(" (throws an error)."),Q0r=l(),Gt=a("div"),F(i8.$$.fragment),W0r=l(),j7e=a("p"),H0r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),U0r=l(),Bc=a("p"),J0r=o(`Note:
Loading a model from its configuration file does `),D7e=a("strong"),Y0r=o("not"),K0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=a("a"),Z0r=o("from_pretrained()"),eyr=o(" to load the model weights."),oyr=l(),F(I5.$$.fragment),ryr=l(),Gr=a("div"),F(d8.$$.fragment),tyr=l(),G7e=a("p"),ayr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nyr=l(),un=a("p"),syr=o("The model class to instantiate is selected based on the "),O7e=a("code"),lyr=o("model_type"),iyr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),dyr=o("pretrained_model_name_or_path"),cyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),fyr=o("pretrained_model_name_or_path"),myr=o(":"),gyr=l(),Me=a("ul"),q5=a("li"),z7e=a("strong"),hyr=o("albert"),pyr=o(" \u2014 "),uJ=a("a"),uyr=o("FlaxAlbertForPreTraining"),_yr=o(" (ALBERT model)"),byr=l(),N5=a("li"),Q7e=a("strong"),vyr=o("bart"),Fyr=o(" \u2014 "),_J=a("a"),Tyr=o("FlaxBartForConditionalGeneration"),Myr=o(" (BART model)"),Eyr=l(),j5=a("li"),W7e=a("strong"),Cyr=o("bert"),wyr=o(" \u2014 "),bJ=a("a"),Ayr=o("FlaxBertForPreTraining"),yyr=o(" (BERT model)"),Lyr=l(),D5=a("li"),H7e=a("strong"),xyr=o("big_bird"),$yr=o(" \u2014 "),vJ=a("a"),kyr=o("FlaxBigBirdForPreTraining"),Syr=o(" (BigBird model)"),Ryr=l(),G5=a("li"),U7e=a("strong"),Byr=o("electra"),Pyr=o(" \u2014 "),FJ=a("a"),Iyr=o("FlaxElectraForPreTraining"),qyr=o(" (ELECTRA model)"),Nyr=l(),O5=a("li"),J7e=a("strong"),jyr=o("mbart"),Dyr=o(" \u2014 "),TJ=a("a"),Gyr=o("FlaxMBartForConditionalGeneration"),Oyr=o(" (mBART model)"),Vyr=l(),V5=a("li"),Y7e=a("strong"),Xyr=o("mt5"),zyr=o(" \u2014 "),MJ=a("a"),Qyr=o("FlaxMT5ForConditionalGeneration"),Wyr=o(" (mT5 model)"),Hyr=l(),X5=a("li"),K7e=a("strong"),Uyr=o("roberta"),Jyr=o(" \u2014 "),EJ=a("a"),Yyr=o("FlaxRobertaForMaskedLM"),Kyr=o(" (RoBERTa model)"),Zyr=l(),z5=a("li"),Z7e=a("strong"),eLr=o("roformer"),oLr=o(" \u2014 "),CJ=a("a"),rLr=o("FlaxRoFormerForMaskedLM"),tLr=o(" (RoFormer model)"),aLr=l(),Q5=a("li"),e9e=a("strong"),nLr=o("t5"),sLr=o(" \u2014 "),wJ=a("a"),lLr=o("FlaxT5ForConditionalGeneration"),iLr=o(" (T5 model)"),dLr=l(),W5=a("li"),o9e=a("strong"),cLr=o("wav2vec2"),fLr=o(" \u2014 "),AJ=a("a"),mLr=o("FlaxWav2Vec2ForPreTraining"),gLr=o(" (Wav2Vec2 model)"),hLr=l(),H5=a("li"),r9e=a("strong"),pLr=o("xlm-roberta"),uLr=o(" \u2014 "),yJ=a("a"),_Lr=o("FlaxXLMRobertaForMaskedLM"),bLr=o(" (XLM-RoBERTa model)"),vLr=l(),F(U5.$$.fragment),Cqe=l(),Pc=a("h2"),J5=a("a"),t9e=a("span"),F(c8.$$.fragment),FLr=l(),a9e=a("span"),TLr=o("FlaxAutoModelForMaskedLM"),wqe=l(),hr=a("div"),F(f8.$$.fragment),MLr=l(),Ic=a("p"),ELr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LJ=a("a"),CLr=o("from_pretrained()"),wLr=o(" class method or the "),xJ=a("a"),ALr=o("from_config()"),yLr=o(` class
method.`),LLr=l(),m8=a("p"),xLr=o("This class cannot be instantiated directly using "),n9e=a("code"),$Lr=o("__init__()"),kLr=o(" (throws an error)."),SLr=l(),Ot=a("div"),F(g8.$$.fragment),RLr=l(),s9e=a("p"),BLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PLr=l(),qc=a("p"),ILr=o(`Note:
Loading a model from its configuration file does `),l9e=a("strong"),qLr=o("not"),NLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),jLr=o("from_pretrained()"),DLr=o(" to load the model weights."),GLr=l(),F(Y5.$$.fragment),OLr=l(),Or=a("div"),F(h8.$$.fragment),VLr=l(),i9e=a("p"),XLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zLr=l(),_n=a("p"),QLr=o("The model class to instantiate is selected based on the "),d9e=a("code"),WLr=o("model_type"),HLr=o(` property of the config object (either
passed as an argument or loaded from `),c9e=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=a("code"),YLr=o("pretrained_model_name_or_path"),KLr=o(":"),ZLr=l(),Le=a("ul"),K5=a("li"),m9e=a("strong"),e8r=o("albert"),o8r=o(" \u2014 "),kJ=a("a"),r8r=o("FlaxAlbertForMaskedLM"),t8r=o(" (ALBERT model)"),a8r=l(),Z5=a("li"),g9e=a("strong"),n8r=o("bart"),s8r=o(" \u2014 "),SJ=a("a"),l8r=o("FlaxBartForConditionalGeneration"),i8r=o(" (BART model)"),d8r=l(),eC=a("li"),h9e=a("strong"),c8r=o("bert"),f8r=o(" \u2014 "),RJ=a("a"),m8r=o("FlaxBertForMaskedLM"),g8r=o(" (BERT model)"),h8r=l(),oC=a("li"),p9e=a("strong"),p8r=o("big_bird"),u8r=o(" \u2014 "),BJ=a("a"),_8r=o("FlaxBigBirdForMaskedLM"),b8r=o(" (BigBird model)"),v8r=l(),rC=a("li"),u9e=a("strong"),F8r=o("distilbert"),T8r=o(" \u2014 "),PJ=a("a"),M8r=o("FlaxDistilBertForMaskedLM"),E8r=o(" (DistilBERT model)"),C8r=l(),tC=a("li"),_9e=a("strong"),w8r=o("electra"),A8r=o(" \u2014 "),IJ=a("a"),y8r=o("FlaxElectraForMaskedLM"),L8r=o(" (ELECTRA model)"),x8r=l(),aC=a("li"),b9e=a("strong"),$8r=o("mbart"),k8r=o(" \u2014 "),qJ=a("a"),S8r=o("FlaxMBartForConditionalGeneration"),R8r=o(" (mBART model)"),B8r=l(),nC=a("li"),v9e=a("strong"),P8r=o("roberta"),I8r=o(" \u2014 "),NJ=a("a"),q8r=o("FlaxRobertaForMaskedLM"),N8r=o(" (RoBERTa model)"),j8r=l(),sC=a("li"),F9e=a("strong"),D8r=o("roformer"),G8r=o(" \u2014 "),jJ=a("a"),O8r=o("FlaxRoFormerForMaskedLM"),V8r=o(" (RoFormer model)"),X8r=l(),lC=a("li"),T9e=a("strong"),z8r=o("xlm-roberta"),Q8r=o(" \u2014 "),DJ=a("a"),W8r=o("FlaxXLMRobertaForMaskedLM"),H8r=o(" (XLM-RoBERTa model)"),U8r=l(),F(iC.$$.fragment),Aqe=l(),Nc=a("h2"),dC=a("a"),M9e=a("span"),F(p8.$$.fragment),J8r=l(),E9e=a("span"),Y8r=o("FlaxAutoModelForSeq2SeqLM"),yqe=l(),pr=a("div"),F(u8.$$.fragment),K8r=l(),jc=a("p"),Z8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GJ=a("a"),exr=o("from_pretrained()"),oxr=o(" class method or the "),OJ=a("a"),rxr=o("from_config()"),txr=o(` class
method.`),axr=l(),_8=a("p"),nxr=o("This class cannot be instantiated directly using "),C9e=a("code"),sxr=o("__init__()"),lxr=o(" (throws an error)."),ixr=l(),Vt=a("div"),F(b8.$$.fragment),dxr=l(),w9e=a("p"),cxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fxr=l(),Dc=a("p"),mxr=o(`Note:
Loading a model from its configuration file does `),A9e=a("strong"),gxr=o("not"),hxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),pxr=o("from_pretrained()"),uxr=o(" to load the model weights."),_xr=l(),F(cC.$$.fragment),bxr=l(),Vr=a("div"),F(v8.$$.fragment),vxr=l(),y9e=a("p"),Fxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Txr=l(),bn=a("p"),Mxr=o("The model class to instantiate is selected based on the "),L9e=a("code"),Exr=o("model_type"),Cxr=o(` property of the config object (either
passed as an argument or loaded from `),x9e=a("code"),wxr=o("pretrained_model_name_or_path"),Axr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$9e=a("code"),yxr=o("pretrained_model_name_or_path"),Lxr=o(":"),xxr=l(),Se=a("ul"),fC=a("li"),k9e=a("strong"),$xr=o("bart"),kxr=o(" \u2014 "),XJ=a("a"),Sxr=o("FlaxBartForConditionalGeneration"),Rxr=o(" (BART model)"),Bxr=l(),mC=a("li"),S9e=a("strong"),Pxr=o("blenderbot"),Ixr=o(" \u2014 "),zJ=a("a"),qxr=o("FlaxBlenderbotForConditionalGeneration"),Nxr=o(" (Blenderbot model)"),jxr=l(),gC=a("li"),R9e=a("strong"),Dxr=o("blenderbot-small"),Gxr=o(" \u2014 "),QJ=a("a"),Oxr=o("FlaxBlenderbotSmallForConditionalGeneration"),Vxr=o(" (BlenderbotSmall model)"),Xxr=l(),hC=a("li"),B9e=a("strong"),zxr=o("encoder-decoder"),Qxr=o(" \u2014 "),WJ=a("a"),Wxr=o("FlaxEncoderDecoderModel"),Hxr=o(" (Encoder decoder model)"),Uxr=l(),pC=a("li"),P9e=a("strong"),Jxr=o("marian"),Yxr=o(" \u2014 "),HJ=a("a"),Kxr=o("FlaxMarianMTModel"),Zxr=o(" (Marian model)"),e$r=l(),uC=a("li"),I9e=a("strong"),o$r=o("mbart"),r$r=o(" \u2014 "),UJ=a("a"),t$r=o("FlaxMBartForConditionalGeneration"),a$r=o(" (mBART model)"),n$r=l(),_C=a("li"),q9e=a("strong"),s$r=o("mt5"),l$r=o(" \u2014 "),JJ=a("a"),i$r=o("FlaxMT5ForConditionalGeneration"),d$r=o(" (mT5 model)"),c$r=l(),bC=a("li"),N9e=a("strong"),f$r=o("pegasus"),m$r=o(" \u2014 "),YJ=a("a"),g$r=o("FlaxPegasusForConditionalGeneration"),h$r=o(" (Pegasus model)"),p$r=l(),vC=a("li"),j9e=a("strong"),u$r=o("t5"),_$r=o(" \u2014 "),KJ=a("a"),b$r=o("FlaxT5ForConditionalGeneration"),v$r=o(" (T5 model)"),F$r=l(),F(FC.$$.fragment),Lqe=l(),Gc=a("h2"),TC=a("a"),D9e=a("span"),F(F8.$$.fragment),T$r=l(),G9e=a("span"),M$r=o("FlaxAutoModelForSequenceClassification"),xqe=l(),ur=a("div"),F(T8.$$.fragment),E$r=l(),Oc=a("p"),C$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZJ=a("a"),w$r=o("from_pretrained()"),A$r=o(" class method or the "),eY=a("a"),y$r=o("from_config()"),L$r=o(` class
method.`),x$r=l(),M8=a("p"),$$r=o("This class cannot be instantiated directly using "),O9e=a("code"),k$r=o("__init__()"),S$r=o(" (throws an error)."),R$r=l(),Xt=a("div"),F(E8.$$.fragment),B$r=l(),V9e=a("p"),P$r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),I$r=l(),Vc=a("p"),q$r=o(`Note:
Loading a model from its configuration file does `),X9e=a("strong"),N$r=o("not"),j$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),D$r=o("from_pretrained()"),G$r=o(" to load the model weights."),O$r=l(),F(MC.$$.fragment),V$r=l(),Xr=a("div"),F(C8.$$.fragment),X$r=l(),z9e=a("p"),z$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q$r=l(),vn=a("p"),W$r=o("The model class to instantiate is selected based on the "),Q9e=a("code"),H$r=o("model_type"),U$r=o(` property of the config object (either
passed as an argument or loaded from `),W9e=a("code"),J$r=o("pretrained_model_name_or_path"),Y$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H9e=a("code"),K$r=o("pretrained_model_name_or_path"),Z$r=o(":"),ekr=l(),xe=a("ul"),EC=a("li"),U9e=a("strong"),okr=o("albert"),rkr=o(" \u2014 "),rY=a("a"),tkr=o("FlaxAlbertForSequenceClassification"),akr=o(" (ALBERT model)"),nkr=l(),CC=a("li"),J9e=a("strong"),skr=o("bart"),lkr=o(" \u2014 "),tY=a("a"),ikr=o("FlaxBartForSequenceClassification"),dkr=o(" (BART model)"),ckr=l(),wC=a("li"),Y9e=a("strong"),fkr=o("bert"),mkr=o(" \u2014 "),aY=a("a"),gkr=o("FlaxBertForSequenceClassification"),hkr=o(" (BERT model)"),pkr=l(),AC=a("li"),K9e=a("strong"),ukr=o("big_bird"),_kr=o(" \u2014 "),nY=a("a"),bkr=o("FlaxBigBirdForSequenceClassification"),vkr=o(" (BigBird model)"),Fkr=l(),yC=a("li"),Z9e=a("strong"),Tkr=o("distilbert"),Mkr=o(" \u2014 "),sY=a("a"),Ekr=o("FlaxDistilBertForSequenceClassification"),Ckr=o(" (DistilBERT model)"),wkr=l(),LC=a("li"),eMe=a("strong"),Akr=o("electra"),ykr=o(" \u2014 "),lY=a("a"),Lkr=o("FlaxElectraForSequenceClassification"),xkr=o(" (ELECTRA model)"),$kr=l(),xC=a("li"),oMe=a("strong"),kkr=o("mbart"),Skr=o(" \u2014 "),iY=a("a"),Rkr=o("FlaxMBartForSequenceClassification"),Bkr=o(" (mBART model)"),Pkr=l(),$C=a("li"),rMe=a("strong"),Ikr=o("roberta"),qkr=o(" \u2014 "),dY=a("a"),Nkr=o("FlaxRobertaForSequenceClassification"),jkr=o(" (RoBERTa model)"),Dkr=l(),kC=a("li"),tMe=a("strong"),Gkr=o("roformer"),Okr=o(" \u2014 "),cY=a("a"),Vkr=o("FlaxRoFormerForSequenceClassification"),Xkr=o(" (RoFormer model)"),zkr=l(),SC=a("li"),aMe=a("strong"),Qkr=o("xlm-roberta"),Wkr=o(" \u2014 "),fY=a("a"),Hkr=o("FlaxXLMRobertaForSequenceClassification"),Ukr=o(" (XLM-RoBERTa model)"),Jkr=l(),F(RC.$$.fragment),$qe=l(),Xc=a("h2"),BC=a("a"),nMe=a("span"),F(w8.$$.fragment),Ykr=l(),sMe=a("span"),Kkr=o("FlaxAutoModelForQuestionAnswering"),kqe=l(),_r=a("div"),F(A8.$$.fragment),Zkr=l(),zc=a("p"),eSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mY=a("a"),oSr=o("from_pretrained()"),rSr=o(" class method or the "),gY=a("a"),tSr=o("from_config()"),aSr=o(` class
method.`),nSr=l(),y8=a("p"),sSr=o("This class cannot be instantiated directly using "),lMe=a("code"),lSr=o("__init__()"),iSr=o(" (throws an error)."),dSr=l(),zt=a("div"),F(L8.$$.fragment),cSr=l(),iMe=a("p"),fSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mSr=l(),Qc=a("p"),gSr=o(`Note:
Loading a model from its configuration file does `),dMe=a("strong"),hSr=o("not"),pSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),uSr=o("from_pretrained()"),_Sr=o(" to load the model weights."),bSr=l(),F(PC.$$.fragment),vSr=l(),zr=a("div"),F(x8.$$.fragment),FSr=l(),cMe=a("p"),TSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MSr=l(),Fn=a("p"),ESr=o("The model class to instantiate is selected based on the "),fMe=a("code"),CSr=o("model_type"),wSr=o(` property of the config object (either
passed as an argument or loaded from `),mMe=a("code"),ASr=o("pretrained_model_name_or_path"),ySr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=a("code"),LSr=o("pretrained_model_name_or_path"),xSr=o(":"),$Sr=l(),$e=a("ul"),IC=a("li"),hMe=a("strong"),kSr=o("albert"),SSr=o(" \u2014 "),pY=a("a"),RSr=o("FlaxAlbertForQuestionAnswering"),BSr=o(" (ALBERT model)"),PSr=l(),qC=a("li"),pMe=a("strong"),ISr=o("bart"),qSr=o(" \u2014 "),uY=a("a"),NSr=o("FlaxBartForQuestionAnswering"),jSr=o(" (BART model)"),DSr=l(),NC=a("li"),uMe=a("strong"),GSr=o("bert"),OSr=o(" \u2014 "),_Y=a("a"),VSr=o("FlaxBertForQuestionAnswering"),XSr=o(" (BERT model)"),zSr=l(),jC=a("li"),_Me=a("strong"),QSr=o("big_bird"),WSr=o(" \u2014 "),bY=a("a"),HSr=o("FlaxBigBirdForQuestionAnswering"),USr=o(" (BigBird model)"),JSr=l(),DC=a("li"),bMe=a("strong"),YSr=o("distilbert"),KSr=o(" \u2014 "),vY=a("a"),ZSr=o("FlaxDistilBertForQuestionAnswering"),eRr=o(" (DistilBERT model)"),oRr=l(),GC=a("li"),vMe=a("strong"),rRr=o("electra"),tRr=o(" \u2014 "),FY=a("a"),aRr=o("FlaxElectraForQuestionAnswering"),nRr=o(" (ELECTRA model)"),sRr=l(),OC=a("li"),FMe=a("strong"),lRr=o("mbart"),iRr=o(" \u2014 "),TY=a("a"),dRr=o("FlaxMBartForQuestionAnswering"),cRr=o(" (mBART model)"),fRr=l(),VC=a("li"),TMe=a("strong"),mRr=o("roberta"),gRr=o(" \u2014 "),MY=a("a"),hRr=o("FlaxRobertaForQuestionAnswering"),pRr=o(" (RoBERTa model)"),uRr=l(),XC=a("li"),MMe=a("strong"),_Rr=o("roformer"),bRr=o(" \u2014 "),EY=a("a"),vRr=o("FlaxRoFormerForQuestionAnswering"),FRr=o(" (RoFormer model)"),TRr=l(),zC=a("li"),EMe=a("strong"),MRr=o("xlm-roberta"),ERr=o(" \u2014 "),CY=a("a"),CRr=o("FlaxXLMRobertaForQuestionAnswering"),wRr=o(" (XLM-RoBERTa model)"),ARr=l(),F(QC.$$.fragment),Sqe=l(),Wc=a("h2"),WC=a("a"),CMe=a("span"),F($8.$$.fragment),yRr=l(),wMe=a("span"),LRr=o("FlaxAutoModelForTokenClassification"),Rqe=l(),br=a("div"),F(k8.$$.fragment),xRr=l(),Hc=a("p"),$Rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wY=a("a"),kRr=o("from_pretrained()"),SRr=o(" class method or the "),AY=a("a"),RRr=o("from_config()"),BRr=o(` class
method.`),PRr=l(),S8=a("p"),IRr=o("This class cannot be instantiated directly using "),AMe=a("code"),qRr=o("__init__()"),NRr=o(" (throws an error)."),jRr=l(),Qt=a("div"),F(R8.$$.fragment),DRr=l(),yMe=a("p"),GRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ORr=l(),Uc=a("p"),VRr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),XRr=o("not"),zRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),QRr=o("from_pretrained()"),WRr=o(" to load the model weights."),HRr=l(),F(HC.$$.fragment),URr=l(),Qr=a("div"),F(B8.$$.fragment),JRr=l(),xMe=a("p"),YRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KRr=l(),Tn=a("p"),ZRr=o("The model class to instantiate is selected based on the "),$Me=a("code"),eBr=o("model_type"),oBr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),rBr=o("pretrained_model_name_or_path"),tBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),aBr=o("pretrained_model_name_or_path"),nBr=o(":"),sBr=l(),De=a("ul"),UC=a("li"),RMe=a("strong"),lBr=o("albert"),iBr=o(" \u2014 "),LY=a("a"),dBr=o("FlaxAlbertForTokenClassification"),cBr=o(" (ALBERT model)"),fBr=l(),JC=a("li"),BMe=a("strong"),mBr=o("bert"),gBr=o(" \u2014 "),xY=a("a"),hBr=o("FlaxBertForTokenClassification"),pBr=o(" (BERT model)"),uBr=l(),YC=a("li"),PMe=a("strong"),_Br=o("big_bird"),bBr=o(" \u2014 "),$Y=a("a"),vBr=o("FlaxBigBirdForTokenClassification"),FBr=o(" (BigBird model)"),TBr=l(),KC=a("li"),IMe=a("strong"),MBr=o("distilbert"),EBr=o(" \u2014 "),kY=a("a"),CBr=o("FlaxDistilBertForTokenClassification"),wBr=o(" (DistilBERT model)"),ABr=l(),ZC=a("li"),qMe=a("strong"),yBr=o("electra"),LBr=o(" \u2014 "),SY=a("a"),xBr=o("FlaxElectraForTokenClassification"),$Br=o(" (ELECTRA model)"),kBr=l(),e3=a("li"),NMe=a("strong"),SBr=o("roberta"),RBr=o(" \u2014 "),RY=a("a"),BBr=o("FlaxRobertaForTokenClassification"),PBr=o(" (RoBERTa model)"),IBr=l(),o3=a("li"),jMe=a("strong"),qBr=o("roformer"),NBr=o(" \u2014 "),BY=a("a"),jBr=o("FlaxRoFormerForTokenClassification"),DBr=o(" (RoFormer model)"),GBr=l(),r3=a("li"),DMe=a("strong"),OBr=o("xlm-roberta"),VBr=o(" \u2014 "),PY=a("a"),XBr=o("FlaxXLMRobertaForTokenClassification"),zBr=o(" (XLM-RoBERTa model)"),QBr=l(),F(t3.$$.fragment),Bqe=l(),Jc=a("h2"),a3=a("a"),GMe=a("span"),F(P8.$$.fragment),WBr=l(),OMe=a("span"),HBr=o("FlaxAutoModelForMultipleChoice"),Pqe=l(),vr=a("div"),F(I8.$$.fragment),UBr=l(),Yc=a("p"),JBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IY=a("a"),YBr=o("from_pretrained()"),KBr=o(" class method or the "),qY=a("a"),ZBr=o("from_config()"),ePr=o(` class
method.`),oPr=l(),q8=a("p"),rPr=o("This class cannot be instantiated directly using "),VMe=a("code"),tPr=o("__init__()"),aPr=o(" (throws an error)."),nPr=l(),Wt=a("div"),F(N8.$$.fragment),sPr=l(),XMe=a("p"),lPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iPr=l(),Kc=a("p"),dPr=o(`Note:
Loading a model from its configuration file does `),zMe=a("strong"),cPr=o("not"),fPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),mPr=o("from_pretrained()"),gPr=o(" to load the model weights."),hPr=l(),F(n3.$$.fragment),pPr=l(),Wr=a("div"),F(j8.$$.fragment),uPr=l(),QMe=a("p"),_Pr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bPr=l(),Mn=a("p"),vPr=o("The model class to instantiate is selected based on the "),WMe=a("code"),FPr=o("model_type"),TPr=o(` property of the config object (either
passed as an argument or loaded from `),HMe=a("code"),MPr=o("pretrained_model_name_or_path"),EPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=a("code"),CPr=o("pretrained_model_name_or_path"),wPr=o(":"),APr=l(),Ge=a("ul"),s3=a("li"),JMe=a("strong"),yPr=o("albert"),LPr=o(" \u2014 "),jY=a("a"),xPr=o("FlaxAlbertForMultipleChoice"),$Pr=o(" (ALBERT model)"),kPr=l(),l3=a("li"),YMe=a("strong"),SPr=o("bert"),RPr=o(" \u2014 "),DY=a("a"),BPr=o("FlaxBertForMultipleChoice"),PPr=o(" (BERT model)"),IPr=l(),i3=a("li"),KMe=a("strong"),qPr=o("big_bird"),NPr=o(" \u2014 "),GY=a("a"),jPr=o("FlaxBigBirdForMultipleChoice"),DPr=o(" (BigBird model)"),GPr=l(),d3=a("li"),ZMe=a("strong"),OPr=o("distilbert"),VPr=o(" \u2014 "),OY=a("a"),XPr=o("FlaxDistilBertForMultipleChoice"),zPr=o(" (DistilBERT model)"),QPr=l(),c3=a("li"),e4e=a("strong"),WPr=o("electra"),HPr=o(" \u2014 "),VY=a("a"),UPr=o("FlaxElectraForMultipleChoice"),JPr=o(" (ELECTRA model)"),YPr=l(),f3=a("li"),o4e=a("strong"),KPr=o("roberta"),ZPr=o(" \u2014 "),XY=a("a"),eIr=o("FlaxRobertaForMultipleChoice"),oIr=o(" (RoBERTa model)"),rIr=l(),m3=a("li"),r4e=a("strong"),tIr=o("roformer"),aIr=o(" \u2014 "),zY=a("a"),nIr=o("FlaxRoFormerForMultipleChoice"),sIr=o(" (RoFormer model)"),lIr=l(),g3=a("li"),t4e=a("strong"),iIr=o("xlm-roberta"),dIr=o(" \u2014 "),QY=a("a"),cIr=o("FlaxXLMRobertaForMultipleChoice"),fIr=o(" (XLM-RoBERTa model)"),mIr=l(),F(h3.$$.fragment),Iqe=l(),Zc=a("h2"),p3=a("a"),a4e=a("span"),F(D8.$$.fragment),gIr=l(),n4e=a("span"),hIr=o("FlaxAutoModelForNextSentencePrediction"),qqe=l(),Fr=a("div"),F(G8.$$.fragment),pIr=l(),ef=a("p"),uIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=a("a"),_Ir=o("from_pretrained()"),bIr=o(" class method or the "),HY=a("a"),vIr=o("from_config()"),FIr=o(` class
method.`),TIr=l(),O8=a("p"),MIr=o("This class cannot be instantiated directly using "),s4e=a("code"),EIr=o("__init__()"),CIr=o(" (throws an error)."),wIr=l(),Ht=a("div"),F(V8.$$.fragment),AIr=l(),l4e=a("p"),yIr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LIr=l(),of=a("p"),xIr=o(`Note:
Loading a model from its configuration file does `),i4e=a("strong"),$Ir=o("not"),kIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),SIr=o("from_pretrained()"),RIr=o(" to load the model weights."),BIr=l(),F(u3.$$.fragment),PIr=l(),Hr=a("div"),F(X8.$$.fragment),IIr=l(),d4e=a("p"),qIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NIr=l(),En=a("p"),jIr=o("The model class to instantiate is selected based on the "),c4e=a("code"),DIr=o("model_type"),GIr=o(` property of the config object (either
passed as an argument or loaded from `),f4e=a("code"),OIr=o("pretrained_model_name_or_path"),VIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(":"),QIr=l(),g4e=a("ul"),_3=a("li"),h4e=a("strong"),WIr=o("bert"),HIr=o(" \u2014 "),JY=a("a"),UIr=o("FlaxBertForNextSentencePrediction"),JIr=o(" (BERT model)"),YIr=l(),F(b3.$$.fragment),Nqe=l(),rf=a("h2"),v3=a("a"),p4e=a("span"),F(z8.$$.fragment),KIr=l(),u4e=a("span"),ZIr=o("FlaxAutoModelForImageClassification"),jqe=l(),Tr=a("div"),F(Q8.$$.fragment),eqr=l(),tf=a("p"),oqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YY=a("a"),rqr=o("from_pretrained()"),tqr=o(" class method or the "),KY=a("a"),aqr=o("from_config()"),nqr=o(` class
method.`),sqr=l(),W8=a("p"),lqr=o("This class cannot be instantiated directly using "),_4e=a("code"),iqr=o("__init__()"),dqr=o(" (throws an error)."),cqr=l(),Ut=a("div"),F(H8.$$.fragment),fqr=l(),b4e=a("p"),mqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gqr=l(),af=a("p"),hqr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),pqr=o("not"),uqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),_qr=o("from_pretrained()"),bqr=o(" to load the model weights."),vqr=l(),F(F3.$$.fragment),Fqr=l(),Ur=a("div"),F(U8.$$.fragment),Tqr=l(),F4e=a("p"),Mqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Eqr=l(),Cn=a("p"),Cqr=o("The model class to instantiate is selected based on the "),T4e=a("code"),wqr=o("model_type"),Aqr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),yqr=o("pretrained_model_name_or_path"),Lqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),xqr=o("pretrained_model_name_or_path"),$qr=o(":"),kqr=l(),J8=a("ul"),T3=a("li"),C4e=a("strong"),Sqr=o("beit"),Rqr=o(" \u2014 "),eK=a("a"),Bqr=o("FlaxBeitForImageClassification"),Pqr=o(" (BEiT model)"),Iqr=l(),M3=a("li"),w4e=a("strong"),qqr=o("vit"),Nqr=o(" \u2014 "),oK=a("a"),jqr=o("FlaxViTForImageClassification"),Dqr=o(" (ViT model)"),Gqr=l(),F(E3.$$.fragment),Dqe=l(),nf=a("h2"),C3=a("a"),A4e=a("span"),F(Y8.$$.fragment),Oqr=l(),y4e=a("span"),Vqr=o("FlaxAutoModelForVision2Seq"),Gqe=l(),Mr=a("div"),F(K8.$$.fragment),Xqr=l(),sf=a("p"),zqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rK=a("a"),Qqr=o("from_pretrained()"),Wqr=o(" class method or the "),tK=a("a"),Hqr=o("from_config()"),Uqr=o(` class
method.`),Jqr=l(),Z8=a("p"),Yqr=o("This class cannot be instantiated directly using "),L4e=a("code"),Kqr=o("__init__()"),Zqr=o(" (throws an error)."),eNr=l(),Jt=a("div"),F(ex.$$.fragment),oNr=l(),x4e=a("p"),rNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tNr=l(),lf=a("p"),aNr=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),nNr=o("not"),sNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),lNr=o("from_pretrained()"),iNr=o(" to load the model weights."),dNr=l(),F(w3.$$.fragment),cNr=l(),Jr=a("div"),F(ox.$$.fragment),fNr=l(),k4e=a("p"),mNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gNr=l(),wn=a("p"),hNr=o("The model class to instantiate is selected based on the "),S4e=a("code"),pNr=o("model_type"),uNr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),_Nr=o("pretrained_model_name_or_path"),bNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),vNr=o("pretrained_model_name_or_path"),FNr=o(":"),TNr=l(),P4e=a("ul"),A3=a("li"),I4e=a("strong"),MNr=o("vision-encoder-decoder"),ENr=o(" \u2014 "),nK=a("a"),CNr=o("FlaxVisionEncoderDecoderModel"),wNr=o(" (Vision Encoder decoder model)"),ANr=l(),F(y3.$$.fragment),this.h()},l(f){const _=ZAt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var rx=s(p);m=n(rx,"A",{id:!0,class:!0,href:!0});var q4e=s(m);u=n(q4e,"SPAN",{});var N4e=s(u);T(d.$$.fragment,N4e),N4e.forEach(t),q4e.forEach(t),h=i(rx),Mo=n(rx,"SPAN",{});var j4e=s(Mo);ii=r(j4e,"Auto Classes"),j4e.forEach(t),rx.forEach(t),mf=i(f),et=n(f,"P",{});var tx=s(et);di=r(tx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(tx,"CODE",{});var D4e=s(ci);WA=r(D4e,"from_pretrained()"),D4e.forEach(t),gf=r(tx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),tx.forEach(t),qe=i(f),Xe=n(f,"P",{});var An=s(Xe);fi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var G4e=s(yn);HA=r(G4e,"AutoConfig"),G4e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var O4e=s(xn);UA=r(O4e,"AutoModel"),O4e.forEach(t),mi=r(An,`, and
`),$n=n(An,"A",{href:!0});var V4e=s($n);JA=r(V4e,"AutoTokenizer"),V4e.forEach(t),gi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var ax=s(Ae);h$=r(ax,"will create a model that is an instance of "),hi=n(ax,"A",{href:!0});var X4e=s(hi);p$=r(X4e,"BertModel"),X4e.forEach(t),u$=r(ax,"."),ax.forEach(t),Eo=i(f),Ea=n(f,"P",{});var nx=s(Ea);_$=r(nx,"There is one class of "),pf=n(nx,"CODE",{});var z4e=s(pf);b$=r(z4e,"AutoModel"),z4e.forEach(t),Jje=r(nx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nx.forEach(t),jPe=i(f),pi=n(f,"H2",{class:!0});var sx=s(pi);uf=n(sx,"A",{id:!0,class:!0,href:!0});var Q4e=s(uf);KZ=n(Q4e,"SPAN",{});var W4e=s(KZ);T(YA.$$.fragment,W4e),W4e.forEach(t),Q4e.forEach(t),Yje=i(sx),ZZ=n(sx,"SPAN",{});var H4e=s(ZZ);Kje=r(H4e,"Extending the Auto Classes"),H4e.forEach(t),sx.forEach(t),DPe=i(f),kn=n(f,"P",{});var df=s(kn);Zje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),eee=n(df,"CODE",{});var U4e=s(eee);eDe=r(U4e,"NewModel"),U4e.forEach(t),oDe=r(df,", make sure you have a "),oee=n(df,"CODE",{});var J4e=s(oee);rDe=r(J4e,"NewModelConfig"),J4e.forEach(t),tDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),GPe=i(f),T(KA.$$.fragment,f),OPe=i(f),v$=n(f,"P",{});var Y4e=s(v$);aDe=r(Y4e,"You will then be able to use the auto classes like you would usually do!"),Y4e.forEach(t),VPe=i(f),T(_f.$$.fragment,f),XPe=i(f),ui=n(f,"H2",{class:!0});var lx=s(ui);bf=n(lx,"A",{id:!0,class:!0,href:!0});var K4e=s(bf);ree=n(K4e,"SPAN",{});var Z4e=s(ree);T(ZA.$$.fragment,Z4e),Z4e.forEach(t),K4e.forEach(t),nDe=i(lx),tee=n(lx,"SPAN",{});var eEe=s(tee);sDe=r(eEe,"AutoConfig"),eEe.forEach(t),lx.forEach(t),zPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(e6.$$.fragment,Kr),lDe=i(Kr),o6=n(Kr,"P",{});var ix=s(o6);iDe=r(ix,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),F$=n(ix,"A",{href:!0});var oEe=s(F$);dDe=r(oEe,"from_pretrained()"),oEe.forEach(t),cDe=r(ix," class method."),ix.forEach(t),fDe=i(Kr),r6=n(Kr,"P",{});var dx=s(r6);mDe=r(dx,"This class cannot be instantiated directly using "),aee=n(dx,"CODE",{});var rEe=s(aee);gDe=r(rEe,"__init__()"),rEe.forEach(t),hDe=r(dx," (throws an error)."),dx.forEach(t),pDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(t6.$$.fragment,Zr),uDe=i(Zr),nee=n(Zr,"P",{});var tEe=s(nee);_De=r(tEe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),tEe.forEach(t),bDe=i(Zr),_i=n(Zr,"P",{});var cf=s(_i);vDe=r(cf,"The configuration class to instantiate is selected based on the "),see=n(cf,"CODE",{});var aEe=s(see);FDe=r(aEe,"model_type"),aEe.forEach(t),TDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),lee=n(cf,"CODE",{});var nEe=s(lee);MDe=r(nEe,"pretrained_model_name_or_path"),nEe.forEach(t),EDe=r(cf,":"),cf.forEach(t),CDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var L3=s(vf);iee=n(L3,"STRONG",{});var sEe=s(iee);wDe=r(sEe,"albert"),sEe.forEach(t),ADe=r(L3," \u2014 "),T$=n(L3,"A",{href:!0});var lEe=s(T$);yDe=r(lEe,"AlbertConfig"),lEe.forEach(t),LDe=r(L3," (ALBERT model)"),L3.forEach(t),xDe=i(L),Ff=n(L,"LI",{});var x3=s(Ff);dee=n(x3,"STRONG",{});var iEe=s(dee);$De=r(iEe,"bart"),iEe.forEach(t),kDe=r(x3," \u2014 "),M$=n(x3,"A",{href:!0});var dEe=s(M$);SDe=r(dEe,"BartConfig"),dEe.forEach(t),RDe=r(x3," (BART model)"),x3.forEach(t),BDe=i(L),Tf=n(L,"LI",{});var $3=s(Tf);cee=n($3,"STRONG",{});var cEe=s(cee);PDe=r(cEe,"beit"),cEe.forEach(t),IDe=r($3," \u2014 "),E$=n($3,"A",{href:!0});var fEe=s(E$);qDe=r(fEe,"BeitConfig"),fEe.forEach(t),NDe=r($3," (BEiT model)"),$3.forEach(t),jDe=i(L),Mf=n(L,"LI",{});var k3=s(Mf);fee=n(k3,"STRONG",{});var mEe=s(fee);DDe=r(mEe,"bert"),mEe.forEach(t),GDe=r(k3," \u2014 "),C$=n(k3,"A",{href:!0});var gEe=s(C$);ODe=r(gEe,"BertConfig"),gEe.forEach(t),VDe=r(k3," (BERT model)"),k3.forEach(t),XDe=i(L),Ef=n(L,"LI",{});var S3=s(Ef);mee=n(S3,"STRONG",{});var hEe=s(mee);zDe=r(hEe,"bert-generation"),hEe.forEach(t),QDe=r(S3," \u2014 "),w$=n(S3,"A",{href:!0});var pEe=s(w$);WDe=r(pEe,"BertGenerationConfig"),pEe.forEach(t),HDe=r(S3," (Bert Generation model)"),S3.forEach(t),UDe=i(L),Cf=n(L,"LI",{});var R3=s(Cf);gee=n(R3,"STRONG",{});var uEe=s(gee);JDe=r(uEe,"big_bird"),uEe.forEach(t),YDe=r(R3," \u2014 "),A$=n(R3,"A",{href:!0});var _Ee=s(A$);KDe=r(_Ee,"BigBirdConfig"),_Ee.forEach(t),ZDe=r(R3," (BigBird model)"),R3.forEach(t),eGe=i(L),wf=n(L,"LI",{});var B3=s(wf);hee=n(B3,"STRONG",{});var bEe=s(hee);oGe=r(bEe,"bigbird_pegasus"),bEe.forEach(t),rGe=r(B3," \u2014 "),y$=n(B3,"A",{href:!0});var vEe=s(y$);tGe=r(vEe,"BigBirdPegasusConfig"),vEe.forEach(t),aGe=r(B3," (BigBirdPegasus model)"),B3.forEach(t),nGe=i(L),Af=n(L,"LI",{});var P3=s(Af);pee=n(P3,"STRONG",{});var FEe=s(pee);sGe=r(FEe,"blenderbot"),FEe.forEach(t),lGe=r(P3," \u2014 "),L$=n(P3,"A",{href:!0});var TEe=s(L$);iGe=r(TEe,"BlenderbotConfig"),TEe.forEach(t),dGe=r(P3," (Blenderbot model)"),P3.forEach(t),cGe=i(L),yf=n(L,"LI",{});var I3=s(yf);uee=n(I3,"STRONG",{});var MEe=s(uee);fGe=r(MEe,"blenderbot-small"),MEe.forEach(t),mGe=r(I3," \u2014 "),x$=n(I3,"A",{href:!0});var EEe=s(x$);gGe=r(EEe,"BlenderbotSmallConfig"),EEe.forEach(t),hGe=r(I3," (BlenderbotSmall model)"),I3.forEach(t),pGe=i(L),Lf=n(L,"LI",{});var q3=s(Lf);_ee=n(q3,"STRONG",{});var CEe=s(_ee);uGe=r(CEe,"camembert"),CEe.forEach(t),_Ge=r(q3," \u2014 "),$$=n(q3,"A",{href:!0});var wEe=s($$);bGe=r(wEe,"CamembertConfig"),wEe.forEach(t),vGe=r(q3," (CamemBERT model)"),q3.forEach(t),FGe=i(L),xf=n(L,"LI",{});var N3=s(xf);bee=n(N3,"STRONG",{});var AEe=s(bee);TGe=r(AEe,"canine"),AEe.forEach(t),MGe=r(N3," \u2014 "),k$=n(N3,"A",{href:!0});var yEe=s(k$);EGe=r(yEe,"CanineConfig"),yEe.forEach(t),CGe=r(N3," (Canine model)"),N3.forEach(t),wGe=i(L),$f=n(L,"LI",{});var j3=s($f);vee=n(j3,"STRONG",{});var LEe=s(vee);AGe=r(LEe,"clip"),LEe.forEach(t),yGe=r(j3," \u2014 "),S$=n(j3,"A",{href:!0});var xEe=s(S$);LGe=r(xEe,"CLIPConfig"),xEe.forEach(t),xGe=r(j3," (CLIP model)"),j3.forEach(t),$Ge=i(L),kf=n(L,"LI",{});var D3=s(kf);Fee=n(D3,"STRONG",{});var $Ee=s(Fee);kGe=r($Ee,"convbert"),$Ee.forEach(t),SGe=r(D3," \u2014 "),R$=n(D3,"A",{href:!0});var kEe=s(R$);RGe=r(kEe,"ConvBertConfig"),kEe.forEach(t),BGe=r(D3," (ConvBERT model)"),D3.forEach(t),PGe=i(L),Sf=n(L,"LI",{});var G3=s(Sf);Tee=n(G3,"STRONG",{});var SEe=s(Tee);IGe=r(SEe,"convnext"),SEe.forEach(t),qGe=r(G3," \u2014 "),B$=n(G3,"A",{href:!0});var REe=s(B$);NGe=r(REe,"ConvNextConfig"),REe.forEach(t),jGe=r(G3," (ConvNext model)"),G3.forEach(t),DGe=i(L),Rf=n(L,"LI",{});var O3=s(Rf);Mee=n(O3,"STRONG",{});var BEe=s(Mee);GGe=r(BEe,"ctrl"),BEe.forEach(t),OGe=r(O3," \u2014 "),P$=n(O3,"A",{href:!0});var PEe=s(P$);VGe=r(PEe,"CTRLConfig"),PEe.forEach(t),XGe=r(O3," (CTRL model)"),O3.forEach(t),zGe=i(L),Bf=n(L,"LI",{});var V3=s(Bf);Eee=n(V3,"STRONG",{});var IEe=s(Eee);QGe=r(IEe,"data2vec-audio"),IEe.forEach(t),WGe=r(V3," \u2014 "),I$=n(V3,"A",{href:!0});var qEe=s(I$);HGe=r(qEe,"Data2VecAudioConfig"),qEe.forEach(t),UGe=r(V3," (Data2VecAudio model)"),V3.forEach(t),JGe=i(L),Pf=n(L,"LI",{});var X3=s(Pf);Cee=n(X3,"STRONG",{});var NEe=s(Cee);YGe=r(NEe,"data2vec-text"),NEe.forEach(t),KGe=r(X3," \u2014 "),q$=n(X3,"A",{href:!0});var jEe=s(q$);ZGe=r(jEe,"Data2VecTextConfig"),jEe.forEach(t),eOe=r(X3," (Data2VecText model)"),X3.forEach(t),oOe=i(L),If=n(L,"LI",{});var z3=s(If);wee=n(z3,"STRONG",{});var DEe=s(wee);rOe=r(DEe,"data2vec-vision"),DEe.forEach(t),tOe=r(z3," \u2014 "),N$=n(z3,"A",{href:!0});var GEe=s(N$);aOe=r(GEe,"Data2VecVisionConfig"),GEe.forEach(t),nOe=r(z3," (Data2VecVision model)"),z3.forEach(t),sOe=i(L),qf=n(L,"LI",{});var Q3=s(qf);Aee=n(Q3,"STRONG",{});var OEe=s(Aee);lOe=r(OEe,"deberta"),OEe.forEach(t),iOe=r(Q3," \u2014 "),j$=n(Q3,"A",{href:!0});var VEe=s(j$);dOe=r(VEe,"DebertaConfig"),VEe.forEach(t),cOe=r(Q3," (DeBERTa model)"),Q3.forEach(t),fOe=i(L),Nf=n(L,"LI",{});var W3=s(Nf);yee=n(W3,"STRONG",{});var XEe=s(yee);mOe=r(XEe,"deberta-v2"),XEe.forEach(t),gOe=r(W3," \u2014 "),D$=n(W3,"A",{href:!0});var zEe=s(D$);hOe=r(zEe,"DebertaV2Config"),zEe.forEach(t),pOe=r(W3," (DeBERTa-v2 model)"),W3.forEach(t),uOe=i(L),jf=n(L,"LI",{});var H3=s(jf);Lee=n(H3,"STRONG",{});var QEe=s(Lee);_Oe=r(QEe,"decision_transformer"),QEe.forEach(t),bOe=r(H3," \u2014 "),G$=n(H3,"A",{href:!0});var WEe=s(G$);vOe=r(WEe,"DecisionTransformerConfig"),WEe.forEach(t),FOe=r(H3," (Decision Transformer model)"),H3.forEach(t),TOe=i(L),Df=n(L,"LI",{});var U3=s(Df);xee=n(U3,"STRONG",{});var HEe=s(xee);MOe=r(HEe,"deit"),HEe.forEach(t),EOe=r(U3," \u2014 "),O$=n(U3,"A",{href:!0});var UEe=s(O$);COe=r(UEe,"DeiTConfig"),UEe.forEach(t),wOe=r(U3," (DeiT model)"),U3.forEach(t),AOe=i(L),Gf=n(L,"LI",{});var J3=s(Gf);$ee=n(J3,"STRONG",{});var JEe=s($ee);yOe=r(JEe,"detr"),JEe.forEach(t),LOe=r(J3," \u2014 "),V$=n(J3,"A",{href:!0});var LNr=s(V$);xOe=r(LNr,"DetrConfig"),LNr.forEach(t),$Oe=r(J3," (DETR model)"),J3.forEach(t),kOe=i(L),Of=n(L,"LI",{});var YEe=s(Of);kee=n(YEe,"STRONG",{});var xNr=s(kee);SOe=r(xNr,"distilbert"),xNr.forEach(t),ROe=r(YEe," \u2014 "),X$=n(YEe,"A",{href:!0});var $Nr=s(X$);BOe=r($Nr,"DistilBertConfig"),$Nr.forEach(t),POe=r(YEe," (DistilBERT model)"),YEe.forEach(t),IOe=i(L),Vf=n(L,"LI",{});var KEe=s(Vf);See=n(KEe,"STRONG",{});var kNr=s(See);qOe=r(kNr,"dpr"),kNr.forEach(t),NOe=r(KEe," \u2014 "),z$=n(KEe,"A",{href:!0});var SNr=s(z$);jOe=r(SNr,"DPRConfig"),SNr.forEach(t),DOe=r(KEe," (DPR model)"),KEe.forEach(t),GOe=i(L),Xf=n(L,"LI",{});var ZEe=s(Xf);Ree=n(ZEe,"STRONG",{});var RNr=s(Ree);OOe=r(RNr,"dpt"),RNr.forEach(t),VOe=r(ZEe," \u2014 "),Q$=n(ZEe,"A",{href:!0});var BNr=s(Q$);XOe=r(BNr,"DPTConfig"),BNr.forEach(t),zOe=r(ZEe," (DPT model)"),ZEe.forEach(t),QOe=i(L),zf=n(L,"LI",{});var e5e=s(zf);Bee=n(e5e,"STRONG",{});var PNr=s(Bee);WOe=r(PNr,"electra"),PNr.forEach(t),HOe=r(e5e," \u2014 "),W$=n(e5e,"A",{href:!0});var INr=s(W$);UOe=r(INr,"ElectraConfig"),INr.forEach(t),JOe=r(e5e," (ELECTRA model)"),e5e.forEach(t),YOe=i(L),Qf=n(L,"LI",{});var o5e=s(Qf);Pee=n(o5e,"STRONG",{});var qNr=s(Pee);KOe=r(qNr,"encoder-decoder"),qNr.forEach(t),ZOe=r(o5e," \u2014 "),H$=n(o5e,"A",{href:!0});var NNr=s(H$);eVe=r(NNr,"EncoderDecoderConfig"),NNr.forEach(t),oVe=r(o5e," (Encoder decoder model)"),o5e.forEach(t),rVe=i(L),Wf=n(L,"LI",{});var r5e=s(Wf);Iee=n(r5e,"STRONG",{});var jNr=s(Iee);tVe=r(jNr,"flaubert"),jNr.forEach(t),aVe=r(r5e," \u2014 "),U$=n(r5e,"A",{href:!0});var DNr=s(U$);nVe=r(DNr,"FlaubertConfig"),DNr.forEach(t),sVe=r(r5e," (FlauBERT model)"),r5e.forEach(t),lVe=i(L),Hf=n(L,"LI",{});var t5e=s(Hf);qee=n(t5e,"STRONG",{});var GNr=s(qee);iVe=r(GNr,"flava"),GNr.forEach(t),dVe=r(t5e," \u2014 "),J$=n(t5e,"A",{href:!0});var ONr=s(J$);cVe=r(ONr,"FlavaConfig"),ONr.forEach(t),fVe=r(t5e," (Flava model)"),t5e.forEach(t),mVe=i(L),Uf=n(L,"LI",{});var a5e=s(Uf);Nee=n(a5e,"STRONG",{});var VNr=s(Nee);gVe=r(VNr,"fnet"),VNr.forEach(t),hVe=r(a5e," \u2014 "),Y$=n(a5e,"A",{href:!0});var XNr=s(Y$);pVe=r(XNr,"FNetConfig"),XNr.forEach(t),uVe=r(a5e," (FNet model)"),a5e.forEach(t),_Ve=i(L),Jf=n(L,"LI",{});var n5e=s(Jf);jee=n(n5e,"STRONG",{});var zNr=s(jee);bVe=r(zNr,"fsmt"),zNr.forEach(t),vVe=r(n5e," \u2014 "),K$=n(n5e,"A",{href:!0});var QNr=s(K$);FVe=r(QNr,"FSMTConfig"),QNr.forEach(t),TVe=r(n5e," (FairSeq Machine-Translation model)"),n5e.forEach(t),MVe=i(L),Yf=n(L,"LI",{});var s5e=s(Yf);Dee=n(s5e,"STRONG",{});var WNr=s(Dee);EVe=r(WNr,"funnel"),WNr.forEach(t),CVe=r(s5e," \u2014 "),Z$=n(s5e,"A",{href:!0});var HNr=s(Z$);wVe=r(HNr,"FunnelConfig"),HNr.forEach(t),AVe=r(s5e," (Funnel Transformer model)"),s5e.forEach(t),yVe=i(L),Kf=n(L,"LI",{});var l5e=s(Kf);Gee=n(l5e,"STRONG",{});var UNr=s(Gee);LVe=r(UNr,"glpn"),UNr.forEach(t),xVe=r(l5e," \u2014 "),ek=n(l5e,"A",{href:!0});var JNr=s(ek);$Ve=r(JNr,"GLPNConfig"),JNr.forEach(t),kVe=r(l5e," (GLPN model)"),l5e.forEach(t),SVe=i(L),Zf=n(L,"LI",{});var i5e=s(Zf);Oee=n(i5e,"STRONG",{});var YNr=s(Oee);RVe=r(YNr,"gpt2"),YNr.forEach(t),BVe=r(i5e," \u2014 "),ok=n(i5e,"A",{href:!0});var KNr=s(ok);PVe=r(KNr,"GPT2Config"),KNr.forEach(t),IVe=r(i5e," (OpenAI GPT-2 model)"),i5e.forEach(t),qVe=i(L),em=n(L,"LI",{});var d5e=s(em);Vee=n(d5e,"STRONG",{});var ZNr=s(Vee);NVe=r(ZNr,"gpt_neo"),ZNr.forEach(t),jVe=r(d5e," \u2014 "),rk=n(d5e,"A",{href:!0});var ejr=s(rk);DVe=r(ejr,"GPTNeoConfig"),ejr.forEach(t),GVe=r(d5e," (GPT Neo model)"),d5e.forEach(t),OVe=i(L),om=n(L,"LI",{});var c5e=s(om);Xee=n(c5e,"STRONG",{});var ojr=s(Xee);VVe=r(ojr,"gptj"),ojr.forEach(t),XVe=r(c5e," \u2014 "),tk=n(c5e,"A",{href:!0});var rjr=s(tk);zVe=r(rjr,"GPTJConfig"),rjr.forEach(t),QVe=r(c5e," (GPT-J model)"),c5e.forEach(t),WVe=i(L),rm=n(L,"LI",{});var f5e=s(rm);zee=n(f5e,"STRONG",{});var tjr=s(zee);HVe=r(tjr,"hubert"),tjr.forEach(t),UVe=r(f5e," \u2014 "),ak=n(f5e,"A",{href:!0});var ajr=s(ak);JVe=r(ajr,"HubertConfig"),ajr.forEach(t),YVe=r(f5e," (Hubert model)"),f5e.forEach(t),KVe=i(L),tm=n(L,"LI",{});var m5e=s(tm);Qee=n(m5e,"STRONG",{});var njr=s(Qee);ZVe=r(njr,"ibert"),njr.forEach(t),eXe=r(m5e," \u2014 "),nk=n(m5e,"A",{href:!0});var sjr=s(nk);oXe=r(sjr,"IBertConfig"),sjr.forEach(t),rXe=r(m5e," (I-BERT model)"),m5e.forEach(t),tXe=i(L),am=n(L,"LI",{});var g5e=s(am);Wee=n(g5e,"STRONG",{});var ljr=s(Wee);aXe=r(ljr,"imagegpt"),ljr.forEach(t),nXe=r(g5e," \u2014 "),sk=n(g5e,"A",{href:!0});var ijr=s(sk);sXe=r(ijr,"ImageGPTConfig"),ijr.forEach(t),lXe=r(g5e," (ImageGPT model)"),g5e.forEach(t),iXe=i(L),nm=n(L,"LI",{});var h5e=s(nm);Hee=n(h5e,"STRONG",{});var djr=s(Hee);dXe=r(djr,"layoutlm"),djr.forEach(t),cXe=r(h5e," \u2014 "),lk=n(h5e,"A",{href:!0});var cjr=s(lk);fXe=r(cjr,"LayoutLMConfig"),cjr.forEach(t),mXe=r(h5e," (LayoutLM model)"),h5e.forEach(t),gXe=i(L),sm=n(L,"LI",{});var p5e=s(sm);Uee=n(p5e,"STRONG",{});var fjr=s(Uee);hXe=r(fjr,"layoutlmv2"),fjr.forEach(t),pXe=r(p5e," \u2014 "),ik=n(p5e,"A",{href:!0});var mjr=s(ik);uXe=r(mjr,"LayoutLMv2Config"),mjr.forEach(t),_Xe=r(p5e," (LayoutLMv2 model)"),p5e.forEach(t),bXe=i(L),lm=n(L,"LI",{});var u5e=s(lm);Jee=n(u5e,"STRONG",{});var gjr=s(Jee);vXe=r(gjr,"led"),gjr.forEach(t),FXe=r(u5e," \u2014 "),dk=n(u5e,"A",{href:!0});var hjr=s(dk);TXe=r(hjr,"LEDConfig"),hjr.forEach(t),MXe=r(u5e," (LED model)"),u5e.forEach(t),EXe=i(L),im=n(L,"LI",{});var _5e=s(im);Yee=n(_5e,"STRONG",{});var pjr=s(Yee);CXe=r(pjr,"longformer"),pjr.forEach(t),wXe=r(_5e," \u2014 "),ck=n(_5e,"A",{href:!0});var ujr=s(ck);AXe=r(ujr,"LongformerConfig"),ujr.forEach(t),yXe=r(_5e," (Longformer model)"),_5e.forEach(t),LXe=i(L),dm=n(L,"LI",{});var b5e=s(dm);Kee=n(b5e,"STRONG",{});var _jr=s(Kee);xXe=r(_jr,"luke"),_jr.forEach(t),$Xe=r(b5e," \u2014 "),fk=n(b5e,"A",{href:!0});var bjr=s(fk);kXe=r(bjr,"LukeConfig"),bjr.forEach(t),SXe=r(b5e," (LUKE model)"),b5e.forEach(t),RXe=i(L),cm=n(L,"LI",{});var v5e=s(cm);Zee=n(v5e,"STRONG",{});var vjr=s(Zee);BXe=r(vjr,"lxmert"),vjr.forEach(t),PXe=r(v5e," \u2014 "),mk=n(v5e,"A",{href:!0});var Fjr=s(mk);IXe=r(Fjr,"LxmertConfig"),Fjr.forEach(t),qXe=r(v5e," (LXMERT model)"),v5e.forEach(t),NXe=i(L),fm=n(L,"LI",{});var F5e=s(fm);eoe=n(F5e,"STRONG",{});var Tjr=s(eoe);jXe=r(Tjr,"m2m_100"),Tjr.forEach(t),DXe=r(F5e," \u2014 "),gk=n(F5e,"A",{href:!0});var Mjr=s(gk);GXe=r(Mjr,"M2M100Config"),Mjr.forEach(t),OXe=r(F5e," (M2M100 model)"),F5e.forEach(t),VXe=i(L),mm=n(L,"LI",{});var T5e=s(mm);ooe=n(T5e,"STRONG",{});var Ejr=s(ooe);XXe=r(Ejr,"marian"),Ejr.forEach(t),zXe=r(T5e," \u2014 "),hk=n(T5e,"A",{href:!0});var Cjr=s(hk);QXe=r(Cjr,"MarianConfig"),Cjr.forEach(t),WXe=r(T5e," (Marian model)"),T5e.forEach(t),HXe=i(L),gm=n(L,"LI",{});var M5e=s(gm);roe=n(M5e,"STRONG",{});var wjr=s(roe);UXe=r(wjr,"maskformer"),wjr.forEach(t),JXe=r(M5e," \u2014 "),pk=n(M5e,"A",{href:!0});var Ajr=s(pk);YXe=r(Ajr,"MaskFormerConfig"),Ajr.forEach(t),KXe=r(M5e," (MaskFormer model)"),M5e.forEach(t),ZXe=i(L),hm=n(L,"LI",{});var E5e=s(hm);toe=n(E5e,"STRONG",{});var yjr=s(toe);eze=r(yjr,"mbart"),yjr.forEach(t),oze=r(E5e," \u2014 "),uk=n(E5e,"A",{href:!0});var Ljr=s(uk);rze=r(Ljr,"MBartConfig"),Ljr.forEach(t),tze=r(E5e," (mBART model)"),E5e.forEach(t),aze=i(L),pm=n(L,"LI",{});var C5e=s(pm);aoe=n(C5e,"STRONG",{});var xjr=s(aoe);nze=r(xjr,"megatron-bert"),xjr.forEach(t),sze=r(C5e," \u2014 "),_k=n(C5e,"A",{href:!0});var $jr=s(_k);lze=r($jr,"MegatronBertConfig"),$jr.forEach(t),ize=r(C5e," (MegatronBert model)"),C5e.forEach(t),dze=i(L),um=n(L,"LI",{});var w5e=s(um);noe=n(w5e,"STRONG",{});var kjr=s(noe);cze=r(kjr,"mobilebert"),kjr.forEach(t),fze=r(w5e," \u2014 "),bk=n(w5e,"A",{href:!0});var Sjr=s(bk);mze=r(Sjr,"MobileBertConfig"),Sjr.forEach(t),gze=r(w5e," (MobileBERT model)"),w5e.forEach(t),hze=i(L),_m=n(L,"LI",{});var A5e=s(_m);soe=n(A5e,"STRONG",{});var Rjr=s(soe);pze=r(Rjr,"mpnet"),Rjr.forEach(t),uze=r(A5e," \u2014 "),vk=n(A5e,"A",{href:!0});var Bjr=s(vk);_ze=r(Bjr,"MPNetConfig"),Bjr.forEach(t),bze=r(A5e," (MPNet model)"),A5e.forEach(t),vze=i(L),bm=n(L,"LI",{});var y5e=s(bm);loe=n(y5e,"STRONG",{});var Pjr=s(loe);Fze=r(Pjr,"mt5"),Pjr.forEach(t),Tze=r(y5e," \u2014 "),Fk=n(y5e,"A",{href:!0});var Ijr=s(Fk);Mze=r(Ijr,"MT5Config"),Ijr.forEach(t),Eze=r(y5e," (mT5 model)"),y5e.forEach(t),Cze=i(L),vm=n(L,"LI",{});var L5e=s(vm);ioe=n(L5e,"STRONG",{});var qjr=s(ioe);wze=r(qjr,"nystromformer"),qjr.forEach(t),Aze=r(L5e," \u2014 "),Tk=n(L5e,"A",{href:!0});var Njr=s(Tk);yze=r(Njr,"NystromformerConfig"),Njr.forEach(t),Lze=r(L5e," (Nystromformer model)"),L5e.forEach(t),xze=i(L),Fm=n(L,"LI",{});var x5e=s(Fm);doe=n(x5e,"STRONG",{});var jjr=s(doe);$ze=r(jjr,"openai-gpt"),jjr.forEach(t),kze=r(x5e," \u2014 "),Mk=n(x5e,"A",{href:!0});var Djr=s(Mk);Sze=r(Djr,"OpenAIGPTConfig"),Djr.forEach(t),Rze=r(x5e," (OpenAI GPT model)"),x5e.forEach(t),Bze=i(L),Tm=n(L,"LI",{});var $5e=s(Tm);coe=n($5e,"STRONG",{});var Gjr=s(coe);Pze=r(Gjr,"opt"),Gjr.forEach(t),Ize=r($5e," \u2014 "),Ek=n($5e,"A",{href:!0});var Ojr=s(Ek);qze=r(Ojr,"OPTConfig"),Ojr.forEach(t),Nze=r($5e," (OPT model)"),$5e.forEach(t),jze=i(L),Mm=n(L,"LI",{});var k5e=s(Mm);foe=n(k5e,"STRONG",{});var Vjr=s(foe);Dze=r(Vjr,"pegasus"),Vjr.forEach(t),Gze=r(k5e," \u2014 "),Ck=n(k5e,"A",{href:!0});var Xjr=s(Ck);Oze=r(Xjr,"PegasusConfig"),Xjr.forEach(t),Vze=r(k5e," (Pegasus model)"),k5e.forEach(t),Xze=i(L),Em=n(L,"LI",{});var S5e=s(Em);moe=n(S5e,"STRONG",{});var zjr=s(moe);zze=r(zjr,"perceiver"),zjr.forEach(t),Qze=r(S5e," \u2014 "),wk=n(S5e,"A",{href:!0});var Qjr=s(wk);Wze=r(Qjr,"PerceiverConfig"),Qjr.forEach(t),Hze=r(S5e," (Perceiver model)"),S5e.forEach(t),Uze=i(L),Cm=n(L,"LI",{});var R5e=s(Cm);goe=n(R5e,"STRONG",{});var Wjr=s(goe);Jze=r(Wjr,"plbart"),Wjr.forEach(t),Yze=r(R5e," \u2014 "),Ak=n(R5e,"A",{href:!0});var Hjr=s(Ak);Kze=r(Hjr,"PLBartConfig"),Hjr.forEach(t),Zze=r(R5e," (PLBart model)"),R5e.forEach(t),eQe=i(L),wm=n(L,"LI",{});var B5e=s(wm);hoe=n(B5e,"STRONG",{});var Ujr=s(hoe);oQe=r(Ujr,"poolformer"),Ujr.forEach(t),rQe=r(B5e," \u2014 "),yk=n(B5e,"A",{href:!0});var Jjr=s(yk);tQe=r(Jjr,"PoolFormerConfig"),Jjr.forEach(t),aQe=r(B5e," (PoolFormer model)"),B5e.forEach(t),nQe=i(L),Am=n(L,"LI",{});var P5e=s(Am);poe=n(P5e,"STRONG",{});var Yjr=s(poe);sQe=r(Yjr,"prophetnet"),Yjr.forEach(t),lQe=r(P5e," \u2014 "),Lk=n(P5e,"A",{href:!0});var Kjr=s(Lk);iQe=r(Kjr,"ProphetNetConfig"),Kjr.forEach(t),dQe=r(P5e," (ProphetNet model)"),P5e.forEach(t),cQe=i(L),ym=n(L,"LI",{});var I5e=s(ym);uoe=n(I5e,"STRONG",{});var Zjr=s(uoe);fQe=r(Zjr,"qdqbert"),Zjr.forEach(t),mQe=r(I5e," \u2014 "),xk=n(I5e,"A",{href:!0});var eDr=s(xk);gQe=r(eDr,"QDQBertConfig"),eDr.forEach(t),hQe=r(I5e," (QDQBert model)"),I5e.forEach(t),pQe=i(L),Lm=n(L,"LI",{});var q5e=s(Lm);_oe=n(q5e,"STRONG",{});var oDr=s(_oe);uQe=r(oDr,"rag"),oDr.forEach(t),_Qe=r(q5e," \u2014 "),$k=n(q5e,"A",{href:!0});var rDr=s($k);bQe=r(rDr,"RagConfig"),rDr.forEach(t),vQe=r(q5e," (RAG model)"),q5e.forEach(t),FQe=i(L),xm=n(L,"LI",{});var N5e=s(xm);boe=n(N5e,"STRONG",{});var tDr=s(boe);TQe=r(tDr,"realm"),tDr.forEach(t),MQe=r(N5e," \u2014 "),kk=n(N5e,"A",{href:!0});var aDr=s(kk);EQe=r(aDr,"RealmConfig"),aDr.forEach(t),CQe=r(N5e," (Realm model)"),N5e.forEach(t),wQe=i(L),$m=n(L,"LI",{});var j5e=s($m);voe=n(j5e,"STRONG",{});var nDr=s(voe);AQe=r(nDr,"reformer"),nDr.forEach(t),yQe=r(j5e," \u2014 "),Sk=n(j5e,"A",{href:!0});var sDr=s(Sk);LQe=r(sDr,"ReformerConfig"),sDr.forEach(t),xQe=r(j5e," (Reformer model)"),j5e.forEach(t),$Qe=i(L),km=n(L,"LI",{});var D5e=s(km);Foe=n(D5e,"STRONG",{});var lDr=s(Foe);kQe=r(lDr,"regnet"),lDr.forEach(t),SQe=r(D5e," \u2014 "),Rk=n(D5e,"A",{href:!0});var iDr=s(Rk);RQe=r(iDr,"RegNetConfig"),iDr.forEach(t),BQe=r(D5e," (RegNet model)"),D5e.forEach(t),PQe=i(L),Sm=n(L,"LI",{});var G5e=s(Sm);Toe=n(G5e,"STRONG",{});var dDr=s(Toe);IQe=r(dDr,"rembert"),dDr.forEach(t),qQe=r(G5e," \u2014 "),Bk=n(G5e,"A",{href:!0});var cDr=s(Bk);NQe=r(cDr,"RemBertConfig"),cDr.forEach(t),jQe=r(G5e," (RemBERT model)"),G5e.forEach(t),DQe=i(L),Rm=n(L,"LI",{});var O5e=s(Rm);Moe=n(O5e,"STRONG",{});var fDr=s(Moe);GQe=r(fDr,"resnet"),fDr.forEach(t),OQe=r(O5e," \u2014 "),Pk=n(O5e,"A",{href:!0});var mDr=s(Pk);VQe=r(mDr,"ResNetConfig"),mDr.forEach(t),XQe=r(O5e," (ResNet model)"),O5e.forEach(t),zQe=i(L),Bm=n(L,"LI",{});var V5e=s(Bm);Eoe=n(V5e,"STRONG",{});var gDr=s(Eoe);QQe=r(gDr,"retribert"),gDr.forEach(t),WQe=r(V5e," \u2014 "),Ik=n(V5e,"A",{href:!0});var hDr=s(Ik);HQe=r(hDr,"RetriBertConfig"),hDr.forEach(t),UQe=r(V5e," (RetriBERT model)"),V5e.forEach(t),JQe=i(L),Pm=n(L,"LI",{});var X5e=s(Pm);Coe=n(X5e,"STRONG",{});var pDr=s(Coe);YQe=r(pDr,"roberta"),pDr.forEach(t),KQe=r(X5e," \u2014 "),qk=n(X5e,"A",{href:!0});var uDr=s(qk);ZQe=r(uDr,"RobertaConfig"),uDr.forEach(t),eWe=r(X5e," (RoBERTa model)"),X5e.forEach(t),oWe=i(L),Im=n(L,"LI",{});var z5e=s(Im);woe=n(z5e,"STRONG",{});var _Dr=s(woe);rWe=r(_Dr,"roformer"),_Dr.forEach(t),tWe=r(z5e," \u2014 "),Nk=n(z5e,"A",{href:!0});var bDr=s(Nk);aWe=r(bDr,"RoFormerConfig"),bDr.forEach(t),nWe=r(z5e," (RoFormer model)"),z5e.forEach(t),sWe=i(L),qm=n(L,"LI",{});var Q5e=s(qm);Aoe=n(Q5e,"STRONG",{});var vDr=s(Aoe);lWe=r(vDr,"segformer"),vDr.forEach(t),iWe=r(Q5e," \u2014 "),jk=n(Q5e,"A",{href:!0});var FDr=s(jk);dWe=r(FDr,"SegformerConfig"),FDr.forEach(t),cWe=r(Q5e," (SegFormer model)"),Q5e.forEach(t),fWe=i(L),Nm=n(L,"LI",{});var W5e=s(Nm);yoe=n(W5e,"STRONG",{});var TDr=s(yoe);mWe=r(TDr,"sew"),TDr.forEach(t),gWe=r(W5e," \u2014 "),Dk=n(W5e,"A",{href:!0});var MDr=s(Dk);hWe=r(MDr,"SEWConfig"),MDr.forEach(t),pWe=r(W5e," (SEW model)"),W5e.forEach(t),uWe=i(L),jm=n(L,"LI",{});var H5e=s(jm);Loe=n(H5e,"STRONG",{});var EDr=s(Loe);_We=r(EDr,"sew-d"),EDr.forEach(t),bWe=r(H5e," \u2014 "),Gk=n(H5e,"A",{href:!0});var CDr=s(Gk);vWe=r(CDr,"SEWDConfig"),CDr.forEach(t),FWe=r(H5e," (SEW-D model)"),H5e.forEach(t),TWe=i(L),Dm=n(L,"LI",{});var U5e=s(Dm);xoe=n(U5e,"STRONG",{});var wDr=s(xoe);MWe=r(wDr,"speech-encoder-decoder"),wDr.forEach(t),EWe=r(U5e," \u2014 "),Ok=n(U5e,"A",{href:!0});var ADr=s(Ok);CWe=r(ADr,"SpeechEncoderDecoderConfig"),ADr.forEach(t),wWe=r(U5e," (Speech Encoder decoder model)"),U5e.forEach(t),AWe=i(L),Gm=n(L,"LI",{});var J5e=s(Gm);$oe=n(J5e,"STRONG",{});var yDr=s($oe);yWe=r(yDr,"speech_to_text"),yDr.forEach(t),LWe=r(J5e," \u2014 "),Vk=n(J5e,"A",{href:!0});var LDr=s(Vk);xWe=r(LDr,"Speech2TextConfig"),LDr.forEach(t),$We=r(J5e," (Speech2Text model)"),J5e.forEach(t),kWe=i(L),Om=n(L,"LI",{});var Y5e=s(Om);koe=n(Y5e,"STRONG",{});var xDr=s(koe);SWe=r(xDr,"speech_to_text_2"),xDr.forEach(t),RWe=r(Y5e," \u2014 "),Xk=n(Y5e,"A",{href:!0});var $Dr=s(Xk);BWe=r($Dr,"Speech2Text2Config"),$Dr.forEach(t),PWe=r(Y5e," (Speech2Text2 model)"),Y5e.forEach(t),IWe=i(L),Vm=n(L,"LI",{});var K5e=s(Vm);Soe=n(K5e,"STRONG",{});var kDr=s(Soe);qWe=r(kDr,"splinter"),kDr.forEach(t),NWe=r(K5e," \u2014 "),zk=n(K5e,"A",{href:!0});var SDr=s(zk);jWe=r(SDr,"SplinterConfig"),SDr.forEach(t),DWe=r(K5e," (Splinter model)"),K5e.forEach(t),GWe=i(L),Xm=n(L,"LI",{});var Z5e=s(Xm);Roe=n(Z5e,"STRONG",{});var RDr=s(Roe);OWe=r(RDr,"squeezebert"),RDr.forEach(t),VWe=r(Z5e," \u2014 "),Qk=n(Z5e,"A",{href:!0});var BDr=s(Qk);XWe=r(BDr,"SqueezeBertConfig"),BDr.forEach(t),zWe=r(Z5e," (SqueezeBERT model)"),Z5e.forEach(t),QWe=i(L),zm=n(L,"LI",{});var eCe=s(zm);Boe=n(eCe,"STRONG",{});var PDr=s(Boe);WWe=r(PDr,"swin"),PDr.forEach(t),HWe=r(eCe," \u2014 "),Wk=n(eCe,"A",{href:!0});var IDr=s(Wk);UWe=r(IDr,"SwinConfig"),IDr.forEach(t),JWe=r(eCe," (Swin model)"),eCe.forEach(t),YWe=i(L),Qm=n(L,"LI",{});var oCe=s(Qm);Poe=n(oCe,"STRONG",{});var qDr=s(Poe);KWe=r(qDr,"t5"),qDr.forEach(t),ZWe=r(oCe," \u2014 "),Hk=n(oCe,"A",{href:!0});var NDr=s(Hk);eHe=r(NDr,"T5Config"),NDr.forEach(t),oHe=r(oCe," (T5 model)"),oCe.forEach(t),rHe=i(L),Wm=n(L,"LI",{});var rCe=s(Wm);Ioe=n(rCe,"STRONG",{});var jDr=s(Ioe);tHe=r(jDr,"tapas"),jDr.forEach(t),aHe=r(rCe," \u2014 "),Uk=n(rCe,"A",{href:!0});var DDr=s(Uk);nHe=r(DDr,"TapasConfig"),DDr.forEach(t),sHe=r(rCe," (TAPAS model)"),rCe.forEach(t),lHe=i(L),Hm=n(L,"LI",{});var tCe=s(Hm);qoe=n(tCe,"STRONG",{});var GDr=s(qoe);iHe=r(GDr,"transfo-xl"),GDr.forEach(t),dHe=r(tCe," \u2014 "),Jk=n(tCe,"A",{href:!0});var ODr=s(Jk);cHe=r(ODr,"TransfoXLConfig"),ODr.forEach(t),fHe=r(tCe," (Transformer-XL model)"),tCe.forEach(t),mHe=i(L),Um=n(L,"LI",{});var aCe=s(Um);Noe=n(aCe,"STRONG",{});var VDr=s(Noe);gHe=r(VDr,"trocr"),VDr.forEach(t),hHe=r(aCe," \u2014 "),Yk=n(aCe,"A",{href:!0});var XDr=s(Yk);pHe=r(XDr,"TrOCRConfig"),XDr.forEach(t),uHe=r(aCe," (TrOCR model)"),aCe.forEach(t),_He=i(L),Jm=n(L,"LI",{});var nCe=s(Jm);joe=n(nCe,"STRONG",{});var zDr=s(joe);bHe=r(zDr,"unispeech"),zDr.forEach(t),vHe=r(nCe," \u2014 "),Kk=n(nCe,"A",{href:!0});var QDr=s(Kk);FHe=r(QDr,"UniSpeechConfig"),QDr.forEach(t),THe=r(nCe," (UniSpeech model)"),nCe.forEach(t),MHe=i(L),Ym=n(L,"LI",{});var sCe=s(Ym);Doe=n(sCe,"STRONG",{});var WDr=s(Doe);EHe=r(WDr,"unispeech-sat"),WDr.forEach(t),CHe=r(sCe," \u2014 "),Zk=n(sCe,"A",{href:!0});var HDr=s(Zk);wHe=r(HDr,"UniSpeechSatConfig"),HDr.forEach(t),AHe=r(sCe," (UniSpeechSat model)"),sCe.forEach(t),yHe=i(L),Km=n(L,"LI",{});var lCe=s(Km);Goe=n(lCe,"STRONG",{});var UDr=s(Goe);LHe=r(UDr,"van"),UDr.forEach(t),xHe=r(lCe," \u2014 "),eS=n(lCe,"A",{href:!0});var JDr=s(eS);$He=r(JDr,"VanConfig"),JDr.forEach(t),kHe=r(lCe," (VAN model)"),lCe.forEach(t),SHe=i(L),Zm=n(L,"LI",{});var iCe=s(Zm);Ooe=n(iCe,"STRONG",{});var YDr=s(Ooe);RHe=r(YDr,"vilt"),YDr.forEach(t),BHe=r(iCe," \u2014 "),oS=n(iCe,"A",{href:!0});var KDr=s(oS);PHe=r(KDr,"ViltConfig"),KDr.forEach(t),IHe=r(iCe," (ViLT model)"),iCe.forEach(t),qHe=i(L),eg=n(L,"LI",{});var dCe=s(eg);Voe=n(dCe,"STRONG",{});var ZDr=s(Voe);NHe=r(ZDr,"vision-encoder-decoder"),ZDr.forEach(t),jHe=r(dCe," \u2014 "),rS=n(dCe,"A",{href:!0});var eGr=s(rS);DHe=r(eGr,"VisionEncoderDecoderConfig"),eGr.forEach(t),GHe=r(dCe," (Vision Encoder decoder model)"),dCe.forEach(t),OHe=i(L),og=n(L,"LI",{});var cCe=s(og);Xoe=n(cCe,"STRONG",{});var oGr=s(Xoe);VHe=r(oGr,"vision-text-dual-encoder"),oGr.forEach(t),XHe=r(cCe," \u2014 "),tS=n(cCe,"A",{href:!0});var rGr=s(tS);zHe=r(rGr,"VisionTextDualEncoderConfig"),rGr.forEach(t),QHe=r(cCe," (VisionTextDualEncoder model)"),cCe.forEach(t),WHe=i(L),rg=n(L,"LI",{});var fCe=s(rg);zoe=n(fCe,"STRONG",{});var tGr=s(zoe);HHe=r(tGr,"visual_bert"),tGr.forEach(t),UHe=r(fCe," \u2014 "),aS=n(fCe,"A",{href:!0});var aGr=s(aS);JHe=r(aGr,"VisualBertConfig"),aGr.forEach(t),YHe=r(fCe," (VisualBert model)"),fCe.forEach(t),KHe=i(L),tg=n(L,"LI",{});var mCe=s(tg);Qoe=n(mCe,"STRONG",{});var nGr=s(Qoe);ZHe=r(nGr,"vit"),nGr.forEach(t),eUe=r(mCe," \u2014 "),nS=n(mCe,"A",{href:!0});var sGr=s(nS);oUe=r(sGr,"ViTConfig"),sGr.forEach(t),rUe=r(mCe," (ViT model)"),mCe.forEach(t),tUe=i(L),ag=n(L,"LI",{});var gCe=s(ag);Woe=n(gCe,"STRONG",{});var lGr=s(Woe);aUe=r(lGr,"vit_mae"),lGr.forEach(t),nUe=r(gCe," \u2014 "),sS=n(gCe,"A",{href:!0});var iGr=s(sS);sUe=r(iGr,"ViTMAEConfig"),iGr.forEach(t),lUe=r(gCe," (ViTMAE model)"),gCe.forEach(t),iUe=i(L),ng=n(L,"LI",{});var hCe=s(ng);Hoe=n(hCe,"STRONG",{});var dGr=s(Hoe);dUe=r(dGr,"wav2vec2"),dGr.forEach(t),cUe=r(hCe," \u2014 "),lS=n(hCe,"A",{href:!0});var cGr=s(lS);fUe=r(cGr,"Wav2Vec2Config"),cGr.forEach(t),mUe=r(hCe," (Wav2Vec2 model)"),hCe.forEach(t),gUe=i(L),sg=n(L,"LI",{});var pCe=s(sg);Uoe=n(pCe,"STRONG",{});var fGr=s(Uoe);hUe=r(fGr,"wavlm"),fGr.forEach(t),pUe=r(pCe," \u2014 "),iS=n(pCe,"A",{href:!0});var mGr=s(iS);uUe=r(mGr,"WavLMConfig"),mGr.forEach(t),_Ue=r(pCe," (WavLM model)"),pCe.forEach(t),bUe=i(L),lg=n(L,"LI",{});var uCe=s(lg);Joe=n(uCe,"STRONG",{});var gGr=s(Joe);vUe=r(gGr,"xglm"),gGr.forEach(t),FUe=r(uCe," \u2014 "),dS=n(uCe,"A",{href:!0});var hGr=s(dS);TUe=r(hGr,"XGLMConfig"),hGr.forEach(t),MUe=r(uCe," (XGLM model)"),uCe.forEach(t),EUe=i(L),ig=n(L,"LI",{});var _Ce=s(ig);Yoe=n(_Ce,"STRONG",{});var pGr=s(Yoe);CUe=r(pGr,"xlm"),pGr.forEach(t),wUe=r(_Ce," \u2014 "),cS=n(_Ce,"A",{href:!0});var uGr=s(cS);AUe=r(uGr,"XLMConfig"),uGr.forEach(t),yUe=r(_Ce," (XLM model)"),_Ce.forEach(t),LUe=i(L),dg=n(L,"LI",{});var bCe=s(dg);Koe=n(bCe,"STRONG",{});var _Gr=s(Koe);xUe=r(_Gr,"xlm-prophetnet"),_Gr.forEach(t),$Ue=r(bCe," \u2014 "),fS=n(bCe,"A",{href:!0});var bGr=s(fS);kUe=r(bGr,"XLMProphetNetConfig"),bGr.forEach(t),SUe=r(bCe," (XLMProphetNet model)"),bCe.forEach(t),RUe=i(L),cg=n(L,"LI",{});var vCe=s(cg);Zoe=n(vCe,"STRONG",{});var vGr=s(Zoe);BUe=r(vGr,"xlm-roberta"),vGr.forEach(t),PUe=r(vCe," \u2014 "),mS=n(vCe,"A",{href:!0});var FGr=s(mS);IUe=r(FGr,"XLMRobertaConfig"),FGr.forEach(t),qUe=r(vCe," (XLM-RoBERTa model)"),vCe.forEach(t),NUe=i(L),fg=n(L,"LI",{});var FCe=s(fg);ere=n(FCe,"STRONG",{});var TGr=s(ere);jUe=r(TGr,"xlm-roberta-xl"),TGr.forEach(t),DUe=r(FCe," \u2014 "),gS=n(FCe,"A",{href:!0});var MGr=s(gS);GUe=r(MGr,"XLMRobertaXLConfig"),MGr.forEach(t),OUe=r(FCe," (XLM-RoBERTa-XL model)"),FCe.forEach(t),VUe=i(L),mg=n(L,"LI",{});var TCe=s(mg);ore=n(TCe,"STRONG",{});var EGr=s(ore);XUe=r(EGr,"xlnet"),EGr.forEach(t),zUe=r(TCe," \u2014 "),hS=n(TCe,"A",{href:!0});var CGr=s(hS);QUe=r(CGr,"XLNetConfig"),CGr.forEach(t),WUe=r(TCe," (XLNet model)"),TCe.forEach(t),HUe=i(L),gg=n(L,"LI",{});var MCe=s(gg);rre=n(MCe,"STRONG",{});var wGr=s(rre);UUe=r(wGr,"yolos"),wGr.forEach(t),JUe=r(MCe," \u2014 "),pS=n(MCe,"A",{href:!0});var AGr=s(pS);YUe=r(AGr,"YolosConfig"),AGr.forEach(t),KUe=r(MCe," (YOLOS model)"),MCe.forEach(t),ZUe=i(L),hg=n(L,"LI",{});var ECe=s(hg);tre=n(ECe,"STRONG",{});var yGr=s(tre);eJe=r(yGr,"yoso"),yGr.forEach(t),oJe=r(ECe," \u2014 "),uS=n(ECe,"A",{href:!0});var LGr=s(uS);rJe=r(LGr,"YosoConfig"),LGr.forEach(t),tJe=r(ECe," (YOSO model)"),ECe.forEach(t),L.forEach(t),aJe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),nJe=i(Kr),ug=n(Kr,"DIV",{class:!0});var Vqe=s(ug);T(a6.$$.fragment,Vqe),sJe=i(Vqe),are=n(Vqe,"P",{});var xGr=s(are);lJe=r(xGr,"Register a new configuration for this class."),xGr.forEach(t),Vqe.forEach(t),Kr.forEach(t),QPe=i(f),bi=n(f,"H2",{class:!0});var Xqe=s(bi);_g=n(Xqe,"A",{id:!0,class:!0,href:!0});var $Gr=s(_g);nre=n($Gr,"SPAN",{});var kGr=s(nre);T(n6.$$.fragment,kGr),kGr.forEach(t),$Gr.forEach(t),iJe=i(Xqe),sre=n(Xqe,"SPAN",{});var SGr=s(sre);dJe=r(SGr,"AutoTokenizer"),SGr.forEach(t),Xqe.forEach(t),WPe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(s6.$$.fragment,Is),cJe=i(Is),l6=n(Is,"P",{});var zqe=s(l6);fJe=r(zqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),_S=n(zqe,"A",{href:!0});var RGr=s(_S);mJe=r(RGr,"AutoTokenizer.from_pretrained()"),RGr.forEach(t),gJe=r(zqe," class method."),zqe.forEach(t),hJe=i(Is),i6=n(Is,"P",{});var Qqe=s(i6);pJe=r(Qqe,"This class cannot be instantiated directly using "),lre=n(Qqe,"CODE",{});var BGr=s(lre);uJe=r(BGr,"__init__()"),BGr.forEach(t),_Je=r(Qqe," (throws an error)."),Qqe.forEach(t),bJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(d6.$$.fragment,qs),vJe=i(qs),ire=n(qs,"P",{});var PGr=s(ire);FJe=r(PGr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),PGr.forEach(t),TJe=i(qs),Ca=n(qs,"P",{});var Y3=s(Ca);MJe=r(Y3,"The tokenizer class to instantiate is selected based on the "),dre=n(Y3,"CODE",{});var IGr=s(dre);EJe=r(IGr,"model_type"),IGr.forEach(t),CJe=r(Y3,` property of the config object (either
passed as an argument or loaded from `),cre=n(Y3,"CODE",{});var qGr=s(cre);wJe=r(qGr,"pretrained_model_name_or_path"),qGr.forEach(t),AJe=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fre=n(Y3,"CODE",{});var NGr=s(fre);yJe=r(NGr,"pretrained_model_name_or_path"),NGr.forEach(t),LJe=r(Y3,":"),Y3.forEach(t),xJe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var cx=s(Sn);mre=n(cx,"STRONG",{});var jGr=s(mre);$Je=r(jGr,"albert"),jGr.forEach(t),kJe=r(cx," \u2014 "),bS=n(cx,"A",{href:!0});var DGr=s(bS);SJe=r(DGr,"AlbertTokenizer"),DGr.forEach(t),RJe=r(cx," or "),vS=n(cx,"A",{href:!0});var GGr=s(vS);BJe=r(GGr,"AlbertTokenizerFast"),GGr.forEach(t),PJe=r(cx," (ALBERT model)"),cx.forEach(t),IJe=i(S),Rn=n(S,"LI",{});var fx=s(Rn);gre=n(fx,"STRONG",{});var OGr=s(gre);qJe=r(OGr,"bart"),OGr.forEach(t),NJe=r(fx," \u2014 "),FS=n(fx,"A",{href:!0});var VGr=s(FS);jJe=r(VGr,"BartTokenizer"),VGr.forEach(t),DJe=r(fx," or "),TS=n(fx,"A",{href:!0});var XGr=s(TS);GJe=r(XGr,"BartTokenizerFast"),XGr.forEach(t),OJe=r(fx," (BART model)"),fx.forEach(t),VJe=i(S),Bn=n(S,"LI",{});var mx=s(Bn);hre=n(mx,"STRONG",{});var zGr=s(hre);XJe=r(zGr,"barthez"),zGr.forEach(t),zJe=r(mx," \u2014 "),MS=n(mx,"A",{href:!0});var QGr=s(MS);QJe=r(QGr,"BarthezTokenizer"),QGr.forEach(t),WJe=r(mx," or "),ES=n(mx,"A",{href:!0});var WGr=s(ES);HJe=r(WGr,"BarthezTokenizerFast"),WGr.forEach(t),UJe=r(mx," (BARThez model)"),mx.forEach(t),JJe=i(S),bg=n(S,"LI",{});var CCe=s(bg);pre=n(CCe,"STRONG",{});var HGr=s(pre);YJe=r(HGr,"bartpho"),HGr.forEach(t),KJe=r(CCe," \u2014 "),CS=n(CCe,"A",{href:!0});var UGr=s(CS);ZJe=r(UGr,"BartphoTokenizer"),UGr.forEach(t),eYe=r(CCe," (BARTpho model)"),CCe.forEach(t),oYe=i(S),Pn=n(S,"LI",{});var gx=s(Pn);ure=n(gx,"STRONG",{});var JGr=s(ure);rYe=r(JGr,"bert"),JGr.forEach(t),tYe=r(gx," \u2014 "),wS=n(gx,"A",{href:!0});var YGr=s(wS);aYe=r(YGr,"BertTokenizer"),YGr.forEach(t),nYe=r(gx," or "),AS=n(gx,"A",{href:!0});var KGr=s(AS);sYe=r(KGr,"BertTokenizerFast"),KGr.forEach(t),lYe=r(gx," (BERT model)"),gx.forEach(t),iYe=i(S),vg=n(S,"LI",{});var wCe=s(vg);_re=n(wCe,"STRONG",{});var ZGr=s(_re);dYe=r(ZGr,"bert-generation"),ZGr.forEach(t),cYe=r(wCe," \u2014 "),yS=n(wCe,"A",{href:!0});var eOr=s(yS);fYe=r(eOr,"BertGenerationTokenizer"),eOr.forEach(t),mYe=r(wCe," (Bert Generation model)"),wCe.forEach(t),gYe=i(S),Fg=n(S,"LI",{});var ACe=s(Fg);bre=n(ACe,"STRONG",{});var oOr=s(bre);hYe=r(oOr,"bert-japanese"),oOr.forEach(t),pYe=r(ACe," \u2014 "),LS=n(ACe,"A",{href:!0});var rOr=s(LS);uYe=r(rOr,"BertJapaneseTokenizer"),rOr.forEach(t),_Ye=r(ACe," (BertJapanese model)"),ACe.forEach(t),bYe=i(S),Tg=n(S,"LI",{});var yCe=s(Tg);vre=n(yCe,"STRONG",{});var tOr=s(vre);vYe=r(tOr,"bertweet"),tOr.forEach(t),FYe=r(yCe," \u2014 "),xS=n(yCe,"A",{href:!0});var aOr=s(xS);TYe=r(aOr,"BertweetTokenizer"),aOr.forEach(t),MYe=r(yCe," (Bertweet model)"),yCe.forEach(t),EYe=i(S),In=n(S,"LI",{});var hx=s(In);Fre=n(hx,"STRONG",{});var nOr=s(Fre);CYe=r(nOr,"big_bird"),nOr.forEach(t),wYe=r(hx," \u2014 "),$S=n(hx,"A",{href:!0});var sOr=s($S);AYe=r(sOr,"BigBirdTokenizer"),sOr.forEach(t),yYe=r(hx," or "),kS=n(hx,"A",{href:!0});var lOr=s(kS);LYe=r(lOr,"BigBirdTokenizerFast"),lOr.forEach(t),xYe=r(hx," (BigBird model)"),hx.forEach(t),$Ye=i(S),qn=n(S,"LI",{});var px=s(qn);Tre=n(px,"STRONG",{});var iOr=s(Tre);kYe=r(iOr,"bigbird_pegasus"),iOr.forEach(t),SYe=r(px," \u2014 "),SS=n(px,"A",{href:!0});var dOr=s(SS);RYe=r(dOr,"PegasusTokenizer"),dOr.forEach(t),BYe=r(px," or "),RS=n(px,"A",{href:!0});var cOr=s(RS);PYe=r(cOr,"PegasusTokenizerFast"),cOr.forEach(t),IYe=r(px," (BigBirdPegasus model)"),px.forEach(t),qYe=i(S),Nn=n(S,"LI",{});var ux=s(Nn);Mre=n(ux,"STRONG",{});var fOr=s(Mre);NYe=r(fOr,"blenderbot"),fOr.forEach(t),jYe=r(ux," \u2014 "),BS=n(ux,"A",{href:!0});var mOr=s(BS);DYe=r(mOr,"BlenderbotTokenizer"),mOr.forEach(t),GYe=r(ux," or "),PS=n(ux,"A",{href:!0});var gOr=s(PS);OYe=r(gOr,"BlenderbotTokenizerFast"),gOr.forEach(t),VYe=r(ux," (Blenderbot model)"),ux.forEach(t),XYe=i(S),Mg=n(S,"LI",{});var LCe=s(Mg);Ere=n(LCe,"STRONG",{});var hOr=s(Ere);zYe=r(hOr,"blenderbot-small"),hOr.forEach(t),QYe=r(LCe," \u2014 "),IS=n(LCe,"A",{href:!0});var pOr=s(IS);WYe=r(pOr,"BlenderbotSmallTokenizer"),pOr.forEach(t),HYe=r(LCe," (BlenderbotSmall model)"),LCe.forEach(t),UYe=i(S),Eg=n(S,"LI",{});var xCe=s(Eg);Cre=n(xCe,"STRONG",{});var uOr=s(Cre);JYe=r(uOr,"byt5"),uOr.forEach(t),YYe=r(xCe," \u2014 "),qS=n(xCe,"A",{href:!0});var _Or=s(qS);KYe=r(_Or,"ByT5Tokenizer"),_Or.forEach(t),ZYe=r(xCe," (ByT5 model)"),xCe.forEach(t),eKe=i(S),jn=n(S,"LI",{});var _x=s(jn);wre=n(_x,"STRONG",{});var bOr=s(wre);oKe=r(bOr,"camembert"),bOr.forEach(t),rKe=r(_x," \u2014 "),NS=n(_x,"A",{href:!0});var vOr=s(NS);tKe=r(vOr,"CamembertTokenizer"),vOr.forEach(t),aKe=r(_x," or "),jS=n(_x,"A",{href:!0});var FOr=s(jS);nKe=r(FOr,"CamembertTokenizerFast"),FOr.forEach(t),sKe=r(_x," (CamemBERT model)"),_x.forEach(t),lKe=i(S),Cg=n(S,"LI",{});var $Ce=s(Cg);Are=n($Ce,"STRONG",{});var TOr=s(Are);iKe=r(TOr,"canine"),TOr.forEach(t),dKe=r($Ce," \u2014 "),DS=n($Ce,"A",{href:!0});var MOr=s(DS);cKe=r(MOr,"CanineTokenizer"),MOr.forEach(t),fKe=r($Ce," (Canine model)"),$Ce.forEach(t),mKe=i(S),Dn=n(S,"LI",{});var bx=s(Dn);yre=n(bx,"STRONG",{});var EOr=s(yre);gKe=r(EOr,"clip"),EOr.forEach(t),hKe=r(bx," \u2014 "),GS=n(bx,"A",{href:!0});var COr=s(GS);pKe=r(COr,"CLIPTokenizer"),COr.forEach(t),uKe=r(bx," or "),OS=n(bx,"A",{href:!0});var wOr=s(OS);_Ke=r(wOr,"CLIPTokenizerFast"),wOr.forEach(t),bKe=r(bx," (CLIP model)"),bx.forEach(t),vKe=i(S),Gn=n(S,"LI",{});var vx=s(Gn);Lre=n(vx,"STRONG",{});var AOr=s(Lre);FKe=r(AOr,"convbert"),AOr.forEach(t),TKe=r(vx," \u2014 "),VS=n(vx,"A",{href:!0});var yOr=s(VS);MKe=r(yOr,"ConvBertTokenizer"),yOr.forEach(t),EKe=r(vx," or "),XS=n(vx,"A",{href:!0});var LOr=s(XS);CKe=r(LOr,"ConvBertTokenizerFast"),LOr.forEach(t),wKe=r(vx," (ConvBERT model)"),vx.forEach(t),AKe=i(S),On=n(S,"LI",{});var Fx=s(On);xre=n(Fx,"STRONG",{});var xOr=s(xre);yKe=r(xOr,"cpm"),xOr.forEach(t),LKe=r(Fx," \u2014 "),zS=n(Fx,"A",{href:!0});var $Or=s(zS);xKe=r($Or,"CpmTokenizer"),$Or.forEach(t),$Ke=r(Fx," or "),QS=n(Fx,"A",{href:!0});var kOr=s(QS);kKe=r(kOr,"CpmTokenizerFast"),kOr.forEach(t),SKe=r(Fx," (CPM model)"),Fx.forEach(t),RKe=i(S),wg=n(S,"LI",{});var kCe=s(wg);$re=n(kCe,"STRONG",{});var SOr=s($re);BKe=r(SOr,"ctrl"),SOr.forEach(t),PKe=r(kCe," \u2014 "),WS=n(kCe,"A",{href:!0});var ROr=s(WS);IKe=r(ROr,"CTRLTokenizer"),ROr.forEach(t),qKe=r(kCe," (CTRL model)"),kCe.forEach(t),NKe=i(S),Vn=n(S,"LI",{});var Tx=s(Vn);kre=n(Tx,"STRONG",{});var BOr=s(kre);jKe=r(BOr,"data2vec-text"),BOr.forEach(t),DKe=r(Tx," \u2014 "),HS=n(Tx,"A",{href:!0});var POr=s(HS);GKe=r(POr,"RobertaTokenizer"),POr.forEach(t),OKe=r(Tx," or "),US=n(Tx,"A",{href:!0});var IOr=s(US);VKe=r(IOr,"RobertaTokenizerFast"),IOr.forEach(t),XKe=r(Tx," (Data2VecText model)"),Tx.forEach(t),zKe=i(S),Xn=n(S,"LI",{});var Mx=s(Xn);Sre=n(Mx,"STRONG",{});var qOr=s(Sre);QKe=r(qOr,"deberta"),qOr.forEach(t),WKe=r(Mx," \u2014 "),JS=n(Mx,"A",{href:!0});var NOr=s(JS);HKe=r(NOr,"DebertaTokenizer"),NOr.forEach(t),UKe=r(Mx," or "),YS=n(Mx,"A",{href:!0});var jOr=s(YS);JKe=r(jOr,"DebertaTokenizerFast"),jOr.forEach(t),YKe=r(Mx," (DeBERTa model)"),Mx.forEach(t),KKe=i(S),zn=n(S,"LI",{});var Ex=s(zn);Rre=n(Ex,"STRONG",{});var DOr=s(Rre);ZKe=r(DOr,"deberta-v2"),DOr.forEach(t),eZe=r(Ex," \u2014 "),KS=n(Ex,"A",{href:!0});var GOr=s(KS);oZe=r(GOr,"DebertaV2Tokenizer"),GOr.forEach(t),rZe=r(Ex," or "),ZS=n(Ex,"A",{href:!0});var OOr=s(ZS);tZe=r(OOr,"DebertaV2TokenizerFast"),OOr.forEach(t),aZe=r(Ex," (DeBERTa-v2 model)"),Ex.forEach(t),nZe=i(S),Qn=n(S,"LI",{});var Cx=s(Qn);Bre=n(Cx,"STRONG",{});var VOr=s(Bre);sZe=r(VOr,"distilbert"),VOr.forEach(t),lZe=r(Cx," \u2014 "),eR=n(Cx,"A",{href:!0});var XOr=s(eR);iZe=r(XOr,"DistilBertTokenizer"),XOr.forEach(t),dZe=r(Cx," or "),oR=n(Cx,"A",{href:!0});var zOr=s(oR);cZe=r(zOr,"DistilBertTokenizerFast"),zOr.forEach(t),fZe=r(Cx," (DistilBERT model)"),Cx.forEach(t),mZe=i(S),Wn=n(S,"LI",{});var wx=s(Wn);Pre=n(wx,"STRONG",{});var QOr=s(Pre);gZe=r(QOr,"dpr"),QOr.forEach(t),hZe=r(wx," \u2014 "),rR=n(wx,"A",{href:!0});var WOr=s(rR);pZe=r(WOr,"DPRQuestionEncoderTokenizer"),WOr.forEach(t),uZe=r(wx," or "),tR=n(wx,"A",{href:!0});var HOr=s(tR);_Ze=r(HOr,"DPRQuestionEncoderTokenizerFast"),HOr.forEach(t),bZe=r(wx," (DPR model)"),wx.forEach(t),vZe=i(S),Hn=n(S,"LI",{});var Ax=s(Hn);Ire=n(Ax,"STRONG",{});var UOr=s(Ire);FZe=r(UOr,"electra"),UOr.forEach(t),TZe=r(Ax," \u2014 "),aR=n(Ax,"A",{href:!0});var JOr=s(aR);MZe=r(JOr,"ElectraTokenizer"),JOr.forEach(t),EZe=r(Ax," or "),nR=n(Ax,"A",{href:!0});var YOr=s(nR);CZe=r(YOr,"ElectraTokenizerFast"),YOr.forEach(t),wZe=r(Ax," (ELECTRA model)"),Ax.forEach(t),AZe=i(S),Ag=n(S,"LI",{});var SCe=s(Ag);qre=n(SCe,"STRONG",{});var KOr=s(qre);yZe=r(KOr,"flaubert"),KOr.forEach(t),LZe=r(SCe," \u2014 "),sR=n(SCe,"A",{href:!0});var ZOr=s(sR);xZe=r(ZOr,"FlaubertTokenizer"),ZOr.forEach(t),$Ze=r(SCe," (FlauBERT model)"),SCe.forEach(t),kZe=i(S),Un=n(S,"LI",{});var yx=s(Un);Nre=n(yx,"STRONG",{});var eVr=s(Nre);SZe=r(eVr,"fnet"),eVr.forEach(t),RZe=r(yx," \u2014 "),lR=n(yx,"A",{href:!0});var oVr=s(lR);BZe=r(oVr,"FNetTokenizer"),oVr.forEach(t),PZe=r(yx," or "),iR=n(yx,"A",{href:!0});var rVr=s(iR);IZe=r(rVr,"FNetTokenizerFast"),rVr.forEach(t),qZe=r(yx," (FNet model)"),yx.forEach(t),NZe=i(S),yg=n(S,"LI",{});var RCe=s(yg);jre=n(RCe,"STRONG",{});var tVr=s(jre);jZe=r(tVr,"fsmt"),tVr.forEach(t),DZe=r(RCe," \u2014 "),dR=n(RCe,"A",{href:!0});var aVr=s(dR);GZe=r(aVr,"FSMTTokenizer"),aVr.forEach(t),OZe=r(RCe," (FairSeq Machine-Translation model)"),RCe.forEach(t),VZe=i(S),Jn=n(S,"LI",{});var Lx=s(Jn);Dre=n(Lx,"STRONG",{});var nVr=s(Dre);XZe=r(nVr,"funnel"),nVr.forEach(t),zZe=r(Lx," \u2014 "),cR=n(Lx,"A",{href:!0});var sVr=s(cR);QZe=r(sVr,"FunnelTokenizer"),sVr.forEach(t),WZe=r(Lx," or "),fR=n(Lx,"A",{href:!0});var lVr=s(fR);HZe=r(lVr,"FunnelTokenizerFast"),lVr.forEach(t),UZe=r(Lx," (Funnel Transformer model)"),Lx.forEach(t),JZe=i(S),Yn=n(S,"LI",{});var xx=s(Yn);Gre=n(xx,"STRONG",{});var iVr=s(Gre);YZe=r(iVr,"gpt2"),iVr.forEach(t),KZe=r(xx," \u2014 "),mR=n(xx,"A",{href:!0});var dVr=s(mR);ZZe=r(dVr,"GPT2Tokenizer"),dVr.forEach(t),eeo=r(xx," or "),gR=n(xx,"A",{href:!0});var cVr=s(gR);oeo=r(cVr,"GPT2TokenizerFast"),cVr.forEach(t),reo=r(xx," (OpenAI GPT-2 model)"),xx.forEach(t),teo=i(S),Kn=n(S,"LI",{});var $x=s(Kn);Ore=n($x,"STRONG",{});var fVr=s(Ore);aeo=r(fVr,"gpt_neo"),fVr.forEach(t),neo=r($x," \u2014 "),hR=n($x,"A",{href:!0});var mVr=s(hR);seo=r(mVr,"GPT2Tokenizer"),mVr.forEach(t),leo=r($x," or "),pR=n($x,"A",{href:!0});var gVr=s(pR);ieo=r(gVr,"GPT2TokenizerFast"),gVr.forEach(t),deo=r($x," (GPT Neo model)"),$x.forEach(t),ceo=i(S),Zn=n(S,"LI",{});var kx=s(Zn);Vre=n(kx,"STRONG",{});var hVr=s(Vre);feo=r(hVr,"gptj"),hVr.forEach(t),meo=r(kx," \u2014 "),uR=n(kx,"A",{href:!0});var pVr=s(uR);geo=r(pVr,"GPT2Tokenizer"),pVr.forEach(t),heo=r(kx," or "),_R=n(kx,"A",{href:!0});var uVr=s(_R);peo=r(uVr,"GPT2TokenizerFast"),uVr.forEach(t),ueo=r(kx," (GPT-J model)"),kx.forEach(t),_eo=i(S),es=n(S,"LI",{});var Sx=s(es);Xre=n(Sx,"STRONG",{});var _Vr=s(Xre);beo=r(_Vr,"herbert"),_Vr.forEach(t),veo=r(Sx," \u2014 "),bR=n(Sx,"A",{href:!0});var bVr=s(bR);Feo=r(bVr,"HerbertTokenizer"),bVr.forEach(t),Teo=r(Sx," or "),vR=n(Sx,"A",{href:!0});var vVr=s(vR);Meo=r(vVr,"HerbertTokenizerFast"),vVr.forEach(t),Eeo=r(Sx," (HerBERT model)"),Sx.forEach(t),Ceo=i(S),Lg=n(S,"LI",{});var BCe=s(Lg);zre=n(BCe,"STRONG",{});var FVr=s(zre);weo=r(FVr,"hubert"),FVr.forEach(t),Aeo=r(BCe," \u2014 "),FR=n(BCe,"A",{href:!0});var TVr=s(FR);yeo=r(TVr,"Wav2Vec2CTCTokenizer"),TVr.forEach(t),Leo=r(BCe," (Hubert model)"),BCe.forEach(t),xeo=i(S),os=n(S,"LI",{});var Rx=s(os);Qre=n(Rx,"STRONG",{});var MVr=s(Qre);$eo=r(MVr,"ibert"),MVr.forEach(t),keo=r(Rx," \u2014 "),TR=n(Rx,"A",{href:!0});var EVr=s(TR);Seo=r(EVr,"RobertaTokenizer"),EVr.forEach(t),Reo=r(Rx," or "),MR=n(Rx,"A",{href:!0});var CVr=s(MR);Beo=r(CVr,"RobertaTokenizerFast"),CVr.forEach(t),Peo=r(Rx," (I-BERT model)"),Rx.forEach(t),Ieo=i(S),rs=n(S,"LI",{});var Bx=s(rs);Wre=n(Bx,"STRONG",{});var wVr=s(Wre);qeo=r(wVr,"layoutlm"),wVr.forEach(t),Neo=r(Bx," \u2014 "),ER=n(Bx,"A",{href:!0});var AVr=s(ER);jeo=r(AVr,"LayoutLMTokenizer"),AVr.forEach(t),Deo=r(Bx," or "),CR=n(Bx,"A",{href:!0});var yVr=s(CR);Geo=r(yVr,"LayoutLMTokenizerFast"),yVr.forEach(t),Oeo=r(Bx," (LayoutLM model)"),Bx.forEach(t),Veo=i(S),ts=n(S,"LI",{});var Px=s(ts);Hre=n(Px,"STRONG",{});var LVr=s(Hre);Xeo=r(LVr,"layoutlmv2"),LVr.forEach(t),zeo=r(Px," \u2014 "),wR=n(Px,"A",{href:!0});var xVr=s(wR);Qeo=r(xVr,"LayoutLMv2Tokenizer"),xVr.forEach(t),Weo=r(Px," or "),AR=n(Px,"A",{href:!0});var $Vr=s(AR);Heo=r($Vr,"LayoutLMv2TokenizerFast"),$Vr.forEach(t),Ueo=r(Px," (LayoutLMv2 model)"),Px.forEach(t),Jeo=i(S),as=n(S,"LI",{});var Ix=s(as);Ure=n(Ix,"STRONG",{});var kVr=s(Ure);Yeo=r(kVr,"layoutxlm"),kVr.forEach(t),Keo=r(Ix," \u2014 "),yR=n(Ix,"A",{href:!0});var SVr=s(yR);Zeo=r(SVr,"LayoutXLMTokenizer"),SVr.forEach(t),eoo=r(Ix," or "),LR=n(Ix,"A",{href:!0});var RVr=s(LR);ooo=r(RVr,"LayoutXLMTokenizerFast"),RVr.forEach(t),roo=r(Ix," (LayoutXLM model)"),Ix.forEach(t),too=i(S),ns=n(S,"LI",{});var qx=s(ns);Jre=n(qx,"STRONG",{});var BVr=s(Jre);aoo=r(BVr,"led"),BVr.forEach(t),noo=r(qx," \u2014 "),xR=n(qx,"A",{href:!0});var PVr=s(xR);soo=r(PVr,"LEDTokenizer"),PVr.forEach(t),loo=r(qx," or "),$R=n(qx,"A",{href:!0});var IVr=s($R);ioo=r(IVr,"LEDTokenizerFast"),IVr.forEach(t),doo=r(qx," (LED model)"),qx.forEach(t),coo=i(S),ss=n(S,"LI",{});var Nx=s(ss);Yre=n(Nx,"STRONG",{});var qVr=s(Yre);foo=r(qVr,"longformer"),qVr.forEach(t),moo=r(Nx," \u2014 "),kR=n(Nx,"A",{href:!0});var NVr=s(kR);goo=r(NVr,"LongformerTokenizer"),NVr.forEach(t),hoo=r(Nx," or "),SR=n(Nx,"A",{href:!0});var jVr=s(SR);poo=r(jVr,"LongformerTokenizerFast"),jVr.forEach(t),uoo=r(Nx," (Longformer model)"),Nx.forEach(t),_oo=i(S),xg=n(S,"LI",{});var PCe=s(xg);Kre=n(PCe,"STRONG",{});var DVr=s(Kre);boo=r(DVr,"luke"),DVr.forEach(t),voo=r(PCe," \u2014 "),RR=n(PCe,"A",{href:!0});var GVr=s(RR);Foo=r(GVr,"LukeTokenizer"),GVr.forEach(t),Too=r(PCe," (LUKE model)"),PCe.forEach(t),Moo=i(S),ls=n(S,"LI",{});var jx=s(ls);Zre=n(jx,"STRONG",{});var OVr=s(Zre);Eoo=r(OVr,"lxmert"),OVr.forEach(t),Coo=r(jx," \u2014 "),BR=n(jx,"A",{href:!0});var VVr=s(BR);woo=r(VVr,"LxmertTokenizer"),VVr.forEach(t),Aoo=r(jx," or "),PR=n(jx,"A",{href:!0});var XVr=s(PR);yoo=r(XVr,"LxmertTokenizerFast"),XVr.forEach(t),Loo=r(jx," (LXMERT model)"),jx.forEach(t),xoo=i(S),$g=n(S,"LI",{});var ICe=s($g);ete=n(ICe,"STRONG",{});var zVr=s(ete);$oo=r(zVr,"m2m_100"),zVr.forEach(t),koo=r(ICe," \u2014 "),IR=n(ICe,"A",{href:!0});var QVr=s(IR);Soo=r(QVr,"M2M100Tokenizer"),QVr.forEach(t),Roo=r(ICe," (M2M100 model)"),ICe.forEach(t),Boo=i(S),kg=n(S,"LI",{});var qCe=s(kg);ote=n(qCe,"STRONG",{});var WVr=s(ote);Poo=r(WVr,"marian"),WVr.forEach(t),Ioo=r(qCe," \u2014 "),qR=n(qCe,"A",{href:!0});var HVr=s(qR);qoo=r(HVr,"MarianTokenizer"),HVr.forEach(t),Noo=r(qCe," (Marian model)"),qCe.forEach(t),joo=i(S),is=n(S,"LI",{});var Dx=s(is);rte=n(Dx,"STRONG",{});var UVr=s(rte);Doo=r(UVr,"mbart"),UVr.forEach(t),Goo=r(Dx," \u2014 "),NR=n(Dx,"A",{href:!0});var JVr=s(NR);Ooo=r(JVr,"MBartTokenizer"),JVr.forEach(t),Voo=r(Dx," or "),jR=n(Dx,"A",{href:!0});var YVr=s(jR);Xoo=r(YVr,"MBartTokenizerFast"),YVr.forEach(t),zoo=r(Dx," (mBART model)"),Dx.forEach(t),Qoo=i(S),ds=n(S,"LI",{});var Gx=s(ds);tte=n(Gx,"STRONG",{});var KVr=s(tte);Woo=r(KVr,"mbart50"),KVr.forEach(t),Hoo=r(Gx," \u2014 "),DR=n(Gx,"A",{href:!0});var ZVr=s(DR);Uoo=r(ZVr,"MBart50Tokenizer"),ZVr.forEach(t),Joo=r(Gx," or "),GR=n(Gx,"A",{href:!0});var eXr=s(GR);Yoo=r(eXr,"MBart50TokenizerFast"),eXr.forEach(t),Koo=r(Gx," (mBART-50 model)"),Gx.forEach(t),Zoo=i(S),cs=n(S,"LI",{});var Ox=s(cs);ate=n(Ox,"STRONG",{});var oXr=s(ate);ero=r(oXr,"megatron-bert"),oXr.forEach(t),oro=r(Ox," \u2014 "),OR=n(Ox,"A",{href:!0});var rXr=s(OR);rro=r(rXr,"BertTokenizer"),rXr.forEach(t),tro=r(Ox," or "),VR=n(Ox,"A",{href:!0});var tXr=s(VR);aro=r(tXr,"BertTokenizerFast"),tXr.forEach(t),nro=r(Ox," (MegatronBert model)"),Ox.forEach(t),sro=i(S),Sg=n(S,"LI",{});var NCe=s(Sg);nte=n(NCe,"STRONG",{});var aXr=s(nte);lro=r(aXr,"mluke"),aXr.forEach(t),iro=r(NCe," \u2014 "),XR=n(NCe,"A",{href:!0});var nXr=s(XR);dro=r(nXr,"MLukeTokenizer"),nXr.forEach(t),cro=r(NCe," (mLUKE model)"),NCe.forEach(t),fro=i(S),fs=n(S,"LI",{});var Vx=s(fs);ste=n(Vx,"STRONG",{});var sXr=s(ste);mro=r(sXr,"mobilebert"),sXr.forEach(t),gro=r(Vx," \u2014 "),zR=n(Vx,"A",{href:!0});var lXr=s(zR);hro=r(lXr,"MobileBertTokenizer"),lXr.forEach(t),pro=r(Vx," or "),QR=n(Vx,"A",{href:!0});var iXr=s(QR);uro=r(iXr,"MobileBertTokenizerFast"),iXr.forEach(t),_ro=r(Vx," (MobileBERT model)"),Vx.forEach(t),bro=i(S),ms=n(S,"LI",{});var Xx=s(ms);lte=n(Xx,"STRONG",{});var dXr=s(lte);vro=r(dXr,"mpnet"),dXr.forEach(t),Fro=r(Xx," \u2014 "),WR=n(Xx,"A",{href:!0});var cXr=s(WR);Tro=r(cXr,"MPNetTokenizer"),cXr.forEach(t),Mro=r(Xx," or "),HR=n(Xx,"A",{href:!0});var fXr=s(HR);Ero=r(fXr,"MPNetTokenizerFast"),fXr.forEach(t),Cro=r(Xx," (MPNet model)"),Xx.forEach(t),wro=i(S),gs=n(S,"LI",{});var zx=s(gs);ite=n(zx,"STRONG",{});var mXr=s(ite);Aro=r(mXr,"mt5"),mXr.forEach(t),yro=r(zx," \u2014 "),UR=n(zx,"A",{href:!0});var gXr=s(UR);Lro=r(gXr,"MT5Tokenizer"),gXr.forEach(t),xro=r(zx," or "),JR=n(zx,"A",{href:!0});var hXr=s(JR);$ro=r(hXr,"MT5TokenizerFast"),hXr.forEach(t),kro=r(zx," (mT5 model)"),zx.forEach(t),Sro=i(S),hs=n(S,"LI",{});var Qx=s(hs);dte=n(Qx,"STRONG",{});var pXr=s(dte);Rro=r(pXr,"nystromformer"),pXr.forEach(t),Bro=r(Qx," \u2014 "),YR=n(Qx,"A",{href:!0});var uXr=s(YR);Pro=r(uXr,"AlbertTokenizer"),uXr.forEach(t),Iro=r(Qx," or "),KR=n(Qx,"A",{href:!0});var _Xr=s(KR);qro=r(_Xr,"AlbertTokenizerFast"),_Xr.forEach(t),Nro=r(Qx," (Nystromformer model)"),Qx.forEach(t),jro=i(S),ps=n(S,"LI",{});var Wx=s(ps);cte=n(Wx,"STRONG",{});var bXr=s(cte);Dro=r(bXr,"openai-gpt"),bXr.forEach(t),Gro=r(Wx," \u2014 "),ZR=n(Wx,"A",{href:!0});var vXr=s(ZR);Oro=r(vXr,"OpenAIGPTTokenizer"),vXr.forEach(t),Vro=r(Wx," or "),eB=n(Wx,"A",{href:!0});var FXr=s(eB);Xro=r(FXr,"OpenAIGPTTokenizerFast"),FXr.forEach(t),zro=r(Wx," (OpenAI GPT model)"),Wx.forEach(t),Qro=i(S),Rg=n(S,"LI",{});var jCe=s(Rg);fte=n(jCe,"STRONG",{});var TXr=s(fte);Wro=r(TXr,"opt"),TXr.forEach(t),Hro=r(jCe," \u2014 "),oB=n(jCe,"A",{href:!0});var MXr=s(oB);Uro=r(MXr,"GPT2Tokenizer"),MXr.forEach(t),Jro=r(jCe," (OPT model)"),jCe.forEach(t),Yro=i(S),us=n(S,"LI",{});var Hx=s(us);mte=n(Hx,"STRONG",{});var EXr=s(mte);Kro=r(EXr,"pegasus"),EXr.forEach(t),Zro=r(Hx," \u2014 "),rB=n(Hx,"A",{href:!0});var CXr=s(rB);eto=r(CXr,"PegasusTokenizer"),CXr.forEach(t),oto=r(Hx," or "),tB=n(Hx,"A",{href:!0});var wXr=s(tB);rto=r(wXr,"PegasusTokenizerFast"),wXr.forEach(t),tto=r(Hx," (Pegasus model)"),Hx.forEach(t),ato=i(S),Bg=n(S,"LI",{});var DCe=s(Bg);gte=n(DCe,"STRONG",{});var AXr=s(gte);nto=r(AXr,"perceiver"),AXr.forEach(t),sto=r(DCe," \u2014 "),aB=n(DCe,"A",{href:!0});var yXr=s(aB);lto=r(yXr,"PerceiverTokenizer"),yXr.forEach(t),ito=r(DCe," (Perceiver model)"),DCe.forEach(t),dto=i(S),Pg=n(S,"LI",{});var GCe=s(Pg);hte=n(GCe,"STRONG",{});var LXr=s(hte);cto=r(LXr,"phobert"),LXr.forEach(t),fto=r(GCe," \u2014 "),nB=n(GCe,"A",{href:!0});var xXr=s(nB);mto=r(xXr,"PhobertTokenizer"),xXr.forEach(t),gto=r(GCe," (PhoBERT model)"),GCe.forEach(t),hto=i(S),Ig=n(S,"LI",{});var OCe=s(Ig);pte=n(OCe,"STRONG",{});var $Xr=s(pte);pto=r($Xr,"plbart"),$Xr.forEach(t),uto=r(OCe," \u2014 "),sB=n(OCe,"A",{href:!0});var kXr=s(sB);_to=r(kXr,"PLBartTokenizer"),kXr.forEach(t),bto=r(OCe," (PLBart model)"),OCe.forEach(t),vto=i(S),qg=n(S,"LI",{});var VCe=s(qg);ute=n(VCe,"STRONG",{});var SXr=s(ute);Fto=r(SXr,"prophetnet"),SXr.forEach(t),Tto=r(VCe," \u2014 "),lB=n(VCe,"A",{href:!0});var RXr=s(lB);Mto=r(RXr,"ProphetNetTokenizer"),RXr.forEach(t),Eto=r(VCe," (ProphetNet model)"),VCe.forEach(t),Cto=i(S),_s=n(S,"LI",{});var Ux=s(_s);_te=n(Ux,"STRONG",{});var BXr=s(_te);wto=r(BXr,"qdqbert"),BXr.forEach(t),Ato=r(Ux," \u2014 "),iB=n(Ux,"A",{href:!0});var PXr=s(iB);yto=r(PXr,"BertTokenizer"),PXr.forEach(t),Lto=r(Ux," or "),dB=n(Ux,"A",{href:!0});var IXr=s(dB);xto=r(IXr,"BertTokenizerFast"),IXr.forEach(t),$to=r(Ux," (QDQBert model)"),Ux.forEach(t),kto=i(S),Ng=n(S,"LI",{});var XCe=s(Ng);bte=n(XCe,"STRONG",{});var qXr=s(bte);Sto=r(qXr,"rag"),qXr.forEach(t),Rto=r(XCe," \u2014 "),cB=n(XCe,"A",{href:!0});var NXr=s(cB);Bto=r(NXr,"RagTokenizer"),NXr.forEach(t),Pto=r(XCe," (RAG model)"),XCe.forEach(t),Ito=i(S),bs=n(S,"LI",{});var Jx=s(bs);vte=n(Jx,"STRONG",{});var jXr=s(vte);qto=r(jXr,"realm"),jXr.forEach(t),Nto=r(Jx," \u2014 "),fB=n(Jx,"A",{href:!0});var DXr=s(fB);jto=r(DXr,"RealmTokenizer"),DXr.forEach(t),Dto=r(Jx," or "),mB=n(Jx,"A",{href:!0});var GXr=s(mB);Gto=r(GXr,"RealmTokenizerFast"),GXr.forEach(t),Oto=r(Jx," (Realm model)"),Jx.forEach(t),Vto=i(S),vs=n(S,"LI",{});var Yx=s(vs);Fte=n(Yx,"STRONG",{});var OXr=s(Fte);Xto=r(OXr,"reformer"),OXr.forEach(t),zto=r(Yx," \u2014 "),gB=n(Yx,"A",{href:!0});var VXr=s(gB);Qto=r(VXr,"ReformerTokenizer"),VXr.forEach(t),Wto=r(Yx," or "),hB=n(Yx,"A",{href:!0});var XXr=s(hB);Hto=r(XXr,"ReformerTokenizerFast"),XXr.forEach(t),Uto=r(Yx," (Reformer model)"),Yx.forEach(t),Jto=i(S),Fs=n(S,"LI",{});var Kx=s(Fs);Tte=n(Kx,"STRONG",{});var zXr=s(Tte);Yto=r(zXr,"rembert"),zXr.forEach(t),Kto=r(Kx," \u2014 "),pB=n(Kx,"A",{href:!0});var QXr=s(pB);Zto=r(QXr,"RemBertTokenizer"),QXr.forEach(t),eao=r(Kx," or "),uB=n(Kx,"A",{href:!0});var WXr=s(uB);oao=r(WXr,"RemBertTokenizerFast"),WXr.forEach(t),rao=r(Kx," (RemBERT model)"),Kx.forEach(t),tao=i(S),Ts=n(S,"LI",{});var Zx=s(Ts);Mte=n(Zx,"STRONG",{});var HXr=s(Mte);aao=r(HXr,"retribert"),HXr.forEach(t),nao=r(Zx," \u2014 "),_B=n(Zx,"A",{href:!0});var UXr=s(_B);sao=r(UXr,"RetriBertTokenizer"),UXr.forEach(t),lao=r(Zx," or "),bB=n(Zx,"A",{href:!0});var JXr=s(bB);iao=r(JXr,"RetriBertTokenizerFast"),JXr.forEach(t),dao=r(Zx," (RetriBERT model)"),Zx.forEach(t),cao=i(S),Ms=n(S,"LI",{});var e$=s(Ms);Ete=n(e$,"STRONG",{});var YXr=s(Ete);fao=r(YXr,"roberta"),YXr.forEach(t),mao=r(e$," \u2014 "),vB=n(e$,"A",{href:!0});var KXr=s(vB);gao=r(KXr,"RobertaTokenizer"),KXr.forEach(t),hao=r(e$," or "),FB=n(e$,"A",{href:!0});var ZXr=s(FB);pao=r(ZXr,"RobertaTokenizerFast"),ZXr.forEach(t),uao=r(e$," (RoBERTa model)"),e$.forEach(t),_ao=i(S),Es=n(S,"LI",{});var o$=s(Es);Cte=n(o$,"STRONG",{});var ezr=s(Cte);bao=r(ezr,"roformer"),ezr.forEach(t),vao=r(o$," \u2014 "),TB=n(o$,"A",{href:!0});var ozr=s(TB);Fao=r(ozr,"RoFormerTokenizer"),ozr.forEach(t),Tao=r(o$," or "),MB=n(o$,"A",{href:!0});var rzr=s(MB);Mao=r(rzr,"RoFormerTokenizerFast"),rzr.forEach(t),Eao=r(o$," (RoFormer model)"),o$.forEach(t),Cao=i(S),jg=n(S,"LI",{});var zCe=s(jg);wte=n(zCe,"STRONG",{});var tzr=s(wte);wao=r(tzr,"speech_to_text"),tzr.forEach(t),Aao=r(zCe," \u2014 "),EB=n(zCe,"A",{href:!0});var azr=s(EB);yao=r(azr,"Speech2TextTokenizer"),azr.forEach(t),Lao=r(zCe," (Speech2Text model)"),zCe.forEach(t),xao=i(S),Dg=n(S,"LI",{});var QCe=s(Dg);Ate=n(QCe,"STRONG",{});var nzr=s(Ate);$ao=r(nzr,"speech_to_text_2"),nzr.forEach(t),kao=r(QCe," \u2014 "),CB=n(QCe,"A",{href:!0});var szr=s(CB);Sao=r(szr,"Speech2Text2Tokenizer"),szr.forEach(t),Rao=r(QCe," (Speech2Text2 model)"),QCe.forEach(t),Bao=i(S),Cs=n(S,"LI",{});var r$=s(Cs);yte=n(r$,"STRONG",{});var lzr=s(yte);Pao=r(lzr,"splinter"),lzr.forEach(t),Iao=r(r$," \u2014 "),wB=n(r$,"A",{href:!0});var izr=s(wB);qao=r(izr,"SplinterTokenizer"),izr.forEach(t),Nao=r(r$," or "),AB=n(r$,"A",{href:!0});var dzr=s(AB);jao=r(dzr,"SplinterTokenizerFast"),dzr.forEach(t),Dao=r(r$," (Splinter model)"),r$.forEach(t),Gao=i(S),ws=n(S,"LI",{});var t$=s(ws);Lte=n(t$,"STRONG",{});var czr=s(Lte);Oao=r(czr,"squeezebert"),czr.forEach(t),Vao=r(t$," \u2014 "),yB=n(t$,"A",{href:!0});var fzr=s(yB);Xao=r(fzr,"SqueezeBertTokenizer"),fzr.forEach(t),zao=r(t$," or "),LB=n(t$,"A",{href:!0});var mzr=s(LB);Qao=r(mzr,"SqueezeBertTokenizerFast"),mzr.forEach(t),Wao=r(t$," (SqueezeBERT model)"),t$.forEach(t),Hao=i(S),As=n(S,"LI",{});var a$=s(As);xte=n(a$,"STRONG",{});var gzr=s(xte);Uao=r(gzr,"t5"),gzr.forEach(t),Jao=r(a$," \u2014 "),xB=n(a$,"A",{href:!0});var hzr=s(xB);Yao=r(hzr,"T5Tokenizer"),hzr.forEach(t),Kao=r(a$," or "),$B=n(a$,"A",{href:!0});var pzr=s($B);Zao=r(pzr,"T5TokenizerFast"),pzr.forEach(t),eno=r(a$," (T5 model)"),a$.forEach(t),ono=i(S),Gg=n(S,"LI",{});var WCe=s(Gg);$te=n(WCe,"STRONG",{});var uzr=s($te);rno=r(uzr,"tapas"),uzr.forEach(t),tno=r(WCe," \u2014 "),kB=n(WCe,"A",{href:!0});var _zr=s(kB);ano=r(_zr,"TapasTokenizer"),_zr.forEach(t),nno=r(WCe," (TAPAS model)"),WCe.forEach(t),sno=i(S),Og=n(S,"LI",{});var HCe=s(Og);kte=n(HCe,"STRONG",{});var bzr=s(kte);lno=r(bzr,"tapex"),bzr.forEach(t),ino=r(HCe," \u2014 "),SB=n(HCe,"A",{href:!0});var vzr=s(SB);dno=r(vzr,"TapexTokenizer"),vzr.forEach(t),cno=r(HCe," (TAPEX model)"),HCe.forEach(t),fno=i(S),Vg=n(S,"LI",{});var UCe=s(Vg);Ste=n(UCe,"STRONG",{});var Fzr=s(Ste);mno=r(Fzr,"transfo-xl"),Fzr.forEach(t),gno=r(UCe," \u2014 "),RB=n(UCe,"A",{href:!0});var Tzr=s(RB);hno=r(Tzr,"TransfoXLTokenizer"),Tzr.forEach(t),pno=r(UCe," (Transformer-XL model)"),UCe.forEach(t),uno=i(S),ys=n(S,"LI",{});var n$=s(ys);Rte=n(n$,"STRONG",{});var Mzr=s(Rte);_no=r(Mzr,"visual_bert"),Mzr.forEach(t),bno=r(n$," \u2014 "),BB=n(n$,"A",{href:!0});var Ezr=s(BB);vno=r(Ezr,"BertTokenizer"),Ezr.forEach(t),Fno=r(n$," or "),PB=n(n$,"A",{href:!0});var Czr=s(PB);Tno=r(Czr,"BertTokenizerFast"),Czr.forEach(t),Mno=r(n$," (VisualBert model)"),n$.forEach(t),Eno=i(S),Xg=n(S,"LI",{});var JCe=s(Xg);Bte=n(JCe,"STRONG",{});var wzr=s(Bte);Cno=r(wzr,"wav2vec2"),wzr.forEach(t),wno=r(JCe," \u2014 "),IB=n(JCe,"A",{href:!0});var Azr=s(IB);Ano=r(Azr,"Wav2Vec2CTCTokenizer"),Azr.forEach(t),yno=r(JCe," (Wav2Vec2 model)"),JCe.forEach(t),Lno=i(S),zg=n(S,"LI",{});var YCe=s(zg);Pte=n(YCe,"STRONG",{});var yzr=s(Pte);xno=r(yzr,"wav2vec2_phoneme"),yzr.forEach(t),$no=r(YCe," \u2014 "),qB=n(YCe,"A",{href:!0});var Lzr=s(qB);kno=r(Lzr,"Wav2Vec2PhonemeCTCTokenizer"),Lzr.forEach(t),Sno=r(YCe," (Wav2Vec2Phoneme model)"),YCe.forEach(t),Rno=i(S),Ls=n(S,"LI",{});var s$=s(Ls);Ite=n(s$,"STRONG",{});var xzr=s(Ite);Bno=r(xzr,"xglm"),xzr.forEach(t),Pno=r(s$," \u2014 "),NB=n(s$,"A",{href:!0});var $zr=s(NB);Ino=r($zr,"XGLMTokenizer"),$zr.forEach(t),qno=r(s$," or "),jB=n(s$,"A",{href:!0});var kzr=s(jB);Nno=r(kzr,"XGLMTokenizerFast"),kzr.forEach(t),jno=r(s$," (XGLM model)"),s$.forEach(t),Dno=i(S),Qg=n(S,"LI",{});var KCe=s(Qg);qte=n(KCe,"STRONG",{});var Szr=s(qte);Gno=r(Szr,"xlm"),Szr.forEach(t),Ono=r(KCe," \u2014 "),DB=n(KCe,"A",{href:!0});var Rzr=s(DB);Vno=r(Rzr,"XLMTokenizer"),Rzr.forEach(t),Xno=r(KCe," (XLM model)"),KCe.forEach(t),zno=i(S),Wg=n(S,"LI",{});var ZCe=s(Wg);Nte=n(ZCe,"STRONG",{});var Bzr=s(Nte);Qno=r(Bzr,"xlm-prophetnet"),Bzr.forEach(t),Wno=r(ZCe," \u2014 "),GB=n(ZCe,"A",{href:!0});var Pzr=s(GB);Hno=r(Pzr,"XLMProphetNetTokenizer"),Pzr.forEach(t),Uno=r(ZCe," (XLMProphetNet model)"),ZCe.forEach(t),Jno=i(S),xs=n(S,"LI",{});var l$=s(xs);jte=n(l$,"STRONG",{});var Izr=s(jte);Yno=r(Izr,"xlm-roberta"),Izr.forEach(t),Kno=r(l$," \u2014 "),OB=n(l$,"A",{href:!0});var qzr=s(OB);Zno=r(qzr,"XLMRobertaTokenizer"),qzr.forEach(t),eso=r(l$," or "),VB=n(l$,"A",{href:!0});var Nzr=s(VB);oso=r(Nzr,"XLMRobertaTokenizerFast"),Nzr.forEach(t),rso=r(l$," (XLM-RoBERTa model)"),l$.forEach(t),tso=i(S),$s=n(S,"LI",{});var i$=s($s);Dte=n(i$,"STRONG",{});var jzr=s(Dte);aso=r(jzr,"xlm-roberta-xl"),jzr.forEach(t),nso=r(i$," \u2014 "),XB=n(i$,"A",{href:!0});var Dzr=s(XB);sso=r(Dzr,"RobertaTokenizer"),Dzr.forEach(t),lso=r(i$," or "),zB=n(i$,"A",{href:!0});var Gzr=s(zB);iso=r(Gzr,"RobertaTokenizerFast"),Gzr.forEach(t),dso=r(i$," (XLM-RoBERTa-XL model)"),i$.forEach(t),cso=i(S),ks=n(S,"LI",{});var d$=s(ks);Gte=n(d$,"STRONG",{});var Ozr=s(Gte);fso=r(Ozr,"xlnet"),Ozr.forEach(t),mso=r(d$," \u2014 "),QB=n(d$,"A",{href:!0});var Vzr=s(QB);gso=r(Vzr,"XLNetTokenizer"),Vzr.forEach(t),hso=r(d$," or "),WB=n(d$,"A",{href:!0});var Xzr=s(WB);pso=r(Xzr,"XLNetTokenizerFast"),Xzr.forEach(t),uso=r(d$," (XLNet model)"),d$.forEach(t),_so=i(S),Ss=n(S,"LI",{});var c$=s(Ss);Ote=n(c$,"STRONG",{});var zzr=s(Ote);bso=r(zzr,"yoso"),zzr.forEach(t),vso=r(c$," \u2014 "),HB=n(c$,"A",{href:!0});var Qzr=s(HB);Fso=r(Qzr,"AlbertTokenizer"),Qzr.forEach(t),Tso=r(c$," or "),UB=n(c$,"A",{href:!0});var Wzr=s(UB);Mso=r(Wzr,"AlbertTokenizerFast"),Wzr.forEach(t),Eso=r(c$," (YOSO model)"),c$.forEach(t),S.forEach(t),Cso=i(qs),T(Hg.$$.fragment,qs),qs.forEach(t),wso=i(Is),Ug=n(Is,"DIV",{class:!0});var Wqe=s(Ug);T(c6.$$.fragment,Wqe),Aso=i(Wqe),Vte=n(Wqe,"P",{});var Hzr=s(Vte);yso=r(Hzr,"Register a new tokenizer in this mapping."),Hzr.forEach(t),Wqe.forEach(t),Is.forEach(t),HPe=i(f),vi=n(f,"H2",{class:!0});var Hqe=s(vi);Jg=n(Hqe,"A",{id:!0,class:!0,href:!0});var Uzr=s(Jg);Xte=n(Uzr,"SPAN",{});var Jzr=s(Xte);T(f6.$$.fragment,Jzr),Jzr.forEach(t),Uzr.forEach(t),Lso=i(Hqe),zte=n(Hqe,"SPAN",{});var Yzr=s(zte);xso=r(Yzr,"AutoFeatureExtractor"),Yzr.forEach(t),Hqe.forEach(t),UPe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(m6.$$.fragment,Ns),$so=i(Ns),g6=n(Ns,"P",{});var Uqe=s(g6);kso=r(Uqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),JB=n(Uqe,"A",{href:!0});var Kzr=s(JB);Sso=r(Kzr,"AutoFeatureExtractor.from_pretrained()"),Kzr.forEach(t),Rso=r(Uqe," class method."),Uqe.forEach(t),Bso=i(Ns),h6=n(Ns,"P",{});var Jqe=s(h6);Pso=r(Jqe,"This class cannot be instantiated directly using "),Qte=n(Jqe,"CODE",{});var Zzr=s(Qte);Iso=r(Zzr,"__init__()"),Zzr.forEach(t),qso=r(Jqe," (throws an error)."),Jqe.forEach(t),Nso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(p6.$$.fragment,Yt),jso=i(Yt),Wte=n(Yt,"P",{});var eQr=s(Wte);Dso=r(eQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),eQr.forEach(t),Gso=i(Yt),wa=n(Yt,"P",{});var K3=s(wa);Oso=r(K3,"The feature extractor class to instantiate is selected based on the "),Hte=n(K3,"CODE",{});var oQr=s(Hte);Vso=r(oQr,"model_type"),oQr.forEach(t),Xso=r(K3,` property of the config object
(either passed as an argument or loaded from `),Ute=n(K3,"CODE",{});var rQr=s(Ute);zso=r(rQr,"pretrained_model_name_or_path"),rQr.forEach(t),Qso=r(K3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jte=n(K3,"CODE",{});var tQr=s(Jte);Wso=r(tQr,"pretrained_model_name_or_path"),tQr.forEach(t),Hso=r(K3,":"),K3.forEach(t),Uso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Yg=n(ae,"LI",{});var e3e=s(Yg);Yte=n(e3e,"STRONG",{});var aQr=s(Yte);Jso=r(aQr,"beit"),aQr.forEach(t),Yso=r(e3e," \u2014 "),YB=n(e3e,"A",{href:!0});var nQr=s(YB);Kso=r(nQr,"BeitFeatureExtractor"),nQr.forEach(t),Zso=r(e3e," (BEiT model)"),e3e.forEach(t),elo=i(ae),Kg=n(ae,"LI",{});var o3e=s(Kg);Kte=n(o3e,"STRONG",{});var sQr=s(Kte);olo=r(sQr,"clip"),sQr.forEach(t),rlo=r(o3e," \u2014 "),KB=n(o3e,"A",{href:!0});var lQr=s(KB);tlo=r(lQr,"CLIPFeatureExtractor"),lQr.forEach(t),alo=r(o3e," (CLIP model)"),o3e.forEach(t),nlo=i(ae),Zg=n(ae,"LI",{});var r3e=s(Zg);Zte=n(r3e,"STRONG",{});var iQr=s(Zte);slo=r(iQr,"convnext"),iQr.forEach(t),llo=r(r3e," \u2014 "),ZB=n(r3e,"A",{href:!0});var dQr=s(ZB);ilo=r(dQr,"ConvNextFeatureExtractor"),dQr.forEach(t),dlo=r(r3e," (ConvNext model)"),r3e.forEach(t),clo=i(ae),eh=n(ae,"LI",{});var t3e=s(eh);eae=n(t3e,"STRONG",{});var cQr=s(eae);flo=r(cQr,"data2vec-audio"),cQr.forEach(t),mlo=r(t3e," \u2014 "),eP=n(t3e,"A",{href:!0});var fQr=s(eP);glo=r(fQr,"Wav2Vec2FeatureExtractor"),fQr.forEach(t),hlo=r(t3e," (Data2VecAudio model)"),t3e.forEach(t),plo=i(ae),oh=n(ae,"LI",{});var a3e=s(oh);oae=n(a3e,"STRONG",{});var mQr=s(oae);ulo=r(mQr,"data2vec-vision"),mQr.forEach(t),_lo=r(a3e," \u2014 "),oP=n(a3e,"A",{href:!0});var gQr=s(oP);blo=r(gQr,"BeitFeatureExtractor"),gQr.forEach(t),vlo=r(a3e," (Data2VecVision model)"),a3e.forEach(t),Flo=i(ae),rh=n(ae,"LI",{});var n3e=s(rh);rae=n(n3e,"STRONG",{});var hQr=s(rae);Tlo=r(hQr,"deit"),hQr.forEach(t),Mlo=r(n3e," \u2014 "),rP=n(n3e,"A",{href:!0});var pQr=s(rP);Elo=r(pQr,"DeiTFeatureExtractor"),pQr.forEach(t),Clo=r(n3e," (DeiT model)"),n3e.forEach(t),wlo=i(ae),th=n(ae,"LI",{});var s3e=s(th);tae=n(s3e,"STRONG",{});var uQr=s(tae);Alo=r(uQr,"detr"),uQr.forEach(t),ylo=r(s3e," \u2014 "),tP=n(s3e,"A",{href:!0});var _Qr=s(tP);Llo=r(_Qr,"DetrFeatureExtractor"),_Qr.forEach(t),xlo=r(s3e," (DETR model)"),s3e.forEach(t),$lo=i(ae),ah=n(ae,"LI",{});var l3e=s(ah);aae=n(l3e,"STRONG",{});var bQr=s(aae);klo=r(bQr,"dpt"),bQr.forEach(t),Slo=r(l3e," \u2014 "),aP=n(l3e,"A",{href:!0});var vQr=s(aP);Rlo=r(vQr,"DPTFeatureExtractor"),vQr.forEach(t),Blo=r(l3e," (DPT model)"),l3e.forEach(t),Plo=i(ae),nh=n(ae,"LI",{});var i3e=s(nh);nae=n(i3e,"STRONG",{});var FQr=s(nae);Ilo=r(FQr,"flava"),FQr.forEach(t),qlo=r(i3e," \u2014 "),nP=n(i3e,"A",{href:!0});var TQr=s(nP);Nlo=r(TQr,"FlavaFeatureExtractor"),TQr.forEach(t),jlo=r(i3e," (Flava model)"),i3e.forEach(t),Dlo=i(ae),sh=n(ae,"LI",{});var d3e=s(sh);sae=n(d3e,"STRONG",{});var MQr=s(sae);Glo=r(MQr,"glpn"),MQr.forEach(t),Olo=r(d3e," \u2014 "),sP=n(d3e,"A",{href:!0});var EQr=s(sP);Vlo=r(EQr,"GLPNFeatureExtractor"),EQr.forEach(t),Xlo=r(d3e," (GLPN model)"),d3e.forEach(t),zlo=i(ae),lh=n(ae,"LI",{});var c3e=s(lh);lae=n(c3e,"STRONG",{});var CQr=s(lae);Qlo=r(CQr,"hubert"),CQr.forEach(t),Wlo=r(c3e," \u2014 "),lP=n(c3e,"A",{href:!0});var wQr=s(lP);Hlo=r(wQr,"Wav2Vec2FeatureExtractor"),wQr.forEach(t),Ulo=r(c3e," (Hubert model)"),c3e.forEach(t),Jlo=i(ae),ih=n(ae,"LI",{});var f3e=s(ih);iae=n(f3e,"STRONG",{});var AQr=s(iae);Ylo=r(AQr,"layoutlmv2"),AQr.forEach(t),Klo=r(f3e," \u2014 "),iP=n(f3e,"A",{href:!0});var yQr=s(iP);Zlo=r(yQr,"LayoutLMv2FeatureExtractor"),yQr.forEach(t),eio=r(f3e," (LayoutLMv2 model)"),f3e.forEach(t),oio=i(ae),dh=n(ae,"LI",{});var m3e=s(dh);dae=n(m3e,"STRONG",{});var LQr=s(dae);rio=r(LQr,"maskformer"),LQr.forEach(t),tio=r(m3e," \u2014 "),dP=n(m3e,"A",{href:!0});var xQr=s(dP);aio=r(xQr,"MaskFormerFeatureExtractor"),xQr.forEach(t),nio=r(m3e," (MaskFormer model)"),m3e.forEach(t),sio=i(ae),ch=n(ae,"LI",{});var g3e=s(ch);cae=n(g3e,"STRONG",{});var $Qr=s(cae);lio=r($Qr,"perceiver"),$Qr.forEach(t),iio=r(g3e," \u2014 "),cP=n(g3e,"A",{href:!0});var kQr=s(cP);dio=r(kQr,"PerceiverFeatureExtractor"),kQr.forEach(t),cio=r(g3e," (Perceiver model)"),g3e.forEach(t),fio=i(ae),fh=n(ae,"LI",{});var h3e=s(fh);fae=n(h3e,"STRONG",{});var SQr=s(fae);mio=r(SQr,"poolformer"),SQr.forEach(t),gio=r(h3e," \u2014 "),fP=n(h3e,"A",{href:!0});var RQr=s(fP);hio=r(RQr,"PoolFormerFeatureExtractor"),RQr.forEach(t),pio=r(h3e," (PoolFormer model)"),h3e.forEach(t),uio=i(ae),mh=n(ae,"LI",{});var p3e=s(mh);mae=n(p3e,"STRONG",{});var BQr=s(mae);_io=r(BQr,"regnet"),BQr.forEach(t),bio=r(p3e," \u2014 "),mP=n(p3e,"A",{href:!0});var PQr=s(mP);vio=r(PQr,"ConvNextFeatureExtractor"),PQr.forEach(t),Fio=r(p3e," (RegNet model)"),p3e.forEach(t),Tio=i(ae),gh=n(ae,"LI",{});var u3e=s(gh);gae=n(u3e,"STRONG",{});var IQr=s(gae);Mio=r(IQr,"resnet"),IQr.forEach(t),Eio=r(u3e," \u2014 "),gP=n(u3e,"A",{href:!0});var qQr=s(gP);Cio=r(qQr,"ConvNextFeatureExtractor"),qQr.forEach(t),wio=r(u3e," (ResNet model)"),u3e.forEach(t),Aio=i(ae),hh=n(ae,"LI",{});var _3e=s(hh);hae=n(_3e,"STRONG",{});var NQr=s(hae);yio=r(NQr,"segformer"),NQr.forEach(t),Lio=r(_3e," \u2014 "),hP=n(_3e,"A",{href:!0});var jQr=s(hP);xio=r(jQr,"SegformerFeatureExtractor"),jQr.forEach(t),$io=r(_3e," (SegFormer model)"),_3e.forEach(t),kio=i(ae),ph=n(ae,"LI",{});var b3e=s(ph);pae=n(b3e,"STRONG",{});var DQr=s(pae);Sio=r(DQr,"speech_to_text"),DQr.forEach(t),Rio=r(b3e," \u2014 "),pP=n(b3e,"A",{href:!0});var GQr=s(pP);Bio=r(GQr,"Speech2TextFeatureExtractor"),GQr.forEach(t),Pio=r(b3e," (Speech2Text model)"),b3e.forEach(t),Iio=i(ae),uh=n(ae,"LI",{});var v3e=s(uh);uae=n(v3e,"STRONG",{});var OQr=s(uae);qio=r(OQr,"swin"),OQr.forEach(t),Nio=r(v3e," \u2014 "),uP=n(v3e,"A",{href:!0});var VQr=s(uP);jio=r(VQr,"ViTFeatureExtractor"),VQr.forEach(t),Dio=r(v3e," (Swin model)"),v3e.forEach(t),Gio=i(ae),_h=n(ae,"LI",{});var F3e=s(_h);_ae=n(F3e,"STRONG",{});var XQr=s(_ae);Oio=r(XQr,"van"),XQr.forEach(t),Vio=r(F3e," \u2014 "),_P=n(F3e,"A",{href:!0});var zQr=s(_P);Xio=r(zQr,"ConvNextFeatureExtractor"),zQr.forEach(t),zio=r(F3e," (VAN model)"),F3e.forEach(t),Qio=i(ae),bh=n(ae,"LI",{});var T3e=s(bh);bae=n(T3e,"STRONG",{});var QQr=s(bae);Wio=r(QQr,"vit"),QQr.forEach(t),Hio=r(T3e," \u2014 "),bP=n(T3e,"A",{href:!0});var WQr=s(bP);Uio=r(WQr,"ViTFeatureExtractor"),WQr.forEach(t),Jio=r(T3e," (ViT model)"),T3e.forEach(t),Yio=i(ae),vh=n(ae,"LI",{});var M3e=s(vh);vae=n(M3e,"STRONG",{});var HQr=s(vae);Kio=r(HQr,"vit_mae"),HQr.forEach(t),Zio=r(M3e," \u2014 "),vP=n(M3e,"A",{href:!0});var UQr=s(vP);edo=r(UQr,"ViTFeatureExtractor"),UQr.forEach(t),odo=r(M3e," (ViTMAE model)"),M3e.forEach(t),rdo=i(ae),Fh=n(ae,"LI",{});var E3e=s(Fh);Fae=n(E3e,"STRONG",{});var JQr=s(Fae);tdo=r(JQr,"wav2vec2"),JQr.forEach(t),ado=r(E3e," \u2014 "),FP=n(E3e,"A",{href:!0});var YQr=s(FP);ndo=r(YQr,"Wav2Vec2FeatureExtractor"),YQr.forEach(t),sdo=r(E3e," (Wav2Vec2 model)"),E3e.forEach(t),ldo=i(ae),Th=n(ae,"LI",{});var C3e=s(Th);Tae=n(C3e,"STRONG",{});var KQr=s(Tae);ido=r(KQr,"yolos"),KQr.forEach(t),ddo=r(C3e," \u2014 "),TP=n(C3e,"A",{href:!0});var ZQr=s(TP);cdo=r(ZQr,"YolosFeatureExtractor"),ZQr.forEach(t),fdo=r(C3e," (YOLOS model)"),C3e.forEach(t),ae.forEach(t),mdo=i(Yt),T(Mh.$$.fragment,Yt),gdo=i(Yt),T(Eh.$$.fragment,Yt),Yt.forEach(t),hdo=i(Ns),Ch=n(Ns,"DIV",{class:!0});var Yqe=s(Ch);T(u6.$$.fragment,Yqe),pdo=i(Yqe),Mae=n(Yqe,"P",{});var eWr=s(Mae);udo=r(eWr,"Register a new feature extractor for this class."),eWr.forEach(t),Yqe.forEach(t),Ns.forEach(t),JPe=i(f),Fi=n(f,"H2",{class:!0});var Kqe=s(Fi);wh=n(Kqe,"A",{id:!0,class:!0,href:!0});var oWr=s(wh);Eae=n(oWr,"SPAN",{});var rWr=s(Eae);T(_6.$$.fragment,rWr),rWr.forEach(t),oWr.forEach(t),_do=i(Kqe),Cae=n(Kqe,"SPAN",{});var tWr=s(Cae);bdo=r(tWr,"AutoProcessor"),tWr.forEach(t),Kqe.forEach(t),YPe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(b6.$$.fragment,js),vdo=i(js),v6=n(js,"P",{});var Zqe=s(v6);Fdo=r(Zqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MP=n(Zqe,"A",{href:!0});var aWr=s(MP);Tdo=r(aWr,"AutoProcessor.from_pretrained()"),aWr.forEach(t),Mdo=r(Zqe," class method."),Zqe.forEach(t),Edo=i(js),F6=n(js,"P",{});var eNe=s(F6);Cdo=r(eNe,"This class cannot be instantiated directly using "),wae=n(eNe,"CODE",{});var nWr=s(wae);wdo=r(nWr,"__init__()"),nWr.forEach(t),Ado=r(eNe," (throws an error)."),eNe.forEach(t),ydo=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(T6.$$.fragment,Kt),Ldo=i(Kt),Aae=n(Kt,"P",{});var sWr=s(Aae);xdo=r(sWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sWr.forEach(t),$do=i(Kt),Ti=n(Kt,"P",{});var sK=s(Ti);kdo=r(sK,"The processor class to instantiate is selected based on the "),yae=n(sK,"CODE",{});var lWr=s(yae);Sdo=r(lWr,"model_type"),lWr.forEach(t),Rdo=r(sK,` property of the config object (either
passed as an argument or loaded from `),Lae=n(sK,"CODE",{});var iWr=s(Lae);Bdo=r(iWr,"pretrained_model_name_or_path"),iWr.forEach(t),Pdo=r(sK," if possible):"),sK.forEach(t),Ido=i(Kt),_e=n(Kt,"UL",{});var ve=s(_e);Ah=n(ve,"LI",{});var w3e=s(Ah);xae=n(w3e,"STRONG",{});var dWr=s(xae);qdo=r(dWr,"clip"),dWr.forEach(t),Ndo=r(w3e," \u2014 "),EP=n(w3e,"A",{href:!0});var cWr=s(EP);jdo=r(cWr,"CLIPProcessor"),cWr.forEach(t),Ddo=r(w3e," (CLIP model)"),w3e.forEach(t),Gdo=i(ve),yh=n(ve,"LI",{});var A3e=s(yh);$ae=n(A3e,"STRONG",{});var fWr=s($ae);Odo=r(fWr,"flava"),fWr.forEach(t),Vdo=r(A3e," \u2014 "),kae=n(A3e,"CODE",{});var mWr=s(kae);Xdo=r(mWr,"FLAVAProcessor"),mWr.forEach(t),zdo=r(A3e," (Flava model)"),A3e.forEach(t),Qdo=i(ve),Lh=n(ve,"LI",{});var y3e=s(Lh);Sae=n(y3e,"STRONG",{});var gWr=s(Sae);Wdo=r(gWr,"layoutlmv2"),gWr.forEach(t),Hdo=r(y3e," \u2014 "),CP=n(y3e,"A",{href:!0});var hWr=s(CP);Udo=r(hWr,"LayoutLMv2Processor"),hWr.forEach(t),Jdo=r(y3e," (LayoutLMv2 model)"),y3e.forEach(t),Ydo=i(ve),xh=n(ve,"LI",{});var L3e=s(xh);Rae=n(L3e,"STRONG",{});var pWr=s(Rae);Kdo=r(pWr,"layoutxlm"),pWr.forEach(t),Zdo=r(L3e," \u2014 "),wP=n(L3e,"A",{href:!0});var uWr=s(wP);eco=r(uWr,"LayoutXLMProcessor"),uWr.forEach(t),oco=r(L3e," (LayoutXLM model)"),L3e.forEach(t),rco=i(ve),$h=n(ve,"LI",{});var x3e=s($h);Bae=n(x3e,"STRONG",{});var _Wr=s(Bae);tco=r(_Wr,"sew"),_Wr.forEach(t),aco=r(x3e," \u2014 "),AP=n(x3e,"A",{href:!0});var bWr=s(AP);nco=r(bWr,"Wav2Vec2Processor"),bWr.forEach(t),sco=r(x3e," (SEW model)"),x3e.forEach(t),lco=i(ve),kh=n(ve,"LI",{});var $3e=s(kh);Pae=n($3e,"STRONG",{});var vWr=s(Pae);ico=r(vWr,"sew-d"),vWr.forEach(t),dco=r($3e," \u2014 "),yP=n($3e,"A",{href:!0});var FWr=s(yP);cco=r(FWr,"Wav2Vec2Processor"),FWr.forEach(t),fco=r($3e," (SEW-D model)"),$3e.forEach(t),mco=i(ve),Sh=n(ve,"LI",{});var k3e=s(Sh);Iae=n(k3e,"STRONG",{});var TWr=s(Iae);gco=r(TWr,"speech_to_text"),TWr.forEach(t),hco=r(k3e," \u2014 "),LP=n(k3e,"A",{href:!0});var MWr=s(LP);pco=r(MWr,"Speech2TextProcessor"),MWr.forEach(t),uco=r(k3e," (Speech2Text model)"),k3e.forEach(t),_co=i(ve),Rh=n(ve,"LI",{});var S3e=s(Rh);qae=n(S3e,"STRONG",{});var EWr=s(qae);bco=r(EWr,"speech_to_text_2"),EWr.forEach(t),vco=r(S3e," \u2014 "),xP=n(S3e,"A",{href:!0});var CWr=s(xP);Fco=r(CWr,"Speech2Text2Processor"),CWr.forEach(t),Tco=r(S3e," (Speech2Text2 model)"),S3e.forEach(t),Mco=i(ve),Bh=n(ve,"LI",{});var R3e=s(Bh);Nae=n(R3e,"STRONG",{});var wWr=s(Nae);Eco=r(wWr,"trocr"),wWr.forEach(t),Cco=r(R3e," \u2014 "),$P=n(R3e,"A",{href:!0});var AWr=s($P);wco=r(AWr,"TrOCRProcessor"),AWr.forEach(t),Aco=r(R3e," (TrOCR model)"),R3e.forEach(t),yco=i(ve),Ph=n(ve,"LI",{});var B3e=s(Ph);jae=n(B3e,"STRONG",{});var yWr=s(jae);Lco=r(yWr,"unispeech"),yWr.forEach(t),xco=r(B3e," \u2014 "),kP=n(B3e,"A",{href:!0});var LWr=s(kP);$co=r(LWr,"Wav2Vec2Processor"),LWr.forEach(t),kco=r(B3e," (UniSpeech model)"),B3e.forEach(t),Sco=i(ve),Ih=n(ve,"LI",{});var P3e=s(Ih);Dae=n(P3e,"STRONG",{});var xWr=s(Dae);Rco=r(xWr,"unispeech-sat"),xWr.forEach(t),Bco=r(P3e," \u2014 "),SP=n(P3e,"A",{href:!0});var $Wr=s(SP);Pco=r($Wr,"Wav2Vec2Processor"),$Wr.forEach(t),Ico=r(P3e," (UniSpeechSat model)"),P3e.forEach(t),qco=i(ve),qh=n(ve,"LI",{});var I3e=s(qh);Gae=n(I3e,"STRONG",{});var kWr=s(Gae);Nco=r(kWr,"vilt"),kWr.forEach(t),jco=r(I3e," \u2014 "),RP=n(I3e,"A",{href:!0});var SWr=s(RP);Dco=r(SWr,"ViltProcessor"),SWr.forEach(t),Gco=r(I3e," (ViLT model)"),I3e.forEach(t),Oco=i(ve),Nh=n(ve,"LI",{});var q3e=s(Nh);Oae=n(q3e,"STRONG",{});var RWr=s(Oae);Vco=r(RWr,"vision-text-dual-encoder"),RWr.forEach(t),Xco=r(q3e," \u2014 "),BP=n(q3e,"A",{href:!0});var BWr=s(BP);zco=r(BWr,"VisionTextDualEncoderProcessor"),BWr.forEach(t),Qco=r(q3e," (VisionTextDualEncoder model)"),q3e.forEach(t),Wco=i(ve),jh=n(ve,"LI",{});var N3e=s(jh);Vae=n(N3e,"STRONG",{});var PWr=s(Vae);Hco=r(PWr,"wav2vec2"),PWr.forEach(t),Uco=r(N3e," \u2014 "),PP=n(N3e,"A",{href:!0});var IWr=s(PP);Jco=r(IWr,"Wav2Vec2Processor"),IWr.forEach(t),Yco=r(N3e," (Wav2Vec2 model)"),N3e.forEach(t),Kco=i(ve),Dh=n(ve,"LI",{});var j3e=s(Dh);Xae=n(j3e,"STRONG",{});var qWr=s(Xae);Zco=r(qWr,"wavlm"),qWr.forEach(t),efo=r(j3e," \u2014 "),IP=n(j3e,"A",{href:!0});var NWr=s(IP);ofo=r(NWr,"Wav2Vec2Processor"),NWr.forEach(t),rfo=r(j3e," (WavLM model)"),j3e.forEach(t),ve.forEach(t),tfo=i(Kt),T(Gh.$$.fragment,Kt),afo=i(Kt),T(Oh.$$.fragment,Kt),Kt.forEach(t),nfo=i(js),Vh=n(js,"DIV",{class:!0});var oNe=s(Vh);T(M6.$$.fragment,oNe),sfo=i(oNe),zae=n(oNe,"P",{});var jWr=s(zae);lfo=r(jWr,"Register a new processor for this class."),jWr.forEach(t),oNe.forEach(t),js.forEach(t),KPe=i(f),Mi=n(f,"H2",{class:!0});var rNe=s(Mi);Xh=n(rNe,"A",{id:!0,class:!0,href:!0});var DWr=s(Xh);Qae=n(DWr,"SPAN",{});var GWr=s(Qae);T(E6.$$.fragment,GWr),GWr.forEach(t),DWr.forEach(t),ifo=i(rNe),Wae=n(rNe,"SPAN",{});var OWr=s(Wae);dfo=r(OWr,"AutoModel"),OWr.forEach(t),rNe.forEach(t),ZPe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(C6.$$.fragment,Ds),cfo=i(Ds),Ei=n(Ds,"P",{});var lK=s(Ei);ffo=r(lK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qP=n(lK,"A",{href:!0});var VWr=s(qP);mfo=r(VWr,"from_pretrained()"),VWr.forEach(t),gfo=r(lK," class method or the "),NP=n(lK,"A",{href:!0});var XWr=s(NP);hfo=r(XWr,"from_config()"),XWr.forEach(t),pfo=r(lK,` class
method.`),lK.forEach(t),ufo=i(Ds),w6=n(Ds,"P",{});var tNe=s(w6);_fo=r(tNe,"This class cannot be instantiated directly using "),Hae=n(tNe,"CODE",{});var zWr=s(Hae);bfo=r(zWr,"__init__()"),zWr.forEach(t),vfo=r(tNe," (throws an error)."),tNe.forEach(t),Ffo=i(Ds),ot=n(Ds,"DIV",{class:!0});var Z3=s(ot);T(A6.$$.fragment,Z3),Tfo=i(Z3),Uae=n(Z3,"P",{});var QWr=s(Uae);Mfo=r(QWr,"Instantiates one of the base model classes of the library from a configuration."),QWr.forEach(t),Efo=i(Z3),Ci=n(Z3,"P",{});var iK=s(Ci);Cfo=r(iK,`Note:
Loading a model from its configuration file does `),Jae=n(iK,"STRONG",{});var WWr=s(Jae);wfo=r(WWr,"not"),WWr.forEach(t),Afo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jP=n(iK,"A",{href:!0});var HWr=s(jP);yfo=r(HWr,"from_pretrained()"),HWr.forEach(t),Lfo=r(iK," to load the model weights."),iK.forEach(t),xfo=i(Z3),T(zh.$$.fragment,Z3),Z3.forEach(t),$fo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(y6.$$.fragment,Zt),kfo=i(Zt),Yae=n(Zt,"P",{});var UWr=s(Yae);Sfo=r(UWr,"Instantiate one of the base model classes of the library from a pretrained model."),UWr.forEach(t),Rfo=i(Zt),Aa=n(Zt,"P",{});var ew=s(Aa);Bfo=r(ew,"The model class to instantiate is selected based on the "),Kae=n(ew,"CODE",{});var JWr=s(Kae);Pfo=r(JWr,"model_type"),JWr.forEach(t),Ifo=r(ew,` property of the config object (either
passed as an argument or loaded from `),Zae=n(ew,"CODE",{});var YWr=s(Zae);qfo=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),Nfo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=n(ew,"CODE",{});var KWr=s(ene);jfo=r(KWr,"pretrained_model_name_or_path"),KWr.forEach(t),Dfo=r(ew,":"),ew.forEach(t),Gfo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Qh=n($,"LI",{});var D3e=s(Qh);one=n(D3e,"STRONG",{});var ZWr=s(one);Ofo=r(ZWr,"albert"),ZWr.forEach(t),Vfo=r(D3e," \u2014 "),DP=n(D3e,"A",{href:!0});var eHr=s(DP);Xfo=r(eHr,"AlbertModel"),eHr.forEach(t),zfo=r(D3e," (ALBERT model)"),D3e.forEach(t),Qfo=i($),Wh=n($,"LI",{});var G3e=s(Wh);rne=n(G3e,"STRONG",{});var oHr=s(rne);Wfo=r(oHr,"bart"),oHr.forEach(t),Hfo=r(G3e," \u2014 "),GP=n(G3e,"A",{href:!0});var rHr=s(GP);Ufo=r(rHr,"BartModel"),rHr.forEach(t),Jfo=r(G3e," (BART model)"),G3e.forEach(t),Yfo=i($),Hh=n($,"LI",{});var O3e=s(Hh);tne=n(O3e,"STRONG",{});var tHr=s(tne);Kfo=r(tHr,"beit"),tHr.forEach(t),Zfo=r(O3e," \u2014 "),OP=n(O3e,"A",{href:!0});var aHr=s(OP);emo=r(aHr,"BeitModel"),aHr.forEach(t),omo=r(O3e," (BEiT model)"),O3e.forEach(t),rmo=i($),Uh=n($,"LI",{});var V3e=s(Uh);ane=n(V3e,"STRONG",{});var nHr=s(ane);tmo=r(nHr,"bert"),nHr.forEach(t),amo=r(V3e," \u2014 "),VP=n(V3e,"A",{href:!0});var sHr=s(VP);nmo=r(sHr,"BertModel"),sHr.forEach(t),smo=r(V3e," (BERT model)"),V3e.forEach(t),lmo=i($),Jh=n($,"LI",{});var X3e=s(Jh);nne=n(X3e,"STRONG",{});var lHr=s(nne);imo=r(lHr,"bert-generation"),lHr.forEach(t),dmo=r(X3e," \u2014 "),XP=n(X3e,"A",{href:!0});var iHr=s(XP);cmo=r(iHr,"BertGenerationEncoder"),iHr.forEach(t),fmo=r(X3e," (Bert Generation model)"),X3e.forEach(t),mmo=i($),Yh=n($,"LI",{});var z3e=s(Yh);sne=n(z3e,"STRONG",{});var dHr=s(sne);gmo=r(dHr,"big_bird"),dHr.forEach(t),hmo=r(z3e," \u2014 "),zP=n(z3e,"A",{href:!0});var cHr=s(zP);pmo=r(cHr,"BigBirdModel"),cHr.forEach(t),umo=r(z3e," (BigBird model)"),z3e.forEach(t),_mo=i($),Kh=n($,"LI",{});var Q3e=s(Kh);lne=n(Q3e,"STRONG",{});var fHr=s(lne);bmo=r(fHr,"bigbird_pegasus"),fHr.forEach(t),vmo=r(Q3e," \u2014 "),QP=n(Q3e,"A",{href:!0});var mHr=s(QP);Fmo=r(mHr,"BigBirdPegasusModel"),mHr.forEach(t),Tmo=r(Q3e," (BigBirdPegasus model)"),Q3e.forEach(t),Mmo=i($),Zh=n($,"LI",{});var W3e=s(Zh);ine=n(W3e,"STRONG",{});var gHr=s(ine);Emo=r(gHr,"blenderbot"),gHr.forEach(t),Cmo=r(W3e," \u2014 "),WP=n(W3e,"A",{href:!0});var hHr=s(WP);wmo=r(hHr,"BlenderbotModel"),hHr.forEach(t),Amo=r(W3e," (Blenderbot model)"),W3e.forEach(t),ymo=i($),ep=n($,"LI",{});var H3e=s(ep);dne=n(H3e,"STRONG",{});var pHr=s(dne);Lmo=r(pHr,"blenderbot-small"),pHr.forEach(t),xmo=r(H3e," \u2014 "),HP=n(H3e,"A",{href:!0});var uHr=s(HP);$mo=r(uHr,"BlenderbotSmallModel"),uHr.forEach(t),kmo=r(H3e," (BlenderbotSmall model)"),H3e.forEach(t),Smo=i($),op=n($,"LI",{});var U3e=s(op);cne=n(U3e,"STRONG",{});var _Hr=s(cne);Rmo=r(_Hr,"camembert"),_Hr.forEach(t),Bmo=r(U3e," \u2014 "),UP=n(U3e,"A",{href:!0});var bHr=s(UP);Pmo=r(bHr,"CamembertModel"),bHr.forEach(t),Imo=r(U3e," (CamemBERT model)"),U3e.forEach(t),qmo=i($),rp=n($,"LI",{});var J3e=s(rp);fne=n(J3e,"STRONG",{});var vHr=s(fne);Nmo=r(vHr,"canine"),vHr.forEach(t),jmo=r(J3e," \u2014 "),JP=n(J3e,"A",{href:!0});var FHr=s(JP);Dmo=r(FHr,"CanineModel"),FHr.forEach(t),Gmo=r(J3e," (Canine model)"),J3e.forEach(t),Omo=i($),tp=n($,"LI",{});var Y3e=s(tp);mne=n(Y3e,"STRONG",{});var THr=s(mne);Vmo=r(THr,"clip"),THr.forEach(t),Xmo=r(Y3e," \u2014 "),YP=n(Y3e,"A",{href:!0});var MHr=s(YP);zmo=r(MHr,"CLIPModel"),MHr.forEach(t),Qmo=r(Y3e," (CLIP model)"),Y3e.forEach(t),Wmo=i($),ap=n($,"LI",{});var K3e=s(ap);gne=n(K3e,"STRONG",{});var EHr=s(gne);Hmo=r(EHr,"convbert"),EHr.forEach(t),Umo=r(K3e," \u2014 "),KP=n(K3e,"A",{href:!0});var CHr=s(KP);Jmo=r(CHr,"ConvBertModel"),CHr.forEach(t),Ymo=r(K3e," (ConvBERT model)"),K3e.forEach(t),Kmo=i($),np=n($,"LI",{});var Z3e=s(np);hne=n(Z3e,"STRONG",{});var wHr=s(hne);Zmo=r(wHr,"convnext"),wHr.forEach(t),ego=r(Z3e," \u2014 "),ZP=n(Z3e,"A",{href:!0});var AHr=s(ZP);ogo=r(AHr,"ConvNextModel"),AHr.forEach(t),rgo=r(Z3e," (ConvNext model)"),Z3e.forEach(t),tgo=i($),sp=n($,"LI",{});var ewe=s(sp);pne=n(ewe,"STRONG",{});var yHr=s(pne);ago=r(yHr,"ctrl"),yHr.forEach(t),ngo=r(ewe," \u2014 "),eI=n(ewe,"A",{href:!0});var LHr=s(eI);sgo=r(LHr,"CTRLModel"),LHr.forEach(t),lgo=r(ewe," (CTRL model)"),ewe.forEach(t),igo=i($),lp=n($,"LI",{});var owe=s(lp);une=n(owe,"STRONG",{});var xHr=s(une);dgo=r(xHr,"data2vec-audio"),xHr.forEach(t),cgo=r(owe," \u2014 "),oI=n(owe,"A",{href:!0});var $Hr=s(oI);fgo=r($Hr,"Data2VecAudioModel"),$Hr.forEach(t),mgo=r(owe," (Data2VecAudio model)"),owe.forEach(t),ggo=i($),ip=n($,"LI",{});var rwe=s(ip);_ne=n(rwe,"STRONG",{});var kHr=s(_ne);hgo=r(kHr,"data2vec-text"),kHr.forEach(t),pgo=r(rwe," \u2014 "),rI=n(rwe,"A",{href:!0});var SHr=s(rI);ugo=r(SHr,"Data2VecTextModel"),SHr.forEach(t),_go=r(rwe," (Data2VecText model)"),rwe.forEach(t),bgo=i($),dp=n($,"LI",{});var twe=s(dp);bne=n(twe,"STRONG",{});var RHr=s(bne);vgo=r(RHr,"data2vec-vision"),RHr.forEach(t),Fgo=r(twe," \u2014 "),tI=n(twe,"A",{href:!0});var BHr=s(tI);Tgo=r(BHr,"Data2VecVisionModel"),BHr.forEach(t),Mgo=r(twe," (Data2VecVision model)"),twe.forEach(t),Ego=i($),cp=n($,"LI",{});var awe=s(cp);vne=n(awe,"STRONG",{});var PHr=s(vne);Cgo=r(PHr,"deberta"),PHr.forEach(t),wgo=r(awe," \u2014 "),aI=n(awe,"A",{href:!0});var IHr=s(aI);Ago=r(IHr,"DebertaModel"),IHr.forEach(t),ygo=r(awe," (DeBERTa model)"),awe.forEach(t),Lgo=i($),fp=n($,"LI",{});var nwe=s(fp);Fne=n(nwe,"STRONG",{});var qHr=s(Fne);xgo=r(qHr,"deberta-v2"),qHr.forEach(t),$go=r(nwe," \u2014 "),nI=n(nwe,"A",{href:!0});var NHr=s(nI);kgo=r(NHr,"DebertaV2Model"),NHr.forEach(t),Sgo=r(nwe," (DeBERTa-v2 model)"),nwe.forEach(t),Rgo=i($),mp=n($,"LI",{});var swe=s(mp);Tne=n(swe,"STRONG",{});var jHr=s(Tne);Bgo=r(jHr,"decision_transformer"),jHr.forEach(t),Pgo=r(swe," \u2014 "),sI=n(swe,"A",{href:!0});var DHr=s(sI);Igo=r(DHr,"DecisionTransformerModel"),DHr.forEach(t),qgo=r(swe," (Decision Transformer model)"),swe.forEach(t),Ngo=i($),gp=n($,"LI",{});var lwe=s(gp);Mne=n(lwe,"STRONG",{});var GHr=s(Mne);jgo=r(GHr,"deit"),GHr.forEach(t),Dgo=r(lwe," \u2014 "),lI=n(lwe,"A",{href:!0});var OHr=s(lI);Ggo=r(OHr,"DeiTModel"),OHr.forEach(t),Ogo=r(lwe," (DeiT model)"),lwe.forEach(t),Vgo=i($),hp=n($,"LI",{});var iwe=s(hp);Ene=n(iwe,"STRONG",{});var VHr=s(Ene);Xgo=r(VHr,"detr"),VHr.forEach(t),zgo=r(iwe," \u2014 "),iI=n(iwe,"A",{href:!0});var XHr=s(iI);Qgo=r(XHr,"DetrModel"),XHr.forEach(t),Wgo=r(iwe," (DETR model)"),iwe.forEach(t),Hgo=i($),pp=n($,"LI",{});var dwe=s(pp);Cne=n(dwe,"STRONG",{});var zHr=s(Cne);Ugo=r(zHr,"distilbert"),zHr.forEach(t),Jgo=r(dwe," \u2014 "),dI=n(dwe,"A",{href:!0});var QHr=s(dI);Ygo=r(QHr,"DistilBertModel"),QHr.forEach(t),Kgo=r(dwe," (DistilBERT model)"),dwe.forEach(t),Zgo=i($),up=n($,"LI",{});var cwe=s(up);wne=n(cwe,"STRONG",{});var WHr=s(wne);eho=r(WHr,"dpr"),WHr.forEach(t),oho=r(cwe," \u2014 "),cI=n(cwe,"A",{href:!0});var HHr=s(cI);rho=r(HHr,"DPRQuestionEncoder"),HHr.forEach(t),tho=r(cwe," (DPR model)"),cwe.forEach(t),aho=i($),_p=n($,"LI",{});var fwe=s(_p);Ane=n(fwe,"STRONG",{});var UHr=s(Ane);nho=r(UHr,"dpt"),UHr.forEach(t),sho=r(fwe," \u2014 "),fI=n(fwe,"A",{href:!0});var JHr=s(fI);lho=r(JHr,"DPTModel"),JHr.forEach(t),iho=r(fwe," (DPT model)"),fwe.forEach(t),dho=i($),bp=n($,"LI",{});var mwe=s(bp);yne=n(mwe,"STRONG",{});var YHr=s(yne);cho=r(YHr,"electra"),YHr.forEach(t),fho=r(mwe," \u2014 "),mI=n(mwe,"A",{href:!0});var KHr=s(mI);mho=r(KHr,"ElectraModel"),KHr.forEach(t),gho=r(mwe," (ELECTRA model)"),mwe.forEach(t),hho=i($),vp=n($,"LI",{});var gwe=s(vp);Lne=n(gwe,"STRONG",{});var ZHr=s(Lne);pho=r(ZHr,"flaubert"),ZHr.forEach(t),uho=r(gwe," \u2014 "),gI=n(gwe,"A",{href:!0});var eUr=s(gI);_ho=r(eUr,"FlaubertModel"),eUr.forEach(t),bho=r(gwe," (FlauBERT model)"),gwe.forEach(t),vho=i($),Fp=n($,"LI",{});var hwe=s(Fp);xne=n(hwe,"STRONG",{});var oUr=s(xne);Fho=r(oUr,"flava"),oUr.forEach(t),Tho=r(hwe," \u2014 "),hI=n(hwe,"A",{href:!0});var rUr=s(hI);Mho=r(rUr,"FlavaModel"),rUr.forEach(t),Eho=r(hwe," (Flava model)"),hwe.forEach(t),Cho=i($),Tp=n($,"LI",{});var pwe=s(Tp);$ne=n(pwe,"STRONG",{});var tUr=s($ne);who=r(tUr,"fnet"),tUr.forEach(t),Aho=r(pwe," \u2014 "),pI=n(pwe,"A",{href:!0});var aUr=s(pI);yho=r(aUr,"FNetModel"),aUr.forEach(t),Lho=r(pwe," (FNet model)"),pwe.forEach(t),xho=i($),Mp=n($,"LI",{});var uwe=s(Mp);kne=n(uwe,"STRONG",{});var nUr=s(kne);$ho=r(nUr,"fsmt"),nUr.forEach(t),kho=r(uwe," \u2014 "),uI=n(uwe,"A",{href:!0});var sUr=s(uI);Sho=r(sUr,"FSMTModel"),sUr.forEach(t),Rho=r(uwe," (FairSeq Machine-Translation model)"),uwe.forEach(t),Bho=i($),Rs=n($,"LI",{});var f$=s(Rs);Sne=n(f$,"STRONG",{});var lUr=s(Sne);Pho=r(lUr,"funnel"),lUr.forEach(t),Iho=r(f$," \u2014 "),_I=n(f$,"A",{href:!0});var iUr=s(_I);qho=r(iUr,"FunnelModel"),iUr.forEach(t),Nho=r(f$," or "),bI=n(f$,"A",{href:!0});var dUr=s(bI);jho=r(dUr,"FunnelBaseModel"),dUr.forEach(t),Dho=r(f$," (Funnel Transformer model)"),f$.forEach(t),Gho=i($),Ep=n($,"LI",{});var _we=s(Ep);Rne=n(_we,"STRONG",{});var cUr=s(Rne);Oho=r(cUr,"glpn"),cUr.forEach(t),Vho=r(_we," \u2014 "),vI=n(_we,"A",{href:!0});var fUr=s(vI);Xho=r(fUr,"GLPNModel"),fUr.forEach(t),zho=r(_we," (GLPN model)"),_we.forEach(t),Qho=i($),Cp=n($,"LI",{});var bwe=s(Cp);Bne=n(bwe,"STRONG",{});var mUr=s(Bne);Who=r(mUr,"gpt2"),mUr.forEach(t),Hho=r(bwe," \u2014 "),FI=n(bwe,"A",{href:!0});var gUr=s(FI);Uho=r(gUr,"GPT2Model"),gUr.forEach(t),Jho=r(bwe," (OpenAI GPT-2 model)"),bwe.forEach(t),Yho=i($),wp=n($,"LI",{});var vwe=s(wp);Pne=n(vwe,"STRONG",{});var hUr=s(Pne);Kho=r(hUr,"gpt_neo"),hUr.forEach(t),Zho=r(vwe," \u2014 "),TI=n(vwe,"A",{href:!0});var pUr=s(TI);epo=r(pUr,"GPTNeoModel"),pUr.forEach(t),opo=r(vwe," (GPT Neo model)"),vwe.forEach(t),rpo=i($),Ap=n($,"LI",{});var Fwe=s(Ap);Ine=n(Fwe,"STRONG",{});var uUr=s(Ine);tpo=r(uUr,"gptj"),uUr.forEach(t),apo=r(Fwe," \u2014 "),MI=n(Fwe,"A",{href:!0});var _Ur=s(MI);npo=r(_Ur,"GPTJModel"),_Ur.forEach(t),spo=r(Fwe," (GPT-J model)"),Fwe.forEach(t),lpo=i($),yp=n($,"LI",{});var Twe=s(yp);qne=n(Twe,"STRONG",{});var bUr=s(qne);ipo=r(bUr,"hubert"),bUr.forEach(t),dpo=r(Twe," \u2014 "),EI=n(Twe,"A",{href:!0});var vUr=s(EI);cpo=r(vUr,"HubertModel"),vUr.forEach(t),fpo=r(Twe," (Hubert model)"),Twe.forEach(t),mpo=i($),Lp=n($,"LI",{});var Mwe=s(Lp);Nne=n(Mwe,"STRONG",{});var FUr=s(Nne);gpo=r(FUr,"ibert"),FUr.forEach(t),hpo=r(Mwe," \u2014 "),CI=n(Mwe,"A",{href:!0});var TUr=s(CI);ppo=r(TUr,"IBertModel"),TUr.forEach(t),upo=r(Mwe," (I-BERT model)"),Mwe.forEach(t),_po=i($),xp=n($,"LI",{});var Ewe=s(xp);jne=n(Ewe,"STRONG",{});var MUr=s(jne);bpo=r(MUr,"imagegpt"),MUr.forEach(t),vpo=r(Ewe," \u2014 "),wI=n(Ewe,"A",{href:!0});var EUr=s(wI);Fpo=r(EUr,"ImageGPTModel"),EUr.forEach(t),Tpo=r(Ewe," (ImageGPT model)"),Ewe.forEach(t),Mpo=i($),$p=n($,"LI",{});var Cwe=s($p);Dne=n(Cwe,"STRONG",{});var CUr=s(Dne);Epo=r(CUr,"layoutlm"),CUr.forEach(t),Cpo=r(Cwe," \u2014 "),AI=n(Cwe,"A",{href:!0});var wUr=s(AI);wpo=r(wUr,"LayoutLMModel"),wUr.forEach(t),Apo=r(Cwe," (LayoutLM model)"),Cwe.forEach(t),ypo=i($),kp=n($,"LI",{});var wwe=s(kp);Gne=n(wwe,"STRONG",{});var AUr=s(Gne);Lpo=r(AUr,"layoutlmv2"),AUr.forEach(t),xpo=r(wwe," \u2014 "),yI=n(wwe,"A",{href:!0});var yUr=s(yI);$po=r(yUr,"LayoutLMv2Model"),yUr.forEach(t),kpo=r(wwe," (LayoutLMv2 model)"),wwe.forEach(t),Spo=i($),Sp=n($,"LI",{});var Awe=s(Sp);One=n(Awe,"STRONG",{});var LUr=s(One);Rpo=r(LUr,"led"),LUr.forEach(t),Bpo=r(Awe," \u2014 "),LI=n(Awe,"A",{href:!0});var xUr=s(LI);Ppo=r(xUr,"LEDModel"),xUr.forEach(t),Ipo=r(Awe," (LED model)"),Awe.forEach(t),qpo=i($),Rp=n($,"LI",{});var ywe=s(Rp);Vne=n(ywe,"STRONG",{});var $Ur=s(Vne);Npo=r($Ur,"longformer"),$Ur.forEach(t),jpo=r(ywe," \u2014 "),xI=n(ywe,"A",{href:!0});var kUr=s(xI);Dpo=r(kUr,"LongformerModel"),kUr.forEach(t),Gpo=r(ywe," (Longformer model)"),ywe.forEach(t),Opo=i($),Bp=n($,"LI",{});var Lwe=s(Bp);Xne=n(Lwe,"STRONG",{});var SUr=s(Xne);Vpo=r(SUr,"luke"),SUr.forEach(t),Xpo=r(Lwe," \u2014 "),$I=n(Lwe,"A",{href:!0});var RUr=s($I);zpo=r(RUr,"LukeModel"),RUr.forEach(t),Qpo=r(Lwe," (LUKE model)"),Lwe.forEach(t),Wpo=i($),Pp=n($,"LI",{});var xwe=s(Pp);zne=n(xwe,"STRONG",{});var BUr=s(zne);Hpo=r(BUr,"lxmert"),BUr.forEach(t),Upo=r(xwe," \u2014 "),kI=n(xwe,"A",{href:!0});var PUr=s(kI);Jpo=r(PUr,"LxmertModel"),PUr.forEach(t),Ypo=r(xwe," (LXMERT model)"),xwe.forEach(t),Kpo=i($),Ip=n($,"LI",{});var $we=s(Ip);Qne=n($we,"STRONG",{});var IUr=s(Qne);Zpo=r(IUr,"m2m_100"),IUr.forEach(t),euo=r($we," \u2014 "),SI=n($we,"A",{href:!0});var qUr=s(SI);ouo=r(qUr,"M2M100Model"),qUr.forEach(t),ruo=r($we," (M2M100 model)"),$we.forEach(t),tuo=i($),qp=n($,"LI",{});var kwe=s(qp);Wne=n(kwe,"STRONG",{});var NUr=s(Wne);auo=r(NUr,"marian"),NUr.forEach(t),nuo=r(kwe," \u2014 "),RI=n(kwe,"A",{href:!0});var jUr=s(RI);suo=r(jUr,"MarianModel"),jUr.forEach(t),luo=r(kwe," (Marian model)"),kwe.forEach(t),iuo=i($),Np=n($,"LI",{});var Swe=s(Np);Hne=n(Swe,"STRONG",{});var DUr=s(Hne);duo=r(DUr,"maskformer"),DUr.forEach(t),cuo=r(Swe," \u2014 "),BI=n(Swe,"A",{href:!0});var GUr=s(BI);fuo=r(GUr,"MaskFormerModel"),GUr.forEach(t),muo=r(Swe," (MaskFormer model)"),Swe.forEach(t),guo=i($),jp=n($,"LI",{});var Rwe=s(jp);Une=n(Rwe,"STRONG",{});var OUr=s(Une);huo=r(OUr,"mbart"),OUr.forEach(t),puo=r(Rwe," \u2014 "),PI=n(Rwe,"A",{href:!0});var VUr=s(PI);uuo=r(VUr,"MBartModel"),VUr.forEach(t),_uo=r(Rwe," (mBART model)"),Rwe.forEach(t),buo=i($),Dp=n($,"LI",{});var Bwe=s(Dp);Jne=n(Bwe,"STRONG",{});var XUr=s(Jne);vuo=r(XUr,"megatron-bert"),XUr.forEach(t),Fuo=r(Bwe," \u2014 "),II=n(Bwe,"A",{href:!0});var zUr=s(II);Tuo=r(zUr,"MegatronBertModel"),zUr.forEach(t),Muo=r(Bwe," (MegatronBert model)"),Bwe.forEach(t),Euo=i($),Gp=n($,"LI",{});var Pwe=s(Gp);Yne=n(Pwe,"STRONG",{});var QUr=s(Yne);Cuo=r(QUr,"mobilebert"),QUr.forEach(t),wuo=r(Pwe," \u2014 "),qI=n(Pwe,"A",{href:!0});var WUr=s(qI);Auo=r(WUr,"MobileBertModel"),WUr.forEach(t),yuo=r(Pwe," (MobileBERT model)"),Pwe.forEach(t),Luo=i($),Op=n($,"LI",{});var Iwe=s(Op);Kne=n(Iwe,"STRONG",{});var HUr=s(Kne);xuo=r(HUr,"mpnet"),HUr.forEach(t),$uo=r(Iwe," \u2014 "),NI=n(Iwe,"A",{href:!0});var UUr=s(NI);kuo=r(UUr,"MPNetModel"),UUr.forEach(t),Suo=r(Iwe," (MPNet model)"),Iwe.forEach(t),Ruo=i($),Vp=n($,"LI",{});var qwe=s(Vp);Zne=n(qwe,"STRONG",{});var JUr=s(Zne);Buo=r(JUr,"mt5"),JUr.forEach(t),Puo=r(qwe," \u2014 "),jI=n(qwe,"A",{href:!0});var YUr=s(jI);Iuo=r(YUr,"MT5Model"),YUr.forEach(t),quo=r(qwe," (mT5 model)"),qwe.forEach(t),Nuo=i($),Xp=n($,"LI",{});var Nwe=s(Xp);ese=n(Nwe,"STRONG",{});var KUr=s(ese);juo=r(KUr,"nystromformer"),KUr.forEach(t),Duo=r(Nwe," \u2014 "),DI=n(Nwe,"A",{href:!0});var ZUr=s(DI);Guo=r(ZUr,"NystromformerModel"),ZUr.forEach(t),Ouo=r(Nwe," (Nystromformer model)"),Nwe.forEach(t),Vuo=i($),zp=n($,"LI",{});var jwe=s(zp);ose=n(jwe,"STRONG",{});var eJr=s(ose);Xuo=r(eJr,"openai-gpt"),eJr.forEach(t),zuo=r(jwe," \u2014 "),GI=n(jwe,"A",{href:!0});var oJr=s(GI);Quo=r(oJr,"OpenAIGPTModel"),oJr.forEach(t),Wuo=r(jwe," (OpenAI GPT model)"),jwe.forEach(t),Huo=i($),Qp=n($,"LI",{});var Dwe=s(Qp);rse=n(Dwe,"STRONG",{});var rJr=s(rse);Uuo=r(rJr,"opt"),rJr.forEach(t),Juo=r(Dwe," \u2014 "),OI=n(Dwe,"A",{href:!0});var tJr=s(OI);Yuo=r(tJr,"OPTModel"),tJr.forEach(t),Kuo=r(Dwe," (OPT model)"),Dwe.forEach(t),Zuo=i($),Wp=n($,"LI",{});var Gwe=s(Wp);tse=n(Gwe,"STRONG",{});var aJr=s(tse);e_o=r(aJr,"pegasus"),aJr.forEach(t),o_o=r(Gwe," \u2014 "),VI=n(Gwe,"A",{href:!0});var nJr=s(VI);r_o=r(nJr,"PegasusModel"),nJr.forEach(t),t_o=r(Gwe," (Pegasus model)"),Gwe.forEach(t),a_o=i($),Hp=n($,"LI",{});var Owe=s(Hp);ase=n(Owe,"STRONG",{});var sJr=s(ase);n_o=r(sJr,"perceiver"),sJr.forEach(t),s_o=r(Owe," \u2014 "),XI=n(Owe,"A",{href:!0});var lJr=s(XI);l_o=r(lJr,"PerceiverModel"),lJr.forEach(t),i_o=r(Owe," (Perceiver model)"),Owe.forEach(t),d_o=i($),Up=n($,"LI",{});var Vwe=s(Up);nse=n(Vwe,"STRONG",{});var iJr=s(nse);c_o=r(iJr,"plbart"),iJr.forEach(t),f_o=r(Vwe," \u2014 "),zI=n(Vwe,"A",{href:!0});var dJr=s(zI);m_o=r(dJr,"PLBartModel"),dJr.forEach(t),g_o=r(Vwe," (PLBart model)"),Vwe.forEach(t),h_o=i($),Jp=n($,"LI",{});var Xwe=s(Jp);sse=n(Xwe,"STRONG",{});var cJr=s(sse);p_o=r(cJr,"poolformer"),cJr.forEach(t),u_o=r(Xwe," \u2014 "),QI=n(Xwe,"A",{href:!0});var fJr=s(QI);__o=r(fJr,"PoolFormerModel"),fJr.forEach(t),b_o=r(Xwe," (PoolFormer model)"),Xwe.forEach(t),v_o=i($),Yp=n($,"LI",{});var zwe=s(Yp);lse=n(zwe,"STRONG",{});var mJr=s(lse);F_o=r(mJr,"prophetnet"),mJr.forEach(t),T_o=r(zwe," \u2014 "),WI=n(zwe,"A",{href:!0});var gJr=s(WI);M_o=r(gJr,"ProphetNetModel"),gJr.forEach(t),E_o=r(zwe," (ProphetNet model)"),zwe.forEach(t),C_o=i($),Kp=n($,"LI",{});var Qwe=s(Kp);ise=n(Qwe,"STRONG",{});var hJr=s(ise);w_o=r(hJr,"qdqbert"),hJr.forEach(t),A_o=r(Qwe," \u2014 "),HI=n(Qwe,"A",{href:!0});var pJr=s(HI);y_o=r(pJr,"QDQBertModel"),pJr.forEach(t),L_o=r(Qwe," (QDQBert model)"),Qwe.forEach(t),x_o=i($),Zp=n($,"LI",{});var Wwe=s(Zp);dse=n(Wwe,"STRONG",{});var uJr=s(dse);$_o=r(uJr,"reformer"),uJr.forEach(t),k_o=r(Wwe," \u2014 "),UI=n(Wwe,"A",{href:!0});var _Jr=s(UI);S_o=r(_Jr,"ReformerModel"),_Jr.forEach(t),R_o=r(Wwe," (Reformer model)"),Wwe.forEach(t),B_o=i($),eu=n($,"LI",{});var Hwe=s(eu);cse=n(Hwe,"STRONG",{});var bJr=s(cse);P_o=r(bJr,"regnet"),bJr.forEach(t),I_o=r(Hwe," \u2014 "),JI=n(Hwe,"A",{href:!0});var vJr=s(JI);q_o=r(vJr,"RegNetModel"),vJr.forEach(t),N_o=r(Hwe," (RegNet model)"),Hwe.forEach(t),j_o=i($),ou=n($,"LI",{});var Uwe=s(ou);fse=n(Uwe,"STRONG",{});var FJr=s(fse);D_o=r(FJr,"rembert"),FJr.forEach(t),G_o=r(Uwe," \u2014 "),YI=n(Uwe,"A",{href:!0});var TJr=s(YI);O_o=r(TJr,"RemBertModel"),TJr.forEach(t),V_o=r(Uwe," (RemBERT model)"),Uwe.forEach(t),X_o=i($),ru=n($,"LI",{});var Jwe=s(ru);mse=n(Jwe,"STRONG",{});var MJr=s(mse);z_o=r(MJr,"resnet"),MJr.forEach(t),Q_o=r(Jwe," \u2014 "),KI=n(Jwe,"A",{href:!0});var EJr=s(KI);W_o=r(EJr,"ResNetModel"),EJr.forEach(t),H_o=r(Jwe," (ResNet model)"),Jwe.forEach(t),U_o=i($),tu=n($,"LI",{});var Ywe=s(tu);gse=n(Ywe,"STRONG",{});var CJr=s(gse);J_o=r(CJr,"retribert"),CJr.forEach(t),Y_o=r(Ywe," \u2014 "),ZI=n(Ywe,"A",{href:!0});var wJr=s(ZI);K_o=r(wJr,"RetriBertModel"),wJr.forEach(t),Z_o=r(Ywe," (RetriBERT model)"),Ywe.forEach(t),e1o=i($),au=n($,"LI",{});var Kwe=s(au);hse=n(Kwe,"STRONG",{});var AJr=s(hse);o1o=r(AJr,"roberta"),AJr.forEach(t),r1o=r(Kwe," \u2014 "),eq=n(Kwe,"A",{href:!0});var yJr=s(eq);t1o=r(yJr,"RobertaModel"),yJr.forEach(t),a1o=r(Kwe," (RoBERTa model)"),Kwe.forEach(t),n1o=i($),nu=n($,"LI",{});var Zwe=s(nu);pse=n(Zwe,"STRONG",{});var LJr=s(pse);s1o=r(LJr,"roformer"),LJr.forEach(t),l1o=r(Zwe," \u2014 "),oq=n(Zwe,"A",{href:!0});var xJr=s(oq);i1o=r(xJr,"RoFormerModel"),xJr.forEach(t),d1o=r(Zwe," (RoFormer model)"),Zwe.forEach(t),c1o=i($),su=n($,"LI",{});var eAe=s(su);use=n(eAe,"STRONG",{});var $Jr=s(use);f1o=r($Jr,"segformer"),$Jr.forEach(t),m1o=r(eAe," \u2014 "),rq=n(eAe,"A",{href:!0});var kJr=s(rq);g1o=r(kJr,"SegformerModel"),kJr.forEach(t),h1o=r(eAe," (SegFormer model)"),eAe.forEach(t),p1o=i($),lu=n($,"LI",{});var oAe=s(lu);_se=n(oAe,"STRONG",{});var SJr=s(_se);u1o=r(SJr,"sew"),SJr.forEach(t),_1o=r(oAe," \u2014 "),tq=n(oAe,"A",{href:!0});var RJr=s(tq);b1o=r(RJr,"SEWModel"),RJr.forEach(t),v1o=r(oAe," (SEW model)"),oAe.forEach(t),F1o=i($),iu=n($,"LI",{});var rAe=s(iu);bse=n(rAe,"STRONG",{});var BJr=s(bse);T1o=r(BJr,"sew-d"),BJr.forEach(t),M1o=r(rAe," \u2014 "),aq=n(rAe,"A",{href:!0});var PJr=s(aq);E1o=r(PJr,"SEWDModel"),PJr.forEach(t),C1o=r(rAe," (SEW-D model)"),rAe.forEach(t),w1o=i($),du=n($,"LI",{});var tAe=s(du);vse=n(tAe,"STRONG",{});var IJr=s(vse);A1o=r(IJr,"speech_to_text"),IJr.forEach(t),y1o=r(tAe," \u2014 "),nq=n(tAe,"A",{href:!0});var qJr=s(nq);L1o=r(qJr,"Speech2TextModel"),qJr.forEach(t),x1o=r(tAe," (Speech2Text model)"),tAe.forEach(t),$1o=i($),cu=n($,"LI",{});var aAe=s(cu);Fse=n(aAe,"STRONG",{});var NJr=s(Fse);k1o=r(NJr,"splinter"),NJr.forEach(t),S1o=r(aAe," \u2014 "),sq=n(aAe,"A",{href:!0});var jJr=s(sq);R1o=r(jJr,"SplinterModel"),jJr.forEach(t),B1o=r(aAe," (Splinter model)"),aAe.forEach(t),P1o=i($),fu=n($,"LI",{});var nAe=s(fu);Tse=n(nAe,"STRONG",{});var DJr=s(Tse);I1o=r(DJr,"squeezebert"),DJr.forEach(t),q1o=r(nAe," \u2014 "),lq=n(nAe,"A",{href:!0});var GJr=s(lq);N1o=r(GJr,"SqueezeBertModel"),GJr.forEach(t),j1o=r(nAe," (SqueezeBERT model)"),nAe.forEach(t),D1o=i($),mu=n($,"LI",{});var sAe=s(mu);Mse=n(sAe,"STRONG",{});var OJr=s(Mse);G1o=r(OJr,"swin"),OJr.forEach(t),O1o=r(sAe," \u2014 "),iq=n(sAe,"A",{href:!0});var VJr=s(iq);V1o=r(VJr,"SwinModel"),VJr.forEach(t),X1o=r(sAe," (Swin model)"),sAe.forEach(t),z1o=i($),gu=n($,"LI",{});var lAe=s(gu);Ese=n(lAe,"STRONG",{});var XJr=s(Ese);Q1o=r(XJr,"t5"),XJr.forEach(t),W1o=r(lAe," \u2014 "),dq=n(lAe,"A",{href:!0});var zJr=s(dq);H1o=r(zJr,"T5Model"),zJr.forEach(t),U1o=r(lAe," (T5 model)"),lAe.forEach(t),J1o=i($),hu=n($,"LI",{});var iAe=s(hu);Cse=n(iAe,"STRONG",{});var QJr=s(Cse);Y1o=r(QJr,"tapas"),QJr.forEach(t),K1o=r(iAe," \u2014 "),cq=n(iAe,"A",{href:!0});var WJr=s(cq);Z1o=r(WJr,"TapasModel"),WJr.forEach(t),e2o=r(iAe," (TAPAS model)"),iAe.forEach(t),o2o=i($),pu=n($,"LI",{});var dAe=s(pu);wse=n(dAe,"STRONG",{});var HJr=s(wse);r2o=r(HJr,"transfo-xl"),HJr.forEach(t),t2o=r(dAe," \u2014 "),fq=n(dAe,"A",{href:!0});var UJr=s(fq);a2o=r(UJr,"TransfoXLModel"),UJr.forEach(t),n2o=r(dAe," (Transformer-XL model)"),dAe.forEach(t),s2o=i($),uu=n($,"LI",{});var cAe=s(uu);Ase=n(cAe,"STRONG",{});var JJr=s(Ase);l2o=r(JJr,"unispeech"),JJr.forEach(t),i2o=r(cAe," \u2014 "),mq=n(cAe,"A",{href:!0});var YJr=s(mq);d2o=r(YJr,"UniSpeechModel"),YJr.forEach(t),c2o=r(cAe," (UniSpeech model)"),cAe.forEach(t),f2o=i($),_u=n($,"LI",{});var fAe=s(_u);yse=n(fAe,"STRONG",{});var KJr=s(yse);m2o=r(KJr,"unispeech-sat"),KJr.forEach(t),g2o=r(fAe," \u2014 "),gq=n(fAe,"A",{href:!0});var ZJr=s(gq);h2o=r(ZJr,"UniSpeechSatModel"),ZJr.forEach(t),p2o=r(fAe," (UniSpeechSat model)"),fAe.forEach(t),u2o=i($),bu=n($,"LI",{});var mAe=s(bu);Lse=n(mAe,"STRONG",{});var eYr=s(Lse);_2o=r(eYr,"van"),eYr.forEach(t),b2o=r(mAe," \u2014 "),hq=n(mAe,"A",{href:!0});var oYr=s(hq);v2o=r(oYr,"VanModel"),oYr.forEach(t),F2o=r(mAe," (VAN model)"),mAe.forEach(t),T2o=i($),vu=n($,"LI",{});var gAe=s(vu);xse=n(gAe,"STRONG",{});var rYr=s(xse);M2o=r(rYr,"vilt"),rYr.forEach(t),E2o=r(gAe," \u2014 "),pq=n(gAe,"A",{href:!0});var tYr=s(pq);C2o=r(tYr,"ViltModel"),tYr.forEach(t),w2o=r(gAe," (ViLT model)"),gAe.forEach(t),A2o=i($),Fu=n($,"LI",{});var hAe=s(Fu);$se=n(hAe,"STRONG",{});var aYr=s($se);y2o=r(aYr,"vision-text-dual-encoder"),aYr.forEach(t),L2o=r(hAe," \u2014 "),uq=n(hAe,"A",{href:!0});var nYr=s(uq);x2o=r(nYr,"VisionTextDualEncoderModel"),nYr.forEach(t),$2o=r(hAe," (VisionTextDualEncoder model)"),hAe.forEach(t),k2o=i($),Tu=n($,"LI",{});var pAe=s(Tu);kse=n(pAe,"STRONG",{});var sYr=s(kse);S2o=r(sYr,"visual_bert"),sYr.forEach(t),R2o=r(pAe," \u2014 "),_q=n(pAe,"A",{href:!0});var lYr=s(_q);B2o=r(lYr,"VisualBertModel"),lYr.forEach(t),P2o=r(pAe," (VisualBert model)"),pAe.forEach(t),I2o=i($),Mu=n($,"LI",{});var uAe=s(Mu);Sse=n(uAe,"STRONG",{});var iYr=s(Sse);q2o=r(iYr,"vit"),iYr.forEach(t),N2o=r(uAe," \u2014 "),bq=n(uAe,"A",{href:!0});var dYr=s(bq);j2o=r(dYr,"ViTModel"),dYr.forEach(t),D2o=r(uAe," (ViT model)"),uAe.forEach(t),G2o=i($),Eu=n($,"LI",{});var _Ae=s(Eu);Rse=n(_Ae,"STRONG",{});var cYr=s(Rse);O2o=r(cYr,"vit_mae"),cYr.forEach(t),V2o=r(_Ae," \u2014 "),vq=n(_Ae,"A",{href:!0});var fYr=s(vq);X2o=r(fYr,"ViTMAEModel"),fYr.forEach(t),z2o=r(_Ae," (ViTMAE model)"),_Ae.forEach(t),Q2o=i($),Cu=n($,"LI",{});var bAe=s(Cu);Bse=n(bAe,"STRONG",{});var mYr=s(Bse);W2o=r(mYr,"wav2vec2"),mYr.forEach(t),H2o=r(bAe," \u2014 "),Fq=n(bAe,"A",{href:!0});var gYr=s(Fq);U2o=r(gYr,"Wav2Vec2Model"),gYr.forEach(t),J2o=r(bAe," (Wav2Vec2 model)"),bAe.forEach(t),Y2o=i($),wu=n($,"LI",{});var vAe=s(wu);Pse=n(vAe,"STRONG",{});var hYr=s(Pse);K2o=r(hYr,"wavlm"),hYr.forEach(t),Z2o=r(vAe," \u2014 "),Tq=n(vAe,"A",{href:!0});var pYr=s(Tq);ebo=r(pYr,"WavLMModel"),pYr.forEach(t),obo=r(vAe," (WavLM model)"),vAe.forEach(t),rbo=i($),Au=n($,"LI",{});var FAe=s(Au);Ise=n(FAe,"STRONG",{});var uYr=s(Ise);tbo=r(uYr,"xglm"),uYr.forEach(t),abo=r(FAe," \u2014 "),Mq=n(FAe,"A",{href:!0});var _Yr=s(Mq);nbo=r(_Yr,"XGLMModel"),_Yr.forEach(t),sbo=r(FAe," (XGLM model)"),FAe.forEach(t),lbo=i($),yu=n($,"LI",{});var TAe=s(yu);qse=n(TAe,"STRONG",{});var bYr=s(qse);ibo=r(bYr,"xlm"),bYr.forEach(t),dbo=r(TAe," \u2014 "),Eq=n(TAe,"A",{href:!0});var vYr=s(Eq);cbo=r(vYr,"XLMModel"),vYr.forEach(t),fbo=r(TAe," (XLM model)"),TAe.forEach(t),mbo=i($),Lu=n($,"LI",{});var MAe=s(Lu);Nse=n(MAe,"STRONG",{});var FYr=s(Nse);gbo=r(FYr,"xlm-prophetnet"),FYr.forEach(t),hbo=r(MAe," \u2014 "),Cq=n(MAe,"A",{href:!0});var TYr=s(Cq);pbo=r(TYr,"XLMProphetNetModel"),TYr.forEach(t),ubo=r(MAe," (XLMProphetNet model)"),MAe.forEach(t),_bo=i($),xu=n($,"LI",{});var EAe=s(xu);jse=n(EAe,"STRONG",{});var MYr=s(jse);bbo=r(MYr,"xlm-roberta"),MYr.forEach(t),vbo=r(EAe," \u2014 "),wq=n(EAe,"A",{href:!0});var EYr=s(wq);Fbo=r(EYr,"XLMRobertaModel"),EYr.forEach(t),Tbo=r(EAe," (XLM-RoBERTa model)"),EAe.forEach(t),Mbo=i($),$u=n($,"LI",{});var CAe=s($u);Dse=n(CAe,"STRONG",{});var CYr=s(Dse);Ebo=r(CYr,"xlm-roberta-xl"),CYr.forEach(t),Cbo=r(CAe," \u2014 "),Aq=n(CAe,"A",{href:!0});var wYr=s(Aq);wbo=r(wYr,"XLMRobertaXLModel"),wYr.forEach(t),Abo=r(CAe," (XLM-RoBERTa-XL model)"),CAe.forEach(t),ybo=i($),ku=n($,"LI",{});var wAe=s(ku);Gse=n(wAe,"STRONG",{});var AYr=s(Gse);Lbo=r(AYr,"xlnet"),AYr.forEach(t),xbo=r(wAe," \u2014 "),yq=n(wAe,"A",{href:!0});var yYr=s(yq);$bo=r(yYr,"XLNetModel"),yYr.forEach(t),kbo=r(wAe," (XLNet model)"),wAe.forEach(t),Sbo=i($),Su=n($,"LI",{});var AAe=s(Su);Ose=n(AAe,"STRONG",{});var LYr=s(Ose);Rbo=r(LYr,"yolos"),LYr.forEach(t),Bbo=r(AAe," \u2014 "),Lq=n(AAe,"A",{href:!0});var xYr=s(Lq);Pbo=r(xYr,"YolosModel"),xYr.forEach(t),Ibo=r(AAe," (YOLOS model)"),AAe.forEach(t),qbo=i($),Ru=n($,"LI",{});var yAe=s(Ru);Vse=n(yAe,"STRONG",{});var $Yr=s(Vse);Nbo=r($Yr,"yoso"),$Yr.forEach(t),jbo=r(yAe," \u2014 "),xq=n(yAe,"A",{href:!0});var kYr=s(xq);Dbo=r(kYr,"YosoModel"),kYr.forEach(t),Gbo=r(yAe," (YOSO model)"),yAe.forEach(t),$.forEach(t),Obo=i(Zt),Bu=n(Zt,"P",{});var LAe=s(Bu);Vbo=r(LAe,"The model is set in evaluation mode by default using "),Xse=n(LAe,"CODE",{});var SYr=s(Xse);Xbo=r(SYr,"model.eval()"),SYr.forEach(t),zbo=r(LAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=n(LAe,"CODE",{});var RYr=s(zse);Qbo=r(RYr,"model.train()"),RYr.forEach(t),LAe.forEach(t),Wbo=i(Zt),T(Pu.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),eIe=i(f),wi=n(f,"H2",{class:!0});var aNe=s(wi);Iu=n(aNe,"A",{id:!0,class:!0,href:!0});var BYr=s(Iu);Qse=n(BYr,"SPAN",{});var PYr=s(Qse);T(L6.$$.fragment,PYr),PYr.forEach(t),BYr.forEach(t),Hbo=i(aNe),Wse=n(aNe,"SPAN",{});var IYr=s(Wse);Ubo=r(IYr,"AutoModelForPreTraining"),IYr.forEach(t),aNe.forEach(t),oIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(x6.$$.fragment,Gs),Jbo=i(Gs),Ai=n(Gs,"P",{});var dK=s(Ai);Ybo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$q=n(dK,"A",{href:!0});var qYr=s($q);Kbo=r(qYr,"from_pretrained()"),qYr.forEach(t),Zbo=r(dK," class method or the "),kq=n(dK,"A",{href:!0});var NYr=s(kq);evo=r(NYr,"from_config()"),NYr.forEach(t),ovo=r(dK,` class
method.`),dK.forEach(t),rvo=i(Gs),$6=n(Gs,"P",{});var nNe=s($6);tvo=r(nNe,"This class cannot be instantiated directly using "),Hse=n(nNe,"CODE",{});var jYr=s(Hse);avo=r(jYr,"__init__()"),jYr.forEach(t),nvo=r(nNe," (throws an error)."),nNe.forEach(t),svo=i(Gs),rt=n(Gs,"DIV",{class:!0});var ow=s(rt);T(k6.$$.fragment,ow),lvo=i(ow),Use=n(ow,"P",{});var DYr=s(Use);ivo=r(DYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DYr.forEach(t),dvo=i(ow),yi=n(ow,"P",{});var cK=s(yi);cvo=r(cK,`Note:
Loading a model from its configuration file does `),Jse=n(cK,"STRONG",{});var GYr=s(Jse);fvo=r(GYr,"not"),GYr.forEach(t),mvo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sq=n(cK,"A",{href:!0});var OYr=s(Sq);gvo=r(OYr,"from_pretrained()"),OYr.forEach(t),hvo=r(cK," to load the model weights."),cK.forEach(t),pvo=i(ow),T(qu.$$.fragment,ow),ow.forEach(t),uvo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(S6.$$.fragment,ea),_vo=i(ea),Yse=n(ea,"P",{});var VYr=s(Yse);bvo=r(VYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VYr.forEach(t),vvo=i(ea),ya=n(ea,"P",{});var rw=s(ya);Fvo=r(rw,"The model class to instantiate is selected based on the "),Kse=n(rw,"CODE",{});var XYr=s(Kse);Tvo=r(XYr,"model_type"),XYr.forEach(t),Mvo=r(rw,` property of the config object (either
passed as an argument or loaded from `),Zse=n(rw,"CODE",{});var zYr=s(Zse);Evo=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),Cvo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(rw,"CODE",{});var QYr=s(ele);wvo=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),Avo=r(rw,":"),rw.forEach(t),yvo=i(ea),G=n(ea,"UL",{});var V=s(G);Nu=n(V,"LI",{});var xAe=s(Nu);ole=n(xAe,"STRONG",{});var WYr=s(ole);Lvo=r(WYr,"albert"),WYr.forEach(t),xvo=r(xAe," \u2014 "),Rq=n(xAe,"A",{href:!0});var HYr=s(Rq);$vo=r(HYr,"AlbertForPreTraining"),HYr.forEach(t),kvo=r(xAe," (ALBERT model)"),xAe.forEach(t),Svo=i(V),ju=n(V,"LI",{});var $Ae=s(ju);rle=n($Ae,"STRONG",{});var UYr=s(rle);Rvo=r(UYr,"bart"),UYr.forEach(t),Bvo=r($Ae," \u2014 "),Bq=n($Ae,"A",{href:!0});var JYr=s(Bq);Pvo=r(JYr,"BartForConditionalGeneration"),JYr.forEach(t),Ivo=r($Ae," (BART model)"),$Ae.forEach(t),qvo=i(V),Du=n(V,"LI",{});var kAe=s(Du);tle=n(kAe,"STRONG",{});var YYr=s(tle);Nvo=r(YYr,"bert"),YYr.forEach(t),jvo=r(kAe," \u2014 "),Pq=n(kAe,"A",{href:!0});var KYr=s(Pq);Dvo=r(KYr,"BertForPreTraining"),KYr.forEach(t),Gvo=r(kAe," (BERT model)"),kAe.forEach(t),Ovo=i(V),Gu=n(V,"LI",{});var SAe=s(Gu);ale=n(SAe,"STRONG",{});var ZYr=s(ale);Vvo=r(ZYr,"big_bird"),ZYr.forEach(t),Xvo=r(SAe," \u2014 "),Iq=n(SAe,"A",{href:!0});var eKr=s(Iq);zvo=r(eKr,"BigBirdForPreTraining"),eKr.forEach(t),Qvo=r(SAe," (BigBird model)"),SAe.forEach(t),Wvo=i(V),Ou=n(V,"LI",{});var RAe=s(Ou);nle=n(RAe,"STRONG",{});var oKr=s(nle);Hvo=r(oKr,"camembert"),oKr.forEach(t),Uvo=r(RAe," \u2014 "),qq=n(RAe,"A",{href:!0});var rKr=s(qq);Jvo=r(rKr,"CamembertForMaskedLM"),rKr.forEach(t),Yvo=r(RAe," (CamemBERT model)"),RAe.forEach(t),Kvo=i(V),Vu=n(V,"LI",{});var BAe=s(Vu);sle=n(BAe,"STRONG",{});var tKr=s(sle);Zvo=r(tKr,"ctrl"),tKr.forEach(t),eFo=r(BAe," \u2014 "),Nq=n(BAe,"A",{href:!0});var aKr=s(Nq);oFo=r(aKr,"CTRLLMHeadModel"),aKr.forEach(t),rFo=r(BAe," (CTRL model)"),BAe.forEach(t),tFo=i(V),Xu=n(V,"LI",{});var PAe=s(Xu);lle=n(PAe,"STRONG",{});var nKr=s(lle);aFo=r(nKr,"data2vec-text"),nKr.forEach(t),nFo=r(PAe," \u2014 "),jq=n(PAe,"A",{href:!0});var sKr=s(jq);sFo=r(sKr,"Data2VecTextForMaskedLM"),sKr.forEach(t),lFo=r(PAe," (Data2VecText model)"),PAe.forEach(t),iFo=i(V),zu=n(V,"LI",{});var IAe=s(zu);ile=n(IAe,"STRONG",{});var lKr=s(ile);dFo=r(lKr,"deberta"),lKr.forEach(t),cFo=r(IAe," \u2014 "),Dq=n(IAe,"A",{href:!0});var iKr=s(Dq);fFo=r(iKr,"DebertaForMaskedLM"),iKr.forEach(t),mFo=r(IAe," (DeBERTa model)"),IAe.forEach(t),gFo=i(V),Qu=n(V,"LI",{});var qAe=s(Qu);dle=n(qAe,"STRONG",{});var dKr=s(dle);hFo=r(dKr,"deberta-v2"),dKr.forEach(t),pFo=r(qAe," \u2014 "),Gq=n(qAe,"A",{href:!0});var cKr=s(Gq);uFo=r(cKr,"DebertaV2ForMaskedLM"),cKr.forEach(t),_Fo=r(qAe," (DeBERTa-v2 model)"),qAe.forEach(t),bFo=i(V),Wu=n(V,"LI",{});var NAe=s(Wu);cle=n(NAe,"STRONG",{});var fKr=s(cle);vFo=r(fKr,"distilbert"),fKr.forEach(t),FFo=r(NAe," \u2014 "),Oq=n(NAe,"A",{href:!0});var mKr=s(Oq);TFo=r(mKr,"DistilBertForMaskedLM"),mKr.forEach(t),MFo=r(NAe," (DistilBERT model)"),NAe.forEach(t),EFo=i(V),Hu=n(V,"LI",{});var jAe=s(Hu);fle=n(jAe,"STRONG",{});var gKr=s(fle);CFo=r(gKr,"electra"),gKr.forEach(t),wFo=r(jAe," \u2014 "),Vq=n(jAe,"A",{href:!0});var hKr=s(Vq);AFo=r(hKr,"ElectraForPreTraining"),hKr.forEach(t),yFo=r(jAe," (ELECTRA model)"),jAe.forEach(t),LFo=i(V),Uu=n(V,"LI",{});var DAe=s(Uu);mle=n(DAe,"STRONG",{});var pKr=s(mle);xFo=r(pKr,"flaubert"),pKr.forEach(t),$Fo=r(DAe," \u2014 "),Xq=n(DAe,"A",{href:!0});var uKr=s(Xq);kFo=r(uKr,"FlaubertWithLMHeadModel"),uKr.forEach(t),SFo=r(DAe," (FlauBERT model)"),DAe.forEach(t),RFo=i(V),Ju=n(V,"LI",{});var GAe=s(Ju);gle=n(GAe,"STRONG",{});var _Kr=s(gle);BFo=r(_Kr,"flava"),_Kr.forEach(t),PFo=r(GAe," \u2014 "),zq=n(GAe,"A",{href:!0});var bKr=s(zq);IFo=r(bKr,"FlavaForPreTraining"),bKr.forEach(t),qFo=r(GAe," (Flava model)"),GAe.forEach(t),NFo=i(V),Yu=n(V,"LI",{});var OAe=s(Yu);hle=n(OAe,"STRONG",{});var vKr=s(hle);jFo=r(vKr,"fnet"),vKr.forEach(t),DFo=r(OAe," \u2014 "),Qq=n(OAe,"A",{href:!0});var FKr=s(Qq);GFo=r(FKr,"FNetForPreTraining"),FKr.forEach(t),OFo=r(OAe," (FNet model)"),OAe.forEach(t),VFo=i(V),Ku=n(V,"LI",{});var VAe=s(Ku);ple=n(VAe,"STRONG",{});var TKr=s(ple);XFo=r(TKr,"fsmt"),TKr.forEach(t),zFo=r(VAe," \u2014 "),Wq=n(VAe,"A",{href:!0});var MKr=s(Wq);QFo=r(MKr,"FSMTForConditionalGeneration"),MKr.forEach(t),WFo=r(VAe," (FairSeq Machine-Translation model)"),VAe.forEach(t),HFo=i(V),Zu=n(V,"LI",{});var XAe=s(Zu);ule=n(XAe,"STRONG",{});var EKr=s(ule);UFo=r(EKr,"funnel"),EKr.forEach(t),JFo=r(XAe," \u2014 "),Hq=n(XAe,"A",{href:!0});var CKr=s(Hq);YFo=r(CKr,"FunnelForPreTraining"),CKr.forEach(t),KFo=r(XAe," (Funnel Transformer model)"),XAe.forEach(t),ZFo=i(V),e_=n(V,"LI",{});var zAe=s(e_);_le=n(zAe,"STRONG",{});var wKr=s(_le);eTo=r(wKr,"gpt2"),wKr.forEach(t),oTo=r(zAe," \u2014 "),Uq=n(zAe,"A",{href:!0});var AKr=s(Uq);rTo=r(AKr,"GPT2LMHeadModel"),AKr.forEach(t),tTo=r(zAe," (OpenAI GPT-2 model)"),zAe.forEach(t),aTo=i(V),o_=n(V,"LI",{});var QAe=s(o_);ble=n(QAe,"STRONG",{});var yKr=s(ble);nTo=r(yKr,"ibert"),yKr.forEach(t),sTo=r(QAe," \u2014 "),Jq=n(QAe,"A",{href:!0});var LKr=s(Jq);lTo=r(LKr,"IBertForMaskedLM"),LKr.forEach(t),iTo=r(QAe," (I-BERT model)"),QAe.forEach(t),dTo=i(V),r_=n(V,"LI",{});var WAe=s(r_);vle=n(WAe,"STRONG",{});var xKr=s(vle);cTo=r(xKr,"layoutlm"),xKr.forEach(t),fTo=r(WAe," \u2014 "),Yq=n(WAe,"A",{href:!0});var $Kr=s(Yq);mTo=r($Kr,"LayoutLMForMaskedLM"),$Kr.forEach(t),gTo=r(WAe," (LayoutLM model)"),WAe.forEach(t),hTo=i(V),t_=n(V,"LI",{});var HAe=s(t_);Fle=n(HAe,"STRONG",{});var kKr=s(Fle);pTo=r(kKr,"longformer"),kKr.forEach(t),uTo=r(HAe," \u2014 "),Kq=n(HAe,"A",{href:!0});var SKr=s(Kq);_To=r(SKr,"LongformerForMaskedLM"),SKr.forEach(t),bTo=r(HAe," (Longformer model)"),HAe.forEach(t),vTo=i(V),a_=n(V,"LI",{});var UAe=s(a_);Tle=n(UAe,"STRONG",{});var RKr=s(Tle);FTo=r(RKr,"lxmert"),RKr.forEach(t),TTo=r(UAe," \u2014 "),Zq=n(UAe,"A",{href:!0});var BKr=s(Zq);MTo=r(BKr,"LxmertForPreTraining"),BKr.forEach(t),ETo=r(UAe," (LXMERT model)"),UAe.forEach(t),CTo=i(V),n_=n(V,"LI",{});var JAe=s(n_);Mle=n(JAe,"STRONG",{});var PKr=s(Mle);wTo=r(PKr,"megatron-bert"),PKr.forEach(t),ATo=r(JAe," \u2014 "),eN=n(JAe,"A",{href:!0});var IKr=s(eN);yTo=r(IKr,"MegatronBertForPreTraining"),IKr.forEach(t),LTo=r(JAe," (MegatronBert model)"),JAe.forEach(t),xTo=i(V),s_=n(V,"LI",{});var YAe=s(s_);Ele=n(YAe,"STRONG",{});var qKr=s(Ele);$To=r(qKr,"mobilebert"),qKr.forEach(t),kTo=r(YAe," \u2014 "),oN=n(YAe,"A",{href:!0});var NKr=s(oN);STo=r(NKr,"MobileBertForPreTraining"),NKr.forEach(t),RTo=r(YAe," (MobileBERT model)"),YAe.forEach(t),BTo=i(V),l_=n(V,"LI",{});var KAe=s(l_);Cle=n(KAe,"STRONG",{});var jKr=s(Cle);PTo=r(jKr,"mpnet"),jKr.forEach(t),ITo=r(KAe," \u2014 "),rN=n(KAe,"A",{href:!0});var DKr=s(rN);qTo=r(DKr,"MPNetForMaskedLM"),DKr.forEach(t),NTo=r(KAe," (MPNet model)"),KAe.forEach(t),jTo=i(V),i_=n(V,"LI",{});var ZAe=s(i_);wle=n(ZAe,"STRONG",{});var GKr=s(wle);DTo=r(GKr,"openai-gpt"),GKr.forEach(t),GTo=r(ZAe," \u2014 "),tN=n(ZAe,"A",{href:!0});var OKr=s(tN);OTo=r(OKr,"OpenAIGPTLMHeadModel"),OKr.forEach(t),VTo=r(ZAe," (OpenAI GPT model)"),ZAe.forEach(t),XTo=i(V),d_=n(V,"LI",{});var e6e=s(d_);Ale=n(e6e,"STRONG",{});var VKr=s(Ale);zTo=r(VKr,"retribert"),VKr.forEach(t),QTo=r(e6e," \u2014 "),aN=n(e6e,"A",{href:!0});var XKr=s(aN);WTo=r(XKr,"RetriBertModel"),XKr.forEach(t),HTo=r(e6e," (RetriBERT model)"),e6e.forEach(t),UTo=i(V),c_=n(V,"LI",{});var o6e=s(c_);yle=n(o6e,"STRONG",{});var zKr=s(yle);JTo=r(zKr,"roberta"),zKr.forEach(t),YTo=r(o6e," \u2014 "),nN=n(o6e,"A",{href:!0});var QKr=s(nN);KTo=r(QKr,"RobertaForMaskedLM"),QKr.forEach(t),ZTo=r(o6e," (RoBERTa model)"),o6e.forEach(t),e7o=i(V),f_=n(V,"LI",{});var r6e=s(f_);Lle=n(r6e,"STRONG",{});var WKr=s(Lle);o7o=r(WKr,"squeezebert"),WKr.forEach(t),r7o=r(r6e," \u2014 "),sN=n(r6e,"A",{href:!0});var HKr=s(sN);t7o=r(HKr,"SqueezeBertForMaskedLM"),HKr.forEach(t),a7o=r(r6e," (SqueezeBERT model)"),r6e.forEach(t),n7o=i(V),m_=n(V,"LI",{});var t6e=s(m_);xle=n(t6e,"STRONG",{});var UKr=s(xle);s7o=r(UKr,"t5"),UKr.forEach(t),l7o=r(t6e," \u2014 "),lN=n(t6e,"A",{href:!0});var JKr=s(lN);i7o=r(JKr,"T5ForConditionalGeneration"),JKr.forEach(t),d7o=r(t6e," (T5 model)"),t6e.forEach(t),c7o=i(V),g_=n(V,"LI",{});var a6e=s(g_);$le=n(a6e,"STRONG",{});var YKr=s($le);f7o=r(YKr,"tapas"),YKr.forEach(t),m7o=r(a6e," \u2014 "),iN=n(a6e,"A",{href:!0});var KKr=s(iN);g7o=r(KKr,"TapasForMaskedLM"),KKr.forEach(t),h7o=r(a6e," (TAPAS model)"),a6e.forEach(t),p7o=i(V),h_=n(V,"LI",{});var n6e=s(h_);kle=n(n6e,"STRONG",{});var ZKr=s(kle);u7o=r(ZKr,"transfo-xl"),ZKr.forEach(t),_7o=r(n6e," \u2014 "),dN=n(n6e,"A",{href:!0});var eZr=s(dN);b7o=r(eZr,"TransfoXLLMHeadModel"),eZr.forEach(t),v7o=r(n6e," (Transformer-XL model)"),n6e.forEach(t),F7o=i(V),p_=n(V,"LI",{});var s6e=s(p_);Sle=n(s6e,"STRONG",{});var oZr=s(Sle);T7o=r(oZr,"unispeech"),oZr.forEach(t),M7o=r(s6e," \u2014 "),cN=n(s6e,"A",{href:!0});var rZr=s(cN);E7o=r(rZr,"UniSpeechForPreTraining"),rZr.forEach(t),C7o=r(s6e," (UniSpeech model)"),s6e.forEach(t),w7o=i(V),u_=n(V,"LI",{});var l6e=s(u_);Rle=n(l6e,"STRONG",{});var tZr=s(Rle);A7o=r(tZr,"unispeech-sat"),tZr.forEach(t),y7o=r(l6e," \u2014 "),fN=n(l6e,"A",{href:!0});var aZr=s(fN);L7o=r(aZr,"UniSpeechSatForPreTraining"),aZr.forEach(t),x7o=r(l6e," (UniSpeechSat model)"),l6e.forEach(t),$7o=i(V),__=n(V,"LI",{});var i6e=s(__);Ble=n(i6e,"STRONG",{});var nZr=s(Ble);k7o=r(nZr,"visual_bert"),nZr.forEach(t),S7o=r(i6e," \u2014 "),mN=n(i6e,"A",{href:!0});var sZr=s(mN);R7o=r(sZr,"VisualBertForPreTraining"),sZr.forEach(t),B7o=r(i6e," (VisualBert model)"),i6e.forEach(t),P7o=i(V),b_=n(V,"LI",{});var d6e=s(b_);Ple=n(d6e,"STRONG",{});var lZr=s(Ple);I7o=r(lZr,"vit_mae"),lZr.forEach(t),q7o=r(d6e," \u2014 "),gN=n(d6e,"A",{href:!0});var iZr=s(gN);N7o=r(iZr,"ViTMAEForPreTraining"),iZr.forEach(t),j7o=r(d6e," (ViTMAE model)"),d6e.forEach(t),D7o=i(V),v_=n(V,"LI",{});var c6e=s(v_);Ile=n(c6e,"STRONG",{});var dZr=s(Ile);G7o=r(dZr,"wav2vec2"),dZr.forEach(t),O7o=r(c6e," \u2014 "),hN=n(c6e,"A",{href:!0});var cZr=s(hN);V7o=r(cZr,"Wav2Vec2ForPreTraining"),cZr.forEach(t),X7o=r(c6e," (Wav2Vec2 model)"),c6e.forEach(t),z7o=i(V),F_=n(V,"LI",{});var f6e=s(F_);qle=n(f6e,"STRONG",{});var fZr=s(qle);Q7o=r(fZr,"xlm"),fZr.forEach(t),W7o=r(f6e," \u2014 "),pN=n(f6e,"A",{href:!0});var mZr=s(pN);H7o=r(mZr,"XLMWithLMHeadModel"),mZr.forEach(t),U7o=r(f6e," (XLM model)"),f6e.forEach(t),J7o=i(V),T_=n(V,"LI",{});var m6e=s(T_);Nle=n(m6e,"STRONG",{});var gZr=s(Nle);Y7o=r(gZr,"xlm-roberta"),gZr.forEach(t),K7o=r(m6e," \u2014 "),uN=n(m6e,"A",{href:!0});var hZr=s(uN);Z7o=r(hZr,"XLMRobertaForMaskedLM"),hZr.forEach(t),e9o=r(m6e," (XLM-RoBERTa model)"),m6e.forEach(t),o9o=i(V),M_=n(V,"LI",{});var g6e=s(M_);jle=n(g6e,"STRONG",{});var pZr=s(jle);r9o=r(pZr,"xlm-roberta-xl"),pZr.forEach(t),t9o=r(g6e," \u2014 "),_N=n(g6e,"A",{href:!0});var uZr=s(_N);a9o=r(uZr,"XLMRobertaXLForMaskedLM"),uZr.forEach(t),n9o=r(g6e," (XLM-RoBERTa-XL model)"),g6e.forEach(t),s9o=i(V),E_=n(V,"LI",{});var h6e=s(E_);Dle=n(h6e,"STRONG",{});var _Zr=s(Dle);l9o=r(_Zr,"xlnet"),_Zr.forEach(t),i9o=r(h6e," \u2014 "),bN=n(h6e,"A",{href:!0});var bZr=s(bN);d9o=r(bZr,"XLNetLMHeadModel"),bZr.forEach(t),c9o=r(h6e," (XLNet model)"),h6e.forEach(t),V.forEach(t),f9o=i(ea),C_=n(ea,"P",{});var p6e=s(C_);m9o=r(p6e,"The model is set in evaluation mode by default using "),Gle=n(p6e,"CODE",{});var vZr=s(Gle);g9o=r(vZr,"model.eval()"),vZr.forEach(t),h9o=r(p6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ole=n(p6e,"CODE",{});var FZr=s(Ole);p9o=r(FZr,"model.train()"),FZr.forEach(t),p6e.forEach(t),u9o=i(ea),T(w_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),rIe=i(f),Li=n(f,"H2",{class:!0});var sNe=s(Li);A_=n(sNe,"A",{id:!0,class:!0,href:!0});var TZr=s(A_);Vle=n(TZr,"SPAN",{});var MZr=s(Vle);T(R6.$$.fragment,MZr),MZr.forEach(t),TZr.forEach(t),_9o=i(sNe),Xle=n(sNe,"SPAN",{});var EZr=s(Xle);b9o=r(EZr,"AutoModelForCausalLM"),EZr.forEach(t),sNe.forEach(t),tIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(B6.$$.fragment,Os),v9o=i(Os),xi=n(Os,"P",{});var fK=s(xi);F9o=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vN=n(fK,"A",{href:!0});var CZr=s(vN);T9o=r(CZr,"from_pretrained()"),CZr.forEach(t),M9o=r(fK," class method or the "),FN=n(fK,"A",{href:!0});var wZr=s(FN);E9o=r(wZr,"from_config()"),wZr.forEach(t),C9o=r(fK,` class
method.`),fK.forEach(t),w9o=i(Os),P6=n(Os,"P",{});var lNe=s(P6);A9o=r(lNe,"This class cannot be instantiated directly using "),zle=n(lNe,"CODE",{});var AZr=s(zle);y9o=r(AZr,"__init__()"),AZr.forEach(t),L9o=r(lNe," (throws an error)."),lNe.forEach(t),x9o=i(Os),tt=n(Os,"DIV",{class:!0});var tw=s(tt);T(I6.$$.fragment,tw),$9o=i(tw),Qle=n(tw,"P",{});var yZr=s(Qle);k9o=r(yZr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yZr.forEach(t),S9o=i(tw),$i=n(tw,"P",{});var mK=s($i);R9o=r(mK,`Note:
Loading a model from its configuration file does `),Wle=n(mK,"STRONG",{});var LZr=s(Wle);B9o=r(LZr,"not"),LZr.forEach(t),P9o=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TN=n(mK,"A",{href:!0});var xZr=s(TN);I9o=r(xZr,"from_pretrained()"),xZr.forEach(t),q9o=r(mK," to load the model weights."),mK.forEach(t),N9o=i(tw),T(y_.$$.fragment,tw),tw.forEach(t),j9o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(q6.$$.fragment,oa),D9o=i(oa),Hle=n(oa,"P",{});var $Zr=s(Hle);G9o=r($Zr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$Zr.forEach(t),O9o=i(oa),La=n(oa,"P",{});var aw=s(La);V9o=r(aw,"The model class to instantiate is selected based on the "),Ule=n(aw,"CODE",{});var kZr=s(Ule);X9o=r(kZr,"model_type"),kZr.forEach(t),z9o=r(aw,` property of the config object (either
passed as an argument or loaded from `),Jle=n(aw,"CODE",{});var SZr=s(Jle);Q9o=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),W9o=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yle=n(aw,"CODE",{});var RZr=s(Yle);H9o=r(RZr,"pretrained_model_name_or_path"),RZr.forEach(t),U9o=r(aw,":"),aw.forEach(t),J9o=i(oa),z=n(oa,"UL",{});var W=s(z);L_=n(W,"LI",{});var u6e=s(L_);Kle=n(u6e,"STRONG",{});var BZr=s(Kle);Y9o=r(BZr,"bart"),BZr.forEach(t),K9o=r(u6e," \u2014 "),MN=n(u6e,"A",{href:!0});var PZr=s(MN);Z9o=r(PZr,"BartForCausalLM"),PZr.forEach(t),eMo=r(u6e," (BART model)"),u6e.forEach(t),oMo=i(W),x_=n(W,"LI",{});var _6e=s(x_);Zle=n(_6e,"STRONG",{});var IZr=s(Zle);rMo=r(IZr,"bert"),IZr.forEach(t),tMo=r(_6e," \u2014 "),EN=n(_6e,"A",{href:!0});var qZr=s(EN);aMo=r(qZr,"BertLMHeadModel"),qZr.forEach(t),nMo=r(_6e," (BERT model)"),_6e.forEach(t),sMo=i(W),$_=n(W,"LI",{});var b6e=s($_);eie=n(b6e,"STRONG",{});var NZr=s(eie);lMo=r(NZr,"bert-generation"),NZr.forEach(t),iMo=r(b6e," \u2014 "),CN=n(b6e,"A",{href:!0});var jZr=s(CN);dMo=r(jZr,"BertGenerationDecoder"),jZr.forEach(t),cMo=r(b6e," (Bert Generation model)"),b6e.forEach(t),fMo=i(W),k_=n(W,"LI",{});var v6e=s(k_);oie=n(v6e,"STRONG",{});var DZr=s(oie);mMo=r(DZr,"big_bird"),DZr.forEach(t),gMo=r(v6e," \u2014 "),wN=n(v6e,"A",{href:!0});var GZr=s(wN);hMo=r(GZr,"BigBirdForCausalLM"),GZr.forEach(t),pMo=r(v6e," (BigBird model)"),v6e.forEach(t),uMo=i(W),S_=n(W,"LI",{});var F6e=s(S_);rie=n(F6e,"STRONG",{});var OZr=s(rie);_Mo=r(OZr,"bigbird_pegasus"),OZr.forEach(t),bMo=r(F6e," \u2014 "),AN=n(F6e,"A",{href:!0});var VZr=s(AN);vMo=r(VZr,"BigBirdPegasusForCausalLM"),VZr.forEach(t),FMo=r(F6e," (BigBirdPegasus model)"),F6e.forEach(t),TMo=i(W),R_=n(W,"LI",{});var T6e=s(R_);tie=n(T6e,"STRONG",{});var XZr=s(tie);MMo=r(XZr,"blenderbot"),XZr.forEach(t),EMo=r(T6e," \u2014 "),yN=n(T6e,"A",{href:!0});var zZr=s(yN);CMo=r(zZr,"BlenderbotForCausalLM"),zZr.forEach(t),wMo=r(T6e," (Blenderbot model)"),T6e.forEach(t),AMo=i(W),B_=n(W,"LI",{});var M6e=s(B_);aie=n(M6e,"STRONG",{});var QZr=s(aie);yMo=r(QZr,"blenderbot-small"),QZr.forEach(t),LMo=r(M6e," \u2014 "),LN=n(M6e,"A",{href:!0});var WZr=s(LN);xMo=r(WZr,"BlenderbotSmallForCausalLM"),WZr.forEach(t),$Mo=r(M6e," (BlenderbotSmall model)"),M6e.forEach(t),kMo=i(W),P_=n(W,"LI",{});var E6e=s(P_);nie=n(E6e,"STRONG",{});var HZr=s(nie);SMo=r(HZr,"camembert"),HZr.forEach(t),RMo=r(E6e," \u2014 "),xN=n(E6e,"A",{href:!0});var UZr=s(xN);BMo=r(UZr,"CamembertForCausalLM"),UZr.forEach(t),PMo=r(E6e," (CamemBERT model)"),E6e.forEach(t),IMo=i(W),I_=n(W,"LI",{});var C6e=s(I_);sie=n(C6e,"STRONG",{});var JZr=s(sie);qMo=r(JZr,"ctrl"),JZr.forEach(t),NMo=r(C6e," \u2014 "),$N=n(C6e,"A",{href:!0});var YZr=s($N);jMo=r(YZr,"CTRLLMHeadModel"),YZr.forEach(t),DMo=r(C6e," (CTRL model)"),C6e.forEach(t),GMo=i(W),q_=n(W,"LI",{});var w6e=s(q_);lie=n(w6e,"STRONG",{});var KZr=s(lie);OMo=r(KZr,"data2vec-text"),KZr.forEach(t),VMo=r(w6e," \u2014 "),kN=n(w6e,"A",{href:!0});var ZZr=s(kN);XMo=r(ZZr,"Data2VecTextForCausalLM"),ZZr.forEach(t),zMo=r(w6e," (Data2VecText model)"),w6e.forEach(t),QMo=i(W),N_=n(W,"LI",{});var A6e=s(N_);iie=n(A6e,"STRONG",{});var eet=s(iie);WMo=r(eet,"electra"),eet.forEach(t),HMo=r(A6e," \u2014 "),SN=n(A6e,"A",{href:!0});var oet=s(SN);UMo=r(oet,"ElectraForCausalLM"),oet.forEach(t),JMo=r(A6e," (ELECTRA model)"),A6e.forEach(t),YMo=i(W),j_=n(W,"LI",{});var y6e=s(j_);die=n(y6e,"STRONG",{});var ret=s(die);KMo=r(ret,"gpt2"),ret.forEach(t),ZMo=r(y6e," \u2014 "),RN=n(y6e,"A",{href:!0});var tet=s(RN);e4o=r(tet,"GPT2LMHeadModel"),tet.forEach(t),o4o=r(y6e," (OpenAI GPT-2 model)"),y6e.forEach(t),r4o=i(W),D_=n(W,"LI",{});var L6e=s(D_);cie=n(L6e,"STRONG",{});var aet=s(cie);t4o=r(aet,"gpt_neo"),aet.forEach(t),a4o=r(L6e," \u2014 "),BN=n(L6e,"A",{href:!0});var net=s(BN);n4o=r(net,"GPTNeoForCausalLM"),net.forEach(t),s4o=r(L6e," (GPT Neo model)"),L6e.forEach(t),l4o=i(W),G_=n(W,"LI",{});var x6e=s(G_);fie=n(x6e,"STRONG",{});var set=s(fie);i4o=r(set,"gptj"),set.forEach(t),d4o=r(x6e," \u2014 "),PN=n(x6e,"A",{href:!0});var iet=s(PN);c4o=r(iet,"GPTJForCausalLM"),iet.forEach(t),f4o=r(x6e," (GPT-J model)"),x6e.forEach(t),m4o=i(W),O_=n(W,"LI",{});var $6e=s(O_);mie=n($6e,"STRONG",{});var det=s(mie);g4o=r(det,"marian"),det.forEach(t),h4o=r($6e," \u2014 "),IN=n($6e,"A",{href:!0});var cet=s(IN);p4o=r(cet,"MarianForCausalLM"),cet.forEach(t),u4o=r($6e," (Marian model)"),$6e.forEach(t),_4o=i(W),V_=n(W,"LI",{});var k6e=s(V_);gie=n(k6e,"STRONG",{});var fet=s(gie);b4o=r(fet,"mbart"),fet.forEach(t),v4o=r(k6e," \u2014 "),qN=n(k6e,"A",{href:!0});var met=s(qN);F4o=r(met,"MBartForCausalLM"),met.forEach(t),T4o=r(k6e," (mBART model)"),k6e.forEach(t),M4o=i(W),X_=n(W,"LI",{});var S6e=s(X_);hie=n(S6e,"STRONG",{});var get=s(hie);E4o=r(get,"megatron-bert"),get.forEach(t),C4o=r(S6e," \u2014 "),NN=n(S6e,"A",{href:!0});var het=s(NN);w4o=r(het,"MegatronBertForCausalLM"),het.forEach(t),A4o=r(S6e," (MegatronBert model)"),S6e.forEach(t),y4o=i(W),z_=n(W,"LI",{});var R6e=s(z_);pie=n(R6e,"STRONG",{});var pet=s(pie);L4o=r(pet,"openai-gpt"),pet.forEach(t),x4o=r(R6e," \u2014 "),jN=n(R6e,"A",{href:!0});var uet=s(jN);$4o=r(uet,"OpenAIGPTLMHeadModel"),uet.forEach(t),k4o=r(R6e," (OpenAI GPT model)"),R6e.forEach(t),S4o=i(W),Q_=n(W,"LI",{});var B6e=s(Q_);uie=n(B6e,"STRONG",{});var _et=s(uie);R4o=r(_et,"opt"),_et.forEach(t),B4o=r(B6e," \u2014 "),DN=n(B6e,"A",{href:!0});var bet=s(DN);P4o=r(bet,"OPTForCausalLM"),bet.forEach(t),I4o=r(B6e," (OPT model)"),B6e.forEach(t),q4o=i(W),W_=n(W,"LI",{});var P6e=s(W_);_ie=n(P6e,"STRONG",{});var vet=s(_ie);N4o=r(vet,"pegasus"),vet.forEach(t),j4o=r(P6e," \u2014 "),GN=n(P6e,"A",{href:!0});var Fet=s(GN);D4o=r(Fet,"PegasusForCausalLM"),Fet.forEach(t),G4o=r(P6e," (Pegasus model)"),P6e.forEach(t),O4o=i(W),H_=n(W,"LI",{});var I6e=s(H_);bie=n(I6e,"STRONG",{});var Tet=s(bie);V4o=r(Tet,"plbart"),Tet.forEach(t),X4o=r(I6e," \u2014 "),ON=n(I6e,"A",{href:!0});var Met=s(ON);z4o=r(Met,"PLBartForCausalLM"),Met.forEach(t),Q4o=r(I6e," (PLBart model)"),I6e.forEach(t),W4o=i(W),U_=n(W,"LI",{});var q6e=s(U_);vie=n(q6e,"STRONG",{});var Eet=s(vie);H4o=r(Eet,"prophetnet"),Eet.forEach(t),U4o=r(q6e," \u2014 "),VN=n(q6e,"A",{href:!0});var Cet=s(VN);J4o=r(Cet,"ProphetNetForCausalLM"),Cet.forEach(t),Y4o=r(q6e," (ProphetNet model)"),q6e.forEach(t),K4o=i(W),J_=n(W,"LI",{});var N6e=s(J_);Fie=n(N6e,"STRONG",{});var wet=s(Fie);Z4o=r(wet,"qdqbert"),wet.forEach(t),eEo=r(N6e," \u2014 "),XN=n(N6e,"A",{href:!0});var Aet=s(XN);oEo=r(Aet,"QDQBertLMHeadModel"),Aet.forEach(t),rEo=r(N6e," (QDQBert model)"),N6e.forEach(t),tEo=i(W),Y_=n(W,"LI",{});var j6e=s(Y_);Tie=n(j6e,"STRONG",{});var yet=s(Tie);aEo=r(yet,"reformer"),yet.forEach(t),nEo=r(j6e," \u2014 "),zN=n(j6e,"A",{href:!0});var Let=s(zN);sEo=r(Let,"ReformerModelWithLMHead"),Let.forEach(t),lEo=r(j6e," (Reformer model)"),j6e.forEach(t),iEo=i(W),K_=n(W,"LI",{});var D6e=s(K_);Mie=n(D6e,"STRONG",{});var xet=s(Mie);dEo=r(xet,"rembert"),xet.forEach(t),cEo=r(D6e," \u2014 "),QN=n(D6e,"A",{href:!0});var $et=s(QN);fEo=r($et,"RemBertForCausalLM"),$et.forEach(t),mEo=r(D6e," (RemBERT model)"),D6e.forEach(t),gEo=i(W),Z_=n(W,"LI",{});var G6e=s(Z_);Eie=n(G6e,"STRONG",{});var ket=s(Eie);hEo=r(ket,"roberta"),ket.forEach(t),pEo=r(G6e," \u2014 "),WN=n(G6e,"A",{href:!0});var Set=s(WN);uEo=r(Set,"RobertaForCausalLM"),Set.forEach(t),_Eo=r(G6e," (RoBERTa model)"),G6e.forEach(t),bEo=i(W),e1=n(W,"LI",{});var O6e=s(e1);Cie=n(O6e,"STRONG",{});var Ret=s(Cie);vEo=r(Ret,"roformer"),Ret.forEach(t),FEo=r(O6e," \u2014 "),HN=n(O6e,"A",{href:!0});var Bet=s(HN);TEo=r(Bet,"RoFormerForCausalLM"),Bet.forEach(t),MEo=r(O6e," (RoFormer model)"),O6e.forEach(t),EEo=i(W),o1=n(W,"LI",{});var V6e=s(o1);wie=n(V6e,"STRONG",{});var Pet=s(wie);CEo=r(Pet,"speech_to_text_2"),Pet.forEach(t),wEo=r(V6e," \u2014 "),UN=n(V6e,"A",{href:!0});var Iet=s(UN);AEo=r(Iet,"Speech2Text2ForCausalLM"),Iet.forEach(t),yEo=r(V6e," (Speech2Text2 model)"),V6e.forEach(t),LEo=i(W),r1=n(W,"LI",{});var X6e=s(r1);Aie=n(X6e,"STRONG",{});var qet=s(Aie);xEo=r(qet,"transfo-xl"),qet.forEach(t),$Eo=r(X6e," \u2014 "),JN=n(X6e,"A",{href:!0});var Net=s(JN);kEo=r(Net,"TransfoXLLMHeadModel"),Net.forEach(t),SEo=r(X6e," (Transformer-XL model)"),X6e.forEach(t),REo=i(W),t1=n(W,"LI",{});var z6e=s(t1);yie=n(z6e,"STRONG",{});var jet=s(yie);BEo=r(jet,"trocr"),jet.forEach(t),PEo=r(z6e," \u2014 "),YN=n(z6e,"A",{href:!0});var Det=s(YN);IEo=r(Det,"TrOCRForCausalLM"),Det.forEach(t),qEo=r(z6e," (TrOCR model)"),z6e.forEach(t),NEo=i(W),a1=n(W,"LI",{});var Q6e=s(a1);Lie=n(Q6e,"STRONG",{});var Get=s(Lie);jEo=r(Get,"xglm"),Get.forEach(t),DEo=r(Q6e," \u2014 "),KN=n(Q6e,"A",{href:!0});var Oet=s(KN);GEo=r(Oet,"XGLMForCausalLM"),Oet.forEach(t),OEo=r(Q6e," (XGLM model)"),Q6e.forEach(t),VEo=i(W),n1=n(W,"LI",{});var W6e=s(n1);xie=n(W6e,"STRONG",{});var Vet=s(xie);XEo=r(Vet,"xlm"),Vet.forEach(t),zEo=r(W6e," \u2014 "),ZN=n(W6e,"A",{href:!0});var Xet=s(ZN);QEo=r(Xet,"XLMWithLMHeadModel"),Xet.forEach(t),WEo=r(W6e," (XLM model)"),W6e.forEach(t),HEo=i(W),s1=n(W,"LI",{});var H6e=s(s1);$ie=n(H6e,"STRONG",{});var zet=s($ie);UEo=r(zet,"xlm-prophetnet"),zet.forEach(t),JEo=r(H6e," \u2014 "),ej=n(H6e,"A",{href:!0});var Qet=s(ej);YEo=r(Qet,"XLMProphetNetForCausalLM"),Qet.forEach(t),KEo=r(H6e," (XLMProphetNet model)"),H6e.forEach(t),ZEo=i(W),l1=n(W,"LI",{});var U6e=s(l1);kie=n(U6e,"STRONG",{});var Wet=s(kie);e5o=r(Wet,"xlm-roberta"),Wet.forEach(t),o5o=r(U6e," \u2014 "),oj=n(U6e,"A",{href:!0});var Het=s(oj);r5o=r(Het,"XLMRobertaForCausalLM"),Het.forEach(t),t5o=r(U6e," (XLM-RoBERTa model)"),U6e.forEach(t),a5o=i(W),i1=n(W,"LI",{});var J6e=s(i1);Sie=n(J6e,"STRONG",{});var Uet=s(Sie);n5o=r(Uet,"xlm-roberta-xl"),Uet.forEach(t),s5o=r(J6e," \u2014 "),rj=n(J6e,"A",{href:!0});var Jet=s(rj);l5o=r(Jet,"XLMRobertaXLForCausalLM"),Jet.forEach(t),i5o=r(J6e," (XLM-RoBERTa-XL model)"),J6e.forEach(t),d5o=i(W),d1=n(W,"LI",{});var Y6e=s(d1);Rie=n(Y6e,"STRONG",{});var Yet=s(Rie);c5o=r(Yet,"xlnet"),Yet.forEach(t),f5o=r(Y6e," \u2014 "),tj=n(Y6e,"A",{href:!0});var Ket=s(tj);m5o=r(Ket,"XLNetLMHeadModel"),Ket.forEach(t),g5o=r(Y6e," (XLNet model)"),Y6e.forEach(t),W.forEach(t),h5o=i(oa),c1=n(oa,"P",{});var K6e=s(c1);p5o=r(K6e,"The model is set in evaluation mode by default using "),Bie=n(K6e,"CODE",{});var Zet=s(Bie);u5o=r(Zet,"model.eval()"),Zet.forEach(t),_5o=r(K6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pie=n(K6e,"CODE",{});var eot=s(Pie);b5o=r(eot,"model.train()"),eot.forEach(t),K6e.forEach(t),v5o=i(oa),T(f1.$$.fragment,oa),oa.forEach(t),Os.forEach(t),aIe=i(f),ki=n(f,"H2",{class:!0});var iNe=s(ki);m1=n(iNe,"A",{id:!0,class:!0,href:!0});var oot=s(m1);Iie=n(oot,"SPAN",{});var rot=s(Iie);T(N6.$$.fragment,rot),rot.forEach(t),oot.forEach(t),F5o=i(iNe),qie=n(iNe,"SPAN",{});var tot=s(qie);T5o=r(tot,"AutoModelForMaskedLM"),tot.forEach(t),iNe.forEach(t),nIe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(j6.$$.fragment,Vs),M5o=i(Vs),Si=n(Vs,"P",{});var gK=s(Si);E5o=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aj=n(gK,"A",{href:!0});var aot=s(aj);C5o=r(aot,"from_pretrained()"),aot.forEach(t),w5o=r(gK," class method or the "),nj=n(gK,"A",{href:!0});var not=s(nj);A5o=r(not,"from_config()"),not.forEach(t),y5o=r(gK,` class
method.`),gK.forEach(t),L5o=i(Vs),D6=n(Vs,"P",{});var dNe=s(D6);x5o=r(dNe,"This class cannot be instantiated directly using "),Nie=n(dNe,"CODE",{});var sot=s(Nie);$5o=r(sot,"__init__()"),sot.forEach(t),k5o=r(dNe," (throws an error)."),dNe.forEach(t),S5o=i(Vs),at=n(Vs,"DIV",{class:!0});var nw=s(at);T(G6.$$.fragment,nw),R5o=i(nw),jie=n(nw,"P",{});var lot=s(jie);B5o=r(lot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lot.forEach(t),P5o=i(nw),Ri=n(nw,"P",{});var hK=s(Ri);I5o=r(hK,`Note:
Loading a model from its configuration file does `),Die=n(hK,"STRONG",{});var iot=s(Die);q5o=r(iot,"not"),iot.forEach(t),N5o=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=n(hK,"A",{href:!0});var dot=s(sj);j5o=r(dot,"from_pretrained()"),dot.forEach(t),D5o=r(hK," to load the model weights."),hK.forEach(t),G5o=i(nw),T(g1.$$.fragment,nw),nw.forEach(t),O5o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(O6.$$.fragment,ra),V5o=i(ra),Gie=n(ra,"P",{});var cot=s(Gie);X5o=r(cot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cot.forEach(t),z5o=i(ra),xa=n(ra,"P",{});var sw=s(xa);Q5o=r(sw,"The model class to instantiate is selected based on the "),Oie=n(sw,"CODE",{});var fot=s(Oie);W5o=r(fot,"model_type"),fot.forEach(t),H5o=r(sw,` property of the config object (either
passed as an argument or loaded from `),Vie=n(sw,"CODE",{});var mot=s(Vie);U5o=r(mot,"pretrained_model_name_or_path"),mot.forEach(t),J5o=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=n(sw,"CODE",{});var got=s(Xie);Y5o=r(got,"pretrained_model_name_or_path"),got.forEach(t),K5o=r(sw,":"),sw.forEach(t),Z5o=i(ra),Q=n(ra,"UL",{});var H=s(Q);h1=n(H,"LI",{});var Z6e=s(h1);zie=n(Z6e,"STRONG",{});var hot=s(zie);eCo=r(hot,"albert"),hot.forEach(t),oCo=r(Z6e," \u2014 "),lj=n(Z6e,"A",{href:!0});var pot=s(lj);rCo=r(pot,"AlbertForMaskedLM"),pot.forEach(t),tCo=r(Z6e," (ALBERT model)"),Z6e.forEach(t),aCo=i(H),p1=n(H,"LI",{});var e0e=s(p1);Qie=n(e0e,"STRONG",{});var uot=s(Qie);nCo=r(uot,"bart"),uot.forEach(t),sCo=r(e0e," \u2014 "),ij=n(e0e,"A",{href:!0});var _ot=s(ij);lCo=r(_ot,"BartForConditionalGeneration"),_ot.forEach(t),iCo=r(e0e," (BART model)"),e0e.forEach(t),dCo=i(H),u1=n(H,"LI",{});var o0e=s(u1);Wie=n(o0e,"STRONG",{});var bot=s(Wie);cCo=r(bot,"bert"),bot.forEach(t),fCo=r(o0e," \u2014 "),dj=n(o0e,"A",{href:!0});var vot=s(dj);mCo=r(vot,"BertForMaskedLM"),vot.forEach(t),gCo=r(o0e," (BERT model)"),o0e.forEach(t),hCo=i(H),_1=n(H,"LI",{});var r0e=s(_1);Hie=n(r0e,"STRONG",{});var Fot=s(Hie);pCo=r(Fot,"big_bird"),Fot.forEach(t),uCo=r(r0e," \u2014 "),cj=n(r0e,"A",{href:!0});var Tot=s(cj);_Co=r(Tot,"BigBirdForMaskedLM"),Tot.forEach(t),bCo=r(r0e," (BigBird model)"),r0e.forEach(t),vCo=i(H),b1=n(H,"LI",{});var t0e=s(b1);Uie=n(t0e,"STRONG",{});var Mot=s(Uie);FCo=r(Mot,"camembert"),Mot.forEach(t),TCo=r(t0e," \u2014 "),fj=n(t0e,"A",{href:!0});var Eot=s(fj);MCo=r(Eot,"CamembertForMaskedLM"),Eot.forEach(t),ECo=r(t0e," (CamemBERT model)"),t0e.forEach(t),CCo=i(H),v1=n(H,"LI",{});var a0e=s(v1);Jie=n(a0e,"STRONG",{});var Cot=s(Jie);wCo=r(Cot,"convbert"),Cot.forEach(t),ACo=r(a0e," \u2014 "),mj=n(a0e,"A",{href:!0});var wot=s(mj);yCo=r(wot,"ConvBertForMaskedLM"),wot.forEach(t),LCo=r(a0e," (ConvBERT model)"),a0e.forEach(t),xCo=i(H),F1=n(H,"LI",{});var n0e=s(F1);Yie=n(n0e,"STRONG",{});var Aot=s(Yie);$Co=r(Aot,"data2vec-text"),Aot.forEach(t),kCo=r(n0e," \u2014 "),gj=n(n0e,"A",{href:!0});var yot=s(gj);SCo=r(yot,"Data2VecTextForMaskedLM"),yot.forEach(t),RCo=r(n0e," (Data2VecText model)"),n0e.forEach(t),BCo=i(H),T1=n(H,"LI",{});var s0e=s(T1);Kie=n(s0e,"STRONG",{});var Lot=s(Kie);PCo=r(Lot,"deberta"),Lot.forEach(t),ICo=r(s0e," \u2014 "),hj=n(s0e,"A",{href:!0});var xot=s(hj);qCo=r(xot,"DebertaForMaskedLM"),xot.forEach(t),NCo=r(s0e," (DeBERTa model)"),s0e.forEach(t),jCo=i(H),M1=n(H,"LI",{});var l0e=s(M1);Zie=n(l0e,"STRONG",{});var $ot=s(Zie);DCo=r($ot,"deberta-v2"),$ot.forEach(t),GCo=r(l0e," \u2014 "),pj=n(l0e,"A",{href:!0});var kot=s(pj);OCo=r(kot,"DebertaV2ForMaskedLM"),kot.forEach(t),VCo=r(l0e," (DeBERTa-v2 model)"),l0e.forEach(t),XCo=i(H),E1=n(H,"LI",{});var i0e=s(E1);ede=n(i0e,"STRONG",{});var Sot=s(ede);zCo=r(Sot,"distilbert"),Sot.forEach(t),QCo=r(i0e," \u2014 "),uj=n(i0e,"A",{href:!0});var Rot=s(uj);WCo=r(Rot,"DistilBertForMaskedLM"),Rot.forEach(t),HCo=r(i0e," (DistilBERT model)"),i0e.forEach(t),UCo=i(H),C1=n(H,"LI",{});var d0e=s(C1);ode=n(d0e,"STRONG",{});var Bot=s(ode);JCo=r(Bot,"electra"),Bot.forEach(t),YCo=r(d0e," \u2014 "),_j=n(d0e,"A",{href:!0});var Pot=s(_j);KCo=r(Pot,"ElectraForMaskedLM"),Pot.forEach(t),ZCo=r(d0e," (ELECTRA model)"),d0e.forEach(t),e3o=i(H),w1=n(H,"LI",{});var c0e=s(w1);rde=n(c0e,"STRONG",{});var Iot=s(rde);o3o=r(Iot,"flaubert"),Iot.forEach(t),r3o=r(c0e," \u2014 "),bj=n(c0e,"A",{href:!0});var qot=s(bj);t3o=r(qot,"FlaubertWithLMHeadModel"),qot.forEach(t),a3o=r(c0e," (FlauBERT model)"),c0e.forEach(t),n3o=i(H),A1=n(H,"LI",{});var f0e=s(A1);tde=n(f0e,"STRONG",{});var Not=s(tde);s3o=r(Not,"fnet"),Not.forEach(t),l3o=r(f0e," \u2014 "),vj=n(f0e,"A",{href:!0});var jot=s(vj);i3o=r(jot,"FNetForMaskedLM"),jot.forEach(t),d3o=r(f0e," (FNet model)"),f0e.forEach(t),c3o=i(H),y1=n(H,"LI",{});var m0e=s(y1);ade=n(m0e,"STRONG",{});var Dot=s(ade);f3o=r(Dot,"funnel"),Dot.forEach(t),m3o=r(m0e," \u2014 "),Fj=n(m0e,"A",{href:!0});var Got=s(Fj);g3o=r(Got,"FunnelForMaskedLM"),Got.forEach(t),h3o=r(m0e," (Funnel Transformer model)"),m0e.forEach(t),p3o=i(H),L1=n(H,"LI",{});var g0e=s(L1);nde=n(g0e,"STRONG",{});var Oot=s(nde);u3o=r(Oot,"ibert"),Oot.forEach(t),_3o=r(g0e," \u2014 "),Tj=n(g0e,"A",{href:!0});var Vot=s(Tj);b3o=r(Vot,"IBertForMaskedLM"),Vot.forEach(t),v3o=r(g0e," (I-BERT model)"),g0e.forEach(t),F3o=i(H),x1=n(H,"LI",{});var h0e=s(x1);sde=n(h0e,"STRONG",{});var Xot=s(sde);T3o=r(Xot,"layoutlm"),Xot.forEach(t),M3o=r(h0e," \u2014 "),Mj=n(h0e,"A",{href:!0});var zot=s(Mj);E3o=r(zot,"LayoutLMForMaskedLM"),zot.forEach(t),C3o=r(h0e," (LayoutLM model)"),h0e.forEach(t),w3o=i(H),$1=n(H,"LI",{});var p0e=s($1);lde=n(p0e,"STRONG",{});var Qot=s(lde);A3o=r(Qot,"longformer"),Qot.forEach(t),y3o=r(p0e," \u2014 "),Ej=n(p0e,"A",{href:!0});var Wot=s(Ej);L3o=r(Wot,"LongformerForMaskedLM"),Wot.forEach(t),x3o=r(p0e," (Longformer model)"),p0e.forEach(t),$3o=i(H),k1=n(H,"LI",{});var u0e=s(k1);ide=n(u0e,"STRONG",{});var Hot=s(ide);k3o=r(Hot,"mbart"),Hot.forEach(t),S3o=r(u0e," \u2014 "),Cj=n(u0e,"A",{href:!0});var Uot=s(Cj);R3o=r(Uot,"MBartForConditionalGeneration"),Uot.forEach(t),B3o=r(u0e," (mBART model)"),u0e.forEach(t),P3o=i(H),S1=n(H,"LI",{});var _0e=s(S1);dde=n(_0e,"STRONG",{});var Jot=s(dde);I3o=r(Jot,"megatron-bert"),Jot.forEach(t),q3o=r(_0e," \u2014 "),wj=n(_0e,"A",{href:!0});var Yot=s(wj);N3o=r(Yot,"MegatronBertForMaskedLM"),Yot.forEach(t),j3o=r(_0e," (MegatronBert model)"),_0e.forEach(t),D3o=i(H),R1=n(H,"LI",{});var b0e=s(R1);cde=n(b0e,"STRONG",{});var Kot=s(cde);G3o=r(Kot,"mobilebert"),Kot.forEach(t),O3o=r(b0e," \u2014 "),Aj=n(b0e,"A",{href:!0});var Zot=s(Aj);V3o=r(Zot,"MobileBertForMaskedLM"),Zot.forEach(t),X3o=r(b0e," (MobileBERT model)"),b0e.forEach(t),z3o=i(H),B1=n(H,"LI",{});var v0e=s(B1);fde=n(v0e,"STRONG",{});var ert=s(fde);Q3o=r(ert,"mpnet"),ert.forEach(t),W3o=r(v0e," \u2014 "),yj=n(v0e,"A",{href:!0});var ort=s(yj);H3o=r(ort,"MPNetForMaskedLM"),ort.forEach(t),U3o=r(v0e," (MPNet model)"),v0e.forEach(t),J3o=i(H),P1=n(H,"LI",{});var F0e=s(P1);mde=n(F0e,"STRONG",{});var rrt=s(mde);Y3o=r(rrt,"nystromformer"),rrt.forEach(t),K3o=r(F0e," \u2014 "),Lj=n(F0e,"A",{href:!0});var trt=s(Lj);Z3o=r(trt,"NystromformerForMaskedLM"),trt.forEach(t),ewo=r(F0e," (Nystromformer model)"),F0e.forEach(t),owo=i(H),I1=n(H,"LI",{});var T0e=s(I1);gde=n(T0e,"STRONG",{});var art=s(gde);rwo=r(art,"perceiver"),art.forEach(t),two=r(T0e," \u2014 "),xj=n(T0e,"A",{href:!0});var nrt=s(xj);awo=r(nrt,"PerceiverForMaskedLM"),nrt.forEach(t),nwo=r(T0e," (Perceiver model)"),T0e.forEach(t),swo=i(H),q1=n(H,"LI",{});var M0e=s(q1);hde=n(M0e,"STRONG",{});var srt=s(hde);lwo=r(srt,"qdqbert"),srt.forEach(t),iwo=r(M0e," \u2014 "),$j=n(M0e,"A",{href:!0});var lrt=s($j);dwo=r(lrt,"QDQBertForMaskedLM"),lrt.forEach(t),cwo=r(M0e," (QDQBert model)"),M0e.forEach(t),fwo=i(H),N1=n(H,"LI",{});var E0e=s(N1);pde=n(E0e,"STRONG",{});var irt=s(pde);mwo=r(irt,"reformer"),irt.forEach(t),gwo=r(E0e," \u2014 "),kj=n(E0e,"A",{href:!0});var drt=s(kj);hwo=r(drt,"ReformerForMaskedLM"),drt.forEach(t),pwo=r(E0e," (Reformer model)"),E0e.forEach(t),uwo=i(H),j1=n(H,"LI",{});var C0e=s(j1);ude=n(C0e,"STRONG",{});var crt=s(ude);_wo=r(crt,"rembert"),crt.forEach(t),bwo=r(C0e," \u2014 "),Sj=n(C0e,"A",{href:!0});var frt=s(Sj);vwo=r(frt,"RemBertForMaskedLM"),frt.forEach(t),Fwo=r(C0e," (RemBERT model)"),C0e.forEach(t),Two=i(H),D1=n(H,"LI",{});var w0e=s(D1);_de=n(w0e,"STRONG",{});var mrt=s(_de);Mwo=r(mrt,"roberta"),mrt.forEach(t),Ewo=r(w0e," \u2014 "),Rj=n(w0e,"A",{href:!0});var grt=s(Rj);Cwo=r(grt,"RobertaForMaskedLM"),grt.forEach(t),wwo=r(w0e," (RoBERTa model)"),w0e.forEach(t),Awo=i(H),G1=n(H,"LI",{});var A0e=s(G1);bde=n(A0e,"STRONG",{});var hrt=s(bde);ywo=r(hrt,"roformer"),hrt.forEach(t),Lwo=r(A0e," \u2014 "),Bj=n(A0e,"A",{href:!0});var prt=s(Bj);xwo=r(prt,"RoFormerForMaskedLM"),prt.forEach(t),$wo=r(A0e," (RoFormer model)"),A0e.forEach(t),kwo=i(H),O1=n(H,"LI",{});var y0e=s(O1);vde=n(y0e,"STRONG",{});var urt=s(vde);Swo=r(urt,"squeezebert"),urt.forEach(t),Rwo=r(y0e," \u2014 "),Pj=n(y0e,"A",{href:!0});var _rt=s(Pj);Bwo=r(_rt,"SqueezeBertForMaskedLM"),_rt.forEach(t),Pwo=r(y0e," (SqueezeBERT model)"),y0e.forEach(t),Iwo=i(H),V1=n(H,"LI",{});var L0e=s(V1);Fde=n(L0e,"STRONG",{});var brt=s(Fde);qwo=r(brt,"tapas"),brt.forEach(t),Nwo=r(L0e," \u2014 "),Ij=n(L0e,"A",{href:!0});var vrt=s(Ij);jwo=r(vrt,"TapasForMaskedLM"),vrt.forEach(t),Dwo=r(L0e," (TAPAS model)"),L0e.forEach(t),Gwo=i(H),X1=n(H,"LI",{});var x0e=s(X1);Tde=n(x0e,"STRONG",{});var Frt=s(Tde);Owo=r(Frt,"wav2vec2"),Frt.forEach(t),Vwo=r(x0e," \u2014 "),Mde=n(x0e,"CODE",{});var Trt=s(Mde);Xwo=r(Trt,"Wav2Vec2ForMaskedLM"),Trt.forEach(t),zwo=r(x0e," (Wav2Vec2 model)"),x0e.forEach(t),Qwo=i(H),z1=n(H,"LI",{});var $0e=s(z1);Ede=n($0e,"STRONG",{});var Mrt=s(Ede);Wwo=r(Mrt,"xlm"),Mrt.forEach(t),Hwo=r($0e," \u2014 "),qj=n($0e,"A",{href:!0});var Ert=s(qj);Uwo=r(Ert,"XLMWithLMHeadModel"),Ert.forEach(t),Jwo=r($0e," (XLM model)"),$0e.forEach(t),Ywo=i(H),Q1=n(H,"LI",{});var k0e=s(Q1);Cde=n(k0e,"STRONG",{});var Crt=s(Cde);Kwo=r(Crt,"xlm-roberta"),Crt.forEach(t),Zwo=r(k0e," \u2014 "),Nj=n(k0e,"A",{href:!0});var wrt=s(Nj);eAo=r(wrt,"XLMRobertaForMaskedLM"),wrt.forEach(t),oAo=r(k0e," (XLM-RoBERTa model)"),k0e.forEach(t),rAo=i(H),W1=n(H,"LI",{});var S0e=s(W1);wde=n(S0e,"STRONG",{});var Art=s(wde);tAo=r(Art,"xlm-roberta-xl"),Art.forEach(t),aAo=r(S0e," \u2014 "),jj=n(S0e,"A",{href:!0});var yrt=s(jj);nAo=r(yrt,"XLMRobertaXLForMaskedLM"),yrt.forEach(t),sAo=r(S0e," (XLM-RoBERTa-XL model)"),S0e.forEach(t),lAo=i(H),H1=n(H,"LI",{});var R0e=s(H1);Ade=n(R0e,"STRONG",{});var Lrt=s(Ade);iAo=r(Lrt,"yoso"),Lrt.forEach(t),dAo=r(R0e," \u2014 "),Dj=n(R0e,"A",{href:!0});var xrt=s(Dj);cAo=r(xrt,"YosoForMaskedLM"),xrt.forEach(t),fAo=r(R0e," (YOSO model)"),R0e.forEach(t),H.forEach(t),mAo=i(ra),U1=n(ra,"P",{});var B0e=s(U1);gAo=r(B0e,"The model is set in evaluation mode by default using "),yde=n(B0e,"CODE",{});var $rt=s(yde);hAo=r($rt,"model.eval()"),$rt.forEach(t),pAo=r(B0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lde=n(B0e,"CODE",{});var krt=s(Lde);uAo=r(krt,"model.train()"),krt.forEach(t),B0e.forEach(t),_Ao=i(ra),T(J1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),sIe=i(f),Bi=n(f,"H2",{class:!0});var cNe=s(Bi);Y1=n(cNe,"A",{id:!0,class:!0,href:!0});var Srt=s(Y1);xde=n(Srt,"SPAN",{});var Rrt=s(xde);T(V6.$$.fragment,Rrt),Rrt.forEach(t),Srt.forEach(t),bAo=i(cNe),$de=n(cNe,"SPAN",{});var Brt=s($de);vAo=r(Brt,"AutoModelForSeq2SeqLM"),Brt.forEach(t),cNe.forEach(t),lIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(X6.$$.fragment,Xs),FAo=i(Xs),Pi=n(Xs,"P",{});var pK=s(Pi);TAo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Gj=n(pK,"A",{href:!0});var Prt=s(Gj);MAo=r(Prt,"from_pretrained()"),Prt.forEach(t),EAo=r(pK," class method or the "),Oj=n(pK,"A",{href:!0});var Irt=s(Oj);CAo=r(Irt,"from_config()"),Irt.forEach(t),wAo=r(pK,` class
method.`),pK.forEach(t),AAo=i(Xs),z6=n(Xs,"P",{});var fNe=s(z6);yAo=r(fNe,"This class cannot be instantiated directly using "),kde=n(fNe,"CODE",{});var qrt=s(kde);LAo=r(qrt,"__init__()"),qrt.forEach(t),xAo=r(fNe," (throws an error)."),fNe.forEach(t),$Ao=i(Xs),nt=n(Xs,"DIV",{class:!0});var lw=s(nt);T(Q6.$$.fragment,lw),kAo=i(lw),Sde=n(lw,"P",{});var Nrt=s(Sde);SAo=r(Nrt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nrt.forEach(t),RAo=i(lw),Ii=n(lw,"P",{});var uK=s(Ii);BAo=r(uK,`Note:
Loading a model from its configuration file does `),Rde=n(uK,"STRONG",{});var jrt=s(Rde);PAo=r(jrt,"not"),jrt.forEach(t),IAo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(uK,"A",{href:!0});var Drt=s(Vj);qAo=r(Drt,"from_pretrained()"),Drt.forEach(t),NAo=r(uK," to load the model weights."),uK.forEach(t),jAo=i(lw),T(K1.$$.fragment,lw),lw.forEach(t),DAo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(W6.$$.fragment,ta),GAo=i(ta),Bde=n(ta,"P",{});var Grt=s(Bde);OAo=r(Grt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Grt.forEach(t),VAo=i(ta),$a=n(ta,"P",{});var iw=s($a);XAo=r(iw,"The model class to instantiate is selected based on the "),Pde=n(iw,"CODE",{});var Ort=s(Pde);zAo=r(Ort,"model_type"),Ort.forEach(t),QAo=r(iw,` property of the config object (either
passed as an argument or loaded from `),Ide=n(iw,"CODE",{});var Vrt=s(Ide);WAo=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),HAo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qde=n(iw,"CODE",{});var Xrt=s(qde);UAo=r(Xrt,"pretrained_model_name_or_path"),Xrt.forEach(t),JAo=r(iw,":"),iw.forEach(t),YAo=i(ta),pe=n(ta,"UL",{});var be=s(pe);Z1=n(be,"LI",{});var P0e=s(Z1);Nde=n(P0e,"STRONG",{});var zrt=s(Nde);KAo=r(zrt,"bart"),zrt.forEach(t),ZAo=r(P0e," \u2014 "),Xj=n(P0e,"A",{href:!0});var Qrt=s(Xj);e6o=r(Qrt,"BartForConditionalGeneration"),Qrt.forEach(t),o6o=r(P0e," (BART model)"),P0e.forEach(t),r6o=i(be),e2=n(be,"LI",{});var I0e=s(e2);jde=n(I0e,"STRONG",{});var Wrt=s(jde);t6o=r(Wrt,"bigbird_pegasus"),Wrt.forEach(t),a6o=r(I0e," \u2014 "),zj=n(I0e,"A",{href:!0});var Hrt=s(zj);n6o=r(Hrt,"BigBirdPegasusForConditionalGeneration"),Hrt.forEach(t),s6o=r(I0e," (BigBirdPegasus model)"),I0e.forEach(t),l6o=i(be),o2=n(be,"LI",{});var q0e=s(o2);Dde=n(q0e,"STRONG",{});var Urt=s(Dde);i6o=r(Urt,"blenderbot"),Urt.forEach(t),d6o=r(q0e," \u2014 "),Qj=n(q0e,"A",{href:!0});var Jrt=s(Qj);c6o=r(Jrt,"BlenderbotForConditionalGeneration"),Jrt.forEach(t),f6o=r(q0e," (Blenderbot model)"),q0e.forEach(t),m6o=i(be),r2=n(be,"LI",{});var N0e=s(r2);Gde=n(N0e,"STRONG",{});var Yrt=s(Gde);g6o=r(Yrt,"blenderbot-small"),Yrt.forEach(t),h6o=r(N0e," \u2014 "),Wj=n(N0e,"A",{href:!0});var Krt=s(Wj);p6o=r(Krt,"BlenderbotSmallForConditionalGeneration"),Krt.forEach(t),u6o=r(N0e," (BlenderbotSmall model)"),N0e.forEach(t),_6o=i(be),t2=n(be,"LI",{});var j0e=s(t2);Ode=n(j0e,"STRONG",{});var Zrt=s(Ode);b6o=r(Zrt,"encoder-decoder"),Zrt.forEach(t),v6o=r(j0e," \u2014 "),Hj=n(j0e,"A",{href:!0});var ett=s(Hj);F6o=r(ett,"EncoderDecoderModel"),ett.forEach(t),T6o=r(j0e," (Encoder decoder model)"),j0e.forEach(t),M6o=i(be),a2=n(be,"LI",{});var D0e=s(a2);Vde=n(D0e,"STRONG",{});var ott=s(Vde);E6o=r(ott,"fsmt"),ott.forEach(t),C6o=r(D0e," \u2014 "),Uj=n(D0e,"A",{href:!0});var rtt=s(Uj);w6o=r(rtt,"FSMTForConditionalGeneration"),rtt.forEach(t),A6o=r(D0e," (FairSeq Machine-Translation model)"),D0e.forEach(t),y6o=i(be),n2=n(be,"LI",{});var G0e=s(n2);Xde=n(G0e,"STRONG",{});var ttt=s(Xde);L6o=r(ttt,"led"),ttt.forEach(t),x6o=r(G0e," \u2014 "),Jj=n(G0e,"A",{href:!0});var att=s(Jj);$6o=r(att,"LEDForConditionalGeneration"),att.forEach(t),k6o=r(G0e," (LED model)"),G0e.forEach(t),S6o=i(be),s2=n(be,"LI",{});var O0e=s(s2);zde=n(O0e,"STRONG",{});var ntt=s(zde);R6o=r(ntt,"m2m_100"),ntt.forEach(t),B6o=r(O0e," \u2014 "),Yj=n(O0e,"A",{href:!0});var stt=s(Yj);P6o=r(stt,"M2M100ForConditionalGeneration"),stt.forEach(t),I6o=r(O0e," (M2M100 model)"),O0e.forEach(t),q6o=i(be),l2=n(be,"LI",{});var V0e=s(l2);Qde=n(V0e,"STRONG",{});var ltt=s(Qde);N6o=r(ltt,"marian"),ltt.forEach(t),j6o=r(V0e," \u2014 "),Kj=n(V0e,"A",{href:!0});var itt=s(Kj);D6o=r(itt,"MarianMTModel"),itt.forEach(t),G6o=r(V0e," (Marian model)"),V0e.forEach(t),O6o=i(be),i2=n(be,"LI",{});var X0e=s(i2);Wde=n(X0e,"STRONG",{});var dtt=s(Wde);V6o=r(dtt,"mbart"),dtt.forEach(t),X6o=r(X0e," \u2014 "),Zj=n(X0e,"A",{href:!0});var ctt=s(Zj);z6o=r(ctt,"MBartForConditionalGeneration"),ctt.forEach(t),Q6o=r(X0e," (mBART model)"),X0e.forEach(t),W6o=i(be),d2=n(be,"LI",{});var z0e=s(d2);Hde=n(z0e,"STRONG",{});var ftt=s(Hde);H6o=r(ftt,"mt5"),ftt.forEach(t),U6o=r(z0e," \u2014 "),eD=n(z0e,"A",{href:!0});var mtt=s(eD);J6o=r(mtt,"MT5ForConditionalGeneration"),mtt.forEach(t),Y6o=r(z0e," (mT5 model)"),z0e.forEach(t),K6o=i(be),c2=n(be,"LI",{});var Q0e=s(c2);Ude=n(Q0e,"STRONG",{});var gtt=s(Ude);Z6o=r(gtt,"pegasus"),gtt.forEach(t),e0o=r(Q0e," \u2014 "),oD=n(Q0e,"A",{href:!0});var htt=s(oD);o0o=r(htt,"PegasusForConditionalGeneration"),htt.forEach(t),r0o=r(Q0e," (Pegasus model)"),Q0e.forEach(t),t0o=i(be),f2=n(be,"LI",{});var W0e=s(f2);Jde=n(W0e,"STRONG",{});var ptt=s(Jde);a0o=r(ptt,"plbart"),ptt.forEach(t),n0o=r(W0e," \u2014 "),rD=n(W0e,"A",{href:!0});var utt=s(rD);s0o=r(utt,"PLBartForConditionalGeneration"),utt.forEach(t),l0o=r(W0e," (PLBart model)"),W0e.forEach(t),i0o=i(be),m2=n(be,"LI",{});var H0e=s(m2);Yde=n(H0e,"STRONG",{});var _tt=s(Yde);d0o=r(_tt,"prophetnet"),_tt.forEach(t),c0o=r(H0e," \u2014 "),tD=n(H0e,"A",{href:!0});var btt=s(tD);f0o=r(btt,"ProphetNetForConditionalGeneration"),btt.forEach(t),m0o=r(H0e," (ProphetNet model)"),H0e.forEach(t),g0o=i(be),g2=n(be,"LI",{});var U0e=s(g2);Kde=n(U0e,"STRONG",{});var vtt=s(Kde);h0o=r(vtt,"t5"),vtt.forEach(t),p0o=r(U0e," \u2014 "),aD=n(U0e,"A",{href:!0});var Ftt=s(aD);u0o=r(Ftt,"T5ForConditionalGeneration"),Ftt.forEach(t),_0o=r(U0e," (T5 model)"),U0e.forEach(t),b0o=i(be),h2=n(be,"LI",{});var J0e=s(h2);Zde=n(J0e,"STRONG",{});var Ttt=s(Zde);v0o=r(Ttt,"xlm-prophetnet"),Ttt.forEach(t),F0o=r(J0e," \u2014 "),nD=n(J0e,"A",{href:!0});var Mtt=s(nD);T0o=r(Mtt,"XLMProphetNetForConditionalGeneration"),Mtt.forEach(t),M0o=r(J0e," (XLMProphetNet model)"),J0e.forEach(t),be.forEach(t),E0o=i(ta),p2=n(ta,"P",{});var Y0e=s(p2);C0o=r(Y0e,"The model is set in evaluation mode by default using "),ece=n(Y0e,"CODE",{});var Ett=s(ece);w0o=r(Ett,"model.eval()"),Ett.forEach(t),A0o=r(Y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(Y0e,"CODE",{});var Ctt=s(oce);y0o=r(Ctt,"model.train()"),Ctt.forEach(t),Y0e.forEach(t),L0o=i(ta),T(u2.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),iIe=i(f),qi=n(f,"H2",{class:!0});var mNe=s(qi);_2=n(mNe,"A",{id:!0,class:!0,href:!0});var wtt=s(_2);rce=n(wtt,"SPAN",{});var Att=s(rce);T(H6.$$.fragment,Att),Att.forEach(t),wtt.forEach(t),x0o=i(mNe),tce=n(mNe,"SPAN",{});var ytt=s(tce);$0o=r(ytt,"AutoModelForSequenceClassification"),ytt.forEach(t),mNe.forEach(t),dIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(U6.$$.fragment,zs),k0o=i(zs),Ni=n(zs,"P",{});var _K=s(Ni);S0o=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sD=n(_K,"A",{href:!0});var Ltt=s(sD);R0o=r(Ltt,"from_pretrained()"),Ltt.forEach(t),B0o=r(_K," class method or the "),lD=n(_K,"A",{href:!0});var xtt=s(lD);P0o=r(xtt,"from_config()"),xtt.forEach(t),I0o=r(_K,` class
method.`),_K.forEach(t),q0o=i(zs),J6=n(zs,"P",{});var gNe=s(J6);N0o=r(gNe,"This class cannot be instantiated directly using "),ace=n(gNe,"CODE",{});var $tt=s(ace);j0o=r($tt,"__init__()"),$tt.forEach(t),D0o=r(gNe," (throws an error)."),gNe.forEach(t),G0o=i(zs),st=n(zs,"DIV",{class:!0});var dw=s(st);T(Y6.$$.fragment,dw),O0o=i(dw),nce=n(dw,"P",{});var ktt=s(nce);V0o=r(ktt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ktt.forEach(t),X0o=i(dw),ji=n(dw,"P",{});var bK=s(ji);z0o=r(bK,`Note:
Loading a model from its configuration file does `),sce=n(bK,"STRONG",{});var Stt=s(sce);Q0o=r(Stt,"not"),Stt.forEach(t),W0o=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=n(bK,"A",{href:!0});var Rtt=s(iD);H0o=r(Rtt,"from_pretrained()"),Rtt.forEach(t),U0o=r(bK," to load the model weights."),bK.forEach(t),J0o=i(dw),T(b2.$$.fragment,dw),dw.forEach(t),Y0o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(K6.$$.fragment,aa),K0o=i(aa),lce=n(aa,"P",{});var Btt=s(lce);Z0o=r(Btt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Btt.forEach(t),eyo=i(aa),ka=n(aa,"P",{});var cw=s(ka);oyo=r(cw,"The model class to instantiate is selected based on the "),ice=n(cw,"CODE",{});var Ptt=s(ice);ryo=r(Ptt,"model_type"),Ptt.forEach(t),tyo=r(cw,` property of the config object (either
passed as an argument or loaded from `),dce=n(cw,"CODE",{});var Itt=s(dce);ayo=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),nyo=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cce=n(cw,"CODE",{});var qtt=s(cce);syo=r(qtt,"pretrained_model_name_or_path"),qtt.forEach(t),lyo=r(cw,":"),cw.forEach(t),iyo=i(aa),q=n(aa,"UL",{});var j=s(q);v2=n(j,"LI",{});var K0e=s(v2);fce=n(K0e,"STRONG",{});var Ntt=s(fce);dyo=r(Ntt,"albert"),Ntt.forEach(t),cyo=r(K0e," \u2014 "),dD=n(K0e,"A",{href:!0});var jtt=s(dD);fyo=r(jtt,"AlbertForSequenceClassification"),jtt.forEach(t),myo=r(K0e," (ALBERT model)"),K0e.forEach(t),gyo=i(j),F2=n(j,"LI",{});var Z0e=s(F2);mce=n(Z0e,"STRONG",{});var Dtt=s(mce);hyo=r(Dtt,"bart"),Dtt.forEach(t),pyo=r(Z0e," \u2014 "),cD=n(Z0e,"A",{href:!0});var Gtt=s(cD);uyo=r(Gtt,"BartForSequenceClassification"),Gtt.forEach(t),_yo=r(Z0e," (BART model)"),Z0e.forEach(t),byo=i(j),T2=n(j,"LI",{});var eye=s(T2);gce=n(eye,"STRONG",{});var Ott=s(gce);vyo=r(Ott,"bert"),Ott.forEach(t),Fyo=r(eye," \u2014 "),fD=n(eye,"A",{href:!0});var Vtt=s(fD);Tyo=r(Vtt,"BertForSequenceClassification"),Vtt.forEach(t),Myo=r(eye," (BERT model)"),eye.forEach(t),Eyo=i(j),M2=n(j,"LI",{});var oye=s(M2);hce=n(oye,"STRONG",{});var Xtt=s(hce);Cyo=r(Xtt,"big_bird"),Xtt.forEach(t),wyo=r(oye," \u2014 "),mD=n(oye,"A",{href:!0});var ztt=s(mD);Ayo=r(ztt,"BigBirdForSequenceClassification"),ztt.forEach(t),yyo=r(oye," (BigBird model)"),oye.forEach(t),Lyo=i(j),E2=n(j,"LI",{});var rye=s(E2);pce=n(rye,"STRONG",{});var Qtt=s(pce);xyo=r(Qtt,"bigbird_pegasus"),Qtt.forEach(t),$yo=r(rye," \u2014 "),gD=n(rye,"A",{href:!0});var Wtt=s(gD);kyo=r(Wtt,"BigBirdPegasusForSequenceClassification"),Wtt.forEach(t),Syo=r(rye," (BigBirdPegasus model)"),rye.forEach(t),Ryo=i(j),C2=n(j,"LI",{});var tye=s(C2);uce=n(tye,"STRONG",{});var Htt=s(uce);Byo=r(Htt,"camembert"),Htt.forEach(t),Pyo=r(tye," \u2014 "),hD=n(tye,"A",{href:!0});var Utt=s(hD);Iyo=r(Utt,"CamembertForSequenceClassification"),Utt.forEach(t),qyo=r(tye," (CamemBERT model)"),tye.forEach(t),Nyo=i(j),w2=n(j,"LI",{});var aye=s(w2);_ce=n(aye,"STRONG",{});var Jtt=s(_ce);jyo=r(Jtt,"canine"),Jtt.forEach(t),Dyo=r(aye," \u2014 "),pD=n(aye,"A",{href:!0});var Ytt=s(pD);Gyo=r(Ytt,"CanineForSequenceClassification"),Ytt.forEach(t),Oyo=r(aye," (Canine model)"),aye.forEach(t),Vyo=i(j),A2=n(j,"LI",{});var nye=s(A2);bce=n(nye,"STRONG",{});var Ktt=s(bce);Xyo=r(Ktt,"convbert"),Ktt.forEach(t),zyo=r(nye," \u2014 "),uD=n(nye,"A",{href:!0});var Ztt=s(uD);Qyo=r(Ztt,"ConvBertForSequenceClassification"),Ztt.forEach(t),Wyo=r(nye," (ConvBERT model)"),nye.forEach(t),Hyo=i(j),y2=n(j,"LI",{});var sye=s(y2);vce=n(sye,"STRONG",{});var eat=s(vce);Uyo=r(eat,"ctrl"),eat.forEach(t),Jyo=r(sye," \u2014 "),_D=n(sye,"A",{href:!0});var oat=s(_D);Yyo=r(oat,"CTRLForSequenceClassification"),oat.forEach(t),Kyo=r(sye," (CTRL model)"),sye.forEach(t),Zyo=i(j),L2=n(j,"LI",{});var lye=s(L2);Fce=n(lye,"STRONG",{});var rat=s(Fce);eLo=r(rat,"data2vec-text"),rat.forEach(t),oLo=r(lye," \u2014 "),bD=n(lye,"A",{href:!0});var tat=s(bD);rLo=r(tat,"Data2VecTextForSequenceClassification"),tat.forEach(t),tLo=r(lye," (Data2VecText model)"),lye.forEach(t),aLo=i(j),x2=n(j,"LI",{});var iye=s(x2);Tce=n(iye,"STRONG",{});var aat=s(Tce);nLo=r(aat,"deberta"),aat.forEach(t),sLo=r(iye," \u2014 "),vD=n(iye,"A",{href:!0});var nat=s(vD);lLo=r(nat,"DebertaForSequenceClassification"),nat.forEach(t),iLo=r(iye," (DeBERTa model)"),iye.forEach(t),dLo=i(j),$2=n(j,"LI",{});var dye=s($2);Mce=n(dye,"STRONG",{});var sat=s(Mce);cLo=r(sat,"deberta-v2"),sat.forEach(t),fLo=r(dye," \u2014 "),FD=n(dye,"A",{href:!0});var lat=s(FD);mLo=r(lat,"DebertaV2ForSequenceClassification"),lat.forEach(t),gLo=r(dye," (DeBERTa-v2 model)"),dye.forEach(t),hLo=i(j),k2=n(j,"LI",{});var cye=s(k2);Ece=n(cye,"STRONG",{});var iat=s(Ece);pLo=r(iat,"distilbert"),iat.forEach(t),uLo=r(cye," \u2014 "),TD=n(cye,"A",{href:!0});var dat=s(TD);_Lo=r(dat,"DistilBertForSequenceClassification"),dat.forEach(t),bLo=r(cye," (DistilBERT model)"),cye.forEach(t),vLo=i(j),S2=n(j,"LI",{});var fye=s(S2);Cce=n(fye,"STRONG",{});var cat=s(Cce);FLo=r(cat,"electra"),cat.forEach(t),TLo=r(fye," \u2014 "),MD=n(fye,"A",{href:!0});var fat=s(MD);MLo=r(fat,"ElectraForSequenceClassification"),fat.forEach(t),ELo=r(fye," (ELECTRA model)"),fye.forEach(t),CLo=i(j),R2=n(j,"LI",{});var mye=s(R2);wce=n(mye,"STRONG",{});var mat=s(wce);wLo=r(mat,"flaubert"),mat.forEach(t),ALo=r(mye," \u2014 "),ED=n(mye,"A",{href:!0});var gat=s(ED);yLo=r(gat,"FlaubertForSequenceClassification"),gat.forEach(t),LLo=r(mye," (FlauBERT model)"),mye.forEach(t),xLo=i(j),B2=n(j,"LI",{});var gye=s(B2);Ace=n(gye,"STRONG",{});var hat=s(Ace);$Lo=r(hat,"fnet"),hat.forEach(t),kLo=r(gye," \u2014 "),CD=n(gye,"A",{href:!0});var pat=s(CD);SLo=r(pat,"FNetForSequenceClassification"),pat.forEach(t),RLo=r(gye," (FNet model)"),gye.forEach(t),BLo=i(j),P2=n(j,"LI",{});var hye=s(P2);yce=n(hye,"STRONG",{});var uat=s(yce);PLo=r(uat,"funnel"),uat.forEach(t),ILo=r(hye," \u2014 "),wD=n(hye,"A",{href:!0});var _at=s(wD);qLo=r(_at,"FunnelForSequenceClassification"),_at.forEach(t),NLo=r(hye," (Funnel Transformer model)"),hye.forEach(t),jLo=i(j),I2=n(j,"LI",{});var pye=s(I2);Lce=n(pye,"STRONG",{});var bat=s(Lce);DLo=r(bat,"gpt2"),bat.forEach(t),GLo=r(pye," \u2014 "),AD=n(pye,"A",{href:!0});var vat=s(AD);OLo=r(vat,"GPT2ForSequenceClassification"),vat.forEach(t),VLo=r(pye," (OpenAI GPT-2 model)"),pye.forEach(t),XLo=i(j),q2=n(j,"LI",{});var uye=s(q2);xce=n(uye,"STRONG",{});var Fat=s(xce);zLo=r(Fat,"gpt_neo"),Fat.forEach(t),QLo=r(uye," \u2014 "),yD=n(uye,"A",{href:!0});var Tat=s(yD);WLo=r(Tat,"GPTNeoForSequenceClassification"),Tat.forEach(t),HLo=r(uye," (GPT Neo model)"),uye.forEach(t),ULo=i(j),N2=n(j,"LI",{});var _ye=s(N2);$ce=n(_ye,"STRONG",{});var Mat=s($ce);JLo=r(Mat,"gptj"),Mat.forEach(t),YLo=r(_ye," \u2014 "),LD=n(_ye,"A",{href:!0});var Eat=s(LD);KLo=r(Eat,"GPTJForSequenceClassification"),Eat.forEach(t),ZLo=r(_ye," (GPT-J model)"),_ye.forEach(t),e8o=i(j),j2=n(j,"LI",{});var bye=s(j2);kce=n(bye,"STRONG",{});var Cat=s(kce);o8o=r(Cat,"ibert"),Cat.forEach(t),r8o=r(bye," \u2014 "),xD=n(bye,"A",{href:!0});var wat=s(xD);t8o=r(wat,"IBertForSequenceClassification"),wat.forEach(t),a8o=r(bye," (I-BERT model)"),bye.forEach(t),n8o=i(j),D2=n(j,"LI",{});var vye=s(D2);Sce=n(vye,"STRONG",{});var Aat=s(Sce);s8o=r(Aat,"layoutlm"),Aat.forEach(t),l8o=r(vye," \u2014 "),$D=n(vye,"A",{href:!0});var yat=s($D);i8o=r(yat,"LayoutLMForSequenceClassification"),yat.forEach(t),d8o=r(vye," (LayoutLM model)"),vye.forEach(t),c8o=i(j),G2=n(j,"LI",{});var Fye=s(G2);Rce=n(Fye,"STRONG",{});var Lat=s(Rce);f8o=r(Lat,"layoutlmv2"),Lat.forEach(t),m8o=r(Fye," \u2014 "),kD=n(Fye,"A",{href:!0});var xat=s(kD);g8o=r(xat,"LayoutLMv2ForSequenceClassification"),xat.forEach(t),h8o=r(Fye," (LayoutLMv2 model)"),Fye.forEach(t),p8o=i(j),O2=n(j,"LI",{});var Tye=s(O2);Bce=n(Tye,"STRONG",{});var $at=s(Bce);u8o=r($at,"led"),$at.forEach(t),_8o=r(Tye," \u2014 "),SD=n(Tye,"A",{href:!0});var kat=s(SD);b8o=r(kat,"LEDForSequenceClassification"),kat.forEach(t),v8o=r(Tye," (LED model)"),Tye.forEach(t),F8o=i(j),V2=n(j,"LI",{});var Mye=s(V2);Pce=n(Mye,"STRONG",{});var Sat=s(Pce);T8o=r(Sat,"longformer"),Sat.forEach(t),M8o=r(Mye," \u2014 "),RD=n(Mye,"A",{href:!0});var Rat=s(RD);E8o=r(Rat,"LongformerForSequenceClassification"),Rat.forEach(t),C8o=r(Mye," (Longformer model)"),Mye.forEach(t),w8o=i(j),X2=n(j,"LI",{});var Eye=s(X2);Ice=n(Eye,"STRONG",{});var Bat=s(Ice);A8o=r(Bat,"mbart"),Bat.forEach(t),y8o=r(Eye," \u2014 "),BD=n(Eye,"A",{href:!0});var Pat=s(BD);L8o=r(Pat,"MBartForSequenceClassification"),Pat.forEach(t),x8o=r(Eye," (mBART model)"),Eye.forEach(t),$8o=i(j),z2=n(j,"LI",{});var Cye=s(z2);qce=n(Cye,"STRONG",{});var Iat=s(qce);k8o=r(Iat,"megatron-bert"),Iat.forEach(t),S8o=r(Cye," \u2014 "),PD=n(Cye,"A",{href:!0});var qat=s(PD);R8o=r(qat,"MegatronBertForSequenceClassification"),qat.forEach(t),B8o=r(Cye," (MegatronBert model)"),Cye.forEach(t),P8o=i(j),Q2=n(j,"LI",{});var wye=s(Q2);Nce=n(wye,"STRONG",{});var Nat=s(Nce);I8o=r(Nat,"mobilebert"),Nat.forEach(t),q8o=r(wye," \u2014 "),ID=n(wye,"A",{href:!0});var jat=s(ID);N8o=r(jat,"MobileBertForSequenceClassification"),jat.forEach(t),j8o=r(wye," (MobileBERT model)"),wye.forEach(t),D8o=i(j),W2=n(j,"LI",{});var Aye=s(W2);jce=n(Aye,"STRONG",{});var Dat=s(jce);G8o=r(Dat,"mpnet"),Dat.forEach(t),O8o=r(Aye," \u2014 "),qD=n(Aye,"A",{href:!0});var Gat=s(qD);V8o=r(Gat,"MPNetForSequenceClassification"),Gat.forEach(t),X8o=r(Aye," (MPNet model)"),Aye.forEach(t),z8o=i(j),H2=n(j,"LI",{});var yye=s(H2);Dce=n(yye,"STRONG",{});var Oat=s(Dce);Q8o=r(Oat,"nystromformer"),Oat.forEach(t),W8o=r(yye," \u2014 "),ND=n(yye,"A",{href:!0});var Vat=s(ND);H8o=r(Vat,"NystromformerForSequenceClassification"),Vat.forEach(t),U8o=r(yye," (Nystromformer model)"),yye.forEach(t),J8o=i(j),U2=n(j,"LI",{});var Lye=s(U2);Gce=n(Lye,"STRONG",{});var Xat=s(Gce);Y8o=r(Xat,"openai-gpt"),Xat.forEach(t),K8o=r(Lye," \u2014 "),jD=n(Lye,"A",{href:!0});var zat=s(jD);Z8o=r(zat,"OpenAIGPTForSequenceClassification"),zat.forEach(t),exo=r(Lye," (OpenAI GPT model)"),Lye.forEach(t),oxo=i(j),J2=n(j,"LI",{});var xye=s(J2);Oce=n(xye,"STRONG",{});var Qat=s(Oce);rxo=r(Qat,"perceiver"),Qat.forEach(t),txo=r(xye," \u2014 "),DD=n(xye,"A",{href:!0});var Wat=s(DD);axo=r(Wat,"PerceiverForSequenceClassification"),Wat.forEach(t),nxo=r(xye," (Perceiver model)"),xye.forEach(t),sxo=i(j),Y2=n(j,"LI",{});var $ye=s(Y2);Vce=n($ye,"STRONG",{});var Hat=s(Vce);lxo=r(Hat,"plbart"),Hat.forEach(t),ixo=r($ye," \u2014 "),GD=n($ye,"A",{href:!0});var Uat=s(GD);dxo=r(Uat,"PLBartForSequenceClassification"),Uat.forEach(t),cxo=r($ye," (PLBart model)"),$ye.forEach(t),fxo=i(j),K2=n(j,"LI",{});var kye=s(K2);Xce=n(kye,"STRONG",{});var Jat=s(Xce);mxo=r(Jat,"qdqbert"),Jat.forEach(t),gxo=r(kye," \u2014 "),OD=n(kye,"A",{href:!0});var Yat=s(OD);hxo=r(Yat,"QDQBertForSequenceClassification"),Yat.forEach(t),pxo=r(kye," (QDQBert model)"),kye.forEach(t),uxo=i(j),Z2=n(j,"LI",{});var Sye=s(Z2);zce=n(Sye,"STRONG",{});var Kat=s(zce);_xo=r(Kat,"reformer"),Kat.forEach(t),bxo=r(Sye," \u2014 "),VD=n(Sye,"A",{href:!0});var Zat=s(VD);vxo=r(Zat,"ReformerForSequenceClassification"),Zat.forEach(t),Fxo=r(Sye," (Reformer model)"),Sye.forEach(t),Txo=i(j),eb=n(j,"LI",{});var Rye=s(eb);Qce=n(Rye,"STRONG",{});var ent=s(Qce);Mxo=r(ent,"rembert"),ent.forEach(t),Exo=r(Rye," \u2014 "),XD=n(Rye,"A",{href:!0});var ont=s(XD);Cxo=r(ont,"RemBertForSequenceClassification"),ont.forEach(t),wxo=r(Rye," (RemBERT model)"),Rye.forEach(t),Axo=i(j),ob=n(j,"LI",{});var Bye=s(ob);Wce=n(Bye,"STRONG",{});var rnt=s(Wce);yxo=r(rnt,"roberta"),rnt.forEach(t),Lxo=r(Bye," \u2014 "),zD=n(Bye,"A",{href:!0});var tnt=s(zD);xxo=r(tnt,"RobertaForSequenceClassification"),tnt.forEach(t),$xo=r(Bye," (RoBERTa model)"),Bye.forEach(t),kxo=i(j),rb=n(j,"LI",{});var Pye=s(rb);Hce=n(Pye,"STRONG",{});var ant=s(Hce);Sxo=r(ant,"roformer"),ant.forEach(t),Rxo=r(Pye," \u2014 "),QD=n(Pye,"A",{href:!0});var nnt=s(QD);Bxo=r(nnt,"RoFormerForSequenceClassification"),nnt.forEach(t),Pxo=r(Pye," (RoFormer model)"),Pye.forEach(t),Ixo=i(j),tb=n(j,"LI",{});var Iye=s(tb);Uce=n(Iye,"STRONG",{});var snt=s(Uce);qxo=r(snt,"squeezebert"),snt.forEach(t),Nxo=r(Iye," \u2014 "),WD=n(Iye,"A",{href:!0});var lnt=s(WD);jxo=r(lnt,"SqueezeBertForSequenceClassification"),lnt.forEach(t),Dxo=r(Iye," (SqueezeBERT model)"),Iye.forEach(t),Gxo=i(j),ab=n(j,"LI",{});var qye=s(ab);Jce=n(qye,"STRONG",{});var int=s(Jce);Oxo=r(int,"tapas"),int.forEach(t),Vxo=r(qye," \u2014 "),HD=n(qye,"A",{href:!0});var dnt=s(HD);Xxo=r(dnt,"TapasForSequenceClassification"),dnt.forEach(t),zxo=r(qye," (TAPAS model)"),qye.forEach(t),Qxo=i(j),nb=n(j,"LI",{});var Nye=s(nb);Yce=n(Nye,"STRONG",{});var cnt=s(Yce);Wxo=r(cnt,"transfo-xl"),cnt.forEach(t),Hxo=r(Nye," \u2014 "),UD=n(Nye,"A",{href:!0});var fnt=s(UD);Uxo=r(fnt,"TransfoXLForSequenceClassification"),fnt.forEach(t),Jxo=r(Nye," (Transformer-XL model)"),Nye.forEach(t),Yxo=i(j),sb=n(j,"LI",{});var jye=s(sb);Kce=n(jye,"STRONG",{});var mnt=s(Kce);Kxo=r(mnt,"xlm"),mnt.forEach(t),Zxo=r(jye," \u2014 "),JD=n(jye,"A",{href:!0});var gnt=s(JD);e$o=r(gnt,"XLMForSequenceClassification"),gnt.forEach(t),o$o=r(jye," (XLM model)"),jye.forEach(t),r$o=i(j),lb=n(j,"LI",{});var Dye=s(lb);Zce=n(Dye,"STRONG",{});var hnt=s(Zce);t$o=r(hnt,"xlm-roberta"),hnt.forEach(t),a$o=r(Dye," \u2014 "),YD=n(Dye,"A",{href:!0});var pnt=s(YD);n$o=r(pnt,"XLMRobertaForSequenceClassification"),pnt.forEach(t),s$o=r(Dye," (XLM-RoBERTa model)"),Dye.forEach(t),l$o=i(j),ib=n(j,"LI",{});var Gye=s(ib);efe=n(Gye,"STRONG",{});var unt=s(efe);i$o=r(unt,"xlm-roberta-xl"),unt.forEach(t),d$o=r(Gye," \u2014 "),KD=n(Gye,"A",{href:!0});var _nt=s(KD);c$o=r(_nt,"XLMRobertaXLForSequenceClassification"),_nt.forEach(t),f$o=r(Gye," (XLM-RoBERTa-XL model)"),Gye.forEach(t),m$o=i(j),db=n(j,"LI",{});var Oye=s(db);ofe=n(Oye,"STRONG",{});var bnt=s(ofe);g$o=r(bnt,"xlnet"),bnt.forEach(t),h$o=r(Oye," \u2014 "),ZD=n(Oye,"A",{href:!0});var vnt=s(ZD);p$o=r(vnt,"XLNetForSequenceClassification"),vnt.forEach(t),u$o=r(Oye," (XLNet model)"),Oye.forEach(t),_$o=i(j),cb=n(j,"LI",{});var Vye=s(cb);rfe=n(Vye,"STRONG",{});var Fnt=s(rfe);b$o=r(Fnt,"yoso"),Fnt.forEach(t),v$o=r(Vye," \u2014 "),eG=n(Vye,"A",{href:!0});var Tnt=s(eG);F$o=r(Tnt,"YosoForSequenceClassification"),Tnt.forEach(t),T$o=r(Vye," (YOSO model)"),Vye.forEach(t),j.forEach(t),M$o=i(aa),fb=n(aa,"P",{});var Xye=s(fb);E$o=r(Xye,"The model is set in evaluation mode by default using "),tfe=n(Xye,"CODE",{});var Mnt=s(tfe);C$o=r(Mnt,"model.eval()"),Mnt.forEach(t),w$o=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(Xye,"CODE",{});var Ent=s(afe);A$o=r(Ent,"model.train()"),Ent.forEach(t),Xye.forEach(t),y$o=i(aa),T(mb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),cIe=i(f),Di=n(f,"H2",{class:!0});var hNe=s(Di);gb=n(hNe,"A",{id:!0,class:!0,href:!0});var Cnt=s(gb);nfe=n(Cnt,"SPAN",{});var wnt=s(nfe);T(Z6.$$.fragment,wnt),wnt.forEach(t),Cnt.forEach(t),L$o=i(hNe),sfe=n(hNe,"SPAN",{});var Ant=s(sfe);x$o=r(Ant,"AutoModelForMultipleChoice"),Ant.forEach(t),hNe.forEach(t),fIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(e0.$$.fragment,Qs),$$o=i(Qs),Gi=n(Qs,"P",{});var vK=s(Gi);k$o=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oG=n(vK,"A",{href:!0});var ynt=s(oG);S$o=r(ynt,"from_pretrained()"),ynt.forEach(t),R$o=r(vK," class method or the "),rG=n(vK,"A",{href:!0});var Lnt=s(rG);B$o=r(Lnt,"from_config()"),Lnt.forEach(t),P$o=r(vK,` class
method.`),vK.forEach(t),I$o=i(Qs),o0=n(Qs,"P",{});var pNe=s(o0);q$o=r(pNe,"This class cannot be instantiated directly using "),lfe=n(pNe,"CODE",{});var xnt=s(lfe);N$o=r(xnt,"__init__()"),xnt.forEach(t),j$o=r(pNe," (throws an error)."),pNe.forEach(t),D$o=i(Qs),lt=n(Qs,"DIV",{class:!0});var fw=s(lt);T(r0.$$.fragment,fw),G$o=i(fw),ife=n(fw,"P",{});var $nt=s(ife);O$o=r($nt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$nt.forEach(t),V$o=i(fw),Oi=n(fw,"P",{});var FK=s(Oi);X$o=r(FK,`Note:
Loading a model from its configuration file does `),dfe=n(FK,"STRONG",{});var knt=s(dfe);z$o=r(knt,"not"),knt.forEach(t),Q$o=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(FK,"A",{href:!0});var Snt=s(tG);W$o=r(Snt,"from_pretrained()"),Snt.forEach(t),H$o=r(FK," to load the model weights."),FK.forEach(t),U$o=i(fw),T(hb.$$.fragment,fw),fw.forEach(t),J$o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(t0.$$.fragment,na),Y$o=i(na),cfe=n(na,"P",{});var Rnt=s(cfe);K$o=r(Rnt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Rnt.forEach(t),Z$o=i(na),Sa=n(na,"P",{});var mw=s(Sa);eko=r(mw,"The model class to instantiate is selected based on the "),ffe=n(mw,"CODE",{});var Bnt=s(ffe);oko=r(Bnt,"model_type"),Bnt.forEach(t),rko=r(mw,` property of the config object (either
passed as an argument or loaded from `),mfe=n(mw,"CODE",{});var Pnt=s(mfe);tko=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),ako=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(mw,"CODE",{});var Int=s(gfe);nko=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),sko=r(mw,":"),mw.forEach(t),lko=i(na),Y=n(na,"UL",{});var K=s(Y);pb=n(K,"LI",{});var zye=s(pb);hfe=n(zye,"STRONG",{});var qnt=s(hfe);iko=r(qnt,"albert"),qnt.forEach(t),dko=r(zye," \u2014 "),aG=n(zye,"A",{href:!0});var Nnt=s(aG);cko=r(Nnt,"AlbertForMultipleChoice"),Nnt.forEach(t),fko=r(zye," (ALBERT model)"),zye.forEach(t),mko=i(K),ub=n(K,"LI",{});var Qye=s(ub);pfe=n(Qye,"STRONG",{});var jnt=s(pfe);gko=r(jnt,"bert"),jnt.forEach(t),hko=r(Qye," \u2014 "),nG=n(Qye,"A",{href:!0});var Dnt=s(nG);pko=r(Dnt,"BertForMultipleChoice"),Dnt.forEach(t),uko=r(Qye," (BERT model)"),Qye.forEach(t),_ko=i(K),_b=n(K,"LI",{});var Wye=s(_b);ufe=n(Wye,"STRONG",{});var Gnt=s(ufe);bko=r(Gnt,"big_bird"),Gnt.forEach(t),vko=r(Wye," \u2014 "),sG=n(Wye,"A",{href:!0});var Ont=s(sG);Fko=r(Ont,"BigBirdForMultipleChoice"),Ont.forEach(t),Tko=r(Wye," (BigBird model)"),Wye.forEach(t),Mko=i(K),bb=n(K,"LI",{});var Hye=s(bb);_fe=n(Hye,"STRONG",{});var Vnt=s(_fe);Eko=r(Vnt,"camembert"),Vnt.forEach(t),Cko=r(Hye," \u2014 "),lG=n(Hye,"A",{href:!0});var Xnt=s(lG);wko=r(Xnt,"CamembertForMultipleChoice"),Xnt.forEach(t),Ako=r(Hye," (CamemBERT model)"),Hye.forEach(t),yko=i(K),vb=n(K,"LI",{});var Uye=s(vb);bfe=n(Uye,"STRONG",{});var znt=s(bfe);Lko=r(znt,"canine"),znt.forEach(t),xko=r(Uye," \u2014 "),iG=n(Uye,"A",{href:!0});var Qnt=s(iG);$ko=r(Qnt,"CanineForMultipleChoice"),Qnt.forEach(t),kko=r(Uye," (Canine model)"),Uye.forEach(t),Sko=i(K),Fb=n(K,"LI",{});var Jye=s(Fb);vfe=n(Jye,"STRONG",{});var Wnt=s(vfe);Rko=r(Wnt,"convbert"),Wnt.forEach(t),Bko=r(Jye," \u2014 "),dG=n(Jye,"A",{href:!0});var Hnt=s(dG);Pko=r(Hnt,"ConvBertForMultipleChoice"),Hnt.forEach(t),Iko=r(Jye," (ConvBERT model)"),Jye.forEach(t),qko=i(K),Tb=n(K,"LI",{});var Yye=s(Tb);Ffe=n(Yye,"STRONG",{});var Unt=s(Ffe);Nko=r(Unt,"data2vec-text"),Unt.forEach(t),jko=r(Yye," \u2014 "),cG=n(Yye,"A",{href:!0});var Jnt=s(cG);Dko=r(Jnt,"Data2VecTextForMultipleChoice"),Jnt.forEach(t),Gko=r(Yye," (Data2VecText model)"),Yye.forEach(t),Oko=i(K),Mb=n(K,"LI",{});var Kye=s(Mb);Tfe=n(Kye,"STRONG",{});var Ynt=s(Tfe);Vko=r(Ynt,"deberta-v2"),Ynt.forEach(t),Xko=r(Kye," \u2014 "),fG=n(Kye,"A",{href:!0});var Knt=s(fG);zko=r(Knt,"DebertaV2ForMultipleChoice"),Knt.forEach(t),Qko=r(Kye," (DeBERTa-v2 model)"),Kye.forEach(t),Wko=i(K),Eb=n(K,"LI",{});var Zye=s(Eb);Mfe=n(Zye,"STRONG",{});var Znt=s(Mfe);Hko=r(Znt,"distilbert"),Znt.forEach(t),Uko=r(Zye," \u2014 "),mG=n(Zye,"A",{href:!0});var est=s(mG);Jko=r(est,"DistilBertForMultipleChoice"),est.forEach(t),Yko=r(Zye," (DistilBERT model)"),Zye.forEach(t),Kko=i(K),Cb=n(K,"LI",{});var eLe=s(Cb);Efe=n(eLe,"STRONG",{});var ost=s(Efe);Zko=r(ost,"electra"),ost.forEach(t),eSo=r(eLe," \u2014 "),gG=n(eLe,"A",{href:!0});var rst=s(gG);oSo=r(rst,"ElectraForMultipleChoice"),rst.forEach(t),rSo=r(eLe," (ELECTRA model)"),eLe.forEach(t),tSo=i(K),wb=n(K,"LI",{});var oLe=s(wb);Cfe=n(oLe,"STRONG",{});var tst=s(Cfe);aSo=r(tst,"flaubert"),tst.forEach(t),nSo=r(oLe," \u2014 "),hG=n(oLe,"A",{href:!0});var ast=s(hG);sSo=r(ast,"FlaubertForMultipleChoice"),ast.forEach(t),lSo=r(oLe," (FlauBERT model)"),oLe.forEach(t),iSo=i(K),Ab=n(K,"LI",{});var rLe=s(Ab);wfe=n(rLe,"STRONG",{});var nst=s(wfe);dSo=r(nst,"fnet"),nst.forEach(t),cSo=r(rLe," \u2014 "),pG=n(rLe,"A",{href:!0});var sst=s(pG);fSo=r(sst,"FNetForMultipleChoice"),sst.forEach(t),mSo=r(rLe," (FNet model)"),rLe.forEach(t),gSo=i(K),yb=n(K,"LI",{});var tLe=s(yb);Afe=n(tLe,"STRONG",{});var lst=s(Afe);hSo=r(lst,"funnel"),lst.forEach(t),pSo=r(tLe," \u2014 "),uG=n(tLe,"A",{href:!0});var ist=s(uG);uSo=r(ist,"FunnelForMultipleChoice"),ist.forEach(t),_So=r(tLe," (Funnel Transformer model)"),tLe.forEach(t),bSo=i(K),Lb=n(K,"LI",{});var aLe=s(Lb);yfe=n(aLe,"STRONG",{});var dst=s(yfe);vSo=r(dst,"ibert"),dst.forEach(t),FSo=r(aLe," \u2014 "),_G=n(aLe,"A",{href:!0});var cst=s(_G);TSo=r(cst,"IBertForMultipleChoice"),cst.forEach(t),MSo=r(aLe," (I-BERT model)"),aLe.forEach(t),ESo=i(K),xb=n(K,"LI",{});var nLe=s(xb);Lfe=n(nLe,"STRONG",{});var fst=s(Lfe);CSo=r(fst,"longformer"),fst.forEach(t),wSo=r(nLe," \u2014 "),bG=n(nLe,"A",{href:!0});var mst=s(bG);ASo=r(mst,"LongformerForMultipleChoice"),mst.forEach(t),ySo=r(nLe," (Longformer model)"),nLe.forEach(t),LSo=i(K),$b=n(K,"LI",{});var sLe=s($b);xfe=n(sLe,"STRONG",{});var gst=s(xfe);xSo=r(gst,"megatron-bert"),gst.forEach(t),$So=r(sLe," \u2014 "),vG=n(sLe,"A",{href:!0});var hst=s(vG);kSo=r(hst,"MegatronBertForMultipleChoice"),hst.forEach(t),SSo=r(sLe," (MegatronBert model)"),sLe.forEach(t),RSo=i(K),kb=n(K,"LI",{});var lLe=s(kb);$fe=n(lLe,"STRONG",{});var pst=s($fe);BSo=r(pst,"mobilebert"),pst.forEach(t),PSo=r(lLe," \u2014 "),FG=n(lLe,"A",{href:!0});var ust=s(FG);ISo=r(ust,"MobileBertForMultipleChoice"),ust.forEach(t),qSo=r(lLe," (MobileBERT model)"),lLe.forEach(t),NSo=i(K),Sb=n(K,"LI",{});var iLe=s(Sb);kfe=n(iLe,"STRONG",{});var _st=s(kfe);jSo=r(_st,"mpnet"),_st.forEach(t),DSo=r(iLe," \u2014 "),TG=n(iLe,"A",{href:!0});var bst=s(TG);GSo=r(bst,"MPNetForMultipleChoice"),bst.forEach(t),OSo=r(iLe," (MPNet model)"),iLe.forEach(t),VSo=i(K),Rb=n(K,"LI",{});var dLe=s(Rb);Sfe=n(dLe,"STRONG",{});var vst=s(Sfe);XSo=r(vst,"nystromformer"),vst.forEach(t),zSo=r(dLe," \u2014 "),MG=n(dLe,"A",{href:!0});var Fst=s(MG);QSo=r(Fst,"NystromformerForMultipleChoice"),Fst.forEach(t),WSo=r(dLe," (Nystromformer model)"),dLe.forEach(t),HSo=i(K),Bb=n(K,"LI",{});var cLe=s(Bb);Rfe=n(cLe,"STRONG",{});var Tst=s(Rfe);USo=r(Tst,"qdqbert"),Tst.forEach(t),JSo=r(cLe," \u2014 "),EG=n(cLe,"A",{href:!0});var Mst=s(EG);YSo=r(Mst,"QDQBertForMultipleChoice"),Mst.forEach(t),KSo=r(cLe," (QDQBert model)"),cLe.forEach(t),ZSo=i(K),Pb=n(K,"LI",{});var fLe=s(Pb);Bfe=n(fLe,"STRONG",{});var Est=s(Bfe);eRo=r(Est,"rembert"),Est.forEach(t),oRo=r(fLe," \u2014 "),CG=n(fLe,"A",{href:!0});var Cst=s(CG);rRo=r(Cst,"RemBertForMultipleChoice"),Cst.forEach(t),tRo=r(fLe," (RemBERT model)"),fLe.forEach(t),aRo=i(K),Ib=n(K,"LI",{});var mLe=s(Ib);Pfe=n(mLe,"STRONG",{});var wst=s(Pfe);nRo=r(wst,"roberta"),wst.forEach(t),sRo=r(mLe," \u2014 "),wG=n(mLe,"A",{href:!0});var Ast=s(wG);lRo=r(Ast,"RobertaForMultipleChoice"),Ast.forEach(t),iRo=r(mLe," (RoBERTa model)"),mLe.forEach(t),dRo=i(K),qb=n(K,"LI",{});var gLe=s(qb);Ife=n(gLe,"STRONG",{});var yst=s(Ife);cRo=r(yst,"roformer"),yst.forEach(t),fRo=r(gLe," \u2014 "),AG=n(gLe,"A",{href:!0});var Lst=s(AG);mRo=r(Lst,"RoFormerForMultipleChoice"),Lst.forEach(t),gRo=r(gLe," (RoFormer model)"),gLe.forEach(t),hRo=i(K),Nb=n(K,"LI",{});var hLe=s(Nb);qfe=n(hLe,"STRONG",{});var xst=s(qfe);pRo=r(xst,"squeezebert"),xst.forEach(t),uRo=r(hLe," \u2014 "),yG=n(hLe,"A",{href:!0});var $st=s(yG);_Ro=r($st,"SqueezeBertForMultipleChoice"),$st.forEach(t),bRo=r(hLe," (SqueezeBERT model)"),hLe.forEach(t),vRo=i(K),jb=n(K,"LI",{});var pLe=s(jb);Nfe=n(pLe,"STRONG",{});var kst=s(Nfe);FRo=r(kst,"xlm"),kst.forEach(t),TRo=r(pLe," \u2014 "),LG=n(pLe,"A",{href:!0});var Sst=s(LG);MRo=r(Sst,"XLMForMultipleChoice"),Sst.forEach(t),ERo=r(pLe," (XLM model)"),pLe.forEach(t),CRo=i(K),Db=n(K,"LI",{});var uLe=s(Db);jfe=n(uLe,"STRONG",{});var Rst=s(jfe);wRo=r(Rst,"xlm-roberta"),Rst.forEach(t),ARo=r(uLe," \u2014 "),xG=n(uLe,"A",{href:!0});var Bst=s(xG);yRo=r(Bst,"XLMRobertaForMultipleChoice"),Bst.forEach(t),LRo=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),xRo=i(K),Gb=n(K,"LI",{});var _Le=s(Gb);Dfe=n(_Le,"STRONG",{});var Pst=s(Dfe);$Ro=r(Pst,"xlm-roberta-xl"),Pst.forEach(t),kRo=r(_Le," \u2014 "),$G=n(_Le,"A",{href:!0});var Ist=s($G);SRo=r(Ist,"XLMRobertaXLForMultipleChoice"),Ist.forEach(t),RRo=r(_Le," (XLM-RoBERTa-XL model)"),_Le.forEach(t),BRo=i(K),Ob=n(K,"LI",{});var bLe=s(Ob);Gfe=n(bLe,"STRONG",{});var qst=s(Gfe);PRo=r(qst,"xlnet"),qst.forEach(t),IRo=r(bLe," \u2014 "),kG=n(bLe,"A",{href:!0});var Nst=s(kG);qRo=r(Nst,"XLNetForMultipleChoice"),Nst.forEach(t),NRo=r(bLe," (XLNet model)"),bLe.forEach(t),jRo=i(K),Vb=n(K,"LI",{});var vLe=s(Vb);Ofe=n(vLe,"STRONG",{});var jst=s(Ofe);DRo=r(jst,"yoso"),jst.forEach(t),GRo=r(vLe," \u2014 "),SG=n(vLe,"A",{href:!0});var Dst=s(SG);ORo=r(Dst,"YosoForMultipleChoice"),Dst.forEach(t),VRo=r(vLe," (YOSO model)"),vLe.forEach(t),K.forEach(t),XRo=i(na),Xb=n(na,"P",{});var FLe=s(Xb);zRo=r(FLe,"The model is set in evaluation mode by default using "),Vfe=n(FLe,"CODE",{});var Gst=s(Vfe);QRo=r(Gst,"model.eval()"),Gst.forEach(t),WRo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(FLe,"CODE",{});var Ost=s(Xfe);HRo=r(Ost,"model.train()"),Ost.forEach(t),FLe.forEach(t),URo=i(na),T(zb.$$.fragment,na),na.forEach(t),Qs.forEach(t),mIe=i(f),Vi=n(f,"H2",{class:!0});var uNe=s(Vi);Qb=n(uNe,"A",{id:!0,class:!0,href:!0});var Vst=s(Qb);zfe=n(Vst,"SPAN",{});var Xst=s(zfe);T(a0.$$.fragment,Xst),Xst.forEach(t),Vst.forEach(t),JRo=i(uNe),Qfe=n(uNe,"SPAN",{});var zst=s(Qfe);YRo=r(zst,"AutoModelForNextSentencePrediction"),zst.forEach(t),uNe.forEach(t),gIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(n0.$$.fragment,Ws),KRo=i(Ws),Xi=n(Ws,"P",{});var TK=s(Xi);ZRo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RG=n(TK,"A",{href:!0});var Qst=s(RG);eBo=r(Qst,"from_pretrained()"),Qst.forEach(t),oBo=r(TK," class method or the "),BG=n(TK,"A",{href:!0});var Wst=s(BG);rBo=r(Wst,"from_config()"),Wst.forEach(t),tBo=r(TK,` class
method.`),TK.forEach(t),aBo=i(Ws),s0=n(Ws,"P",{});var _Ne=s(s0);nBo=r(_Ne,"This class cannot be instantiated directly using "),Wfe=n(_Ne,"CODE",{});var Hst=s(Wfe);sBo=r(Hst,"__init__()"),Hst.forEach(t),lBo=r(_Ne," (throws an error)."),_Ne.forEach(t),iBo=i(Ws),it=n(Ws,"DIV",{class:!0});var gw=s(it);T(l0.$$.fragment,gw),dBo=i(gw),Hfe=n(gw,"P",{});var Ust=s(Hfe);cBo=r(Ust,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ust.forEach(t),fBo=i(gw),zi=n(gw,"P",{});var MK=s(zi);mBo=r(MK,`Note:
Loading a model from its configuration file does `),Ufe=n(MK,"STRONG",{});var Jst=s(Ufe);gBo=r(Jst,"not"),Jst.forEach(t),hBo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(MK,"A",{href:!0});var Yst=s(PG);pBo=r(Yst,"from_pretrained()"),Yst.forEach(t),uBo=r(MK," to load the model weights."),MK.forEach(t),_Bo=i(gw),T(Wb.$$.fragment,gw),gw.forEach(t),bBo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(i0.$$.fragment,sa),vBo=i(sa),Jfe=n(sa,"P",{});var Kst=s(Jfe);FBo=r(Kst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kst.forEach(t),TBo=i(sa),Ra=n(sa,"P",{});var hw=s(Ra);MBo=r(hw,"The model class to instantiate is selected based on the "),Yfe=n(hw,"CODE",{});var Zst=s(Yfe);EBo=r(Zst,"model_type"),Zst.forEach(t),CBo=r(hw,` property of the config object (either
passed as an argument or loaded from `),Kfe=n(hw,"CODE",{});var elt=s(Kfe);wBo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),ABo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=n(hw,"CODE",{});var olt=s(Zfe);yBo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),LBo=r(hw,":"),hw.forEach(t),xBo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);Hb=n(Hs,"LI",{});var TLe=s(Hb);eme=n(TLe,"STRONG",{});var rlt=s(eme);$Bo=r(rlt,"bert"),rlt.forEach(t),kBo=r(TLe," \u2014 "),IG=n(TLe,"A",{href:!0});var tlt=s(IG);SBo=r(tlt,"BertForNextSentencePrediction"),tlt.forEach(t),RBo=r(TLe," (BERT model)"),TLe.forEach(t),BBo=i(Hs),Ub=n(Hs,"LI",{});var MLe=s(Ub);ome=n(MLe,"STRONG",{});var alt=s(ome);PBo=r(alt,"fnet"),alt.forEach(t),IBo=r(MLe," \u2014 "),qG=n(MLe,"A",{href:!0});var nlt=s(qG);qBo=r(nlt,"FNetForNextSentencePrediction"),nlt.forEach(t),NBo=r(MLe," (FNet model)"),MLe.forEach(t),jBo=i(Hs),Jb=n(Hs,"LI",{});var ELe=s(Jb);rme=n(ELe,"STRONG",{});var slt=s(rme);DBo=r(slt,"megatron-bert"),slt.forEach(t),GBo=r(ELe," \u2014 "),NG=n(ELe,"A",{href:!0});var llt=s(NG);OBo=r(llt,"MegatronBertForNextSentencePrediction"),llt.forEach(t),VBo=r(ELe," (MegatronBert model)"),ELe.forEach(t),XBo=i(Hs),Yb=n(Hs,"LI",{});var CLe=s(Yb);tme=n(CLe,"STRONG",{});var ilt=s(tme);zBo=r(ilt,"mobilebert"),ilt.forEach(t),QBo=r(CLe," \u2014 "),jG=n(CLe,"A",{href:!0});var dlt=s(jG);WBo=r(dlt,"MobileBertForNextSentencePrediction"),dlt.forEach(t),HBo=r(CLe," (MobileBERT model)"),CLe.forEach(t),UBo=i(Hs),Kb=n(Hs,"LI",{});var wLe=s(Kb);ame=n(wLe,"STRONG",{});var clt=s(ame);JBo=r(clt,"qdqbert"),clt.forEach(t),YBo=r(wLe," \u2014 "),DG=n(wLe,"A",{href:!0});var flt=s(DG);KBo=r(flt,"QDQBertForNextSentencePrediction"),flt.forEach(t),ZBo=r(wLe," (QDQBert model)"),wLe.forEach(t),Hs.forEach(t),ePo=i(sa),Zb=n(sa,"P",{});var ALe=s(Zb);oPo=r(ALe,"The model is set in evaluation mode by default using "),nme=n(ALe,"CODE",{});var mlt=s(nme);rPo=r(mlt,"model.eval()"),mlt.forEach(t),tPo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(ALe,"CODE",{});var glt=s(sme);aPo=r(glt,"model.train()"),glt.forEach(t),ALe.forEach(t),nPo=i(sa),T(ev.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),hIe=i(f),Qi=n(f,"H2",{class:!0});var bNe=s(Qi);ov=n(bNe,"A",{id:!0,class:!0,href:!0});var hlt=s(ov);lme=n(hlt,"SPAN",{});var plt=s(lme);T(d0.$$.fragment,plt),plt.forEach(t),hlt.forEach(t),sPo=i(bNe),ime=n(bNe,"SPAN",{});var ult=s(ime);lPo=r(ult,"AutoModelForTokenClassification"),ult.forEach(t),bNe.forEach(t),pIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(c0.$$.fragment,Us),iPo=i(Us),Wi=n(Us,"P",{});var EK=s(Wi);dPo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GG=n(EK,"A",{href:!0});var _lt=s(GG);cPo=r(_lt,"from_pretrained()"),_lt.forEach(t),fPo=r(EK," class method or the "),OG=n(EK,"A",{href:!0});var blt=s(OG);mPo=r(blt,"from_config()"),blt.forEach(t),gPo=r(EK,` class
method.`),EK.forEach(t),hPo=i(Us),f0=n(Us,"P",{});var vNe=s(f0);pPo=r(vNe,"This class cannot be instantiated directly using "),dme=n(vNe,"CODE",{});var vlt=s(dme);uPo=r(vlt,"__init__()"),vlt.forEach(t),_Po=r(vNe," (throws an error)."),vNe.forEach(t),bPo=i(Us),dt=n(Us,"DIV",{class:!0});var pw=s(dt);T(m0.$$.fragment,pw),vPo=i(pw),cme=n(pw,"P",{});var Flt=s(cme);FPo=r(Flt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Flt.forEach(t),TPo=i(pw),Hi=n(pw,"P",{});var CK=s(Hi);MPo=r(CK,`Note:
Loading a model from its configuration file does `),fme=n(CK,"STRONG",{});var Tlt=s(fme);EPo=r(Tlt,"not"),Tlt.forEach(t),CPo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=n(CK,"A",{href:!0});var Mlt=s(VG);wPo=r(Mlt,"from_pretrained()"),Mlt.forEach(t),APo=r(CK," to load the model weights."),CK.forEach(t),yPo=i(pw),T(rv.$$.fragment,pw),pw.forEach(t),LPo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(g0.$$.fragment,la),xPo=i(la),mme=n(la,"P",{});var Elt=s(mme);$Po=r(Elt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Elt.forEach(t),kPo=i(la),Ba=n(la,"P",{});var uw=s(Ba);SPo=r(uw,"The model class to instantiate is selected based on the "),gme=n(uw,"CODE",{});var Clt=s(gme);RPo=r(Clt,"model_type"),Clt.forEach(t),BPo=r(uw,` property of the config object (either
passed as an argument or loaded from `),hme=n(uw,"CODE",{});var wlt=s(hme);PPo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),IPo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=n(uw,"CODE",{});var Alt=s(pme);qPo=r(Alt,"pretrained_model_name_or_path"),Alt.forEach(t),NPo=r(uw,":"),uw.forEach(t),jPo=i(la),U=n(la,"UL",{});var J=s(U);tv=n(J,"LI",{});var yLe=s(tv);ume=n(yLe,"STRONG",{});var ylt=s(ume);DPo=r(ylt,"albert"),ylt.forEach(t),GPo=r(yLe," \u2014 "),XG=n(yLe,"A",{href:!0});var Llt=s(XG);OPo=r(Llt,"AlbertForTokenClassification"),Llt.forEach(t),VPo=r(yLe," (ALBERT model)"),yLe.forEach(t),XPo=i(J),av=n(J,"LI",{});var LLe=s(av);_me=n(LLe,"STRONG",{});var xlt=s(_me);zPo=r(xlt,"bert"),xlt.forEach(t),QPo=r(LLe," \u2014 "),zG=n(LLe,"A",{href:!0});var $lt=s(zG);WPo=r($lt,"BertForTokenClassification"),$lt.forEach(t),HPo=r(LLe," (BERT model)"),LLe.forEach(t),UPo=i(J),nv=n(J,"LI",{});var xLe=s(nv);bme=n(xLe,"STRONG",{});var klt=s(bme);JPo=r(klt,"big_bird"),klt.forEach(t),YPo=r(xLe," \u2014 "),QG=n(xLe,"A",{href:!0});var Slt=s(QG);KPo=r(Slt,"BigBirdForTokenClassification"),Slt.forEach(t),ZPo=r(xLe," (BigBird model)"),xLe.forEach(t),eIo=i(J),sv=n(J,"LI",{});var $Le=s(sv);vme=n($Le,"STRONG",{});var Rlt=s(vme);oIo=r(Rlt,"camembert"),Rlt.forEach(t),rIo=r($Le," \u2014 "),WG=n($Le,"A",{href:!0});var Blt=s(WG);tIo=r(Blt,"CamembertForTokenClassification"),Blt.forEach(t),aIo=r($Le," (CamemBERT model)"),$Le.forEach(t),nIo=i(J),lv=n(J,"LI",{});var kLe=s(lv);Fme=n(kLe,"STRONG",{});var Plt=s(Fme);sIo=r(Plt,"canine"),Plt.forEach(t),lIo=r(kLe," \u2014 "),HG=n(kLe,"A",{href:!0});var Ilt=s(HG);iIo=r(Ilt,"CanineForTokenClassification"),Ilt.forEach(t),dIo=r(kLe," (Canine model)"),kLe.forEach(t),cIo=i(J),iv=n(J,"LI",{});var SLe=s(iv);Tme=n(SLe,"STRONG",{});var qlt=s(Tme);fIo=r(qlt,"convbert"),qlt.forEach(t),mIo=r(SLe," \u2014 "),UG=n(SLe,"A",{href:!0});var Nlt=s(UG);gIo=r(Nlt,"ConvBertForTokenClassification"),Nlt.forEach(t),hIo=r(SLe," (ConvBERT model)"),SLe.forEach(t),pIo=i(J),dv=n(J,"LI",{});var RLe=s(dv);Mme=n(RLe,"STRONG",{});var jlt=s(Mme);uIo=r(jlt,"data2vec-text"),jlt.forEach(t),_Io=r(RLe," \u2014 "),JG=n(RLe,"A",{href:!0});var Dlt=s(JG);bIo=r(Dlt,"Data2VecTextForTokenClassification"),Dlt.forEach(t),vIo=r(RLe," (Data2VecText model)"),RLe.forEach(t),FIo=i(J),cv=n(J,"LI",{});var BLe=s(cv);Eme=n(BLe,"STRONG",{});var Glt=s(Eme);TIo=r(Glt,"deberta"),Glt.forEach(t),MIo=r(BLe," \u2014 "),YG=n(BLe,"A",{href:!0});var Olt=s(YG);EIo=r(Olt,"DebertaForTokenClassification"),Olt.forEach(t),CIo=r(BLe," (DeBERTa model)"),BLe.forEach(t),wIo=i(J),fv=n(J,"LI",{});var PLe=s(fv);Cme=n(PLe,"STRONG",{});var Vlt=s(Cme);AIo=r(Vlt,"deberta-v2"),Vlt.forEach(t),yIo=r(PLe," \u2014 "),KG=n(PLe,"A",{href:!0});var Xlt=s(KG);LIo=r(Xlt,"DebertaV2ForTokenClassification"),Xlt.forEach(t),xIo=r(PLe," (DeBERTa-v2 model)"),PLe.forEach(t),$Io=i(J),mv=n(J,"LI",{});var ILe=s(mv);wme=n(ILe,"STRONG",{});var zlt=s(wme);kIo=r(zlt,"distilbert"),zlt.forEach(t),SIo=r(ILe," \u2014 "),ZG=n(ILe,"A",{href:!0});var Qlt=s(ZG);RIo=r(Qlt,"DistilBertForTokenClassification"),Qlt.forEach(t),BIo=r(ILe," (DistilBERT model)"),ILe.forEach(t),PIo=i(J),gv=n(J,"LI",{});var qLe=s(gv);Ame=n(qLe,"STRONG",{});var Wlt=s(Ame);IIo=r(Wlt,"electra"),Wlt.forEach(t),qIo=r(qLe," \u2014 "),eO=n(qLe,"A",{href:!0});var Hlt=s(eO);NIo=r(Hlt,"ElectraForTokenClassification"),Hlt.forEach(t),jIo=r(qLe," (ELECTRA model)"),qLe.forEach(t),DIo=i(J),hv=n(J,"LI",{});var NLe=s(hv);yme=n(NLe,"STRONG",{});var Ult=s(yme);GIo=r(Ult,"flaubert"),Ult.forEach(t),OIo=r(NLe," \u2014 "),oO=n(NLe,"A",{href:!0});var Jlt=s(oO);VIo=r(Jlt,"FlaubertForTokenClassification"),Jlt.forEach(t),XIo=r(NLe," (FlauBERT model)"),NLe.forEach(t),zIo=i(J),pv=n(J,"LI",{});var jLe=s(pv);Lme=n(jLe,"STRONG",{});var Ylt=s(Lme);QIo=r(Ylt,"fnet"),Ylt.forEach(t),WIo=r(jLe," \u2014 "),rO=n(jLe,"A",{href:!0});var Klt=s(rO);HIo=r(Klt,"FNetForTokenClassification"),Klt.forEach(t),UIo=r(jLe," (FNet model)"),jLe.forEach(t),JIo=i(J),uv=n(J,"LI",{});var DLe=s(uv);xme=n(DLe,"STRONG",{});var Zlt=s(xme);YIo=r(Zlt,"funnel"),Zlt.forEach(t),KIo=r(DLe," \u2014 "),tO=n(DLe,"A",{href:!0});var eit=s(tO);ZIo=r(eit,"FunnelForTokenClassification"),eit.forEach(t),eqo=r(DLe," (Funnel Transformer model)"),DLe.forEach(t),oqo=i(J),_v=n(J,"LI",{});var GLe=s(_v);$me=n(GLe,"STRONG",{});var oit=s($me);rqo=r(oit,"gpt2"),oit.forEach(t),tqo=r(GLe," \u2014 "),aO=n(GLe,"A",{href:!0});var rit=s(aO);aqo=r(rit,"GPT2ForTokenClassification"),rit.forEach(t),nqo=r(GLe," (OpenAI GPT-2 model)"),GLe.forEach(t),sqo=i(J),bv=n(J,"LI",{});var OLe=s(bv);kme=n(OLe,"STRONG",{});var tit=s(kme);lqo=r(tit,"ibert"),tit.forEach(t),iqo=r(OLe," \u2014 "),nO=n(OLe,"A",{href:!0});var ait=s(nO);dqo=r(ait,"IBertForTokenClassification"),ait.forEach(t),cqo=r(OLe," (I-BERT model)"),OLe.forEach(t),fqo=i(J),vv=n(J,"LI",{});var VLe=s(vv);Sme=n(VLe,"STRONG",{});var nit=s(Sme);mqo=r(nit,"layoutlm"),nit.forEach(t),gqo=r(VLe," \u2014 "),sO=n(VLe,"A",{href:!0});var sit=s(sO);hqo=r(sit,"LayoutLMForTokenClassification"),sit.forEach(t),pqo=r(VLe," (LayoutLM model)"),VLe.forEach(t),uqo=i(J),Fv=n(J,"LI",{});var XLe=s(Fv);Rme=n(XLe,"STRONG",{});var lit=s(Rme);_qo=r(lit,"layoutlmv2"),lit.forEach(t),bqo=r(XLe," \u2014 "),lO=n(XLe,"A",{href:!0});var iit=s(lO);vqo=r(iit,"LayoutLMv2ForTokenClassification"),iit.forEach(t),Fqo=r(XLe," (LayoutLMv2 model)"),XLe.forEach(t),Tqo=i(J),Tv=n(J,"LI",{});var zLe=s(Tv);Bme=n(zLe,"STRONG",{});var dit=s(Bme);Mqo=r(dit,"longformer"),dit.forEach(t),Eqo=r(zLe," \u2014 "),iO=n(zLe,"A",{href:!0});var cit=s(iO);Cqo=r(cit,"LongformerForTokenClassification"),cit.forEach(t),wqo=r(zLe," (Longformer model)"),zLe.forEach(t),Aqo=i(J),Mv=n(J,"LI",{});var QLe=s(Mv);Pme=n(QLe,"STRONG",{});var fit=s(Pme);yqo=r(fit,"megatron-bert"),fit.forEach(t),Lqo=r(QLe," \u2014 "),dO=n(QLe,"A",{href:!0});var mit=s(dO);xqo=r(mit,"MegatronBertForTokenClassification"),mit.forEach(t),$qo=r(QLe," (MegatronBert model)"),QLe.forEach(t),kqo=i(J),Ev=n(J,"LI",{});var WLe=s(Ev);Ime=n(WLe,"STRONG",{});var git=s(Ime);Sqo=r(git,"mobilebert"),git.forEach(t),Rqo=r(WLe," \u2014 "),cO=n(WLe,"A",{href:!0});var hit=s(cO);Bqo=r(hit,"MobileBertForTokenClassification"),hit.forEach(t),Pqo=r(WLe," (MobileBERT model)"),WLe.forEach(t),Iqo=i(J),Cv=n(J,"LI",{});var HLe=s(Cv);qme=n(HLe,"STRONG",{});var pit=s(qme);qqo=r(pit,"mpnet"),pit.forEach(t),Nqo=r(HLe," \u2014 "),fO=n(HLe,"A",{href:!0});var uit=s(fO);jqo=r(uit,"MPNetForTokenClassification"),uit.forEach(t),Dqo=r(HLe," (MPNet model)"),HLe.forEach(t),Gqo=i(J),wv=n(J,"LI",{});var ULe=s(wv);Nme=n(ULe,"STRONG",{});var _it=s(Nme);Oqo=r(_it,"nystromformer"),_it.forEach(t),Vqo=r(ULe," \u2014 "),mO=n(ULe,"A",{href:!0});var bit=s(mO);Xqo=r(bit,"NystromformerForTokenClassification"),bit.forEach(t),zqo=r(ULe," (Nystromformer model)"),ULe.forEach(t),Qqo=i(J),Av=n(J,"LI",{});var JLe=s(Av);jme=n(JLe,"STRONG",{});var vit=s(jme);Wqo=r(vit,"qdqbert"),vit.forEach(t),Hqo=r(JLe," \u2014 "),gO=n(JLe,"A",{href:!0});var Fit=s(gO);Uqo=r(Fit,"QDQBertForTokenClassification"),Fit.forEach(t),Jqo=r(JLe," (QDQBert model)"),JLe.forEach(t),Yqo=i(J),yv=n(J,"LI",{});var YLe=s(yv);Dme=n(YLe,"STRONG",{});var Tit=s(Dme);Kqo=r(Tit,"rembert"),Tit.forEach(t),Zqo=r(YLe," \u2014 "),hO=n(YLe,"A",{href:!0});var Mit=s(hO);eNo=r(Mit,"RemBertForTokenClassification"),Mit.forEach(t),oNo=r(YLe," (RemBERT model)"),YLe.forEach(t),rNo=i(J),Lv=n(J,"LI",{});var KLe=s(Lv);Gme=n(KLe,"STRONG",{});var Eit=s(Gme);tNo=r(Eit,"roberta"),Eit.forEach(t),aNo=r(KLe," \u2014 "),pO=n(KLe,"A",{href:!0});var Cit=s(pO);nNo=r(Cit,"RobertaForTokenClassification"),Cit.forEach(t),sNo=r(KLe," (RoBERTa model)"),KLe.forEach(t),lNo=i(J),xv=n(J,"LI",{});var ZLe=s(xv);Ome=n(ZLe,"STRONG",{});var wit=s(Ome);iNo=r(wit,"roformer"),wit.forEach(t),dNo=r(ZLe," \u2014 "),uO=n(ZLe,"A",{href:!0});var Ait=s(uO);cNo=r(Ait,"RoFormerForTokenClassification"),Ait.forEach(t),fNo=r(ZLe," (RoFormer model)"),ZLe.forEach(t),mNo=i(J),$v=n(J,"LI",{});var e8e=s($v);Vme=n(e8e,"STRONG",{});var yit=s(Vme);gNo=r(yit,"squeezebert"),yit.forEach(t),hNo=r(e8e," \u2014 "),_O=n(e8e,"A",{href:!0});var Lit=s(_O);pNo=r(Lit,"SqueezeBertForTokenClassification"),Lit.forEach(t),uNo=r(e8e," (SqueezeBERT model)"),e8e.forEach(t),_No=i(J),kv=n(J,"LI",{});var o8e=s(kv);Xme=n(o8e,"STRONG",{});var xit=s(Xme);bNo=r(xit,"xlm"),xit.forEach(t),vNo=r(o8e," \u2014 "),bO=n(o8e,"A",{href:!0});var $it=s(bO);FNo=r($it,"XLMForTokenClassification"),$it.forEach(t),TNo=r(o8e," (XLM model)"),o8e.forEach(t),MNo=i(J),Sv=n(J,"LI",{});var r8e=s(Sv);zme=n(r8e,"STRONG",{});var kit=s(zme);ENo=r(kit,"xlm-roberta"),kit.forEach(t),CNo=r(r8e," \u2014 "),vO=n(r8e,"A",{href:!0});var Sit=s(vO);wNo=r(Sit,"XLMRobertaForTokenClassification"),Sit.forEach(t),ANo=r(r8e," (XLM-RoBERTa model)"),r8e.forEach(t),yNo=i(J),Rv=n(J,"LI",{});var t8e=s(Rv);Qme=n(t8e,"STRONG",{});var Rit=s(Qme);LNo=r(Rit,"xlm-roberta-xl"),Rit.forEach(t),xNo=r(t8e," \u2014 "),FO=n(t8e,"A",{href:!0});var Bit=s(FO);$No=r(Bit,"XLMRobertaXLForTokenClassification"),Bit.forEach(t),kNo=r(t8e," (XLM-RoBERTa-XL model)"),t8e.forEach(t),SNo=i(J),Bv=n(J,"LI",{});var a8e=s(Bv);Wme=n(a8e,"STRONG",{});var Pit=s(Wme);RNo=r(Pit,"xlnet"),Pit.forEach(t),BNo=r(a8e," \u2014 "),TO=n(a8e,"A",{href:!0});var Iit=s(TO);PNo=r(Iit,"XLNetForTokenClassification"),Iit.forEach(t),INo=r(a8e," (XLNet model)"),a8e.forEach(t),qNo=i(J),Pv=n(J,"LI",{});var n8e=s(Pv);Hme=n(n8e,"STRONG",{});var qit=s(Hme);NNo=r(qit,"yoso"),qit.forEach(t),jNo=r(n8e," \u2014 "),MO=n(n8e,"A",{href:!0});var Nit=s(MO);DNo=r(Nit,"YosoForTokenClassification"),Nit.forEach(t),GNo=r(n8e," (YOSO model)"),n8e.forEach(t),J.forEach(t),ONo=i(la),Iv=n(la,"P",{});var s8e=s(Iv);VNo=r(s8e,"The model is set in evaluation mode by default using "),Ume=n(s8e,"CODE",{});var jit=s(Ume);XNo=r(jit,"model.eval()"),jit.forEach(t),zNo=r(s8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jme=n(s8e,"CODE",{});var Dit=s(Jme);QNo=r(Dit,"model.train()"),Dit.forEach(t),s8e.forEach(t),WNo=i(la),T(qv.$$.fragment,la),la.forEach(t),Us.forEach(t),uIe=i(f),Ui=n(f,"H2",{class:!0});var FNe=s(Ui);Nv=n(FNe,"A",{id:!0,class:!0,href:!0});var Git=s(Nv);Yme=n(Git,"SPAN",{});var Oit=s(Yme);T(h0.$$.fragment,Oit),Oit.forEach(t),Git.forEach(t),HNo=i(FNe),Kme=n(FNe,"SPAN",{});var Vit=s(Kme);UNo=r(Vit,"AutoModelForQuestionAnswering"),Vit.forEach(t),FNe.forEach(t),_Ie=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(p0.$$.fragment,Js),JNo=i(Js),Ji=n(Js,"P",{});var wK=s(Ji);YNo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EO=n(wK,"A",{href:!0});var Xit=s(EO);KNo=r(Xit,"from_pretrained()"),Xit.forEach(t),ZNo=r(wK," class method or the "),CO=n(wK,"A",{href:!0});var zit=s(CO);ejo=r(zit,"from_config()"),zit.forEach(t),ojo=r(wK,` class
method.`),wK.forEach(t),rjo=i(Js),u0=n(Js,"P",{});var TNe=s(u0);tjo=r(TNe,"This class cannot be instantiated directly using "),Zme=n(TNe,"CODE",{});var Qit=s(Zme);ajo=r(Qit,"__init__()"),Qit.forEach(t),njo=r(TNe," (throws an error)."),TNe.forEach(t),sjo=i(Js),ct=n(Js,"DIV",{class:!0});var _w=s(ct);T(_0.$$.fragment,_w),ljo=i(_w),ege=n(_w,"P",{});var Wit=s(ege);ijo=r(Wit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Wit.forEach(t),djo=i(_w),Yi=n(_w,"P",{});var AK=s(Yi);cjo=r(AK,`Note:
Loading a model from its configuration file does `),oge=n(AK,"STRONG",{});var Hit=s(oge);fjo=r(Hit,"not"),Hit.forEach(t),mjo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(AK,"A",{href:!0});var Uit=s(wO);gjo=r(Uit,"from_pretrained()"),Uit.forEach(t),hjo=r(AK," to load the model weights."),AK.forEach(t),pjo=i(_w),T(jv.$$.fragment,_w),_w.forEach(t),ujo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(b0.$$.fragment,ia),_jo=i(ia),rge=n(ia,"P",{});var Jit=s(rge);bjo=r(Jit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jit.forEach(t),vjo=i(ia),Pa=n(ia,"P",{});var bw=s(Pa);Fjo=r(bw,"The model class to instantiate is selected based on the "),tge=n(bw,"CODE",{});var Yit=s(tge);Tjo=r(Yit,"model_type"),Yit.forEach(t),Mjo=r(bw,` property of the config object (either
passed as an argument or loaded from `),age=n(bw,"CODE",{});var Kit=s(age);Ejo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),Cjo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=n(bw,"CODE",{});var Zit=s(nge);wjo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),Ajo=r(bw,":"),bw.forEach(t),yjo=i(ia),O=n(ia,"UL",{});var X=s(O);Dv=n(X,"LI",{});var l8e=s(Dv);sge=n(l8e,"STRONG",{});var edt=s(sge);Ljo=r(edt,"albert"),edt.forEach(t),xjo=r(l8e," \u2014 "),AO=n(l8e,"A",{href:!0});var odt=s(AO);$jo=r(odt,"AlbertForQuestionAnswering"),odt.forEach(t),kjo=r(l8e," (ALBERT model)"),l8e.forEach(t),Sjo=i(X),Gv=n(X,"LI",{});var i8e=s(Gv);lge=n(i8e,"STRONG",{});var rdt=s(lge);Rjo=r(rdt,"bart"),rdt.forEach(t),Bjo=r(i8e," \u2014 "),yO=n(i8e,"A",{href:!0});var tdt=s(yO);Pjo=r(tdt,"BartForQuestionAnswering"),tdt.forEach(t),Ijo=r(i8e," (BART model)"),i8e.forEach(t),qjo=i(X),Ov=n(X,"LI",{});var d8e=s(Ov);ige=n(d8e,"STRONG",{});var adt=s(ige);Njo=r(adt,"bert"),adt.forEach(t),jjo=r(d8e," \u2014 "),LO=n(d8e,"A",{href:!0});var ndt=s(LO);Djo=r(ndt,"BertForQuestionAnswering"),ndt.forEach(t),Gjo=r(d8e," (BERT model)"),d8e.forEach(t),Ojo=i(X),Vv=n(X,"LI",{});var c8e=s(Vv);dge=n(c8e,"STRONG",{});var sdt=s(dge);Vjo=r(sdt,"big_bird"),sdt.forEach(t),Xjo=r(c8e," \u2014 "),xO=n(c8e,"A",{href:!0});var ldt=s(xO);zjo=r(ldt,"BigBirdForQuestionAnswering"),ldt.forEach(t),Qjo=r(c8e," (BigBird model)"),c8e.forEach(t),Wjo=i(X),Xv=n(X,"LI",{});var f8e=s(Xv);cge=n(f8e,"STRONG",{});var idt=s(cge);Hjo=r(idt,"bigbird_pegasus"),idt.forEach(t),Ujo=r(f8e," \u2014 "),$O=n(f8e,"A",{href:!0});var ddt=s($O);Jjo=r(ddt,"BigBirdPegasusForQuestionAnswering"),ddt.forEach(t),Yjo=r(f8e," (BigBirdPegasus model)"),f8e.forEach(t),Kjo=i(X),zv=n(X,"LI",{});var m8e=s(zv);fge=n(m8e,"STRONG",{});var cdt=s(fge);Zjo=r(cdt,"camembert"),cdt.forEach(t),eDo=r(m8e," \u2014 "),kO=n(m8e,"A",{href:!0});var fdt=s(kO);oDo=r(fdt,"CamembertForQuestionAnswering"),fdt.forEach(t),rDo=r(m8e," (CamemBERT model)"),m8e.forEach(t),tDo=i(X),Qv=n(X,"LI",{});var g8e=s(Qv);mge=n(g8e,"STRONG",{});var mdt=s(mge);aDo=r(mdt,"canine"),mdt.forEach(t),nDo=r(g8e," \u2014 "),SO=n(g8e,"A",{href:!0});var gdt=s(SO);sDo=r(gdt,"CanineForQuestionAnswering"),gdt.forEach(t),lDo=r(g8e," (Canine model)"),g8e.forEach(t),iDo=i(X),Wv=n(X,"LI",{});var h8e=s(Wv);gge=n(h8e,"STRONG",{});var hdt=s(gge);dDo=r(hdt,"convbert"),hdt.forEach(t),cDo=r(h8e," \u2014 "),RO=n(h8e,"A",{href:!0});var pdt=s(RO);fDo=r(pdt,"ConvBertForQuestionAnswering"),pdt.forEach(t),mDo=r(h8e," (ConvBERT model)"),h8e.forEach(t),gDo=i(X),Hv=n(X,"LI",{});var p8e=s(Hv);hge=n(p8e,"STRONG",{});var udt=s(hge);hDo=r(udt,"data2vec-text"),udt.forEach(t),pDo=r(p8e," \u2014 "),BO=n(p8e,"A",{href:!0});var _dt=s(BO);uDo=r(_dt,"Data2VecTextForQuestionAnswering"),_dt.forEach(t),_Do=r(p8e," (Data2VecText model)"),p8e.forEach(t),bDo=i(X),Uv=n(X,"LI",{});var u8e=s(Uv);pge=n(u8e,"STRONG",{});var bdt=s(pge);vDo=r(bdt,"deberta"),bdt.forEach(t),FDo=r(u8e," \u2014 "),PO=n(u8e,"A",{href:!0});var vdt=s(PO);TDo=r(vdt,"DebertaForQuestionAnswering"),vdt.forEach(t),MDo=r(u8e," (DeBERTa model)"),u8e.forEach(t),EDo=i(X),Jv=n(X,"LI",{});var _8e=s(Jv);uge=n(_8e,"STRONG",{});var Fdt=s(uge);CDo=r(Fdt,"deberta-v2"),Fdt.forEach(t),wDo=r(_8e," \u2014 "),IO=n(_8e,"A",{href:!0});var Tdt=s(IO);ADo=r(Tdt,"DebertaV2ForQuestionAnswering"),Tdt.forEach(t),yDo=r(_8e," (DeBERTa-v2 model)"),_8e.forEach(t),LDo=i(X),Yv=n(X,"LI",{});var b8e=s(Yv);_ge=n(b8e,"STRONG",{});var Mdt=s(_ge);xDo=r(Mdt,"distilbert"),Mdt.forEach(t),$Do=r(b8e," \u2014 "),qO=n(b8e,"A",{href:!0});var Edt=s(qO);kDo=r(Edt,"DistilBertForQuestionAnswering"),Edt.forEach(t),SDo=r(b8e," (DistilBERT model)"),b8e.forEach(t),RDo=i(X),Kv=n(X,"LI",{});var v8e=s(Kv);bge=n(v8e,"STRONG",{});var Cdt=s(bge);BDo=r(Cdt,"electra"),Cdt.forEach(t),PDo=r(v8e," \u2014 "),NO=n(v8e,"A",{href:!0});var wdt=s(NO);IDo=r(wdt,"ElectraForQuestionAnswering"),wdt.forEach(t),qDo=r(v8e," (ELECTRA model)"),v8e.forEach(t),NDo=i(X),Zv=n(X,"LI",{});var F8e=s(Zv);vge=n(F8e,"STRONG",{});var Adt=s(vge);jDo=r(Adt,"flaubert"),Adt.forEach(t),DDo=r(F8e," \u2014 "),jO=n(F8e,"A",{href:!0});var ydt=s(jO);GDo=r(ydt,"FlaubertForQuestionAnsweringSimple"),ydt.forEach(t),ODo=r(F8e," (FlauBERT model)"),F8e.forEach(t),VDo=i(X),eF=n(X,"LI",{});var T8e=s(eF);Fge=n(T8e,"STRONG",{});var Ldt=s(Fge);XDo=r(Ldt,"fnet"),Ldt.forEach(t),zDo=r(T8e," \u2014 "),DO=n(T8e,"A",{href:!0});var xdt=s(DO);QDo=r(xdt,"FNetForQuestionAnswering"),xdt.forEach(t),WDo=r(T8e," (FNet model)"),T8e.forEach(t),HDo=i(X),oF=n(X,"LI",{});var M8e=s(oF);Tge=n(M8e,"STRONG",{});var $dt=s(Tge);UDo=r($dt,"funnel"),$dt.forEach(t),JDo=r(M8e," \u2014 "),GO=n(M8e,"A",{href:!0});var kdt=s(GO);YDo=r(kdt,"FunnelForQuestionAnswering"),kdt.forEach(t),KDo=r(M8e," (Funnel Transformer model)"),M8e.forEach(t),ZDo=i(X),rF=n(X,"LI",{});var E8e=s(rF);Mge=n(E8e,"STRONG",{});var Sdt=s(Mge);eGo=r(Sdt,"gptj"),Sdt.forEach(t),oGo=r(E8e," \u2014 "),OO=n(E8e,"A",{href:!0});var Rdt=s(OO);rGo=r(Rdt,"GPTJForQuestionAnswering"),Rdt.forEach(t),tGo=r(E8e," (GPT-J model)"),E8e.forEach(t),aGo=i(X),tF=n(X,"LI",{});var C8e=s(tF);Ege=n(C8e,"STRONG",{});var Bdt=s(Ege);nGo=r(Bdt,"ibert"),Bdt.forEach(t),sGo=r(C8e," \u2014 "),VO=n(C8e,"A",{href:!0});var Pdt=s(VO);lGo=r(Pdt,"IBertForQuestionAnswering"),Pdt.forEach(t),iGo=r(C8e," (I-BERT model)"),C8e.forEach(t),dGo=i(X),aF=n(X,"LI",{});var w8e=s(aF);Cge=n(w8e,"STRONG",{});var Idt=s(Cge);cGo=r(Idt,"layoutlmv2"),Idt.forEach(t),fGo=r(w8e," \u2014 "),XO=n(w8e,"A",{href:!0});var qdt=s(XO);mGo=r(qdt,"LayoutLMv2ForQuestionAnswering"),qdt.forEach(t),gGo=r(w8e," (LayoutLMv2 model)"),w8e.forEach(t),hGo=i(X),nF=n(X,"LI",{});var A8e=s(nF);wge=n(A8e,"STRONG",{});var Ndt=s(wge);pGo=r(Ndt,"led"),Ndt.forEach(t),uGo=r(A8e," \u2014 "),zO=n(A8e,"A",{href:!0});var jdt=s(zO);_Go=r(jdt,"LEDForQuestionAnswering"),jdt.forEach(t),bGo=r(A8e," (LED model)"),A8e.forEach(t),vGo=i(X),sF=n(X,"LI",{});var y8e=s(sF);Age=n(y8e,"STRONG",{});var Ddt=s(Age);FGo=r(Ddt,"longformer"),Ddt.forEach(t),TGo=r(y8e," \u2014 "),QO=n(y8e,"A",{href:!0});var Gdt=s(QO);MGo=r(Gdt,"LongformerForQuestionAnswering"),Gdt.forEach(t),EGo=r(y8e," (Longformer model)"),y8e.forEach(t),CGo=i(X),lF=n(X,"LI",{});var L8e=s(lF);yge=n(L8e,"STRONG",{});var Odt=s(yge);wGo=r(Odt,"lxmert"),Odt.forEach(t),AGo=r(L8e," \u2014 "),WO=n(L8e,"A",{href:!0});var Vdt=s(WO);yGo=r(Vdt,"LxmertForQuestionAnswering"),Vdt.forEach(t),LGo=r(L8e," (LXMERT model)"),L8e.forEach(t),xGo=i(X),iF=n(X,"LI",{});var x8e=s(iF);Lge=n(x8e,"STRONG",{});var Xdt=s(Lge);$Go=r(Xdt,"mbart"),Xdt.forEach(t),kGo=r(x8e," \u2014 "),HO=n(x8e,"A",{href:!0});var zdt=s(HO);SGo=r(zdt,"MBartForQuestionAnswering"),zdt.forEach(t),RGo=r(x8e," (mBART model)"),x8e.forEach(t),BGo=i(X),dF=n(X,"LI",{});var $8e=s(dF);xge=n($8e,"STRONG",{});var Qdt=s(xge);PGo=r(Qdt,"megatron-bert"),Qdt.forEach(t),IGo=r($8e," \u2014 "),UO=n($8e,"A",{href:!0});var Wdt=s(UO);qGo=r(Wdt,"MegatronBertForQuestionAnswering"),Wdt.forEach(t),NGo=r($8e," (MegatronBert model)"),$8e.forEach(t),jGo=i(X),cF=n(X,"LI",{});var k8e=s(cF);$ge=n(k8e,"STRONG",{});var Hdt=s($ge);DGo=r(Hdt,"mobilebert"),Hdt.forEach(t),GGo=r(k8e," \u2014 "),JO=n(k8e,"A",{href:!0});var Udt=s(JO);OGo=r(Udt,"MobileBertForQuestionAnswering"),Udt.forEach(t),VGo=r(k8e," (MobileBERT model)"),k8e.forEach(t),XGo=i(X),fF=n(X,"LI",{});var S8e=s(fF);kge=n(S8e,"STRONG",{});var Jdt=s(kge);zGo=r(Jdt,"mpnet"),Jdt.forEach(t),QGo=r(S8e," \u2014 "),YO=n(S8e,"A",{href:!0});var Ydt=s(YO);WGo=r(Ydt,"MPNetForQuestionAnswering"),Ydt.forEach(t),HGo=r(S8e," (MPNet model)"),S8e.forEach(t),UGo=i(X),mF=n(X,"LI",{});var R8e=s(mF);Sge=n(R8e,"STRONG",{});var Kdt=s(Sge);JGo=r(Kdt,"nystromformer"),Kdt.forEach(t),YGo=r(R8e," \u2014 "),KO=n(R8e,"A",{href:!0});var Zdt=s(KO);KGo=r(Zdt,"NystromformerForQuestionAnswering"),Zdt.forEach(t),ZGo=r(R8e," (Nystromformer model)"),R8e.forEach(t),eOo=i(X),gF=n(X,"LI",{});var B8e=s(gF);Rge=n(B8e,"STRONG",{});var ect=s(Rge);oOo=r(ect,"qdqbert"),ect.forEach(t),rOo=r(B8e," \u2014 "),ZO=n(B8e,"A",{href:!0});var oct=s(ZO);tOo=r(oct,"QDQBertForQuestionAnswering"),oct.forEach(t),aOo=r(B8e," (QDQBert model)"),B8e.forEach(t),nOo=i(X),hF=n(X,"LI",{});var P8e=s(hF);Bge=n(P8e,"STRONG",{});var rct=s(Bge);sOo=r(rct,"reformer"),rct.forEach(t),lOo=r(P8e," \u2014 "),eV=n(P8e,"A",{href:!0});var tct=s(eV);iOo=r(tct,"ReformerForQuestionAnswering"),tct.forEach(t),dOo=r(P8e," (Reformer model)"),P8e.forEach(t),cOo=i(X),pF=n(X,"LI",{});var I8e=s(pF);Pge=n(I8e,"STRONG",{});var act=s(Pge);fOo=r(act,"rembert"),act.forEach(t),mOo=r(I8e," \u2014 "),oV=n(I8e,"A",{href:!0});var nct=s(oV);gOo=r(nct,"RemBertForQuestionAnswering"),nct.forEach(t),hOo=r(I8e," (RemBERT model)"),I8e.forEach(t),pOo=i(X),uF=n(X,"LI",{});var q8e=s(uF);Ige=n(q8e,"STRONG",{});var sct=s(Ige);uOo=r(sct,"roberta"),sct.forEach(t),_Oo=r(q8e," \u2014 "),rV=n(q8e,"A",{href:!0});var lct=s(rV);bOo=r(lct,"RobertaForQuestionAnswering"),lct.forEach(t),vOo=r(q8e," (RoBERTa model)"),q8e.forEach(t),FOo=i(X),_F=n(X,"LI",{});var N8e=s(_F);qge=n(N8e,"STRONG",{});var ict=s(qge);TOo=r(ict,"roformer"),ict.forEach(t),MOo=r(N8e," \u2014 "),tV=n(N8e,"A",{href:!0});var dct=s(tV);EOo=r(dct,"RoFormerForQuestionAnswering"),dct.forEach(t),COo=r(N8e," (RoFormer model)"),N8e.forEach(t),wOo=i(X),bF=n(X,"LI",{});var j8e=s(bF);Nge=n(j8e,"STRONG",{});var cct=s(Nge);AOo=r(cct,"splinter"),cct.forEach(t),yOo=r(j8e," \u2014 "),aV=n(j8e,"A",{href:!0});var fct=s(aV);LOo=r(fct,"SplinterForQuestionAnswering"),fct.forEach(t),xOo=r(j8e," (Splinter model)"),j8e.forEach(t),$Oo=i(X),vF=n(X,"LI",{});var D8e=s(vF);jge=n(D8e,"STRONG",{});var mct=s(jge);kOo=r(mct,"squeezebert"),mct.forEach(t),SOo=r(D8e," \u2014 "),nV=n(D8e,"A",{href:!0});var gct=s(nV);ROo=r(gct,"SqueezeBertForQuestionAnswering"),gct.forEach(t),BOo=r(D8e," (SqueezeBERT model)"),D8e.forEach(t),POo=i(X),FF=n(X,"LI",{});var G8e=s(FF);Dge=n(G8e,"STRONG",{});var hct=s(Dge);IOo=r(hct,"xlm"),hct.forEach(t),qOo=r(G8e," \u2014 "),sV=n(G8e,"A",{href:!0});var pct=s(sV);NOo=r(pct,"XLMForQuestionAnsweringSimple"),pct.forEach(t),jOo=r(G8e," (XLM model)"),G8e.forEach(t),DOo=i(X),TF=n(X,"LI",{});var O8e=s(TF);Gge=n(O8e,"STRONG",{});var uct=s(Gge);GOo=r(uct,"xlm-roberta"),uct.forEach(t),OOo=r(O8e," \u2014 "),lV=n(O8e,"A",{href:!0});var _ct=s(lV);VOo=r(_ct,"XLMRobertaForQuestionAnswering"),_ct.forEach(t),XOo=r(O8e," (XLM-RoBERTa model)"),O8e.forEach(t),zOo=i(X),MF=n(X,"LI",{});var V8e=s(MF);Oge=n(V8e,"STRONG",{});var bct=s(Oge);QOo=r(bct,"xlm-roberta-xl"),bct.forEach(t),WOo=r(V8e," \u2014 "),iV=n(V8e,"A",{href:!0});var vct=s(iV);HOo=r(vct,"XLMRobertaXLForQuestionAnswering"),vct.forEach(t),UOo=r(V8e," (XLM-RoBERTa-XL model)"),V8e.forEach(t),JOo=i(X),EF=n(X,"LI",{});var X8e=s(EF);Vge=n(X8e,"STRONG",{});var Fct=s(Vge);YOo=r(Fct,"xlnet"),Fct.forEach(t),KOo=r(X8e," \u2014 "),dV=n(X8e,"A",{href:!0});var Tct=s(dV);ZOo=r(Tct,"XLNetForQuestionAnsweringSimple"),Tct.forEach(t),eVo=r(X8e," (XLNet model)"),X8e.forEach(t),oVo=i(X),CF=n(X,"LI",{});var z8e=s(CF);Xge=n(z8e,"STRONG",{});var Mct=s(Xge);rVo=r(Mct,"yoso"),Mct.forEach(t),tVo=r(z8e," \u2014 "),cV=n(z8e,"A",{href:!0});var Ect=s(cV);aVo=r(Ect,"YosoForQuestionAnswering"),Ect.forEach(t),nVo=r(z8e," (YOSO model)"),z8e.forEach(t),X.forEach(t),sVo=i(ia),wF=n(ia,"P",{});var Q8e=s(wF);lVo=r(Q8e,"The model is set in evaluation mode by default using "),zge=n(Q8e,"CODE",{});var Cct=s(zge);iVo=r(Cct,"model.eval()"),Cct.forEach(t),dVo=r(Q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(Q8e,"CODE",{});var wct=s(Qge);cVo=r(wct,"model.train()"),wct.forEach(t),Q8e.forEach(t),fVo=i(ia),T(AF.$$.fragment,ia),ia.forEach(t),Js.forEach(t),bIe=i(f),Ki=n(f,"H2",{class:!0});var MNe=s(Ki);yF=n(MNe,"A",{id:!0,class:!0,href:!0});var Act=s(yF);Wge=n(Act,"SPAN",{});var yct=s(Wge);T(v0.$$.fragment,yct),yct.forEach(t),Act.forEach(t),mVo=i(MNe),Hge=n(MNe,"SPAN",{});var Lct=s(Hge);gVo=r(Lct,"AutoModelForTableQuestionAnswering"),Lct.forEach(t),MNe.forEach(t),vIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(F0.$$.fragment,Ys),hVo=i(Ys),Zi=n(Ys,"P",{});var yK=s(Zi);pVo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fV=n(yK,"A",{href:!0});var xct=s(fV);uVo=r(xct,"from_pretrained()"),xct.forEach(t),_Vo=r(yK," class method or the "),mV=n(yK,"A",{href:!0});var $ct=s(mV);bVo=r($ct,"from_config()"),$ct.forEach(t),vVo=r(yK,` class
method.`),yK.forEach(t),FVo=i(Ys),T0=n(Ys,"P",{});var ENe=s(T0);TVo=r(ENe,"This class cannot be instantiated directly using "),Uge=n(ENe,"CODE",{});var kct=s(Uge);MVo=r(kct,"__init__()"),kct.forEach(t),EVo=r(ENe," (throws an error)."),ENe.forEach(t),CVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var vw=s(ft);T(M0.$$.fragment,vw),wVo=i(vw),Jge=n(vw,"P",{});var Sct=s(Jge);AVo=r(Sct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Sct.forEach(t),yVo=i(vw),ed=n(vw,"P",{});var LK=s(ed);LVo=r(LK,`Note:
Loading a model from its configuration file does `),Yge=n(LK,"STRONG",{});var Rct=s(Yge);xVo=r(Rct,"not"),Rct.forEach(t),$Vo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(LK,"A",{href:!0});var Bct=s(gV);kVo=r(Bct,"from_pretrained()"),Bct.forEach(t),SVo=r(LK," to load the model weights."),LK.forEach(t),RVo=i(vw),T(LF.$$.fragment,vw),vw.forEach(t),BVo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(E0.$$.fragment,da),PVo=i(da),Kge=n(da,"P",{});var Pct=s(Kge);IVo=r(Pct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Pct.forEach(t),qVo=i(da),Ia=n(da,"P",{});var Fw=s(Ia);NVo=r(Fw,"The model class to instantiate is selected based on the "),Zge=n(Fw,"CODE",{});var Ict=s(Zge);jVo=r(Ict,"model_type"),Ict.forEach(t),DVo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),ehe=n(Fw,"CODE",{});var qct=s(ehe);GVo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),OVo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=n(Fw,"CODE",{});var Nct=s(ohe);VVo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),XVo=r(Fw,":"),Fw.forEach(t),zVo=i(da),rhe=n(da,"UL",{});var jct=s(rhe);xF=n(jct,"LI",{});var W8e=s(xF);the=n(W8e,"STRONG",{});var Dct=s(the);QVo=r(Dct,"tapas"),Dct.forEach(t),WVo=r(W8e," \u2014 "),hV=n(W8e,"A",{href:!0});var Gct=s(hV);HVo=r(Gct,"TapasForQuestionAnswering"),Gct.forEach(t),UVo=r(W8e," (TAPAS model)"),W8e.forEach(t),jct.forEach(t),JVo=i(da),$F=n(da,"P",{});var H8e=s($F);YVo=r(H8e,"The model is set in evaluation mode by default using "),ahe=n(H8e,"CODE",{});var Oct=s(ahe);KVo=r(Oct,"model.eval()"),Oct.forEach(t),ZVo=r(H8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(H8e,"CODE",{});var Vct=s(nhe);eXo=r(Vct,"model.train()"),Vct.forEach(t),H8e.forEach(t),oXo=i(da),T(kF.$$.fragment,da),da.forEach(t),Ys.forEach(t),FIe=i(f),od=n(f,"H2",{class:!0});var CNe=s(od);SF=n(CNe,"A",{id:!0,class:!0,href:!0});var Xct=s(SF);she=n(Xct,"SPAN",{});var zct=s(she);T(C0.$$.fragment,zct),zct.forEach(t),Xct.forEach(t),rXo=i(CNe),lhe=n(CNe,"SPAN",{});var Qct=s(lhe);tXo=r(Qct,"AutoModelForImageClassification"),Qct.forEach(t),CNe.forEach(t),TIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(w0.$$.fragment,Ks),aXo=i(Ks),rd=n(Ks,"P",{});var xK=s(rd);nXo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pV=n(xK,"A",{href:!0});var Wct=s(pV);sXo=r(Wct,"from_pretrained()"),Wct.forEach(t),lXo=r(xK," class method or the "),uV=n(xK,"A",{href:!0});var Hct=s(uV);iXo=r(Hct,"from_config()"),Hct.forEach(t),dXo=r(xK,` class
method.`),xK.forEach(t),cXo=i(Ks),A0=n(Ks,"P",{});var wNe=s(A0);fXo=r(wNe,"This class cannot be instantiated directly using "),ihe=n(wNe,"CODE",{});var Uct=s(ihe);mXo=r(Uct,"__init__()"),Uct.forEach(t),gXo=r(wNe," (throws an error)."),wNe.forEach(t),hXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var Tw=s(mt);T(y0.$$.fragment,Tw),pXo=i(Tw),dhe=n(Tw,"P",{});var Jct=s(dhe);uXo=r(Jct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jct.forEach(t),_Xo=i(Tw),td=n(Tw,"P",{});var $K=s(td);bXo=r($K,`Note:
Loading a model from its configuration file does `),che=n($K,"STRONG",{});var Yct=s(che);vXo=r(Yct,"not"),Yct.forEach(t),FXo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n($K,"A",{href:!0});var Kct=s(_V);TXo=r(Kct,"from_pretrained()"),Kct.forEach(t),MXo=r($K," to load the model weights."),$K.forEach(t),EXo=i(Tw),T(RF.$$.fragment,Tw),Tw.forEach(t),CXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(L0.$$.fragment,ca),wXo=i(ca),fhe=n(ca,"P",{});var Zct=s(fhe);AXo=r(Zct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zct.forEach(t),yXo=i(ca),qa=n(ca,"P",{});var Mw=s(qa);LXo=r(Mw,"The model class to instantiate is selected based on the "),mhe=n(Mw,"CODE",{});var eft=s(mhe);xXo=r(eft,"model_type"),eft.forEach(t),$Xo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),ghe=n(Mw,"CODE",{});var oft=s(ghe);kXo=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),SXo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hhe=n(Mw,"CODE",{});var rft=s(hhe);RXo=r(rft,"pretrained_model_name_or_path"),rft.forEach(t),BXo=r(Mw,":"),Mw.forEach(t),PXo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);BF=n(Ee,"LI",{});var U8e=s(BF);phe=n(U8e,"STRONG",{});var tft=s(phe);IXo=r(tft,"beit"),tft.forEach(t),qXo=r(U8e," \u2014 "),bV=n(U8e,"A",{href:!0});var aft=s(bV);NXo=r(aft,"BeitForImageClassification"),aft.forEach(t),jXo=r(U8e," (BEiT model)"),U8e.forEach(t),DXo=i(Ee),PF=n(Ee,"LI",{});var J8e=s(PF);uhe=n(J8e,"STRONG",{});var nft=s(uhe);GXo=r(nft,"convnext"),nft.forEach(t),OXo=r(J8e," \u2014 "),vV=n(J8e,"A",{href:!0});var sft=s(vV);VXo=r(sft,"ConvNextForImageClassification"),sft.forEach(t),XXo=r(J8e," (ConvNext model)"),J8e.forEach(t),zXo=i(Ee),IF=n(Ee,"LI",{});var Y8e=s(IF);_he=n(Y8e,"STRONG",{});var lft=s(_he);QXo=r(lft,"data2vec-vision"),lft.forEach(t),WXo=r(Y8e," \u2014 "),FV=n(Y8e,"A",{href:!0});var ift=s(FV);HXo=r(ift,"Data2VecVisionForImageClassification"),ift.forEach(t),UXo=r(Y8e," (Data2VecVision model)"),Y8e.forEach(t),JXo=i(Ee),Bs=n(Ee,"LI",{});var m$=s(Bs);bhe=n(m$,"STRONG",{});var dft=s(bhe);YXo=r(dft,"deit"),dft.forEach(t),KXo=r(m$," \u2014 "),TV=n(m$,"A",{href:!0});var cft=s(TV);ZXo=r(cft,"DeiTForImageClassification"),cft.forEach(t),ezo=r(m$," or "),MV=n(m$,"A",{href:!0});var fft=s(MV);ozo=r(fft,"DeiTForImageClassificationWithTeacher"),fft.forEach(t),rzo=r(m$," (DeiT model)"),m$.forEach(t),tzo=i(Ee),qF=n(Ee,"LI",{});var K8e=s(qF);vhe=n(K8e,"STRONG",{});var mft=s(vhe);azo=r(mft,"imagegpt"),mft.forEach(t),nzo=r(K8e," \u2014 "),EV=n(K8e,"A",{href:!0});var gft=s(EV);szo=r(gft,"ImageGPTForImageClassification"),gft.forEach(t),lzo=r(K8e," (ImageGPT model)"),K8e.forEach(t),izo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);Fhe=n(ff,"STRONG",{});var hft=s(Fhe);dzo=r(hft,"perceiver"),hft.forEach(t),czo=r(ff," \u2014 "),CV=n(ff,"A",{href:!0});var pft=s(CV);fzo=r(pft,"PerceiverForImageClassificationLearned"),pft.forEach(t),mzo=r(ff," or "),wV=n(ff,"A",{href:!0});var uft=s(wV);gzo=r(uft,"PerceiverForImageClassificationFourier"),uft.forEach(t),hzo=r(ff," or "),AV=n(ff,"A",{href:!0});var _ft=s(AV);pzo=r(_ft,"PerceiverForImageClassificationConvProcessing"),_ft.forEach(t),uzo=r(ff," (Perceiver model)"),ff.forEach(t),_zo=i(Ee),NF=n(Ee,"LI",{});var Z8e=s(NF);The=n(Z8e,"STRONG",{});var bft=s(The);bzo=r(bft,"poolformer"),bft.forEach(t),vzo=r(Z8e," \u2014 "),yV=n(Z8e,"A",{href:!0});var vft=s(yV);Fzo=r(vft,"PoolFormerForImageClassification"),vft.forEach(t),Tzo=r(Z8e," (PoolFormer model)"),Z8e.forEach(t),Mzo=i(Ee),jF=n(Ee,"LI",{});var exe=s(jF);Mhe=n(exe,"STRONG",{});var Fft=s(Mhe);Ezo=r(Fft,"regnet"),Fft.forEach(t),Czo=r(exe," \u2014 "),LV=n(exe,"A",{href:!0});var Tft=s(LV);wzo=r(Tft,"RegNetForImageClassification"),Tft.forEach(t),Azo=r(exe," (RegNet model)"),exe.forEach(t),yzo=i(Ee),DF=n(Ee,"LI",{});var oxe=s(DF);Ehe=n(oxe,"STRONG",{});var Mft=s(Ehe);Lzo=r(Mft,"resnet"),Mft.forEach(t),xzo=r(oxe," \u2014 "),xV=n(oxe,"A",{href:!0});var Eft=s(xV);$zo=r(Eft,"ResNetForImageClassification"),Eft.forEach(t),kzo=r(oxe," (ResNet model)"),oxe.forEach(t),Szo=i(Ee),GF=n(Ee,"LI",{});var rxe=s(GF);Che=n(rxe,"STRONG",{});var Cft=s(Che);Rzo=r(Cft,"segformer"),Cft.forEach(t),Bzo=r(rxe," \u2014 "),$V=n(rxe,"A",{href:!0});var wft=s($V);Pzo=r(wft,"SegformerForImageClassification"),wft.forEach(t),Izo=r(rxe," (SegFormer model)"),rxe.forEach(t),qzo=i(Ee),OF=n(Ee,"LI",{});var txe=s(OF);whe=n(txe,"STRONG",{});var Aft=s(whe);Nzo=r(Aft,"swin"),Aft.forEach(t),jzo=r(txe," \u2014 "),kV=n(txe,"A",{href:!0});var yft=s(kV);Dzo=r(yft,"SwinForImageClassification"),yft.forEach(t),Gzo=r(txe," (Swin model)"),txe.forEach(t),Ozo=i(Ee),VF=n(Ee,"LI",{});var axe=s(VF);Ahe=n(axe,"STRONG",{});var Lft=s(Ahe);Vzo=r(Lft,"van"),Lft.forEach(t),Xzo=r(axe," \u2014 "),SV=n(axe,"A",{href:!0});var xft=s(SV);zzo=r(xft,"VanForImageClassification"),xft.forEach(t),Qzo=r(axe," (VAN model)"),axe.forEach(t),Wzo=i(Ee),XF=n(Ee,"LI",{});var nxe=s(XF);yhe=n(nxe,"STRONG",{});var $ft=s(yhe);Hzo=r($ft,"vit"),$ft.forEach(t),Uzo=r(nxe," \u2014 "),RV=n(nxe,"A",{href:!0});var kft=s(RV);Jzo=r(kft,"ViTForImageClassification"),kft.forEach(t),Yzo=r(nxe," (ViT model)"),nxe.forEach(t),Ee.forEach(t),Kzo=i(ca),zF=n(ca,"P",{});var sxe=s(zF);Zzo=r(sxe,"The model is set in evaluation mode by default using "),Lhe=n(sxe,"CODE",{});var Sft=s(Lhe);eQo=r(Sft,"model.eval()"),Sft.forEach(t),oQo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(sxe,"CODE",{});var Rft=s(xhe);rQo=r(Rft,"model.train()"),Rft.forEach(t),sxe.forEach(t),tQo=i(ca),T(QF.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),MIe=i(f),ad=n(f,"H2",{class:!0});var ANe=s(ad);WF=n(ANe,"A",{id:!0,class:!0,href:!0});var Bft=s(WF);$he=n(Bft,"SPAN",{});var Pft=s($he);T(x0.$$.fragment,Pft),Pft.forEach(t),Bft.forEach(t),aQo=i(ANe),khe=n(ANe,"SPAN",{});var Ift=s(khe);nQo=r(Ift,"AutoModelForVision2Seq"),Ift.forEach(t),ANe.forEach(t),EIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T($0.$$.fragment,Zs),sQo=i(Zs),nd=n(Zs,"P",{});var kK=s(nd);lQo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BV=n(kK,"A",{href:!0});var qft=s(BV);iQo=r(qft,"from_pretrained()"),qft.forEach(t),dQo=r(kK," class method or the "),PV=n(kK,"A",{href:!0});var Nft=s(PV);cQo=r(Nft,"from_config()"),Nft.forEach(t),fQo=r(kK,` class
method.`),kK.forEach(t),mQo=i(Zs),k0=n(Zs,"P",{});var yNe=s(k0);gQo=r(yNe,"This class cannot be instantiated directly using "),She=n(yNe,"CODE",{});var jft=s(She);hQo=r(jft,"__init__()"),jft.forEach(t),pQo=r(yNe," (throws an error)."),yNe.forEach(t),uQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var Ew=s(ht);T(S0.$$.fragment,Ew),_Qo=i(Ew),Rhe=n(Ew,"P",{});var Dft=s(Rhe);bQo=r(Dft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dft.forEach(t),vQo=i(Ew),sd=n(Ew,"P",{});var SK=s(sd);FQo=r(SK,`Note:
Loading a model from its configuration file does `),Bhe=n(SK,"STRONG",{});var Gft=s(Bhe);TQo=r(Gft,"not"),Gft.forEach(t),MQo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(SK,"A",{href:!0});var Oft=s(IV);EQo=r(Oft,"from_pretrained()"),Oft.forEach(t),CQo=r(SK," to load the model weights."),SK.forEach(t),wQo=i(Ew),T(HF.$$.fragment,Ew),Ew.forEach(t),AQo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(R0.$$.fragment,fa),yQo=i(fa),Phe=n(fa,"P",{});var Vft=s(Phe);LQo=r(Vft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vft.forEach(t),xQo=i(fa),Na=n(fa,"P",{});var Cw=s(Na);$Qo=r(Cw,"The model class to instantiate is selected based on the "),Ihe=n(Cw,"CODE",{});var Xft=s(Ihe);kQo=r(Xft,"model_type"),Xft.forEach(t),SQo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),qhe=n(Cw,"CODE",{});var zft=s(qhe);RQo=r(zft,"pretrained_model_name_or_path"),zft.forEach(t),BQo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(Cw,"CODE",{});var Qft=s(Nhe);PQo=r(Qft,"pretrained_model_name_or_path"),Qft.forEach(t),IQo=r(Cw,":"),Cw.forEach(t),qQo=i(fa),jhe=n(fa,"UL",{});var Wft=s(jhe);UF=n(Wft,"LI",{});var lxe=s(UF);Dhe=n(lxe,"STRONG",{});var Hft=s(Dhe);NQo=r(Hft,"vision-encoder-decoder"),Hft.forEach(t),jQo=r(lxe," \u2014 "),qV=n(lxe,"A",{href:!0});var Uft=s(qV);DQo=r(Uft,"VisionEncoderDecoderModel"),Uft.forEach(t),GQo=r(lxe," (Vision Encoder decoder model)"),lxe.forEach(t),Wft.forEach(t),OQo=i(fa),JF=n(fa,"P",{});var ixe=s(JF);VQo=r(ixe,"The model is set in evaluation mode by default using "),Ghe=n(ixe,"CODE",{});var Jft=s(Ghe);XQo=r(Jft,"model.eval()"),Jft.forEach(t),zQo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ohe=n(ixe,"CODE",{});var Yft=s(Ohe);QQo=r(Yft,"model.train()"),Yft.forEach(t),ixe.forEach(t),WQo=i(fa),T(YF.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),CIe=i(f),ld=n(f,"H2",{class:!0});var LNe=s(ld);KF=n(LNe,"A",{id:!0,class:!0,href:!0});var Kft=s(KF);Vhe=n(Kft,"SPAN",{});var Zft=s(Vhe);T(B0.$$.fragment,Zft),Zft.forEach(t),Kft.forEach(t),HQo=i(LNe),Xhe=n(LNe,"SPAN",{});var emt=s(Xhe);UQo=r(emt,"AutoModelForAudioClassification"),emt.forEach(t),LNe.forEach(t),wIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(P0.$$.fragment,el),JQo=i(el),id=n(el,"P",{});var RK=s(id);YQo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NV=n(RK,"A",{href:!0});var omt=s(NV);KQo=r(omt,"from_pretrained()"),omt.forEach(t),ZQo=r(RK," class method or the "),jV=n(RK,"A",{href:!0});var rmt=s(jV);eWo=r(rmt,"from_config()"),rmt.forEach(t),oWo=r(RK,` class
method.`),RK.forEach(t),rWo=i(el),I0=n(el,"P",{});var xNe=s(I0);tWo=r(xNe,"This class cannot be instantiated directly using "),zhe=n(xNe,"CODE",{});var tmt=s(zhe);aWo=r(tmt,"__init__()"),tmt.forEach(t),nWo=r(xNe," (throws an error)."),xNe.forEach(t),sWo=i(el),pt=n(el,"DIV",{class:!0});var ww=s(pt);T(q0.$$.fragment,ww),lWo=i(ww),Qhe=n(ww,"P",{});var amt=s(Qhe);iWo=r(amt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),amt.forEach(t),dWo=i(ww),dd=n(ww,"P",{});var BK=s(dd);cWo=r(BK,`Note:
Loading a model from its configuration file does `),Whe=n(BK,"STRONG",{});var nmt=s(Whe);fWo=r(nmt,"not"),nmt.forEach(t),mWo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(BK,"A",{href:!0});var smt=s(DV);gWo=r(smt,"from_pretrained()"),smt.forEach(t),hWo=r(BK," to load the model weights."),BK.forEach(t),pWo=i(ww),T(ZF.$$.fragment,ww),ww.forEach(t),uWo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(N0.$$.fragment,ma),_Wo=i(ma),Hhe=n(ma,"P",{});var lmt=s(Hhe);bWo=r(lmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),lmt.forEach(t),vWo=i(ma),ja=n(ma,"P",{});var Aw=s(ja);FWo=r(Aw,"The model class to instantiate is selected based on the "),Uhe=n(Aw,"CODE",{});var imt=s(Uhe);TWo=r(imt,"model_type"),imt.forEach(t),MWo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(Aw,"CODE",{});var dmt=s(Jhe);EWo=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),CWo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(Aw,"CODE",{});var cmt=s(Yhe);wWo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),AWo=r(Aw,":"),Aw.forEach(t),yWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);eT=n(bo,"LI",{});var dxe=s(eT);Khe=n(dxe,"STRONG",{});var fmt=s(Khe);LWo=r(fmt,"data2vec-audio"),fmt.forEach(t),xWo=r(dxe," \u2014 "),GV=n(dxe,"A",{href:!0});var mmt=s(GV);$Wo=r(mmt,"Data2VecAudioForSequenceClassification"),mmt.forEach(t),kWo=r(dxe," (Data2VecAudio model)"),dxe.forEach(t),SWo=i(bo),oT=n(bo,"LI",{});var cxe=s(oT);Zhe=n(cxe,"STRONG",{});var gmt=s(Zhe);RWo=r(gmt,"hubert"),gmt.forEach(t),BWo=r(cxe," \u2014 "),OV=n(cxe,"A",{href:!0});var hmt=s(OV);PWo=r(hmt,"HubertForSequenceClassification"),hmt.forEach(t),IWo=r(cxe," (Hubert model)"),cxe.forEach(t),qWo=i(bo),rT=n(bo,"LI",{});var fxe=s(rT);epe=n(fxe,"STRONG",{});var pmt=s(epe);NWo=r(pmt,"sew"),pmt.forEach(t),jWo=r(fxe," \u2014 "),VV=n(fxe,"A",{href:!0});var umt=s(VV);DWo=r(umt,"SEWForSequenceClassification"),umt.forEach(t),GWo=r(fxe," (SEW model)"),fxe.forEach(t),OWo=i(bo),tT=n(bo,"LI",{});var mxe=s(tT);ope=n(mxe,"STRONG",{});var _mt=s(ope);VWo=r(_mt,"sew-d"),_mt.forEach(t),XWo=r(mxe," \u2014 "),XV=n(mxe,"A",{href:!0});var bmt=s(XV);zWo=r(bmt,"SEWDForSequenceClassification"),bmt.forEach(t),QWo=r(mxe," (SEW-D model)"),mxe.forEach(t),WWo=i(bo),aT=n(bo,"LI",{});var gxe=s(aT);rpe=n(gxe,"STRONG",{});var vmt=s(rpe);HWo=r(vmt,"unispeech"),vmt.forEach(t),UWo=r(gxe," \u2014 "),zV=n(gxe,"A",{href:!0});var Fmt=s(zV);JWo=r(Fmt,"UniSpeechForSequenceClassification"),Fmt.forEach(t),YWo=r(gxe," (UniSpeech model)"),gxe.forEach(t),KWo=i(bo),nT=n(bo,"LI",{});var hxe=s(nT);tpe=n(hxe,"STRONG",{});var Tmt=s(tpe);ZWo=r(Tmt,"unispeech-sat"),Tmt.forEach(t),eHo=r(hxe," \u2014 "),QV=n(hxe,"A",{href:!0});var Mmt=s(QV);oHo=r(Mmt,"UniSpeechSatForSequenceClassification"),Mmt.forEach(t),rHo=r(hxe," (UniSpeechSat model)"),hxe.forEach(t),tHo=i(bo),sT=n(bo,"LI",{});var pxe=s(sT);ape=n(pxe,"STRONG",{});var Emt=s(ape);aHo=r(Emt,"wav2vec2"),Emt.forEach(t),nHo=r(pxe," \u2014 "),WV=n(pxe,"A",{href:!0});var Cmt=s(WV);sHo=r(Cmt,"Wav2Vec2ForSequenceClassification"),Cmt.forEach(t),lHo=r(pxe," (Wav2Vec2 model)"),pxe.forEach(t),iHo=i(bo),lT=n(bo,"LI",{});var uxe=s(lT);npe=n(uxe,"STRONG",{});var wmt=s(npe);dHo=r(wmt,"wavlm"),wmt.forEach(t),cHo=r(uxe," \u2014 "),HV=n(uxe,"A",{href:!0});var Amt=s(HV);fHo=r(Amt,"WavLMForSequenceClassification"),Amt.forEach(t),mHo=r(uxe," (WavLM model)"),uxe.forEach(t),bo.forEach(t),gHo=i(ma),iT=n(ma,"P",{});var _xe=s(iT);hHo=r(_xe,"The model is set in evaluation mode by default using "),spe=n(_xe,"CODE",{});var ymt=s(spe);pHo=r(ymt,"model.eval()"),ymt.forEach(t),uHo=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lpe=n(_xe,"CODE",{});var Lmt=s(lpe);_Ho=r(Lmt,"model.train()"),Lmt.forEach(t),_xe.forEach(t),bHo=i(ma),T(dT.$$.fragment,ma),ma.forEach(t),el.forEach(t),AIe=i(f),cd=n(f,"H2",{class:!0});var $Ne=s(cd);cT=n($Ne,"A",{id:!0,class:!0,href:!0});var xmt=s(cT);ipe=n(xmt,"SPAN",{});var $mt=s(ipe);T(j0.$$.fragment,$mt),$mt.forEach(t),xmt.forEach(t),vHo=i($Ne),dpe=n($Ne,"SPAN",{});var kmt=s(dpe);FHo=r(kmt,"AutoModelForAudioFrameClassification"),kmt.forEach(t),$Ne.forEach(t),yIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(D0.$$.fragment,ol),THo=i(ol),fd=n(ol,"P",{});var PK=s(fd);MHo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UV=n(PK,"A",{href:!0});var Smt=s(UV);EHo=r(Smt,"from_pretrained()"),Smt.forEach(t),CHo=r(PK," class method or the "),JV=n(PK,"A",{href:!0});var Rmt=s(JV);wHo=r(Rmt,"from_config()"),Rmt.forEach(t),AHo=r(PK,` class
method.`),PK.forEach(t),yHo=i(ol),G0=n(ol,"P",{});var kNe=s(G0);LHo=r(kNe,"This class cannot be instantiated directly using "),cpe=n(kNe,"CODE",{});var Bmt=s(cpe);xHo=r(Bmt,"__init__()"),Bmt.forEach(t),$Ho=r(kNe," (throws an error)."),kNe.forEach(t),kHo=i(ol),ut=n(ol,"DIV",{class:!0});var yw=s(ut);T(O0.$$.fragment,yw),SHo=i(yw),fpe=n(yw,"P",{});var Pmt=s(fpe);RHo=r(Pmt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Pmt.forEach(t),BHo=i(yw),md=n(yw,"P",{});var IK=s(md);PHo=r(IK,`Note:
Loading a model from its configuration file does `),mpe=n(IK,"STRONG",{});var Imt=s(mpe);IHo=r(Imt,"not"),Imt.forEach(t),qHo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(IK,"A",{href:!0});var qmt=s(YV);NHo=r(qmt,"from_pretrained()"),qmt.forEach(t),jHo=r(IK," to load the model weights."),IK.forEach(t),DHo=i(yw),T(fT.$$.fragment,yw),yw.forEach(t),GHo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(V0.$$.fragment,ga),OHo=i(ga),gpe=n(ga,"P",{});var Nmt=s(gpe);VHo=r(Nmt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Nmt.forEach(t),XHo=i(ga),Da=n(ga,"P",{});var Lw=s(Da);zHo=r(Lw,"The model class to instantiate is selected based on the "),hpe=n(Lw,"CODE",{});var jmt=s(hpe);QHo=r(jmt,"model_type"),jmt.forEach(t),WHo=r(Lw,` property of the config object (either
passed as an argument or loaded from `),ppe=n(Lw,"CODE",{});var Dmt=s(ppe);HHo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),UHo=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(Lw,"CODE",{});var Gmt=s(upe);JHo=r(Gmt,"pretrained_model_name_or_path"),Gmt.forEach(t),YHo=r(Lw,":"),Lw.forEach(t),KHo=i(ga),Ga=n(ga,"UL",{});var xw=s(Ga);mT=n(xw,"LI",{});var bxe=s(mT);_pe=n(bxe,"STRONG",{});var Omt=s(_pe);ZHo=r(Omt,"data2vec-audio"),Omt.forEach(t),eUo=r(bxe," \u2014 "),KV=n(bxe,"A",{href:!0});var Vmt=s(KV);oUo=r(Vmt,"Data2VecAudioForAudioFrameClassification"),Vmt.forEach(t),rUo=r(bxe," (Data2VecAudio model)"),bxe.forEach(t),tUo=i(xw),gT=n(xw,"LI",{});var vxe=s(gT);bpe=n(vxe,"STRONG",{});var Xmt=s(bpe);aUo=r(Xmt,"unispeech-sat"),Xmt.forEach(t),nUo=r(vxe," \u2014 "),ZV=n(vxe,"A",{href:!0});var zmt=s(ZV);sUo=r(zmt,"UniSpeechSatForAudioFrameClassification"),zmt.forEach(t),lUo=r(vxe," (UniSpeechSat model)"),vxe.forEach(t),iUo=i(xw),hT=n(xw,"LI",{});var Fxe=s(hT);vpe=n(Fxe,"STRONG",{});var Qmt=s(vpe);dUo=r(Qmt,"wav2vec2"),Qmt.forEach(t),cUo=r(Fxe," \u2014 "),eX=n(Fxe,"A",{href:!0});var Wmt=s(eX);fUo=r(Wmt,"Wav2Vec2ForAudioFrameClassification"),Wmt.forEach(t),mUo=r(Fxe," (Wav2Vec2 model)"),Fxe.forEach(t),gUo=i(xw),pT=n(xw,"LI",{});var Txe=s(pT);Fpe=n(Txe,"STRONG",{});var Hmt=s(Fpe);hUo=r(Hmt,"wavlm"),Hmt.forEach(t),pUo=r(Txe," \u2014 "),oX=n(Txe,"A",{href:!0});var Umt=s(oX);uUo=r(Umt,"WavLMForAudioFrameClassification"),Umt.forEach(t),_Uo=r(Txe," (WavLM model)"),Txe.forEach(t),xw.forEach(t),bUo=i(ga),uT=n(ga,"P",{});var Mxe=s(uT);vUo=r(Mxe,"The model is set in evaluation mode by default using "),Tpe=n(Mxe,"CODE",{});var Jmt=s(Tpe);FUo=r(Jmt,"model.eval()"),Jmt.forEach(t),TUo=r(Mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=n(Mxe,"CODE",{});var Ymt=s(Mpe);MUo=r(Ymt,"model.train()"),Ymt.forEach(t),Mxe.forEach(t),EUo=i(ga),T(_T.$$.fragment,ga),ga.forEach(t),ol.forEach(t),LIe=i(f),gd=n(f,"H2",{class:!0});var SNe=s(gd);bT=n(SNe,"A",{id:!0,class:!0,href:!0});var Kmt=s(bT);Epe=n(Kmt,"SPAN",{});var Zmt=s(Epe);T(X0.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),CUo=i(SNe),Cpe=n(SNe,"SPAN",{});var egt=s(Cpe);wUo=r(egt,"AutoModelForCTC"),egt.forEach(t),SNe.forEach(t),xIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(z0.$$.fragment,rl),AUo=i(rl),hd=n(rl,"P",{});var qK=s(hd);yUo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rX=n(qK,"A",{href:!0});var ogt=s(rX);LUo=r(ogt,"from_pretrained()"),ogt.forEach(t),xUo=r(qK," class method or the "),tX=n(qK,"A",{href:!0});var rgt=s(tX);$Uo=r(rgt,"from_config()"),rgt.forEach(t),kUo=r(qK,` class
method.`),qK.forEach(t),SUo=i(rl),Q0=n(rl,"P",{});var RNe=s(Q0);RUo=r(RNe,"This class cannot be instantiated directly using "),wpe=n(RNe,"CODE",{});var tgt=s(wpe);BUo=r(tgt,"__init__()"),tgt.forEach(t),PUo=r(RNe," (throws an error)."),RNe.forEach(t),IUo=i(rl),_t=n(rl,"DIV",{class:!0});var $w=s(_t);T(W0.$$.fragment,$w),qUo=i($w),Ape=n($w,"P",{});var agt=s(Ape);NUo=r(agt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),agt.forEach(t),jUo=i($w),pd=n($w,"P",{});var NK=s(pd);DUo=r(NK,`Note:
Loading a model from its configuration file does `),ype=n(NK,"STRONG",{});var ngt=s(ype);GUo=r(ngt,"not"),ngt.forEach(t),OUo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(NK,"A",{href:!0});var sgt=s(aX);VUo=r(sgt,"from_pretrained()"),sgt.forEach(t),XUo=r(NK," to load the model weights."),NK.forEach(t),zUo=i($w),T(vT.$$.fragment,$w),$w.forEach(t),QUo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(H0.$$.fragment,ha),WUo=i(ha),Lpe=n(ha,"P",{});var lgt=s(Lpe);HUo=r(lgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lgt.forEach(t),UUo=i(ha),Oa=n(ha,"P",{});var kw=s(Oa);JUo=r(kw,"The model class to instantiate is selected based on the "),xpe=n(kw,"CODE",{});var igt=s(xpe);YUo=r(igt,"model_type"),igt.forEach(t),KUo=r(kw,` property of the config object (either
passed as an argument or loaded from `),$pe=n(kw,"CODE",{});var dgt=s($pe);ZUo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),eJo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=n(kw,"CODE",{});var cgt=s(kpe);oJo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),rJo=r(kw,":"),kw.forEach(t),tJo=i(ha),je=n(ha,"UL",{});var vo=s(je);FT=n(vo,"LI",{});var Exe=s(FT);Spe=n(Exe,"STRONG",{});var fgt=s(Spe);aJo=r(fgt,"data2vec-audio"),fgt.forEach(t),nJo=r(Exe," \u2014 "),nX=n(Exe,"A",{href:!0});var mgt=s(nX);sJo=r(mgt,"Data2VecAudioForCTC"),mgt.forEach(t),lJo=r(Exe," (Data2VecAudio model)"),Exe.forEach(t),iJo=i(vo),TT=n(vo,"LI",{});var Cxe=s(TT);Rpe=n(Cxe,"STRONG",{});var ggt=s(Rpe);dJo=r(ggt,"hubert"),ggt.forEach(t),cJo=r(Cxe," \u2014 "),sX=n(Cxe,"A",{href:!0});var hgt=s(sX);fJo=r(hgt,"HubertForCTC"),hgt.forEach(t),mJo=r(Cxe," (Hubert model)"),Cxe.forEach(t),gJo=i(vo),MT=n(vo,"LI",{});var wxe=s(MT);Bpe=n(wxe,"STRONG",{});var pgt=s(Bpe);hJo=r(pgt,"sew"),pgt.forEach(t),pJo=r(wxe," \u2014 "),lX=n(wxe,"A",{href:!0});var ugt=s(lX);uJo=r(ugt,"SEWForCTC"),ugt.forEach(t),_Jo=r(wxe," (SEW model)"),wxe.forEach(t),bJo=i(vo),ET=n(vo,"LI",{});var Axe=s(ET);Ppe=n(Axe,"STRONG",{});var _gt=s(Ppe);vJo=r(_gt,"sew-d"),_gt.forEach(t),FJo=r(Axe," \u2014 "),iX=n(Axe,"A",{href:!0});var bgt=s(iX);TJo=r(bgt,"SEWDForCTC"),bgt.forEach(t),MJo=r(Axe," (SEW-D model)"),Axe.forEach(t),EJo=i(vo),CT=n(vo,"LI",{});var yxe=s(CT);Ipe=n(yxe,"STRONG",{});var vgt=s(Ipe);CJo=r(vgt,"unispeech"),vgt.forEach(t),wJo=r(yxe," \u2014 "),dX=n(yxe,"A",{href:!0});var Fgt=s(dX);AJo=r(Fgt,"UniSpeechForCTC"),Fgt.forEach(t),yJo=r(yxe," (UniSpeech model)"),yxe.forEach(t),LJo=i(vo),wT=n(vo,"LI",{});var Lxe=s(wT);qpe=n(Lxe,"STRONG",{});var Tgt=s(qpe);xJo=r(Tgt,"unispeech-sat"),Tgt.forEach(t),$Jo=r(Lxe," \u2014 "),cX=n(Lxe,"A",{href:!0});var Mgt=s(cX);kJo=r(Mgt,"UniSpeechSatForCTC"),Mgt.forEach(t),SJo=r(Lxe," (UniSpeechSat model)"),Lxe.forEach(t),RJo=i(vo),AT=n(vo,"LI",{});var xxe=s(AT);Npe=n(xxe,"STRONG",{});var Egt=s(Npe);BJo=r(Egt,"wav2vec2"),Egt.forEach(t),PJo=r(xxe," \u2014 "),fX=n(xxe,"A",{href:!0});var Cgt=s(fX);IJo=r(Cgt,"Wav2Vec2ForCTC"),Cgt.forEach(t),qJo=r(xxe," (Wav2Vec2 model)"),xxe.forEach(t),NJo=i(vo),yT=n(vo,"LI",{});var $xe=s(yT);jpe=n($xe,"STRONG",{});var wgt=s(jpe);jJo=r(wgt,"wavlm"),wgt.forEach(t),DJo=r($xe," \u2014 "),mX=n($xe,"A",{href:!0});var Agt=s(mX);GJo=r(Agt,"WavLMForCTC"),Agt.forEach(t),OJo=r($xe," (WavLM model)"),$xe.forEach(t),vo.forEach(t),VJo=i(ha),LT=n(ha,"P",{});var kxe=s(LT);XJo=r(kxe,"The model is set in evaluation mode by default using "),Dpe=n(kxe,"CODE",{});var ygt=s(Dpe);zJo=r(ygt,"model.eval()"),ygt.forEach(t),QJo=r(kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(kxe,"CODE",{});var Lgt=s(Gpe);WJo=r(Lgt,"model.train()"),Lgt.forEach(t),kxe.forEach(t),HJo=i(ha),T(xT.$$.fragment,ha),ha.forEach(t),rl.forEach(t),$Ie=i(f),ud=n(f,"H2",{class:!0});var BNe=s(ud);$T=n(BNe,"A",{id:!0,class:!0,href:!0});var xgt=s($T);Ope=n(xgt,"SPAN",{});var $gt=s(Ope);T(U0.$$.fragment,$gt),$gt.forEach(t),xgt.forEach(t),UJo=i(BNe),Vpe=n(BNe,"SPAN",{});var kgt=s(Vpe);JJo=r(kgt,"AutoModelForSpeechSeq2Seq"),kgt.forEach(t),BNe.forEach(t),kIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(J0.$$.fragment,tl),YJo=i(tl),_d=n(tl,"P",{});var jK=s(_d);KJo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gX=n(jK,"A",{href:!0});var Sgt=s(gX);ZJo=r(Sgt,"from_pretrained()"),Sgt.forEach(t),eYo=r(jK," class method or the "),hX=n(jK,"A",{href:!0});var Rgt=s(hX);oYo=r(Rgt,"from_config()"),Rgt.forEach(t),rYo=r(jK,` class
method.`),jK.forEach(t),tYo=i(tl),Y0=n(tl,"P",{});var PNe=s(Y0);aYo=r(PNe,"This class cannot be instantiated directly using "),Xpe=n(PNe,"CODE",{});var Bgt=s(Xpe);nYo=r(Bgt,"__init__()"),Bgt.forEach(t),sYo=r(PNe," (throws an error)."),PNe.forEach(t),lYo=i(tl),bt=n(tl,"DIV",{class:!0});var Sw=s(bt);T(K0.$$.fragment,Sw),iYo=i(Sw),zpe=n(Sw,"P",{});var Pgt=s(zpe);dYo=r(Pgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Pgt.forEach(t),cYo=i(Sw),bd=n(Sw,"P",{});var DK=s(bd);fYo=r(DK,`Note:
Loading a model from its configuration file does `),Qpe=n(DK,"STRONG",{});var Igt=s(Qpe);mYo=r(Igt,"not"),Igt.forEach(t),gYo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(DK,"A",{href:!0});var qgt=s(pX);hYo=r(qgt,"from_pretrained()"),qgt.forEach(t),pYo=r(DK," to load the model weights."),DK.forEach(t),uYo=i(Sw),T(kT.$$.fragment,Sw),Sw.forEach(t),_Yo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Z0.$$.fragment,pa),bYo=i(pa),Wpe=n(pa,"P",{});var Ngt=s(Wpe);vYo=r(Ngt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ngt.forEach(t),FYo=i(pa),Va=n(pa,"P",{});var Rw=s(Va);TYo=r(Rw,"The model class to instantiate is selected based on the "),Hpe=n(Rw,"CODE",{});var jgt=s(Hpe);MYo=r(jgt,"model_type"),jgt.forEach(t),EYo=r(Rw,` property of the config object (either
passed as an argument or loaded from `),Upe=n(Rw,"CODE",{});var Dgt=s(Upe);CYo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),wYo=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(Rw,"CODE",{});var Ggt=s(Jpe);AYo=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),yYo=r(Rw,":"),Rw.forEach(t),LYo=i(pa),ey=n(pa,"UL",{});var INe=s(ey);ST=n(INe,"LI",{});var Sxe=s(ST);Ype=n(Sxe,"STRONG",{});var Ogt=s(Ype);xYo=r(Ogt,"speech-encoder-decoder"),Ogt.forEach(t),$Yo=r(Sxe," \u2014 "),uX=n(Sxe,"A",{href:!0});var Vgt=s(uX);kYo=r(Vgt,"SpeechEncoderDecoderModel"),Vgt.forEach(t),SYo=r(Sxe," (Speech Encoder decoder model)"),Sxe.forEach(t),RYo=i(INe),RT=n(INe,"LI",{});var Rxe=s(RT);Kpe=n(Rxe,"STRONG",{});var Xgt=s(Kpe);BYo=r(Xgt,"speech_to_text"),Xgt.forEach(t),PYo=r(Rxe," \u2014 "),_X=n(Rxe,"A",{href:!0});var zgt=s(_X);IYo=r(zgt,"Speech2TextForConditionalGeneration"),zgt.forEach(t),qYo=r(Rxe," (Speech2Text model)"),Rxe.forEach(t),INe.forEach(t),NYo=i(pa),BT=n(pa,"P",{});var Bxe=s(BT);jYo=r(Bxe,"The model is set in evaluation mode by default using "),Zpe=n(Bxe,"CODE",{});var Qgt=s(Zpe);DYo=r(Qgt,"model.eval()"),Qgt.forEach(t),GYo=r(Bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eue=n(Bxe,"CODE",{});var Wgt=s(eue);OYo=r(Wgt,"model.train()"),Wgt.forEach(t),Bxe.forEach(t),VYo=i(pa),T(PT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),SIe=i(f),vd=n(f,"H2",{class:!0});var qNe=s(vd);IT=n(qNe,"A",{id:!0,class:!0,href:!0});var Hgt=s(IT);oue=n(Hgt,"SPAN",{});var Ugt=s(oue);T(oy.$$.fragment,Ugt),Ugt.forEach(t),Hgt.forEach(t),XYo=i(qNe),rue=n(qNe,"SPAN",{});var Jgt=s(rue);zYo=r(Jgt,"AutoModelForAudioXVector"),Jgt.forEach(t),qNe.forEach(t),RIe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(ry.$$.fragment,al),QYo=i(al),Fd=n(al,"P",{});var GK=s(Fd);WYo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bX=n(GK,"A",{href:!0});var Ygt=s(bX);HYo=r(Ygt,"from_pretrained()"),Ygt.forEach(t),UYo=r(GK," class method or the "),vX=n(GK,"A",{href:!0});var Kgt=s(vX);JYo=r(Kgt,"from_config()"),Kgt.forEach(t),YYo=r(GK,` class
method.`),GK.forEach(t),KYo=i(al),ty=n(al,"P",{});var NNe=s(ty);ZYo=r(NNe,"This class cannot be instantiated directly using "),tue=n(NNe,"CODE",{});var Zgt=s(tue);eKo=r(Zgt,"__init__()"),Zgt.forEach(t),oKo=r(NNe," (throws an error)."),NNe.forEach(t),rKo=i(al),vt=n(al,"DIV",{class:!0});var Bw=s(vt);T(ay.$$.fragment,Bw),tKo=i(Bw),aue=n(Bw,"P",{});var eht=s(aue);aKo=r(eht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eht.forEach(t),nKo=i(Bw),Td=n(Bw,"P",{});var OK=s(Td);sKo=r(OK,`Note:
Loading a model from its configuration file does `),nue=n(OK,"STRONG",{});var oht=s(nue);lKo=r(oht,"not"),oht.forEach(t),iKo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(OK,"A",{href:!0});var rht=s(FX);dKo=r(rht,"from_pretrained()"),rht.forEach(t),cKo=r(OK," to load the model weights."),OK.forEach(t),fKo=i(Bw),T(qT.$$.fragment,Bw),Bw.forEach(t),mKo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(ny.$$.fragment,ua),gKo=i(ua),sue=n(ua,"P",{});var tht=s(sue);hKo=r(tht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tht.forEach(t),pKo=i(ua),Xa=n(ua,"P",{});var Pw=s(Xa);uKo=r(Pw,"The model class to instantiate is selected based on the "),lue=n(Pw,"CODE",{});var aht=s(lue);_Ko=r(aht,"model_type"),aht.forEach(t),bKo=r(Pw,` property of the config object (either
passed as an argument or loaded from `),iue=n(Pw,"CODE",{});var nht=s(iue);vKo=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),FKo=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(Pw,"CODE",{});var sht=s(due);TKo=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),MKo=r(Pw,":"),Pw.forEach(t),EKo=i(ua),za=n(ua,"UL",{});var Iw=s(za);NT=n(Iw,"LI",{});var Pxe=s(NT);cue=n(Pxe,"STRONG",{});var lht=s(cue);CKo=r(lht,"data2vec-audio"),lht.forEach(t),wKo=r(Pxe," \u2014 "),TX=n(Pxe,"A",{href:!0});var iht=s(TX);AKo=r(iht,"Data2VecAudioForXVector"),iht.forEach(t),yKo=r(Pxe," (Data2VecAudio model)"),Pxe.forEach(t),LKo=i(Iw),jT=n(Iw,"LI",{});var Ixe=s(jT);fue=n(Ixe,"STRONG",{});var dht=s(fue);xKo=r(dht,"unispeech-sat"),dht.forEach(t),$Ko=r(Ixe," \u2014 "),MX=n(Ixe,"A",{href:!0});var cht=s(MX);kKo=r(cht,"UniSpeechSatForXVector"),cht.forEach(t),SKo=r(Ixe," (UniSpeechSat model)"),Ixe.forEach(t),RKo=i(Iw),DT=n(Iw,"LI",{});var qxe=s(DT);mue=n(qxe,"STRONG",{});var fht=s(mue);BKo=r(fht,"wav2vec2"),fht.forEach(t),PKo=r(qxe," \u2014 "),EX=n(qxe,"A",{href:!0});var mht=s(EX);IKo=r(mht,"Wav2Vec2ForXVector"),mht.forEach(t),qKo=r(qxe," (Wav2Vec2 model)"),qxe.forEach(t),NKo=i(Iw),GT=n(Iw,"LI",{});var Nxe=s(GT);gue=n(Nxe,"STRONG",{});var ght=s(gue);jKo=r(ght,"wavlm"),ght.forEach(t),DKo=r(Nxe," \u2014 "),CX=n(Nxe,"A",{href:!0});var hht=s(CX);GKo=r(hht,"WavLMForXVector"),hht.forEach(t),OKo=r(Nxe," (WavLM model)"),Nxe.forEach(t),Iw.forEach(t),VKo=i(ua),OT=n(ua,"P",{});var jxe=s(OT);XKo=r(jxe,"The model is set in evaluation mode by default using "),hue=n(jxe,"CODE",{});var pht=s(hue);zKo=r(pht,"model.eval()"),pht.forEach(t),QKo=r(jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(jxe,"CODE",{});var uht=s(pue);WKo=r(uht,"model.train()"),uht.forEach(t),jxe.forEach(t),HKo=i(ua),T(VT.$$.fragment,ua),ua.forEach(t),al.forEach(t),BIe=i(f),Md=n(f,"H2",{class:!0});var jNe=s(Md);XT=n(jNe,"A",{id:!0,class:!0,href:!0});var _ht=s(XT);uue=n(_ht,"SPAN",{});var bht=s(uue);T(sy.$$.fragment,bht),bht.forEach(t),_ht.forEach(t),UKo=i(jNe),_ue=n(jNe,"SPAN",{});var vht=s(_ue);JKo=r(vht,"AutoModelForMaskedImageModeling"),vht.forEach(t),jNe.forEach(t),PIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(ly.$$.fragment,nl),YKo=i(nl),Ed=n(nl,"P",{});var VK=s(Ed);KKo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wX=n(VK,"A",{href:!0});var Fht=s(wX);ZKo=r(Fht,"from_pretrained()"),Fht.forEach(t),eZo=r(VK," class method or the "),AX=n(VK,"A",{href:!0});var Tht=s(AX);oZo=r(Tht,"from_config()"),Tht.forEach(t),rZo=r(VK,` class
method.`),VK.forEach(t),tZo=i(nl),iy=n(nl,"P",{});var DNe=s(iy);aZo=r(DNe,"This class cannot be instantiated directly using "),bue=n(DNe,"CODE",{});var Mht=s(bue);nZo=r(Mht,"__init__()"),Mht.forEach(t),sZo=r(DNe," (throws an error)."),DNe.forEach(t),lZo=i(nl),Ft=n(nl,"DIV",{class:!0});var qw=s(Ft);T(dy.$$.fragment,qw),iZo=i(qw),vue=n(qw,"P",{});var Eht=s(vue);dZo=r(Eht,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Eht.forEach(t),cZo=i(qw),Cd=n(qw,"P",{});var XK=s(Cd);fZo=r(XK,`Note:
Loading a model from its configuration file does `),Fue=n(XK,"STRONG",{});var Cht=s(Fue);mZo=r(Cht,"not"),Cht.forEach(t),gZo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yX=n(XK,"A",{href:!0});var wht=s(yX);hZo=r(wht,"from_pretrained()"),wht.forEach(t),pZo=r(XK," to load the model weights."),XK.forEach(t),uZo=i(qw),T(zT.$$.fragment,qw),qw.forEach(t),_Zo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(cy.$$.fragment,_a),bZo=i(_a),Tue=n(_a,"P",{});var Aht=s(Tue);vZo=r(Aht,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Aht.forEach(t),FZo=i(_a),Qa=n(_a,"P",{});var Nw=s(Qa);TZo=r(Nw,"The model class to instantiate is selected based on the "),Mue=n(Nw,"CODE",{});var yht=s(Mue);MZo=r(yht,"model_type"),yht.forEach(t),EZo=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Eue=n(Nw,"CODE",{});var Lht=s(Eue);CZo=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),wZo=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(Nw,"CODE",{});var xht=s(Cue);AZo=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),yZo=r(Nw,":"),Nw.forEach(t),LZo=i(_a),wd=n(_a,"UL",{});var zK=s(wd);QT=n(zK,"LI",{});var Dxe=s(QT);wue=n(Dxe,"STRONG",{});var $ht=s(wue);xZo=r($ht,"deit"),$ht.forEach(t),$Zo=r(Dxe," \u2014 "),LX=n(Dxe,"A",{href:!0});var kht=s(LX);kZo=r(kht,"DeiTForMaskedImageModeling"),kht.forEach(t),SZo=r(Dxe," (DeiT model)"),Dxe.forEach(t),RZo=i(zK),WT=n(zK,"LI",{});var Gxe=s(WT);Aue=n(Gxe,"STRONG",{});var Sht=s(Aue);BZo=r(Sht,"swin"),Sht.forEach(t),PZo=r(Gxe," \u2014 "),xX=n(Gxe,"A",{href:!0});var Rht=s(xX);IZo=r(Rht,"SwinForMaskedImageModeling"),Rht.forEach(t),qZo=r(Gxe," (Swin model)"),Gxe.forEach(t),NZo=i(zK),HT=n(zK,"LI",{});var Oxe=s(HT);yue=n(Oxe,"STRONG",{});var Bht=s(yue);jZo=r(Bht,"vit"),Bht.forEach(t),DZo=r(Oxe," \u2014 "),$X=n(Oxe,"A",{href:!0});var Pht=s($X);GZo=r(Pht,"ViTForMaskedImageModeling"),Pht.forEach(t),OZo=r(Oxe," (ViT model)"),Oxe.forEach(t),zK.forEach(t),VZo=i(_a),UT=n(_a,"P",{});var Vxe=s(UT);XZo=r(Vxe,"The model is set in evaluation mode by default using "),Lue=n(Vxe,"CODE",{});var Iht=s(Lue);zZo=r(Iht,"model.eval()"),Iht.forEach(t),QZo=r(Vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xue=n(Vxe,"CODE",{});var qht=s(xue);WZo=r(qht,"model.train()"),qht.forEach(t),Vxe.forEach(t),HZo=i(_a),T(JT.$$.fragment,_a),_a.forEach(t),nl.forEach(t),IIe=i(f),Ad=n(f,"H2",{class:!0});var GNe=s(Ad);YT=n(GNe,"A",{id:!0,class:!0,href:!0});var Nht=s(YT);$ue=n(Nht,"SPAN",{});var jht=s($ue);T(fy.$$.fragment,jht),jht.forEach(t),Nht.forEach(t),UZo=i(GNe),kue=n(GNe,"SPAN",{});var Dht=s(kue);JZo=r(Dht,"AutoModelForObjectDetection"),Dht.forEach(t),GNe.forEach(t),qIe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(my.$$.fragment,sl),YZo=i(sl),yd=n(sl,"P",{});var QK=s(yd);KZo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kX=n(QK,"A",{href:!0});var Ght=s(kX);ZZo=r(Ght,"from_pretrained()"),Ght.forEach(t),eer=r(QK," class method or the "),SX=n(QK,"A",{href:!0});var Oht=s(SX);oer=r(Oht,"from_config()"),Oht.forEach(t),rer=r(QK,` class
method.`),QK.forEach(t),ter=i(sl),gy=n(sl,"P",{});var ONe=s(gy);aer=r(ONe,"This class cannot be instantiated directly using "),Sue=n(ONe,"CODE",{});var Vht=s(Sue);ner=r(Vht,"__init__()"),Vht.forEach(t),ser=r(ONe," (throws an error)."),ONe.forEach(t),ler=i(sl),Tt=n(sl,"DIV",{class:!0});var jw=s(Tt);T(hy.$$.fragment,jw),ier=i(jw),Rue=n(jw,"P",{});var Xht=s(Rue);der=r(Xht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Xht.forEach(t),cer=i(jw),Ld=n(jw,"P",{});var WK=s(Ld);fer=r(WK,`Note:
Loading a model from its configuration file does `),Bue=n(WK,"STRONG",{});var zht=s(Bue);mer=r(zht,"not"),zht.forEach(t),ger=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(WK,"A",{href:!0});var Qht=s(RX);her=r(Qht,"from_pretrained()"),Qht.forEach(t),per=r(WK," to load the model weights."),WK.forEach(t),uer=i(jw),T(KT.$$.fragment,jw),jw.forEach(t),_er=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(py.$$.fragment,ba),ber=i(ba),Pue=n(ba,"P",{});var Wht=s(Pue);ver=r(Wht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Wht.forEach(t),Fer=i(ba),Wa=n(ba,"P",{});var Dw=s(Wa);Ter=r(Dw,"The model class to instantiate is selected based on the "),Iue=n(Dw,"CODE",{});var Hht=s(Iue);Mer=r(Hht,"model_type"),Hht.forEach(t),Eer=r(Dw,` property of the config object (either
passed as an argument or loaded from `),que=n(Dw,"CODE",{});var Uht=s(que);Cer=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),wer=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(Dw,"CODE",{});var Jht=s(Nue);Aer=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),yer=r(Dw,":"),Dw.forEach(t),Ler=i(ba),uy=n(ba,"UL",{});var VNe=s(uy);ZT=n(VNe,"LI",{});var Xxe=s(ZT);jue=n(Xxe,"STRONG",{});var Yht=s(jue);xer=r(Yht,"detr"),Yht.forEach(t),$er=r(Xxe," \u2014 "),BX=n(Xxe,"A",{href:!0});var Kht=s(BX);ker=r(Kht,"DetrForObjectDetection"),Kht.forEach(t),Ser=r(Xxe," (DETR model)"),Xxe.forEach(t),Rer=i(VNe),e7=n(VNe,"LI",{});var zxe=s(e7);Due=n(zxe,"STRONG",{});var Zht=s(Due);Ber=r(Zht,"yolos"),Zht.forEach(t),Per=r(zxe," \u2014 "),PX=n(zxe,"A",{href:!0});var ept=s(PX);Ier=r(ept,"YolosForObjectDetection"),ept.forEach(t),qer=r(zxe," (YOLOS model)"),zxe.forEach(t),VNe.forEach(t),Ner=i(ba),o7=n(ba,"P",{});var Qxe=s(o7);jer=r(Qxe,"The model is set in evaluation mode by default using "),Gue=n(Qxe,"CODE",{});var opt=s(Gue);Der=r(opt,"model.eval()"),opt.forEach(t),Ger=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(Qxe,"CODE",{});var rpt=s(Oue);Oer=r(rpt,"model.train()"),rpt.forEach(t),Qxe.forEach(t),Ver=i(ba),T(r7.$$.fragment,ba),ba.forEach(t),sl.forEach(t),NIe=i(f),xd=n(f,"H2",{class:!0});var XNe=s(xd);t7=n(XNe,"A",{id:!0,class:!0,href:!0});var tpt=s(t7);Vue=n(tpt,"SPAN",{});var apt=s(Vue);T(_y.$$.fragment,apt),apt.forEach(t),tpt.forEach(t),Xer=i(XNe),Xue=n(XNe,"SPAN",{});var npt=s(Xue);zer=r(npt,"AutoModelForImageSegmentation"),npt.forEach(t),XNe.forEach(t),jIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(by.$$.fragment,ll),Qer=i(ll),$d=n(ll,"P",{});var HK=s($d);Wer=r(HK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IX=n(HK,"A",{href:!0});var spt=s(IX);Her=r(spt,"from_pretrained()"),spt.forEach(t),Uer=r(HK," class method or the "),qX=n(HK,"A",{href:!0});var lpt=s(qX);Jer=r(lpt,"from_config()"),lpt.forEach(t),Yer=r(HK,` class
method.`),HK.forEach(t),Ker=i(ll),vy=n(ll,"P",{});var zNe=s(vy);Zer=r(zNe,"This class cannot be instantiated directly using "),zue=n(zNe,"CODE",{});var ipt=s(zue);eor=r(ipt,"__init__()"),ipt.forEach(t),oor=r(zNe," (throws an error)."),zNe.forEach(t),ror=i(ll),Mt=n(ll,"DIV",{class:!0});var Gw=s(Mt);T(Fy.$$.fragment,Gw),tor=i(Gw),Que=n(Gw,"P",{});var dpt=s(Que);aor=r(dpt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),dpt.forEach(t),nor=i(Gw),kd=n(Gw,"P",{});var UK=s(kd);sor=r(UK,`Note:
Loading a model from its configuration file does `),Wue=n(UK,"STRONG",{});var cpt=s(Wue);lor=r(cpt,"not"),cpt.forEach(t),ior=r(UK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(UK,"A",{href:!0});var fpt=s(NX);dor=r(fpt,"from_pretrained()"),fpt.forEach(t),cor=r(UK," to load the model weights."),UK.forEach(t),mor=i(Gw),T(a7.$$.fragment,Gw),Gw.forEach(t),gor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(Ty.$$.fragment,va),hor=i(va),Hue=n(va,"P",{});var mpt=s(Hue);por=r(mpt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),mpt.forEach(t),uor=i(va),Ha=n(va,"P",{});var Ow=s(Ha);_or=r(Ow,"The model class to instantiate is selected based on the "),Uue=n(Ow,"CODE",{});var gpt=s(Uue);bor=r(gpt,"model_type"),gpt.forEach(t),vor=r(Ow,` property of the config object (either
passed as an argument or loaded from `),Jue=n(Ow,"CODE",{});var hpt=s(Jue);For=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),Tor=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(Ow,"CODE",{});var ppt=s(Yue);Mor=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),Eor=r(Ow,":"),Ow.forEach(t),Cor=i(va),Kue=n(va,"UL",{});var upt=s(Kue);n7=n(upt,"LI",{});var Wxe=s(n7);Zue=n(Wxe,"STRONG",{});var _pt=s(Zue);wor=r(_pt,"detr"),_pt.forEach(t),Aor=r(Wxe," \u2014 "),jX=n(Wxe,"A",{href:!0});var bpt=s(jX);yor=r(bpt,"DetrForSegmentation"),bpt.forEach(t),Lor=r(Wxe," (DETR model)"),Wxe.forEach(t),upt.forEach(t),xor=i(va),s7=n(va,"P",{});var Hxe=s(s7);$or=r(Hxe,"The model is set in evaluation mode by default using "),e_e=n(Hxe,"CODE",{});var vpt=s(e_e);kor=r(vpt,"model.eval()"),vpt.forEach(t),Sor=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o_e=n(Hxe,"CODE",{});var Fpt=s(o_e);Ror=r(Fpt,"model.train()"),Fpt.forEach(t),Hxe.forEach(t),Bor=i(va),T(l7.$$.fragment,va),va.forEach(t),ll.forEach(t),DIe=i(f),Sd=n(f,"H2",{class:!0});var QNe=s(Sd);i7=n(QNe,"A",{id:!0,class:!0,href:!0});var Tpt=s(i7);r_e=n(Tpt,"SPAN",{});var Mpt=s(r_e);T(My.$$.fragment,Mpt),Mpt.forEach(t),Tpt.forEach(t),Por=i(QNe),t_e=n(QNe,"SPAN",{});var Ept=s(t_e);Ior=r(Ept,"AutoModelForSemanticSegmentation"),Ept.forEach(t),QNe.forEach(t),GIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(Ey.$$.fragment,il),qor=i(il),Rd=n(il,"P",{});var JK=s(Rd);Nor=r(JK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DX=n(JK,"A",{href:!0});var Cpt=s(DX);jor=r(Cpt,"from_pretrained()"),Cpt.forEach(t),Dor=r(JK," class method or the "),GX=n(JK,"A",{href:!0});var wpt=s(GX);Gor=r(wpt,"from_config()"),wpt.forEach(t),Oor=r(JK,` class
method.`),JK.forEach(t),Vor=i(il),Cy=n(il,"P",{});var WNe=s(Cy);Xor=r(WNe,"This class cannot be instantiated directly using "),a_e=n(WNe,"CODE",{});var Apt=s(a_e);zor=r(Apt,"__init__()"),Apt.forEach(t),Qor=r(WNe," (throws an error)."),WNe.forEach(t),Wor=i(il),Et=n(il,"DIV",{class:!0});var Vw=s(Et);T(wy.$$.fragment,Vw),Hor=i(Vw),n_e=n(Vw,"P",{});var ypt=s(n_e);Uor=r(ypt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ypt.forEach(t),Jor=i(Vw),Bd=n(Vw,"P",{});var YK=s(Bd);Yor=r(YK,`Note:
Loading a model from its configuration file does `),s_e=n(YK,"STRONG",{});var Lpt=s(s_e);Kor=r(Lpt,"not"),Lpt.forEach(t),Zor=r(YK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(YK,"A",{href:!0});var xpt=s(OX);err=r(xpt,"from_pretrained()"),xpt.forEach(t),orr=r(YK," to load the model weights."),YK.forEach(t),rrr=i(Vw),T(d7.$$.fragment,Vw),Vw.forEach(t),trr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(Ay.$$.fragment,Fa),arr=i(Fa),l_e=n(Fa,"P",{});var $pt=s(l_e);nrr=r($pt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$pt.forEach(t),srr=i(Fa),Ua=n(Fa,"P",{});var Xw=s(Ua);lrr=r(Xw,"The model class to instantiate is selected based on the "),i_e=n(Xw,"CODE",{});var kpt=s(i_e);irr=r(kpt,"model_type"),kpt.forEach(t),drr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),d_e=n(Xw,"CODE",{});var Spt=s(d_e);crr=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),frr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c_e=n(Xw,"CODE",{});var Rpt=s(c_e);mrr=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),grr=r(Xw,":"),Xw.forEach(t),hrr=i(Fa),Ja=n(Fa,"UL",{});var zw=s(Ja);c7=n(zw,"LI",{});var Uxe=s(c7);f_e=n(Uxe,"STRONG",{});var Bpt=s(f_e);prr=r(Bpt,"beit"),Bpt.forEach(t),urr=r(Uxe," \u2014 "),VX=n(Uxe,"A",{href:!0});var Ppt=s(VX);_rr=r(Ppt,"BeitForSemanticSegmentation"),Ppt.forEach(t),brr=r(Uxe," (BEiT model)"),Uxe.forEach(t),vrr=i(zw),f7=n(zw,"LI",{});var Jxe=s(f7);m_e=n(Jxe,"STRONG",{});var Ipt=s(m_e);Frr=r(Ipt,"data2vec-vision"),Ipt.forEach(t),Trr=r(Jxe," \u2014 "),XX=n(Jxe,"A",{href:!0});var qpt=s(XX);Mrr=r(qpt,"Data2VecVisionForSemanticSegmentation"),qpt.forEach(t),Err=r(Jxe," (Data2VecVision model)"),Jxe.forEach(t),Crr=i(zw),m7=n(zw,"LI",{});var Yxe=s(m7);g_e=n(Yxe,"STRONG",{});var Npt=s(g_e);wrr=r(Npt,"dpt"),Npt.forEach(t),Arr=r(Yxe," \u2014 "),zX=n(Yxe,"A",{href:!0});var jpt=s(zX);yrr=r(jpt,"DPTForSemanticSegmentation"),jpt.forEach(t),Lrr=r(Yxe," (DPT model)"),Yxe.forEach(t),xrr=i(zw),g7=n(zw,"LI",{});var Kxe=s(g7);h_e=n(Kxe,"STRONG",{});var Dpt=s(h_e);$rr=r(Dpt,"segformer"),Dpt.forEach(t),krr=r(Kxe," \u2014 "),QX=n(Kxe,"A",{href:!0});var Gpt=s(QX);Srr=r(Gpt,"SegformerForSemanticSegmentation"),Gpt.forEach(t),Rrr=r(Kxe," (SegFormer model)"),Kxe.forEach(t),zw.forEach(t),Brr=i(Fa),h7=n(Fa,"P",{});var Zxe=s(h7);Prr=r(Zxe,"The model is set in evaluation mode by default using "),p_e=n(Zxe,"CODE",{});var Opt=s(p_e);Irr=r(Opt,"model.eval()"),Opt.forEach(t),qrr=r(Zxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u_e=n(Zxe,"CODE",{});var Vpt=s(u_e);Nrr=r(Vpt,"model.train()"),Vpt.forEach(t),Zxe.forEach(t),jrr=i(Fa),T(p7.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),OIe=i(f),Pd=n(f,"H2",{class:!0});var HNe=s(Pd);u7=n(HNe,"A",{id:!0,class:!0,href:!0});var Xpt=s(u7);__e=n(Xpt,"SPAN",{});var zpt=s(__e);T(yy.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),Drr=i(HNe),b_e=n(HNe,"SPAN",{});var Qpt=s(b_e);Grr=r(Qpt,"AutoModelForInstanceSegmentation"),Qpt.forEach(t),HNe.forEach(t),VIe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(Ly.$$.fragment,dl),Orr=i(dl),Id=n(dl,"P",{});var KK=s(Id);Vrr=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WX=n(KK,"A",{href:!0});var Wpt=s(WX);Xrr=r(Wpt,"from_pretrained()"),Wpt.forEach(t),zrr=r(KK," class method or the "),HX=n(KK,"A",{href:!0});var Hpt=s(HX);Qrr=r(Hpt,"from_config()"),Hpt.forEach(t),Wrr=r(KK,` class
method.`),KK.forEach(t),Hrr=i(dl),xy=n(dl,"P",{});var UNe=s(xy);Urr=r(UNe,"This class cannot be instantiated directly using "),v_e=n(UNe,"CODE",{});var Upt=s(v_e);Jrr=r(Upt,"__init__()"),Upt.forEach(t),Yrr=r(UNe," (throws an error)."),UNe.forEach(t),Krr=i(dl),Ct=n(dl,"DIV",{class:!0});var Qw=s(Ct);T($y.$$.fragment,Qw),Zrr=i(Qw),F_e=n(Qw,"P",{});var Jpt=s(F_e);etr=r(Jpt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jpt.forEach(t),otr=i(Qw),qd=n(Qw,"P",{});var ZK=s(qd);rtr=r(ZK,`Note:
Loading a model from its configuration file does `),T_e=n(ZK,"STRONG",{});var Ypt=s(T_e);ttr=r(Ypt,"not"),Ypt.forEach(t),atr=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(ZK,"A",{href:!0});var Kpt=s(UX);ntr=r(Kpt,"from_pretrained()"),Kpt.forEach(t),str=r(ZK," to load the model weights."),ZK.forEach(t),ltr=i(Qw),T(_7.$$.fragment,Qw),Qw.forEach(t),itr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(ky.$$.fragment,Ta),dtr=i(Ta),M_e=n(Ta,"P",{});var Zpt=s(M_e);ctr=r(Zpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zpt.forEach(t),ftr=i(Ta),Ya=n(Ta,"P",{});var Ww=s(Ya);mtr=r(Ww,"The model class to instantiate is selected based on the "),E_e=n(Ww,"CODE",{});var eut=s(E_e);gtr=r(eut,"model_type"),eut.forEach(t),htr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),C_e=n(Ww,"CODE",{});var out=s(C_e);ptr=r(out,"pretrained_model_name_or_path"),out.forEach(t),utr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(Ww,"CODE",{});var rut=s(w_e);_tr=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),btr=r(Ww,":"),Ww.forEach(t),vtr=i(Ta),A_e=n(Ta,"UL",{});var tut=s(A_e);b7=n(tut,"LI",{});var e$e=s(b7);y_e=n(e$e,"STRONG",{});var aut=s(y_e);Ftr=r(aut,"maskformer"),aut.forEach(t),Ttr=r(e$e," \u2014 "),JX=n(e$e,"A",{href:!0});var nut=s(JX);Mtr=r(nut,"MaskFormerForInstanceSegmentation"),nut.forEach(t),Etr=r(e$e," (MaskFormer model)"),e$e.forEach(t),tut.forEach(t),Ctr=i(Ta),v7=n(Ta,"P",{});var o$e=s(v7);wtr=r(o$e,"The model is set in evaluation mode by default using "),L_e=n(o$e,"CODE",{});var sut=s(L_e);Atr=r(sut,"model.eval()"),sut.forEach(t),ytr=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x_e=n(o$e,"CODE",{});var lut=s(x_e);Ltr=r(lut,"model.train()"),lut.forEach(t),o$e.forEach(t),xtr=i(Ta),T(F7.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),XIe=i(f),Nd=n(f,"H2",{class:!0});var JNe=s(Nd);T7=n(JNe,"A",{id:!0,class:!0,href:!0});var iut=s(T7);$_e=n(iut,"SPAN",{});var dut=s($_e);T(Sy.$$.fragment,dut),dut.forEach(t),iut.forEach(t),$tr=i(JNe),k_e=n(JNe,"SPAN",{});var cut=s(k_e);ktr=r(cut,"TFAutoModel"),cut.forEach(t),JNe.forEach(t),zIe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(Ry.$$.fragment,cl),Str=i(cl),jd=n(cl,"P",{});var eZ=s(jd);Rtr=r(eZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YX=n(eZ,"A",{href:!0});var fut=s(YX);Btr=r(fut,"from_pretrained()"),fut.forEach(t),Ptr=r(eZ," class method or the "),KX=n(eZ,"A",{href:!0});var mut=s(KX);Itr=r(mut,"from_config()"),mut.forEach(t),qtr=r(eZ,` class
method.`),eZ.forEach(t),Ntr=i(cl),By=n(cl,"P",{});var YNe=s(By);jtr=r(YNe,"This class cannot be instantiated directly using "),S_e=n(YNe,"CODE",{});var gut=s(S_e);Dtr=r(gut,"__init__()"),gut.forEach(t),Gtr=r(YNe," (throws an error)."),YNe.forEach(t),Otr=i(cl),wt=n(cl,"DIV",{class:!0});var Hw=s(wt);T(Py.$$.fragment,Hw),Vtr=i(Hw),R_e=n(Hw,"P",{});var hut=s(R_e);Xtr=r(hut,"Instantiates one of the base model classes of the library from a configuration."),hut.forEach(t),ztr=i(Hw),Dd=n(Hw,"P",{});var oZ=s(Dd);Qtr=r(oZ,`Note:
Loading a model from its configuration file does `),B_e=n(oZ,"STRONG",{});var put=s(B_e);Wtr=r(put,"not"),put.forEach(t),Htr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(oZ,"A",{href:!0});var uut=s(ZX);Utr=r(uut,"from_pretrained()"),uut.forEach(t),Jtr=r(oZ," to load the model weights."),oZ.forEach(t),Ytr=i(Hw),T(M7.$$.fragment,Hw),Hw.forEach(t),Ktr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(Iy.$$.fragment,fl),Ztr=i(fl),P_e=n(fl,"P",{});var _ut=s(P_e);ear=r(_ut,"Instantiate one of the base model classes of the library from a pretrained model."),_ut.forEach(t),oar=i(fl),Ka=n(fl,"P",{});var Uw=s(Ka);rar=r(Uw,"The model class to instantiate is selected based on the "),I_e=n(Uw,"CODE",{});var but=s(I_e);tar=r(but,"model_type"),but.forEach(t),aar=r(Uw,` property of the config object (either
passed as an argument or loaded from `),q_e=n(Uw,"CODE",{});var vut=s(q_e);nar=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),sar=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N_e=n(Uw,"CODE",{});var Fut=s(N_e);lar=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),iar=r(Uw,":"),Uw.forEach(t),dar=i(fl),N=n(fl,"UL",{});var D=s(N);E7=n(D,"LI",{});var r$e=s(E7);j_e=n(r$e,"STRONG",{});var Tut=s(j_e);car=r(Tut,"albert"),Tut.forEach(t),far=r(r$e," \u2014 "),ez=n(r$e,"A",{href:!0});var Mut=s(ez);mar=r(Mut,"TFAlbertModel"),Mut.forEach(t),gar=r(r$e," (ALBERT model)"),r$e.forEach(t),har=i(D),C7=n(D,"LI",{});var t$e=s(C7);D_e=n(t$e,"STRONG",{});var Eut=s(D_e);par=r(Eut,"bart"),Eut.forEach(t),uar=r(t$e," \u2014 "),oz=n(t$e,"A",{href:!0});var Cut=s(oz);_ar=r(Cut,"TFBartModel"),Cut.forEach(t),bar=r(t$e," (BART model)"),t$e.forEach(t),Far=i(D),w7=n(D,"LI",{});var a$e=s(w7);G_e=n(a$e,"STRONG",{});var wut=s(G_e);Tar=r(wut,"bert"),wut.forEach(t),Mar=r(a$e," \u2014 "),rz=n(a$e,"A",{href:!0});var Aut=s(rz);Ear=r(Aut,"TFBertModel"),Aut.forEach(t),Car=r(a$e," (BERT model)"),a$e.forEach(t),war=i(D),A7=n(D,"LI",{});var n$e=s(A7);O_e=n(n$e,"STRONG",{});var yut=s(O_e);Aar=r(yut,"blenderbot"),yut.forEach(t),yar=r(n$e," \u2014 "),tz=n(n$e,"A",{href:!0});var Lut=s(tz);Lar=r(Lut,"TFBlenderbotModel"),Lut.forEach(t),xar=r(n$e," (Blenderbot model)"),n$e.forEach(t),$ar=i(D),y7=n(D,"LI",{});var s$e=s(y7);V_e=n(s$e,"STRONG",{});var xut=s(V_e);kar=r(xut,"blenderbot-small"),xut.forEach(t),Sar=r(s$e," \u2014 "),az=n(s$e,"A",{href:!0});var $ut=s(az);Rar=r($ut,"TFBlenderbotSmallModel"),$ut.forEach(t),Bar=r(s$e," (BlenderbotSmall model)"),s$e.forEach(t),Par=i(D),L7=n(D,"LI",{});var l$e=s(L7);X_e=n(l$e,"STRONG",{});var kut=s(X_e);Iar=r(kut,"camembert"),kut.forEach(t),qar=r(l$e," \u2014 "),nz=n(l$e,"A",{href:!0});var Sut=s(nz);Nar=r(Sut,"TFCamembertModel"),Sut.forEach(t),jar=r(l$e," (CamemBERT model)"),l$e.forEach(t),Dar=i(D),x7=n(D,"LI",{});var i$e=s(x7);z_e=n(i$e,"STRONG",{});var Rut=s(z_e);Gar=r(Rut,"clip"),Rut.forEach(t),Oar=r(i$e," \u2014 "),sz=n(i$e,"A",{href:!0});var But=s(sz);Var=r(But,"TFCLIPModel"),But.forEach(t),Xar=r(i$e," (CLIP model)"),i$e.forEach(t),zar=i(D),$7=n(D,"LI",{});var d$e=s($7);Q_e=n(d$e,"STRONG",{});var Put=s(Q_e);Qar=r(Put,"convbert"),Put.forEach(t),War=r(d$e," \u2014 "),lz=n(d$e,"A",{href:!0});var Iut=s(lz);Har=r(Iut,"TFConvBertModel"),Iut.forEach(t),Uar=r(d$e," (ConvBERT model)"),d$e.forEach(t),Jar=i(D),k7=n(D,"LI",{});var c$e=s(k7);W_e=n(c$e,"STRONG",{});var qut=s(W_e);Yar=r(qut,"convnext"),qut.forEach(t),Kar=r(c$e," \u2014 "),iz=n(c$e,"A",{href:!0});var Nut=s(iz);Zar=r(Nut,"TFConvNextModel"),Nut.forEach(t),enr=r(c$e," (ConvNext model)"),c$e.forEach(t),onr=i(D),S7=n(D,"LI",{});var f$e=s(S7);H_e=n(f$e,"STRONG",{});var jut=s(H_e);rnr=r(jut,"ctrl"),jut.forEach(t),tnr=r(f$e," \u2014 "),dz=n(f$e,"A",{href:!0});var Dut=s(dz);anr=r(Dut,"TFCTRLModel"),Dut.forEach(t),nnr=r(f$e," (CTRL model)"),f$e.forEach(t),snr=i(D),R7=n(D,"LI",{});var m$e=s(R7);U_e=n(m$e,"STRONG",{});var Gut=s(U_e);lnr=r(Gut,"data2vec-vision"),Gut.forEach(t),inr=r(m$e," \u2014 "),cz=n(m$e,"A",{href:!0});var Out=s(cz);dnr=r(Out,"TFData2VecVisionModel"),Out.forEach(t),cnr=r(m$e," (Data2VecVision model)"),m$e.forEach(t),fnr=i(D),B7=n(D,"LI",{});var g$e=s(B7);J_e=n(g$e,"STRONG",{});var Vut=s(J_e);mnr=r(Vut,"deberta"),Vut.forEach(t),gnr=r(g$e," \u2014 "),fz=n(g$e,"A",{href:!0});var Xut=s(fz);hnr=r(Xut,"TFDebertaModel"),Xut.forEach(t),pnr=r(g$e," (DeBERTa model)"),g$e.forEach(t),unr=i(D),P7=n(D,"LI",{});var h$e=s(P7);Y_e=n(h$e,"STRONG",{});var zut=s(Y_e);_nr=r(zut,"deberta-v2"),zut.forEach(t),bnr=r(h$e," \u2014 "),mz=n(h$e,"A",{href:!0});var Qut=s(mz);vnr=r(Qut,"TFDebertaV2Model"),Qut.forEach(t),Fnr=r(h$e," (DeBERTa-v2 model)"),h$e.forEach(t),Tnr=i(D),I7=n(D,"LI",{});var p$e=s(I7);K_e=n(p$e,"STRONG",{});var Wut=s(K_e);Mnr=r(Wut,"distilbert"),Wut.forEach(t),Enr=r(p$e," \u2014 "),gz=n(p$e,"A",{href:!0});var Hut=s(gz);Cnr=r(Hut,"TFDistilBertModel"),Hut.forEach(t),wnr=r(p$e," (DistilBERT model)"),p$e.forEach(t),Anr=i(D),q7=n(D,"LI",{});var u$e=s(q7);Z_e=n(u$e,"STRONG",{});var Uut=s(Z_e);ynr=r(Uut,"dpr"),Uut.forEach(t),Lnr=r(u$e," \u2014 "),hz=n(u$e,"A",{href:!0});var Jut=s(hz);xnr=r(Jut,"TFDPRQuestionEncoder"),Jut.forEach(t),$nr=r(u$e," (DPR model)"),u$e.forEach(t),knr=i(D),N7=n(D,"LI",{});var _$e=s(N7);e1e=n(_$e,"STRONG",{});var Yut=s(e1e);Snr=r(Yut,"electra"),Yut.forEach(t),Rnr=r(_$e," \u2014 "),pz=n(_$e,"A",{href:!0});var Kut=s(pz);Bnr=r(Kut,"TFElectraModel"),Kut.forEach(t),Pnr=r(_$e," (ELECTRA model)"),_$e.forEach(t),Inr=i(D),j7=n(D,"LI",{});var b$e=s(j7);o1e=n(b$e,"STRONG",{});var Zut=s(o1e);qnr=r(Zut,"flaubert"),Zut.forEach(t),Nnr=r(b$e," \u2014 "),uz=n(b$e,"A",{href:!0});var e_t=s(uz);jnr=r(e_t,"TFFlaubertModel"),e_t.forEach(t),Dnr=r(b$e," (FlauBERT model)"),b$e.forEach(t),Gnr=i(D),Ps=n(D,"LI",{});var g$=s(Ps);r1e=n(g$,"STRONG",{});var o_t=s(r1e);Onr=r(o_t,"funnel"),o_t.forEach(t),Vnr=r(g$," \u2014 "),_z=n(g$,"A",{href:!0});var r_t=s(_z);Xnr=r(r_t,"TFFunnelModel"),r_t.forEach(t),znr=r(g$," or "),bz=n(g$,"A",{href:!0});var t_t=s(bz);Qnr=r(t_t,"TFFunnelBaseModel"),t_t.forEach(t),Wnr=r(g$," (Funnel Transformer model)"),g$.forEach(t),Hnr=i(D),D7=n(D,"LI",{});var v$e=s(D7);t1e=n(v$e,"STRONG",{});var a_t=s(t1e);Unr=r(a_t,"gpt2"),a_t.forEach(t),Jnr=r(v$e," \u2014 "),vz=n(v$e,"A",{href:!0});var n_t=s(vz);Ynr=r(n_t,"TFGPT2Model"),n_t.forEach(t),Knr=r(v$e," (OpenAI GPT-2 model)"),v$e.forEach(t),Znr=i(D),G7=n(D,"LI",{});var F$e=s(G7);a1e=n(F$e,"STRONG",{});var s_t=s(a1e);esr=r(s_t,"gptj"),s_t.forEach(t),osr=r(F$e," \u2014 "),Fz=n(F$e,"A",{href:!0});var l_t=s(Fz);rsr=r(l_t,"TFGPTJModel"),l_t.forEach(t),tsr=r(F$e," (GPT-J model)"),F$e.forEach(t),asr=i(D),O7=n(D,"LI",{});var T$e=s(O7);n1e=n(T$e,"STRONG",{});var i_t=s(n1e);nsr=r(i_t,"hubert"),i_t.forEach(t),ssr=r(T$e," \u2014 "),Tz=n(T$e,"A",{href:!0});var d_t=s(Tz);lsr=r(d_t,"TFHubertModel"),d_t.forEach(t),isr=r(T$e," (Hubert model)"),T$e.forEach(t),dsr=i(D),V7=n(D,"LI",{});var M$e=s(V7);s1e=n(M$e,"STRONG",{});var c_t=s(s1e);csr=r(c_t,"layoutlm"),c_t.forEach(t),fsr=r(M$e," \u2014 "),Mz=n(M$e,"A",{href:!0});var f_t=s(Mz);msr=r(f_t,"TFLayoutLMModel"),f_t.forEach(t),gsr=r(M$e," (LayoutLM model)"),M$e.forEach(t),hsr=i(D),X7=n(D,"LI",{});var E$e=s(X7);l1e=n(E$e,"STRONG",{});var m_t=s(l1e);psr=r(m_t,"led"),m_t.forEach(t),usr=r(E$e," \u2014 "),Ez=n(E$e,"A",{href:!0});var g_t=s(Ez);_sr=r(g_t,"TFLEDModel"),g_t.forEach(t),bsr=r(E$e," (LED model)"),E$e.forEach(t),vsr=i(D),z7=n(D,"LI",{});var C$e=s(z7);i1e=n(C$e,"STRONG",{});var h_t=s(i1e);Fsr=r(h_t,"longformer"),h_t.forEach(t),Tsr=r(C$e," \u2014 "),Cz=n(C$e,"A",{href:!0});var p_t=s(Cz);Msr=r(p_t,"TFLongformerModel"),p_t.forEach(t),Esr=r(C$e," (Longformer model)"),C$e.forEach(t),Csr=i(D),Q7=n(D,"LI",{});var w$e=s(Q7);d1e=n(w$e,"STRONG",{});var u_t=s(d1e);wsr=r(u_t,"lxmert"),u_t.forEach(t),Asr=r(w$e," \u2014 "),wz=n(w$e,"A",{href:!0});var __t=s(wz);ysr=r(__t,"TFLxmertModel"),__t.forEach(t),Lsr=r(w$e," (LXMERT model)"),w$e.forEach(t),xsr=i(D),W7=n(D,"LI",{});var A$e=s(W7);c1e=n(A$e,"STRONG",{});var b_t=s(c1e);$sr=r(b_t,"marian"),b_t.forEach(t),ksr=r(A$e," \u2014 "),Az=n(A$e,"A",{href:!0});var v_t=s(Az);Ssr=r(v_t,"TFMarianModel"),v_t.forEach(t),Rsr=r(A$e," (Marian model)"),A$e.forEach(t),Bsr=i(D),H7=n(D,"LI",{});var y$e=s(H7);f1e=n(y$e,"STRONG",{});var F_t=s(f1e);Psr=r(F_t,"mbart"),F_t.forEach(t),Isr=r(y$e," \u2014 "),yz=n(y$e,"A",{href:!0});var T_t=s(yz);qsr=r(T_t,"TFMBartModel"),T_t.forEach(t),Nsr=r(y$e," (mBART model)"),y$e.forEach(t),jsr=i(D),U7=n(D,"LI",{});var L$e=s(U7);m1e=n(L$e,"STRONG",{});var M_t=s(m1e);Dsr=r(M_t,"mobilebert"),M_t.forEach(t),Gsr=r(L$e," \u2014 "),Lz=n(L$e,"A",{href:!0});var E_t=s(Lz);Osr=r(E_t,"TFMobileBertModel"),E_t.forEach(t),Vsr=r(L$e," (MobileBERT model)"),L$e.forEach(t),Xsr=i(D),J7=n(D,"LI",{});var x$e=s(J7);g1e=n(x$e,"STRONG",{});var C_t=s(g1e);zsr=r(C_t,"mpnet"),C_t.forEach(t),Qsr=r(x$e," \u2014 "),xz=n(x$e,"A",{href:!0});var w_t=s(xz);Wsr=r(w_t,"TFMPNetModel"),w_t.forEach(t),Hsr=r(x$e," (MPNet model)"),x$e.forEach(t),Usr=i(D),Y7=n(D,"LI",{});var $$e=s(Y7);h1e=n($$e,"STRONG",{});var A_t=s(h1e);Jsr=r(A_t,"mt5"),A_t.forEach(t),Ysr=r($$e," \u2014 "),$z=n($$e,"A",{href:!0});var y_t=s($z);Ksr=r(y_t,"TFMT5Model"),y_t.forEach(t),Zsr=r($$e," (mT5 model)"),$$e.forEach(t),elr=i(D),K7=n(D,"LI",{});var k$e=s(K7);p1e=n(k$e,"STRONG",{});var L_t=s(p1e);olr=r(L_t,"openai-gpt"),L_t.forEach(t),rlr=r(k$e," \u2014 "),kz=n(k$e,"A",{href:!0});var x_t=s(kz);tlr=r(x_t,"TFOpenAIGPTModel"),x_t.forEach(t),alr=r(k$e," (OpenAI GPT model)"),k$e.forEach(t),nlr=i(D),Z7=n(D,"LI",{});var S$e=s(Z7);u1e=n(S$e,"STRONG",{});var $_t=s(u1e);slr=r($_t,"pegasus"),$_t.forEach(t),llr=r(S$e," \u2014 "),Sz=n(S$e,"A",{href:!0});var k_t=s(Sz);ilr=r(k_t,"TFPegasusModel"),k_t.forEach(t),dlr=r(S$e," (Pegasus model)"),S$e.forEach(t),clr=i(D),e9=n(D,"LI",{});var R$e=s(e9);_1e=n(R$e,"STRONG",{});var S_t=s(_1e);flr=r(S_t,"rembert"),S_t.forEach(t),mlr=r(R$e," \u2014 "),Rz=n(R$e,"A",{href:!0});var R_t=s(Rz);glr=r(R_t,"TFRemBertModel"),R_t.forEach(t),hlr=r(R$e," (RemBERT model)"),R$e.forEach(t),plr=i(D),o9=n(D,"LI",{});var B$e=s(o9);b1e=n(B$e,"STRONG",{});var B_t=s(b1e);ulr=r(B_t,"roberta"),B_t.forEach(t),_lr=r(B$e," \u2014 "),Bz=n(B$e,"A",{href:!0});var P_t=s(Bz);blr=r(P_t,"TFRobertaModel"),P_t.forEach(t),vlr=r(B$e," (RoBERTa model)"),B$e.forEach(t),Flr=i(D),r9=n(D,"LI",{});var P$e=s(r9);v1e=n(P$e,"STRONG",{});var I_t=s(v1e);Tlr=r(I_t,"roformer"),I_t.forEach(t),Mlr=r(P$e," \u2014 "),Pz=n(P$e,"A",{href:!0});var q_t=s(Pz);Elr=r(q_t,"TFRoFormerModel"),q_t.forEach(t),Clr=r(P$e," (RoFormer model)"),P$e.forEach(t),wlr=i(D),t9=n(D,"LI",{});var I$e=s(t9);F1e=n(I$e,"STRONG",{});var N_t=s(F1e);Alr=r(N_t,"speech_to_text"),N_t.forEach(t),ylr=r(I$e," \u2014 "),Iz=n(I$e,"A",{href:!0});var j_t=s(Iz);Llr=r(j_t,"TFSpeech2TextModel"),j_t.forEach(t),xlr=r(I$e," (Speech2Text model)"),I$e.forEach(t),$lr=i(D),a9=n(D,"LI",{});var q$e=s(a9);T1e=n(q$e,"STRONG",{});var D_t=s(T1e);klr=r(D_t,"swin"),D_t.forEach(t),Slr=r(q$e," \u2014 "),qz=n(q$e,"A",{href:!0});var G_t=s(qz);Rlr=r(G_t,"TFSwinModel"),G_t.forEach(t),Blr=r(q$e," (Swin model)"),q$e.forEach(t),Plr=i(D),n9=n(D,"LI",{});var N$e=s(n9);M1e=n(N$e,"STRONG",{});var O_t=s(M1e);Ilr=r(O_t,"t5"),O_t.forEach(t),qlr=r(N$e," \u2014 "),Nz=n(N$e,"A",{href:!0});var V_t=s(Nz);Nlr=r(V_t,"TFT5Model"),V_t.forEach(t),jlr=r(N$e," (T5 model)"),N$e.forEach(t),Dlr=i(D),s9=n(D,"LI",{});var j$e=s(s9);E1e=n(j$e,"STRONG",{});var X_t=s(E1e);Glr=r(X_t,"tapas"),X_t.forEach(t),Olr=r(j$e," \u2014 "),jz=n(j$e,"A",{href:!0});var z_t=s(jz);Vlr=r(z_t,"TFTapasModel"),z_t.forEach(t),Xlr=r(j$e," (TAPAS model)"),j$e.forEach(t),zlr=i(D),l9=n(D,"LI",{});var D$e=s(l9);C1e=n(D$e,"STRONG",{});var Q_t=s(C1e);Qlr=r(Q_t,"transfo-xl"),Q_t.forEach(t),Wlr=r(D$e," \u2014 "),Dz=n(D$e,"A",{href:!0});var W_t=s(Dz);Hlr=r(W_t,"TFTransfoXLModel"),W_t.forEach(t),Ulr=r(D$e," (Transformer-XL model)"),D$e.forEach(t),Jlr=i(D),i9=n(D,"LI",{});var G$e=s(i9);w1e=n(G$e,"STRONG",{});var H_t=s(w1e);Ylr=r(H_t,"vit"),H_t.forEach(t),Klr=r(G$e," \u2014 "),Gz=n(G$e,"A",{href:!0});var U_t=s(Gz);Zlr=r(U_t,"TFViTModel"),U_t.forEach(t),eir=r(G$e," (ViT model)"),G$e.forEach(t),oir=i(D),d9=n(D,"LI",{});var O$e=s(d9);A1e=n(O$e,"STRONG",{});var J_t=s(A1e);rir=r(J_t,"vit_mae"),J_t.forEach(t),tir=r(O$e," \u2014 "),Oz=n(O$e,"A",{href:!0});var Y_t=s(Oz);air=r(Y_t,"TFViTMAEModel"),Y_t.forEach(t),nir=r(O$e," (ViTMAE model)"),O$e.forEach(t),sir=i(D),c9=n(D,"LI",{});var V$e=s(c9);y1e=n(V$e,"STRONG",{});var K_t=s(y1e);lir=r(K_t,"wav2vec2"),K_t.forEach(t),iir=r(V$e," \u2014 "),Vz=n(V$e,"A",{href:!0});var Z_t=s(Vz);dir=r(Z_t,"TFWav2Vec2Model"),Z_t.forEach(t),cir=r(V$e," (Wav2Vec2 model)"),V$e.forEach(t),fir=i(D),f9=n(D,"LI",{});var X$e=s(f9);L1e=n(X$e,"STRONG",{});var e1t=s(L1e);mir=r(e1t,"xlm"),e1t.forEach(t),gir=r(X$e," \u2014 "),Xz=n(X$e,"A",{href:!0});var o1t=s(Xz);hir=r(o1t,"TFXLMModel"),o1t.forEach(t),pir=r(X$e," (XLM model)"),X$e.forEach(t),uir=i(D),m9=n(D,"LI",{});var z$e=s(m9);x1e=n(z$e,"STRONG",{});var r1t=s(x1e);_ir=r(r1t,"xlm-roberta"),r1t.forEach(t),bir=r(z$e," \u2014 "),zz=n(z$e,"A",{href:!0});var t1t=s(zz);vir=r(t1t,"TFXLMRobertaModel"),t1t.forEach(t),Fir=r(z$e," (XLM-RoBERTa model)"),z$e.forEach(t),Tir=i(D),g9=n(D,"LI",{});var Q$e=s(g9);$1e=n(Q$e,"STRONG",{});var a1t=s($1e);Mir=r(a1t,"xlnet"),a1t.forEach(t),Eir=r(Q$e," \u2014 "),Qz=n(Q$e,"A",{href:!0});var n1t=s(Qz);Cir=r(n1t,"TFXLNetModel"),n1t.forEach(t),wir=r(Q$e," (XLNet model)"),Q$e.forEach(t),D.forEach(t),Air=i(fl),T(h9.$$.fragment,fl),fl.forEach(t),cl.forEach(t),QIe=i(f),Gd=n(f,"H2",{class:!0});var KNe=s(Gd);p9=n(KNe,"A",{id:!0,class:!0,href:!0});var s1t=s(p9);k1e=n(s1t,"SPAN",{});var l1t=s(k1e);T(qy.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),yir=i(KNe),S1e=n(KNe,"SPAN",{});var i1t=s(S1e);Lir=r(i1t,"TFAutoModelForPreTraining"),i1t.forEach(t),KNe.forEach(t),WIe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(Ny.$$.fragment,ml),xir=i(ml),Od=n(ml,"P",{});var rZ=s(Od);$ir=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wz=n(rZ,"A",{href:!0});var d1t=s(Wz);kir=r(d1t,"from_pretrained()"),d1t.forEach(t),Sir=r(rZ," class method or the "),Hz=n(rZ,"A",{href:!0});var c1t=s(Hz);Rir=r(c1t,"from_config()"),c1t.forEach(t),Bir=r(rZ,` class
method.`),rZ.forEach(t),Pir=i(ml),jy=n(ml,"P",{});var ZNe=s(jy);Iir=r(ZNe,"This class cannot be instantiated directly using "),R1e=n(ZNe,"CODE",{});var f1t=s(R1e);qir=r(f1t,"__init__()"),f1t.forEach(t),Nir=r(ZNe," (throws an error)."),ZNe.forEach(t),jir=i(ml),At=n(ml,"DIV",{class:!0});var Jw=s(At);T(Dy.$$.fragment,Jw),Dir=i(Jw),B1e=n(Jw,"P",{});var m1t=s(B1e);Gir=r(m1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m1t.forEach(t),Oir=i(Jw),Vd=n(Jw,"P",{});var tZ=s(Vd);Vir=r(tZ,`Note:
Loading a model from its configuration file does `),P1e=n(tZ,"STRONG",{});var g1t=s(P1e);Xir=r(g1t,"not"),g1t.forEach(t),zir=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(tZ,"A",{href:!0});var h1t=s(Uz);Qir=r(h1t,"from_pretrained()"),h1t.forEach(t),Wir=r(tZ," to load the model weights."),tZ.forEach(t),Hir=i(Jw),T(u9.$$.fragment,Jw),Jw.forEach(t),Uir=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(Gy.$$.fragment,gl),Jir=i(gl),I1e=n(gl,"P",{});var p1t=s(I1e);Yir=r(p1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),p1t.forEach(t),Kir=i(gl),Za=n(gl,"P",{});var Yw=s(Za);Zir=r(Yw,"The model class to instantiate is selected based on the "),q1e=n(Yw,"CODE",{});var u1t=s(q1e);edr=r(u1t,"model_type"),u1t.forEach(t),odr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),N1e=n(Yw,"CODE",{});var _1t=s(N1e);rdr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),tdr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(Yw,"CODE",{});var b1t=s(j1e);adr=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),ndr=r(Yw,":"),Yw.forEach(t),sdr=i(gl),se=n(gl,"UL",{});var le=s(se);_9=n(le,"LI",{});var W$e=s(_9);D1e=n(W$e,"STRONG",{});var v1t=s(D1e);ldr=r(v1t,"albert"),v1t.forEach(t),idr=r(W$e," \u2014 "),Jz=n(W$e,"A",{href:!0});var F1t=s(Jz);ddr=r(F1t,"TFAlbertForPreTraining"),F1t.forEach(t),cdr=r(W$e," (ALBERT model)"),W$e.forEach(t),fdr=i(le),b9=n(le,"LI",{});var H$e=s(b9);G1e=n(H$e,"STRONG",{});var T1t=s(G1e);mdr=r(T1t,"bart"),T1t.forEach(t),gdr=r(H$e," \u2014 "),Yz=n(H$e,"A",{href:!0});var M1t=s(Yz);hdr=r(M1t,"TFBartForConditionalGeneration"),M1t.forEach(t),pdr=r(H$e," (BART model)"),H$e.forEach(t),udr=i(le),v9=n(le,"LI",{});var U$e=s(v9);O1e=n(U$e,"STRONG",{});var E1t=s(O1e);_dr=r(E1t,"bert"),E1t.forEach(t),bdr=r(U$e," \u2014 "),Kz=n(U$e,"A",{href:!0});var C1t=s(Kz);vdr=r(C1t,"TFBertForPreTraining"),C1t.forEach(t),Fdr=r(U$e," (BERT model)"),U$e.forEach(t),Tdr=i(le),F9=n(le,"LI",{});var J$e=s(F9);V1e=n(J$e,"STRONG",{});var w1t=s(V1e);Mdr=r(w1t,"camembert"),w1t.forEach(t),Edr=r(J$e," \u2014 "),Zz=n(J$e,"A",{href:!0});var A1t=s(Zz);Cdr=r(A1t,"TFCamembertForMaskedLM"),A1t.forEach(t),wdr=r(J$e," (CamemBERT model)"),J$e.forEach(t),Adr=i(le),T9=n(le,"LI",{});var Y$e=s(T9);X1e=n(Y$e,"STRONG",{});var y1t=s(X1e);ydr=r(y1t,"ctrl"),y1t.forEach(t),Ldr=r(Y$e," \u2014 "),eQ=n(Y$e,"A",{href:!0});var L1t=s(eQ);xdr=r(L1t,"TFCTRLLMHeadModel"),L1t.forEach(t),$dr=r(Y$e," (CTRL model)"),Y$e.forEach(t),kdr=i(le),M9=n(le,"LI",{});var K$e=s(M9);z1e=n(K$e,"STRONG",{});var x1t=s(z1e);Sdr=r(x1t,"distilbert"),x1t.forEach(t),Rdr=r(K$e," \u2014 "),oQ=n(K$e,"A",{href:!0});var $1t=s(oQ);Bdr=r($1t,"TFDistilBertForMaskedLM"),$1t.forEach(t),Pdr=r(K$e," (DistilBERT model)"),K$e.forEach(t),Idr=i(le),E9=n(le,"LI",{});var Z$e=s(E9);Q1e=n(Z$e,"STRONG",{});var k1t=s(Q1e);qdr=r(k1t,"electra"),k1t.forEach(t),Ndr=r(Z$e," \u2014 "),rQ=n(Z$e,"A",{href:!0});var S1t=s(rQ);jdr=r(S1t,"TFElectraForPreTraining"),S1t.forEach(t),Ddr=r(Z$e," (ELECTRA model)"),Z$e.forEach(t),Gdr=i(le),C9=n(le,"LI",{});var eke=s(C9);W1e=n(eke,"STRONG",{});var R1t=s(W1e);Odr=r(R1t,"flaubert"),R1t.forEach(t),Vdr=r(eke," \u2014 "),tQ=n(eke,"A",{href:!0});var B1t=s(tQ);Xdr=r(B1t,"TFFlaubertWithLMHeadModel"),B1t.forEach(t),zdr=r(eke," (FlauBERT model)"),eke.forEach(t),Qdr=i(le),w9=n(le,"LI",{});var oke=s(w9);H1e=n(oke,"STRONG",{});var P1t=s(H1e);Wdr=r(P1t,"funnel"),P1t.forEach(t),Hdr=r(oke," \u2014 "),aQ=n(oke,"A",{href:!0});var I1t=s(aQ);Udr=r(I1t,"TFFunnelForPreTraining"),I1t.forEach(t),Jdr=r(oke," (Funnel Transformer model)"),oke.forEach(t),Ydr=i(le),A9=n(le,"LI",{});var rke=s(A9);U1e=n(rke,"STRONG",{});var q1t=s(U1e);Kdr=r(q1t,"gpt2"),q1t.forEach(t),Zdr=r(rke," \u2014 "),nQ=n(rke,"A",{href:!0});var N1t=s(nQ);ecr=r(N1t,"TFGPT2LMHeadModel"),N1t.forEach(t),ocr=r(rke," (OpenAI GPT-2 model)"),rke.forEach(t),rcr=i(le),y9=n(le,"LI",{});var tke=s(y9);J1e=n(tke,"STRONG",{});var j1t=s(J1e);tcr=r(j1t,"layoutlm"),j1t.forEach(t),acr=r(tke," \u2014 "),sQ=n(tke,"A",{href:!0});var D1t=s(sQ);ncr=r(D1t,"TFLayoutLMForMaskedLM"),D1t.forEach(t),scr=r(tke," (LayoutLM model)"),tke.forEach(t),lcr=i(le),L9=n(le,"LI",{});var ake=s(L9);Y1e=n(ake,"STRONG",{});var G1t=s(Y1e);icr=r(G1t,"lxmert"),G1t.forEach(t),dcr=r(ake," \u2014 "),lQ=n(ake,"A",{href:!0});var O1t=s(lQ);ccr=r(O1t,"TFLxmertForPreTraining"),O1t.forEach(t),fcr=r(ake," (LXMERT model)"),ake.forEach(t),mcr=i(le),x9=n(le,"LI",{});var nke=s(x9);K1e=n(nke,"STRONG",{});var V1t=s(K1e);gcr=r(V1t,"mobilebert"),V1t.forEach(t),hcr=r(nke," \u2014 "),iQ=n(nke,"A",{href:!0});var X1t=s(iQ);pcr=r(X1t,"TFMobileBertForPreTraining"),X1t.forEach(t),ucr=r(nke," (MobileBERT model)"),nke.forEach(t),_cr=i(le),$9=n(le,"LI",{});var ske=s($9);Z1e=n(ske,"STRONG",{});var z1t=s(Z1e);bcr=r(z1t,"mpnet"),z1t.forEach(t),vcr=r(ske," \u2014 "),dQ=n(ske,"A",{href:!0});var Q1t=s(dQ);Fcr=r(Q1t,"TFMPNetForMaskedLM"),Q1t.forEach(t),Tcr=r(ske," (MPNet model)"),ske.forEach(t),Mcr=i(le),k9=n(le,"LI",{});var lke=s(k9);e2e=n(lke,"STRONG",{});var W1t=s(e2e);Ecr=r(W1t,"openai-gpt"),W1t.forEach(t),Ccr=r(lke," \u2014 "),cQ=n(lke,"A",{href:!0});var H1t=s(cQ);wcr=r(H1t,"TFOpenAIGPTLMHeadModel"),H1t.forEach(t),Acr=r(lke," (OpenAI GPT model)"),lke.forEach(t),ycr=i(le),S9=n(le,"LI",{});var ike=s(S9);o2e=n(ike,"STRONG",{});var U1t=s(o2e);Lcr=r(U1t,"roberta"),U1t.forEach(t),xcr=r(ike," \u2014 "),fQ=n(ike,"A",{href:!0});var J1t=s(fQ);$cr=r(J1t,"TFRobertaForMaskedLM"),J1t.forEach(t),kcr=r(ike," (RoBERTa model)"),ike.forEach(t),Scr=i(le),R9=n(le,"LI",{});var dke=s(R9);r2e=n(dke,"STRONG",{});var Y1t=s(r2e);Rcr=r(Y1t,"t5"),Y1t.forEach(t),Bcr=r(dke," \u2014 "),mQ=n(dke,"A",{href:!0});var K1t=s(mQ);Pcr=r(K1t,"TFT5ForConditionalGeneration"),K1t.forEach(t),Icr=r(dke," (T5 model)"),dke.forEach(t),qcr=i(le),B9=n(le,"LI",{});var cke=s(B9);t2e=n(cke,"STRONG",{});var Z1t=s(t2e);Ncr=r(Z1t,"tapas"),Z1t.forEach(t),jcr=r(cke," \u2014 "),gQ=n(cke,"A",{href:!0});var e2t=s(gQ);Dcr=r(e2t,"TFTapasForMaskedLM"),e2t.forEach(t),Gcr=r(cke," (TAPAS model)"),cke.forEach(t),Ocr=i(le),P9=n(le,"LI",{});var fke=s(P9);a2e=n(fke,"STRONG",{});var o2t=s(a2e);Vcr=r(o2t,"transfo-xl"),o2t.forEach(t),Xcr=r(fke," \u2014 "),hQ=n(fke,"A",{href:!0});var r2t=s(hQ);zcr=r(r2t,"TFTransfoXLLMHeadModel"),r2t.forEach(t),Qcr=r(fke," (Transformer-XL model)"),fke.forEach(t),Wcr=i(le),I9=n(le,"LI",{});var mke=s(I9);n2e=n(mke,"STRONG",{});var t2t=s(n2e);Hcr=r(t2t,"vit_mae"),t2t.forEach(t),Ucr=r(mke," \u2014 "),pQ=n(mke,"A",{href:!0});var a2t=s(pQ);Jcr=r(a2t,"TFViTMAEForPreTraining"),a2t.forEach(t),Ycr=r(mke," (ViTMAE model)"),mke.forEach(t),Kcr=i(le),q9=n(le,"LI",{});var gke=s(q9);s2e=n(gke,"STRONG",{});var n2t=s(s2e);Zcr=r(n2t,"xlm"),n2t.forEach(t),efr=r(gke," \u2014 "),uQ=n(gke,"A",{href:!0});var s2t=s(uQ);ofr=r(s2t,"TFXLMWithLMHeadModel"),s2t.forEach(t),rfr=r(gke," (XLM model)"),gke.forEach(t),tfr=i(le),N9=n(le,"LI",{});var hke=s(N9);l2e=n(hke,"STRONG",{});var l2t=s(l2e);afr=r(l2t,"xlm-roberta"),l2t.forEach(t),nfr=r(hke," \u2014 "),_Q=n(hke,"A",{href:!0});var i2t=s(_Q);sfr=r(i2t,"TFXLMRobertaForMaskedLM"),i2t.forEach(t),lfr=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),ifr=i(le),j9=n(le,"LI",{});var pke=s(j9);i2e=n(pke,"STRONG",{});var d2t=s(i2e);dfr=r(d2t,"xlnet"),d2t.forEach(t),cfr=r(pke," \u2014 "),bQ=n(pke,"A",{href:!0});var c2t=s(bQ);ffr=r(c2t,"TFXLNetLMHeadModel"),c2t.forEach(t),mfr=r(pke," (XLNet model)"),pke.forEach(t),le.forEach(t),gfr=i(gl),T(D9.$$.fragment,gl),gl.forEach(t),ml.forEach(t),HIe=i(f),Xd=n(f,"H2",{class:!0});var eje=s(Xd);G9=n(eje,"A",{id:!0,class:!0,href:!0});var f2t=s(G9);d2e=n(f2t,"SPAN",{});var m2t=s(d2e);T(Oy.$$.fragment,m2t),m2t.forEach(t),f2t.forEach(t),hfr=i(eje),c2e=n(eje,"SPAN",{});var g2t=s(c2e);pfr=r(g2t,"TFAutoModelForCausalLM"),g2t.forEach(t),eje.forEach(t),UIe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(Vy.$$.fragment,hl),ufr=i(hl),zd=n(hl,"P",{});var aZ=s(zd);_fr=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vQ=n(aZ,"A",{href:!0});var h2t=s(vQ);bfr=r(h2t,"from_pretrained()"),h2t.forEach(t),vfr=r(aZ," class method or the "),FQ=n(aZ,"A",{href:!0});var p2t=s(FQ);Ffr=r(p2t,"from_config()"),p2t.forEach(t),Tfr=r(aZ,` class
method.`),aZ.forEach(t),Mfr=i(hl),Xy=n(hl,"P",{});var oje=s(Xy);Efr=r(oje,"This class cannot be instantiated directly using "),f2e=n(oje,"CODE",{});var u2t=s(f2e);Cfr=r(u2t,"__init__()"),u2t.forEach(t),wfr=r(oje," (throws an error)."),oje.forEach(t),Afr=i(hl),yt=n(hl,"DIV",{class:!0});var Kw=s(yt);T(zy.$$.fragment,Kw),yfr=i(Kw),m2e=n(Kw,"P",{});var _2t=s(m2e);Lfr=r(_2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_2t.forEach(t),xfr=i(Kw),Qd=n(Kw,"P",{});var nZ=s(Qd);$fr=r(nZ,`Note:
Loading a model from its configuration file does `),g2e=n(nZ,"STRONG",{});var b2t=s(g2e);kfr=r(b2t,"not"),b2t.forEach(t),Sfr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(nZ,"A",{href:!0});var v2t=s(TQ);Rfr=r(v2t,"from_pretrained()"),v2t.forEach(t),Bfr=r(nZ," to load the model weights."),nZ.forEach(t),Pfr=i(Kw),T(O9.$$.fragment,Kw),Kw.forEach(t),Ifr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(Qy.$$.fragment,pl),qfr=i(pl),h2e=n(pl,"P",{});var F2t=s(h2e);Nfr=r(F2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F2t.forEach(t),jfr=i(pl),en=n(pl,"P",{});var Zw=s(en);Dfr=r(Zw,"The model class to instantiate is selected based on the "),p2e=n(Zw,"CODE",{});var T2t=s(p2e);Gfr=r(T2t,"model_type"),T2t.forEach(t),Ofr=r(Zw,` property of the config object (either
passed as an argument or loaded from `),u2e=n(Zw,"CODE",{});var M2t=s(u2e);Vfr=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),Xfr=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(Zw,"CODE",{});var E2t=s(_2e);zfr=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),Qfr=r(Zw,":"),Zw.forEach(t),Wfr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);V9=n(Ce,"LI",{});var uke=s(V9);b2e=n(uke,"STRONG",{});var C2t=s(b2e);Hfr=r(C2t,"bert"),C2t.forEach(t),Ufr=r(uke," \u2014 "),MQ=n(uke,"A",{href:!0});var w2t=s(MQ);Jfr=r(w2t,"TFBertLMHeadModel"),w2t.forEach(t),Yfr=r(uke," (BERT model)"),uke.forEach(t),Kfr=i(Ce),X9=n(Ce,"LI",{});var _ke=s(X9);v2e=n(_ke,"STRONG",{});var A2t=s(v2e);Zfr=r(A2t,"camembert"),A2t.forEach(t),emr=r(_ke," \u2014 "),EQ=n(_ke,"A",{href:!0});var y2t=s(EQ);omr=r(y2t,"TFCamembertForCausalLM"),y2t.forEach(t),rmr=r(_ke," (CamemBERT model)"),_ke.forEach(t),tmr=i(Ce),z9=n(Ce,"LI",{});var bke=s(z9);F2e=n(bke,"STRONG",{});var L2t=s(F2e);amr=r(L2t,"ctrl"),L2t.forEach(t),nmr=r(bke," \u2014 "),CQ=n(bke,"A",{href:!0});var x2t=s(CQ);smr=r(x2t,"TFCTRLLMHeadModel"),x2t.forEach(t),lmr=r(bke," (CTRL model)"),bke.forEach(t),imr=i(Ce),Q9=n(Ce,"LI",{});var vke=s(Q9);T2e=n(vke,"STRONG",{});var $2t=s(T2e);dmr=r($2t,"gpt2"),$2t.forEach(t),cmr=r(vke," \u2014 "),wQ=n(vke,"A",{href:!0});var k2t=s(wQ);fmr=r(k2t,"TFGPT2LMHeadModel"),k2t.forEach(t),mmr=r(vke," (OpenAI GPT-2 model)"),vke.forEach(t),gmr=i(Ce),W9=n(Ce,"LI",{});var Fke=s(W9);M2e=n(Fke,"STRONG",{});var S2t=s(M2e);hmr=r(S2t,"gptj"),S2t.forEach(t),pmr=r(Fke," \u2014 "),AQ=n(Fke,"A",{href:!0});var R2t=s(AQ);umr=r(R2t,"TFGPTJForCausalLM"),R2t.forEach(t),_mr=r(Fke," (GPT-J model)"),Fke.forEach(t),bmr=i(Ce),H9=n(Ce,"LI",{});var Tke=s(H9);E2e=n(Tke,"STRONG",{});var B2t=s(E2e);vmr=r(B2t,"openai-gpt"),B2t.forEach(t),Fmr=r(Tke," \u2014 "),yQ=n(Tke,"A",{href:!0});var P2t=s(yQ);Tmr=r(P2t,"TFOpenAIGPTLMHeadModel"),P2t.forEach(t),Mmr=r(Tke," (OpenAI GPT model)"),Tke.forEach(t),Emr=i(Ce),U9=n(Ce,"LI",{});var Mke=s(U9);C2e=n(Mke,"STRONG",{});var I2t=s(C2e);Cmr=r(I2t,"rembert"),I2t.forEach(t),wmr=r(Mke," \u2014 "),LQ=n(Mke,"A",{href:!0});var q2t=s(LQ);Amr=r(q2t,"TFRemBertForCausalLM"),q2t.forEach(t),ymr=r(Mke," (RemBERT model)"),Mke.forEach(t),Lmr=i(Ce),J9=n(Ce,"LI",{});var Eke=s(J9);w2e=n(Eke,"STRONG",{});var N2t=s(w2e);xmr=r(N2t,"roberta"),N2t.forEach(t),$mr=r(Eke," \u2014 "),xQ=n(Eke,"A",{href:!0});var j2t=s(xQ);kmr=r(j2t,"TFRobertaForCausalLM"),j2t.forEach(t),Smr=r(Eke," (RoBERTa model)"),Eke.forEach(t),Rmr=i(Ce),Y9=n(Ce,"LI",{});var Cke=s(Y9);A2e=n(Cke,"STRONG",{});var D2t=s(A2e);Bmr=r(D2t,"roformer"),D2t.forEach(t),Pmr=r(Cke," \u2014 "),$Q=n(Cke,"A",{href:!0});var G2t=s($Q);Imr=r(G2t,"TFRoFormerForCausalLM"),G2t.forEach(t),qmr=r(Cke," (RoFormer model)"),Cke.forEach(t),Nmr=i(Ce),K9=n(Ce,"LI",{});var wke=s(K9);y2e=n(wke,"STRONG",{});var O2t=s(y2e);jmr=r(O2t,"transfo-xl"),O2t.forEach(t),Dmr=r(wke," \u2014 "),kQ=n(wke,"A",{href:!0});var V2t=s(kQ);Gmr=r(V2t,"TFTransfoXLLMHeadModel"),V2t.forEach(t),Omr=r(wke," (Transformer-XL model)"),wke.forEach(t),Vmr=i(Ce),Z9=n(Ce,"LI",{});var Ake=s(Z9);L2e=n(Ake,"STRONG",{});var X2t=s(L2e);Xmr=r(X2t,"xlm"),X2t.forEach(t),zmr=r(Ake," \u2014 "),SQ=n(Ake,"A",{href:!0});var z2t=s(SQ);Qmr=r(z2t,"TFXLMWithLMHeadModel"),z2t.forEach(t),Wmr=r(Ake," (XLM model)"),Ake.forEach(t),Hmr=i(Ce),eM=n(Ce,"LI",{});var yke=s(eM);x2e=n(yke,"STRONG",{});var Q2t=s(x2e);Umr=r(Q2t,"xlnet"),Q2t.forEach(t),Jmr=r(yke," \u2014 "),RQ=n(yke,"A",{href:!0});var W2t=s(RQ);Ymr=r(W2t,"TFXLNetLMHeadModel"),W2t.forEach(t),Kmr=r(yke," (XLNet model)"),yke.forEach(t),Ce.forEach(t),Zmr=i(pl),T(oM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),JIe=i(f),Wd=n(f,"H2",{class:!0});var rje=s(Wd);rM=n(rje,"A",{id:!0,class:!0,href:!0});var H2t=s(rM);$2e=n(H2t,"SPAN",{});var U2t=s($2e);T(Wy.$$.fragment,U2t),U2t.forEach(t),H2t.forEach(t),egr=i(rje),k2e=n(rje,"SPAN",{});var J2t=s(k2e);ogr=r(J2t,"TFAutoModelForImageClassification"),J2t.forEach(t),rje.forEach(t),YIe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(Hy.$$.fragment,ul),rgr=i(ul),Hd=n(ul,"P",{});var sZ=s(Hd);tgr=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BQ=n(sZ,"A",{href:!0});var Y2t=s(BQ);agr=r(Y2t,"from_pretrained()"),Y2t.forEach(t),ngr=r(sZ," class method or the "),PQ=n(sZ,"A",{href:!0});var K2t=s(PQ);sgr=r(K2t,"from_config()"),K2t.forEach(t),lgr=r(sZ,` class
method.`),sZ.forEach(t),igr=i(ul),Uy=n(ul,"P",{});var tje=s(Uy);dgr=r(tje,"This class cannot be instantiated directly using "),S2e=n(tje,"CODE",{});var Z2t=s(S2e);cgr=r(Z2t,"__init__()"),Z2t.forEach(t),fgr=r(tje," (throws an error)."),tje.forEach(t),mgr=i(ul),Lt=n(ul,"DIV",{class:!0});var eA=s(Lt);T(Jy.$$.fragment,eA),ggr=i(eA),R2e=n(eA,"P",{});var ebt=s(R2e);hgr=r(ebt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ebt.forEach(t),pgr=i(eA),Ud=n(eA,"P",{});var lZ=s(Ud);ugr=r(lZ,`Note:
Loading a model from its configuration file does `),B2e=n(lZ,"STRONG",{});var obt=s(B2e);_gr=r(obt,"not"),obt.forEach(t),bgr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(lZ,"A",{href:!0});var rbt=s(IQ);vgr=r(rbt,"from_pretrained()"),rbt.forEach(t),Fgr=r(lZ," to load the model weights."),lZ.forEach(t),Tgr=i(eA),T(tM.$$.fragment,eA),eA.forEach(t),Mgr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(Yy.$$.fragment,_l),Egr=i(_l),P2e=n(_l,"P",{});var tbt=s(P2e);Cgr=r(tbt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tbt.forEach(t),wgr=i(_l),on=n(_l,"P",{});var oA=s(on);Agr=r(oA,"The model class to instantiate is selected based on the "),I2e=n(oA,"CODE",{});var abt=s(I2e);ygr=r(abt,"model_type"),abt.forEach(t),Lgr=r(oA,` property of the config object (either
passed as an argument or loaded from `),q2e=n(oA,"CODE",{});var nbt=s(q2e);xgr=r(nbt,"pretrained_model_name_or_path"),nbt.forEach(t),$gr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(oA,"CODE",{});var sbt=s(N2e);kgr=r(sbt,"pretrained_model_name_or_path"),sbt.forEach(t),Sgr=r(oA,":"),oA.forEach(t),Rgr=i(_l),rn=n(_l,"UL",{});var rA=s(rn);aM=n(rA,"LI",{});var Lke=s(aM);j2e=n(Lke,"STRONG",{});var lbt=s(j2e);Bgr=r(lbt,"convnext"),lbt.forEach(t),Pgr=r(Lke," \u2014 "),qQ=n(Lke,"A",{href:!0});var ibt=s(qQ);Igr=r(ibt,"TFConvNextForImageClassification"),ibt.forEach(t),qgr=r(Lke," (ConvNext model)"),Lke.forEach(t),Ngr=i(rA),nM=n(rA,"LI",{});var xke=s(nM);D2e=n(xke,"STRONG",{});var dbt=s(D2e);jgr=r(dbt,"data2vec-vision"),dbt.forEach(t),Dgr=r(xke," \u2014 "),NQ=n(xke,"A",{href:!0});var cbt=s(NQ);Ggr=r(cbt,"TFData2VecVisionForImageClassification"),cbt.forEach(t),Ogr=r(xke," (Data2VecVision model)"),xke.forEach(t),Vgr=i(rA),sM=n(rA,"LI",{});var $ke=s(sM);G2e=n($ke,"STRONG",{});var fbt=s(G2e);Xgr=r(fbt,"swin"),fbt.forEach(t),zgr=r($ke," \u2014 "),jQ=n($ke,"A",{href:!0});var mbt=s(jQ);Qgr=r(mbt,"TFSwinForImageClassification"),mbt.forEach(t),Wgr=r($ke," (Swin model)"),$ke.forEach(t),Hgr=i(rA),lM=n(rA,"LI",{});var kke=s(lM);O2e=n(kke,"STRONG",{});var gbt=s(O2e);Ugr=r(gbt,"vit"),gbt.forEach(t),Jgr=r(kke," \u2014 "),DQ=n(kke,"A",{href:!0});var hbt=s(DQ);Ygr=r(hbt,"TFViTForImageClassification"),hbt.forEach(t),Kgr=r(kke," (ViT model)"),kke.forEach(t),rA.forEach(t),Zgr=i(_l),T(iM.$$.fragment,_l),_l.forEach(t),ul.forEach(t),KIe=i(f),Jd=n(f,"H2",{class:!0});var aje=s(Jd);dM=n(aje,"A",{id:!0,class:!0,href:!0});var pbt=s(dM);V2e=n(pbt,"SPAN",{});var ubt=s(V2e);T(Ky.$$.fragment,ubt),ubt.forEach(t),pbt.forEach(t),ehr=i(aje),X2e=n(aje,"SPAN",{});var _bt=s(X2e);ohr=r(_bt,"TFAutoModelForMaskedLM"),_bt.forEach(t),aje.forEach(t),ZIe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(Zy.$$.fragment,bl),rhr=i(bl),Yd=n(bl,"P",{});var iZ=s(Yd);thr=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GQ=n(iZ,"A",{href:!0});var bbt=s(GQ);ahr=r(bbt,"from_pretrained()"),bbt.forEach(t),nhr=r(iZ," class method or the "),OQ=n(iZ,"A",{href:!0});var vbt=s(OQ);shr=r(vbt,"from_config()"),vbt.forEach(t),lhr=r(iZ,` class
method.`),iZ.forEach(t),ihr=i(bl),eL=n(bl,"P",{});var nje=s(eL);dhr=r(nje,"This class cannot be instantiated directly using "),z2e=n(nje,"CODE",{});var Fbt=s(z2e);chr=r(Fbt,"__init__()"),Fbt.forEach(t),fhr=r(nje," (throws an error)."),nje.forEach(t),mhr=i(bl),xt=n(bl,"DIV",{class:!0});var tA=s(xt);T(oL.$$.fragment,tA),ghr=i(tA),Q2e=n(tA,"P",{});var Tbt=s(Q2e);hhr=r(Tbt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Tbt.forEach(t),phr=i(tA),Kd=n(tA,"P",{});var dZ=s(Kd);uhr=r(dZ,`Note:
Loading a model from its configuration file does `),W2e=n(dZ,"STRONG",{});var Mbt=s(W2e);_hr=r(Mbt,"not"),Mbt.forEach(t),bhr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(dZ,"A",{href:!0});var Ebt=s(VQ);vhr=r(Ebt,"from_pretrained()"),Ebt.forEach(t),Fhr=r(dZ," to load the model weights."),dZ.forEach(t),Thr=i(tA),T(cM.$$.fragment,tA),tA.forEach(t),Mhr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(rL.$$.fragment,vl),Ehr=i(vl),H2e=n(vl,"P",{});var Cbt=s(H2e);Chr=r(Cbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cbt.forEach(t),whr=i(vl),tn=n(vl,"P",{});var aA=s(tn);Ahr=r(aA,"The model class to instantiate is selected based on the "),U2e=n(aA,"CODE",{});var wbt=s(U2e);yhr=r(wbt,"model_type"),wbt.forEach(t),Lhr=r(aA,` property of the config object (either
passed as an argument or loaded from `),J2e=n(aA,"CODE",{});var Abt=s(J2e);xhr=r(Abt,"pretrained_model_name_or_path"),Abt.forEach(t),$hr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(aA,"CODE",{});var ybt=s(Y2e);khr=r(ybt,"pretrained_model_name_or_path"),ybt.forEach(t),Shr=r(aA,":"),aA.forEach(t),Rhr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);fM=n(fe,"LI",{});var Ske=s(fM);K2e=n(Ske,"STRONG",{});var Lbt=s(K2e);Bhr=r(Lbt,"albert"),Lbt.forEach(t),Phr=r(Ske," \u2014 "),XQ=n(Ske,"A",{href:!0});var xbt=s(XQ);Ihr=r(xbt,"TFAlbertForMaskedLM"),xbt.forEach(t),qhr=r(Ske," (ALBERT model)"),Ske.forEach(t),Nhr=i(fe),mM=n(fe,"LI",{});var Rke=s(mM);Z2e=n(Rke,"STRONG",{});var $bt=s(Z2e);jhr=r($bt,"bert"),$bt.forEach(t),Dhr=r(Rke," \u2014 "),zQ=n(Rke,"A",{href:!0});var kbt=s(zQ);Ghr=r(kbt,"TFBertForMaskedLM"),kbt.forEach(t),Ohr=r(Rke," (BERT model)"),Rke.forEach(t),Vhr=i(fe),gM=n(fe,"LI",{});var Bke=s(gM);ebe=n(Bke,"STRONG",{});var Sbt=s(ebe);Xhr=r(Sbt,"camembert"),Sbt.forEach(t),zhr=r(Bke," \u2014 "),QQ=n(Bke,"A",{href:!0});var Rbt=s(QQ);Qhr=r(Rbt,"TFCamembertForMaskedLM"),Rbt.forEach(t),Whr=r(Bke," (CamemBERT model)"),Bke.forEach(t),Hhr=i(fe),hM=n(fe,"LI",{});var Pke=s(hM);obe=n(Pke,"STRONG",{});var Bbt=s(obe);Uhr=r(Bbt,"convbert"),Bbt.forEach(t),Jhr=r(Pke," \u2014 "),WQ=n(Pke,"A",{href:!0});var Pbt=s(WQ);Yhr=r(Pbt,"TFConvBertForMaskedLM"),Pbt.forEach(t),Khr=r(Pke," (ConvBERT model)"),Pke.forEach(t),Zhr=i(fe),pM=n(fe,"LI",{});var Ike=s(pM);rbe=n(Ike,"STRONG",{});var Ibt=s(rbe);epr=r(Ibt,"deberta"),Ibt.forEach(t),opr=r(Ike," \u2014 "),HQ=n(Ike,"A",{href:!0});var qbt=s(HQ);rpr=r(qbt,"TFDebertaForMaskedLM"),qbt.forEach(t),tpr=r(Ike," (DeBERTa model)"),Ike.forEach(t),apr=i(fe),uM=n(fe,"LI",{});var qke=s(uM);tbe=n(qke,"STRONG",{});var Nbt=s(tbe);npr=r(Nbt,"deberta-v2"),Nbt.forEach(t),spr=r(qke," \u2014 "),UQ=n(qke,"A",{href:!0});var jbt=s(UQ);lpr=r(jbt,"TFDebertaV2ForMaskedLM"),jbt.forEach(t),ipr=r(qke," (DeBERTa-v2 model)"),qke.forEach(t),dpr=i(fe),_M=n(fe,"LI",{});var Nke=s(_M);abe=n(Nke,"STRONG",{});var Dbt=s(abe);cpr=r(Dbt,"distilbert"),Dbt.forEach(t),fpr=r(Nke," \u2014 "),JQ=n(Nke,"A",{href:!0});var Gbt=s(JQ);mpr=r(Gbt,"TFDistilBertForMaskedLM"),Gbt.forEach(t),gpr=r(Nke," (DistilBERT model)"),Nke.forEach(t),hpr=i(fe),bM=n(fe,"LI",{});var jke=s(bM);nbe=n(jke,"STRONG",{});var Obt=s(nbe);ppr=r(Obt,"electra"),Obt.forEach(t),upr=r(jke," \u2014 "),YQ=n(jke,"A",{href:!0});var Vbt=s(YQ);_pr=r(Vbt,"TFElectraForMaskedLM"),Vbt.forEach(t),bpr=r(jke," (ELECTRA model)"),jke.forEach(t),vpr=i(fe),vM=n(fe,"LI",{});var Dke=s(vM);sbe=n(Dke,"STRONG",{});var Xbt=s(sbe);Fpr=r(Xbt,"flaubert"),Xbt.forEach(t),Tpr=r(Dke," \u2014 "),KQ=n(Dke,"A",{href:!0});var zbt=s(KQ);Mpr=r(zbt,"TFFlaubertWithLMHeadModel"),zbt.forEach(t),Epr=r(Dke," (FlauBERT model)"),Dke.forEach(t),Cpr=i(fe),FM=n(fe,"LI",{});var Gke=s(FM);lbe=n(Gke,"STRONG",{});var Qbt=s(lbe);wpr=r(Qbt,"funnel"),Qbt.forEach(t),Apr=r(Gke," \u2014 "),ZQ=n(Gke,"A",{href:!0});var Wbt=s(ZQ);ypr=r(Wbt,"TFFunnelForMaskedLM"),Wbt.forEach(t),Lpr=r(Gke," (Funnel Transformer model)"),Gke.forEach(t),xpr=i(fe),TM=n(fe,"LI",{});var Oke=s(TM);ibe=n(Oke,"STRONG",{});var Hbt=s(ibe);$pr=r(Hbt,"layoutlm"),Hbt.forEach(t),kpr=r(Oke," \u2014 "),eW=n(Oke,"A",{href:!0});var Ubt=s(eW);Spr=r(Ubt,"TFLayoutLMForMaskedLM"),Ubt.forEach(t),Rpr=r(Oke," (LayoutLM model)"),Oke.forEach(t),Bpr=i(fe),MM=n(fe,"LI",{});var Vke=s(MM);dbe=n(Vke,"STRONG",{});var Jbt=s(dbe);Ppr=r(Jbt,"longformer"),Jbt.forEach(t),Ipr=r(Vke," \u2014 "),oW=n(Vke,"A",{href:!0});var Ybt=s(oW);qpr=r(Ybt,"TFLongformerForMaskedLM"),Ybt.forEach(t),Npr=r(Vke," (Longformer model)"),Vke.forEach(t),jpr=i(fe),EM=n(fe,"LI",{});var Xke=s(EM);cbe=n(Xke,"STRONG",{});var Kbt=s(cbe);Dpr=r(Kbt,"mobilebert"),Kbt.forEach(t),Gpr=r(Xke," \u2014 "),rW=n(Xke,"A",{href:!0});var Zbt=s(rW);Opr=r(Zbt,"TFMobileBertForMaskedLM"),Zbt.forEach(t),Vpr=r(Xke," (MobileBERT model)"),Xke.forEach(t),Xpr=i(fe),CM=n(fe,"LI",{});var zke=s(CM);fbe=n(zke,"STRONG",{});var evt=s(fbe);zpr=r(evt,"mpnet"),evt.forEach(t),Qpr=r(zke," \u2014 "),tW=n(zke,"A",{href:!0});var ovt=s(tW);Wpr=r(ovt,"TFMPNetForMaskedLM"),ovt.forEach(t),Hpr=r(zke," (MPNet model)"),zke.forEach(t),Upr=i(fe),wM=n(fe,"LI",{});var Qke=s(wM);mbe=n(Qke,"STRONG",{});var rvt=s(mbe);Jpr=r(rvt,"rembert"),rvt.forEach(t),Ypr=r(Qke," \u2014 "),aW=n(Qke,"A",{href:!0});var tvt=s(aW);Kpr=r(tvt,"TFRemBertForMaskedLM"),tvt.forEach(t),Zpr=r(Qke," (RemBERT model)"),Qke.forEach(t),eur=i(fe),AM=n(fe,"LI",{});var Wke=s(AM);gbe=n(Wke,"STRONG",{});var avt=s(gbe);our=r(avt,"roberta"),avt.forEach(t),rur=r(Wke," \u2014 "),nW=n(Wke,"A",{href:!0});var nvt=s(nW);tur=r(nvt,"TFRobertaForMaskedLM"),nvt.forEach(t),aur=r(Wke," (RoBERTa model)"),Wke.forEach(t),nur=i(fe),yM=n(fe,"LI",{});var Hke=s(yM);hbe=n(Hke,"STRONG",{});var svt=s(hbe);sur=r(svt,"roformer"),svt.forEach(t),lur=r(Hke," \u2014 "),sW=n(Hke,"A",{href:!0});var lvt=s(sW);iur=r(lvt,"TFRoFormerForMaskedLM"),lvt.forEach(t),dur=r(Hke," (RoFormer model)"),Hke.forEach(t),cur=i(fe),LM=n(fe,"LI",{});var Uke=s(LM);pbe=n(Uke,"STRONG",{});var ivt=s(pbe);fur=r(ivt,"tapas"),ivt.forEach(t),mur=r(Uke," \u2014 "),lW=n(Uke,"A",{href:!0});var dvt=s(lW);gur=r(dvt,"TFTapasForMaskedLM"),dvt.forEach(t),hur=r(Uke," (TAPAS model)"),Uke.forEach(t),pur=i(fe),xM=n(fe,"LI",{});var Jke=s(xM);ube=n(Jke,"STRONG",{});var cvt=s(ube);uur=r(cvt,"xlm"),cvt.forEach(t),_ur=r(Jke," \u2014 "),iW=n(Jke,"A",{href:!0});var fvt=s(iW);bur=r(fvt,"TFXLMWithLMHeadModel"),fvt.forEach(t),vur=r(Jke," (XLM model)"),Jke.forEach(t),Fur=i(fe),$M=n(fe,"LI",{});var Yke=s($M);_be=n(Yke,"STRONG",{});var mvt=s(_be);Tur=r(mvt,"xlm-roberta"),mvt.forEach(t),Mur=r(Yke," \u2014 "),dW=n(Yke,"A",{href:!0});var gvt=s(dW);Eur=r(gvt,"TFXLMRobertaForMaskedLM"),gvt.forEach(t),Cur=r(Yke," (XLM-RoBERTa model)"),Yke.forEach(t),fe.forEach(t),wur=i(vl),T(kM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),eqe=i(f),Zd=n(f,"H2",{class:!0});var sje=s(Zd);SM=n(sje,"A",{id:!0,class:!0,href:!0});var hvt=s(SM);bbe=n(hvt,"SPAN",{});var pvt=s(bbe);T(tL.$$.fragment,pvt),pvt.forEach(t),hvt.forEach(t),Aur=i(sje),vbe=n(sje,"SPAN",{});var uvt=s(vbe);yur=r(uvt,"TFAutoModelForSeq2SeqLM"),uvt.forEach(t),sje.forEach(t),oqe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(aL.$$.fragment,Fl),Lur=i(Fl),ec=n(Fl,"P",{});var cZ=s(ec);xur=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cW=n(cZ,"A",{href:!0});var _vt=s(cW);$ur=r(_vt,"from_pretrained()"),_vt.forEach(t),kur=r(cZ," class method or the "),fW=n(cZ,"A",{href:!0});var bvt=s(fW);Sur=r(bvt,"from_config()"),bvt.forEach(t),Rur=r(cZ,` class
method.`),cZ.forEach(t),Bur=i(Fl),nL=n(Fl,"P",{});var lje=s(nL);Pur=r(lje,"This class cannot be instantiated directly using "),Fbe=n(lje,"CODE",{});var vvt=s(Fbe);Iur=r(vvt,"__init__()"),vvt.forEach(t),qur=r(lje," (throws an error)."),lje.forEach(t),Nur=i(Fl),$t=n(Fl,"DIV",{class:!0});var nA=s($t);T(sL.$$.fragment,nA),jur=i(nA),Tbe=n(nA,"P",{});var Fvt=s(Tbe);Dur=r(Fvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fvt.forEach(t),Gur=i(nA),oc=n(nA,"P",{});var fZ=s(oc);Our=r(fZ,`Note:
Loading a model from its configuration file does `),Mbe=n(fZ,"STRONG",{});var Tvt=s(Mbe);Vur=r(Tvt,"not"),Tvt.forEach(t),Xur=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(fZ,"A",{href:!0});var Mvt=s(mW);zur=r(Mvt,"from_pretrained()"),Mvt.forEach(t),Qur=r(fZ," to load the model weights."),fZ.forEach(t),Wur=i(nA),T(RM.$$.fragment,nA),nA.forEach(t),Hur=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(lL.$$.fragment,Tl),Uur=i(Tl),Ebe=n(Tl,"P",{});var Evt=s(Ebe);Jur=r(Evt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Evt.forEach(t),Yur=i(Tl),an=n(Tl,"P",{});var sA=s(an);Kur=r(sA,"The model class to instantiate is selected based on the "),Cbe=n(sA,"CODE",{});var Cvt=s(Cbe);Zur=r(Cvt,"model_type"),Cvt.forEach(t),e_r=r(sA,` property of the config object (either
passed as an argument or loaded from `),wbe=n(sA,"CODE",{});var wvt=s(wbe);o_r=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),r_r=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(sA,"CODE",{});var Avt=s(Abe);t_r=r(Avt,"pretrained_model_name_or_path"),Avt.forEach(t),a_r=r(sA,":"),sA.forEach(t),n_r=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);BM=n(Re,"LI",{});var Kke=s(BM);ybe=n(Kke,"STRONG",{});var yvt=s(ybe);s_r=r(yvt,"bart"),yvt.forEach(t),l_r=r(Kke," \u2014 "),gW=n(Kke,"A",{href:!0});var Lvt=s(gW);i_r=r(Lvt,"TFBartForConditionalGeneration"),Lvt.forEach(t),d_r=r(Kke," (BART model)"),Kke.forEach(t),c_r=i(Re),PM=n(Re,"LI",{});var Zke=s(PM);Lbe=n(Zke,"STRONG",{});var xvt=s(Lbe);f_r=r(xvt,"blenderbot"),xvt.forEach(t),m_r=r(Zke," \u2014 "),hW=n(Zke,"A",{href:!0});var $vt=s(hW);g_r=r($vt,"TFBlenderbotForConditionalGeneration"),$vt.forEach(t),h_r=r(Zke," (Blenderbot model)"),Zke.forEach(t),p_r=i(Re),IM=n(Re,"LI",{});var eSe=s(IM);xbe=n(eSe,"STRONG",{});var kvt=s(xbe);u_r=r(kvt,"blenderbot-small"),kvt.forEach(t),__r=r(eSe," \u2014 "),pW=n(eSe,"A",{href:!0});var Svt=s(pW);b_r=r(Svt,"TFBlenderbotSmallForConditionalGeneration"),Svt.forEach(t),v_r=r(eSe," (BlenderbotSmall model)"),eSe.forEach(t),F_r=i(Re),qM=n(Re,"LI",{});var oSe=s(qM);$be=n(oSe,"STRONG",{});var Rvt=s($be);T_r=r(Rvt,"encoder-decoder"),Rvt.forEach(t),M_r=r(oSe," \u2014 "),uW=n(oSe,"A",{href:!0});var Bvt=s(uW);E_r=r(Bvt,"TFEncoderDecoderModel"),Bvt.forEach(t),C_r=r(oSe," (Encoder decoder model)"),oSe.forEach(t),w_r=i(Re),NM=n(Re,"LI",{});var rSe=s(NM);kbe=n(rSe,"STRONG",{});var Pvt=s(kbe);A_r=r(Pvt,"led"),Pvt.forEach(t),y_r=r(rSe," \u2014 "),_W=n(rSe,"A",{href:!0});var Ivt=s(_W);L_r=r(Ivt,"TFLEDForConditionalGeneration"),Ivt.forEach(t),x_r=r(rSe," (LED model)"),rSe.forEach(t),$_r=i(Re),jM=n(Re,"LI",{});var tSe=s(jM);Sbe=n(tSe,"STRONG",{});var qvt=s(Sbe);k_r=r(qvt,"marian"),qvt.forEach(t),S_r=r(tSe," \u2014 "),bW=n(tSe,"A",{href:!0});var Nvt=s(bW);R_r=r(Nvt,"TFMarianMTModel"),Nvt.forEach(t),B_r=r(tSe," (Marian model)"),tSe.forEach(t),P_r=i(Re),DM=n(Re,"LI",{});var aSe=s(DM);Rbe=n(aSe,"STRONG",{});var jvt=s(Rbe);I_r=r(jvt,"mbart"),jvt.forEach(t),q_r=r(aSe," \u2014 "),vW=n(aSe,"A",{href:!0});var Dvt=s(vW);N_r=r(Dvt,"TFMBartForConditionalGeneration"),Dvt.forEach(t),j_r=r(aSe," (mBART model)"),aSe.forEach(t),D_r=i(Re),GM=n(Re,"LI",{});var nSe=s(GM);Bbe=n(nSe,"STRONG",{});var Gvt=s(Bbe);G_r=r(Gvt,"mt5"),Gvt.forEach(t),O_r=r(nSe," \u2014 "),FW=n(nSe,"A",{href:!0});var Ovt=s(FW);V_r=r(Ovt,"TFMT5ForConditionalGeneration"),Ovt.forEach(t),X_r=r(nSe," (mT5 model)"),nSe.forEach(t),z_r=i(Re),OM=n(Re,"LI",{});var sSe=s(OM);Pbe=n(sSe,"STRONG",{});var Vvt=s(Pbe);Q_r=r(Vvt,"pegasus"),Vvt.forEach(t),W_r=r(sSe," \u2014 "),TW=n(sSe,"A",{href:!0});var Xvt=s(TW);H_r=r(Xvt,"TFPegasusForConditionalGeneration"),Xvt.forEach(t),U_r=r(sSe," (Pegasus model)"),sSe.forEach(t),J_r=i(Re),VM=n(Re,"LI",{});var lSe=s(VM);Ibe=n(lSe,"STRONG",{});var zvt=s(Ibe);Y_r=r(zvt,"t5"),zvt.forEach(t),K_r=r(lSe," \u2014 "),MW=n(lSe,"A",{href:!0});var Qvt=s(MW);Z_r=r(Qvt,"TFT5ForConditionalGeneration"),Qvt.forEach(t),e1r=r(lSe," (T5 model)"),lSe.forEach(t),Re.forEach(t),o1r=i(Tl),T(XM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),rqe=i(f),rc=n(f,"H2",{class:!0});var ije=s(rc);zM=n(ije,"A",{id:!0,class:!0,href:!0});var Wvt=s(zM);qbe=n(Wvt,"SPAN",{});var Hvt=s(qbe);T(iL.$$.fragment,Hvt),Hvt.forEach(t),Wvt.forEach(t),r1r=i(ije),Nbe=n(ije,"SPAN",{});var Uvt=s(Nbe);t1r=r(Uvt,"TFAutoModelForSequenceClassification"),Uvt.forEach(t),ije.forEach(t),tqe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(dL.$$.fragment,Ml),a1r=i(Ml),tc=n(Ml,"P",{});var mZ=s(tc);n1r=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),EW=n(mZ,"A",{href:!0});var Jvt=s(EW);s1r=r(Jvt,"from_pretrained()"),Jvt.forEach(t),l1r=r(mZ," class method or the "),CW=n(mZ,"A",{href:!0});var Yvt=s(CW);i1r=r(Yvt,"from_config()"),Yvt.forEach(t),d1r=r(mZ,` class
method.`),mZ.forEach(t),c1r=i(Ml),cL=n(Ml,"P",{});var dje=s(cL);f1r=r(dje,"This class cannot be instantiated directly using "),jbe=n(dje,"CODE",{});var Kvt=s(jbe);m1r=r(Kvt,"__init__()"),Kvt.forEach(t),g1r=r(dje," (throws an error)."),dje.forEach(t),h1r=i(Ml),kt=n(Ml,"DIV",{class:!0});var lA=s(kt);T(fL.$$.fragment,lA),p1r=i(lA),Dbe=n(lA,"P",{});var Zvt=s(Dbe);u1r=r(Zvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zvt.forEach(t),_1r=i(lA),ac=n(lA,"P",{});var gZ=s(ac);b1r=r(gZ,`Note:
Loading a model from its configuration file does `),Gbe=n(gZ,"STRONG",{});var eFt=s(Gbe);v1r=r(eFt,"not"),eFt.forEach(t),F1r=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(gZ,"A",{href:!0});var oFt=s(wW);T1r=r(oFt,"from_pretrained()"),oFt.forEach(t),M1r=r(gZ," to load the model weights."),gZ.forEach(t),E1r=i(lA),T(QM.$$.fragment,lA),lA.forEach(t),C1r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(mL.$$.fragment,El),w1r=i(El),Obe=n(El,"P",{});var rFt=s(Obe);A1r=r(rFt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rFt.forEach(t),y1r=i(El),nn=n(El,"P",{});var iA=s(nn);L1r=r(iA,"The model class to instantiate is selected based on the "),Vbe=n(iA,"CODE",{});var tFt=s(Vbe);x1r=r(tFt,"model_type"),tFt.forEach(t),$1r=r(iA,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(iA,"CODE",{});var aFt=s(Xbe);k1r=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),S1r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(iA,"CODE",{});var nFt=s(zbe);R1r=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),B1r=r(iA,":"),iA.forEach(t),P1r=i(El),Z=n(El,"UL",{});var te=s(Z);WM=n(te,"LI",{});var iSe=s(WM);Qbe=n(iSe,"STRONG",{});var sFt=s(Qbe);I1r=r(sFt,"albert"),sFt.forEach(t),q1r=r(iSe," \u2014 "),AW=n(iSe,"A",{href:!0});var lFt=s(AW);N1r=r(lFt,"TFAlbertForSequenceClassification"),lFt.forEach(t),j1r=r(iSe," (ALBERT model)"),iSe.forEach(t),D1r=i(te),HM=n(te,"LI",{});var dSe=s(HM);Wbe=n(dSe,"STRONG",{});var iFt=s(Wbe);G1r=r(iFt,"bert"),iFt.forEach(t),O1r=r(dSe," \u2014 "),yW=n(dSe,"A",{href:!0});var dFt=s(yW);V1r=r(dFt,"TFBertForSequenceClassification"),dFt.forEach(t),X1r=r(dSe," (BERT model)"),dSe.forEach(t),z1r=i(te),UM=n(te,"LI",{});var cSe=s(UM);Hbe=n(cSe,"STRONG",{});var cFt=s(Hbe);Q1r=r(cFt,"camembert"),cFt.forEach(t),W1r=r(cSe," \u2014 "),LW=n(cSe,"A",{href:!0});var fFt=s(LW);H1r=r(fFt,"TFCamembertForSequenceClassification"),fFt.forEach(t),U1r=r(cSe," (CamemBERT model)"),cSe.forEach(t),J1r=i(te),JM=n(te,"LI",{});var fSe=s(JM);Ube=n(fSe,"STRONG",{});var mFt=s(Ube);Y1r=r(mFt,"convbert"),mFt.forEach(t),K1r=r(fSe," \u2014 "),xW=n(fSe,"A",{href:!0});var gFt=s(xW);Z1r=r(gFt,"TFConvBertForSequenceClassification"),gFt.forEach(t),e2r=r(fSe," (ConvBERT model)"),fSe.forEach(t),o2r=i(te),YM=n(te,"LI",{});var mSe=s(YM);Jbe=n(mSe,"STRONG",{});var hFt=s(Jbe);r2r=r(hFt,"ctrl"),hFt.forEach(t),t2r=r(mSe," \u2014 "),$W=n(mSe,"A",{href:!0});var pFt=s($W);a2r=r(pFt,"TFCTRLForSequenceClassification"),pFt.forEach(t),n2r=r(mSe," (CTRL model)"),mSe.forEach(t),s2r=i(te),KM=n(te,"LI",{});var gSe=s(KM);Ybe=n(gSe,"STRONG",{});var uFt=s(Ybe);l2r=r(uFt,"deberta"),uFt.forEach(t),i2r=r(gSe," \u2014 "),kW=n(gSe,"A",{href:!0});var _Ft=s(kW);d2r=r(_Ft,"TFDebertaForSequenceClassification"),_Ft.forEach(t),c2r=r(gSe," (DeBERTa model)"),gSe.forEach(t),f2r=i(te),ZM=n(te,"LI",{});var hSe=s(ZM);Kbe=n(hSe,"STRONG",{});var bFt=s(Kbe);m2r=r(bFt,"deberta-v2"),bFt.forEach(t),g2r=r(hSe," \u2014 "),SW=n(hSe,"A",{href:!0});var vFt=s(SW);h2r=r(vFt,"TFDebertaV2ForSequenceClassification"),vFt.forEach(t),p2r=r(hSe," (DeBERTa-v2 model)"),hSe.forEach(t),u2r=i(te),e4=n(te,"LI",{});var pSe=s(e4);Zbe=n(pSe,"STRONG",{});var FFt=s(Zbe);_2r=r(FFt,"distilbert"),FFt.forEach(t),b2r=r(pSe," \u2014 "),RW=n(pSe,"A",{href:!0});var TFt=s(RW);v2r=r(TFt,"TFDistilBertForSequenceClassification"),TFt.forEach(t),F2r=r(pSe," (DistilBERT model)"),pSe.forEach(t),T2r=i(te),o4=n(te,"LI",{});var uSe=s(o4);eve=n(uSe,"STRONG",{});var MFt=s(eve);M2r=r(MFt,"electra"),MFt.forEach(t),E2r=r(uSe," \u2014 "),BW=n(uSe,"A",{href:!0});var EFt=s(BW);C2r=r(EFt,"TFElectraForSequenceClassification"),EFt.forEach(t),w2r=r(uSe," (ELECTRA model)"),uSe.forEach(t),A2r=i(te),r4=n(te,"LI",{});var _Se=s(r4);ove=n(_Se,"STRONG",{});var CFt=s(ove);y2r=r(CFt,"flaubert"),CFt.forEach(t),L2r=r(_Se," \u2014 "),PW=n(_Se,"A",{href:!0});var wFt=s(PW);x2r=r(wFt,"TFFlaubertForSequenceClassification"),wFt.forEach(t),$2r=r(_Se," (FlauBERT model)"),_Se.forEach(t),k2r=i(te),t4=n(te,"LI",{});var bSe=s(t4);rve=n(bSe,"STRONG",{});var AFt=s(rve);S2r=r(AFt,"funnel"),AFt.forEach(t),R2r=r(bSe," \u2014 "),IW=n(bSe,"A",{href:!0});var yFt=s(IW);B2r=r(yFt,"TFFunnelForSequenceClassification"),yFt.forEach(t),P2r=r(bSe," (Funnel Transformer model)"),bSe.forEach(t),I2r=i(te),a4=n(te,"LI",{});var vSe=s(a4);tve=n(vSe,"STRONG",{});var LFt=s(tve);q2r=r(LFt,"gpt2"),LFt.forEach(t),N2r=r(vSe," \u2014 "),qW=n(vSe,"A",{href:!0});var xFt=s(qW);j2r=r(xFt,"TFGPT2ForSequenceClassification"),xFt.forEach(t),D2r=r(vSe," (OpenAI GPT-2 model)"),vSe.forEach(t),G2r=i(te),n4=n(te,"LI",{});var FSe=s(n4);ave=n(FSe,"STRONG",{});var $Ft=s(ave);O2r=r($Ft,"gptj"),$Ft.forEach(t),V2r=r(FSe," \u2014 "),NW=n(FSe,"A",{href:!0});var kFt=s(NW);X2r=r(kFt,"TFGPTJForSequenceClassification"),kFt.forEach(t),z2r=r(FSe," (GPT-J model)"),FSe.forEach(t),Q2r=i(te),s4=n(te,"LI",{});var TSe=s(s4);nve=n(TSe,"STRONG",{});var SFt=s(nve);W2r=r(SFt,"layoutlm"),SFt.forEach(t),H2r=r(TSe," \u2014 "),jW=n(TSe,"A",{href:!0});var RFt=s(jW);U2r=r(RFt,"TFLayoutLMForSequenceClassification"),RFt.forEach(t),J2r=r(TSe," (LayoutLM model)"),TSe.forEach(t),Y2r=i(te),l4=n(te,"LI",{});var MSe=s(l4);sve=n(MSe,"STRONG",{});var BFt=s(sve);K2r=r(BFt,"longformer"),BFt.forEach(t),Z2r=r(MSe," \u2014 "),DW=n(MSe,"A",{href:!0});var PFt=s(DW);ebr=r(PFt,"TFLongformerForSequenceClassification"),PFt.forEach(t),obr=r(MSe," (Longformer model)"),MSe.forEach(t),rbr=i(te),i4=n(te,"LI",{});var ESe=s(i4);lve=n(ESe,"STRONG",{});var IFt=s(lve);tbr=r(IFt,"mobilebert"),IFt.forEach(t),abr=r(ESe," \u2014 "),GW=n(ESe,"A",{href:!0});var qFt=s(GW);nbr=r(qFt,"TFMobileBertForSequenceClassification"),qFt.forEach(t),sbr=r(ESe," (MobileBERT model)"),ESe.forEach(t),lbr=i(te),d4=n(te,"LI",{});var CSe=s(d4);ive=n(CSe,"STRONG",{});var NFt=s(ive);ibr=r(NFt,"mpnet"),NFt.forEach(t),dbr=r(CSe," \u2014 "),OW=n(CSe,"A",{href:!0});var jFt=s(OW);cbr=r(jFt,"TFMPNetForSequenceClassification"),jFt.forEach(t),fbr=r(CSe," (MPNet model)"),CSe.forEach(t),mbr=i(te),c4=n(te,"LI",{});var wSe=s(c4);dve=n(wSe,"STRONG",{});var DFt=s(dve);gbr=r(DFt,"openai-gpt"),DFt.forEach(t),hbr=r(wSe," \u2014 "),VW=n(wSe,"A",{href:!0});var GFt=s(VW);pbr=r(GFt,"TFOpenAIGPTForSequenceClassification"),GFt.forEach(t),ubr=r(wSe," (OpenAI GPT model)"),wSe.forEach(t),_br=i(te),f4=n(te,"LI",{});var ASe=s(f4);cve=n(ASe,"STRONG",{});var OFt=s(cve);bbr=r(OFt,"rembert"),OFt.forEach(t),vbr=r(ASe," \u2014 "),XW=n(ASe,"A",{href:!0});var VFt=s(XW);Fbr=r(VFt,"TFRemBertForSequenceClassification"),VFt.forEach(t),Tbr=r(ASe," (RemBERT model)"),ASe.forEach(t),Mbr=i(te),m4=n(te,"LI",{});var ySe=s(m4);fve=n(ySe,"STRONG",{});var XFt=s(fve);Ebr=r(XFt,"roberta"),XFt.forEach(t),Cbr=r(ySe," \u2014 "),zW=n(ySe,"A",{href:!0});var zFt=s(zW);wbr=r(zFt,"TFRobertaForSequenceClassification"),zFt.forEach(t),Abr=r(ySe," (RoBERTa model)"),ySe.forEach(t),ybr=i(te),g4=n(te,"LI",{});var LSe=s(g4);mve=n(LSe,"STRONG",{});var QFt=s(mve);Lbr=r(QFt,"roformer"),QFt.forEach(t),xbr=r(LSe," \u2014 "),QW=n(LSe,"A",{href:!0});var WFt=s(QW);$br=r(WFt,"TFRoFormerForSequenceClassification"),WFt.forEach(t),kbr=r(LSe," (RoFormer model)"),LSe.forEach(t),Sbr=i(te),h4=n(te,"LI",{});var xSe=s(h4);gve=n(xSe,"STRONG",{});var HFt=s(gve);Rbr=r(HFt,"tapas"),HFt.forEach(t),Bbr=r(xSe," \u2014 "),WW=n(xSe,"A",{href:!0});var UFt=s(WW);Pbr=r(UFt,"TFTapasForSequenceClassification"),UFt.forEach(t),Ibr=r(xSe," (TAPAS model)"),xSe.forEach(t),qbr=i(te),p4=n(te,"LI",{});var $Se=s(p4);hve=n($Se,"STRONG",{});var JFt=s(hve);Nbr=r(JFt,"transfo-xl"),JFt.forEach(t),jbr=r($Se," \u2014 "),HW=n($Se,"A",{href:!0});var YFt=s(HW);Dbr=r(YFt,"TFTransfoXLForSequenceClassification"),YFt.forEach(t),Gbr=r($Se," (Transformer-XL model)"),$Se.forEach(t),Obr=i(te),u4=n(te,"LI",{});var kSe=s(u4);pve=n(kSe,"STRONG",{});var KFt=s(pve);Vbr=r(KFt,"xlm"),KFt.forEach(t),Xbr=r(kSe," \u2014 "),UW=n(kSe,"A",{href:!0});var ZFt=s(UW);zbr=r(ZFt,"TFXLMForSequenceClassification"),ZFt.forEach(t),Qbr=r(kSe," (XLM model)"),kSe.forEach(t),Wbr=i(te),_4=n(te,"LI",{});var SSe=s(_4);uve=n(SSe,"STRONG",{});var eTt=s(uve);Hbr=r(eTt,"xlm-roberta"),eTt.forEach(t),Ubr=r(SSe," \u2014 "),JW=n(SSe,"A",{href:!0});var oTt=s(JW);Jbr=r(oTt,"TFXLMRobertaForSequenceClassification"),oTt.forEach(t),Ybr=r(SSe," (XLM-RoBERTa model)"),SSe.forEach(t),Kbr=i(te),b4=n(te,"LI",{});var RSe=s(b4);_ve=n(RSe,"STRONG",{});var rTt=s(_ve);Zbr=r(rTt,"xlnet"),rTt.forEach(t),evr=r(RSe," \u2014 "),YW=n(RSe,"A",{href:!0});var tTt=s(YW);ovr=r(tTt,"TFXLNetForSequenceClassification"),tTt.forEach(t),rvr=r(RSe," (XLNet model)"),RSe.forEach(t),te.forEach(t),tvr=i(El),T(v4.$$.fragment,El),El.forEach(t),Ml.forEach(t),aqe=i(f),nc=n(f,"H2",{class:!0});var cje=s(nc);F4=n(cje,"A",{id:!0,class:!0,href:!0});var aTt=s(F4);bve=n(aTt,"SPAN",{});var nTt=s(bve);T(gL.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),avr=i(cje),vve=n(cje,"SPAN",{});var sTt=s(vve);nvr=r(sTt,"TFAutoModelForMultipleChoice"),sTt.forEach(t),cje.forEach(t),nqe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(hL.$$.fragment,Cl),svr=i(Cl),sc=n(Cl,"P",{});var hZ=s(sc);lvr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KW=n(hZ,"A",{href:!0});var lTt=s(KW);ivr=r(lTt,"from_pretrained()"),lTt.forEach(t),dvr=r(hZ," class method or the "),ZW=n(hZ,"A",{href:!0});var iTt=s(ZW);cvr=r(iTt,"from_config()"),iTt.forEach(t),fvr=r(hZ,` class
method.`),hZ.forEach(t),mvr=i(Cl),pL=n(Cl,"P",{});var fje=s(pL);gvr=r(fje,"This class cannot be instantiated directly using "),Fve=n(fje,"CODE",{});var dTt=s(Fve);hvr=r(dTt,"__init__()"),dTt.forEach(t),pvr=r(fje," (throws an error)."),fje.forEach(t),uvr=i(Cl),St=n(Cl,"DIV",{class:!0});var dA=s(St);T(uL.$$.fragment,dA),_vr=i(dA),Tve=n(dA,"P",{});var cTt=s(Tve);bvr=r(cTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cTt.forEach(t),vvr=i(dA),lc=n(dA,"P",{});var pZ=s(lc);Fvr=r(pZ,`Note:
Loading a model from its configuration file does `),Mve=n(pZ,"STRONG",{});var fTt=s(Mve);Tvr=r(fTt,"not"),fTt.forEach(t),Mvr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(pZ,"A",{href:!0});var mTt=s(eH);Evr=r(mTt,"from_pretrained()"),mTt.forEach(t),Cvr=r(pZ," to load the model weights."),pZ.forEach(t),wvr=i(dA),T(T4.$$.fragment,dA),dA.forEach(t),Avr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(_L.$$.fragment,wl),yvr=i(wl),Eve=n(wl,"P",{});var gTt=s(Eve);Lvr=r(gTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gTt.forEach(t),xvr=i(wl),sn=n(wl,"P",{});var cA=s(sn);$vr=r(cA,"The model class to instantiate is selected based on the "),Cve=n(cA,"CODE",{});var hTt=s(Cve);kvr=r(hTt,"model_type"),hTt.forEach(t),Svr=r(cA,` property of the config object (either
passed as an argument or loaded from `),wve=n(cA,"CODE",{});var pTt=s(wve);Rvr=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),Bvr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(cA,"CODE",{});var uTt=s(Ave);Pvr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),Ivr=r(cA,":"),cA.forEach(t),qvr=i(wl),he=n(wl,"UL",{});var ue=s(he);M4=n(ue,"LI",{});var BSe=s(M4);yve=n(BSe,"STRONG",{});var _Tt=s(yve);Nvr=r(_Tt,"albert"),_Tt.forEach(t),jvr=r(BSe," \u2014 "),oH=n(BSe,"A",{href:!0});var bTt=s(oH);Dvr=r(bTt,"TFAlbertForMultipleChoice"),bTt.forEach(t),Gvr=r(BSe," (ALBERT model)"),BSe.forEach(t),Ovr=i(ue),E4=n(ue,"LI",{});var PSe=s(E4);Lve=n(PSe,"STRONG",{});var vTt=s(Lve);Vvr=r(vTt,"bert"),vTt.forEach(t),Xvr=r(PSe," \u2014 "),rH=n(PSe,"A",{href:!0});var FTt=s(rH);zvr=r(FTt,"TFBertForMultipleChoice"),FTt.forEach(t),Qvr=r(PSe," (BERT model)"),PSe.forEach(t),Wvr=i(ue),C4=n(ue,"LI",{});var ISe=s(C4);xve=n(ISe,"STRONG",{});var TTt=s(xve);Hvr=r(TTt,"camembert"),TTt.forEach(t),Uvr=r(ISe," \u2014 "),tH=n(ISe,"A",{href:!0});var MTt=s(tH);Jvr=r(MTt,"TFCamembertForMultipleChoice"),MTt.forEach(t),Yvr=r(ISe," (CamemBERT model)"),ISe.forEach(t),Kvr=i(ue),w4=n(ue,"LI",{});var qSe=s(w4);$ve=n(qSe,"STRONG",{});var ETt=s($ve);Zvr=r(ETt,"convbert"),ETt.forEach(t),eFr=r(qSe," \u2014 "),aH=n(qSe,"A",{href:!0});var CTt=s(aH);oFr=r(CTt,"TFConvBertForMultipleChoice"),CTt.forEach(t),rFr=r(qSe," (ConvBERT model)"),qSe.forEach(t),tFr=i(ue),A4=n(ue,"LI",{});var NSe=s(A4);kve=n(NSe,"STRONG",{});var wTt=s(kve);aFr=r(wTt,"distilbert"),wTt.forEach(t),nFr=r(NSe," \u2014 "),nH=n(NSe,"A",{href:!0});var ATt=s(nH);sFr=r(ATt,"TFDistilBertForMultipleChoice"),ATt.forEach(t),lFr=r(NSe," (DistilBERT model)"),NSe.forEach(t),iFr=i(ue),y4=n(ue,"LI",{});var jSe=s(y4);Sve=n(jSe,"STRONG",{});var yTt=s(Sve);dFr=r(yTt,"electra"),yTt.forEach(t),cFr=r(jSe," \u2014 "),sH=n(jSe,"A",{href:!0});var LTt=s(sH);fFr=r(LTt,"TFElectraForMultipleChoice"),LTt.forEach(t),mFr=r(jSe," (ELECTRA model)"),jSe.forEach(t),gFr=i(ue),L4=n(ue,"LI",{});var DSe=s(L4);Rve=n(DSe,"STRONG",{});var xTt=s(Rve);hFr=r(xTt,"flaubert"),xTt.forEach(t),pFr=r(DSe," \u2014 "),lH=n(DSe,"A",{href:!0});var $Tt=s(lH);uFr=r($Tt,"TFFlaubertForMultipleChoice"),$Tt.forEach(t),_Fr=r(DSe," (FlauBERT model)"),DSe.forEach(t),bFr=i(ue),x4=n(ue,"LI",{});var GSe=s(x4);Bve=n(GSe,"STRONG",{});var kTt=s(Bve);vFr=r(kTt,"funnel"),kTt.forEach(t),FFr=r(GSe," \u2014 "),iH=n(GSe,"A",{href:!0});var STt=s(iH);TFr=r(STt,"TFFunnelForMultipleChoice"),STt.forEach(t),MFr=r(GSe," (Funnel Transformer model)"),GSe.forEach(t),EFr=i(ue),$4=n(ue,"LI",{});var OSe=s($4);Pve=n(OSe,"STRONG",{});var RTt=s(Pve);CFr=r(RTt,"longformer"),RTt.forEach(t),wFr=r(OSe," \u2014 "),dH=n(OSe,"A",{href:!0});var BTt=s(dH);AFr=r(BTt,"TFLongformerForMultipleChoice"),BTt.forEach(t),yFr=r(OSe," (Longformer model)"),OSe.forEach(t),LFr=i(ue),k4=n(ue,"LI",{});var VSe=s(k4);Ive=n(VSe,"STRONG",{});var PTt=s(Ive);xFr=r(PTt,"mobilebert"),PTt.forEach(t),$Fr=r(VSe," \u2014 "),cH=n(VSe,"A",{href:!0});var ITt=s(cH);kFr=r(ITt,"TFMobileBertForMultipleChoice"),ITt.forEach(t),SFr=r(VSe," (MobileBERT model)"),VSe.forEach(t),RFr=i(ue),S4=n(ue,"LI",{});var XSe=s(S4);qve=n(XSe,"STRONG",{});var qTt=s(qve);BFr=r(qTt,"mpnet"),qTt.forEach(t),PFr=r(XSe," \u2014 "),fH=n(XSe,"A",{href:!0});var NTt=s(fH);IFr=r(NTt,"TFMPNetForMultipleChoice"),NTt.forEach(t),qFr=r(XSe," (MPNet model)"),XSe.forEach(t),NFr=i(ue),R4=n(ue,"LI",{});var zSe=s(R4);Nve=n(zSe,"STRONG",{});var jTt=s(Nve);jFr=r(jTt,"rembert"),jTt.forEach(t),DFr=r(zSe," \u2014 "),mH=n(zSe,"A",{href:!0});var DTt=s(mH);GFr=r(DTt,"TFRemBertForMultipleChoice"),DTt.forEach(t),OFr=r(zSe," (RemBERT model)"),zSe.forEach(t),VFr=i(ue),B4=n(ue,"LI",{});var QSe=s(B4);jve=n(QSe,"STRONG",{});var GTt=s(jve);XFr=r(GTt,"roberta"),GTt.forEach(t),zFr=r(QSe," \u2014 "),gH=n(QSe,"A",{href:!0});var OTt=s(gH);QFr=r(OTt,"TFRobertaForMultipleChoice"),OTt.forEach(t),WFr=r(QSe," (RoBERTa model)"),QSe.forEach(t),HFr=i(ue),P4=n(ue,"LI",{});var WSe=s(P4);Dve=n(WSe,"STRONG",{});var VTt=s(Dve);UFr=r(VTt,"roformer"),VTt.forEach(t),JFr=r(WSe," \u2014 "),hH=n(WSe,"A",{href:!0});var XTt=s(hH);YFr=r(XTt,"TFRoFormerForMultipleChoice"),XTt.forEach(t),KFr=r(WSe," (RoFormer model)"),WSe.forEach(t),ZFr=i(ue),I4=n(ue,"LI",{});var HSe=s(I4);Gve=n(HSe,"STRONG",{});var zTt=s(Gve);eTr=r(zTt,"xlm"),zTt.forEach(t),oTr=r(HSe," \u2014 "),pH=n(HSe,"A",{href:!0});var QTt=s(pH);rTr=r(QTt,"TFXLMForMultipleChoice"),QTt.forEach(t),tTr=r(HSe," (XLM model)"),HSe.forEach(t),aTr=i(ue),q4=n(ue,"LI",{});var USe=s(q4);Ove=n(USe,"STRONG",{});var WTt=s(Ove);nTr=r(WTt,"xlm-roberta"),WTt.forEach(t),sTr=r(USe," \u2014 "),uH=n(USe,"A",{href:!0});var HTt=s(uH);lTr=r(HTt,"TFXLMRobertaForMultipleChoice"),HTt.forEach(t),iTr=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),dTr=i(ue),N4=n(ue,"LI",{});var JSe=s(N4);Vve=n(JSe,"STRONG",{});var UTt=s(Vve);cTr=r(UTt,"xlnet"),UTt.forEach(t),fTr=r(JSe," \u2014 "),_H=n(JSe,"A",{href:!0});var JTt=s(_H);mTr=r(JTt,"TFXLNetForMultipleChoice"),JTt.forEach(t),gTr=r(JSe," (XLNet model)"),JSe.forEach(t),ue.forEach(t),hTr=i(wl),T(j4.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),sqe=i(f),ic=n(f,"H2",{class:!0});var mje=s(ic);D4=n(mje,"A",{id:!0,class:!0,href:!0});var YTt=s(D4);Xve=n(YTt,"SPAN",{});var KTt=s(Xve);T(bL.$$.fragment,KTt),KTt.forEach(t),YTt.forEach(t),pTr=i(mje),zve=n(mje,"SPAN",{});var ZTt=s(zve);uTr=r(ZTt,"TFAutoModelForNextSentencePrediction"),ZTt.forEach(t),mje.forEach(t),lqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(vL.$$.fragment,Al),_Tr=i(Al),dc=n(Al,"P",{});var uZ=s(dc);bTr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),bH=n(uZ,"A",{href:!0});var e7t=s(bH);vTr=r(e7t,"from_pretrained()"),e7t.forEach(t),FTr=r(uZ," class method or the "),vH=n(uZ,"A",{href:!0});var o7t=s(vH);TTr=r(o7t,"from_config()"),o7t.forEach(t),MTr=r(uZ,` class
method.`),uZ.forEach(t),ETr=i(Al),FL=n(Al,"P",{});var gje=s(FL);CTr=r(gje,"This class cannot be instantiated directly using "),Qve=n(gje,"CODE",{});var r7t=s(Qve);wTr=r(r7t,"__init__()"),r7t.forEach(t),ATr=r(gje," (throws an error)."),gje.forEach(t),yTr=i(Al),Rt=n(Al,"DIV",{class:!0});var fA=s(Rt);T(TL.$$.fragment,fA),LTr=i(fA),Wve=n(fA,"P",{});var t7t=s(Wve);xTr=r(t7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t7t.forEach(t),$Tr=i(fA),cc=n(fA,"P",{});var _Z=s(cc);kTr=r(_Z,`Note:
Loading a model from its configuration file does `),Hve=n(_Z,"STRONG",{});var a7t=s(Hve);STr=r(a7t,"not"),a7t.forEach(t),RTr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(_Z,"A",{href:!0});var n7t=s(FH);BTr=r(n7t,"from_pretrained()"),n7t.forEach(t),PTr=r(_Z," to load the model weights."),_Z.forEach(t),ITr=i(fA),T(G4.$$.fragment,fA),fA.forEach(t),qTr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(ML.$$.fragment,yl),NTr=i(yl),Uve=n(yl,"P",{});var s7t=s(Uve);jTr=r(s7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),s7t.forEach(t),DTr=i(yl),ln=n(yl,"P",{});var mA=s(ln);GTr=r(mA,"The model class to instantiate is selected based on the "),Jve=n(mA,"CODE",{});var l7t=s(Jve);OTr=r(l7t,"model_type"),l7t.forEach(t),VTr=r(mA,` property of the config object (either
passed as an argument or loaded from `),Yve=n(mA,"CODE",{});var i7t=s(Yve);XTr=r(i7t,"pretrained_model_name_or_path"),i7t.forEach(t),zTr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(mA,"CODE",{});var d7t=s(Kve);QTr=r(d7t,"pretrained_model_name_or_path"),d7t.forEach(t),WTr=r(mA,":"),mA.forEach(t),HTr=i(yl),EL=n(yl,"UL",{});var hje=s(EL);O4=n(hje,"LI",{});var YSe=s(O4);Zve=n(YSe,"STRONG",{});var c7t=s(Zve);UTr=r(c7t,"bert"),c7t.forEach(t),JTr=r(YSe," \u2014 "),TH=n(YSe,"A",{href:!0});var f7t=s(TH);YTr=r(f7t,"TFBertForNextSentencePrediction"),f7t.forEach(t),KTr=r(YSe," (BERT model)"),YSe.forEach(t),ZTr=i(hje),V4=n(hje,"LI",{});var KSe=s(V4);eFe=n(KSe,"STRONG",{});var m7t=s(eFe);e7r=r(m7t,"mobilebert"),m7t.forEach(t),o7r=r(KSe," \u2014 "),MH=n(KSe,"A",{href:!0});var g7t=s(MH);r7r=r(g7t,"TFMobileBertForNextSentencePrediction"),g7t.forEach(t),t7r=r(KSe," (MobileBERT model)"),KSe.forEach(t),hje.forEach(t),a7r=i(yl),T(X4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),iqe=i(f),fc=n(f,"H2",{class:!0});var pje=s(fc);z4=n(pje,"A",{id:!0,class:!0,href:!0});var h7t=s(z4);oFe=n(h7t,"SPAN",{});var p7t=s(oFe);T(CL.$$.fragment,p7t),p7t.forEach(t),h7t.forEach(t),n7r=i(pje),rFe=n(pje,"SPAN",{});var u7t=s(rFe);s7r=r(u7t,"TFAutoModelForTableQuestionAnswering"),u7t.forEach(t),pje.forEach(t),dqe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(wL.$$.fragment,Ll),l7r=i(Ll),mc=n(Ll,"P",{});var bZ=s(mc);i7r=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EH=n(bZ,"A",{href:!0});var _7t=s(EH);d7r=r(_7t,"from_pretrained()"),_7t.forEach(t),c7r=r(bZ," class method or the "),CH=n(bZ,"A",{href:!0});var b7t=s(CH);f7r=r(b7t,"from_config()"),b7t.forEach(t),m7r=r(bZ,` class
method.`),bZ.forEach(t),g7r=i(Ll),AL=n(Ll,"P",{});var uje=s(AL);h7r=r(uje,"This class cannot be instantiated directly using "),tFe=n(uje,"CODE",{});var v7t=s(tFe);p7r=r(v7t,"__init__()"),v7t.forEach(t),u7r=r(uje," (throws an error)."),uje.forEach(t),_7r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var gA=s(Bt);T(yL.$$.fragment,gA),b7r=i(gA),aFe=n(gA,"P",{});var F7t=s(aFe);v7r=r(F7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F7t.forEach(t),F7r=i(gA),gc=n(gA,"P",{});var vZ=s(gc);T7r=r(vZ,`Note:
Loading a model from its configuration file does `),nFe=n(vZ,"STRONG",{});var T7t=s(nFe);M7r=r(T7t,"not"),T7t.forEach(t),E7r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(vZ,"A",{href:!0});var M7t=s(wH);C7r=r(M7t,"from_pretrained()"),M7t.forEach(t),w7r=r(vZ," to load the model weights."),vZ.forEach(t),A7r=i(gA),T(Q4.$$.fragment,gA),gA.forEach(t),y7r=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(LL.$$.fragment,xl),L7r=i(xl),sFe=n(xl,"P",{});var E7t=s(sFe);x7r=r(E7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E7t.forEach(t),$7r=i(xl),dn=n(xl,"P",{});var hA=s(dn);k7r=r(hA,"The model class to instantiate is selected based on the "),lFe=n(hA,"CODE",{});var C7t=s(lFe);S7r=r(C7t,"model_type"),C7t.forEach(t),R7r=r(hA,` property of the config object (either
passed as an argument or loaded from `),iFe=n(hA,"CODE",{});var w7t=s(iFe);B7r=r(w7t,"pretrained_model_name_or_path"),w7t.forEach(t),P7r=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(hA,"CODE",{});var A7t=s(dFe);I7r=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),q7r=r(hA,":"),hA.forEach(t),N7r=i(xl),cFe=n(xl,"UL",{});var y7t=s(cFe);W4=n(y7t,"LI",{});var ZSe=s(W4);fFe=n(ZSe,"STRONG",{});var L7t=s(fFe);j7r=r(L7t,"tapas"),L7t.forEach(t),D7r=r(ZSe," \u2014 "),AH=n(ZSe,"A",{href:!0});var x7t=s(AH);G7r=r(x7t,"TFTapasForQuestionAnswering"),x7t.forEach(t),O7r=r(ZSe," (TAPAS model)"),ZSe.forEach(t),y7t.forEach(t),V7r=i(xl),T(H4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),cqe=i(f),hc=n(f,"H2",{class:!0});var _je=s(hc);U4=n(_je,"A",{id:!0,class:!0,href:!0});var $7t=s(U4);mFe=n($7t,"SPAN",{});var k7t=s(mFe);T(xL.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),X7r=i(_je),gFe=n(_je,"SPAN",{});var S7t=s(gFe);z7r=r(S7t,"TFAutoModelForTokenClassification"),S7t.forEach(t),_je.forEach(t),fqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T($L.$$.fragment,$l),Q7r=i($l),pc=n($l,"P",{});var FZ=s(pc);W7r=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yH=n(FZ,"A",{href:!0});var R7t=s(yH);H7r=r(R7t,"from_pretrained()"),R7t.forEach(t),U7r=r(FZ," class method or the "),LH=n(FZ,"A",{href:!0});var B7t=s(LH);J7r=r(B7t,"from_config()"),B7t.forEach(t),Y7r=r(FZ,` class
method.`),FZ.forEach(t),K7r=i($l),kL=n($l,"P",{});var bje=s(kL);Z7r=r(bje,"This class cannot be instantiated directly using "),hFe=n(bje,"CODE",{});var P7t=s(hFe);e9r=r(P7t,"__init__()"),P7t.forEach(t),o9r=r(bje," (throws an error)."),bje.forEach(t),r9r=i($l),Pt=n($l,"DIV",{class:!0});var pA=s(Pt);T(SL.$$.fragment,pA),t9r=i(pA),pFe=n(pA,"P",{});var I7t=s(pFe);a9r=r(I7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I7t.forEach(t),n9r=i(pA),uc=n(pA,"P",{});var TZ=s(uc);s9r=r(TZ,`Note:
Loading a model from its configuration file does `),uFe=n(TZ,"STRONG",{});var q7t=s(uFe);l9r=r(q7t,"not"),q7t.forEach(t),i9r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(TZ,"A",{href:!0});var N7t=s(xH);d9r=r(N7t,"from_pretrained()"),N7t.forEach(t),c9r=r(TZ," to load the model weights."),TZ.forEach(t),f9r=i(pA),T(J4.$$.fragment,pA),pA.forEach(t),m9r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(RL.$$.fragment,kl),g9r=i(kl),_Fe=n(kl,"P",{});var j7t=s(_Fe);h9r=r(j7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j7t.forEach(t),p9r=i(kl),cn=n(kl,"P",{});var uA=s(cn);u9r=r(uA,"The model class to instantiate is selected based on the "),bFe=n(uA,"CODE",{});var D7t=s(bFe);_9r=r(D7t,"model_type"),D7t.forEach(t),b9r=r(uA,` property of the config object (either
passed as an argument or loaded from `),vFe=n(uA,"CODE",{});var G7t=s(vFe);v9r=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),F9r=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(uA,"CODE",{});var O7t=s(FFe);T9r=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),M9r=r(uA,":"),uA.forEach(t),E9r=i(kl),de=n(kl,"UL",{});var me=s(de);Y4=n(me,"LI",{});var eRe=s(Y4);TFe=n(eRe,"STRONG",{});var V7t=s(TFe);C9r=r(V7t,"albert"),V7t.forEach(t),w9r=r(eRe," \u2014 "),$H=n(eRe,"A",{href:!0});var X7t=s($H);A9r=r(X7t,"TFAlbertForTokenClassification"),X7t.forEach(t),y9r=r(eRe," (ALBERT model)"),eRe.forEach(t),L9r=i(me),K4=n(me,"LI",{});var oRe=s(K4);MFe=n(oRe,"STRONG",{});var z7t=s(MFe);x9r=r(z7t,"bert"),z7t.forEach(t),$9r=r(oRe," \u2014 "),kH=n(oRe,"A",{href:!0});var Q7t=s(kH);k9r=r(Q7t,"TFBertForTokenClassification"),Q7t.forEach(t),S9r=r(oRe," (BERT model)"),oRe.forEach(t),R9r=i(me),Z4=n(me,"LI",{});var rRe=s(Z4);EFe=n(rRe,"STRONG",{});var W7t=s(EFe);B9r=r(W7t,"camembert"),W7t.forEach(t),P9r=r(rRe," \u2014 "),SH=n(rRe,"A",{href:!0});var H7t=s(SH);I9r=r(H7t,"TFCamembertForTokenClassification"),H7t.forEach(t),q9r=r(rRe," (CamemBERT model)"),rRe.forEach(t),N9r=i(me),eE=n(me,"LI",{});var tRe=s(eE);CFe=n(tRe,"STRONG",{});var U7t=s(CFe);j9r=r(U7t,"convbert"),U7t.forEach(t),D9r=r(tRe," \u2014 "),RH=n(tRe,"A",{href:!0});var J7t=s(RH);G9r=r(J7t,"TFConvBertForTokenClassification"),J7t.forEach(t),O9r=r(tRe," (ConvBERT model)"),tRe.forEach(t),V9r=i(me),oE=n(me,"LI",{});var aRe=s(oE);wFe=n(aRe,"STRONG",{});var Y7t=s(wFe);X9r=r(Y7t,"deberta"),Y7t.forEach(t),z9r=r(aRe," \u2014 "),BH=n(aRe,"A",{href:!0});var K7t=s(BH);Q9r=r(K7t,"TFDebertaForTokenClassification"),K7t.forEach(t),W9r=r(aRe," (DeBERTa model)"),aRe.forEach(t),H9r=i(me),rE=n(me,"LI",{});var nRe=s(rE);AFe=n(nRe,"STRONG",{});var Z7t=s(AFe);U9r=r(Z7t,"deberta-v2"),Z7t.forEach(t),J9r=r(nRe," \u2014 "),PH=n(nRe,"A",{href:!0});var e9t=s(PH);Y9r=r(e9t,"TFDebertaV2ForTokenClassification"),e9t.forEach(t),K9r=r(nRe," (DeBERTa-v2 model)"),nRe.forEach(t),Z9r=i(me),tE=n(me,"LI",{});var sRe=s(tE);yFe=n(sRe,"STRONG",{});var o9t=s(yFe);eMr=r(o9t,"distilbert"),o9t.forEach(t),oMr=r(sRe," \u2014 "),IH=n(sRe,"A",{href:!0});var r9t=s(IH);rMr=r(r9t,"TFDistilBertForTokenClassification"),r9t.forEach(t),tMr=r(sRe," (DistilBERT model)"),sRe.forEach(t),aMr=i(me),aE=n(me,"LI",{});var lRe=s(aE);LFe=n(lRe,"STRONG",{});var t9t=s(LFe);nMr=r(t9t,"electra"),t9t.forEach(t),sMr=r(lRe," \u2014 "),qH=n(lRe,"A",{href:!0});var a9t=s(qH);lMr=r(a9t,"TFElectraForTokenClassification"),a9t.forEach(t),iMr=r(lRe," (ELECTRA model)"),lRe.forEach(t),dMr=i(me),nE=n(me,"LI",{});var iRe=s(nE);xFe=n(iRe,"STRONG",{});var n9t=s(xFe);cMr=r(n9t,"flaubert"),n9t.forEach(t),fMr=r(iRe," \u2014 "),NH=n(iRe,"A",{href:!0});var s9t=s(NH);mMr=r(s9t,"TFFlaubertForTokenClassification"),s9t.forEach(t),gMr=r(iRe," (FlauBERT model)"),iRe.forEach(t),hMr=i(me),sE=n(me,"LI",{});var dRe=s(sE);$Fe=n(dRe,"STRONG",{});var l9t=s($Fe);pMr=r(l9t,"funnel"),l9t.forEach(t),uMr=r(dRe," \u2014 "),jH=n(dRe,"A",{href:!0});var i9t=s(jH);_Mr=r(i9t,"TFFunnelForTokenClassification"),i9t.forEach(t),bMr=r(dRe," (Funnel Transformer model)"),dRe.forEach(t),vMr=i(me),lE=n(me,"LI",{});var cRe=s(lE);kFe=n(cRe,"STRONG",{});var d9t=s(kFe);FMr=r(d9t,"layoutlm"),d9t.forEach(t),TMr=r(cRe," \u2014 "),DH=n(cRe,"A",{href:!0});var c9t=s(DH);MMr=r(c9t,"TFLayoutLMForTokenClassification"),c9t.forEach(t),EMr=r(cRe," (LayoutLM model)"),cRe.forEach(t),CMr=i(me),iE=n(me,"LI",{});var fRe=s(iE);SFe=n(fRe,"STRONG",{});var f9t=s(SFe);wMr=r(f9t,"longformer"),f9t.forEach(t),AMr=r(fRe," \u2014 "),GH=n(fRe,"A",{href:!0});var m9t=s(GH);yMr=r(m9t,"TFLongformerForTokenClassification"),m9t.forEach(t),LMr=r(fRe," (Longformer model)"),fRe.forEach(t),xMr=i(me),dE=n(me,"LI",{});var mRe=s(dE);RFe=n(mRe,"STRONG",{});var g9t=s(RFe);$Mr=r(g9t,"mobilebert"),g9t.forEach(t),kMr=r(mRe," \u2014 "),OH=n(mRe,"A",{href:!0});var h9t=s(OH);SMr=r(h9t,"TFMobileBertForTokenClassification"),h9t.forEach(t),RMr=r(mRe," (MobileBERT model)"),mRe.forEach(t),BMr=i(me),cE=n(me,"LI",{});var gRe=s(cE);BFe=n(gRe,"STRONG",{});var p9t=s(BFe);PMr=r(p9t,"mpnet"),p9t.forEach(t),IMr=r(gRe," \u2014 "),VH=n(gRe,"A",{href:!0});var u9t=s(VH);qMr=r(u9t,"TFMPNetForTokenClassification"),u9t.forEach(t),NMr=r(gRe," (MPNet model)"),gRe.forEach(t),jMr=i(me),fE=n(me,"LI",{});var hRe=s(fE);PFe=n(hRe,"STRONG",{});var _9t=s(PFe);DMr=r(_9t,"rembert"),_9t.forEach(t),GMr=r(hRe," \u2014 "),XH=n(hRe,"A",{href:!0});var b9t=s(XH);OMr=r(b9t,"TFRemBertForTokenClassification"),b9t.forEach(t),VMr=r(hRe," (RemBERT model)"),hRe.forEach(t),XMr=i(me),mE=n(me,"LI",{});var pRe=s(mE);IFe=n(pRe,"STRONG",{});var v9t=s(IFe);zMr=r(v9t,"roberta"),v9t.forEach(t),QMr=r(pRe," \u2014 "),zH=n(pRe,"A",{href:!0});var F9t=s(zH);WMr=r(F9t,"TFRobertaForTokenClassification"),F9t.forEach(t),HMr=r(pRe," (RoBERTa model)"),pRe.forEach(t),UMr=i(me),gE=n(me,"LI",{});var uRe=s(gE);qFe=n(uRe,"STRONG",{});var T9t=s(qFe);JMr=r(T9t,"roformer"),T9t.forEach(t),YMr=r(uRe," \u2014 "),QH=n(uRe,"A",{href:!0});var M9t=s(QH);KMr=r(M9t,"TFRoFormerForTokenClassification"),M9t.forEach(t),ZMr=r(uRe," (RoFormer model)"),uRe.forEach(t),e4r=i(me),hE=n(me,"LI",{});var _Re=s(hE);NFe=n(_Re,"STRONG",{});var E9t=s(NFe);o4r=r(E9t,"xlm"),E9t.forEach(t),r4r=r(_Re," \u2014 "),WH=n(_Re,"A",{href:!0});var C9t=s(WH);t4r=r(C9t,"TFXLMForTokenClassification"),C9t.forEach(t),a4r=r(_Re," (XLM model)"),_Re.forEach(t),n4r=i(me),pE=n(me,"LI",{});var bRe=s(pE);jFe=n(bRe,"STRONG",{});var w9t=s(jFe);s4r=r(w9t,"xlm-roberta"),w9t.forEach(t),l4r=r(bRe," \u2014 "),HH=n(bRe,"A",{href:!0});var A9t=s(HH);i4r=r(A9t,"TFXLMRobertaForTokenClassification"),A9t.forEach(t),d4r=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),c4r=i(me),uE=n(me,"LI",{});var vRe=s(uE);DFe=n(vRe,"STRONG",{});var y9t=s(DFe);f4r=r(y9t,"xlnet"),y9t.forEach(t),m4r=r(vRe," \u2014 "),UH=n(vRe,"A",{href:!0});var L9t=s(UH);g4r=r(L9t,"TFXLNetForTokenClassification"),L9t.forEach(t),h4r=r(vRe," (XLNet model)"),vRe.forEach(t),me.forEach(t),p4r=i(kl),T(_E.$$.fragment,kl),kl.forEach(t),$l.forEach(t),mqe=i(f),_c=n(f,"H2",{class:!0});var vje=s(_c);bE=n(vje,"A",{id:!0,class:!0,href:!0});var x9t=s(bE);GFe=n(x9t,"SPAN",{});var $9t=s(GFe);T(BL.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),u4r=i(vje),OFe=n(vje,"SPAN",{});var k9t=s(OFe);_4r=r(k9t,"TFAutoModelForQuestionAnswering"),k9t.forEach(t),vje.forEach(t),gqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(PL.$$.fragment,Sl),b4r=i(Sl),bc=n(Sl,"P",{});var MZ=s(bc);v4r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JH=n(MZ,"A",{href:!0});var S9t=s(JH);F4r=r(S9t,"from_pretrained()"),S9t.forEach(t),T4r=r(MZ," class method or the "),YH=n(MZ,"A",{href:!0});var R9t=s(YH);M4r=r(R9t,"from_config()"),R9t.forEach(t),E4r=r(MZ,` class
method.`),MZ.forEach(t),C4r=i(Sl),IL=n(Sl,"P",{});var Fje=s(IL);w4r=r(Fje,"This class cannot be instantiated directly using "),VFe=n(Fje,"CODE",{});var B9t=s(VFe);A4r=r(B9t,"__init__()"),B9t.forEach(t),y4r=r(Fje," (throws an error)."),Fje.forEach(t),L4r=i(Sl),It=n(Sl,"DIV",{class:!0});var _A=s(It);T(qL.$$.fragment,_A),x4r=i(_A),XFe=n(_A,"P",{});var P9t=s(XFe);$4r=r(P9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),P9t.forEach(t),k4r=i(_A),vc=n(_A,"P",{});var EZ=s(vc);S4r=r(EZ,`Note:
Loading a model from its configuration file does `),zFe=n(EZ,"STRONG",{});var I9t=s(zFe);R4r=r(I9t,"not"),I9t.forEach(t),B4r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(EZ,"A",{href:!0});var q9t=s(KH);P4r=r(q9t,"from_pretrained()"),q9t.forEach(t),I4r=r(EZ," to load the model weights."),EZ.forEach(t),q4r=i(_A),T(vE.$$.fragment,_A),_A.forEach(t),N4r=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(NL.$$.fragment,Rl),j4r=i(Rl),QFe=n(Rl,"P",{});var N9t=s(QFe);D4r=r(N9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N9t.forEach(t),G4r=i(Rl),fn=n(Rl,"P",{});var bA=s(fn);O4r=r(bA,"The model class to instantiate is selected based on the "),WFe=n(bA,"CODE",{});var j9t=s(WFe);V4r=r(j9t,"model_type"),j9t.forEach(t),X4r=r(bA,` property of the config object (either
passed as an argument or loaded from `),HFe=n(bA,"CODE",{});var D9t=s(HFe);z4r=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),Q4r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UFe=n(bA,"CODE",{});var G9t=s(UFe);W4r=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),H4r=r(bA,":"),bA.forEach(t),U4r=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);FE=n(ge,"LI",{});var FRe=s(FE);JFe=n(FRe,"STRONG",{});var O9t=s(JFe);J4r=r(O9t,"albert"),O9t.forEach(t),Y4r=r(FRe," \u2014 "),ZH=n(FRe,"A",{href:!0});var V9t=s(ZH);K4r=r(V9t,"TFAlbertForQuestionAnswering"),V9t.forEach(t),Z4r=r(FRe," (ALBERT model)"),FRe.forEach(t),eEr=i(ge),TE=n(ge,"LI",{});var TRe=s(TE);YFe=n(TRe,"STRONG",{});var X9t=s(YFe);oEr=r(X9t,"bert"),X9t.forEach(t),rEr=r(TRe," \u2014 "),eU=n(TRe,"A",{href:!0});var z9t=s(eU);tEr=r(z9t,"TFBertForQuestionAnswering"),z9t.forEach(t),aEr=r(TRe," (BERT model)"),TRe.forEach(t),nEr=i(ge),ME=n(ge,"LI",{});var MRe=s(ME);KFe=n(MRe,"STRONG",{});var Q9t=s(KFe);sEr=r(Q9t,"camembert"),Q9t.forEach(t),lEr=r(MRe," \u2014 "),oU=n(MRe,"A",{href:!0});var W9t=s(oU);iEr=r(W9t,"TFCamembertForQuestionAnswering"),W9t.forEach(t),dEr=r(MRe," (CamemBERT model)"),MRe.forEach(t),cEr=i(ge),EE=n(ge,"LI",{});var ERe=s(EE);ZFe=n(ERe,"STRONG",{});var H9t=s(ZFe);fEr=r(H9t,"convbert"),H9t.forEach(t),mEr=r(ERe," \u2014 "),rU=n(ERe,"A",{href:!0});var U9t=s(rU);gEr=r(U9t,"TFConvBertForQuestionAnswering"),U9t.forEach(t),hEr=r(ERe," (ConvBERT model)"),ERe.forEach(t),pEr=i(ge),CE=n(ge,"LI",{});var CRe=s(CE);eTe=n(CRe,"STRONG",{});var J9t=s(eTe);uEr=r(J9t,"deberta"),J9t.forEach(t),_Er=r(CRe," \u2014 "),tU=n(CRe,"A",{href:!0});var Y9t=s(tU);bEr=r(Y9t,"TFDebertaForQuestionAnswering"),Y9t.forEach(t),vEr=r(CRe," (DeBERTa model)"),CRe.forEach(t),FEr=i(ge),wE=n(ge,"LI",{});var wRe=s(wE);oTe=n(wRe,"STRONG",{});var K9t=s(oTe);TEr=r(K9t,"deberta-v2"),K9t.forEach(t),MEr=r(wRe," \u2014 "),aU=n(wRe,"A",{href:!0});var Z9t=s(aU);EEr=r(Z9t,"TFDebertaV2ForQuestionAnswering"),Z9t.forEach(t),CEr=r(wRe," (DeBERTa-v2 model)"),wRe.forEach(t),wEr=i(ge),AE=n(ge,"LI",{});var ARe=s(AE);rTe=n(ARe,"STRONG",{});var eMt=s(rTe);AEr=r(eMt,"distilbert"),eMt.forEach(t),yEr=r(ARe," \u2014 "),nU=n(ARe,"A",{href:!0});var oMt=s(nU);LEr=r(oMt,"TFDistilBertForQuestionAnswering"),oMt.forEach(t),xEr=r(ARe," (DistilBERT model)"),ARe.forEach(t),$Er=i(ge),yE=n(ge,"LI",{});var yRe=s(yE);tTe=n(yRe,"STRONG",{});var rMt=s(tTe);kEr=r(rMt,"electra"),rMt.forEach(t),SEr=r(yRe," \u2014 "),sU=n(yRe,"A",{href:!0});var tMt=s(sU);REr=r(tMt,"TFElectraForQuestionAnswering"),tMt.forEach(t),BEr=r(yRe," (ELECTRA model)"),yRe.forEach(t),PEr=i(ge),LE=n(ge,"LI",{});var LRe=s(LE);aTe=n(LRe,"STRONG",{});var aMt=s(aTe);IEr=r(aMt,"flaubert"),aMt.forEach(t),qEr=r(LRe," \u2014 "),lU=n(LRe,"A",{href:!0});var nMt=s(lU);NEr=r(nMt,"TFFlaubertForQuestionAnsweringSimple"),nMt.forEach(t),jEr=r(LRe," (FlauBERT model)"),LRe.forEach(t),DEr=i(ge),xE=n(ge,"LI",{});var xRe=s(xE);nTe=n(xRe,"STRONG",{});var sMt=s(nTe);GEr=r(sMt,"funnel"),sMt.forEach(t),OEr=r(xRe," \u2014 "),iU=n(xRe,"A",{href:!0});var lMt=s(iU);VEr=r(lMt,"TFFunnelForQuestionAnswering"),lMt.forEach(t),XEr=r(xRe," (Funnel Transformer model)"),xRe.forEach(t),zEr=i(ge),$E=n(ge,"LI",{});var $Re=s($E);sTe=n($Re,"STRONG",{});var iMt=s(sTe);QEr=r(iMt,"gptj"),iMt.forEach(t),WEr=r($Re," \u2014 "),dU=n($Re,"A",{href:!0});var dMt=s(dU);HEr=r(dMt,"TFGPTJForQuestionAnswering"),dMt.forEach(t),UEr=r($Re," (GPT-J model)"),$Re.forEach(t),JEr=i(ge),kE=n(ge,"LI",{});var kRe=s(kE);lTe=n(kRe,"STRONG",{});var cMt=s(lTe);YEr=r(cMt,"longformer"),cMt.forEach(t),KEr=r(kRe," \u2014 "),cU=n(kRe,"A",{href:!0});var fMt=s(cU);ZEr=r(fMt,"TFLongformerForQuestionAnswering"),fMt.forEach(t),e5r=r(kRe," (Longformer model)"),kRe.forEach(t),o5r=i(ge),SE=n(ge,"LI",{});var SRe=s(SE);iTe=n(SRe,"STRONG",{});var mMt=s(iTe);r5r=r(mMt,"mobilebert"),mMt.forEach(t),t5r=r(SRe," \u2014 "),fU=n(SRe,"A",{href:!0});var gMt=s(fU);a5r=r(gMt,"TFMobileBertForQuestionAnswering"),gMt.forEach(t),n5r=r(SRe," (MobileBERT model)"),SRe.forEach(t),s5r=i(ge),RE=n(ge,"LI",{});var RRe=s(RE);dTe=n(RRe,"STRONG",{});var hMt=s(dTe);l5r=r(hMt,"mpnet"),hMt.forEach(t),i5r=r(RRe," \u2014 "),mU=n(RRe,"A",{href:!0});var pMt=s(mU);d5r=r(pMt,"TFMPNetForQuestionAnswering"),pMt.forEach(t),c5r=r(RRe," (MPNet model)"),RRe.forEach(t),f5r=i(ge),BE=n(ge,"LI",{});var BRe=s(BE);cTe=n(BRe,"STRONG",{});var uMt=s(cTe);m5r=r(uMt,"rembert"),uMt.forEach(t),g5r=r(BRe," \u2014 "),gU=n(BRe,"A",{href:!0});var _Mt=s(gU);h5r=r(_Mt,"TFRemBertForQuestionAnswering"),_Mt.forEach(t),p5r=r(BRe," (RemBERT model)"),BRe.forEach(t),u5r=i(ge),PE=n(ge,"LI",{});var PRe=s(PE);fTe=n(PRe,"STRONG",{});var bMt=s(fTe);_5r=r(bMt,"roberta"),bMt.forEach(t),b5r=r(PRe," \u2014 "),hU=n(PRe,"A",{href:!0});var vMt=s(hU);v5r=r(vMt,"TFRobertaForQuestionAnswering"),vMt.forEach(t),F5r=r(PRe," (RoBERTa model)"),PRe.forEach(t),T5r=i(ge),IE=n(ge,"LI",{});var IRe=s(IE);mTe=n(IRe,"STRONG",{});var FMt=s(mTe);M5r=r(FMt,"roformer"),FMt.forEach(t),E5r=r(IRe," \u2014 "),pU=n(IRe,"A",{href:!0});var TMt=s(pU);C5r=r(TMt,"TFRoFormerForQuestionAnswering"),TMt.forEach(t),w5r=r(IRe," (RoFormer model)"),IRe.forEach(t),A5r=i(ge),qE=n(ge,"LI",{});var qRe=s(qE);gTe=n(qRe,"STRONG",{});var MMt=s(gTe);y5r=r(MMt,"xlm"),MMt.forEach(t),L5r=r(qRe," \u2014 "),uU=n(qRe,"A",{href:!0});var EMt=s(uU);x5r=r(EMt,"TFXLMForQuestionAnsweringSimple"),EMt.forEach(t),$5r=r(qRe," (XLM model)"),qRe.forEach(t),k5r=i(ge),NE=n(ge,"LI",{});var NRe=s(NE);hTe=n(NRe,"STRONG",{});var CMt=s(hTe);S5r=r(CMt,"xlm-roberta"),CMt.forEach(t),R5r=r(NRe," \u2014 "),_U=n(NRe,"A",{href:!0});var wMt=s(_U);B5r=r(wMt,"TFXLMRobertaForQuestionAnswering"),wMt.forEach(t),P5r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),I5r=i(ge),jE=n(ge,"LI",{});var jRe=s(jE);pTe=n(jRe,"STRONG",{});var AMt=s(pTe);q5r=r(AMt,"xlnet"),AMt.forEach(t),N5r=r(jRe," \u2014 "),bU=n(jRe,"A",{href:!0});var yMt=s(bU);j5r=r(yMt,"TFXLNetForQuestionAnsweringSimple"),yMt.forEach(t),D5r=r(jRe," (XLNet model)"),jRe.forEach(t),ge.forEach(t),G5r=i(Rl),T(DE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),hqe=i(f),Fc=n(f,"H2",{class:!0});var Tje=s(Fc);GE=n(Tje,"A",{id:!0,class:!0,href:!0});var LMt=s(GE);uTe=n(LMt,"SPAN",{});var xMt=s(uTe);T(jL.$$.fragment,xMt),xMt.forEach(t),LMt.forEach(t),O5r=i(Tje),_Te=n(Tje,"SPAN",{});var $Mt=s(_Te);V5r=r($Mt,"TFAutoModelForVision2Seq"),$Mt.forEach(t),Tje.forEach(t),pqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(DL.$$.fragment,Bl),X5r=i(Bl),Tc=n(Bl,"P",{});var CZ=s(Tc);z5r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=n(CZ,"A",{href:!0});var kMt=s(vU);Q5r=r(kMt,"from_pretrained()"),kMt.forEach(t),W5r=r(CZ," class method or the "),FU=n(CZ,"A",{href:!0});var SMt=s(FU);H5r=r(SMt,"from_config()"),SMt.forEach(t),U5r=r(CZ,` class
method.`),CZ.forEach(t),J5r=i(Bl),GL=n(Bl,"P",{});var Mje=s(GL);Y5r=r(Mje,"This class cannot be instantiated directly using "),bTe=n(Mje,"CODE",{});var RMt=s(bTe);K5r=r(RMt,"__init__()"),RMt.forEach(t),Z5r=r(Mje," (throws an error)."),Mje.forEach(t),eCr=i(Bl),qt=n(Bl,"DIV",{class:!0});var vA=s(qt);T(OL.$$.fragment,vA),oCr=i(vA),vTe=n(vA,"P",{});var BMt=s(vTe);rCr=r(BMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BMt.forEach(t),tCr=i(vA),Mc=n(vA,"P",{});var wZ=s(Mc);aCr=r(wZ,`Note:
Loading a model from its configuration file does `),FTe=n(wZ,"STRONG",{});var PMt=s(FTe);nCr=r(PMt,"not"),PMt.forEach(t),sCr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(wZ,"A",{href:!0});var IMt=s(TU);lCr=r(IMt,"from_pretrained()"),IMt.forEach(t),iCr=r(wZ," to load the model weights."),wZ.forEach(t),dCr=i(vA),T(OE.$$.fragment,vA),vA.forEach(t),cCr=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(VL.$$.fragment,Pl),fCr=i(Pl),TTe=n(Pl,"P",{});var qMt=s(TTe);mCr=r(qMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qMt.forEach(t),gCr=i(Pl),mn=n(Pl,"P",{});var FA=s(mn);hCr=r(FA,"The model class to instantiate is selected based on the "),MTe=n(FA,"CODE",{});var NMt=s(MTe);pCr=r(NMt,"model_type"),NMt.forEach(t),uCr=r(FA,` property of the config object (either
passed as an argument or loaded from `),ETe=n(FA,"CODE",{});var jMt=s(ETe);_Cr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),bCr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(FA,"CODE",{});var DMt=s(CTe);vCr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),FCr=r(FA,":"),FA.forEach(t),TCr=i(Pl),wTe=n(Pl,"UL",{});var GMt=s(wTe);VE=n(GMt,"LI",{});var DRe=s(VE);ATe=n(DRe,"STRONG",{});var OMt=s(ATe);MCr=r(OMt,"vision-encoder-decoder"),OMt.forEach(t),ECr=r(DRe," \u2014 "),MU=n(DRe,"A",{href:!0});var VMt=s(MU);CCr=r(VMt,"TFVisionEncoderDecoderModel"),VMt.forEach(t),wCr=r(DRe," (Vision Encoder decoder model)"),DRe.forEach(t),GMt.forEach(t),ACr=i(Pl),T(XE.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),uqe=i(f),Ec=n(f,"H2",{class:!0});var Eje=s(Ec);zE=n(Eje,"A",{id:!0,class:!0,href:!0});var XMt=s(zE);yTe=n(XMt,"SPAN",{});var zMt=s(yTe);T(XL.$$.fragment,zMt),zMt.forEach(t),XMt.forEach(t),yCr=i(Eje),LTe=n(Eje,"SPAN",{});var QMt=s(LTe);LCr=r(QMt,"TFAutoModelForSpeechSeq2Seq"),QMt.forEach(t),Eje.forEach(t),_qe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(zL.$$.fragment,Il),xCr=i(Il),Cc=n(Il,"P",{});var AZ=s(Cc);$Cr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EU=n(AZ,"A",{href:!0});var WMt=s(EU);kCr=r(WMt,"from_pretrained()"),WMt.forEach(t),SCr=r(AZ," class method or the "),CU=n(AZ,"A",{href:!0});var HMt=s(CU);RCr=r(HMt,"from_config()"),HMt.forEach(t),BCr=r(AZ,` class
method.`),AZ.forEach(t),PCr=i(Il),QL=n(Il,"P",{});var Cje=s(QL);ICr=r(Cje,"This class cannot be instantiated directly using "),xTe=n(Cje,"CODE",{});var UMt=s(xTe);qCr=r(UMt,"__init__()"),UMt.forEach(t),NCr=r(Cje," (throws an error)."),Cje.forEach(t),jCr=i(Il),Nt=n(Il,"DIV",{class:!0});var TA=s(Nt);T(WL.$$.fragment,TA),DCr=i(TA),$Te=n(TA,"P",{});var JMt=s($Te);GCr=r(JMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JMt.forEach(t),OCr=i(TA),wc=n(TA,"P",{});var yZ=s(wc);VCr=r(yZ,`Note:
Loading a model from its configuration file does `),kTe=n(yZ,"STRONG",{});var YMt=s(kTe);XCr=r(YMt,"not"),YMt.forEach(t),zCr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(yZ,"A",{href:!0});var KMt=s(wU);QCr=r(KMt,"from_pretrained()"),KMt.forEach(t),WCr=r(yZ," to load the model weights."),yZ.forEach(t),HCr=i(TA),T(QE.$$.fragment,TA),TA.forEach(t),UCr=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(HL.$$.fragment,ql),JCr=i(ql),STe=n(ql,"P",{});var ZMt=s(STe);YCr=r(ZMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZMt.forEach(t),KCr=i(ql),gn=n(ql,"P",{});var MA=s(gn);ZCr=r(MA,"The model class to instantiate is selected based on the "),RTe=n(MA,"CODE",{});var e4t=s(RTe);e3r=r(e4t,"model_type"),e4t.forEach(t),o3r=r(MA,` property of the config object (either
passed as an argument or loaded from `),BTe=n(MA,"CODE",{});var o4t=s(BTe);r3r=r(o4t,"pretrained_model_name_or_path"),o4t.forEach(t),t3r=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(MA,"CODE",{});var r4t=s(PTe);a3r=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),n3r=r(MA,":"),MA.forEach(t),s3r=i(ql),ITe=n(ql,"UL",{});var t4t=s(ITe);WE=n(t4t,"LI",{});var GRe=s(WE);qTe=n(GRe,"STRONG",{});var a4t=s(qTe);l3r=r(a4t,"speech_to_text"),a4t.forEach(t),i3r=r(GRe," \u2014 "),AU=n(GRe,"A",{href:!0});var n4t=s(AU);d3r=r(n4t,"TFSpeech2TextForConditionalGeneration"),n4t.forEach(t),c3r=r(GRe," (Speech2Text model)"),GRe.forEach(t),t4t.forEach(t),f3r=i(ql),T(HE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),bqe=i(f),Ac=n(f,"H2",{class:!0});var wje=s(Ac);UE=n(wje,"A",{id:!0,class:!0,href:!0});var s4t=s(UE);NTe=n(s4t,"SPAN",{});var l4t=s(NTe);T(UL.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),m3r=i(wje),jTe=n(wje,"SPAN",{});var i4t=s(jTe);g3r=r(i4t,"FlaxAutoModel"),i4t.forEach(t),wje.forEach(t),vqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(JL.$$.fragment,Nl),h3r=i(Nl),yc=n(Nl,"P",{});var LZ=s(yc);p3r=r(LZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yU=n(LZ,"A",{href:!0});var d4t=s(yU);u3r=r(d4t,"from_pretrained()"),d4t.forEach(t),_3r=r(LZ," class method or the "),LU=n(LZ,"A",{href:!0});var c4t=s(LU);b3r=r(c4t,"from_config()"),c4t.forEach(t),v3r=r(LZ,` class
method.`),LZ.forEach(t),F3r=i(Nl),YL=n(Nl,"P",{});var Aje=s(YL);T3r=r(Aje,"This class cannot be instantiated directly using "),DTe=n(Aje,"CODE",{});var f4t=s(DTe);M3r=r(f4t,"__init__()"),f4t.forEach(t),E3r=r(Aje," (throws an error)."),Aje.forEach(t),C3r=i(Nl),jt=n(Nl,"DIV",{class:!0});var EA=s(jt);T(KL.$$.fragment,EA),w3r=i(EA),GTe=n(EA,"P",{});var m4t=s(GTe);A3r=r(m4t,"Instantiates one of the base model classes of the library from a configuration."),m4t.forEach(t),y3r=i(EA),Lc=n(EA,"P",{});var xZ=s(Lc);L3r=r(xZ,`Note:
Loading a model from its configuration file does `),OTe=n(xZ,"STRONG",{});var g4t=s(OTe);x3r=r(g4t,"not"),g4t.forEach(t),$3r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(xZ,"A",{href:!0});var h4t=s(xU);k3r=r(h4t,"from_pretrained()"),h4t.forEach(t),S3r=r(xZ," to load the model weights."),xZ.forEach(t),R3r=i(EA),T(JE.$$.fragment,EA),EA.forEach(t),B3r=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(ZL.$$.fragment,jl),P3r=i(jl),VTe=n(jl,"P",{});var p4t=s(VTe);I3r=r(p4t,"Instantiate one of the base model classes of the library from a pretrained model."),p4t.forEach(t),q3r=i(jl),hn=n(jl,"P",{});var CA=s(hn);N3r=r(CA,"The model class to instantiate is selected based on the "),XTe=n(CA,"CODE",{});var u4t=s(XTe);j3r=r(u4t,"model_type"),u4t.forEach(t),D3r=r(CA,` property of the config object (either
passed as an argument or loaded from `),zTe=n(CA,"CODE",{});var _4t=s(zTe);G3r=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),O3r=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(CA,"CODE",{});var b4t=s(QTe);V3r=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),X3r=r(CA,":"),CA.forEach(t),z3r=i(jl),re=n(jl,"UL",{});var ne=s(re);YE=n(ne,"LI",{});var ORe=s(YE);WTe=n(ORe,"STRONG",{});var v4t=s(WTe);Q3r=r(v4t,"albert"),v4t.forEach(t),W3r=r(ORe," \u2014 "),$U=n(ORe,"A",{href:!0});var F4t=s($U);H3r=r(F4t,"FlaxAlbertModel"),F4t.forEach(t),U3r=r(ORe," (ALBERT model)"),ORe.forEach(t),J3r=i(ne),KE=n(ne,"LI",{});var VRe=s(KE);HTe=n(VRe,"STRONG",{});var T4t=s(HTe);Y3r=r(T4t,"bart"),T4t.forEach(t),K3r=r(VRe," \u2014 "),kU=n(VRe,"A",{href:!0});var M4t=s(kU);Z3r=r(M4t,"FlaxBartModel"),M4t.forEach(t),ewr=r(VRe," (BART model)"),VRe.forEach(t),owr=i(ne),ZE=n(ne,"LI",{});var XRe=s(ZE);UTe=n(XRe,"STRONG",{});var E4t=s(UTe);rwr=r(E4t,"beit"),E4t.forEach(t),twr=r(XRe," \u2014 "),SU=n(XRe,"A",{href:!0});var C4t=s(SU);awr=r(C4t,"FlaxBeitModel"),C4t.forEach(t),nwr=r(XRe," (BEiT model)"),XRe.forEach(t),swr=i(ne),e5=n(ne,"LI",{});var zRe=s(e5);JTe=n(zRe,"STRONG",{});var w4t=s(JTe);lwr=r(w4t,"bert"),w4t.forEach(t),iwr=r(zRe," \u2014 "),RU=n(zRe,"A",{href:!0});var A4t=s(RU);dwr=r(A4t,"FlaxBertModel"),A4t.forEach(t),cwr=r(zRe," (BERT model)"),zRe.forEach(t),fwr=i(ne),o5=n(ne,"LI",{});var QRe=s(o5);YTe=n(QRe,"STRONG",{});var y4t=s(YTe);mwr=r(y4t,"big_bird"),y4t.forEach(t),gwr=r(QRe," \u2014 "),BU=n(QRe,"A",{href:!0});var L4t=s(BU);hwr=r(L4t,"FlaxBigBirdModel"),L4t.forEach(t),pwr=r(QRe," (BigBird model)"),QRe.forEach(t),uwr=i(ne),r5=n(ne,"LI",{});var WRe=s(r5);KTe=n(WRe,"STRONG",{});var x4t=s(KTe);_wr=r(x4t,"blenderbot"),x4t.forEach(t),bwr=r(WRe," \u2014 "),PU=n(WRe,"A",{href:!0});var $4t=s(PU);vwr=r($4t,"FlaxBlenderbotModel"),$4t.forEach(t),Fwr=r(WRe," (Blenderbot model)"),WRe.forEach(t),Twr=i(ne),t5=n(ne,"LI",{});var HRe=s(t5);ZTe=n(HRe,"STRONG",{});var k4t=s(ZTe);Mwr=r(k4t,"blenderbot-small"),k4t.forEach(t),Ewr=r(HRe," \u2014 "),IU=n(HRe,"A",{href:!0});var S4t=s(IU);Cwr=r(S4t,"FlaxBlenderbotSmallModel"),S4t.forEach(t),wwr=r(HRe," (BlenderbotSmall model)"),HRe.forEach(t),Awr=i(ne),a5=n(ne,"LI",{});var URe=s(a5);e7e=n(URe,"STRONG",{});var R4t=s(e7e);ywr=r(R4t,"clip"),R4t.forEach(t),Lwr=r(URe," \u2014 "),qU=n(URe,"A",{href:!0});var B4t=s(qU);xwr=r(B4t,"FlaxCLIPModel"),B4t.forEach(t),$wr=r(URe," (CLIP model)"),URe.forEach(t),kwr=i(ne),n5=n(ne,"LI",{});var JRe=s(n5);o7e=n(JRe,"STRONG",{});var P4t=s(o7e);Swr=r(P4t,"distilbert"),P4t.forEach(t),Rwr=r(JRe," \u2014 "),NU=n(JRe,"A",{href:!0});var I4t=s(NU);Bwr=r(I4t,"FlaxDistilBertModel"),I4t.forEach(t),Pwr=r(JRe," (DistilBERT model)"),JRe.forEach(t),Iwr=i(ne),s5=n(ne,"LI",{});var YRe=s(s5);r7e=n(YRe,"STRONG",{});var q4t=s(r7e);qwr=r(q4t,"electra"),q4t.forEach(t),Nwr=r(YRe," \u2014 "),jU=n(YRe,"A",{href:!0});var N4t=s(jU);jwr=r(N4t,"FlaxElectraModel"),N4t.forEach(t),Dwr=r(YRe," (ELECTRA model)"),YRe.forEach(t),Gwr=i(ne),l5=n(ne,"LI",{});var KRe=s(l5);t7e=n(KRe,"STRONG",{});var j4t=s(t7e);Owr=r(j4t,"gpt2"),j4t.forEach(t),Vwr=r(KRe," \u2014 "),DU=n(KRe,"A",{href:!0});var D4t=s(DU);Xwr=r(D4t,"FlaxGPT2Model"),D4t.forEach(t),zwr=r(KRe," (OpenAI GPT-2 model)"),KRe.forEach(t),Qwr=i(ne),i5=n(ne,"LI",{});var ZRe=s(i5);a7e=n(ZRe,"STRONG",{});var G4t=s(a7e);Wwr=r(G4t,"gpt_neo"),G4t.forEach(t),Hwr=r(ZRe," \u2014 "),GU=n(ZRe,"A",{href:!0});var O4t=s(GU);Uwr=r(O4t,"FlaxGPTNeoModel"),O4t.forEach(t),Jwr=r(ZRe," (GPT Neo model)"),ZRe.forEach(t),Ywr=i(ne),d5=n(ne,"LI",{});var eBe=s(d5);n7e=n(eBe,"STRONG",{});var V4t=s(n7e);Kwr=r(V4t,"gptj"),V4t.forEach(t),Zwr=r(eBe," \u2014 "),OU=n(eBe,"A",{href:!0});var X4t=s(OU);eAr=r(X4t,"FlaxGPTJModel"),X4t.forEach(t),oAr=r(eBe," (GPT-J model)"),eBe.forEach(t),rAr=i(ne),c5=n(ne,"LI",{});var oBe=s(c5);s7e=n(oBe,"STRONG",{});var z4t=s(s7e);tAr=r(z4t,"marian"),z4t.forEach(t),aAr=r(oBe," \u2014 "),VU=n(oBe,"A",{href:!0});var Q4t=s(VU);nAr=r(Q4t,"FlaxMarianModel"),Q4t.forEach(t),sAr=r(oBe," (Marian model)"),oBe.forEach(t),lAr=i(ne),f5=n(ne,"LI",{});var rBe=s(f5);l7e=n(rBe,"STRONG",{});var W4t=s(l7e);iAr=r(W4t,"mbart"),W4t.forEach(t),dAr=r(rBe," \u2014 "),XU=n(rBe,"A",{href:!0});var H4t=s(XU);cAr=r(H4t,"FlaxMBartModel"),H4t.forEach(t),fAr=r(rBe," (mBART model)"),rBe.forEach(t),mAr=i(ne),m5=n(ne,"LI",{});var tBe=s(m5);i7e=n(tBe,"STRONG",{});var U4t=s(i7e);gAr=r(U4t,"mt5"),U4t.forEach(t),hAr=r(tBe," \u2014 "),zU=n(tBe,"A",{href:!0});var J4t=s(zU);pAr=r(J4t,"FlaxMT5Model"),J4t.forEach(t),uAr=r(tBe," (mT5 model)"),tBe.forEach(t),_Ar=i(ne),g5=n(ne,"LI",{});var aBe=s(g5);d7e=n(aBe,"STRONG",{});var Y4t=s(d7e);bAr=r(Y4t,"pegasus"),Y4t.forEach(t),vAr=r(aBe," \u2014 "),QU=n(aBe,"A",{href:!0});var K4t=s(QU);FAr=r(K4t,"FlaxPegasusModel"),K4t.forEach(t),TAr=r(aBe," (Pegasus model)"),aBe.forEach(t),MAr=i(ne),h5=n(ne,"LI",{});var nBe=s(h5);c7e=n(nBe,"STRONG",{});var Z4t=s(c7e);EAr=r(Z4t,"roberta"),Z4t.forEach(t),CAr=r(nBe," \u2014 "),WU=n(nBe,"A",{href:!0});var eEt=s(WU);wAr=r(eEt,"FlaxRobertaModel"),eEt.forEach(t),AAr=r(nBe," (RoBERTa model)"),nBe.forEach(t),yAr=i(ne),p5=n(ne,"LI",{});var sBe=s(p5);f7e=n(sBe,"STRONG",{});var oEt=s(f7e);LAr=r(oEt,"roformer"),oEt.forEach(t),xAr=r(sBe," \u2014 "),HU=n(sBe,"A",{href:!0});var rEt=s(HU);$Ar=r(rEt,"FlaxRoFormerModel"),rEt.forEach(t),kAr=r(sBe," (RoFormer model)"),sBe.forEach(t),SAr=i(ne),u5=n(ne,"LI",{});var lBe=s(u5);m7e=n(lBe,"STRONG",{});var tEt=s(m7e);RAr=r(tEt,"t5"),tEt.forEach(t),BAr=r(lBe," \u2014 "),UU=n(lBe,"A",{href:!0});var aEt=s(UU);PAr=r(aEt,"FlaxT5Model"),aEt.forEach(t),IAr=r(lBe," (T5 model)"),lBe.forEach(t),qAr=i(ne),_5=n(ne,"LI",{});var iBe=s(_5);g7e=n(iBe,"STRONG",{});var nEt=s(g7e);NAr=r(nEt,"vision-text-dual-encoder"),nEt.forEach(t),jAr=r(iBe," \u2014 "),JU=n(iBe,"A",{href:!0});var sEt=s(JU);DAr=r(sEt,"FlaxVisionTextDualEncoderModel"),sEt.forEach(t),GAr=r(iBe," (VisionTextDualEncoder model)"),iBe.forEach(t),OAr=i(ne),b5=n(ne,"LI",{});var dBe=s(b5);h7e=n(dBe,"STRONG",{});var lEt=s(h7e);VAr=r(lEt,"vit"),lEt.forEach(t),XAr=r(dBe," \u2014 "),YU=n(dBe,"A",{href:!0});var iEt=s(YU);zAr=r(iEt,"FlaxViTModel"),iEt.forEach(t),QAr=r(dBe," (ViT model)"),dBe.forEach(t),WAr=i(ne),v5=n(ne,"LI",{});var cBe=s(v5);p7e=n(cBe,"STRONG",{});var dEt=s(p7e);HAr=r(dEt,"wav2vec2"),dEt.forEach(t),UAr=r(cBe," \u2014 "),KU=n(cBe,"A",{href:!0});var cEt=s(KU);JAr=r(cEt,"FlaxWav2Vec2Model"),cEt.forEach(t),YAr=r(cBe," (Wav2Vec2 model)"),cBe.forEach(t),KAr=i(ne),F5=n(ne,"LI",{});var fBe=s(F5);u7e=n(fBe,"STRONG",{});var fEt=s(u7e);ZAr=r(fEt,"xglm"),fEt.forEach(t),e6r=r(fBe," \u2014 "),ZU=n(fBe,"A",{href:!0});var mEt=s(ZU);o6r=r(mEt,"FlaxXGLMModel"),mEt.forEach(t),r6r=r(fBe," (XGLM model)"),fBe.forEach(t),t6r=i(ne),T5=n(ne,"LI",{});var mBe=s(T5);_7e=n(mBe,"STRONG",{});var gEt=s(_7e);a6r=r(gEt,"xlm-roberta"),gEt.forEach(t),n6r=r(mBe," \u2014 "),eJ=n(mBe,"A",{href:!0});var hEt=s(eJ);s6r=r(hEt,"FlaxXLMRobertaModel"),hEt.forEach(t),l6r=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),ne.forEach(t),i6r=i(jl),T(M5.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),Fqe=i(f),xc=n(f,"H2",{class:!0});var yje=s(xc);E5=n(yje,"A",{id:!0,class:!0,href:!0});var pEt=s(E5);b7e=n(pEt,"SPAN",{});var uEt=s(b7e);T(e8.$$.fragment,uEt),uEt.forEach(t),pEt.forEach(t),d6r=i(yje),v7e=n(yje,"SPAN",{});var _Et=s(v7e);c6r=r(_Et,"FlaxAutoModelForCausalLM"),_Et.forEach(t),yje.forEach(t),Tqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(o8.$$.fragment,Dl),f6r=i(Dl),$c=n(Dl,"P",{});var $Z=s($c);m6r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oJ=n($Z,"A",{href:!0});var bEt=s(oJ);g6r=r(bEt,"from_pretrained()"),bEt.forEach(t),h6r=r($Z," class method or the "),rJ=n($Z,"A",{href:!0});var vEt=s(rJ);p6r=r(vEt,"from_config()"),vEt.forEach(t),u6r=r($Z,` class
method.`),$Z.forEach(t),_6r=i(Dl),r8=n(Dl,"P",{});var Lje=s(r8);b6r=r(Lje,"This class cannot be instantiated directly using "),F7e=n(Lje,"CODE",{});var FEt=s(F7e);v6r=r(FEt,"__init__()"),FEt.forEach(t),F6r=r(Lje," (throws an error)."),Lje.forEach(t),T6r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var wA=s(Dt);T(t8.$$.fragment,wA),M6r=i(wA),T7e=n(wA,"P",{});var TEt=s(T7e);E6r=r(TEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TEt.forEach(t),C6r=i(wA),kc=n(wA,"P",{});var kZ=s(kc);w6r=r(kZ,`Note:
Loading a model from its configuration file does `),M7e=n(kZ,"STRONG",{});var MEt=s(M7e);A6r=r(MEt,"not"),MEt.forEach(t),y6r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(kZ,"A",{href:!0});var EEt=s(tJ);L6r=r(EEt,"from_pretrained()"),EEt.forEach(t),x6r=r(kZ," to load the model weights."),kZ.forEach(t),$6r=i(wA),T(C5.$$.fragment,wA),wA.forEach(t),k6r=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(a8.$$.fragment,Gl),S6r=i(Gl),E7e=n(Gl,"P",{});var CEt=s(E7e);R6r=r(CEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CEt.forEach(t),B6r=i(Gl),pn=n(Gl,"P",{});var AA=s(pn);P6r=r(AA,"The model class to instantiate is selected based on the "),C7e=n(AA,"CODE",{});var wEt=s(C7e);I6r=r(wEt,"model_type"),wEt.forEach(t),q6r=r(AA,` property of the config object (either
passed as an argument or loaded from `),w7e=n(AA,"CODE",{});var AEt=s(w7e);N6r=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),j6r=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(AA,"CODE",{});var yEt=s(A7e);D6r=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),G6r=r(AA,":"),AA.forEach(t),O6r=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);w5=n(Oe,"LI",{});var gBe=s(w5);y7e=n(gBe,"STRONG",{});var LEt=s(y7e);V6r=r(LEt,"bart"),LEt.forEach(t),X6r=r(gBe," \u2014 "),aJ=n(gBe,"A",{href:!0});var xEt=s(aJ);z6r=r(xEt,"FlaxBartForCausalLM"),xEt.forEach(t),Q6r=r(gBe," (BART model)"),gBe.forEach(t),W6r=i(Oe),A5=n(Oe,"LI",{});var hBe=s(A5);L7e=n(hBe,"STRONG",{});var $Et=s(L7e);H6r=r($Et,"bert"),$Et.forEach(t),U6r=r(hBe," \u2014 "),nJ=n(hBe,"A",{href:!0});var kEt=s(nJ);J6r=r(kEt,"FlaxBertForCausalLM"),kEt.forEach(t),Y6r=r(hBe," (BERT model)"),hBe.forEach(t),K6r=i(Oe),y5=n(Oe,"LI",{});var pBe=s(y5);x7e=n(pBe,"STRONG",{});var SEt=s(x7e);Z6r=r(SEt,"big_bird"),SEt.forEach(t),e0r=r(pBe," \u2014 "),sJ=n(pBe,"A",{href:!0});var REt=s(sJ);o0r=r(REt,"FlaxBigBirdForCausalLM"),REt.forEach(t),r0r=r(pBe," (BigBird model)"),pBe.forEach(t),t0r=i(Oe),L5=n(Oe,"LI",{});var uBe=s(L5);$7e=n(uBe,"STRONG",{});var BEt=s($7e);a0r=r(BEt,"electra"),BEt.forEach(t),n0r=r(uBe," \u2014 "),lJ=n(uBe,"A",{href:!0});var PEt=s(lJ);s0r=r(PEt,"FlaxElectraForCausalLM"),PEt.forEach(t),l0r=r(uBe," (ELECTRA model)"),uBe.forEach(t),i0r=i(Oe),x5=n(Oe,"LI",{});var _Be=s(x5);k7e=n(_Be,"STRONG",{});var IEt=s(k7e);d0r=r(IEt,"gpt2"),IEt.forEach(t),c0r=r(_Be," \u2014 "),iJ=n(_Be,"A",{href:!0});var qEt=s(iJ);f0r=r(qEt,"FlaxGPT2LMHeadModel"),qEt.forEach(t),m0r=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),g0r=i(Oe),$5=n(Oe,"LI",{});var bBe=s($5);S7e=n(bBe,"STRONG",{});var NEt=s(S7e);h0r=r(NEt,"gpt_neo"),NEt.forEach(t),p0r=r(bBe," \u2014 "),dJ=n(bBe,"A",{href:!0});var jEt=s(dJ);u0r=r(jEt,"FlaxGPTNeoForCausalLM"),jEt.forEach(t),_0r=r(bBe," (GPT Neo model)"),bBe.forEach(t),b0r=i(Oe),k5=n(Oe,"LI",{});var vBe=s(k5);R7e=n(vBe,"STRONG",{});var DEt=s(R7e);v0r=r(DEt,"gptj"),DEt.forEach(t),F0r=r(vBe," \u2014 "),cJ=n(vBe,"A",{href:!0});var GEt=s(cJ);T0r=r(GEt,"FlaxGPTJForCausalLM"),GEt.forEach(t),M0r=r(vBe," (GPT-J model)"),vBe.forEach(t),E0r=i(Oe),S5=n(Oe,"LI",{});var FBe=s(S5);B7e=n(FBe,"STRONG",{});var OEt=s(B7e);C0r=r(OEt,"roberta"),OEt.forEach(t),w0r=r(FBe," \u2014 "),fJ=n(FBe,"A",{href:!0});var VEt=s(fJ);A0r=r(VEt,"FlaxRobertaForCausalLM"),VEt.forEach(t),y0r=r(FBe," (RoBERTa model)"),FBe.forEach(t),L0r=i(Oe),R5=n(Oe,"LI",{});var TBe=s(R5);P7e=n(TBe,"STRONG",{});var XEt=s(P7e);x0r=r(XEt,"xglm"),XEt.forEach(t),$0r=r(TBe," \u2014 "),mJ=n(TBe,"A",{href:!0});var zEt=s(mJ);k0r=r(zEt,"FlaxXGLMForCausalLM"),zEt.forEach(t),S0r=r(TBe," (XGLM model)"),TBe.forEach(t),Oe.forEach(t),R0r=i(Gl),T(B5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Mqe=i(f),Sc=n(f,"H2",{class:!0});var xje=s(Sc);P5=n(xje,"A",{id:!0,class:!0,href:!0});var QEt=s(P5);I7e=n(QEt,"SPAN",{});var WEt=s(I7e);T(n8.$$.fragment,WEt),WEt.forEach(t),QEt.forEach(t),B0r=i(xje),q7e=n(xje,"SPAN",{});var HEt=s(q7e);P0r=r(HEt,"FlaxAutoModelForPreTraining"),HEt.forEach(t),xje.forEach(t),Eqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(s8.$$.fragment,Ol),I0r=i(Ol),Rc=n(Ol,"P",{});var SZ=s(Rc);q0r=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gJ=n(SZ,"A",{href:!0});var UEt=s(gJ);N0r=r(UEt,"from_pretrained()"),UEt.forEach(t),j0r=r(SZ," class method or the "),hJ=n(SZ,"A",{href:!0});var JEt=s(hJ);D0r=r(JEt,"from_config()"),JEt.forEach(t),G0r=r(SZ,` class
method.`),SZ.forEach(t),O0r=i(Ol),l8=n(Ol,"P",{});var $je=s(l8);V0r=r($je,"This class cannot be instantiated directly using "),N7e=n($je,"CODE",{});var YEt=s(N7e);X0r=r(YEt,"__init__()"),YEt.forEach(t),z0r=r($je," (throws an error)."),$je.forEach(t),Q0r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var yA=s(Gt);T(i8.$$.fragment,yA),W0r=i(yA),j7e=n(yA,"P",{});var KEt=s(j7e);H0r=r(KEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),KEt.forEach(t),U0r=i(yA),Bc=n(yA,"P",{});var RZ=s(Bc);J0r=r(RZ,`Note:
Loading a model from its configuration file does `),D7e=n(RZ,"STRONG",{});var ZEt=s(D7e);Y0r=r(ZEt,"not"),ZEt.forEach(t),K0r=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pJ=n(RZ,"A",{href:!0});var e5t=s(pJ);Z0r=r(e5t,"from_pretrained()"),e5t.forEach(t),eyr=r(RZ," to load the model weights."),RZ.forEach(t),oyr=i(yA),T(I5.$$.fragment,yA),yA.forEach(t),ryr=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(d8.$$.fragment,Vl),tyr=i(Vl),G7e=n(Vl,"P",{});var o5t=s(G7e);ayr=r(o5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o5t.forEach(t),nyr=i(Vl),un=n(Vl,"P",{});var LA=s(un);syr=r(LA,"The model class to instantiate is selected based on the "),O7e=n(LA,"CODE",{});var r5t=s(O7e);lyr=r(r5t,"model_type"),r5t.forEach(t),iyr=r(LA,` property of the config object (either
passed as an argument or loaded from `),V7e=n(LA,"CODE",{});var t5t=s(V7e);dyr=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),cyr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(LA,"CODE",{});var a5t=s(X7e);fyr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),myr=r(LA,":"),LA.forEach(t),gyr=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);q5=n(we,"LI",{});var MBe=s(q5);z7e=n(MBe,"STRONG",{});var n5t=s(z7e);hyr=r(n5t,"albert"),n5t.forEach(t),pyr=r(MBe," \u2014 "),uJ=n(MBe,"A",{href:!0});var s5t=s(uJ);uyr=r(s5t,"FlaxAlbertForPreTraining"),s5t.forEach(t),_yr=r(MBe," (ALBERT model)"),MBe.forEach(t),byr=i(we),N5=n(we,"LI",{});var EBe=s(N5);Q7e=n(EBe,"STRONG",{});var l5t=s(Q7e);vyr=r(l5t,"bart"),l5t.forEach(t),Fyr=r(EBe," \u2014 "),_J=n(EBe,"A",{href:!0});var i5t=s(_J);Tyr=r(i5t,"FlaxBartForConditionalGeneration"),i5t.forEach(t),Myr=r(EBe," (BART model)"),EBe.forEach(t),Eyr=i(we),j5=n(we,"LI",{});var CBe=s(j5);W7e=n(CBe,"STRONG",{});var d5t=s(W7e);Cyr=r(d5t,"bert"),d5t.forEach(t),wyr=r(CBe," \u2014 "),bJ=n(CBe,"A",{href:!0});var c5t=s(bJ);Ayr=r(c5t,"FlaxBertForPreTraining"),c5t.forEach(t),yyr=r(CBe," (BERT model)"),CBe.forEach(t),Lyr=i(we),D5=n(we,"LI",{});var wBe=s(D5);H7e=n(wBe,"STRONG",{});var f5t=s(H7e);xyr=r(f5t,"big_bird"),f5t.forEach(t),$yr=r(wBe," \u2014 "),vJ=n(wBe,"A",{href:!0});var m5t=s(vJ);kyr=r(m5t,"FlaxBigBirdForPreTraining"),m5t.forEach(t),Syr=r(wBe," (BigBird model)"),wBe.forEach(t),Ryr=i(we),G5=n(we,"LI",{});var ABe=s(G5);U7e=n(ABe,"STRONG",{});var g5t=s(U7e);Byr=r(g5t,"electra"),g5t.forEach(t),Pyr=r(ABe," \u2014 "),FJ=n(ABe,"A",{href:!0});var h5t=s(FJ);Iyr=r(h5t,"FlaxElectraForPreTraining"),h5t.forEach(t),qyr=r(ABe," (ELECTRA model)"),ABe.forEach(t),Nyr=i(we),O5=n(we,"LI",{});var yBe=s(O5);J7e=n(yBe,"STRONG",{});var p5t=s(J7e);jyr=r(p5t,"mbart"),p5t.forEach(t),Dyr=r(yBe," \u2014 "),TJ=n(yBe,"A",{href:!0});var u5t=s(TJ);Gyr=r(u5t,"FlaxMBartForConditionalGeneration"),u5t.forEach(t),Oyr=r(yBe," (mBART model)"),yBe.forEach(t),Vyr=i(we),V5=n(we,"LI",{});var LBe=s(V5);Y7e=n(LBe,"STRONG",{});var _5t=s(Y7e);Xyr=r(_5t,"mt5"),_5t.forEach(t),zyr=r(LBe," \u2014 "),MJ=n(LBe,"A",{href:!0});var b5t=s(MJ);Qyr=r(b5t,"FlaxMT5ForConditionalGeneration"),b5t.forEach(t),Wyr=r(LBe," (mT5 model)"),LBe.forEach(t),Hyr=i(we),X5=n(we,"LI",{});var xBe=s(X5);K7e=n(xBe,"STRONG",{});var v5t=s(K7e);Uyr=r(v5t,"roberta"),v5t.forEach(t),Jyr=r(xBe," \u2014 "),EJ=n(xBe,"A",{href:!0});var F5t=s(EJ);Yyr=r(F5t,"FlaxRobertaForMaskedLM"),F5t.forEach(t),Kyr=r(xBe," (RoBERTa model)"),xBe.forEach(t),Zyr=i(we),z5=n(we,"LI",{});var $Be=s(z5);Z7e=n($Be,"STRONG",{});var T5t=s(Z7e);eLr=r(T5t,"roformer"),T5t.forEach(t),oLr=r($Be," \u2014 "),CJ=n($Be,"A",{href:!0});var M5t=s(CJ);rLr=r(M5t,"FlaxRoFormerForMaskedLM"),M5t.forEach(t),tLr=r($Be," (RoFormer model)"),$Be.forEach(t),aLr=i(we),Q5=n(we,"LI",{});var kBe=s(Q5);e9e=n(kBe,"STRONG",{});var E5t=s(e9e);nLr=r(E5t,"t5"),E5t.forEach(t),sLr=r(kBe," \u2014 "),wJ=n(kBe,"A",{href:!0});var C5t=s(wJ);lLr=r(C5t,"FlaxT5ForConditionalGeneration"),C5t.forEach(t),iLr=r(kBe," (T5 model)"),kBe.forEach(t),dLr=i(we),W5=n(we,"LI",{});var SBe=s(W5);o9e=n(SBe,"STRONG",{});var w5t=s(o9e);cLr=r(w5t,"wav2vec2"),w5t.forEach(t),fLr=r(SBe," \u2014 "),AJ=n(SBe,"A",{href:!0});var A5t=s(AJ);mLr=r(A5t,"FlaxWav2Vec2ForPreTraining"),A5t.forEach(t),gLr=r(SBe," (Wav2Vec2 model)"),SBe.forEach(t),hLr=i(we),H5=n(we,"LI",{});var RBe=s(H5);r9e=n(RBe,"STRONG",{});var y5t=s(r9e);pLr=r(y5t,"xlm-roberta"),y5t.forEach(t),uLr=r(RBe," \u2014 "),yJ=n(RBe,"A",{href:!0});var L5t=s(yJ);_Lr=r(L5t,"FlaxXLMRobertaForMaskedLM"),L5t.forEach(t),bLr=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),we.forEach(t),vLr=i(Vl),T(U5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Cqe=i(f),Pc=n(f,"H2",{class:!0});var kje=s(Pc);J5=n(kje,"A",{id:!0,class:!0,href:!0});var x5t=s(J5);t9e=n(x5t,"SPAN",{});var $5t=s(t9e);T(c8.$$.fragment,$5t),$5t.forEach(t),x5t.forEach(t),FLr=i(kje),a9e=n(kje,"SPAN",{});var k5t=s(a9e);TLr=r(k5t,"FlaxAutoModelForMaskedLM"),k5t.forEach(t),kje.forEach(t),wqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(f8.$$.fragment,Xl),MLr=i(Xl),Ic=n(Xl,"P",{});var BZ=s(Ic);ELr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LJ=n(BZ,"A",{href:!0});var S5t=s(LJ);CLr=r(S5t,"from_pretrained()"),S5t.forEach(t),wLr=r(BZ," class method or the "),xJ=n(BZ,"A",{href:!0});var R5t=s(xJ);ALr=r(R5t,"from_config()"),R5t.forEach(t),yLr=r(BZ,` class
method.`),BZ.forEach(t),LLr=i(Xl),m8=n(Xl,"P",{});var Sje=s(m8);xLr=r(Sje,"This class cannot be instantiated directly using "),n9e=n(Sje,"CODE",{});var B5t=s(n9e);$Lr=r(B5t,"__init__()"),B5t.forEach(t),kLr=r(Sje," (throws an error)."),Sje.forEach(t),SLr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var xA=s(Ot);T(g8.$$.fragment,xA),RLr=i(xA),s9e=n(xA,"P",{});var P5t=s(s9e);BLr=r(P5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P5t.forEach(t),PLr=i(xA),qc=n(xA,"P",{});var PZ=s(qc);ILr=r(PZ,`Note:
Loading a model from its configuration file does `),l9e=n(PZ,"STRONG",{});var I5t=s(l9e);qLr=r(I5t,"not"),I5t.forEach(t),NLr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(PZ,"A",{href:!0});var q5t=s($J);jLr=r(q5t,"from_pretrained()"),q5t.forEach(t),DLr=r(PZ," to load the model weights."),PZ.forEach(t),GLr=i(xA),T(Y5.$$.fragment,xA),xA.forEach(t),OLr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(h8.$$.fragment,zl),VLr=i(zl),i9e=n(zl,"P",{});var N5t=s(i9e);XLr=r(N5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N5t.forEach(t),zLr=i(zl),_n=n(zl,"P",{});var $A=s(_n);QLr=r($A,"The model class to instantiate is selected based on the "),d9e=n($A,"CODE",{});var j5t=s(d9e);WLr=r(j5t,"model_type"),j5t.forEach(t),HLr=r($A,` property of the config object (either
passed as an argument or loaded from `),c9e=n($A,"CODE",{});var D5t=s(c9e);ULr=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),JLr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=n($A,"CODE",{});var G5t=s(f9e);YLr=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),KLr=r($A,":"),$A.forEach(t),ZLr=i(zl),Le=n(zl,"UL",{});var Be=s(Le);K5=n(Be,"LI",{});var BBe=s(K5);m9e=n(BBe,"STRONG",{});var O5t=s(m9e);e8r=r(O5t,"albert"),O5t.forEach(t),o8r=r(BBe," \u2014 "),kJ=n(BBe,"A",{href:!0});var V5t=s(kJ);r8r=r(V5t,"FlaxAlbertForMaskedLM"),V5t.forEach(t),t8r=r(BBe," (ALBERT model)"),BBe.forEach(t),a8r=i(Be),Z5=n(Be,"LI",{});var PBe=s(Z5);g9e=n(PBe,"STRONG",{});var X5t=s(g9e);n8r=r(X5t,"bart"),X5t.forEach(t),s8r=r(PBe," \u2014 "),SJ=n(PBe,"A",{href:!0});var z5t=s(SJ);l8r=r(z5t,"FlaxBartForConditionalGeneration"),z5t.forEach(t),i8r=r(PBe," (BART model)"),PBe.forEach(t),d8r=i(Be),eC=n(Be,"LI",{});var IBe=s(eC);h9e=n(IBe,"STRONG",{});var Q5t=s(h9e);c8r=r(Q5t,"bert"),Q5t.forEach(t),f8r=r(IBe," \u2014 "),RJ=n(IBe,"A",{href:!0});var W5t=s(RJ);m8r=r(W5t,"FlaxBertForMaskedLM"),W5t.forEach(t),g8r=r(IBe," (BERT model)"),IBe.forEach(t),h8r=i(Be),oC=n(Be,"LI",{});var qBe=s(oC);p9e=n(qBe,"STRONG",{});var H5t=s(p9e);p8r=r(H5t,"big_bird"),H5t.forEach(t),u8r=r(qBe," \u2014 "),BJ=n(qBe,"A",{href:!0});var U5t=s(BJ);_8r=r(U5t,"FlaxBigBirdForMaskedLM"),U5t.forEach(t),b8r=r(qBe," (BigBird model)"),qBe.forEach(t),v8r=i(Be),rC=n(Be,"LI",{});var NBe=s(rC);u9e=n(NBe,"STRONG",{});var J5t=s(u9e);F8r=r(J5t,"distilbert"),J5t.forEach(t),T8r=r(NBe," \u2014 "),PJ=n(NBe,"A",{href:!0});var Y5t=s(PJ);M8r=r(Y5t,"FlaxDistilBertForMaskedLM"),Y5t.forEach(t),E8r=r(NBe," (DistilBERT model)"),NBe.forEach(t),C8r=i(Be),tC=n(Be,"LI",{});var jBe=s(tC);_9e=n(jBe,"STRONG",{});var K5t=s(_9e);w8r=r(K5t,"electra"),K5t.forEach(t),A8r=r(jBe," \u2014 "),IJ=n(jBe,"A",{href:!0});var Z5t=s(IJ);y8r=r(Z5t,"FlaxElectraForMaskedLM"),Z5t.forEach(t),L8r=r(jBe," (ELECTRA model)"),jBe.forEach(t),x8r=i(Be),aC=n(Be,"LI",{});var DBe=s(aC);b9e=n(DBe,"STRONG",{});var eCt=s(b9e);$8r=r(eCt,"mbart"),eCt.forEach(t),k8r=r(DBe," \u2014 "),qJ=n(DBe,"A",{href:!0});var oCt=s(qJ);S8r=r(oCt,"FlaxMBartForConditionalGeneration"),oCt.forEach(t),R8r=r(DBe," (mBART model)"),DBe.forEach(t),B8r=i(Be),nC=n(Be,"LI",{});var GBe=s(nC);v9e=n(GBe,"STRONG",{});var rCt=s(v9e);P8r=r(rCt,"roberta"),rCt.forEach(t),I8r=r(GBe," \u2014 "),NJ=n(GBe,"A",{href:!0});var tCt=s(NJ);q8r=r(tCt,"FlaxRobertaForMaskedLM"),tCt.forEach(t),N8r=r(GBe," (RoBERTa model)"),GBe.forEach(t),j8r=i(Be),sC=n(Be,"LI",{});var OBe=s(sC);F9e=n(OBe,"STRONG",{});var aCt=s(F9e);D8r=r(aCt,"roformer"),aCt.forEach(t),G8r=r(OBe," \u2014 "),jJ=n(OBe,"A",{href:!0});var nCt=s(jJ);O8r=r(nCt,"FlaxRoFormerForMaskedLM"),nCt.forEach(t),V8r=r(OBe," (RoFormer model)"),OBe.forEach(t),X8r=i(Be),lC=n(Be,"LI",{});var VBe=s(lC);T9e=n(VBe,"STRONG",{});var sCt=s(T9e);z8r=r(sCt,"xlm-roberta"),sCt.forEach(t),Q8r=r(VBe," \u2014 "),DJ=n(VBe,"A",{href:!0});var lCt=s(DJ);W8r=r(lCt,"FlaxXLMRobertaForMaskedLM"),lCt.forEach(t),H8r=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),Be.forEach(t),U8r=i(zl),T(iC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Aqe=i(f),Nc=n(f,"H2",{class:!0});var Rje=s(Nc);dC=n(Rje,"A",{id:!0,class:!0,href:!0});var iCt=s(dC);M9e=n(iCt,"SPAN",{});var dCt=s(M9e);T(p8.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),J8r=i(Rje),E9e=n(Rje,"SPAN",{});var cCt=s(E9e);Y8r=r(cCt,"FlaxAutoModelForSeq2SeqLM"),cCt.forEach(t),Rje.forEach(t),yqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(u8.$$.fragment,Ql),K8r=i(Ql),jc=n(Ql,"P",{});var IZ=s(jc);Z8r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GJ=n(IZ,"A",{href:!0});var fCt=s(GJ);exr=r(fCt,"from_pretrained()"),fCt.forEach(t),oxr=r(IZ," class method or the "),OJ=n(IZ,"A",{href:!0});var mCt=s(OJ);rxr=r(mCt,"from_config()"),mCt.forEach(t),txr=r(IZ,` class
method.`),IZ.forEach(t),axr=i(Ql),_8=n(Ql,"P",{});var Bje=s(_8);nxr=r(Bje,"This class cannot be instantiated directly using "),C9e=n(Bje,"CODE",{});var gCt=s(C9e);sxr=r(gCt,"__init__()"),gCt.forEach(t),lxr=r(Bje," (throws an error)."),Bje.forEach(t),ixr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var kA=s(Vt);T(b8.$$.fragment,kA),dxr=i(kA),w9e=n(kA,"P",{});var hCt=s(w9e);cxr=r(hCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hCt.forEach(t),fxr=i(kA),Dc=n(kA,"P",{});var qZ=s(Dc);mxr=r(qZ,`Note:
Loading a model from its configuration file does `),A9e=n(qZ,"STRONG",{});var pCt=s(A9e);gxr=r(pCt,"not"),pCt.forEach(t),hxr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(qZ,"A",{href:!0});var uCt=s(VJ);pxr=r(uCt,"from_pretrained()"),uCt.forEach(t),uxr=r(qZ," to load the model weights."),qZ.forEach(t),_xr=i(kA),T(cC.$$.fragment,kA),kA.forEach(t),bxr=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(v8.$$.fragment,Wl),vxr=i(Wl),y9e=n(Wl,"P",{});var _Ct=s(y9e);Fxr=r(_Ct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_Ct.forEach(t),Txr=i(Wl),bn=n(Wl,"P",{});var SA=s(bn);Mxr=r(SA,"The model class to instantiate is selected based on the "),L9e=n(SA,"CODE",{});var bCt=s(L9e);Exr=r(bCt,"model_type"),bCt.forEach(t),Cxr=r(SA,` property of the config object (either
passed as an argument or loaded from `),x9e=n(SA,"CODE",{});var vCt=s(x9e);wxr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),Axr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$9e=n(SA,"CODE",{});var FCt=s($9e);yxr=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),Lxr=r(SA,":"),SA.forEach(t),xxr=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);fC=n(Ve,"LI",{});var XBe=s(fC);k9e=n(XBe,"STRONG",{});var TCt=s(k9e);$xr=r(TCt,"bart"),TCt.forEach(t),kxr=r(XBe," \u2014 "),XJ=n(XBe,"A",{href:!0});var MCt=s(XJ);Sxr=r(MCt,"FlaxBartForConditionalGeneration"),MCt.forEach(t),Rxr=r(XBe," (BART model)"),XBe.forEach(t),Bxr=i(Ve),mC=n(Ve,"LI",{});var zBe=s(mC);S9e=n(zBe,"STRONG",{});var ECt=s(S9e);Pxr=r(ECt,"blenderbot"),ECt.forEach(t),Ixr=r(zBe," \u2014 "),zJ=n(zBe,"A",{href:!0});var CCt=s(zJ);qxr=r(CCt,"FlaxBlenderbotForConditionalGeneration"),CCt.forEach(t),Nxr=r(zBe," (Blenderbot model)"),zBe.forEach(t),jxr=i(Ve),gC=n(Ve,"LI",{});var QBe=s(gC);R9e=n(QBe,"STRONG",{});var wCt=s(R9e);Dxr=r(wCt,"blenderbot-small"),wCt.forEach(t),Gxr=r(QBe," \u2014 "),QJ=n(QBe,"A",{href:!0});var ACt=s(QJ);Oxr=r(ACt,"FlaxBlenderbotSmallForConditionalGeneration"),ACt.forEach(t),Vxr=r(QBe," (BlenderbotSmall model)"),QBe.forEach(t),Xxr=i(Ve),hC=n(Ve,"LI",{});var WBe=s(hC);B9e=n(WBe,"STRONG",{});var yCt=s(B9e);zxr=r(yCt,"encoder-decoder"),yCt.forEach(t),Qxr=r(WBe," \u2014 "),WJ=n(WBe,"A",{href:!0});var LCt=s(WJ);Wxr=r(LCt,"FlaxEncoderDecoderModel"),LCt.forEach(t),Hxr=r(WBe," (Encoder decoder model)"),WBe.forEach(t),Uxr=i(Ve),pC=n(Ve,"LI",{});var HBe=s(pC);P9e=n(HBe,"STRONG",{});var xCt=s(P9e);Jxr=r(xCt,"marian"),xCt.forEach(t),Yxr=r(HBe," \u2014 "),HJ=n(HBe,"A",{href:!0});var $Ct=s(HJ);Kxr=r($Ct,"FlaxMarianMTModel"),$Ct.forEach(t),Zxr=r(HBe," (Marian model)"),HBe.forEach(t),e$r=i(Ve),uC=n(Ve,"LI",{});var UBe=s(uC);I9e=n(UBe,"STRONG",{});var kCt=s(I9e);o$r=r(kCt,"mbart"),kCt.forEach(t),r$r=r(UBe," \u2014 "),UJ=n(UBe,"A",{href:!0});var SCt=s(UJ);t$r=r(SCt,"FlaxMBartForConditionalGeneration"),SCt.forEach(t),a$r=r(UBe," (mBART model)"),UBe.forEach(t),n$r=i(Ve),_C=n(Ve,"LI",{});var JBe=s(_C);q9e=n(JBe,"STRONG",{});var RCt=s(q9e);s$r=r(RCt,"mt5"),RCt.forEach(t),l$r=r(JBe," \u2014 "),JJ=n(JBe,"A",{href:!0});var BCt=s(JJ);i$r=r(BCt,"FlaxMT5ForConditionalGeneration"),BCt.forEach(t),d$r=r(JBe," (mT5 model)"),JBe.forEach(t),c$r=i(Ve),bC=n(Ve,"LI",{});var YBe=s(bC);N9e=n(YBe,"STRONG",{});var PCt=s(N9e);f$r=r(PCt,"pegasus"),PCt.forEach(t),m$r=r(YBe," \u2014 "),YJ=n(YBe,"A",{href:!0});var ICt=s(YJ);g$r=r(ICt,"FlaxPegasusForConditionalGeneration"),ICt.forEach(t),h$r=r(YBe," (Pegasus model)"),YBe.forEach(t),p$r=i(Ve),vC=n(Ve,"LI",{});var KBe=s(vC);j9e=n(KBe,"STRONG",{});var qCt=s(j9e);u$r=r(qCt,"t5"),qCt.forEach(t),_$r=r(KBe," \u2014 "),KJ=n(KBe,"A",{href:!0});var NCt=s(KJ);b$r=r(NCt,"FlaxT5ForConditionalGeneration"),NCt.forEach(t),v$r=r(KBe," (T5 model)"),KBe.forEach(t),Ve.forEach(t),F$r=i(Wl),T(FC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Lqe=i(f),Gc=n(f,"H2",{class:!0});var Pje=s(Gc);TC=n(Pje,"A",{id:!0,class:!0,href:!0});var jCt=s(TC);D9e=n(jCt,"SPAN",{});var DCt=s(D9e);T(F8.$$.fragment,DCt),DCt.forEach(t),jCt.forEach(t),T$r=i(Pje),G9e=n(Pje,"SPAN",{});var GCt=s(G9e);M$r=r(GCt,"FlaxAutoModelForSequenceClassification"),GCt.forEach(t),Pje.forEach(t),xqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(T8.$$.fragment,Hl),E$r=i(Hl),Oc=n(Hl,"P",{});var NZ=s(Oc);C$r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZJ=n(NZ,"A",{href:!0});var OCt=s(ZJ);w$r=r(OCt,"from_pretrained()"),OCt.forEach(t),A$r=r(NZ," class method or the "),eY=n(NZ,"A",{href:!0});var VCt=s(eY);y$r=r(VCt,"from_config()"),VCt.forEach(t),L$r=r(NZ,` class
method.`),NZ.forEach(t),x$r=i(Hl),M8=n(Hl,"P",{});var Ije=s(M8);$$r=r(Ije,"This class cannot be instantiated directly using "),O9e=n(Ije,"CODE",{});var XCt=s(O9e);k$r=r(XCt,"__init__()"),XCt.forEach(t),S$r=r(Ije," (throws an error)."),Ije.forEach(t),R$r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var RA=s(Xt);T(E8.$$.fragment,RA),B$r=i(RA),V9e=n(RA,"P",{});var zCt=s(V9e);P$r=r(zCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zCt.forEach(t),I$r=i(RA),Vc=n(RA,"P",{});var jZ=s(Vc);q$r=r(jZ,`Note:
Loading a model from its configuration file does `),X9e=n(jZ,"STRONG",{});var QCt=s(X9e);N$r=r(QCt,"not"),QCt.forEach(t),j$r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(jZ,"A",{href:!0});var WCt=s(oY);D$r=r(WCt,"from_pretrained()"),WCt.forEach(t),G$r=r(jZ," to load the model weights."),jZ.forEach(t),O$r=i(RA),T(MC.$$.fragment,RA),RA.forEach(t),V$r=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(C8.$$.fragment,Ul),X$r=i(Ul),z9e=n(Ul,"P",{});var HCt=s(z9e);z$r=r(HCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HCt.forEach(t),Q$r=i(Ul),vn=n(Ul,"P",{});var BA=s(vn);W$r=r(BA,"The model class to instantiate is selected based on the "),Q9e=n(BA,"CODE",{});var UCt=s(Q9e);H$r=r(UCt,"model_type"),UCt.forEach(t),U$r=r(BA,` property of the config object (either
passed as an argument or loaded from `),W9e=n(BA,"CODE",{});var JCt=s(W9e);J$r=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),Y$r=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H9e=n(BA,"CODE",{});var YCt=s(H9e);K$r=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),Z$r=r(BA,":"),BA.forEach(t),ekr=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);EC=n(Pe,"LI",{});var ZBe=s(EC);U9e=n(ZBe,"STRONG",{});var KCt=s(U9e);okr=r(KCt,"albert"),KCt.forEach(t),rkr=r(ZBe," \u2014 "),rY=n(ZBe,"A",{href:!0});var ZCt=s(rY);tkr=r(ZCt,"FlaxAlbertForSequenceClassification"),ZCt.forEach(t),akr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),nkr=i(Pe),CC=n(Pe,"LI",{});var ePe=s(CC);J9e=n(ePe,"STRONG",{});var e3t=s(J9e);skr=r(e3t,"bart"),e3t.forEach(t),lkr=r(ePe," \u2014 "),tY=n(ePe,"A",{href:!0});var o3t=s(tY);ikr=r(o3t,"FlaxBartForSequenceClassification"),o3t.forEach(t),dkr=r(ePe," (BART model)"),ePe.forEach(t),ckr=i(Pe),wC=n(Pe,"LI",{});var oPe=s(wC);Y9e=n(oPe,"STRONG",{});var r3t=s(Y9e);fkr=r(r3t,"bert"),r3t.forEach(t),mkr=r(oPe," \u2014 "),aY=n(oPe,"A",{href:!0});var t3t=s(aY);gkr=r(t3t,"FlaxBertForSequenceClassification"),t3t.forEach(t),hkr=r(oPe," (BERT model)"),oPe.forEach(t),pkr=i(Pe),AC=n(Pe,"LI",{});var rPe=s(AC);K9e=n(rPe,"STRONG",{});var a3t=s(K9e);ukr=r(a3t,"big_bird"),a3t.forEach(t),_kr=r(rPe," \u2014 "),nY=n(rPe,"A",{href:!0});var n3t=s(nY);bkr=r(n3t,"FlaxBigBirdForSequenceClassification"),n3t.forEach(t),vkr=r(rPe," (BigBird model)"),rPe.forEach(t),Fkr=i(Pe),yC=n(Pe,"LI",{});var tPe=s(yC);Z9e=n(tPe,"STRONG",{});var s3t=s(Z9e);Tkr=r(s3t,"distilbert"),s3t.forEach(t),Mkr=r(tPe," \u2014 "),sY=n(tPe,"A",{href:!0});var l3t=s(sY);Ekr=r(l3t,"FlaxDistilBertForSequenceClassification"),l3t.forEach(t),Ckr=r(tPe," (DistilBERT model)"),tPe.forEach(t),wkr=i(Pe),LC=n(Pe,"LI",{});var aPe=s(LC);eMe=n(aPe,"STRONG",{});var i3t=s(eMe);Akr=r(i3t,"electra"),i3t.forEach(t),ykr=r(aPe," \u2014 "),lY=n(aPe,"A",{href:!0});var d3t=s(lY);Lkr=r(d3t,"FlaxElectraForSequenceClassification"),d3t.forEach(t),xkr=r(aPe," (ELECTRA model)"),aPe.forEach(t),$kr=i(Pe),xC=n(Pe,"LI",{});var nPe=s(xC);oMe=n(nPe,"STRONG",{});var c3t=s(oMe);kkr=r(c3t,"mbart"),c3t.forEach(t),Skr=r(nPe," \u2014 "),iY=n(nPe,"A",{href:!0});var f3t=s(iY);Rkr=r(f3t,"FlaxMBartForSequenceClassification"),f3t.forEach(t),Bkr=r(nPe," (mBART model)"),nPe.forEach(t),Pkr=i(Pe),$C=n(Pe,"LI",{});var sPe=s($C);rMe=n(sPe,"STRONG",{});var m3t=s(rMe);Ikr=r(m3t,"roberta"),m3t.forEach(t),qkr=r(sPe," \u2014 "),dY=n(sPe,"A",{href:!0});var g3t=s(dY);Nkr=r(g3t,"FlaxRobertaForSequenceClassification"),g3t.forEach(t),jkr=r(sPe," (RoBERTa model)"),sPe.forEach(t),Dkr=i(Pe),kC=n(Pe,"LI",{});var lPe=s(kC);tMe=n(lPe,"STRONG",{});var h3t=s(tMe);Gkr=r(h3t,"roformer"),h3t.forEach(t),Okr=r(lPe," \u2014 "),cY=n(lPe,"A",{href:!0});var p3t=s(cY);Vkr=r(p3t,"FlaxRoFormerForSequenceClassification"),p3t.forEach(t),Xkr=r(lPe," (RoFormer model)"),lPe.forEach(t),zkr=i(Pe),SC=n(Pe,"LI",{});var iPe=s(SC);aMe=n(iPe,"STRONG",{});var u3t=s(aMe);Qkr=r(u3t,"xlm-roberta"),u3t.forEach(t),Wkr=r(iPe," \u2014 "),fY=n(iPe,"A",{href:!0});var _3t=s(fY);Hkr=r(_3t,"FlaxXLMRobertaForSequenceClassification"),_3t.forEach(t),Ukr=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),Pe.forEach(t),Jkr=i(Ul),T(RC.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),$qe=i(f),Xc=n(f,"H2",{class:!0});var qje=s(Xc);BC=n(qje,"A",{id:!0,class:!0,href:!0});var b3t=s(BC);nMe=n(b3t,"SPAN",{});var v3t=s(nMe);T(w8.$$.fragment,v3t),v3t.forEach(t),b3t.forEach(t),Ykr=i(qje),sMe=n(qje,"SPAN",{});var F3t=s(sMe);Kkr=r(F3t,"FlaxAutoModelForQuestionAnswering"),F3t.forEach(t),qje.forEach(t),kqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(A8.$$.fragment,Jl),Zkr=i(Jl),zc=n(Jl,"P",{});var DZ=s(zc);eSr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mY=n(DZ,"A",{href:!0});var T3t=s(mY);oSr=r(T3t,"from_pretrained()"),T3t.forEach(t),rSr=r(DZ," class method or the "),gY=n(DZ,"A",{href:!0});var M3t=s(gY);tSr=r(M3t,"from_config()"),M3t.forEach(t),aSr=r(DZ,` class
method.`),DZ.forEach(t),nSr=i(Jl),y8=n(Jl,"P",{});var Nje=s(y8);sSr=r(Nje,"This class cannot be instantiated directly using "),lMe=n(Nje,"CODE",{});var E3t=s(lMe);lSr=r(E3t,"__init__()"),E3t.forEach(t),iSr=r(Nje," (throws an error)."),Nje.forEach(t),dSr=i(Jl),zt=n(Jl,"DIV",{class:!0});var PA=s(zt);T(L8.$$.fragment,PA),cSr=i(PA),iMe=n(PA,"P",{});var C3t=s(iMe);fSr=r(C3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C3t.forEach(t),mSr=i(PA),Qc=n(PA,"P",{});var GZ=s(Qc);gSr=r(GZ,`Note:
Loading a model from its configuration file does `),dMe=n(GZ,"STRONG",{});var w3t=s(dMe);hSr=r(w3t,"not"),w3t.forEach(t),pSr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(GZ,"A",{href:!0});var A3t=s(hY);uSr=r(A3t,"from_pretrained()"),A3t.forEach(t),_Sr=r(GZ," to load the model weights."),GZ.forEach(t),bSr=i(PA),T(PC.$$.fragment,PA),PA.forEach(t),vSr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(x8.$$.fragment,Yl),FSr=i(Yl),cMe=n(Yl,"P",{});var y3t=s(cMe);TSr=r(y3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y3t.forEach(t),MSr=i(Yl),Fn=n(Yl,"P",{});var IA=s(Fn);ESr=r(IA,"The model class to instantiate is selected based on the "),fMe=n(IA,"CODE",{});var L3t=s(fMe);CSr=r(L3t,"model_type"),L3t.forEach(t),wSr=r(IA,` property of the config object (either
passed as an argument or loaded from `),mMe=n(IA,"CODE",{});var x3t=s(mMe);ASr=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),ySr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=n(IA,"CODE",{});var $3t=s(gMe);LSr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),xSr=r(IA,":"),IA.forEach(t),$Sr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);IC=n(Ie,"LI",{});var dPe=s(IC);hMe=n(dPe,"STRONG",{});var k3t=s(hMe);kSr=r(k3t,"albert"),k3t.forEach(t),SSr=r(dPe," \u2014 "),pY=n(dPe,"A",{href:!0});var S3t=s(pY);RSr=r(S3t,"FlaxAlbertForQuestionAnswering"),S3t.forEach(t),BSr=r(dPe," (ALBERT model)"),dPe.forEach(t),PSr=i(Ie),qC=n(Ie,"LI",{});var cPe=s(qC);pMe=n(cPe,"STRONG",{});var R3t=s(pMe);ISr=r(R3t,"bart"),R3t.forEach(t),qSr=r(cPe," \u2014 "),uY=n(cPe,"A",{href:!0});var B3t=s(uY);NSr=r(B3t,"FlaxBartForQuestionAnswering"),B3t.forEach(t),jSr=r(cPe," (BART model)"),cPe.forEach(t),DSr=i(Ie),NC=n(Ie,"LI",{});var fPe=s(NC);uMe=n(fPe,"STRONG",{});var P3t=s(uMe);GSr=r(P3t,"bert"),P3t.forEach(t),OSr=r(fPe," \u2014 "),_Y=n(fPe,"A",{href:!0});var I3t=s(_Y);VSr=r(I3t,"FlaxBertForQuestionAnswering"),I3t.forEach(t),XSr=r(fPe," (BERT model)"),fPe.forEach(t),zSr=i(Ie),jC=n(Ie,"LI",{});var mPe=s(jC);_Me=n(mPe,"STRONG",{});var q3t=s(_Me);QSr=r(q3t,"big_bird"),q3t.forEach(t),WSr=r(mPe," \u2014 "),bY=n(mPe,"A",{href:!0});var N3t=s(bY);HSr=r(N3t,"FlaxBigBirdForQuestionAnswering"),N3t.forEach(t),USr=r(mPe," (BigBird model)"),mPe.forEach(t),JSr=i(Ie),DC=n(Ie,"LI",{});var gPe=s(DC);bMe=n(gPe,"STRONG",{});var j3t=s(bMe);YSr=r(j3t,"distilbert"),j3t.forEach(t),KSr=r(gPe," \u2014 "),vY=n(gPe,"A",{href:!0});var D3t=s(vY);ZSr=r(D3t,"FlaxDistilBertForQuestionAnswering"),D3t.forEach(t),eRr=r(gPe," (DistilBERT model)"),gPe.forEach(t),oRr=i(Ie),GC=n(Ie,"LI",{});var hPe=s(GC);vMe=n(hPe,"STRONG",{});var G3t=s(vMe);rRr=r(G3t,"electra"),G3t.forEach(t),tRr=r(hPe," \u2014 "),FY=n(hPe,"A",{href:!0});var O3t=s(FY);aRr=r(O3t,"FlaxElectraForQuestionAnswering"),O3t.forEach(t),nRr=r(hPe," (ELECTRA model)"),hPe.forEach(t),sRr=i(Ie),OC=n(Ie,"LI",{});var pPe=s(OC);FMe=n(pPe,"STRONG",{});var V3t=s(FMe);lRr=r(V3t,"mbart"),V3t.forEach(t),iRr=r(pPe," \u2014 "),TY=n(pPe,"A",{href:!0});var X3t=s(TY);dRr=r(X3t,"FlaxMBartForQuestionAnswering"),X3t.forEach(t),cRr=r(pPe," (mBART model)"),pPe.forEach(t),fRr=i(Ie),VC=n(Ie,"LI",{});var uPe=s(VC);TMe=n(uPe,"STRONG",{});var z3t=s(TMe);mRr=r(z3t,"roberta"),z3t.forEach(t),gRr=r(uPe," \u2014 "),MY=n(uPe,"A",{href:!0});var Q3t=s(MY);hRr=r(Q3t,"FlaxRobertaForQuestionAnswering"),Q3t.forEach(t),pRr=r(uPe," (RoBERTa model)"),uPe.forEach(t),uRr=i(Ie),XC=n(Ie,"LI",{});var _Pe=s(XC);MMe=n(_Pe,"STRONG",{});var W3t=s(MMe);_Rr=r(W3t,"roformer"),W3t.forEach(t),bRr=r(_Pe," \u2014 "),EY=n(_Pe,"A",{href:!0});var H3t=s(EY);vRr=r(H3t,"FlaxRoFormerForQuestionAnswering"),H3t.forEach(t),FRr=r(_Pe," (RoFormer model)"),_Pe.forEach(t),TRr=i(Ie),zC=n(Ie,"LI",{});var bPe=s(zC);EMe=n(bPe,"STRONG",{});var U3t=s(EMe);MRr=r(U3t,"xlm-roberta"),U3t.forEach(t),ERr=r(bPe," \u2014 "),CY=n(bPe,"A",{href:!0});var J3t=s(CY);CRr=r(J3t,"FlaxXLMRobertaForQuestionAnswering"),J3t.forEach(t),wRr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),Ie.forEach(t),ARr=i(Yl),T(QC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Sqe=i(f),Wc=n(f,"H2",{class:!0});var jje=s(Wc);WC=n(jje,"A",{id:!0,class:!0,href:!0});var Y3t=s(WC);CMe=n(Y3t,"SPAN",{});var K3t=s(CMe);T($8.$$.fragment,K3t),K3t.forEach(t),Y3t.forEach(t),yRr=i(jje),wMe=n(jje,"SPAN",{});var Z3t=s(wMe);LRr=r(Z3t,"FlaxAutoModelForTokenClassification"),Z3t.forEach(t),jje.forEach(t),Rqe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(k8.$$.fragment,Kl),xRr=i(Kl),Hc=n(Kl,"P",{});var OZ=s(Hc);$Rr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wY=n(OZ,"A",{href:!0});var ewt=s(wY);kRr=r(ewt,"from_pretrained()"),ewt.forEach(t),SRr=r(OZ," class method or the "),AY=n(OZ,"A",{href:!0});var owt=s(AY);RRr=r(owt,"from_config()"),owt.forEach(t),BRr=r(OZ,` class
method.`),OZ.forEach(t),PRr=i(Kl),S8=n(Kl,"P",{});var Dje=s(S8);IRr=r(Dje,"This class cannot be instantiated directly using "),AMe=n(Dje,"CODE",{});var rwt=s(AMe);qRr=r(rwt,"__init__()"),rwt.forEach(t),NRr=r(Dje," (throws an error)."),Dje.forEach(t),jRr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var qA=s(Qt);T(R8.$$.fragment,qA),DRr=i(qA),yMe=n(qA,"P",{});var twt=s(yMe);GRr=r(twt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),twt.forEach(t),ORr=i(qA),Uc=n(qA,"P",{});var VZ=s(Uc);VRr=r(VZ,`Note:
Loading a model from its configuration file does `),LMe=n(VZ,"STRONG",{});var awt=s(LMe);XRr=r(awt,"not"),awt.forEach(t),zRr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(VZ,"A",{href:!0});var nwt=s(yY);QRr=r(nwt,"from_pretrained()"),nwt.forEach(t),WRr=r(VZ," to load the model weights."),VZ.forEach(t),HRr=i(qA),T(HC.$$.fragment,qA),qA.forEach(t),URr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(B8.$$.fragment,Zl),JRr=i(Zl),xMe=n(Zl,"P",{});var swt=s(xMe);YRr=r(swt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),swt.forEach(t),KRr=i(Zl),Tn=n(Zl,"P",{});var NA=s(Tn);ZRr=r(NA,"The model class to instantiate is selected based on the "),$Me=n(NA,"CODE",{});var lwt=s($Me);eBr=r(lwt,"model_type"),lwt.forEach(t),oBr=r(NA,` property of the config object (either
passed as an argument or loaded from `),kMe=n(NA,"CODE",{});var iwt=s(kMe);rBr=r(iwt,"pretrained_model_name_or_path"),iwt.forEach(t),tBr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(NA,"CODE",{});var dwt=s(SMe);aBr=r(dwt,"pretrained_model_name_or_path"),dwt.forEach(t),nBr=r(NA,":"),NA.forEach(t),sBr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);UC=n(Fo,"LI",{});var vPe=s(UC);RMe=n(vPe,"STRONG",{});var cwt=s(RMe);lBr=r(cwt,"albert"),cwt.forEach(t),iBr=r(vPe," \u2014 "),LY=n(vPe,"A",{href:!0});var fwt=s(LY);dBr=r(fwt,"FlaxAlbertForTokenClassification"),fwt.forEach(t),cBr=r(vPe," (ALBERT model)"),vPe.forEach(t),fBr=i(Fo),JC=n(Fo,"LI",{});var FPe=s(JC);BMe=n(FPe,"STRONG",{});var mwt=s(BMe);mBr=r(mwt,"bert"),mwt.forEach(t),gBr=r(FPe," \u2014 "),xY=n(FPe,"A",{href:!0});var gwt=s(xY);hBr=r(gwt,"FlaxBertForTokenClassification"),gwt.forEach(t),pBr=r(FPe," (BERT model)"),FPe.forEach(t),uBr=i(Fo),YC=n(Fo,"LI",{});var TPe=s(YC);PMe=n(TPe,"STRONG",{});var hwt=s(PMe);_Br=r(hwt,"big_bird"),hwt.forEach(t),bBr=r(TPe," \u2014 "),$Y=n(TPe,"A",{href:!0});var pwt=s($Y);vBr=r(pwt,"FlaxBigBirdForTokenClassification"),pwt.forEach(t),FBr=r(TPe," (BigBird model)"),TPe.forEach(t),TBr=i(Fo),KC=n(Fo,"LI",{});var MPe=s(KC);IMe=n(MPe,"STRONG",{});var uwt=s(IMe);MBr=r(uwt,"distilbert"),uwt.forEach(t),EBr=r(MPe," \u2014 "),kY=n(MPe,"A",{href:!0});var _wt=s(kY);CBr=r(_wt,"FlaxDistilBertForTokenClassification"),_wt.forEach(t),wBr=r(MPe," (DistilBERT model)"),MPe.forEach(t),ABr=i(Fo),ZC=n(Fo,"LI",{});var EPe=s(ZC);qMe=n(EPe,"STRONG",{});var bwt=s(qMe);yBr=r(bwt,"electra"),bwt.forEach(t),LBr=r(EPe," \u2014 "),SY=n(EPe,"A",{href:!0});var vwt=s(SY);xBr=r(vwt,"FlaxElectraForTokenClassification"),vwt.forEach(t),$Br=r(EPe," (ELECTRA model)"),EPe.forEach(t),kBr=i(Fo),e3=n(Fo,"LI",{});var CPe=s(e3);NMe=n(CPe,"STRONG",{});var Fwt=s(NMe);SBr=r(Fwt,"roberta"),Fwt.forEach(t),RBr=r(CPe," \u2014 "),RY=n(CPe,"A",{href:!0});var Twt=s(RY);BBr=r(Twt,"FlaxRobertaForTokenClassification"),Twt.forEach(t),PBr=r(CPe," (RoBERTa model)"),CPe.forEach(t),IBr=i(Fo),o3=n(Fo,"LI",{});var wPe=s(o3);jMe=n(wPe,"STRONG",{});var Mwt=s(jMe);qBr=r(Mwt,"roformer"),Mwt.forEach(t),NBr=r(wPe," \u2014 "),BY=n(wPe,"A",{href:!0});var Ewt=s(BY);jBr=r(Ewt,"FlaxRoFormerForTokenClassification"),Ewt.forEach(t),DBr=r(wPe," (RoFormer model)"),wPe.forEach(t),GBr=i(Fo),r3=n(Fo,"LI",{});var APe=s(r3);DMe=n(APe,"STRONG",{});var Cwt=s(DMe);OBr=r(Cwt,"xlm-roberta"),Cwt.forEach(t),VBr=r(APe," \u2014 "),PY=n(APe,"A",{href:!0});var wwt=s(PY);XBr=r(wwt,"FlaxXLMRobertaForTokenClassification"),wwt.forEach(t),zBr=r(APe," (XLM-RoBERTa model)"),APe.forEach(t),Fo.forEach(t),QBr=i(Zl),T(t3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Bqe=i(f),Jc=n(f,"H2",{class:!0});var Gje=s(Jc);a3=n(Gje,"A",{id:!0,class:!0,href:!0});var Awt=s(a3);GMe=n(Awt,"SPAN",{});var ywt=s(GMe);T(P8.$$.fragment,ywt),ywt.forEach(t),Awt.forEach(t),WBr=i(Gje),OMe=n(Gje,"SPAN",{});var Lwt=s(OMe);HBr=r(Lwt,"FlaxAutoModelForMultipleChoice"),Lwt.forEach(t),Gje.forEach(t),Pqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(I8.$$.fragment,ei),UBr=i(ei),Yc=n(ei,"P",{});var XZ=s(Yc);JBr=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IY=n(XZ,"A",{href:!0});var xwt=s(IY);YBr=r(xwt,"from_pretrained()"),xwt.forEach(t),KBr=r(XZ," class method or the "),qY=n(XZ,"A",{href:!0});var $wt=s(qY);ZBr=r($wt,"from_config()"),$wt.forEach(t),ePr=r(XZ,` class
method.`),XZ.forEach(t),oPr=i(ei),q8=n(ei,"P",{});var Oje=s(q8);rPr=r(Oje,"This class cannot be instantiated directly using "),VMe=n(Oje,"CODE",{});var kwt=s(VMe);tPr=r(kwt,"__init__()"),kwt.forEach(t),aPr=r(Oje," (throws an error)."),Oje.forEach(t),nPr=i(ei),Wt=n(ei,"DIV",{class:!0});var jA=s(Wt);T(N8.$$.fragment,jA),sPr=i(jA),XMe=n(jA,"P",{});var Swt=s(XMe);lPr=r(Swt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Swt.forEach(t),iPr=i(jA),Kc=n(jA,"P",{});var zZ=s(Kc);dPr=r(zZ,`Note:
Loading a model from its configuration file does `),zMe=n(zZ,"STRONG",{});var Rwt=s(zMe);cPr=r(Rwt,"not"),Rwt.forEach(t),fPr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(zZ,"A",{href:!0});var Bwt=s(NY);mPr=r(Bwt,"from_pretrained()"),Bwt.forEach(t),gPr=r(zZ," to load the model weights."),zZ.forEach(t),hPr=i(jA),T(n3.$$.fragment,jA),jA.forEach(t),pPr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(j8.$$.fragment,oi),uPr=i(oi),QMe=n(oi,"P",{});var Pwt=s(QMe);_Pr=r(Pwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pwt.forEach(t),bPr=i(oi),Mn=n(oi,"P",{});var DA=s(Mn);vPr=r(DA,"The model class to instantiate is selected based on the "),WMe=n(DA,"CODE",{});var Iwt=s(WMe);FPr=r(Iwt,"model_type"),Iwt.forEach(t),TPr=r(DA,` property of the config object (either
passed as an argument or loaded from `),HMe=n(DA,"CODE",{});var qwt=s(HMe);MPr=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),EPr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UMe=n(DA,"CODE",{});var Nwt=s(UMe);CPr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),wPr=r(DA,":"),DA.forEach(t),APr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);s3=n(To,"LI",{});var yPe=s(s3);JMe=n(yPe,"STRONG",{});var jwt=s(JMe);yPr=r(jwt,"albert"),jwt.forEach(t),LPr=r(yPe," \u2014 "),jY=n(yPe,"A",{href:!0});var Dwt=s(jY);xPr=r(Dwt,"FlaxAlbertForMultipleChoice"),Dwt.forEach(t),$Pr=r(yPe," (ALBERT model)"),yPe.forEach(t),kPr=i(To),l3=n(To,"LI",{});var LPe=s(l3);YMe=n(LPe,"STRONG",{});var Gwt=s(YMe);SPr=r(Gwt,"bert"),Gwt.forEach(t),RPr=r(LPe," \u2014 "),DY=n(LPe,"A",{href:!0});var Owt=s(DY);BPr=r(Owt,"FlaxBertForMultipleChoice"),Owt.forEach(t),PPr=r(LPe," (BERT model)"),LPe.forEach(t),IPr=i(To),i3=n(To,"LI",{});var xPe=s(i3);KMe=n(xPe,"STRONG",{});var Vwt=s(KMe);qPr=r(Vwt,"big_bird"),Vwt.forEach(t),NPr=r(xPe," \u2014 "),GY=n(xPe,"A",{href:!0});var Xwt=s(GY);jPr=r(Xwt,"FlaxBigBirdForMultipleChoice"),Xwt.forEach(t),DPr=r(xPe," (BigBird model)"),xPe.forEach(t),GPr=i(To),d3=n(To,"LI",{});var $Pe=s(d3);ZMe=n($Pe,"STRONG",{});var zwt=s(ZMe);OPr=r(zwt,"distilbert"),zwt.forEach(t),VPr=r($Pe," \u2014 "),OY=n($Pe,"A",{href:!0});var Qwt=s(OY);XPr=r(Qwt,"FlaxDistilBertForMultipleChoice"),Qwt.forEach(t),zPr=r($Pe," (DistilBERT model)"),$Pe.forEach(t),QPr=i(To),c3=n(To,"LI",{});var kPe=s(c3);e4e=n(kPe,"STRONG",{});var Wwt=s(e4e);WPr=r(Wwt,"electra"),Wwt.forEach(t),HPr=r(kPe," \u2014 "),VY=n(kPe,"A",{href:!0});var Hwt=s(VY);UPr=r(Hwt,"FlaxElectraForMultipleChoice"),Hwt.forEach(t),JPr=r(kPe," (ELECTRA model)"),kPe.forEach(t),YPr=i(To),f3=n(To,"LI",{});var SPe=s(f3);o4e=n(SPe,"STRONG",{});var Uwt=s(o4e);KPr=r(Uwt,"roberta"),Uwt.forEach(t),ZPr=r(SPe," \u2014 "),XY=n(SPe,"A",{href:!0});var Jwt=s(XY);eIr=r(Jwt,"FlaxRobertaForMultipleChoice"),Jwt.forEach(t),oIr=r(SPe," (RoBERTa model)"),SPe.forEach(t),rIr=i(To),m3=n(To,"LI",{});var RPe=s(m3);r4e=n(RPe,"STRONG",{});var Ywt=s(r4e);tIr=r(Ywt,"roformer"),Ywt.forEach(t),aIr=r(RPe," \u2014 "),zY=n(RPe,"A",{href:!0});var Kwt=s(zY);nIr=r(Kwt,"FlaxRoFormerForMultipleChoice"),Kwt.forEach(t),sIr=r(RPe," (RoFormer model)"),RPe.forEach(t),lIr=i(To),g3=n(To,"LI",{});var BPe=s(g3);t4e=n(BPe,"STRONG",{});var Zwt=s(t4e);iIr=r(Zwt,"xlm-roberta"),Zwt.forEach(t),dIr=r(BPe," \u2014 "),QY=n(BPe,"A",{href:!0});var eAt=s(QY);cIr=r(eAt,"FlaxXLMRobertaForMultipleChoice"),eAt.forEach(t),fIr=r(BPe," (XLM-RoBERTa model)"),BPe.forEach(t),To.forEach(t),mIr=i(oi),T(h3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Iqe=i(f),Zc=n(f,"H2",{class:!0});var Vje=s(Zc);p3=n(Vje,"A",{id:!0,class:!0,href:!0});var oAt=s(p3);a4e=n(oAt,"SPAN",{});var rAt=s(a4e);T(D8.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),gIr=i(Vje),n4e=n(Vje,"SPAN",{});var tAt=s(n4e);hIr=r(tAt,"FlaxAutoModelForNextSentencePrediction"),tAt.forEach(t),Vje.forEach(t),qqe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(G8.$$.fragment,ri),pIr=i(ri),ef=n(ri,"P",{});var QZ=s(ef);uIr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=n(QZ,"A",{href:!0});var aAt=s(WY);_Ir=r(aAt,"from_pretrained()"),aAt.forEach(t),bIr=r(QZ," class method or the "),HY=n(QZ,"A",{href:!0});var nAt=s(HY);vIr=r(nAt,"from_config()"),nAt.forEach(t),FIr=r(QZ,` class
method.`),QZ.forEach(t),TIr=i(ri),O8=n(ri,"P",{});var Xje=s(O8);MIr=r(Xje,"This class cannot be instantiated directly using "),s4e=n(Xje,"CODE",{});var sAt=s(s4e);EIr=r(sAt,"__init__()"),sAt.forEach(t),CIr=r(Xje," (throws an error)."),Xje.forEach(t),wIr=i(ri),Ht=n(ri,"DIV",{class:!0});var GA=s(Ht);T(V8.$$.fragment,GA),AIr=i(GA),l4e=n(GA,"P",{});var lAt=s(l4e);yIr=r(lAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lAt.forEach(t),LIr=i(GA),of=n(GA,"P",{});var WZ=s(of);xIr=r(WZ,`Note:
Loading a model from its configuration file does `),i4e=n(WZ,"STRONG",{});var iAt=s(i4e);$Ir=r(iAt,"not"),iAt.forEach(t),kIr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(WZ,"A",{href:!0});var dAt=s(UY);SIr=r(dAt,"from_pretrained()"),dAt.forEach(t),RIr=r(WZ," to load the model weights."),WZ.forEach(t),BIr=i(GA),T(u3.$$.fragment,GA),GA.forEach(t),PIr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(X8.$$.fragment,ti),IIr=i(ti),d4e=n(ti,"P",{});var cAt=s(d4e);qIr=r(cAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cAt.forEach(t),NIr=i(ti),En=n(ti,"P",{});var OA=s(En);jIr=r(OA,"The model class to instantiate is selected based on the "),c4e=n(OA,"CODE",{});var fAt=s(c4e);DIr=r(fAt,"model_type"),fAt.forEach(t),GIr=r(OA,` property of the config object (either
passed as an argument or loaded from `),f4e=n(OA,"CODE",{});var mAt=s(f4e);OIr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),VIr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(OA,"CODE",{});var gAt=s(m4e);XIr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),zIr=r(OA,":"),OA.forEach(t),QIr=i(ti),g4e=n(ti,"UL",{});var hAt=s(g4e);_3=n(hAt,"LI",{});var PPe=s(_3);h4e=n(PPe,"STRONG",{});var pAt=s(h4e);WIr=r(pAt,"bert"),pAt.forEach(t),HIr=r(PPe," \u2014 "),JY=n(PPe,"A",{href:!0});var uAt=s(JY);UIr=r(uAt,"FlaxBertForNextSentencePrediction"),uAt.forEach(t),JIr=r(PPe," (BERT model)"),PPe.forEach(t),hAt.forEach(t),YIr=i(ti),T(b3.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Nqe=i(f),rf=n(f,"H2",{class:!0});var zje=s(rf);v3=n(zje,"A",{id:!0,class:!0,href:!0});var _At=s(v3);p4e=n(_At,"SPAN",{});var bAt=s(p4e);T(z8.$$.fragment,bAt),bAt.forEach(t),_At.forEach(t),KIr=i(zje),u4e=n(zje,"SPAN",{});var vAt=s(u4e);ZIr=r(vAt,"FlaxAutoModelForImageClassification"),vAt.forEach(t),zje.forEach(t),jqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(Q8.$$.fragment,ai),eqr=i(ai),tf=n(ai,"P",{});var HZ=s(tf);oqr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),YY=n(HZ,"A",{href:!0});var FAt=s(YY);rqr=r(FAt,"from_pretrained()"),FAt.forEach(t),tqr=r(HZ," class method or the "),KY=n(HZ,"A",{href:!0});var TAt=s(KY);aqr=r(TAt,"from_config()"),TAt.forEach(t),nqr=r(HZ,` class
method.`),HZ.forEach(t),sqr=i(ai),W8=n(ai,"P",{});var Qje=s(W8);lqr=r(Qje,"This class cannot be instantiated directly using "),_4e=n(Qje,"CODE",{});var MAt=s(_4e);iqr=r(MAt,"__init__()"),MAt.forEach(t),dqr=r(Qje," (throws an error)."),Qje.forEach(t),cqr=i(ai),Ut=n(ai,"DIV",{class:!0});var VA=s(Ut);T(H8.$$.fragment,VA),fqr=i(VA),b4e=n(VA,"P",{});var EAt=s(b4e);mqr=r(EAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EAt.forEach(t),gqr=i(VA),af=n(VA,"P",{});var UZ=s(af);hqr=r(UZ,`Note:
Loading a model from its configuration file does `),v4e=n(UZ,"STRONG",{});var CAt=s(v4e);pqr=r(CAt,"not"),CAt.forEach(t),uqr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(UZ,"A",{href:!0});var wAt=s(ZY);_qr=r(wAt,"from_pretrained()"),wAt.forEach(t),bqr=r(UZ," to load the model weights."),UZ.forEach(t),vqr=i(VA),T(F3.$$.fragment,VA),VA.forEach(t),Fqr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(U8.$$.fragment,ni),Tqr=i(ni),F4e=n(ni,"P",{});var AAt=s(F4e);Mqr=r(AAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),AAt.forEach(t),Eqr=i(ni),Cn=n(ni,"P",{});var XA=s(Cn);Cqr=r(XA,"The model class to instantiate is selected based on the "),T4e=n(XA,"CODE",{});var yAt=s(T4e);wqr=r(yAt,"model_type"),yAt.forEach(t),Aqr=r(XA,` property of the config object (either
passed as an argument or loaded from `),M4e=n(XA,"CODE",{});var LAt=s(M4e);yqr=r(LAt,"pretrained_model_name_or_path"),LAt.forEach(t),Lqr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(XA,"CODE",{});var xAt=s(E4e);xqr=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),$qr=r(XA,":"),XA.forEach(t),kqr=i(ni),J8=n(ni,"UL",{});var Wje=s(J8);T3=n(Wje,"LI",{});var IPe=s(T3);C4e=n(IPe,"STRONG",{});var $At=s(C4e);Sqr=r($At,"beit"),$At.forEach(t),Rqr=r(IPe," \u2014 "),eK=n(IPe,"A",{href:!0});var kAt=s(eK);Bqr=r(kAt,"FlaxBeitForImageClassification"),kAt.forEach(t),Pqr=r(IPe," (BEiT model)"),IPe.forEach(t),Iqr=i(Wje),M3=n(Wje,"LI",{});var qPe=s(M3);w4e=n(qPe,"STRONG",{});var SAt=s(w4e);qqr=r(SAt,"vit"),SAt.forEach(t),Nqr=r(qPe," \u2014 "),oK=n(qPe,"A",{href:!0});var RAt=s(oK);jqr=r(RAt,"FlaxViTForImageClassification"),RAt.forEach(t),Dqr=r(qPe," (ViT model)"),qPe.forEach(t),Wje.forEach(t),Gqr=i(ni),T(E3.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Dqe=i(f),nf=n(f,"H2",{class:!0});var Hje=s(nf);C3=n(Hje,"A",{id:!0,class:!0,href:!0});var BAt=s(C3);A4e=n(BAt,"SPAN",{});var PAt=s(A4e);T(Y8.$$.fragment,PAt),PAt.forEach(t),BAt.forEach(t),Oqr=i(Hje),y4e=n(Hje,"SPAN",{});var IAt=s(y4e);Vqr=r(IAt,"FlaxAutoModelForVision2Seq"),IAt.forEach(t),Hje.forEach(t),Gqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(K8.$$.fragment,si),Xqr=i(si),sf=n(si,"P",{});var JZ=s(sf);zqr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rK=n(JZ,"A",{href:!0});var qAt=s(rK);Qqr=r(qAt,"from_pretrained()"),qAt.forEach(t),Wqr=r(JZ," class method or the "),tK=n(JZ,"A",{href:!0});var NAt=s(tK);Hqr=r(NAt,"from_config()"),NAt.forEach(t),Uqr=r(JZ,` class
method.`),JZ.forEach(t),Jqr=i(si),Z8=n(si,"P",{});var Uje=s(Z8);Yqr=r(Uje,"This class cannot be instantiated directly using "),L4e=n(Uje,"CODE",{});var jAt=s(L4e);Kqr=r(jAt,"__init__()"),jAt.forEach(t),Zqr=r(Uje," (throws an error)."),Uje.forEach(t),eNr=i(si),Jt=n(si,"DIV",{class:!0});var zA=s(Jt);T(ex.$$.fragment,zA),oNr=i(zA),x4e=n(zA,"P",{});var DAt=s(x4e);rNr=r(DAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DAt.forEach(t),tNr=i(zA),lf=n(zA,"P",{});var YZ=s(lf);aNr=r(YZ,`Note:
Loading a model from its configuration file does `),$4e=n(YZ,"STRONG",{});var GAt=s($4e);nNr=r(GAt,"not"),GAt.forEach(t),sNr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(YZ,"A",{href:!0});var OAt=s(aK);lNr=r(OAt,"from_pretrained()"),OAt.forEach(t),iNr=r(YZ," to load the model weights."),YZ.forEach(t),dNr=i(zA),T(w3.$$.fragment,zA),zA.forEach(t),cNr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(ox.$$.fragment,li),fNr=i(li),k4e=n(li,"P",{});var VAt=s(k4e);mNr=r(VAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VAt.forEach(t),gNr=i(li),wn=n(li,"P",{});var QA=s(wn);hNr=r(QA,"The model class to instantiate is selected based on the "),S4e=n(QA,"CODE",{});var XAt=s(S4e);pNr=r(XAt,"model_type"),XAt.forEach(t),uNr=r(QA,` property of the config object (either
passed as an argument or loaded from `),R4e=n(QA,"CODE",{});var zAt=s(R4e);_Nr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),bNr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(QA,"CODE",{});var QAt=s(B4e);vNr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),FNr=r(QA,":"),QA.forEach(t),TNr=i(li),P4e=n(li,"UL",{});var WAt=s(P4e);A3=n(WAt,"LI",{});var NPe=s(A3);I4e=n(NPe,"STRONG",{});var HAt=s(I4e);MNr=r(HAt,"vision-encoder-decoder"),HAt.forEach(t),ENr=r(NPe," \u2014 "),nK=n(NPe,"A",{href:!0});var UAt=s(nK);CNr=r(UAt,"FlaxVisionEncoderDecoderModel"),UAt.forEach(t),wNr=r(NPe," (Vision Encoder decoder model)"),NPe.forEach(t),WAt.forEach(t),ANr=i(li),T(y3.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Z0t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(F$,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(T$,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertConfig"),c(M$,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartConfig"),c(E$,"href","/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitConfig"),c(C$,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertConfig"),c(w$,"href","/docs/transformers/pr_17291/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(A$,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdConfig"),c(y$,"href","/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(L$,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(x$,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c($$,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertConfig"),c(k$,"href","/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineConfig"),c(S$,"href","/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPConfig"),c(R$,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertConfig"),c(B$,"href","/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextConfig"),c(P$,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLConfig"),c(I$,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(q$,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(N$,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(j$,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaConfig"),c(D$,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(G$,"href","/docs/transformers/pr_17291/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(O$,"href","/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTConfig"),c(V$,"href","/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrConfig"),c(X$,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertConfig"),c(z$,"href","/docs/transformers/pr_17291/en/model_doc/dpr#transformers.DPRConfig"),c(Q$,"href","/docs/transformers/pr_17291/en/model_doc/dpt#transformers.DPTConfig"),c(W$,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraConfig"),c(H$,"href","/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(U$,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertConfig"),c(J$,"href","/docs/transformers/pr_17291/en/model_doc/flava#transformers.FlavaConfig"),c(Y$,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetConfig"),c(K$,"href","/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTConfig"),c(Z$,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelConfig"),c(ek,"href","/docs/transformers/pr_17291/en/model_doc/glpn#transformers.GLPNConfig"),c(ok,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Config"),c(rk,"href","/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(tk,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJConfig"),c(ak,"href","/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertConfig"),c(nk,"href","/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertConfig"),c(sk,"href","/docs/transformers/pr_17291/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(lk,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ik,"href","/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(dk,"href","/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDConfig"),c(ck,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerConfig"),c(fk,"href","/docs/transformers/pr_17291/en/model_doc/luke#transformers.LukeConfig"),c(mk,"href","/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertConfig"),c(gk,"href","/docs/transformers/pr_17291/en/model_doc/m2m_100#transformers.M2M100Config"),c(hk,"href","/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianConfig"),c(pk,"href","/docs/transformers/pr_17291/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uk,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartConfig"),c(_k,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bk,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(vk,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetConfig"),c(Fk,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Config"),c(Tk,"href","/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Mk,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ek,"href","/docs/transformers/pr_17291/en/model_doc/opt#transformers.OPTConfig"),c(Ck,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusConfig"),c(wk,"href","/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Ak,"href","/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartConfig"),c(yk,"href","/docs/transformers/pr_17291/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Lk,"href","/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(xk,"href","/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertConfig"),c($k,"href","/docs/transformers/pr_17291/en/model_doc/rag#transformers.RagConfig"),c(kk,"href","/docs/transformers/pr_17291/en/model_doc/realm#transformers.RealmConfig"),c(Sk,"href","/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerConfig"),c(Rk,"href","/docs/transformers/pr_17291/en/model_doc/regnet#transformers.RegNetConfig"),c(Bk,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertConfig"),c(Pk,"href","/docs/transformers/pr_17291/en/model_doc/resnet#transformers.ResNetConfig"),c(Ik,"href","/docs/transformers/pr_17291/en/model_doc/retribert#transformers.RetriBertConfig"),c(qk,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaConfig"),c(Nk,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerConfig"),c(jk,"href","/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerConfig"),c(Dk,"href","/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWConfig"),c(Gk,"href","/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDConfig"),c(Ok,"href","/docs/transformers/pr_17291/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Vk,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Xk,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(zk,"href","/docs/transformers/pr_17291/en/model_doc/splinter#transformers.SplinterConfig"),c(Qk,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Wk,"href","/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinConfig"),c(Hk,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Config"),c(Uk,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasConfig"),c(Jk,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Yk,"href","/docs/transformers/pr_17291/en/model_doc/trocr#transformers.TrOCRConfig"),c(Kk,"href","/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Zk,"href","/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(eS,"href","/docs/transformers/pr_17291/en/model_doc/van#transformers.VanConfig"),c(oS,"href","/docs/transformers/pr_17291/en/model_doc/vilt#transformers.ViltConfig"),c(rS,"href","/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(tS,"href","/docs/transformers/pr_17291/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(aS,"href","/docs/transformers/pr_17291/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(nS,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTConfig"),c(sS,"href","/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(lS,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(iS,"href","/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMConfig"),c(dS,"href","/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMConfig"),c(cS,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMConfig"),c(fS,"href","/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(mS,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(gS,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(hS,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetConfig"),c(pS,"href","/docs/transformers/pr_17291/en/model_doc/yolos#transformers.YolosConfig"),c(uS,"href","/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(_S,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(bS,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertTokenizer"),c(vS,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(FS,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartTokenizer"),c(TS,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartTokenizerFast"),c(MS,"href","/docs/transformers/pr_17291/en/model_doc/barthez#transformers.BarthezTokenizer"),c(ES,"href","/docs/transformers/pr_17291/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(CS,"href","/docs/transformers/pr_17291/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(wS,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertTokenizer"),c(AS,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertTokenizerFast"),c(yS,"href","/docs/transformers/pr_17291/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(LS,"href","/docs/transformers/pr_17291/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(xS,"href","/docs/transformers/pr_17291/en/model_doc/bertweet#transformers.BertweetTokenizer"),c($S,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(kS,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(SS,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(RS,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(BS,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(PS,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(IS,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(qS,"href","/docs/transformers/pr_17291/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(NS,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertTokenizer"),c(jS,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(DS,"href","/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineTokenizer"),c(GS,"href","/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPTokenizer"),c(OS,"href","/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(VS,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(XS,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(zS,"href","/docs/transformers/pr_17291/en/model_doc/cpm#transformers.CpmTokenizer"),c(QS,"href","/docs/transformers/pr_17291/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(WS,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(HS,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaTokenizer"),c(US,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JS,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaTokenizer"),c(YS,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(KS,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(ZS,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(eR,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(oR,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(rR,"href","/docs/transformers/pr_17291/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(tR,"href","/docs/transformers/pr_17291/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(aR,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraTokenizer"),c(nR,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(sR,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(lR,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetTokenizer"),c(iR,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(dR,"href","/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(cR,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelTokenizer"),c(fR,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(mR,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gR,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hR,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(pR,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(uR,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_R,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bR,"href","/docs/transformers/pr_17291/en/model_doc/herbert#transformers.HerbertTokenizer"),c(vR,"href","/docs/transformers/pr_17291/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(FR,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TR,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MR,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ER,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(CR,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(wR,"href","/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(AR,"href","/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(yR,"href","/docs/transformers/pr_17291/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(LR,"href","/docs/transformers/pr_17291/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(xR,"href","/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDTokenizer"),c($R,"href","/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDTokenizerFast"),c(kR,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerTokenizer"),c(SR,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(RR,"href","/docs/transformers/pr_17291/en/model_doc/luke#transformers.LukeTokenizer"),c(BR,"href","/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(PR,"href","/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(IR,"href","/docs/transformers/pr_17291/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(qR,"href","/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianTokenizer"),c(NR,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartTokenizer"),c(jR,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(DR,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(GR,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(OR,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertTokenizer"),c(VR,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertTokenizerFast"),c(XR,"href","/docs/transformers/pr_17291/en/model_doc/mluke#transformers.MLukeTokenizer"),c(zR,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(QR,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(WR,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(HR,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(UR,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.T5Tokenizer"),c(JR,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.T5TokenizerFast"),c(YR,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertTokenizer"),c(KR,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(eB,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(oB,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rB,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(tB,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(aB,"href","/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(nB,"href","/docs/transformers/pr_17291/en/model_doc/phobert#transformers.PhobertTokenizer"),c(sB,"href","/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartTokenizer"),c(lB,"href","/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(iB,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertTokenizer"),c(dB,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertTokenizerFast"),c(cB,"href","/docs/transformers/pr_17291/en/model_doc/rag#transformers.RagTokenizer"),c(fB,"href","/docs/transformers/pr_17291/en/model_doc/realm#transformers.RealmTokenizer"),c(mB,"href","/docs/transformers/pr_17291/en/model_doc/realm#transformers.RealmTokenizerFast"),c(gB,"href","/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerTokenizer"),c(hB,"href","/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(pB,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertTokenizer"),c(uB,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(_B,"href","/docs/transformers/pr_17291/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(bB,"href","/docs/transformers/pr_17291/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(vB,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FB,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TB,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(MB,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(EB,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(CB,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(wB,"href","/docs/transformers/pr_17291/en/model_doc/splinter#transformers.SplinterTokenizer"),c(AB,"href","/docs/transformers/pr_17291/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(yB,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(LB,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(xB,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.T5Tokenizer"),c($B,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.T5TokenizerFast"),c(kB,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasTokenizer"),c(SB,"href","/docs/transformers/pr_17291/en/model_doc/tapex#transformers.TapexTokenizer"),c(RB,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(BB,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertTokenizer"),c(PB,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertTokenizerFast"),c(IB,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qB,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(NB,"href","/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMTokenizer"),c(jB,"href","/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(DB,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMTokenizer"),c(GB,"href","/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(OB,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VB,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(XB,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zB,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QB,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(WB,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(HB,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertTokenizer"),c(UB,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"id","transformers.AutoFeatureExtractor"),c(Jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(JB,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(YB,"href","/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eP,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oP,"href","/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rP,"href","/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17291/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17291/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17291/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iP,"href","/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(dP,"href","/docs/transformers/pr_17291/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cP,"href","/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fP,"href","/docs/transformers/pr_17291/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mP,"href","/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gP,"href","/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hP,"href","/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pP,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uP,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_P,"href","/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bP,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vP,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FP,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TP,"href","/docs/transformers/pr_17291/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(MP,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(EP,"href","/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPProcessor"),c(CP,"href","/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(wP,"href","/docs/transformers/pr_17291/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(AP,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yP,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LP,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(xP,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c($P,"href","/docs/transformers/pr_17291/en/model_doc/trocr#transformers.TrOCRProcessor"),c(kP,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SP,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RP,"href","/docs/transformers/pr_17291/en/model_doc/vilt#transformers.ViltProcessor"),c(BP,"href","/docs/transformers/pr_17291/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(PP,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IP,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoModel"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(qP,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NP,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jP,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DP,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertModel"),c(GP,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartModel"),c(OP,"href","/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitModel"),c(VP,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertModel"),c(XP,"href","/docs/transformers/pr_17291/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(zP,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdModel"),c(QP,"href","/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(WP,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(HP,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(UP,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertModel"),c(JP,"href","/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineModel"),c(YP,"href","/docs/transformers/pr_17291/en/model_doc/clip#transformers.CLIPModel"),c(KP,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertModel"),c(ZP,"href","/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextModel"),c(eI,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLModel"),c(oI,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(rI,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(tI,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(aI,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaModel"),c(nI,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(sI,"href","/docs/transformers/pr_17291/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(lI,"href","/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTModel"),c(iI,"href","/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrModel"),c(dI,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertModel"),c(cI,"href","/docs/transformers/pr_17291/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(fI,"href","/docs/transformers/pr_17291/en/model_doc/dpt#transformers.DPTModel"),c(mI,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraModel"),c(gI,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertModel"),c(hI,"href","/docs/transformers/pr_17291/en/model_doc/flava#transformers.FlavaModel"),c(pI,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetModel"),c(uI,"href","/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTModel"),c(_I,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelModel"),c(bI,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelBaseModel"),c(vI,"href","/docs/transformers/pr_17291/en/model_doc/glpn#transformers.GLPNModel"),c(FI,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2Model"),c(TI,"href","/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(MI,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJModel"),c(EI,"href","/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertModel"),c(CI,"href","/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertModel"),c(wI,"href","/docs/transformers/pr_17291/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(AI,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(yI,"href","/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(LI,"href","/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDModel"),c(xI,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerModel"),c($I,"href","/docs/transformers/pr_17291/en/model_doc/luke#transformers.LukeModel"),c(kI,"href","/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertModel"),c(SI,"href","/docs/transformers/pr_17291/en/model_doc/m2m_100#transformers.M2M100Model"),c(RI,"href","/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianModel"),c(BI,"href","/docs/transformers/pr_17291/en/model_doc/maskformer#transformers.MaskFormerModel"),c(PI,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartModel"),c(II,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(qI,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertModel"),c(NI,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetModel"),c(jI,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5Model"),c(DI,"href","/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerModel"),c(GI,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(OI,"href","/docs/transformers/pr_17291/en/model_doc/opt#transformers.OPTModel"),c(VI,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusModel"),c(XI,"href","/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverModel"),c(zI,"href","/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartModel"),c(QI,"href","/docs/transformers/pr_17291/en/model_doc/poolformer#transformers.PoolFormerModel"),c(WI,"href","/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(HI,"href","/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertModel"),c(UI,"href","/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerModel"),c(JI,"href","/docs/transformers/pr_17291/en/model_doc/regnet#transformers.RegNetModel"),c(YI,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertModel"),c(KI,"href","/docs/transformers/pr_17291/en/model_doc/resnet#transformers.ResNetModel"),c(ZI,"href","/docs/transformers/pr_17291/en/model_doc/retribert#transformers.RetriBertModel"),c(eq,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaModel"),c(oq,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerModel"),c(rq,"href","/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerModel"),c(tq,"href","/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWModel"),c(aq,"href","/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDModel"),c(nq,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(sq,"href","/docs/transformers/pr_17291/en/model_doc/splinter#transformers.SplinterModel"),c(lq,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(iq,"href","/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinModel"),c(dq,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5Model"),c(cq,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasModel"),c(fq,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(mq,"href","/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechModel"),c(gq,"href","/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(hq,"href","/docs/transformers/pr_17291/en/model_doc/van#transformers.VanModel"),c(pq,"href","/docs/transformers/pr_17291/en/model_doc/vilt#transformers.ViltModel"),c(uq,"href","/docs/transformers/pr_17291/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(_q,"href","/docs/transformers/pr_17291/en/model_doc/visual_bert#transformers.VisualBertModel"),c(bq,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTModel"),c(vq,"href","/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Fq,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Tq,"href","/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMModel"),c(Mq,"href","/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMModel"),c(Eq,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMModel"),c(Cq,"href","/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(wq,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Aq,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(yq,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetModel"),c(Lq,"href","/docs/transformers/pr_17291/en/model_doc/yolos#transformers.YolosModel"),c(xq,"href","/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iu,"id","transformers.AutoModelForPreTraining"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c($q,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kq,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sq,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rq,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Bq,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pq,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForPreTraining"),c(Iq,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(qq,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Nq,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(jq,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Vq,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Xq,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(zq,"href","/docs/transformers/pr_17291/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Qq,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Wq,"href","/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Hq,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Uq,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Jq,"href","/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(eN,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(oN,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(rN,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tN,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aN,"href","/docs/transformers/pr_17291/en/model_doc/retribert#transformers.RetriBertModel"),c(nN,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sN,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lN,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iN,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dN,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cN,"href","/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fN,"href","/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mN,"href","/docs/transformers/pr_17291/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gN,"href","/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hN,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pN,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uN,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_N,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bN,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A_,"id","transformers.AutoModelForCausalLM"),c(A_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(vN,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FN,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TN,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MN,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForCausalLM"),c(EN,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertLMHeadModel"),c(CN,"href","/docs/transformers/pr_17291/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(wN,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(AN,"href","/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(yN,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(LN,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(xN,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForCausalLM"),c($N,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(kN,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(SN,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForCausalLM"),c(RN,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BN,"href","/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(PN,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(IN,"href","/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianForCausalLM"),c(qN,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForCausalLM"),c(NN,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(jN,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(DN,"href","/docs/transformers/pr_17291/en/model_doc/opt#transformers.OPTForCausalLM"),c(GN,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(ON,"href","/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(VN,"href","/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(XN,"href","/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(zN,"href","/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(QN,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(WN,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(HN,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(UN,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(JN,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(YN,"href","/docs/transformers/pr_17291/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(KN,"href","/docs/transformers/pr_17291/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(ZN,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(ej,"href","/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(oj,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(rj,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(tj,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m1,"id","transformers.AutoModelForMaskedLM"),c(m1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m1,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(aj,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nj,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sj,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lj,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ij,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForMaskedLM"),c(cj,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(fj,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mj,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(gj,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(hj,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(pj,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(uj,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(bj,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(vj,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(yj,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Lj,"href","/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xj,"href","/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($j,"href","/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Rj,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Bj,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Pj,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Ij,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(qj,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Nj,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jj,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSeq2SeqLM"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(Gj,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oj,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vj,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xj,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Uj,"href","/docs/transformers/pr_17291/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_17291/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_17291/en/model_doc/marian#transformers.MarianMTModel"),c(Zj,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(tD,"href","/docs/transformers/pr_17291/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_17291/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_2,"id","transformers.AutoModelForSequenceClassification"),c(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_2,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(sD,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lD,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iD,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dD,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(GD,"href","/docs/transformers/pr_17291/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(OD,"href","/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(VD,"href","/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(XD,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(zD,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(QD,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(WD,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(UD,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(JD,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(YD,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(KD,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(eG,"href","/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gb,"id","transformers.AutoModelForMultipleChoice"),c(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gb,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(oG,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(vG,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(MG,"href","/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(EG,"href","/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(wG,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(AG,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(yG,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(LG,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(xG,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c($G,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(kG,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(SG,"href","/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qb,"id","transformers.AutoModelForNextSentencePrediction"),c(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(RG,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BG,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PG,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IG,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(qG,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(NG,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(jG,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(DG,"href","/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForTokenClassification"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(GG,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OG,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VG,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XG,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zG,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForTokenClassification"),c(QG,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(WG,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(HG,"href","/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineForTokenClassification"),c(UG,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(JG,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(YG,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(KG,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(eO,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(oO,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(rO,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(tO,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(aO,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(nO,"href","/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(sO,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(lO,"href","/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(iO,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(dO,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(cO,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(mO,"href","/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(gO,"href","/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(hO,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(pO,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(uO,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(_O,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(bO,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(vO,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(FO,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(TO,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(MO,"href","/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForQuestionAnswering"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(EO,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CO,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wO,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AO,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17291/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17291/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(DO,"href","/docs/transformers/pr_17291/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17291/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17291/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17291/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17291/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_17291/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_17291/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_17291/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_17291/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_17291/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(lV,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(cV,"href","/docs/transformers/pr_17291/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForTableQuestionAnswering"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(fV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForImageClassification"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(pV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_V,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bV,"href","/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitForImageClassification"),c(vV,"href","/docs/transformers/pr_17291/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(FV,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(TV,"href","/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTForImageClassification"),c(MV,"href","/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(EV,"href","/docs/transformers/pr_17291/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(CV,"href","/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(wV,"href","/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(AV,"href","/docs/transformers/pr_17291/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(yV,"href","/docs/transformers/pr_17291/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LV,"href","/docs/transformers/pr_17291/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(xV,"href","/docs/transformers/pr_17291/en/model_doc/resnet#transformers.ResNetForImageClassification"),c($V,"href","/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(kV,"href","/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinForImageClassification"),c(SV,"href","/docs/transformers/pr_17291/en/model_doc/van#transformers.VanForImageClassification"),c(RV,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForVision2Seq"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(BV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForAudioClassification"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(NV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(OV,"href","/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(VV,"href","/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(XV,"href","/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForAudioFrameClassification"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(UV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(ZV,"href","/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(eX,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(oX,"href","/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForCTC"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(rX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(sX,"href","/docs/transformers/pr_17291/en/model_doc/hubert#transformers.HubertForCTC"),c(lX,"href","/docs/transformers/pr_17291/en/model_doc/sew#transformers.SEWForCTC"),c(iX,"href","/docs/transformers/pr_17291/en/model_doc/sew-d#transformers.SEWDForCTC"),c(dX,"href","/docs/transformers/pr_17291/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(cX,"href","/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(fX,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(mX,"href","/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForSpeechSeq2Seq"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(gX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_17291/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(_X,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForAudioXVector"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(bX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(MX,"href","/docs/transformers/pr_17291/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(EX,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(CX,"href","/docs/transformers/pr_17291/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.AutoModelForMaskedImageModeling"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(wX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LX,"href","/docs/transformers/pr_17291/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(xX,"href","/docs/transformers/pr_17291/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c($X,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YT,"id","transformers.AutoModelForObjectDetection"),c(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YT,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(kX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrForObjectDetection"),c(PX,"href","/docs/transformers/pr_17291/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.AutoModelForImageSegmentation"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(IX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jX,"href","/docs/transformers/pr_17291/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.AutoModelForSemanticSegmentation"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(DX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17291/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(XX,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(zX,"href","/docs/transformers/pr_17291/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(QX,"href","/docs/transformers/pr_17291/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.AutoModelForInstanceSegmentation"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(WX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_17291/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.TFAutoModel"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(YX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertModel"),c(oz,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.TFBartModel"),c(rz,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertModel"),c(tz,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(az,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(nz,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertModel"),c(sz,"href","/docs/transformers/pr_17291/en/model_doc/clip#transformers.TFCLIPModel"),c(lz,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertModel"),c(iz,"href","/docs/transformers/pr_17291/en/model_doc/convnext#transformers.TFConvNextModel"),c(dz,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.TFCTRLModel"),c(cz,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(fz,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaModel"),c(mz,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(gz,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(hz,"href","/docs/transformers/pr_17291/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(pz,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraModel"),c(uz,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(_z,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelModel"),c(bz,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(vz,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Fz,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.TFGPTJModel"),c(Tz,"href","/docs/transformers/pr_17291/en/model_doc/hubert#transformers.TFHubertModel"),c(Mz,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Ez,"href","/docs/transformers/pr_17291/en/model_doc/led#transformers.TFLEDModel"),c(Cz,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerModel"),c(wz,"href","/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Az,"href","/docs/transformers/pr_17291/en/model_doc/marian#transformers.TFMarianModel"),c(yz,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.TFMBartModel"),c(Lz,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(xz,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetModel"),c($z,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.TFMT5Model"),c(kz,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Sz,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Rz,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertModel"),c(Bz,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaModel"),c(Pz,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Iz,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(qz,"href","/docs/transformers/pr_17291/en/model_doc/swin#transformers.TFSwinModel"),c(Nz,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.TFT5Model"),c(jz,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasModel"),c(Dz,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Gz,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.TFViTModel"),c(Oz,"href","/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Vz,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Xz,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMModel"),c(zz,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Qz,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p9,"id","transformers.TFAutoModelForPreTraining"),c(p9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p9,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Yz,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Kz,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Zz,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oQ,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(tQ,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aQ,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(nQ,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sQ,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(lQ,"href","/docs/transformers/pr_17291/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(iQ,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(dQ,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fQ,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(hQ,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17291/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(uQ,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G9,"id","transformers.TFAutoModelForCausalLM"),c(G9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G9,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(EQ,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(CQ,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wQ,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(AQ,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(yQ,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(LQ,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(xQ,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($Q,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(kQ,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(SQ,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(RQ,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rM,"id","transformers.TFAutoModelForImageClassification"),c(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rM,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(BQ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PQ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IQ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qQ,"href","/docs/transformers/pr_17291/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(NQ,"href","/docs/transformers/pr_17291/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(jQ,"href","/docs/transformers/pr_17291/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(DQ,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dM,"id","transformers.TFAutoModelForMaskedLM"),c(dM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dM,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(GQ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(UQ,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(JQ,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(KQ,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(eW,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(oW,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(rW,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(tW,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(aW,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(nW,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(sW,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(lW,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(iW,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dW,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SM,"id","transformers.TFAutoModelForSeq2SeqLM"),c(SM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SM,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(cW,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(pW,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(uW,"href","/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(_W,"href","/docs/transformers/pr_17291/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_17291/en/model_doc/marian#transformers.TFMarianMTModel"),c(vW,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(TW,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(MW,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForSequenceClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(EW,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c($W,"href","/docs/transformers/pr_17291/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(IW,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(qW,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(NW,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(jW,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(DW,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(GW,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(OW,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17291/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17291/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(YW,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.TFAutoModelForMultipleChoice"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(KW,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(rH,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(tH,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(aH,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(nH,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(sH,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(lH,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(iH,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(dH,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(cH,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(fH,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(mH,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(gH,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(hH,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(pH,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(uH,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(_H,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.TFAutoModelForNextSentencePrediction"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(bH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(MH,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z4,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z4,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(EH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17291/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForTokenClassification"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(yH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(kH,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(SH,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(RH,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(BH,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(PH,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(IH,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(qH,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(NH,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jH,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(DH,"href","/docs/transformers/pr_17291/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(GH,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(OH,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(VH,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(XH,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(zH,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(QH,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(WH,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(HH,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(UH,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForQuestionAnswering"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(JH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_17291/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17291/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_17291/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_17291/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_17291/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(iU,"href","/docs/transformers/pr_17291/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_17291/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_17291/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_17291/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_17291/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(hU,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_17291/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(_U,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_17291/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.TFAutoModelForVision2Seq"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(vU,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FU,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TU,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MU,"href","/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(EU,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CU,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wU,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AU,"href","/docs/transformers/pr_17291/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.FlaxAutoModel"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(yU,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertModel"),c(kU,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartModel"),c(SU,"href","/docs/transformers/pr_17291/en/model_doc/beit#transformers.FlaxBeitModel"),c(RU,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertModel"),c(BU,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(PU,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(IU,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(qU,"href","/docs/transformers/pr_17291/en/model_doc/clip#transformers.FlaxCLIPModel"),c(NU,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jU,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraModel"),c(DU,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(GU,"href","/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OU,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(VU,"href","/docs/transformers/pr_17291/en/model_doc/marian#transformers.FlaxMarianModel"),c(XU,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zU,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.FlaxMT5Model"),c(QU,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(WU,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(HU,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(UU,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.FlaxT5Model"),c(JU,"href","/docs/transformers/pr_17291/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(YU,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.FlaxViTModel"),c(KU,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(ZU,"href","/docs/transformers/pr_17291/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(eJ,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E5,"id","transformers.FlaxAutoModelForCausalLM"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(nJ,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(sJ,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(lJ,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(iJ,"href","/docs/transformers/pr_17291/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(dJ,"href","/docs/transformers/pr_17291/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(cJ,"href","/docs/transformers/pr_17291/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(fJ,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(mJ,"href","/docs/transformers/pr_17291/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForPreTraining"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(gJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(_J,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(vJ,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(FJ,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(TJ,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wJ,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(AJ,"href","/docs/transformers/pr_17291/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(yJ,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForMaskedLM"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(SJ,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(BJ,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(PJ,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(IJ,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(qJ,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(jJ,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(DJ,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zJ,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(QJ,"href","/docs/transformers/pr_17291/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(WJ,"href","/docs/transformers/pr_17291/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(HJ,"href","/docs/transformers/pr_17291/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(UJ,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JJ,"href","/docs/transformers/pr_17291/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_17291/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_17291/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(tY,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(aY,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(nY,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(sY,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(lY,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(iY,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(dY,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(cY,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(fY,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(mY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(uY,"href","/docs/transformers/pr_17291/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(_Y,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(bY,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(vY,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(FY,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(TY,"href","/docs/transformers/pr_17291/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForTokenClassification"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(wY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(xY,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(kY,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(SY,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(RY,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(BY,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(PY,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(IY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17291/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(DY,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(GY,"href","/docs/transformers/pr_17291/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(OY,"href","/docs/transformers/pr_17291/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(VY,"href","/docs/transformers/pr_17291/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(XY,"href","/docs/transformers/pr_17291/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(zY,"href","/docs/transformers/pr_17291/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(QY,"href","/docs/transformers/pr_17291/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(WY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_17291/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.FlaxAutoModelForImageClassification"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(YY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/pr_17291/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(oK,"href","/docs/transformers/pr_17291/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C3,"id","transformers.FlaxAutoModelForVision2Seq"),c(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(rK,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/pr_17291/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/pr_17291/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,mf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,WA),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,yn),e(yn,HA),e(Xe,Ln),e(Xe,xn),e(xn,UA),e(Xe,mi),e(Xe,$n),e($n,JA),e(Xe,gi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,h$),e(Ae,hi),e(hi,p$),e(Ae,u$),b(f,Eo,_),b(f,Ea,_),e(Ea,_$),e(Ea,pf),e(pf,b$),e(Ea,Jje),b(f,jPe,_),b(f,pi,_),e(pi,uf),e(uf,KZ),M(YA,KZ,null),e(pi,Yje),e(pi,ZZ),e(ZZ,Kje),b(f,DPe,_),b(f,kn,_),e(kn,Zje),e(kn,eee),e(eee,eDe),e(kn,oDe),e(kn,oee),e(oee,rDe),e(kn,tDe),b(f,GPe,_),M(KA,f,_),b(f,OPe,_),b(f,v$,_),e(v$,aDe),b(f,VPe,_),M(_f,f,_),b(f,XPe,_),b(f,ui,_),e(ui,bf),e(bf,ree),M(ZA,ree,null),e(ui,nDe),e(ui,tee),e(tee,sDe),b(f,zPe,_),b(f,Co,_),M(e6,Co,null),e(Co,lDe),e(Co,o6),e(o6,iDe),e(o6,F$),e(F$,dDe),e(o6,cDe),e(Co,fDe),e(Co,r6),e(r6,mDe),e(r6,aee),e(aee,gDe),e(r6,hDe),e(Co,pDe),e(Co,Er),M(t6,Er,null),e(Er,uDe),e(Er,nee),e(nee,_De),e(Er,bDe),e(Er,_i),e(_i,vDe),e(_i,see),e(see,FDe),e(_i,TDe),e(_i,lee),e(lee,MDe),e(_i,EDe),e(Er,CDe),e(Er,y),e(y,vf),e(vf,iee),e(iee,wDe),e(vf,ADe),e(vf,T$),e(T$,yDe),e(vf,LDe),e(y,xDe),e(y,Ff),e(Ff,dee),e(dee,$De),e(Ff,kDe),e(Ff,M$),e(M$,SDe),e(Ff,RDe),e(y,BDe),e(y,Tf),e(Tf,cee),e(cee,PDe),e(Tf,IDe),e(Tf,E$),e(E$,qDe),e(Tf,NDe),e(y,jDe),e(y,Mf),e(Mf,fee),e(fee,DDe),e(Mf,GDe),e(Mf,C$),e(C$,ODe),e(Mf,VDe),e(y,XDe),e(y,Ef),e(Ef,mee),e(mee,zDe),e(Ef,QDe),e(Ef,w$),e(w$,WDe),e(Ef,HDe),e(y,UDe),e(y,Cf),e(Cf,gee),e(gee,JDe),e(Cf,YDe),e(Cf,A$),e(A$,KDe),e(Cf,ZDe),e(y,eGe),e(y,wf),e(wf,hee),e(hee,oGe),e(wf,rGe),e(wf,y$),e(y$,tGe),e(wf,aGe),e(y,nGe),e(y,Af),e(Af,pee),e(pee,sGe),e(Af,lGe),e(Af,L$),e(L$,iGe),e(Af,dGe),e(y,cGe),e(y,yf),e(yf,uee),e(uee,fGe),e(yf,mGe),e(yf,x$),e(x$,gGe),e(yf,hGe),e(y,pGe),e(y,Lf),e(Lf,_ee),e(_ee,uGe),e(Lf,_Ge),e(Lf,$$),e($$,bGe),e(Lf,vGe),e(y,FGe),e(y,xf),e(xf,bee),e(bee,TGe),e(xf,MGe),e(xf,k$),e(k$,EGe),e(xf,CGe),e(y,wGe),e(y,$f),e($f,vee),e(vee,AGe),e($f,yGe),e($f,S$),e(S$,LGe),e($f,xGe),e(y,$Ge),e(y,kf),e(kf,Fee),e(Fee,kGe),e(kf,SGe),e(kf,R$),e(R$,RGe),e(kf,BGe),e(y,PGe),e(y,Sf),e(Sf,Tee),e(Tee,IGe),e(Sf,qGe),e(Sf,B$),e(B$,NGe),e(Sf,jGe),e(y,DGe),e(y,Rf),e(Rf,Mee),e(Mee,GGe),e(Rf,OGe),e(Rf,P$),e(P$,VGe),e(Rf,XGe),e(y,zGe),e(y,Bf),e(Bf,Eee),e(Eee,QGe),e(Bf,WGe),e(Bf,I$),e(I$,HGe),e(Bf,UGe),e(y,JGe),e(y,Pf),e(Pf,Cee),e(Cee,YGe),e(Pf,KGe),e(Pf,q$),e(q$,ZGe),e(Pf,eOe),e(y,oOe),e(y,If),e(If,wee),e(wee,rOe),e(If,tOe),e(If,N$),e(N$,aOe),e(If,nOe),e(y,sOe),e(y,qf),e(qf,Aee),e(Aee,lOe),e(qf,iOe),e(qf,j$),e(j$,dOe),e(qf,cOe),e(y,fOe),e(y,Nf),e(Nf,yee),e(yee,mOe),e(Nf,gOe),e(Nf,D$),e(D$,hOe),e(Nf,pOe),e(y,uOe),e(y,jf),e(jf,Lee),e(Lee,_Oe),e(jf,bOe),e(jf,G$),e(G$,vOe),e(jf,FOe),e(y,TOe),e(y,Df),e(Df,xee),e(xee,MOe),e(Df,EOe),e(Df,O$),e(O$,COe),e(Df,wOe),e(y,AOe),e(y,Gf),e(Gf,$ee),e($ee,yOe),e(Gf,LOe),e(Gf,V$),e(V$,xOe),e(Gf,$Oe),e(y,kOe),e(y,Of),e(Of,kee),e(kee,SOe),e(Of,ROe),e(Of,X$),e(X$,BOe),e(Of,POe),e(y,IOe),e(y,Vf),e(Vf,See),e(See,qOe),e(Vf,NOe),e(Vf,z$),e(z$,jOe),e(Vf,DOe),e(y,GOe),e(y,Xf),e(Xf,Ree),e(Ree,OOe),e(Xf,VOe),e(Xf,Q$),e(Q$,XOe),e(Xf,zOe),e(y,QOe),e(y,zf),e(zf,Bee),e(Bee,WOe),e(zf,HOe),e(zf,W$),e(W$,UOe),e(zf,JOe),e(y,YOe),e(y,Qf),e(Qf,Pee),e(Pee,KOe),e(Qf,ZOe),e(Qf,H$),e(H$,eVe),e(Qf,oVe),e(y,rVe),e(y,Wf),e(Wf,Iee),e(Iee,tVe),e(Wf,aVe),e(Wf,U$),e(U$,nVe),e(Wf,sVe),e(y,lVe),e(y,Hf),e(Hf,qee),e(qee,iVe),e(Hf,dVe),e(Hf,J$),e(J$,cVe),e(Hf,fVe),e(y,mVe),e(y,Uf),e(Uf,Nee),e(Nee,gVe),e(Uf,hVe),e(Uf,Y$),e(Y$,pVe),e(Uf,uVe),e(y,_Ve),e(y,Jf),e(Jf,jee),e(jee,bVe),e(Jf,vVe),e(Jf,K$),e(K$,FVe),e(Jf,TVe),e(y,MVe),e(y,Yf),e(Yf,Dee),e(Dee,EVe),e(Yf,CVe),e(Yf,Z$),e(Z$,wVe),e(Yf,AVe),e(y,yVe),e(y,Kf),e(Kf,Gee),e(Gee,LVe),e(Kf,xVe),e(Kf,ek),e(ek,$Ve),e(Kf,kVe),e(y,SVe),e(y,Zf),e(Zf,Oee),e(Oee,RVe),e(Zf,BVe),e(Zf,ok),e(ok,PVe),e(Zf,IVe),e(y,qVe),e(y,em),e(em,Vee),e(Vee,NVe),e(em,jVe),e(em,rk),e(rk,DVe),e(em,GVe),e(y,OVe),e(y,om),e(om,Xee),e(Xee,VVe),e(om,XVe),e(om,tk),e(tk,zVe),e(om,QVe),e(y,WVe),e(y,rm),e(rm,zee),e(zee,HVe),e(rm,UVe),e(rm,ak),e(ak,JVe),e(rm,YVe),e(y,KVe),e(y,tm),e(tm,Qee),e(Qee,ZVe),e(tm,eXe),e(tm,nk),e(nk,oXe),e(tm,rXe),e(y,tXe),e(y,am),e(am,Wee),e(Wee,aXe),e(am,nXe),e(am,sk),e(sk,sXe),e(am,lXe),e(y,iXe),e(y,nm),e(nm,Hee),e(Hee,dXe),e(nm,cXe),e(nm,lk),e(lk,fXe),e(nm,mXe),e(y,gXe),e(y,sm),e(sm,Uee),e(Uee,hXe),e(sm,pXe),e(sm,ik),e(ik,uXe),e(sm,_Xe),e(y,bXe),e(y,lm),e(lm,Jee),e(Jee,vXe),e(lm,FXe),e(lm,dk),e(dk,TXe),e(lm,MXe),e(y,EXe),e(y,im),e(im,Yee),e(Yee,CXe),e(im,wXe),e(im,ck),e(ck,AXe),e(im,yXe),e(y,LXe),e(y,dm),e(dm,Kee),e(Kee,xXe),e(dm,$Xe),e(dm,fk),e(fk,kXe),e(dm,SXe),e(y,RXe),e(y,cm),e(cm,Zee),e(Zee,BXe),e(cm,PXe),e(cm,mk),e(mk,IXe),e(cm,qXe),e(y,NXe),e(y,fm),e(fm,eoe),e(eoe,jXe),e(fm,DXe),e(fm,gk),e(gk,GXe),e(fm,OXe),e(y,VXe),e(y,mm),e(mm,ooe),e(ooe,XXe),e(mm,zXe),e(mm,hk),e(hk,QXe),e(mm,WXe),e(y,HXe),e(y,gm),e(gm,roe),e(roe,UXe),e(gm,JXe),e(gm,pk),e(pk,YXe),e(gm,KXe),e(y,ZXe),e(y,hm),e(hm,toe),e(toe,eze),e(hm,oze),e(hm,uk),e(uk,rze),e(hm,tze),e(y,aze),e(y,pm),e(pm,aoe),e(aoe,nze),e(pm,sze),e(pm,_k),e(_k,lze),e(pm,ize),e(y,dze),e(y,um),e(um,noe),e(noe,cze),e(um,fze),e(um,bk),e(bk,mze),e(um,gze),e(y,hze),e(y,_m),e(_m,soe),e(soe,pze),e(_m,uze),e(_m,vk),e(vk,_ze),e(_m,bze),e(y,vze),e(y,bm),e(bm,loe),e(loe,Fze),e(bm,Tze),e(bm,Fk),e(Fk,Mze),e(bm,Eze),e(y,Cze),e(y,vm),e(vm,ioe),e(ioe,wze),e(vm,Aze),e(vm,Tk),e(Tk,yze),e(vm,Lze),e(y,xze),e(y,Fm),e(Fm,doe),e(doe,$ze),e(Fm,kze),e(Fm,Mk),e(Mk,Sze),e(Fm,Rze),e(y,Bze),e(y,Tm),e(Tm,coe),e(coe,Pze),e(Tm,Ize),e(Tm,Ek),e(Ek,qze),e(Tm,Nze),e(y,jze),e(y,Mm),e(Mm,foe),e(foe,Dze),e(Mm,Gze),e(Mm,Ck),e(Ck,Oze),e(Mm,Vze),e(y,Xze),e(y,Em),e(Em,moe),e(moe,zze),e(Em,Qze),e(Em,wk),e(wk,Wze),e(Em,Hze),e(y,Uze),e(y,Cm),e(Cm,goe),e(goe,Jze),e(Cm,Yze),e(Cm,Ak),e(Ak,Kze),e(Cm,Zze),e(y,eQe),e(y,wm),e(wm,hoe),e(hoe,oQe),e(wm,rQe),e(wm,yk),e(yk,tQe),e(wm,aQe),e(y,nQe),e(y,Am),e(Am,poe),e(poe,sQe),e(Am,lQe),e(Am,Lk),e(Lk,iQe),e(Am,dQe),e(y,cQe),e(y,ym),e(ym,uoe),e(uoe,fQe),e(ym,mQe),e(ym,xk),e(xk,gQe),e(ym,hQe),e(y,pQe),e(y,Lm),e(Lm,_oe),e(_oe,uQe),e(Lm,_Qe),e(Lm,$k),e($k,bQe),e(Lm,vQe),e(y,FQe),e(y,xm),e(xm,boe),e(boe,TQe),e(xm,MQe),e(xm,kk),e(kk,EQe),e(xm,CQe),e(y,wQe),e(y,$m),e($m,voe),e(voe,AQe),e($m,yQe),e($m,Sk),e(Sk,LQe),e($m,xQe),e(y,$Qe),e(y,km),e(km,Foe),e(Foe,kQe),e(km,SQe),e(km,Rk),e(Rk,RQe),e(km,BQe),e(y,PQe),e(y,Sm),e(Sm,Toe),e(Toe,IQe),e(Sm,qQe),e(Sm,Bk),e(Bk,NQe),e(Sm,jQe),e(y,DQe),e(y,Rm),e(Rm,Moe),e(Moe,GQe),e(Rm,OQe),e(Rm,Pk),e(Pk,VQe),e(Rm,XQe),e(y,zQe),e(y,Bm),e(Bm,Eoe),e(Eoe,QQe),e(Bm,WQe),e(Bm,Ik),e(Ik,HQe),e(Bm,UQe),e(y,JQe),e(y,Pm),e(Pm,Coe),e(Coe,YQe),e(Pm,KQe),e(Pm,qk),e(qk,ZQe),e(Pm,eWe),e(y,oWe),e(y,Im),e(Im,woe),e(woe,rWe),e(Im,tWe),e(Im,Nk),e(Nk,aWe),e(Im,nWe),e(y,sWe),e(y,qm),e(qm,Aoe),e(Aoe,lWe),e(qm,iWe),e(qm,jk),e(jk,dWe),e(qm,cWe),e(y,fWe),e(y,Nm),e(Nm,yoe),e(yoe,mWe),e(Nm,gWe),e(Nm,Dk),e(Dk,hWe),e(Nm,pWe),e(y,uWe),e(y,jm),e(jm,Loe),e(Loe,_We),e(jm,bWe),e(jm,Gk),e(Gk,vWe),e(jm,FWe),e(y,TWe),e(y,Dm),e(Dm,xoe),e(xoe,MWe),e(Dm,EWe),e(Dm,Ok),e(Ok,CWe),e(Dm,wWe),e(y,AWe),e(y,Gm),e(Gm,$oe),e($oe,yWe),e(Gm,LWe),e(Gm,Vk),e(Vk,xWe),e(Gm,$We),e(y,kWe),e(y,Om),e(Om,koe),e(koe,SWe),e(Om,RWe),e(Om,Xk),e(Xk,BWe),e(Om,PWe),e(y,IWe),e(y,Vm),e(Vm,Soe),e(Soe,qWe),e(Vm,NWe),e(Vm,zk),e(zk,jWe),e(Vm,DWe),e(y,GWe),e(y,Xm),e(Xm,Roe),e(Roe,OWe),e(Xm,VWe),e(Xm,Qk),e(Qk,XWe),e(Xm,zWe),e(y,QWe),e(y,zm),e(zm,Boe),e(Boe,WWe),e(zm,HWe),e(zm,Wk),e(Wk,UWe),e(zm,JWe),e(y,YWe),e(y,Qm),e(Qm,Poe),e(Poe,KWe),e(Qm,ZWe),e(Qm,Hk),e(Hk,eHe),e(Qm,oHe),e(y,rHe),e(y,Wm),e(Wm,Ioe),e(Ioe,tHe),e(Wm,aHe),e(Wm,Uk),e(Uk,nHe),e(Wm,sHe),e(y,lHe),e(y,Hm),e(Hm,qoe),e(qoe,iHe),e(Hm,dHe),e(Hm,Jk),e(Jk,cHe),e(Hm,fHe),e(y,mHe),e(y,Um),e(Um,Noe),e(Noe,gHe),e(Um,hHe),e(Um,Yk),e(Yk,pHe),e(Um,uHe),e(y,_He),e(y,Jm),e(Jm,joe),e(joe,bHe),e(Jm,vHe),e(Jm,Kk),e(Kk,FHe),e(Jm,THe),e(y,MHe),e(y,Ym),e(Ym,Doe),e(Doe,EHe),e(Ym,CHe),e(Ym,Zk),e(Zk,wHe),e(Ym,AHe),e(y,yHe),e(y,Km),e(Km,Goe),e(Goe,LHe),e(Km,xHe),e(Km,eS),e(eS,$He),e(Km,kHe),e(y,SHe),e(y,Zm),e(Zm,Ooe),e(Ooe,RHe),e(Zm,BHe),e(Zm,oS),e(oS,PHe),e(Zm,IHe),e(y,qHe),e(y,eg),e(eg,Voe),e(Voe,NHe),e(eg,jHe),e(eg,rS),e(rS,DHe),e(eg,GHe),e(y,OHe),e(y,og),e(og,Xoe),e(Xoe,VHe),e(og,XHe),e(og,tS),e(tS,zHe),e(og,QHe),e(y,WHe),e(y,rg),e(rg,zoe),e(zoe,HHe),e(rg,UHe),e(rg,aS),e(aS,JHe),e(rg,YHe),e(y,KHe),e(y,tg),e(tg,Qoe),e(Qoe,ZHe),e(tg,eUe),e(tg,nS),e(nS,oUe),e(tg,rUe),e(y,tUe),e(y,ag),e(ag,Woe),e(Woe,aUe),e(ag,nUe),e(ag,sS),e(sS,sUe),e(ag,lUe),e(y,iUe),e(y,ng),e(ng,Hoe),e(Hoe,dUe),e(ng,cUe),e(ng,lS),e(lS,fUe),e(ng,mUe),e(y,gUe),e(y,sg),e(sg,Uoe),e(Uoe,hUe),e(sg,pUe),e(sg,iS),e(iS,uUe),e(sg,_Ue),e(y,bUe),e(y,lg),e(lg,Joe),e(Joe,vUe),e(lg,FUe),e(lg,dS),e(dS,TUe),e(lg,MUe),e(y,EUe),e(y,ig),e(ig,Yoe),e(Yoe,CUe),e(ig,wUe),e(ig,cS),e(cS,AUe),e(ig,yUe),e(y,LUe),e(y,dg),e(dg,Koe),e(Koe,xUe),e(dg,$Ue),e(dg,fS),e(fS,kUe),e(dg,SUe),e(y,RUe),e(y,cg),e(cg,Zoe),e(Zoe,BUe),e(cg,PUe),e(cg,mS),e(mS,IUe),e(cg,qUe),e(y,NUe),e(y,fg),e(fg,ere),e(ere,jUe),e(fg,DUe),e(fg,gS),e(gS,GUe),e(fg,OUe),e(y,VUe),e(y,mg),e(mg,ore),e(ore,XUe),e(mg,zUe),e(mg,hS),e(hS,QUe),e(mg,WUe),e(y,HUe),e(y,gg),e(gg,rre),e(rre,UUe),e(gg,JUe),e(gg,pS),e(pS,YUe),e(gg,KUe),e(y,ZUe),e(y,hg),e(hg,tre),e(tre,eJe),e(hg,oJe),e(hg,uS),e(uS,rJe),e(hg,tJe),e(Er,aJe),M(pg,Er,null),e(Co,nJe),e(Co,ug),M(a6,ug,null),e(ug,sJe),e(ug,are),e(are,lJe),b(f,QPe,_),b(f,bi,_),e(bi,_g),e(_g,nre),M(n6,nre,null),e(bi,iJe),e(bi,sre),e(sre,dJe),b(f,WPe,_),b(f,wo,_),M(s6,wo,null),e(wo,cJe),e(wo,l6),e(l6,fJe),e(l6,_S),e(_S,mJe),e(l6,gJe),e(wo,hJe),e(wo,i6),e(i6,pJe),e(i6,lre),e(lre,uJe),e(i6,_Je),e(wo,bJe),e(wo,Cr),M(d6,Cr,null),e(Cr,vJe),e(Cr,ire),e(ire,FJe),e(Cr,TJe),e(Cr,Ca),e(Ca,MJe),e(Ca,dre),e(dre,EJe),e(Ca,CJe),e(Ca,cre),e(cre,wJe),e(Ca,AJe),e(Ca,fre),e(fre,yJe),e(Ca,LJe),e(Cr,xJe),e(Cr,k),e(k,Sn),e(Sn,mre),e(mre,$Je),e(Sn,kJe),e(Sn,bS),e(bS,SJe),e(Sn,RJe),e(Sn,vS),e(vS,BJe),e(Sn,PJe),e(k,IJe),e(k,Rn),e(Rn,gre),e(gre,qJe),e(Rn,NJe),e(Rn,FS),e(FS,jJe),e(Rn,DJe),e(Rn,TS),e(TS,GJe),e(Rn,OJe),e(k,VJe),e(k,Bn),e(Bn,hre),e(hre,XJe),e(Bn,zJe),e(Bn,MS),e(MS,QJe),e(Bn,WJe),e(Bn,ES),e(ES,HJe),e(Bn,UJe),e(k,JJe),e(k,bg),e(bg,pre),e(pre,YJe),e(bg,KJe),e(bg,CS),e(CS,ZJe),e(bg,eYe),e(k,oYe),e(k,Pn),e(Pn,ure),e(ure,rYe),e(Pn,tYe),e(Pn,wS),e(wS,aYe),e(Pn,nYe),e(Pn,AS),e(AS,sYe),e(Pn,lYe),e(k,iYe),e(k,vg),e(vg,_re),e(_re,dYe),e(vg,cYe),e(vg,yS),e(yS,fYe),e(vg,mYe),e(k,gYe),e(k,Fg),e(Fg,bre),e(bre,hYe),e(Fg,pYe),e(Fg,LS),e(LS,uYe),e(Fg,_Ye),e(k,bYe),e(k,Tg),e(Tg,vre),e(vre,vYe),e(Tg,FYe),e(Tg,xS),e(xS,TYe),e(Tg,MYe),e(k,EYe),e(k,In),e(In,Fre),e(Fre,CYe),e(In,wYe),e(In,$S),e($S,AYe),e(In,yYe),e(In,kS),e(kS,LYe),e(In,xYe),e(k,$Ye),e(k,qn),e(qn,Tre),e(Tre,kYe),e(qn,SYe),e(qn,SS),e(SS,RYe),e(qn,BYe),e(qn,RS),e(RS,PYe),e(qn,IYe),e(k,qYe),e(k,Nn),e(Nn,Mre),e(Mre,NYe),e(Nn,jYe),e(Nn,BS),e(BS,DYe),e(Nn,GYe),e(Nn,PS),e(PS,OYe),e(Nn,VYe),e(k,XYe),e(k,Mg),e(Mg,Ere),e(Ere,zYe),e(Mg,QYe),e(Mg,IS),e(IS,WYe),e(Mg,HYe),e(k,UYe),e(k,Eg),e(Eg,Cre),e(Cre,JYe),e(Eg,YYe),e(Eg,qS),e(qS,KYe),e(Eg,ZYe),e(k,eKe),e(k,jn),e(jn,wre),e(wre,oKe),e(jn,rKe),e(jn,NS),e(NS,tKe),e(jn,aKe),e(jn,jS),e(jS,nKe),e(jn,sKe),e(k,lKe),e(k,Cg),e(Cg,Are),e(Are,iKe),e(Cg,dKe),e(Cg,DS),e(DS,cKe),e(Cg,fKe),e(k,mKe),e(k,Dn),e(Dn,yre),e(yre,gKe),e(Dn,hKe),e(Dn,GS),e(GS,pKe),e(Dn,uKe),e(Dn,OS),e(OS,_Ke),e(Dn,bKe),e(k,vKe),e(k,Gn),e(Gn,Lre),e(Lre,FKe),e(Gn,TKe),e(Gn,VS),e(VS,MKe),e(Gn,EKe),e(Gn,XS),e(XS,CKe),e(Gn,wKe),e(k,AKe),e(k,On),e(On,xre),e(xre,yKe),e(On,LKe),e(On,zS),e(zS,xKe),e(On,$Ke),e(On,QS),e(QS,kKe),e(On,SKe),e(k,RKe),e(k,wg),e(wg,$re),e($re,BKe),e(wg,PKe),e(wg,WS),e(WS,IKe),e(wg,qKe),e(k,NKe),e(k,Vn),e(Vn,kre),e(kre,jKe),e(Vn,DKe),e(Vn,HS),e(HS,GKe),e(Vn,OKe),e(Vn,US),e(US,VKe),e(Vn,XKe),e(k,zKe),e(k,Xn),e(Xn,Sre),e(Sre,QKe),e(Xn,WKe),e(Xn,JS),e(JS,HKe),e(Xn,UKe),e(Xn,YS),e(YS,JKe),e(Xn,YKe),e(k,KKe),e(k,zn),e(zn,Rre),e(Rre,ZKe),e(zn,eZe),e(zn,KS),e(KS,oZe),e(zn,rZe),e(zn,ZS),e(ZS,tZe),e(zn,aZe),e(k,nZe),e(k,Qn),e(Qn,Bre),e(Bre,sZe),e(Qn,lZe),e(Qn,eR),e(eR,iZe),e(Qn,dZe),e(Qn,oR),e(oR,cZe),e(Qn,fZe),e(k,mZe),e(k,Wn),e(Wn,Pre),e(Pre,gZe),e(Wn,hZe),e(Wn,rR),e(rR,pZe),e(Wn,uZe),e(Wn,tR),e(tR,_Ze),e(Wn,bZe),e(k,vZe),e(k,Hn),e(Hn,Ire),e(Ire,FZe),e(Hn,TZe),e(Hn,aR),e(aR,MZe),e(Hn,EZe),e(Hn,nR),e(nR,CZe),e(Hn,wZe),e(k,AZe),e(k,Ag),e(Ag,qre),e(qre,yZe),e(Ag,LZe),e(Ag,sR),e(sR,xZe),e(Ag,$Ze),e(k,kZe),e(k,Un),e(Un,Nre),e(Nre,SZe),e(Un,RZe),e(Un,lR),e(lR,BZe),e(Un,PZe),e(Un,iR),e(iR,IZe),e(Un,qZe),e(k,NZe),e(k,yg),e(yg,jre),e(jre,jZe),e(yg,DZe),e(yg,dR),e(dR,GZe),e(yg,OZe),e(k,VZe),e(k,Jn),e(Jn,Dre),e(Dre,XZe),e(Jn,zZe),e(Jn,cR),e(cR,QZe),e(Jn,WZe),e(Jn,fR),e(fR,HZe),e(Jn,UZe),e(k,JZe),e(k,Yn),e(Yn,Gre),e(Gre,YZe),e(Yn,KZe),e(Yn,mR),e(mR,ZZe),e(Yn,eeo),e(Yn,gR),e(gR,oeo),e(Yn,reo),e(k,teo),e(k,Kn),e(Kn,Ore),e(Ore,aeo),e(Kn,neo),e(Kn,hR),e(hR,seo),e(Kn,leo),e(Kn,pR),e(pR,ieo),e(Kn,deo),e(k,ceo),e(k,Zn),e(Zn,Vre),e(Vre,feo),e(Zn,meo),e(Zn,uR),e(uR,geo),e(Zn,heo),e(Zn,_R),e(_R,peo),e(Zn,ueo),e(k,_eo),e(k,es),e(es,Xre),e(Xre,beo),e(es,veo),e(es,bR),e(bR,Feo),e(es,Teo),e(es,vR),e(vR,Meo),e(es,Eeo),e(k,Ceo),e(k,Lg),e(Lg,zre),e(zre,weo),e(Lg,Aeo),e(Lg,FR),e(FR,yeo),e(Lg,Leo),e(k,xeo),e(k,os),e(os,Qre),e(Qre,$eo),e(os,keo),e(os,TR),e(TR,Seo),e(os,Reo),e(os,MR),e(MR,Beo),e(os,Peo),e(k,Ieo),e(k,rs),e(rs,Wre),e(Wre,qeo),e(rs,Neo),e(rs,ER),e(ER,jeo),e(rs,Deo),e(rs,CR),e(CR,Geo),e(rs,Oeo),e(k,Veo),e(k,ts),e(ts,Hre),e(Hre,Xeo),e(ts,zeo),e(ts,wR),e(wR,Qeo),e(ts,Weo),e(ts,AR),e(AR,Heo),e(ts,Ueo),e(k,Jeo),e(k,as),e(as,Ure),e(Ure,Yeo),e(as,Keo),e(as,yR),e(yR,Zeo),e(as,eoo),e(as,LR),e(LR,ooo),e(as,roo),e(k,too),e(k,ns),e(ns,Jre),e(Jre,aoo),e(ns,noo),e(ns,xR),e(xR,soo),e(ns,loo),e(ns,$R),e($R,ioo),e(ns,doo),e(k,coo),e(k,ss),e(ss,Yre),e(Yre,foo),e(ss,moo),e(ss,kR),e(kR,goo),e(ss,hoo),e(ss,SR),e(SR,poo),e(ss,uoo),e(k,_oo),e(k,xg),e(xg,Kre),e(Kre,boo),e(xg,voo),e(xg,RR),e(RR,Foo),e(xg,Too),e(k,Moo),e(k,ls),e(ls,Zre),e(Zre,Eoo),e(ls,Coo),e(ls,BR),e(BR,woo),e(ls,Aoo),e(ls,PR),e(PR,yoo),e(ls,Loo),e(k,xoo),e(k,$g),e($g,ete),e(ete,$oo),e($g,koo),e($g,IR),e(IR,Soo),e($g,Roo),e(k,Boo),e(k,kg),e(kg,ote),e(ote,Poo),e(kg,Ioo),e(kg,qR),e(qR,qoo),e(kg,Noo),e(k,joo),e(k,is),e(is,rte),e(rte,Doo),e(is,Goo),e(is,NR),e(NR,Ooo),e(is,Voo),e(is,jR),e(jR,Xoo),e(is,zoo),e(k,Qoo),e(k,ds),e(ds,tte),e(tte,Woo),e(ds,Hoo),e(ds,DR),e(DR,Uoo),e(ds,Joo),e(ds,GR),e(GR,Yoo),e(ds,Koo),e(k,Zoo),e(k,cs),e(cs,ate),e(ate,ero),e(cs,oro),e(cs,OR),e(OR,rro),e(cs,tro),e(cs,VR),e(VR,aro),e(cs,nro),e(k,sro),e(k,Sg),e(Sg,nte),e(nte,lro),e(Sg,iro),e(Sg,XR),e(XR,dro),e(Sg,cro),e(k,fro),e(k,fs),e(fs,ste),e(ste,mro),e(fs,gro),e(fs,zR),e(zR,hro),e(fs,pro),e(fs,QR),e(QR,uro),e(fs,_ro),e(k,bro),e(k,ms),e(ms,lte),e(lte,vro),e(ms,Fro),e(ms,WR),e(WR,Tro),e(ms,Mro),e(ms,HR),e(HR,Ero),e(ms,Cro),e(k,wro),e(k,gs),e(gs,ite),e(ite,Aro),e(gs,yro),e(gs,UR),e(UR,Lro),e(gs,xro),e(gs,JR),e(JR,$ro),e(gs,kro),e(k,Sro),e(k,hs),e(hs,dte),e(dte,Rro),e(hs,Bro),e(hs,YR),e(YR,Pro),e(hs,Iro),e(hs,KR),e(KR,qro),e(hs,Nro),e(k,jro),e(k,ps),e(ps,cte),e(cte,Dro),e(ps,Gro),e(ps,ZR),e(ZR,Oro),e(ps,Vro),e(ps,eB),e(eB,Xro),e(ps,zro),e(k,Qro),e(k,Rg),e(Rg,fte),e(fte,Wro),e(Rg,Hro),e(Rg,oB),e(oB,Uro),e(Rg,Jro),e(k,Yro),e(k,us),e(us,mte),e(mte,Kro),e(us,Zro),e(us,rB),e(rB,eto),e(us,oto),e(us,tB),e(tB,rto),e(us,tto),e(k,ato),e(k,Bg),e(Bg,gte),e(gte,nto),e(Bg,sto),e(Bg,aB),e(aB,lto),e(Bg,ito),e(k,dto),e(k,Pg),e(Pg,hte),e(hte,cto),e(Pg,fto),e(Pg,nB),e(nB,mto),e(Pg,gto),e(k,hto),e(k,Ig),e(Ig,pte),e(pte,pto),e(Ig,uto),e(Ig,sB),e(sB,_to),e(Ig,bto),e(k,vto),e(k,qg),e(qg,ute),e(ute,Fto),e(qg,Tto),e(qg,lB),e(lB,Mto),e(qg,Eto),e(k,Cto),e(k,_s),e(_s,_te),e(_te,wto),e(_s,Ato),e(_s,iB),e(iB,yto),e(_s,Lto),e(_s,dB),e(dB,xto),e(_s,$to),e(k,kto),e(k,Ng),e(Ng,bte),e(bte,Sto),e(Ng,Rto),e(Ng,cB),e(cB,Bto),e(Ng,Pto),e(k,Ito),e(k,bs),e(bs,vte),e(vte,qto),e(bs,Nto),e(bs,fB),e(fB,jto),e(bs,Dto),e(bs,mB),e(mB,Gto),e(bs,Oto),e(k,Vto),e(k,vs),e(vs,Fte),e(Fte,Xto),e(vs,zto),e(vs,gB),e(gB,Qto),e(vs,Wto),e(vs,hB),e(hB,Hto),e(vs,Uto),e(k,Jto),e(k,Fs),e(Fs,Tte),e(Tte,Yto),e(Fs,Kto),e(Fs,pB),e(pB,Zto),e(Fs,eao),e(Fs,uB),e(uB,oao),e(Fs,rao),e(k,tao),e(k,Ts),e(Ts,Mte),e(Mte,aao),e(Ts,nao),e(Ts,_B),e(_B,sao),e(Ts,lao),e(Ts,bB),e(bB,iao),e(Ts,dao),e(k,cao),e(k,Ms),e(Ms,Ete),e(Ete,fao),e(Ms,mao),e(Ms,vB),e(vB,gao),e(Ms,hao),e(Ms,FB),e(FB,pao),e(Ms,uao),e(k,_ao),e(k,Es),e(Es,Cte),e(Cte,bao),e(Es,vao),e(Es,TB),e(TB,Fao),e(Es,Tao),e(Es,MB),e(MB,Mao),e(Es,Eao),e(k,Cao),e(k,jg),e(jg,wte),e(wte,wao),e(jg,Aao),e(jg,EB),e(EB,yao),e(jg,Lao),e(k,xao),e(k,Dg),e(Dg,Ate),e(Ate,$ao),e(Dg,kao),e(Dg,CB),e(CB,Sao),e(Dg,Rao),e(k,Bao),e(k,Cs),e(Cs,yte),e(yte,Pao),e(Cs,Iao),e(Cs,wB),e(wB,qao),e(Cs,Nao),e(Cs,AB),e(AB,jao),e(Cs,Dao),e(k,Gao),e(k,ws),e(ws,Lte),e(Lte,Oao),e(ws,Vao),e(ws,yB),e(yB,Xao),e(ws,zao),e(ws,LB),e(LB,Qao),e(ws,Wao),e(k,Hao),e(k,As),e(As,xte),e(xte,Uao),e(As,Jao),e(As,xB),e(xB,Yao),e(As,Kao),e(As,$B),e($B,Zao),e(As,eno),e(k,ono),e(k,Gg),e(Gg,$te),e($te,rno),e(Gg,tno),e(Gg,kB),e(kB,ano),e(Gg,nno),e(k,sno),e(k,Og),e(Og,kte),e(kte,lno),e(Og,ino),e(Og,SB),e(SB,dno),e(Og,cno),e(k,fno),e(k,Vg),e(Vg,Ste),e(Ste,mno),e(Vg,gno),e(Vg,RB),e(RB,hno),e(Vg,pno),e(k,uno),e(k,ys),e(ys,Rte),e(Rte,_no),e(ys,bno),e(ys,BB),e(BB,vno),e(ys,Fno),e(ys,PB),e(PB,Tno),e(ys,Mno),e(k,Eno),e(k,Xg),e(Xg,Bte),e(Bte,Cno),e(Xg,wno),e(Xg,IB),e(IB,Ano),e(Xg,yno),e(k,Lno),e(k,zg),e(zg,Pte),e(Pte,xno),e(zg,$no),e(zg,qB),e(qB,kno),e(zg,Sno),e(k,Rno),e(k,Ls),e(Ls,Ite),e(Ite,Bno),e(Ls,Pno),e(Ls,NB),e(NB,Ino),e(Ls,qno),e(Ls,jB),e(jB,Nno),e(Ls,jno),e(k,Dno),e(k,Qg),e(Qg,qte),e(qte,Gno),e(Qg,Ono),e(Qg,DB),e(DB,Vno),e(Qg,Xno),e(k,zno),e(k,Wg),e(Wg,Nte),e(Nte,Qno),e(Wg,Wno),e(Wg,GB),e(GB,Hno),e(Wg,Uno),e(k,Jno),e(k,xs),e(xs,jte),e(jte,Yno),e(xs,Kno),e(xs,OB),e(OB,Zno),e(xs,eso),e(xs,VB),e(VB,oso),e(xs,rso),e(k,tso),e(k,$s),e($s,Dte),e(Dte,aso),e($s,nso),e($s,XB),e(XB,sso),e($s,lso),e($s,zB),e(zB,iso),e($s,dso),e(k,cso),e(k,ks),e(ks,Gte),e(Gte,fso),e(ks,mso),e(ks,QB),e(QB,gso),e(ks,hso),e(ks,WB),e(WB,pso),e(ks,uso),e(k,_so),e(k,Ss),e(Ss,Ote),e(Ote,bso),e(Ss,vso),e(Ss,HB),e(HB,Fso),e(Ss,Tso),e(Ss,UB),e(UB,Mso),e(Ss,Eso),e(Cr,Cso),M(Hg,Cr,null),e(wo,wso),e(wo,Ug),M(c6,Ug,null),e(Ug,Aso),e(Ug,Vte),e(Vte,yso),b(f,HPe,_),b(f,vi,_),e(vi,Jg),e(Jg,Xte),M(f6,Xte,null),e(vi,Lso),e(vi,zte),e(zte,xso),b(f,UPe,_),b(f,Ao,_),M(m6,Ao,null),e(Ao,$so),e(Ao,g6),e(g6,kso),e(g6,JB),e(JB,Sso),e(g6,Rso),e(Ao,Bso),e(Ao,h6),e(h6,Pso),e(h6,Qte),e(Qte,Iso),e(h6,qso),e(Ao,Nso),e(Ao,Qe),M(p6,Qe,null),e(Qe,jso),e(Qe,Wte),e(Wte,Dso),e(Qe,Gso),e(Qe,wa),e(wa,Oso),e(wa,Hte),e(Hte,Vso),e(wa,Xso),e(wa,Ute),e(Ute,zso),e(wa,Qso),e(wa,Jte),e(Jte,Wso),e(wa,Hso),e(Qe,Uso),e(Qe,oe),e(oe,Yg),e(Yg,Yte),e(Yte,Jso),e(Yg,Yso),e(Yg,YB),e(YB,Kso),e(Yg,Zso),e(oe,elo),e(oe,Kg),e(Kg,Kte),e(Kte,olo),e(Kg,rlo),e(Kg,KB),e(KB,tlo),e(Kg,alo),e(oe,nlo),e(oe,Zg),e(Zg,Zte),e(Zte,slo),e(Zg,llo),e(Zg,ZB),e(ZB,ilo),e(Zg,dlo),e(oe,clo),e(oe,eh),e(eh,eae),e(eae,flo),e(eh,mlo),e(eh,eP),e(eP,glo),e(eh,hlo),e(oe,plo),e(oe,oh),e(oh,oae),e(oae,ulo),e(oh,_lo),e(oh,oP),e(oP,blo),e(oh,vlo),e(oe,Flo),e(oe,rh),e(rh,rae),e(rae,Tlo),e(rh,Mlo),e(rh,rP),e(rP,Elo),e(rh,Clo),e(oe,wlo),e(oe,th),e(th,tae),e(tae,Alo),e(th,ylo),e(th,tP),e(tP,Llo),e(th,xlo),e(oe,$lo),e(oe,ah),e(ah,aae),e(aae,klo),e(ah,Slo),e(ah,aP),e(aP,Rlo),e(ah,Blo),e(oe,Plo),e(oe,nh),e(nh,nae),e(nae,Ilo),e(nh,qlo),e(nh,nP),e(nP,Nlo),e(nh,jlo),e(oe,Dlo),e(oe,sh),e(sh,sae),e(sae,Glo),e(sh,Olo),e(sh,sP),e(sP,Vlo),e(sh,Xlo),e(oe,zlo),e(oe,lh),e(lh,lae),e(lae,Qlo),e(lh,Wlo),e(lh,lP),e(lP,Hlo),e(lh,Ulo),e(oe,Jlo),e(oe,ih),e(ih,iae),e(iae,Ylo),e(ih,Klo),e(ih,iP),e(iP,Zlo),e(ih,eio),e(oe,oio),e(oe,dh),e(dh,dae),e(dae,rio),e(dh,tio),e(dh,dP),e(dP,aio),e(dh,nio),e(oe,sio),e(oe,ch),e(ch,cae),e(cae,lio),e(ch,iio),e(ch,cP),e(cP,dio),e(ch,cio),e(oe,fio),e(oe,fh),e(fh,fae),e(fae,mio),e(fh,gio),e(fh,fP),e(fP,hio),e(fh,pio),e(oe,uio),e(oe,mh),e(mh,mae),e(mae,_io),e(mh,bio),e(mh,mP),e(mP,vio),e(mh,Fio),e(oe,Tio),e(oe,gh),e(gh,gae),e(gae,Mio),e(gh,Eio),e(gh,gP),e(gP,Cio),e(gh,wio),e(oe,Aio),e(oe,hh),e(hh,hae),e(hae,yio),e(hh,Lio),e(hh,hP),e(hP,xio),e(hh,$io),e(oe,kio),e(oe,ph),e(ph,pae),e(pae,Sio),e(ph,Rio),e(ph,pP),e(pP,Bio),e(ph,Pio),e(oe,Iio),e(oe,uh),e(uh,uae),e(uae,qio),e(uh,Nio),e(uh,uP),e(uP,jio),e(uh,Dio),e(oe,Gio),e(oe,_h),e(_h,_ae),e(_ae,Oio),e(_h,Vio),e(_h,_P),e(_P,Xio),e(_h,zio),e(oe,Qio),e(oe,bh),e(bh,bae),e(bae,Wio),e(bh,Hio),e(bh,bP),e(bP,Uio),e(bh,Jio),e(oe,Yio),e(oe,vh),e(vh,vae),e(vae,Kio),e(vh,Zio),e(vh,vP),e(vP,edo),e(vh,odo),e(oe,rdo),e(oe,Fh),e(Fh,Fae),e(Fae,tdo),e(Fh,ado),e(Fh,FP),e(FP,ndo),e(Fh,sdo),e(oe,ldo),e(oe,Th),e(Th,Tae),e(Tae,ido),e(Th,ddo),e(Th,TP),e(TP,cdo),e(Th,fdo),e(Qe,mdo),M(Mh,Qe,null),e(Qe,gdo),M(Eh,Qe,null),e(Ao,hdo),e(Ao,Ch),M(u6,Ch,null),e(Ch,pdo),e(Ch,Mae),e(Mae,udo),b(f,JPe,_),b(f,Fi,_),e(Fi,wh),e(wh,Eae),M(_6,Eae,null),e(Fi,_do),e(Fi,Cae),e(Cae,bdo),b(f,YPe,_),b(f,yo,_),M(b6,yo,null),e(yo,vdo),e(yo,v6),e(v6,Fdo),e(v6,MP),e(MP,Tdo),e(v6,Mdo),e(yo,Edo),e(yo,F6),e(F6,Cdo),e(F6,wae),e(wae,wdo),e(F6,Ado),e(yo,ydo),e(yo,We),M(T6,We,null),e(We,Ldo),e(We,Aae),e(Aae,xdo),e(We,$do),e(We,Ti),e(Ti,kdo),e(Ti,yae),e(yae,Sdo),e(Ti,Rdo),e(Ti,Lae),e(Lae,Bdo),e(Ti,Pdo),e(We,Ido),e(We,_e),e(_e,Ah),e(Ah,xae),e(xae,qdo),e(Ah,Ndo),e(Ah,EP),e(EP,jdo),e(Ah,Ddo),e(_e,Gdo),e(_e,yh),e(yh,$ae),e($ae,Odo),e(yh,Vdo),e(yh,kae),e(kae,Xdo),e(yh,zdo),e(_e,Qdo),e(_e,Lh),e(Lh,Sae),e(Sae,Wdo),e(Lh,Hdo),e(Lh,CP),e(CP,Udo),e(Lh,Jdo),e(_e,Ydo),e(_e,xh),e(xh,Rae),e(Rae,Kdo),e(xh,Zdo),e(xh,wP),e(wP,eco),e(xh,oco),e(_e,rco),e(_e,$h),e($h,Bae),e(Bae,tco),e($h,aco),e($h,AP),e(AP,nco),e($h,sco),e(_e,lco),e(_e,kh),e(kh,Pae),e(Pae,ico),e(kh,dco),e(kh,yP),e(yP,cco),e(kh,fco),e(_e,mco),e(_e,Sh),e(Sh,Iae),e(Iae,gco),e(Sh,hco),e(Sh,LP),e(LP,pco),e(Sh,uco),e(_e,_co),e(_e,Rh),e(Rh,qae),e(qae,bco),e(Rh,vco),e(Rh,xP),e(xP,Fco),e(Rh,Tco),e(_e,Mco),e(_e,Bh),e(Bh,Nae),e(Nae,Eco),e(Bh,Cco),e(Bh,$P),e($P,wco),e(Bh,Aco),e(_e,yco),e(_e,Ph),e(Ph,jae),e(jae,Lco),e(Ph,xco),e(Ph,kP),e(kP,$co),e(Ph,kco),e(_e,Sco),e(_e,Ih),e(Ih,Dae),e(Dae,Rco),e(Ih,Bco),e(Ih,SP),e(SP,Pco),e(Ih,Ico),e(_e,qco),e(_e,qh),e(qh,Gae),e(Gae,Nco),e(qh,jco),e(qh,RP),e(RP,Dco),e(qh,Gco),e(_e,Oco),e(_e,Nh),e(Nh,Oae),e(Oae,Vco),e(Nh,Xco),e(Nh,BP),e(BP,zco),e(Nh,Qco),e(_e,Wco),e(_e,jh),e(jh,Vae),e(Vae,Hco),e(jh,Uco),e(jh,PP),e(PP,Jco),e(jh,Yco),e(_e,Kco),e(_e,Dh),e(Dh,Xae),e(Xae,Zco),e(Dh,efo),e(Dh,IP),e(IP,ofo),e(Dh,rfo),e(We,tfo),M(Gh,We,null),e(We,afo),M(Oh,We,null),e(yo,nfo),e(yo,Vh),M(M6,Vh,null),e(Vh,sfo),e(Vh,zae),e(zae,lfo),b(f,KPe,_),b(f,Mi,_),e(Mi,Xh),e(Xh,Qae),M(E6,Qae,null),e(Mi,ifo),e(Mi,Wae),e(Wae,dfo),b(f,ZPe,_),b(f,Lo,_),M(C6,Lo,null),e(Lo,cfo),e(Lo,Ei),e(Ei,ffo),e(Ei,qP),e(qP,mfo),e(Ei,gfo),e(Ei,NP),e(NP,hfo),e(Ei,pfo),e(Lo,ufo),e(Lo,w6),e(w6,_fo),e(w6,Hae),e(Hae,bfo),e(w6,vfo),e(Lo,Ffo),e(Lo,ot),M(A6,ot,null),e(ot,Tfo),e(ot,Uae),e(Uae,Mfo),e(ot,Efo),e(ot,Ci),e(Ci,Cfo),e(Ci,Jae),e(Jae,wfo),e(Ci,Afo),e(Ci,jP),e(jP,yfo),e(Ci,Lfo),e(ot,xfo),M(zh,ot,null),e(Lo,$fo),e(Lo,He),M(y6,He,null),e(He,kfo),e(He,Yae),e(Yae,Sfo),e(He,Rfo),e(He,Aa),e(Aa,Bfo),e(Aa,Kae),e(Kae,Pfo),e(Aa,Ifo),e(Aa,Zae),e(Zae,qfo),e(Aa,Nfo),e(Aa,ene),e(ene,jfo),e(Aa,Dfo),e(He,Gfo),e(He,x),e(x,Qh),e(Qh,one),e(one,Ofo),e(Qh,Vfo),e(Qh,DP),e(DP,Xfo),e(Qh,zfo),e(x,Qfo),e(x,Wh),e(Wh,rne),e(rne,Wfo),e(Wh,Hfo),e(Wh,GP),e(GP,Ufo),e(Wh,Jfo),e(x,Yfo),e(x,Hh),e(Hh,tne),e(tne,Kfo),e(Hh,Zfo),e(Hh,OP),e(OP,emo),e(Hh,omo),e(x,rmo),e(x,Uh),e(Uh,ane),e(ane,tmo),e(Uh,amo),e(Uh,VP),e(VP,nmo),e(Uh,smo),e(x,lmo),e(x,Jh),e(Jh,nne),e(nne,imo),e(Jh,dmo),e(Jh,XP),e(XP,cmo),e(Jh,fmo),e(x,mmo),e(x,Yh),e(Yh,sne),e(sne,gmo),e(Yh,hmo),e(Yh,zP),e(zP,pmo),e(Yh,umo),e(x,_mo),e(x,Kh),e(Kh,lne),e(lne,bmo),e(Kh,vmo),e(Kh,QP),e(QP,Fmo),e(Kh,Tmo),e(x,Mmo),e(x,Zh),e(Zh,ine),e(ine,Emo),e(Zh,Cmo),e(Zh,WP),e(WP,wmo),e(Zh,Amo),e(x,ymo),e(x,ep),e(ep,dne),e(dne,Lmo),e(ep,xmo),e(ep,HP),e(HP,$mo),e(ep,kmo),e(x,Smo),e(x,op),e(op,cne),e(cne,Rmo),e(op,Bmo),e(op,UP),e(UP,Pmo),e(op,Imo),e(x,qmo),e(x,rp),e(rp,fne),e(fne,Nmo),e(rp,jmo),e(rp,JP),e(JP,Dmo),e(rp,Gmo),e(x,Omo),e(x,tp),e(tp,mne),e(mne,Vmo),e(tp,Xmo),e(tp,YP),e(YP,zmo),e(tp,Qmo),e(x,Wmo),e(x,ap),e(ap,gne),e(gne,Hmo),e(ap,Umo),e(ap,KP),e(KP,Jmo),e(ap,Ymo),e(x,Kmo),e(x,np),e(np,hne),e(hne,Zmo),e(np,ego),e(np,ZP),e(ZP,ogo),e(np,rgo),e(x,tgo),e(x,sp),e(sp,pne),e(pne,ago),e(sp,ngo),e(sp,eI),e(eI,sgo),e(sp,lgo),e(x,igo),e(x,lp),e(lp,une),e(une,dgo),e(lp,cgo),e(lp,oI),e(oI,fgo),e(lp,mgo),e(x,ggo),e(x,ip),e(ip,_ne),e(_ne,hgo),e(ip,pgo),e(ip,rI),e(rI,ugo),e(ip,_go),e(x,bgo),e(x,dp),e(dp,bne),e(bne,vgo),e(dp,Fgo),e(dp,tI),e(tI,Tgo),e(dp,Mgo),e(x,Ego),e(x,cp),e(cp,vne),e(vne,Cgo),e(cp,wgo),e(cp,aI),e(aI,Ago),e(cp,ygo),e(x,Lgo),e(x,fp),e(fp,Fne),e(Fne,xgo),e(fp,$go),e(fp,nI),e(nI,kgo),e(fp,Sgo),e(x,Rgo),e(x,mp),e(mp,Tne),e(Tne,Bgo),e(mp,Pgo),e(mp,sI),e(sI,Igo),e(mp,qgo),e(x,Ngo),e(x,gp),e(gp,Mne),e(Mne,jgo),e(gp,Dgo),e(gp,lI),e(lI,Ggo),e(gp,Ogo),e(x,Vgo),e(x,hp),e(hp,Ene),e(Ene,Xgo),e(hp,zgo),e(hp,iI),e(iI,Qgo),e(hp,Wgo),e(x,Hgo),e(x,pp),e(pp,Cne),e(Cne,Ugo),e(pp,Jgo),e(pp,dI),e(dI,Ygo),e(pp,Kgo),e(x,Zgo),e(x,up),e(up,wne),e(wne,eho),e(up,oho),e(up,cI),e(cI,rho),e(up,tho),e(x,aho),e(x,_p),e(_p,Ane),e(Ane,nho),e(_p,sho),e(_p,fI),e(fI,lho),e(_p,iho),e(x,dho),e(x,bp),e(bp,yne),e(yne,cho),e(bp,fho),e(bp,mI),e(mI,mho),e(bp,gho),e(x,hho),e(x,vp),e(vp,Lne),e(Lne,pho),e(vp,uho),e(vp,gI),e(gI,_ho),e(vp,bho),e(x,vho),e(x,Fp),e(Fp,xne),e(xne,Fho),e(Fp,Tho),e(Fp,hI),e(hI,Mho),e(Fp,Eho),e(x,Cho),e(x,Tp),e(Tp,$ne),e($ne,who),e(Tp,Aho),e(Tp,pI),e(pI,yho),e(Tp,Lho),e(x,xho),e(x,Mp),e(Mp,kne),e(kne,$ho),e(Mp,kho),e(Mp,uI),e(uI,Sho),e(Mp,Rho),e(x,Bho),e(x,Rs),e(Rs,Sne),e(Sne,Pho),e(Rs,Iho),e(Rs,_I),e(_I,qho),e(Rs,Nho),e(Rs,bI),e(bI,jho),e(Rs,Dho),e(x,Gho),e(x,Ep),e(Ep,Rne),e(Rne,Oho),e(Ep,Vho),e(Ep,vI),e(vI,Xho),e(Ep,zho),e(x,Qho),e(x,Cp),e(Cp,Bne),e(Bne,Who),e(Cp,Hho),e(Cp,FI),e(FI,Uho),e(Cp,Jho),e(x,Yho),e(x,wp),e(wp,Pne),e(Pne,Kho),e(wp,Zho),e(wp,TI),e(TI,epo),e(wp,opo),e(x,rpo),e(x,Ap),e(Ap,Ine),e(Ine,tpo),e(Ap,apo),e(Ap,MI),e(MI,npo),e(Ap,spo),e(x,lpo),e(x,yp),e(yp,qne),e(qne,ipo),e(yp,dpo),e(yp,EI),e(EI,cpo),e(yp,fpo),e(x,mpo),e(x,Lp),e(Lp,Nne),e(Nne,gpo),e(Lp,hpo),e(Lp,CI),e(CI,ppo),e(Lp,upo),e(x,_po),e(x,xp),e(xp,jne),e(jne,bpo),e(xp,vpo),e(xp,wI),e(wI,Fpo),e(xp,Tpo),e(x,Mpo),e(x,$p),e($p,Dne),e(Dne,Epo),e($p,Cpo),e($p,AI),e(AI,wpo),e($p,Apo),e(x,ypo),e(x,kp),e(kp,Gne),e(Gne,Lpo),e(kp,xpo),e(kp,yI),e(yI,$po),e(kp,kpo),e(x,Spo),e(x,Sp),e(Sp,One),e(One,Rpo),e(Sp,Bpo),e(Sp,LI),e(LI,Ppo),e(Sp,Ipo),e(x,qpo),e(x,Rp),e(Rp,Vne),e(Vne,Npo),e(Rp,jpo),e(Rp,xI),e(xI,Dpo),e(Rp,Gpo),e(x,Opo),e(x,Bp),e(Bp,Xne),e(Xne,Vpo),e(Bp,Xpo),e(Bp,$I),e($I,zpo),e(Bp,Qpo),e(x,Wpo),e(x,Pp),e(Pp,zne),e(zne,Hpo),e(Pp,Upo),e(Pp,kI),e(kI,Jpo),e(Pp,Ypo),e(x,Kpo),e(x,Ip),e(Ip,Qne),e(Qne,Zpo),e(Ip,euo),e(Ip,SI),e(SI,ouo),e(Ip,ruo),e(x,tuo),e(x,qp),e(qp,Wne),e(Wne,auo),e(qp,nuo),e(qp,RI),e(RI,suo),e(qp,luo),e(x,iuo),e(x,Np),e(Np,Hne),e(Hne,duo),e(Np,cuo),e(Np,BI),e(BI,fuo),e(Np,muo),e(x,guo),e(x,jp),e(jp,Une),e(Une,huo),e(jp,puo),e(jp,PI),e(PI,uuo),e(jp,_uo),e(x,buo),e(x,Dp),e(Dp,Jne),e(Jne,vuo),e(Dp,Fuo),e(Dp,II),e(II,Tuo),e(Dp,Muo),e(x,Euo),e(x,Gp),e(Gp,Yne),e(Yne,Cuo),e(Gp,wuo),e(Gp,qI),e(qI,Auo),e(Gp,yuo),e(x,Luo),e(x,Op),e(Op,Kne),e(Kne,xuo),e(Op,$uo),e(Op,NI),e(NI,kuo),e(Op,Suo),e(x,Ruo),e(x,Vp),e(Vp,Zne),e(Zne,Buo),e(Vp,Puo),e(Vp,jI),e(jI,Iuo),e(Vp,quo),e(x,Nuo),e(x,Xp),e(Xp,ese),e(ese,juo),e(Xp,Duo),e(Xp,DI),e(DI,Guo),e(Xp,Ouo),e(x,Vuo),e(x,zp),e(zp,ose),e(ose,Xuo),e(zp,zuo),e(zp,GI),e(GI,Quo),e(zp,Wuo),e(x,Huo),e(x,Qp),e(Qp,rse),e(rse,Uuo),e(Qp,Juo),e(Qp,OI),e(OI,Yuo),e(Qp,Kuo),e(x,Zuo),e(x,Wp),e(Wp,tse),e(tse,e_o),e(Wp,o_o),e(Wp,VI),e(VI,r_o),e(Wp,t_o),e(x,a_o),e(x,Hp),e(Hp,ase),e(ase,n_o),e(Hp,s_o),e(Hp,XI),e(XI,l_o),e(Hp,i_o),e(x,d_o),e(x,Up),e(Up,nse),e(nse,c_o),e(Up,f_o),e(Up,zI),e(zI,m_o),e(Up,g_o),e(x,h_o),e(x,Jp),e(Jp,sse),e(sse,p_o),e(Jp,u_o),e(Jp,QI),e(QI,__o),e(Jp,b_o),e(x,v_o),e(x,Yp),e(Yp,lse),e(lse,F_o),e(Yp,T_o),e(Yp,WI),e(WI,M_o),e(Yp,E_o),e(x,C_o),e(x,Kp),e(Kp,ise),e(ise,w_o),e(Kp,A_o),e(Kp,HI),e(HI,y_o),e(Kp,L_o),e(x,x_o),e(x,Zp),e(Zp,dse),e(dse,$_o),e(Zp,k_o),e(Zp,UI),e(UI,S_o),e(Zp,R_o),e(x,B_o),e(x,eu),e(eu,cse),e(cse,P_o),e(eu,I_o),e(eu,JI),e(JI,q_o),e(eu,N_o),e(x,j_o),e(x,ou),e(ou,fse),e(fse,D_o),e(ou,G_o),e(ou,YI),e(YI,O_o),e(ou,V_o),e(x,X_o),e(x,ru),e(ru,mse),e(mse,z_o),e(ru,Q_o),e(ru,KI),e(KI,W_o),e(ru,H_o),e(x,U_o),e(x,tu),e(tu,gse),e(gse,J_o),e(tu,Y_o),e(tu,ZI),e(ZI,K_o),e(tu,Z_o),e(x,e1o),e(x,au),e(au,hse),e(hse,o1o),e(au,r1o),e(au,eq),e(eq,t1o),e(au,a1o),e(x,n1o),e(x,nu),e(nu,pse),e(pse,s1o),e(nu,l1o),e(nu,oq),e(oq,i1o),e(nu,d1o),e(x,c1o),e(x,su),e(su,use),e(use,f1o),e(su,m1o),e(su,rq),e(rq,g1o),e(su,h1o),e(x,p1o),e(x,lu),e(lu,_se),e(_se,u1o),e(lu,_1o),e(lu,tq),e(tq,b1o),e(lu,v1o),e(x,F1o),e(x,iu),e(iu,bse),e(bse,T1o),e(iu,M1o),e(iu,aq),e(aq,E1o),e(iu,C1o),e(x,w1o),e(x,du),e(du,vse),e(vse,A1o),e(du,y1o),e(du,nq),e(nq,L1o),e(du,x1o),e(x,$1o),e(x,cu),e(cu,Fse),e(Fse,k1o),e(cu,S1o),e(cu,sq),e(sq,R1o),e(cu,B1o),e(x,P1o),e(x,fu),e(fu,Tse),e(Tse,I1o),e(fu,q1o),e(fu,lq),e(lq,N1o),e(fu,j1o),e(x,D1o),e(x,mu),e(mu,Mse),e(Mse,G1o),e(mu,O1o),e(mu,iq),e(iq,V1o),e(mu,X1o),e(x,z1o),e(x,gu),e(gu,Ese),e(Ese,Q1o),e(gu,W1o),e(gu,dq),e(dq,H1o),e(gu,U1o),e(x,J1o),e(x,hu),e(hu,Cse),e(Cse,Y1o),e(hu,K1o),e(hu,cq),e(cq,Z1o),e(hu,e2o),e(x,o2o),e(x,pu),e(pu,wse),e(wse,r2o),e(pu,t2o),e(pu,fq),e(fq,a2o),e(pu,n2o),e(x,s2o),e(x,uu),e(uu,Ase),e(Ase,l2o),e(uu,i2o),e(uu,mq),e(mq,d2o),e(uu,c2o),e(x,f2o),e(x,_u),e(_u,yse),e(yse,m2o),e(_u,g2o),e(_u,gq),e(gq,h2o),e(_u,p2o),e(x,u2o),e(x,bu),e(bu,Lse),e(Lse,_2o),e(bu,b2o),e(bu,hq),e(hq,v2o),e(bu,F2o),e(x,T2o),e(x,vu),e(vu,xse),e(xse,M2o),e(vu,E2o),e(vu,pq),e(pq,C2o),e(vu,w2o),e(x,A2o),e(x,Fu),e(Fu,$se),e($se,y2o),e(Fu,L2o),e(Fu,uq),e(uq,x2o),e(Fu,$2o),e(x,k2o),e(x,Tu),e(Tu,kse),e(kse,S2o),e(Tu,R2o),e(Tu,_q),e(_q,B2o),e(Tu,P2o),e(x,I2o),e(x,Mu),e(Mu,Sse),e(Sse,q2o),e(Mu,N2o),e(Mu,bq),e(bq,j2o),e(Mu,D2o),e(x,G2o),e(x,Eu),e(Eu,Rse),e(Rse,O2o),e(Eu,V2o),e(Eu,vq),e(vq,X2o),e(Eu,z2o),e(x,Q2o),e(x,Cu),e(Cu,Bse),e(Bse,W2o),e(Cu,H2o),e(Cu,Fq),e(Fq,U2o),e(Cu,J2o),e(x,Y2o),e(x,wu),e(wu,Pse),e(Pse,K2o),e(wu,Z2o),e(wu,Tq),e(Tq,ebo),e(wu,obo),e(x,rbo),e(x,Au),e(Au,Ise),e(Ise,tbo),e(Au,abo),e(Au,Mq),e(Mq,nbo),e(Au,sbo),e(x,lbo),e(x,yu),e(yu,qse),e(qse,ibo),e(yu,dbo),e(yu,Eq),e(Eq,cbo),e(yu,fbo),e(x,mbo),e(x,Lu),e(Lu,Nse),e(Nse,gbo),e(Lu,hbo),e(Lu,Cq),e(Cq,pbo),e(Lu,ubo),e(x,_bo),e(x,xu),e(xu,jse),e(jse,bbo),e(xu,vbo),e(xu,wq),e(wq,Fbo),e(xu,Tbo),e(x,Mbo),e(x,$u),e($u,Dse),e(Dse,Ebo),e($u,Cbo),e($u,Aq),e(Aq,wbo),e($u,Abo),e(x,ybo),e(x,ku),e(ku,Gse),e(Gse,Lbo),e(ku,xbo),e(ku,yq),e(yq,$bo),e(ku,kbo),e(x,Sbo),e(x,Su),e(Su,Ose),e(Ose,Rbo),e(Su,Bbo),e(Su,Lq),e(Lq,Pbo),e(Su,Ibo),e(x,qbo),e(x,Ru),e(Ru,Vse),e(Vse,Nbo),e(Ru,jbo),e(Ru,xq),e(xq,Dbo),e(Ru,Gbo),e(He,Obo),e(He,Bu),e(Bu,Vbo),e(Bu,Xse),e(Xse,Xbo),e(Bu,zbo),e(Bu,zse),e(zse,Qbo),e(He,Wbo),M(Pu,He,null),b(f,eIe,_),b(f,wi,_),e(wi,Iu),e(Iu,Qse),M(L6,Qse,null),e(wi,Hbo),e(wi,Wse),e(Wse,Ubo),b(f,oIe,_),b(f,xo,_),M(x6,xo,null),e(xo,Jbo),e(xo,Ai),e(Ai,Ybo),e(Ai,$q),e($q,Kbo),e(Ai,Zbo),e(Ai,kq),e(kq,evo),e(Ai,ovo),e(xo,rvo),e(xo,$6),e($6,tvo),e($6,Hse),e(Hse,avo),e($6,nvo),e(xo,svo),e(xo,rt),M(k6,rt,null),e(rt,lvo),e(rt,Use),e(Use,ivo),e(rt,dvo),e(rt,yi),e(yi,cvo),e(yi,Jse),e(Jse,fvo),e(yi,mvo),e(yi,Sq),e(Sq,gvo),e(yi,hvo),e(rt,pvo),M(qu,rt,null),e(xo,uvo),e(xo,Ue),M(S6,Ue,null),e(Ue,_vo),e(Ue,Yse),e(Yse,bvo),e(Ue,vvo),e(Ue,ya),e(ya,Fvo),e(ya,Kse),e(Kse,Tvo),e(ya,Mvo),e(ya,Zse),e(Zse,Evo),e(ya,Cvo),e(ya,ele),e(ele,wvo),e(ya,Avo),e(Ue,yvo),e(Ue,G),e(G,Nu),e(Nu,ole),e(ole,Lvo),e(Nu,xvo),e(Nu,Rq),e(Rq,$vo),e(Nu,kvo),e(G,Svo),e(G,ju),e(ju,rle),e(rle,Rvo),e(ju,Bvo),e(ju,Bq),e(Bq,Pvo),e(ju,Ivo),e(G,qvo),e(G,Du),e(Du,tle),e(tle,Nvo),e(Du,jvo),e(Du,Pq),e(Pq,Dvo),e(Du,Gvo),e(G,Ovo),e(G,Gu),e(Gu,ale),e(ale,Vvo),e(Gu,Xvo),e(Gu,Iq),e(Iq,zvo),e(Gu,Qvo),e(G,Wvo),e(G,Ou),e(Ou,nle),e(nle,Hvo),e(Ou,Uvo),e(Ou,qq),e(qq,Jvo),e(Ou,Yvo),e(G,Kvo),e(G,Vu),e(Vu,sle),e(sle,Zvo),e(Vu,eFo),e(Vu,Nq),e(Nq,oFo),e(Vu,rFo),e(G,tFo),e(G,Xu),e(Xu,lle),e(lle,aFo),e(Xu,nFo),e(Xu,jq),e(jq,sFo),e(Xu,lFo),e(G,iFo),e(G,zu),e(zu,ile),e(ile,dFo),e(zu,cFo),e(zu,Dq),e(Dq,fFo),e(zu,mFo),e(G,gFo),e(G,Qu),e(Qu,dle),e(dle,hFo),e(Qu,pFo),e(Qu,Gq),e(Gq,uFo),e(Qu,_Fo),e(G,bFo),e(G,Wu),e(Wu,cle),e(cle,vFo),e(Wu,FFo),e(Wu,Oq),e(Oq,TFo),e(Wu,MFo),e(G,EFo),e(G,Hu),e(Hu,fle),e(fle,CFo),e(Hu,wFo),e(Hu,Vq),e(Vq,AFo),e(Hu,yFo),e(G,LFo),e(G,Uu),e(Uu,mle),e(mle,xFo),e(Uu,$Fo),e(Uu,Xq),e(Xq,kFo),e(Uu,SFo),e(G,RFo),e(G,Ju),e(Ju,gle),e(gle,BFo),e(Ju,PFo),e(Ju,zq),e(zq,IFo),e(Ju,qFo),e(G,NFo),e(G,Yu),e(Yu,hle),e(hle,jFo),e(Yu,DFo),e(Yu,Qq),e(Qq,GFo),e(Yu,OFo),e(G,VFo),e(G,Ku),e(Ku,ple),e(ple,XFo),e(Ku,zFo),e(Ku,Wq),e(Wq,QFo),e(Ku,WFo),e(G,HFo),e(G,Zu),e(Zu,ule),e(ule,UFo),e(Zu,JFo),e(Zu,Hq),e(Hq,YFo),e(Zu,KFo),e(G,ZFo),e(G,e_),e(e_,_le),e(_le,eTo),e(e_,oTo),e(e_,Uq),e(Uq,rTo),e(e_,tTo),e(G,aTo),e(G,o_),e(o_,ble),e(ble,nTo),e(o_,sTo),e(o_,Jq),e(Jq,lTo),e(o_,iTo),e(G,dTo),e(G,r_),e(r_,vle),e(vle,cTo),e(r_,fTo),e(r_,Yq),e(Yq,mTo),e(r_,gTo),e(G,hTo),e(G,t_),e(t_,Fle),e(Fle,pTo),e(t_,uTo),e(t_,Kq),e(Kq,_To),e(t_,bTo),e(G,vTo),e(G,a_),e(a_,Tle),e(Tle,FTo),e(a_,TTo),e(a_,Zq),e(Zq,MTo),e(a_,ETo),e(G,CTo),e(G,n_),e(n_,Mle),e(Mle,wTo),e(n_,ATo),e(n_,eN),e(eN,yTo),e(n_,LTo),e(G,xTo),e(G,s_),e(s_,Ele),e(Ele,$To),e(s_,kTo),e(s_,oN),e(oN,STo),e(s_,RTo),e(G,BTo),e(G,l_),e(l_,Cle),e(Cle,PTo),e(l_,ITo),e(l_,rN),e(rN,qTo),e(l_,NTo),e(G,jTo),e(G,i_),e(i_,wle),e(wle,DTo),e(i_,GTo),e(i_,tN),e(tN,OTo),e(i_,VTo),e(G,XTo),e(G,d_),e(d_,Ale),e(Ale,zTo),e(d_,QTo),e(d_,aN),e(aN,WTo),e(d_,HTo),e(G,UTo),e(G,c_),e(c_,yle),e(yle,JTo),e(c_,YTo),e(c_,nN),e(nN,KTo),e(c_,ZTo),e(G,e7o),e(G,f_),e(f_,Lle),e(Lle,o7o),e(f_,r7o),e(f_,sN),e(sN,t7o),e(f_,a7o),e(G,n7o),e(G,m_),e(m_,xle),e(xle,s7o),e(m_,l7o),e(m_,lN),e(lN,i7o),e(m_,d7o),e(G,c7o),e(G,g_),e(g_,$le),e($le,f7o),e(g_,m7o),e(g_,iN),e(iN,g7o),e(g_,h7o),e(G,p7o),e(G,h_),e(h_,kle),e(kle,u7o),e(h_,_7o),e(h_,dN),e(dN,b7o),e(h_,v7o),e(G,F7o),e(G,p_),e(p_,Sle),e(Sle,T7o),e(p_,M7o),e(p_,cN),e(cN,E7o),e(p_,C7o),e(G,w7o),e(G,u_),e(u_,Rle),e(Rle,A7o),e(u_,y7o),e(u_,fN),e(fN,L7o),e(u_,x7o),e(G,$7o),e(G,__),e(__,Ble),e(Ble,k7o),e(__,S7o),e(__,mN),e(mN,R7o),e(__,B7o),e(G,P7o),e(G,b_),e(b_,Ple),e(Ple,I7o),e(b_,q7o),e(b_,gN),e(gN,N7o),e(b_,j7o),e(G,D7o),e(G,v_),e(v_,Ile),e(Ile,G7o),e(v_,O7o),e(v_,hN),e(hN,V7o),e(v_,X7o),e(G,z7o),e(G,F_),e(F_,qle),e(qle,Q7o),e(F_,W7o),e(F_,pN),e(pN,H7o),e(F_,U7o),e(G,J7o),e(G,T_),e(T_,Nle),e(Nle,Y7o),e(T_,K7o),e(T_,uN),e(uN,Z7o),e(T_,e9o),e(G,o9o),e(G,M_),e(M_,jle),e(jle,r9o),e(M_,t9o),e(M_,_N),e(_N,a9o),e(M_,n9o),e(G,s9o),e(G,E_),e(E_,Dle),e(Dle,l9o),e(E_,i9o),e(E_,bN),e(bN,d9o),e(E_,c9o),e(Ue,f9o),e(Ue,C_),e(C_,m9o),e(C_,Gle),e(Gle,g9o),e(C_,h9o),e(C_,Ole),e(Ole,p9o),e(Ue,u9o),M(w_,Ue,null),b(f,rIe,_),b(f,Li,_),e(Li,A_),e(A_,Vle),M(R6,Vle,null),e(Li,_9o),e(Li,Xle),e(Xle,b9o),b(f,tIe,_),b(f,$o,_),M(B6,$o,null),e($o,v9o),e($o,xi),e(xi,F9o),e(xi,vN),e(vN,T9o),e(xi,M9o),e(xi,FN),e(FN,E9o),e(xi,C9o),e($o,w9o),e($o,P6),e(P6,A9o),e(P6,zle),e(zle,y9o),e(P6,L9o),e($o,x9o),e($o,tt),M(I6,tt,null),e(tt,$9o),e(tt,Qle),e(Qle,k9o),e(tt,S9o),e(tt,$i),e($i,R9o),e($i,Wle),e(Wle,B9o),e($i,P9o),e($i,TN),e(TN,I9o),e($i,q9o),e(tt,N9o),M(y_,tt,null),e($o,j9o),e($o,Je),M(q6,Je,null),e(Je,D9o),e(Je,Hle),e(Hle,G9o),e(Je,O9o),e(Je,La),e(La,V9o),e(La,Ule),e(Ule,X9o),e(La,z9o),e(La,Jle),e(Jle,Q9o),e(La,W9o),e(La,Yle),e(Yle,H9o),e(La,U9o),e(Je,J9o),e(Je,z),e(z,L_),e(L_,Kle),e(Kle,Y9o),e(L_,K9o),e(L_,MN),e(MN,Z9o),e(L_,eMo),e(z,oMo),e(z,x_),e(x_,Zle),e(Zle,rMo),e(x_,tMo),e(x_,EN),e(EN,aMo),e(x_,nMo),e(z,sMo),e(z,$_),e($_,eie),e(eie,lMo),e($_,iMo),e($_,CN),e(CN,dMo),e($_,cMo),e(z,fMo),e(z,k_),e(k_,oie),e(oie,mMo),e(k_,gMo),e(k_,wN),e(wN,hMo),e(k_,pMo),e(z,uMo),e(z,S_),e(S_,rie),e(rie,_Mo),e(S_,bMo),e(S_,AN),e(AN,vMo),e(S_,FMo),e(z,TMo),e(z,R_),e(R_,tie),e(tie,MMo),e(R_,EMo),e(R_,yN),e(yN,CMo),e(R_,wMo),e(z,AMo),e(z,B_),e(B_,aie),e(aie,yMo),e(B_,LMo),e(B_,LN),e(LN,xMo),e(B_,$Mo),e(z,kMo),e(z,P_),e(P_,nie),e(nie,SMo),e(P_,RMo),e(P_,xN),e(xN,BMo),e(P_,PMo),e(z,IMo),e(z,I_),e(I_,sie),e(sie,qMo),e(I_,NMo),e(I_,$N),e($N,jMo),e(I_,DMo),e(z,GMo),e(z,q_),e(q_,lie),e(lie,OMo),e(q_,VMo),e(q_,kN),e(kN,XMo),e(q_,zMo),e(z,QMo),e(z,N_),e(N_,iie),e(iie,WMo),e(N_,HMo),e(N_,SN),e(SN,UMo),e(N_,JMo),e(z,YMo),e(z,j_),e(j_,die),e(die,KMo),e(j_,ZMo),e(j_,RN),e(RN,e4o),e(j_,o4o),e(z,r4o),e(z,D_),e(D_,cie),e(cie,t4o),e(D_,a4o),e(D_,BN),e(BN,n4o),e(D_,s4o),e(z,l4o),e(z,G_),e(G_,fie),e(fie,i4o),e(G_,d4o),e(G_,PN),e(PN,c4o),e(G_,f4o),e(z,m4o),e(z,O_),e(O_,mie),e(mie,g4o),e(O_,h4o),e(O_,IN),e(IN,p4o),e(O_,u4o),e(z,_4o),e(z,V_),e(V_,gie),e(gie,b4o),e(V_,v4o),e(V_,qN),e(qN,F4o),e(V_,T4o),e(z,M4o),e(z,X_),e(X_,hie),e(hie,E4o),e(X_,C4o),e(X_,NN),e(NN,w4o),e(X_,A4o),e(z,y4o),e(z,z_),e(z_,pie),e(pie,L4o),e(z_,x4o),e(z_,jN),e(jN,$4o),e(z_,k4o),e(z,S4o),e(z,Q_),e(Q_,uie),e(uie,R4o),e(Q_,B4o),e(Q_,DN),e(DN,P4o),e(Q_,I4o),e(z,q4o),e(z,W_),e(W_,_ie),e(_ie,N4o),e(W_,j4o),e(W_,GN),e(GN,D4o),e(W_,G4o),e(z,O4o),e(z,H_),e(H_,bie),e(bie,V4o),e(H_,X4o),e(H_,ON),e(ON,z4o),e(H_,Q4o),e(z,W4o),e(z,U_),e(U_,vie),e(vie,H4o),e(U_,U4o),e(U_,VN),e(VN,J4o),e(U_,Y4o),e(z,K4o),e(z,J_),e(J_,Fie),e(Fie,Z4o),e(J_,eEo),e(J_,XN),e(XN,oEo),e(J_,rEo),e(z,tEo),e(z,Y_),e(Y_,Tie),e(Tie,aEo),e(Y_,nEo),e(Y_,zN),e(zN,sEo),e(Y_,lEo),e(z,iEo),e(z,K_),e(K_,Mie),e(Mie,dEo),e(K_,cEo),e(K_,QN),e(QN,fEo),e(K_,mEo),e(z,gEo),e(z,Z_),e(Z_,Eie),e(Eie,hEo),e(Z_,pEo),e(Z_,WN),e(WN,uEo),e(Z_,_Eo),e(z,bEo),e(z,e1),e(e1,Cie),e(Cie,vEo),e(e1,FEo),e(e1,HN),e(HN,TEo),e(e1,MEo),e(z,EEo),e(z,o1),e(o1,wie),e(wie,CEo),e(o1,wEo),e(o1,UN),e(UN,AEo),e(o1,yEo),e(z,LEo),e(z,r1),e(r1,Aie),e(Aie,xEo),e(r1,$Eo),e(r1,JN),e(JN,kEo),e(r1,SEo),e(z,REo),e(z,t1),e(t1,yie),e(yie,BEo),e(t1,PEo),e(t1,YN),e(YN,IEo),e(t1,qEo),e(z,NEo),e(z,a1),e(a1,Lie),e(Lie,jEo),e(a1,DEo),e(a1,KN),e(KN,GEo),e(a1,OEo),e(z,VEo),e(z,n1),e(n1,xie),e(xie,XEo),e(n1,zEo),e(n1,ZN),e(ZN,QEo),e(n1,WEo),e(z,HEo),e(z,s1),e(s1,$ie),e($ie,UEo),e(s1,JEo),e(s1,ej),e(ej,YEo),e(s1,KEo),e(z,ZEo),e(z,l1),e(l1,kie),e(kie,e5o),e(l1,o5o),e(l1,oj),e(oj,r5o),e(l1,t5o),e(z,a5o),e(z,i1),e(i1,Sie),e(Sie,n5o),e(i1,s5o),e(i1,rj),e(rj,l5o),e(i1,i5o),e(z,d5o),e(z,d1),e(d1,Rie),e(Rie,c5o),e(d1,f5o),e(d1,tj),e(tj,m5o),e(d1,g5o),e(Je,h5o),e(Je,c1),e(c1,p5o),e(c1,Bie),e(Bie,u5o),e(c1,_5o),e(c1,Pie),e(Pie,b5o),e(Je,v5o),M(f1,Je,null),b(f,aIe,_),b(f,ki,_),e(ki,m1),e(m1,Iie),M(N6,Iie,null),e(ki,F5o),e(ki,qie),e(qie,T5o),b(f,nIe,_),b(f,ko,_),M(j6,ko,null),e(ko,M5o),e(ko,Si),e(Si,E5o),e(Si,aj),e(aj,C5o),e(Si,w5o),e(Si,nj),e(nj,A5o),e(Si,y5o),e(ko,L5o),e(ko,D6),e(D6,x5o),e(D6,Nie),e(Nie,$5o),e(D6,k5o),e(ko,S5o),e(ko,at),M(G6,at,null),e(at,R5o),e(at,jie),e(jie,B5o),e(at,P5o),e(at,Ri),e(Ri,I5o),e(Ri,Die),e(Die,q5o),e(Ri,N5o),e(Ri,sj),e(sj,j5o),e(Ri,D5o),e(at,G5o),M(g1,at,null),e(ko,O5o),e(ko,Ye),M(O6,Ye,null),e(Ye,V5o),e(Ye,Gie),e(Gie,X5o),e(Ye,z5o),e(Ye,xa),e(xa,Q5o),e(xa,Oie),e(Oie,W5o),e(xa,H5o),e(xa,Vie),e(Vie,U5o),e(xa,J5o),e(xa,Xie),e(Xie,Y5o),e(xa,K5o),e(Ye,Z5o),e(Ye,Q),e(Q,h1),e(h1,zie),e(zie,eCo),e(h1,oCo),e(h1,lj),e(lj,rCo),e(h1,tCo),e(Q,aCo),e(Q,p1),e(p1,Qie),e(Qie,nCo),e(p1,sCo),e(p1,ij),e(ij,lCo),e(p1,iCo),e(Q,dCo),e(Q,u1),e(u1,Wie),e(Wie,cCo),e(u1,fCo),e(u1,dj),e(dj,mCo),e(u1,gCo),e(Q,hCo),e(Q,_1),e(_1,Hie),e(Hie,pCo),e(_1,uCo),e(_1,cj),e(cj,_Co),e(_1,bCo),e(Q,vCo),e(Q,b1),e(b1,Uie),e(Uie,FCo),e(b1,TCo),e(b1,fj),e(fj,MCo),e(b1,ECo),e(Q,CCo),e(Q,v1),e(v1,Jie),e(Jie,wCo),e(v1,ACo),e(v1,mj),e(mj,yCo),e(v1,LCo),e(Q,xCo),e(Q,F1),e(F1,Yie),e(Yie,$Co),e(F1,kCo),e(F1,gj),e(gj,SCo),e(F1,RCo),e(Q,BCo),e(Q,T1),e(T1,Kie),e(Kie,PCo),e(T1,ICo),e(T1,hj),e(hj,qCo),e(T1,NCo),e(Q,jCo),e(Q,M1),e(M1,Zie),e(Zie,DCo),e(M1,GCo),e(M1,pj),e(pj,OCo),e(M1,VCo),e(Q,XCo),e(Q,E1),e(E1,ede),e(ede,zCo),e(E1,QCo),e(E1,uj),e(uj,WCo),e(E1,HCo),e(Q,UCo),e(Q,C1),e(C1,ode),e(ode,JCo),e(C1,YCo),e(C1,_j),e(_j,KCo),e(C1,ZCo),e(Q,e3o),e(Q,w1),e(w1,rde),e(rde,o3o),e(w1,r3o),e(w1,bj),e(bj,t3o),e(w1,a3o),e(Q,n3o),e(Q,A1),e(A1,tde),e(tde,s3o),e(A1,l3o),e(A1,vj),e(vj,i3o),e(A1,d3o),e(Q,c3o),e(Q,y1),e(y1,ade),e(ade,f3o),e(y1,m3o),e(y1,Fj),e(Fj,g3o),e(y1,h3o),e(Q,p3o),e(Q,L1),e(L1,nde),e(nde,u3o),e(L1,_3o),e(L1,Tj),e(Tj,b3o),e(L1,v3o),e(Q,F3o),e(Q,x1),e(x1,sde),e(sde,T3o),e(x1,M3o),e(x1,Mj),e(Mj,E3o),e(x1,C3o),e(Q,w3o),e(Q,$1),e($1,lde),e(lde,A3o),e($1,y3o),e($1,Ej),e(Ej,L3o),e($1,x3o),e(Q,$3o),e(Q,k1),e(k1,ide),e(ide,k3o),e(k1,S3o),e(k1,Cj),e(Cj,R3o),e(k1,B3o),e(Q,P3o),e(Q,S1),e(S1,dde),e(dde,I3o),e(S1,q3o),e(S1,wj),e(wj,N3o),e(S1,j3o),e(Q,D3o),e(Q,R1),e(R1,cde),e(cde,G3o),e(R1,O3o),e(R1,Aj),e(Aj,V3o),e(R1,X3o),e(Q,z3o),e(Q,B1),e(B1,fde),e(fde,Q3o),e(B1,W3o),e(B1,yj),e(yj,H3o),e(B1,U3o),e(Q,J3o),e(Q,P1),e(P1,mde),e(mde,Y3o),e(P1,K3o),e(P1,Lj),e(Lj,Z3o),e(P1,ewo),e(Q,owo),e(Q,I1),e(I1,gde),e(gde,rwo),e(I1,two),e(I1,xj),e(xj,awo),e(I1,nwo),e(Q,swo),e(Q,q1),e(q1,hde),e(hde,lwo),e(q1,iwo),e(q1,$j),e($j,dwo),e(q1,cwo),e(Q,fwo),e(Q,N1),e(N1,pde),e(pde,mwo),e(N1,gwo),e(N1,kj),e(kj,hwo),e(N1,pwo),e(Q,uwo),e(Q,j1),e(j1,ude),e(ude,_wo),e(j1,bwo),e(j1,Sj),e(Sj,vwo),e(j1,Fwo),e(Q,Two),e(Q,D1),e(D1,_de),e(_de,Mwo),e(D1,Ewo),e(D1,Rj),e(Rj,Cwo),e(D1,wwo),e(Q,Awo),e(Q,G1),e(G1,bde),e(bde,ywo),e(G1,Lwo),e(G1,Bj),e(Bj,xwo),e(G1,$wo),e(Q,kwo),e(Q,O1),e(O1,vde),e(vde,Swo),e(O1,Rwo),e(O1,Pj),e(Pj,Bwo),e(O1,Pwo),e(Q,Iwo),e(Q,V1),e(V1,Fde),e(Fde,qwo),e(V1,Nwo),e(V1,Ij),e(Ij,jwo),e(V1,Dwo),e(Q,Gwo),e(Q,X1),e(X1,Tde),e(Tde,Owo),e(X1,Vwo),e(X1,Mde),e(Mde,Xwo),e(X1,zwo),e(Q,Qwo),e(Q,z1),e(z1,Ede),e(Ede,Wwo),e(z1,Hwo),e(z1,qj),e(qj,Uwo),e(z1,Jwo),e(Q,Ywo),e(Q,Q1),e(Q1,Cde),e(Cde,Kwo),e(Q1,Zwo),e(Q1,Nj),e(Nj,eAo),e(Q1,oAo),e(Q,rAo),e(Q,W1),e(W1,wde),e(wde,tAo),e(W1,aAo),e(W1,jj),e(jj,nAo),e(W1,sAo),e(Q,lAo),e(Q,H1),e(H1,Ade),e(Ade,iAo),e(H1,dAo),e(H1,Dj),e(Dj,cAo),e(H1,fAo),e(Ye,mAo),e(Ye,U1),e(U1,gAo),e(U1,yde),e(yde,hAo),e(U1,pAo),e(U1,Lde),e(Lde,uAo),e(Ye,_Ao),M(J1,Ye,null),b(f,sIe,_),b(f,Bi,_),e(Bi,Y1),e(Y1,xde),M(V6,xde,null),e(Bi,bAo),e(Bi,$de),e($de,vAo),b(f,lIe,_),b(f,So,_),M(X6,So,null),e(So,FAo),e(So,Pi),e(Pi,TAo),e(Pi,Gj),e(Gj,MAo),e(Pi,EAo),e(Pi,Oj),e(Oj,CAo),e(Pi,wAo),e(So,AAo),e(So,z6),e(z6,yAo),e(z6,kde),e(kde,LAo),e(z6,xAo),e(So,$Ao),e(So,nt),M(Q6,nt,null),e(nt,kAo),e(nt,Sde),e(Sde,SAo),e(nt,RAo),e(nt,Ii),e(Ii,BAo),e(Ii,Rde),e(Rde,PAo),e(Ii,IAo),e(Ii,Vj),e(Vj,qAo),e(Ii,NAo),e(nt,jAo),M(K1,nt,null),e(So,DAo),e(So,Ke),M(W6,Ke,null),e(Ke,GAo),e(Ke,Bde),e(Bde,OAo),e(Ke,VAo),e(Ke,$a),e($a,XAo),e($a,Pde),e(Pde,zAo),e($a,QAo),e($a,Ide),e(Ide,WAo),e($a,HAo),e($a,qde),e(qde,UAo),e($a,JAo),e(Ke,YAo),e(Ke,pe),e(pe,Z1),e(Z1,Nde),e(Nde,KAo),e(Z1,ZAo),e(Z1,Xj),e(Xj,e6o),e(Z1,o6o),e(pe,r6o),e(pe,e2),e(e2,jde),e(jde,t6o),e(e2,a6o),e(e2,zj),e(zj,n6o),e(e2,s6o),e(pe,l6o),e(pe,o2),e(o2,Dde),e(Dde,i6o),e(o2,d6o),e(o2,Qj),e(Qj,c6o),e(o2,f6o),e(pe,m6o),e(pe,r2),e(r2,Gde),e(Gde,g6o),e(r2,h6o),e(r2,Wj),e(Wj,p6o),e(r2,u6o),e(pe,_6o),e(pe,t2),e(t2,Ode),e(Ode,b6o),e(t2,v6o),e(t2,Hj),e(Hj,F6o),e(t2,T6o),e(pe,M6o),e(pe,a2),e(a2,Vde),e(Vde,E6o),e(a2,C6o),e(a2,Uj),e(Uj,w6o),e(a2,A6o),e(pe,y6o),e(pe,n2),e(n2,Xde),e(Xde,L6o),e(n2,x6o),e(n2,Jj),e(Jj,$6o),e(n2,k6o),e(pe,S6o),e(pe,s2),e(s2,zde),e(zde,R6o),e(s2,B6o),e(s2,Yj),e(Yj,P6o),e(s2,I6o),e(pe,q6o),e(pe,l2),e(l2,Qde),e(Qde,N6o),e(l2,j6o),e(l2,Kj),e(Kj,D6o),e(l2,G6o),e(pe,O6o),e(pe,i2),e(i2,Wde),e(Wde,V6o),e(i2,X6o),e(i2,Zj),e(Zj,z6o),e(i2,Q6o),e(pe,W6o),e(pe,d2),e(d2,Hde),e(Hde,H6o),e(d2,U6o),e(d2,eD),e(eD,J6o),e(d2,Y6o),e(pe,K6o),e(pe,c2),e(c2,Ude),e(Ude,Z6o),e(c2,e0o),e(c2,oD),e(oD,o0o),e(c2,r0o),e(pe,t0o),e(pe,f2),e(f2,Jde),e(Jde,a0o),e(f2,n0o),e(f2,rD),e(rD,s0o),e(f2,l0o),e(pe,i0o),e(pe,m2),e(m2,Yde),e(Yde,d0o),e(m2,c0o),e(m2,tD),e(tD,f0o),e(m2,m0o),e(pe,g0o),e(pe,g2),e(g2,Kde),e(Kde,h0o),e(g2,p0o),e(g2,aD),e(aD,u0o),e(g2,_0o),e(pe,b0o),e(pe,h2),e(h2,Zde),e(Zde,v0o),e(h2,F0o),e(h2,nD),e(nD,T0o),e(h2,M0o),e(Ke,E0o),e(Ke,p2),e(p2,C0o),e(p2,ece),e(ece,w0o),e(p2,A0o),e(p2,oce),e(oce,y0o),e(Ke,L0o),M(u2,Ke,null),b(f,iIe,_),b(f,qi,_),e(qi,_2),e(_2,rce),M(H6,rce,null),e(qi,x0o),e(qi,tce),e(tce,$0o),b(f,dIe,_),b(f,Ro,_),M(U6,Ro,null),e(Ro,k0o),e(Ro,Ni),e(Ni,S0o),e(Ni,sD),e(sD,R0o),e(Ni,B0o),e(Ni,lD),e(lD,P0o),e(Ni,I0o),e(Ro,q0o),e(Ro,J6),e(J6,N0o),e(J6,ace),e(ace,j0o),e(J6,D0o),e(Ro,G0o),e(Ro,st),M(Y6,st,null),e(st,O0o),e(st,nce),e(nce,V0o),e(st,X0o),e(st,ji),e(ji,z0o),e(ji,sce),e(sce,Q0o),e(ji,W0o),e(ji,iD),e(iD,H0o),e(ji,U0o),e(st,J0o),M(b2,st,null),e(Ro,Y0o),e(Ro,Ze),M(K6,Ze,null),e(Ze,K0o),e(Ze,lce),e(lce,Z0o),e(Ze,eyo),e(Ze,ka),e(ka,oyo),e(ka,ice),e(ice,ryo),e(ka,tyo),e(ka,dce),e(dce,ayo),e(ka,nyo),e(ka,cce),e(cce,syo),e(ka,lyo),e(Ze,iyo),e(Ze,q),e(q,v2),e(v2,fce),e(fce,dyo),e(v2,cyo),e(v2,dD),e(dD,fyo),e(v2,myo),e(q,gyo),e(q,F2),e(F2,mce),e(mce,hyo),e(F2,pyo),e(F2,cD),e(cD,uyo),e(F2,_yo),e(q,byo),e(q,T2),e(T2,gce),e(gce,vyo),e(T2,Fyo),e(T2,fD),e(fD,Tyo),e(T2,Myo),e(q,Eyo),e(q,M2),e(M2,hce),e(hce,Cyo),e(M2,wyo),e(M2,mD),e(mD,Ayo),e(M2,yyo),e(q,Lyo),e(q,E2),e(E2,pce),e(pce,xyo),e(E2,$yo),e(E2,gD),e(gD,kyo),e(E2,Syo),e(q,Ryo),e(q,C2),e(C2,uce),e(uce,Byo),e(C2,Pyo),e(C2,hD),e(hD,Iyo),e(C2,qyo),e(q,Nyo),e(q,w2),e(w2,_ce),e(_ce,jyo),e(w2,Dyo),e(w2,pD),e(pD,Gyo),e(w2,Oyo),e(q,Vyo),e(q,A2),e(A2,bce),e(bce,Xyo),e(A2,zyo),e(A2,uD),e(uD,Qyo),e(A2,Wyo),e(q,Hyo),e(q,y2),e(y2,vce),e(vce,Uyo),e(y2,Jyo),e(y2,_D),e(_D,Yyo),e(y2,Kyo),e(q,Zyo),e(q,L2),e(L2,Fce),e(Fce,eLo),e(L2,oLo),e(L2,bD),e(bD,rLo),e(L2,tLo),e(q,aLo),e(q,x2),e(x2,Tce),e(Tce,nLo),e(x2,sLo),e(x2,vD),e(vD,lLo),e(x2,iLo),e(q,dLo),e(q,$2),e($2,Mce),e(Mce,cLo),e($2,fLo),e($2,FD),e(FD,mLo),e($2,gLo),e(q,hLo),e(q,k2),e(k2,Ece),e(Ece,pLo),e(k2,uLo),e(k2,TD),e(TD,_Lo),e(k2,bLo),e(q,vLo),e(q,S2),e(S2,Cce),e(Cce,FLo),e(S2,TLo),e(S2,MD),e(MD,MLo),e(S2,ELo),e(q,CLo),e(q,R2),e(R2,wce),e(wce,wLo),e(R2,ALo),e(R2,ED),e(ED,yLo),e(R2,LLo),e(q,xLo),e(q,B2),e(B2,Ace),e(Ace,$Lo),e(B2,kLo),e(B2,CD),e(CD,SLo),e(B2,RLo),e(q,BLo),e(q,P2),e(P2,yce),e(yce,PLo),e(P2,ILo),e(P2,wD),e(wD,qLo),e(P2,NLo),e(q,jLo),e(q,I2),e(I2,Lce),e(Lce,DLo),e(I2,GLo),e(I2,AD),e(AD,OLo),e(I2,VLo),e(q,XLo),e(q,q2),e(q2,xce),e(xce,zLo),e(q2,QLo),e(q2,yD),e(yD,WLo),e(q2,HLo),e(q,ULo),e(q,N2),e(N2,$ce),e($ce,JLo),e(N2,YLo),e(N2,LD),e(LD,KLo),e(N2,ZLo),e(q,e8o),e(q,j2),e(j2,kce),e(kce,o8o),e(j2,r8o),e(j2,xD),e(xD,t8o),e(j2,a8o),e(q,n8o),e(q,D2),e(D2,Sce),e(Sce,s8o),e(D2,l8o),e(D2,$D),e($D,i8o),e(D2,d8o),e(q,c8o),e(q,G2),e(G2,Rce),e(Rce,f8o),e(G2,m8o),e(G2,kD),e(kD,g8o),e(G2,h8o),e(q,p8o),e(q,O2),e(O2,Bce),e(Bce,u8o),e(O2,_8o),e(O2,SD),e(SD,b8o),e(O2,v8o),e(q,F8o),e(q,V2),e(V2,Pce),e(Pce,T8o),e(V2,M8o),e(V2,RD),e(RD,E8o),e(V2,C8o),e(q,w8o),e(q,X2),e(X2,Ice),e(Ice,A8o),e(X2,y8o),e(X2,BD),e(BD,L8o),e(X2,x8o),e(q,$8o),e(q,z2),e(z2,qce),e(qce,k8o),e(z2,S8o),e(z2,PD),e(PD,R8o),e(z2,B8o),e(q,P8o),e(q,Q2),e(Q2,Nce),e(Nce,I8o),e(Q2,q8o),e(Q2,ID),e(ID,N8o),e(Q2,j8o),e(q,D8o),e(q,W2),e(W2,jce),e(jce,G8o),e(W2,O8o),e(W2,qD),e(qD,V8o),e(W2,X8o),e(q,z8o),e(q,H2),e(H2,Dce),e(Dce,Q8o),e(H2,W8o),e(H2,ND),e(ND,H8o),e(H2,U8o),e(q,J8o),e(q,U2),e(U2,Gce),e(Gce,Y8o),e(U2,K8o),e(U2,jD),e(jD,Z8o),e(U2,exo),e(q,oxo),e(q,J2),e(J2,Oce),e(Oce,rxo),e(J2,txo),e(J2,DD),e(DD,axo),e(J2,nxo),e(q,sxo),e(q,Y2),e(Y2,Vce),e(Vce,lxo),e(Y2,ixo),e(Y2,GD),e(GD,dxo),e(Y2,cxo),e(q,fxo),e(q,K2),e(K2,Xce),e(Xce,mxo),e(K2,gxo),e(K2,OD),e(OD,hxo),e(K2,pxo),e(q,uxo),e(q,Z2),e(Z2,zce),e(zce,_xo),e(Z2,bxo),e(Z2,VD),e(VD,vxo),e(Z2,Fxo),e(q,Txo),e(q,eb),e(eb,Qce),e(Qce,Mxo),e(eb,Exo),e(eb,XD),e(XD,Cxo),e(eb,wxo),e(q,Axo),e(q,ob),e(ob,Wce),e(Wce,yxo),e(ob,Lxo),e(ob,zD),e(zD,xxo),e(ob,$xo),e(q,kxo),e(q,rb),e(rb,Hce),e(Hce,Sxo),e(rb,Rxo),e(rb,QD),e(QD,Bxo),e(rb,Pxo),e(q,Ixo),e(q,tb),e(tb,Uce),e(Uce,qxo),e(tb,Nxo),e(tb,WD),e(WD,jxo),e(tb,Dxo),e(q,Gxo),e(q,ab),e(ab,Jce),e(Jce,Oxo),e(ab,Vxo),e(ab,HD),e(HD,Xxo),e(ab,zxo),e(q,Qxo),e(q,nb),e(nb,Yce),e(Yce,Wxo),e(nb,Hxo),e(nb,UD),e(UD,Uxo),e(nb,Jxo),e(q,Yxo),e(q,sb),e(sb,Kce),e(Kce,Kxo),e(sb,Zxo),e(sb,JD),e(JD,e$o),e(sb,o$o),e(q,r$o),e(q,lb),e(lb,Zce),e(Zce,t$o),e(lb,a$o),e(lb,YD),e(YD,n$o),e(lb,s$o),e(q,l$o),e(q,ib),e(ib,efe),e(efe,i$o),e(ib,d$o),e(ib,KD),e(KD,c$o),e(ib,f$o),e(q,m$o),e(q,db),e(db,ofe),e(ofe,g$o),e(db,h$o),e(db,ZD),e(ZD,p$o),e(db,u$o),e(q,_$o),e(q,cb),e(cb,rfe),e(rfe,b$o),e(cb,v$o),e(cb,eG),e(eG,F$o),e(cb,T$o),e(Ze,M$o),e(Ze,fb),e(fb,E$o),e(fb,tfe),e(tfe,C$o),e(fb,w$o),e(fb,afe),e(afe,A$o),e(Ze,y$o),M(mb,Ze,null),b(f,cIe,_),b(f,Di,_),e(Di,gb),e(gb,nfe),M(Z6,nfe,null),e(Di,L$o),e(Di,sfe),e(sfe,x$o),b(f,fIe,_),b(f,Bo,_),M(e0,Bo,null),e(Bo,$$o),e(Bo,Gi),e(Gi,k$o),e(Gi,oG),e(oG,S$o),e(Gi,R$o),e(Gi,rG),e(rG,B$o),e(Gi,P$o),e(Bo,I$o),e(Bo,o0),e(o0,q$o),e(o0,lfe),e(lfe,N$o),e(o0,j$o),e(Bo,D$o),e(Bo,lt),M(r0,lt,null),e(lt,G$o),e(lt,ife),e(ife,O$o),e(lt,V$o),e(lt,Oi),e(Oi,X$o),e(Oi,dfe),e(dfe,z$o),e(Oi,Q$o),e(Oi,tG),e(tG,W$o),e(Oi,H$o),e(lt,U$o),M(hb,lt,null),e(Bo,J$o),e(Bo,eo),M(t0,eo,null),e(eo,Y$o),e(eo,cfe),e(cfe,K$o),e(eo,Z$o),e(eo,Sa),e(Sa,eko),e(Sa,ffe),e(ffe,oko),e(Sa,rko),e(Sa,mfe),e(mfe,tko),e(Sa,ako),e(Sa,gfe),e(gfe,nko),e(Sa,sko),e(eo,lko),e(eo,Y),e(Y,pb),e(pb,hfe),e(hfe,iko),e(pb,dko),e(pb,aG),e(aG,cko),e(pb,fko),e(Y,mko),e(Y,ub),e(ub,pfe),e(pfe,gko),e(ub,hko),e(ub,nG),e(nG,pko),e(ub,uko),e(Y,_ko),e(Y,_b),e(_b,ufe),e(ufe,bko),e(_b,vko),e(_b,sG),e(sG,Fko),e(_b,Tko),e(Y,Mko),e(Y,bb),e(bb,_fe),e(_fe,Eko),e(bb,Cko),e(bb,lG),e(lG,wko),e(bb,Ako),e(Y,yko),e(Y,vb),e(vb,bfe),e(bfe,Lko),e(vb,xko),e(vb,iG),e(iG,$ko),e(vb,kko),e(Y,Sko),e(Y,Fb),e(Fb,vfe),e(vfe,Rko),e(Fb,Bko),e(Fb,dG),e(dG,Pko),e(Fb,Iko),e(Y,qko),e(Y,Tb),e(Tb,Ffe),e(Ffe,Nko),e(Tb,jko),e(Tb,cG),e(cG,Dko),e(Tb,Gko),e(Y,Oko),e(Y,Mb),e(Mb,Tfe),e(Tfe,Vko),e(Mb,Xko),e(Mb,fG),e(fG,zko),e(Mb,Qko),e(Y,Wko),e(Y,Eb),e(Eb,Mfe),e(Mfe,Hko),e(Eb,Uko),e(Eb,mG),e(mG,Jko),e(Eb,Yko),e(Y,Kko),e(Y,Cb),e(Cb,Efe),e(Efe,Zko),e(Cb,eSo),e(Cb,gG),e(gG,oSo),e(Cb,rSo),e(Y,tSo),e(Y,wb),e(wb,Cfe),e(Cfe,aSo),e(wb,nSo),e(wb,hG),e(hG,sSo),e(wb,lSo),e(Y,iSo),e(Y,Ab),e(Ab,wfe),e(wfe,dSo),e(Ab,cSo),e(Ab,pG),e(pG,fSo),e(Ab,mSo),e(Y,gSo),e(Y,yb),e(yb,Afe),e(Afe,hSo),e(yb,pSo),e(yb,uG),e(uG,uSo),e(yb,_So),e(Y,bSo),e(Y,Lb),e(Lb,yfe),e(yfe,vSo),e(Lb,FSo),e(Lb,_G),e(_G,TSo),e(Lb,MSo),e(Y,ESo),e(Y,xb),e(xb,Lfe),e(Lfe,CSo),e(xb,wSo),e(xb,bG),e(bG,ASo),e(xb,ySo),e(Y,LSo),e(Y,$b),e($b,xfe),e(xfe,xSo),e($b,$So),e($b,vG),e(vG,kSo),e($b,SSo),e(Y,RSo),e(Y,kb),e(kb,$fe),e($fe,BSo),e(kb,PSo),e(kb,FG),e(FG,ISo),e(kb,qSo),e(Y,NSo),e(Y,Sb),e(Sb,kfe),e(kfe,jSo),e(Sb,DSo),e(Sb,TG),e(TG,GSo),e(Sb,OSo),e(Y,VSo),e(Y,Rb),e(Rb,Sfe),e(Sfe,XSo),e(Rb,zSo),e(Rb,MG),e(MG,QSo),e(Rb,WSo),e(Y,HSo),e(Y,Bb),e(Bb,Rfe),e(Rfe,USo),e(Bb,JSo),e(Bb,EG),e(EG,YSo),e(Bb,KSo),e(Y,ZSo),e(Y,Pb),e(Pb,Bfe),e(Bfe,eRo),e(Pb,oRo),e(Pb,CG),e(CG,rRo),e(Pb,tRo),e(Y,aRo),e(Y,Ib),e(Ib,Pfe),e(Pfe,nRo),e(Ib,sRo),e(Ib,wG),e(wG,lRo),e(Ib,iRo),e(Y,dRo),e(Y,qb),e(qb,Ife),e(Ife,cRo),e(qb,fRo),e(qb,AG),e(AG,mRo),e(qb,gRo),e(Y,hRo),e(Y,Nb),e(Nb,qfe),e(qfe,pRo),e(Nb,uRo),e(Nb,yG),e(yG,_Ro),e(Nb,bRo),e(Y,vRo),e(Y,jb),e(jb,Nfe),e(Nfe,FRo),e(jb,TRo),e(jb,LG),e(LG,MRo),e(jb,ERo),e(Y,CRo),e(Y,Db),e(Db,jfe),e(jfe,wRo),e(Db,ARo),e(Db,xG),e(xG,yRo),e(Db,LRo),e(Y,xRo),e(Y,Gb),e(Gb,Dfe),e(Dfe,$Ro),e(Gb,kRo),e(Gb,$G),e($G,SRo),e(Gb,RRo),e(Y,BRo),e(Y,Ob),e(Ob,Gfe),e(Gfe,PRo),e(Ob,IRo),e(Ob,kG),e(kG,qRo),e(Ob,NRo),e(Y,jRo),e(Y,Vb),e(Vb,Ofe),e(Ofe,DRo),e(Vb,GRo),e(Vb,SG),e(SG,ORo),e(Vb,VRo),e(eo,XRo),e(eo,Xb),e(Xb,zRo),e(Xb,Vfe),e(Vfe,QRo),e(Xb,WRo),e(Xb,Xfe),e(Xfe,HRo),e(eo,URo),M(zb,eo,null),b(f,mIe,_),b(f,Vi,_),e(Vi,Qb),e(Qb,zfe),M(a0,zfe,null),e(Vi,JRo),e(Vi,Qfe),e(Qfe,YRo),b(f,gIe,_),b(f,Po,_),M(n0,Po,null),e(Po,KRo),e(Po,Xi),e(Xi,ZRo),e(Xi,RG),e(RG,eBo),e(Xi,oBo),e(Xi,BG),e(BG,rBo),e(Xi,tBo),e(Po,aBo),e(Po,s0),e(s0,nBo),e(s0,Wfe),e(Wfe,sBo),e(s0,lBo),e(Po,iBo),e(Po,it),M(l0,it,null),e(it,dBo),e(it,Hfe),e(Hfe,cBo),e(it,fBo),e(it,zi),e(zi,mBo),e(zi,Ufe),e(Ufe,gBo),e(zi,hBo),e(zi,PG),e(PG,pBo),e(zi,uBo),e(it,_Bo),M(Wb,it,null),e(Po,bBo),e(Po,oo),M(i0,oo,null),e(oo,vBo),e(oo,Jfe),e(Jfe,FBo),e(oo,TBo),e(oo,Ra),e(Ra,MBo),e(Ra,Yfe),e(Yfe,EBo),e(Ra,CBo),e(Ra,Kfe),e(Kfe,wBo),e(Ra,ABo),e(Ra,Zfe),e(Zfe,yBo),e(Ra,LBo),e(oo,xBo),e(oo,Yr),e(Yr,Hb),e(Hb,eme),e(eme,$Bo),e(Hb,kBo),e(Hb,IG),e(IG,SBo),e(Hb,RBo),e(Yr,BBo),e(Yr,Ub),e(Ub,ome),e(ome,PBo),e(Ub,IBo),e(Ub,qG),e(qG,qBo),e(Ub,NBo),e(Yr,jBo),e(Yr,Jb),e(Jb,rme),e(rme,DBo),e(Jb,GBo),e(Jb,NG),e(NG,OBo),e(Jb,VBo),e(Yr,XBo),e(Yr,Yb),e(Yb,tme),e(tme,zBo),e(Yb,QBo),e(Yb,jG),e(jG,WBo),e(Yb,HBo),e(Yr,UBo),e(Yr,Kb),e(Kb,ame),e(ame,JBo),e(Kb,YBo),e(Kb,DG),e(DG,KBo),e(Kb,ZBo),e(oo,ePo),e(oo,Zb),e(Zb,oPo),e(Zb,nme),e(nme,rPo),e(Zb,tPo),e(Zb,sme),e(sme,aPo),e(oo,nPo),M(ev,oo,null),b(f,hIe,_),b(f,Qi,_),e(Qi,ov),e(ov,lme),M(d0,lme,null),e(Qi,sPo),e(Qi,ime),e(ime,lPo),b(f,pIe,_),b(f,Io,_),M(c0,Io,null),e(Io,iPo),e(Io,Wi),e(Wi,dPo),e(Wi,GG),e(GG,cPo),e(Wi,fPo),e(Wi,OG),e(OG,mPo),e(Wi,gPo),e(Io,hPo),e(Io,f0),e(f0,pPo),e(f0,dme),e(dme,uPo),e(f0,_Po),e(Io,bPo),e(Io,dt),M(m0,dt,null),e(dt,vPo),e(dt,cme),e(cme,FPo),e(dt,TPo),e(dt,Hi),e(Hi,MPo),e(Hi,fme),e(fme,EPo),e(Hi,CPo),e(Hi,VG),e(VG,wPo),e(Hi,APo),e(dt,yPo),M(rv,dt,null),e(Io,LPo),e(Io,ro),M(g0,ro,null),e(ro,xPo),e(ro,mme),e(mme,$Po),e(ro,kPo),e(ro,Ba),e(Ba,SPo),e(Ba,gme),e(gme,RPo),e(Ba,BPo),e(Ba,hme),e(hme,PPo),e(Ba,IPo),e(Ba,pme),e(pme,qPo),e(Ba,NPo),e(ro,jPo),e(ro,U),e(U,tv),e(tv,ume),e(ume,DPo),e(tv,GPo),e(tv,XG),e(XG,OPo),e(tv,VPo),e(U,XPo),e(U,av),e(av,_me),e(_me,zPo),e(av,QPo),e(av,zG),e(zG,WPo),e(av,HPo),e(U,UPo),e(U,nv),e(nv,bme),e(bme,JPo),e(nv,YPo),e(nv,QG),e(QG,KPo),e(nv,ZPo),e(U,eIo),e(U,sv),e(sv,vme),e(vme,oIo),e(sv,rIo),e(sv,WG),e(WG,tIo),e(sv,aIo),e(U,nIo),e(U,lv),e(lv,Fme),e(Fme,sIo),e(lv,lIo),e(lv,HG),e(HG,iIo),e(lv,dIo),e(U,cIo),e(U,iv),e(iv,Tme),e(Tme,fIo),e(iv,mIo),e(iv,UG),e(UG,gIo),e(iv,hIo),e(U,pIo),e(U,dv),e(dv,Mme),e(Mme,uIo),e(dv,_Io),e(dv,JG),e(JG,bIo),e(dv,vIo),e(U,FIo),e(U,cv),e(cv,Eme),e(Eme,TIo),e(cv,MIo),e(cv,YG),e(YG,EIo),e(cv,CIo),e(U,wIo),e(U,fv),e(fv,Cme),e(Cme,AIo),e(fv,yIo),e(fv,KG),e(KG,LIo),e(fv,xIo),e(U,$Io),e(U,mv),e(mv,wme),e(wme,kIo),e(mv,SIo),e(mv,ZG),e(ZG,RIo),e(mv,BIo),e(U,PIo),e(U,gv),e(gv,Ame),e(Ame,IIo),e(gv,qIo),e(gv,eO),e(eO,NIo),e(gv,jIo),e(U,DIo),e(U,hv),e(hv,yme),e(yme,GIo),e(hv,OIo),e(hv,oO),e(oO,VIo),e(hv,XIo),e(U,zIo),e(U,pv),e(pv,Lme),e(Lme,QIo),e(pv,WIo),e(pv,rO),e(rO,HIo),e(pv,UIo),e(U,JIo),e(U,uv),e(uv,xme),e(xme,YIo),e(uv,KIo),e(uv,tO),e(tO,ZIo),e(uv,eqo),e(U,oqo),e(U,_v),e(_v,$me),e($me,rqo),e(_v,tqo),e(_v,aO),e(aO,aqo),e(_v,nqo),e(U,sqo),e(U,bv),e(bv,kme),e(kme,lqo),e(bv,iqo),e(bv,nO),e(nO,dqo),e(bv,cqo),e(U,fqo),e(U,vv),e(vv,Sme),e(Sme,mqo),e(vv,gqo),e(vv,sO),e(sO,hqo),e(vv,pqo),e(U,uqo),e(U,Fv),e(Fv,Rme),e(Rme,_qo),e(Fv,bqo),e(Fv,lO),e(lO,vqo),e(Fv,Fqo),e(U,Tqo),e(U,Tv),e(Tv,Bme),e(Bme,Mqo),e(Tv,Eqo),e(Tv,iO),e(iO,Cqo),e(Tv,wqo),e(U,Aqo),e(U,Mv),e(Mv,Pme),e(Pme,yqo),e(Mv,Lqo),e(Mv,dO),e(dO,xqo),e(Mv,$qo),e(U,kqo),e(U,Ev),e(Ev,Ime),e(Ime,Sqo),e(Ev,Rqo),e(Ev,cO),e(cO,Bqo),e(Ev,Pqo),e(U,Iqo),e(U,Cv),e(Cv,qme),e(qme,qqo),e(Cv,Nqo),e(Cv,fO),e(fO,jqo),e(Cv,Dqo),e(U,Gqo),e(U,wv),e(wv,Nme),e(Nme,Oqo),e(wv,Vqo),e(wv,mO),e(mO,Xqo),e(wv,zqo),e(U,Qqo),e(U,Av),e(Av,jme),e(jme,Wqo),e(Av,Hqo),e(Av,gO),e(gO,Uqo),e(Av,Jqo),e(U,Yqo),e(U,yv),e(yv,Dme),e(Dme,Kqo),e(yv,Zqo),e(yv,hO),e(hO,eNo),e(yv,oNo),e(U,rNo),e(U,Lv),e(Lv,Gme),e(Gme,tNo),e(Lv,aNo),e(Lv,pO),e(pO,nNo),e(Lv,sNo),e(U,lNo),e(U,xv),e(xv,Ome),e(Ome,iNo),e(xv,dNo),e(xv,uO),e(uO,cNo),e(xv,fNo),e(U,mNo),e(U,$v),e($v,Vme),e(Vme,gNo),e($v,hNo),e($v,_O),e(_O,pNo),e($v,uNo),e(U,_No),e(U,kv),e(kv,Xme),e(Xme,bNo),e(kv,vNo),e(kv,bO),e(bO,FNo),e(kv,TNo),e(U,MNo),e(U,Sv),e(Sv,zme),e(zme,ENo),e(Sv,CNo),e(Sv,vO),e(vO,wNo),e(Sv,ANo),e(U,yNo),e(U,Rv),e(Rv,Qme),e(Qme,LNo),e(Rv,xNo),e(Rv,FO),e(FO,$No),e(Rv,kNo),e(U,SNo),e(U,Bv),e(Bv,Wme),e(Wme,RNo),e(Bv,BNo),e(Bv,TO),e(TO,PNo),e(Bv,INo),e(U,qNo),e(U,Pv),e(Pv,Hme),e(Hme,NNo),e(Pv,jNo),e(Pv,MO),e(MO,DNo),e(Pv,GNo),e(ro,ONo),e(ro,Iv),e(Iv,VNo),e(Iv,Ume),e(Ume,XNo),e(Iv,zNo),e(Iv,Jme),e(Jme,QNo),e(ro,WNo),M(qv,ro,null),b(f,uIe,_),b(f,Ui,_),e(Ui,Nv),e(Nv,Yme),M(h0,Yme,null),e(Ui,HNo),e(Ui,Kme),e(Kme,UNo),b(f,_Ie,_),b(f,qo,_),M(p0,qo,null),e(qo,JNo),e(qo,Ji),e(Ji,YNo),e(Ji,EO),e(EO,KNo),e(Ji,ZNo),e(Ji,CO),e(CO,ejo),e(Ji,ojo),e(qo,rjo),e(qo,u0),e(u0,tjo),e(u0,Zme),e(Zme,ajo),e(u0,njo),e(qo,sjo),e(qo,ct),M(_0,ct,null),e(ct,ljo),e(ct,ege),e(ege,ijo),e(ct,djo),e(ct,Yi),e(Yi,cjo),e(Yi,oge),e(oge,fjo),e(Yi,mjo),e(Yi,wO),e(wO,gjo),e(Yi,hjo),e(ct,pjo),M(jv,ct,null),e(qo,ujo),e(qo,to),M(b0,to,null),e(to,_jo),e(to,rge),e(rge,bjo),e(to,vjo),e(to,Pa),e(Pa,Fjo),e(Pa,tge),e(tge,Tjo),e(Pa,Mjo),e(Pa,age),e(age,Ejo),e(Pa,Cjo),e(Pa,nge),e(nge,wjo),e(Pa,Ajo),e(to,yjo),e(to,O),e(O,Dv),e(Dv,sge),e(sge,Ljo),e(Dv,xjo),e(Dv,AO),e(AO,$jo),e(Dv,kjo),e(O,Sjo),e(O,Gv),e(Gv,lge),e(lge,Rjo),e(Gv,Bjo),e(Gv,yO),e(yO,Pjo),e(Gv,Ijo),e(O,qjo),e(O,Ov),e(Ov,ige),e(ige,Njo),e(Ov,jjo),e(Ov,LO),e(LO,Djo),e(Ov,Gjo),e(O,Ojo),e(O,Vv),e(Vv,dge),e(dge,Vjo),e(Vv,Xjo),e(Vv,xO),e(xO,zjo),e(Vv,Qjo),e(O,Wjo),e(O,Xv),e(Xv,cge),e(cge,Hjo),e(Xv,Ujo),e(Xv,$O),e($O,Jjo),e(Xv,Yjo),e(O,Kjo),e(O,zv),e(zv,fge),e(fge,Zjo),e(zv,eDo),e(zv,kO),e(kO,oDo),e(zv,rDo),e(O,tDo),e(O,Qv),e(Qv,mge),e(mge,aDo),e(Qv,nDo),e(Qv,SO),e(SO,sDo),e(Qv,lDo),e(O,iDo),e(O,Wv),e(Wv,gge),e(gge,dDo),e(Wv,cDo),e(Wv,RO),e(RO,fDo),e(Wv,mDo),e(O,gDo),e(O,Hv),e(Hv,hge),e(hge,hDo),e(Hv,pDo),e(Hv,BO),e(BO,uDo),e(Hv,_Do),e(O,bDo),e(O,Uv),e(Uv,pge),e(pge,vDo),e(Uv,FDo),e(Uv,PO),e(PO,TDo),e(Uv,MDo),e(O,EDo),e(O,Jv),e(Jv,uge),e(uge,CDo),e(Jv,wDo),e(Jv,IO),e(IO,ADo),e(Jv,yDo),e(O,LDo),e(O,Yv),e(Yv,_ge),e(_ge,xDo),e(Yv,$Do),e(Yv,qO),e(qO,kDo),e(Yv,SDo),e(O,RDo),e(O,Kv),e(Kv,bge),e(bge,BDo),e(Kv,PDo),e(Kv,NO),e(NO,IDo),e(Kv,qDo),e(O,NDo),e(O,Zv),e(Zv,vge),e(vge,jDo),e(Zv,DDo),e(Zv,jO),e(jO,GDo),e(Zv,ODo),e(O,VDo),e(O,eF),e(eF,Fge),e(Fge,XDo),e(eF,zDo),e(eF,DO),e(DO,QDo),e(eF,WDo),e(O,HDo),e(O,oF),e(oF,Tge),e(Tge,UDo),e(oF,JDo),e(oF,GO),e(GO,YDo),e(oF,KDo),e(O,ZDo),e(O,rF),e(rF,Mge),e(Mge,eGo),e(rF,oGo),e(rF,OO),e(OO,rGo),e(rF,tGo),e(O,aGo),e(O,tF),e(tF,Ege),e(Ege,nGo),e(tF,sGo),e(tF,VO),e(VO,lGo),e(tF,iGo),e(O,dGo),e(O,aF),e(aF,Cge),e(Cge,cGo),e(aF,fGo),e(aF,XO),e(XO,mGo),e(aF,gGo),e(O,hGo),e(O,nF),e(nF,wge),e(wge,pGo),e(nF,uGo),e(nF,zO),e(zO,_Go),e(nF,bGo),e(O,vGo),e(O,sF),e(sF,Age),e(Age,FGo),e(sF,TGo),e(sF,QO),e(QO,MGo),e(sF,EGo),e(O,CGo),e(O,lF),e(lF,yge),e(yge,wGo),e(lF,AGo),e(lF,WO),e(WO,yGo),e(lF,LGo),e(O,xGo),e(O,iF),e(iF,Lge),e(Lge,$Go),e(iF,kGo),e(iF,HO),e(HO,SGo),e(iF,RGo),e(O,BGo),e(O,dF),e(dF,xge),e(xge,PGo),e(dF,IGo),e(dF,UO),e(UO,qGo),e(dF,NGo),e(O,jGo),e(O,cF),e(cF,$ge),e($ge,DGo),e(cF,GGo),e(cF,JO),e(JO,OGo),e(cF,VGo),e(O,XGo),e(O,fF),e(fF,kge),e(kge,zGo),e(fF,QGo),e(fF,YO),e(YO,WGo),e(fF,HGo),e(O,UGo),e(O,mF),e(mF,Sge),e(Sge,JGo),e(mF,YGo),e(mF,KO),e(KO,KGo),e(mF,ZGo),e(O,eOo),e(O,gF),e(gF,Rge),e(Rge,oOo),e(gF,rOo),e(gF,ZO),e(ZO,tOo),e(gF,aOo),e(O,nOo),e(O,hF),e(hF,Bge),e(Bge,sOo),e(hF,lOo),e(hF,eV),e(eV,iOo),e(hF,dOo),e(O,cOo),e(O,pF),e(pF,Pge),e(Pge,fOo),e(pF,mOo),e(pF,oV),e(oV,gOo),e(pF,hOo),e(O,pOo),e(O,uF),e(uF,Ige),e(Ige,uOo),e(uF,_Oo),e(uF,rV),e(rV,bOo),e(uF,vOo),e(O,FOo),e(O,_F),e(_F,qge),e(qge,TOo),e(_F,MOo),e(_F,tV),e(tV,EOo),e(_F,COo),e(O,wOo),e(O,bF),e(bF,Nge),e(Nge,AOo),e(bF,yOo),e(bF,aV),e(aV,LOo),e(bF,xOo),e(O,$Oo),e(O,vF),e(vF,jge),e(jge,kOo),e(vF,SOo),e(vF,nV),e(nV,ROo),e(vF,BOo),e(O,POo),e(O,FF),e(FF,Dge),e(Dge,IOo),e(FF,qOo),e(FF,sV),e(sV,NOo),e(FF,jOo),e(O,DOo),e(O,TF),e(TF,Gge),e(Gge,GOo),e(TF,OOo),e(TF,lV),e(lV,VOo),e(TF,XOo),e(O,zOo),e(O,MF),e(MF,Oge),e(Oge,QOo),e(MF,WOo),e(MF,iV),e(iV,HOo),e(MF,UOo),e(O,JOo),e(O,EF),e(EF,Vge),e(Vge,YOo),e(EF,KOo),e(EF,dV),e(dV,ZOo),e(EF,eVo),e(O,oVo),e(O,CF),e(CF,Xge),e(Xge,rVo),e(CF,tVo),e(CF,cV),e(cV,aVo),e(CF,nVo),e(to,sVo),e(to,wF),e(wF,lVo),e(wF,zge),e(zge,iVo),e(wF,dVo),e(wF,Qge),e(Qge,cVo),e(to,fVo),M(AF,to,null),b(f,bIe,_),b(f,Ki,_),e(Ki,yF),e(yF,Wge),M(v0,Wge,null),e(Ki,mVo),e(Ki,Hge),e(Hge,gVo),b(f,vIe,_),b(f,No,_),M(F0,No,null),e(No,hVo),e(No,Zi),e(Zi,pVo),e(Zi,fV),e(fV,uVo),e(Zi,_Vo),e(Zi,mV),e(mV,bVo),e(Zi,vVo),e(No,FVo),e(No,T0),e(T0,TVo),e(T0,Uge),e(Uge,MVo),e(T0,EVo),e(No,CVo),e(No,ft),M(M0,ft,null),e(ft,wVo),e(ft,Jge),e(Jge,AVo),e(ft,yVo),e(ft,ed),e(ed,LVo),e(ed,Yge),e(Yge,xVo),e(ed,$Vo),e(ed,gV),e(gV,kVo),e(ed,SVo),e(ft,RVo),M(LF,ft,null),e(No,BVo),e(No,ao),M(E0,ao,null),e(ao,PVo),e(ao,Kge),e(Kge,IVo),e(ao,qVo),e(ao,Ia),e(Ia,NVo),e(Ia,Zge),e(Zge,jVo),e(Ia,DVo),e(Ia,ehe),e(ehe,GVo),e(Ia,OVo),e(Ia,ohe),e(ohe,VVo),e(Ia,XVo),e(ao,zVo),e(ao,rhe),e(rhe,xF),e(xF,the),e(the,QVo),e(xF,WVo),e(xF,hV),e(hV,HVo),e(xF,UVo),e(ao,JVo),e(ao,$F),e($F,YVo),e($F,ahe),e(ahe,KVo),e($F,ZVo),e($F,nhe),e(nhe,eXo),e(ao,oXo),M(kF,ao,null),b(f,FIe,_),b(f,od,_),e(od,SF),e(SF,she),M(C0,she,null),e(od,rXo),e(od,lhe),e(lhe,tXo),b(f,TIe,_),b(f,jo,_),M(w0,jo,null),e(jo,aXo),e(jo,rd),e(rd,nXo),e(rd,pV),e(pV,sXo),e(rd,lXo),e(rd,uV),e(uV,iXo),e(rd,dXo),e(jo,cXo),e(jo,A0),e(A0,fXo),e(A0,ihe),e(ihe,mXo),e(A0,gXo),e(jo,hXo),e(jo,mt),M(y0,mt,null),e(mt,pXo),e(mt,dhe),e(dhe,uXo),e(mt,_Xo),e(mt,td),e(td,bXo),e(td,che),e(che,vXo),e(td,FXo),e(td,_V),e(_V,TXo),e(td,MXo),e(mt,EXo),M(RF,mt,null),e(jo,CXo),e(jo,no),M(L0,no,null),e(no,wXo),e(no,fhe),e(fhe,AXo),e(no,yXo),e(no,qa),e(qa,LXo),e(qa,mhe),e(mhe,xXo),e(qa,$Xo),e(qa,ghe),e(ghe,kXo),e(qa,SXo),e(qa,hhe),e(hhe,RXo),e(qa,BXo),e(no,PXo),e(no,Fe),e(Fe,BF),e(BF,phe),e(phe,IXo),e(BF,qXo),e(BF,bV),e(bV,NXo),e(BF,jXo),e(Fe,DXo),e(Fe,PF),e(PF,uhe),e(uhe,GXo),e(PF,OXo),e(PF,vV),e(vV,VXo),e(PF,XXo),e(Fe,zXo),e(Fe,IF),e(IF,_he),e(_he,QXo),e(IF,WXo),e(IF,FV),e(FV,HXo),e(IF,UXo),e(Fe,JXo),e(Fe,Bs),e(Bs,bhe),e(bhe,YXo),e(Bs,KXo),e(Bs,TV),e(TV,ZXo),e(Bs,ezo),e(Bs,MV),e(MV,ozo),e(Bs,rzo),e(Fe,tzo),e(Fe,qF),e(qF,vhe),e(vhe,azo),e(qF,nzo),e(qF,EV),e(EV,szo),e(qF,lzo),e(Fe,izo),e(Fe,gt),e(gt,Fhe),e(Fhe,dzo),e(gt,czo),e(gt,CV),e(CV,fzo),e(gt,mzo),e(gt,wV),e(wV,gzo),e(gt,hzo),e(gt,AV),e(AV,pzo),e(gt,uzo),e(Fe,_zo),e(Fe,NF),e(NF,The),e(The,bzo),e(NF,vzo),e(NF,yV),e(yV,Fzo),e(NF,Tzo),e(Fe,Mzo),e(Fe,jF),e(jF,Mhe),e(Mhe,Ezo),e(jF,Czo),e(jF,LV),e(LV,wzo),e(jF,Azo),e(Fe,yzo),e(Fe,DF),e(DF,Ehe),e(Ehe,Lzo),e(DF,xzo),e(DF,xV),e(xV,$zo),e(DF,kzo),e(Fe,Szo),e(Fe,GF),e(GF,Che),e(Che,Rzo),e(GF,Bzo),e(GF,$V),e($V,Pzo),e(GF,Izo),e(Fe,qzo),e(Fe,OF),e(OF,whe),e(whe,Nzo),e(OF,jzo),e(OF,kV),e(kV,Dzo),e(OF,Gzo),e(Fe,Ozo),e(Fe,VF),e(VF,Ahe),e(Ahe,Vzo),e(VF,Xzo),e(VF,SV),e(SV,zzo),e(VF,Qzo),e(Fe,Wzo),e(Fe,XF),e(XF,yhe),e(yhe,Hzo),e(XF,Uzo),e(XF,RV),e(RV,Jzo),e(XF,Yzo),e(no,Kzo),e(no,zF),e(zF,Zzo),e(zF,Lhe),e(Lhe,eQo),e(zF,oQo),e(zF,xhe),e(xhe,rQo),e(no,tQo),M(QF,no,null),b(f,MIe,_),b(f,ad,_),e(ad,WF),e(WF,$he),M(x0,$he,null),e(ad,aQo),e(ad,khe),e(khe,nQo),b(f,EIe,_),b(f,Do,_),M($0,Do,null),e(Do,sQo),e(Do,nd),e(nd,lQo),e(nd,BV),e(BV,iQo),e(nd,dQo),e(nd,PV),e(PV,cQo),e(nd,fQo),e(Do,mQo),e(Do,k0),e(k0,gQo),e(k0,She),e(She,hQo),e(k0,pQo),e(Do,uQo),e(Do,ht),M(S0,ht,null),e(ht,_Qo),e(ht,Rhe),e(Rhe,bQo),e(ht,vQo),e(ht,sd),e(sd,FQo),e(sd,Bhe),e(Bhe,TQo),e(sd,MQo),e(sd,IV),e(IV,EQo),e(sd,CQo),e(ht,wQo),M(HF,ht,null),e(Do,AQo),e(Do,so),M(R0,so,null),e(so,yQo),e(so,Phe),e(Phe,LQo),e(so,xQo),e(so,Na),e(Na,$Qo),e(Na,Ihe),e(Ihe,kQo),e(Na,SQo),e(Na,qhe),e(qhe,RQo),e(Na,BQo),e(Na,Nhe),e(Nhe,PQo),e(Na,IQo),e(so,qQo),e(so,jhe),e(jhe,UF),e(UF,Dhe),e(Dhe,NQo),e(UF,jQo),e(UF,qV),e(qV,DQo),e(UF,GQo),e(so,OQo),e(so,JF),e(JF,VQo),e(JF,Ghe),e(Ghe,XQo),e(JF,zQo),e(JF,Ohe),e(Ohe,QQo),e(so,WQo),M(YF,so,null),b(f,CIe,_),b(f,ld,_),e(ld,KF),e(KF,Vhe),M(B0,Vhe,null),e(ld,HQo),e(ld,Xhe),e(Xhe,UQo),b(f,wIe,_),b(f,Go,_),M(P0,Go,null),e(Go,JQo),e(Go,id),e(id,YQo),e(id,NV),e(NV,KQo),e(id,ZQo),e(id,jV),e(jV,eWo),e(id,oWo),e(Go,rWo),e(Go,I0),e(I0,tWo),e(I0,zhe),e(zhe,aWo),e(I0,nWo),e(Go,sWo),e(Go,pt),M(q0,pt,null),e(pt,lWo),e(pt,Qhe),e(Qhe,iWo),e(pt,dWo),e(pt,dd),e(dd,cWo),e(dd,Whe),e(Whe,fWo),e(dd,mWo),e(dd,DV),e(DV,gWo),e(dd,hWo),e(pt,pWo),M(ZF,pt,null),e(Go,uWo),e(Go,lo),M(N0,lo,null),e(lo,_Wo),e(lo,Hhe),e(Hhe,bWo),e(lo,vWo),e(lo,ja),e(ja,FWo),e(ja,Uhe),e(Uhe,TWo),e(ja,MWo),e(ja,Jhe),e(Jhe,EWo),e(ja,CWo),e(ja,Yhe),e(Yhe,wWo),e(ja,AWo),e(lo,yWo),e(lo,Ne),e(Ne,eT),e(eT,Khe),e(Khe,LWo),e(eT,xWo),e(eT,GV),e(GV,$Wo),e(eT,kWo),e(Ne,SWo),e(Ne,oT),e(oT,Zhe),e(Zhe,RWo),e(oT,BWo),e(oT,OV),e(OV,PWo),e(oT,IWo),e(Ne,qWo),e(Ne,rT),e(rT,epe),e(epe,NWo),e(rT,jWo),e(rT,VV),e(VV,DWo),e(rT,GWo),e(Ne,OWo),e(Ne,tT),e(tT,ope),e(ope,VWo),e(tT,XWo),e(tT,XV),e(XV,zWo),e(tT,QWo),e(Ne,WWo),e(Ne,aT),e(aT,rpe),e(rpe,HWo),e(aT,UWo),e(aT,zV),e(zV,JWo),e(aT,YWo),e(Ne,KWo),e(Ne,nT),e(nT,tpe),e(tpe,ZWo),e(nT,eHo),e(nT,QV),e(QV,oHo),e(nT,rHo),e(Ne,tHo),e(Ne,sT),e(sT,ape),e(ape,aHo),e(sT,nHo),e(sT,WV),e(WV,sHo),e(sT,lHo),e(Ne,iHo),e(Ne,lT),e(lT,npe),e(npe,dHo),e(lT,cHo),e(lT,HV),e(HV,fHo),e(lT,mHo),e(lo,gHo),e(lo,iT),e(iT,hHo),e(iT,spe),e(spe,pHo),e(iT,uHo),e(iT,lpe),e(lpe,_Ho),e(lo,bHo),M(dT,lo,null),b(f,AIe,_),b(f,cd,_),e(cd,cT),e(cT,ipe),M(j0,ipe,null),e(cd,vHo),e(cd,dpe),e(dpe,FHo),b(f,yIe,_),b(f,Oo,_),M(D0,Oo,null),e(Oo,THo),e(Oo,fd),e(fd,MHo),e(fd,UV),e(UV,EHo),e(fd,CHo),e(fd,JV),e(JV,wHo),e(fd,AHo),e(Oo,yHo),e(Oo,G0),e(G0,LHo),e(G0,cpe),e(cpe,xHo),e(G0,$Ho),e(Oo,kHo),e(Oo,ut),M(O0,ut,null),e(ut,SHo),e(ut,fpe),e(fpe,RHo),e(ut,BHo),e(ut,md),e(md,PHo),e(md,mpe),e(mpe,IHo),e(md,qHo),e(md,YV),e(YV,NHo),e(md,jHo),e(ut,DHo),M(fT,ut,null),e(Oo,GHo),e(Oo,io),M(V0,io,null),e(io,OHo),e(io,gpe),e(gpe,VHo),e(io,XHo),e(io,Da),e(Da,zHo),e(Da,hpe),e(hpe,QHo),e(Da,WHo),e(Da,ppe),e(ppe,HHo),e(Da,UHo),e(Da,upe),e(upe,JHo),e(Da,YHo),e(io,KHo),e(io,Ga),e(Ga,mT),e(mT,_pe),e(_pe,ZHo),e(mT,eUo),e(mT,KV),e(KV,oUo),e(mT,rUo),e(Ga,tUo),e(Ga,gT),e(gT,bpe),e(bpe,aUo),e(gT,nUo),e(gT,ZV),e(ZV,sUo),e(gT,lUo),e(Ga,iUo),e(Ga,hT),e(hT,vpe),e(vpe,dUo),e(hT,cUo),e(hT,eX),e(eX,fUo),e(hT,mUo),e(Ga,gUo),e(Ga,pT),e(pT,Fpe),e(Fpe,hUo),e(pT,pUo),e(pT,oX),e(oX,uUo),e(pT,_Uo),e(io,bUo),e(io,uT),e(uT,vUo),e(uT,Tpe),e(Tpe,FUo),e(uT,TUo),e(uT,Mpe),e(Mpe,MUo),e(io,EUo),M(_T,io,null),b(f,LIe,_),b(f,gd,_),e(gd,bT),e(bT,Epe),M(X0,Epe,null),e(gd,CUo),e(gd,Cpe),e(Cpe,wUo),b(f,xIe,_),b(f,Vo,_),M(z0,Vo,null),e(Vo,AUo),e(Vo,hd),e(hd,yUo),e(hd,rX),e(rX,LUo),e(hd,xUo),e(hd,tX),e(tX,$Uo),e(hd,kUo),e(Vo,SUo),e(Vo,Q0),e(Q0,RUo),e(Q0,wpe),e(wpe,BUo),e(Q0,PUo),e(Vo,IUo),e(Vo,_t),M(W0,_t,null),e(_t,qUo),e(_t,Ape),e(Ape,NUo),e(_t,jUo),e(_t,pd),e(pd,DUo),e(pd,ype),e(ype,GUo),e(pd,OUo),e(pd,aX),e(aX,VUo),e(pd,XUo),e(_t,zUo),M(vT,_t,null),e(Vo,QUo),e(Vo,co),M(H0,co,null),e(co,WUo),e(co,Lpe),e(Lpe,HUo),e(co,UUo),e(co,Oa),e(Oa,JUo),e(Oa,xpe),e(xpe,YUo),e(Oa,KUo),e(Oa,$pe),e($pe,ZUo),e(Oa,eJo),e(Oa,kpe),e(kpe,oJo),e(Oa,rJo),e(co,tJo),e(co,je),e(je,FT),e(FT,Spe),e(Spe,aJo),e(FT,nJo),e(FT,nX),e(nX,sJo),e(FT,lJo),e(je,iJo),e(je,TT),e(TT,Rpe),e(Rpe,dJo),e(TT,cJo),e(TT,sX),e(sX,fJo),e(TT,mJo),e(je,gJo),e(je,MT),e(MT,Bpe),e(Bpe,hJo),e(MT,pJo),e(MT,lX),e(lX,uJo),e(MT,_Jo),e(je,bJo),e(je,ET),e(ET,Ppe),e(Ppe,vJo),e(ET,FJo),e(ET,iX),e(iX,TJo),e(ET,MJo),e(je,EJo),e(je,CT),e(CT,Ipe),e(Ipe,CJo),e(CT,wJo),e(CT,dX),e(dX,AJo),e(CT,yJo),e(je,LJo),e(je,wT),e(wT,qpe),e(qpe,xJo),e(wT,$Jo),e(wT,cX),e(cX,kJo),e(wT,SJo),e(je,RJo),e(je,AT),e(AT,Npe),e(Npe,BJo),e(AT,PJo),e(AT,fX),e(fX,IJo),e(AT,qJo),e(je,NJo),e(je,yT),e(yT,jpe),e(jpe,jJo),e(yT,DJo),e(yT,mX),e(mX,GJo),e(yT,OJo),e(co,VJo),e(co,LT),e(LT,XJo),e(LT,Dpe),e(Dpe,zJo),e(LT,QJo),e(LT,Gpe),e(Gpe,WJo),e(co,HJo),M(xT,co,null),b(f,$Ie,_),b(f,ud,_),e(ud,$T),e($T,Ope),M(U0,Ope,null),e(ud,UJo),e(ud,Vpe),e(Vpe,JJo),b(f,kIe,_),b(f,Xo,_),M(J0,Xo,null),e(Xo,YJo),e(Xo,_d),e(_d,KJo),e(_d,gX),e(gX,ZJo),e(_d,eYo),e(_d,hX),e(hX,oYo),e(_d,rYo),e(Xo,tYo),e(Xo,Y0),e(Y0,aYo),e(Y0,Xpe),e(Xpe,nYo),e(Y0,sYo),e(Xo,lYo),e(Xo,bt),M(K0,bt,null),e(bt,iYo),e(bt,zpe),e(zpe,dYo),e(bt,cYo),e(bt,bd),e(bd,fYo),e(bd,Qpe),e(Qpe,mYo),e(bd,gYo),e(bd,pX),e(pX,hYo),e(bd,pYo),e(bt,uYo),M(kT,bt,null),e(Xo,_Yo),e(Xo,fo),M(Z0,fo,null),e(fo,bYo),e(fo,Wpe),e(Wpe,vYo),e(fo,FYo),e(fo,Va),e(Va,TYo),e(Va,Hpe),e(Hpe,MYo),e(Va,EYo),e(Va,Upe),e(Upe,CYo),e(Va,wYo),e(Va,Jpe),e(Jpe,AYo),e(Va,yYo),e(fo,LYo),e(fo,ey),e(ey,ST),e(ST,Ype),e(Ype,xYo),e(ST,$Yo),e(ST,uX),e(uX,kYo),e(ST,SYo),e(ey,RYo),e(ey,RT),e(RT,Kpe),e(Kpe,BYo),e(RT,PYo),e(RT,_X),e(_X,IYo),e(RT,qYo),e(fo,NYo),e(fo,BT),e(BT,jYo),e(BT,Zpe),e(Zpe,DYo),e(BT,GYo),e(BT,eue),e(eue,OYo),e(fo,VYo),M(PT,fo,null),b(f,SIe,_),b(f,vd,_),e(vd,IT),e(IT,oue),M(oy,oue,null),e(vd,XYo),e(vd,rue),e(rue,zYo),b(f,RIe,_),b(f,zo,_),M(ry,zo,null),e(zo,QYo),e(zo,Fd),e(Fd,WYo),e(Fd,bX),e(bX,HYo),e(Fd,UYo),e(Fd,vX),e(vX,JYo),e(Fd,YYo),e(zo,KYo),e(zo,ty),e(ty,ZYo),e(ty,tue),e(tue,eKo),e(ty,oKo),e(zo,rKo),e(zo,vt),M(ay,vt,null),e(vt,tKo),e(vt,aue),e(aue,aKo),e(vt,nKo),e(vt,Td),e(Td,sKo),e(Td,nue),e(nue,lKo),e(Td,iKo),e(Td,FX),e(FX,dKo),e(Td,cKo),e(vt,fKo),M(qT,vt,null),e(zo,mKo),e(zo,mo),M(ny,mo,null),e(mo,gKo),e(mo,sue),e(sue,hKo),e(mo,pKo),e(mo,Xa),e(Xa,uKo),e(Xa,lue),e(lue,_Ko),e(Xa,bKo),e(Xa,iue),e(iue,vKo),e(Xa,FKo),e(Xa,due),e(due,TKo),e(Xa,MKo),e(mo,EKo),e(mo,za),e(za,NT),e(NT,cue),e(cue,CKo),e(NT,wKo),e(NT,TX),e(TX,AKo),e(NT,yKo),e(za,LKo),e(za,jT),e(jT,fue),e(fue,xKo),e(jT,$Ko),e(jT,MX),e(MX,kKo),e(jT,SKo),e(za,RKo),e(za,DT),e(DT,mue),e(mue,BKo),e(DT,PKo),e(DT,EX),e(EX,IKo),e(DT,qKo),e(za,NKo),e(za,GT),e(GT,gue),e(gue,jKo),e(GT,DKo),e(GT,CX),e(CX,GKo),e(GT,OKo),e(mo,VKo),e(mo,OT),e(OT,XKo),e(OT,hue),e(hue,zKo),e(OT,QKo),e(OT,pue),e(pue,WKo),e(mo,HKo),M(VT,mo,null),b(f,BIe,_),b(f,Md,_),e(Md,XT),e(XT,uue),M(sy,uue,null),e(Md,UKo),e(Md,_ue),e(_ue,JKo),b(f,PIe,_),b(f,Qo,_),M(ly,Qo,null),e(Qo,YKo),e(Qo,Ed),e(Ed,KKo),e(Ed,wX),e(wX,ZKo),e(Ed,eZo),e(Ed,AX),e(AX,oZo),e(Ed,rZo),e(Qo,tZo),e(Qo,iy),e(iy,aZo),e(iy,bue),e(bue,nZo),e(iy,sZo),e(Qo,lZo),e(Qo,Ft),M(dy,Ft,null),e(Ft,iZo),e(Ft,vue),e(vue,dZo),e(Ft,cZo),e(Ft,Cd),e(Cd,fZo),e(Cd,Fue),e(Fue,mZo),e(Cd,gZo),e(Cd,yX),e(yX,hZo),e(Cd,pZo),e(Ft,uZo),M(zT,Ft,null),e(Qo,_Zo),e(Qo,go),M(cy,go,null),e(go,bZo),e(go,Tue),e(Tue,vZo),e(go,FZo),e(go,Qa),e(Qa,TZo),e(Qa,Mue),e(Mue,MZo),e(Qa,EZo),e(Qa,Eue),e(Eue,CZo),e(Qa,wZo),e(Qa,Cue),e(Cue,AZo),e(Qa,yZo),e(go,LZo),e(go,wd),e(wd,QT),e(QT,wue),e(wue,xZo),e(QT,$Zo),e(QT,LX),e(LX,kZo),e(QT,SZo),e(wd,RZo),e(wd,WT),e(WT,Aue),e(Aue,BZo),e(WT,PZo),e(WT,xX),e(xX,IZo),e(WT,qZo),e(wd,NZo),e(wd,HT),e(HT,yue),e(yue,jZo),e(HT,DZo),e(HT,$X),e($X,GZo),e(HT,OZo),e(go,VZo),e(go,UT),e(UT,XZo),e(UT,Lue),e(Lue,zZo),e(UT,QZo),e(UT,xue),e(xue,WZo),e(go,HZo),M(JT,go,null),b(f,IIe,_),b(f,Ad,_),e(Ad,YT),e(YT,$ue),M(fy,$ue,null),e(Ad,UZo),e(Ad,kue),e(kue,JZo),b(f,qIe,_),b(f,Wo,_),M(my,Wo,null),e(Wo,YZo),e(Wo,yd),e(yd,KZo),e(yd,kX),e(kX,ZZo),e(yd,eer),e(yd,SX),e(SX,oer),e(yd,rer),e(Wo,ter),e(Wo,gy),e(gy,aer),e(gy,Sue),e(Sue,ner),e(gy,ser),e(Wo,ler),e(Wo,Tt),M(hy,Tt,null),e(Tt,ier),e(Tt,Rue),e(Rue,der),e(Tt,cer),e(Tt,Ld),e(Ld,fer),e(Ld,Bue),e(Bue,mer),e(Ld,ger),e(Ld,RX),e(RX,her),e(Ld,per),e(Tt,uer),M(KT,Tt,null),e(Wo,_er),e(Wo,ho),M(py,ho,null),e(ho,ber),e(ho,Pue),e(Pue,ver),e(ho,Fer),e(ho,Wa),e(Wa,Ter),e(Wa,Iue),e(Iue,Mer),e(Wa,Eer),e(Wa,que),e(que,Cer),e(Wa,wer),e(Wa,Nue),e(Nue,Aer),e(Wa,yer),e(ho,Ler),e(ho,uy),e(uy,ZT),e(ZT,jue),e(jue,xer),e(ZT,$er),e(ZT,BX),e(BX,ker),e(ZT,Ser),e(uy,Rer),e(uy,e7),e(e7,Due),e(Due,Ber),e(e7,Per),e(e7,PX),e(PX,Ier),e(e7,qer),e(ho,Ner),e(ho,o7),e(o7,jer),e(o7,Gue),e(Gue,Der),e(o7,Ger),e(o7,Oue),e(Oue,Oer),e(ho,Ver),M(r7,ho,null),b(f,NIe,_),b(f,xd,_),e(xd,t7),e(t7,Vue),M(_y,Vue,null),e(xd,Xer),e(xd,Xue),e(Xue,zer),b(f,jIe,_),b(f,Ho,_),M(by,Ho,null),e(Ho,Qer),e(Ho,$d),e($d,Wer),e($d,IX),e(IX,Her),e($d,Uer),e($d,qX),e(qX,Jer),e($d,Yer),e(Ho,Ker),e(Ho,vy),e(vy,Zer),e(vy,zue),e(zue,eor),e(vy,oor),e(Ho,ror),e(Ho,Mt),M(Fy,Mt,null),e(Mt,tor),e(Mt,Que),e(Que,aor),e(Mt,nor),e(Mt,kd),e(kd,sor),e(kd,Wue),e(Wue,lor),e(kd,ior),e(kd,NX),e(NX,dor),e(kd,cor),e(Mt,mor),M(a7,Mt,null),e(Ho,gor),e(Ho,po),M(Ty,po,null),e(po,hor),e(po,Hue),e(Hue,por),e(po,uor),e(po,Ha),e(Ha,_or),e(Ha,Uue),e(Uue,bor),e(Ha,vor),e(Ha,Jue),e(Jue,For),e(Ha,Tor),e(Ha,Yue),e(Yue,Mor),e(Ha,Eor),e(po,Cor),e(po,Kue),e(Kue,n7),e(n7,Zue),e(Zue,wor),e(n7,Aor),e(n7,jX),e(jX,yor),e(n7,Lor),e(po,xor),e(po,s7),e(s7,$or),e(s7,e_e),e(e_e,kor),e(s7,Sor),e(s7,o_e),e(o_e,Ror),e(po,Bor),M(l7,po,null),b(f,DIe,_),b(f,Sd,_),e(Sd,i7),e(i7,r_e),M(My,r_e,null),e(Sd,Por),e(Sd,t_e),e(t_e,Ior),b(f,GIe,_),b(f,Uo,_),M(Ey,Uo,null),e(Uo,qor),e(Uo,Rd),e(Rd,Nor),e(Rd,DX),e(DX,jor),e(Rd,Dor),e(Rd,GX),e(GX,Gor),e(Rd,Oor),e(Uo,Vor),e(Uo,Cy),e(Cy,Xor),e(Cy,a_e),e(a_e,zor),e(Cy,Qor),e(Uo,Wor),e(Uo,Et),M(wy,Et,null),e(Et,Hor),e(Et,n_e),e(n_e,Uor),e(Et,Jor),e(Et,Bd),e(Bd,Yor),e(Bd,s_e),e(s_e,Kor),e(Bd,Zor),e(Bd,OX),e(OX,err),e(Bd,orr),e(Et,rrr),M(d7,Et,null),e(Uo,trr),e(Uo,uo),M(Ay,uo,null),e(uo,arr),e(uo,l_e),e(l_e,nrr),e(uo,srr),e(uo,Ua),e(Ua,lrr),e(Ua,i_e),e(i_e,irr),e(Ua,drr),e(Ua,d_e),e(d_e,crr),e(Ua,frr),e(Ua,c_e),e(c_e,mrr),e(Ua,grr),e(uo,hrr),e(uo,Ja),e(Ja,c7),e(c7,f_e),e(f_e,prr),e(c7,urr),e(c7,VX),e(VX,_rr),e(c7,brr),e(Ja,vrr),e(Ja,f7),e(f7,m_e),e(m_e,Frr),e(f7,Trr),e(f7,XX),e(XX,Mrr),e(f7,Err),e(Ja,Crr),e(Ja,m7),e(m7,g_e),e(g_e,wrr),e(m7,Arr),e(m7,zX),e(zX,yrr),e(m7,Lrr),e(Ja,xrr),e(Ja,g7),e(g7,h_e),e(h_e,$rr),e(g7,krr),e(g7,QX),e(QX,Srr),e(g7,Rrr),e(uo,Brr),e(uo,h7),e(h7,Prr),e(h7,p_e),e(p_e,Irr),e(h7,qrr),e(h7,u_e),e(u_e,Nrr),e(uo,jrr),M(p7,uo,null),b(f,OIe,_),b(f,Pd,_),e(Pd,u7),e(u7,__e),M(yy,__e,null),e(Pd,Drr),e(Pd,b_e),e(b_e,Grr),b(f,VIe,_),b(f,Jo,_),M(Ly,Jo,null),e(Jo,Orr),e(Jo,Id),e(Id,Vrr),e(Id,WX),e(WX,Xrr),e(Id,zrr),e(Id,HX),e(HX,Qrr),e(Id,Wrr),e(Jo,Hrr),e(Jo,xy),e(xy,Urr),e(xy,v_e),e(v_e,Jrr),e(xy,Yrr),e(Jo,Krr),e(Jo,Ct),M($y,Ct,null),e(Ct,Zrr),e(Ct,F_e),e(F_e,etr),e(Ct,otr),e(Ct,qd),e(qd,rtr),e(qd,T_e),e(T_e,ttr),e(qd,atr),e(qd,UX),e(UX,ntr),e(qd,str),e(Ct,ltr),M(_7,Ct,null),e(Jo,itr),e(Jo,_o),M(ky,_o,null),e(_o,dtr),e(_o,M_e),e(M_e,ctr),e(_o,ftr),e(_o,Ya),e(Ya,mtr),e(Ya,E_e),e(E_e,gtr),e(Ya,htr),e(Ya,C_e),e(C_e,ptr),e(Ya,utr),e(Ya,w_e),e(w_e,_tr),e(Ya,btr),e(_o,vtr),e(_o,A_e),e(A_e,b7),e(b7,y_e),e(y_e,Ftr),e(b7,Ttr),e(b7,JX),e(JX,Mtr),e(b7,Etr),e(_o,Ctr),e(_o,v7),e(v7,wtr),e(v7,L_e),e(L_e,Atr),e(v7,ytr),e(v7,x_e),e(x_e,Ltr),e(_o,xtr),M(F7,_o,null),b(f,XIe,_),b(f,Nd,_),e(Nd,T7),e(T7,$_e),M(Sy,$_e,null),e(Nd,$tr),e(Nd,k_e),e(k_e,ktr),b(f,zIe,_),b(f,Yo,_),M(Ry,Yo,null),e(Yo,Str),e(Yo,jd),e(jd,Rtr),e(jd,YX),e(YX,Btr),e(jd,Ptr),e(jd,KX),e(KX,Itr),e(jd,qtr),e(Yo,Ntr),e(Yo,By),e(By,jtr),e(By,S_e),e(S_e,Dtr),e(By,Gtr),e(Yo,Otr),e(Yo,wt),M(Py,wt,null),e(wt,Vtr),e(wt,R_e),e(R_e,Xtr),e(wt,ztr),e(wt,Dd),e(Dd,Qtr),e(Dd,B_e),e(B_e,Wtr),e(Dd,Htr),e(Dd,ZX),e(ZX,Utr),e(Dd,Jtr),e(wt,Ytr),M(M7,wt,null),e(Yo,Ktr),e(Yo,wr),M(Iy,wr,null),e(wr,Ztr),e(wr,P_e),e(P_e,ear),e(wr,oar),e(wr,Ka),e(Ka,rar),e(Ka,I_e),e(I_e,tar),e(Ka,aar),e(Ka,q_e),e(q_e,nar),e(Ka,sar),e(Ka,N_e),e(N_e,lar),e(Ka,iar),e(wr,dar),e(wr,N),e(N,E7),e(E7,j_e),e(j_e,car),e(E7,far),e(E7,ez),e(ez,mar),e(E7,gar),e(N,har),e(N,C7),e(C7,D_e),e(D_e,par),e(C7,uar),e(C7,oz),e(oz,_ar),e(C7,bar),e(N,Far),e(N,w7),e(w7,G_e),e(G_e,Tar),e(w7,Mar),e(w7,rz),e(rz,Ear),e(w7,Car),e(N,war),e(N,A7),e(A7,O_e),e(O_e,Aar),e(A7,yar),e(A7,tz),e(tz,Lar),e(A7,xar),e(N,$ar),e(N,y7),e(y7,V_e),e(V_e,kar),e(y7,Sar),e(y7,az),e(az,Rar),e(y7,Bar),e(N,Par),e(N,L7),e(L7,X_e),e(X_e,Iar),e(L7,qar),e(L7,nz),e(nz,Nar),e(L7,jar),e(N,Dar),e(N,x7),e(x7,z_e),e(z_e,Gar),e(x7,Oar),e(x7,sz),e(sz,Var),e(x7,Xar),e(N,zar),e(N,$7),e($7,Q_e),e(Q_e,Qar),e($7,War),e($7,lz),e(lz,Har),e($7,Uar),e(N,Jar),e(N,k7),e(k7,W_e),e(W_e,Yar),e(k7,Kar),e(k7,iz),e(iz,Zar),e(k7,enr),e(N,onr),e(N,S7),e(S7,H_e),e(H_e,rnr),e(S7,tnr),e(S7,dz),e(dz,anr),e(S7,nnr),e(N,snr),e(N,R7),e(R7,U_e),e(U_e,lnr),e(R7,inr),e(R7,cz),e(cz,dnr),e(R7,cnr),e(N,fnr),e(N,B7),e(B7,J_e),e(J_e,mnr),e(B7,gnr),e(B7,fz),e(fz,hnr),e(B7,pnr),e(N,unr),e(N,P7),e(P7,Y_e),e(Y_e,_nr),e(P7,bnr),e(P7,mz),e(mz,vnr),e(P7,Fnr),e(N,Tnr),e(N,I7),e(I7,K_e),e(K_e,Mnr),e(I7,Enr),e(I7,gz),e(gz,Cnr),e(I7,wnr),e(N,Anr),e(N,q7),e(q7,Z_e),e(Z_e,ynr),e(q7,Lnr),e(q7,hz),e(hz,xnr),e(q7,$nr),e(N,knr),e(N,N7),e(N7,e1e),e(e1e,Snr),e(N7,Rnr),e(N7,pz),e(pz,Bnr),e(N7,Pnr),e(N,Inr),e(N,j7),e(j7,o1e),e(o1e,qnr),e(j7,Nnr),e(j7,uz),e(uz,jnr),e(j7,Dnr),e(N,Gnr),e(N,Ps),e(Ps,r1e),e(r1e,Onr),e(Ps,Vnr),e(Ps,_z),e(_z,Xnr),e(Ps,znr),e(Ps,bz),e(bz,Qnr),e(Ps,Wnr),e(N,Hnr),e(N,D7),e(D7,t1e),e(t1e,Unr),e(D7,Jnr),e(D7,vz),e(vz,Ynr),e(D7,Knr),e(N,Znr),e(N,G7),e(G7,a1e),e(a1e,esr),e(G7,osr),e(G7,Fz),e(Fz,rsr),e(G7,tsr),e(N,asr),e(N,O7),e(O7,n1e),e(n1e,nsr),e(O7,ssr),e(O7,Tz),e(Tz,lsr),e(O7,isr),e(N,dsr),e(N,V7),e(V7,s1e),e(s1e,csr),e(V7,fsr),e(V7,Mz),e(Mz,msr),e(V7,gsr),e(N,hsr),e(N,X7),e(X7,l1e),e(l1e,psr),e(X7,usr),e(X7,Ez),e(Ez,_sr),e(X7,bsr),e(N,vsr),e(N,z7),e(z7,i1e),e(i1e,Fsr),e(z7,Tsr),e(z7,Cz),e(Cz,Msr),e(z7,Esr),e(N,Csr),e(N,Q7),e(Q7,d1e),e(d1e,wsr),e(Q7,Asr),e(Q7,wz),e(wz,ysr),e(Q7,Lsr),e(N,xsr),e(N,W7),e(W7,c1e),e(c1e,$sr),e(W7,ksr),e(W7,Az),e(Az,Ssr),e(W7,Rsr),e(N,Bsr),e(N,H7),e(H7,f1e),e(f1e,Psr),e(H7,Isr),e(H7,yz),e(yz,qsr),e(H7,Nsr),e(N,jsr),e(N,U7),e(U7,m1e),e(m1e,Dsr),e(U7,Gsr),e(U7,Lz),e(Lz,Osr),e(U7,Vsr),e(N,Xsr),e(N,J7),e(J7,g1e),e(g1e,zsr),e(J7,Qsr),e(J7,xz),e(xz,Wsr),e(J7,Hsr),e(N,Usr),e(N,Y7),e(Y7,h1e),e(h1e,Jsr),e(Y7,Ysr),e(Y7,$z),e($z,Ksr),e(Y7,Zsr),e(N,elr),e(N,K7),e(K7,p1e),e(p1e,olr),e(K7,rlr),e(K7,kz),e(kz,tlr),e(K7,alr),e(N,nlr),e(N,Z7),e(Z7,u1e),e(u1e,slr),e(Z7,llr),e(Z7,Sz),e(Sz,ilr),e(Z7,dlr),e(N,clr),e(N,e9),e(e9,_1e),e(_1e,flr),e(e9,mlr),e(e9,Rz),e(Rz,glr),e(e9,hlr),e(N,plr),e(N,o9),e(o9,b1e),e(b1e,ulr),e(o9,_lr),e(o9,Bz),e(Bz,blr),e(o9,vlr),e(N,Flr),e(N,r9),e(r9,v1e),e(v1e,Tlr),e(r9,Mlr),e(r9,Pz),e(Pz,Elr),e(r9,Clr),e(N,wlr),e(N,t9),e(t9,F1e),e(F1e,Alr),e(t9,ylr),e(t9,Iz),e(Iz,Llr),e(t9,xlr),e(N,$lr),e(N,a9),e(a9,T1e),e(T1e,klr),e(a9,Slr),e(a9,qz),e(qz,Rlr),e(a9,Blr),e(N,Plr),e(N,n9),e(n9,M1e),e(M1e,Ilr),e(n9,qlr),e(n9,Nz),e(Nz,Nlr),e(n9,jlr),e(N,Dlr),e(N,s9),e(s9,E1e),e(E1e,Glr),e(s9,Olr),e(s9,jz),e(jz,Vlr),e(s9,Xlr),e(N,zlr),e(N,l9),e(l9,C1e),e(C1e,Qlr),e(l9,Wlr),e(l9,Dz),e(Dz,Hlr),e(l9,Ulr),e(N,Jlr),e(N,i9),e(i9,w1e),e(w1e,Ylr),e(i9,Klr),e(i9,Gz),e(Gz,Zlr),e(i9,eir),e(N,oir),e(N,d9),e(d9,A1e),e(A1e,rir),e(d9,tir),e(d9,Oz),e(Oz,air),e(d9,nir),e(N,sir),e(N,c9),e(c9,y1e),e(y1e,lir),e(c9,iir),e(c9,Vz),e(Vz,dir),e(c9,cir),e(N,fir),e(N,f9),e(f9,L1e),e(L1e,mir),e(f9,gir),e(f9,Xz),e(Xz,hir),e(f9,pir),e(N,uir),e(N,m9),e(m9,x1e),e(x1e,_ir),e(m9,bir),e(m9,zz),e(zz,vir),e(m9,Fir),e(N,Tir),e(N,g9),e(g9,$1e),e($1e,Mir),e(g9,Eir),e(g9,Qz),e(Qz,Cir),e(g9,wir),e(wr,Air),M(h9,wr,null),b(f,QIe,_),b(f,Gd,_),e(Gd,p9),e(p9,k1e),M(qy,k1e,null),e(Gd,yir),e(Gd,S1e),e(S1e,Lir),b(f,WIe,_),b(f,Ko,_),M(Ny,Ko,null),e(Ko,xir),e(Ko,Od),e(Od,$ir),e(Od,Wz),e(Wz,kir),e(Od,Sir),e(Od,Hz),e(Hz,Rir),e(Od,Bir),e(Ko,Pir),e(Ko,jy),e(jy,Iir),e(jy,R1e),e(R1e,qir),e(jy,Nir),e(Ko,jir),e(Ko,At),M(Dy,At,null),e(At,Dir),e(At,B1e),e(B1e,Gir),e(At,Oir),e(At,Vd),e(Vd,Vir),e(Vd,P1e),e(P1e,Xir),e(Vd,zir),e(Vd,Uz),e(Uz,Qir),e(Vd,Wir),e(At,Hir),M(u9,At,null),e(Ko,Uir),e(Ko,Ar),M(Gy,Ar,null),e(Ar,Jir),e(Ar,I1e),e(I1e,Yir),e(Ar,Kir),e(Ar,Za),e(Za,Zir),e(Za,q1e),e(q1e,edr),e(Za,odr),e(Za,N1e),e(N1e,rdr),e(Za,tdr),e(Za,j1e),e(j1e,adr),e(Za,ndr),e(Ar,sdr),e(Ar,se),e(se,_9),e(_9,D1e),e(D1e,ldr),e(_9,idr),e(_9,Jz),e(Jz,ddr),e(_9,cdr),e(se,fdr),e(se,b9),e(b9,G1e),e(G1e,mdr),e(b9,gdr),e(b9,Yz),e(Yz,hdr),e(b9,pdr),e(se,udr),e(se,v9),e(v9,O1e),e(O1e,_dr),e(v9,bdr),e(v9,Kz),e(Kz,vdr),e(v9,Fdr),e(se,Tdr),e(se,F9),e(F9,V1e),e(V1e,Mdr),e(F9,Edr),e(F9,Zz),e(Zz,Cdr),e(F9,wdr),e(se,Adr),e(se,T9),e(T9,X1e),e(X1e,ydr),e(T9,Ldr),e(T9,eQ),e(eQ,xdr),e(T9,$dr),e(se,kdr),e(se,M9),e(M9,z1e),e(z1e,Sdr),e(M9,Rdr),e(M9,oQ),e(oQ,Bdr),e(M9,Pdr),e(se,Idr),e(se,E9),e(E9,Q1e),e(Q1e,qdr),e(E9,Ndr),e(E9,rQ),e(rQ,jdr),e(E9,Ddr),e(se,Gdr),e(se,C9),e(C9,W1e),e(W1e,Odr),e(C9,Vdr),e(C9,tQ),e(tQ,Xdr),e(C9,zdr),e(se,Qdr),e(se,w9),e(w9,H1e),e(H1e,Wdr),e(w9,Hdr),e(w9,aQ),e(aQ,Udr),e(w9,Jdr),e(se,Ydr),e(se,A9),e(A9,U1e),e(U1e,Kdr),e(A9,Zdr),e(A9,nQ),e(nQ,ecr),e(A9,ocr),e(se,rcr),e(se,y9),e(y9,J1e),e(J1e,tcr),e(y9,acr),e(y9,sQ),e(sQ,ncr),e(y9,scr),e(se,lcr),e(se,L9),e(L9,Y1e),e(Y1e,icr),e(L9,dcr),e(L9,lQ),e(lQ,ccr),e(L9,fcr),e(se,mcr),e(se,x9),e(x9,K1e),e(K1e,gcr),e(x9,hcr),e(x9,iQ),e(iQ,pcr),e(x9,ucr),e(se,_cr),e(se,$9),e($9,Z1e),e(Z1e,bcr),e($9,vcr),e($9,dQ),e(dQ,Fcr),e($9,Tcr),e(se,Mcr),e(se,k9),e(k9,e2e),e(e2e,Ecr),e(k9,Ccr),e(k9,cQ),e(cQ,wcr),e(k9,Acr),e(se,ycr),e(se,S9),e(S9,o2e),e(o2e,Lcr),e(S9,xcr),e(S9,fQ),e(fQ,$cr),e(S9,kcr),e(se,Scr),e(se,R9),e(R9,r2e),e(r2e,Rcr),e(R9,Bcr),e(R9,mQ),e(mQ,Pcr),e(R9,Icr),e(se,qcr),e(se,B9),e(B9,t2e),e(t2e,Ncr),e(B9,jcr),e(B9,gQ),e(gQ,Dcr),e(B9,Gcr),e(se,Ocr),e(se,P9),e(P9,a2e),e(a2e,Vcr),e(P9,Xcr),e(P9,hQ),e(hQ,zcr),e(P9,Qcr),e(se,Wcr),e(se,I9),e(I9,n2e),e(n2e,Hcr),e(I9,Ucr),e(I9,pQ),e(pQ,Jcr),e(I9,Ycr),e(se,Kcr),e(se,q9),e(q9,s2e),e(s2e,Zcr),e(q9,efr),e(q9,uQ),e(uQ,ofr),e(q9,rfr),e(se,tfr),e(se,N9),e(N9,l2e),e(l2e,afr),e(N9,nfr),e(N9,_Q),e(_Q,sfr),e(N9,lfr),e(se,ifr),e(se,j9),e(j9,i2e),e(i2e,dfr),e(j9,cfr),e(j9,bQ),e(bQ,ffr),e(j9,mfr),e(Ar,gfr),M(D9,Ar,null),b(f,HIe,_),b(f,Xd,_),e(Xd,G9),e(G9,d2e),M(Oy,d2e,null),e(Xd,hfr),e(Xd,c2e),e(c2e,pfr),b(f,UIe,_),b(f,Zo,_),M(Vy,Zo,null),e(Zo,ufr),e(Zo,zd),e(zd,_fr),e(zd,vQ),e(vQ,bfr),e(zd,vfr),e(zd,FQ),e(FQ,Ffr),e(zd,Tfr),e(Zo,Mfr),e(Zo,Xy),e(Xy,Efr),e(Xy,f2e),e(f2e,Cfr),e(Xy,wfr),e(Zo,Afr),e(Zo,yt),M(zy,yt,null),e(yt,yfr),e(yt,m2e),e(m2e,Lfr),e(yt,xfr),e(yt,Qd),e(Qd,$fr),e(Qd,g2e),e(g2e,kfr),e(Qd,Sfr),e(Qd,TQ),e(TQ,Rfr),e(Qd,Bfr),e(yt,Pfr),M(O9,yt,null),e(Zo,Ifr),e(Zo,yr),M(Qy,yr,null),e(yr,qfr),e(yr,h2e),e(h2e,Nfr),e(yr,jfr),e(yr,en),e(en,Dfr),e(en,p2e),e(p2e,Gfr),e(en,Ofr),e(en,u2e),e(u2e,Vfr),e(en,Xfr),e(en,_2e),e(_2e,zfr),e(en,Qfr),e(yr,Wfr),e(yr,Te),e(Te,V9),e(V9,b2e),e(b2e,Hfr),e(V9,Ufr),e(V9,MQ),e(MQ,Jfr),e(V9,Yfr),e(Te,Kfr),e(Te,X9),e(X9,v2e),e(v2e,Zfr),e(X9,emr),e(X9,EQ),e(EQ,omr),e(X9,rmr),e(Te,tmr),e(Te,z9),e(z9,F2e),e(F2e,amr),e(z9,nmr),e(z9,CQ),e(CQ,smr),e(z9,lmr),e(Te,imr),e(Te,Q9),e(Q9,T2e),e(T2e,dmr),e(Q9,cmr),e(Q9,wQ),e(wQ,fmr),e(Q9,mmr),e(Te,gmr),e(Te,W9),e(W9,M2e),e(M2e,hmr),e(W9,pmr),e(W9,AQ),e(AQ,umr),e(W9,_mr),e(Te,bmr),e(Te,H9),e(H9,E2e),e(E2e,vmr),e(H9,Fmr),e(H9,yQ),e(yQ,Tmr),e(H9,Mmr),e(Te,Emr),e(Te,U9),e(U9,C2e),e(C2e,Cmr),e(U9,wmr),e(U9,LQ),e(LQ,Amr),e(U9,ymr),e(Te,Lmr),e(Te,J9),e(J9,w2e),e(w2e,xmr),e(J9,$mr),e(J9,xQ),e(xQ,kmr),e(J9,Smr),e(Te,Rmr),e(Te,Y9),e(Y9,A2e),e(A2e,Bmr),e(Y9,Pmr),e(Y9,$Q),e($Q,Imr),e(Y9,qmr),e(Te,Nmr),e(Te,K9),e(K9,y2e),e(y2e,jmr),e(K9,Dmr),e(K9,kQ),e(kQ,Gmr),e(K9,Omr),e(Te,Vmr),e(Te,Z9),e(Z9,L2e),e(L2e,Xmr),e(Z9,zmr),e(Z9,SQ),e(SQ,Qmr),e(Z9,Wmr),e(Te,Hmr),e(Te,eM),e(eM,x2e),e(x2e,Umr),e(eM,Jmr),e(eM,RQ),e(RQ,Ymr),e(eM,Kmr),e(yr,Zmr),M(oM,yr,null),b(f,JIe,_),b(f,Wd,_),e(Wd,rM),e(rM,$2e),M(Wy,$2e,null),e(Wd,egr),e(Wd,k2e),e(k2e,ogr),b(f,YIe,_),b(f,er,_),M(Hy,er,null),e(er,rgr),e(er,Hd),e(Hd,tgr),e(Hd,BQ),e(BQ,agr),e(Hd,ngr),e(Hd,PQ),e(PQ,sgr),e(Hd,lgr),e(er,igr),e(er,Uy),e(Uy,dgr),e(Uy,S2e),e(S2e,cgr),e(Uy,fgr),e(er,mgr),e(er,Lt),M(Jy,Lt,null),e(Lt,ggr),e(Lt,R2e),e(R2e,hgr),e(Lt,pgr),e(Lt,Ud),e(Ud,ugr),e(Ud,B2e),e(B2e,_gr),e(Ud,bgr),e(Ud,IQ),e(IQ,vgr),e(Ud,Fgr),e(Lt,Tgr),M(tM,Lt,null),e(er,Mgr),e(er,Lr),M(Yy,Lr,null),e(Lr,Egr),e(Lr,P2e),e(P2e,Cgr),e(Lr,wgr),e(Lr,on),e(on,Agr),e(on,I2e),e(I2e,ygr),e(on,Lgr),e(on,q2e),e(q2e,xgr),e(on,$gr),e(on,N2e),e(N2e,kgr),e(on,Sgr),e(Lr,Rgr),e(Lr,rn),e(rn,aM),e(aM,j2e),e(j2e,Bgr),e(aM,Pgr),e(aM,qQ),e(qQ,Igr),e(aM,qgr),e(rn,Ngr),e(rn,nM),e(nM,D2e),e(D2e,jgr),e(nM,Dgr),e(nM,NQ),e(NQ,Ggr),e(nM,Ogr),e(rn,Vgr),e(rn,sM),e(sM,G2e),e(G2e,Xgr),e(sM,zgr),e(sM,jQ),e(jQ,Qgr),e(sM,Wgr),e(rn,Hgr),e(rn,lM),e(lM,O2e),e(O2e,Ugr),e(lM,Jgr),e(lM,DQ),e(DQ,Ygr),e(lM,Kgr),e(Lr,Zgr),M(iM,Lr,null),b(f,KIe,_),b(f,Jd,_),e(Jd,dM),e(dM,V2e),M(Ky,V2e,null),e(Jd,ehr),e(Jd,X2e),e(X2e,ohr),b(f,ZIe,_),b(f,or,_),M(Zy,or,null),e(or,rhr),e(or,Yd),e(Yd,thr),e(Yd,GQ),e(GQ,ahr),e(Yd,nhr),e(Yd,OQ),e(OQ,shr),e(Yd,lhr),e(or,ihr),e(or,eL),e(eL,dhr),e(eL,z2e),e(z2e,chr),e(eL,fhr),e(or,mhr),e(or,xt),M(oL,xt,null),e(xt,ghr),e(xt,Q2e),e(Q2e,hhr),e(xt,phr),e(xt,Kd),e(Kd,uhr),e(Kd,W2e),e(W2e,_hr),e(Kd,bhr),e(Kd,VQ),e(VQ,vhr),e(Kd,Fhr),e(xt,Thr),M(cM,xt,null),e(or,Mhr),e(or,xr),M(rL,xr,null),e(xr,Ehr),e(xr,H2e),e(H2e,Chr),e(xr,whr),e(xr,tn),e(tn,Ahr),e(tn,U2e),e(U2e,yhr),e(tn,Lhr),e(tn,J2e),e(J2e,xhr),e(tn,$hr),e(tn,Y2e),e(Y2e,khr),e(tn,Shr),e(xr,Rhr),e(xr,ie),e(ie,fM),e(fM,K2e),e(K2e,Bhr),e(fM,Phr),e(fM,XQ),e(XQ,Ihr),e(fM,qhr),e(ie,Nhr),e(ie,mM),e(mM,Z2e),e(Z2e,jhr),e(mM,Dhr),e(mM,zQ),e(zQ,Ghr),e(mM,Ohr),e(ie,Vhr),e(ie,gM),e(gM,ebe),e(ebe,Xhr),e(gM,zhr),e(gM,QQ),e(QQ,Qhr),e(gM,Whr),e(ie,Hhr),e(ie,hM),e(hM,obe),e(obe,Uhr),e(hM,Jhr),e(hM,WQ),e(WQ,Yhr),e(hM,Khr),e(ie,Zhr),e(ie,pM),e(pM,rbe),e(rbe,epr),e(pM,opr),e(pM,HQ),e(HQ,rpr),e(pM,tpr),e(ie,apr),e(ie,uM),e(uM,tbe),e(tbe,npr),e(uM,spr),e(uM,UQ),e(UQ,lpr),e(uM,ipr),e(ie,dpr),e(ie,_M),e(_M,abe),e(abe,cpr),e(_M,fpr),e(_M,JQ),e(JQ,mpr),e(_M,gpr),e(ie,hpr),e(ie,bM),e(bM,nbe),e(nbe,ppr),e(bM,upr),e(bM,YQ),e(YQ,_pr),e(bM,bpr),e(ie,vpr),e(ie,vM),e(vM,sbe),e(sbe,Fpr),e(vM,Tpr),e(vM,KQ),e(KQ,Mpr),e(vM,Epr),e(ie,Cpr),e(ie,FM),e(FM,lbe),e(lbe,wpr),e(FM,Apr),e(FM,ZQ),e(ZQ,ypr),e(FM,Lpr),e(ie,xpr),e(ie,TM),e(TM,ibe),e(ibe,$pr),e(TM,kpr),e(TM,eW),e(eW,Spr),e(TM,Rpr),e(ie,Bpr),e(ie,MM),e(MM,dbe),e(dbe,Ppr),e(MM,Ipr),e(MM,oW),e(oW,qpr),e(MM,Npr),e(ie,jpr),e(ie,EM),e(EM,cbe),e(cbe,Dpr),e(EM,Gpr),e(EM,rW),e(rW,Opr),e(EM,Vpr),e(ie,Xpr),e(ie,CM),e(CM,fbe),e(fbe,zpr),e(CM,Qpr),e(CM,tW),e(tW,Wpr),e(CM,Hpr),e(ie,Upr),e(ie,wM),e(wM,mbe),e(mbe,Jpr),e(wM,Ypr),e(wM,aW),e(aW,Kpr),e(wM,Zpr),e(ie,eur),e(ie,AM),e(AM,gbe),e(gbe,our),e(AM,rur),e(AM,nW),e(nW,tur),e(AM,aur),e(ie,nur),e(ie,yM),e(yM,hbe),e(hbe,sur),e(yM,lur),e(yM,sW),e(sW,iur),e(yM,dur),e(ie,cur),e(ie,LM),e(LM,pbe),e(pbe,fur),e(LM,mur),e(LM,lW),e(lW,gur),e(LM,hur),e(ie,pur),e(ie,xM),e(xM,ube),e(ube,uur),e(xM,_ur),e(xM,iW),e(iW,bur),e(xM,vur),e(ie,Fur),e(ie,$M),e($M,_be),e(_be,Tur),e($M,Mur),e($M,dW),e(dW,Eur),e($M,Cur),e(xr,wur),M(kM,xr,null),b(f,eqe,_),b(f,Zd,_),e(Zd,SM),e(SM,bbe),M(tL,bbe,null),e(Zd,Aur),e(Zd,vbe),e(vbe,yur),b(f,oqe,_),b(f,rr,_),M(aL,rr,null),e(rr,Lur),e(rr,ec),e(ec,xur),e(ec,cW),e(cW,$ur),e(ec,kur),e(ec,fW),e(fW,Sur),e(ec,Rur),e(rr,Bur),e(rr,nL),e(nL,Pur),e(nL,Fbe),e(Fbe,Iur),e(nL,qur),e(rr,Nur),e(rr,$t),M(sL,$t,null),e($t,jur),e($t,Tbe),e(Tbe,Dur),e($t,Gur),e($t,oc),e(oc,Our),e(oc,Mbe),e(Mbe,Vur),e(oc,Xur),e(oc,mW),e(mW,zur),e(oc,Qur),e($t,Wur),M(RM,$t,null),e(rr,Hur),e(rr,$r),M(lL,$r,null),e($r,Uur),e($r,Ebe),e(Ebe,Jur),e($r,Yur),e($r,an),e(an,Kur),e(an,Cbe),e(Cbe,Zur),e(an,e_r),e(an,wbe),e(wbe,o_r),e(an,r_r),e(an,Abe),e(Abe,t_r),e(an,a_r),e($r,n_r),e($r,ye),e(ye,BM),e(BM,ybe),e(ybe,s_r),e(BM,l_r),e(BM,gW),e(gW,i_r),e(BM,d_r),e(ye,c_r),e(ye,PM),e(PM,Lbe),e(Lbe,f_r),e(PM,m_r),e(PM,hW),e(hW,g_r),e(PM,h_r),e(ye,p_r),e(ye,IM),e(IM,xbe),e(xbe,u_r),e(IM,__r),e(IM,pW),e(pW,b_r),e(IM,v_r),e(ye,F_r),e(ye,qM),e(qM,$be),e($be,T_r),e(qM,M_r),e(qM,uW),e(uW,E_r),e(qM,C_r),e(ye,w_r),e(ye,NM),e(NM,kbe),e(kbe,A_r),e(NM,y_r),e(NM,_W),e(_W,L_r),e(NM,x_r),e(ye,$_r),e(ye,jM),e(jM,Sbe),e(Sbe,k_r),e(jM,S_r),e(jM,bW),e(bW,R_r),e(jM,B_r),e(ye,P_r),e(ye,DM),e(DM,Rbe),e(Rbe,I_r),e(DM,q_r),e(DM,vW),e(vW,N_r),e(DM,j_r),e(ye,D_r),e(ye,GM),e(GM,Bbe),e(Bbe,G_r),e(GM,O_r),e(GM,FW),e(FW,V_r),e(GM,X_r),e(ye,z_r),e(ye,OM),e(OM,Pbe),e(Pbe,Q_r),e(OM,W_r),e(OM,TW),e(TW,H_r),e(OM,U_r),e(ye,J_r),e(ye,VM),e(VM,Ibe),e(Ibe,Y_r),e(VM,K_r),e(VM,MW),e(MW,Z_r),e(VM,e1r),e($r,o1r),M(XM,$r,null),b(f,rqe,_),b(f,rc,_),e(rc,zM),e(zM,qbe),M(iL,qbe,null),e(rc,r1r),e(rc,Nbe),e(Nbe,t1r),b(f,tqe,_),b(f,tr,_),M(dL,tr,null),e(tr,a1r),e(tr,tc),e(tc,n1r),e(tc,EW),e(EW,s1r),e(tc,l1r),e(tc,CW),e(CW,i1r),e(tc,d1r),e(tr,c1r),e(tr,cL),e(cL,f1r),e(cL,jbe),e(jbe,m1r),e(cL,g1r),e(tr,h1r),e(tr,kt),M(fL,kt,null),e(kt,p1r),e(kt,Dbe),e(Dbe,u1r),e(kt,_1r),e(kt,ac),e(ac,b1r),e(ac,Gbe),e(Gbe,v1r),e(ac,F1r),e(ac,wW),e(wW,T1r),e(ac,M1r),e(kt,E1r),M(QM,kt,null),e(tr,C1r),e(tr,kr),M(mL,kr,null),e(kr,w1r),e(kr,Obe),e(Obe,A1r),e(kr,y1r),e(kr,nn),e(nn,L1r),e(nn,Vbe),e(Vbe,x1r),e(nn,$1r),e(nn,Xbe),e(Xbe,k1r),e(nn,S1r),e(nn,zbe),e(zbe,R1r),e(nn,B1r),e(kr,P1r),e(kr,Z),e(Z,WM),e(WM,Qbe),e(Qbe,I1r),e(WM,q1r),e(WM,AW),e(AW,N1r),e(WM,j1r),e(Z,D1r),e(Z,HM),e(HM,Wbe),e(Wbe,G1r),e(HM,O1r),e(HM,yW),e(yW,V1r),e(HM,X1r),e(Z,z1r),e(Z,UM),e(UM,Hbe),e(Hbe,Q1r),e(UM,W1r),e(UM,LW),e(LW,H1r),e(UM,U1r),e(Z,J1r),e(Z,JM),e(JM,Ube),e(Ube,Y1r),e(JM,K1r),e(JM,xW),e(xW,Z1r),e(JM,e2r),e(Z,o2r),e(Z,YM),e(YM,Jbe),e(Jbe,r2r),e(YM,t2r),e(YM,$W),e($W,a2r),e(YM,n2r),e(Z,s2r),e(Z,KM),e(KM,Ybe),e(Ybe,l2r),e(KM,i2r),e(KM,kW),e(kW,d2r),e(KM,c2r),e(Z,f2r),e(Z,ZM),e(ZM,Kbe),e(Kbe,m2r),e(ZM,g2r),e(ZM,SW),e(SW,h2r),e(ZM,p2r),e(Z,u2r),e(Z,e4),e(e4,Zbe),e(Zbe,_2r),e(e4,b2r),e(e4,RW),e(RW,v2r),e(e4,F2r),e(Z,T2r),e(Z,o4),e(o4,eve),e(eve,M2r),e(o4,E2r),e(o4,BW),e(BW,C2r),e(o4,w2r),e(Z,A2r),e(Z,r4),e(r4,ove),e(ove,y2r),e(r4,L2r),e(r4,PW),e(PW,x2r),e(r4,$2r),e(Z,k2r),e(Z,t4),e(t4,rve),e(rve,S2r),e(t4,R2r),e(t4,IW),e(IW,B2r),e(t4,P2r),e(Z,I2r),e(Z,a4),e(a4,tve),e(tve,q2r),e(a4,N2r),e(a4,qW),e(qW,j2r),e(a4,D2r),e(Z,G2r),e(Z,n4),e(n4,ave),e(ave,O2r),e(n4,V2r),e(n4,NW),e(NW,X2r),e(n4,z2r),e(Z,Q2r),e(Z,s4),e(s4,nve),e(nve,W2r),e(s4,H2r),e(s4,jW),e(jW,U2r),e(s4,J2r),e(Z,Y2r),e(Z,l4),e(l4,sve),e(sve,K2r),e(l4,Z2r),e(l4,DW),e(DW,ebr),e(l4,obr),e(Z,rbr),e(Z,i4),e(i4,lve),e(lve,tbr),e(i4,abr),e(i4,GW),e(GW,nbr),e(i4,sbr),e(Z,lbr),e(Z,d4),e(d4,ive),e(ive,ibr),e(d4,dbr),e(d4,OW),e(OW,cbr),e(d4,fbr),e(Z,mbr),e(Z,c4),e(c4,dve),e(dve,gbr),e(c4,hbr),e(c4,VW),e(VW,pbr),e(c4,ubr),e(Z,_br),e(Z,f4),e(f4,cve),e(cve,bbr),e(f4,vbr),e(f4,XW),e(XW,Fbr),e(f4,Tbr),e(Z,Mbr),e(Z,m4),e(m4,fve),e(fve,Ebr),e(m4,Cbr),e(m4,zW),e(zW,wbr),e(m4,Abr),e(Z,ybr),e(Z,g4),e(g4,mve),e(mve,Lbr),e(g4,xbr),e(g4,QW),e(QW,$br),e(g4,kbr),e(Z,Sbr),e(Z,h4),e(h4,gve),e(gve,Rbr),e(h4,Bbr),e(h4,WW),e(WW,Pbr),e(h4,Ibr),e(Z,qbr),e(Z,p4),e(p4,hve),e(hve,Nbr),e(p4,jbr),e(p4,HW),e(HW,Dbr),e(p4,Gbr),e(Z,Obr),e(Z,u4),e(u4,pve),e(pve,Vbr),e(u4,Xbr),e(u4,UW),e(UW,zbr),e(u4,Qbr),e(Z,Wbr),e(Z,_4),e(_4,uve),e(uve,Hbr),e(_4,Ubr),e(_4,JW),e(JW,Jbr),e(_4,Ybr),e(Z,Kbr),e(Z,b4),e(b4,_ve),e(_ve,Zbr),e(b4,evr),e(b4,YW),e(YW,ovr),e(b4,rvr),e(kr,tvr),M(v4,kr,null),b(f,aqe,_),b(f,nc,_),e(nc,F4),e(F4,bve),M(gL,bve,null),e(nc,avr),e(nc,vve),e(vve,nvr),b(f,nqe,_),b(f,ar,_),M(hL,ar,null),e(ar,svr),e(ar,sc),e(sc,lvr),e(sc,KW),e(KW,ivr),e(sc,dvr),e(sc,ZW),e(ZW,cvr),e(sc,fvr),e(ar,mvr),e(ar,pL),e(pL,gvr),e(pL,Fve),e(Fve,hvr),e(pL,pvr),e(ar,uvr),e(ar,St),M(uL,St,null),e(St,_vr),e(St,Tve),e(Tve,bvr),e(St,vvr),e(St,lc),e(lc,Fvr),e(lc,Mve),e(Mve,Tvr),e(lc,Mvr),e(lc,eH),e(eH,Evr),e(lc,Cvr),e(St,wvr),M(T4,St,null),e(ar,Avr),e(ar,Sr),M(_L,Sr,null),e(Sr,yvr),e(Sr,Eve),e(Eve,Lvr),e(Sr,xvr),e(Sr,sn),e(sn,$vr),e(sn,Cve),e(Cve,kvr),e(sn,Svr),e(sn,wve),e(wve,Rvr),e(sn,Bvr),e(sn,Ave),e(Ave,Pvr),e(sn,Ivr),e(Sr,qvr),e(Sr,he),e(he,M4),e(M4,yve),e(yve,Nvr),e(M4,jvr),e(M4,oH),e(oH,Dvr),e(M4,Gvr),e(he,Ovr),e(he,E4),e(E4,Lve),e(Lve,Vvr),e(E4,Xvr),e(E4,rH),e(rH,zvr),e(E4,Qvr),e(he,Wvr),e(he,C4),e(C4,xve),e(xve,Hvr),e(C4,Uvr),e(C4,tH),e(tH,Jvr),e(C4,Yvr),e(he,Kvr),e(he,w4),e(w4,$ve),e($ve,Zvr),e(w4,eFr),e(w4,aH),e(aH,oFr),e(w4,rFr),e(he,tFr),e(he,A4),e(A4,kve),e(kve,aFr),e(A4,nFr),e(A4,nH),e(nH,sFr),e(A4,lFr),e(he,iFr),e(he,y4),e(y4,Sve),e(Sve,dFr),e(y4,cFr),e(y4,sH),e(sH,fFr),e(y4,mFr),e(he,gFr),e(he,L4),e(L4,Rve),e(Rve,hFr),e(L4,pFr),e(L4,lH),e(lH,uFr),e(L4,_Fr),e(he,bFr),e(he,x4),e(x4,Bve),e(Bve,vFr),e(x4,FFr),e(x4,iH),e(iH,TFr),e(x4,MFr),e(he,EFr),e(he,$4),e($4,Pve),e(Pve,CFr),e($4,wFr),e($4,dH),e(dH,AFr),e($4,yFr),e(he,LFr),e(he,k4),e(k4,Ive),e(Ive,xFr),e(k4,$Fr),e(k4,cH),e(cH,kFr),e(k4,SFr),e(he,RFr),e(he,S4),e(S4,qve),e(qve,BFr),e(S4,PFr),e(S4,fH),e(fH,IFr),e(S4,qFr),e(he,NFr),e(he,R4),e(R4,Nve),e(Nve,jFr),e(R4,DFr),e(R4,mH),e(mH,GFr),e(R4,OFr),e(he,VFr),e(he,B4),e(B4,jve),e(jve,XFr),e(B4,zFr),e(B4,gH),e(gH,QFr),e(B4,WFr),e(he,HFr),e(he,P4),e(P4,Dve),e(Dve,UFr),e(P4,JFr),e(P4,hH),e(hH,YFr),e(P4,KFr),e(he,ZFr),e(he,I4),e(I4,Gve),e(Gve,eTr),e(I4,oTr),e(I4,pH),e(pH,rTr),e(I4,tTr),e(he,aTr),e(he,q4),e(q4,Ove),e(Ove,nTr),e(q4,sTr),e(q4,uH),e(uH,lTr),e(q4,iTr),e(he,dTr),e(he,N4),e(N4,Vve),e(Vve,cTr),e(N4,fTr),e(N4,_H),e(_H,mTr),e(N4,gTr),e(Sr,hTr),M(j4,Sr,null),b(f,sqe,_),b(f,ic,_),e(ic,D4),e(D4,Xve),M(bL,Xve,null),e(ic,pTr),e(ic,zve),e(zve,uTr),b(f,lqe,_),b(f,nr,_),M(vL,nr,null),e(nr,_Tr),e(nr,dc),e(dc,bTr),e(dc,bH),e(bH,vTr),e(dc,FTr),e(dc,vH),e(vH,TTr),e(dc,MTr),e(nr,ETr),e(nr,FL),e(FL,CTr),e(FL,Qve),e(Qve,wTr),e(FL,ATr),e(nr,yTr),e(nr,Rt),M(TL,Rt,null),e(Rt,LTr),e(Rt,Wve),e(Wve,xTr),e(Rt,$Tr),e(Rt,cc),e(cc,kTr),e(cc,Hve),e(Hve,STr),e(cc,RTr),e(cc,FH),e(FH,BTr),e(cc,PTr),e(Rt,ITr),M(G4,Rt,null),e(nr,qTr),e(nr,Rr),M(ML,Rr,null),e(Rr,NTr),e(Rr,Uve),e(Uve,jTr),e(Rr,DTr),e(Rr,ln),e(ln,GTr),e(ln,Jve),e(Jve,OTr),e(ln,VTr),e(ln,Yve),e(Yve,XTr),e(ln,zTr),e(ln,Kve),e(Kve,QTr),e(ln,WTr),e(Rr,HTr),e(Rr,EL),e(EL,O4),e(O4,Zve),e(Zve,UTr),e(O4,JTr),e(O4,TH),e(TH,YTr),e(O4,KTr),e(EL,ZTr),e(EL,V4),e(V4,eFe),e(eFe,e7r),e(V4,o7r),e(V4,MH),e(MH,r7r),e(V4,t7r),e(Rr,a7r),M(X4,Rr,null),b(f,iqe,_),b(f,fc,_),e(fc,z4),e(z4,oFe),M(CL,oFe,null),e(fc,n7r),e(fc,rFe),e(rFe,s7r),b(f,dqe,_),b(f,sr,_),M(wL,sr,null),e(sr,l7r),e(sr,mc),e(mc,i7r),e(mc,EH),e(EH,d7r),e(mc,c7r),e(mc,CH),e(CH,f7r),e(mc,m7r),e(sr,g7r),e(sr,AL),e(AL,h7r),e(AL,tFe),e(tFe,p7r),e(AL,u7r),e(sr,_7r),e(sr,Bt),M(yL,Bt,null),e(Bt,b7r),e(Bt,aFe),e(aFe,v7r),e(Bt,F7r),e(Bt,gc),e(gc,T7r),e(gc,nFe),e(nFe,M7r),e(gc,E7r),e(gc,wH),e(wH,C7r),e(gc,w7r),e(Bt,A7r),M(Q4,Bt,null),e(sr,y7r),e(sr,Br),M(LL,Br,null),e(Br,L7r),e(Br,sFe),e(sFe,x7r),e(Br,$7r),e(Br,dn),e(dn,k7r),e(dn,lFe),e(lFe,S7r),e(dn,R7r),e(dn,iFe),e(iFe,B7r),e(dn,P7r),e(dn,dFe),e(dFe,I7r),e(dn,q7r),e(Br,N7r),e(Br,cFe),e(cFe,W4),e(W4,fFe),e(fFe,j7r),e(W4,D7r),e(W4,AH),e(AH,G7r),e(W4,O7r),e(Br,V7r),M(H4,Br,null),b(f,cqe,_),b(f,hc,_),e(hc,U4),e(U4,mFe),M(xL,mFe,null),e(hc,X7r),e(hc,gFe),e(gFe,z7r),b(f,fqe,_),b(f,lr,_),M($L,lr,null),e(lr,Q7r),e(lr,pc),e(pc,W7r),e(pc,yH),e(yH,H7r),e(pc,U7r),e(pc,LH),e(LH,J7r),e(pc,Y7r),e(lr,K7r),e(lr,kL),e(kL,Z7r),e(kL,hFe),e(hFe,e9r),e(kL,o9r),e(lr,r9r),e(lr,Pt),M(SL,Pt,null),e(Pt,t9r),e(Pt,pFe),e(pFe,a9r),e(Pt,n9r),e(Pt,uc),e(uc,s9r),e(uc,uFe),e(uFe,l9r),e(uc,i9r),e(uc,xH),e(xH,d9r),e(uc,c9r),e(Pt,f9r),M(J4,Pt,null),e(lr,m9r),e(lr,Pr),M(RL,Pr,null),e(Pr,g9r),e(Pr,_Fe),e(_Fe,h9r),e(Pr,p9r),e(Pr,cn),e(cn,u9r),e(cn,bFe),e(bFe,_9r),e(cn,b9r),e(cn,vFe),e(vFe,v9r),e(cn,F9r),e(cn,FFe),e(FFe,T9r),e(cn,M9r),e(Pr,E9r),e(Pr,de),e(de,Y4),e(Y4,TFe),e(TFe,C9r),e(Y4,w9r),e(Y4,$H),e($H,A9r),e(Y4,y9r),e(de,L9r),e(de,K4),e(K4,MFe),e(MFe,x9r),e(K4,$9r),e(K4,kH),e(kH,k9r),e(K4,S9r),e(de,R9r),e(de,Z4),e(Z4,EFe),e(EFe,B9r),e(Z4,P9r),e(Z4,SH),e(SH,I9r),e(Z4,q9r),e(de,N9r),e(de,eE),e(eE,CFe),e(CFe,j9r),e(eE,D9r),e(eE,RH),e(RH,G9r),e(eE,O9r),e(de,V9r),e(de,oE),e(oE,wFe),e(wFe,X9r),e(oE,z9r),e(oE,BH),e(BH,Q9r),e(oE,W9r),e(de,H9r),e(de,rE),e(rE,AFe),e(AFe,U9r),e(rE,J9r),e(rE,PH),e(PH,Y9r),e(rE,K9r),e(de,Z9r),e(de,tE),e(tE,yFe),e(yFe,eMr),e(tE,oMr),e(tE,IH),e(IH,rMr),e(tE,tMr),e(de,aMr),e(de,aE),e(aE,LFe),e(LFe,nMr),e(aE,sMr),e(aE,qH),e(qH,lMr),e(aE,iMr),e(de,dMr),e(de,nE),e(nE,xFe),e(xFe,cMr),e(nE,fMr),e(nE,NH),e(NH,mMr),e(nE,gMr),e(de,hMr),e(de,sE),e(sE,$Fe),e($Fe,pMr),e(sE,uMr),e(sE,jH),e(jH,_Mr),e(sE,bMr),e(de,vMr),e(de,lE),e(lE,kFe),e(kFe,FMr),e(lE,TMr),e(lE,DH),e(DH,MMr),e(lE,EMr),e(de,CMr),e(de,iE),e(iE,SFe),e(SFe,wMr),e(iE,AMr),e(iE,GH),e(GH,yMr),e(iE,LMr),e(de,xMr),e(de,dE),e(dE,RFe),e(RFe,$Mr),e(dE,kMr),e(dE,OH),e(OH,SMr),e(dE,RMr),e(de,BMr),e(de,cE),e(cE,BFe),e(BFe,PMr),e(cE,IMr),e(cE,VH),e(VH,qMr),e(cE,NMr),e(de,jMr),e(de,fE),e(fE,PFe),e(PFe,DMr),e(fE,GMr),e(fE,XH),e(XH,OMr),e(fE,VMr),e(de,XMr),e(de,mE),e(mE,IFe),e(IFe,zMr),e(mE,QMr),e(mE,zH),e(zH,WMr),e(mE,HMr),e(de,UMr),e(de,gE),e(gE,qFe),e(qFe,JMr),e(gE,YMr),e(gE,QH),e(QH,KMr),e(gE,ZMr),e(de,e4r),e(de,hE),e(hE,NFe),e(NFe,o4r),e(hE,r4r),e(hE,WH),e(WH,t4r),e(hE,a4r),e(de,n4r),e(de,pE),e(pE,jFe),e(jFe,s4r),e(pE,l4r),e(pE,HH),e(HH,i4r),e(pE,d4r),e(de,c4r),e(de,uE),e(uE,DFe),e(DFe,f4r),e(uE,m4r),e(uE,UH),e(UH,g4r),e(uE,h4r),e(Pr,p4r),M(_E,Pr,null),b(f,mqe,_),b(f,_c,_),e(_c,bE),e(bE,GFe),M(BL,GFe,null),e(_c,u4r),e(_c,OFe),e(OFe,_4r),b(f,gqe,_),b(f,ir,_),M(PL,ir,null),e(ir,b4r),e(ir,bc),e(bc,v4r),e(bc,JH),e(JH,F4r),e(bc,T4r),e(bc,YH),e(YH,M4r),e(bc,E4r),e(ir,C4r),e(ir,IL),e(IL,w4r),e(IL,VFe),e(VFe,A4r),e(IL,y4r),e(ir,L4r),e(ir,It),M(qL,It,null),e(It,x4r),e(It,XFe),e(XFe,$4r),e(It,k4r),e(It,vc),e(vc,S4r),e(vc,zFe),e(zFe,R4r),e(vc,B4r),e(vc,KH),e(KH,P4r),e(vc,I4r),e(It,q4r),M(vE,It,null),e(ir,N4r),e(ir,Ir),M(NL,Ir,null),e(Ir,j4r),e(Ir,QFe),e(QFe,D4r),e(Ir,G4r),e(Ir,fn),e(fn,O4r),e(fn,WFe),e(WFe,V4r),e(fn,X4r),e(fn,HFe),e(HFe,z4r),e(fn,Q4r),e(fn,UFe),e(UFe,W4r),e(fn,H4r),e(Ir,U4r),e(Ir,ce),e(ce,FE),e(FE,JFe),e(JFe,J4r),e(FE,Y4r),e(FE,ZH),e(ZH,K4r),e(FE,Z4r),e(ce,eEr),e(ce,TE),e(TE,YFe),e(YFe,oEr),e(TE,rEr),e(TE,eU),e(eU,tEr),e(TE,aEr),e(ce,nEr),e(ce,ME),e(ME,KFe),e(KFe,sEr),e(ME,lEr),e(ME,oU),e(oU,iEr),e(ME,dEr),e(ce,cEr),e(ce,EE),e(EE,ZFe),e(ZFe,fEr),e(EE,mEr),e(EE,rU),e(rU,gEr),e(EE,hEr),e(ce,pEr),e(ce,CE),e(CE,eTe),e(eTe,uEr),e(CE,_Er),e(CE,tU),e(tU,bEr),e(CE,vEr),e(ce,FEr),e(ce,wE),e(wE,oTe),e(oTe,TEr),e(wE,MEr),e(wE,aU),e(aU,EEr),e(wE,CEr),e(ce,wEr),e(ce,AE),e(AE,rTe),e(rTe,AEr),e(AE,yEr),e(AE,nU),e(nU,LEr),e(AE,xEr),e(ce,$Er),e(ce,yE),e(yE,tTe),e(tTe,kEr),e(yE,SEr),e(yE,sU),e(sU,REr),e(yE,BEr),e(ce,PEr),e(ce,LE),e(LE,aTe),e(aTe,IEr),e(LE,qEr),e(LE,lU),e(lU,NEr),e(LE,jEr),e(ce,DEr),e(ce,xE),e(xE,nTe),e(nTe,GEr),e(xE,OEr),e(xE,iU),e(iU,VEr),e(xE,XEr),e(ce,zEr),e(ce,$E),e($E,sTe),e(sTe,QEr),e($E,WEr),e($E,dU),e(dU,HEr),e($E,UEr),e(ce,JEr),e(ce,kE),e(kE,lTe),e(lTe,YEr),e(kE,KEr),e(kE,cU),e(cU,ZEr),e(kE,e5r),e(ce,o5r),e(ce,SE),e(SE,iTe),e(iTe,r5r),e(SE,t5r),e(SE,fU),e(fU,a5r),e(SE,n5r),e(ce,s5r),e(ce,RE),e(RE,dTe),e(dTe,l5r),e(RE,i5r),e(RE,mU),e(mU,d5r),e(RE,c5r),e(ce,f5r),e(ce,BE),e(BE,cTe),e(cTe,m5r),e(BE,g5r),e(BE,gU),e(gU,h5r),e(BE,p5r),e(ce,u5r),e(ce,PE),e(PE,fTe),e(fTe,_5r),e(PE,b5r),e(PE,hU),e(hU,v5r),e(PE,F5r),e(ce,T5r),e(ce,IE),e(IE,mTe),e(mTe,M5r),e(IE,E5r),e(IE,pU),e(pU,C5r),e(IE,w5r),e(ce,A5r),e(ce,qE),e(qE,gTe),e(gTe,y5r),e(qE,L5r),e(qE,uU),e(uU,x5r),e(qE,$5r),e(ce,k5r),e(ce,NE),e(NE,hTe),e(hTe,S5r),e(NE,R5r),e(NE,_U),e(_U,B5r),e(NE,P5r),e(ce,I5r),e(ce,jE),e(jE,pTe),e(pTe,q5r),e(jE,N5r),e(jE,bU),e(bU,j5r),e(jE,D5r),e(Ir,G5r),M(DE,Ir,null),b(f,hqe,_),b(f,Fc,_),e(Fc,GE),e(GE,uTe),M(jL,uTe,null),e(Fc,O5r),e(Fc,_Te),e(_Te,V5r),b(f,pqe,_),b(f,dr,_),M(DL,dr,null),e(dr,X5r),e(dr,Tc),e(Tc,z5r),e(Tc,vU),e(vU,Q5r),e(Tc,W5r),e(Tc,FU),e(FU,H5r),e(Tc,U5r),e(dr,J5r),e(dr,GL),e(GL,Y5r),e(GL,bTe),e(bTe,K5r),e(GL,Z5r),e(dr,eCr),e(dr,qt),M(OL,qt,null),e(qt,oCr),e(qt,vTe),e(vTe,rCr),e(qt,tCr),e(qt,Mc),e(Mc,aCr),e(Mc,FTe),e(FTe,nCr),e(Mc,sCr),e(Mc,TU),e(TU,lCr),e(Mc,iCr),e(qt,dCr),M(OE,qt,null),e(dr,cCr),e(dr,qr),M(VL,qr,null),e(qr,fCr),e(qr,TTe),e(TTe,mCr),e(qr,gCr),e(qr,mn),e(mn,hCr),e(mn,MTe),e(MTe,pCr),e(mn,uCr),e(mn,ETe),e(ETe,_Cr),e(mn,bCr),e(mn,CTe),e(CTe,vCr),e(mn,FCr),e(qr,TCr),e(qr,wTe),e(wTe,VE),e(VE,ATe),e(ATe,MCr),e(VE,ECr),e(VE,MU),e(MU,CCr),e(VE,wCr),e(qr,ACr),M(XE,qr,null),b(f,uqe,_),b(f,Ec,_),e(Ec,zE),e(zE,yTe),M(XL,yTe,null),e(Ec,yCr),e(Ec,LTe),e(LTe,LCr),b(f,_qe,_),b(f,cr,_),M(zL,cr,null),e(cr,xCr),e(cr,Cc),e(Cc,$Cr),e(Cc,EU),e(EU,kCr),e(Cc,SCr),e(Cc,CU),e(CU,RCr),e(Cc,BCr),e(cr,PCr),e(cr,QL),e(QL,ICr),e(QL,xTe),e(xTe,qCr),e(QL,NCr),e(cr,jCr),e(cr,Nt),M(WL,Nt,null),e(Nt,DCr),e(Nt,$Te),e($Te,GCr),e(Nt,OCr),e(Nt,wc),e(wc,VCr),e(wc,kTe),e(kTe,XCr),e(wc,zCr),e(wc,wU),e(wU,QCr),e(wc,WCr),e(Nt,HCr),M(QE,Nt,null),e(cr,UCr),e(cr,Nr),M(HL,Nr,null),e(Nr,JCr),e(Nr,STe),e(STe,YCr),e(Nr,KCr),e(Nr,gn),e(gn,ZCr),e(gn,RTe),e(RTe,e3r),e(gn,o3r),e(gn,BTe),e(BTe,r3r),e(gn,t3r),e(gn,PTe),e(PTe,a3r),e(gn,n3r),e(Nr,s3r),e(Nr,ITe),e(ITe,WE),e(WE,qTe),e(qTe,l3r),e(WE,i3r),e(WE,AU),e(AU,d3r),e(WE,c3r),e(Nr,f3r),M(HE,Nr,null),b(f,bqe,_),b(f,Ac,_),e(Ac,UE),e(UE,NTe),M(UL,NTe,null),e(Ac,m3r),e(Ac,jTe),e(jTe,g3r),b(f,vqe,_),b(f,fr,_),M(JL,fr,null),e(fr,h3r),e(fr,yc),e(yc,p3r),e(yc,yU),e(yU,u3r),e(yc,_3r),e(yc,LU),e(LU,b3r),e(yc,v3r),e(fr,F3r),e(fr,YL),e(YL,T3r),e(YL,DTe),e(DTe,M3r),e(YL,E3r),e(fr,C3r),e(fr,jt),M(KL,jt,null),e(jt,w3r),e(jt,GTe),e(GTe,A3r),e(jt,y3r),e(jt,Lc),e(Lc,L3r),e(Lc,OTe),e(OTe,x3r),e(Lc,$3r),e(Lc,xU),e(xU,k3r),e(Lc,S3r),e(jt,R3r),M(JE,jt,null),e(fr,B3r),e(fr,jr),M(ZL,jr,null),e(jr,P3r),e(jr,VTe),e(VTe,I3r),e(jr,q3r),e(jr,hn),e(hn,N3r),e(hn,XTe),e(XTe,j3r),e(hn,D3r),e(hn,zTe),e(zTe,G3r),e(hn,O3r),e(hn,QTe),e(QTe,V3r),e(hn,X3r),e(jr,z3r),e(jr,re),e(re,YE),e(YE,WTe),e(WTe,Q3r),e(YE,W3r),e(YE,$U),e($U,H3r),e(YE,U3r),e(re,J3r),e(re,KE),e(KE,HTe),e(HTe,Y3r),e(KE,K3r),e(KE,kU),e(kU,Z3r),e(KE,ewr),e(re,owr),e(re,ZE),e(ZE,UTe),e(UTe,rwr),e(ZE,twr),e(ZE,SU),e(SU,awr),e(ZE,nwr),e(re,swr),e(re,e5),e(e5,JTe),e(JTe,lwr),e(e5,iwr),e(e5,RU),e(RU,dwr),e(e5,cwr),e(re,fwr),e(re,o5),e(o5,YTe),e(YTe,mwr),e(o5,gwr),e(o5,BU),e(BU,hwr),e(o5,pwr),e(re,uwr),e(re,r5),e(r5,KTe),e(KTe,_wr),e(r5,bwr),e(r5,PU),e(PU,vwr),e(r5,Fwr),e(re,Twr),e(re,t5),e(t5,ZTe),e(ZTe,Mwr),e(t5,Ewr),e(t5,IU),e(IU,Cwr),e(t5,wwr),e(re,Awr),e(re,a5),e(a5,e7e),e(e7e,ywr),e(a5,Lwr),e(a5,qU),e(qU,xwr),e(a5,$wr),e(re,kwr),e(re,n5),e(n5,o7e),e(o7e,Swr),e(n5,Rwr),e(n5,NU),e(NU,Bwr),e(n5,Pwr),e(re,Iwr),e(re,s5),e(s5,r7e),e(r7e,qwr),e(s5,Nwr),e(s5,jU),e(jU,jwr),e(s5,Dwr),e(re,Gwr),e(re,l5),e(l5,t7e),e(t7e,Owr),e(l5,Vwr),e(l5,DU),e(DU,Xwr),e(l5,zwr),e(re,Qwr),e(re,i5),e(i5,a7e),e(a7e,Wwr),e(i5,Hwr),e(i5,GU),e(GU,Uwr),e(i5,Jwr),e(re,Ywr),e(re,d5),e(d5,n7e),e(n7e,Kwr),e(d5,Zwr),e(d5,OU),e(OU,eAr),e(d5,oAr),e(re,rAr),e(re,c5),e(c5,s7e),e(s7e,tAr),e(c5,aAr),e(c5,VU),e(VU,nAr),e(c5,sAr),e(re,lAr),e(re,f5),e(f5,l7e),e(l7e,iAr),e(f5,dAr),e(f5,XU),e(XU,cAr),e(f5,fAr),e(re,mAr),e(re,m5),e(m5,i7e),e(i7e,gAr),e(m5,hAr),e(m5,zU),e(zU,pAr),e(m5,uAr),e(re,_Ar),e(re,g5),e(g5,d7e),e(d7e,bAr),e(g5,vAr),e(g5,QU),e(QU,FAr),e(g5,TAr),e(re,MAr),e(re,h5),e(h5,c7e),e(c7e,EAr),e(h5,CAr),e(h5,WU),e(WU,wAr),e(h5,AAr),e(re,yAr),e(re,p5),e(p5,f7e),e(f7e,LAr),e(p5,xAr),e(p5,HU),e(HU,$Ar),e(p5,kAr),e(re,SAr),e(re,u5),e(u5,m7e),e(m7e,RAr),e(u5,BAr),e(u5,UU),e(UU,PAr),e(u5,IAr),e(re,qAr),e(re,_5),e(_5,g7e),e(g7e,NAr),e(_5,jAr),e(_5,JU),e(JU,DAr),e(_5,GAr),e(re,OAr),e(re,b5),e(b5,h7e),e(h7e,VAr),e(b5,XAr),e(b5,YU),e(YU,zAr),e(b5,QAr),e(re,WAr),e(re,v5),e(v5,p7e),e(p7e,HAr),e(v5,UAr),e(v5,KU),e(KU,JAr),e(v5,YAr),e(re,KAr),e(re,F5),e(F5,u7e),e(u7e,ZAr),e(F5,e6r),e(F5,ZU),e(ZU,o6r),e(F5,r6r),e(re,t6r),e(re,T5),e(T5,_7e),e(_7e,a6r),e(T5,n6r),e(T5,eJ),e(eJ,s6r),e(T5,l6r),e(jr,i6r),M(M5,jr,null),b(f,Fqe,_),b(f,xc,_),e(xc,E5),e(E5,b7e),M(e8,b7e,null),e(xc,d6r),e(xc,v7e),e(v7e,c6r),b(f,Tqe,_),b(f,mr,_),M(o8,mr,null),e(mr,f6r),e(mr,$c),e($c,m6r),e($c,oJ),e(oJ,g6r),e($c,h6r),e($c,rJ),e(rJ,p6r),e($c,u6r),e(mr,_6r),e(mr,r8),e(r8,b6r),e(r8,F7e),e(F7e,v6r),e(r8,F6r),e(mr,T6r),e(mr,Dt),M(t8,Dt,null),e(Dt,M6r),e(Dt,T7e),e(T7e,E6r),e(Dt,C6r),e(Dt,kc),e(kc,w6r),e(kc,M7e),e(M7e,A6r),e(kc,y6r),e(kc,tJ),e(tJ,L6r),e(kc,x6r),e(Dt,$6r),M(C5,Dt,null),e(mr,k6r),e(mr,Dr),M(a8,Dr,null),e(Dr,S6r),e(Dr,E7e),e(E7e,R6r),e(Dr,B6r),e(Dr,pn),e(pn,P6r),e(pn,C7e),e(C7e,I6r),e(pn,q6r),e(pn,w7e),e(w7e,N6r),e(pn,j6r),e(pn,A7e),e(A7e,D6r),e(pn,G6r),e(Dr,O6r),e(Dr,ke),e(ke,w5),e(w5,y7e),e(y7e,V6r),e(w5,X6r),e(w5,aJ),e(aJ,z6r),e(w5,Q6r),e(ke,W6r),e(ke,A5),e(A5,L7e),e(L7e,H6r),e(A5,U6r),e(A5,nJ),e(nJ,J6r),e(A5,Y6r),e(ke,K6r),e(ke,y5),e(y5,x7e),e(x7e,Z6r),e(y5,e0r),e(y5,sJ),e(sJ,o0r),e(y5,r0r),e(ke,t0r),e(ke,L5),e(L5,$7e),e($7e,a0r),e(L5,n0r),e(L5,lJ),e(lJ,s0r),e(L5,l0r),e(ke,i0r),e(ke,x5),e(x5,k7e),e(k7e,d0r),e(x5,c0r),e(x5,iJ),e(iJ,f0r),e(x5,m0r),e(ke,g0r),e(ke,$5),e($5,S7e),e(S7e,h0r),e($5,p0r),e($5,dJ),e(dJ,u0r),e($5,_0r),e(ke,b0r),e(ke,k5),e(k5,R7e),e(R7e,v0r),e(k5,F0r),e(k5,cJ),e(cJ,T0r),e(k5,M0r),e(ke,E0r),e(ke,S5),e(S5,B7e),e(B7e,C0r),e(S5,w0r),e(S5,fJ),e(fJ,A0r),e(S5,y0r),e(ke,L0r),e(ke,R5),e(R5,P7e),e(P7e,x0r),e(R5,$0r),e(R5,mJ),e(mJ,k0r),e(R5,S0r),e(Dr,R0r),M(B5,Dr,null),b(f,Mqe,_),b(f,Sc,_),e(Sc,P5),e(P5,I7e),M(n8,I7e,null),e(Sc,B0r),e(Sc,q7e),e(q7e,P0r),b(f,Eqe,_),b(f,gr,_),M(s8,gr,null),e(gr,I0r),e(gr,Rc),e(Rc,q0r),e(Rc,gJ),e(gJ,N0r),e(Rc,j0r),e(Rc,hJ),e(hJ,D0r),e(Rc,G0r),e(gr,O0r),e(gr,l8),e(l8,V0r),e(l8,N7e),e(N7e,X0r),e(l8,z0r),e(gr,Q0r),e(gr,Gt),M(i8,Gt,null),e(Gt,W0r),e(Gt,j7e),e(j7e,H0r),e(Gt,U0r),e(Gt,Bc),e(Bc,J0r),e(Bc,D7e),e(D7e,Y0r),e(Bc,K0r),e(Bc,pJ),e(pJ,Z0r),e(Bc,eyr),e(Gt,oyr),M(I5,Gt,null),e(gr,ryr),e(gr,Gr),M(d8,Gr,null),e(Gr,tyr),e(Gr,G7e),e(G7e,ayr),e(Gr,nyr),e(Gr,un),e(un,syr),e(un,O7e),e(O7e,lyr),e(un,iyr),e(un,V7e),e(V7e,dyr),e(un,cyr),e(un,X7e),e(X7e,fyr),e(un,myr),e(Gr,gyr),e(Gr,Me),e(Me,q5),e(q5,z7e),e(z7e,hyr),e(q5,pyr),e(q5,uJ),e(uJ,uyr),e(q5,_yr),e(Me,byr),e(Me,N5),e(N5,Q7e),e(Q7e,vyr),e(N5,Fyr),e(N5,_J),e(_J,Tyr),e(N5,Myr),e(Me,Eyr),e(Me,j5),e(j5,W7e),e(W7e,Cyr),e(j5,wyr),e(j5,bJ),e(bJ,Ayr),e(j5,yyr),e(Me,Lyr),e(Me,D5),e(D5,H7e),e(H7e,xyr),e(D5,$yr),e(D5,vJ),e(vJ,kyr),e(D5,Syr),e(Me,Ryr),e(Me,G5),e(G5,U7e),e(U7e,Byr),e(G5,Pyr),e(G5,FJ),e(FJ,Iyr),e(G5,qyr),e(Me,Nyr),e(Me,O5),e(O5,J7e),e(J7e,jyr),e(O5,Dyr),e(O5,TJ),e(TJ,Gyr),e(O5,Oyr),e(Me,Vyr),e(Me,V5),e(V5,Y7e),e(Y7e,Xyr),e(V5,zyr),e(V5,MJ),e(MJ,Qyr),e(V5,Wyr),e(Me,Hyr),e(Me,X5),e(X5,K7e),e(K7e,Uyr),e(X5,Jyr),e(X5,EJ),e(EJ,Yyr),e(X5,Kyr),e(Me,Zyr),e(Me,z5),e(z5,Z7e),e(Z7e,eLr),e(z5,oLr),e(z5,CJ),e(CJ,rLr),e(z5,tLr),e(Me,aLr),e(Me,Q5),e(Q5,e9e),e(e9e,nLr),e(Q5,sLr),e(Q5,wJ),e(wJ,lLr),e(Q5,iLr),e(Me,dLr),e(Me,W5),e(W5,o9e),e(o9e,cLr),e(W5,fLr),e(W5,AJ),e(AJ,mLr),e(W5,gLr),e(Me,hLr),e(Me,H5),e(H5,r9e),e(r9e,pLr),e(H5,uLr),e(H5,yJ),e(yJ,_Lr),e(H5,bLr),e(Gr,vLr),M(U5,Gr,null),b(f,Cqe,_),b(f,Pc,_),e(Pc,J5),e(J5,t9e),M(c8,t9e,null),e(Pc,FLr),e(Pc,a9e),e(a9e,TLr),b(f,wqe,_),b(f,hr,_),M(f8,hr,null),e(hr,MLr),e(hr,Ic),e(Ic,ELr),e(Ic,LJ),e(LJ,CLr),e(Ic,wLr),e(Ic,xJ),e(xJ,ALr),e(Ic,yLr),e(hr,LLr),e(hr,m8),e(m8,xLr),e(m8,n9e),e(n9e,$Lr),e(m8,kLr),e(hr,SLr),e(hr,Ot),M(g8,Ot,null),e(Ot,RLr),e(Ot,s9e),e(s9e,BLr),e(Ot,PLr),e(Ot,qc),e(qc,ILr),e(qc,l9e),e(l9e,qLr),e(qc,NLr),e(qc,$J),e($J,jLr),e(qc,DLr),e(Ot,GLr),M(Y5,Ot,null),e(hr,OLr),e(hr,Or),M(h8,Or,null),e(Or,VLr),e(Or,i9e),e(i9e,XLr),e(Or,zLr),e(Or,_n),e(_n,QLr),e(_n,d9e),e(d9e,WLr),e(_n,HLr),e(_n,c9e),e(c9e,ULr),e(_n,JLr),e(_n,f9e),e(f9e,YLr),e(_n,KLr),e(Or,ZLr),e(Or,Le),e(Le,K5),e(K5,m9e),e(m9e,e8r),e(K5,o8r),e(K5,kJ),e(kJ,r8r),e(K5,t8r),e(Le,a8r),e(Le,Z5),e(Z5,g9e),e(g9e,n8r),e(Z5,s8r),e(Z5,SJ),e(SJ,l8r),e(Z5,i8r),e(Le,d8r),e(Le,eC),e(eC,h9e),e(h9e,c8r),e(eC,f8r),e(eC,RJ),e(RJ,m8r),e(eC,g8r),e(Le,h8r),e(Le,oC),e(oC,p9e),e(p9e,p8r),e(oC,u8r),e(oC,BJ),e(BJ,_8r),e(oC,b8r),e(Le,v8r),e(Le,rC),e(rC,u9e),e(u9e,F8r),e(rC,T8r),e(rC,PJ),e(PJ,M8r),e(rC,E8r),e(Le,C8r),e(Le,tC),e(tC,_9e),e(_9e,w8r),e(tC,A8r),e(tC,IJ),e(IJ,y8r),e(tC,L8r),e(Le,x8r),e(Le,aC),e(aC,b9e),e(b9e,$8r),e(aC,k8r),e(aC,qJ),e(qJ,S8r),e(aC,R8r),e(Le,B8r),e(Le,nC),e(nC,v9e),e(v9e,P8r),e(nC,I8r),e(nC,NJ),e(NJ,q8r),e(nC,N8r),e(Le,j8r),e(Le,sC),e(sC,F9e),e(F9e,D8r),e(sC,G8r),e(sC,jJ),e(jJ,O8r),e(sC,V8r),e(Le,X8r),e(Le,lC),e(lC,T9e),e(T9e,z8r),e(lC,Q8r),e(lC,DJ),e(DJ,W8r),e(lC,H8r),e(Or,U8r),M(iC,Or,null),b(f,Aqe,_),b(f,Nc,_),e(Nc,dC),e(dC,M9e),M(p8,M9e,null),e(Nc,J8r),e(Nc,E9e),e(E9e,Y8r),b(f,yqe,_),b(f,pr,_),M(u8,pr,null),e(pr,K8r),e(pr,jc),e(jc,Z8r),e(jc,GJ),e(GJ,exr),e(jc,oxr),e(jc,OJ),e(OJ,rxr),e(jc,txr),e(pr,axr),e(pr,_8),e(_8,nxr),e(_8,C9e),e(C9e,sxr),e(_8,lxr),e(pr,ixr),e(pr,Vt),M(b8,Vt,null),e(Vt,dxr),e(Vt,w9e),e(w9e,cxr),e(Vt,fxr),e(Vt,Dc),e(Dc,mxr),e(Dc,A9e),e(A9e,gxr),e(Dc,hxr),e(Dc,VJ),e(VJ,pxr),e(Dc,uxr),e(Vt,_xr),M(cC,Vt,null),e(pr,bxr),e(pr,Vr),M(v8,Vr,null),e(Vr,vxr),e(Vr,y9e),e(y9e,Fxr),e(Vr,Txr),e(Vr,bn),e(bn,Mxr),e(bn,L9e),e(L9e,Exr),e(bn,Cxr),e(bn,x9e),e(x9e,wxr),e(bn,Axr),e(bn,$9e),e($9e,yxr),e(bn,Lxr),e(Vr,xxr),e(Vr,Se),e(Se,fC),e(fC,k9e),e(k9e,$xr),e(fC,kxr),e(fC,XJ),e(XJ,Sxr),e(fC,Rxr),e(Se,Bxr),e(Se,mC),e(mC,S9e),e(S9e,Pxr),e(mC,Ixr),e(mC,zJ),e(zJ,qxr),e(mC,Nxr),e(Se,jxr),e(Se,gC),e(gC,R9e),e(R9e,Dxr),e(gC,Gxr),e(gC,QJ),e(QJ,Oxr),e(gC,Vxr),e(Se,Xxr),e(Se,hC),e(hC,B9e),e(B9e,zxr),e(hC,Qxr),e(hC,WJ),e(WJ,Wxr),e(hC,Hxr),e(Se,Uxr),e(Se,pC),e(pC,P9e),e(P9e,Jxr),e(pC,Yxr),e(pC,HJ),e(HJ,Kxr),e(pC,Zxr),e(Se,e$r),e(Se,uC),e(uC,I9e),e(I9e,o$r),e(uC,r$r),e(uC,UJ),e(UJ,t$r),e(uC,a$r),e(Se,n$r),e(Se,_C),e(_C,q9e),e(q9e,s$r),e(_C,l$r),e(_C,JJ),e(JJ,i$r),e(_C,d$r),e(Se,c$r),e(Se,bC),e(bC,N9e),e(N9e,f$r),e(bC,m$r),e(bC,YJ),e(YJ,g$r),e(bC,h$r),e(Se,p$r),e(Se,vC),e(vC,j9e),e(j9e,u$r),e(vC,_$r),e(vC,KJ),e(KJ,b$r),e(vC,v$r),e(Vr,F$r),M(FC,Vr,null),b(f,Lqe,_),b(f,Gc,_),e(Gc,TC),e(TC,D9e),M(F8,D9e,null),e(Gc,T$r),e(Gc,G9e),e(G9e,M$r),b(f,xqe,_),b(f,ur,_),M(T8,ur,null),e(ur,E$r),e(ur,Oc),e(Oc,C$r),e(Oc,ZJ),e(ZJ,w$r),e(Oc,A$r),e(Oc,eY),e(eY,y$r),e(Oc,L$r),e(ur,x$r),e(ur,M8),e(M8,$$r),e(M8,O9e),e(O9e,k$r),e(M8,S$r),e(ur,R$r),e(ur,Xt),M(E8,Xt,null),e(Xt,B$r),e(Xt,V9e),e(V9e,P$r),e(Xt,I$r),e(Xt,Vc),e(Vc,q$r),e(Vc,X9e),e(X9e,N$r),e(Vc,j$r),e(Vc,oY),e(oY,D$r),e(Vc,G$r),e(Xt,O$r),M(MC,Xt,null),e(ur,V$r),e(ur,Xr),M(C8,Xr,null),e(Xr,X$r),e(Xr,z9e),e(z9e,z$r),e(Xr,Q$r),e(Xr,vn),e(vn,W$r),e(vn,Q9e),e(Q9e,H$r),e(vn,U$r),e(vn,W9e),e(W9e,J$r),e(vn,Y$r),e(vn,H9e),e(H9e,K$r),e(vn,Z$r),e(Xr,ekr),e(Xr,xe),e(xe,EC),e(EC,U9e),e(U9e,okr),e(EC,rkr),e(EC,rY),e(rY,tkr),e(EC,akr),e(xe,nkr),e(xe,CC),e(CC,J9e),e(J9e,skr),e(CC,lkr),e(CC,tY),e(tY,ikr),e(CC,dkr),e(xe,ckr),e(xe,wC),e(wC,Y9e),e(Y9e,fkr),e(wC,mkr),e(wC,aY),e(aY,gkr),e(wC,hkr),e(xe,pkr),e(xe,AC),e(AC,K9e),e(K9e,ukr),e(AC,_kr),e(AC,nY),e(nY,bkr),e(AC,vkr),e(xe,Fkr),e(xe,yC),e(yC,Z9e),e(Z9e,Tkr),e(yC,Mkr),e(yC,sY),e(sY,Ekr),e(yC,Ckr),e(xe,wkr),e(xe,LC),e(LC,eMe),e(eMe,Akr),e(LC,ykr),e(LC,lY),e(lY,Lkr),e(LC,xkr),e(xe,$kr),e(xe,xC),e(xC,oMe),e(oMe,kkr),e(xC,Skr),e(xC,iY),e(iY,Rkr),e(xC,Bkr),e(xe,Pkr),e(xe,$C),e($C,rMe),e(rMe,Ikr),e($C,qkr),e($C,dY),e(dY,Nkr),e($C,jkr),e(xe,Dkr),e(xe,kC),e(kC,tMe),e(tMe,Gkr),e(kC,Okr),e(kC,cY),e(cY,Vkr),e(kC,Xkr),e(xe,zkr),e(xe,SC),e(SC,aMe),e(aMe,Qkr),e(SC,Wkr),e(SC,fY),e(fY,Hkr),e(SC,Ukr),e(Xr,Jkr),M(RC,Xr,null),b(f,$qe,_),b(f,Xc,_),e(Xc,BC),e(BC,nMe),M(w8,nMe,null),e(Xc,Ykr),e(Xc,sMe),e(sMe,Kkr),b(f,kqe,_),b(f,_r,_),M(A8,_r,null),e(_r,Zkr),e(_r,zc),e(zc,eSr),e(zc,mY),e(mY,oSr),e(zc,rSr),e(zc,gY),e(gY,tSr),e(zc,aSr),e(_r,nSr),e(_r,y8),e(y8,sSr),e(y8,lMe),e(lMe,lSr),e(y8,iSr),e(_r,dSr),e(_r,zt),M(L8,zt,null),e(zt,cSr),e(zt,iMe),e(iMe,fSr),e(zt,mSr),e(zt,Qc),e(Qc,gSr),e(Qc,dMe),e(dMe,hSr),e(Qc,pSr),e(Qc,hY),e(hY,uSr),e(Qc,_Sr),e(zt,bSr),M(PC,zt,null),e(_r,vSr),e(_r,zr),M(x8,zr,null),e(zr,FSr),e(zr,cMe),e(cMe,TSr),e(zr,MSr),e(zr,Fn),e(Fn,ESr),e(Fn,fMe),e(fMe,CSr),e(Fn,wSr),e(Fn,mMe),e(mMe,ASr),e(Fn,ySr),e(Fn,gMe),e(gMe,LSr),e(Fn,xSr),e(zr,$Sr),e(zr,$e),e($e,IC),e(IC,hMe),e(hMe,kSr),e(IC,SSr),e(IC,pY),e(pY,RSr),e(IC,BSr),e($e,PSr),e($e,qC),e(qC,pMe),e(pMe,ISr),e(qC,qSr),e(qC,uY),e(uY,NSr),e(qC,jSr),e($e,DSr),e($e,NC),e(NC,uMe),e(uMe,GSr),e(NC,OSr),e(NC,_Y),e(_Y,VSr),e(NC,XSr),e($e,zSr),e($e,jC),e(jC,_Me),e(_Me,QSr),e(jC,WSr),e(jC,bY),e(bY,HSr),e(jC,USr),e($e,JSr),e($e,DC),e(DC,bMe),e(bMe,YSr),e(DC,KSr),e(DC,vY),e(vY,ZSr),e(DC,eRr),e($e,oRr),e($e,GC),e(GC,vMe),e(vMe,rRr),e(GC,tRr),e(GC,FY),e(FY,aRr),e(GC,nRr),e($e,sRr),e($e,OC),e(OC,FMe),e(FMe,lRr),e(OC,iRr),e(OC,TY),e(TY,dRr),e(OC,cRr),e($e,fRr),e($e,VC),e(VC,TMe),e(TMe,mRr),e(VC,gRr),e(VC,MY),e(MY,hRr),e(VC,pRr),e($e,uRr),e($e,XC),e(XC,MMe),e(MMe,_Rr),e(XC,bRr),e(XC,EY),e(EY,vRr),e(XC,FRr),e($e,TRr),e($e,zC),e(zC,EMe),e(EMe,MRr),e(zC,ERr),e(zC,CY),e(CY,CRr),e(zC,wRr),e(zr,ARr),M(QC,zr,null),b(f,Sqe,_),b(f,Wc,_),e(Wc,WC),e(WC,CMe),M($8,CMe,null),e(Wc,yRr),e(Wc,wMe),e(wMe,LRr),b(f,Rqe,_),b(f,br,_),M(k8,br,null),e(br,xRr),e(br,Hc),e(Hc,$Rr),e(Hc,wY),e(wY,kRr),e(Hc,SRr),e(Hc,AY),e(AY,RRr),e(Hc,BRr),e(br,PRr),e(br,S8),e(S8,IRr),e(S8,AMe),e(AMe,qRr),e(S8,NRr),e(br,jRr),e(br,Qt),M(R8,Qt,null),e(Qt,DRr),e(Qt,yMe),e(yMe,GRr),e(Qt,ORr),e(Qt,Uc),e(Uc,VRr),e(Uc,LMe),e(LMe,XRr),e(Uc,zRr),e(Uc,yY),e(yY,QRr),e(Uc,WRr),e(Qt,HRr),M(HC,Qt,null),e(br,URr),e(br,Qr),M(B8,Qr,null),e(Qr,JRr),e(Qr,xMe),e(xMe,YRr),e(Qr,KRr),e(Qr,Tn),e(Tn,ZRr),e(Tn,$Me),e($Me,eBr),e(Tn,oBr),e(Tn,kMe),e(kMe,rBr),e(Tn,tBr),e(Tn,SMe),e(SMe,aBr),e(Tn,nBr),e(Qr,sBr),e(Qr,De),e(De,UC),e(UC,RMe),e(RMe,lBr),e(UC,iBr),e(UC,LY),e(LY,dBr),e(UC,cBr),e(De,fBr),e(De,JC),e(JC,BMe),e(BMe,mBr),e(JC,gBr),e(JC,xY),e(xY,hBr),e(JC,pBr),e(De,uBr),e(De,YC),e(YC,PMe),e(PMe,_Br),e(YC,bBr),e(YC,$Y),e($Y,vBr),e(YC,FBr),e(De,TBr),e(De,KC),e(KC,IMe),e(IMe,MBr),e(KC,EBr),e(KC,kY),e(kY,CBr),e(KC,wBr),e(De,ABr),e(De,ZC),e(ZC,qMe),e(qMe,yBr),e(ZC,LBr),e(ZC,SY),e(SY,xBr),e(ZC,$Br),e(De,kBr),e(De,e3),e(e3,NMe),e(NMe,SBr),e(e3,RBr),e(e3,RY),e(RY,BBr),e(e3,PBr),e(De,IBr),e(De,o3),e(o3,jMe),e(jMe,qBr),e(o3,NBr),e(o3,BY),e(BY,jBr),e(o3,DBr),e(De,GBr),e(De,r3),e(r3,DMe),e(DMe,OBr),e(r3,VBr),e(r3,PY),e(PY,XBr),e(r3,zBr),e(Qr,QBr),M(t3,Qr,null),b(f,Bqe,_),b(f,Jc,_),e(Jc,a3),e(a3,GMe),M(P8,GMe,null),e(Jc,WBr),e(Jc,OMe),e(OMe,HBr),b(f,Pqe,_),b(f,vr,_),M(I8,vr,null),e(vr,UBr),e(vr,Yc),e(Yc,JBr),e(Yc,IY),e(IY,YBr),e(Yc,KBr),e(Yc,qY),e(qY,ZBr),e(Yc,ePr),e(vr,oPr),e(vr,q8),e(q8,rPr),e(q8,VMe),e(VMe,tPr),e(q8,aPr),e(vr,nPr),e(vr,Wt),M(N8,Wt,null),e(Wt,sPr),e(Wt,XMe),e(XMe,lPr),e(Wt,iPr),e(Wt,Kc),e(Kc,dPr),e(Kc,zMe),e(zMe,cPr),e(Kc,fPr),e(Kc,NY),e(NY,mPr),e(Kc,gPr),e(Wt,hPr),M(n3,Wt,null),e(vr,pPr),e(vr,Wr),M(j8,Wr,null),e(Wr,uPr),e(Wr,QMe),e(QMe,_Pr),e(Wr,bPr),e(Wr,Mn),e(Mn,vPr),e(Mn,WMe),e(WMe,FPr),e(Mn,TPr),e(Mn,HMe),e(HMe,MPr),e(Mn,EPr),e(Mn,UMe),e(UMe,CPr),e(Mn,wPr),e(Wr,APr),e(Wr,Ge),e(Ge,s3),e(s3,JMe),e(JMe,yPr),e(s3,LPr),e(s3,jY),e(jY,xPr),e(s3,$Pr),e(Ge,kPr),e(Ge,l3),e(l3,YMe),e(YMe,SPr),e(l3,RPr),e(l3,DY),e(DY,BPr),e(l3,PPr),e(Ge,IPr),e(Ge,i3),e(i3,KMe),e(KMe,qPr),e(i3,NPr),e(i3,GY),e(GY,jPr),e(i3,DPr),e(Ge,GPr),e(Ge,d3),e(d3,ZMe),e(ZMe,OPr),e(d3,VPr),e(d3,OY),e(OY,XPr),e(d3,zPr),e(Ge,QPr),e(Ge,c3),e(c3,e4e),e(e4e,WPr),e(c3,HPr),e(c3,VY),e(VY,UPr),e(c3,JPr),e(Ge,YPr),e(Ge,f3),e(f3,o4e),e(o4e,KPr),e(f3,ZPr),e(f3,XY),e(XY,eIr),e(f3,oIr),e(Ge,rIr),e(Ge,m3),e(m3,r4e),e(r4e,tIr),e(m3,aIr),e(m3,zY),e(zY,nIr),e(m3,sIr),e(Ge,lIr),e(Ge,g3),e(g3,t4e),e(t4e,iIr),e(g3,dIr),e(g3,QY),e(QY,cIr),e(g3,fIr),e(Wr,mIr),M(h3,Wr,null),b(f,Iqe,_),b(f,Zc,_),e(Zc,p3),e(p3,a4e),M(D8,a4e,null),e(Zc,gIr),e(Zc,n4e),e(n4e,hIr),b(f,qqe,_),b(f,Fr,_),M(G8,Fr,null),e(Fr,pIr),e(Fr,ef),e(ef,uIr),e(ef,WY),e(WY,_Ir),e(ef,bIr),e(ef,HY),e(HY,vIr),e(ef,FIr),e(Fr,TIr),e(Fr,O8),e(O8,MIr),e(O8,s4e),e(s4e,EIr),e(O8,CIr),e(Fr,wIr),e(Fr,Ht),M(V8,Ht,null),e(Ht,AIr),e(Ht,l4e),e(l4e,yIr),e(Ht,LIr),e(Ht,of),e(of,xIr),e(of,i4e),e(i4e,$Ir),e(of,kIr),e(of,UY),e(UY,SIr),e(of,RIr),e(Ht,BIr),M(u3,Ht,null),e(Fr,PIr),e(Fr,Hr),M(X8,Hr,null),e(Hr,IIr),e(Hr,d4e),e(d4e,qIr),e(Hr,NIr),e(Hr,En),e(En,jIr),e(En,c4e),e(c4e,DIr),e(En,GIr),e(En,f4e),e(f4e,OIr),e(En,VIr),e(En,m4e),e(m4e,XIr),e(En,zIr),e(Hr,QIr),e(Hr,g4e),e(g4e,_3),e(_3,h4e),e(h4e,WIr),e(_3,HIr),e(_3,JY),e(JY,UIr),e(_3,JIr),e(Hr,YIr),M(b3,Hr,null),b(f,Nqe,_),b(f,rf,_),e(rf,v3),e(v3,p4e),M(z8,p4e,null),e(rf,KIr),e(rf,u4e),e(u4e,ZIr),b(f,jqe,_),b(f,Tr,_),M(Q8,Tr,null),e(Tr,eqr),e(Tr,tf),e(tf,oqr),e(tf,YY),e(YY,rqr),e(tf,tqr),e(tf,KY),e(KY,aqr),e(tf,nqr),e(Tr,sqr),e(Tr,W8),e(W8,lqr),e(W8,_4e),e(_4e,iqr),e(W8,dqr),e(Tr,cqr),e(Tr,Ut),M(H8,Ut,null),e(Ut,fqr),e(Ut,b4e),e(b4e,mqr),e(Ut,gqr),e(Ut,af),e(af,hqr),e(af,v4e),e(v4e,pqr),e(af,uqr),e(af,ZY),e(ZY,_qr),e(af,bqr),e(Ut,vqr),M(F3,Ut,null),e(Tr,Fqr),e(Tr,Ur),M(U8,Ur,null),e(Ur,Tqr),e(Ur,F4e),e(F4e,Mqr),e(Ur,Eqr),e(Ur,Cn),e(Cn,Cqr),e(Cn,T4e),e(T4e,wqr),e(Cn,Aqr),e(Cn,M4e),e(M4e,yqr),e(Cn,Lqr),e(Cn,E4e),e(E4e,xqr),e(Cn,$qr),e(Ur,kqr),e(Ur,J8),e(J8,T3),e(T3,C4e),e(C4e,Sqr),e(T3,Rqr),e(T3,eK),e(eK,Bqr),e(T3,Pqr),e(J8,Iqr),e(J8,M3),e(M3,w4e),e(w4e,qqr),e(M3,Nqr),e(M3,oK),e(oK,jqr),e(M3,Dqr),e(Ur,Gqr),M(E3,Ur,null),b(f,Dqe,_),b(f,nf,_),e(nf,C3),e(C3,A4e),M(Y8,A4e,null),e(nf,Oqr),e(nf,y4e),e(y4e,Vqr),b(f,Gqe,_),b(f,Mr,_),M(K8,Mr,null),e(Mr,Xqr),e(Mr,sf),e(sf,zqr),e(sf,rK),e(rK,Qqr),e(sf,Wqr),e(sf,tK),e(tK,Hqr),e(sf,Uqr),e(Mr,Jqr),e(Mr,Z8),e(Z8,Yqr),e(Z8,L4e),e(L4e,Kqr),e(Z8,Zqr),e(Mr,eNr),e(Mr,Jt),M(ex,Jt,null),e(Jt,oNr),e(Jt,x4e),e(x4e,rNr),e(Jt,tNr),e(Jt,lf),e(lf,aNr),e(lf,$4e),e($4e,nNr),e(lf,sNr),e(lf,aK),e(aK,lNr),e(lf,iNr),e(Jt,dNr),M(w3,Jt,null),e(Mr,cNr),e(Mr,Jr),M(ox,Jr,null),e(Jr,fNr),e(Jr,k4e),e(k4e,mNr),e(Jr,gNr),e(Jr,wn),e(wn,hNr),e(wn,S4e),e(S4e,pNr),e(wn,uNr),e(wn,R4e),e(R4e,_Nr),e(wn,bNr),e(wn,B4e),e(B4e,vNr),e(wn,FNr),e(Jr,TNr),e(Jr,P4e),e(P4e,A3),e(A3,I4e),e(I4e,MNr),e(A3,ENr),e(A3,nK),e(nK,CNr),e(A3,wNr),e(Jr,ANr),M(y3,Jr,null),Oqe=!0},p(f,[_]){const rx={};_&2&&(rx.$$scope={dirty:_,ctx:f}),_f.$set(rx);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),pg.$set(q4e);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),Hg.$set(N4e);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),Mh.$set(j4e);const tx={};_&2&&(tx.$$scope={dirty:_,ctx:f}),Eh.$set(tx);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),Gh.$set(D4e);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Oh.$set(An);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),zh.$set(G4e);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),Pu.$set(O4e);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),qu.$set(V4e);const ax={};_&2&&(ax.$$scope={dirty:_,ctx:f}),w_.$set(ax);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),y_.$set(X4e);const nx={};_&2&&(nx.$$scope={dirty:_,ctx:f}),f1.$set(nx);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),g1.$set(z4e);const sx={};_&2&&(sx.$$scope={dirty:_,ctx:f}),J1.$set(sx);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),K1.$set(Q4e);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),u2.$set(W4e);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),b2.$set(H4e);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),mb.$set(df);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),hb.$set(U4e);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),zb.$set(J4e);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),Wb.$set(Y4e);const lx={};_&2&&(lx.$$scope={dirty:_,ctx:f}),ev.$set(lx);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),rv.$set(K4e);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),qv.$set(Z4e);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),jv.$set(eEe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),AF.$set(Kr);const ix={};_&2&&(ix.$$scope={dirty:_,ctx:f}),LF.$set(ix);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),kF.$set(oEe);const dx={};_&2&&(dx.$$scope={dirty:_,ctx:f}),RF.$set(dx);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),QF.$set(rEe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),HF.$set(Zr);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),YF.$set(tEe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),ZF.$set(cf);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),dT.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),fT.$set(nEe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),_T.$set(L);const L3={};_&2&&(L3.$$scope={dirty:_,ctx:f}),vT.$set(L3);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),xT.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),kT.$set(lEe);const x3={};_&2&&(x3.$$scope={dirty:_,ctx:f}),PT.$set(x3);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),qT.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),VT.$set(dEe);const $3={};_&2&&($3.$$scope={dirty:_,ctx:f}),zT.$set($3);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),JT.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),KT.$set(fEe);const k3={};_&2&&(k3.$$scope={dirty:_,ctx:f}),r7.$set(k3);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),a7.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),l7.$set(gEe);const S3={};_&2&&(S3.$$scope={dirty:_,ctx:f}),d7.$set(S3);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),p7.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),_7.$set(pEe);const R3={};_&2&&(R3.$$scope={dirty:_,ctx:f}),F7.$set(R3);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),M7.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),h9.$set(_Ee);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),u9.$set(B3);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),D9.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),O9.$set(vEe);const P3={};_&2&&(P3.$$scope={dirty:_,ctx:f}),oM.$set(P3);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),tM.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),iM.$set(TEe);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),cM.$set(I3);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),kM.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),RM.$set(EEe);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),XM.$set(q3);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),QM.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),v4.$set(wEe);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),T4.$set(N3);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),j4.$set(AEe);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),G4.$set(yEe);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),X4.$set(j3);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),Q4.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),H4.$set(xEe);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),J4.$set(D3);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),_E.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),vE.$set(kEe);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),DE.$set(G3);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),OE.$set(SEe);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),XE.$set(REe);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),QE.$set(O3);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),HE.$set(BEe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),JE.$set(PEe);const V3={};_&2&&(V3.$$scope={dirty:_,ctx:f}),M5.$set(V3);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),C5.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),B5.$set(qEe);const X3={};_&2&&(X3.$$scope={dirty:_,ctx:f}),I5.$set(X3);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),U5.$set(NEe);const jEe={};_&2&&(jEe.$$scope={dirty:_,ctx:f}),Y5.$set(jEe);const z3={};_&2&&(z3.$$scope={dirty:_,ctx:f}),iC.$set(z3);const DEe={};_&2&&(DEe.$$scope={dirty:_,ctx:f}),cC.$set(DEe);const GEe={};_&2&&(GEe.$$scope={dirty:_,ctx:f}),FC.$set(GEe);const Q3={};_&2&&(Q3.$$scope={dirty:_,ctx:f}),MC.$set(Q3);const OEe={};_&2&&(OEe.$$scope={dirty:_,ctx:f}),RC.$set(OEe);const VEe={};_&2&&(VEe.$$scope={dirty:_,ctx:f}),PC.$set(VEe);const W3={};_&2&&(W3.$$scope={dirty:_,ctx:f}),QC.$set(W3);const XEe={};_&2&&(XEe.$$scope={dirty:_,ctx:f}),HC.$set(XEe);const zEe={};_&2&&(zEe.$$scope={dirty:_,ctx:f}),t3.$set(zEe);const H3={};_&2&&(H3.$$scope={dirty:_,ctx:f}),n3.$set(H3);const QEe={};_&2&&(QEe.$$scope={dirty:_,ctx:f}),h3.$set(QEe);const WEe={};_&2&&(WEe.$$scope={dirty:_,ctx:f}),u3.$set(WEe);const U3={};_&2&&(U3.$$scope={dirty:_,ctx:f}),b3.$set(U3);const HEe={};_&2&&(HEe.$$scope={dirty:_,ctx:f}),F3.$set(HEe);const UEe={};_&2&&(UEe.$$scope={dirty:_,ctx:f}),E3.$set(UEe);const J3={};_&2&&(J3.$$scope={dirty:_,ctx:f}),w3.$set(J3);const JEe={};_&2&&(JEe.$$scope={dirty:_,ctx:f}),y3.$set(JEe)},i(f){Oqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(_f.$$.fragment,f),E(ZA.$$.fragment,f),E(e6.$$.fragment,f),E(t6.$$.fragment,f),E(pg.$$.fragment,f),E(a6.$$.fragment,f),E(n6.$$.fragment,f),E(s6.$$.fragment,f),E(d6.$$.fragment,f),E(Hg.$$.fragment,f),E(c6.$$.fragment,f),E(f6.$$.fragment,f),E(m6.$$.fragment,f),E(p6.$$.fragment,f),E(Mh.$$.fragment,f),E(Eh.$$.fragment,f),E(u6.$$.fragment,f),E(_6.$$.fragment,f),E(b6.$$.fragment,f),E(T6.$$.fragment,f),E(Gh.$$.fragment,f),E(Oh.$$.fragment,f),E(M6.$$.fragment,f),E(E6.$$.fragment,f),E(C6.$$.fragment,f),E(A6.$$.fragment,f),E(zh.$$.fragment,f),E(y6.$$.fragment,f),E(Pu.$$.fragment,f),E(L6.$$.fragment,f),E(x6.$$.fragment,f),E(k6.$$.fragment,f),E(qu.$$.fragment,f),E(S6.$$.fragment,f),E(w_.$$.fragment,f),E(R6.$$.fragment,f),E(B6.$$.fragment,f),E(I6.$$.fragment,f),E(y_.$$.fragment,f),E(q6.$$.fragment,f),E(f1.$$.fragment,f),E(N6.$$.fragment,f),E(j6.$$.fragment,f),E(G6.$$.fragment,f),E(g1.$$.fragment,f),E(O6.$$.fragment,f),E(J1.$$.fragment,f),E(V6.$$.fragment,f),E(X6.$$.fragment,f),E(Q6.$$.fragment,f),E(K1.$$.fragment,f),E(W6.$$.fragment,f),E(u2.$$.fragment,f),E(H6.$$.fragment,f),E(U6.$$.fragment,f),E(Y6.$$.fragment,f),E(b2.$$.fragment,f),E(K6.$$.fragment,f),E(mb.$$.fragment,f),E(Z6.$$.fragment,f),E(e0.$$.fragment,f),E(r0.$$.fragment,f),E(hb.$$.fragment,f),E(t0.$$.fragment,f),E(zb.$$.fragment,f),E(a0.$$.fragment,f),E(n0.$$.fragment,f),E(l0.$$.fragment,f),E(Wb.$$.fragment,f),E(i0.$$.fragment,f),E(ev.$$.fragment,f),E(d0.$$.fragment,f),E(c0.$$.fragment,f),E(m0.$$.fragment,f),E(rv.$$.fragment,f),E(g0.$$.fragment,f),E(qv.$$.fragment,f),E(h0.$$.fragment,f),E(p0.$$.fragment,f),E(_0.$$.fragment,f),E(jv.$$.fragment,f),E(b0.$$.fragment,f),E(AF.$$.fragment,f),E(v0.$$.fragment,f),E(F0.$$.fragment,f),E(M0.$$.fragment,f),E(LF.$$.fragment,f),E(E0.$$.fragment,f),E(kF.$$.fragment,f),E(C0.$$.fragment,f),E(w0.$$.fragment,f),E(y0.$$.fragment,f),E(RF.$$.fragment,f),E(L0.$$.fragment,f),E(QF.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(S0.$$.fragment,f),E(HF.$$.fragment,f),E(R0.$$.fragment,f),E(YF.$$.fragment,f),E(B0.$$.fragment,f),E(P0.$$.fragment,f),E(q0.$$.fragment,f),E(ZF.$$.fragment,f),E(N0.$$.fragment,f),E(dT.$$.fragment,f),E(j0.$$.fragment,f),E(D0.$$.fragment,f),E(O0.$$.fragment,f),E(fT.$$.fragment,f),E(V0.$$.fragment,f),E(_T.$$.fragment,f),E(X0.$$.fragment,f),E(z0.$$.fragment,f),E(W0.$$.fragment,f),E(vT.$$.fragment,f),E(H0.$$.fragment,f),E(xT.$$.fragment,f),E(U0.$$.fragment,f),E(J0.$$.fragment,f),E(K0.$$.fragment,f),E(kT.$$.fragment,f),E(Z0.$$.fragment,f),E(PT.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(qT.$$.fragment,f),E(ny.$$.fragment,f),E(VT.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(zT.$$.fragment,f),E(cy.$$.fragment,f),E(JT.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(KT.$$.fragment,f),E(py.$$.fragment,f),E(r7.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(a7.$$.fragment,f),E(Ty.$$.fragment,f),E(l7.$$.fragment,f),E(My.$$.fragment,f),E(Ey.$$.fragment,f),E(wy.$$.fragment,f),E(d7.$$.fragment,f),E(Ay.$$.fragment,f),E(p7.$$.fragment,f),E(yy.$$.fragment,f),E(Ly.$$.fragment,f),E($y.$$.fragment,f),E(_7.$$.fragment,f),E(ky.$$.fragment,f),E(F7.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(M7.$$.fragment,f),E(Iy.$$.fragment,f),E(h9.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(u9.$$.fragment,f),E(Gy.$$.fragment,f),E(D9.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(O9.$$.fragment,f),E(Qy.$$.fragment,f),E(oM.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(tM.$$.fragment,f),E(Yy.$$.fragment,f),E(iM.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(cM.$$.fragment,f),E(rL.$$.fragment,f),E(kM.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(RM.$$.fragment,f),E(lL.$$.fragment,f),E(XM.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(QM.$$.fragment,f),E(mL.$$.fragment,f),E(v4.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(T4.$$.fragment,f),E(_L.$$.fragment,f),E(j4.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(G4.$$.fragment,f),E(ML.$$.fragment,f),E(X4.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(Q4.$$.fragment,f),E(LL.$$.fragment,f),E(H4.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(J4.$$.fragment,f),E(RL.$$.fragment,f),E(_E.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(vE.$$.fragment,f),E(NL.$$.fragment,f),E(DE.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(OE.$$.fragment,f),E(VL.$$.fragment,f),E(XE.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(QE.$$.fragment,f),E(HL.$$.fragment,f),E(HE.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(JE.$$.fragment,f),E(ZL.$$.fragment,f),E(M5.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(C5.$$.fragment,f),E(a8.$$.fragment,f),E(B5.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(I5.$$.fragment,f),E(d8.$$.fragment,f),E(U5.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(Y5.$$.fragment,f),E(h8.$$.fragment,f),E(iC.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(cC.$$.fragment,f),E(v8.$$.fragment,f),E(FC.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(MC.$$.fragment,f),E(C8.$$.fragment,f),E(RC.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(PC.$$.fragment,f),E(x8.$$.fragment,f),E(QC.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(HC.$$.fragment,f),E(B8.$$.fragment,f),E(t3.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(n3.$$.fragment,f),E(j8.$$.fragment,f),E(h3.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(u3.$$.fragment,f),E(X8.$$.fragment,f),E(b3.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(F3.$$.fragment,f),E(U8.$$.fragment,f),E(E3.$$.fragment,f),E(Y8.$$.fragment,f),E(K8.$$.fragment,f),E(ex.$$.fragment,f),E(w3.$$.fragment,f),E(ox.$$.fragment,f),E(y3.$$.fragment,f),Oqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(_f.$$.fragment,f),C(ZA.$$.fragment,f),C(e6.$$.fragment,f),C(t6.$$.fragment,f),C(pg.$$.fragment,f),C(a6.$$.fragment,f),C(n6.$$.fragment,f),C(s6.$$.fragment,f),C(d6.$$.fragment,f),C(Hg.$$.fragment,f),C(c6.$$.fragment,f),C(f6.$$.fragment,f),C(m6.$$.fragment,f),C(p6.$$.fragment,f),C(Mh.$$.fragment,f),C(Eh.$$.fragment,f),C(u6.$$.fragment,f),C(_6.$$.fragment,f),C(b6.$$.fragment,f),C(T6.$$.fragment,f),C(Gh.$$.fragment,f),C(Oh.$$.fragment,f),C(M6.$$.fragment,f),C(E6.$$.fragment,f),C(C6.$$.fragment,f),C(A6.$$.fragment,f),C(zh.$$.fragment,f),C(y6.$$.fragment,f),C(Pu.$$.fragment,f),C(L6.$$.fragment,f),C(x6.$$.fragment,f),C(k6.$$.fragment,f),C(qu.$$.fragment,f),C(S6.$$.fragment,f),C(w_.$$.fragment,f),C(R6.$$.fragment,f),C(B6.$$.fragment,f),C(I6.$$.fragment,f),C(y_.$$.fragment,f),C(q6.$$.fragment,f),C(f1.$$.fragment,f),C(N6.$$.fragment,f),C(j6.$$.fragment,f),C(G6.$$.fragment,f),C(g1.$$.fragment,f),C(O6.$$.fragment,f),C(J1.$$.fragment,f),C(V6.$$.fragment,f),C(X6.$$.fragment,f),C(Q6.$$.fragment,f),C(K1.$$.fragment,f),C(W6.$$.fragment,f),C(u2.$$.fragment,f),C(H6.$$.fragment,f),C(U6.$$.fragment,f),C(Y6.$$.fragment,f),C(b2.$$.fragment,f),C(K6.$$.fragment,f),C(mb.$$.fragment,f),C(Z6.$$.fragment,f),C(e0.$$.fragment,f),C(r0.$$.fragment,f),C(hb.$$.fragment,f),C(t0.$$.fragment,f),C(zb.$$.fragment,f),C(a0.$$.fragment,f),C(n0.$$.fragment,f),C(l0.$$.fragment,f),C(Wb.$$.fragment,f),C(i0.$$.fragment,f),C(ev.$$.fragment,f),C(d0.$$.fragment,f),C(c0.$$.fragment,f),C(m0.$$.fragment,f),C(rv.$$.fragment,f),C(g0.$$.fragment,f),C(qv.$$.fragment,f),C(h0.$$.fragment,f),C(p0.$$.fragment,f),C(_0.$$.fragment,f),C(jv.$$.fragment,f),C(b0.$$.fragment,f),C(AF.$$.fragment,f),C(v0.$$.fragment,f),C(F0.$$.fragment,f),C(M0.$$.fragment,f),C(LF.$$.fragment,f),C(E0.$$.fragment,f),C(kF.$$.fragment,f),C(C0.$$.fragment,f),C(w0.$$.fragment,f),C(y0.$$.fragment,f),C(RF.$$.fragment,f),C(L0.$$.fragment,f),C(QF.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(S0.$$.fragment,f),C(HF.$$.fragment,f),C(R0.$$.fragment,f),C(YF.$$.fragment,f),C(B0.$$.fragment,f),C(P0.$$.fragment,f),C(q0.$$.fragment,f),C(ZF.$$.fragment,f),C(N0.$$.fragment,f),C(dT.$$.fragment,f),C(j0.$$.fragment,f),C(D0.$$.fragment,f),C(O0.$$.fragment,f),C(fT.$$.fragment,f),C(V0.$$.fragment,f),C(_T.$$.fragment,f),C(X0.$$.fragment,f),C(z0.$$.fragment,f),C(W0.$$.fragment,f),C(vT.$$.fragment,f),C(H0.$$.fragment,f),C(xT.$$.fragment,f),C(U0.$$.fragment,f),C(J0.$$.fragment,f),C(K0.$$.fragment,f),C(kT.$$.fragment,f),C(Z0.$$.fragment,f),C(PT.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(qT.$$.fragment,f),C(ny.$$.fragment,f),C(VT.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(zT.$$.fragment,f),C(cy.$$.fragment,f),C(JT.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(KT.$$.fragment,f),C(py.$$.fragment,f),C(r7.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(a7.$$.fragment,f),C(Ty.$$.fragment,f),C(l7.$$.fragment,f),C(My.$$.fragment,f),C(Ey.$$.fragment,f),C(wy.$$.fragment,f),C(d7.$$.fragment,f),C(Ay.$$.fragment,f),C(p7.$$.fragment,f),C(yy.$$.fragment,f),C(Ly.$$.fragment,f),C($y.$$.fragment,f),C(_7.$$.fragment,f),C(ky.$$.fragment,f),C(F7.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(M7.$$.fragment,f),C(Iy.$$.fragment,f),C(h9.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(u9.$$.fragment,f),C(Gy.$$.fragment,f),C(D9.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(O9.$$.fragment,f),C(Qy.$$.fragment,f),C(oM.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(tM.$$.fragment,f),C(Yy.$$.fragment,f),C(iM.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(cM.$$.fragment,f),C(rL.$$.fragment,f),C(kM.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(RM.$$.fragment,f),C(lL.$$.fragment,f),C(XM.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(QM.$$.fragment,f),C(mL.$$.fragment,f),C(v4.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(T4.$$.fragment,f),C(_L.$$.fragment,f),C(j4.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(G4.$$.fragment,f),C(ML.$$.fragment,f),C(X4.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(Q4.$$.fragment,f),C(LL.$$.fragment,f),C(H4.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(J4.$$.fragment,f),C(RL.$$.fragment,f),C(_E.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(vE.$$.fragment,f),C(NL.$$.fragment,f),C(DE.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(OE.$$.fragment,f),C(VL.$$.fragment,f),C(XE.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(QE.$$.fragment,f),C(HL.$$.fragment,f),C(HE.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(JE.$$.fragment,f),C(ZL.$$.fragment,f),C(M5.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(C5.$$.fragment,f),C(a8.$$.fragment,f),C(B5.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(I5.$$.fragment,f),C(d8.$$.fragment,f),C(U5.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(Y5.$$.fragment,f),C(h8.$$.fragment,f),C(iC.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(cC.$$.fragment,f),C(v8.$$.fragment,f),C(FC.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(MC.$$.fragment,f),C(C8.$$.fragment,f),C(RC.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(PC.$$.fragment,f),C(x8.$$.fragment,f),C(QC.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(HC.$$.fragment,f),C(B8.$$.fragment,f),C(t3.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(n3.$$.fragment,f),C(j8.$$.fragment,f),C(h3.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(u3.$$.fragment,f),C(X8.$$.fragment,f),C(b3.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(F3.$$.fragment,f),C(U8.$$.fragment,f),C(E3.$$.fragment,f),C(Y8.$$.fragment,f),C(K8.$$.fragment,f),C(ex.$$.fragment,f),C(w3.$$.fragment,f),C(ox.$$.fragment,f),C(y3.$$.fragment,f),Oqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(jPe),f&&t(pi),w(YA),f&&t(DPe),f&&t(kn),f&&t(GPe),w(KA,f),f&&t(OPe),f&&t(v$),f&&t(VPe),w(_f,f),f&&t(XPe),f&&t(ui),w(ZA),f&&t(zPe),f&&t(Co),w(e6),w(t6),w(pg),w(a6),f&&t(QPe),f&&t(bi),w(n6),f&&t(WPe),f&&t(wo),w(s6),w(d6),w(Hg),w(c6),f&&t(HPe),f&&t(vi),w(f6),f&&t(UPe),f&&t(Ao),w(m6),w(p6),w(Mh),w(Eh),w(u6),f&&t(JPe),f&&t(Fi),w(_6),f&&t(YPe),f&&t(yo),w(b6),w(T6),w(Gh),w(Oh),w(M6),f&&t(KPe),f&&t(Mi),w(E6),f&&t(ZPe),f&&t(Lo),w(C6),w(A6),w(zh),w(y6),w(Pu),f&&t(eIe),f&&t(wi),w(L6),f&&t(oIe),f&&t(xo),w(x6),w(k6),w(qu),w(S6),w(w_),f&&t(rIe),f&&t(Li),w(R6),f&&t(tIe),f&&t($o),w(B6),w(I6),w(y_),w(q6),w(f1),f&&t(aIe),f&&t(ki),w(N6),f&&t(nIe),f&&t(ko),w(j6),w(G6),w(g1),w(O6),w(J1),f&&t(sIe),f&&t(Bi),w(V6),f&&t(lIe),f&&t(So),w(X6),w(Q6),w(K1),w(W6),w(u2),f&&t(iIe),f&&t(qi),w(H6),f&&t(dIe),f&&t(Ro),w(U6),w(Y6),w(b2),w(K6),w(mb),f&&t(cIe),f&&t(Di),w(Z6),f&&t(fIe),f&&t(Bo),w(e0),w(r0),w(hb),w(t0),w(zb),f&&t(mIe),f&&t(Vi),w(a0),f&&t(gIe),f&&t(Po),w(n0),w(l0),w(Wb),w(i0),w(ev),f&&t(hIe),f&&t(Qi),w(d0),f&&t(pIe),f&&t(Io),w(c0),w(m0),w(rv),w(g0),w(qv),f&&t(uIe),f&&t(Ui),w(h0),f&&t(_Ie),f&&t(qo),w(p0),w(_0),w(jv),w(b0),w(AF),f&&t(bIe),f&&t(Ki),w(v0),f&&t(vIe),f&&t(No),w(F0),w(M0),w(LF),w(E0),w(kF),f&&t(FIe),f&&t(od),w(C0),f&&t(TIe),f&&t(jo),w(w0),w(y0),w(RF),w(L0),w(QF),f&&t(MIe),f&&t(ad),w(x0),f&&t(EIe),f&&t(Do),w($0),w(S0),w(HF),w(R0),w(YF),f&&t(CIe),f&&t(ld),w(B0),f&&t(wIe),f&&t(Go),w(P0),w(q0),w(ZF),w(N0),w(dT),f&&t(AIe),f&&t(cd),w(j0),f&&t(yIe),f&&t(Oo),w(D0),w(O0),w(fT),w(V0),w(_T),f&&t(LIe),f&&t(gd),w(X0),f&&t(xIe),f&&t(Vo),w(z0),w(W0),w(vT),w(H0),w(xT),f&&t($Ie),f&&t(ud),w(U0),f&&t(kIe),f&&t(Xo),w(J0),w(K0),w(kT),w(Z0),w(PT),f&&t(SIe),f&&t(vd),w(oy),f&&t(RIe),f&&t(zo),w(ry),w(ay),w(qT),w(ny),w(VT),f&&t(BIe),f&&t(Md),w(sy),f&&t(PIe),f&&t(Qo),w(ly),w(dy),w(zT),w(cy),w(JT),f&&t(IIe),f&&t(Ad),w(fy),f&&t(qIe),f&&t(Wo),w(my),w(hy),w(KT),w(py),w(r7),f&&t(NIe),f&&t(xd),w(_y),f&&t(jIe),f&&t(Ho),w(by),w(Fy),w(a7),w(Ty),w(l7),f&&t(DIe),f&&t(Sd),w(My),f&&t(GIe),f&&t(Uo),w(Ey),w(wy),w(d7),w(Ay),w(p7),f&&t(OIe),f&&t(Pd),w(yy),f&&t(VIe),f&&t(Jo),w(Ly),w($y),w(_7),w(ky),w(F7),f&&t(XIe),f&&t(Nd),w(Sy),f&&t(zIe),f&&t(Yo),w(Ry),w(Py),w(M7),w(Iy),w(h9),f&&t(QIe),f&&t(Gd),w(qy),f&&t(WIe),f&&t(Ko),w(Ny),w(Dy),w(u9),w(Gy),w(D9),f&&t(HIe),f&&t(Xd),w(Oy),f&&t(UIe),f&&t(Zo),w(Vy),w(zy),w(O9),w(Qy),w(oM),f&&t(JIe),f&&t(Wd),w(Wy),f&&t(YIe),f&&t(er),w(Hy),w(Jy),w(tM),w(Yy),w(iM),f&&t(KIe),f&&t(Jd),w(Ky),f&&t(ZIe),f&&t(or),w(Zy),w(oL),w(cM),w(rL),w(kM),f&&t(eqe),f&&t(Zd),w(tL),f&&t(oqe),f&&t(rr),w(aL),w(sL),w(RM),w(lL),w(XM),f&&t(rqe),f&&t(rc),w(iL),f&&t(tqe),f&&t(tr),w(dL),w(fL),w(QM),w(mL),w(v4),f&&t(aqe),f&&t(nc),w(gL),f&&t(nqe),f&&t(ar),w(hL),w(uL),w(T4),w(_L),w(j4),f&&t(sqe),f&&t(ic),w(bL),f&&t(lqe),f&&t(nr),w(vL),w(TL),w(G4),w(ML),w(X4),f&&t(iqe),f&&t(fc),w(CL),f&&t(dqe),f&&t(sr),w(wL),w(yL),w(Q4),w(LL),w(H4),f&&t(cqe),f&&t(hc),w(xL),f&&t(fqe),f&&t(lr),w($L),w(SL),w(J4),w(RL),w(_E),f&&t(mqe),f&&t(_c),w(BL),f&&t(gqe),f&&t(ir),w(PL),w(qL),w(vE),w(NL),w(DE),f&&t(hqe),f&&t(Fc),w(jL),f&&t(pqe),f&&t(dr),w(DL),w(OL),w(OE),w(VL),w(XE),f&&t(uqe),f&&t(Ec),w(XL),f&&t(_qe),f&&t(cr),w(zL),w(WL),w(QE),w(HL),w(HE),f&&t(bqe),f&&t(Ac),w(UL),f&&t(vqe),f&&t(fr),w(JL),w(KL),w(JE),w(ZL),w(M5),f&&t(Fqe),f&&t(xc),w(e8),f&&t(Tqe),f&&t(mr),w(o8),w(t8),w(C5),w(a8),w(B5),f&&t(Mqe),f&&t(Sc),w(n8),f&&t(Eqe),f&&t(gr),w(s8),w(i8),w(I5),w(d8),w(U5),f&&t(Cqe),f&&t(Pc),w(c8),f&&t(wqe),f&&t(hr),w(f8),w(g8),w(Y5),w(h8),w(iC),f&&t(Aqe),f&&t(Nc),w(p8),f&&t(yqe),f&&t(pr),w(u8),w(b8),w(cC),w(v8),w(FC),f&&t(Lqe),f&&t(Gc),w(F8),f&&t(xqe),f&&t(ur),w(T8),w(E8),w(MC),w(C8),w(RC),f&&t($qe),f&&t(Xc),w(w8),f&&t(kqe),f&&t(_r),w(A8),w(L8),w(PC),w(x8),w(QC),f&&t(Sqe),f&&t(Wc),w($8),f&&t(Rqe),f&&t(br),w(k8),w(R8),w(HC),w(B8),w(t3),f&&t(Bqe),f&&t(Jc),w(P8),f&&t(Pqe),f&&t(vr),w(I8),w(N8),w(n3),w(j8),w(h3),f&&t(Iqe),f&&t(Zc),w(D8),f&&t(qqe),f&&t(Fr),w(G8),w(V8),w(u3),w(X8),w(b3),f&&t(Nqe),f&&t(rf),w(z8),f&&t(jqe),f&&t(Tr),w(Q8),w(H8),w(F3),w(U8),w(E3),f&&t(Dqe),f&&t(nf),w(Y8),f&&t(Gqe),f&&t(Mr),w(K8),w(ex),w(w3),w(ox),w(y3)}}}const Z0t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function eyt(A){return e6t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lyt extends JAt{constructor(g){super();YAt(this,g,eyt,K0t,KAt,{})}}export{lyt as default,Z0t as metadata};
